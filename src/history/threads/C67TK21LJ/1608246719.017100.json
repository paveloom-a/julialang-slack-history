[{"client_msg_id":"77c0f80c-3e73-4584-a27c-b354ed4fc926","type":"message","text":"Gripe: “iteration is deliberately unsupported for CartesianIndex”. Why, oh why though??","user":"U73KENNG4","ts":"1608246719.017100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SbNB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Gripe: “iteration is deliberately unsupported for CartesianIndex”. Why, oh why though??"}]}]}],"thread_ts":"1608246719.017100","reply_count":19,"reply_users_count":5,"latest_reply":"1608282954.026600","reply_users":["UH108BJB1","U67G3QRJM","U6740K1SP","UH24GRBLL","U73KENNG4"],"subscribed":false,"reactions":[{"name":"point_up","users":["U67G3QRJM","URN898S15"],"count":2},{"name":"christmas_tree","users":["ULGMQ3LCB","U66M57AN4"],"count":2}]},{"client_msg_id":"9f9a16a4-c7fe-442d-92f6-a7fad6049ee0","type":"message","text":"My understanding is that we want to make a clear difference between tuple `(1, 1)` and `CartesianIndex(1, 1)`. As CartesianIndex is an atomic index, `A[CartesianIndex(1, 1)]` , while tuple needs to be expanded  `A[(1, 1)…]` .\n\nThis might just be a tradeoff to avoid unnecessary over-complicated design. Hypothetically we could support iteration on `CartesianIndex`, but that might have unexpected behaviors unless we fully test it. One example I consistently meet is `CartesianIndex(1, 1) .- 1` , this is clear, but how about `CartesianIndex(1, 1) ./ 2`? There are many such limitations when using CartesianIndex, so I think it’s a good design to limit it into a pure atomic index concept, rather than some generic container (tuple).\n\nJust a trade-off to get a clean design and implementation, I guess.","user":"UH108BJB1","ts":"1608247901.017500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MgH9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My understanding is that we want to make a clear difference between tuple "},{"type":"text","text":"(1, 1)","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"CartesianIndex(1, 1)","style":{"code":true}},{"type":"text","text":". As CartesianIndex is an atomic index, "},{"type":"text","text":"A[CartesianIndex(1, 1)]","style":{"code":true}},{"type":"text","text":" , while tuple needs to be expanded  "},{"type":"text","text":"A[(1, 1)…]","style":{"code":true}},{"type":"text","text":" .\n\nThis might just be a tradeoff to avoid unnecessary over-complicated design. Hypothetically we could support iteration on "},{"type":"text","text":"CartesianIndex","style":{"code":true}},{"type":"text","text":", but that might have unexpected behaviors unless we fully test it. One example I consistently meet is "},{"type":"text","text":"CartesianIndex(1, 1) .- 1","style":{"code":true}},{"type":"text","text":" , this is clear, but how about "},{"type":"text","text":"CartesianIndex(1, 1) ./ 2","style":{"code":true}},{"type":"text","text":"? There are many such limitations when using CartesianIndex, so I think it’s a good design to limit it into a pure atomic index concept, rather than some generic container (tuple).\n\nJust a trade-off to get a clean design and implementation, I guess."}]}]}],"thread_ts":"1608246719.017100","parent_user_id":"U73KENNG4"},{"client_msg_id":"f49fb751-04e9-47bd-8dd0-3458d3dd07c9","type":"message","text":"After all, there’s no performance difference to manually convert it to a `Tuple` or `StaticArrays.SVector` from what I’ve tested.","user":"UH108BJB1","ts":"1608248161.018200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HjVv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"After all, there’s no performance difference to manually convert it to a "},{"type":"text","text":"Tuple","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"StaticArrays.SVector","style":{"code":true}},{"type":"text","text":" from what I’ve tested."}]}]}],"thread_ts":"1608246719.017100","parent_user_id":"U73KENNG4"},{"client_msg_id":"893cf317-5f6b-490c-a9d7-15cd718fd3fc","type":"message","text":"Many times I have wanted to write `x, y = I` where `I` is a `CartesianIndex`","user":"U67G3QRJM","ts":"1608249667.018500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"URRo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Many times I have wanted to write "},{"type":"text","text":"x, y = I","style":{"code":true}},{"type":"text","text":" where "},{"type":"text","text":"I","style":{"code":true}},{"type":"text","text":" is a "},{"type":"text","text":"CartesianIndex","style":{"code":true}}]}]}],"thread_ts":"1608246719.017100","parent_user_id":"U73KENNG4","reactions":[{"name":"point_up","users":["U9V8ZQVEY","U011LUQ182G","UH8A351DJ","U73KENNG4","UP0P065ME"],"count":5}]},{"client_msg_id":"a9182ac6-126c-4714-a4db-d2bd4612b118","type":"message","text":"Instead I have to write `I.I`. Seems wrong","user":"U67G3QRJM","ts":"1608249675.018700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L/F1S","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Instead I have to write "},{"type":"text","text":"I.I","style":{"code":true}},{"type":"text","text":". Seems wrong"}]}]}],"thread_ts":"1608246719.017100","parent_user_id":"U73KENNG4"},{"client_msg_id":"ff660366-a88a-430e-8c62-fe86602dad36","type":"message","text":"It’s also a performance trap","user":"U6740K1SP","ts":"1608255785.019500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bEY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It’s also a performance trap"}]}]}],"thread_ts":"1608246719.017100","parent_user_id":"U73KENNG4"},{"client_msg_id":"a61a88fa-5064-4443-b525-e87efc2f4d8b","type":"message","text":"but I agree","user":"U6740K1SP","ts":"1608255802.019700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0yk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but I agree"}]}]}],"thread_ts":"1608246719.017100","parent_user_id":"U73KENNG4"},{"client_msg_id":"df29caf3-72ba-4359-a382-fd5be8a34bd7","type":"message","text":"IMO if you have to destructure the CartesianIndex, you're not really thinking in CartesianIndices yet :man-shrugging:","user":"UH24GRBLL","ts":"1608272163.021700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WKheC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"IMO if you have to destructure the CartesianIndex, you're not really thinking in CartesianIndices yet "},{"type":"emoji","name":"man-shrugging"}]}]}],"thread_ts":"1608246719.017100","parent_user_id":"U73KENNG4","reactions":[{"name":"+1","users":["UH108BJB1","U67G3QRJM","UKG4WF8PJ"],"count":3},{"name":"galaxy-brain","users":["U6740K1SP"],"count":1}]},{"client_msg_id":"8342173d-7efd-4da4-915d-35bf3e89c21a","type":"message","text":"presumably you want to do something with the individual indices and I cant really think of a situation where addition with another index would not achieve the same thing more cleanly","user":"UH24GRBLL","ts":"1608272207.021900","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1608272226.000000"},"blocks":[{"type":"rich_text","block_id":"PC2vq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"presumably you want to do something with the individual indices and I cant really think of a situation where addition with another index would not achieve the same thing more cleanly"}]}]}],"thread_ts":"1608246719.017100","parent_user_id":"U73KENNG4"},{"client_msg_id":"5ee442df-eab2-4efc-b093-7a18921cd7b3","type":"message","text":"if it's filtering, I usually do that at the beginning when I create them, waay before I'd index with them :thinking_face:","user":"UH24GRBLL","ts":"1608272500.022500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iXA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if it's filtering, I usually do that at the beginning when I create them, waay before I'd index with them "},{"type":"emoji","name":"thinking_face"}]}]}],"thread_ts":"1608246719.017100","parent_user_id":"U73KENNG4"},{"client_msg_id":"646c2530-f2bb-44bd-b72a-58c30b8ed470","type":"message","text":"The example `CartesianIndex(1, 1) .- 1` is one of the places where I often meet it","user":"U73KENNG4","ts":"1608274680.023200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aLSMe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The example "},{"type":"text","text":"CartesianIndex(1, 1) .- 1","style":{"code":true}},{"type":"text","text":" is one of the places where I often meet it"}]}]}],"thread_ts":"1608246719.017100","parent_user_id":"U73KENNG4"},{"client_msg_id":"e48dc535-5573-4699-b035-e1120be960a2","type":"message","text":"It is, and it’s very easy to work it around. As far as I’m understanding, disabling this makes the `CartesianIndex` implementation clean (and correct).","user":"UH108BJB1","ts":"1608274749.023400","team":"T68168MUP","edited":{"user":"UH108BJB1","ts":"1608274787.000000"},"blocks":[{"type":"rich_text","block_id":"KLkF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It is, and it’s very easy to work it around. As far as I’m understanding, disabling this makes the "},{"type":"text","text":"CartesianIndex","style":{"code":true}},{"type":"text","text":" implementation clean (and correct)."}]}]}],"thread_ts":"1608246719.017100","parent_user_id":"U73KENNG4"},{"client_msg_id":"1fc9f32e-9086-459e-8422-7dfc726d9a4f","type":"message","text":"Do you mean `Tuple(CartesianIndex(1, 1)...)  .- 1`? Looks  like C++ to me","user":"U73KENNG4","ts":"1608274828.023900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bHZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Do you mean "},{"type":"text","text":"Tuple(CartesianIndex(1, 1)...)  .- 1","style":{"code":true}},{"type":"text","text":"? Looks  like C++ to me"}]}]}],"thread_ts":"1608246719.017100","parent_user_id":"U73KENNG4"},{"client_msg_id":"8db742a5-fb77-4674-b0ec-e308285cdef8","type":"message","text":"I would define two one-liners for this:\n\n```_add(x::CartesianIndex, y::Integer) = CartesianIndex(_add.(x.I, y))\n_add(x, y) = x + y```","user":"UH108BJB1","ts":"1608274999.024100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"431D8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I would define two one-liners for this:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"_add(x::CartesianIndex, y::Integer) = CartesianIndex(_add.(x.I, y))\n_add(x, y) = x + y"}]}]}],"thread_ts":"1608246719.017100","parent_user_id":"U73KENNG4"},{"client_msg_id":"f5cffe61-5e78-4d2d-b744-465f98be302c","type":"message","text":"I'd just do `CartesianIndex(1,1) - one(typeof(CartesianIndex(1,1))`","user":"UH24GRBLL","ts":"1608275739.024300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"16o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'd just do "},{"type":"text","text":"CartesianIndex(1,1) - one(typeof(CartesianIndex(1,1))","style":{"code":true}}]}]}],"thread_ts":"1608246719.017100","parent_user_id":"U73KENNG4"},{"client_msg_id":"b0113b9f-a339-45ca-801b-789badf4f78e","type":"message","text":"or, if you have it saved in variable `a`: `a - one(a)`","user":"UH24GRBLL","ts":"1608275754.024500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Zc=Rc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or, if you have it saved in variable "},{"type":"text","text":"a","style":{"code":true}},{"type":"text","text":": "},{"type":"text","text":"a - one(a)","style":{"code":true}}]}]}],"thread_ts":"1608246719.017100","parent_user_id":"U73KENNG4"},{"client_msg_id":"6ed9bebe-46de-44d9-99dd-33588b3bbcc1","type":"message","text":"this works because CartesianIndex is parametrized by its dimensionality","user":"UH24GRBLL","ts":"1608275853.024700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L7Jle","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this works because CartesianIndex is parametrized by its dimensionality"}]}]}],"thread_ts":"1608246719.017100","parent_user_id":"U73KENNG4"},{"client_msg_id":"ecdcc6ae-0a6e-4bc8-802e-44579be9728b","type":"message","text":"```julia&gt; CartesianIndex(1,1) |&gt; typeof\nCartesianIndex{2}```","user":"UH24GRBLL","ts":"1608275876.024900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dPMHK","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> CartesianIndex(1,1) |> typeof\nCartesianIndex{2}"}]}]}],"thread_ts":"1608246719.017100","parent_user_id":"U73KENNG4"},{"client_msg_id":"8fab044f-be85-4994-a709-f2bfc6edc153","type":"message","text":"y’all clearly aren’t doing enough quick-and-dirty scripting :slightly_smiling_face:","user":"U73KENNG4","ts":"1608277889.025200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QSK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"y’all clearly aren’t doing enough quick-and-dirty scripting "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1608246719.017100","parent_user_id":"U73KENNG4","reactions":[{"name":"heart","users":["U881D0W2C","UP0P065ME"],"count":2}]},{"client_msg_id":"8ee7797f-89bf-4757-97bc-896063ea7691","type":"message","text":"work smarter, not dirtier :p","user":"UH24GRBLL","ts":"1608282954.026600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7G7Ti","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"work smarter, not dirtier :p"}]}]}],"thread_ts":"1608246719.017100","parent_user_id":"U73KENNG4"}]