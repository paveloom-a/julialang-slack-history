[{"client_msg_id":"f21fdbee-4008-4dd2-90e0-57c3e3856b38","type":"message","text":"Got this recursive keysort for nested named tuples working pretty well:\n```julia&gt; nt\n(p = (m = (d = :d, u = :u, h = :h), j = (p = :p, j = :j, b = :b), k = (y = :y, s = :s, c = :c)), j = (l = (a = :a, f = :f, e = :e), f = (o = :o, y = :y, q = :q), p = (g = :g, k = :k, p = :p)), a = (s = (n = :n, h = :h, i = :i), m = (i = :i, w = :w, e = :e), o = (x = :x, t = :t, r = :r)))\n\njulia&gt; @btime keysort($nt)\n  5.520 ns (0 allocations: 0 bytes)\n(a = (m = (e = :e, i = :i, w = :w), o = (r = :r, t = :t, x = :x), s = (h = :h, i = :i, n = :n)), j = (f = (o = :o, q = :q, y = :y), l = (a = :a, e = :e, f = :f), p = (g = :g, k = :k, p = :p)), p = (j = (b = :b, j = :j, p = :p), k = (c = :c, s = :s, y = :y), m = (d = :d, h = :h, u = :u)))```","user":"U81PB6N77","ts":"1608313780.433000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YBO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Got this recursive keysort for nested named tuples working pretty well:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> nt\n(p = (m = (d = :d, u = :u, h = :h), j = (p = :p, j = :j, b = :b), k = (y = :y, s = :s, c = :c)), j = (l = (a = :a, f = :f, e = :e), f = (o = :o, y = :y, q = :q), p = (g = :g, k = :k, p = :p)), a = (s = (n = :n, h = :h, i = :i), m = (i = :i, w = :w, e = :e), o = (x = :x, t = :t, r = :r)))\n\njulia> @btime keysort($nt)\n  5.520 ns (0 allocations: 0 bytes)\n(a = (m = (e = :e, i = :i, w = :w), o = (r = :r, t = :t, x = :x), s = (h = :h, i = :i, n = :n)), j = (f = (o = :o, q = :q, y = :y), l = (a = :a, e = :e, f = :f), p = (g = :g, k = :k, p = :p)), p = (j = (b = :b, j = :j, p = :p), k = (c = :c, s = :s, y = :y), m = (d = :d, h = :h, u = :u)))"}]}]}],"thread_ts":"1608313780.433000","reply_count":8,"reply_users_count":2,"latest_reply":"1608435203.438300","reply_users":["U81PB6N77","U9JNHB83X"],"subscribed":false},{"client_msg_id":"2ac119fd-30ca-48b4-8b77-e3822a0f50ad","type":"message","text":":point_up: This is a building block for managing traces in an efficient way, guess that's not obvious without context","user":"U81PB6N77","ts":"1608314955.433100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OIe","elements":[{"type":"rich_text_section","elements":[{"type":"emoji","name":"point_up"},{"type":"text","text":" This is a building block for managing traces in an efficient way, guess that's not obvious without context"}]}]}],"thread_ts":"1608313780.433000","parent_user_id":"U81PB6N77"},{"client_msg_id":"659068f2-edab-4850-9e82-98467a82f0e5","type":"message","text":"Dang that's quick.","user":"U9JNHB83X","ts":"1608397344.436500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UHqs=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Dang that's quick."}]}]}],"thread_ts":"1608313780.433000","parent_user_id":"U81PB6N77"},{"client_msg_id":"68e19f52-2ddb-4512-a309-d27cace59740","type":"message","text":"It's all static for this size. Much bigger and you hit the recursion limit. Wish we could adjust that on the fly, it's kind of annoying.","user":"U81PB6N77","ts":"1608398049.436700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1Af4B","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's all static for this size. Much bigger and you hit the recursion limit. Wish we could adjust that on the fly, it's kind of annoying."}]}]}],"thread_ts":"1608313780.433000","parent_user_id":"U81PB6N77"},{"client_msg_id":"c088e919-9e21-4ff2-bcd9-ce138d6441e5","type":"message","text":"Bigger in terms of nested depth?","user":"U9JNHB83X","ts":"1608408844.437500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MAOP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Bigger in terms of nested depth?"}]}]}],"thread_ts":"1608313780.433000","parent_user_id":"U81PB6N77"},{"client_msg_id":"efd593ba-e9df-4490-81af-6d9cfbb6af5f","type":"message","text":"If I start with\n```\nfunction randnt(width, depth)\n    k = unique(Symbol.(rand('a':'z', width)))\n    if depth ≤ 1\n        return namedtuple(k)(k)\n    else\n        nts = Tuple((randnt(width, depth-1) for _ in 1:length(k)))\n        return namedtuple(k)(nts)\n    end\nend \n\n\nfunction time_keysort()\n    println(\"w d time(ns)\")\n    for w in 1:4\n        for d in 1:4\n            x = randnt(w,d)\n            keysort(x)\n            t = 1e9 * (@belapsed keysort($x))\n            println(w, \" \",d, \" \", t)\n        end\n    end\nend```\nthen\n```julia&gt; time_keysort()\nw d time(ns)\n1 1 1.172\n1 2 1.172\n1 3 1.172\n1 4 1.172\n2 1 1.172\n2 2 1.412\n2 3 2.534\n2 4 3.226\n3 1 107.45815450643777\n3 2 2.775\n3 3 4.398\n3 4 417.83417085427135\n4 1 153.16448152562575\n4 2 3.656\n4 3 317.343347639485\n4 4 1513.9```\nI'd guess some of this is just pathological random choices from `randnt`. Also, (5,5) gives a tree with 3125 leaves, and my function to fill this from a length-3125 tuple starts to have trouble","user":"U81PB6N77","ts":"1608411252.437700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"F2D","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If I start with\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"\nfunction randnt(width, depth)\n    k = unique(Symbol.(rand('a':'z', width)))\n    if depth ≤ 1\n        return namedtuple(k)(k)\n    else\n        nts = Tuple((randnt(width, depth-1) for _ in 1:length(k)))\n        return namedtuple(k)(nts)\n    end\nend \n\n\nfunction time_keysort()\n    println(\"w d time(ns)\")\n    for w in 1:4\n        for d in 1:4\n            x = randnt(w,d)\n            keysort(x)\n            t = 1e9 * (@belapsed keysort($x))\n            println(w, \" \",d, \" \", t)\n        end\n    end\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"then\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> time_keysort()\nw d time(ns)\n1 1 1.172\n1 2 1.172\n1 3 1.172\n1 4 1.172\n2 1 1.172\n2 2 1.412\n2 3 2.534\n2 4 3.226\n3 1 107.45815450643777\n3 2 2.775\n3 3 4.398\n3 4 417.83417085427135\n4 1 153.16448152562575\n4 2 3.656\n4 3 317.343347639485\n4 4 1513.9"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nI'd guess some of this is just pathological random choices from "},{"type":"text","text":"randnt","style":{"code":true}},{"type":"text","text":". Also, (5,5) gives a tree with 3125 leaves, and my function to fill this from a length-3125 tuple starts to have trouble"}]}]}],"thread_ts":"1608313780.433000","parent_user_id":"U81PB6N77"},{"client_msg_id":"5b73422b-bbb0-4380-b1bd-7aa3a77dbd94","type":"message","text":"Width alone can also become a problem:\n```julia&gt; nt = randnt(100,1)\n(l = :l, f = :f, m = :m, v = :v, d = :d, y = :y, c = :c, o = :o, u = :u, g = :g, k = :k, w = :w, b = :b, n = :n, r = :r, e = :e, t = :t, x = :x, i = :i, a = :a, s = :s, z = :z, j = :j, p = :p, h = :h)\n\njulia&gt; @btime keysort($nt)\n  2.155 μs (2 allocations: 416 bytes)\n(a = :a, b = :b, c = :c, d = :d, e = :e, f = :f, g = :g, h = :h, i = :i, j = :j, k = :k, l = :l, m = :m, n = :n, o = :o, p = :p, r = :r, s = :s, t = :t, u = :u, v = :v, w = :w, x = :x, y = :y, z = :z)```\n:disappointed:","user":"U81PB6N77","ts":"1608411513.437900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"epV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Width alone can also become a problem:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> nt = randnt(100,1)\n(l = :l, f = :f, m = :m, v = :v, d = :d, y = :y, c = :c, o = :o, u = :u, g = :g, k = :k, w = :w, b = :b, n = :n, r = :r, e = :e, t = :t, x = :x, i = :i, a = :a, s = :s, z = :z, j = :j, p = :p, h = :h)\n\njulia> @btime keysort($nt)\n  2.155 μs (2 allocations: 416 bytes)\n(a = :a, b = :b, c = :c, d = :d, e = :e, f = :f, g = :g, h = :h, i = :i, j = :j, k = :k, l = :l, m = :m, n = :n, o = :o, p = :p, r = :r, s = :s, t = :t, u = :u, v = :v, w = :w, x = :x, y = :y, z = :z)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n"},{"type":"emoji","name":"disappointed"}]}]}],"thread_ts":"1608313780.433000","parent_user_id":"U81PB6N77"},{"client_msg_id":"5de5080d-3591-4424-9b26-23fc88c70816","type":"message","text":"Ouch, that could be an issue for very large models. Why is the sorting needed again?","user":"U9JNHB83X","ts":"1608425017.438100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"S1+u","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ouch, that could be an issue for very large models. Why is the sorting needed again?"}]}]}],"thread_ts":"1608313780.433000","parent_user_id":"U81PB6N77"},{"type":"message","subtype":"thread_broadcast","text":"I've had some weirdness come up in Soss once in a while that traces back to named tuples being ordered.\n\n<https://github.com/simonbyrne/KeywordDispatch.jl> has a nice trick here, basically sort the named tuple before passing to the call. For small named tuples that works great, but with a few levels of nesting there's a fair amount of overhead.\n\nSo the idea here is to instead just sort once, recursively, and then use that in all calls. I expect this will also allow a recursive merge to be faster, since we can walk linearly through both arguments.","user":"U81PB6N77","ts":"1608435203.438300","thread_ts":"1608313780.433000","root":{"client_msg_id":"f21fdbee-4008-4dd2-90e0-57c3e3856b38","type":"message","text":"Got this recursive keysort for nested named tuples working pretty well:\n```julia&gt; nt\n(p = (m = (d = :d, u = :u, h = :h), j = (p = :p, j = :j, b = :b), k = (y = :y, s = :s, c = :c)), j = (l = (a = :a, f = :f, e = :e), f = (o = :o, y = :y, q = :q), p = (g = :g, k = :k, p = :p)), a = (s = (n = :n, h = :h, i = :i), m = (i = :i, w = :w, e = :e), o = (x = :x, t = :t, r = :r)))\n\njulia&gt; @btime keysort($nt)\n  5.520 ns (0 allocations: 0 bytes)\n(a = (m = (e = :e, i = :i, w = :w), o = (r = :r, t = :t, x = :x), s = (h = :h, i = :i, n = :n)), j = (f = (o = :o, q = :q, y = :y), l = (a = :a, e = :e, f = :f), p = (g = :g, k = :k, p = :p)), p = (j = (b = :b, j = :j, p = :p), k = (c = :c, s = :s, y = :y), m = (d = :d, h = :h, u = :u)))```","user":"U81PB6N77","ts":"1608313780.433000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YBO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Got this recursive keysort for nested named tuples working pretty well:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> nt\n(p = (m = (d = :d, u = :u, h = :h), j = (p = :p, j = :j, b = :b), k = (y = :y, s = :s, c = :c)), j = (l = (a = :a, f = :f, e = :e), f = (o = :o, y = :y, q = :q), p = (g = :g, k = :k, p = :p)), a = (s = (n = :n, h = :h, i = :i), m = (i = :i, w = :w, e = :e), o = (x = :x, t = :t, r = :r)))\n\njulia> @btime keysort($nt)\n  5.520 ns (0 allocations: 0 bytes)\n(a = (m = (e = :e, i = :i, w = :w), o = (r = :r, t = :t, x = :x), s = (h = :h, i = :i, n = :n)), j = (f = (o = :o, q = :q, y = :y), l = (a = :a, e = :e, f = :f), p = (g = :g, k = :k, p = :p)), p = (j = (b = :b, j = :j, p = :p), k = (c = :c, s = :s, y = :y), m = (d = :d, h = :h, u = :u)))"}]}]}],"thread_ts":"1608313780.433000","reply_count":8,"reply_users_count":2,"latest_reply":"1608435203.438300","reply_users":["U81PB6N77","U9JNHB83X"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"o=4a0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I've had some weirdness come up in Soss once in a while that traces back to named tuples being ordered.\n\n"},{"type":"link","url":"https://github.com/simonbyrne/KeywordDispatch.jl"},{"type":"text","text":" has a nice trick here, basically sort the named tuple before passing to the call. For small named tuples that works great, but with a few levels of nesting there's a fair amount of overhead.\n\nSo the idea here is to instead just sort once, recursively, and then use that in all calls. I expect this will also allow a recursive merge to be faster, since we can walk linearly through both arguments."}]}]}],"client_msg_id":"5a9bb67a-f820-4d5d-a2ae-92108b87dee5"}]