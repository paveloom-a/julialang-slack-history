[{"client_msg_id":"778dd2d1-9a9e-4be9-bead-dc77d9bc01a0","type":"message","text":"I posted the following in <#C6A044SQH|helpdesk>, but someone mentioned this channel, so I'll just paste it below:\n\nI coded up 3 solutions to Day 15 of Advent of Code (spoilers), and got the following timings:\n<https://github.com/lojic/LearningRacket/blob/master/advent-of-code-2020/day15-unsafe-vector.rkt|Racket w/ unsafe vector/arithmetic> =&gt; 0.68 seconds\n<https://github.com/lojic/LearningRacket/blob/master/advent-of-code-2020/day15.c|C version> =&gt; 0.47 seconds\n<https://github.com/lojic/LearningRacket/blob/master/advent-of-code-2020/day15.jl|Julia w/ mutable vector> =&gt; 0.41 seconds\nI was impressed that Julia was faster than C. On the one hand, I haven't coded C seriously since 1996, but on the other, I'm very much a Julia newbie.\n\nI'm just curious if an experienced Julia coder can spot any obvious inefficiencies in the <https://github.com/lojic/LearningRacket/blob/master/advent-of-code-2020/day15.jl|little Julia program> - even though it came in faster than C, that doesn't mean I wouldn't like it to be faster :slightly_smiling_face:","user":"U014ATN949F","ts":"1608079617.105300","team":"T68168MUP","edited":{"user":"U014ATN949F","ts":"1608133861.000000"},"blocks":[{"type":"rich_text","block_id":"DvIU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I posted the following in "},{"type":"channel","channel_id":"C6A044SQH"},{"type":"text","text":", but someone mentioned this channel, so I'll just paste it below:\n\nI coded up 3 solutions to Day 15 of Advent of Code (spoilers), and got the following timings:\n"},{"type":"link","url":"https://github.com/lojic/LearningRacket/blob/master/advent-of-code-2020/day15-unsafe-vector.rkt","text":"Racket w/ unsafe vector/arithmetic"},{"type":"text","text":" => 0.68 seconds\n"},{"type":"link","url":"https://github.com/lojic/LearningRacket/blob/master/advent-of-code-2020/day15.c","text":"C version"},{"type":"text","text":" => 0.47 seconds\n"},{"type":"link","url":"https://github.com/lojic/LearningRacket/blob/master/advent-of-code-2020/day15.jl","text":"Julia w/ mutable vector"},{"type":"text","text":" => 0.41 seconds\nI was impressed that Julia was faster than C. On the one hand, I haven't coded C seriously since 1996, but on the other, I'm very much a Julia newbie.\n\nI'm just curious if an experienced Julia coder can spot any obvious inefficiencies in the "},{"type":"link","url":"https://github.com/lojic/LearningRacket/blob/master/advent-of-code-2020/day15.jl","text":"little Julia program"},{"type":"text","text":" - even though it came in faster than C, that doesn't mean I wouldn't like it to be faster "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1608079617.105300","reply_count":33,"reply_users_count":6,"latest_reply":"1608400503.142400","reply_users":["UD0NS8PDF","U014ATN949F","U0179G7FG4F","U7HAYKY9X","UH24GRBLL","UB7JS9CHF"],"subscribed":false},{"client_msg_id":"18b6f768-3205-4365-8f37-a4721abb29dd","type":"message","text":"You could add `@inbounds for …`. And perhaps `ifelse(prev_turn &gt; 0, turn - prev_turn, 0)`?","user":"UD0NS8PDF","ts":"1608079953.105800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"smalU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You could add "},{"type":"text","text":"@inbounds for …","style":{"code":true}},{"type":"text","text":". And perhaps "},{"type":"text","text":"ifelse(prev_turn > 0, turn - prev_turn, 0)","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"0b9c5ca9-e046-4b92-9de6-a26d86e0923d","type":"message","text":"I tried `@inbounds` in a couple places, and it didn't seem to have much effect. In the case of the `for` loop, N is 7, so it's probably quick :slightly_smiling_face:  I'd be super surprised if changing a ternary to if/else had any effect - is that likely?","user":"U014ATN949F","ts":"1608080054.106000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cp=x","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I tried "},{"type":"text","text":"@inbounds","style":{"code":true}},{"type":"text","text":" in a couple places, and it didn't seem to have much effect. In the case of the "},{"type":"text","text":"for","style":{"code":true}},{"type":"text","text":" loop, N is 7, so it's probably quick "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":"  I'd be super surprised if changing a ternary to if/else had any effect - is that likely?"}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"89302c2d-6fa7-48eb-9116-008abc39d1d1","type":"message","text":"it can have an effect if the conditional was preventing vectorization","user":"U0179G7FG4F","ts":"1608080087.106200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"k2iZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it can have an effect if the conditional was preventing vectorization"}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"3fe9d44a-3cd5-4525-9cd9-cf9797ac4659","type":"message","text":"Maybe I'm confused, but are you saying that:\n```x = &lt;expr&gt; ? a : b```\ncompiles differently than:\n```x = if &lt;expr&gt;\n       a\n     else\n       b\n     end```\n?","user":"U014ATN949F","ts":"1608080190.106400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1Z/o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe I'm confused, but are you saying that:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"x = <expr> ? a : b"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"compiles differently than:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"x = if <expr>\n       a\n     else\n       b\n     end"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"?"}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"bcf3f7eb-1122-4831-8e66-59f3b3198a01","type":"message","text":"Everything is a scalar here.","user":"U014ATN949F","ts":"1608080205.106600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"e6H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Everything is a scalar here."}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"fe00b748-fc46-4301-8133-8c954767e85b","type":"message","text":"those are the same. `ifelse` is different because it's branchless.","user":"U0179G7FG4F","ts":"1608080307.106800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"H5CjD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"those are the same. "},{"type":"text","text":"ifelse","style":{"code":true}},{"type":"text","text":" is different because it's branchless."}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"01934fc2-377d-41f2-9c6c-74891a61ede8","type":"message","text":"Ah! Sorry, I totally missed that.","user":"U014ATN949F","ts":"1608080327.107000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YnW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah! Sorry, I totally missed that."}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"c300c57b-2ca1-4f10-83ed-c1df871abd57","type":"message","text":"it typically compiles to a conditional move instruction","user":"U0179G7FG4F","ts":"1608080422.107200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EVBCU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it typically compiles to a conditional move instruction"}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"0f3d5f5f-d9d2-46c6-9b9f-a402876d30c1","type":"message","text":"Hmm... `ifelse` was just a little slower at `.443` vs. `.439`","user":"U014ATN949F","ts":"1608080466.107400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yyS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmm... "},{"type":"text","text":"ifelse","style":{"code":true}},{"type":"text","text":" was just a little slower at "},{"type":"text","text":".443","style":{"code":true}},{"type":"text","text":" vs. "},{"type":"text","text":".439","style":{"code":true}}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"abaff82e-355c-4885-aabd-a53dd87c755f","type":"message","text":"Probably because it needs to evaluate the subtraction _every_ time instead of only _some_ of the time.","user":"U014ATN949F","ts":"1608080628.107600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OFR6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Probably because it needs to evaluate the subtraction "},{"type":"text","text":"every","style":{"italic":true}},{"type":"text","text":" time instead of only "},{"type":"text","text":"some","style":{"italic":true}},{"type":"text","text":" of the time."}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"d3f41242-d912-476b-8786-3dfdcc19d1fa","type":"message","text":"That's odd, `@inbounds prev_turn = vec[idx]`is slower than w/o `@inbounds`","user":"U014ATN949F","ts":"1608080746.107800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q6yHZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's odd, "},{"type":"text","text":"@inbounds prev_turn = vec[idx]","style":{"code":true}},{"type":"text","text":"is slower than w/o "},{"type":"text","text":"@inbounds","style":{"code":true}}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"113b5469-2444-4ffa-a437-e9624f058e4f","type":"message","text":"I guess the loop is simple enough that as long as I haven't done something stupid w/ types, it may be as fast as possible.","user":"U014ATN949F","ts":"1608080786.108000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nzds","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess the loop is simple enough that as long as I haven't done something stupid w/ types, it may be as fast as possible."}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"b366a46f-9cfd-4a17-851e-9d3f682facc9","type":"message","text":"So much for that idea. I don’t know if this matters, but there are someInt32 to Int64 conversions","user":"UD0NS8PDF","ts":"1608080791.108200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Jct","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So much for that idea. I don’t know if this matters, but there are someInt32 to Int64 conversions"}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"c3e074ce-e64d-4227-893a-2e8efa02e2e2","type":"message","text":"I tried various integer types. Int64 was slower for the Array - probably due to the allocation.","user":"U014ATN949F","ts":"1608080816.108400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"E1Ev","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I tried various integer types. Int64 was slower for the Array - probably due to the allocation."}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"651a0591-0353-4715-bc24-a0a01aa8e0cf","type":"message","text":"Maybe `turn` should be Int32 throughout, then prev_turn and last would be too?","user":"UD0NS8PDF","ts":"1608080838.108600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q9RMt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe "},{"type":"text","text":"turn","style":{"code":true}},{"type":"text","text":" should be Int32 throughout, then prev_turn and last would be too?"}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"27ebcc97-b26c-437c-a0c5-683f2da8382b","type":"message","text":"Int32 seems slower than Int64 except for the big array.","user":"U014ATN949F","ts":"1608080963.108800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HE=p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Int32 seems slower than Int64 except for the big array."}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"03f7d6bb-94f6-4744-a7b0-5ac96255ce55","type":"message","text":"Maybe due to the natural word size on a 64-bit CPU ?","user":"U014ATN949F","ts":"1608080979.109000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7mws2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe due to the natural word size on a 64-bit CPU ?"}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"06481059-ea30-4ab4-8625-766bee9fd156","type":"message","text":"Oh well, the good news is a simple, straightforward piece of code was optimized pretty well by Julia and beat a similarly simple C version!","user":"U014ATN949F","ts":"1608081024.109200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fGc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh well, the good news is a simple, straightforward piece of code was optimized pretty well by Julia and beat a similarly simple C version!"}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"52aff997-5294-4634-a7fd-42cb8533b346","type":"message","text":"This problem is a little tricky to microoptimize because it's so dependent on cache misses. I would assume (without actually testing it!) that otherwise insignificant changes which re-order the instructions in the main loop would have a small, but noticable impact on the cache miss penalty, which is what dominates. So one could easily go crazy chasing ghosts when optimizing this.","user":"U7HAYKY9X","ts":"1608105168.112000","team":"T68168MUP","edited":{"user":"U7HAYKY9X","ts":"1608105206.000000"},"blocks":[{"type":"rich_text","block_id":"Rle","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This problem is a little tricky to microoptimize because it's so dependent on cache misses. I would assume (without actually testing it!) that otherwise insignificant changes which re-order the instructions in the main loop would have a small, but noticable impact on the cache miss penalty, which is what dominates. So one could easily go crazy chasing ghosts when optimizing this."}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F","reactions":[{"name":"+1","users":["U014ATN949F"],"count":1}]},{"client_msg_id":"71db1095-9da3-4038-ab91-21180649c3b8","type":"message","text":"```julia&gt; new = @benchmark run2($d, Int32(30000000)); judge(minimum(new), minimum(orig))\nBenchmarkTools.TrialJudgement:\n  time:   -3.60% =&gt; invariant (5.00% tolerance)\n  memory: -0.00% =&gt; invariant (1.00% tolerance)```","user":"UH24GRBLL","ts":"1608116459.112300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ni+","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> new = @benchmark run2($d, Int32(30000000)); judge(minimum(new), minimum(orig))\nBenchmarkTools.TrialJudgement:\n  time:   -3.60% => invariant (5.00% tolerance)\n  memory: -0.00% => invariant (1.00% tolerance)"}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"3c37a6f8-624c-4c40-890c-6ed568d9219d","type":"message","text":"it's consistent -3% though, so should be better","user":"UH24GRBLL","ts":"1608116515.112500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bAFU7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's consistent -3% though, so should be better"}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"a5e8a0e6-f50a-4465-9d8c-241a6343e162","type":"message","text":"```function run2(numbers, limit)\n    vec = zeros(Int32, 30000000)\n  \n    turn = one(Int32)\n    for num in (@view numbers[1:end-1])\n        vec[num + 1] = turn\n        turn += one(Int32)\n    end\n  \n    last::Int64 = numbers[end]\n  \n    for t in turn:limit-one(limit)\n        idx       = last + 1 # Julia's arrays are one based\n        prev_turn = vec[idx]\n        vec[idx]  = t\n        last      = (prev_turn &gt; zero(Int32)) ? Int64(t - prev_turn) : 0\n    end\n  \n    last\nend```","user":"UH24GRBLL","ts":"1608116524.112700","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1608116662.000000"},"blocks":[{"type":"rich_text","block_id":"dD7jr","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function run2(numbers, limit)\n    vec = zeros(Int32, 30000000)\n  \n    turn = one(Int32)\n    for num in (@view numbers[1:end-1])\n        vec[num + 1] = turn\n        turn += one(Int32)\n    end\n  \n    last::Int64 = numbers[end]\n  \n    for t in turn:limit-one(limit)\n        idx       = last + 1 # Julia's arrays are one based\n        prev_turn = vec[idx]\n        vec[idx]  = t\n        last      = (prev_turn > zero(Int32)) ? Int64(t - prev_turn) : 0\n    end\n  \n    last\nend"}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"99245b01-2b93-40f4-8a38-0e1974e3c373","type":"message","text":"the \"difference\" is that `last` and `idx` are always Int64, so there's no conversion happening","user":"UH24GRBLL","ts":"1608116714.113000","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1608118005.000000"},"blocks":[{"type":"rich_text","block_id":"sxg9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the \"difference\" is that "},{"type":"text","text":"last","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"idx","style":{"code":true}},{"type":"text","text":" are always Int64, so there's no conversion happening"}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"d3cd8124-b278-4175-b8c8-2246bac6ea63","type":"message","text":"this won't work well if the limit is raised far enough to make `turn` larger than Int32, but at that point I think it's fair to be a tiny bit slower than this","user":"UH24GRBLL","ts":"1608118281.113300","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1608118292.000000"},"blocks":[{"type":"rich_text","block_id":"zufT6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this won't work well if the limit is raised far enough to make "},{"type":"text","text":"turn","style":{"code":true}},{"type":"text","text":" larger than Int32, but at that point I think it's fair to be a tiny bit slower than this"}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"655717e2-c086-4950-8a4a-9d750e4cbfa8","type":"message","text":"(in that case this should be all Int64 anyway, but I was too lazy to make it generic enough, you pretty much have to split it into two functions to ensure the inner stuff is type stable for the array)","user":"UH24GRBLL","ts":"1608118364.113600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Oo81G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(in that case this should be all Int64 anyway, but I was too lazy to make it generic enough, you pretty much have to split it into two functions to ensure the inner stuff is type stable for the array)"}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"d775b78e-a1f7-4060-b286-c0270913ee7c","type":"message","text":"I just ran my `run` and your `run2` in pairs (alternating which was first) ten times, and mine was faster 8 out of 10 times. I'm not sure if I've tweaked it since my original post, so I'll post the current version I've been using:\n```function run(numbers, limit::Int64)\n  vec = zeros(Int32, 30000000)\n\n  turn = 1\n  for num in numbers[1:end-1]\n    vec[num + 1] = turn\n    turn += 1\n  end\n\n  last::Int64 = numbers[end]\n\n  while turn &lt; limit\n    idx       = last + 1 # Julia's arrays are one based\n    prev_turn = vec[idx]\n    vec[idx]  = turn\n    last      = (prev_turn &gt; 0) ? turn - prev_turn : 0\n    turn     += 1\n  end\n\n  last\nend```","user":"U014ATN949F","ts":"1608133306.114300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kQTlb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I just ran my "},{"type":"text","text":"run","style":{"code":true}},{"type":"text","text":" and your "},{"type":"text","text":"run2","style":{"code":true}},{"type":"text","text":" in pairs (alternating which was first) ten times, and mine was faster 8 out of 10 times. I'm not sure if I've tweaked it since my original post, so I'll post the current version I've been using:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function run(numbers, limit::Int64)\n  vec = zeros(Int32, 30000000)\n\n  turn = 1\n  for num in numbers[1:end-1]\n    vec[num + 1] = turn\n    turn += 1\n  end\n\n  last::Int64 = numbers[end]\n\n  while turn < limit\n    idx       = last + 1 # Julia's arrays are one based\n    prev_turn = vec[idx]\n    vec[idx]  = turn\n    last      = (prev_turn > 0) ? turn - prev_turn : 0\n    turn     += 1\n  end\n\n  last\nend"}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"e50b537f-6ea9-4b70-a418-a55a3a247ffd","type":"message","text":"Invoking with this:\n```@show run([12,20,0,6,1,17,7], 2020)\n@show run([12,20,0,6,1,17,7], 30000000)\n@time run([12,20,0,6,1,17,7], 30000000)```\nThe first two lines are to 1) print out both solutions, and 2) make sure the JIT has compiled","user":"U014ATN949F","ts":"1608133378.114500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"G8Gmh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Invoking with this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@show run([12,20,0,6,1,17,7], 2020)\n@show run([12,20,0,6,1,17,7], 30000000)\n@time run([12,20,0,6,1,17,7], 30000000)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"The first two lines are to 1) print out both solutions, and 2) make sure the JIT has compiled"}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"5ba6bc61-36e5-4c5e-8063-e3ee8cf8bf34","type":"message","text":"I know I should probably use @benchmark, but I figure @ time  was probably good enough.  Wow *super* annoying that someone has at-sign time as their handle !!!","user":"U014ATN949F","ts":"1608133532.114700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Dpmq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I know I should probably use @benchmark, but I figure @ time  was probably good enough.  Wow "},{"type":"text","text":"super","style":{"bold":true}},{"type":"text","text":" annoying that someone has at-sign time as their handle !!!"}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"44242332-29c0-450c-8aee-d5feaa82fcba","type":"message","text":"yeah, it's very tight, so you have to make sure that your device is not doing anything else or it WILL affect the benchmark","user":"UH24GRBLL","ts":"1608135462.115000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oby","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, it's very tight, so you have to make sure that your device is not doing anything else or it WILL affect the benchmark"}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"c202c76a-3037-4802-bf20-561f0fe3759b","type":"message","text":"so closing browser etc","user":"UH24GRBLL","ts":"1608135477.115200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sqZKq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so closing browser etc"}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"15b02e0c-79bf-4460-8881-13dcf1f8742a","type":"message","text":"and yeah, that was the script I was basing my stuff on","user":"UH24GRBLL","ts":"1608135511.115400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"H5F","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and yeah, that was the script I was basing my stuff on"}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"f905d7ec-386b-4cd9-b261-0a2cc437da07","type":"message","text":"we're at a point where it depends on the machine anyway","user":"UH24GRBLL","ts":"1608135564.115600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+sTI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we're at a point where it depends on the machine anyway"}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"},{"client_msg_id":"ce2d0a8a-1fc5-4c2e-a6c1-3e4fef36c65e","type":"message","text":"I wonder what this would be like in Rust","user":"UB7JS9CHF","ts":"1608400503.142400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lEba","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I wonder what this would be like in Rust"}]}]}],"thread_ts":"1608079617.105300","parent_user_id":"U014ATN949F"}]