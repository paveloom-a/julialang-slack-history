[{"client_msg_id":"4ec988c1-aa1e-4098-aa93-f7e54893a890","type":"message","text":"<https://towardsdatascience.com/how-fast-is-c-compared-to-python-978f18f474c7> it's hard to overstate how bad the code is (variables defined and never used).  also, they compiled the C++ without any optimisation, you just need a `-O2` to make it 4x faster","user":"UDB26738Q","ts":"1608204446.309400","team":"T68168MUP","edited":{"user":"UDB26738Q","ts":"1608204764.000000"},"blocks":[{"type":"rich_text","block_id":"wXoV","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://towardsdatascience.com/how-fast-is-c-compared-to-python-978f18f474c7"},{"type":"text","text":" it's hard to overstate how bad the code is (variables defined and never used).  also, they compiled the C++ without any optimisation, you just need a "},{"type":"text","text":"-O2","style":{"code":true}},{"type":"text","text":" to make it 4x faster"}]}]}],"thread_ts":"1608204446.309400","reply_count":16,"reply_users_count":6,"latest_reply":"1608218407.320000","reply_users":["UPUBAM63X","UDB26738Q","U7HAYKY9X","U6740K1SP","U01CQTKB86N","ULSFQ48UQ"],"subscribed":false},{"client_msg_id":"30d68f4b-1ecd-49e0-89f5-8808453255b5","type":"message","text":"this just popped up on my LinkedIn and I was like \"wut\". I could easily make the C++ code better, but super rusty on Python, it'd take a while","user":"UPUBAM63X","ts":"1608205403.310100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VSo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this just popped up on my LinkedIn and I was like \"wut\". I could easily make the C++ code better, but super rusty on Python, it'd take a while"}]}]}],"thread_ts":"1608204446.309400","parent_user_id":"UDB26738Q"},{"client_msg_id":"83ee0472-8190-4293-93b8-7f7e932b0800","type":"message","text":"not even sure I understand what they are doing with the python, especially those first two loops...","user":"UPUBAM63X","ts":"1608205675.310800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vQP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not even sure I understand what they are doing with the python, especially those first two loops..."}]}]}],"thread_ts":"1608204446.309400","parent_user_id":"UDB26738Q"},{"client_msg_id":"d9b026d8-eb72-432d-98f6-3da061997ffa","type":"message","text":"just to set the string to `\"AAAA...\"` and `\"TTT...\"`","user":"UDB26738Q","ts":"1608205837.311100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vmkM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"just to set the string to "},{"type":"text","text":"\"AAAA...\"","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"\"TTT...\"","style":{"code":true}}]}]}],"thread_ts":"1608204446.309400","parent_user_id":"UDB26738Q"},{"client_msg_id":"7f6869da-5e70-4818-b5d0-334242fa3803","type":"message","text":"and of course using strings for this is _bad_","user":"UDB26738Q","ts":"1608205854.311300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iZO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and of course using strings for this is "},{"type":"text","text":"bad","style":{"italic":true}}]}]}],"thread_ts":"1608204446.309400","parent_user_id":"UDB26738Q","reactions":[{"name":"+1","users":["UPUBAM63X","U6795JH6H"],"count":2}]},{"client_msg_id":"89090209-4b69-4813-8aba-10aa45558889","type":"message","text":"Yea sooo this is close to a hot mess...","user":"UPUBAM63X","ts":"1608206186.311700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"COGb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yea sooo this is close to a hot mess..."}]}]}],"thread_ts":"1608204446.309400","parent_user_id":"UDB26738Q"},{"client_msg_id":"c867eff7-9109-4004-8fa5-fdd076db6992","type":"message","text":"it would be funny to write an AWK script beating both codes until someone comes along and puts up good examples.","user":"UPUBAM63X","ts":"1608206249.311900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FAv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it would be funny to write an AWK script beating both codes until someone comes along and puts up good examples."}]}]}],"thread_ts":"1608204446.309400","parent_user_id":"UDB26738Q"},{"client_msg_id":"ae7dc49b-2671-47a0-8529-0a7eecdbe7af","type":"message","text":"but I have 3min before work :disappointed:","user":"UPUBAM63X","ts":"1608206259.312100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c3RMO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but I have 3min before work "},{"type":"emoji","name":"disappointed"}]}]}],"thread_ts":"1608204446.309400","parent_user_id":"UDB26738Q"},{"client_msg_id":"1e5c792c-9c0e-4ea6-a2d3-a2bd1009ea80","type":"message","text":"I'm so bad at AWK :joy:  I have a great admiration for anyone can do anything non super-trivial with it :rolling_on_the_floor_laughing:","user":"UDB26738Q","ts":"1608206315.312300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Pf+FL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm so bad at AWK "},{"type":"emoji","name":"joy"},{"type":"text","text":"  I have a great admiration for anyone can do anything non super-trivial with it "},{"type":"emoji","name":"rolling_on_the_floor_laughing"}]}]}],"thread_ts":"1608204446.309400","parent_user_id":"UDB26738Q"},{"client_msg_id":"d111dfa4-422c-47c0-a8e2-2d34e06891af","type":"message","text":"Imagine even using strings to represent Kmers:\n```julia&gt; using BioSequences\n\njulia&gt; f() = [DNAMer{13}(UInt(v)) for v in 0:(4^13 - 1)]\nf (generic function with 2 methods)\n\njulia&gt; using BenchmarkTools\n\njulia&gt; @benchmark f()\nBenchmarkTools.Trial:\n  memory estimate:  512.00 MiB\n  allocs estimate:  2\n  --------------\n  minimum time:     140.845 ms (0.00% GC)\n  median time:      161.154 ms (11.91% GC)\n  mean time:        163.181 ms (12.11% GC)\n  maximum time:     225.003 ms (35.08% GC)\n  --------------\n  samples:          31\n  evals/sample:     1```","user":"U7HAYKY9X","ts":"1608207144.312500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ny3A","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Imagine even using strings to represent Kmers:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using BioSequences\n\njulia> f() = [DNAMer{13}(UInt(v)) for v in 0:(4^13 - 1)]\nf (generic function with 2 methods)\n\njulia> using BenchmarkTools\n\njulia> @benchmark f()\nBenchmarkTools.Trial:\n  memory estimate:  512.00 MiB\n  allocs estimate:  2\n  --------------\n  minimum time:     140.845 ms (0.00% GC)\n  median time:      161.154 ms (11.91% GC)\n  mean time:        163.181 ms (12.11% GC)\n  maximum time:     225.003 ms (35.08% GC)\n  --------------\n  samples:          31\n  evals/sample:     1"}]}]}],"thread_ts":"1608204446.309400","parent_user_id":"UDB26738Q"},{"client_msg_id":"fdf84ca0-29d9-42bf-9979-600b699e79c7","type":"message","text":"Even more fun: Try to see how fast you can actually generate and count the frequency of all kmers from long DNA sequences (i.e. the kmer composition or kmer spectrum). For my PhD project I tried really, really hard to do this in Python without being 100x slower than everyone else, and eventually gave up and wrote it in Cython.\nMeanwhile, in Julia:\n```julia&gt; x = randseq(DNAAlphabet{2}(), 100_000_000);\n\njulia&gt; @benchmark composition(each(DNAMer{4}, x))\nBenchmarkTools.Trial:\n  memory estimate:  26.14 KiB\n  allocs estimate:  16\n  --------------\n  minimum time:     103.836 ms (0.00% GC)\n  median time:      105.398 ms (0.00% GC)\n  mean time:        105.504 ms (0.00% GC)\n  maximum time:     107.968 ms (0.00% GC)\n  --------------\n  samples:          48\n  evals/sample:     1```\nThat's one nanosecond per kmer, and we are looking to optimize it even further","user":"U7HAYKY9X","ts":"1608208046.312700","team":"T68168MUP","edited":{"user":"U7HAYKY9X","ts":"1608208092.000000"},"blocks":[{"type":"rich_text","block_id":"SBt/H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Even more fun: Try to see how fast you can actually generate and count the frequency of all kmers from long DNA sequences (i.e. the kmer composition or kmer spectrum). For my PhD project I tried really, really hard to do this in Python without being 100x slower than everyone else, and eventually gave up and wrote it in Cython.\nMeanwhile, in Julia:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> x = randseq(DNAAlphabet{2}(), 100_000_000);\n\njulia> @benchmark composition(each(DNAMer{4}, x))\nBenchmarkTools.Trial:\n  memory estimate:  26.14 KiB\n  allocs estimate:  16\n  --------------\n  minimum time:     103.836 ms (0.00% GC)\n  median time:      105.398 ms (0.00% GC)\n  mean time:        105.504 ms (0.00% GC)\n  maximum time:     107.968 ms (0.00% GC)\n  --------------\n  samples:          48\n  evals/sample:     1"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"That's one nanosecond per kmer, and we are looking to optimize it even further"}]}]}],"thread_ts":"1608204446.309400","parent_user_id":"UDB26738Q","reactions":[{"name":"clapping","users":["UCTJ1TGBV","U0179G7FG4F","UCAFZ51L3","UPUBAM63X"],"count":4}]},{"client_msg_id":"511188AF-3348-4129-93DC-60547590F330","type":"message","text":"I smell a blog post. Anyone can submit to TDS and it gets lots of views. But its content is... welll...","user":"U6740K1SP","ts":"1608208170.314600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dOGc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I smell a blog post. Anyone can submit to TDS and it gets lots of views. But its content is... welll..."}]}]}],"thread_ts":"1608204446.309400","parent_user_id":"UDB26738Q","reactions":[{"name":"+1","users":["UPUBAM63X"],"count":1}]},{"client_msg_id":"a8f01d5b-7ecb-46d0-a3c1-ace88acd618d","type":"message","text":"Could be a neat blogpost actually. Not the speed - there are many, many bioinformatics tools whose algorithms rely on kmers, e.g. KMA (written in C), Metabat (written in C++) or Sourmash (written in Rust), and who achieve almost similar speeds.\nThe real neat thing is that BioSequence's solution is more generic:\n• It will soon work for any arbitrary biological sequences, even user-defined ones\n• Given a DNA sequence with ambiguous nucleotides, it will automatically dispatch to a different iterator\n• When Ben Ward's ongoing work merges soon, it will support arbitrary length kmers by storing them as ntuples (which is harder in static languages, because speed there requires a compile-time constant - the value of k - to be specified as input)\n• The kmers, while stored efficient, behaves like ordinary heap-allocated sequences","user":"U7HAYKY9X","ts":"1608208524.314900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Mn1m","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Could be a neat blogpost actually. Not the speed - there are many, many bioinformatics tools whose algorithms rely on kmers, e.g. KMA (written in C), Metabat (written in C++) or Sourmash (written in Rust), and who achieve almost similar speeds.\nThe real neat thing is that BioSequence's solution is more generic:\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It will soon work for any arbitrary biological sequences, even user-defined ones"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Given a DNA sequence with ambiguous nucleotides, it will automatically dispatch to a different iterator"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"When Ben Ward's ongoing work merges soon, it will support arbitrary length kmers by storing them as ntuples (which is harder in static languages, because speed there requires a compile-time constant - the value of k - to be specified as input)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"The kmers, while stored efficient, behaves like ordinary heap-allocated sequences"}]}],"style":"bullet","indent":0}]}],"thread_ts":"1608204446.309400","parent_user_id":"UDB26738Q","reactions":[{"name":"100","users":["U6740K1SP","U6795JH6H","UPUBAM63X","UAZP7LJLU"],"count":4}]},{"client_msg_id":"f3249b22-6a46-4186-b121-98d5fe704ec6","type":"message","text":"How would you generate permutations of specified length with replacement in Julia for a more generic case, not just nucleotides? I think Combinatorics.jl doesn’t have it, not sure.","user":"U01CQTKB86N","ts":"1608212002.316000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hNen","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How would you generate permutations of specified length with replacement in Julia for a more generic case, not just nucleotides? I think Combinatorics.jl doesn’t have it, not sure."}]}]}],"thread_ts":"1608204446.309400","parent_user_id":"UDB26738Q"},{"client_msg_id":"f3371bba-a825-4dbe-a3bd-aa8c316e9b37","type":"message","text":"`Base.Iterators.product`","user":"U7HAYKY9X","ts":"1608212087.316200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2W2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Base.Iterators.product","style":{"code":true}}]}]}],"thread_ts":"1608204446.309400","parent_user_id":"UDB26738Q"},{"client_msg_id":"0d62a30b-74c2-4f50-8898-d71bf94751d7","type":"message","text":"Hmm.. :see_no_evil: I’m sure there’s a  better way to do this. :joy:\n```using BenchmarkTools\nnucleotides = [:C,:G,:T,:A]\n@btime collect(Iterators.product(nucleotides, nucleotides, nucleotides, nucleotides, nucleotides, nucleotides, nucleotides, \n        nucleotides, nucleotides, nucleotides, nucleotides, nucleotides, nucleotides));```","user":"U01CQTKB86N","ts":"1608212860.316400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EFJn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmm.. "},{"type":"emoji","name":"see_no_evil"},{"type":"text","text":" I’m sure there’s a  better way to do this. "},{"type":"emoji","name":"joy"},{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using BenchmarkTools\nnucleotides = [:C,:G,:T,:A]\n@btime collect(Iterators.product(nucleotides, nucleotides, nucleotides, nucleotides, nucleotides, nucleotides, nucleotides, \n        nucleotides, nucleotides, nucleotides, nucleotides, nucleotides, nucleotides));"}]}]}],"thread_ts":"1608204446.309400","parent_user_id":"UDB26738Q"},{"client_msg_id":"c3952529-43cd-49ce-85c0-f26575fadc6f","type":"message","text":"They could also speed up the Python by pushing it to C using a few list comprehension tricks.","user":"ULSFQ48UQ","ts":"1608218407.320000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"N5i","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"They could also speed up the Python by pushing it to C using a few list comprehension tricks."}]}]}],"thread_ts":"1608204446.309400","parent_user_id":"UDB26738Q","reactions":[{"name":"+1","users":["UPUBAM63X","UDB26738Q"],"count":2}]}]