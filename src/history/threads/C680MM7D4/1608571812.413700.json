[{"client_msg_id":"22cb7996-c854-4051-8510-da7d8a94db99","type":"message","text":"TIL the `comefrom` statement <https://en.wikipedia.org/wiki/COMEFROM|https://en.wikipedia.org/wiki/COMEFROM>","user":"U677NAWV8","ts":"1608571812.413700","team":"T68168MUP","attachments":[{"title":"COMEFROM","title_link":"https://en.wikipedia.org/wiki/COMEFROM","from_url":"https://en.wikipedia.org/wiki/COMEFROM","author_name":"Wikipedia","author_link":"https://en.wikipedia.org/","text":"In computer programming, COMEFROM (or COME FROM) is an obscure control flow structure used in some programming languages, originally as a joke. COMEFROM is the inverse of GOTO in that it can take the execution state from any arbitrary point in code to a COMEFROM statement.\nThe point in code where the state transfer happens is usually given as a parameter to COMEFROM. Whether the transfer happens before or after the instruction at the specified transfer point depends on the language used. Depending on the language used, multiple COMEFROMs referencing the same departure point may be invalid, be non-deterministic, be executed in some sort of defined priority, or even induce parallel or otherwise concurrent execution as seen in Threaded Intercal.A simple example of a \"COMEFROM x\" statement is a label x (which does not need to be physically located anywhere near its corresponding COMEFROM) that acts as a \"trap door\". When code execution reaches the label, control gets passed to the statement following the COMEFROM. This may also be conditional, passing control only if a condition is satisfied, analogous to a GOTO within an IF statement. The primary difference from GOTO is that GOTO only depends on the local structure of the code, while COMEFROM depends on the global structure – a GOTO transfers control when it reaches a line with a GOTO statement, while COMEFROM requires scanning the entire program or scope to see if any COMEFROM statements are in scope for the line, and then verifying if a condition is hit. The effect of this is primarily to make debugging (and understanding the control flow of the program) extremely difficult, since there is no indication near the line or label in question that control will mysteriously jump to another point of the program – one must study the entire program to see if any COMEFROM statements reference that line or label.\nDebugger hooks can be used to implement a COMEFROM statement, as in the humorous Python goto module; see below. This also can be implemented with the gcc feature \"asm goto\" as used by the Linux kernel configuration option CONFIG_JUMP_LABEL. A no-op has its location stored, to be replaced by a jump to an executable fragment that at its end returns to the instruction after the no-op.","fallback":"wikipedia: COMEFROM","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png","id":1,"original_url":"https://en.wikipedia.org/wiki/COMEFROM"}],"blocks":[{"type":"rich_text","block_id":"I3nE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"TIL the "},{"type":"text","text":"comefrom","style":{"code":true}},{"type":"text","text":" statement "},{"type":"link","url":"https://en.wikipedia.org/wiki/COMEFROM","text":"https://en.wikipedia.org/wiki/COMEFROM"}]}]}],"thread_ts":"1608571812.413700","reply_count":34,"reply_users_count":5,"latest_reply":"1608637151.446300","reply_users":["U6795JH6H","UPUBAM63X","UH24GRBLL","U67BXBF99","UB7JS9CHF"],"subscribed":false,"reactions":[{"name":"anguished","users":["UEN48T0BT","U67G3QRJM"],"count":2},{"name":"+1","users":["U6A936746"],"count":1},{"name":"laughing","users":["UGU761DU2","U93BUBZP0"],"count":2}]},{"client_msg_id":"a0926cba-2742-46fa-8dc1-864f72a63831","type":"message","text":"I’ve long thought it would be a good security feature for an instruction set to only allow jumping to addresses that are specifically marked as being jump targets, for even more security, from only a single origin address","user":"U6795JH6H","ts":"1608578731.416600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vgItP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’ve long thought it would be a good security feature for an instruction set to only allow jumping to addresses that are specifically marked as being jump targets, for even more security, from only a single origin address"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"ce10ba48-228c-48aa-bb6b-0250313d5350","type":"message","text":"a huge number of security exploits these days rely on jumping into the middle of some code at an unexpected point from an unexpected location","user":"U6795JH6H","ts":"1608578775.416800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1WQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"a huge number of security exploits these days rely on jumping into the middle of some code at an unexpected point from an unexpected location"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"3e42f8da-7aae-4640-84b2-d97e80040cc9","type":"message","text":"normal code does not do that and the compiler could easily insert a no-op “comefrom $address” instruction that only allows a jump from the address given, which would stop all of those security exploits dead in their tracks","user":"U6795JH6H","ts":"1608578838.417000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UB1L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"normal code does not do that and the compiler could easily insert a no-op “comefrom $address” instruction that only allows a jump from the address given, which would stop all of those security exploits dead in their tracks"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8","reactions":[{"name":"100","users":["UGU761DU2"],"count":1}]},{"client_msg_id":"d448c4bb-340a-44f6-b654-ba9a9b104f33","type":"message","text":"if there are multiple places that can be the jump origin, you just have a sequence of `comefrom` instructions will all the possible origin addresses and jump to the corresponding one","user":"U6795JH6H","ts":"1608578913.417200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Gqedd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if there are multiple places that can be the jump origin, you just have a sequence of "},{"type":"text","text":"comefrom","style":{"code":true}},{"type":"text","text":" instructions will all the possible origin addresses and jump to the corresponding one"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"e18447fd-3172-4a58-9f4c-dde61863d3f3","type":"message","text":"would be pretty straightforward these days to arrange for these instructions not to actually use any cycles","user":"U6795JH6H","ts":"1608578939.417400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VQC6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"would be pretty straightforward these days to arrange for these instructions not to actually use any cycles"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"822d8384-2f4b-40a3-8b3a-d5c666af2f11","type":"message","text":"I love when jokes turn into useful/interesting ideas. :slightly_smiling_face:","user":"UPUBAM63X","ts":"1608583120.418800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qge+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I love when jokes turn into useful/interesting ideas. "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"f9dff808-746f-4234-8449-bde8e365f2e5","type":"message","text":"What's to stop you from just jumping to the instruction after the `comefrom`?","user":"UH24GRBLL","ts":"1608583893.420400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"u1epe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What's to stop you from just jumping to the instruction after the "},{"type":"text","text":"comefrom","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"cc01a837-1a14-4693-80c3-01c17c44a1e4","type":"message","text":"also not sure how that would stop return oriented programming","user":"UH24GRBLL","ts":"1608583940.420600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MqFL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"also not sure how that would stop return oriented programming"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"8bf6c1a5-3f45-4e44-87f2-553399f2be76","type":"message","text":"the CPU would not allow it: if you jump to a non-`comefrom` instruction, it’s a fault","user":"U6795JH6H","ts":"1608587973.423400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Thoy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the CPU would not allow it: if you jump to a non-"},{"type":"text","text":"comefrom","style":{"code":true}},{"type":"text","text":" instruction, it’s a fault"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"3b317cbc-ee8f-47ad-b773-d3d2fcd2171d","type":"message","text":"another simple modification that would improve security massively is to make stacks grow up instead of down; that way if you manage to overwrite a buffer on the stack, you can’t stomp the previous stack frame, including preventing changing the return address","user":"U6795JH6H","ts":"1608588258.423600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VRkBX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"another simple modification that would improve security massively is to make stacks grow up instead of down; that way if you manage to overwrite a buffer on the stack, you can’t stomp the previous stack frame, including preventing changing the return address"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"323ab044-d698-4948-b3bc-aec6248ee287","type":"message","text":"my proposed `comefrom` instruction prevents return-oriented programing because you can’t jump into a gadget: if the gadget starts at a non-`comefrom` instruction, you can’t jump there without causing the process to fault; with the strong `comefrom $address` version, the process will fault if any code tries to jump to it from any other address except where the compiler intended","user":"U6795JH6H","ts":"1608588487.423800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CXX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"my proposed "},{"type":"text","text":"comefrom","style":{"code":true}},{"type":"text","text":" instruction prevents return-oriented programing because you can’t jump into a gadget: if the gadget starts at a non-"},{"type":"text","text":"comefrom","style":{"code":true}},{"type":"text","text":" instruction, you can’t jump there without causing the process to fault; with the strong "},{"type":"text","text":"comefrom $address","style":{"code":true}},{"type":"text","text":" version, the process will fault if any code tries to jump to it from any other address except where the compiler intended"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"474094cc-5ba7-4d61-948a-44becad62192","type":"message","text":"you basically completely lock down any ability to use control flow in a non-intended way","user":"U6795JH6H","ts":"1608588505.424000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4uze6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you basically completely lock down any ability to use control flow in a non-intended way"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"686030b6-547d-4f46-8991-4241c121c722","type":"message","text":"it doesn’t prevent using an entire function call in a bad way, but it does prevent jumping into the middle of a function body","user":"U6795JH6H","ts":"1608588771.424200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CWAS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it doesn’t prevent using an entire function call in a bad way, but it does prevent jumping into the middle of a function body"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"707b8405-d396-4b9d-bf24-4f6de9981dde","type":"message","text":"on x86-64 you can’t do return-oriented program with just a buffer overflow because the function argument goes in a register; so one of the common ways to start a ROP sequence is to jump into a code fragment that pops values from the stack into a register; this would prevent that since you can’t just jump into that code","user":"U6795JH6H","ts":"1608588907.424400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O4n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"on x86-64 you can’t do return-oriented program with just a buffer overflow because the function argument goes in a register; so one of the common ways to start a ROP sequence is to jump into a code fragment that pops values from the stack into a register; this would prevent that since you can’t just jump into that code"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"6fc8fb94-a3e4-43ec-b29d-0dd069b3ecc9","type":"message","text":"hm, that makes sense","user":"UH24GRBLL","ts":"1608589294.424600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j8wg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hm, that makes sense"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"26b29e70-be9c-4966-85e9-cddf19390590","type":"message","text":"didn't think about the CPU support required for this","user":"UH24GRBLL","ts":"1608589304.424800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s8MZF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"didn't think about the CPU support required for this"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"eeec20c2-70a0-4c14-9178-e3b21ae54f25","type":"message","text":"which seems like one big reason it probably won't be done","user":"UH24GRBLL","ts":"1608589329.425000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/J0i","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which seems like one big reason it probably won't be done"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"485fbfdc-902c-4362-85b4-6f30d03a62ec","type":"message","text":"I'm not well versed enough in CPU architecture to judge whether this would impair performance optimizations/predictions in microcode though","user":"UH24GRBLL","ts":"1608589372.425200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"91KOr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not well versed enough in CPU architecture to judge whether this would impair performance optimizations/predictions in microcode though"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"786fa42a-94ca-4a68-b9d9-cd6856f84dd3","type":"message","text":"Intel just added CET, which means distros are starting to recompile to add “legal as a jmp target” bytecodes","user":"U67BXBF99","ts":"1608589554.425400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OQ4h","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Intel just added CET, which means distros are starting to recompile to add “legal as a jmp target” bytecodes"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"fde27421-fdb8-4731-af77-bd7f0abe7963","type":"message","text":"interesting :thinking_face:","user":"UH24GRBLL","ts":"1608589612.425600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yVS03","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"interesting "},{"type":"emoji","name":"thinking_face"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"31d04abe-cc69-4776-a251-31d7ba50c3e6","type":"message","text":"<https://stackoverflow.com/questions/56905811/what-does-endbr64-instruction-actually-do>","user":"U6795JH6H","ts":"1608589618.425800","team":"T68168MUP","attachments":[{"service_name":"Stack Overflow","title":"what does endbr64 instruction actually do?","title_link":"https://stackoverflow.com/questions/56905811/what-does-endbr64-instruction-actually-do","text":"I've been trying to understand assembly language code generated by GCC and frequently encounter this instruction at start of many functions including _start(), but coudn't find any guide explaining...","fallback":"Stack Overflow: what does endbr64 instruction actually do?","thumb_url":"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded","from_url":"https://stackoverflow.com/questions/56905811/what-does-endbr64-instruction-actually-do","thumb_width":316,"thumb_height":316,"service_icon":"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon.png?v=c78bd457575a","id":1,"original_url":"https://stackoverflow.com/questions/56905811/what-does-endbr64-instruction-actually-do"}],"blocks":[{"type":"rich_text","block_id":"iFND","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://stackoverflow.com/questions/56905811/what-does-endbr64-instruction-actually-do"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"6592e8ae-b523-4050-88e7-8bbb55c30b9c","type":"message","text":"I'm waiting for the first CTF running on hardware supporting those instructions where you have to break them","user":"UH24GRBLL","ts":"1608589627.426100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1rCUu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm waiting for the first CTF running on hardware supporting those instructions where you have to break them"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"4a0bc6bf-258e-4b84-ac27-8ac78771d462","type":"message","text":"it seems much harder","user":"U6795JH6H","ts":"1608589647.426300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WhT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it seems much harder"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"82316235-990b-4722-aa31-5a13e70c2a9e","type":"message","text":"ARM/Apple just added crytographic signing to their function pointer. So you can’t jmp to any target address unless you’ve asked the kernel to sign your destination pointer (enforced by hardware)","user":"U67BXBF99","ts":"1608589667.426500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7ayY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ARM/Apple just added crytographic signing to their function pointer. So you can’t jmp to any target address unless you’ve asked the kernel to sign your destination pointer (enforced by hardware)"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"52cd19b3-4e17-4e4c-8107-34b0019d4b9b","type":"message","text":"would really badly limit the set of gadgets you can use for ROP","user":"U6795JH6H","ts":"1608589669.426700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Lfw=x","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"would really badly limit the set of gadgets you can use for ROP"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"0ccbf173-b7a7-41e6-8895-9f7780d4dcce","type":"message","text":"that sounds very expensive","user":"U6795JH6H","ts":"1608589692.426900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZdQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that sounds very expensive"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"e0125045-3de1-459a-961e-37cae88c53a3","type":"message","text":"no, sounds like people will inline way more stuff to avoid paying the cost for function calls","user":"UH24GRBLL","ts":"1608589718.427100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"q+G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no, sounds like people will inline way more stuff to avoid paying the cost for function calls"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"4238907b-a692-4d4c-bf32-1bab8cec024a","type":"message","text":"By all accounts, the M1 is fast","user":"U67BXBF99","ts":"1608589743.427300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"thO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"By all accounts, the M1 is fast"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"6d422cd5-bb67-4dc8-9ee4-6a7c8ef4e738","type":"message","text":"Well, all of M1, Tiger Lake and the newest Ryzen series are a tiny amount of CPUs in the wild or on servers","user":"UH24GRBLL","ts":"1608589926.427500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lyY6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well, all of M1, Tiger Lake and the newest Ryzen series are a tiny amount of CPUs in the wild or on servers"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"5042a5f5-60b1-4215-b188-0ba8d2ef2111","type":"message","text":"would be quite some time until this can be relied upon","user":"UH24GRBLL","ts":"1608589940.427700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"adBDp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"would be quite some time until this can be relied upon"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"7b12f34e-c27a-4943-8ea9-987547bad9d7","type":"message","text":"The Windows kernel has already used something vaguely similar too with CFG and RFG (albeit slower and in software) <https://en.wikipedia.org/wiki/Control-flow_integrity>","user":"U67BXBF99","ts":"1608590524.427900","team":"T68168MUP","attachments":[{"title":"Control-flow integrity","title_link":"https://en.wikipedia.org/wiki/Control-flow_integrity","from_url":"https://en.wikipedia.org/wiki/Control-flow_integrity","author_name":"Wikipedia","author_link":"https://en.wikipedia.org/","text":"Control-flow integrity (CFI) is a general term for computer security techniques that prevent a wide variety of malware attacks from redirecting the flow of execution (the control flow) of a program.","fallback":"wikipedia: Control-flow integrity","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png","id":1,"original_url":"https://en.wikipedia.org/wiki/Control-flow_integrity"}],"blocks":[{"type":"rich_text","block_id":"Rno","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The Windows kernel has already used something vaguely similar too with CFG and RFG (albeit slower and in software) "},{"type":"link","url":"https://en.wikipedia.org/wiki/Control-flow_integrity"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"01b933be-283a-4991-8165-ed99bdd7bf38","type":"message","text":"There’s always a link register, so you could add more checks to the callee also, but that’s not what COMEFROM does:","user":"U67BXBF99","ts":"1608590574.428200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p9lv/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There’s always a link register, so you could add more checks to the callee also, but that’s not what COMEFROM does:"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"935c0209-419a-4ac3-9649-f6424eb8a506","type":"message","text":"COMEFROM is like a hardware breakpoint: anytime you reach instruction $address, interrupt normal flow and transfer execution to an alternative function","user":"U67BXBF99","ts":"1608590718.428400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UmXk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"COMEFROM is like a hardware breakpoint: anytime you reach instruction $address, interrupt normal flow and transfer execution to an alternative function"}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"},{"client_msg_id":"50D10F41-7E1A-4ED0-A891-9159F7FAB287","type":"message","text":"What’s scary is a high level language such as MUMPS, where you could jump (or call as a subroutine) any line of a program, even if the line didn’t even have a label on it.\nI found soooo many security holes because of that!\nRemember, this was a language designed by medical doctors in the 1960s, patterned somewhat off of the original BASIC, and indirectly branching to a label + line offset was very powerful, remember that FORTRAN only had a 3 way IF at that time.","user":"UB7JS9CHF","ts":"1608637151.446300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3m0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What’s scary is a high level language such as MUMPS, where you could jump (or call as a subroutine) any line of a program, even if the line didn’t even have a label on it.\n"},{"type":"text","text":"I found soooo many security holes because of that!\nRemember, this was a language designed by medical doctors in the 1960s, patterned somewhat off of the original BASIC, and indirectly branching to a label + line offset was very powerful, remember that FORTRAN only had a 3 way IF at that time."}]}]}],"thread_ts":"1608571812.413700","parent_user_id":"U677NAWV8"}]