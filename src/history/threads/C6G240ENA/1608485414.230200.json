[{"client_msg_id":"e2df2341-0bfe-43c8-aae4-de8747fe1f86","type":"message","text":"Does ChainRulesTestUtils require structures to be `to_vec` -able in some way?","user":"U82RE6STE","ts":"1608485414.230200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZJE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does ChainRulesTestUtils require structures to be "},{"type":"text","text":"to_vec","style":{"code":true}},{"type":"text","text":" -able in some way?"}]}]}],"thread_ts":"1608485414.230200","reply_count":11,"reply_users_count":2,"latest_reply":"1608487045.232400","reply_users":["U82RE6STE","U6A936746"],"subscribed":false},{"client_msg_id":"5b9213ad-a085-46ca-9ae8-fbbdb8b402e5","type":"message","text":"```  MethodError: no method matching to_vec(::MathOptInterface.EqualTo{Float64})\n  Closest candidates are:\n    to_vec(!Matched::Real) at /home/mbesancon/.julia/packages/FiniteDifferences/MVI5I/src/to_vec.jl:7\n    to_vec(!Matched::Complex) at /home/mbesancon/.julia/packages/FiniteDifferences/MVI5I/src/to_vec.jl:14```","user":"U82RE6STE","ts":"1608485464.230300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LSj","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"  MethodError: no method matching to_vec(::MathOptInterface.EqualTo{Float64})\n  Closest candidates are:\n    to_vec(!Matched::Real) at /home/mbesancon/.julia/packages/FiniteDifferences/MVI5I/src/to_vec.jl:7\n    to_vec(!Matched::Complex) at /home/mbesancon/.julia/packages/FiniteDifferences/MVI5I/src/to_vec.jl:14"}]}]}],"thread_ts":"1608485414.230200","parent_user_id":"U82RE6STE"},{"client_msg_id":"0514974a-74d0-4115-9c70-d03747742759","type":"message","text":"Yes","user":"U6A936746","ts":"1608485883.230500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w5UXR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes"}]}]}],"thread_ts":"1608485414.230200","parent_user_id":"U82RE6STE"},{"client_msg_id":"b1468bd1-4764-442a-8a62-27eda71d83b6","type":"message","text":"You need to overload `to_vec`.\nProbably best to look in FiniteDifferences.jl 's source for that.\nFun fact: to_vec is an optic","user":"U6A936746","ts":"1608486039.230700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"u4k","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You need to overload "},{"type":"text","text":"to_vec","style":{"code":true}},{"type":"text","text":".\nProbably best to look in FiniteDifferences.jl 's source for that.\nFun fact: to_vec is an optic"}]}]}],"thread_ts":"1608485414.230200","parent_user_id":"U82RE6STE"},{"client_msg_id":"1c324059-10a7-4e47-8eab-12b9ea820ac8","type":"message","text":"ok thank you. Should this maybe be added to CRTUtils docs? So that people know they need to implement functions from FD itself in their package / type-pirate it in the tests","user":"U82RE6STE","ts":"1608486063.230900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2kv/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ok thank you. Should this maybe be added to CRTUtils docs? So that people know they need to implement functions from FD itself in their package / type-pirate it in the tests"}]}]}],"thread_ts":"1608485414.230200","parent_user_id":"U82RE6STE"},{"client_msg_id":"e3eee76f-f352-4d21-bbf3-07f01b54725e","type":"message","text":"I don't know how well ChainRulesTestUtils actually works on structs at all right now.\nI am not sure it will work even if you do do that.\nI think there is an issue about it.\n\nThere is definitely an issue on FiniteDifferences.jl to use ChainRulesCore types internally, and doing that and using `Composite` would remove need for overloading `to_vec`","user":"U6A936746","ts":"1608486261.231100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Xrer","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't know how well ChainRulesTestUtils actually works on structs at all right now.\nI am not sure it will work even if you do do that.\nI think there is an issue about it.\n\nThere is definitely an issue on FiniteDifferences.jl to use ChainRulesCore types internally, and doing that and using "},{"type":"text","text":"Composite ","style":{"code":true}},{"type":"text","text":"would remove need for overloading `to_vec`"}]}]}],"thread_ts":"1608485414.230200","parent_user_id":"U82RE6STE","reactions":[{"name":"heavy_check_mark","users":["U82RE6STE","UKG4WF8PJ"],"count":2}]},{"client_msg_id":"958e25d3-8e9c-4b47-8147-7904aab90d08","type":"message","text":"Getting ChainRulesTestUtils complete and nice for this (and everything else) is high on the priority list.","user":"U6A936746","ts":"1608486375.231400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lV4+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Getting ChainRulesTestUtils complete and nice for this (and everything else) is high on the priority list."}]}]}],"thread_ts":"1608485414.230200","parent_user_id":"U82RE6STE"},{"client_msg_id":"60fe03a2-62f3-4069-8f57-785305a29f8c","type":"message","text":"another way to make the project structures a bit less entangled would be to move `to_vec` to CRCore","user":"U82RE6STE","ts":"1608486414.231600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RZJft","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"another way to make the project structures a bit less entangled would be to move "},{"type":"text","text":"to_vec","style":{"code":true}},{"type":"text","text":" to CRCore"}]}]}],"thread_ts":"1608485414.230200","parent_user_id":"U82RE6STE"},{"client_msg_id":"90db3220-7427-49e3-b764-0167646e614d","type":"message","text":"`to_vec` is basically a worse version of \"be a differential\".\nWe have the parts to do it better.\n\nYou can actually overload it via `ChainRulesTestUtils.to_vec`\nThough idk if that is a feature or a bug in Julia.","user":"U6A936746","ts":"1608486513.231800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/y1j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"to_vec","style":{"code":true}},{"type":"text","text":" is basically a worse version of \"be a differential\".\nWe have the parts to do it better.\n\nYou can actually overload it via "},{"type":"text","text":"ChainRulesTestUtils.to_vec","style":{"code":true}},{"type":"text","text":"\nThough idk if that is a feature or a bug in Julia."}]}]}],"thread_ts":"1608485414.230200","parent_user_id":"U82RE6STE"},{"client_msg_id":"2098e33a-e164-4a05-9993-52fedb130608","type":"message","text":"I have a project slated (but not confirmed) for Feb-March to get ChainRulesTestUtils (and ChainRulesCore) complete and nice.","user":"U6A936746","ts":"1608486588.232000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"n29","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have a project slated (but not confirmed) for Feb-March to get ChainRulesTestUtils (and ChainRulesCore) complete and nice."}]}]}],"thread_ts":"1608485414.230200","parent_user_id":"U82RE6STE"},{"client_msg_id":"60c955a1-941a-4e52-b3f8-331580934c9c","type":"message","text":"&gt; `<http://ChainRulesTestUtils.to|ChainRulesTestUtils.to>_vec`\nthis is strange indeed. That's not the same function then? Or is it, with a reexport in some way","user":"U82RE6STE","ts":"1608486678.232200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gZ+X","elements":[{"type":"rich_text_quote","elements":[{"type":"link","url":"http://ChainRulesTestUtils.to","text":"ChainRulesTestUtils.to","style":{"code":true}},{"type":"text","text":"_vec","style":{"code":true}}]},{"type":"rich_text_section","elements":[{"type":"text","text":"this is strange indeed. That's not the same function then? Or is it, with a reexport in some way"}]}]}],"thread_ts":"1608485414.230200","parent_user_id":"U82RE6STE"},{"client_msg_id":"2261991a-895d-4a7b-b201-fccd96dfe40c","type":"message","text":"It is. It's not even a re-export.\nIt's a odd thing about requiring qualified names for overloading.\nAFAICT any qualifications will do, it doesn't have to be the one that declared it.","user":"U6A936746","ts":"1608487045.232400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7qVhL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It is. It's not even a re-export.\nIt's a odd thing about requiring qualified names for overloading.\nAFAICT any qualifications will do, it doesn't have to be the one that declared it."}]}]}],"thread_ts":"1608485414.230200","parent_user_id":"U82RE6STE"}]