[{"client_msg_id":"288eafb5-4ebd-473b-bd8e-a12a5227e0ca","type":"message","text":"anyone know how to make an impl with trait bounds on one parameter of a multiply parameteric struct? something like this?\n```impl&lt;T: i16+i32+i64, U:anything&gt; NewImplDooDad&lt;T, U&gt; {\n}```","user":"UPUBAM63X","ts":"1608033410.182900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pTL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"anyone know how to make an impl with trait bounds on one parameter of a multiply parameteric struct? something like this?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"impl<T: i16+i32+i64, U:anything> NewImplDooDad<T, U> {\n}"}]}]}],"thread_ts":"1608033410.182900","reply_count":7,"reply_users_count":3,"latest_reply":"1608219287.198900","reply_users":["U7HAYKY9X","UPUBAM63X","UUCN877U5"],"subscribed":false},{"client_msg_id":"fe482ac6-0259-4da7-9148-45b8f022bf59","type":"message","text":"Just type it but don't restrict it:\n```struct Foo&lt;T1, T2&gt;(T1, T2);\n\nimpl &lt;T1: std::fmt::Display, T2&gt; Foo&lt;T1, T2&gt; {\n    fn foo(&amp;self) {\n        println!(\"{}\", self.0);\n    }\n}\n\nfn main() {\n    let x: Foo&lt;u32, u64&gt; = Foo(7, 1);\n    x.foo();\n}```","user":"U7HAYKY9X","ts":"1608034381.183000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Cy2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Just type it but don't restrict it:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct Foo<T1, T2>(T1, T2);\n\nimpl <T1: std::fmt::Display, T2> Foo<T1, T2> {\n    fn foo(&self) {\n        println!(\"{}\", self.0);\n    }\n}\n\nfn main() {\n    let x: Foo<u32, u64> = Foo(7, 1);\n    x.foo();\n}"}]}]}],"thread_ts":"1608033410.182900","parent_user_id":"UPUBAM63X"},{"client_msg_id":"db7d91fd-1ac9-41ed-b254-9b0ce655affe","type":"message","text":"interesting maybe its my use of the + operator, I tried that and it didn't work.","user":"UPUBAM63X","ts":"1608072200.185700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=/4HN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"interesting maybe its my use of the + operator, I tried that and it didn't work."}]}]}],"thread_ts":"1608033410.182900","parent_user_id":"UPUBAM63X"},{"client_msg_id":"df950607-ab1e-4e5c-9a45-4e425c3b26d4","type":"message","text":"okay I am misunderstanding something so generic types in Impl's have to be traits","user":"UPUBAM63X","ts":"1608072269.185900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XDk1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"okay I am misunderstanding something so generic types in Impl's have to be traits"}]}]}],"thread_ts":"1608033410.182900","parent_user_id":"UPUBAM63X"},{"client_msg_id":"b1445e93-14da-42c8-8b37-eadb6ae43456","type":"message","text":"gar gotta reread the docs I guess somethings not making sense","user":"UPUBAM63X","ts":"1608072369.186100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IjYbD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"gar gotta reread the docs I guess somethings not making sense"}]}]}],"thread_ts":"1608033410.182900","parent_user_id":"UPUBAM63X"},{"client_msg_id":"49925f9e-8990-4070-9138-056fa0ebf9e2","type":"message","text":"okay I got it... You can put bounds on struct types, just not generic types. Generic types have to be generic?","user":"UPUBAM63X","ts":"1608073228.186300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4wV+m","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"okay I got it... You can put bounds on struct types, just not generic types. Generic types have to be generic?"}]}]}],"thread_ts":"1608033410.182900","parent_user_id":"UPUBAM63X"},{"client_msg_id":"c8368e07-793e-4406-9072-916c0d3c1606","type":"message","text":"Right, I should have shown this as well: <https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1cd77ef796475221ab255462e5512ab6>","user":"UUCN877U5","ts":"1608219244.198600","team":"T68168MUP","attachments":[{"title":"Rust Playground","title_link":"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=1cd77ef796475221ab255462e5512ab6","text":"A browser interface to the Rust compiler to experiment with the language","fallback":"Rust Playground","from_url":"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=1cd77ef796475221ab255462e5512ab6","service_name":"play.rust-lang.org","id":1,"original_url":"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1cd77ef796475221ab255462e5512ab6"}],"blocks":[{"type":"rich_text","block_id":"LRl5k","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Right, I should have shown this as well: "},{"type":"link","url":"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=1cd77ef796475221ab255462e5512ab6"}]}]}],"thread_ts":"1608033410.182900","parent_user_id":"UPUBAM63X"},{"client_msg_id":"67c9fdcc-239a-4078-86d3-ec5c144c7bd0","type":"message","text":"I think you constrain by traits, not by types directly.. when you want to compose constraints.","user":"UUCN877U5","ts":"1608219287.198900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gFVvy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think you constrain by traits, not by types directly.. when you want to compose constraints."}]}]}],"thread_ts":"1608033410.182900","parent_user_id":"UPUBAM63X","reactions":[{"name":"+1","users":["UPUBAM63X"],"count":1}]}]