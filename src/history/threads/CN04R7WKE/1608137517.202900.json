[{"client_msg_id":"61f7fb99-01e6-4ba2-818c-e57324ebc66a","type":"message","text":"I'm trying to train a stiff universal DAE. I've been looking at this example: <https://diffeqflux.sciml.ai/dev/examples/physical_constraints/>\nbut in my case I want to have both known dynamic equations and unknown dynamics represented by the NN in addition to algebraic constraints. The problem is in mass matrix form. I'm getting the following error: `TypeError: in typeassert, expected Float32, got ForwardDiff.Dual{Nothing,Float32,1}`  when using `sensealg=InterpolatingAdjoint(autojacvec=ReverseDiffVJP(true))`.","user":"U018NKAFBHR","ts":"1608137517.202900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"e5N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm trying to train a stiff universal DAE. I've been looking at this example: "},{"type":"link","url":"https://diffeqflux.sciml.ai/dev/examples/physical_constraints/"},{"type":"text","text":"\nbut in my case I want to have both known dynamic equations and unknown dynamics represented by the NN in addition to algebraic constraints. The problem is in mass matrix form. I'm getting the following error: "},{"type":"text","text":"TypeError: in typeassert, expected Float32, got ForwardDiff.Dual{Nothing,Float32,1}","style":{"code":true}},{"type":"text","text":"  when using "},{"type":"text","text":"sensealg=InterpolatingAdjoint(autojacvec=ReverseDiffVJP(true))","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1608137517.202900","reply_count":4,"reply_users_count":2,"latest_reply":"1608141529.203600","reply_users":["U018NKAFBHR","U69BL50BF"],"subscribed":false},{"client_msg_id":"46440683-9a71-4b3e-925f-b3f245fa6601","type":"message","text":"MWE:\n```using Flux, DiffEqFlux, OrdinaryDiffEq, Optim, Test, Plots\nusing DiffEqSensitivity\ntspan = (0.0f0,8.0f0)\ntsteps = 0.0f0:0.01:8.0f0\nnn = FastChain(FastDense(10,5,tanh), FastDense(5,5,tanh), FastDense(5,2))\np_nn = initial_params(nn)\nn_weights = length(p_nn)\n\np_system = Float32[2.0,3.148,0.0,0.2995, 0.9465652437246591,#D1, H1, r1, Xdp1, eqp1,\n                   2.0,3.148,0.0,0.2995, 0.94318599774295]  #D2, H2, r2, Xdp2, eqp2,\np_all = [p_nn;p_system]\n\nu₀ = Float32.([0.9999999973770717\n              0.08385978288349857\n              0.9999999973770717\n              0.08201152430245014\n              1.0000000042869701\n              1.0000000070669715\n              0.9818812744040757\n             -1.8211976968425272e-8\n              0.0025427144335758867\n             -0.03845549466520088]) #FROM PSID\n\nfunction threebus(du, u, p, t)\n    #destructure parameters\n    nn_weights = p[1:n_weights]\n    D1, H1, R1, Xdp1, eqp1, D2, H2, R2, Xdp2, eqp2  = p[n_weights+1:end]\n    #destructure states\n     ω1, δ1, ω2, δ2, v1, v2, v3, θ1, θ2, θ3 = u\n    #dynamic equations generator 1\n    Vd1 = v1*cos(θ1)*sin(δ1) - v1*sin(θ1)*cos(δ1)\n    Vq1 = v1*cos(θ1)*cos(δ1) + v1*sin(θ1)*sin(δ1)\n    Id1 = (1.0/(R1^2+Xdp1^2)) * (Xdp1 * (eqp1 - Vq1) - R1 * Vd1)\n    Iq1 = (1.0/(R1^2+Xdp1^2)) * (Xdp1 * Vd1 + R1 * (eqp1 - Vq1))\n    Ir1 = Id1*sin(δ1)+Iq1*cos(δ1)\n    Ii1 = -Id1*cos(δ1)+Iq1*sin(δ1)\n    Pe1 = (Vd1 + R1*Id1) * Id1   +   (Vq1 + R1*Iq1) * Iq1\n    du[1] =  (1/(2*H1)) * ( 0.3  - Pe1 - D1*(ω1-1.0))\n    du[2] =   60*2*pi*(ω1 - 1.0)\n    #dynamic equations generator 2\n    Vd2 = v2*cos(θ2)*sin(δ2)-v2*sin(θ2)*cos(δ2)\n    Vq2 = v2*cos(θ2)*cos(δ2)+v2*sin(θ2)*sin(δ2)\n    Id2 = (2.0/(R2^2+Xdp2^2)) * (Xdp2 * (eqp2 - Vq2) - R2 * Vd2)\n    Iq2 = (2.0/(R2^2+Xdp2^2)) * (Xdp2 * Vd2 + R2 * (eqp2 - Vq2))\n    Ir2 = Id2*sin(δ2)+Iq2*cos(δ2)\n    Ii2 = -Id2*cos(δ2)+Iq2*sin(δ2)\n    Pe2 = (Vd2 + R2*Id2) * Id2   +   (Vq2 + R2*Iq2) * Iq2\n    #du[3] =  (1/(2*H2)) * (0.25 - Pe2 - D2*(ω2-1.0))\n    #du[4] =   60*2*pi*(ω2 - 1.0)\n    du[3] = nn(u,nn_weights)[1]\n    du[4] = nn(u,nn_weights)[2]\n\n    #algebraic constraints\n    Ymatrix =   [  5.41594-14.9037im       0.0+10.0im     -5.41594+4.98267im\n                  0.0+10.0im      2.57069-14.1912im  -2.57069+4.37018im\n                  -5.41594+4.98267im  -2.57069+4.37018im   7.98664-9.09485im]\n    i_network = Ymatrix * ([v1,v2,v3].*cos.([θ1,θ2,θ3]) .+ im.*[v1,v2,v3].*sin.([θ1,θ2,θ3]))\n    Ir_load = (1/(v3^2))*(v3*cos(θ3)*0.5 + v3*sin(θ3)*0.1)\n    Ii_load = (1/(v3^2))*(v3*sin(θ3)*0.5 - v3*cos(θ3)*0.1)\n    du[5] = Ir1 - real(i_network[1])\n    du[6] = Ii1 - imag(i_network[1])\n    du[7] = Ir2 - real(i_network[2])\n    du[8] = Ii2 - imag(i_network[2])\n    du[9] = -Ir_load - real(i_network[3])\n    du[10]= -Ii_load - imag(i_network[3])\nend\n\nM = zeros(Float32, 10, 10)\n[M[i,i] = 1. for i in 1:4]\nstiff_func = ODEFunction(threebus, mass_matrix = M)\nprob_stiff = ODEProblem(stiff_func, u₀, tspan, p_all,saveat=tsteps)\nsol = solve(prob_stiff,Rodas5(),p=p_all,dtmax=0.02, saveat=tsteps)\nprintln(sol.retcode)\n\nfunction predict_stiff(p)\n    #LoadError: TypeError: in typeassert, expected Float32, got ForwardDiff.Dual{Nothing,Float32,1}\n    Array(solve(prob_stiff,Rodas5(),p=[p;p_system], dtmax=0.02,saveat=tsteps,sensealg=InterpolatingAdjoint(autojacvec=ReverseDiffVJP(true))))\nend\n\nfunction loss_stiff(p)\n    x = predict_stiff(p)\n    mean(abs2,1.0 .- x[1,:])\nend\nloss1 = loss_stiff(p_nn)\ncb = function (θ,l)\n    println(l)\n    return false\nend\n\nres1 = DiffEqFlux.sciml_train(loss_stiff, p_nn, ADAM(0.05), cb = cb, maxiters=2)```","user":"U018NKAFBHR","ts":"1608137542.203000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wa0W","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"MWE:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using Flux, DiffEqFlux, OrdinaryDiffEq, Optim, Test, Plots\nusing DiffEqSensitivity\ntspan = (0.0f0,8.0f0)\ntsteps = 0.0f0:0.01:8.0f0\nnn = FastChain(FastDense(10,5,tanh), FastDense(5,5,tanh), FastDense(5,2))\np_nn = initial_params(nn)\nn_weights = length(p_nn)\n\np_system = Float32[2.0,3.148,0.0,0.2995, 0.9465652437246591,#D1, H1, r1, Xdp1, eqp1,\n                   2.0,3.148,0.0,0.2995, 0.94318599774295]  #D2, H2, r2, Xdp2, eqp2,\np_all = [p_nn;p_system]\n\nu₀ = Float32.([0.9999999973770717\n              0.08385978288349857\n              0.9999999973770717\n              0.08201152430245014\n              1.0000000042869701\n              1.0000000070669715\n              0.9818812744040757\n             -1.8211976968425272e-8\n              0.0025427144335758867\n             -0.03845549466520088]) #FROM PSID\n\nfunction threebus(du, u, p, t)\n    #destructure parameters\n    nn_weights = p[1:n_weights]\n    D1, H1, R1, Xdp1, eqp1, D2, H2, R2, Xdp2, eqp2  = p[n_weights+1:end]\n    #destructure states\n     ω1, δ1, ω2, δ2, v1, v2, v3, θ1, θ2, θ3 = u\n    #dynamic equations generator 1\n    Vd1 = v1*cos(θ1)*sin(δ1) - v1*sin(θ1)*cos(δ1)\n    Vq1 = v1*cos(θ1)*cos(δ1) + v1*sin(θ1)*sin(δ1)\n    Id1 = (1.0/(R1^2+Xdp1^2)) * (Xdp1 * (eqp1 - Vq1) - R1 * Vd1)\n    Iq1 = (1.0/(R1^2+Xdp1^2)) * (Xdp1 * Vd1 + R1 * (eqp1 - Vq1))\n    Ir1 = Id1*sin(δ1)+Iq1*cos(δ1)\n    Ii1 = -Id1*cos(δ1)+Iq1*sin(δ1)\n    Pe1 = (Vd1 + R1*Id1) * Id1   +   (Vq1 + R1*Iq1) * Iq1\n    du[1] =  (1/(2*H1)) * ( 0.3  - Pe1 - D1*(ω1-1.0))\n    du[2] =   60*2*pi*(ω1 - 1.0)\n    #dynamic equations generator 2\n    Vd2 = v2*cos(θ2)*sin(δ2)-v2*sin(θ2)*cos(δ2)\n    Vq2 = v2*cos(θ2)*cos(δ2)+v2*sin(θ2)*sin(δ2)\n    Id2 = (2.0/(R2^2+Xdp2^2)) * (Xdp2 * (eqp2 - Vq2) - R2 * Vd2)\n    Iq2 = (2.0/(R2^2+Xdp2^2)) * (Xdp2 * Vd2 + R2 * (eqp2 - Vq2))\n    Ir2 = Id2*sin(δ2)+Iq2*cos(δ2)\n    Ii2 = -Id2*cos(δ2)+Iq2*sin(δ2)\n    Pe2 = (Vd2 + R2*Id2) * Id2   +   (Vq2 + R2*Iq2) * Iq2\n    #du[3] =  (1/(2*H2)) * (0.25 - Pe2 - D2*(ω2-1.0))\n    #du[4] =   60*2*pi*(ω2 - 1.0)\n    du[3] = nn(u,nn_weights)[1]\n    du[4] = nn(u,nn_weights)[2]\n\n    #algebraic constraints\n    Ymatrix =   [  5.41594-14.9037im       0.0+10.0im     -5.41594+4.98267im\n                  0.0+10.0im      2.57069-14.1912im  -2.57069+4.37018im\n                  -5.41594+4.98267im  -2.57069+4.37018im   7.98664-9.09485im]\n    i_network = Ymatrix * ([v1,v2,v3].*cos.([θ1,θ2,θ3]) .+ im.*[v1,v2,v3].*sin.([θ1,θ2,θ3]))\n    Ir_load = (1/(v3^2))*(v3*cos(θ3)*0.5 + v3*sin(θ3)*0.1)\n    Ii_load = (1/(v3^2))*(v3*sin(θ3)*0.5 - v3*cos(θ3)*0.1)\n    du[5] = Ir1 - real(i_network[1])\n    du[6] = Ii1 - imag(i_network[1])\n    du[7] = Ir2 - real(i_network[2])\n    du[8] = Ii2 - imag(i_network[2])\n    du[9] = -Ir_load - real(i_network[3])\n    du[10]= -Ii_load - imag(i_network[3])\nend\n\nM = zeros(Float32, 10, 10)\n[M[i,i] = 1. for i in 1:4]\nstiff_func = ODEFunction(threebus, mass_matrix = M)\nprob_stiff = ODEProblem(stiff_func, u₀, tspan, p_all,saveat=tsteps)\nsol = solve(prob_stiff,Rodas5(),p=p_all,dtmax=0.02, saveat=tsteps)\nprintln(sol.retcode)\n\nfunction predict_stiff(p)\n    #LoadError: TypeError: in typeassert, expected Float32, got ForwardDiff.Dual{Nothing,Float32,1}\n    Array(solve(prob_stiff,Rodas5(),p=[p;p_system], dtmax=0.02,saveat=tsteps,sensealg=InterpolatingAdjoint(autojacvec=ReverseDiffVJP(true))))\nend\n\nfunction loss_stiff(p)\n    x = predict_stiff(p)\n    mean(abs2,1.0 .- x[1,:])\nend\nloss1 = loss_stiff(p_nn)\ncb = function (θ,l)\n    println(l)\n    return false\nend\n\nres1 = DiffEqFlux.sciml_train(loss_stiff, p_nn, ADAM(0.05), cb = cb, maxiters=2)"}]}]}],"thread_ts":"1608137517.202900","parent_user_id":"U018NKAFBHR"},{"client_msg_id":"044853a7-e0df-476e-b721-4a2a21579571","type":"message","text":"see what happens with `Rodas5(autodiff=false)`","user":"U69BL50BF","ts":"1608138552.203200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"18Qu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"see what happens with "},{"type":"text","text":"Rodas5(autodiff=false)","style":{"code":true}}]}]}],"thread_ts":"1608137517.202900","parent_user_id":"U018NKAFBHR"},{"client_msg_id":"faaab081-35aa-4ecb-9bb7-9c01deee902d","type":"message","text":"(forward mode AD of the Jacobian doesn't make a huge difference anyways)","user":"U69BL50BF","ts":"1608138566.203400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JyOi4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(forward mode AD of the Jacobian doesn't make a huge difference anyways)"}]}]}],"thread_ts":"1608137517.202900","parent_user_id":"U018NKAFBHR"},{"client_msg_id":"71dd9511-4c8c-406a-831e-29a37ae9239e","type":"message","text":"A different error: `LoadError: BoundsError: attempt to access 0-element Array{Float32,1} at index [0]`","user":"U018NKAFBHR","ts":"1608141529.203600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"snn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"A different error: "},{"type":"text","text":"LoadError: BoundsError: attempt to access 0-element Array{Float32,1} at index [0]","style":{"code":true}}]}]}],"thread_ts":"1608137517.202900","parent_user_id":"U018NKAFBHR"}]