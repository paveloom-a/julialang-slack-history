[{"client_msg_id":"d4f05541-2bef-46b2-88cc-43224f608c88","type":"message","text":"`map(f, eachrow(df))` is much slower (and a lot more allocation) than `map(f, Table(df))`, Table from TypedTable.jl","user":"UH8A351DJ","ts":"1608008494.137800","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1608008503.000000"},"blocks":[{"type":"rich_text","block_id":"RZ9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"map(f, eachrow(df))","style":{"code":true}},{"type":"text","text":" is much slower (and a lot more allocation) than "},{"type":"text","text":"map(f, Table(df))","style":{"code":true}},{"type":"text","text":", Table from TypedTable.jl"}]}]}],"thread_ts":"1608008494.137800","reply_count":4,"reply_users_count":3,"latest_reply":"1608024258.148900","reply_users":["UH8A351DJ","U8JAMQGQY","U01ARRMLM7E"],"subscribed":false},{"type":"message","subtype":"thread_broadcast","text":"```julia&gt; using DataFrames, TypedTables\n\njulia&gt; loop(row) = row.x1 + row.x2 + sin(row.x3)\nloop (generic function with 1 method)\n\njulia&gt; df = DataFrame(rand(30000,3));\n\njulia&gt; @btime map(loop, Table(df));\n  217.713 μs (17 allocations: 235.06 KiB)\n\njulia&gt; @btime map(loop, eachrow(df));\n  5.170 ms (358479 allocations: 5.70 MiB)\n\njulia&gt; map(loop, eachrow(df)) == map(loop, Table(df))\ntrue```","user":"UH8A351DJ","ts":"1608009011.138000","thread_ts":"1608008494.137800","root":{"client_msg_id":"d4f05541-2bef-46b2-88cc-43224f608c88","type":"message","text":"`map(f, eachrow(df))` is much slower (and a lot more allocation) than `map(f, Table(df))`, Table from TypedTable.jl","user":"UH8A351DJ","ts":"1608008494.137800","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1608008503.000000"},"blocks":[{"type":"rich_text","block_id":"RZ9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"map(f, eachrow(df))","style":{"code":true}},{"type":"text","text":" is much slower (and a lot more allocation) than "},{"type":"text","text":"map(f, Table(df))","style":{"code":true}},{"type":"text","text":", Table from TypedTable.jl"}]}]}],"thread_ts":"1608008494.137800","reply_count":4,"reply_users_count":3,"latest_reply":"1608024258.148900","reply_users":["UH8A351DJ","U8JAMQGQY","U01ARRMLM7E"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"nKcoH","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using DataFrames, TypedTables\n\njulia> loop(row) = row.x1 + row.x2 + sin(row.x3)\nloop (generic function with 1 method)\n\njulia> df = DataFrame(rand(30000,3));\n\njulia> @btime map(loop, Table(df));\n  217.713 μs (17 allocations: 235.06 KiB)\n\njulia> @btime map(loop, eachrow(df));\n  5.170 ms (358479 allocations: 5.70 MiB)\n\njulia> map(loop, eachrow(df)) == map(loop, Table(df))\ntrue"}]}]}],"client_msg_id":"d1f830db-246c-4cdc-96a1-03b98fd6b2e2"},{"client_msg_id":"e2369055-3dd8-4f0b-8bda-ab93d6aebfc7","type":"message","text":"jave you tried a data frame that has e.g. 100,000 heterogenous columns? For narrow tables this is expected. Thst is why we have both packages. in DataFrames.jl you should use `select` for operations that involve a few columns.","user":"U8JAMQGQY","ts":"1608014674.147400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"i8cxm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"jave you tried a data frame that has e.g. 100,000 heterogenous columns? For narrow tables this is expected. Thst is why we have both packages. in DataFrames.jl you should use "},{"type":"text","text":"select","style":{"code":true}},{"type":"text","text":" for operations that involve a few columns."}]}]}],"thread_ts":"1608008494.137800","parent_user_id":"UH8A351DJ"},{"client_msg_id":"fae475b4-dbbd-4e6c-b13b-7d55b8c1c002","type":"message","text":"DataFrames functions copy columns so they're often gonna be slow on wide tables.","user":"U01ARRMLM7E","ts":"1608020533.148400","team":"T68168MUP","edited":{"user":"U01ARRMLM7E","ts":"1608020638.000000"},"blocks":[{"type":"rich_text","block_id":"33cJ4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"DataFrames functions copy columns so they're often gonna be slow on wide tables."}]}]}],"thread_ts":"1608008494.137800","parent_user_id":"UH8A351DJ"},{"client_msg_id":"dcecf090-7413-4c01-92e9-9a42a2c2df49","type":"message","text":"in all functions in DataFrames.jl you have an option to opt-out from copying columns if you care for speed and prefer an unsafe code.","user":"U8JAMQGQY","ts":"1608024258.148900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"t7/L/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in all functions in DataFrames.jl you have an option to opt-out from copying columns if you care for speed and prefer an unsafe code."}]}]}],"thread_ts":"1608008494.137800","parent_user_id":"UH8A351DJ"}]