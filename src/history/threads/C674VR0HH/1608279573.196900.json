[{"client_msg_id":"2c78d12a-a98e-4eb2-beed-657b93629ae2","type":"message","text":"Recently I have received a private message on how to reproduce `case_when` from dplyr in Julia. Here are my conclusions: <https://bkamins.github.io/julialang/2020/12/18/casewhen.html>.","user":"U8JAMQGQY","ts":"1608279573.196900","team":"T68168MUP","attachments":[{"service_name":"Blog by Bogumił Kamiński","title":"Is case_when needed in DataFrames.jl?","title_link":"https://bkamins.github.io/julialang/2020/12/18/casewhen.html","text":"Introduction","fallback":"Blog by Bogumił Kamiński: Is case_when needed in DataFrames.jl?","ts":1608273193,"from_url":"https://bkamins.github.io/julialang/2020/12/18/casewhen.html","service_icon":"https://bkamins.github.io/favicon.ico","id":1,"original_url":"https://bkamins.github.io/julialang/2020/12/18/casewhen.html"}],"blocks":[{"type":"rich_text","block_id":"E3ir","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Recently I have received a private message on how to reproduce "},{"type":"text","text":"case_when","style":{"code":true}},{"type":"text","text":" from dplyr in Julia. Here are my conclusions: "},{"type":"link","url":"https://bkamins.github.io/julialang/2020/12/18/casewhen.html"},{"type":"text","text":"."}]}]}],"thread_ts":"1608279573.196900","reply_count":14,"reply_users_count":3,"latest_reply":"1608313116.203300","reply_users":["U67431ELR","U8JAMQGQY","UBF9YRB6H"],"subscribed":false,"reactions":[{"name":"fire","users":["UM4TSHKF1"],"count":1}]},{"client_msg_id":"e9bc8f35-f65c-4b2d-a49b-96ccf03a7a83","type":"message","text":"Nice. The ternary operator works especially well with `ByRow`, as the need to vectorize can be confusing without it. Though to be fair, in R something quite similar could be achieved with `ifelse` or `if_else`: it's just that the convention to add one indentation level for each call makes the result quite harder to read! :smile:","user":"U67431ELR","ts":"1608282573.198800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/B4i","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Nice. The ternary operator works especially well with "},{"type":"text","text":"ByRow","style":{"code":true}},{"type":"text","text":", as the need to vectorize can be confusing without it. Though to be fair, in R something quite similar could be achieved with "},{"type":"text","text":"ifelse","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"if_else","style":{"code":true}},{"type":"text","text":": it's just that the convention to add one indentation level for each call makes the result quite harder to read! "},{"type":"emoji","name":"smile"}]}]}],"thread_ts":"1608279573.196900","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"ea0144de-1702-44f6-b158-9a9362ecd379","type":"message","text":"we also have `ifelse`  but it has the same downside (except for rare cases) as `case_when` and similar in R - that it is a function so it has to evaluate all its arguments.","user":"U8JAMQGQY","ts":"1608282660.199000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q7LH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we also have "},{"type":"text","text":"ifelse","style":{"code":true}},{"type":"text","text":"  but it has the same downside (except for rare cases) as "},{"type":"text","text":"case_when","style":{"code":true}},{"type":"text","text":" and similar in R - that it is a function so it has to evaluate all its arguments."}]}]}],"thread_ts":"1608279573.196900","parent_user_id":"U8JAMQGQY","reactions":[{"name":"heavy_check_mark","users":["U67431ELR","UKG4WF8PJ"],"count":2}]},{"client_msg_id":"59a19a13-bd31-4198-b2eb-fb1757c6aec4","type":"message","text":"This post makes me excited to add a `@byrow` flag to DataFramesMeta","user":"UBF9YRB6H","ts":"1608311523.201100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pFas","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This post makes me excited to add a "},{"type":"text","text":"@byrow","style":{"code":true}},{"type":"text","text":" flag to DataFramesMeta"}]}]}],"thread_ts":"1608279573.196900","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"6784375f-e287-4970-b457-82f9d254a635","type":"message","text":"and maybe a `@maprows` as well","user":"UBF9YRB6H","ts":"1608311536.201300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"a7uV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and maybe a "},{"type":"text","text":"@maprows","style":{"code":true}},{"type":"text","text":" as well"}]}]}],"thread_ts":"1608279573.196900","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"15268289-ad4b-4f27-8a7b-d89c3e7eb06c","type":"message","text":"Just finished my finals, so I can make work on moving forward with the package more","user":"UBF9YRB6H","ts":"1608311709.201500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MGXGm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Just finished my finals, so I can make work on moving forward with the package more"}]}]}],"thread_ts":"1608279573.196900","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"8ebfc65f-04c2-4d7b-9883-a16f2e744e80","type":"message","text":"What do you mean by \"flag\"?","user":"U8JAMQGQY","ts":"1608312084.201700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8dZK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What do you mean by \"flag\"?"}]}]}],"thread_ts":"1608279573.196900","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"ab1a6ef0-b1a6-43dd-b468-ae7290c26818","type":"message","text":"`@transform(df, @ByRow y = f(:x))` or something similar. So you can use ternary expressions easier","user":"UBF9YRB6H","ts":"1608312230.201900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Mar73","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"@transform(df, @ByRow y = f(:x))","style":{"code":true}},{"type":"text","text":" or something similar. So you can use ternary expressions easier"}]}]}],"thread_ts":"1608279573.196900","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"bd81cec7-9f89-45a4-b2a3-284500b31b1b","type":"message","text":"Ah - OK. It would be nice indeed. `@eachrow` was OK, but slightly inconvenient with the fact that you had to declare the new column and it only works in-place.","user":"U8JAMQGQY","ts":"1608312327.202100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ca2O","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah - OK. It would be nice indeed. "},{"type":"text","text":"@eachrow","style":{"code":true}},{"type":"text","text":" was OK, but slightly inconvenient with the fact that you had to declare the new column and it only works in-place."}]}]}],"thread_ts":"1608279573.196900","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"4e2e2782-b454-40cf-b030-386e5225c16e","type":"message","text":"yeah. That's why `@maprows` might be nice.","user":"UBF9YRB6H","ts":"1608312425.202300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Oef/0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah. That's why "},{"type":"text","text":"@maprows","style":{"code":true}},{"type":"text","text":" might be nice."}]}]}],"thread_ts":"1608279573.196900","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"b70e36c8-8bee-4187-8692-0645b9528757","type":"message","text":"and in `@eachrow`, I want to dig into the internals of `collect` to try and make something where you don't have to declare the type.\n\n```@eachrow df begin \n    @newcol :y \n    :y = :x + :z\nend```\nand this would lower to something that initializes an empty array of unknown type and then pushes to it in a loop, but in a way that's fast","user":"UBF9YRB6H","ts":"1608312511.202500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0rx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and in "},{"type":"text","text":"@eachrow","style":{"code":true}},{"type":"text","text":", I want to dig into the internals of "},{"type":"text","text":"collect","style":{"code":true}},{"type":"text","text":" to try and make something where you don't have to declare the type.\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@eachrow df begin \n    @newcol :y \n    :y = :x + :z\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nand this would lower to something that initializes an empty array of unknown type and then pushes to it in a loop, but in a way that's fast"}]}]}],"thread_ts":"1608279573.196900","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"f91d040d-70ac-42f5-8059-5ce6de4f5b36","type":"message","text":"why just `:y = :x + :z` is not possible without having to add `@newcol`?","user":"U8JAMQGQY","ts":"1608312590.202700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AVO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"why just "},{"type":"text","text":":y = :x + :z","style":{"code":true}},{"type":"text","text":" is not possible without having to add "},{"type":"text","text":"@newcol","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1608279573.196900","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"68899a45-fdd4-4433-9dda-1acebbc39ce3","type":"message","text":"yeah I can do that too. I mean I guess it would be nice to have some sort of declaration that a new column is being created,\n\n```@newcol :y = :x + :z```\nthe hard part is now knowing the type though","user":"UBF9YRB6H","ts":"1608312724.202900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MiS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah I can do that too. I mean I guess it would be nice to have some sort of declaration that a new column is being created,\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@newcol :y = :x + :z"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nthe hard part is now knowing the type though"}]}]}],"thread_ts":"1608279573.196900","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"195ba7f4-c24f-466f-a3f2-941991578b02","type":"message","text":"ok - makes sense. this distinguishes from updating an existing column in place.","user":"U8JAMQGQY","ts":"1608313045.203100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FXNGa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ok - makes sense. this distinguishes from updating an existing column in place."}]}]}],"thread_ts":"1608279573.196900","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"a47d6ce8-ab22-486a-b0e6-fd8f79678df7","type":"message","text":"i want to do the same thing in `@with` if possible","user":"UBF9YRB6H","ts":"1608313116.203300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3HFb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i want to do the same thing in "},{"type":"text","text":"@with","style":{"code":true}},{"type":"text","text":" if possible"}]}]}],"thread_ts":"1608279573.196900","parent_user_id":"U8JAMQGQY","reactions":[{"name":"+1","users":["U01FR784NSW"],"count":1}]}]