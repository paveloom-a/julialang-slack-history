[{"client_msg_id":"a2d49048-008b-49f9-9e81-bd0495adba96","type":"message","text":"Why does the *index* start at *1* instead of *0* in julia?:thinking_face:","user":"U01H3UZ9T7C","ts":"1608254650.134400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UrE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Why does the "},{"type":"text","text":"index ","style":{"bold":true}},{"type":"text","text":"start at "},{"type":"text","text":"1","style":{"bold":true}},{"type":"text","text":" instead of "},{"type":"text","text":"0","style":{"bold":true}},{"type":"text","text":" in julia?"},{"type":"emoji","name":"thinking_face"}]}]}],"thread_ts":"1608254650.134400","reply_count":19,"reply_users_count":10,"latest_reply":"1608584432.354700","reply_users":["U6N6VQE30","U0179G7FG4F","UDB26738Q","U01FKQQ7J0J","U6740K1SP","U90JR0C80","U01H3UZ9T7C","U01CQTKB86N","UB7JS9CHF","U8243SH96"],"subscribed":false,"reactions":[{"name":"one-based-indexing","users":["UDB26738Q","U66M57AN4","U6740K1SP","ULDQSHD41","USTUBS9ED","UEN48T0BT","U680THK2S","UM30MT6RF","U013V2CFZAN","UMQME35EV","ULUC3K6M6","U6C5KSWAC","U6A936746","U6CJRSR63","U8T0YV7QC","U69J94HT9"],"count":16}]},{"client_msg_id":"938a9520-8212-4593-bacb-70f26fbe6916","type":"message","text":"it’s to put the n’th element at index n","user":"U6N6VQE30","ts":"1608254907.135000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cmCap","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it’s to put the n’th element at index n"}]}]}],"thread_ts":"1608254650.134400","parent_user_id":"U01H3UZ9T7C","reactions":[{"name":"point_up","users":["U67G3QRJM","U016VPPCQA1"],"count":2}]},{"client_msg_id":"7614708f-e977-415e-a45f-5d39fb7c0928","type":"message","text":"partly matlab/mathmatica inheritance. The real answer is Julia provides functions like `axes` so you don't have to think about it.","user":"U0179G7FG4F","ts":"1608255202.135500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0Nr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"partly matlab/mathmatica inheritance. The real answer is Julia provides functions like "},{"type":"text","text":"axes","style":{"code":true}},{"type":"text","text":" so you don't have to think about it."}]}]}],"thread_ts":"1608254650.134400","parent_user_id":"U01H3UZ9T7C","reactions":[{"name":"axe","users":["ULUC3K6M6","U6C5KSWAC"],"count":2}]},{"client_msg_id":"0dd6d326-ad22-49da-b389-38f5c37d2093","type":"message","text":"But that's only the default indexing used in Base. There are external packages implementing more useful and practical indexing, like <https://github.com/giordano/StarWarsArrays.jl|https://github.com/giordano/StarWarsArrays.jl> or <https://github.com/giordano/RandomBasedArrays.jl|https://github.com/giordano/RandomBasedArrays.jl>","user":"UDB26738Q","ts":"1608255243.135700","team":"T68168MUP","edited":{"user":"UDB26738Q","ts":"1608255390.000000"},"blocks":[{"type":"rich_text","block_id":"z9B","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But that's only the default indexing used in Base. There are external packages implementing more useful and practical indexing, like "},{"type":"link","url":"https://github.com/giordano/StarWarsArrays.jl","text":"https://github.com/giordano/StarWarsArrays.jl"},{"type":"text","text":" or "},{"type":"link","url":"https://github.com/giordano/RandomBasedArrays.jl","text":"https://github.com/giordano/RandomBasedArrays.jl"}]}]}],"thread_ts":"1608254650.134400","parent_user_id":"U01H3UZ9T7C","reactions":[{"name":"joy","users":["U67G3QRJM","U881D0W2C","UMQME35EV","UAS2BRCBU","U6CJRSR63","UB7JS9CHF"],"count":6}]},{"client_msg_id":"4292991f-b2da-4dcc-8b70-2c9a93bcf412","type":"message","text":"Life is too short to worry about this! :grinning: Get good at both :sunglasses: and save any ire for those who suggest starting at 2 :exploding_head:","user":"U01FKQQ7J0J","ts":"1608255783.136100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"csyo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Life is too short to worry about this! "},{"type":"emoji","name":"grinning"},{"type":"text","text":" Get good at both "},{"type":"emoji","name":"sunglasses"},{"type":"text","text":" and save any ire for those who suggest starting at 2 "},{"type":"emoji","name":"exploding_head"}]}]}],"thread_ts":"1608254650.134400","parent_user_id":"U01H3UZ9T7C"},{"client_msg_id":"f6768c19-2d4b-43f7-afa3-a970c5e2dace","type":"message","text":"by chaining together xkcd comics, we have 4 based indexing. <https://github.com/giordano/RandomBasedArrays.jl>","user":"U0179G7FG4F","ts":"1608255856.136300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5C2/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"by chaining together xkcd comics, we have 4 based indexing. "},{"type":"link","url":"https://github.com/giordano/RandomBasedArrays.jl"}]}]}],"thread_ts":"1608254650.134400","parent_user_id":"U01H3UZ9T7C"},{"client_msg_id":"74ef3a97-1436-43bf-bceb-49e83cfdc584","type":"message","text":"Fun trick: use `A[begin + i]` for distance-like offsets","user":"U6740K1SP","ts":"1608255857.136500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"y/sE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Fun trick: use "},{"type":"text","text":"A[begin + i]","style":{"code":true}},{"type":"text","text":" for distance-like offsets"}]}]}],"thread_ts":"1608254650.134400","parent_user_id":"U01H3UZ9T7C","reactions":[{"name":"brain","users":["U90JR0C80","U8D9768Q6","UDDUC4R1Q","U6C937ENB","U013V2CFZAN","U6C5KSWAC","UAUPJLBQX","UBA5PL84U","U7HMC290Q","UPJCQHPC7","UB7JS9CHF"],"count":11},{"name":"open_mouth","users":["U67G3QRJM","UDDUC4R1Q","UM6JW2SF9","UBA5PL84U"],"count":4}]},{"client_msg_id":"5d327815-50fc-427b-9490-269176a4a6ae","type":"message","text":"keep in mind the difference between offsets vs. positions (fence lengths vs. the posts) and it’s easy to swap back and forth","user":"U6740K1SP","ts":"1608255937.136700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZZjT8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"keep in mind the difference between offsets vs. positions (fence lengths vs. the posts) and it’s easy to swap back and forth"}]}]}],"thread_ts":"1608254650.134400","parent_user_id":"U01H3UZ9T7C"},{"client_msg_id":"3e23a910-6a31-4863-870b-15f16ac30978","type":"message","text":"<@UDB26738Q> your comment led me to making this issue. Thank you! <https://github.com/giordano/RandomBasedArrays.jl/issues/4>","user":"U0179G7FG4F","ts":"1608256296.137000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ij6","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UDB26738Q"},{"type":"text","text":" your comment led me to making this issue. Thank you! "},{"type":"link","url":"https://github.com/giordano/RandomBasedArrays.jl/issues/4"}]}]}],"thread_ts":"1608254650.134400","parent_user_id":"U01H3UZ9T7C"},{"client_msg_id":"236afdb4-82b6-436f-b5e9-ad6282434d40","type":"message","text":"welcome everyone to <#CE2EASSCB|one-based>!","user":"U90JR0C80","ts":"1608256342.137300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SG1wK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"welcome everyone to "},{"type":"channel","channel_id":"CE2EASSCB"},{"type":"text","text":"!"}]}]}],"thread_ts":"1608254650.134400","parent_user_id":"U01H3UZ9T7C"},{"client_msg_id":"be39515c-8e68-4538-9f13-a2055e396927","type":"message","text":"<@UDB26738Q> interesting:rolling_on_the_floor_laughing:","user":"U01H3UZ9T7C","ts":"1608267858.138400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Xg=w","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UDB26738Q"},{"type":"text","text":" interesting"},{"type":"emoji","name":"rolling_on_the_floor_laughing"}]}]}],"thread_ts":"1608254650.134400","parent_user_id":"U01H3UZ9T7C"},{"client_msg_id":"474055d3-8828-4f7e-b89f-d0d17e6d1f11","type":"message","text":"`RandomBasedArrays.jl` _*is a hassle-free package*_ in the Julia programming language for dealing with arrays: every time you access an element of an array, the first index is random, so you don’t have to remember whether Julia uses 0- or 1-based indexing: you simply cannot ever know what the initial element will be.\n:ahhhhhhh:","user":"U01CQTKB86N","ts":"1608279339.143200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NWlTf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"RandomBasedArrays.jl","style":{"code":true}},{"type":"text","text":" "},{"type":"text","text":"is a hassle-free package","style":{"bold":true,"italic":true}},{"type":"text","text":" in the Julia programming language for dealing with arrays: every time you access an element of an array, the first index is random, so you don’t have to remember whether Julia uses 0- or 1-based indexing: you simply cannot ever know what the initial element will be.\n"},{"type":"emoji","name":"ahhhhhhh"}]}]}],"thread_ts":"1608254650.134400","parent_user_id":"U01H3UZ9T7C"},{"client_msg_id":"d4fe588e-7983-4eed-a8fc-0027adc7f272","type":"message","text":"When I first started using Julia, it was a bit of a pain, because I am frequently doing very low level programming, where 0-based is sometimes easier to deal with, also for interop with most modern languages, but with OffsetArrays.jl, there’s really nothing to complain about anymore, IMO.\nHaving to choose *only* 0- or 1- based indexing sucks compared to the full flexibility you have in Julia!","user":"UB7JS9CHF","ts":"1608398663.192300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dwIb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"When I first started using Julia, it was a bit of a pain, because I am frequently doing very low level programming, where 0-based is sometimes easier to deal with, also for interop with most modern languages, but with OffsetArrays.jl, there’s really nothing to complain about anymore, IMO.\nHaving to choose *only* 0- or 1- based indexing sucks compared to the full flexibility you have in Julia!"}]}]}],"thread_ts":"1608254650.134400","parent_user_id":"U01H3UZ9T7C"},{"client_msg_id":"8cd16b18-5c34-4a1e-a7cf-02197d900dfa","type":"message","text":"The simple answer is probably scientific conventions of linear algebra. Julia is after all the package for scientific computing.","user":"U8243SH96","ts":"1608579885.345800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Qpe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The simple answer is probably scientific conventions of linear algebra. Julia is after all the package for scientific computing."}]}]}],"thread_ts":"1608254650.134400","parent_user_id":"U01H3UZ9T7C"},{"client_msg_id":"492977d7-35f7-4214-a445-9e2fba45f1df","type":"message","text":"0-based indexing stems from low-level memory offsets.  It doesn’t make as much sense in most higher-level tasks in my experience.","user":"U6740K1SP","ts":"1608580997.346000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"D//","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"0-based indexing stems from low-level memory offsets.  It doesn’t make as much sense in most higher-level tasks in my experience."}]}]}],"thread_ts":"1608254650.134400","parent_user_id":"U01H3UZ9T7C"},{"client_msg_id":"e6a83950-1d12-41e8-a6c2-74bbb8d2add7","type":"message","text":"For high level tasks, I find it often boils down to what you are most used to, and if you are trying to interop with something that is built around one convention or the other.\nEven though I use 0-based indexing a lot in the type of code I write, I do think that it’s frequently easier to talk about 1-based indices.","user":"UB7JS9CHF","ts":"1608581196.346200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QppEn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For high level tasks, I find it often boils down to what you are most used to, and if you are trying to interop with something that is built around one convention or the other.\nEven though I use 0-based indexing a lot in the type of code I write, I do think that it’s frequently easier to talk about 1-based indices."}]}]}],"thread_ts":"1608254650.134400","parent_user_id":"U01H3UZ9T7C"},{"client_msg_id":"b6dc9d62-7b43-4e7d-aa62-0a16155db509","type":"message","text":"<@U8243SH96> Also the best language for a lot of general computing, don’t forget!  The programmer productivity advantages (that Stefan’s video about multiple dispatch does a great job of highlighting) make it worthwhile for many use cases outside of scientific / technical / numeric “niches”","user":"UB7JS9CHF","ts":"1608581461.346400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VM2","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U8243SH96"},{"type":"text","text":" Also the best language for a lot of general computing, don’t forget!  The programmer productivity advantages (that Stefan’s video about multiple dispatch does a great job of highlighting) make it worthwhile for many use cases outside of scientific / technical / numeric “niches”"}]}]}],"thread_ts":"1608254650.134400","parent_user_id":"U01H3UZ9T7C"},{"client_msg_id":"cd048a60-e41c-414d-a681-7b1bb3cf4f67","type":"message","text":"(I also don’t think those should be seen as so niche, they are pretty darn important)","user":"UB7JS9CHF","ts":"1608581488.346600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1q9b","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(I also don’t think those should be seen as so niche, they are pretty darn important)"}]}]}],"thread_ts":"1608254650.134400","parent_user_id":"U01H3UZ9T7C"},{"client_msg_id":"5eac8b68-f1cc-4cec-ac53-5199e8a7f06a","type":"message","text":"<@UB7JS9CHF> I absolutely agree. I was just guessing at the most likely reason of 1-based indexing. Languages that focus on scientific applications like Fortran/MATLAB/Julia benefit conceptually from  scientific norms. Stress on conceptually. :slightly_smiling_face:","user":"U8243SH96","ts":"1608582524.346800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ievT","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UB7JS9CHF"},{"type":"text","text":" I absolutely agree. I was just guessing at the most likely reason of 1-based indexing. Languages that focus on scientific applications like Fortran/MATLAB/Julia benefit conceptually from  scientific norms. Stress on conceptually. "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1608254650.134400","parent_user_id":"U01H3UZ9T7C"},{"client_msg_id":"378409a9-382c-4b19-9708-8f0c24f03ea3","type":"message","text":"For years I worked (as implementer / architect) of a language that allowed anything as an index (including strings!), but characters in strings were 1-index, and most people used a convention that arrays started at 1, and index 0, or the value one level above (unlike many languages, both `a` and `a(ind)` can hold values) was used to hold the size or next free index in a structure.","user":"UB7JS9CHF","ts":"1608584432.354700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"z=U=4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For years I worked (as implementer / architect) of a language that allowed anything as an index (including strings!), but characters in strings were 1-index, and most people used a convention that arrays started at 1, and index 0, or the value one level above (unlike many languages, both "},{"type":"text","text":"a","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"a(ind)","style":{"code":true}},{"type":"text","text":" can hold values) was used to hold the size or next free index in a structure."}]}]}],"thread_ts":"1608254650.134400","parent_user_id":"U01H3UZ9T7C"}]