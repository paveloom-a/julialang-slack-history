[{"client_msg_id":"6eb0c58b-96ee-4033-bc5f-fbe7dc37196c","type":"message","text":"Hi! I tried to solve differential equations with a bunch of randomly generated initial values and parameters.\nChris Rackauckas said using StaticArrays could speed up calculation in DifferentialEquation.jl. So I tried to generate StaticArrays in each iteration and for each population. Since those calculations are independent, so I tried to use multithreads to accelerate. However, StaticArrays leads to wrong answers. It will mix up when using Threads. So How can I use StaticArrays to faster solve ODE with parallel computing?\nI read his tutorial about parallelism (<https://mitmath.github.io/18337/lecture5/parallelism_overview.html>) and tried to generate StaticArray for each thread like this\n`u = Vector{typeof(@SVector([1.0,0.0,0.0]))}(undef,1000)`\nBut for each iteration, the StaticArray needs to be regenerated randomly for initial values, since SVector is immutable, so I could not use it. So is there a way to use StaticArrays to speed up solving ODE with parallel computing?","user":"U01CZNZM8SK","ts":"1607998418.435700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CJW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi! I tried to solve differential equations with a bunch of randomly generated initial values and parameters.\nChris Rackauckas said using StaticArrays could speed up calculation in DifferentialEquation.jl. So I tried to generate StaticArrays in each iteration and for each population. Since those calculations are independent, so I tried to use multithreads to accelerate. However, StaticArrays leads to wrong answers. It will mix up when using Threads. So How can I use StaticArrays to faster solve ODE with parallel computing?\nI read his tutorial about parallelism ("},{"type":"link","url":"https://mitmath.github.io/18337/lecture5/parallelism_overview.html"},{"type":"text","text":") and tried to generate StaticArray for each thread like this\n"},{"type":"text","text":"u = Vector{typeof(@SVector([1.0,0.0,0.0]))}(undef,1000)","style":{"code":true}},{"type":"text","text":"\nBut for each iteration, the StaticArray needs to be regenerated randomly for initial values, since SVector is immutable, so I could not use it. So is there a way to use StaticArrays to speed up solving ODE with parallel computing?"}]}]}],"thread_ts":"1607998418.435700","reply_count":1,"reply_users_count":1,"latest_reply":"1608065308.437000","reply_users":["U9MED583T"],"subscribed":false},{"client_msg_id":"ca47f6fb-627c-4e2a-a9ae-3cbcf72cbbb9","type":"message","text":"you can use `rand(SVector{3,Float64}, n)` to generate `n` random `SVector` s. You can replace `Float64` with `typeof(x)` if you want to specify a type depenfing on `x`.","user":"U9MED583T","ts":"1608065308.437000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"im7t","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can use "},{"type":"text","text":"rand(SVector{3,Float64}, n)","style":{"code":true}},{"type":"text","text":" to generate "},{"type":"text","text":"n","style":{"code":true}},{"type":"text","text":" random "},{"type":"text","text":"SVector","style":{"code":true}},{"type":"text","text":" s. You can replace "},{"type":"text","text":"Float64","style":{"code":true}},{"type":"text","text":" with "},{"type":"text","text":"typeof(x)","style":{"code":true}},{"type":"text","text":" if you want to specify a type depenfing on "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1607998418.435700","parent_user_id":"U01CZNZM8SK"}]