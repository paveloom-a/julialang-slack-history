[{"client_msg_id":"0c59d1d9-d2bb-4b5f-b276-275c8da52679","type":"message","text":"Is there a general way to get the suitable version of function `f` that runs on array `c`? I'd rather avoid to special case CUDA. Is the \"general way\" something like `Broadcast.broadcasted(f, c).f` ? I don't like accessing a private field, but couldn't figure out another way","user":"U6BJ9E351","ts":"1608222377.046900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jQMQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a general way to get the suitable version of function "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" that runs on array "},{"type":"text","text":"c","style":{"code":true}},{"type":"text","text":"? I'd rather avoid to special case CUDA. Is the \"general way\" something like "},{"type":"text","text":"Broadcast.broadcasted(f, c).f","style":{"code":true}},{"type":"text","text":" ? I don't like accessing a private field, but couldn't figure out another way"}]}]}],"thread_ts":"1608222377.046900","reply_count":3,"reply_users_count":2,"latest_reply":"1608307125.053900","reply_users":["U68A3ASP9","U6BJ9E351"],"subscribed":false},{"client_msg_id":"31432902-f837-4ea2-8d9f-a31254b209d2","type":"message","text":"that `f` won't differ much, we don't rewrite functions to make the GPU compatible.","user":"U68A3ASP9","ts":"1608278739.050900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2B3do","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" won't differ much, we don't rewrite functions to make the GPU compatible."}]}]}],"thread_ts":"1608222377.046900","parent_user_id":"U6BJ9E351"},{"client_msg_id":"cf3c2e89-c8d3-400c-bf8a-bf34cdf53459","type":"message","text":"the only thing we do is call `cufunc`, which may translate the outermost function: <https://github.com/JuliaGPU/CUDA.jl/blob/13077b1f449831a77593618d50a26b37cfb31d60/src/broadcast.jl#L23-L24>","user":"U68A3ASP9","ts":"1608278752.051100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"o3PgH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the only thing we do is call "},{"type":"text","text":"cufunc","style":{"code":true}},{"type":"text","text":", which may translate the outermost function: "},{"type":"link","url":"https://github.com/JuliaGPU/CUDA.jl/blob/13077b1f449831a77593618d50a26b37cfb31d60/src/broadcast.jl#L23-L24"}]}]}],"thread_ts":"1608222377.046900","parent_user_id":"U6BJ9E351"},{"client_msg_id":"9eae560d-d797-409f-a872-39715aef9154","type":"message","text":"ah, now I remember! I'm confusing it with the experimental Cassette based tools in GPUifyLoops, but it looks like `cufunc` is enough for what I need","user":"U6BJ9E351","ts":"1608307125.053900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QY0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah, now I remember! I'm confusing it with the experimental Cassette based tools in GPUifyLoops, but it looks like "},{"type":"text","text":"cufunc","style":{"code":true}},{"type":"text","text":" is enough for what I need"}]}]}],"thread_ts":"1608222377.046900","parent_user_id":"U6BJ9E351"}]