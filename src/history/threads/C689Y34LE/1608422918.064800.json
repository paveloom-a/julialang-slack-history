[{"client_msg_id":"84913ea5-5fd2-4b57-927b-556a7d317dcc","type":"message","text":"You can do it on a CPU with a straightforward `foldl`, but the same approach on the GPU leads to slooooow scalar indexing (although I'm not sure where it happens - there aren't any obvious `getindex` calls)","user":"UB2QRMQPN","ts":"1608422918.064800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iVGKa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can do it on a CPU with a straightforward "},{"type":"text","text":"foldl","style":{"code":true}},{"type":"text","text":", but the same approach on the GPU leads to slooooow scalar indexing (although I'm not sure where it happens - there aren't any obvious "},{"type":"text","text":"getindex","style":{"code":true}},{"type":"text","text":" calls)"}]}]}],"thread_ts":"1608422918.064800","reply_count":7,"reply_users_count":4,"latest_reply":"1608524190.068300","reply_users":["UCZ7VBGUD","UB2QRMQPN","UDGT4PM41","UC7AF7NSU"],"subscribed":false},{"client_msg_id":"63FE63DD-2A61-41F9-8C8B-E30D5714F613","type":"message","text":"To error on scalar indexing, you can do `CUDA.allowscalar(false)`","user":"UCZ7VBGUD","ts":"1608423030.065700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"viI=U","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"To error on scalar indexing, you can do "},{"type":"text","text":"CUDA.allowscalar(false)","style":{"code":true}}]}]}],"thread_ts":"1608422918.064800","parent_user_id":"UB2QRMQPN"},{"client_msg_id":"db74e667-8b26-4450-92dd-04e33f732d78","type":"message","text":"Looks like `foldl` is just not compatible with CUDA - even something like `foldl(+, dA)` fails","user":"UB2QRMQPN","ts":"1608423540.065900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jd38","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Looks like "},{"type":"text","text":"foldl","style":{"code":true}},{"type":"text","text":" is just not compatible with CUDA - even something like "},{"type":"text","text":"foldl(+, dA)","style":{"code":true}},{"type":"text","text":" fails"}]}]}],"thread_ts":"1608422918.064800","parent_user_id":"UB2QRMQPN"},{"client_msg_id":"a4acd59d-0932-4e08-acdb-3487431809fd","type":"message","text":"I haven't actually used it, but maybe <https://github.com/JuliaFolds/FoldsCUDA.jl> is relevant","user":"UCZ7VBGUD","ts":"1608425303.066100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"P1Z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I haven't actually used it, but maybe "},{"type":"link","url":"https://github.com/JuliaFolds/FoldsCUDA.jl"},{"type":"text","text":" is relevant"}]}]}],"thread_ts":"1608422918.064800","parent_user_id":"UB2QRMQPN"},{"client_msg_id":"25d3e83f-911d-446c-9ea0-f6b14336e27d","type":"message","text":"Yeah, I tried that - my Floops.jl/FoldsCUDA.jl implementation works for one thread on the CPU, errors for multiple CPU threads, and produces incorrect results on the GPU","user":"UB2QRMQPN","ts":"1608425741.066300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wXNSF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, I tried that - my Floops.jl/FoldsCUDA.jl implementation works for one thread on the CPU, errors for multiple CPU threads, and produces incorrect results on the GPU"}]}]}],"thread_ts":"1608422918.064800","parent_user_id":"UB2QRMQPN"},{"client_msg_id":"4be83d4e-7c5c-44cc-b6fd-cea54dc74b6d","type":"message","text":"```function folds_findmax2(xs, ex = xs isa CuArray ? CUDAEx() : ThreadedEx())\n    xtypemin = typemin(eltype(xs))\n    @floop ex for (i, x) in zip(eachindex(xs), xs)\n        @reduce() do (xmax1=xtypemin; x), (imax1=-1; i)\n            if isless(xmax1, x)\n                imax2, xmax2 = imax1, xmax1\n                imax1, xmax1 = i, x\n            end\n        end\n        i == imax1 &amp;&amp; continue\n        @reduce() do (xmax2=xtypemin; x), (imax2=-1; i)\n            if isless(xmax2, x)\n                imax2, xmax2 = i, x\n            end\n        end\n    end\n    return ((imax1, xmax1), (imax2, xmax2))\nend```","user":"UB2QRMQPN","ts":"1608425770.066500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7bED","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function folds_findmax2(xs, ex = xs isa CuArray ? CUDAEx() : ThreadedEx())\n    xtypemin = typemin(eltype(xs))\n    @floop ex for (i, x) in zip(eachindex(xs), xs)\n        @reduce() do (xmax1=xtypemin; x), (imax1=-1; i)\n            if isless(xmax1, x)\n                imax2, xmax2 = imax1, xmax1\n                imax1, xmax1 = i, x\n            end\n        end\n        i == imax1 && continue\n        @reduce() do (xmax2=xtypemin; x), (imax2=-1; i)\n            if isless(xmax2, x)\n                imax2, xmax2 = i, x\n            end\n        end\n    end\n    return ((imax1, xmax1), (imax2, xmax2))\nend"}]}]}],"thread_ts":"1608422918.064800","parent_user_id":"UB2QRMQPN"},{"client_msg_id":"c702a18f-7e71-4a0b-bd82-cece17c7523a","type":"message","text":"<@UC7AF7NSU>","user":"UDGT4PM41","ts":"1608462824.066700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fyYx","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UC7AF7NSU"}]}]}],"thread_ts":"1608422918.064800","parent_user_id":"UB2QRMQPN"},{"client_msg_id":"ee81e16c-1f14-45a0-99d1-341441a33114","type":"message","text":"I wrote a reply in discourse. I think this is a good exercise for writing a custom reducing function :slightly_smiling_face: I might add this in my data parallel tutorial.","user":"UC7AF7NSU","ts":"1608524190.068300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Y7cLk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I wrote a reply in discourse. I think this is a good exercise for writing a custom reducing function "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":" I might add this in my data parallel tutorial."}]}]}],"thread_ts":"1608422918.064800","parent_user_id":"UB2QRMQPN"}]