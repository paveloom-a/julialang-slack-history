[{"client_msg_id":"f1adf01f-e383-484d-bb96-d722801552ad","type":"message","text":"I would like to run a large number of iterations (order 10^13 or more) of a relatively small sized simulation, for every iteration I need a bunch of random numbers which can't be pre computed and allocated on the cpu due to size. I was wondering if there is a way to use CUDA, since I believe kernel functions are pretty limited in terms of what can be done inside them.","user":"UU2E6M753","ts":"1608058751.012100","team":"T68168MUP","edited":{"user":"UU2E6M753","ts":"1608059241.000000"},"blocks":[{"type":"rich_text","block_id":"q9O5U","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I would like to run a large number of iterations (order 10^13 or more) of a relatively small sized simulation, for every iteration I need a bunch of random numbers which can't be pre computed and allocated on the cpu due to size. I was wondering if there is a way to use CUDA, since I believe kernel functions are pretty limited in terms of what can be done inside them."}]}]}],"thread_ts":"1608058751.012100","reply_count":8,"reply_users_count":2,"latest_reply":"1608192672.037800","reply_users":["UU2E6M753","U68A3ASP9"],"subscribed":false},{"client_msg_id":"30f760ab-d772-4418-90a1-2397ef99f1f9","type":"message","text":"Can only inline(able) functions be used inside kernel?","user":"UU2E6M753","ts":"1608065434.017500","team":"T68168MUP","edited":{"user":"UU2E6M753","ts":"1608066512.000000"},"blocks":[{"type":"rich_text","block_id":"29cMd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can only inline(able) functions be used inside kernel?"}]}]}],"thread_ts":"1608058751.012100","parent_user_id":"UU2E6M753"},{"client_msg_id":"e5d695ec-6723-4429-9f54-6bc094daf2d2","type":"message","text":"no, all kinds of functions","user":"U68A3ASP9","ts":"1608102859.024900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tWT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no, all kinds of functions"}]}]}],"thread_ts":"1608058751.012100","parent_user_id":"UU2E6M753"},{"client_msg_id":"747980fc-ce92-4833-b7b0-aedc9e12b56d","type":"message","text":"the only thing you can't do, is call the Julia C runtime (which breaks certain features like dynamic dispatch or the GC)","user":"U68A3ASP9","ts":"1608102881.025100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Cyhwl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the only thing you can't do, is call the Julia C runtime (which breaks certain features like dynamic dispatch or the GC)"}]}]}],"thread_ts":"1608058751.012100","parent_user_id":"UU2E6M753"},{"client_msg_id":"156ec878-1d93-4d4b-805b-3f5989714c16","type":"message","text":"it's not entirely clear to me what you want, but you can always implement a simple device-side RNG (GPUArrays.jl has one, there's some xorshift code floating around, etc). ideally we'd use CUSPARSE, but the device-side APIs are C++","user":"U68A3ASP9","ts":"1608102931.025300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4R8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's not entirely clear to me what you want, but you can always implement a simple device-side RNG (GPUArrays.jl has one, there's some xorshift code floating around, etc). ideally we'd use CUSPARSE, but the device-side APIs are C++"}]}]}],"thread_ts":"1608058751.012100","parent_user_id":"UU2E6M753"},{"client_msg_id":"306be794-9141-4469-b441-b99675cada34","type":"message","text":"I see, are you talking about this code\n<https://github.com/JuliaGPU/GPUArrays.jl/blob/master/src/host/random.jl>, actually the task I am trying to accomplish is the following,","user":"UU2E6M753","ts":"1608170873.036600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FqI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see, are you talking about this code\n"},{"type":"link","url":"https://github.com/JuliaGPU/GPUArrays.jl/blob/master/src/host/random.jl"},{"type":"text","text":", actually the task I am trying to accomplish is the following,"}]}]}],"thread_ts":"1608058751.012100","parent_user_id":"UU2E6M753"},{"client_msg_id":"05434dab-7c4a-4a96-93c0-912acb2408f1","type":"message","text":"I have to run a bunch of random walks of different lengths on a hypercube graph and evaluate something based on the random walk, but the number of iterations I have to do the above is very large  (order 10^13). I was wondering if it's possible to use gpu threads which is in the order of 10^3 maybe for the iterations","user":"UU2E6M753","ts":"1608170982.036800","team":"T68168MUP","edited":{"user":"UU2E6M753","ts":"1608171065.000000"},"blocks":[{"type":"rich_text","block_id":"1o+E","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have to run a bunch of random walks of different lengths on a hypercube graph and evaluate something based on the random walk, but the number of iterations I have to do the above is very large  (order 10^13). I was wondering if it's possible to use gpu threads which is in the order of 10^3 maybe for the iterations"}]}]}],"thread_ts":"1608058751.012100","parent_user_id":"UU2E6M753"},{"client_msg_id":"f1236e31-5bdd-43c6-822d-9d18f7bb8669","type":"message","text":"using `Threads.@threads` i am only able to parallelize upto 6 threads","user":"UU2E6M753","ts":"1608171100.037100","team":"T68168MUP","edited":{"user":"UU2E6M753","ts":"1608171174.000000"},"blocks":[{"type":"rich_text","block_id":"CIzPB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"using "},{"type":"text","text":"Threads.@threads","style":{"code":true}},{"type":"text","text":" i am only able to parallelize upto 6 threads"}]}]}],"thread_ts":"1608058751.012100","parent_user_id":"UU2E6M753"},{"client_msg_id":"2ac7f482-6d28-45d3-9f3f-67c9c36b8035","type":"message","text":"sure, you can spawn a large number of threads, but whether you will be able to efficiently use a GPU depends on many other factors (thread divergence, memory access pattern, etc). I don't have experience with random walk algorithms, but there's lots to be found on google.","user":"U68A3ASP9","ts":"1608192672.037800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4IH8j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"sure, you can spawn a large number of threads, but whether you will be able to efficiently use a GPU depends on many other factors (thread divergence, memory access pattern, etc). I don't have experience with random walk algorithms, but there's lots to be found on google."}]}]}],"thread_ts":"1608058751.012100","parent_user_id":"UU2E6M753"}]