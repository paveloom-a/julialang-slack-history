[{"client_msg_id":"c998b7d7-9cff-45d5-afed-6ce0717baf1e","type":"message","text":"Is this a missing method for `mul!(::StridedCuVector, ...)`?\n```julia&gt; mul!(view(cu(rand(Float32, 2, 2)), 1, :), cu(rand(Float32, 2, 2)), cu(rand(Float32, 2)))\nERROR: ArgumentError: cannot take the CPU address of a CuArray{Float32,2}\nStacktrace:\n [1] unsafe_convert(::Type{Ptr{Float32}}, ::CuArray{Float32,2}) at /local/scratch/ssd/sschaub/.julia/packages/CUDA/YeS8q/src/array.jl:211\n [2] gemv!(::Char, ::Float32, ::CuArray{Float32,2}, ::CuArray{Float32,1}, ::Float32, ::SubArray{Float32,1,CuArray{Float32,2},Tuple{Int64,Base.Slice{Base.OneTo{Int64}}},true}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/blas.jl:626\n [3] gemv!(::SubArray{Float32,1,CuArray{Float32,2},Tuple{Int64,Base.Slice{Base.OneTo{Int64}}},true}, ::Char, ::CuArray{Float32,2}, ::CuArray{Float32,1}, ::Bool, ::Bool) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/matmul.jl:470\n [4] mul! at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/matmul.jl:66 [inlined]\n [5] mul!(::SubArray{Float32,1,CuArray{Float32,2},Tuple{Int64,Base.Slice{Base.OneTo{Int64}}},true}, ::CuArray{Float32,2}, ::CuArray{Float32,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/matmul.jl:208\n [6] top-level scope at REPL[24]:1```","user":"UM30MT6RF","ts":"1608398855.059700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zQURv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is this a missing method for "},{"type":"text","text":"mul!(::StridedCuVector, ...)","style":{"code":true}},{"type":"text","text":"?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> mul!(view(cu(rand(Float32, 2, 2)), 1, :), cu(rand(Float32, 2, 2)), cu(rand(Float32, 2)))\nERROR: ArgumentError: cannot take the CPU address of a CuArray{Float32,2}\nStacktrace:\n [1] unsafe_convert(::Type{Ptr{Float32}}, ::CuArray{Float32,2}) at /local/scratch/ssd/sschaub/.julia/packages/CUDA/YeS8q/src/array.jl:211\n [2] gemv!(::Char, ::Float32, ::CuArray{Float32,2}, ::CuArray{Float32,1}, ::Float32, ::SubArray{Float32,1,CuArray{Float32,2},Tuple{Int64,Base.Slice{Base.OneTo{Int64}}},true}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/blas.jl:626\n [3] gemv!(::SubArray{Float32,1,CuArray{Float32,2},Tuple{Int64,Base.Slice{Base.OneTo{Int64}}},true}, ::Char, ::CuArray{Float32,2}, ::CuArray{Float32,1}, ::Bool, ::Bool) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/matmul.jl:470\n [4] mul! at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/matmul.jl:66 [inlined]\n [5] mul!(::SubArray{Float32,1,CuArray{Float32,2},Tuple{Int64,Base.Slice{Base.OneTo{Int64}}},true}, ::CuArray{Float32,2}, ::CuArray{Float32,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/matmul.jl:208\n [6] top-level scope at REPL[24]:1"}]}]}],"thread_ts":"1608398855.059700","reply_count":8,"reply_users_count":3,"latest_reply":"1608406026.061800","reply_users":["U6A0PD8CR","U68A3ASP9","UM30MT6RF"],"subscribed":false},{"client_msg_id":"eac95c66-2383-41c1-8492-673bb8c94a95","type":"message","text":"I know wrappers like `view` can cause issues with accidentally dispatching to Base methods","user":"U6A0PD8CR","ts":"1608400416.060300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"m4yZ6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I know wrappers like "},{"type":"text","text":"view","style":{"code":true}},{"type":"text","text":" can cause issues with accidentally dispatching to Base methods"}]}]}],"thread_ts":"1608398855.059700","parent_user_id":"UM30MT6RF"},{"client_msg_id":"ba53d29c-6104-449d-9e79-428a0a9484f3","type":"message","text":"I'm not sure if <@U68A3ASP9> wants dispatches added for calls like this added to CUDA.jl, or if users should just overload it for their applications","user":"U6A0PD8CR","ts":"1608400463.060500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"V2F","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not sure if "},{"type":"user","user_id":"U68A3ASP9"},{"type":"text","text":" wants dispatches added for calls like this added to CUDA.jl, or if users should just overload it for their applications"}]}]}],"thread_ts":"1608398855.059700","parent_user_id":"UM30MT6RF"},{"client_msg_id":"239aa148-37f1-4466-bbca-92275c8a57b4","type":"message","text":"`view`/SubArray is a little more complicated, and is used to express strided arrays, so we need dispatches for that","user":"U68A3ASP9","ts":"1608405843.060800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QmOAY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"view","style":{"code":true}},{"type":"text","text":"/SubArray is a little more complicated, and is used to express strided arrays, so we need dispatches for that"}]}]}],"thread_ts":"1608398855.059700","parent_user_id":"UM30MT6RF"},{"client_msg_id":"74cc333d-652b-44f7-a1f8-bd10e8c76489","type":"message","text":"<@UM30MT6RF> is this a strided or contiguous array?","user":"U68A3ASP9","ts":"1608405855.061000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FsA","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UM30MT6RF"},{"type":"text","text":" is this a strided or contiguous array?"}]}]}],"thread_ts":"1608398855.059700","parent_user_id":"UM30MT6RF"},{"client_msg_id":"d6289a7c-e706-4fcc-b515-4e23af2f001b","type":"message","text":"if the former, it's possible we're missing some methods. I only recently started adding methods for them","user":"U68A3ASP9","ts":"1608405877.061200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xczL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if the former, it's possible we're missing some methods. I only recently started adding methods for them"}]}]}],"thread_ts":"1608398855.059700","parent_user_id":"UM30MT6RF"},{"client_msg_id":"589838a5-2da2-4bb6-9342-ec377d4a1fdc","type":"message","text":"if the latter, it shouldn't have been possible to construct a contiguous SubArray. `view` is specialized to return a CuArray then (an optimization, since these complicated unions significantly hurt package load time)","user":"U68A3ASP9","ts":"1608405917.061400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ezG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if the latter, it shouldn't have been possible to construct a contiguous SubArray. "},{"type":"text","text":"view","style":{"code":true}},{"type":"text","text":" is specialized to return a CuArray then (an optimization, since these complicated unions significantly hurt package load time)"}]}]}],"thread_ts":"1608398855.059700","parent_user_id":"UM30MT6RF"},{"client_msg_id":"f7c12c59-74b1-4a06-b686-14d958c26e0c","type":"message","text":"`view(mat, 1, :)` should be strided, I think.","user":"UM30MT6RF","ts":"1608405962.061600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ig8b","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"view(mat, 1, :)","style":{"code":true}},{"type":"text","text":" should be strided, I think."}]}]}],"thread_ts":"1608398855.059700","parent_user_id":"UM30MT6RF"},{"client_msg_id":"c33e1e85-81f2-41ad-8c53-daf28d2db746","type":"message","text":"ah yes I didn't see the reproducer, only the error.","user":"U68A3ASP9","ts":"1608406026.061800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xByW0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah yes I didn't see the reproducer, only the error."}]}]}],"thread_ts":"1608398855.059700","parent_user_id":"UM30MT6RF"}]