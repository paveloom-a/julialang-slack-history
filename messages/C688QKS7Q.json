[{"client_msg_id":"b064e3c9-86f7-4e5e-994b-24319602e0dc","type":"message","text":"<@U66GD0880> do you think it is worth splitting out the trampoline fixes in <https://github.com/JuliaLang/julia/pull/38938> into a new PR while we wait for a decision on the exporting of the `jl_n_threads` variable?","user":"UPTBGS6CC","ts":"1608566625.205300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CVh","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U66GD0880"},{"type":"text","text":" do you think it is worth splitting out the trampoline fixes in "},{"type":"link","url":"https://github.com/JuliaLang/julia/pull/38938"},{"type":"text","text":" into a new PR while we wait for a decision on the exporting of the "},{"type":"text","text":"jl_n_threads","style":{"code":true}},{"type":"text","text":" variable?"}]}]}]},{"type":"message","subtype":"channel_join","ts":"1608550658.204300","user":"U01GX4L17PW","text":"<@U01GX4L17PW> has joined the channel","inviter":"USU9FRPEU"},{"client_msg_id":"b4579448-1d34-4adb-97a3-3e6855a34c9c","type":"message","text":"Haha no worries","user":"U67BJLYCS","ts":"1608490929.204000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CESY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Haha no worries"}]}]}]},{"client_msg_id":"7413fec9-f704-4756-a2f4-ea0635f45e18","type":"message","text":"I’ll leave you alone for a bit :slightly_smiling_face: PM me later - I hope I haven’t mucked things up too much (I don’t think so)","user":"UKA81L34J","ts":"1608490914.203700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YClm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’ll leave you alone for a bit "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":" PM me later - I hope I haven’t mucked things up too much (I don’t think so)"}]}]}]},{"client_msg_id":"92fb49fc-10e2-4329-9167-70ea85774845","type":"message","text":"oh - right, DWARF is just the format","user":"UKA81L34J","ts":"1608490848.202800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3wT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh - right, DWARF is just the format"}]}]}]},{"client_msg_id":"9ed504a6-08eb-4615-b117-ff5e5215562e","type":"message","text":"No the LLVM one","user":"U67BJLYCS","ts":"1608490838.202500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aYm8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No the LLVM one"}]}]}]},{"client_msg_id":"55a9f37f-b85b-4585-bc8d-71782cb8d6fb","type":"message","text":"<https://github.com/aclements/libelfin> ?","user":"UKA81L34J","ts":"1608490812.201700","team":"T68168MUP","edited":{"user":"UKA81L34J","ts":"1608490819.000000"},"blocks":[{"type":"rich_text","block_id":"6ds","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/aclements/libelfin"},{"type":"text","text":" ?"}]}]}]},{"client_msg_id":"49af79a1-0fdf-4ab7-80e7-b077f352305e","type":"message","text":"that sounds like a feasible conjecture","user":"UKA81L34J","ts":"1608490774.201500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/0BO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that sounds like a feasible conjecture"}]}]}]},{"client_msg_id":"43715e10-94f2-485c-ba40-f586f95a7116","type":"message","text":"Which is odd, but alright","user":"U67BJLYCS","ts":"1608490773.201400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DGB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Which is odd, but alright"}]}]}]},{"client_msg_id":"0de5b77c-93d1-4d46-b2e5-9cd830181f96","type":"message","text":"That reported error is from the dwarf parser","user":"U67BJLYCS","ts":"1608490763.201000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Awt5c","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That reported error is from the dwarf parser"}]}]}]},{"client_msg_id":"acea757f-3b8f-4ded-8dca-98351e7838aa","type":"message","text":"Conjecture: You had a pointer that used to be valid but is no longer","user":"U67BJLYCS","ts":"1608490734.200300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"I2G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Conjecture: You had a pointer that used to be valid but is no longer"}]}]}]},{"client_msg_id":"b34d0ec5-7319-4533-beb7-0ad70747fc0f","type":"message","text":"You did a write to a memory page that is marked protected","user":"U67BJLYCS","ts":"1608490636.199400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HvAU5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You did a write to a memory page that is marked protected"}]}]}]},{"client_msg_id":"343446f1-7d4e-4c10-8f12-acd941185cde","type":"message","text":"Is this a native Julia error, or does it look like an error which is passed across the C interface back over to Julia (and the indicator `ReadOnlyMemoryError` is actually not relevant)\n\n(I am called `verify` on an in-memory structure, so I would expect errors to be reported, but I’m trying to determine if this is Julia or the ABI)","user":"UKA81L34J","ts":"1608490614.198600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aGL0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is this a native Julia error, or does it look like an error which is passed across the C interface back over to Julia (and the indicator "},{"type":"text","text":"ReadOnlyMemoryError","style":{"code":true}},{"type":"text","text":" is actually not relevant)\n\n(I am called "},{"type":"text","text":"verify","style":{"code":true}},{"type":"text","text":" on an in-memory structure, so I would expect errors to be reported, but I’m trying to determine if this is Julia or the ABI)"}]}]}]},{"type":"message","text":"What does something like this mean?","files":[{"id":"F01GWF09EUF","created":1608490505,"timestamp":1608490505,"name":"image.png","title":"image.png","mimetype":"image/png","filetype":"png","pretty_type":"PNG","user":"UKA81L34J","editable":false,"size":347922,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01GWF09EUF/image.png","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01GWF09EUF/download/image.png","thumb_64":"https://files.slack.com/files-tmb/T68168MUP-F01GWF09EUF-2f520b864b/image_64.png","thumb_80":"https://files.slack.com/files-tmb/T68168MUP-F01GWF09EUF-2f520b864b/image_80.png","thumb_360":"https://files.slack.com/files-tmb/T68168MUP-F01GWF09EUF-2f520b864b/image_360.png","thumb_360_w":360,"thumb_360_h":157,"thumb_480":"https://files.slack.com/files-tmb/T68168MUP-F01GWF09EUF-2f520b864b/image_480.png","thumb_480_w":480,"thumb_480_h":210,"thumb_160":"https://files.slack.com/files-tmb/T68168MUP-F01GWF09EUF-2f520b864b/image_160.png","thumb_720":"https://files.slack.com/files-tmb/T68168MUP-F01GWF09EUF-2f520b864b/image_720.png","thumb_720_w":720,"thumb_720_h":315,"thumb_800":"https://files.slack.com/files-tmb/T68168MUP-F01GWF09EUF-2f520b864b/image_800.png","thumb_800_w":800,"thumb_800_h":350,"thumb_960":"https://files.slack.com/files-tmb/T68168MUP-F01GWF09EUF-2f520b864b/image_960.png","thumb_960_w":960,"thumb_960_h":420,"thumb_1024":"https://files.slack.com/files-tmb/T68168MUP-F01GWF09EUF-2f520b864b/image_1024.png","thumb_1024_w":1024,"thumb_1024_h":448,"original_w":1326,"original_h":580,"thumb_tiny":"AwAUADCr16Udun6igdKTA96AELZ6Ckyad8vbNJQAmTRuPrS02gBxOOmKTcaVqbQAu40bjSUUALk+35UZ+n5UlFAH/9k=","permalink":"https://julialang.slack.com/files/UKA81L34J/F01GWF09EUF/image.png","permalink_public":"https://slack-files.com/T68168MUP-F01GWF09EUF-c7686d7572","is_starred":false,"has_rich_preview":false}],"upload":false,"blocks":[{"type":"rich_text","block_id":"iai","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What does something like this mean?"}]}]}],"user":"UKA81L34J","display_as_bot":false,"ts":"1608490509.196500"},{"client_msg_id":"f11c1214-1f58-4dac-8f01-620661f22691","type":"message","text":"Thanks. That makes it a bit unfortunate that `jl_init` spends effort locating the `bin` directory, which it basically can't, possibly just because the default system image location is known relative to the `bin` directory. Or are there more reasons for specifying the `bin` directory?","user":"UBVE598BC","ts":"1608488972.196000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"a5SJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks. That makes it a bit unfortunate that "},{"type":"text","text":"jl_init","style":{"code":true}},{"type":"text","text":" spends effort locating the "},{"type":"text","text":"bin","style":{"code":true}},{"type":"text","text":" directory, which it basically can't, possibly just because the default system image location is known relative to the "},{"type":"text","text":"bin","style":{"code":true}},{"type":"text","text":" directory. Or are there more reasons for specifying the "},{"type":"text","text":"bin","style":{"code":true}},{"type":"text","text":" directory?"}]}]}]},{"client_msg_id":"53de3e77-18f9-483f-a1ef-9af4db4679eb","type":"message","text":"No","user":"U67BJLYCS","ts":"1608484383.193600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"o=F","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No"}]}]}]},{"client_msg_id":"036e439f-042a-4270-a92c-444c1fcf4a03","type":"message","text":"A kind of existential question: If a program embedding Julia has been linked to or dlopened `libjulia`, does it in any way need the `julia` binary?","user":"UBVE598BC","ts":"1608459610.192800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"20h","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"A kind of existential question: If a program embedding Julia has been linked to or dlopened "},{"type":"text","text":"libjulia","style":{"code":true}},{"type":"text","text":", does it in any way need the "},{"type":"text","text":"julia","style":{"code":true}},{"type":"text","text":" binary?"}]}]}]},{"client_msg_id":"cdacfc5a-f372-4b93-bf2e-26f1c06ce03c","type":"message","text":"Ok, it's reported already: <https://github.com/JuliaLang/julia/issues/38203>","user":"U6N6VQE30","ts":"1608396986.183400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x+0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok, it's reported already: "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/38203"}]}]}],"thread_ts":"1608396986.183400","reply_count":5,"reply_users_count":3,"latest_reply":"1608406633.184300","reply_users":["U0179G7FG4F","U6N6VQE30","U68A3ASP9"],"subscribed":false},{"client_msg_id":"39867edf-dee4-48d5-a121-c7e45727637e","type":"message","text":"Maybe this is a better place than <#C6A044SQH|helpdesk>. Is this a known issue? (I can try to make a MWE, but that'll take a bit of time)\n\n```julia&gt; @code_llvm MultiFloats.two_sum(to_vec(y[1:4]...), to_vec(y[1:4]...))\njulia: /buildworker/worker/package_linux64/build/src/disasm.cpp:292: void DILineInfoPrinter::emit_lineinfo(llvm::raw_ostream&amp;, std::vector&lt;llvm::DILineInfo&gt;&amp;): Assertion `this-&gt;inline_depth == depth2' failed.\n\nsignal (6): Aborted\nin expression starting at REPL[6]:1\ngsignal at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)\nabort at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)\nunknown function (ip: 0x7fd57eca2489)\n__assert_fail at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)\nemit_lineinfo at /buildworker/worker/package_linux64/build/src/disasm.cpp:292\nemitInstructionAnnot at /buildworker/worker/package_linux64/build/src/disasm.cpp:366\n_ZN12_GLOBAL__N_114AssemblyWriter16printInstructionERKN4llvm11InstructionE at /home/hstoppels/julia-1.5.3/bin/../lib/julia/libLLVM-9jl.so (unknown line)\n_ZN12_GLOBAL__N_114AssemblyWriter15printBasicBlockEPKN4llvm10BasicBlockE at /home/hstoppels/julia-1.5.3/bin/../lib/julia/libLLVM-9jl.so (unknown line)```","user":"U6N6VQE30","ts":"1608396891.183200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+vJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe this is a better place than "},{"type":"channel","channel_id":"C6A044SQH"},{"type":"text","text":". Is this a known issue? (I can try to make a MWE, but that'll take a bit of time)\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @code_llvm MultiFloats.two_sum(to_vec(y[1:4]...), to_vec(y[1:4]...))\njulia: /buildworker/worker/package_linux64/build/src/disasm.cpp:292: void DILineInfoPrinter::emit_lineinfo(llvm::raw_ostream&, std::vector<llvm::DILineInfo>&): Assertion `this->inline_depth == depth2' failed.\n\nsignal (6): Aborted\nin expression starting at REPL[6]:1\ngsignal at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)\nabort at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)\nunknown function (ip: 0x7fd57eca2489)\n__assert_fail at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)\nemit_lineinfo at /buildworker/worker/package_linux64/build/src/disasm.cpp:292\nemitInstructionAnnot at /buildworker/worker/package_linux64/build/src/disasm.cpp:366\n_ZN12_GLOBAL__N_114AssemblyWriter16printInstructionERKN4llvm11InstructionE at /home/hstoppels/julia-1.5.3/bin/../lib/julia/libLLVM-9jl.so (unknown line)\n_ZN12_GLOBAL__N_114AssemblyWriter15printBasicBlockEPKN4llvm10BasicBlockE at /home/hstoppels/julia-1.5.3/bin/../lib/julia/libLLVM-9jl.so (unknown line)"}]}]}]},{"client_msg_id":"AB291A60-58CB-432F-AC16-231BF9AE07DC","type":"message","text":"Either by making it directly mutable (most common), or wrapping it in a Ref (more advanced)","user":"U67BXBF99","ts":"1608395619.181800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sE5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Either by making it directly mutable (most common), or wrapping it in a Ref (more advanced)"}]}]}],"reactions":[{"name":"+1","users":["UKA81L34J"],"count":1},{"name":"heart","users":["UKA81L34J"],"count":1}]},{"client_msg_id":"c0c900c0-4d69-4a8c-8fe2-b8d9d11af172","type":"message","text":"I have a C interop Q. If I have a `struct` generated by `Clang.jl`:\n```struct MlirOperationState\n    name::MlirStringRef\n    location::MlirLocation\n    nResults::intptr_t\n    results::Ptr{MlirType}\n    nOperands::intptr_t\n    operands::Ptr{MlirValue}\n    nRegions::intptr_t\n    regions::Ptr{MlirRegion}\n    nSuccessors::intptr_t\n    successors::Ptr{MlirBlock}\n    nAttributes::intptr_t\n    attributes::Ptr{MlirNamedAttribute}\nend```\nwhen I initialize this structure, it generates a number of null pointers - but on the C side, you call interface methods to mutate this structure in place <https://github.com/llvm/llvm-project/blob/5740f96d8eed0ac041a2aff294f3015ae289b24d/mlir/lib/CAPI/IR/IR.cpp#L177-L203>\n\nThese methods which I call through `ccall` accept a `Ptr` to this structure, perform some mutation, and then return `void` - of course, that means that on the Julia side, the instance of the structure needs to be updated with new pointers. How do people handle this in other C wrapper libraries ?","user":"UKA81L34J","ts":"1608391960.180700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4jKEg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have a C interop Q. If I have a "},{"type":"text","text":"struct","style":{"code":true}},{"type":"text","text":" generated by "},{"type":"text","text":"Clang.jl","style":{"code":true}},{"type":"text","text":":\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct MlirOperationState\n    name::MlirStringRef\n    location::MlirLocation\n    nResults::intptr_t\n    results::Ptr{MlirType}\n    nOperands::intptr_t\n    operands::Ptr{MlirValue}\n    nRegions::intptr_t\n    regions::Ptr{MlirRegion}\n    nSuccessors::intptr_t\n    successors::Ptr{MlirBlock}\n    nAttributes::intptr_t\n    attributes::Ptr{MlirNamedAttribute}\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"when I initialize this structure, it generates a number of null pointers - but on the C side, you call interface methods to mutate this structure in place "},{"type":"link","url":"https://github.com/llvm/llvm-project/blob/5740f96d8eed0ac041a2aff294f3015ae289b24d/mlir/lib/CAPI/IR/IR.cpp#L177-L203"},{"type":"text","text":"\n\nThese methods which I call through "},{"type":"text","text":"ccall","style":{"code":true}},{"type":"text","text":" accept a "},{"type":"text","text":"Ptr","style":{"code":true}},{"type":"text","text":" to this structure, perform some mutation, and then return "},{"type":"text","text":"void","style":{"code":true}},{"type":"text","text":" - of course, that means that on the Julia side, the instance of the structure needs to be updated with new pointers. How do people handle this in other C wrapper libraries ?"}]}]}]},{"client_msg_id":"cfe6f4d9-f071-4c6f-9fd8-adaae690aca6","type":"message","text":"Could some Pkg.jl devs shed some light on where exactly in the chain the `.julia` folder is created first? I believe it's from this method <https://github.com/JuliaLang/Pkg.jl/blob/master/src/Registry/Registry.jl#L162> ?","user":"U6C1MMAAJ","ts":"1608324285.176000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NAJ3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Could some Pkg.jl devs shed some light on where exactly in the chain the "},{"type":"text","text":".julia","style":{"code":true}},{"type":"text","text":" folder is created first? I believe it's from this method "},{"type":"link","url":"https://github.com/JuliaLang/Pkg.jl/blob/master/src/Registry/Registry.jl#L162"},{"type":"text","text":" ?"}]}]}],"thread_ts":"1608324285.176000","reply_count":2,"reply_users_count":2,"latest_reply":"1608324402.177300","reply_users":["U681ELA87","U6C1MMAAJ"],"subscribed":false},{"client_msg_id":"8ddd4862-f71e-479f-903c-1c1140fc3cdc","type":"message","text":"any pkg devs around?","user":"U6C1MMAAJ","ts":"1608324146.175300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mRaW4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"any pkg devs around?"}]}]}]},{"client_msg_id":"3368ef5b-ec89-47a9-8870-dd97ce867982","type":"message","text":"Does anyone have a 32-bit Windows build handy to test the functions being exported from `libjulia`  against their name inside `libjulia-internal`? I think there may be an underscore prepending issue there as well, but I would like confirmation.","user":"UPTBGS6CC","ts":"1608305253.174600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p5t","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does anyone have a 32-bit Windows build handy to test the functions being exported from "},{"type":"text","text":"libjulia","style":{"code":true}},{"type":"text","text":"  against their name inside "},{"type":"text","text":"libjulia-internal","style":{"code":true}},{"type":"text","text":"? I think there may be an underscore prepending issue there as well, but I would like confirmation."}]}]}],"thread_ts":"1608305253.174600","reply_count":1,"reply_users_count":1,"latest_reply":"1608309359.174800","reply_users":["UBVE598BC"],"subscribed":false},{"client_msg_id":"1ffef75e-9d95-420b-8b09-e0f611c10985","type":"message","text":"Ok, I figured it out. It's quite hacky though:\n```julia&gt; TypeofVararg = ccall(:jl_apply_type, Any, (Any, Ptr{Any}, Csize_t), Type, Any[Vararg], 1)\nType{Vararg}\n\njulia&gt; Vararg isa TypeofVararg\ntrue```","user":"UM30MT6RF","ts":"1608290781.173100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7YT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok, I figured it out. It's quite hacky though:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> TypeofVararg = ccall(:jl_apply_type, Any, (Any, Ptr{Any}, Csize_t), Type, Any[Vararg], 1)\nType{Vararg}\n\njulia> Vararg isa TypeofVararg\ntrue"}]}]}],"reactions":[{"name":"party_wizard","users":["UDB26738Q"],"count":1}]},{"client_msg_id":"7fe4ac39-693c-4697-bdc9-24245af5b5d9","type":"message","text":"Just for fun, this causes some fun segfaults:\n```julia&gt; TypeofVararg = deepcopy(Type{Int})\nType{Int64}\n\njulia&gt; TypeofVararg.hash = rand(Int32)\n1810880123\n\njulia&gt; TypeofVararg.parameters = Core.svec(Vararg)\nsvec(Vararg)\n\njulia&gt; TypeInternal error: encountered unexpected error in runtime:\nMethodError(f=Int64, args=(3,), world=0x0000000000000f64)\njl_method_error_bare at /buildworker/worker/package_linuxaarch64/build/src/gf.c:1798\njl_method_error at /buildworker/worker/package_linuxaarch64/build/src/gf.c:1816\njl_lookup_generic_ at /buildworker/worker/package_linuxaarch64/build/src/gf.c:2373 [inlined]\njl_apply_generic at /buildworker/worker/package_linuxaarch64/build/src/gf.c:2394\nconvert at ./number.jl:7\n```","user":"UM30MT6RF","ts":"1608289790.171400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"19Cln","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Just for fun, this causes some fun segfaults:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> TypeofVararg = deepcopy(Type{Int})\nType{Int64}\n\njulia> TypeofVararg.hash = rand(Int32)\n1810880123\n\njulia> TypeofVararg.parameters = Core.svec(Vararg)\nsvec(Vararg)\n\njulia> TypeInternal error: encountered unexpected error in runtime:\nMethodError(f=Int64, args=(3,), world=0x0000000000000f64)\njl_method_error_bare at /buildworker/worker/package_linuxaarch64/build/src/gf.c:1798\njl_method_error at /buildworker/worker/package_linuxaarch64/build/src/gf.c:1816\njl_lookup_generic_ at /buildworker/worker/package_linuxaarch64/build/src/gf.c:2373 [inlined]\njl_apply_generic at /buildworker/worker/package_linuxaarch64/build/src/gf.c:2394\nconvert at ./number.jl:7\n"}]}]}],"reactions":[{"name":"tombstone","users":["UDB26738Q"],"count":1}]},{"client_msg_id":"8068afd8-1aee-4a42-b0ab-0ac35fab9330","type":"message","text":"Is there a way to represent the equivalent of `Core.TypeofVararg` in previous Julia versions? This does not work:\n```julia&gt; Type{Vararg}\nERROR: TypeError: in Type, in parameter, expected Type, got Vararg\nStacktrace:\n [1] top-level scope at REPL[1]:1\n```\nThe error message is also quite confusing, since:\n```julia&gt; Vararg isa Type\ntrue```","user":"UM30MT6RF","ts":"1608288600.169200","team":"T68168MUP","edited":{"user":"UM30MT6RF","ts":"1608288645.000000"},"blocks":[{"type":"rich_text","block_id":"d+piJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a way to represent the equivalent of "},{"type":"text","text":"Core.TypeofVararg","style":{"code":true}},{"type":"text","text":" in previous Julia versions? This does not work:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Type{Vararg}\nERROR: TypeError: in Type, in parameter, expected Type, got Vararg\nStacktrace:\n [1] top-level scope at REPL[1]:1\n"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"The error message is also quite confusing, since:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Vararg isa Type\ntrue"}]}]}],"reactions":[{"name":"slack","users":["UDB26738Q"],"count":1}]},{"client_msg_id":"48a44ec6-d966-498b-a539-77ee7340c7db","type":"message","text":"This `range` business seems quite messy.","user":"USU9FRPEU","ts":"1608242845.164900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"u90MN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This "},{"type":"text","text":"range","style":{"code":true}},{"type":"text","text":" business seems quite messy."}]}]}]},{"client_msg_id":"22e1ea7c-2994-48a9-947a-b38b08636b61","type":"message","text":"`jl_init` is broken on master and presumably 1.6 as well, probably because when it tries to `dladdr` itself it gets `libjulia-internal.so` rather than `libjulia.so` and the former is not in the same directory as the latter in the nightly binaries (it is in the build tree though, which is why the embedding tests pass). I'm willing to help to fix this but I really don't know which assumptions are valid to make about the directory layout of a Julia installation. Can someone shed light on this (or point to documentation if it's documented)?","user":"UBVE598BC","ts":"1608156589.163500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+XcY7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"jl_init","style":{"code":true}},{"type":"text","text":" is broken on master and presumably 1.6 as well, probably because when it tries to "},{"type":"text","text":"dladdr","style":{"code":true}},{"type":"text","text":" itself it gets "},{"type":"text","text":"libjulia-internal.so","style":{"code":true}},{"type":"text","text":" rather than "},{"type":"text","text":"libjulia.so","style":{"code":true}},{"type":"text","text":" and the former is not in the same directory as the latter in the nightly binaries (it is in the build tree though, which is why the embedding tests pass). I'm willing to help to fix this but I really don't know which assumptions are valid to make about the directory layout of a Julia installation. Can someone shed light on this (or point to documentation if it's documented)?"}]}]}],"thread_ts":"1608156589.163500","reply_count":12,"reply_users_count":2,"latest_reply":"1608477790.193300","reply_users":["U66GD0880","UBVE598BC"],"subscribed":false},{"client_msg_id":"992e6cfb-ce50-42a4-a829-d2a74c038b5c","type":"message","text":"Though you might want Channel(<#C6SMTHQ3T|multithreading>) for future question threads","user":"U67BXBF99","ts":"1608133835.158400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"T7VAH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Though you might want Channel("},{"type":"channel","channel_id":"C6SMTHQ3T"},{"type":"text","text":") for future question threads"}]}]}],"reactions":[{"name":"+1","users":["U66GD0880"],"count":1}]},{"client_msg_id":"82156022-d943-46bc-8568-19beeea5bd80","type":"message","text":"eys","user":"U67BXBF99","ts":"1608093222.154900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iRcGK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"eys"}]}]}],"thread_ts":"1608093222.154900","reply_count":2,"reply_users_count":2,"latest_reply":"1608131544.157000","reply_users":["U674T3KB3","U6795JH6H"],"subscribed":false,"reactions":[{"name":"eyes","users":["U681ELA87","U680THK2S","U6BNE7LTZ","UDB26738Q","U6A936746","U6795JH6H","U679VPJ8L"],"count":7},{"name":"horse_racing","users":["U6795JH6H"],"count":1},{"name":"racehorse","users":["U6795JH6H"],"count":1}]},{"client_msg_id":"06e3349e-f089-4b85-8d20-f6face0f0f75","type":"message","text":"is `Base.Semaphore` thread-safe?","user":"U66GD0880","ts":"1608092471.154700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EYNlO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is "},{"type":"text","text":"Base.Semaphore","style":{"code":true}},{"type":"text","text":" thread-safe?"}]}]}]},{"client_msg_id":"0964c84a-a7d3-45e7-9e55-bd88f1e309af","type":"message","text":"One problem is that right now we don't save the raw text. We do save the lowered code, so the first step would be to write a comparator that checks for equality even with different gensyms. Not sure if that already exists.","user":"UC8821DPY","ts":"1608026430.152000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q8oj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"One problem is that right now we don't save the raw text. We do save the lowered code, so the first step would be to write a comparator that checks for equality even with different gensyms. Not sure if that already exists."}]}]}]},{"client_msg_id":"310e5328-3919-4f17-a37b-c1f7b53a4131","type":"message","text":"any idea how hard it would be? I thought of this as a result of conversation here <https://discourse.julialang.org/t/in-place-allocations-in-differentialequations/51813/8>","user":"U0179G7FG4F","ts":"1607974647.145400","team":"T68168MUP","attachments":[{"service_name":"JuliaLang","title":"In-place allocations in DifferentialEquations","title_link":"https://discourse.julialang.org/t/in-place-allocations-in-differentialequations/51813/8","text":"Yeah. The problem is that ODEProblem is specified on the definition of odedef!. Also, in general, it’s really hard to determine whether 2 functions are the same. That said, there might be low hanging fruit where for two textually identical functions, Julia might be able to be smarter in theory.","fallback":"JuliaLang: In-place allocations in DifferentialEquations","thumb_url":"https://aws1.discourse-cdn.com/business5/uploads/julialang/original/2X/1/12829a7ba92b924d4ce81099cbf99785bee9b405.png","ts":1607972961,"from_url":"https://discourse.julialang.org/t/in-place-allocations-in-differentialequations/51813/8","thumb_width":408,"thumb_height":263,"service_icon":"https://aws1.discourse-cdn.com/business5/uploads/julialang/optimized/2X/6/6ca888e296f59ca2a599807f7d5edd489e3d1829_2_180x180.png","id":1,"original_url":"https://discourse.julialang.org/t/in-place-allocations-in-differentialequations/51813/8"}],"blocks":[{"type":"rich_text","block_id":"Tck","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"any idea how hard it would be? I thought of this as a result of conversation here "},{"type":"link","url":"https://discourse.julialang.org/t/in-place-allocations-in-differentialequations/51813/8"}]}]}]},{"client_msg_id":"5a3c9fe5-5dc5-48f0-ad33-c4f3aa8d9891","type":"message","text":"yes","user":"U67BXBF99","ts":"1607974570.144600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pF2O","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes"}]}]}]},{"client_msg_id":"61d63a3c-8d33-48d2-aa9f-792679734fe1","type":"message","text":"would it be possible for Julia to not recompile methods if the new definition is textually identical to a previous definition?","user":"U0179G7FG4F","ts":"1607974417.144400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wbPy8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"would it be possible for Julia to not recompile methods if the new definition is textually identical to a previous definition?"}]}]}]}]