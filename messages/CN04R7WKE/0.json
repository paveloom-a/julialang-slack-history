{"cursor": 5, "messages": [{"client_msg_id":"eb2173ea-7d3f-4e4f-825b-c4e386029221","type":"message","text":"Hi,","user":"U7GQE9JP9","ts":"1616487384.127500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HkBA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi,"}]}]}]},{"client_msg_id":"d80d7c9f-c485-470c-8c6e-0a8cceaed220","type":"message","text":"I am not sure what you have in mind. A block matrix of DiffEqOperators?","user":"U7GQE9JP9","ts":"1616487415.128000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5aJst","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am not sure what you have in mind. A block matrix of DiffEqOperators?"}]}]}]},{"client_msg_id":"1a634aba-f744-49cc-9fb9-839365bcecb1","type":"message","text":"<@UB197FRCL> don't you get a block operator by just using the dimensions functionality?","user":"U69BL50BF","ts":"1616487488.128500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1UIVO","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UB197FRCL"},{"type":"text","text":" don't you get a block operator by just using the dimensions functionality?"}]}]}]},{"client_msg_id":"275e2d49-a265-45ce-a3c6-dcf7493e2078","type":"message","text":"I'm trying to use `NeuralPDE.jl` to solve the PDE\n```∂u/∂x + ∂u/∂y = -sin(y)```\nI don't have any boundary conditions. Rather, I would like to constrain the solution such that it has an isolated minimum at `(x,y) = (0,0)` , i.e.,  the gradient at zero is `∇u(0) = [0 0]` and the Hessian is positive definite `∇²u(0) ≻ 0` .\n\nIt doesn't look like this can be put into the `NeuralPDE.jl` framework easily. Can anyone suggest how to go about this? Thanks!","user":"UMNPJKFE1","ts":"1616520434.131500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FbELl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm trying to use "},{"type":"text","text":"NeuralPDE.jl","style":{"code":true}},{"type":"text","text":" to solve the PDE\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"∂u/∂x + ∂u/∂y = -sin(y)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I don't have any boundary conditions. Rather, I would like to constrain the solution such that it has an isolated minimum at "},{"type":"text","text":"(x,y) = (0,0)","style":{"code":true}},{"type":"text","text":" , i.e.,  the gradient at zero is "},{"type":"text","text":"∇u(0) = [0 0]","style":{"code":true}},{"type":"text","text":" and the Hessian is positive definite "},{"type":"text","text":"∇²u(0) ≻ 0","style":{"code":true}},{"type":"text","text":" .\n\nIt doesn't look like this can be put into the "},{"type":"text","text":"NeuralPDE.jl","style":{"code":true}},{"type":"text","text":" framework easily. Can anyone suggest how to go about this? Thanks!"}]}]}]},{"client_msg_id":"b0da3f29-bdd7-4aa3-a29d-c32026f4e44b","type":"message","text":"Is MTK able to model implicit systems and pass them to OrdinaryDiffEq right now? So an equation of the form `x*y - y*x + y +y^2 ~ 0` where `x` is really the differential of `y(t)`w.r.t. `t` ? I assumed that it would be possible, using the acausal model downstream, but I don't get how right now :sweat_smile:","user":"UNYPJU8DT","ts":"1616573690.136100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OiEJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is MTK able to model implicit systems and pass them to OrdinaryDiffEq right now? So an equation of the form "},{"type":"text","text":"x*y - y*x + y +y^2 ~ 0","style":{"code":true}},{"type":"text","text":" where "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" is really the differential of "},{"type":"text","text":"y(t)","style":{"code":true}},{"type":"text","text":"w.r.t. "},{"type":"text","text":"t","style":{"code":true}},{"type":"text","text":" ? I assumed that it would be possible, using the acausal model downstream, but I don't get how right now "},{"type":"emoji","name":"sweat_smile"}]}]}]},{"client_msg_id":"7cb67320-98e1-43b5-9d84-3f2cf182fbad","type":"message","text":"Hi. Short question re ModelingToolkit: is \"import\"-ing instead of \"using\" problematic/discouraged or the code below should work ok?","user":"U01R0NYA8F9","ts":"1616585231.137600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AYPC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi. Short question re ModelingToolkit: is \"import\"-ing instead of \"using\" problematic/discouraged or the code below should work ok?"}]}]}]},{"client_msg_id":"5cf51633-8ab8-4282-82c5-150964742d30","type":"message","text":"import ModelingToolkit\nModelingToolkit.@parameters t\nModelingToolkit.@variables u1(..)\n\nDt  = ModelingToolkit.Differential(t)\nDtt = ModelingToolkit.Differential(t)^2\n\nTMAX = 10\nF(t) = (t&lt;=TMAX/2) ? -1.0 : 1.0\nModelingToolkit.@register F(t)\n\neqs = [\n    Dtt(u1(t)) ~ F(t),\n]\nbcs = [\n    u1(0) ~ 0.f0,\n]","user":"U01R0NYA8F9","ts":"1616585242.137800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q=n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"import ModelingToolkit\nModelingToolkit.@parameters t\nModelingToolkit.@variables u1(..)\n\nDt  = ModelingToolkit.Differential(t)\nDtt = ModelingToolkit.Differential(t)^2\n\nTMAX = 10\nF(t) = (t<=TMAX/2) ? -1.0 : 1.0\nModelingToolkit.@register F(t)\n\neqs = [\n    Dtt(u1(t)) ~ F(t),\n]\nbcs = [\n    u1(0) ~ 0.f0,\n]"}]}]}]},{"client_msg_id":"d9198621-0513-4efa-8bc5-63ad0b792fde","type":"message","text":"Right now, it results in a LoadError","user":"U01R0NYA8F9","ts":"1616585292.138300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"haB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Right now, it results in a LoadError"}]}]}]},{"client_msg_id":"5a6017d8-aaa4-4757-a47e-a465488d627f","type":"message","text":"ERROR: LoadError: UndefVarError: Num not defined\nStacktrace:\n [1] #5\n   @ ~/.julia/dev/Symbolics/src/register.jl:43 [inlined]\n [2] _any\n   @ ./reduce.jl:876 [inlined]\n [3] any\n   @ ./reduce.jl:871 [inlined]\n [4] F(t::Symbolics.Num)\n   @ Main ~/.julia/dev/Symbolics/src/register.jl:43\n [5] top-level scope\n   @ ~/Desktop/bbb/microwe.jl:12\nin expression starting at /home/mquartulli/Desktop/bbb/microwe.jl:12","user":"U01R0NYA8F9","ts":"1616585294.138500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tZvl1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ERROR: LoadError: UndefVarError: Num not defined\nStacktrace:\n [1] #5\n   @ ~/.julia/dev/Symbolics/src/register.jl:43 [inlined]\n [2] _any\n   @ ./reduce.jl:876 [inlined]\n [3] any\n   @ ./reduce.jl:871 [inlined]\n [4] F(t::Symbolics.Num)\n   @ Main ~/.julia/dev/Symbolics/src/register.jl:43\n [5] top-level scope\n   @ ~/Desktop/bbb/microwe.jl:12\nin expression starting at /home/mquartulli/Desktop/bbb/microwe.jl:12"}]}]}]},{"client_msg_id":"24bb242a-5324-446c-879f-8ae12a98d723","type":"message","text":"as far as I understand due to the fact that","user":"U01R0NYA8F9","ts":"1616585316.138800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h9Mw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"as far as I understand due to the fact that"}]}]}]},{"client_msg_id":"c3fb0843-5dc6-4b4e-95da-fa0c0f141c39","type":"message","text":"register.jl in Symbolics does not import num.jl","user":"U01R0NYA8F9","ts":"1616585336.139200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CcA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"register.jl in Symbolics does not import num.jl"}]}]}]},{"client_msg_id":"e6a31354-0cc7-41db-ac86-b85cb588e06b","type":"message","text":"Of course, the micro example works if we change the first line to \"using ModelingToolkit\"","user":"U01R0NYA8F9","ts":"1616585408.139900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"r2CuQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Of course, the micro example works if we change the first line to \"using ModelingToolkit\""}]}]}]},{"client_msg_id":"304f938e-e415-48e3-a6fa-8a1264a48f38","type":"message","text":"(sorry for not getting the code formatting right in the messages above - will look into it)","user":"U01R0NYA8F9","ts":"1616585449.140500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"P9e8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(sorry for not getting the code formatting right in the messages above - will look into it)"}]}]}]},{"client_msg_id":"45479410-e0d9-4ffb-b74a-5634c494e727","type":"message","text":"(Please also do let me know if `diffeq-bridged` is a better channel for this...)","user":"U01R0NYA8F9","ts":"1616586068.141700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g5TsW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(Please also do let me know if "},{"type":"text","text":"diffeq-bridged","style":{"code":true}},{"type":"text","text":" is a better channel for this...)"}]}]}]},{"client_msg_id":"2a791fc8-df6b-42e8-8275-f00a7311688f","type":"message","text":"<@UER6P8FNG> suggested that I read <https://docs.julialang.org/en/v1.6.0-rc3/manual/modules/> . Thank you Ludovico!","user":"U01R0NYA8F9","ts":"1616587957.143000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BTUh","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UER6P8FNG"},{"type":"text","text":" suggested that I read "},{"type":"link","url":"https://docs.julialang.org/en/v1.6.0-rc3/manual/modules/"},{"type":"text","text":" . Thank you Ludovico!"}]}]}]},{"client_msg_id":"69452ae2-c763-463a-8107-853f7df0be46","type":"message","text":"Marked a couple of issues as good-first-issue in DiffEqFlux, if there are people looking for things to work on for their GSoC application let us know if you are working on it","user":"U6QF223TN","ts":"1616590818.145100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hF5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Marked a couple of issues as good-first-issue in DiffEqFlux, if there are people looking for things to work on for their GSoC application let us know if you are working on it"}]}]}]},{"client_msg_id":"17a2cad1-8823-49e7-afde-668db4ea8be7","type":"message","text":"<@U69BL50BF> Do you ( or anyone in this channel :sweat_smile: ) have any objections against getting rid of the implicit `ADM` optimizer in DataDriven? Since the parallel implicit algorithm is much more robust and makes more headaches for a new, general implicit result, I would just throw it away.","user":"UNYPJU8DT","ts":"1616592020.148000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hZoE","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U69BL50BF"},{"type":"text","text":" Do you ( or anyone in this channel "},{"type":"emoji","name":"sweat_smile"},{"type":"text","text":" ) have any objections against getting rid of the implicit "},{"type":"text","text":"ADM","style":{"code":true}},{"type":"text","text":" optimizer in DataDriven? Since the parallel implicit algorithm is much more robust and makes more headaches for a new, general implicit result, I would just throw it away."}]}]}]},{"client_msg_id":"b9366fab-89dc-4ae1-89ea-feba100ec1de","type":"message","text":"Keep it. I think having archival methods for people to test is good for science, even if it's not recommended.","user":"U69BL50BF","ts":"1616595716.148800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BJrI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Keep it. I think having archival methods for people to test is good for science, even if it's not recommended."}]}]}]},{"client_msg_id":"4b0672bf-11b3-4f3e-9cda-0b55aa6748c6","type":"message","text":"Does anyone know why this test fails despite it appears the same things are evaluated?\n```sbml2reactionsystem: Test Failed at /media/sf_DPhil_Project/Programmes/juliadev/dev/SBML.jl/test/sbml2reactionsystem.jl:9\n  Expression: isequal(parmap, trueparmap)\n   Evaluated: isequal(Pair{Num,Float64}[k1 =&gt; 0.8], Pair{Num,Float64}[k1 =&gt; 0.8, k2 =&gt; 0.6])\nStacktrace:\n [1] top-level scope at /media/sf_DPhil_Project/Programmes/juliadev/dev/SBML.jl/test/sbml2reactionsystem.jl:9\n [2] include(::String) at ./client.jl:457\n [3] top-level scope at /media/sf_DPhil_Project/Programmes/juliadev/dev/SBML.jl/test/runtests.jl:9\n [4] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1115\n [5] top-level scope at /media/sf_DPhil_Project/Programmes/juliadev/dev/SBML.jl/test/runtests.jl:9\n [6] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1115\n [7] top-level scope at /media/sf_DPhil_Project/Programmes/juliadev/dev/SBML.jl/test/runtests.jl:9```\nStrangely, my MWE does not fail:\n```using EzXML, Symbolics, Test\n\ndoc = parsexml(\"\"\"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;parameter id=\"k1\" value=\"1.\"/&gt;\"\"\")\n\nfunction build_par_map(parnodes::Vector{EzXML.Node})\n    ids = @. Num(Variable(Symbol(getindex(parnodes, \"id\"))))\n    vals = @. Float64(Meta.parse(getindex(parnodes, \"value\")))\n    ids .=&gt; vals\nend\n\ntrueparmap = [Num(Variable(:k1)) =&gt; 1., Num(Variable(:k1)) =&gt; 1.]\nparmap = build_par_map([doc.root, doc.root])\n\n@test isequal(parmap, trueparmap)```","user":"UQJA15XNF","ts":"1616712722.153100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6IaCd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does anyone know why this test fails despite it appears the same things are evaluated?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"sbml2reactionsystem: Test Failed at /media/sf_DPhil_Project/Programmes/juliadev/dev/SBML.jl/test/sbml2reactionsystem.jl:9\n  Expression: isequal(parmap, trueparmap)\n   Evaluated: isequal(Pair{Num,Float64}[k1 => 0.8], Pair{Num,Float64}[k1 => 0.8, k2 => 0.6])\nStacktrace:\n [1] top-level scope at /media/sf_DPhil_Project/Programmes/juliadev/dev/SBML.jl/test/sbml2reactionsystem.jl:9\n [2] include(::String) at ./client.jl:457\n [3] top-level scope at /media/sf_DPhil_Project/Programmes/juliadev/dev/SBML.jl/test/runtests.jl:9\n [4] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1115\n [5] top-level scope at /media/sf_DPhil_Project/Programmes/juliadev/dev/SBML.jl/test/runtests.jl:9\n [6] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1115\n [7] top-level scope at /media/sf_DPhil_Project/Programmes/juliadev/dev/SBML.jl/test/runtests.jl:9"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Strangely, my MWE does not fail:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using EzXML, Symbolics, Test\n\ndoc = parsexml(\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<parameter id=\"k1\" value=\"1.\"/>\"\"\")\n\nfunction build_par_map(parnodes::Vector{EzXML.Node})\n    ids = @. Num(Variable(Symbol(getindex(parnodes, \"id\"))))\n    vals = @. Float64(Meta.parse(getindex(parnodes, \"value\")))\n    ids .=> vals\nend\n\ntrueparmap = [Num(Variable(:k1)) => 1., Num(Variable(:k1)) => 1.]\nparmap = build_par_map([doc.root, doc.root])\n\n@test isequal(parmap, trueparmap)"}]}]}]},{"client_msg_id":"7cded0a5-0678-4efd-adfd-98ad748266c3","type":"message","text":"`isequal(Pair{Num,Float64}[k1 =&gt; 0.8], Pair{Num,Float64}[k1 =&gt; 0.8, k2 =&gt; 0.6])`","user":"U69BL50BF","ts":"1616723139.153300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Fxz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"isequal(Pair{Num,Float64}[k1 => 0.8], Pair{Num,Float64}[k1 => 0.8, k2 => 0.6])","style":{"code":true}}]}]}]},{"client_msg_id":"32906f9f-20ad-4926-8a05-64e2326a2dd8","type":"message","text":"those are not the same.","user":"U69BL50BF","ts":"1616723143.153500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Sie1l","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"those are not the same."}]}]}]},{"client_msg_id":"d3092a7a-46b7-43a2-9ce9-ae9344cb96d4","type":"message","text":"Is there any reason for not implementing a 5-arg `mul!` for `AbstractDiffEqLinearOperator`? If not, should I try a small PR?","user":"UB197FRCL","ts":"1616737278.154300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"i7yW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there any reason for not implementing a 5-arg "},{"type":"text","text":"mul!","style":{"code":true}},{"type":"text","text":" for "},{"type":"text","text":"AbstractDiffEqLinearOperator","style":{"code":true}},{"type":"text","text":"? If not, should I try a small PR?"}]}]}],"thread_ts":"1616737278.154300","reply_count":2,"reply_users_count":1,"latest_reply":"1616739034.154700","reply_users":["UB197FRCL"],"is_locked":false,"subscribed":false},{"client_msg_id":"03d0b310-cd13-42d5-af04-de29c82cbbf0","type":"message","text":"On a DiffEqOpeators.jl-related note, I keep getting\n```WARNING: Method definition *(Number, SciMLBase.AbstractDiffEqLinearOperator{T}) where {T} in module SciMLBase at /Users/benoitpasquier/.julia/dev/SciMLBase/src/operators/common_defaults.jl:15 overwritten in module DiffEqOperators at /Users/benoitpasquier/.julia/packages/DiffEqOperators/5mEx8/src/composite_operators.jl:20.\n  ** incremental compilation may be fatally broken for this module **\n\nWARNING: Method definition *(Number, SciMLBase.AbstractDiffEqLinearOperator{T}) where {T} in module SciMLBase at /Users/benoitpasquier/.julia/dev/SciMLBase/src/operators/common_defaults.jl:15 overwritten in module DiffEqOperators at /Users/benoitpasquier/.julia/packages/DiffEqOperators/5mEx8/src/composite_operators.jl:20.\n  ** incremental compilation may be fatally broken for this module **```\nwhich I think might just be a small oversight of some piece of code that was moved from DiffEqOperators into SciMLBase, but not sure","user":"UB197FRCL","ts":"1616739501.156000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aP55","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"On a DiffEqOpeators.jl-related note, I keep getting\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"WARNING: Method definition *(Number, SciMLBase.AbstractDiffEqLinearOperator{T}) where {T} in module SciMLBase at /Users/benoitpasquier/.julia/dev/SciMLBase/src/operators/common_defaults.jl:15 overwritten in module DiffEqOperators at /Users/benoitpasquier/.julia/packages/DiffEqOperators/5mEx8/src/composite_operators.jl:20.\n  ** incremental compilation may be fatally broken for this module **\n\nWARNING: Method definition *(Number, SciMLBase.AbstractDiffEqLinearOperator{T}) where {T} in module SciMLBase at /Users/benoitpasquier/.julia/dev/SciMLBase/src/operators/common_defaults.jl:15 overwritten in module DiffEqOperators at /Users/benoitpasquier/.julia/packages/DiffEqOperators/5mEx8/src/composite_operators.jl:20.\n  ** incremental compilation may be fatally broken for this module **"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"which I think might just be a small oversight of some piece of code that was moved from DiffEqOperators into SciMLBase, but not sure"}]}]}]},{"client_msg_id":"4943ebde-9169-40cb-8d33-b31cadd09693","type":"message","text":"seems like it","user":"U69BL50BF","ts":"1616752206.156600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CVa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"seems like it"}]}]}]},{"client_msg_id":"543b482e-7a03-4e80-b863-82a3fb6b10ad","type":"message","text":"there should be an easy fix for that though.","user":"U69BL50BF","ts":"1616752217.156900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4bXW9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there should be an easy fix for that though."}]}]}]},{"client_msg_id":"c8d1846c-95db-4037-b992-641020cdf722","type":"message","text":"Let me try to understand.\n• in SciMLBase `a * L` \"materializes\" the operator and turns it into the matrix `a * L.A`,\n• in DiffEqOperators, `a * L` creates a (lazy?) `ScaledDiffEqOperator`. \nI guess the DiffEqOperators has the the most advanced approach (and could nicely use things like the scalar arguments of the 5-arg `mul!` actually I guess?). But I'm not sure you'd want to remove the SciMLBase fallback. What would the easy fix be?","user":"UB197FRCL","ts":"1616754087.161800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KFO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Let me try to understand.\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in SciMLBase "},{"type":"text","text":"a * L","style":{"code":true}},{"type":"text","text":" \"materializes\" the operator and turns it into the matrix "},{"type":"text","text":"a * L.A","style":{"code":true}},{"type":"text","text":","}]},{"type":"rich_text_section","elements":[{"type":"text","text":"in DiffEqOperators, "},{"type":"text","text":"a * L","style":{"code":true}},{"type":"text","text":" creates a (lazy?) "},{"type":"text","text":"ScaledDiffEqOperator","style":{"code":true}},{"type":"text","text":". "}]}],"style":"bullet","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"I guess the DiffEqOperators has the the most advanced approach (and could nicely use things like the scalar arguments of the 5-arg "},{"type":"text","text":"mul!","style":{"code":true}},{"type":"text","text":" actually I guess?). But I'm not sure you'd want to remove the SciMLBase fallback. What would the easy fix be?"}]}]}]},{"client_msg_id":"479f268c-0f75-4631-b2b1-7ee8acdd665b","type":"message","text":"&gt; But I'm not sure you'd want to remove the SciMLBase fallback. What would the easy fix be?\n\nThe fallback isn't intended.","user":"U69BL50BF","ts":"1616755287.162100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Xitdn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"> But I'm not sure you'd want to remove the SciMLBase fallback. What would the easy fix be?\n\nThe fallback isn't intended."}]}]}]},{"client_msg_id":"5da1a035-1a06-463c-a696-68538c9b9611","type":"message","text":"So remove the `*` operation in <https://github.com/SciML/SciMLBase.jl/blob/4a95d3d1bd42c7bd7c13b8babdc2ee61188fbf8b/src/operators/common_defaults.jl#L13-L16>? I.e., remove the `*` in the first line below:\n```for op in (:*, :/, :\\), T in (:AbstractArray, :Number)\n  @eval Base.$op(L::AbstractDiffEqLinearOperator, x::$T) = $op(convert(AbstractMatrix,L), x)\n  @eval Base.$op(x::$T, L::AbstractDiffEqLinearOperator) = $op(x, convert(AbstractMatrix,L))\nend```","user":"UB197FRCL","ts":"1616756191.162900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dQw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So remove the "},{"type":"text","text":"*","style":{"code":true}},{"type":"text","text":" operation in "},{"type":"link","url":"https://github.com/SciML/SciMLBase.jl/blob/4a95d3d1bd42c7bd7c13b8babdc2ee61188fbf8b/src/operators/common_defaults.jl#L13-L16"},{"type":"text","text":"? I.e., remove the "},{"type":"text","text":"*","style":{"code":true}},{"type":"text","text":" in the first line below:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"for op in (:*, :/, :\\), T in (:AbstractArray, :Number)\n  @eval Base.$op(L::AbstractDiffEqLinearOperator, x::$T) = $op(convert(AbstractMatrix,L), x)\n  @eval Base.$op(x::$T, L::AbstractDiffEqLinearOperator) = $op(x, convert(AbstractMatrix,L))\nend"}]}]}]},{"client_msg_id":"2c2f3e18-129d-4d74-8b62-aad0147369a0","type":"message","text":"I think so.","user":"U69BL50BF","ts":"1616756333.163100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"A4Vm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think so."}]}]}]},{"client_msg_id":"8b60e468-2474-41fe-96ab-633bdb00d19e","type":"message","text":"Oh wait, you just want to remove the case of `a * L` where `a` is scalar. You want to keep the case where `a` is an array I think (I don't think there is an issue there that popped up for me).","user":"UB197FRCL","ts":"1616756537.164500","team":"T68168MUP","edited":{"user":"UB197FRCL","ts":"1616756556.000000"},"blocks":[{"type":"rich_text","block_id":"V6l","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh wait, you just want to remove the case of "},{"type":"text","text":"a * L","style":{"code":true}},{"type":"text","text":" where "},{"type":"text","text":"a","style":{"code":true}},{"type":"text","text":" is scalar. You want to keep the case where "},{"type":"text","text":"a","style":{"code":true}},{"type":"text","text":" is an array I think (I don't think there is an issue there that popped up for me)."}]}]}]},{"client_msg_id":"1e164ce8-261b-483e-9a6e-00f5bc7c25e5","type":"message","text":"So maybe remove the `T isa Number` case (`T` is the type of `a`)","user":"UB197FRCL","ts":"1616756677.165200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0Kg=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So maybe remove the "},{"type":"text","text":"T isa Number","style":{"code":true}},{"type":"text","text":" case ("},{"type":"text","text":"T","style":{"code":true}},{"type":"text","text":" is the type of "},{"type":"text","text":"a","style":{"code":true}},{"type":"text","text":")"}]}]}]},{"client_msg_id":"7c05a58e-a4e2-44ac-852f-086ae13f6bc9","type":"message","text":"My (improved?) understanding is that you only want to convert to a matrix when you actually do a matrix–vector (or matrix–matrix) operation. If it's something like `a * L` or `L / a` with a scalar `a`, then you want this to be lazy, right?","user":"UB197FRCL","ts":"1616756809.167800","team":"T68168MUP","edited":{"user":"UB197FRCL","ts":"1616756840.000000"},"blocks":[{"type":"rich_text","block_id":"TLc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My (improved?) understanding is that you only want to convert to a matrix when you actually do a matrix–vector (or matrix–matrix) operation. If it's something like "},{"type":"text","text":"a * L","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"L / a","style":{"code":true}},{"type":"text","text":" with a scalar "},{"type":"text","text":"a","style":{"code":true}},{"type":"text","text":", then you want this to be lazy, right?"}]}]}]},{"client_msg_id":"a7ddecb2-cc95-494a-bf82-74822b454731","type":"message","text":"yes, lazy should be preferred.","user":"U69BL50BF","ts":"1616756979.168800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7QNrn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, lazy should be preferred."}]}]}]},{"client_msg_id":"e70ea949-4b86-4c77-a06f-be95e17be4cd","type":"message","text":"OK So I suggested this removal here FWIW: <https://github.com/SciML/SciMLBase.jl/pull/41> (I know it's just a PR, but it's still a bit scary for me to edit anything in (SciML)Base, I feel like it's going to break lots of stuff! :sweat_smile:)","user":"UB197FRCL","ts":"1616757365.171100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DfJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"OK So I suggested this removal here FWIW: "},{"type":"link","url":"https://github.com/SciML/SciMLBase.jl/pull/41"},{"type":"text","text":" (I know it's just a PR, but it's still a bit scary for me to edit anything in (SciML)Base, I feel like it's going to break lots of stuff! "},{"type":"emoji","name":"sweat_smile"},{"type":"text","text":")"}]}]}]},{"client_msg_id":"fa75789a-d4a3-4b92-8b25-6a80a2e2f3a5","type":"message","text":"Thanks for all the answers and feedback!","user":"UB197FRCL","ts":"1616757394.171400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LL7C","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks for all the answers and feedback!"}]}]}]},{"client_msg_id":"a4d0c890-b2d7-459a-9e19-382ea7148b81","type":"message","text":"BTW I find it hard (impossible?) to decipher the error message in the failing tests <https://github.com/SciML/SciMLBase.jl/runs/2201300315?check_suite_focus=true> so I'm not sure how to help any further","user":"UB197FRCL","ts":"1616757673.173000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uIFT3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"BTW I find it hard (impossible?) to decipher the error message in the failing tests "},{"type":"link","url":"https://github.com/SciML/SciMLBase.jl/runs/2201300315?check_suite_focus=true"},{"type":"text","text":" so I'm not sure how to help any further"}]}]}]},{"client_msg_id":"8aeaa7ed-d147-4303-9b56-8d8e43884747","type":"message","text":"interesting. It's erroring because there's an ambiguity found.","user":"U69BL50BF","ts":"1616757793.173700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c9Kl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"interesting. It's erroring because there's an ambiguity found."}]}]}]},{"type":"message","text":"I recently saw a presentation that assert the adjoint methods is inferior in terms pf precision of the backward pass compared backward propagation through time.\nDoes that hold in this generality?\nWhere can i learn more about BPTT? (Is it supported in Julia)\nCan i use this insight to get more robust parameter estimation of classical differential equations too?","user":"U9MD78Z9N","ts":"1616758771.173800","team":"T68168MUP"},{"client_msg_id":"bbf7d882-e6c9-4d9b-961d-105065f210cb","type":"message","text":"yes, we'll be putting up a preprint soon on this topic.","user":"U69BL50BF","ts":"1616758996.174100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zoP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, we'll be putting up a preprint soon on this topic."}]}]}]},{"client_msg_id":"41373f88-ef67-44e3-9fae-401affd36d31","type":"message","text":"but yes, there's some old proofs about consistency of backprop on integrators.","user":"U69BL50BF","ts":"1616759023.174500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FXOWg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but yes, there's some old proofs about consistency of backprop on integrators."}]}]}]},{"type":"message","text":"The presentation where this came up was this: <https://www.youtube.com/watch?v=9AxYrmUlA0I> which i foound excellent. The presenter is from MIT or something like that.","user":"U9MD78Z9N","ts":"1616759212.174600","team":"T68168MUP","edited":{"user":"U9MD78Z9N","ts":"1616759317.000000"},"attachments":[{"service_name":"YouTube","service_url":"https://www.youtube.com/","title":"Liquid Time Constant Networks","title_link":"https://www.youtube.com/watch?v=9AxYrmUlA0I","author_name":"Simons Institute","author_link":"https://www.youtube.com/user/SimonsInstitute","thumb_url":"https://i.ytimg.com/vi/9AxYrmUlA0I/hqdefault.jpg","thumb_width":480,"thumb_height":360,"fallback":"YouTube Video: Liquid Time Constant Networks","video_html":"<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/9AxYrmUlA0I?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","video_html_width":400,"video_html_height":225,"from_url":"https://www.youtube.com/watch?v=9AxYrmUlA0I","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png","id":1,"original_url":"https://www.youtube.com/watch?v=9AxYrmUlA0I"}]},{"client_msg_id":"c38029a7-1be4-4916-b4d5-534fdecbbfaa","type":"message","text":"yes, in Daniela's lab and we've been talking with him.","user":"U69BL50BF","ts":"1616759356.175100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LeWx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, in Daniela's lab and we've been talking with him."}]}]}]},{"client_msg_id":"a24a2e93-5974-40ee-8a14-0739f25bb72f","type":"message","text":"BPTT is just a fancy term for backprop on the integration code though.","user":"U69BL50BF","ts":"1616759562.175500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4tSCE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"BPTT is just a fancy term for backprop on the integration code though."}]}]}]},{"type":"message","text":"That's what i needed to hear.","user":"U9MD78Z9N","ts":"1616759954.175600","team":"T68168MUP"},{"client_msg_id":"f58a8d82-47ee-4115-a207-be9137765295","type":"message","text":"I'm getting a weird error with Flux/DiffEqFlux with a simple loss function when I try to train. I'm not sure why it's giving me a `ERROR: LoadError: MethodError: no method matching +(::Float64, ::Array{Float64,2}` . Loss function works when I evaluate it myself. Could anyone help me with suggestions for how to debug or better code it? Simplified code below. (It'll be part of a slightly bigger SciML problem, which is why I'd like to use DiffEqFlux)\n\n```U = FastChain(FastDense(1, 10, sigmoid), FastDense(10, 1))\nfunction loss(θ)\n    # Evaluate U neural network at y and return scalar\n    nn_windspeed = y -&gt; U(y, θ)[1]\n    \n    y = -5:0.1:5\n    windspeeds = nn_windspeed.(y)\n    truewinds = y.^2\n\n    return sum(abs2, (windspeeds .- truewinds))\nend\nDiffEqFlux.sciml_train(loss, initial_params(U), ADAM(1.0e-2), maxiters = 200)```","user":"U0138UTB7A4","ts":"1616788506.177700","team":"T68168MUP","edited":{"user":"U0138UTB7A4","ts":"1616788562.000000"},"blocks":[{"type":"rich_text","block_id":"8AY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm getting a weird error with Flux/DiffEqFlux with a simple loss function when I try to train. I'm not sure why it's giving me a "},{"type":"text","text":"ERROR: LoadError: MethodError: no method matching +(::Float64, ::Array{Float64,2}","style":{"code":true}},{"type":"text","text":" . Loss function works when I evaluate it myself. Could anyone help me with suggestions for how to debug or better code it? Simplified code below. (It'll be part of a slightly bigger SciML problem, which is why I'd like to use DiffEqFlux)\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"U = FastChain(FastDense(1, 10, sigmoid), FastDense(10, 1))\nfunction loss(θ)\n    # Evaluate U neural network at y and return scalar\n    nn_windspeed = y -> U(y, θ)[1]\n    \n    y = -5:0.1:5\n    windspeeds = nn_windspeed.(y)\n    truewinds = y.^2\n\n    return sum(abs2, (windspeeds .- truewinds))\nend\nDiffEqFlux.sciml_train(loss, initial_params(U), ADAM(1.0e-2), maxiters = 200)"}]}]}]},{"client_msg_id":"410a2cea-30c4-4ea2-b4ae-eb9d3939201c","type":"message","text":"our equation is actually\nS du/dt = Dx(T (Dx(u)))\nS is a capacity term. Sometimes, in parts or all of the domain, S is 0. In our traditional setup that's allowed. Having S=0 turns that part of the domain into steady state problems. And the problem is solvable. However, in ODEproblems, we have to re-write it as\n\ndu/dt = 1/S Dx(T (Dx(u)))\n\nBut this will not work because I will have to do\nSinv= 1./S; Sinv[S.&lt;=0].=0\n\nThen all matrix terms will be set to 0 for the parts where S=0. Imagine this is for the whole domain, then every matrix entry is 0 and it is unsolvable.\n\nAny solution? S seems to be different from the mass matrix.","user":"U01CFQU8UFL","ts":"1616860495.180500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yCjT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"our equation is actually\nS du/dt = Dx(T (Dx(u)))\nS is a capacity term. Sometimes, in parts or all of the domain, S is 0. In our traditional setup that's allowed. Having S=0 turns that part of the domain into steady state problems. And the problem is solvable. However, in ODEproblems, we have to re-write it as\n\ndu/dt = 1/S Dx(T (Dx(u)))\n\nBut this will not work because I will have to do\nSinv= 1./S; Sinv[S.<=0].=0\n\nThen all matrix terms will be set to 0 for the parts where S=0. Imagine this is for the whole domain, then every matrix entry is 0 and it is unsolvable.\n\nAny solution? S seems to be different from the mass matrix."}]}]}]},{"client_msg_id":"3435a039-0365-4134-8ed7-e0ebaf86dfab","type":"message","text":"<@U01CFQU8UFL> That is equivalent to a mass matrix.","user":"U69BL50BF","ts":"1616952376.181000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JzIPS","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01CFQU8UFL"},{"type":"text","text":" That is equivalent to a mass matrix."}]}]}]},{"client_msg_id":"2ff97af7-921f-4802-9c2d-38eb69a124a9","type":"message","text":"If it's a scalar just use a diagonal MM","user":"U69BL50BF","ts":"1616952387.181300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CJ1Y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If it's a scalar just use a diagonal MM"}]}]}],"thread_ts":"1616952387.181300","reply_count":3,"reply_users_count":2,"latest_reply":"1616953874.181800","reply_users":["U01CFQU8UFL","U69BL50BF"],"is_locked":false,"subscribed":false},{"client_msg_id":"76f46174-4e0b-4d2d-9d16-31a32cc6fa7b","type":"message","text":"How do you computational biology/chemistry types model a large but discrete number of 3 interacting molecules in chemical reactions? Or does that not really happen in the real world? Do you do that with enzymes?","user":"U7Z4938R3","ts":"1617028909.182600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QAup","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How do you computational biology/chemistry types model a large but discrete number of 3 interacting molecules in chemical reactions? Or does that not really happen in the real world? Do you do that with enzymes?"}]}]}]},{"client_msg_id":"cb79c510-53b8-4f3c-9d00-a7c8f72cba17","type":"message","text":"Tau-leaping methods","user":"U69BL50BF","ts":"1617028938.182800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Wzu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Tau-leaping methods"}]}]}]},{"client_msg_id":"4a710fa0-ead3-4366-ac84-058ef348cfd4","type":"message","text":"What is the mathematical model they implement? Can you express like a markov chain?","user":"U7Z4938R3","ts":"1617029270.182900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Zs0t","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What is the mathematical model they implement? Can you express like a markov chain?"}]}]}]},{"client_msg_id":"29bd393a-4f17-4cc8-a509-d75940d83978","type":"message","text":"it's an approximation to a continuous-time markov chain","user":"U69BL50BF","ts":"1617029310.183200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zRa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's an approximation to a continuous-time markov chain"}]}]}]},{"client_msg_id":"4b9cf29a-2328-4ecd-8154-d6830a58ecc1","type":"message","text":"transforming it into a discrete time markov chain with Poisson jumps","user":"U69BL50BF","ts":"1617029320.183500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q61","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"transforming it into a discrete time markov chain with Poisson jumps"}]}]}]},{"client_msg_id":"d1574f83-b686-47f2-9062-3b9f447e3a5d","type":"message","text":"Ok, sorry for the imprecision. Given a markov chain I understand the calculation roughly using those tricks, but how do you describe the dynamics of 3 interacting molecules in a markov chain? Is there a toy example? I know how to implement these things with 2 interacting things, but not sure what 3 looks like.","user":"U7Z4938R3","ts":"1617029419.183600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1fn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok, sorry for the imprecision. Given a markov chain I understand the calculation roughly using those tricks, but how do you describe the dynamics of 3 interacting molecules in a markov chain? Is there a toy example? I know how to implement these things with 2 interacting things, but not sure what 3 looks like."}]}]}]},{"client_msg_id":"7a2a7bbd-9676-4208-a342-4847cdacb6aa","type":"message","text":"Is this how enzymes are modeled and calculated?","user":"U7Z4938R3","ts":"1617029441.183700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Kzl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is this how enzymes are modeled and calculated?"}]}]}]},{"client_msg_id":"bbf8d169-edf4-45dd-8561-981e068cac93","type":"message","text":"Yes Michalis-Menton enzyme kinetics is a classic 3 system","user":"U69BL50BF","ts":"1617029583.184200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/EZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes Michalis-Menton enzyme kinetics is a classic 3 system"}]}]}],"thread_ts":"1617029583.184200","reply_count":1,"reply_users_count":1,"latest_reply":"1617031174.184600","reply_users":["U7Z4938R3"],"is_locked":false,"subscribed":false},{"client_msg_id":"c9eee8ad-2dad-41f1-ac09-de0f69815786","type":"message","text":"note that you always assume that only two things interact at a time though","user":"U69BL50BF","ts":"1617029593.184500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ILJvm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"note that you always assume that only two things interact at a time though"}]}]}]},{"type":"message","text":"It’s in the definition of a Poisson process, the first clause says that in a short time not more than one event happens","files":[{"id":"F01TF24U7NU","created":1617043242,"timestamp":1617043242,"name":"Screenshot 2021-03-29 at 20.40.01.png","title":"Screenshot 2021-03-29 at 20.40.01.png","mimetype":"image/png","filetype":"png","pretty_type":"PNG","user":"U6C937ENB","editable":false,"size":31643,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01TF24U7NU/screenshot_2021-03-29_at_20.40.01.png","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01TF24U7NU/download/screenshot_2021-03-29_at_20.40.01.png","thumb_64":"https://files.slack.com/files-tmb/T68168MUP-F01TF24U7NU-9ed85428f8/screenshot_2021-03-29_at_20.40.01_64.png","thumb_80":"https://files.slack.com/files-tmb/T68168MUP-F01TF24U7NU-9ed85428f8/screenshot_2021-03-29_at_20.40.01_80.png","thumb_360":"https://files.slack.com/files-tmb/T68168MUP-F01TF24U7NU-9ed85428f8/screenshot_2021-03-29_at_20.40.01_360.png","thumb_360_w":360,"thumb_360_h":51,"thumb_480":"https://files.slack.com/files-tmb/T68168MUP-F01TF24U7NU-9ed85428f8/screenshot_2021-03-29_at_20.40.01_480.png","thumb_480_w":480,"thumb_480_h":68,"thumb_160":"https://files.slack.com/files-tmb/T68168MUP-F01TF24U7NU-9ed85428f8/screenshot_2021-03-29_at_20.40.01_160.png","thumb_720":"https://files.slack.com/files-tmb/T68168MUP-F01TF24U7NU-9ed85428f8/screenshot_2021-03-29_at_20.40.01_720.png","thumb_720_w":720,"thumb_720_h":102,"thumb_800":"https://files.slack.com/files-tmb/T68168MUP-F01TF24U7NU-9ed85428f8/screenshot_2021-03-29_at_20.40.01_800.png","thumb_800_w":800,"thumb_800_h":113,"thumb_960":"https://files.slack.com/files-tmb/T68168MUP-F01TF24U7NU-9ed85428f8/screenshot_2021-03-29_at_20.40.01_960.png","thumb_960_w":960,"thumb_960_h":136,"thumb_1024":"https://files.slack.com/files-tmb/T68168MUP-F01TF24U7NU-9ed85428f8/screenshot_2021-03-29_at_20.40.01_1024.png","thumb_1024_w":1024,"thumb_1024_h":145,"original_w":1176,"original_h":166,"thumb_tiny":"AwAGADDTOe2KOfaiigBOfUU3JFPph/xoAXP8qdUfp9KkoA//2Q==","permalink":"https://julialang.slack.com/files/U6C937ENB/F01TF24U7NU/screenshot_2021-03-29_at_20.40.01.png","permalink_public":"https://slack-files.com/T68168MUP-F01TF24U7NU-b8c86d55f0","is_starred":false,"has_rich_preview":false}],"upload":false,"blocks":[{"type":"rich_text","block_id":"=lULm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It’s in the definition of a Poisson process, the first clause says that in a short time not more than one event happens"}]}]}],"user":"U6C937ENB","display_as_bot":false,"ts":"1617043274.188400"},{"client_msg_id":"c9e6f692-d44c-4186-b038-11ae9ca9245d","type":"message","text":"Is Petzold, Cao and Gillespie from the mid 2000s still state of the art for tau leaping?","user":"U677NAWV8","ts":"1617060431.190300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DW2i+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is Petzold, Cao and Gillespie from the mid 2000s still state of the art for tau leaping?"}]}]}]},{"client_msg_id":"05f8433c-70bf-4129-b475-feb126325e2b","type":"message","text":"Is there a standard textbook of these sorts of problems chemical kinetics that would cover all of the key modeling tricks and variations (not the numerical methods, since I can just use whatever is off the shelf) that might be readable for someone relatively ignorant of chemistry but able to follow the math/probability/etx. on how things are turned into stochastic equations? I find something along the lines of \"stochastic methods for the natural and social sciences\" by Gardiner and Crispin very readable, it just doesn't have enough details on these topics","user":"U7Z4938R3","ts":"1617082791.197000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vkQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a standard textbook of these sorts of problems chemical kinetics that would cover all of the key modeling tricks and variations (not the numerical methods, since I can just use whatever is off the shelf) that might be readable for someone relatively ignorant of chemistry but able to follow the math/probability/etx. on how things are turned into stochastic equations? I find something along the lines of \"stochastic methods for the natural and social sciences\" by Gardiner and Crispin very readable, it just doesn't have enough details on these topics"}]}]}]},{"client_msg_id":"c784066e-e78a-410c-9230-af9b27feb945","type":"message","text":"standard? I don't think so.","user":"U69BL50BF","ts":"1617083024.197200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"44A","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"standard? I don't think so."}]}]}]},{"client_msg_id":"1a897d0b-8153-406f-b54b-eb94261a2d66","type":"message","text":"I don't think textbooks have caught up.","user":"U69BL50BF","ts":"1617083033.197400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ga2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't think textbooks have caught up."}]}]}]},{"client_msg_id":"a26e083b-4778-41fe-b10f-b65b924727a3","type":"message","text":"What would be the furthest along for the modeling? Or is the sort of stuff in gardiner (<http://www.springer.com/cda/content/document/cda_downloaddocument/9783540707127-t1.pdf?SGWID=0-0-45-650108-p173868124|http://www.springer.com/cda/content/document/cda_downloaddocument/9783540707127-t1.pdf?SGWID=0-0-45-650108-p173868124> pretty close for the models (but not numerical methods)?","user":"U7Z4938R3","ts":"1617083281.197500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8CTYx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What would be the furthest along for the modeling? Or is the sort of stuff in gardiner ("},{"type":"link","url":"http://www.springer.com/cda/content/document/cda_downloaddocument/9783540707127-t1.pdf?SGWID=0-0-45-650108-p173868124","text":"http://www.springer.com/cda/content/document/cda_downloaddocument/9783540707127-t1.pdf?SGWID=0-0-45-650108-p173868124"},{"type":"text","text":" pretty close for the models (but not numerical methods)?"}]}]}]},{"type":"message","text":"Does auto-optimize return DiffEqOperators when the problem is recognized as linear?","user":"U9MD78Z9N","ts":"1617104209.197700","team":"T68168MUP"},{"client_msg_id":"80ea0094-5f1b-4edc-b96e-45c5a82f9c70","type":"message","text":"no","user":"U69BL50BF","ts":"1617106546.198800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"41dT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no"}]}]}]},{"client_msg_id":"1614ec94-fa0d-4f5d-ac0d-a480e14abc16","type":"message","text":"it should though","user":"U69BL50BF","ts":"1617106548.199000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MgdbQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it should though"}]}]}]},{"type":"message","text":"I agree.","user":"U9MD78Z9N","ts":"1617108489.199100","team":"T68168MUP"},{"type":"message","text":"I might work on that for JuliaCon.","user":"U9MD78Z9N","ts":"1617108625.199200","team":"T68168MUP"},{"client_msg_id":"0a0ee71d-9647-42ce-a199-41d2e0b4d5cd","type":"message","text":"Free name idea for a package in this ecosystem: `SciNet.jl` (pronounced as “skynet”)","user":"U017PV1H2LV","ts":"1617120880.202400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FvhE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Free name idea for a package in this ecosystem: "},{"type":"text","text":"SciNet.jl","style":{"code":true}},{"type":"text","text":" (pronounced as “skynet”)"}]}]}],"reactions":[{"name":"terminator","users":["UUTEK2XTM","U69BL50BF"],"count":2}]},{"client_msg_id":"78096429-b79e-49a1-819a-fd68aded56ae","type":"message","text":"what was the debugging environment used in the video at the bottom of this page? <https://github.com/SciML/DiffEqFlux.jl>\nI'm using VS Code but Plots are not showing correctly.","user":"U01CFQU8UFL","ts":"1617250371.204800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xjYl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what was the debugging environment used in the video at the bottom of this page? "},{"type":"link","url":"https://github.com/SciML/DiffEqFlux.jl"},{"type":"text","text":"\nI'm using VS Code but Plots are not showing correctly."}]}]}],"thread_ts":"1617250371.204800","reply_count":1,"reply_users_count":1,"latest_reply":"1617251365.205000","reply_users":["UM8JUNJG7"],"is_locked":false,"subscribed":false},{"type":"message","text":"I’m playing with DataDrivenDiffEq.jl and SINDy in order to retrieve a quadratic function (x^2, alpha and mu in the plot) from the output of a neural network. The neural network perfectly approximates the ideal function (see plot). SINDy works without issues for a pure quadratic function, but I can’t manage to correctly retrieve the quadratic function from the neural network. Here’s the code:\n\n```## Symbolic regression via sparse regression (SINDy)\n    # Create a Basis\n    Xp = Float64.(copy(reshape(snowfall_toy, (1,length((snowfall_toy))))))\n    Xt = max.(temperature_toy.-T_melt, 0)\n    @variables X_P[1:1]\n\n    # Generate the basis functions, multivariate polynomials up to deg 5\n    b = [polynomial_basis(X_P, 5);]\n    basis_p = Basis(b, X_P)\n    opt = SR3(9e-2, 1.0)\n    λs = exp10.(-5:0.1:-1)\n\n    # Test on ideal data\n    println(\"SINDy on ideal data \\n\")\n    Ψ_true = SINDy(Xp, α(snow_norm'), basis_p, opt, maxiter = 1000) # Succeed\n \n    println(Ψ_true)\n    print_equations(Ψ_true, show_parameter=true)\n    p̂_true = parameters(Ψ_true)\n    println(\"Ψ_true Parameter guess : $(p̂_true) \\n\")\n\n    println(\"SINDy on predicted data \\n\")\n    Ψ = SINDy(Xp, Float64.(Ŷ_acc), basis_p, opt, p=[0], maxiter = 20000, denoise=true, normalize=true)\n\n    println(Ψ)\n    print_equations(Ψ, show_parameter=true)\n    p̂ = parameters(Ψ)\n    println(\"Ψ First parameter guess : $(p̂)\")```\nAnd here’s the output of SINDy on the predicted (neural network) data:\n\n```SINDy on predicted data \n\nSparse Identification Result\nNo. of Parameters : 7\nActive terms : 6\n   Equation 1 : 6\nOverall error (L2-Norm) : 2267.457109646358\n   Equation 1 : 2267.457109646358\nAICC :\n   Equation 1 : -18.67801478977601\n\nSR3{Float64,UnionAll}(0.09, 1.0, ProximalOperators.NormL1) did not converge after 200000 iterations.\n\nf_1 = 25.797580843349685(X_P₁^2) + 0.44898055582267377(X_P₁^3) + 0.0036457351085985817(X_P₁^4) + 7.313393652331785e-6(X_P₁^5) - (376.8493830347794X_P₁)```\nI have constrained the learning of the neural network within a physically-plausible range of values through the loss function. This might imply that the neural network correctly approximates the quadratic function for a certain range of values (the ones from the plot), but for the rest it no longer matches.\n\nIs there a way to perform SINDy only within a certain range of values of the function? What else should I check/test in order to make it work? It looks like a pretty easy case, so I’m sure I’m doing a rookie mistake.\n\nThanks a lot in advance!","files":[{"id":"F01SUU137EJ","created":1617271504,"timestamp":1617271504,"name":"recovered_functions.png","title":"recovered_functions.png","mimetype":"image/png","filetype":"png","pretty_type":"PNG","user":"U01QV28FEHL","editable":false,"size":36802,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01SUU137EJ/recovered_functions.png","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01SUU137EJ/download/recovered_functions.png","thumb_64":"https://files.slack.com/files-tmb/T68168MUP-F01SUU137EJ-f40e60cae5/recovered_functions_64.png","thumb_80":"https://files.slack.com/files-tmb/T68168MUP-F01SUU137EJ-f40e60cae5/recovered_functions_80.png","thumb_360":"https://files.slack.com/files-tmb/T68168MUP-F01SUU137EJ-f40e60cae5/recovered_functions_360.png","thumb_360_w":360,"thumb_360_h":240,"thumb_480":"https://files.slack.com/files-tmb/T68168MUP-F01SUU137EJ-f40e60cae5/recovered_functions_480.png","thumb_480_w":480,"thumb_480_h":320,"thumb_160":"https://files.slack.com/files-tmb/T68168MUP-F01SUU137EJ-f40e60cae5/recovered_functions_160.png","original_w":600,"original_h":400,"thumb_tiny":"AwAgADDS70NntSKQQPWnUANG7PJpe/WgdSaRTnHrQArZ7Ug3Z5NOpB1zQAgGMD9aU/rQc9qTdtPPWgB1IBjAHSjJIyBQc9qAA/rS0zcAeetOBz0FAH//2Q==","permalink":"https://julialang.slack.com/files/U01QV28FEHL/F01SUU137EJ/recovered_functions.png","permalink_public":"https://slack-files.com/T68168MUP-F01SUU137EJ-9158c03c57","is_starred":false,"has_rich_preview":false}],"upload":false,"blocks":[{"type":"rich_text","block_id":"gZJ/L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’m playing with DataDrivenDiffEq.jl and SINDy in order to retrieve a quadratic function (x^2, alpha and mu in the plot) from the output of a neural network. The neural network perfectly approximates the ideal function (see plot). SINDy works without issues for a pure quadratic function, but I can’t manage to correctly retrieve the quadratic function from the neural network. Here’s the code:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"## Symbolic regression via sparse regression (SINDy)\n    # Create a Basis\n    Xp = Float64.(copy(reshape(snowfall_toy, (1,length((snowfall_toy))))))\n    Xt = max.(temperature_toy.-T_melt, 0)\n    @variables X_P[1:1]\n\n    # Generate the basis functions, multivariate polynomials up to deg 5\n    b = [polynomial_basis(X_P, 5);]\n    basis_p = Basis(b, X_P)\n    opt = SR3(9e-2, 1.0)\n    λs = exp10.(-5:0.1:-1)\n\n    # Test on ideal data\n    println(\"SINDy on ideal data \\n\")\n    Ψ_true = SINDy(Xp, α(snow_norm'), basis_p, opt, maxiter = 1000) # Succeed\n \n    println(Ψ_true)\n    print_equations(Ψ_true, show_parameter=true)\n    p̂_true = parameters(Ψ_true)\n    println(\"Ψ_true Parameter guess : $(p̂_true) \\n\")\n\n    println(\"SINDy on predicted data \\n\")\n    Ψ = SINDy(Xp, Float64.(Ŷ_acc), basis_p, opt, p=[0], maxiter = 20000, denoise=true, normalize=true)\n\n    println(Ψ)\n    print_equations(Ψ, show_parameter=true)\n    p̂ = parameters(Ψ)\n    println(\"Ψ First parameter guess : $(p̂)\")"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nAnd here’s the output of SINDy on the predicted (neural network) data:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"SINDy on predicted data \n\nSparse Identification Result\nNo. of Parameters : 7\nActive terms : 6\n   Equation 1 : 6\nOverall error (L2-Norm) : 2267.457109646358\n   Equation 1 : 2267.457109646358\nAICC :\n   Equation 1 : -18.67801478977601\n\nSR3{Float64,UnionAll}(0.09, 1.0, ProximalOperators.NormL1) did not converge after 200000 iterations.\n\nf_1 = 25.797580843349685(X_P₁^2) + 0.44898055582267377(X_P₁^3) + 0.0036457351085985817(X_P₁^4) + 7.313393652331785e-6(X_P₁^5) - (376.8493830347794X_P₁)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nI have constrained the learning of the neural network within a physically-plausible range of values through the loss function. This might imply that the neural network correctly approximates the quadratic function for a certain range of values (the ones from the plot), but for the rest it no longer matches.\n\nIs there a way to perform SINDy only within a certain range of values of the function? What else should I check/test in order to make it work? It looks like a pretty easy case, so I’m sure I’m doing a rookie mistake.\n\nThanks a lot in advance!"}]}]}],"user":"U01QV28FEHL","display_as_bot":false,"ts":"1617272181.212700","edited":{"user":"U01QV28FEHL","ts":"1617272235.000000"}},{"client_msg_id":"25ea9518-32a4-43d6-98df-3a9c5f1699ee","type":"message","text":"Is there any reason for the absence of `adjoint(::AbstractDiffEqLinearOperator)`? For context, I had an operator `L` and tried `L'` which threw with\n```MethodError: no method matching adjoint(::DiffEqArrayOperator{Float64, SparseMatrixCSC{Float64, Int64}, typeof(SciMLBase.DEFAULT_UPDATE_FUNC)})```","user":"UB197FRCL","ts":"1617277628.214400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Js0P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there any reason for the absence of "},{"type":"text","text":"adjoint(::AbstractDiffEqLinearOperator)","style":{"code":true}},{"type":"text","text":"? For context, I had an operator "},{"type":"text","text":"L","style":{"code":true}},{"type":"text","text":" and tried "},{"type":"text","text":"L'","style":{"code":true}},{"type":"text","text":" which threw with\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"MethodError: no method matching adjoint(::DiffEqArrayOperator{Float64, SparseMatrixCSC{Float64, Int64}, typeof(SciMLBase.DEFAULT_UPDATE_FUNC)})"}]}]}]},{"client_msg_id":"d8fc4cc9-d2c3-4049-9e26-2b123c653c99","type":"message","text":"we don't have any operations on the adjoint, so :shrug:","user":"U69BL50BF","ts":"1617278297.214700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LxvfS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we don't have any operations on the adjoint, so "},{"type":"emoji","name":"shrug"}]}]}]},{"client_msg_id":"cffd0e40-65a6-4fcf-922d-9bf5772d34e0","type":"message","text":"open an issue if you want it though.","user":"U69BL50BF","ts":"1617278327.214900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=gO2A","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"open an issue if you want it though."}]}]}]},{"client_msg_id":"8bf6d36f-b138-43e2-ad99-357aa7e94cef","type":"message","text":"<https://twitter.com/jbramburger7/status/1377641045358342147?s=19|https://twitter.com/jbramburger7/status/1377641045358342147?s=19>","user":"UDGT4PM41","ts":"1617294601.216800","team":"T68168MUP","attachments":[{"fallback":"<https://twitter.com/jbramburger7|@jbramburger7>: Join us tomorrow at 9:00 am PST for UW's Data-Driven Methods in Science and Engineering seminar featuring <https://twitter.com/kcarlberg|@kcarlberg> from <https://twitter.com/UW|@UW> \n \nTitle: Nonlinear model reduction: Using AI to enable rapid simulation of extreme-scale physics models\n\nLivestream: <https://youtu.be/cfVmlStNcRE> <https://pbs.twimg.com/media/Ex5dD3bU4AQ2gtZ.jpg>","ts":1617290195,"author_name":"Jason J. Bramburger","author_link":"https://twitter.com/jbramburger7/status/1377641045358342147","author_icon":"https://pbs.twimg.com/profile_images/1302610719075119105/Hm7QT9Gt_normal.jpg","author_subname":"@jbramburger7","text":"Join us tomorrow at 9:00 am PST for UW's Data-Driven Methods in Science and Engineering seminar featuring <https://twitter.com/kcarlberg|@kcarlberg> from <https://twitter.com/UW|@UW> \n \nTitle: Nonlinear model reduction: Using AI to enable rapid simulation of extreme-scale physics models\n\nLivestream: <https://youtu.be/cfVmlStNcRE> <https://pbs.twimg.com/media/Ex5dD3bU4AQ2gtZ.jpg>","service_name":"twitter","service_url":"https://twitter.com/","from_url":"https://twitter.com/jbramburger7/status/1377641045358342147?s=19","image_url":"https://pbs.twimg.com/media/Ex5dD3bU4AQ2gtZ.jpg","image_width":900,"image_height":1200,"image_bytes":220798,"id":1,"original_url":"https://twitter.com/jbramburger7/status/1377641045358342147?s=19","footer":"Twitter","footer_icon":"https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"}],"blocks":[{"type":"rich_text","block_id":"WLeu","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://twitter.com/jbramburger7/status/1377641045358342147?s=19","text":"https://twitter.com/jbramburger7/status/1377641045358342147?s=19"}]}]}]},{"client_msg_id":"e2c90373-b7c1-4362-8083-72c61dd217cd","type":"message","text":"this strikes me as a good use case for sciml\n\n<https://cdorgs.github.io/>","user":"U6CF3AA5Q","ts":"1617390554.224600","team":"T68168MUP","attachments":[{"service_name":"CDOs","title":"About","title_link":"https://cdorgs.github.io/","text":"Computer-Designed Organisms","fallback":"CDOs: About","from_url":"https://cdorgs.github.io/","service_icon":"https://cdorgs.github.io/img/icon.png","id":1,"original_url":"https://cdorgs.github.io/"}],"blocks":[{"type":"rich_text","block_id":"l4Dxb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this strikes me as a good use case for sciml\n\n"},{"type":"link","url":"https://cdorgs.github.io/"}]}]}]},{"client_msg_id":"c4ba70c0-f1ef-4c69-bfbc-3d1471ebde73","type":"message","text":"absolute banger of a video on coupled oscillators from veritasium feat steven strogatz <https://www.youtube.com/watch?v=t-_VPRCtiUg>","user":"UM8JUNJG7","ts":"1617415420.226100","team":"T68168MUP","edited":{"user":"UM8JUNJG7","ts":"1617415424.000000"},"blocks":[{"type":"rich_text","block_id":"Gr8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"absolute banger of a video on coupled oscillators from veritasium feat steven strogatz "},{"type":"link","url":"https://www.youtube.com/watch?v=t-_VPRCtiUg"}]}]}]},{"type":"message","text":"did anyone ever get \"map is not defined on dictionary\" error upon running sciml_train? What does this tell us?","files":[{"id":"F01TM9HAF89","created":1617572590,"timestamp":1617572590,"name":"image.png","title":"image.png","mimetype":"image/png","filetype":"png","pretty_type":"PNG","user":"U01CFQU8UFL","editable":false,"size":514650,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01TM9HAF89/image.png","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01TM9HAF89/download/image.png","thumb_64":"https://files.slack.com/files-tmb/T68168MUP-F01TM9HAF89-e970e62daf/image_64.png","thumb_80":"https://files.slack.com/files-tmb/T68168MUP-F01TM9HAF89-e970e62daf/image_80.png","thumb_360":"https://files.slack.com/files-tmb/T68168MUP-F01TM9HAF89-e970e62daf/image_360.png","thumb_360_w":360,"thumb_360_h":215,"thumb_480":"https://files.slack.com/files-tmb/T68168MUP-F01TM9HAF89-e970e62daf/image_480.png","thumb_480_w":480,"thumb_480_h":287,"thumb_160":"https://files.slack.com/files-tmb/T68168MUP-F01TM9HAF89-e970e62daf/image_160.png","thumb_720":"https://files.slack.com/files-tmb/T68168MUP-F01TM9HAF89-e970e62daf/image_720.png","thumb_720_w":720,"thumb_720_h":430,"thumb_800":"https://files.slack.com/files-tmb/T68168MUP-F01TM9HAF89-e970e62daf/image_800.png","thumb_800_w":800,"thumb_800_h":478,"thumb_960":"https://files.slack.com/files-tmb/T68168MUP-F01TM9HAF89-e970e62daf/image_960.png","thumb_960_w":960,"thumb_960_h":574,"thumb_1024":"https://files.slack.com/files-tmb/T68168MUP-F01TM9HAF89-e970e62daf/image_1024.png","thumb_1024_w":1024,"thumb_1024_h":612,"original_w":2074,"original_h":1240,"thumb_tiny":"AwAcADCD7RN/z1b86X7RMP8Alq351B3p3PrTAk+0zf8APV/zo+0T9fNb86iwaO1ICQXE5/5bP+dH2if/AJ7P+dR0lMAHWnYx3FNX71SY680AJSUpHuaTFACflSU7FGOKAP/Z","permalink":"https://julialang.slack.com/files/U01CFQU8UFL/F01TM9HAF89/image.png","permalink_public":"https://slack-files.com/T68168MUP-F01TM9HAF89-f860b7c454","is_starred":false,"has_rich_preview":false}],"upload":false,"blocks":[{"type":"rich_text","block_id":"Np5Hf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"did anyone ever get \"map is not defined on dictionary\" error upon running sciml_train? What does this tell us?"}]}]}],"user":"U01CFQU8UFL","display_as_bot":false,"ts":"1617642400.227200","edited":{"user":"U01CFQU8UFL","ts":"1617642464.000000"}},{"client_msg_id":"956e0ee1-44f2-4a56-93dd-0aee7b16014e","type":"message","text":"show the full error.","user":"U69BL50BF","ts":"1617642926.227700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YjoSR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"show the full error."}]}]}]},{"client_msg_id":"f0592a57-8098-4f24-b7cd-6ebf55aee81f","type":"message","text":"map is not defined on dictionaries\nin top-level scope at GW.jl:205\nin  at DiffEqFlux\\Geghv\\src\\train.jl:2\nin  at DiffEqFlux\\Geghv\\src\\train.jl:2\nin #sciml_train#68 at DiffEqFlux\\Geghv\\src\\train.jl:5\nin  at GalacticOptim\\qlbeM\\src\\solve.jl:46\nin #solve#1 at GalacticOptim\\qlbeM\\src\\solve.jl:46\nin __solve##kw at GalacticOptim\\qlbeM\\src\\solve.jl:105\nin __solve##kw at GalacticOptim\\qlbeM\\src\\solve.jl:105\nin #__solve#6 at GalacticOptim\\qlbeM\\src\\solve.jl:132\nin gradient at Zygote\\pM10l\\src\\compiler\\interface.jl:58\nin pullback at Zygote\\pM10l\\src\\compiler\\interface.jl:247\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin #9 at GalacticOptim\\qlbeM\\src\\solve.jl:133\nin _pullback at ZygoteRules\\OjfTt\\src\\adjoint.jl:57\nin adjoint at Zygote\\pM10l\\src\\lib\\lib.jl:191\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin OptimizationFunction at SciMLBase\\cjif9\\src\\problems\\basic_problems.jl:107\nin _pullback at ZygoteRules\\OjfTt\\src\\adjoint.jl:57\nin adjoint at base\\none\nin adjoint at Zygote\\pM10l\\src\\lib\\lib.jl:191\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin OptimizationFunction at SciMLBase\\cjif9\\src\\problems\\basic_problems.jl:107\nin _pullback at ZygoteRules\\OjfTt\\src\\adjoint.jl:57\nin adjoint at Zygote\\pM10l\\src\\lib\\lib.jl:191\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin #69 at DiffEqFlux\\Geghv\\src\\train.jl:2\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin loss at GW.jl:196\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin predict_heterogeneousDiffusion at GW.jl:188\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin ODESystem at ModelingToolkit\\JtDFb\\src\\systems\\diffeqs\\odesystem.jl:128\nin ODESystem at ModelingToolkit\\JtDFb\\src\\systems\\diffeqs\\odesystem.jl:128\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin #ODESystem#149 at ModelingToolkit\\JtDFb\\src\\systems\\diffeqs\\odesystem.jl:147\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin collect_vars! at ModelingToolkit\\JtDFb\\src\\systems\\diffeqs\\odesystem.jl:167\nin vars at ModelingToolkit\\JtDFb\\src\\systems\\diffeqs\\odesystem.jl:112\nin vars at ModelingToolkit\\JtDFb\\src\\systems\\diffeqs\\odesystem.jl:113\nin foldl##kw at base\\reduce.jl:178\nin #foldl#205 at base\\reduce.jl:178\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin mapfoldl##kw at base\\reduce.jl:160\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin #mapfoldl#204 at base\\reduce.jl:160\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin mapfoldl_impl at base\\reduce.jl:44\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin foldl_impl at base\\reduce.jl:48\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin _foldl_impl at base\\reduce.jl:58\nin BottomRF at base\\reduce.jl:81\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin vars! at ModelingToolkit\\JtDFb\\src\\systems\\diffeqs\\odesystem.jl:119\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin arguments at SymbolicUtils\\EDgAP\\src\\types.jl:510\nin _pullback at Zygote\\pM10l\\src\\lib\\array.jl:237\nin ∇map at Zygote\\pM10l\\src\\lib\\array.jl:200\nin map at base\\abstractarray.jl:2190\nin error at base\\error.jl:33","user":"U01CFQU8UFL","ts":"1617643308.228000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"f8s","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"map is not defined on dictionaries\nin top-level scope at GW.jl:205\nin  at DiffEqFlux\\Geghv\\src\\train.jl:2\nin  at DiffEqFlux\\Geghv\\src\\train.jl:2\nin #sciml_train#68 at DiffEqFlux\\Geghv\\src\\train.jl:5\nin  at GalacticOptim\\qlbeM\\src\\solve.jl:46\nin #solve#1 at GalacticOptim\\qlbeM\\src\\solve.jl:46\nin __solve##kw at GalacticOptim\\qlbeM\\src\\solve.jl:105\nin __solve##kw at GalacticOptim\\qlbeM\\src\\solve.jl:105\nin #__solve#6 at GalacticOptim\\qlbeM\\src\\solve.jl:132\nin gradient at Zygote\\pM10l\\src\\compiler\\interface.jl:58\nin pullback at Zygote\\pM10l\\src\\compiler\\interface.jl:247\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin #9 at GalacticOptim\\qlbeM\\src\\solve.jl:133\nin _pullback at ZygoteRules\\OjfTt\\src\\adjoint.jl:57\nin adjoint at Zygote\\pM10l\\src\\lib\\lib.jl:191\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin OptimizationFunction at SciMLBase\\cjif9\\src\\problems\\basic_problems.jl:107\nin _pullback at ZygoteRules\\OjfTt\\src\\adjoint.jl:57\nin adjoint at base\\none\nin adjoint at Zygote\\pM10l\\src\\lib\\lib.jl:191\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin OptimizationFunction at SciMLBase\\cjif9\\src\\problems\\basic_problems.jl:107\nin _pullback at ZygoteRules\\OjfTt\\src\\adjoint.jl:57\nin adjoint at Zygote\\pM10l\\src\\lib\\lib.jl:191\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin #69 at DiffEqFlux\\Geghv\\src\\train.jl:2\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin loss at GW.jl:196\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin predict_heterogeneousDiffusion at GW.jl:188\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin ODESystem at ModelingToolkit\\JtDFb\\src\\systems\\diffeqs\\odesystem.jl:128\nin ODESystem at ModelingToolkit\\JtDFb\\src\\systems\\diffeqs\\odesystem.jl:128\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin #ODESystem#149 at ModelingToolkit\\JtDFb\\src\\systems\\diffeqs\\odesystem.jl:147\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin collect_vars! at ModelingToolkit\\JtDFb\\src\\systems\\diffeqs\\odesystem.jl:167\nin vars at ModelingToolkit\\JtDFb\\src\\systems\\diffeqs\\odesystem.jl:112\nin vars at ModelingToolkit\\JtDFb\\src\\systems\\diffeqs\\odesystem.jl:113\nin foldl##kw at base\\reduce.jl:178\nin #foldl#205 at base\\reduce.jl:178\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin mapfoldl##kw at base\\reduce.jl:160\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin #mapfoldl#204 at base\\reduce.jl:160\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin mapfoldl_impl at base\\reduce.jl:44\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin foldl_impl at base\\reduce.jl:48\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin _foldl_impl at base\\reduce.jl:58\nin BottomRF at base\\reduce.jl:81\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin vars! at ModelingToolkit\\JtDFb\\src\\systems\\diffeqs\\odesystem.jl:119\nin _pullback at Zygote\\pM10l\\src\\compiler\\interface2.jl\nin arguments at SymbolicUtils\\EDgAP\\src\\types.jl:510\nin _pullback at Zygote\\pM10l\\src\\lib\\array.jl:237\nin ∇map at Zygote\\pM10l\\src\\lib\\array.jl:200\nin map at base\\abstractarray.jl:2190\nin error at base\\error.jl:33"}]}]}]},{"client_msg_id":"35e4adda-fbdb-4e10-836d-a9d5958ad64c","type":"message","text":"are you differentiating over the MTK generation process?","user":"U69BL50BF","ts":"1617643384.228300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ugHk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"are you differentiating over the MTK generation process?"}]}]}]},{"client_msg_id":"7024649c-eaa8-4092-994e-f6dac61bf489","type":"message","text":"I guess I was. Below is a minimum pseudo code. This may be the issue. but otherwise how does my parameter penetrate into the code?\n\nfunction predict(T) # T is the parameter\n    p = prepareFunction(T)\n    eqs = D.(u) .~ diffEqRHS(u,p,0)  ###p needs to go in.\n    fastprob = ODEProblem(ODESystem(eqs),u0,(t0, t1), jac=true)\n    @ time sol3 = solve(fastprob,alg)\n    Array(sol3(t1))\nend\n\nI checked your previous example, you used remake().","user":"U01CFQU8UFL","ts":"1617644670.234300","team":"T68168MUP","edited":{"user":"U01CFQU8UFL","ts":"1617644704.000000"},"blocks":[{"type":"rich_text","block_id":"bpIz2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess I was. Below is a minimum pseudo code. This may be the issue. but otherwise how does my parameter penetrate into the code?\n\nfunction predict(T) # T is the parameter\n    p = prepareFunction(T)\n    eqs = D.(u) .~ diffEqRHS(u,p,0)  ###p needs to go in.\n    fastprob = ODEProblem(ODESystem(eqs),u0,(t0, t1), jac=true)\n    @ time sol3 = solve(fastprob,alg)\n    Array(sol3(t1))\nend\n\nI checked your previous example, you used remake()."}]}]}]},{"client_msg_id":"1af9961a-5829-4711-b868-a677aa04c4f3","type":"message","text":"prepareFunction() takes T and prepare some terms.\ndiffEqRHS is the function that is the RHS of the differential equation","user":"U01CFQU8UFL","ts":"1617644764.235100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"G=gf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"prepareFunction() takes T and prepare some terms.\ndiffEqRHS is the function that is the RHS of the differential equation"}]}]}]},{"client_msg_id":"df987fe1-cba9-4de9-9760-0ba830416a45","type":"message","text":"You don’t want to recreate the system every time when you run the predict function.","user":"U6788D83U","ts":"1617644790.235700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wmQDB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You don’t want to recreate the system every time when you run the predict function."}]}]}]},{"client_msg_id":"e4d4f527-3a7b-49cf-85aa-9259c8b7fa3f","type":"message","text":"yeah just cache it.","user":"U69BL50BF","ts":"1617644951.237600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0SECX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah just cache it."}]}]}]},{"client_msg_id":"30782736-d027-4d12-8b4d-931f7280a033","type":"message","text":"Thanks for the advice. I'm just confused how the info in the parameter can penetrate into the prob\nLet me update my pseudo code here:","user":"U01CFQU8UFL","ts":"1617645168.239400","team":"T68168MUP","edited":{"user":"U01CFQU8UFL","ts":"1617645242.000000"},"blocks":[{"type":"rich_text","block_id":"hLzGi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks for the advice. I'm just confused how the info in the parameter can penetrate into the prob\nLet me update my pseudo code here:"}]}]}]},{"client_msg_id":"012d2de0-486b-43e9-87b7-3983bcf2a445","type":"message","text":"does the following make sense?\n\np = prepareFunction(T)\neqs = D.(u) .~ diffEqRHS(u,p,0) \nfastprob = ODEProblem(ODESystem(eqs),u0,(t0, t1), jac=true)\n\nfunction predict(T) # T is the parameter\n    p = prepareFunction(T)\n    remake(fastprob, p=p)\n    @ time sol3 = solve(fastprob,alg)\n    Array(sol3(t1))\nend","user":"U01CFQU8UFL","ts":"1617647244.241200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0+ri","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"does the following make sense?\n\np = prepareFunction(T)\neqs = D.(u) .~ diffEqRHS(u,p,0) \nfastprob = ODEProblem(ODESystem(eqs),u0,(t0, t1), jac=true)\n\nfunction predict(T) # T is the parameter\n    p = prepareFunction(T)\n    remake(fastprob, p=p)\n    @ time sol3 = solve(fastprob,alg)\n    Array(sol3(t1))\nend"}]}]}]},{"client_msg_id":"aa3b95ad-f557-42b7-9b8b-ccac1cf24780","type":"message","text":"<https://juliacomputing.com/products/juliasim/>","user":"U69BL50BF","ts":"1617820626.243700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NQ8dI","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://juliacomputing.com/products/juliasim/"}]}]}]},{"type":"message","text":"Not sure where to mention this, but <https://juliacomputing.com/products> (linked in the compare features button) 404s","files":[{"id":"F01TGQFNX4M","created":1617821021,"timestamp":1617821021,"name":"image.png","title":"image.png","mimetype":"image/png","filetype":"png","pretty_type":"PNG","user":"U0179G7FG4F","editable":false,"size":11811,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01TGQFNX4M/image.png","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01TGQFNX4M/download/image.png","thumb_64":"https://files.slack.com/files-tmb/T68168MUP-F01TGQFNX4M-2281ba2ef8/image_64.png","thumb_80":"https://files.slack.com/files-tmb/T68168MUP-F01TGQFNX4M-2281ba2ef8/image_80.png","thumb_360":"https://files.slack.com/files-tmb/T68168MUP-F01TGQFNX4M-2281ba2ef8/image_360.png","thumb_360_w":272,"thumb_360_h":296,"thumb_160":"https://files.slack.com/files-tmb/T68168MUP-F01TGQFNX4M-2281ba2ef8/image_160.png","original_w":272,"original_h":296,"thumb_tiny":"AwAwACzTqMS5bG09cVJUXm4P3D1oAQ3CjtznFH2lcnAJA71IhVlDbcfUUo2kZAGPpQAxJldyoHTvUlIAB0AFLQAVCITjqPTp/n0qaqvO4ZOMse/ei1x3sSeQfUdc9Pr/AI1NUCzBVA5IzjJPOPWpI2LIGPft6UWsK9x9FFFAAeBWeL+Q9YVH1z/hWhRQBn/bn/55L+v+FL9uk/55r+v+FX6KAKtrdPPKUaPaAM55q1RRQB//2Q==","permalink":"https://julialang.slack.com/files/U0179G7FG4F/F01TGQFNX4M/image.png","permalink_public":"https://slack-files.com/T68168MUP-F01TGQFNX4M-d57e68166a","is_starred":false,"has_rich_preview":false}],"upload":false,"blocks":[{"type":"rich_text","block_id":"bkUA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not sure where to mention this, but "},{"type":"link","url":"https://juliacomputing.com/products"},{"type":"text","text":" (linked in the compare features button) 404s"}]}]}],"user":"U0179G7FG4F","display_as_bot":false,"ts":"1617821045.244400","edited":{"user":"U0179G7FG4F","ts":"1617821069.000000"},"reactions":[{"name":"+1","users":["U6740K1SP"],"count":1}]},{"client_msg_id":"e84b89ab-f421-4278-94ed-03793319b0c3","type":"message","text":"Hi all, I was trying to run the NeuralODE tutorial from <https://diffeqflux.sciml.ai/dev/examples/neural_ode_sciml/>, and there seems to be an issue with the \"scatter\" function? Please see the error bar below. Thanks in advance!\n\nLoadError: UndefVarError: scatter not defined\nin expression starting at /Users/qiyaowei/DiffEqFlux.jl/neuralODE.jl:51\n(::var\"#68#70\")(::Array{Float32,1}, ::Float32, ::Array{Float32,2}; doplot::Bool) at neuralODE.jl:36\n(::var\"#68#70\")(::Array{Float32,1}, ::Float32, ::Array{Float32,2}) at neuralODE.jl:34\n__solve(::OptimizationProblem{false,OptimizationFunction{false,GalacticOptim.AutoZygote,OptimizationFunction{true,GalacticOptim.AutoZygote,var\"#71#72\",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},GalacticOptim.var\"#146#156\"{GalacticOptim.var\"#145#155\"{OptimizationFunction{true,GalacticOptim.AutoZygote,var\"#71#72\",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Nothing}},GalacticOptim.var\"#149#159\"{GalacticOptim.var\"#145#155\"{OptimizationFunction{true,GalacticOptim.AutoZygote,var\"#71#72\",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Nothing}},GalacticOptim.var\"#154#164\",Nothing,Nothing,Nothing},Array{Float32,1},SciMLBase.NullParameters,Nothing,Nothing,Nothing,Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}}, ::ADAM, ::Base.Iterators.Cycle{Tuple{GalacticOptim.NullData}}; maxiters::Int64, cb::Function, progress::Bool, save_best::Bool, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at solve.jl:98\n__solve at solve.jl:66 [inlined]\n__solve at solve.jl:66 [inlined]\n#solve#450 at solve.jl:3 [inlined]\n(::CommonSolve.var\"#solve##kw\")(::NamedTuple{(:cb, :maxiters),Tuple{var\"#68#70\",Int64}}, ::typeof(solve), ::OptimizationProblem{false,OptimizationFunction{false,GalacticOptim.AutoZygote,OptimizationFunction{true,GalacticOptim.AutoZygote,var\"#71#72\",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},GalacticOptim.var\"#146#156\"{GalacticOptim.var\"#145#155\"{OptimizationFunction{true,GalacticOptim.AutoZygote,var\"#71#72\",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Nothing}},GalacticOptim.var\"#149#159\"{GalacticOptim.var\"#145#155\"{OptimizationFunction{true,GalacticOptim.AutoZygote,var\"#71#72\",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Nothing}},GalacticOptim.var\"#154#164\",Nothing,Nothing,Nothing},Array{Float32,1},SciMLBase.NullParameters,Nothing,Nothing,Nothing,Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}}, ::ADAM) at solve.jl:3\ntop-level scope at neuralODE.jl:51\ninclude_string(::Function, ::Module, ::String, ::String) at loading.jl:1088","user":"U01T9S7EMGE","ts":"1617847979.247700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Tpy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi all, I was trying to run the NeuralODE tutorial from "},{"type":"link","url":"https://diffeqflux.sciml.ai/dev/examples/neural_ode_sciml/"},{"type":"text","text":", and there seems to be an issue with the \"scatter\" function? Please see the error bar below. Thanks in advance!\n\nLoadError: UndefVarError: scatter not defined\nin expression starting at /Users/qiyaowei/DiffEqFlux.jl/neuralODE.jl:51\n(::var\"#68#70\")(::Array{Float32,1}, ::Float32, ::Array{Float32,2}; doplot::Bool) at neuralODE.jl:36\n(::var\"#68#70\")(::Array{Float32,1}, ::Float32, ::Array{Float32,2}) at neuralODE.jl:34\n__solve(::OptimizationProblem{false,OptimizationFunction{false,GalacticOptim.AutoZygote,OptimizationFunction{true,GalacticOptim.AutoZygote,var\"#71#72\",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},GalacticOptim.var\"#146#156\"{GalacticOptim.var\"#145#155\"{OptimizationFunction{true,GalacticOptim.AutoZygote,var\"#71#72\",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Nothing}},GalacticOptim.var\"#149#159\"{GalacticOptim.var\"#145#155\"{OptimizationFunction{true,GalacticOptim.AutoZygote,var\"#71#72\",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Nothing}},GalacticOptim.var\"#154#164\",Nothing,Nothing,Nothing},Array{Float32,1},SciMLBase.NullParameters,Nothing,Nothing,Nothing,Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}}, ::ADAM, ::Base.Iterators.Cycle{Tuple{GalacticOptim.NullData}}; maxiters::Int64, cb::Function, progress::Bool, save_best::Bool, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at solve.jl:98\n__solve at solve.jl:66 [inlined]\n__solve at solve.jl:66 [inlined]\n#solve#450 at solve.jl:3 [inlined]\n(::CommonSolve.var\"#solve##kw\")(::NamedTuple{(:cb, :maxiters),Tuple{var\"#68#70\",Int64}}, ::typeof(solve), ::OptimizationProblem{false,OptimizationFunction{false,GalacticOptim.AutoZygote,OptimizationFunction{true,GalacticOptim.AutoZygote,var\"#71#72\",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},GalacticOptim.var\"#146#156\"{GalacticOptim.var\"#145#155\"{OptimizationFunction{true,GalacticOptim.AutoZygote,var\"#71#72\",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Nothing}},GalacticOptim.var\"#149#159\"{GalacticOptim.var\"#145#155\"{OptimizationFunction{true,GalacticOptim.AutoZygote,var\"#71#72\",Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Nothing}},GalacticOptim.var\"#154#164\",Nothing,Nothing,Nothing},Array{Float32,1},SciMLBase.NullParameters,Nothing,Nothing,Nothing,Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}}, ::ADAM) at solve.jl:3\ntop-level scope at neuralODE.jl:51\ninclude_string(::Function, ::Module, ::String, ::String) at loading.jl:1088"}]}]}],"thread_ts":"1617847979.247700","reply_count":4,"reply_users_count":3,"latest_reply":"1617848291.248400","reply_users":["U69BL50BF","U01T9S7EMGE","U0138UTB7A4"],"is_locked":false,"subscribed":false},{"client_msg_id":"9d2f8549-3cc9-41ac-9b16-95216204863c","type":"message","text":"I was asked to present Julia to a group of Machine Learning people that are heavily invested in python. I was thinking of showing them a few examples from SciML. Could someone recommend me an example that would WOW them? I was thinking of `Trebuchet.jl` and <https://tutorials.sciml.ai/html/DiffEqUncertainty/02-AD_and_optimization.html|this> example which is one of my favorites, but perhaps you have one that will :exploding_head:","user":"U013V2CFZAN","ts":"1618147174.255700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vxZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I was asked to present Julia to a group of Machine Learning people that are heavily invested in python. I was thinking of showing them a few examples from SciML. Could someone recommend me an example that would WOW them? I was thinking of "},{"type":"text","text":"Trebuchet.jl","style":{"code":true}},{"type":"text","text":" and "},{"type":"link","url":"https://tutorials.sciml.ai/html/DiffEqUncertainty/02-AD_and_optimization.html","text":"this"},{"type":"text","text":" example which is one of my favorites, but perhaps you have one that will "},{"type":"emoji","name":"exploding_head"}]}]}]},{"client_msg_id":"97a1f2a0-1d64-43fe-b453-0410510a6507","type":"message","text":"<https://www.meetup.com/stuttgart-julia-programming-language-meetup-gruppe/events/277447050/>","user":"U69BL50BF","ts":"1618151753.256600","team":"T68168MUP","attachments":[{"service_name":"Meetup","title":"Combining neural networks and differential equations with DiffEqFlux.jl","title_link":"https://www.meetup.com/stuttgart-julia-programming-language-meetup-gruppe/events/277447050/","text":"Sat, Apr 17, 2021, 6:00 PM: In this meetup Maren Hackenberg will give a presentation. She is a PhD student in the AG Machine Learning at the Institute of Medical Biometry and Statistics in Freiburg, f","fallback":"Meetup: Combining neural networks and differential equations with DiffEqFlux.jl","image_url":"https://secure.meetupstatic.com/photos/event/4/a/9/9/600_494059097.jpeg","fields":[{"title":"Where","value":"Online event","short":true},{"title":"When","value":"Sat, Apr 17, 2021, 6:00 PM","short":true}],"from_url":"https://www.meetup.com/stuttgart-julia-programming-language-meetup-gruppe/events/277447050/","image_width":365,"image_height":205,"image_bytes":20929,"service_icon":"https://www.meetup.com/mu_static/en-US/m_swarm_120x120.4f86abc9.png","id":1,"original_url":"https://www.meetup.com/stuttgart-julia-programming-language-meetup-gruppe/events/277447050/"}],"blocks":[{"type":"rich_text","block_id":"Dsy6","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://www.meetup.com/stuttgart-julia-programming-language-meetup-gruppe/events/277447050/"}]}]}]},{"client_msg_id":"14e080b6-dc87-4d35-93b8-864b01e27a90","type":"message","text":"Hi all,\n\nI decided to post this question in this channel since it is not a general Julia question. I was using SteadyStateAdjoint(), and got this error. Any help would be appreciated---\nError evaluating DEQ.jl\nLoadError: TypeError: in TrackedReal, in V, expected V&lt;:Real, got Type{Any}\nin expression starting at /Users/qiyaowei/DiffEqFlux.jl/DEQ.jl:65\nReverseDiff.TrackedArray(value::Vector{Any}, deriv::Vector{Float64}, tape::Vector{ReverseDiff.AbstractInstruction}) at tracked.jl:86\ntrack(x::Vector{Any}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction}) at tracked.jl:452\n(::ReverseDiff.var\"#657#658\"{Float64, Vector{ReverseDiff.AbstractInstruction}})(x::Vector{Any}) at Config.jl:46\nmap at tuple.jl:214 [inlined]\nReverseDiff.GradientConfig(input::Tuple{Vector{Float64}, Vector{Any}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction}) at Config.jl:46\nReverseDiff.GradientConfig(input::Tuple{Vector{Float64}, Vector{Any}}, tp::Vector{ReverseDiff.AbstractInstruction}) at Config.jl:37\nReverseDiff.GradientConfig(input::Tuple{Vector{Float64}, Vector{Any}}) at Config.jl:37\nReverseDiff.GradientTape(f::Function, input::Tuple{Vector{Float64}, Vector{Any}}) at tape.jl:204\nadjointdiffcache(g::Nothing, sensealg::SteadyStateAdjoint{0, true, Val{:central}, Bool, DefaultLinSolve}, discrete::Bool, sol::SciMLBase.NonlinearSolution{Float64, 1, Vector{Float64}, Vector{Float64}, SteadyStateProblem{Matrix{Float64}, true, Vector{Any}, ODEFunction{true, typeof(dudt_), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, SSRootfind{SteadyStateDiffEq.var\"#2#4\"}, Nothing, Nothing}, dg::Vector{Float64}, f::ODEFunction{true, typeof(dudt_), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}; quad::Bool, noiseterm::Bool) at adjoint_common.jl:111\nadjointdiffcache at adjoint_common.jl:27 [inlined]\nDiffEqSensitivity.SteadyStateAdjointSensitivityFunction(g::Nothing, sensealg::SteadyStateAdjoint{0, true, Val{:central}, Bool, DefaultLinSolve}, discrete::Bool, sol::SciMLBase.NonlinearSolution{Float64, 1, Vector{Float64}, Vector{Float64}, SteadyStateProblem{Matrix{Float64}, true, Vector{Any}, ODEFunction{true, typeof(dudt_), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, SSRootfind{SteadyStateDiffEq.var\"#2#4\"}, Nothing, Nothing}, dg::Vector{Float64}, colorvec::Nothing) at steadystate_adjoint.jl:18\nSteadyStateAdjointProblem(sol::SciMLBase.NonlinearSolution{Float64, 1, Vector{Float64}, Vector{Float64}, SteadyStateProblem{Matrix{Float64}, true, Vector{Any}, ODEFunction{true, typeof(dudt_), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, SSRootfind{SteadyStateDiffEq.var\"#2#4\"}, Nothing, Nothing}, sensealg::SteadyStateAdjoint{0, true, Val{:central}, Bool, DefaultLinSolve}, g::Nothing, dg::Vector{Float64}; save_idxs::Nothing) at steadystate_adjoint.jl:33\nSteadyStateAdjointProblem at steadystate_adjoint.jl:27 [inlined]\n#_adjoint_sensitivities#45 at sensitivity_interface.jl:57 [inlined]\n_adjoint_sensitivities at sensitivity_interface.jl:57 [inlined]\n#adjoint_sensitivities#42 at sensitivity_interface.jl:6 [inlined]\nadjoint_sensitivities at sensitivity_interface.jl:6 [inlined]\nsteadystatebackpass at concrete_solve.jl:437 [inlined]\n#93#back at adjoint.jl:59 [inlined]\n#178 at lib.jl:194 [inlined]\n(::Zygote.var\"#1686#back#180\"{Zygote.var\"#178#179\"{Tuple{NTuple{4, Nothing}, Tuple{Nothing}}, DiffEqBase.var\"#93#back#73\"{DiffEqSensitivity.var\"#steadystatebackpass#187\"{Nothing, Tsit5, SteadyStateAdjoint{0, true, Val{:central}, Bool, DefaultLinSolve}, Tuple{}, SciMLBase.NonlinearSolution{Float64, 1, Vector{Float64}, Vector{Float64}, SteadyStateProblem{Matrix{Float64}, true, Vector{Any}, ODEFunction{true, typeof(dudt_), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, SSRootfind{SteadyStateDiffEq.var\"#2#4\"}, Nothing, Nothing}}}}})(Δ::Vector{Float64}) at adjoint.jl:59\nPullback at solve.jl:70 [inlined]\n(::typeof(∂(#solve#57)))(Δ::Vector{Float64}) at interface2.jl:0\n(::Zygote.var\"#178#179\"{Tuple{NTuple{6, Nothing}, Tuple{Nothing}}, typeof(∂(#solve#57))})(Δ::Vector{Float64}) at lib.jl:194\n(::Zygote.var\"#1686#back#180\"{Zygote.var\"#178#179\"{Tuple{NTuple{6, Nothing}, Tuple{Nothing}}, typeof(∂(#solve#57))}})(Δ::Vector{Float64}) at adjoint.jl:59\nPullback at solve.jl:68 [inlined]\n(::typeof(∂(solve##kw)))(Δ::Vector{Float64}) at interface2.jl:0\nPullback at DEQ.jl:30 [inlined]\n(::typeof(∂(predict)))(Δ::Vector{Float64}) at interface2.jl:0\nPullback at DEQ.jl:59 [inlined]\n#178 at lib.jl:194 [inlined]\n#1686#back at adjoint.jl:59 [inlined]\nPullback at train.jl:102 [inlined]\n(::typeof(∂(λ)))(Δ::Float64) at interface2.jl:0\n(::Zygote.var\"#69#70\"{Zygote.Params, typeof(∂(λ)), Zygote.Context})(Δ::Float64) at interface.jl:252\ngradient(f::Function, args::Zygote.Params) at interface.jl:59\nmacro expansion at train.jl:101 [inlined]\nmacro expansion at progress.jl:119 [inlined]\ntrain!(loss::Function, ps::Zygote.Params, data::Flux.Data.DataLoader{Tuple{Matrix{Float64}, Matrix{Float64}}, Random._GLOBAL_RNG}, opt::Descent; cb::Flux.Optimise.var\"#40#46\") at train.jl:99\ntrain!(loss::Function, ps::Zygote.Params, data::Flux.Data.DataLoader{Tuple{Matrix{Float64}, Matrix{Float64}}, Random._GLOBAL_RNG}, opt::Descent) at train.jl:97\ntop-level scope at DEQ.jl:66\neval at boot.jl:360 [inlined]\ninclude_string(mapexpr::typeof(identity), mod::Module, code::String, filename::String) at loading.jl:1094","user":"U01T9S7EMGE","ts":"1618211390.261900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nF1N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi all,\n\nI decided to post this question in this channel since it is not a general Julia question. I was using SteadyStateAdjoint(), and got this error. Any help would be appreciated---\nError evaluating DEQ.jl\nLoadError: TypeError: in TrackedReal, in V, expected V<:Real, got Type{Any}\nin expression starting at /Users/qiyaowei/DiffEqFlux.jl/DEQ.jl:65\nReverseDiff.TrackedArray(value::Vector{Any}, deriv::Vector{Float64}, tape::Vector{ReverseDiff.AbstractInstruction}) at tracked.jl:86\ntrack(x::Vector{Any}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction}) at tracked.jl:452\n(::ReverseDiff.var\"#657#658\"{Float64, Vector{ReverseDiff.AbstractInstruction}})(x::Vector{Any}) at Config.jl:46\nmap at tuple.jl:214 [inlined]\nReverseDiff.GradientConfig(input::Tuple{Vector{Float64}, Vector{Any}}, ::Type{Float64}, tp::Vector{ReverseDiff.AbstractInstruction}) at Config.jl:46\nReverseDiff.GradientConfig(input::Tuple{Vector{Float64}, Vector{Any}}, tp::Vector{ReverseDiff.AbstractInstruction}) at Config.jl:37\nReverseDiff.GradientConfig(input::Tuple{Vector{Float64}, Vector{Any}}) at Config.jl:37\nReverseDiff.GradientTape(f::Function, input::Tuple{Vector{Float64}, Vector{Any}}) at tape.jl:204\nadjointdiffcache(g::Nothing, sensealg::SteadyStateAdjoint{0, true, Val{:central}, Bool, DefaultLinSolve}, discrete::Bool, sol::SciMLBase.NonlinearSolution{Float64, 1, Vector{Float64}, Vector{Float64}, SteadyStateProblem{Matrix{Float64}, true, Vector{Any}, ODEFunction{true, typeof(dudt_), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, SSRootfind{SteadyStateDiffEq.var\"#2#4\"}, Nothing, Nothing}, dg::Vector{Float64}, f::ODEFunction{true, typeof(dudt_), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}; quad::Bool, noiseterm::Bool) at adjoint_common.jl:111\nadjointdiffcache at adjoint_common.jl:27 [inlined]\nDiffEqSensitivity.SteadyStateAdjointSensitivityFunction(g::Nothing, sensealg::SteadyStateAdjoint{0, true, Val{:central}, Bool, DefaultLinSolve}, discrete::Bool, sol::SciMLBase.NonlinearSolution{Float64, 1, Vector{Float64}, Vector{Float64}, SteadyStateProblem{Matrix{Float64}, true, Vector{Any}, ODEFunction{true, typeof(dudt_), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, SSRootfind{SteadyStateDiffEq.var\"#2#4\"}, Nothing, Nothing}, dg::Vector{Float64}, colorvec::Nothing) at steadystate_adjoint.jl:18\nSteadyStateAdjointProblem(sol::SciMLBase.NonlinearSolution{Float64, 1, Vector{Float64}, Vector{Float64}, SteadyStateProblem{Matrix{Float64}, true, Vector{Any}, ODEFunction{true, typeof(dudt_), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, SSRootfind{SteadyStateDiffEq.var\"#2#4\"}, Nothing, Nothing}, sensealg::SteadyStateAdjoint{0, true, Val{:central}, Bool, DefaultLinSolve}, g::Nothing, dg::Vector{Float64}; save_idxs::Nothing) at steadystate_adjoint.jl:33\nSteadyStateAdjointProblem at steadystate_adjoint.jl:27 [inlined]\n#_adjoint_sensitivities#45 at sensitivity_interface.jl:57 [inlined]\n_adjoint_sensitivities at sensitivity_interface.jl:57 [inlined]\n#adjoint_sensitivities#42 at sensitivity_interface.jl:6 [inlined]\nadjoint_sensitivities at sensitivity_interface.jl:6 [inlined]\nsteadystatebackpass at concrete_solve.jl:437 [inlined]\n#93#back at adjoint.jl:59 [inlined]\n#178 at lib.jl:194 [inlined]\n(::Zygote.var\"#1686#back#180\"{Zygote.var\"#178#179\"{Tuple{NTuple{4, Nothing}, Tuple{Nothing}}, DiffEqBase.var\"#93#back#73\"{DiffEqSensitivity.var\"#steadystatebackpass#187\"{Nothing, Tsit5, SteadyStateAdjoint{0, true, Val{:central}, Bool, DefaultLinSolve}, Tuple{}, SciMLBase.NonlinearSolution{Float64, 1, Vector{Float64}, Vector{Float64}, SteadyStateProblem{Matrix{Float64}, true, Vector{Any}, ODEFunction{true, typeof(dudt_), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, SSRootfind{SteadyStateDiffEq.var\"#2#4\"}, Nothing, Nothing}}}}})(Δ::Vector{Float64}) at adjoint.jl:59\nPullback at solve.jl:70 [inlined]\n(::typeof(∂(#solve#57)))(Δ::Vector{Float64}) at interface2.jl:0\n(::Zygote.var\"#178#179\"{Tuple{NTuple{6, Nothing}, Tuple{Nothing}}, typeof(∂(#solve#57))})(Δ::Vector{Float64}) at lib.jl:194\n(::Zygote.var\"#1686#back#180\"{Zygote.var\"#178#179\"{Tuple{NTuple{6, Nothing}, Tuple{Nothing}}, typeof(∂(#solve#57))}})(Δ::Vector{Float64}) at adjoint.jl:59\nPullback at solve.jl:68 [inlined]\n(::typeof(∂(solve##kw)))(Δ::Vector{Float64}) at interface2.jl:0\nPullback at DEQ.jl:30 [inlined]\n(::typeof(∂(predict)))(Δ::Vector{Float64}) at interface2.jl:0\nPullback at DEQ.jl:59 [inlined]\n#178 at lib.jl:194 [inlined]\n#1686#back at adjoint.jl:59 [inlined]\nPullback at train.jl:102 [inlined]\n(::typeof(∂(λ)))(Δ::Float64) at interface2.jl:0\n(::Zygote.var\"#69#70\"{Zygote.Params, typeof(∂(λ)), Zygote.Context})(Δ::Float64) at interface.jl:252\ngradient(f::Function, args::Zygote.Params) at interface.jl:59\nmacro expansion at train.jl:101 [inlined]\nmacro expansion at progress.jl:119 [inlined]\ntrain!(loss::Function, ps::Zygote.Params, data::Flux.Data.DataLoader{Tuple{Matrix{Float64}, Matrix{Float64}}, Random._GLOBAL_RNG}, opt::Descent; cb::Flux.Optimise.var\"#40#46\") at train.jl:99\ntrain!(loss::Function, ps::Zygote.Params, data::Flux.Data.DataLoader{Tuple{Matrix{Float64}, Matrix{Float64}}, Random._GLOBAL_RNG}, opt::Descent) at train.jl:97\ntop-level scope at DEQ.jl:66\neval at boot.jl:360 [inlined]\ninclude_string(mapexpr::typeof(identity), mod::Module, code::String, filename::String) at loading.jl:1094"}]}]}]},{"client_msg_id":"7f9db5ed-ab91-4bb5-b3b8-5f1451bc0f03","type":"message","text":"<https://julialang.slack.com/archives/C8P49NJHG/p1618238126107500>","user":"U69BL50BF","ts":"1618239046.264300","team":"T68168MUP","attachments":[{"from_url":"https://julialang.slack.com/archives/C8P49NJHG/p1618238126107500","fallback":"[April 12th, 2021 7:35 AM] lilianne.strey: LCNeuro (<https://www.lcneuro.org/>) and MIT Julia Lab (<https://julia.mit.edu/>) currently have a commitment from Silicon Valley philanthropists to support the development of a software platform for creating, simulating, and validating models of brain circuit dysregulation for psychiatric disorders (i.e., \"computational psychiatry\").\n\nTo produce a proof of concept of this platform in one year, we'll be hiring 2-3 postdocs with deep expertise in one or more of the following areas: computational neuroscience, control systems engineering (control circuits &amp; system identification), dynamical systems, scientific machine learning. Must be highly creative, analytical, and driven, with strong quantitative and (Julia) programming skills, and with a desire and ability to think across fields.\n\nSalary $100,000 USD (remote work acceptable) for July 1 start date.\n\nTo apply, please send cv and contact information for three references to <@U69BL50BF> and <@U01QWTN7C5P>","ts":"1618238126.107500","author_id":"U01QWTN7C5P","author_subname":"Lilianne R. Mujica-Parodi","channel_id":"C8P49NJHG","channel_name":"jobs","is_msg_unfurl":true,"is_thread_root_unfurl":true,"text":"LCNeuro (<https://www.lcneuro.org/>) and MIT Julia Lab (<https://julia.mit.edu/>) currently have a commitment from Silicon Valley philanthropists to support the development of a software platform for creating, simulating, and validating models of brain circuit dysregulation for psychiatric disorders (i.e., \"computational psychiatry\").\n\nTo produce a proof of concept of this platform in one year, we'll be hiring 2-3 postdocs with deep expertise in one or more of the following areas: computational neuroscience, control systems engineering (control circuits &amp; system identification), dynamical systems, scientific machine learning. Must be highly creative, analytical, and driven, with strong quantitative and (Julia) programming skills, and with a desire and ability to think across fields.\n\nSalary $100,000 USD (remote work acceptable) for July 1 start date.\n\nTo apply, please send cv and contact information for three references to <@U69BL50BF> and <@U01QWTN7C5P>","author_name":"Lilianne R. Mujica-Parodi","author_link":"https://julialang.slack.com/team/U01QWTN7C5P","author_icon":"https://avatars.slack-edge.com/2021-03-08/1831278129493_5129cfa9d5042fedb983_48.jpg","mrkdwn_in":["text"],"id":1,"original_url":"https://julialang.slack.com/archives/C8P49NJHG/p1618238126107500","footer":"Thread in #jobs"}],"blocks":[{"type":"rich_text","block_id":"bAxYI","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://julialang.slack.com/archives/C8P49NJHG/p1618238126107500"}]}]}]}]}