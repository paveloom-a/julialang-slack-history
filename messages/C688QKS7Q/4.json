{"cursor": 3, "messages": [{"client_msg_id":"e9f86f61-4c11-4877-81b3-864747171767","type":"message","text":"or the stack","user":"U674T3KB3","ts":"1613971243.019000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TCdO+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or the stack"}]}]}]},{"client_msg_id":"74bc5858-d089-48fc-95df-a12ad1cb8441","type":"message","text":"in which case would something like this work:\n• in the forward pass, replace all gc.allocs, jl_array_alloc / etc to be address space 0, “turning off gc”","user":"UN3KKRCRJ","ts":"1613971291.019900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hjo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in which case would something like this work:\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in the forward pass, replace all gc.allocs, jl_array_alloc / etc to be address space 0, “turning off gc”"}]}],"style":"bullet","indent":0}]}]},{"client_msg_id":"04075ec7-50bc-4c05-b006-1b33f04be78f","type":"message","text":"in the reverse pass then the question is how to mark it trackable by GC","user":"UN3KKRCRJ","ts":"1613971305.020500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"62is","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in the reverse pass then the question is how to mark it trackable by GC"}]}]}]},{"client_msg_id":"f13b9d40-3005-45c4-bfef-710485096ee8","type":"message","text":"no, you can't give something back to the GC","user":"U674T3KB3","ts":"1613971320.021000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1QZj9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no, you can't give something back to the GC"}]}]}]},{"client_msg_id":"b30996c4-6d46-4b66-8a8b-c7c4fb321f1b","type":"message","text":"you need to decide at alloc time","user":"U674T3KB3","ts":"1613971324.021200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9IrvR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you need to decide at alloc time"}]}]}]},{"client_msg_id":"e6c6db3d-46d3-4dae-9b84-811f2f1fd206","type":"message","text":"yeah that makes sense sadly","user":"UN3KKRCRJ","ts":"1613971341.021400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p4N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah that makes sense sadly"}]}]}]},{"client_msg_id":"91270bd3-dbb9-4dbe-b26e-d9461f23cf03","type":"message","text":"you can just literally turn off the GC though","user":"U674T3KB3","ts":"1613971357.021600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7lr5x","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can just literally turn off the GC though"}]}]}]},{"client_msg_id":"e2f0d100-69b4-4ee8-bfe0-6327b836fa6b","type":"message","text":"I suppose if magic struct were seen as a GC object","user":"UN3KKRCRJ","ts":"1613971379.021900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2axl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I suppose if magic struct were seen as a GC object"}]}]}]},{"client_msg_id":"c53e6833-2c5a-4527-8288-4ca1880d8d78","type":"message","text":"then this woudl work fine","user":"UN3KKRCRJ","ts":"1613971382.022100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1AT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"then this woudl work fine"}]}]}]},{"client_msg_id":"1d37abb7-b565-4541-9608-eb87c20d5501","type":"message","text":"right, you need to generate a GC descriptor for it that tells the GC where the pointers in that struct are","user":"U674T3KB3","ts":"1613971405.022600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jEc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"right, you need to generate a GC descriptor for it that tells the GC where the pointers in that struct are"}]}]}]},{"client_msg_id":"8a6e468c-868f-4aa3-9f94-467c8b9ef653","type":"message","text":"It shouldn't be that hard","user":"U674T3KB3","ts":"1613971431.023100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"u1d","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It shouldn't be that hard"}]}]}]},{"client_msg_id":"ac323d34-e35a-44d3-accf-2a17612a3412","type":"message","text":"generating the description is probably 10 lines of code from the llvm struct type","user":"U674T3KB3","ts":"1613971448.024000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"glOq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"generating the description is probably 10 lines of code from the llvm struct type"}]}]}]},{"client_msg_id":"e4cab67d-b0c6-4477-bc21-128ac7f6ae81","type":"message","text":"what exactly is a gc descriptor in this context [slowly learning julia internals, so forgive me]","user":"UN3KKRCRJ","ts":"1613971451.024200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0a8M","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what exactly is a gc descriptor in this context [slowly learning julia internals, so forgive me]"}]}]}]},{"client_msg_id":"d3ae7a97-122e-4411-9cbb-df22c28dd0cb","type":"message","text":"<https://github.com/JuliaLang/julia/blob/master/src/julia.h#L454-L471>","user":"U674T3KB3","ts":"1613971464.024600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bJKu","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/blob/master/src/julia.h#L454-L471"}]}]}]},{"client_msg_id":"c6cbfebb-5bc9-43d8-b127-0a13fcbce188","type":"message","text":"and where would I pass this info [e.g. metadata, to a pss, etc]","user":"UN3KKRCRJ","ts":"1613971469.024900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"744/6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and where would I pass this info [e.g. metadata, to a pss, etc]"}]}]}]},{"client_msg_id":"b712470a-767e-4d74-a3cc-8a9fedeecc87","type":"message","text":"The biggest missing piece is that there's no way currently to just allocate a dynamic GC descriptor and tell the GC to use it for a particular struct","user":"U674T3KB3","ts":"1613971494.025500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5046V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The biggest missing piece is that there's no way currently to just allocate a dynamic GC descriptor and tell the GC to use it for a particular struct"}]}]}]},{"client_msg_id":"d2fcfbff-8060-42f2-9631-fbe9db7c17a6","type":"message","text":"adding that isn't too hard","user":"U674T3KB3","ts":"1613971510.026000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LUNop","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"adding that isn't too hard"}]}]}]},{"client_msg_id":"1534abbb-171b-4435-8b9d-dcd6ce318e4b","type":"message","text":"but a bit of effort","user":"U674T3KB3","ts":"1613971514.026200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"z/Dc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but a bit of effort"}]}]}]},{"client_msg_id":"59d17c9d-ddd6-44da-8475-6011bc646c44","type":"message","text":"Basically what you would do is add a new object type that is variable sized and has a pointer to a GC descriptor as its first word","user":"U674T3KB3","ts":"1613971542.026700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aGV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Basically what you would do is add a new object type that is variable sized and has a pointer to a GC descriptor as its first word"}]}]}]},{"client_msg_id":"27afcfbf-3c12-408c-a7b0-48df12d0c2e8","type":"message","text":"then add a new allocation intrinsic that takes a size and a pointer to a GC descriptor","user":"U674T3KB3","ts":"1613971555.027100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gVSm2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"then add a new allocation intrinsic that takes a size and a pointer to a GC descriptor"}]}]}]},{"client_msg_id":"ee7b73b5-f62f-4570-8f34-424a86fff008","type":"message","text":"and then add a new special marking case for that object type here: <https://github.com/JuliaLang/julia/blob/master/src/gc.c#L2617>","user":"U674T3KB3","ts":"1613971625.027600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MvD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and then add a new special marking case for that object type here: "},{"type":"link","url":"https://github.com/JuliaLang/julia/blob/master/src/gc.c#L2617"}]}]}]},{"client_msg_id":"a1c1bb02-99bb-415c-9306-c4cf988a128e","type":"message","text":"related question: I assume this is only necessary if the gc object itself isn’t top level","user":"UN3KKRCRJ","ts":"1613971636.027900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hlJHA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"related question: I assume this is only necessary if the gc object itself isn’t top level"}]}]}]},{"client_msg_id":"12df064e-b8c3-464b-a32c-1b7d82b76dde","type":"message","text":"e.g. if I return a gc object directly, that’s tracked fine","user":"UN3KKRCRJ","ts":"1613971647.028200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QT00","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"e.g. if I return a gc object directly, that’s tracked fine"}]}]}]},{"client_msg_id":"f5265c10-11dd-4b67-bd74-ec3a0f65f145","type":"message","text":"yes","user":"U674T3KB3","ts":"1613971654.028600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eEg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes"}]}]}]},{"client_msg_id":"fbd4fcc7-d760-44ca-a738-91f33a6b1d40","type":"message","text":"if I return an llvm struct of two objects, is that fine?","user":"UN3KKRCRJ","ts":"1613971655.028800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FIMX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if I return an llvm struct of two objects, is that fine?"}]}]}]},{"client_msg_id":"ed82b3a9-7115-4b13-96d3-68e4345077b2","type":"message","text":"=&gt; I only would need if the gc object were stored inside of a malloc’d array, yes?","user":"UN3KKRCRJ","ts":"1613971685.029800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qi8z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"=> I only would need if the gc object were stored inside of a malloc’d array, yes?"}]}]}]},{"client_msg_id":"27576e38-9f46-4475-bfa8-4317a2d25d88","type":"message","text":"probably, no warranty on things that codegen doesn't generate itself, but there is support for tracking internal pointers of FCAs","user":"U674T3KB3","ts":"1613971696.030100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sIC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"probably, no warranty on things that codegen doesn't generate itself, but there is support for tracking internal pointers of FCAs"}]}]}]},{"client_msg_id":"20ce826a-39ba-41a6-8beb-ec0fb2ec66a7","type":"message","text":"no idea if it works if you nest it deeper than that though","user":"U674T3KB3","ts":"1613971712.030400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Qnff","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no idea if it works if you nest it deeper than that though"}]}]}]},{"client_msg_id":"bbcce400-d2dc-4c39-ad7a-f3bb8d9445f2","type":"message","text":"like if I have say { { { ptr }, ptr }, ptr }","user":"UN3KKRCRJ","ts":"1613971733.031100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LH+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"like if I have say { { { ptr }, ptr }, ptr }"}]}]}]},{"client_msg_id":"b4ad0b26-2e21-46d3-9b60-0f443eb772cf","type":"message","text":"that may not necessarily work, but perhaps should?","user":"UN3KKRCRJ","ts":"1613971742.031400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nKVE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that may not necessarily work, but perhaps should?"}]}]}]},{"client_msg_id":"77c6add1-3d14-443b-8340-420ce70d1b22","type":"message","text":"[whree ptr is a gc object]","user":"UN3KKRCRJ","ts":"1613971748.031600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UiaKy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"[whree ptr is a gc object]"}]}]}]},{"client_msg_id":"50e7d4a9-7e6e-48f3-884b-ada8087b2cd7","type":"message","text":"[also thanks so much for letting me pick ur brain btw]","user":"UN3KKRCRJ","ts":"1613971764.032100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kPZy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"[also thanks so much for letting me pick ur brain btw]"}]}]}]},{"client_msg_id":"088d0109-f0ae-47c3-b4a3-fbcdbb4dd320","type":"message","text":"yes, if you leave it as a FCA that's semantically supposed to work","user":"U674T3KB3","ts":"1613971765.032200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Sq3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, if you leave it as a FCA that's semantically supposed to work"}]}]}]},{"client_msg_id":"5fbe9029-ae63-43ee-bd66-2894220db741","type":"message","text":"however, I'm pretty sure it won't work in the implementation","user":"U674T3KB3","ts":"1613971778.032600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jFf2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"however, I'm pretty sure it won't work in the implementation"}]}]}]},{"client_msg_id":"7d41df5e-d5a0-4a44-aaa7-9d7f4fbd8815","type":"message","text":"because we leave all structs as pointers and never work with FCAs","user":"U674T3KB3","ts":"1613971788.032900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oIVu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"because we leave all structs as pointers and never work with FCAs"}]}]}]},{"client_msg_id":"2565fde9-999a-4ebe-a993-742d25bbfb60","type":"message","text":"because LLVM itself is pretty bad at them","user":"U674T3KB3","ts":"1613971794.033100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dCa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"because LLVM itself is pretty bad at them"}]}]}]},{"client_msg_id":"e441221d-cd68-4c29-b8c9-2653070ed636","type":"message","text":"the only reason we have support at all is for like vectorization, but those don't created nested cases","user":"U674T3KB3","ts":"1613971825.033800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DF6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the only reason we have support at all is for like vectorization, but those don't created nested cases"}]}]}]},{"client_msg_id":"f32327c7-31bb-469d-8bc2-8060d1dede69","type":"message","text":"yeah that makes sense","user":"UN3KKRCRJ","ts":"1613971847.034000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"V/w","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah that makes sense"}]}]}]},{"client_msg_id":"e9158e29-c6d9-492b-b369-b284419bd3e5","type":"message","text":"and then for the non FCA case that would require a change to julia proper, i presume [not just a regular package for instance]","user":"UN3KKRCRJ","ts":"1613971891.034800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rnbr2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and then for the non FCA case that would require a change to julia proper, i presume [not just a regular package for instance]"}]}]}]},{"client_msg_id":"a3271458-52cf-47cb-929a-7f1b733bfae8","type":"message","text":"yes","user":"U674T3KB3","ts":"1613971907.035100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rF8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes"}]}]}]},{"client_msg_id":"d6cc45ee-bf06-4df6-ab9c-beb5109db6c9","type":"message","text":"unless say there were some potential magic workable by a custom llvm pass that was run to make it appear as normal","user":"UN3KKRCRJ","ts":"1613971928.035800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"t13z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"unless say there were some potential magic workable by a custom llvm pass that was run to make it appear as normal"}]}]}]},{"client_msg_id":"9f6468ba-09b6-44ac-b116-c4399bde0ee1","type":"message","text":"but it's a feature that's wanted in general, so you'd have a good chance of getting it in","user":"U674T3KB3","ts":"1613971936.036100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8Bl9+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but it's a feature that's wanted in general, so you'd have a good chance of getting it in"}]}]}]},{"client_msg_id":"4cd3dfd1-20e2-43d2-ad40-d5ebcb7bf9aa","type":"message","text":"or alterantively piggybacking off of an existing data structure for sake of GC","user":"UN3KKRCRJ","ts":"1613971957.036600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qkmx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or alterantively piggybacking off of an existing data structure for sake of GC"}]}]}]},{"client_msg_id":"3637d7b2-2f00-4a84-97e2-cbd24684eb0d","type":"message","text":"you could allocate an svec of all the gc tracked objects or something","user":"U674T3KB3","ts":"1613971999.037100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g0UX1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you could allocate an svec of all the gc tracked objects or something"}]}]}]},{"client_msg_id":"6bc81075-7dc6-4433-8b31-b920b125bde0","type":"message","text":"seems like that might be harder to keep track of than just generating the GC descriptors though","user":"U674T3KB3","ts":"1613972039.037800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tH4s","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"seems like that might be harder to keep track of than just generating the GC descriptors though"}]}]}]},{"client_msg_id":"30884f6c-7039-4f0a-a73b-bc764ab3ac04","type":"message","text":"would an svec of something which itself was a FCA of gc objects like above work","user":"UN3KKRCRJ","ts":"1613972040.037900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iIp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"would an svec of something which itself was a FCA of gc objects like above work"}]}]}]},{"client_msg_id":"758ca11e-cd42-4d08-9b24-56a1256d1861","type":"message","text":"no","user":"U674T3KB3","ts":"1613972047.038300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"T0bl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no"}]}]}]},{"client_msg_id":"47db9582-5d14-4d70-bead-d4f5e17980d4","type":"message","text":"obviously theres some extra magic though to create the julia types","user":"UN3KKRCRJ","ts":"1613972049.038500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7TJXs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"obviously theres some extra magic though to create the julia types"}]}]}]},{"client_msg_id":"2d52aadb-9711-4e3b-ac5c-7a0263a07472","type":"message","text":"an svec is basically just a bundle of gc roots","user":"U674T3KB3","ts":"1613972068.038900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tqsK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"an svec is basically just a bundle of gc roots"}]}]}]},{"client_msg_id":"352dc275-4e30-40d5-ba02-29ddcd8cebf3","type":"message","text":"(dynamically sized though, but lighter weight than an array)","user":"U674T3KB3","ts":"1613972097.039400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NSNo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(dynamically sized though, but lighter weight than an array)"}]}]}]},{"client_msg_id":"05055cb7-e396-4cf7-87dc-451dc65fac4e","type":"message","text":"ok so then for the magic thing here to work using existing infra, it would require both replacing the malloc an array of nested things into an svec, and also return a llvm struct of objects into an svec","user":"UN3KKRCRJ","ts":"1613972204.040400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qjm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ok so then for the magic thing here to work using existing infra, it would require both replacing the malloc an array of nested things into an svec, and also return a llvm struct of objects into an svec"}]}]}]},{"client_msg_id":"a0125014-6d24-4631-bc29-e8dd5de4b606","type":"message","text":"in the case of building the custom descriptor one “could” [but likely to fail in impl] do the FCA of gc objects and the malloc array becomes a custom descriptor","user":"UN3KKRCRJ","ts":"1613972249.041900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FXJnz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in the case of building the custom descriptor one “could” [but likely to fail in impl] do the FCA of gc objects and the malloc array becomes a custom descriptor"}]}]}]},{"client_msg_id":"070097df-5f8a-48bb-9f69-6beeba517b5d","type":"message","text":"probably? basically you'd have to split out your residual struct into the GC tracked and the non-GC tracked parts and allocate them separately","user":"U674T3KB3","ts":"1613972254.042300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/v7N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"probably? basically you'd have to split out your residual struct into the GC tracked and the non-GC tracked parts and allocate them separately"}]}]}]},{"client_msg_id":"310010eb-9512-4b01-94ef-d675fc62ad1c","type":"message","text":"that understands datastructure","user":"UN3KKRCRJ","ts":"1613972259.042400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7xLy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that understands datastructure"}]}]}]},{"client_msg_id":"2c4fbb60-74f1-4680-9705-99fd4a65ffaf","type":"message","text":"yeah =/","user":"UN3KKRCRJ","ts":"1613972277.042600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WY9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah =/"}]}]}]},{"client_msg_id":"7d062953-c420-44a4-a502-ac5fa9e705be","type":"message","text":"this was super helpful","user":"UN3KKRCRJ","ts":"1613972323.042800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ars=s","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this was super helpful"}]}]}]},{"client_msg_id":"c5cce99c-ee2a-4503-8f6e-16a0ed3e3203","type":"message","text":"mind if i also ask you a non gc question?","user":"UN3KKRCRJ","ts":"1613972330.043000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sdhXq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"mind if i also ask you a non gc question?"}]}]}]},{"client_msg_id":"e130945a-7a8e-4b47-b313-cc65827e5648","type":"message","text":"sure","user":"U674T3KB3","ts":"1613972334.043200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MVj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"sure"}]}]}]},{"client_msg_id":"83d81d5a-cf3b-446a-9b05-058cf44d28b4","type":"message","text":"not sure if this is because of gpucompiler.jl [seems not from code_llvm] but runtime functions seem to get lowered to magic constant integers bitcast to a function pointer","user":"UN3KKRCRJ","ts":"1613972383.044000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pK4lu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not sure if this is because of gpucompiler.jl [seems not from code_llvm] but runtime functions seem to get lowered to magic constant integers bitcast to a function pointer"}]}]}]},{"client_msg_id":"86c5235c-16b1-4a7d-aeb9-eb7be7cf441f","type":"message","text":"rather than a declaration","user":"UN3KKRCRJ","ts":"1613972386.044300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gSOA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"rather than a declaration"}]}]}]},{"client_msg_id":"5b8512b0-f4cb-4230-a4c6-a5d5eec77e41","type":"message","text":"e.g. jl_copy_array, jl_alloc_array, etc","user":"UN3KKRCRJ","ts":"1613972402.044700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ud1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"e.g. jl_copy_array, jl_alloc_array, etc"}]}]}]},{"client_msg_id":"27c3ad8e-ed17-4c1e-b63d-36ddd48b0fa3","type":"message","text":"is there a reason for this?","user":"UN3KKRCRJ","ts":"1613972408.044900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NIbC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is there a reason for this?"}]}]}]},{"client_msg_id":"4e05a460-2a83-4964-85b4-05aee538d423","type":"message","text":"In addition to making my life a lot easier, I would imagine that say adding readonly to jl_copy_array arg 0 would be really useful","user":"UN3KKRCRJ","ts":"1613972454.045900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sUh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In addition to making my life a lot easier, I would imagine that say adding readonly to jl_copy_array arg 0 would be really useful"}]}]}]},{"client_msg_id":"77a76e14-4ebc-4e1b-9434-420a61304e1a","type":"message","text":"[which cant happen if its a magic #]","user":"UN3KKRCRJ","ts":"1613972466.046300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QwrD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"[which cant happen if its a magic #]"}]}]}]},{"client_msg_id":"92048c78-3f97-4aff-bc84-047cbfc0d11d","type":"message","text":"those are probably called using `ccall`","user":"U674T3KB3","ts":"1613972466.046400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cLVd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"those are probably called using "},{"type":"text","text":"ccall","style":{"code":true}}]}]}]},{"client_msg_id":"cd85115f-bd44-41ae-b694-b58d9f50183e","type":"message","text":"yeah","user":"UN3KKRCRJ","ts":"1613972470.046600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O6Ub4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah"}]}]}]},{"client_msg_id":"edfdbc52-3c8b-412e-b0fb-7ee9bff4554d","type":"message","text":"you can add function args to magic # calls, we just don't have the syntax for it in ccall","user":"U674T3KB3","ts":"1613972486.047000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R0FtP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can add function args to magic # calls, we just don't have the syntax for it in ccall"}]}]}]},{"client_msg_id":"d296e884-806d-4b87-85dd-a3ee6116f80d","type":"message","text":"but anyway, the reason it is this way is that it basically implements relocations itself","user":"U674T3KB3","ts":"1613972515.047500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"80Lib","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but anyway, the reason it is this way is that it basically implements relocations itself"}]}]}]},{"client_msg_id":"d0d2efe2-b624-4701-9637-bf3888675522","type":"message","text":"in .o mode it is slightly more symbolic","user":"U674T3KB3","ts":"1613972548.048100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"30vY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in .o mode it is slightly more symbolic"}]}]}]},{"client_msg_id":"438aedc4-a558-4b9b-a725-57939005a670","type":"message","text":"I get the reason for doing so if you load from an explicit library via ccall","user":"UN3KKRCRJ","ts":"1613972570.048500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lnUF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I get the reason for doing so if you load from an explicit library via ccall"}]}]}]},{"client_msg_id":"07f15f0e-2fca-447b-945f-5169692ea3da","type":"message","text":"but would it be acceptable to do the function declaration rather than relocation ahead of time for ones without a specific library to ccall from?","user":"UN3KKRCRJ","ts":"1613972593.049300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YAK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but would it be acceptable to do the function declaration rather than relocation ahead of time for ones without a specific library to ccall from?"}]}]}]},{"client_msg_id":"a32f3037-4c78-4712-9442-bf269dedb0bd","type":"message","text":"[and alternatively is it somehow possible to get access to the relocation map and say invert it to find function being called given a magic #]","user":"UN3KKRCRJ","ts":"1613972633.049900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"q/jGJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"[and alternatively is it somehow possible to get access to the relocation map and say invert it to find function being called given a magic #]"}]}]}]},{"client_msg_id":"8bdefc89-304b-4c62-9426-ed4983f560d1","type":"message","text":"It's fine in theory, but you're really not supposed to assume anything about raw ccalls unless they're on the list of special intrinsics that have semantics beyond what is specified in the `ccall`","user":"U674T3KB3","ts":"1613972820.051300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p0uI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's fine in theory, but you're really not supposed to assume anything about raw ccalls unless they're on the list of special intrinsics that have semantics beyond what is specified in the "},{"type":"text","text":"ccall","style":{"code":true}}]}]}]},{"client_msg_id":"77d98d97-b14f-422c-865f-af20ac3de204","type":"message","text":"<@U674T3KB3> re dynamic layout for GC. Could we potentially use the extern/foreign GC integration for that, iirc that can add a custom type + scan logic","user":"U67BJLYCS","ts":"1613972879.052600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xlb","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U674T3KB3"},{"type":"text","text":" re dynamic layout for GC. Could we potentially use the extern/foreign GC integration for that, iirc that can add a custom type + scan logic"}]}]}]},{"client_msg_id":"fec37b48-436e-4c49-a68d-fb0a284eeeca","type":"message","text":"sure, but you'll still need to write some sort of descriptor and scan logic for it","user":"U674T3KB3","ts":"1613973021.053000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WsG4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"sure, but you'll still need to write some sort of descriptor and scan logic for it"}]}]}]},{"client_msg_id":"b55a0eb3-23fa-4ae9-aa9c-5b4c6fefa092","type":"message","text":"seems like you might as well just reuse the standard julia descriptor at that point and add the scan logic into gc.c","user":"U674T3KB3","ts":"1613973054.053500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"khg8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"seems like you might as well just reuse the standard julia descriptor at that point and add the scan logic into gc.c"}]}]}]},{"client_msg_id":"af7cea76-6918-4165-a98a-2d0bab56f8f6","type":"message","text":"also what makes svec more lightweight than an array [just less metadata and say assumes only 1d?]","user":"UN3KKRCRJ","ts":"1613973237.054500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=23SC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"also what makes svec more lightweight than an array [just less metadata and say assumes only 1d?]"}]}]}]},{"client_msg_id":"969db057-d743-4907-b81d-99b7a2cb4d41","type":"message","text":"arrays have two allocations, one for the metadata one for the actual data itself","user":"U674T3KB3","ts":"1613973266.054900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+Wn49","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"arrays have two allocations, one for the metadata one for the actual data itself"}]}]}]},{"client_msg_id":"d33eda21-a5b8-41c7-b64f-50055d023bad","type":"message","text":"svec only has one","user":"U674T3KB3","ts":"1613973271.055100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Toi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"svec only has one"}]}]}]},{"client_msg_id":"d5708d2a-e4c0-449c-b8dd-30ff783f2622","type":"message","text":"and less metadata","user":"U674T3KB3","ts":"1613973274.055300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O+d","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and less metadata"}]}]}]},{"client_msg_id":"6f5f8ff3-cd0f-4fe1-be1e-b1da39d7792a","type":"message","text":"makes sense","user":"UN3KKRCRJ","ts":"1613973290.055600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TvHR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"makes sense"}]}]}]},{"client_msg_id":"5d20a5ae-90fd-421e-93b0-76c6875b8d7c","type":"message","text":"also wait if we could programmatically create crazy types, could the svec work nicely with the FCAs still","user":"UN3KKRCRJ","ts":"1613973378.056300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TBd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"also wait if we could programmatically create crazy types, could the svec work nicely with the FCAs still"}]}]}]},{"client_msg_id":"67facbb1-2f0a-43db-81d0-8d9ca4ebacf9","type":"message","text":"basically just saying inline type for all the way down til the actual GC’d pointer","user":"UN3KKRCRJ","ts":"1613973399.056800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CzkX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"basically just saying inline type for all the way down til the actual GC’d pointer"}]}]}]},{"client_msg_id":"ca70fea5-6b67-4337-b16c-1152827f8587","type":"message","text":"and for things we don’t want to be GC’d mark the type as being some nonGC object","user":"UN3KKRCRJ","ts":"1613973412.057400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Xd7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and for things we don’t want to be GC’d mark the type as being some nonGC object"}]}]}]},{"client_msg_id":"91c38864-5ac6-4efe-9ded-b3a7e16036ae","type":"message","text":"like an int or something","user":"UN3KKRCRJ","ts":"1613973415.057600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1rqtx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"like an int or something"}]}]}]},{"client_msg_id":"45a95390-dd00-4b38-a258-928420b530ee","type":"message","text":"you're not allowed to create (julia) types in the optimizer","user":"U674T3KB3","ts":"1613973422.057700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x5rc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you're not allowed to create (julia) types in the optimizer"}]}]}]},{"client_msg_id":"62d7cdc7-d10f-4965-a698-41a325d36a9f","type":"message","text":"you are allowed to allocate instances of existing types","user":"U674T3KB3","ts":"1613973456.058000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"X5=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you are allowed to allocate instances of existing types"}]}]}]},{"client_msg_id":"f13bf21a-98c4-4011-8a76-fcb74d0c9a5c","type":"message","text":"most existing types have fixed numbers of gc roots","user":"U674T3KB3","ts":"1613973468.058600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dZMy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"most existing types have fixed numbers of gc roots"}]}]}]},{"client_msg_id":"e648d890-f80c-4411-a316-6382a5c44f8e","type":"message","text":"the exceptions are svec and arrays","user":"U674T3KB3","ts":"1613973477.058900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dqC2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the exceptions are svec and arrays"}]}]}]},{"client_msg_id":"bf5f1a77-4ffa-4564-ba12-fc27b340b320","type":"message","text":"(and foreign types with appropriate mark functions)","user":"U674T3KB3","ts":"1613973488.059400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ihaY8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(and foreign types with appropriate mark functions)"}]}]}]},{"client_msg_id":"cac6dd80-8462-4644-9e4b-4f86bddf6b9e","type":"message","text":"we currently make extensive use of reflection and basically there’s a callback inside of Enzyme during optimization that calls julia functions to create the specific llvm (via llvm.jl) for shadow allocations, eventually once the llvm module is complete and AD’d that goes through the codegen path [and <@U67BJLYCS> correct my description if you havent gone to sleep yet]","user":"UN3KKRCRJ","ts":"1613973599.061100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Cf9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we currently make extensive use of reflection and basically there’s a callback inside of Enzyme during optimization that calls julia functions to create the specific llvm (via llvm.jl) for shadow allocations, eventually once the llvm module is complete and AD’d that goes through the codegen path [and "},{"type":"user","user_id":"U67BJLYCS"},{"type":"text","text":" correct my description if you havent gone to sleep yet]"}]}]}]},{"client_msg_id":"b7279af3-b008-4a02-a108-0dc4f7aa3219","type":"message","text":"which I don’t think should be limited in not being able to create types, unless I’m misunderstanding","user":"UN3KKRCRJ","ts":"1613973621.061600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rwG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which I don’t think should be limited in not being able to create types, unless I’m misunderstanding"}]}]}]},{"client_msg_id":"ce5638a5-c1af-4823-8d7c-424c061bc88b","type":"message","text":"the runtime assumes no modifications to various global structures happen while the optimizer runs","user":"U674T3KB3","ts":"1613973709.062400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Mq2F","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the runtime assumes no modifications to various global structures happen while the optimizer runs"}]}]}]},{"client_msg_id":"351d8884-518b-481d-9a07-5ad28e30e947","type":"message","text":"for types that don't have any julia semantics, you might just about be able to get away with it","user":"U674T3KB3","ts":"1613973740.062800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xXX8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"for types that don't have any julia semantics, you might just about be able to get away with it"}]}]}]},{"client_msg_id":"9ce028e9-aafb-489f-b760-bdead1e650d7","type":"message","text":"but it's a bit iffy","user":"U674T3KB3","ts":"1613973744.063000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8=6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but it's a bit iffy"}]}]}]},{"client_msg_id":"94c5ad4a-ff33-447a-be4a-81759291222e","type":"message","text":"I see","user":"UN3KKRCRJ","ts":"1613973774.063200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xdjf9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see"}]}]}]},{"client_msg_id":"41e52556-5729-4521-85ce-0cd53bf6f23c","type":"message","text":"the system will yell at you for calling `eval` for example","user":"U674T3KB3","ts":"1613973790.064000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"P4l1z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the system will yell at you for calling "},{"type":"text","text":"eval","style":{"code":true}},{"type":"text","text":" for example"}]}]}]},{"client_msg_id":"d91cb0cf-0b05-4199-8047-1e290d95e899","type":"message","text":"you could probably ccall things directly","user":"U674T3KB3","ts":"1613973801.064400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"V1evA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you could probably ccall things directly"}]}]}]},{"client_msg_id":"9f1e1cf2-4d5a-4b9b-b43d-18e334b84419","type":"message","text":"and things *might* not break if you stick to simple types","user":"U674T3KB3","ts":"1613973812.064900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bZPN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and things "},{"type":"text","text":"might","style":{"bold":true}},{"type":"text","text":" not break if you stick to simple types"}]}]}]},{"client_msg_id":"fd2a7e9b-6b25-4965-9a6a-0f522dee682b","type":"message","text":"but you don't really need full julia types anyway","user":"U674T3KB3","ts":"1613973832.065700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"r5MbF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but you don't really need full julia types anyway"}]}]}]}]}