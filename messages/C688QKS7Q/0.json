{"cursor": 2, "messages": [{"client_msg_id":"ddcd03a8-218f-4844-93b0-f482b6553d4c","type":"message","text":"alright, I included it on the wishlist. We'll see what they come back to me with","user":"U674T3KB3","ts":"1613419671.048700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TNV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"alright, I included it on the wishlist. We'll see what they come back to me with"}]}]}],"reactions":[{"name":"pray","users":["U8MPCDJAY"],"count":1},{"name":"crossed_fingers","users":["U8MPCDJAY"],"count":1}]},{"client_msg_id":"3939ea64-6780-428e-a841-882936fbe0bc","type":"message","text":"Word from apple is that `open` does a bunch of security checks, so lower performance over Linux is known, but the filesystem team would be interested in seeing realworld benchmarks where it makes a difference to see if they can tweak things","user":"U674T3KB3","ts":"1613426670.049900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tPk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Word from apple is that "},{"type":"text","text":"open","style":{"code":true}},{"type":"text","text":" does a bunch of security checks, so lower performance over Linux is known, but the filesystem team would be interested in seeing realworld benchmarks where it makes a difference to see if they can tweak things"}]}]}]},{"client_msg_id":"c4e45a5c-7ddd-4f5f-a68c-fac970e04eb2","type":"message","text":"How about something like this? The code loading example might be too confounded? `cp` should be pretty raw though? General has `25,367 items` according to MacOS. Both on a fresh nightly\n\nMacOS:\n```julia&gt; @time using DifferentialEquations\n  7.668312 seconds (17.04 M allocations: 1.330 GiB, 3.54% gc time)\n\njulia&gt; @time cp(\"/Users/ian/.julia/registries/General\", mktempdir(), force=true);\n  6.240997 seconds (288.80 k allocations: 34.154 MiB, 1.11% gc time)```\nUbuntu VM in MacOS:\n```julia&gt; @time using DifferentialEquations\n  6.144343 seconds (15.64 M allocations: 1.233 GiB, 9.73% gc time, 0.07% compilation time)\n\njulia&gt; @time cp(\"/home/parallels/.julia/registries/General\", mktempdir(), force=true);\n  2.425770 seconds (288.64 k allocations: 33.191 MiB, 1.17% gc time)```","user":"U8MPCDJAY","ts":"1613428029.051600","team":"T68168MUP","edited":{"user":"U8MPCDJAY","ts":"1613428154.000000"},"blocks":[{"type":"rich_text","block_id":"rThqe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How about something like this? The code loading example might be too confounded? "},{"type":"text","text":"cp","style":{"code":true}},{"type":"text","text":" should be pretty raw though? General has "},{"type":"text","text":"25,367 items","style":{"code":true}},{"type":"text","text":" according to MacOS. Both on a fresh nightly\n\nMacOS:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @time using DifferentialEquations\n  7.668312 seconds (17.04 M allocations: 1.330 GiB, 3.54% gc time)\n\njulia> @time cp(\"/Users/ian/.julia/registries/General\", mktempdir(), force=true);\n  6.240997 seconds (288.80 k allocations: 34.154 MiB, 1.11% gc time)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Ubuntu VM in MacOS:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @time using DifferentialEquations\n  6.144343 seconds (15.64 M allocations: 1.233 GiB, 9.73% gc time, 0.07% compilation time)\n\njulia> @time cp(\"/home/parallels/.julia/registries/General\", mktempdir(), force=true);\n  2.425770 seconds (288.64 k allocations: 33.191 MiB, 1.17% gc time)"}]}]}]},{"client_msg_id":"cffddb58-31a3-4329-ba9c-48be49dc31fe","type":"message","text":"<@U674T3KB3> You probably know alraedy, but If you have apple's ears, it might be interesting to raise a few issues about Metal that might make it easier to use it as a backend for GPUCompiler.","user":"UAJH2818E","ts":"1613430707.054000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/OP","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U674T3KB3"},{"type":"text","text":" You probably know alraedy, but If you have apple's ears, it might be interesting to raise a few issues about Metal that might make it easier to use it as a backend for GPUCompiler."}]}]}],"thread_ts":"1613430707.054000","reply_count":3,"reply_users_count":2,"latest_reply":"1613430856.055500","reply_users":["UDB26738Q","UAJH2818E"],"subscribed":false},{"client_msg_id":"23e2e9b9-9fb7-4c7d-be37-17e59d9594ab","type":"message","text":"Send me a list, I'll forward it","user":"U674T3KB3","ts":"1613430729.054200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ftq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Send me a list, I'll forward it"}]}]}]},{"client_msg_id":"4d906805-0414-469d-b7b6-3feaf5ed1739","type":"message","text":"I'll try to cobble together my notes from last year, then","user":"UAJH2818E","ts":"1613430908.056400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/hSwN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'll try to cobble together my notes from last year, then"}]}]}]},{"client_msg_id":"bc7d34de-240b-4f2c-a9e9-1ba6f89b61b3","type":"message","text":"<https://reviews.llvm.org/rG4b661b4059b0>","user":"U67BXBF99","ts":"1613434363.060400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Mh0A","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://reviews.llvm.org/rG4b661b4059b0"}]}]}],"reactions":[{"name":"heart","users":["U6A0PD8CR"],"count":1}]},{"client_msg_id":"b689a523-f510-4017-949a-479ed63c5b2d","type":"message","text":"<@U679T6QF7> <@U8MPCDJAY> I've looked into the unwind warnings in that PR, and written up a summary: <https://github.com/JuliaLang/julia/pull/39127>. The conclusion is, just turn off the warnings and go forward with that PR. Let's get the M1 support out the door. I think this is basically the last big missing item.","user":"U674T3KB3","ts":"1613435651.061500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IJQAC","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U679T6QF7"},{"type":"text","text":" "},{"type":"user","user_id":"U8MPCDJAY"},{"type":"text","text":" I've looked into the unwind warnings in that PR, and written up a summary: "},{"type":"link","url":"https://github.com/JuliaLang/julia/pull/39127"},{"type":"text","text":". The conclusion is, just turn off the warnings and go forward with that PR. Let's get the M1 support out the door. I think this is basically the last big missing item."}]}]}],"reactions":[{"name":"+1","users":["U8MPCDJAY"],"count":1}]},{"client_msg_id":"62dd0315-801e-45b0-897a-8547ea9e7c92","type":"message","text":"I'll let y'all take it from here, but let me know if you run into issues","user":"U674T3KB3","ts":"1613435892.062000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dVT5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'll let y'all take it from here, but let me know if you run into issues"}]}]}]},{"client_msg_id":"2ffeb9dc-b8f0-49c0-ac3c-8189709c06ed","type":"message","text":"&gt;  I’ve got native TLS working on MachO by implementing dyld’s TLS support APIs in the Orc runtime. Hopefully we can do something similar for ELF eventually\nFrom LHames","user":"U67BJLYCS","ts":"1613499897.063200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2XZ","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":" I’ve got native TLS working on MachO by implementing dyld’s TLS support APIs in the Orc runtime. Hopefully we can do something similar for ELF eventually"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nFrom LHames"}]}]}]},{"client_msg_id":"18d0f5cc-4e64-422c-ab6b-2a091af596e3","type":"message","text":"I had a patch for ELF TLS support a while ago","user":"U674T3KB3","ts":"1613500099.063700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"08PKW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I had a patch for ELF TLS support a while ago"}]}]}],"reactions":[{"name":"elf","users":["UDB26738Q","U680THK2S"],"count":2}]},{"client_msg_id":"265a28a7-ff52-41d6-99ad-5daf1e5c224b","type":"message","text":"It was obsoleted by us just doing our own thing","user":"U674T3KB3","ts":"1613500115.064000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ei4XU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It was obsoleted by us just doing our own thing"}]}]}]},{"client_msg_id":"3e8e80e3-8519-46e0-addc-e90301db35cb","type":"message","text":"the only thing I ever needed it for was msan","user":"U674T3KB3","ts":"1613500139.064500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"df7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the only thing I ever needed it for was msan"}]}]}]},{"client_msg_id":"33f0e920-cd64-4d23-89ba-3197eaad3c4e","type":"message","text":"<@U674T3KB3> are the libunwind fixes through?","user":"U67BJLYCS","ts":"1613528765.067300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j6hi","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U674T3KB3"},{"type":"text","text":" are the libunwind fixes through?"}]}]}]},{"client_msg_id":"e0e2ff52-08b0-46d4-a174-94c640934db8","type":"message","text":"I might bottleneck Yggdrasil","user":"U67BJLYCS","ts":"1613528774.067700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rlmC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I might bottleneck Yggdrasil"}]}]}],"thread_ts":"1613528774.067700","reply_count":10,"reply_users_count":2,"latest_reply":"1613529849.070600","reply_users":["UDB26738Q","U67BJLYCS"],"subscribed":false},{"client_msg_id":"1d828f58-20ac-4fb7-9721-6f6a120e7fca","type":"message","text":"no, let me merge the Yggdrasil PR and verify that things work on CI","user":"U674T3KB3","ts":"1613528792.068300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9gAM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no, let me merge the Yggdrasil PR and verify that things work on CI"}]}]}]},{"client_msg_id":"99241d3b-9294-4a1c-8d0c-a181a57788da","type":"message","text":"need to add yet another patch for PPC and half precision support","user":"U67BJLYCS","ts":"1613528793.068400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bye0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"need to add yet another patch for PPC and half precision support"}]}]}]},{"client_msg_id":"532dbc87-1b64-4b99-b9b3-dbd91ce78138","type":"message","text":"+1","user":"U67BJLYCS","ts":"1613528798.068600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"b9M","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"+1"}]}]}]},{"client_msg_id":"be976a70-e9d3-4ea9-9ae1-297aca0746f8","type":"message","text":"<https://github.com/JuliaLang/julia/pull/39694>","user":"U674T3KB3","ts":"1613531535.070900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"z/HxG","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/pull/39694"}]}]}]},{"client_msg_id":"a16828c7-72e0-4edb-8286-5cdf63cf910f","type":"message","text":"Learning material questions:\nIs there any spec/documentation for\n• `CodeInfo`\n• `@code_lowered`\n• `@code_typed`\n• `IRTools's AST ?` ","user":"U01K2JB9GPJ","ts":"1613578724.071700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vwvIQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Learning material questions:\nIs there any spec/documentation for\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"CodeInfo","style":{"code":true}}]},{"type":"rich_text_section","elements":[{"type":"text","text":"@code_lowered","style":{"code":true}}]},{"type":"rich_text_section","elements":[{"type":"text","text":"@code_typed","style":{"code":true}}]},{"type":"rich_text_section","elements":[{"type":"text","text":"IRTools's AST ? ","style":{"code":true}}]}],"style":"bullet","indent":0}]}]},{"client_msg_id":"c656f7ad-2cff-4119-9208-605c34090a55","type":"message","text":"<@U674T3KB3> on Apple Silicon with LLVM libunwind I'm seeing this behaviour:\n```julia&gt; stacktrace()\nBase.StackTraces.StackFrame[]\n\njulia&gt; stacktrace(backtrace())\n13-element Vector{Base.StackTraces.StackFrame}:\n top-level scope at REPL[3]:1\n eval at boot.jl:369 [inlined]\n eval_user_input(ast::Any, backend::REPL.REPLBackend) at REPL.jl:139\n repl_backend_loop(backend::REPL.REPLBackend) at REPL.jl:200\n start_repl_backend(backend::REPL.REPLBackend, consumer::Any) at REPL.jl:185\n run_repl(repl::REPL.AbstractREPL, consumer::Any; backend_on_current_task::Bool) at REPL.jl:317\n run_repl(repl::REPL.AbstractREPL, consumer::Any) at REPL.jl:305\n (::Base.var\"#913#915\"{Bool, Bool, Bool})(REPL::Module) at client.jl:394\n #invokelatest#2 at essentials.jl:710 [inlined]\n invokelatest at essentials.jl:708 [inlined]\n run_main_repl(interactive::Bool, quiet::Bool, banner::Bool, history_file::Bool, color_set::Bool) at client.jl:379\n exec_options(opts::Base.JLOptions) at client.jl:309\n _start() at client.jl:492```","user":"U679T6QF7","ts":"1613600869.073000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LRw","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U674T3KB3"},{"type":"text","text":" on Apple Silicon with LLVM libunwind I'm seeing this behaviour:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> stacktrace()\nBase.StackTraces.StackFrame[]\n\njulia> stacktrace(backtrace())\n13-element Vector{Base.StackTraces.StackFrame}:\n top-level scope at REPL[3]:1\n eval at boot.jl:369 [inlined]\n eval_user_input(ast::Any, backend::REPL.REPLBackend) at REPL.jl:139\n repl_backend_loop(backend::REPL.REPLBackend) at REPL.jl:200\n start_repl_backend(backend::REPL.REPLBackend, consumer::Any) at REPL.jl:185\n run_repl(repl::REPL.AbstractREPL, consumer::Any; backend_on_current_task::Bool) at REPL.jl:317\n run_repl(repl::REPL.AbstractREPL, consumer::Any) at REPL.jl:305\n (::Base.var\"#913#915\"{Bool, Bool, Bool})(REPL::Module) at client.jl:394\n #invokelatest#2 at essentials.jl:710 [inlined]\n invokelatest at essentials.jl:708 [inlined]\n run_main_repl(interactive::Bool, quiet::Bool, banner::Bool, history_file::Bool, color_set::Bool) at client.jl:379\n exec_options(opts::Base.JLOptions) at client.jl:309\n _start() at client.jl:492"}]}]}]},{"client_msg_id":"14f1b29f-e833-4d96-ab6b-f76ca8816731","type":"message","text":"Seems good","user":"U674T3KB3","ts":"1613600892.073200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"54GaR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Seems good"}]}]}]},{"client_msg_id":"78aca1c7-b329-4407-b275-5d5f0ea46f51","type":"message","text":"What about the first line?","user":"U679T6QF7","ts":"1613600905.073500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hRO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What about the first line?"}]}]}]},{"client_msg_id":"a867e0f9-52e7-4e71-b161-bc1fba006cb0","type":"message","text":"ah, hmm","user":"U674T3KB3","ts":"1613600965.074100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1wxv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah, hmm"}]}]}]},{"client_msg_id":"67c21ab7-87ab-480e-8abb-a0c176554f07","type":"message","text":"Seems like when `backtrace` is used in a function it doesn't return any entries","user":"U679T6QF7","ts":"1613600968.074200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=JUdH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Seems like when "},{"type":"text","text":"backtrace","style":{"code":true}},{"type":"text","text":" is used in a function it doesn't return any entries"}]}]}]},{"client_msg_id":"1c0d706b-b920-4159-bcaa-d66e0708fcc6","type":"message","text":"yeah, I see","user":"U674T3KB3","ts":"1613601006.074400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VyPF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, I see"}]}]}]},{"client_msg_id":"9f2022c9-e3e5-4b4a-84ab-3db126269137","type":"message","text":"I'd guess the issue would be in the unwind info registration for dynamic frames","user":"U674T3KB3","ts":"1613601032.074800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hxHI5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'd guess the issue would be in the unwind info registration for dynamic frames"}]}]}]},{"client_msg_id":"36f91ef0-1d4e-45c3-9c37-ed9cc9eb33be","type":"message","text":"<https://github.com/JuliaLang/julia/blob/master/src/debuginfo.cpp#L1288>","user":"U674T3KB3","ts":"1613601110.075000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Pu1n1","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/blob/master/src/debuginfo.cpp#L1288"}]}]}]},{"client_msg_id":"97c08283-6784-4675-acdd-35075b8d1c60","type":"message","text":"I'm thinking LLVM libunwind may not define __register_frame when not built as part of the system library","user":"U674T3KB3","ts":"1613601225.075400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tQqK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm thinking LLVM libunwind may not define __register_frame when not built as part of the system library"}]}]}]},{"client_msg_id":"f7b11957-c2f2-4dbe-9ee6-8c6142945aa6","type":"message","text":"but you should check whether it works or not","user":"U674T3KB3","ts":"1613601253.075700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QHg69","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but you should check whether it works or not"}]}]}]},{"client_msg_id":"61fa73ae-0e51-46fb-8d55-228900cc9d15","type":"message","text":"just set a breakpoint in __register_frame and see if it picks up the one in the LLVM unwind","user":"U674T3KB3","ts":"1613601279.076300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aIJv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"just set a breakpoint in __register_frame and see if it picks up the one in the LLVM unwind"}]}]}]},{"client_msg_id":"f3b9e81e-7161-4965-a465-fbf6ac2b5b40","type":"message","text":"Looks like you might be able to just call `__unw_add_dynamic_fde` directly","user":"U674T3KB3","ts":"1613601355.076900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h=p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Looks like you might be able to just call "},{"type":"text","text":"__unw_add_dynamic_fde","style":{"code":true}},{"type":"text","text":" directly"}]}]}]},{"client_msg_id":"a7cf021b-bee7-4d4e-b5e4-e837f77b6c98","type":"message","text":"I never really liked the whole shadowing of __register_frame business","user":"U674T3KB3","ts":"1613601368.077500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WdYU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I never really liked the whole shadowing of __register_frame business"}]}]}]},{"client_msg_id":"751faa45-f4f5-43da-b33e-d6d8e3692269","type":"message","text":"I noticed there's an option for `LIBUNWIND_USES_ARM_EHABI`. I'll try enabling it","user":"U679T6QF7","ts":"1613601371.077800","team":"T68168MUP","edited":{"user":"U679T6QF7","ts":"1613601384.000000"},"blocks":[{"type":"rich_text","block_id":"QUr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I noticed there's an option for "},{"type":"text","text":"LIBUNWIND_USES_ARM_EHABI","style":{"code":true}},{"type":"text","text":". I'll try enabling it"}]}]}]},{"client_msg_id":"b05cef3a-765c-44dd-b8f7-08e359d3107d","type":"message","text":"No, I think that's something different","user":"U674T3KB3","ts":"1613601407.078100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NQe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No, I think that's something different"}]}]}]},{"client_msg_id":"584651b4-5adb-4737-84fd-a5c2a81db324","type":"message","text":"I think that's the legacy arm32 unwind info format","user":"U674T3KB3","ts":"1613601446.078500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Xgp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think that's the legacy arm32 unwind info format"}]}]}]},{"client_msg_id":"5bdce6ce-1029-4304-bee2-50d5f6aa1a59","type":"message","text":"Kk. I'll dig more into this in a couple hours. Thanks for the tips","user":"U679T6QF7","ts":"1613601469.079400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p73wm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Kk. I'll dig more into this in a couple hours. Thanks for the tips"}]}]}]},{"client_msg_id":"e5ee1687-255c-42b9-9997-ff18c74cd213","type":"message","text":"yeah, try that. I'd guess that's the issue","user":"U674T3KB3","ts":"1613601516.079700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ozB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, try that. I'd guess that's the issue"}]}]}]},{"client_msg_id":"73c83adf-61a1-4aae-9d62-87d88f00938a","type":"message","text":"the __register_frames thing","user":"U674T3KB3","ts":"1613601523.080000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"l28It","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the __register_frames thing"}]}]}]},{"client_msg_id":"2ffc0b84-36fb-434b-8d3b-0b94ff03eacc","type":"message","text":"I confirmed that LLVM libunwind does defined `__register_frame` and it does seem to be called correctly. I did notice that LLVM libunwind defines `_LIBUNWIND_BUILD_SJLJ_APIS` on Apple ARM (<https://github.com/llvm/llvm-project/blob/main/libunwind/src/config.h#L100>) so possibly that is related. I also noticed that Julia on Win32 has some references to SJLJ which may have some code paths needed for Apple Silicon.","user":"U679T6QF7","ts":"1613661120.083200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ebd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I confirmed that LLVM libunwind does defined "},{"type":"text","text":"__register_frame","style":{"code":true}},{"type":"text","text":" and it does seem to be called correctly. I did notice that LLVM libunwind defines "},{"type":"text","text":"_LIBUNWIND_BUILD_SJLJ_APIS","style":{"code":true}},{"type":"text","text":" on Apple ARM ("},{"type":"link","url":"https://github.com/llvm/llvm-project/blob/main/libunwind/src/config.h#L100"},{"type":"text","text":") so possibly that is related. I also noticed that Julia on Win32 has some references to SJLJ which may have some code paths needed for Apple Silicon."}]}]}]},{"client_msg_id":"79f98f3d-f773-4168-994c-c2dfcf2c0eea","type":"message","text":"<https://github.com/JuliaLang/julia/blob/11cbaf67b6fb5973f95d704a7a372cb43d770d62/base/io.jl#L646-L647>","user":"U67BJLYCS","ts":"1613697920.084200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nsJ4","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/blob/11cbaf67b6fb5973f95d704a7a372cb43d770d62/base/io.jl#L646-L647"}]}]}]},{"client_msg_id":"10671c33-dbd5-40fa-b48e-1668925d7987","type":"message","text":"Wouldn't: `GC.@preserve` make more sense?","user":"U67BJLYCS","ts":"1613697950.084700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QL+x","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Wouldn't: "},{"type":"text","text":"GC.@preserve","style":{"code":true}},{"type":"text","text":" make more sense?"}]}]}]},{"client_msg_id":"9b58c415-656a-44e8-87e5-c67039bf317a","type":"message","text":"```@noinline unsafe_write(s::IO, p::Ref{T}, n::Integer) where {T} =\n    unsafe_write(s, unsafe_convert(Ref{T}, p)::Ptr, n) # mark noinline to ensure ref is gc-rooted somewhere (by the caller)```","user":"U67BJLYCS","ts":"1613697954.084900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aHfS","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@noinline unsafe_write(s::IO, p::Ref{T}, n::Integer) where {T} =\n    unsafe_write(s, unsafe_convert(Ref{T}, p)::Ptr, n) # mark noinline to ensure ref is gc-rooted somewhere (by the caller)"}]}]}]},{"client_msg_id":"1560f6c8-8591-412f-b2c0-6d4147f68307","type":"message","text":"Didn’t use to exist","user":"U67BXBF99","ts":"1613698394.085100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SFCw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Didn’t use to exist"}]}]}]},{"client_msg_id":"41396dbf-e5d0-42a8-945a-ceb5e509d839","type":"message","text":"also not technically the same thing","user":"U67BXBF99","ts":"1613698404.085400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qAt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"also not technically the same thing"}]}]}]},{"client_msg_id":"831194ff-7bc1-441d-9503-161d27d993be","type":"message","text":"<@U674T3KB3> would <https://github.com/JuliaLang/julia/pull/39697> help us with the debugger performance problems we discussed last spring? If I understand the PR correctly, it would allow us to \"swap\" in a version of any arbitrary method that breaks on a breakpoint, and that version could even be called from normal compiled functions? Or something like that?","user":"U68UUUFPS","ts":"1613698750.087700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uga","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U674T3KB3"},{"type":"text","text":" would "},{"type":"link","url":"https://github.com/JuliaLang/julia/pull/39697"},{"type":"text","text":" help us with the debugger performance problems we discussed last spring? If I understand the PR correctly, it would allow us to \"swap\" in a version of any arbitrary method that breaks on a breakpoint, and that version could even be called from normal compiled functions? Or something like that?"}]}]}]},{"client_msg_id":"e3e2171e-b192-4838-aa87-a9c7776a6028","type":"message","text":"Not by itself, but the functionality it's building towards would help with that","user":"U674T3KB3","ts":"1613716590.089300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Anj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not by itself, but the functionality it's building towards would help with that"}]}]}]},{"client_msg_id":"fddd4a06-7159-4417-8abe-e6aaa42809b5","type":"message","text":"Is what I describe in section \"Sometimes things can get nasty\" of <https://bkamins.github.io/julialang/2021/02/19/binding.html> intended/documented? I am not asking about performance (which is clear and secondary I think), but about the impact of boxing on the behavior. What I mean that by changing `j = i` to `j = i + 1` in the codes I presented in the post (which I would consider an implementation detail) you radically change the result.","user":"U8JAMQGQY","ts":"1613736618.091400","team":"T68168MUP","edited":{"user":"U8JAMQGQY","ts":"1613736626.000000"},"blocks":[{"type":"rich_text","block_id":"=ga","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is what I describe in section \"Sometimes things can get nasty\" of "},{"type":"link","url":"https://bkamins.github.io/julialang/2021/02/19/binding.html"},{"type":"text","text":" intended/documented? I am not asking about performance (which is clear and secondary I think), but about the impact of boxing on the behavior. What I mean that by changing "},{"type":"text","text":"j = i","style":{"code":true}},{"type":"text","text":" to "},{"type":"text","text":"j = i + 1","style":{"code":true}},{"type":"text","text":" in the codes I presented in the post (which I would consider an implementation detail) you radically change the result."}]}]}]},{"client_msg_id":"b431bda5-0cd5-4144-8a07-188304197253","type":"message","text":"You probably want to add the \n```let j=j\n  Closure\n```","user":"U67BJLYCS","ts":"1613737160.092500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"v=C","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You probably want to add the \n```let j=j\n  Closure\n```"}]}]}]},{"client_msg_id":"2c5b686e-bce2-4971-994d-3f6b49d710b9","type":"message","text":"As an example","user":"U67BJLYCS","ts":"1613737166.092700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"E/q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"As an example"}]}]}]},{"client_msg_id":"60c0c689-d09f-4854-835c-825c126d6c5a","type":"message","text":"But this is primarily a issue around variable capture with closures","user":"U67BJLYCS","ts":"1613737245.093700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O5eAc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But this is primarily a issue around variable capture with closures"}]}]}]},{"client_msg_id":"a75b6c70-df34-464a-a1c3-0f528fbfe927","type":"message","text":"And the loop local variable behavior is separate from that","user":"U67BJLYCS","ts":"1613737289.094600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QdPKY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And the loop local variable behavior is separate from that"}]}]}]},{"client_msg_id":"5fc6fc12-c056-4ecf-a8d3-d25aab2634e7","type":"message","text":"Yes - I agree that *if I want a new binding* doing `let j=j` solves the issue. You can also use `outer` modifier in `g2` case to avoid boxing:\n```julia&gt; function g2()\n       l = []\n       local i\n       local j\n       for outer i in 0:3\n            j = i + 1\n            push!(l, () -&gt; j)\n       end\n       return l\n       end\njulia&gt; l2 = g2();\n\njulia&gt; for i in 1:4\n           println(l2[i]())\n       end\n1\n2\n3\n4```\n\nIn summary the point is that `j=i` and `j=i+1` produces drastically different behavior of the function that is related to `for` loop behavior if indexing variable is loop local. Also if you replace `for` loop with an equivalent `while` loop you get a consistent behavior (and without boxing):\n```julia&gt; function g1()\n       l = []\n       local j\n       i = 0\n       while i &lt; 4\n           j = i\n           push!(l, () -&gt; j)\n           i += 1\n       end\n       return l\n       end\ng1 (generic function with 1 method)\n\njulia&gt; l1 = g1();\n\njulia&gt; for i in 1:4\n           println(l1[i]())\n       end\n0\n1\n2\n3\n\njulia&gt; function g2()\n       l = []\n       local j\n       i = 0\n       while i &lt; 4\n           j = i + 1\n           push!(l, () -&gt; j)\n           i += 1\n       end\n       return l\n       end\ng2 (generic function with 1 method)\n\njulia&gt; l2 = g2();\n\njulia&gt; for i in 1:4\n           println(l2[i]())\n       end\n1\n2\n3\n4```\n","user":"U8JAMQGQY","ts":"1613742493.099600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Xy0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes - I agree that "},{"type":"text","text":"if I want a new binding","style":{"bold":true}},{"type":"text","text":" doing "},{"type":"text","text":"let j=j","style":{"code":true}},{"type":"text","text":" solves the issue. You can also use "},{"type":"text","text":"outer","style":{"code":true}},{"type":"text","text":" modifier in "},{"type":"text","text":"g2","style":{"code":true}},{"type":"text","text":" case to avoid boxing:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function g2()\n       l = []\n       local i\n       local j\n       for outer i in 0:3\n            j = i + 1\n            push!(l, () -> j)\n       end\n       return l\n       end\njulia> l2 = g2();\n\njulia> for i in 1:4\n           println(l2[i]())\n       end\n1\n2\n3\n4"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n\nIn summary the point is that "},{"type":"text","text":"j=i","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"j=i+1","style":{"code":true}},{"type":"text","text":" produces drastically different behavior of the function that is related to "},{"type":"text","text":"for","style":{"code":true}},{"type":"text","text":" loop behavior if indexing variable is loop local. Also if you replace "},{"type":"text","text":"for","style":{"code":true}},{"type":"text","text":" loop with an equivalent "},{"type":"text","text":"while","style":{"code":true}},{"type":"text","text":" loop you get a consistent behavior (and without boxing):\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function g1()\n       l = []\n       local j\n       i = 0\n       while i < 4\n           j = i\n           push!(l, () -> j)\n           i += 1\n       end\n       return l\n       end\ng1 (generic function with 1 method)\n\njulia> l1 = g1();\n\njulia> for i in 1:4\n           println(l1[i]())\n       end\n0\n1\n2\n3\n\njulia> function g2()\n       l = []\n       local j\n       i = 0\n       while i < 4\n           j = i + 1\n           push!(l, () -> j)\n           i += 1\n       end\n       return l\n       end\ng2 (generic function with 1 method)\n\njulia> l2 = g2();\n\njulia> for i in 1:4\n           println(l2[i]())\n       end\n1\n2\n3\n4"}]},{"type":"rich_text_section","elements":[]}]}]},{"client_msg_id":"4165b812-bd24-47ff-988b-ca20d8b9ea9d","type":"message","text":"So I think that:\n&gt; And the loop local variable behavior is separate from that\nIs not fully separate because as shown above if you use `outer` and indexing variable is not loop-local then the behavior is different than in the case if indexing variable is loop local (we drop `outer`).","user":"U8JAMQGQY","ts":"1613742546.100700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"56p7T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So I think that:\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"And the loop local variable behavior is separate from that"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Is not fully separate because as shown above if you use "},{"type":"text","text":"outer","style":{"code":true}},{"type":"text","text":" and indexing variable is not loop-local then the behavior is different than in the case if indexing variable is loop local (we drop "},{"type":"text","text":"outer","style":{"code":true}},{"type":"text","text":")."}]}]}]},{"client_msg_id":"F18FB1B7-7A88-48BB-BD85-794DAC43548D","type":"message","text":"That does look very strange in your examples","user":"U67BXBF99","ts":"1613747903.101200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JPTUf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That does look very strange in your examples"}]}]}]},{"client_msg_id":"5d54e74a-c053-4577-aa47-d07e5b3bc3bc","type":"message","text":"I’ve reopened <https://github.com/JuliaLang/julia/issues/37690> with your updated example (<@U687RKK0E>)","user":"U67BXBF99","ts":"1613754297.102200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R18","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’ve reopened "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/37690"},{"type":"text","text":" with your updated example ("},{"type":"user","user_id":"U687RKK0E"},{"type":"text","text":")"}]}]}]},{"client_msg_id":"cb4b47f0-d526-41bf-844a-baaa124a1b9c","type":"message","text":"Some day we need to just use actual dominator analysis, so we can assign vinfo:sa with much greater correctness","user":"U67BXBF99","ts":"1613754806.103100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WJNf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Some day we need to just use actual dominator analysis, so we can assign vinfo:sa with much greater correctness"}]}]}]},{"client_msg_id":"EE154B43-A28A-4209-9637-1C6DFC8F275A","type":"message","text":"Perhaps the wrong place for me to post this, but I am curious about this: <https://github.com/JuliaLang/julia/issues/39720|https://github.com/JuliaLang/julia/issues/39720>\n\nI can play around and try to fix it if there’s an actual problem here ","user":"UGR3910CQ","ts":"1613770455.104600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DrTv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Perhaps the wrong place for me to post this, but I am curious about this: "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/39720","text":"https://github.com/JuliaLang/julia/issues/39720"},{"type":"text","text":"\n"},{"type":"text","text":"\nI can play around and try to fix it if there’s an actual problem here "}]}]}]},{"client_msg_id":"06e3704a-dc6f-4a00-9822-221598ebf918","type":"message","text":"I think it is just a problem with the doc deployment in general right now","user":"U67D54KS8","ts":"1613770534.104900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"l0z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think it is just a problem with the doc deployment in general right now"}]}]}],"thread_ts":"1613770534.104900","reply_count":4,"reply_users_count":2,"latest_reply":"1613770675.107600","reply_users":["UGR3910CQ","U67D54KS8"],"subscribed":false,"reactions":[{"name":"+1","users":["UGR3910CQ"],"count":1}]},{"client_msg_id":"65f0a696-1227-4996-8c78-febe6c706237","type":"message","text":"<https://github.com/JuliaLang/julia/pull/39614#issuecomment-782316070>","user":"U67D54KS8","ts":"1613770572.105600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"k6L","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/pull/39614#issuecomment-782316070"}]}]}]},{"client_msg_id":"3fd53e5d-f4d1-4dce-9ec1-43007c5c343b","type":"message","text":"for all the garbage collection experts, been working with valentin to slowly expand capabilities of enzyme.jl to differentiate through julia’s garbage collector, when gc objects are only allocated in the topmost function, everything is fine","user":"UN3KKRCRJ","ts":"1613970571.002300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iXmW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"for all the garbage collection experts, been working with valentin to slowly expand capabilities of enzyme.jl to differentiate through julia’s garbage collector, when gc objects are only allocated in the topmost function, everything is fine"}]}]}]},{"client_msg_id":"cb0246dc-2dc0-4dc6-b25e-117dc35ac0b7","type":"message","text":"however if something is allocated in a subfunction, we need to save it for use in a corresponding reverse subfunction","user":"UN3KKRCRJ","ts":"1613970592.002800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gxTAl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"however if something is allocated in a subfunction, we need to save it for use in a corresponding reverse subfunction"}]}]}]},{"client_msg_id":"c7b4b366-5886-45f7-88de-2165b11bf624","type":"message","text":"so a bunch of related questions here, if I return a struct of objects [or array/tree of objects, etc] from the subfunction that I want to save, is there any way to mark them as wanting to be saved","user":"UN3KKRCRJ","ts":"1613970657.003900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fGE2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so a bunch of related questions here, if I return a struct of objects [or array/tree of objects, etc] from the subfunction that I want to save, is there any way to mark them as wanting to be saved"}]}]}]},{"client_msg_id":"3a811f78-be1b-4560-95b9-a3f3fef8f367","type":"message","text":"I know the precise point they’re allocated and can tag/etc them as required","user":"UN3KKRCRJ","ts":"1613970675.004300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/fEnI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I know the precise point they’re allocated and can tag/etc them as required"}]}]}]},{"client_msg_id":"0627d7af-b9c9-4c2b-beba-6efd08be3024","type":"message","text":"There is also a potential additional issue wrt “Pointers loaded from tracked object (currently 13)”","user":"UN3KKRCRJ","ts":"1613970753.004800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7FC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There is also a potential additional issue wrt “Pointers loaded from tracked object (currently 13)”"}]}]}]},{"client_msg_id":"01bb48d4-6753-48ae-a30f-93c6e7c2227d","type":"message","text":"I don't really know what you mean by marking them to be saved, but if you put in an intrinsic to escape them, they'll be preserved there. Obviously you'll need to teach the GC about whatever data structure you're using to preserve them","user":"U674T3KB3","ts":"1613970816.006100","team":"T68168MUP","edited":{"user":"U674T3KB3","ts":"1613970822.000000"},"blocks":[{"type":"rich_text","block_id":"vnLD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't really know what you mean by marking them to be saved, but if you put in an intrinsic to escape them, they'll be preserved there. Obviously you'll need to teach the GC about whatever data structure you're using to preserve them"}]}]}]},{"client_msg_id":"c2f588cc-b64e-489a-88ce-bf09fe7a9427","type":"message","text":"basically because if the array may point to a new derived pointer from something in the interim, we want to keep around the old derived pointer","user":"UN3KKRCRJ","ts":"1613970833.006400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"y2a7J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"basically because if the array may point to a new derived pointer from something in the interim, we want to keep around the old derived pointer"}]}]}]},{"client_msg_id":"ff8129d8-6380-45f0-82a0-6036a259e38e","type":"message","text":"so what is the right intrinsic to escape them","user":"UN3KKRCRJ","ts":"1613970848.006700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BtsMB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so what is the right intrinsic to escape them"}]}]}]},{"client_msg_id":"db61f2f5-9fb7-4665-82ac-2745614aba4e","type":"message","text":"and similarly is there an intrinsic that can be used to mark them as being managd by GC again","user":"UN3KKRCRJ","ts":"1613970864.007200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bddUV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and similarly is there an intrinsic that can be used to mark them as being managd by GC again"}]}]}]},{"client_msg_id":"a39efd74-907f-40c8-ab46-f8f6550b7231","type":"message","text":"there isn't one","user":"U674T3KB3","ts":"1613970874.007800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CS6L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there isn't one"}]}]}]},{"client_msg_id":"c7e91e4e-92d6-4ebb-82b8-84668f875c95","type":"message","text":"once you drop GC tracking it's fair game","user":"U674T3KB3","ts":"1613970882.008200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ywjhm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"once you drop GC tracking it's fair game"}]}]}]},{"client_msg_id":"56533547-7413-4194-befa-fe5771fb069c","type":"message","text":"like ideally the best situation is for the data to temporarily lose its managemeny from GC to us to take over","user":"UN3KKRCRJ","ts":"1613970886.008500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ujl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"like ideally the best situation is for the data to temporarily lose its managemeny from GC to us to take over"}]}]}]},{"client_msg_id":"e46f38fd-c423-4f73-a09a-7c2aef01e505","type":"message","text":"to delete","user":"U674T3KB3","ts":"1613970887.008600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"N8T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"to delete"}]}]}]},{"client_msg_id":"ee0afb9d-93fa-40f6-add7-f1cc1f07b17a","type":"message","text":"and give it back to GC","user":"UN3KKRCRJ","ts":"1613970900.008900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"o0r","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and give it back to GC"}]}]}]},{"client_msg_id":"b0c62239-8424-409b-b20d-bea8324f3e86","type":"message","text":"yeah, you can't do that","user":"U674T3KB3","ts":"1613970916.009700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FzG+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, you can't do that"}]}]}]},{"client_msg_id":"6d9fb266-4f7d-4a4b-9e21-d0ed92dbf8d1","type":"message","text":"yeah I figure as much","user":"UN3KKRCRJ","ts":"1613970923.010200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2JS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah I figure as much"}]}]}]},{"client_msg_id":"8ccf3789-8dec-4dde-b327-7cc58d132465","type":"message","text":"could I somehow bind the root of the object to the caller and not the current function scope?","user":"UN3KKRCRJ","ts":"1613970942.010900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"P18","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"could I somehow bind the root of the object to the caller and not the current function scope?"}]}]}]},{"client_msg_id":"a1adbbf7-a92b-44a9-930f-4fc5667eed40","type":"message","text":"whereever you're stuffing the pointer for later use needs to be markable by the GC","user":"U674T3KB3","ts":"1613970942.011000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eDD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"whereever you're stuffing the pointer for later use needs to be markable by the GC"}]}]}]},{"client_msg_id":"23864e3e-62d1-47b3-b762-45d9e611da5f","type":"message","text":"where are you saving the pointer?","user":"U674T3KB3","ts":"1613970961.011400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lClB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"where are you saving the pointer?"}]}]}]},{"client_msg_id":"42d0bf6e-a21c-4b78-8243-fb82e9efab6d","type":"message","text":"basically a struct of all pointers we need for the reverse pass","user":"UN3KKRCRJ","ts":"1613970980.011800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FwA+W","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"basically a struct of all pointers we need for the reverse pass"}]}]}]},{"client_msg_id":"58aac4ee-5d36-421f-b9c5-1fc2bc1d2705","type":"message","text":"ok, so you need to generate a GC layout for that","user":"U674T3KB3","ts":"1613970993.012400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FE1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ok, so you need to generate a GC layout for that"}]}]}]},{"client_msg_id":"3b997168-5c21-4d8e-bb1f-b36a69ac0782","type":"message","text":"if the object is allocated inside of a loop, then a malloc(sizeof(object) * # iters)","user":"UN3KKRCRJ","ts":"1613970998.012700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ukWe7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if the object is allocated inside of a loop, then a malloc(sizeof(object) * # iters)"}]}]}]},{"client_msg_id":"77434a34-1353-4178-bd74-dff0ca5ed4af","type":"message","text":"and register it with the GC somehow","user":"U674T3KB3","ts":"1613971004.013000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"egsU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and register it with the GC somehow"}]}]}]},{"client_msg_id":"9d32e65b-2d31-4b1b-9e7e-0f7bc7f8ac47","type":"message","text":"and the data structure itself is recursive for subcalls","user":"UN3KKRCRJ","ts":"1613971013.013300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TmW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and the data structure itself is recursive for subcalls"}]}]}]},{"client_msg_id":"07847885-119b-43cf-ae1a-c5b646067c55","type":"message","text":"we don't really have the concept of a dynamically generated GC layout at the moment, but it's something I've wanted to add","user":"U674T3KB3","ts":"1613971030.013700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vxDX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we don't really have the concept of a dynamically generated GC layout at the moment, but it's something I've wanted to add"}]}]}]},{"client_msg_id":"cbc3791d-ebd3-4ab2-9471-f46facdf2528","type":"message","text":"for precisely this reason","user":"U674T3KB3","ts":"1613971040.014000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"t1Q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"for precisely this reason"}]}]}]},{"client_msg_id":"f341f0e3-3664-4c03-b4af-9aef1fde3929","type":"message","text":"yeah","user":"UN3KKRCRJ","ts":"1613971046.014300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"md3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah"}]}]}]},{"client_msg_id":"cb972548-921d-4f4f-be72-bd405a3acbe5","type":"message","text":"unsurprisingly an optimized OpaqueClosure implementation needs it","user":"U674T3KB3","ts":"1613971052.014600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Pju3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"unsurprisingly an optimized OpaqueClosure implementation needs it"}]}]}]},{"client_msg_id":"a5b2fb6e-9dce-45e8-8eeb-30d7bea30b3a","type":"message","text":"because the OpaqueClosure environment is literally designed to represent AD residuals","user":"U674T3KB3","ts":"1613971070.015100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hJFF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"because the OpaqueClosure environment is literally designed to represent AD residuals"}]}]}]},{"client_msg_id":"cd3ca550-19c3-4610-860d-2d39f9a76427","type":"message","text":"It's not super hard, but would require some GC hacking","user":"U674T3KB3","ts":"1613971085.015400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RS=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's not super hard, but would require some GC hacking"}]}]}]}]}