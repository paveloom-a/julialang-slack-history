{"cursor": 4, "messages": [{"client_msg_id":"a91e03f8-9192-4121-9b93-bda84adf0e70","type":"message","text":"what exaclty are the “while the optimizer runs” semantics, like I assume I can use LLVM.jl to call arbitrary non julia passes on a llvm module which is a julia data structure, but not yet considered internal julia code\nI can imagine running a julia llvm optimization pass being iffy, and also then running julias “actually turn this object into runnable code via reflection” to break","user":"UN3KKRCRJ","ts":"1613973863.066300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RN7N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what exaclty are the “while the optimizer runs” semantics, like I assume I can use LLVM.jl to call arbitrary non julia passes on a llvm module which is a julia data structure, but not yet considered internal julia code\nI can imagine running a julia llvm optimization pass being iffy, and also then running julias “actually turn this object into runnable code via reflection” to break"}]}]}]},{"client_msg_id":"3b90d0ff-eb8c-472e-bbe5-0300142a42ce","type":"message","text":"anything that doesn't modify the julia global state (bindings, method tables, types) is fine","user":"U674T3KB3","ts":"1613973916.066900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VlaK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"anything that doesn't modify the julia global state (bindings, method tables, types) is fine"}]}]}]},{"client_msg_id":"cc109753-e5c5-4934-b9a0-d4877b8c7b99","type":"message","text":"I guess you could instantiate tuples","user":"U674T3KB3","ts":"1613973987.067700","team":"T68168MUP","edited":{"user":"U674T3KB3","ts":"1613973995.000000"},"blocks":[{"type":"rich_text","block_id":"ndPln","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess you could instantiate tuples"}]}]}]},{"client_msg_id":"cc7d8f7c-02e1-4263-a4c9-faf9a077df16","type":"message","text":"that's legal","user":"U674T3KB3","ts":"1613973990.068000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uHEU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's legal"}]}]}]},{"client_msg_id":"a8a79be1-7d3d-460e-9fdc-beb6137ff9e3","type":"message","text":"I see, so I could say modify existing globals, etc, but can’t create a new type or run a generated function for example?","user":"UN3KKRCRJ","ts":"1613973991.068100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2d+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see, so I could say modify existing globals, etc, but can’t create a new type or run a generated function for example?"}]}]}]},{"client_msg_id":"afe9ca68-ba3d-46a2-a56a-8c670b421768","type":"message","text":"Right you would need to delay any such thing until runtime","user":"U67BJLYCS","ts":"1613974021.069300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0kdo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Right you would need to delay any such thing until runtime"}]}]}]},{"client_msg_id":"81d8f37a-0c3c-4a82-aa0a-a99c81a1e5d8","type":"message","text":"modifying globals is in the \"but be careful\" about it category","user":"U674T3KB3","ts":"1613974029.069500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zPo0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"modifying globals is in the \"but be careful\" about it category"}]}]}]},{"client_msg_id":"20c8783b-b426-47ce-b919-0dc09900b12c","type":"message","text":"the optimizer is supposed to be pure","user":"U674T3KB3","ts":"1613974041.069700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"T1G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the optimizer is supposed to be pure"}]}]}]},{"client_msg_id":"4d4c235b-fa51-47ee-909c-39d7ac18e2f0","type":"message","text":"I mean tuples I think should be sufficient being inline and capable of us constructing an equivalent layout to the struct actually used","user":"UN3KKRCRJ","ts":"1613974066.070000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wmUJV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean tuples I think should be sufficient being inline and capable of us constructing an equivalent layout to the struct actually used"}]}]}]},{"client_msg_id":"24cd61a5-49d1-4ee3-bac7-21a8e98ed46e","type":"message","text":"you'd need to recover julia types from the LLVM allocations though","user":"U674T3KB3","ts":"1613974083.070500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IPKF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you'd need to recover julia types from the LLVM allocations though"}]}]}]},{"client_msg_id":"9b22540b-3e17-43ce-ae46-656175a5d3e0","type":"message","text":"and presumably we could use an Csize_t for anything we dont want managed by julia’s gc","user":"UN3KKRCRJ","ts":"1613974102.071100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+mEL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and presumably we could use an Csize_t for anything we dont want managed by julia’s gc"}]}]}]},{"client_msg_id":"268b95d7-2c7f-4489-a419-e042cc6a99c2","type":"message","text":"which is information you may or may not have","user":"U674T3KB3","ts":"1613974106.071200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AlhI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which is information you may or may not have"}]}]}]},{"client_msg_id":"6a657a01-c949-4b07-bff6-e2821280ae52","type":"message","text":"generating a GC descriptor just requires knowing whether it's a GC tracked pointer or not","user":"U674T3KB3","ts":"1613974131.071900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w=HA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"generating a GC descriptor just requires knowing whether it's a GC tracked pointer or not"}]}]}]},{"client_msg_id":"59b6dca1-c6de-4f4e-8c59-390307bf6538","type":"message","text":"which is visible from the llvm type","user":"U674T3KB3","ts":"1613974153.072400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xCsD9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which is visible from the llvm type"}]}]}]},{"client_msg_id":"ad8c9f7a-2439-48bf-93e8-96c60c0f7327","type":"message","text":"is the size of a static array justa  pointer?","user":"UN3KKRCRJ","ts":"1613974158.072900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c+t+u","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is the size of a static array justa  pointer?"}]}]}]},{"client_msg_id":"3d828be2-9575-4338-afba-7de8dd2f8003","type":"message","text":"yeah I think we have that info at the right time","user":"UN3KKRCRJ","ts":"1613974242.074100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QyXHb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah I think we have that info at the right time"}]}]}]},{"client_msg_id":"469002c4-9e9f-41cf-9e41-44c143f6a937","type":"message","text":"the problem with generating a tuple is that you'd need to know the leaftype, since we don't have any invariant tuples","user":"U674T3KB3","ts":"1613974256.074400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=+M7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the problem with generating a tuple is that you'd need to know the leaftype, since we don't have any invariant tuples"}]}]}]},{"client_msg_id":"1615e1e5-3b92-4acc-bd41-0d98cfc334a2","type":"message","text":"my advice is to just generate the GC descriptor. I think that's by far the safest way to go about it","user":"U674T3KB3","ts":"1613974296.075100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"460","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"my advice is to just generate the GC descriptor. I think that's by far the safest way to go about it"}]}]}]},{"client_msg_id":"fb782d63-2688-40cb-b7b2-8c0708f34463","type":"message","text":"since we’re seeing the allocation itself which has the julia type in it, I think it should be fine?\n\nAlso to be clear I agree with you on generating the GC descriptor as the actual correct way to do, but am now just trying to amke sure my GC understanding is square","user":"UN3KKRCRJ","ts":"1613974349.076600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ve5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"since we’re seeing the allocation itself which has the julia type in it, I think it should be fine?\n\nAlso to be clear I agree with you on generating the GC descriptor as the actual correct way to do, but am now just trying to amke sure my GC understanding is square"}]}]}],"thread_ts":"1613974349.076600","reply_count":5,"reply_users_count":2,"latest_reply":"1613974500.077900","reply_users":["U674T3KB3","UN3KKRCRJ"],"subscribed":false},{"client_msg_id":"532f273b-60cd-4a5f-a3ac-e3706fac80b6","type":"message","text":"Alright, I'm off to bed. But just do the GC descriptor thing. I don't think it should be more than like 100 lines of code total","user":"U674T3KB3","ts":"1613974542.078600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zxXno","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Alright, I'm off to bed. But just do the GC descriptor thing. I don't think it should be more than like 100 lines of code total"}]}]}]},{"client_msg_id":"c92afc51-a99a-42b7-a22c-203192252c79","type":"message","text":"++ Thanks again so much Keno!","user":"UN3KKRCRJ","ts":"1613974554.078800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1fJ9L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"++ Thanks again so much Keno!"}]}]}]},{"client_msg_id":"4bfd9393-5125-4443-935d-1e73b04b39cc","type":"message","text":"Certainly learned a lot :slightly_smiling_face:","user":"UN3KKRCRJ","ts":"1613974561.079000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uEpyE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Certainly learned a lot "},{"type":"emoji","name":"slightly_smiling_face"}]}]}]},{"client_msg_id":"fd60220f-7c18-4d41-b343-977239d25ea8","type":"message","text":"So what’s the plan for this patch?\n<https://github.com/JuliaLang/julia/commit/e23ea66764d6b6d5de7a4ecf289f1c6f8835e27d>","user":"U66GD0880","ts":"1614119765.082800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HFrd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So what’s the plan for this patch?\n"},{"type":"link","url":"https://github.com/JuliaLang/julia/commit/e23ea66764d6b6d5de7a4ecf289f1c6f8835e27d"}]}]}]},{"client_msg_id":"2c767dee-655d-44eb-921b-8476c3508b8c","type":"message","text":"Is this something that is due to our reliance on the wrong unwind library?","user":"U66GD0880","ts":"1614119786.083200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h05=r","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is this something that is due to our reliance on the wrong unwind library?"}]}]}]},{"client_msg_id":"202d43aa-9801-4853-aef2-a48e8d25d299","type":"message","text":"<https://github.com/JuliaLang/julia/pull/36625|https://github.com/JuliaLang/julia/pull/36625>","user":"U674T3KB3","ts":"1614119827.083400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"X+E","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/pull/36625","text":"https://github.com/JuliaLang/julia/pull/36625"}]}]}]},{"client_msg_id":"014ca333-94de-4cdf-a70b-007f6cc10220","type":"message","text":"looks like that branch has stalled out?  What do we need to do to bring that back up to date?","user":"U66GD0880","ts":"1614120588.083800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5KJK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"looks like that branch has stalled out?  What do we need to do to bring that back up to date?"}]}]}]},{"client_msg_id":"ae942686-8a7d-431d-9ec4-2384dcea0daa","type":"message","text":"We need to decide what the behavior on Linux should be and fix it","user":"U674T3KB3","ts":"1614120693.084300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ct/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We need to decide what the behavior on Linux should be and fix it"}]}]}]},{"client_msg_id":"c3e1d023-20e6-4999-931a-f4daa40d3527","type":"message","text":"I guess I'll work on it","user":"U674T3KB3","ts":"1614121476.084500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nGLr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess I'll work on it"}]}]}]},{"client_msg_id":"c5a07cdd-99bd-4bd6-9679-095911a5ff1a","type":"message","text":"since it's the last Darwin aarch64 item (at least in terms of getting it to build)","user":"U674T3KB3","ts":"1614121497.085200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"H7m","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"since it's the last Darwin aarch64 item (at least in terms of getting it to build)"}]}]}],"reactions":[{"name":"fast_parrot","users":["U680THK2S"],"count":1}]},{"client_msg_id":"7d1edbd0-e2f5-46d4-a1fa-6068198a78a8","type":"message","text":"Why does adding `where` below confuse Julia (and some developers, CC <@U67431ELR>)?:\n```julia&gt; struct X{A, B}\n       end\n\njulia&gt; const Y{B, A} = X{A, B} where {A, B}\nX{A,B} where B where A\n\njulia&gt; const Z{B, A} = X{A, B} where {B, A}\nX{A,B} where A where B\n\njulia&gt; Y{2, 1} # confused\nX{2,1}\n\njulia&gt; Z{2, 1} # as expected\nX{1,2}```","user":"U8JAMQGQY","ts":"1614165779.086800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"I0Il9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Why does adding "},{"type":"text","text":"where","style":{"code":true}},{"type":"text","text":" below confuse Julia (and some developers, CC "},{"type":"user","user_id":"U67431ELR"},{"type":"text","text":")?:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> struct X{A, B}\n       end\n\njulia> const Y{B, A} = X{A, B} where {A, B}\nX{A,B} where B where A\n\njulia> const Z{B, A} = X{A, B} where {B, A}\nX{A,B} where A where B\n\njulia> Y{2, 1} # confused\nX{2,1}\n\njulia> Z{2, 1} # as expected\nX{1,2}"}]}]}],"thread_ts":"1614165779.086800","reply_count":8,"reply_users_count":2,"latest_reply":"1614168500.088400","reply_users":["UM30MT6RF","U8JAMQGQY"],"subscribed":false},{"client_msg_id":"0a7ea0c5-d96a-4a71-914d-accc83f5fa63","type":"message","text":"Does `@threadcall` support calling conventions?","user":"U68P09RFZ","ts":"1614226823.089600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TsA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does "},{"type":"text","text":"@threadcall","style":{"code":true}},{"type":"text","text":" support calling conventions?"}]}]}]},{"client_msg_id":"a9427d53-7839-4ca6-8125-95c38d61a6db","type":"message","text":"It appears not","user":"U68P09RFZ","ts":"1614227196.089900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9G9t","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It appears not"}]}]}]},{"client_msg_id":"e1a32bcd-f5ea-4ea3-9767-d19210f79902","type":"message","text":"I noticed thee test files names which are not listed in `testnames` in \"test/choosetests.jl\" : `[\"download\", \"filesystem\", \"stack_overflow\"]`. So I thought to add them, but looking at a CI log of a recent Julia PR (<https://build.julialang.org/#/builders/71/builds/1218>) , I noticed that the \"download\" test seems to still be run, any idea why?","user":"U6QPTG69E","ts":"1614343494.092000","team":"T68168MUP","attachments":[{"text":"Buildbot web UI","fallback":"Buildbot web UI","from_url":"https://build.julialang.org/#/builders/71/builds/1218","service_name":"build.julialang.org","id":1,"original_url":"https://build.julialang.org/#/builders/71/builds/1218"}],"blocks":[{"type":"rich_text","block_id":"e2fg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I noticed thee test files names which are not listed in "},{"type":"text","text":"testnames","style":{"code":true}},{"type":"text","text":" in \"test/choosetests.jl\" : "},{"type":"text","text":"[\"download\", \"filesystem\", \"stack_overflow\"]","style":{"code":true}},{"type":"text","text":". So I thought to add them, but looking at a CI log of a recent Julia PR ("},{"type":"link","url":"https://build.julialang.org/#/builders/71/builds/1218"},{"type":"text","text":") , I noticed that the \"download\" test seems to still be run, any idea why?"}]}]}]},{"client_msg_id":"1d864a07-3bb5-4175-8fcf-2ca0474e7888","type":"message","text":"some are listed in a separate net-enabled block, I think downloads pre-dated that and is explicitly listed in the buildbot config instead","user":"U67BXBF99","ts":"1614357589.093100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jaIC2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"some are listed in a separate net-enabled block, I think downloads pre-dated that and is explicitly listed in the buildbot config instead"}]}]}]},{"client_msg_id":"bcb1a524-0ae5-4067-bdae-af0aab20ed69","type":"message","text":"looks like filesystem is new","user":"U67BXBF99","ts":"1614357632.093400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QWbeS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"looks like filesystem is new"}]}]}]},{"client_msg_id":"ad77430b-249f-446b-b6e1-c8024cb18940","type":"message","text":"```commit e29a1aa21790305bdd7fb85ad844aef0f1719cc7\nAuthor: Ryan Birmingham &lt;birm@rbirm.us&gt;\nDate:   Mon Feb 24 13:35:27 2020 -0500\n\n    add filesystem tests to increase coverage (#34831)```","user":"U67BXBF99","ts":"1614357638.093800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1C4","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"commit e29a1aa21790305bdd7fb85ad844aef0f1719cc7\nAuthor: Ryan Birmingham <birm@rbirm.us>\nDate:   Mon Feb 24 13:35:27 2020 -0500\n\n    add filesystem tests to increase coverage (#34831)"}]}]}]},{"client_msg_id":"aefaf9ce-fbc6-4b17-9cca-87adf46fdbe1","type":"message","text":"stack_overflow is buggy, so leave it out","user":"U67BXBF99","ts":"1614357662.094100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IBb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"stack_overflow is buggy, so leave it out"}]}]}]},{"client_msg_id":"0260d10c-3e74-4fe4-8128-61d81a411915","type":"message","text":"Ok thanks. So couldn't I add \"download\" too and have it removed from the buildbot config?","user":"U6QPTG69E","ts":"1614358261.095200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Zwe1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok thanks. So couldn't I add \"download\" too and have it removed from the buildbot config?"}]}]}]},{"client_msg_id":"443f366f-fd6d-4562-b6f5-4c58e12ed72e","type":"message","text":"yep","user":"U67BXBF99","ts":"1614360491.095400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/rhKJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yep"}]}]}]},{"client_msg_id":"002d8c4d-10e3-4304-8093-eb7503049934","type":"message","text":"Any clues on why the `IOBuffer()` loop completes, but the `IOContext(IOBuffer())` loop segfaults about 50-80% of the way through?\nThe code paths in PNGFiles are the pretty much same, just a forwarding of `<http://io.io|io.io>` for the IOContext\n```using PNGFiles\nimg = rand(UInt8,7,7);\nbegin\n    for i in 1:1_000_000\n        PNGFiles.save(IOBuffer(), img)\n    end\n    println(\"first loop done\")\n    for i in 1:1_000_000\n        PNGFiles.save(IOContext(IOBuffer()), img)\n    end\nend```\n<https://github.com/JuliaIO/PNGFiles.jl/issues/32#issuecomment-786930610>","user":"U8MPCDJAY","ts":"1614383386.098900","team":"T68168MUP","edited":{"user":"U8MPCDJAY","ts":"1614384325.000000"},"blocks":[{"type":"rich_text","block_id":"HdTH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Any clues on why the "},{"type":"text","text":"IOBuffer()","style":{"code":true}},{"type":"text","text":" loop completes, but the "},{"type":"text","text":"IOContext(IOBuffer())","style":{"code":true}},{"type":"text","text":" loop segfaults about 50-80% of the way through?\nThe code paths in PNGFiles are the pretty much same, just a forwarding of "},{"type":"link","url":"http://io.io","text":"io.io","style":{"code":true}},{"type":"text","text":" for the IOContext\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using PNGFiles\nimg = rand(UInt8,7,7);\nbegin\n    for i in 1:1_000_000\n        PNGFiles.save(IOBuffer(), img)\n    end\n    println(\"first loop done\")\n    for i in 1:1_000_000\n        PNGFiles.save(IOContext(IOBuffer()), img)\n    end\nend"}]},{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaIO/PNGFiles.jl/issues/32#issuecomment-786930610"}]}]}]},{"client_msg_id":"f4a71d18-66a5-49db-9153-1c1d8d41988b","type":"message","text":"Turns out `<http://io.io|io.io>` wasn’t actually forwarded, and writing directly from a c function to an `IOContext` was the problem\nThe fix\n```if s isa IOContext\n    png_set_write_fn(png_ptr, <http://s.io|s.io>, writecallback_c[], C_NULL)\nelse\n    png_set_write_fn(png_ptr, s, writecallback_c[], C_NULL)\nend```","user":"U8MPCDJAY","ts":"1614385196.100600","team":"T68168MUP","edited":{"user":"U8MPCDJAY","ts":"1614385227.000000"},"blocks":[{"type":"rich_text","block_id":"Wc7AQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Turns out "},{"type":"link","url":"http://io.io","text":"io.io","style":{"code":true}},{"type":"text","text":" wasn’t actually forwarded, and writing directly from a c function to an "},{"type":"text","text":"IOContext","style":{"code":true}},{"type":"text","text":" was the problem\nThe fix\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"if s isa IOContext\n    png_set_write_fn(png_ptr, s.io, writecallback_c[], C_NULL)\nelse\n    png_set_write_fn(png_ptr, s, writecallback_c[], C_NULL)\nend"}]}]}]},{"client_msg_id":"debdd334-de3c-4239-bb37-4d43b8600542","type":"message","text":"commented there","user":"U67BXBF99","ts":"1614387611.101000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cv0Eg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"commented there"}]}]}]},{"client_msg_id":"17bbdb0d-d457-4c7f-90ee-148ab45702fe","type":"message","text":"<https://lwn.net/Articles/847256/>","user":"U67BXBF99","ts":"1614393792.101600","team":"T68168MUP","attachments":[{"title":"A new Debian debuginfod service","title_link":"https://lwn.net/Articles/847256/","text":"Sergio Durigan Junior has announced the availability of a debuginfod server for Debian systems. \"In a nutshell, by using a debuginfod service you will not need to install debuginfo (a.k.a. dbgsym) files anymore; the symbols will be served to GDB (or any other debuginfo consumer that supports debuginfod) over the network. Ultimately, this makes the debugging experience much smoother (I myself never remember the full URL of our debuginfo repository when I need it).\"","fallback":"A new Debian debuginfod service","from_url":"https://lwn.net/Articles/847256/","service_icon":"https://lwn.net/images/favicon.png","service_name":"lwn.net","id":1,"original_url":"https://lwn.net/Articles/847256/"}],"blocks":[{"type":"rich_text","block_id":"z0b","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://lwn.net/Articles/847256/"}]}]}]},{"client_msg_id":"b6c456ae-86ff-4832-a31d-3ed864bc94d5","type":"message","text":"Is there a way to inhibit task switching for a section of code? Or turn it into an error?","user":"U67BJLYCS","ts":"1614474836.121900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Os5C/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a way to inhibit task switching for a section of code? Or turn it into an error?"}]}]}],"thread_ts":"1614474836.121900","reply_count":3,"reply_users_count":2,"latest_reply":"1614475000.122800","reply_users":["U681ELA87","U67BJLYCS"],"subscribed":false},{"client_msg_id":"58b755c1-5a7c-459b-a23b-c10b75a7141a","type":"message","text":"We don't have a Julia side representation of `ptls_states` right?","user":"U67BJLYCS","ts":"1614474961.122300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"he8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We don't have a Julia side representation of "},{"type":"text","text":"ptls_states","style":{"code":true}},{"type":"text","text":" right?"}]}]}]},{"client_msg_id":"e482622f-399a-4283-92dc-d2dc260fe632","type":"message","text":"I would be okay with setting `in_pure_callback` :wink:","user":"U67BJLYCS","ts":"1614475031.123300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C7R","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I would be okay with setting "},{"type":"text","text":"in_pure_callback","style":{"code":true}},{"type":"text","text":" "},{"type":"emoji","name":"wink"}]}]}],"thread_ts":"1614475031.123300","reply_count":4,"reply_users_count":1,"latest_reply":"1614476847.124000","reply_users":["U67BJLYCS"],"subscribed":false},{"client_msg_id":"b3cf791d-33d2-4c2c-ad47-90d38fc2372b","type":"message","text":"<https://llvm.org/docs/JITLink.html>","user":"U67BXBF99","ts":"1614708592.133400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"v9a6R","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://llvm.org/docs/JITLink.html"}]}]}]},{"type":"message","text":"I'm not sure if I want to \"advertise\" this (too easy to bitrot), but, just in case someone wants to visualize CFG/domtree of Julia's SSA IR now, I added a couple of APIs in <https://github.com/tkf/ShowCode.jl> for the visualizations (x-post <https://github.com/JuliaDebug/Cthulhu.jl/issues/26>)","files":[{"id":"F01QREXPY2V","created":1614974487,"timestamp":1614974487,"name":"image.png","title":"image.png","mimetype":"image/png","filetype":"png","pretty_type":"PNG","user":"UC7AF7NSU","editable":false,"size":70253,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01QREXPY2V/image.png","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01QREXPY2V/download/image.png","thumb_64":"https://files.slack.com/files-tmb/T68168MUP-F01QREXPY2V-c01446f9a1/image_64.png","thumb_80":"https://files.slack.com/files-tmb/T68168MUP-F01QREXPY2V-c01446f9a1/image_80.png","thumb_360":"https://files.slack.com/files-tmb/T68168MUP-F01QREXPY2V-c01446f9a1/image_360.png","thumb_360_w":360,"thumb_360_h":221,"thumb_480":"https://files.slack.com/files-tmb/T68168MUP-F01QREXPY2V-c01446f9a1/image_480.png","thumb_480_w":480,"thumb_480_h":294,"thumb_160":"https://files.slack.com/files-tmb/T68168MUP-F01QREXPY2V-c01446f9a1/image_160.png","thumb_720":"https://files.slack.com/files-tmb/T68168MUP-F01QREXPY2V-c01446f9a1/image_720.png","thumb_720_w":720,"thumb_720_h":441,"thumb_800":"https://files.slack.com/files-tmb/T68168MUP-F01QREXPY2V-c01446f9a1/image_800.png","thumb_800_w":800,"thumb_800_h":490,"original_w":827,"original_h":507,"thumb_tiny":"AwAdADCaGyieFGO7JUE/NTjYQ/7f/fVT2/8Ax7R/7o/lTZZChUrGz5z0NAEX2CHH8f8A31WVk1swyM4bdEyAevesWgB2T7/lSbj70g6UlAG7AM28X+6Kdx+XHSqkV2ViRdnRQOtO+1n+5z9aALf8Nc/Wr9sP9z9ayqAF4/yaPl/yaMmjP0oA/9k=","permalink":"https://julialang.slack.com/files/UC7AF7NSU/F01QREXPY2V/image.png","permalink_public":"https://slack-files.com/T68168MUP-F01QREXPY2V-eb3b6e66f5","is_starred":false,"has_rich_preview":false}],"upload":false,"blocks":[{"type":"rich_text","block_id":"09Apk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not sure if I want to \"advertise\" this (too easy to bitrot), but, just in case someone wants to visualize CFG/domtree of Julia's SSA IR now, I added a couple of APIs in "},{"type":"link","url":"https://github.com/tkf/ShowCode.jl"},{"type":"text","text":" for the visualizations (x-post "},{"type":"link","url":"https://github.com/JuliaDebug/Cthulhu.jl/issues/26"},{"type":"text","text":")"}]}]}],"user":"UC7AF7NSU","display_as_bot":false,"ts":"1614974614.137200","reactions":[{"name":"cool","users":["UM30MT6RF"],"count":1}]},{"client_msg_id":"4da1e1d7-9d90-4d98-ae93-a5efec33d4b9","type":"message","text":"Why are Julia pointers represented as integers in LLVM?\nI'd like to try switching LoopVectorization to use `Core.LLVMPtr{T,0}` instead of `Ptr{T}` internally, and an wondering if I'm missing since reason not to try that.\nThe motivation to try that is too reduce the amount of `inttoptr` and `ptrtoint`. Sometimes these get messed up somehow in loops, where there are multiple `phi` nodes for the same pointer, but each node has different types, e.g. one has `i64` and another has `double*`. Odds are switching to `LLVMPtr` won't help and I'll end up with `i8*` and `double*` instead, but seems worth a try. As is, the `@code_native` indeed shows multiple registers used for the same pointer, often with a super awkward and weird pattern like\n```julia\n# load/store from pa\n# load/store from pb-8\npa = pb\npb += 8\n```\nWhere `pb = pa + 8`, and llvm seems to be well aware of that fact, yet instead extra instructions in the hot loop and uses extra integer registers despite spilling them (i.e., being constrained in the number of integer registers) just outside the hot loop.","user":"UAUPJLBQX","ts":"1615004543.152700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2a9Z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Why are Julia pointers represented as integers in LLVM?\nI'd like to try switching LoopVectorization to use "},{"type":"text","text":"Core.LLVMPtr{T,0}","style":{"code":true}},{"type":"text","text":" instead of "},{"type":"text","text":"Ptr{T}","style":{"code":true}},{"type":"text","text":" internally, and an wondering if I'm missing since reason not to try that.\nThe motivation to try that is too reduce the amount of "},{"type":"text","text":"inttoptr","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"ptrtoint","style":{"code":true}},{"type":"text","text":". Sometimes these get messed up somehow in loops, where there are multiple "},{"type":"text","text":"phi ","style":{"code":true}},{"type":"text","text":"nodes for the same pointer, but each node has different types, e.g. one has "},{"type":"text","text":"i64 ","style":{"code":true}},{"type":"text","text":"and another has "},{"type":"text","text":"double*","style":{"code":true}},{"type":"text","text":". Odds are switching to "},{"type":"text","text":"LLVMPtr","style":{"code":true}},{"type":"text","text":" won't help and I'll end up with "},{"type":"text","text":"i8*","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"double*","style":{"code":true}},{"type":"text","text":" instead, but seems worth a try. As is, the "},{"type":"text","text":"@code_native","style":{"code":true}},{"type":"text","text":" indeed shows multiple registers used for the same pointer, often with a super awkward and weird pattern like\n```julia\n# load/store from pa\n# load/store from pb-8\npa = pb\npb += 8\n```\nWhere "},{"type":"text","text":"pb = pa + 8","style":{"code":true}},{"type":"text","text":", and llvm seems to be well aware of that fact, yet instead extra instructions in the hot loop and uses extra integer registers despite spilling them (i.e., being constrained in the number of integer registers) just outside the hot loop."}]}]}]},{"client_msg_id":"4f39cd0c-97af-456f-b515-c162c00a6d03","type":"message","text":"Basically because we implement arithmetic on them as integer arithmetic","user":"U674T3KB3","ts":"1615004613.153400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4qm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Basically because we implement arithmetic on them as integer arithmetic"}]}]}]},{"client_msg_id":"c1147390-8441-42d1-8228-dd7b01d4fb91","type":"message","text":"so it saves the compiler from emitting inttoptr/ptrtoint to do that arithmetic","user":"U674T3KB3","ts":"1615004634.153900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"S/M0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so it saves the compiler from emitting inttoptr/ptrtoint to do that arithmetic"}]}]}]},{"client_msg_id":"de793ae3-2a8c-474f-8554-56a7a62cd87f","type":"message","text":"at the cost of adding it when you dereference it","user":"U674T3KB3","ts":"1615004642.154300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xEP8t","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"at the cost of adding it when you dereference it"}]}]}]},{"client_msg_id":"ab0de772-15c2-4111-843c-73ead5d6c406","type":"message","text":"```julia&gt; x = rand(10);\n\njulia&gt; @code_llvm pointer(x) + 3\n;  @ pointer.jl:159 within `+'\ndefine i64 @\"julia_+_652\"(i64 zeroext %0, i64 signext %1) {\ntop:\n  %2 = inttoptr i64 %0 to i8*\n  %3 = getelementptr i8, i8* %2, i64 %1\n  %4 = ptrtoint i8* %3 to i64\n  ret i64 %4\n}```","user":"UAUPJLBQX","ts":"1615004748.154600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RfknP","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> x = rand(10);\n\njulia> @code_llvm pointer(x) + 3\n;  @ pointer.jl:159 within `+'\ndefine i64 @\"julia_+_652\"(i64 zeroext %0, i64 signext %1) {\ntop:\n  %2 = inttoptr i64 %0 to i8*\n  %3 = getelementptr i8, i8* %2, i64 %1\n  %4 = ptrtoint i8* %3 to i64\n  ret i64 %4\n}"}]}]}]},{"client_msg_id":"fcc0b16c-13b8-401f-9640-4aec74680952","type":"message","text":"ah right","user":"U674T3KB3","ts":"1615004759.154800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AZz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah right"}]}]}]},{"client_msg_id":"940fdee8-d128-4570-873d-5e5539577da3","type":"message","text":"I guess I did change that","user":"U674T3KB3","ts":"1615004763.155000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qeFRH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess I did change that"}]}]}]},{"client_msg_id":"11487940-bca0-4bf9-b138-774ea2496f04","type":"message","text":"I forget these things sometimes","user":"U674T3KB3","ts":"1615004773.155200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wERw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I forget these things sometimes"}]}]}]},{"client_msg_id":"5e50a300-c361-4167-baf9-73e328be4d0f","type":"message","text":"<@U67BXBF99> probably has opinions","user":"U674T3KB3","ts":"1615004788.155500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QToN","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U67BXBF99"},{"type":"text","text":" probably has opinions"}]}]}]},{"client_msg_id":"f6a3c5c4-8207-421b-a4ef-ef8004669447","type":"message","text":"Tracking variables through phi nodes and all the alias/\"based on\" analysis that llvm does is still a black box to me, so I appreciate the insight.\n\nLoopVectorization uses `getelementptr` via llvmcall anyway, because when unrolling code it does this to encourage llvm to emit code of the form\n```# load/store from baseptr\n# load/store from baseptr + stride\n# load/store from baseptr + 2*stride\n# load/store from baseptr + three_stride\n# load/store from baseptr + 4*stride\n# load/store from baseptr + five_stride\n# load/store from baseptr + 2*three_stride```\netc to use and calculate 4 integer registers instead of 7. This trick probably only works on x86. I should get an ARM to actually learn about their addressing.\ni.e., stride is defined in bytes, and then it bitcasts to a type to get the desired multiple on the stride","user":"UAUPJLBQX","ts":"1615005074.160100","team":"T68168MUP","edited":{"user":"UAUPJLBQX","ts":"1615005187.000000"},"blocks":[{"type":"rich_text","block_id":"4e7za","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Tracking variables through phi nodes and all the alias/\"based on\" analysis that llvm does is still a black box to me, so I appreciate the insight.\n\nLoopVectorization uses "},{"type":"text","text":"getelementptr","style":{"code":true}},{"type":"text","text":" via llvmcall anyway, because when unrolling code it does this to encourage llvm to emit code of the form\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"# load/store from baseptr\n# load/store from baseptr + stride\n# load/store from baseptr + 2*stride\n# load/store from baseptr + three_stride\n# load/store from baseptr + 4*stride\n# load/store from baseptr + five_stride\n# load/store from baseptr + 2*three_stride"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"etc to use and calculate 4 integer registers instead of 7. This trick probably only works on x86. I should get an ARM to actually learn about their addressing.\ni.e., stride is defined in bytes, and then it bitcasts to a type to get the desired multiple on the stride"}]}]}]},{"client_msg_id":"5968206D-C097-4A44-9D71-0B0AD31170D7","type":"message","text":"The main reason was banal (eliminate type mismatches), but has some side-effects. One is that we primarily used them as integers in Julia, since we didn’t have ptr_add","user":"U67BXBF99","ts":"1615011588.162600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EY5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The main reason was banal (eliminate type mismatches), but has some side-effects. One is that we primarily used them as integers in Julia, since we didn’t have ptr_add"}]}]}]},{"client_msg_id":"0FCCFC87-9C00-4BF4-9651-8BF746E43E2C","type":"message","text":"There’s some alias analysis questions upstream, and the provenance may be different for int and pointer, so casting needs to be done fairly explicitly at the source level","user":"U67BXBF99","ts":"1615011692.164700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vvpz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There’s some alias analysis questions upstream, and the provenance may be different for int and pointer, so casting needs to be done fairly explicitly at the source level"}]}]}]},{"client_msg_id":"758FC1DB-090E-4339-BCF6-CA4CBD535197","type":"message","text":"The GEP there potentially makes some strong aliasing claims, which are possibly unexpected, but it also isn’t actually clear if there are claims and what they are","user":"U67BXBF99","ts":"1615011795.166400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"b/x","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The GEP there potentially makes some strong aliasing claims, which are possibly unexpected, but it also isn’t actually clear if there are claims and what they are"}]}]}]},{"client_msg_id":"1c40d5aa-95c2-496f-be7f-46ae11981ee0","type":"message","text":"Is this issue already filed somewhere ?\n```julia&gt; let \n           if false\n               fff() = nothing\n           else\n               fff() = nothing\n           end\n       end\nERROR: UndefVarError: #fff#9 not defined\nStacktrace:\n [1] top-level scope\n   @ none:5```","user":"UH1BLK14H","ts":"1615031162.172600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WaMvx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is this issue already filed somewhere ?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> let \n           if false\n               fff() = nothing\n           else\n               fff() = nothing\n           end\n       end\nERROR: UndefVarError: #fff#9 not defined\nStacktrace:\n [1] top-level scope\n   @ none:5"}]}]}],"thread_ts":"1615031162.172600","reply_count":3,"reply_users_count":2,"latest_reply":"1615031629.173100","reply_users":["UH1BLK14H","UM30MT6RF"],"subscribed":false},{"client_msg_id":"8f2c7a96-5148-43be-97b9-9d0536d9bc81","type":"message","text":"The <https://llvm.org/docs/LangRef.html#pointer-aliasing-rules|based on list for pointer aliasing rules> mentions `getelementptr`, `bitcast`, and `inttoptr`/`ptrtoint`. So it sounds like the fact that `+`/`-` uses GEP is enough for its alias analysis.\n\nFor what it's worth, I did try switching to LLVMPtr. It worked in that LLVM was able to realize all uses were the same pointer...information which it then used to defeat my optimizations, turning this:\n```        vbroadcastsd    zmm28, qword ptr [r8 - 8]\n        vbroadcastsd    zmm31, qword ptr [r10 + rdx]\n        vbroadcastsd    zmm28, qword ptr [r10 + 2*rdx]\n        vbroadcastsd    zmm28, qword ptr [r10 + rsi]\n        vbroadcastsd    zmm28, qword ptr [r10 + 4*rdx]\n        vbroadcastsd    zmm28, qword ptr [r10 + rbx]\n        vbroadcastsd    zmm28, qword ptr [r10 + 2*rsi]\n        vbroadcastsd    zmm31, qword ptr [r10 + rax]\n        vbroadcastsd    zmm28, qword ptr [r8 + 8*rdx - 8]\n        mov     r10, r8\n        add     r8, 8\n        mov     r15, rdi```\n(which has the `mov` and `-8`)\ninto\n```        vbroadcastsd    zmm30, qword ptr [rcx]\n        vbroadcastsd    zmm30, qword ptr [rcx + rsi]\n        lea     rax, [rcx + rsi]\n        vbroadcastsd    zmm30, qword ptr [rsi + rax]\n        add     rax, rsi\n        vbroadcastsd    zmm30, qword ptr [rsi + rax]\n        add     rax, rsi\n        vbroadcastsd    zmm30, qword ptr [rsi + rax]\n        add     rax, rsi\n        vbroadcastsd    zmm30, qword ptr [rsi + rax]\n        add     rax, rsi\n        vbroadcastsd    zmm30, qword ptr [rsi + rax]\n        add     rax, rsi\n        vbroadcastsd    zmm30, qword ptr [rsi + rax]\n        add     rax, rsi\n        vbroadcastsd    zmm30, qword ptr [rsi + rax]\n        add     rcx, 8```\nmaybe I should just use `call asm` for this.","user":"UAUPJLBQX","ts":"1615033318.176500","team":"T68168MUP","edited":{"user":"UAUPJLBQX","ts":"1615033354.000000"},"blocks":[{"type":"rich_text","block_id":"6ir","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The "},{"type":"link","url":"https://llvm.org/docs/LangRef.html#pointer-aliasing-rules","text":"based on list for pointer aliasing rules"},{"type":"text","text":" mentions "},{"type":"text","text":"getelementptr","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"bitcast","style":{"code":true}},{"type":"text","text":", and "},{"type":"text","text":"inttoptr","style":{"code":true}},{"type":"text","text":"/"},{"type":"text","text":"ptrtoint","style":{"code":true}},{"type":"text","text":". So it sounds like the fact that "},{"type":"text","text":"+","style":{"code":true}},{"type":"text","text":"/"},{"type":"text","text":"-","style":{"code":true}},{"type":"text","text":" uses GEP is enough for its alias analysis.\n\nFor what it's worth, I did try switching to LLVMPtr. It worked in that LLVM was able to realize all uses were the same pointer...information which it then used to defeat my optimizations, turning this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"        vbroadcastsd    zmm28, qword ptr [r8 - 8]\n        vbroadcastsd    zmm31, qword ptr [r10 + rdx]\n        vbroadcastsd    zmm28, qword ptr [r10 + 2*rdx]\n        vbroadcastsd    zmm28, qword ptr [r10 + rsi]\n        vbroadcastsd    zmm28, qword ptr [r10 + 4*rdx]\n        vbroadcastsd    zmm28, qword ptr [r10 + rbx]\n        vbroadcastsd    zmm28, qword ptr [r10 + 2*rsi]\n        vbroadcastsd    zmm31, qword ptr [r10 + rax]\n        vbroadcastsd    zmm28, qword ptr [r8 + 8*rdx - 8]\n        mov     r10, r8\n        add     r8, 8\n        mov     r15, rdi"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"(which has the "},{"type":"text","text":"mov","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"-8","style":{"code":true}},{"type":"text","text":")\ninto\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"        vbroadcastsd    zmm30, qword ptr [rcx]\n        vbroadcastsd    zmm30, qword ptr [rcx + rsi]\n        lea     rax, [rcx + rsi]\n        vbroadcastsd    zmm30, qword ptr [rsi + rax]\n        add     rax, rsi\n        vbroadcastsd    zmm30, qword ptr [rsi + rax]\n        add     rax, rsi\n        vbroadcastsd    zmm30, qword ptr [rsi + rax]\n        add     rax, rsi\n        vbroadcastsd    zmm30, qword ptr [rsi + rax]\n        add     rax, rsi\n        vbroadcastsd    zmm30, qword ptr [rsi + rax]\n        add     rax, rsi\n        vbroadcastsd    zmm30, qword ptr [rsi + rax]\n        add     rax, rsi\n        vbroadcastsd    zmm30, qword ptr [rsi + rax]\n        add     rcx, 8"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"maybe I should just use "},{"type":"text","text":"call asm","style":{"code":true}},{"type":"text","text":" for this."}]}]}]},{"client_msg_id":"26f0c804-5b44-413a-b546-7c3cffdb7a82","type":"message","text":"For a julia process occupying 225 MB I see\n```julia&gt; Base.format_bytes.(Base.summarysize.([Main, Base, Core]))\n3-element Vector{String}:\n \"56.181 MiB\"\n \"56.179 MiB\"\n \"17.228 MiB\"```\nSo Main + Core leaves 65% of memory uncounted.\nIs there anything that can be done to make this reporting more accurate?\nI’m guessing the main mismatch is in Core?\n\nI saw this TODO, could the stacks of Tasks not being counted be significant? <https://github.com/JuliaLang/julia/blob/5fab42ac868f70d1edc6fe85b65a2df6442722b7/base/summarysize.jl#L177>","user":"U8MPCDJAY","ts":"1615050104.178700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BuN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For a julia process occupying 225 MB I see\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Base.format_bytes.(Base.summarysize.([Main, Base, Core]))\n3-element Vector{String}:\n \"56.181 MiB\"\n \"56.179 MiB\"\n \"17.228 MiB\""}]},{"type":"rich_text_section","elements":[{"type":"text","text":"So Main + Core leaves 65% of memory uncounted.\nIs there anything that can be done to make this reporting more accurate?\nI’m guessing the main mismatch is in Core?\n\nI saw this TODO, could the stacks of Tasks not being counted be significant? "},{"type":"link","url":"https://github.com/JuliaLang/julia/blob/5fab42ac868f70d1edc6fe85b65a2df6442722b7/base/summarysize.jl#L177"}]}]}],"thread_ts":"1615050104.178700","reply_count":14,"reply_users_count":2,"latest_reply":"1615051486.181400","reply_users":["U6A0PD8CR","U8MPCDJAY"],"subscribed":false},{"client_msg_id":"e7d86d87-453d-4b26-8f4f-2c87bd7734db","type":"message","text":"Is there a way to attach edges recursively to `CodeInfo` objects? E.g. in the following example I want the redefinition of `f` to trigger recompilation of `h`, since `f` is a edge of `g`, which is an edge of `h`:\n```julia&gt; f() = 1\nf (generic function with 1 method)\n\njulia&gt; @generated function g()\n           ccall(:jl_safe_printf, Cvoid, (Cstring,), \"g!\\n\")\n           ci = code_lowered(() -&gt; nothing)[1]\n           ci.edges = [Core.Compiler.method_instances(f, Tuple{})[]]\n           return ci\n       end\ng (generic function with 1 method)\n\njulia&gt; @generated function h()\n           ccall(:jl_safe_printf, Cvoid, (Cstring,), \"h!\\n\")\n           ci = code_lowered(() -&gt; nothing)[1]\n           ci.edges = [Core.Compiler.method_instances(g, Tuple{})[]]\n           return ci\n       end\nh (generic function with 1 method)\n\njulia&gt; h()\nh!\n\njulia&gt; f() = 2\nf (generic function with 1 method)\n\njulia&gt; h()\n\njulia&gt; ```","user":"UM30MT6RF","ts":"1615159908.185300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"618","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a way to attach edges recursively to "},{"type":"text","text":"CodeInfo","style":{"code":true}},{"type":"text","text":" objects? E.g. in the following example I want the redefinition of "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" to trigger recompilation of "},{"type":"text","text":"h","style":{"code":true}},{"type":"text","text":", since "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" is a edge of "},{"type":"text","text":"g","style":{"code":true}},{"type":"text","text":", which is an edge of "},{"type":"text","text":"h","style":{"code":true}},{"type":"text","text":":\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> f() = 1\nf (generic function with 1 method)\n\njulia> @generated function g()\n           ccall(:jl_safe_printf, Cvoid, (Cstring,), \"g!\\n\")\n           ci = code_lowered(() -> nothing)[1]\n           ci.edges = [Core.Compiler.method_instances(f, Tuple{})[]]\n           return ci\n       end\ng (generic function with 1 method)\n\njulia> @generated function h()\n           ccall(:jl_safe_printf, Cvoid, (Cstring,), \"h!\\n\")\n           ci = code_lowered(() -> nothing)[1]\n           ci.edges = [Core.Compiler.method_instances(g, Tuple{})[]]\n           return ci\n       end\nh (generic function with 1 method)\n\njulia> h()\nh!\n\njulia> f() = 2\nf (generic function with 1 method)\n\njulia> h()\n\njulia> "}]}]}]},{"client_msg_id":"b6719a84-06e5-4bff-8644-9282044b0ed9","type":"message","text":"Ah, ok, nevermind. I have to force specialization for `g` first, e.g. by running it. Makes sense, since otherwise `h` has no way of knowing `g` has edges","user":"UM30MT6RF","ts":"1615160091.186800","team":"T68168MUP","edited":{"user":"UM30MT6RF","ts":"1615160110.000000"},"blocks":[{"type":"rich_text","block_id":"Bkp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, ok, nevermind. I have to force specialization for "},{"type":"text","text":"g","style":{"code":true}},{"type":"text","text":" first, e.g. by running it. Makes sense, since otherwise "},{"type":"text","text":"h","style":{"code":true}},{"type":"text","text":" has no way of knowing "},{"type":"text","text":"g","style":{"code":true}},{"type":"text","text":" has edges"}]}]}]},{"client_msg_id":"28e8fef9-fa07-4d30-b18d-702052f667ed","type":"message","text":"Did we turn off `Core.Compiler.return_type` from within a generator?","user":"U67BJLYCS","ts":"1615485513.189700","team":"T68168MUP","edited":{"user":"U67BJLYCS","ts":"1615485675.000000"},"blocks":[{"type":"rich_text","block_id":"fxhE/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Did we turn off "},{"type":"text","text":"Core.Compiler.return_type","style":{"code":true}},{"type":"text","text":" from within a generator?"}]}]}]},{"client_msg_id":"E5E7E396-6BF5-42D1-A93E-4691D8BE6494","type":"message","text":"It has always been uncertain what would happen, iirc","user":"U67BXBF99","ts":"1615487719.190700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fLmp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It has always been uncertain what would happen, iirc"}]}]}]},{"client_msg_id":"ed64e104-518f-41f9-8d9b-0e394e1fc674","type":"message","text":"Should I run nanosoldier benchmarks when I improved `tmerge` accuracy? <https://github.com/JuliaLang/julia/pull/39980> Is there a benchmark designed for inference/dynamic dispatch?  I couldn't find any benchmarks designed for inference time regression in BaseBenchmarks.jl.","user":"UC7AF7NSU","ts":"1615487720.190800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FVtuK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Should I run nanosoldier benchmarks when I improved "},{"type":"text","text":"tmerge","style":{"code":true}},{"type":"text","text":" accuracy? "},{"type":"link","url":"https://github.com/JuliaLang/julia/pull/39980"},{"type":"text","text":" Is there a benchmark designed for inference/dynamic dispatch?  I couldn't find any benchmarks designed for inference time regression in BaseBenchmarks.jl."}]}]}]},{"client_msg_id":"9B2BA70D-89F5-4C44-B5ED-58F54AE5CB7B","type":"message","text":"Yeah, we should check them","user":"U67BXBF99","ts":"1615487747.191200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"imQH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, we should check them"}]}]}]},{"client_msg_id":"e0befd35-f5d6-4098-91da-f2c9f2bbcb59","type":"message","text":"just ALL?","user":"UC7AF7NSU","ts":"1615487754.191400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VEG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"just ALL?"}]}]}]},{"client_msg_id":"d7cf7704-d7c0-4ef0-8378-1b0116238044","type":"message","text":"might as well, it is only 8-9 hours","user":"U67BXBF99","ts":"1615488180.191700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JSf6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"might as well, it is only 8-9 hours"}]}]}],"reactions":[{"name":"+1","users":["UC7AF7NSU"],"count":1}]},{"client_msg_id":"68228817-7c8d-455f-8d66-37c0c4b74325","type":"message","text":"what is the difference between having `ccall(:jl_typeinf_begin, Cvoid, ())` or not? should I always include this when trying to emit typed IR?","user":"UC6SUUPRC","ts":"1615495764.192700","team":"T68168MUP","edited":{"user":"UC6SUUPRC","ts":"1615495777.000000"},"blocks":[{"type":"rich_text","block_id":"jeY8z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what is the difference between having "},{"type":"text","text":"ccall(:jl_typeinf_begin, Cvoid, ())","style":{"code":true}},{"type":"text","text":" or not? should I always include this when trying to emit typed IR?"}]}]}],"thread_ts":"1615495764.192700","reply_count":1,"reply_users_count":1,"latest_reply":"1615497101.195100","reply_users":["UJ7DVTVQ8"],"subscribed":false},{"client_msg_id":"da66021c-8f65-4cc1-a7fe-11b0036bd138","type":"message","text":"It's a lock for type inference. You only need it if there's a chance of recursing into type inference by inferring things themselves","user":"U674T3KB3","ts":"1615496034.194200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gDz/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's a lock for type inference. You only need it if there's a chance of recursing into type inference by inferring things themselves"}]}]}]},{"client_msg_id":"7b68dd47-ce93-4e0f-b9b6-79fb477c1b9b","type":"message","text":"I.e. you don't need it for an abstract interpreter","user":"U674T3KB3","ts":"1615496052.194900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"54h","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I.e. you don't need it for an abstract interpreter"}]}]}],"reactions":[{"name":"+1","users":["UC6SUUPRC"],"count":1}]},{"client_msg_id":"355be4e4-2342-4492-8486-78d430d246b6","type":"message","text":"not sure if this is the right place to ask about `Base.Test` - I’m generating `@testset` in a macro and cannot put a namespaced (module-prefixed) symbol as the first `@testset` argument, like so: `@testset MyModule.MyTestSet …`. The macro expects a symbol and `MyModule.MyTestSet` is an expression… Am I misusing the API in some way?","user":"U86LUCPRP","ts":"1615582652.198700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ms6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not sure if this is the right place to ask about "},{"type":"text","text":"Base.Test","style":{"code":true}},{"type":"text","text":" - I’m generating "},{"type":"text","text":"@testset","style":{"code":true}},{"type":"text","text":" in a macro and cannot put a namespaced (module-prefixed) symbol as the first "},{"type":"text","text":"@testset","style":{"code":true}},{"type":"text","text":" argument, like so: `@testset MyModule.MyTestSet …`. The macro expects a symbol and "},{"type":"text","text":"MyModule.MyTestSet","style":{"code":true}},{"type":"text","text":" is an expression… Am I misusing the API in some way?"}]}]}]},{"client_msg_id":"1fb5f15d-8ed6-4826-b9e2-74692d18b120","type":"message","text":"I’m trying to implement the “section test” as described here: <https://julialang.slack.com/archives/C6A044SQH/p1615469734349000>","user":"U86LUCPRP","ts":"1615582687.199100","team":"T68168MUP","edited":{"user":"U86LUCPRP","ts":"1615582731.000000"},"attachments":[{"from_url":"https://julialang.slack.com/archives/C6A044SQH/p1615469734349000","fallback":"[March 11th, 2021 5:35 AM] platonovadim: Is there a package in Julia for unit tests which would have something similar to C++ Catch2 `SECTION` ? Sections define a tree of tests which get executed down to the leaves like so <https://github.com/catchorg/Catch2/blob/devel/docs/test-cases-and-sections.md#type-parametrised-test-cases> - could be translated to Julia like:\n```@testset \"vector\" begin\n  v = Vector{Int}()\n  @section \"can't pop when empty\" begin\n    @test_throws Error pop!(v)\n  end\n\n  @section \"adds one element\" begin\n    push!(v, 1)\n    @test length(v) == 1\n    \n    @section \"adds another element\" begin\n      push!(v, 1)\n      @test length(v) == 2\n    end\n\n    @section \"removes - empty\" begin\n      pop!(v)\n      @test isempty(v)\n    end\n  end```\nFor every leaf section in the tree all of the “branches” will get re-run. I like the approach because the setup of the test and testing complicated state transitions becomes natural.","ts":"1615469734.349000","author_id":"U86LUCPRP","author_subname":"Vadim","channel_id":"C6A044SQH","channel_name":"helpdesk","is_msg_unfurl":true,"is_thread_root_unfurl":true,"text":"Is there a package in Julia for unit tests which would have something similar to C++ Catch2 `SECTION` ? Sections define a tree of tests which get executed down to the leaves like so <https://github.com/catchorg/Catch2/blob/devel/docs/test-cases-and-sections.md#type-parametrised-test-cases> - could be translated to Julia like:\n```@testset \"vector\" begin\n  v = Vector{Int}()\n  @section \"can't pop when empty\" begin\n    @test_throws Error pop!(v)\n  end\n\n  @section \"adds one element\" begin\n    push!(v, 1)\n    @test length(v) == 1\n    \n    @section \"adds another element\" begin\n      push!(v, 1)\n      @test length(v) == 2\n    end\n\n    @section \"removes - empty\" begin\n      pop!(v)\n      @test isempty(v)\n    end\n  end```\nFor every leaf section in the tree all of the “branches” will get re-run. I like the approach because the setup of the test and testing complicated state transitions becomes natural.","author_name":"Vadim","author_link":"https://julialang.slack.com/team/U86LUCPRP","author_icon":"https://avatars.slack-edge.com/2019-11-27/851179681888_8284b66ce6877f47eef2_48.jpg","mrkdwn_in":["text"],"id":1,"original_url":"https://julialang.slack.com/archives/C6A044SQH/p1615469734349000","footer":"Thread in #helpdesk"}],"blocks":[{"type":"rich_text","block_id":"f/W1Z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’m trying to implement the “section test” as described here: "},{"type":"link","url":"https://julialang.slack.com/archives/C6A044SQH/p1615469734349000"}]}]}]},{"client_msg_id":"d14d5583-e631-4bd6-bcbc-b79dd5eef9d9","type":"message","text":"What is `@section`? Did you mean `@testset` there?","user":"U67BXBF99","ts":"1615583706.199600","team":"T68168MUP","edited":{"user":"U67BXBF99","ts":"1615583710.000000"},"blocks":[{"type":"rich_text","block_id":"oCKI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What is "},{"type":"text","text":"@section","style":{"code":true}},{"type":"text","text":"? Did you mean "},{"type":"text","text":"@testset","style":{"code":true}},{"type":"text","text":" there?"}]}]}]},{"client_msg_id":"52914431-bdad-4c3a-82ef-5565b19ea7a1","type":"message","text":"section is the macro I wrote which expands to testsets with additional flow control","user":"U86LUCPRP","ts":"1615585464.200200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6SMY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"section is the macro I wrote which expands to testsets with additional flow control"}]}]}]},{"client_msg_id":"32891490-9497-4647-ac87-0e4d2bab9dda","type":"message","text":"<@U67BXBF99> a copy of `v` gets redefined for each `@section`, so you don't need to copy paste that state everywhere.","user":"U6QGE7S86","ts":"1615587287.202200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iIcbj","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U67BXBF99"},{"type":"text","text":" a copy of "},{"type":"text","text":"v","style":{"code":true}},{"type":"text","text":" gets redefined for each "},{"type":"text","text":"@section","style":{"code":true}},{"type":"text","text":", so you don't need to copy paste that state everywhere."}]}]}]},{"client_msg_id":"1947B567-08F4-4EA2-8822-2555D56A8AA6","type":"message","text":"Have we heard if there’s been any progress from apple on the libunwind stuff? <@U674T3KB3>?","user":"U8MPCDJAY","ts":"1615756619.203800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VZZzL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Have we heard if there’s been any progress from apple on the libunwind stuff? "},{"type":"user","user_id":"U674T3KB3"},{"type":"text","text":"?"}]}]}]},{"client_msg_id":"f5bc535c-58b7-483b-95f5-c45f6f40bf4d","type":"message","text":"Haven't heard anything, but the jit frame issue is probably unrelated, so I need to find some time to look into that","user":"U674T3KB3","ts":"1615774547.204700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5F5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Haven't heard anything, but the jit frame issue is probably unrelated, so I need to find some time to look into that"}]}]}],"reactions":[{"name":"+1","users":["U8MPCDJAY"],"count":1},{"name":"pray::skin-tone-2","users":["U8MPCDJAY"],"count":1}]},{"client_msg_id":"603d2344-0f78-4028-80bd-7626fb6d2ff5","type":"message","text":"MixedModels tests enter an infinite loop in subtyping on Julia master. Is there a good way to debug that?","user":"U680THK2S","ts":"1615833263.205900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zy=kR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"MixedModels tests enter an infinite loop in subtyping on Julia master. Is there a good way to debug that?"}]}]}]},{"client_msg_id":"8fa7c4bc-6788-46e3-8be5-1d34c288f6ef","type":"message","text":"Haven't reliably been able to produce a MWE, but working on it","user":"U680THK2S","ts":"1615833290.206200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YRwh7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Haven't reliably been able to produce a MWE, but working on it"}]}]}]},{"client_msg_id":"97ff6598-9b3e-422a-9ff9-babc5ab89f65","type":"message","text":"which master? <https://github.com/JuliaLang/julia/issues/39948> ?","user":"UH24GRBLL","ts":"1615833414.206500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g75","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which master? "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/39948"},{"type":"text","text":" ?"}]}]}]},{"client_msg_id":"72476782-0c7f-4ba6-ad4d-bf4cd6ea8362","type":"message","text":"Julia master. Didn't observe it on 1.6 so it could be different than that issue (and I think we saw it on master after Jeff's PR was merged)","user":"U680THK2S","ts":"1615833509.207400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s5s","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Julia master. Didn't observe it on 1.6 so it could be different than that issue (and I think we saw it on master after Jeff's PR was merged)"}]}]}],"thread_ts":"1615833509.207400","reply_count":2,"reply_users_count":2,"latest_reply":"1615833789.207700","reply_users":["U67SCG4HG","U680THK2S"],"subscribed":false},{"client_msg_id":"e9c8c1e8-d29e-4422-965c-dbeff963b3fa","type":"message","text":"I am not sure if it is worth opening an issue for this, but we recently had discussion with <@U67431ELR> about the following topic. Polars (<https://www.ritchievink.com/blog/2021/02/28/i-wrote-one-of-the-fastest-dataframe-libraries/>) has the following optimizations that might be potentially useful in Julia Base (both operations are relevant for having high performance DataFrames.jl, but maybe it is better to have it in Julia Base or some more general packages?):\n• section \"4.3 Performance: filter-trick\" of post: optimized filtering of `BitVector`. In Julia Base when you do `(1:10)[trues(10)]` then an intermediate step is:\n```julia&gt; Base.to_indices(1:10, (trues(10),))\n([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],)```\nwhich is slow. What Polars does is taking 64 bit chunks of `BitVector` and avoids allocating the integer index array at all but processes chunks sequentially in particular taking advantage of the fact that there are many leading 1s or 0s in the 64 bit chunk (as you do not have to branch to handle them). They claim that it improves performance visibly (except for unlikely bit patterns like `101010101010101010101`).\n•  section \"5.2.2 Lock-free hashing\" is in general an approach to allow to populate `Dict` using multiple threads without having to lock it (essentially you distribute one dict into multiple `Dict`s based on modulus of hash against number of threads). This is probably not something that will go into Julia Base, but my question is do we have such a structure already in the ecosystem (so that we do not reinvent the wheel in DataFrames.jl) + in general are there any plans for collections supporting multiple threads in Julia Base (as I assume we now have enough maturity of threading in Julia that it is a good moment to start thinking about such things)\nThank you for any comments!","user":"U8JAMQGQY","ts":"1615893682.009700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pKzG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am not sure if it is worth opening an issue for this, but we recently had discussion with "},{"type":"user","user_id":"U67431ELR"},{"type":"text","text":" about the following topic. Polars ("},{"type":"link","url":"https://www.ritchievink.com/blog/2021/02/28/i-wrote-one-of-the-fastest-dataframe-libraries/"},{"type":"text","text":") has the following optimizations that might be potentially useful in Julia Base (both operations are relevant for having high performance DataFrames.jl, but maybe it is better to have it in Julia Base or some more general packages?):\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"section \"4.3 Performance: filter-trick\" of post: optimized filtering of "},{"type":"text","text":"BitVector","style":{"code":true}},{"type":"text","text":". In Julia Base when you do "},{"type":"text","text":"(1:10)[trues(10)]","style":{"code":true}},{"type":"text","text":" then an intermediate step is:"}]}],"style":"bullet","indent":0},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Base.to_indices(1:10, (trues(10),))\n([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"which is slow. What Polars does is taking 64 bit chunks of "},{"type":"text","text":"BitVector","style":{"code":true}},{"type":"text","text":" and avoids allocating the integer index array at all but processes chunks sequentially in particular taking advantage of the fact that there are many leading 1s or 0s in the 64 bit chunk (as you do not have to branch to handle them). They claim that it improves performance visibly (except for unlikely bit patterns like "},{"type":"text","text":"101010101010101010101","style":{"code":true}},{"type":"text","text":").\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":" section \"5.2.2 Lock-free hashing\" is in general an approach to allow to populate "},{"type":"text","text":"Dict","style":{"code":true}},{"type":"text","text":" using multiple threads without having to lock it (essentially you distribute one dict into multiple "},{"type":"text","text":"Dict","style":{"code":true}},{"type":"text","text":"s based on modulus of hash against number of threads). This is probably not something that will go into Julia Base, but my question is do we have such a structure already in the ecosystem (so that we do not reinvent the wheel in DataFrames.jl) + in general are there any plans for collections supporting multiple threads in Julia Base (as I assume we now have enough maturity of threading in Julia that it is a good moment to start thinking about such things)"}]}],"style":"bullet","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"Thank you for any comments!"}]}]}],"thread_ts":"1615893682.009700","reply_count":1,"reply_users_count":1,"latest_reply":"1615894477.009900","reply_users":["UM30MT6RF"],"subscribed":false,"reactions":[{"name":"+1","users":["U67431ELR","UM30MT6RF"],"count":2}]},{"client_msg_id":"46cbddbc-2244-441f-a74b-2069f28226af","type":"message","text":"<https://reviews.llvm.org/D77767>","user":"U67BJLYCS","ts":"1615930568.011800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j3U3","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://reviews.llvm.org/D77767"}]}]}]},{"client_msg_id":"da0adc3c-1f01-43b6-bfb5-75b075286d02","type":"message","text":"<@U674T3KB3> <@U67BXBF99> this might negatively impact performance in LLVM 12","user":"U67BJLYCS","ts":"1615930603.012600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9Sn","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U674T3KB3"},{"type":"text","text":" "},{"type":"user","user_id":"U67BXBF99"},{"type":"text","text":" this might negatively impact performance in LLVM 12"}]}]}]},{"client_msg_id":"861d2a06-fd68-4ca9-ba09-986a7c0fb602","type":"message","text":"penalizing all functions using setjmp/longjmp","user":"U67BJLYCS","ts":"1615930623.012900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cAkG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"penalizing all functions using setjmp/longjmp"}]}]}]},{"client_msg_id":"e06f0b1e-844e-43f0-b02e-0d5ad922b869","type":"message","text":"ah good, we’ve needed that for a long time","user":"U67BXBF99","ts":"1615930648.013100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FdX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah good, we’ve needed that for a long time"}]}]}],"thread_ts":"1615930648.013100","reply_count":2,"reply_users_count":1,"latest_reply":"1615931416.013800","reply_users":["U67BJLYCS"],"subscribed":false,"reactions":[{"name":"grinning","users":["U67BJLYCS"],"count":1}]},{"client_msg_id":"f4458bdb-c58c-4fad-ae78-7a9e056cb656","type":"message","text":"obviously, we also should stop using these function too","user":"U67BXBF99","ts":"1615934584.014200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yc=A","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"obviously, we also should stop using these function too"}]}]}]},{"client_msg_id":"0c9ec594-5922-4938-9fbb-a7726ef84960","type":"message","text":"this may be a naive question as i'm not that familiar with compilers/compilation, but is incremental compilation possible?\ni don't exactly know what i mean by this, but take <https://blog.rust-lang.org/2016/09/08/incremental.html|this >\n```Incremental compilation is a way of exploiting the fact that little changes between compiles during the regular programming workflow: Many, if not most, of the changes done in between two compilation sessions only have local impact on the machine code in the output binary, while the rest of the program, same as at the source level, will end up exactly the same, bit for bit. Incremental compilation aims at retaining as much of those unchanged parts as possible while redoing only that amount of work that actually must be redone.```\nis there a way to use this idea in speeding up the `]test` update `]test` loop? or if julia does do this how does it work and where can i learn more","user":"UM8JUNJG7","ts":"1615936125.018400","team":"T68168MUP","edited":{"user":"UM8JUNJG7","ts":"1615936131.000000"},"blocks":[{"type":"rich_text","block_id":"pdC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this may be a naive question as i'm not that familiar with compilers/compilation, but is incremental compilation possible?\ni don't exactly know what i mean by this, but take "},{"type":"link","url":"https://blog.rust-lang.org/2016/09/08/incremental.html","text":"this "},{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Incremental compilation is a way of exploiting the fact that little changes between compiles during the regular programming workflow: Many, if not most, of the changes done in between two compilation sessions only have local impact on the machine code in the output binary, while the rest of the program, same as at the source level, will end up exactly the same, bit for bit. Incremental compilation aims at retaining as much of those unchanged parts as possible while redoing only that amount of work that actually must be redone."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"is there a way to use this idea in speeding up the "},{"type":"text","text":"]test","style":{"code":true}},{"type":"text","text":" update "},{"type":"text","text":"]test","style":{"code":true}},{"type":"text","text":" loop? or if julia does do this how does it work and where can i learn more"}]}]}]},{"client_msg_id":"e4885302-c9c6-48f6-a6f1-76ceefe268d5","type":"message","text":"use Revise?","user":"U674T3KB3","ts":"1615936555.022100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Acw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"use Revise?"}]}]}]},{"client_msg_id":"3efede90-8dde-416a-b419-1b8119eaed14","type":"message","text":"Incremental compilation happens naturally in a live session, and Revise.jl let's you load modified code from files. However `Pkg.test` spins up it's own environment and reloads and recompiles the code, IIUC?\n\nYou you can however type `include(\"test/runtests.jl\")`  from a REPL with Revise.jl running and you'll skip a lot of compile-time waiting. Probably best to use the package's Project.toml environment when doing that.","user":"U66QZ3QF3","ts":"1615936577.022600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZRr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Incremental compilation happens naturally in a live session, and Revise.jl let's you load modified code from files. However "},{"type":"text","text":"Pkg.test","style":{"code":true}},{"type":"text","text":" spins up it's own environment and reloads and recompiles the code, IIUC?\n\nYou you can however type "},{"type":"text","text":"include(\"test/runtests.jl\")","style":{"code":true}},{"type":"text","text":"  from a REPL with Revise.jl running and you'll skip a lot of compile-time waiting. Probably best to use the package's Project.toml environment when doing that."}]}]}]},{"client_msg_id":"d29c0feb-9ab9-488b-ad30-b1498047595b","type":"message","text":"(Actually, that enviroment will lack any \"extras\" used during tests... hmm...)","user":"U66QZ3QF3","ts":"1615936629.023300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SloJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(Actually, that enviroment will lack any \"extras\" used during tests... hmm...)"}]}]}]},{"client_msg_id":"c01a9aa1-2f51-4d56-98d3-5634d307fb85","type":"message","text":"`]test` update `]test` is just not the way to go it seems. revise and vscode`shift+tab` for a single test file seems like the right alternative","user":"UM8JUNJG7","ts":"1615936809.024800","team":"T68168MUP","edited":{"user":"UM8JUNJG7","ts":"1615936830.000000"},"blocks":[{"type":"rich_text","block_id":"wsU8+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"]test","style":{"code":true}},{"type":"text","text":" update "},{"type":"text","text":"]test","style":{"code":true}},{"type":"text","text":" is just not the way to go it seems. revise and vscode"},{"type":"text","text":"shift+tab","style":{"code":true}},{"type":"text","text":" for a single test file seems like the right alternative"}]}]}]},{"client_msg_id":"6971DE41-10E9-44F8-B730-82C17946DAE5","type":"message","text":"I started an attempt a while ago at using Revise.jl in VS Code for a live testing functionality, essentially something that reruns tests after each change and uses Revise to make that faster. <https://github.com/julia-vscode/julia-vscode/pull/1964|https://github.com/julia-vscode/julia-vscode/pull/1964> but it is a bit stuck at the moment, not super sure how to get that to work properly... But I still think that it would be very useful functionality :)","user":"U68UUUFPS","ts":"1615956222.004000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Zz01D","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I started an attempt a while ago at using Revise.jl in VS Code for a live testing functionality, essentially something that reruns tests after each change and uses Revise to make that faster. "},{"type":"link","url":"https://github.com/julia-vscode/julia-vscode/pull/1964","text":"https://github.com/julia-vscode/julia-vscode/pull/1964"},{"type":"text","text":" but it is a bit stuck at the moment, not super sure how to get that to work properly... But I still think that it would be very useful functionality :)"}]}]}],"thread_ts":"1615956222.004000","reply_count":1,"reply_users_count":1,"latest_reply":"1615958277.004200","reply_users":["UM8JUNJG7"],"subscribed":false,"reactions":[{"name":"heart","users":["UM8JUNJG7"],"count":1}]},{"client_msg_id":"ff815565-4613-4d0a-9b98-1f33794fb2ce","type":"message","text":"<@U674T3KB3> i know this is against the very name and nature of the object, but how can I inspect what an opaque closure is doing?\nI want to know if the optimizer is eliminating/moving the work that I want it to.","user":"U6A936746","ts":"1615990344.005900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cYWwW","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U674T3KB3"},{"type":"text","text":" i know this is against the very name and nature of the object, but how can I inspect what an opaque closure is doing?\nI want to know if the optimizer is eliminating/moving the work that I want it to."}]}]}],"thread_ts":"1615990344.005900","reply_count":5,"reply_users_count":2,"latest_reply":"1615990828.007200","reply_users":["U6A936746","U674T3KB3"],"subscribed":false},{"client_msg_id":"a62093c4-4ffa-49ce-aae7-cf8bf193ffeb","type":"message","text":"I recently came across <@U67BJLYCS>'s trick for receiving callbacks and data from non-Julia threads by sticking to types that are `isbits &amp;&amp; isimmutable`, and I'm wondering if there is a reason this approach could not be generalized or further documented:\n<https://github.com/JuliaGPU/OpenCL.jl/blame/master/src/event.jl#L97-L142>","user":"USU9FRPEU","ts":"1616003526.010000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nGQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I recently came across "},{"type":"user","user_id":"U67BJLYCS"},{"type":"text","text":"'s trick for receiving callbacks and data from non-Julia threads by sticking to types that are "},{"type":"text","text":"isbits && isimmutable","style":{"code":true}},{"type":"text","text":", and I'm wondering if there is a reason this approach could not be generalized or further documented:\n"},{"type":"link","url":"https://github.com/JuliaGPU/OpenCL.jl/blame/master/src/event.jl#L97-L142"}]}]}],"thread_ts":"1616003526.010000","reply_count":6,"reply_users_count":2,"latest_reply":"1616004149.011300","reply_users":["USU9FRPEU","U67BJLYCS"],"subscribed":false},{"client_msg_id":"f903f549-d3ae-40de-b603-0da7429ac45a","type":"message","text":"Does anyone see <https://github.com/JuliaLang/julia/pull/40002> as problematic?","user":"U66SR8JHX","ts":"1616261084.014800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dvArg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does anyone see "},{"type":"link","url":"https://github.com/JuliaLang/julia/pull/40002"},{"type":"text","text":" as problematic?"}]}]}]},{"client_msg_id":"1fad8f82-f4b4-45b3-a961-e45dc3cfbda3","type":"message","text":"I added a triage label. Seems like the right place to discuss this","user":"U0179G7FG4F","ts":"1616262289.015200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"youy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I added a triage label. Seems like the right place to discuss this"}]}]}],"thread_ts":"1616262289.015200","reply_count":1,"reply_users_count":1,"latest_reply":"1616262558.015300","reply_users":["U66SR8JHX"],"subscribed":false},{"client_msg_id":"fd955dd4-deb9-457e-b21a-e3e7f1ad8bbd","type":"message","text":"<https://lists.llvm.org/pipermail/llvm-dev/2021-March/149310.html>","user":"U67BJLYCS","ts":"1616438288.016100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rmE","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://lists.llvm.org/pipermail/llvm-dev/2021-March/149310.html"}]}]}]},{"client_msg_id":"b9257063-4721-499d-af4f-bcb804b67dff","type":"message","text":"Why a decision was made to have the following difference? (if there is a link to a relevant discussion could you please share - thank you!)\n```julia&gt; (a=1, b=missing) &lt; (a=1,b=missing)\nfalse\n\njulia&gt; (1, missing) &lt; (1, missing)\nmissing```\nbut\n```julia&gt; (a=1, b=missing) == (a=1,b=missing)\nmissing\n\njulia&gt; (1, missing) == (1, missing)\nmissing```\nCC <@U67431ELR>","user":"U8JAMQGQY","ts":"1616445234.017800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JkbQf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Why a decision was made to have the following difference? (if there is a link to a relevant discussion could you please share - thank you!)\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> (a=1, b=missing) < (a=1,b=missing)\nfalse\n\njulia> (1, missing) < (1, missing)\nmissing"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"but\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> (a=1, b=missing) == (a=1,b=missing)\nmissing\n\njulia> (1, missing) == (1, missing)\nmissing"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"CC "},{"type":"user","user_id":"U67431ELR"}]}]}],"thread_ts":"1616445234.017800","reply_count":4,"reply_users_count":2,"latest_reply":"1616446102.018600","reply_users":["U67431ELR","U8JAMQGQY"],"subscribed":false},{"client_msg_id":"3645180a-03aa-425b-b3fc-cdc6f2bb5069","type":"message","text":"If something is calling `Base._return_type` to try and infer the result of a function, I understand it will return concrete types, possible union types; does it return abstract types like `Real` ? Or does it just give up and return `Any`? I’m trying to figure out if I need to handle abstract types as a result or if I can just check for `Any` and do something else in the “failure case”","user":"U681ELA87","ts":"1616450648.020900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WeHx/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If something is calling "},{"type":"text","text":"Base._return_type","style":{"code":true}},{"type":"text","text":" to try and infer the result of a function, I understand it will return concrete types, possible union types; does it return abstract types like "},{"type":"text","text":"Real","style":{"code":true}},{"type":"text","text":" ? Or does it just give up and return "},{"type":"text","text":"Any","style":{"code":true}},{"type":"text","text":"? I’m trying to figure out if I need to handle abstract types as a result or if I can just check for "},{"type":"text","text":"Any","style":{"code":true}},{"type":"text","text":" and do something else in the “failure case”"}]}]}]},{"client_msg_id":"44801321-6dfe-4eb9-870f-d67d7abd1808","type":"message","text":"```julia&gt; f(x) = x[1]\nf (generic function with 1 method)\n\njulia&gt; Base._return_type(f, Tuple{Vector{Real}})\nReal```\nSo seems it can be `Real`","user":"U67D54KS8","ts":"1616451015.021500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/Aew","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> f(x) = x[1]\nf (generic function with 1 method)\n\njulia> Base._return_type(f, Tuple{Vector{Real}})\nReal"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nSo seems it can be "},{"type":"text","text":"Real","style":{"code":true}}]}]}]},{"client_msg_id":"58e3a03b-2c88-4e77-bb13-9ba66a397093","type":"message","text":"Yeah, it can return anything. Sometimes even `Type` objects that don’t really make any sense","user":"U67BXBF99","ts":"1616453051.022000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gbj=M","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, it can return anything. Sometimes even "},{"type":"text","text":"Type","style":{"code":true}},{"type":"text","text":" objects that don’t really make any sense"}]}]}]},{"client_msg_id":"A4D79444-18C3-4433-9EDD-56A95C7A2D2C","type":"message","text":"Thanks. I found a way to not need it instead","user":"U681ELA87","ts":"1616460492.022500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uAx6d","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks. I found a way to not need it instead"}]}]}]},{"client_msg_id":"4dd28767-8780-4083-9425-d73611d4f9b8","type":"message","text":"Asking here because it seems a bit niche: is there anyway to load julia code directly from memory, without it ever touching a filesystem? This is for a secure deployment environment. Ideally, I'd like to be able to stream in code, decrypt it on the host, and have it loaded, without any persistent trace. \n(I'm not thinking of things like /dev/shm - these are still filesystems, and could be temporarily observable to an attacker)\nPossibly complementary: does anyone know of any obfuscation tools for Julia code?","user":"UCNPT22MQ","ts":"1616519172.028300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1qF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Asking here because it seems a bit niche: is there anyway to load julia code directly from memory, without it ever touching a filesystem? This is for a secure deployment environment. Ideally, I'd like to be able to stream in code, decrypt it on the host, and have it loaded, without any persistent trace. \n(I'm not thinking of things like /dev/shm - these are still filesystems, and could be temporarily observable to an attacker)\nPossibly complementary: does anyone know of any obfuscation tools for Julia code?"}]}]}]},{"client_msg_id":"08d6c16d-398a-482f-8599-cc36b46de81d","type":"message","text":"`Distributed.jl` ?","user":"U67BXBF99","ts":"1616519223.028500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dDHZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Distributed.jl","style":{"code":true}},{"type":"text","text":" ?"}]}]}]},{"client_msg_id":"2067311d-df3c-4122-b007-7e705ae09d78","type":"message","text":"If the attacker has r/w access to the filesystem though, you’re possible already SOL","user":"U67BXBF99","ts":"1616519296.029000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5CDy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If the attacker has r/w access to the filesystem though, you’re possible already SOL"}]}]}]},{"client_msg_id":"a7868c03-429e-4db8-b112-ce02e6cb71ea","type":"message","text":"Thanks. Do you know where the code loading part of Distributed is? I've been looking through the code, but can't see anything. Given it is a Julia command line argument (`-L`) perhaps it is in Julia itself?","user":"UCNPT22MQ","ts":"1616519610.030900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"u1H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks. Do you know where the code loading part of Distributed is? I've been looking through the code, but can't see anything. Given it is a Julia command line argument ("},{"type":"text","text":"-L","style":{"code":true}},{"type":"text","text":") perhaps it is in Julia itself?"}]}]}]},{"client_msg_id":"56c14271-3db1-4e88-bb2f-945c669f59f3","type":"message","text":"And I agree, but the more layers the better.","user":"UCNPT22MQ","ts":"1616519634.031400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NHGOr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And I agree, but the more layers the better."}]}]}]},{"client_msg_id":"f7964425-2934-4fde-a136-8e8752bf921a","type":"message","text":"what's your attack model?","user":"UH24GRBLL","ts":"1616519679.031600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nI9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what's your attack model?"}]}]}]},{"client_msg_id":"3730aad2-1011-4e22-9879-40922fc0acc0","type":"message","text":"I'm immediately thinking of \"just dump /proc/\"","user":"UH24GRBLL","ts":"1616519712.032200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lvM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm immediately thinking of \"just dump /proc/\""}]}]}]},{"client_msg_id":"e4bf1730-3140-4694-8f7b-5b1c8a5d1710","type":"message","text":"I suppose the attack model is: a small number of people could have access to the server. If code were sitting, unobfuscated on disk, it is very easy to read/take. If it is only stored as an in-memory structure in the process, doing anything useful with it becomes much more difficult.","user":"UCNPT22MQ","ts":"1616519918.036200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZYji","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I suppose the attack model is: a small number of people could have access to the server. If code were sitting, unobfuscated on disk, it is very easy to read/take. If it is only stored as an in-memory structure in the process, doing anything useful with it becomes much more difficult."}]}]}],"thread_ts":"1616519918.036200","reply_count":1,"reply_users_count":1,"latest_reply":"1616520082.039100","reply_users":["U6A0PD8CR"],"subscribed":false},{"client_msg_id":"5a281a94-7b7a-4ba8-b92b-9ba66c5dd210","type":"message","text":"I agree that this isn't perfect - limiting the number of people who can access the server and hardening the server are both things to do as well - but the more layers the better. Makes opportunistic theft less likely.","user":"UCNPT22MQ","ts":"1616519974.037900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LYpj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I agree that this isn't perfect - limiting the number of people who can access the server and hardening the server are both things to do as well - but the more layers the better. Makes opportunistic theft less likely."}]}]}]},{"client_msg_id":"77f6a93c-df69-4942-8fd7-7d179413456f","type":"message","text":"so read only access and no root is your attack model?","user":"UH24GRBLL","ts":"1616520045.038200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2WT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so read only access and no root is your attack model?"}]}]}]},{"client_msg_id":"a5a41632-d44e-4c93-b984-92e91391af42","type":"message","text":"Sure, conceivably.","user":"UCNPT22MQ","ts":"1616520085.039300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Tg0gc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sure, conceivably."}]}]}]},{"client_msg_id":"0880ab1f-7066-4a89-b0a1-8f3ac1e9e8ae","type":"message","text":"the point of an attack model is to figure out what exactly is \"conceivable\" and what not (i.e. at what point do you say \"they got me now and it would be too much work to prevent it\")","user":"UH24GRBLL","ts":"1616520141.040300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/c2YR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the point of an attack model is to figure out what exactly is \"conceivable\" and what not (i.e. at what point do you say \"they got me now and it would be too much work to prevent it\")"}]}]}]},{"client_msg_id":"315e94ae-8b62-45f7-84cb-b448bc3b7148","type":"message","text":"so is root access for attackers conceivable as well? if so, that's part of the attack model (and at that point you're f-ed anyway, since they can just dump /proc)","user":"UH24GRBLL","ts":"1616520176.041500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bXoht","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so is root access for attackers conceivable as well? if so, that's part of the attack model (and at that point you're f-ed anyway, since they can just dump /proc)"}]}]}]},{"client_msg_id":"c66c6f82-0d70-4dfe-be2a-53a409b569cd","type":"message","text":"Yes, fair enough. Ok, let's say someone has root on the server. So filesystem permissions are out. What would they see by dumping proc?","user":"UCNPT22MQ","ts":"1616520210.042300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"54w","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, fair enough. Ok, let's say someone has root on the server. So filesystem permissions are out. What would they see by dumping proc?"}]}]}]},{"client_msg_id":"2b32b5cc-7b47-4980-90a5-07a08b7509f6","type":"message","text":"all memory of every running program.","user":"UH24GRBLL","ts":"1616520223.042900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nDH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"all memory of every running program."}]}]}]},{"client_msg_id":"3db1886c-b0a4-480c-98da-c71b5800fb59","type":"message","text":"there's no conceivable defense against that, short of homomorphic encryption.","user":"UH24GRBLL","ts":"1616520259.044200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iNu6m","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there's no conceivable defense against that, short of homomorphic encryption."}]}]}]},{"client_msg_id":"a7c3f6c1-c74a-411d-8e7e-458511bd5d81","type":"message","text":"Ok. So imagine my source code no longer exists as text, but is just some (lowered) AST in a Julia process somewhere. That seems a lot harder for an opportunistic hacker to do something with than cp-ing my source directory?","user":"UCNPT22MQ","ts":"1616520291.045300","team":"T68168MUP","edited":{"user":"UCNPT22MQ","ts":"1616520557.000000"},"blocks":[{"type":"rich_text","block_id":"B3BHE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok. So imagine my source code no longer exists as text, but is just some (lowered) AST in a Julia process somewhere. That seems a lot harder for an opportunistic hacker to do something with than cp-ing my source directory?"}]}]}],"thread_ts":"1616520291.045300","reply_count":31,"reply_users_count":3,"latest_reply":"1616521297.054000","reply_users":["U6A0PD8CR","UCNPT22MQ","UH24GRBLL"],"subscribed":false},{"client_msg_id":"8fa522dc-7752-41c4-a239-7244675e24e1","type":"message","text":"There’s a difference between the “type narrowing” behavior of `map(identity, x)` vs. `collect(x)`, right? anyone have a quick explanation of the difference and when you would use one vs. the other? In my use-case, I’m hoping to get non-abstract eltypes at the end, so preferring `Union{Int64, Float64}` instead of `Real`.","user":"U681ELA87","ts":"1616535445.064300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nfSv9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There’s a difference between the “type narrowing” behavior of "},{"type":"text","text":"map(identity, x)","style":{"code":true}},{"type":"text","text":" vs. "},{"type":"text","text":"collect(x)","style":{"code":true}},{"type":"text","text":", right? anyone have a quick explanation of the difference and when you would use one vs. the other? In my use-case, I’m hoping to get non-abstract eltypes at the end, so preferring "},{"type":"text","text":"Union{Int64, Float64}","style":{"code":true}},{"type":"text","text":" instead of "},{"type":"text","text":"Real","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1616535445.064300","reply_count":4,"reply_users_count":2,"latest_reply":"1616537887.065000","reply_users":["U681ELA87","U67D54KS8"],"subscribed":false},{"client_msg_id":"632186ad-8620-4611-9cf7-506caccf38c6","type":"message","text":"As a user, I shouldn't be seeing `fatal error in type inference (type bound)`, in normal code, right? I saw this with Julia 1.6.0-rc3.7 and I'm wondering if I should be trying to minimize it (though I implemented \"workaround\" on my end so it doesn't matter for me for now)","user":"UC7AF7NSU","ts":"1616628517.067100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/vyvc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"As a user, I shouldn't be seeing "},{"type":"text","text":"fatal error in type inference (type bound)","style":{"code":true}},{"type":"text","text":", in normal code, right? I saw this with Julia 1.6.0-rc3.7 and I'm wondering if I should be trying to minimize it (though I implemented \"workaround\" on my end so it doesn't matter for me for now)"}]}]}],"thread_ts":"1616628517.067100","reply_count":1,"reply_users_count":1,"latest_reply":"1616628523.067200","reply_users":["UC7AF7NSU"],"is_locked":false,"subscribed":false},{"client_msg_id":"644b6443-461b-48e7-bae3-7eaee43c8359","type":"message","text":"Huh: <https://lkml.org/lkml/2021/3/26/1189|https://lkml.org/lkml/2021/3/26/1189>","user":"U674T3KB3","ts":"1616800646.069700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GmTlg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Huh: "},{"type":"link","url":"https://lkml.org/lkml/2021/3/26/1189","text":"https://lkml.org/lkml/2021/3/26/1189"}]}]}]},{"client_msg_id":"0cf116c7-30ef-4938-b2c2-3e84baa2b3f0","type":"message","text":"Is there a way to use the `@fastmath` macro from within `Base.math.jl`?","user":"U0179G7FG4F","ts":"1616876853.071900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7ln","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a way to use the "},{"type":"text","text":"@fastmath","style":{"code":true}},{"type":"text","text":" macro from within "},{"type":"text","text":"Base.math.jl","style":{"code":true}},{"type":"text","text":"?"}]}]}]},{"client_msg_id":"1d69f44d-9766-4442-8253-c9fc681ea54a","type":"message","text":"I am trying to workout the type inference failures that appeared in ChainRules.jl with the change to 1.6.\nIt seems like it is the result of a symbol argument not constant folding. anymore\n(namely the uplo for Symmetric).","user":"U6A936746","ts":"1617038954.075200","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1617038963.000000"},"blocks":[{"type":"rich_text","block_id":"dwE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am trying to workout the type inference failures that appeared in ChainRules.jl with the change to 1.6.\nIt seems like it is the result of a symbol argument not constant folding. anymore\n(namely the uplo for Symmetric)."}]}]}],"thread_ts":"1617038954.075200","reply_count":2,"reply_users_count":1,"latest_reply":"1617039879.075600","reply_users":["U6A936746"],"is_locked":false,"subscribed":false},{"client_msg_id":"885e5083-e856-4d63-8c8f-d73470f6ee7e","type":"message","text":"<https://blog.llvm.org/posts/2021-03-26-the-new-pass-manager/>","user":"U67BJLYCS","ts":"1617042076.077000","team":"T68168MUP","attachments":[{"title":"The New Pass Manager","title_link":"https://blog.llvm.org/posts/2021-03-26-the-new-pass-manager/","text":"LLVM’s New Pass Manager What is a pass manager? A pass manager schedules transformation passes and analyses to be run on IR in a specific order. Passes can run on an entire module, a single function, or something more abstract such as a strongly connected component (SCC) in a call graph or a loop inside of a function.","fallback":"The New Pass Manager","ts":1616716800,"from_url":"https://blog.llvm.org/posts/2021-03-26-the-new-pass-manager/","service_name":"blog.llvm.org","id":1,"original_url":"https://blog.llvm.org/posts/2021-03-26-the-new-pass-manager/"}],"blocks":[{"type":"rich_text","block_id":"fzeT","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://blog.llvm.org/posts/2021-03-26-the-new-pass-manager/"}]}]}]}]}