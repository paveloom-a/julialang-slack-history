{"cursor": 0, "messages": [{"client_msg_id":"61d63a3c-8d33-48d2-aa9f-792679734fe1","type":"message","text":"would it be possible for Julia to not recompile methods if the new definition is textually identical to a previous definition?","user":"U0179G7FG4F","ts":"1607974417.144400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wbPy8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"would it be possible for Julia to not recompile methods if the new definition is textually identical to a previous definition?"}]}]}]},{"client_msg_id":"5a3c9fe5-5dc5-48f0-ad33-c4f3aa8d9891","type":"message","text":"yes","user":"U67BXBF99","ts":"1607974570.144600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pF2O","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes"}]}]}]},{"client_msg_id":"310e5328-3919-4f17-a37b-c1f7b53a4131","type":"message","text":"any idea how hard it would be? I thought of this as a result of conversation here <https://discourse.julialang.org/t/in-place-allocations-in-differentialequations/51813/8>","user":"U0179G7FG4F","ts":"1607974647.145400","team":"T68168MUP","attachments":[{"service_name":"JuliaLang","title":"In-place allocations in DifferentialEquations","title_link":"https://discourse.julialang.org/t/in-place-allocations-in-differentialequations/51813/8","text":"Yeah. The problem is that ODEProblem is specified on the definition of odedef!. Also, in general, it’s really hard to determine whether 2 functions are the same. That said, there might be low hanging fruit where for two textually identical functions, Julia might be able to be smarter in theory.","fallback":"JuliaLang: In-place allocations in DifferentialEquations","thumb_url":"https://aws1.discourse-cdn.com/business5/uploads/julialang/original/2X/1/12829a7ba92b924d4ce81099cbf99785bee9b405.png","ts":1607972961,"from_url":"https://discourse.julialang.org/t/in-place-allocations-in-differentialequations/51813/8","thumb_width":408,"thumb_height":263,"service_icon":"https://aws1.discourse-cdn.com/business5/uploads/julialang/optimized/2X/6/6ca888e296f59ca2a599807f7d5edd489e3d1829_2_180x180.png","id":1,"original_url":"https://discourse.julialang.org/t/in-place-allocations-in-differentialequations/51813/8"}],"blocks":[{"type":"rich_text","block_id":"Tck","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"any idea how hard it would be? I thought of this as a result of conversation here "},{"type":"link","url":"https://discourse.julialang.org/t/in-place-allocations-in-differentialequations/51813/8"}]}]}]},{"client_msg_id":"0964c84a-a7d3-45e7-9e55-bd88f1e309af","type":"message","text":"One problem is that right now we don't save the raw text. We do save the lowered code, so the first step would be to write a comparator that checks for equality even with different gensyms. Not sure if that already exists.","user":"UC8821DPY","ts":"1608026430.152000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q8oj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"One problem is that right now we don't save the raw text. We do save the lowered code, so the first step would be to write a comparator that checks for equality even with different gensyms. Not sure if that already exists."}]}]}]},{"client_msg_id":"06e3349e-f089-4b85-8d20-f6face0f0f75","type":"message","text":"is `Base.Semaphore` thread-safe?","user":"U66GD0880","ts":"1608092471.154700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EYNlO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is "},{"type":"text","text":"Base.Semaphore","style":{"code":true}},{"type":"text","text":" thread-safe?"}]}]}]},{"client_msg_id":"82156022-d943-46bc-8568-19beeea5bd80","type":"message","text":"eys","user":"U67BXBF99","ts":"1608093222.154900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iRcGK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"eys"}]}]}],"thread_ts":"1608093222.154900","reply_count":2,"reply_users_count":2,"latest_reply":"1608131544.157000","reply_users":["U674T3KB3","U6795JH6H"],"subscribed":false,"reactions":[{"name":"eyes","users":["U681ELA87","U680THK2S","U6BNE7LTZ","UDB26738Q","U6A936746","U6795JH6H","U679VPJ8L"],"count":7},{"name":"horse_racing","users":["U6795JH6H"],"count":1},{"name":"racehorse","users":["U6795JH6H"],"count":1}]},{"client_msg_id":"992e6cfb-ce50-42a4-a829-d2a74c038b5c","type":"message","text":"Though you might want Channel(<#C6SMTHQ3T|multithreading>) for future question threads","user":"U67BXBF99","ts":"1608133835.158400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"T7VAH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Though you might want Channel("},{"type":"channel","channel_id":"C6SMTHQ3T"},{"type":"text","text":") for future question threads"}]}]}],"reactions":[{"name":"+1","users":["U66GD0880"],"count":1}]},{"client_msg_id":"22e1ea7c-2994-48a9-947a-b38b08636b61","type":"message","text":"`jl_init` is broken on master and presumably 1.6 as well, probably because when it tries to `dladdr` itself it gets `libjulia-internal.so` rather than `libjulia.so` and the former is not in the same directory as the latter in the nightly binaries (it is in the build tree though, which is why the embedding tests pass). I'm willing to help to fix this but I really don't know which assumptions are valid to make about the directory layout of a Julia installation. Can someone shed light on this (or point to documentation if it's documented)?","user":"UBVE598BC","ts":"1608156589.163500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+XcY7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"jl_init","style":{"code":true}},{"type":"text","text":" is broken on master and presumably 1.6 as well, probably because when it tries to "},{"type":"text","text":"dladdr","style":{"code":true}},{"type":"text","text":" itself it gets "},{"type":"text","text":"libjulia-internal.so","style":{"code":true}},{"type":"text","text":" rather than "},{"type":"text","text":"libjulia.so","style":{"code":true}},{"type":"text","text":" and the former is not in the same directory as the latter in the nightly binaries (it is in the build tree though, which is why the embedding tests pass). I'm willing to help to fix this but I really don't know which assumptions are valid to make about the directory layout of a Julia installation. Can someone shed light on this (or point to documentation if it's documented)?"}]}]}],"thread_ts":"1608156589.163500","reply_count":12,"reply_users_count":2,"latest_reply":"1608477790.193300","reply_users":["U66GD0880","UBVE598BC"],"subscribed":false},{"client_msg_id":"48a44ec6-d966-498b-a539-77ee7340c7db","type":"message","text":"This `range` business seems quite messy.","user":"USU9FRPEU","ts":"1608242845.164900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"u90MN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This "},{"type":"text","text":"range","style":{"code":true}},{"type":"text","text":" business seems quite messy."}]}]}]},{"client_msg_id":"8068afd8-1aee-4a42-b0ab-0ac35fab9330","type":"message","text":"Is there a way to represent the equivalent of `Core.TypeofVararg` in previous Julia versions? This does not work:\n```julia&gt; Type{Vararg}\nERROR: TypeError: in Type, in parameter, expected Type, got Vararg\nStacktrace:\n [1] top-level scope at REPL[1]:1\n```\nThe error message is also quite confusing, since:\n```julia&gt; Vararg isa Type\ntrue```","user":"UM30MT6RF","ts":"1608288600.169200","team":"T68168MUP","edited":{"user":"UM30MT6RF","ts":"1608288645.000000"},"blocks":[{"type":"rich_text","block_id":"d+piJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a way to represent the equivalent of "},{"type":"text","text":"Core.TypeofVararg","style":{"code":true}},{"type":"text","text":" in previous Julia versions? This does not work:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Type{Vararg}\nERROR: TypeError: in Type, in parameter, expected Type, got Vararg\nStacktrace:\n [1] top-level scope at REPL[1]:1\n"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"The error message is also quite confusing, since:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Vararg isa Type\ntrue"}]}]}],"reactions":[{"name":"slack","users":["UDB26738Q"],"count":1}]},{"client_msg_id":"7fe4ac39-693c-4697-bdc9-24245af5b5d9","type":"message","text":"Just for fun, this causes some fun segfaults:\n```julia&gt; TypeofVararg = deepcopy(Type{Int})\nType{Int64}\n\njulia&gt; TypeofVararg.hash = rand(Int32)\n1810880123\n\njulia&gt; TypeofVararg.parameters = Core.svec(Vararg)\nsvec(Vararg)\n\njulia&gt; TypeInternal error: encountered unexpected error in runtime:\nMethodError(f=Int64, args=(3,), world=0x0000000000000f64)\njl_method_error_bare at /buildworker/worker/package_linuxaarch64/build/src/gf.c:1798\njl_method_error at /buildworker/worker/package_linuxaarch64/build/src/gf.c:1816\njl_lookup_generic_ at /buildworker/worker/package_linuxaarch64/build/src/gf.c:2373 [inlined]\njl_apply_generic at /buildworker/worker/package_linuxaarch64/build/src/gf.c:2394\nconvert at ./number.jl:7\n```","user":"UM30MT6RF","ts":"1608289790.171400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"19Cln","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Just for fun, this causes some fun segfaults:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> TypeofVararg = deepcopy(Type{Int})\nType{Int64}\n\njulia> TypeofVararg.hash = rand(Int32)\n1810880123\n\njulia> TypeofVararg.parameters = Core.svec(Vararg)\nsvec(Vararg)\n\njulia> TypeInternal error: encountered unexpected error in runtime:\nMethodError(f=Int64, args=(3,), world=0x0000000000000f64)\njl_method_error_bare at /buildworker/worker/package_linuxaarch64/build/src/gf.c:1798\njl_method_error at /buildworker/worker/package_linuxaarch64/build/src/gf.c:1816\njl_lookup_generic_ at /buildworker/worker/package_linuxaarch64/build/src/gf.c:2373 [inlined]\njl_apply_generic at /buildworker/worker/package_linuxaarch64/build/src/gf.c:2394\nconvert at ./number.jl:7\n"}]}]}],"reactions":[{"name":"tombstone","users":["UDB26738Q"],"count":1}]},{"client_msg_id":"1ffef75e-9d95-420b-8b09-e0f611c10985","type":"message","text":"Ok, I figured it out. It's quite hacky though:\n```julia&gt; TypeofVararg = ccall(:jl_apply_type, Any, (Any, Ptr{Any}, Csize_t), Type, Any[Vararg], 1)\nType{Vararg}\n\njulia&gt; Vararg isa TypeofVararg\ntrue```","user":"UM30MT6RF","ts":"1608290781.173100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7YT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok, I figured it out. It's quite hacky though:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> TypeofVararg = ccall(:jl_apply_type, Any, (Any, Ptr{Any}, Csize_t), Type, Any[Vararg], 1)\nType{Vararg}\n\njulia> Vararg isa TypeofVararg\ntrue"}]}]}],"reactions":[{"name":"party_wizard","users":["UDB26738Q"],"count":1}]},{"client_msg_id":"3368ef5b-ec89-47a9-8870-dd97ce867982","type":"message","text":"Does anyone have a 32-bit Windows build handy to test the functions being exported from `libjulia`  against their name inside `libjulia-internal`? I think there may be an underscore prepending issue there as well, but I would like confirmation.","user":"UPTBGS6CC","ts":"1608305253.174600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p5t","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does anyone have a 32-bit Windows build handy to test the functions being exported from "},{"type":"text","text":"libjulia","style":{"code":true}},{"type":"text","text":"  against their name inside "},{"type":"text","text":"libjulia-internal","style":{"code":true}},{"type":"text","text":"? I think there may be an underscore prepending issue there as well, but I would like confirmation."}]}]}],"thread_ts":"1608305253.174600","reply_count":1,"reply_users_count":1,"latest_reply":"1608309359.174800","reply_users":["UBVE598BC"],"subscribed":false},{"client_msg_id":"8ddd4862-f71e-479f-903c-1c1140fc3cdc","type":"message","text":"any pkg devs around?","user":"U6C1MMAAJ","ts":"1608324146.175300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mRaW4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"any pkg devs around?"}]}]}]},{"client_msg_id":"cfe6f4d9-f071-4c6f-9fd8-adaae690aca6","type":"message","text":"Could some Pkg.jl devs shed some light on where exactly in the chain the `.julia` folder is created first? I believe it's from this method <https://github.com/JuliaLang/Pkg.jl/blob/master/src/Registry/Registry.jl#L162> ?","user":"U6C1MMAAJ","ts":"1608324285.176000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NAJ3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Could some Pkg.jl devs shed some light on where exactly in the chain the "},{"type":"text","text":".julia","style":{"code":true}},{"type":"text","text":" folder is created first? I believe it's from this method "},{"type":"link","url":"https://github.com/JuliaLang/Pkg.jl/blob/master/src/Registry/Registry.jl#L162"},{"type":"text","text":" ?"}]}]}],"thread_ts":"1608324285.176000","reply_count":2,"reply_users_count":2,"latest_reply":"1608324402.177300","reply_users":["U681ELA87","U6C1MMAAJ"],"subscribed":false},{"client_msg_id":"c0c900c0-4d69-4a8c-8fe2-b8d9d11af172","type":"message","text":"I have a C interop Q. If I have a `struct` generated by `Clang.jl`:\n```struct MlirOperationState\n    name::MlirStringRef\n    location::MlirLocation\n    nResults::intptr_t\n    results::Ptr{MlirType}\n    nOperands::intptr_t\n    operands::Ptr{MlirValue}\n    nRegions::intptr_t\n    regions::Ptr{MlirRegion}\n    nSuccessors::intptr_t\n    successors::Ptr{MlirBlock}\n    nAttributes::intptr_t\n    attributes::Ptr{MlirNamedAttribute}\nend```\nwhen I initialize this structure, it generates a number of null pointers - but on the C side, you call interface methods to mutate this structure in place <https://github.com/llvm/llvm-project/blob/5740f96d8eed0ac041a2aff294f3015ae289b24d/mlir/lib/CAPI/IR/IR.cpp#L177-L203>\n\nThese methods which I call through `ccall` accept a `Ptr` to this structure, perform some mutation, and then return `void` - of course, that means that on the Julia side, the instance of the structure needs to be updated with new pointers. How do people handle this in other C wrapper libraries ?","user":"UKA81L34J","ts":"1608391960.180700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4jKEg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have a C interop Q. If I have a "},{"type":"text","text":"struct","style":{"code":true}},{"type":"text","text":" generated by "},{"type":"text","text":"Clang.jl","style":{"code":true}},{"type":"text","text":":\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct MlirOperationState\n    name::MlirStringRef\n    location::MlirLocation\n    nResults::intptr_t\n    results::Ptr{MlirType}\n    nOperands::intptr_t\n    operands::Ptr{MlirValue}\n    nRegions::intptr_t\n    regions::Ptr{MlirRegion}\n    nSuccessors::intptr_t\n    successors::Ptr{MlirBlock}\n    nAttributes::intptr_t\n    attributes::Ptr{MlirNamedAttribute}\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"when I initialize this structure, it generates a number of null pointers - but on the C side, you call interface methods to mutate this structure in place "},{"type":"link","url":"https://github.com/llvm/llvm-project/blob/5740f96d8eed0ac041a2aff294f3015ae289b24d/mlir/lib/CAPI/IR/IR.cpp#L177-L203"},{"type":"text","text":"\n\nThese methods which I call through "},{"type":"text","text":"ccall","style":{"code":true}},{"type":"text","text":" accept a "},{"type":"text","text":"Ptr","style":{"code":true}},{"type":"text","text":" to this structure, perform some mutation, and then return "},{"type":"text","text":"void","style":{"code":true}},{"type":"text","text":" - of course, that means that on the Julia side, the instance of the structure needs to be updated with new pointers. How do people handle this in other C wrapper libraries ?"}]}]}]},{"client_msg_id":"AB291A60-58CB-432F-AC16-231BF9AE07DC","type":"message","text":"Either by making it directly mutable (most common), or wrapping it in a Ref (more advanced)","user":"U67BXBF99","ts":"1608395619.181800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sE5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Either by making it directly mutable (most common), or wrapping it in a Ref (more advanced)"}]}]}],"reactions":[{"name":"+1","users":["UKA81L34J"],"count":1},{"name":"heart","users":["UKA81L34J"],"count":1}]},{"client_msg_id":"39867edf-dee4-48d5-a121-c7e45727637e","type":"message","text":"Maybe this is a better place than <#C6A044SQH|helpdesk>. Is this a known issue? (I can try to make a MWE, but that'll take a bit of time)\n\n```julia&gt; @code_llvm MultiFloats.two_sum(to_vec(y[1:4]...), to_vec(y[1:4]...))\njulia: /buildworker/worker/package_linux64/build/src/disasm.cpp:292: void DILineInfoPrinter::emit_lineinfo(llvm::raw_ostream&amp;, std::vector&lt;llvm::DILineInfo&gt;&amp;): Assertion `this-&gt;inline_depth == depth2' failed.\n\nsignal (6): Aborted\nin expression starting at REPL[6]:1\ngsignal at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)\nabort at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)\nunknown function (ip: 0x7fd57eca2489)\n__assert_fail at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)\nemit_lineinfo at /buildworker/worker/package_linux64/build/src/disasm.cpp:292\nemitInstructionAnnot at /buildworker/worker/package_linux64/build/src/disasm.cpp:366\n_ZN12_GLOBAL__N_114AssemblyWriter16printInstructionERKN4llvm11InstructionE at /home/hstoppels/julia-1.5.3/bin/../lib/julia/libLLVM-9jl.so (unknown line)\n_ZN12_GLOBAL__N_114AssemblyWriter15printBasicBlockEPKN4llvm10BasicBlockE at /home/hstoppels/julia-1.5.3/bin/../lib/julia/libLLVM-9jl.so (unknown line)```","user":"U6N6VQE30","ts":"1608396891.183200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+vJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe this is a better place than "},{"type":"channel","channel_id":"C6A044SQH"},{"type":"text","text":". Is this a known issue? (I can try to make a MWE, but that'll take a bit of time)\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @code_llvm MultiFloats.two_sum(to_vec(y[1:4]...), to_vec(y[1:4]...))\njulia: /buildworker/worker/package_linux64/build/src/disasm.cpp:292: void DILineInfoPrinter::emit_lineinfo(llvm::raw_ostream&, std::vector<llvm::DILineInfo>&): Assertion `this->inline_depth == depth2' failed.\n\nsignal (6): Aborted\nin expression starting at REPL[6]:1\ngsignal at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)\nabort at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)\nunknown function (ip: 0x7fd57eca2489)\n__assert_fail at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)\nemit_lineinfo at /buildworker/worker/package_linux64/build/src/disasm.cpp:292\nemitInstructionAnnot at /buildworker/worker/package_linux64/build/src/disasm.cpp:366\n_ZN12_GLOBAL__N_114AssemblyWriter16printInstructionERKN4llvm11InstructionE at /home/hstoppels/julia-1.5.3/bin/../lib/julia/libLLVM-9jl.so (unknown line)\n_ZN12_GLOBAL__N_114AssemblyWriter15printBasicBlockEPKN4llvm10BasicBlockE at /home/hstoppels/julia-1.5.3/bin/../lib/julia/libLLVM-9jl.so (unknown line)"}]}]}]},{"client_msg_id":"cdacfc5a-f372-4b93-bf2e-26f1c06ce03c","type":"message","text":"Ok, it's reported already: <https://github.com/JuliaLang/julia/issues/38203>","user":"U6N6VQE30","ts":"1608396986.183400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x+0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok, it's reported already: "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/38203"}]}]}],"thread_ts":"1608396986.183400","reply_count":5,"reply_users_count":3,"latest_reply":"1608406633.184300","reply_users":["U0179G7FG4F","U6N6VQE30","U68A3ASP9"],"subscribed":false},{"client_msg_id":"036e439f-042a-4270-a92c-444c1fcf4a03","type":"message","text":"A kind of existential question: If a program embedding Julia has been linked to or dlopened `libjulia`, does it in any way need the `julia` binary?","user":"UBVE598BC","ts":"1608459610.192800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"20h","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"A kind of existential question: If a program embedding Julia has been linked to or dlopened "},{"type":"text","text":"libjulia","style":{"code":true}},{"type":"text","text":", does it in any way need the "},{"type":"text","text":"julia","style":{"code":true}},{"type":"text","text":" binary?"}]}]}]},{"client_msg_id":"53de3e77-18f9-483f-a1ef-9af4db4679eb","type":"message","text":"No","user":"U67BJLYCS","ts":"1608484383.193600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"o=F","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No"}]}]}]},{"client_msg_id":"f11c1214-1f58-4dac-8f01-620661f22691","type":"message","text":"Thanks. That makes it a bit unfortunate that `jl_init` spends effort locating the `bin` directory, which it basically can't, possibly just because the default system image location is known relative to the `bin` directory. Or are there more reasons for specifying the `bin` directory?","user":"UBVE598BC","ts":"1608488972.196000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"a5SJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks. That makes it a bit unfortunate that "},{"type":"text","text":"jl_init","style":{"code":true}},{"type":"text","text":" spends effort locating the "},{"type":"text","text":"bin","style":{"code":true}},{"type":"text","text":" directory, which it basically can't, possibly just because the default system image location is known relative to the "},{"type":"text","text":"bin","style":{"code":true}},{"type":"text","text":" directory. Or are there more reasons for specifying the "},{"type":"text","text":"bin","style":{"code":true}},{"type":"text","text":" directory?"}]}]}]},{"type":"message","text":"What does something like this mean?","files":[{"id":"F01GWF09EUF","created":1608490505,"timestamp":1608490505,"name":"image.png","title":"image.png","mimetype":"image/png","filetype":"png","pretty_type":"PNG","user":"UKA81L34J","editable":false,"size":347922,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01GWF09EUF/image.png","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01GWF09EUF/download/image.png","thumb_64":"https://files.slack.com/files-tmb/T68168MUP-F01GWF09EUF-2f520b864b/image_64.png","thumb_80":"https://files.slack.com/files-tmb/T68168MUP-F01GWF09EUF-2f520b864b/image_80.png","thumb_360":"https://files.slack.com/files-tmb/T68168MUP-F01GWF09EUF-2f520b864b/image_360.png","thumb_360_w":360,"thumb_360_h":157,"thumb_480":"https://files.slack.com/files-tmb/T68168MUP-F01GWF09EUF-2f520b864b/image_480.png","thumb_480_w":480,"thumb_480_h":210,"thumb_160":"https://files.slack.com/files-tmb/T68168MUP-F01GWF09EUF-2f520b864b/image_160.png","thumb_720":"https://files.slack.com/files-tmb/T68168MUP-F01GWF09EUF-2f520b864b/image_720.png","thumb_720_w":720,"thumb_720_h":315,"thumb_800":"https://files.slack.com/files-tmb/T68168MUP-F01GWF09EUF-2f520b864b/image_800.png","thumb_800_w":800,"thumb_800_h":350,"thumb_960":"https://files.slack.com/files-tmb/T68168MUP-F01GWF09EUF-2f520b864b/image_960.png","thumb_960_w":960,"thumb_960_h":420,"thumb_1024":"https://files.slack.com/files-tmb/T68168MUP-F01GWF09EUF-2f520b864b/image_1024.png","thumb_1024_w":1024,"thumb_1024_h":448,"original_w":1326,"original_h":580,"thumb_tiny":"AwAUADCr16Udun6igdKTA96AELZ6Ckyad8vbNJQAmTRuPrS02gBxOOmKTcaVqbQAu40bjSUUALk+35UZ+n5UlFAH/9k=","permalink":"https://julialang.slack.com/files/UKA81L34J/F01GWF09EUF/image.png","permalink_public":"https://slack-files.com/T68168MUP-F01GWF09EUF-c7686d7572","is_starred":false,"has_rich_preview":false}],"upload":false,"blocks":[{"type":"rich_text","block_id":"iai","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What does something like this mean?"}]}]}],"user":"UKA81L34J","display_as_bot":false,"ts":"1608490509.196500"},{"client_msg_id":"343446f1-7d4e-4c10-8f12-acd941185cde","type":"message","text":"Is this a native Julia error, or does it look like an error which is passed across the C interface back over to Julia (and the indicator `ReadOnlyMemoryError` is actually not relevant)\n\n(I am called `verify` on an in-memory structure, so I would expect errors to be reported, but I’m trying to determine if this is Julia or the ABI)","user":"UKA81L34J","ts":"1608490614.198600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aGL0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is this a native Julia error, or does it look like an error which is passed across the C interface back over to Julia (and the indicator "},{"type":"text","text":"ReadOnlyMemoryError","style":{"code":true}},{"type":"text","text":" is actually not relevant)\n\n(I am called "},{"type":"text","text":"verify","style":{"code":true}},{"type":"text","text":" on an in-memory structure, so I would expect errors to be reported, but I’m trying to determine if this is Julia or the ABI)"}]}]}]},{"client_msg_id":"b34d0ec5-7319-4533-beb7-0ad70747fc0f","type":"message","text":"You did a write to a memory page that is marked protected","user":"U67BJLYCS","ts":"1608490636.199400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HvAU5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You did a write to a memory page that is marked protected"}]}]}]},{"client_msg_id":"acea757f-3b8f-4ded-8dca-98351e7838aa","type":"message","text":"Conjecture: You had a pointer that used to be valid but is no longer","user":"U67BJLYCS","ts":"1608490734.200300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"I2G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Conjecture: You had a pointer that used to be valid but is no longer"}]}]}]},{"client_msg_id":"0de5b77c-93d1-4d46-b2e5-9cd830181f96","type":"message","text":"That reported error is from the dwarf parser","user":"U67BJLYCS","ts":"1608490763.201000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Awt5c","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That reported error is from the dwarf parser"}]}]}]},{"client_msg_id":"43715e10-94f2-485c-ba40-f586f95a7116","type":"message","text":"Which is odd, but alright","user":"U67BJLYCS","ts":"1608490773.201400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DGB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Which is odd, but alright"}]}]}]},{"client_msg_id":"49af79a1-0fdf-4ab7-80e7-b077f352305e","type":"message","text":"that sounds like a feasible conjecture","user":"UKA81L34J","ts":"1608490774.201500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/0BO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that sounds like a feasible conjecture"}]}]}]},{"client_msg_id":"55a9f37f-b85b-4585-bc8d-71782cb8d6fb","type":"message","text":"<https://github.com/aclements/libelfin> ?","user":"UKA81L34J","ts":"1608490812.201700","team":"T68168MUP","edited":{"user":"UKA81L34J","ts":"1608490819.000000"},"blocks":[{"type":"rich_text","block_id":"6ds","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/aclements/libelfin"},{"type":"text","text":" ?"}]}]}]},{"client_msg_id":"9ed504a6-08eb-4615-b117-ff5e5215562e","type":"message","text":"No the LLVM one","user":"U67BJLYCS","ts":"1608490838.202500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aYm8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No the LLVM one"}]}]}]},{"client_msg_id":"92fb49fc-10e2-4329-9167-70ea85774845","type":"message","text":"oh - right, DWARF is just the format","user":"UKA81L34J","ts":"1608490848.202800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3wT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh - right, DWARF is just the format"}]}]}]},{"client_msg_id":"7413fec9-f704-4756-a2f4-ea0635f45e18","type":"message","text":"I’ll leave you alone for a bit :slightly_smiling_face: PM me later - I hope I haven’t mucked things up too much (I don’t think so)","user":"UKA81L34J","ts":"1608490914.203700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YClm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’ll leave you alone for a bit "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":" PM me later - I hope I haven’t mucked things up too much (I don’t think so)"}]}]}]},{"client_msg_id":"b4579448-1d34-4adb-97a3-3e6855a34c9c","type":"message","text":"Haha no worries","user":"U67BJLYCS","ts":"1608490929.204000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CESY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Haha no worries"}]}]}]},{"type":"message","subtype":"channel_join","ts":"1608550658.204300","user":"U01GX4L17PW","text":"<@U01GX4L17PW> has joined the channel","inviter":"USU9FRPEU"},{"client_msg_id":"b064e3c9-86f7-4e5e-994b-24319602e0dc","type":"message","text":"<@U66GD0880> do you think it is worth splitting out the trampoline fixes in <https://github.com/JuliaLang/julia/pull/38938> into a new PR while we wait for a decision on the exporting of the `jl_n_threads` variable?","user":"UPTBGS6CC","ts":"1608566625.205300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CVh","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U66GD0880"},{"type":"text","text":" do you think it is worth splitting out the trampoline fixes in "},{"type":"link","url":"https://github.com/JuliaLang/julia/pull/38938"},{"type":"text","text":" into a new PR while we wait for a decision on the exporting of the "},{"type":"text","text":"jl_n_threads","style":{"code":true}},{"type":"text","text":" variable?"}]}]}]},{"client_msg_id":"32ba82ea-6d0a-49a5-8bd3-91f1499ea663","type":"message","text":"<@U674T3KB3> contemplating <https://github.com/JuliaLang/julia/issues/38517>, how reasonable would it be to make a new lattice element `Limited`","user":"U67BXBF99","ts":"1608868854.205800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Z7Td","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U674T3KB3"},{"type":"text","text":" contemplating "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/38517"},{"type":"text","text":", how reasonable would it be to make a new lattice element "},{"type":"text","text":"Limited","style":{"code":true}}]}]}]},{"client_msg_id":"5b76f3f2-9cb9-4102-96c3-7b81b1f631f5","type":"message","text":"which wraps any type T and widens it (slightly) to flag that it’s not suitable for cache","user":"U67BXBF99","ts":"1608868928.206600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"467t","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which wraps any type T and widens it (slightly) to flag that it’s not suitable for cache"}]}]}]},{"client_msg_id":"328695f3-7880-4e66-8603-420d1fcb599b","type":"message","text":"may be reasonable, but don't we need to track why it was limited to be able to do the analysis proposed in the issue?","user":"U674T3KB3","ts":"1608869035.208000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=jJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"may be reasonable, but don't we need to track why it was limited to be able to do the analysis proposed in the issue?"}]}]}]},{"client_msg_id":"2f99e4b8-bf25-4ba2-bead-269474a53c40","type":"message","text":"Yes, it’d be `struct Limited; typ; causes::Tuple{InferenceState...}; end`","user":"U67BXBF99","ts":"1608869109.209100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QDs8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, it’d be "},{"type":"text","text":"struct Limited; typ; causes::Tuple{InferenceState...}; end","style":{"code":true}}]}]}]},{"client_msg_id":"65c01e92-ab35-4860-93ae-7207ad7492bf","type":"message","text":"I think that's reasonable. I assume you're imagining `tmerge` would merge the causes and recurse on `typ`?","user":"U674T3KB3","ts":"1608869167.210100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g8U","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think that's reasonable. I assume you're imagining "},{"type":"text","text":"tmerge","style":{"code":true}},{"type":"text","text":" would merge the causes and recurse on "},{"type":"text","text":"typ","style":{"code":true}},{"type":"text","text":"?"}]}]}]},{"client_msg_id":"a6ad4359-0674-41cb-8c5c-69c82101c086","type":"message","text":"The abstract_call function may strip out itself from causes, and when empty, implies that it is equal with typ","user":"U67BXBF99","ts":"1608869193.210700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bKC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The abstract_call function may strip out itself from causes, and when empty, implies that it is equal with typ"}]}]}]},{"client_msg_id":"9a927ed7-ffe5-4941-b3b0-26907dd1b2e5","type":"message","text":"Yes, I think that’s a set-merge operation (in practice, causes would probably be a ~Vector~ Set{InferenceState}, for performance)","user":"U67BXBF99","ts":"1608869240.211200","team":"T68168MUP","edited":{"user":"U67BXBF99","ts":"1608869265.000000"},"blocks":[{"type":"rich_text","block_id":"trrN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, I think that’s a set-merge operation (in practice, causes would probably be a "},{"type":"text","text":"Vector","style":{"strike":true}},{"type":"text","text":" Set{InferenceState}, for performance)"}]}]}]},{"client_msg_id":"5364ec6b-b450-4661-9402-a64c0fe8cc2d","type":"message","text":"It sounds reasonable to me, but this stuff is very detail prone","user":"U674T3KB3","ts":"1608869284.212200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lOR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It sounds reasonable to me, but this stuff is very detail prone"}]}]}]},{"client_msg_id":"07c4e365-cdba-47b4-b1f1-fff285342937","type":"message","text":"yeah, that’s why I wanted to at least get a sanity check","user":"U67BXBF99","ts":"1608869300.212500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/ew0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, that’s why I wanted to at least get a sanity check"}]}]}]},{"client_msg_id":"ee8882d9-346d-4b39-8926-d0175d6956ed","type":"message","text":"Always somewhat challenging adding a new lattice element, particularly one that’s a supertype of all","user":"U67BXBF99","ts":"1608869319.213100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FOP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Always somewhat challenging adding a new lattice element, particularly one that’s a supertype of all"}]}]}]},{"client_msg_id":"328cec88-553d-41af-9dd2-c79cb5a50f12","type":"message","text":"I think it's important to have a definite nesting order","user":"U674T3KB3","ts":"1608869326.213400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KRR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think it's important to have a definite nesting order"}]}]}]},{"client_msg_id":"30a2e885-a287-48aa-943f-16e62a026d48","type":"message","text":"(even worse, it’s a supertype of Any)","user":"U67BXBF99","ts":"1608869334.213800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C2St","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(even worse, it’s a supertype of Any)"}]}]}]},{"client_msg_id":"8013718e-0494-4a74-b61d-14bdc414fec3","type":"message","text":"I.e. always `Limited -&gt; Const/Partial -&gt; Type`","user":"U674T3KB3","ts":"1608869339.214000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q=Isa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I.e. always "},{"type":"text","text":"Limited -> Const/Partial -> Type","style":{"code":true}}]}]}]},{"client_msg_id":"6d73ee8e-2596-40ac-b8c5-1eaed16ee2b9","type":"message","text":"right, those must be true","user":"U67BXBF99","ts":"1608869376.214400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pZiI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"right, those must be true"}]}]}]},{"client_msg_id":"1976c21d-3e9d-47f6-b931-7b9f8b8a1827","type":"message","text":"Is there a situation in which it's a supertype of Any?","user":"U674T3KB3","ts":"1608869378.214600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xyI=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a situation in which it's a supertype of Any?"}]}]}]},{"client_msg_id":"8c5d7fbe-c7b6-42e6-8026-e47946d6ddb8","type":"message","text":"But then there’s Conditional","user":"U67BXBF99","ts":"1608869381.214700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Lu5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But then there’s Conditional"}]}]}]},{"client_msg_id":"dda962da-24d8-460a-868a-99bd956dce58","type":"message","text":"Hmm, does Conditional go on the outside?","user":"U674T3KB3","ts":"1608869399.215400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MedU4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmm, does Conditional go on the outside?"}]}]}]},{"client_msg_id":"90f6775c-fe93-45c1-86a0-a5e318e7479a","type":"message","text":"it means potentially different things","user":"U67BXBF99","ts":"1608869404.215600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8o4K","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it means potentially different things"}]}]}]},{"client_msg_id":"d5989caf-6547-4191-b188-fe0d9b80fe76","type":"message","text":"Oh, you're saying both are valid?","user":"U674T3KB3","ts":"1608869424.216000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UrJm5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh, you're saying both are valid?"}]}]}]},{"client_msg_id":"f3087465-7901-4d47-8e53-71e2d00c40af","type":"message","text":"Conditional is weird in that the outside is Bool, the inside is a different Slot","user":"U67BXBF99","ts":"1608869434.216300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9NEI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Conditional is weird in that the outside is Bool, the inside is a different Slot"}]}]}]},{"client_msg_id":"1347d2c1-7f4c-4bcb-861d-bc9bde54b37e","type":"message","text":"So Limited(Conditional) says you have a Bool which wasn’t precisely computed","user":"U67BXBF99","ts":"1608869453.216700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"u9C0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So Limited(Conditional) says you have a Bool which wasn’t precisely computed"}]}]}]},{"client_msg_id":"396a5645-aa1f-43d9-85c6-cea4035c1866","type":"message","text":"Conditional(:a, Limited(T), Limited(S)) says you have a slot :a, which contains an imprecisely computed type","user":"U67BXBF99","ts":"1608869479.217400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ExQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Conditional(:a, Limited(T), Limited(S)) says you have a slot :a, which contains an imprecisely computed type"}]}]}]},{"client_msg_id":"bba64d9d-877e-45d2-879b-d34c8f9672ed","type":"message","text":"right","user":"U674T3KB3","ts":"1608869483.217700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"clg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"right"}]}]}]},{"client_msg_id":"64c87efa-fb46-4362-9e66-1cd5ca9ed675","type":"message","text":"Partial similarly could be `Limited(Partial(T, [Limited(a), Limited(b)]))`","user":"U67BXBF99","ts":"1608869547.218200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Bzu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Partial similarly could be "},{"type":"text","text":"Limited(Partial(T, [Limited(a), Limited(b)]))","style":{"code":true}}]}]}]},{"client_msg_id":"41d37757-4ded-43a5-a545-7688b12ac363","type":"message","text":"hmm","user":"U674T3KB3","ts":"1608869571.218500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oY2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmm"}]}]}]},{"client_msg_id":"4ae5800b-38a6-498b-97c4-0697902d9232","type":"message","text":"I guess that's fine","user":"U674T3KB3","ts":"1608869583.218700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XFx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess that's fine"}]}]}]},{"client_msg_id":"d5719ae3-7c4e-45a4-9a35-6df4849a6469","type":"message","text":"It is probably fine?","user":"U67BXBF99","ts":"1608869590.218900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LWw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It is probably fine?"}]}]}]},{"client_msg_id":"a999af50-f043-4a17-8752-26cd2facdd5c","type":"message","text":"It is not certain if Limited(Const) should happen, but that’s a separate topic","user":"U67BXBF99","ts":"1608869637.219800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Lvr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It is not certain if Limited(Const) should happen, but that’s a separate topic"}]}]}]},{"client_msg_id":"6fa1fb32-1f8f-4391-8741-d7a95d87c6e4","type":"message","text":"Another hard one though: what’s `abstract_call([F, Limited(A)])`","user":"U67BXBF99","ts":"1608869753.220700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FPGN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Another hard one though: what’s "},{"type":"text","text":"abstract_call([F, Limited(A)])","style":{"code":true}}]}]}]},{"client_msg_id":"630183fc-d268-40bb-879f-b1052519625f","type":"message","text":"Is that `Limited(abstract_call([F, A]))` ?","user":"U67BXBF99","ts":"1608869770.221100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fXQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is that "},{"type":"text","text":"Limited(abstract_call([F, A]))","style":{"code":true}},{"type":"text","text":" ?"}]}]}]},{"client_msg_id":"72326fbf-9de6-463e-b79c-17f9e973354e","type":"message","text":"I think so","user":"U674T3KB3","ts":"1608870041.221400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"S378P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think so"}]}]}]},{"client_msg_id":"d69b36f0-c87a-455c-a02f-fa1d942520f6","type":"message","text":"if `F` is identity, it's certainly true","user":"U674T3KB3","ts":"1608870052.221900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yXPL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if "},{"type":"text","text":"F","style":{"code":true}},{"type":"text","text":" is identity, it's certainly true"}]}]}]},{"client_msg_id":"619a3d65-fcfa-40de-ae9f-1dd88f71728d","type":"message","text":"Aside <https://github.com/JuliaLang/julia/pull/38998#pullrequestreview-558752588> LGTM, but think you have a minor typo that would cause the test to error?","user":"U67BXBF99","ts":"1608870839.222600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KxEZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Aside "},{"type":"link","url":"https://github.com/JuliaLang/julia/pull/38998#pullrequestreview-558752588"},{"type":"text","text":" LGTM, but think you have a minor typo that would cause the test to error?"}]}]}],"thread_ts":"1608870839.222600","reply_count":1,"reply_users_count":1,"latest_reply":"1608870906.223600","reply_users":["U674T3KB3"],"subscribed":false},{"client_msg_id":"bc96392e-71ba-4ecc-8a3a-26a88a58d637","type":"message","text":"It’s conservative, yeah","user":"U67BXBF99","ts":"1608870855.222900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q1ev","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It’s conservative, yeah"}]}]}]},{"client_msg_id":"296eb80f-7a47-43d6-aa8b-7b562da80b86","type":"message","text":"But also makes me wonder if it’d be better to continue handling it as extra out-of-band information","user":"U67BXBF99","ts":"1608870905.223500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"twAvl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But also makes me wonder if it’d be better to continue handling it as extra out-of-band information"}]}]}],"thread_ts":"1608870905.223500","reply_count":12,"reply_users_count":2,"latest_reply":"1608872451.226900","reply_users":["U674T3KB3","U67BXBF99"],"subscribed":false},{"client_msg_id":"4d83729e-510a-4628-8215-a8c2c8e818cc","type":"message","text":"Also random: I think “flisp repl mode” would be more entertaining as simply an s-expr parser for Julia","user":"U67BXBF99","ts":"1608870987.224400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kjH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also random: I think “flisp repl mode” would be more entertaining as simply an s-expr parser for Julia"}]}]}]},{"client_msg_id":"9442ee14-787d-4703-b83f-ff0669d615f3","type":"message","text":"we have that: <https://github.com/swadey/LispSyntax.jl>","user":"U674T3KB3","ts":"1608871036.224600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"taP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we have that: "},{"type":"link","url":"https://github.com/swadey/LispSyntax.jl"}]}]}]},{"client_msg_id":"6fa61b74-6213-49be-bf22-0caafb5e5398","type":"message","text":"Is there a simple way to make these compile timer objects thread-local? I’m trying to avoid clashing in compilation timing when `@time` is run on separate threads\n<https://github.com/JuliaLang/julia/blob/5d2fcdb551b530d018e31e63606e0bb1fa33d292/src/gf.c#L3150-L3152>","user":"U8MPCDJAY","ts":"1609083331.228600","team":"T68168MUP","edited":{"user":"U8MPCDJAY","ts":"1609083419.000000"},"blocks":[{"type":"rich_text","block_id":"1U+pG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a simple way to make these compile timer objects thread-local? I’m trying to avoid clashing in compilation timing when "},{"type":"text","text":"@time","style":{"code":true}},{"type":"text","text":" is run on separate threads\n"},{"type":"link","url":"https://github.com/JuliaLang/julia/blob/5d2fcdb551b530d018e31e63606e0bb1fa33d292/src/gf.c#L3150-L3152"}]}]}]},{"client_msg_id":"88989886-0416-430e-b880-9ea57dd06dfb","type":"message","text":"I thought about making them arrays of length `nthreads` which would require each timer point to know which thread it’s on. Would that be the way to go?","user":"U8MPCDJAY","ts":"1609083389.229500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qdW/N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I thought about making them arrays of length "},{"type":"text","text":"nthreads","style":{"code":true}},{"type":"text","text":" which would require each timer point to know which thread it’s on. Would that be the way to go?"}]}]}]},{"client_msg_id":"63ba3494-2bd3-4922-9964-4bf9d439ab27","type":"message","text":"I feel like this has been asked before, but I couldn't find it anymore: Is there anything more general we can do about gotchas like <https://github.com/JuliaLang/julia/pull/39019|https://github.com/JuliaLang/julia/pull/39019> when putting types in structs? Making `f(::T) where {T} = T; f(Int)` return `Type{Int}` instead of `DataType` would naively sound more intuitive to me, but I vaguely remember someone once explaining why this would be a bad idea.","user":"UM30MT6RF","ts":"1609243348.236900","team":"T68168MUP","edited":{"user":"UM30MT6RF","ts":"1609243409.000000"},"blocks":[{"type":"rich_text","block_id":"nNerY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I feel like this has been asked before, but I couldn't find it anymore: Is there anything more general we can do about gotchas like "},{"type":"link","url":"https://github.com/JuliaLang/julia/pull/39019","text":"https://github.com/JuliaLang/julia/pull/39019"},{"type":"text","text":" when putting types in structs? Making "},{"type":"text","text":"f(::T) where {T} = T; f(Int) ","style":{"code":true}},{"type":"text","text":"return "},{"type":"text","text":"Type{Int} ","style":{"code":true}},{"type":"text","text":"instead of "},{"type":"text","text":"DataType","style":{"code":true}},{"type":"text","text":" would naively sound more intuitive to me, but I vaguely remember someone once explaining why this would be a bad idea."}]}]}]},{"client_msg_id":"d66f0254-0643-41a2-b49d-93563fb65e32","type":"message","text":"Also a problem in closures where its harder to see the problem, and you cant define those constructors... hit this in Colors.jl recently","user":"URN898S15","ts":"1609244691.240000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9ov","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also a problem in closures where its harder to see the problem, and you cant define those constructors... hit this in Colors.jl recently"}]}]}]},{"client_msg_id":"4ccfd9ba-206a-4fca-943d-75103fcb0c2c","type":"message","text":"Can anyone tell me what is meant by “module handle” in the below LLVM C API?\n```/**\n * Add module to be lazily compiled one function at a time.\n */\nLLVMErrorRef LLVMOrcAddLazilyCompiledIR(LLVMOrcJITStackRef JITStack,\n                                        LLVMOrcModuleHandle *RetHandle, &lt;-------\n                                        LLVMModuleRef Mod,\n                                        LLVMOrcSymbolResolverFn SymbolResolver,\n                                        void *SymbolResolverCtx);```\n","user":"UKA81L34J","ts":"1609265982.240800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"a/eI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can anyone tell me what is meant by “module handle” in the below LLVM C API?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"/**\n * Add module to be lazily compiled one function at a time.\n */\nLLVMErrorRef LLVMOrcAddLazilyCompiledIR(LLVMOrcJITStackRef JITStack,\n                                        LLVMOrcModuleHandle *RetHandle, <-------\n                                        LLVMModuleRef Mod,\n                                        LLVMOrcSymbolResolverFn SymbolResolver,\n                                        void *SymbolResolverCtx);"}]},{"type":"rich_text_section","elements":[]}]}]},{"client_msg_id":"03e9bd6a-6b8a-4a65-920b-372e7f210534","type":"message","text":"(I have a `LLVMModuleRef` in hand)","user":"UKA81L34J","ts":"1609266014.241300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0sX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(I have a "},{"type":"text","text":"LLVMModuleRef","style":{"code":true}},{"type":"text","text":" in hand)"}]}]}]},{"client_msg_id":"6ce33230-8ef0-4c89-8ca9-ee1ccbd80eb0","type":"message","text":"It's a opaque integer iirc","user":"U67BJLYCS","ts":"1609267647.241800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Xs8hs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's a opaque integer iirc"}]}]}]},{"client_msg_id":"aab2902e-f441-4913-847d-bde50133d9ae","type":"message","text":"Are you using LLVM.jl?","user":"U67BJLYCS","ts":"1609267655.242100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"H7Ix","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Are you using LLVM.jl?"}]}]}]},{"client_msg_id":"ec839ffe-356c-4d6e-ad40-3ba5c62e4bcf","type":"message","text":"Most of that is wrapped","user":"U67BJLYCS","ts":"1609267662.242400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7kF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Most of that is wrapped"}]}]}]},{"client_msg_id":"6a457ae0-a750-4e06-95b4-c2378a4cfaac","type":"message","text":"no, I should study LLVM.jl tho - good point","user":"UKA81L34J","ts":"1609268527.242700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JBX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no, I should study LLVM.jl tho - good point"}]}]}]},{"client_msg_id":"35881364-05c6-4ab3-a5a7-1e891041aabd","type":"message","text":"this is the raw C API, outside of Julia land atm - just curious if someone could easily answer :slightly_smiling_face:","user":"UKA81L34J","ts":"1609268566.243300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZuwLP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this is the raw C API, outside of Julia land atm - just curious if someone could easily answer "},{"type":"emoji","name":"slightly_smiling_face"}]}]}]},{"client_msg_id":"39d76f1a-33d8-4519-aa1a-5fea8f725e71","type":"message","text":"Haha, yeah check the Orc api wrappings in LLVM.jl the docs in the header file are decent as well","user":"U67BJLYCS","ts":"1609268745.244400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j++B","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Haha, yeah check the Orc api wrappings in LLVM.jl the docs in the header file are decent as well"}]}]}]},{"client_msg_id":"e110c5b6-770e-4753-b4fa-a750c2a6c734","type":"message","text":"<@U67BJLYCS> do you know how compiled IR can be called in `LLVM.jl` ?\nE.g. (on the C side - with slightly deprecated APIs)\n```LLVMOrcAddLazilyCompiledIR(orc_ref, module, orc_sym_resolver, NULL);\nint (*main_fn)(void) = LLVMOrcGetSymbolAddress(orc_ref, \"main\");\nint result = (*main_fn)();```\n","user":"UKA81L34J","ts":"1609269117.245700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZLV","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U67BJLYCS"},{"type":"text","text":" do you know how compiled IR can be called in "},{"type":"text","text":"LLVM.jl","style":{"code":true}},{"type":"text","text":" ?\nE.g. (on the C side - with slightly deprecated APIs)\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"LLVMOrcAddLazilyCompiledIR(orc_ref, module, orc_sym_resolver, NULL);\nint (*main_fn)(void) = LLVMOrcGetSymbolAddress(orc_ref, \"main\");\nint result = (*main_fn)();"}]},{"type":"rich_text_section","elements":[]}]}]},{"client_msg_id":"0120c614-a72e-4c3c-9597-e495c41874e4","type":"message","text":"nvm, found usage in examples. At this point I should just expect that someone’s done all this before.","user":"UKA81L34J","ts":"1609269316.246200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Y=odd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"nvm, found usage in examples. At this point I should just expect that someone’s done all this before."}]}]}],"thread_ts":"1609269316.246200","reply_count":1,"reply_users_count":1,"latest_reply":"1609269610.246400","reply_users":["U67BJLYCS"],"subscribed":false,"reactions":[{"name":"stuck_out_tongue","users":["U67BJLYCS"],"count":1}]},{"client_msg_id":"301aa8f5-ac48-411a-b1bc-642d8de2754f","type":"message","text":"`invoke_api` is supposed to return `2` only when return type is `Const` ?\nI expected `invoke_api` to return `2`  when it caches `PartialStruct` return type because we flag `const_flags = 0x2` for `PartialStruct` as well (<https://github.com/JuliaLang/julia/blob/master/base/compiler/typeinfer.jl#L295-L303>), but isn’t it supposed to ?\n(Well, I’m honestly not sure how those `const_flags` are used then)\n```struct Foo\n    c::Int\n    uc::Int\nend\nf(c) = Foo(c, 0) # PartialStruct\n\ninterp = Core.Compiler.NativeInterpreter()\nt = (Int,)\nmeth = which(f, t)\ntt = Tuple{typeof(f), t...}\nprecompile(tt)\n(ti, env) = ccall(:jl_type_intersection_with_env, Ref{Core.SimpleVector}, (Any, Any), tt, meth.sig)\nlinfo = ccall(:jl_specializations_get_linfo, Ref{Core.MethodInstance}, (Any, Any, Any), meth, tt, env)\nci = Core.Compiler.getindex(Core.Compiler.code_cache(interp), linfo)\nCore.Compiler.invoke_api(ci) # =&gt; -1```","user":"UH1BLK14H","ts":"1609312024.251400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mmQxM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"invoke_api","style":{"code":true}},{"type":"text","text":" is supposed to return "},{"type":"text","text":"2","style":{"code":true}},{"type":"text","text":" only when return type is "},{"type":"text","text":"Const","style":{"code":true}},{"type":"text","text":" ?\nI expected "},{"type":"text","text":"invoke_api","style":{"code":true}},{"type":"text","text":" to return "},{"type":"text","text":"2","style":{"code":true}},{"type":"text","text":"  when it caches "},{"type":"text","text":"PartialStruct","style":{"code":true}},{"type":"text","text":" return type because we flag "},{"type":"text","text":"const_flags = 0x2","style":{"code":true}},{"type":"text","text":" for "},{"type":"text","text":"PartialStruct","style":{"code":true}},{"type":"text","text":" as well ("},{"type":"link","url":"https://github.com/JuliaLang/julia/blob/master/base/compiler/typeinfer.jl#L295-L303"},{"type":"text","text":"), but isn’t it supposed to ?\n(Well, I’m honestly not sure how those "},{"type":"text","text":"const_flags","style":{"code":true}},{"type":"text","text":" are used then)\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct Foo\n    c::Int\n    uc::Int\nend\nf(c) = Foo(c, 0) # PartialStruct\n\ninterp = Core.Compiler.NativeInterpreter()\nt = (Int,)\nmeth = which(f, t)\ntt = Tuple{typeof(f), t...}\nprecompile(tt)\n(ti, env) = ccall(:jl_type_intersection_with_env, Ref{Core.SimpleVector}, (Any, Any), tt, meth.sig)\nlinfo = ccall(:jl_specializations_get_linfo, Ref{Core.MethodInstance}, (Any, Any, Any), meth, tt, env)\nci = Core.Compiler.getindex(Core.Compiler.code_cache(interp), linfo)\nCore.Compiler.invoke_api(ci) # => -1"}]}]}]},{"client_msg_id":"a637bbed-4934-4b3a-8f6c-7844484ce1ae","type":"message","text":"If I'm doing a `git bisect`, is there a way to skip the `generate_precompile.jl` stage of building?","user":"UC8821DPY","ts":"1609321854.252500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"E5x","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If I'm doing a "},{"type":"text","text":"git bisect","style":{"code":true}},{"type":"text","text":", is there a way to skip the "},{"type":"text","text":"generate_precompile.jl","style":{"code":true}},{"type":"text","text":" stage of building?"}]}]}],"thread_ts":"1609321854.252500","reply_count":3,"reply_users_count":2,"latest_reply":"1609325891.253100","reply_users":["UDB26738Q","UC8821DPY"],"subscribed":false},{"client_msg_id":"b624eb14-40ec-4f71-a03b-a3f3d1a8abeb","type":"message","text":"Anyone know what\nSHOWN_SET  key is for  in e.g. <https://github.com/JuliaLang/julia/blob/master/base/show.jl#L83> ?","user":"U6C1MMAAJ","ts":"1609366287.253900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ou3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Anyone know what\nSHOWN_SET  key is for  in e.g. "},{"type":"link","url":"https://github.com/JuliaLang/julia/blob/master/base/show.jl#L83"},{"type":"text","text":" ?"}]}]}]},{"client_msg_id":"7bff1852-4ac8-4e89-b6a8-0b585a151763","type":"message","text":"<https://github.com/JuliaLang/julia/blob/master/base/show.jl#L353-L359>","user":"U674T3KB3","ts":"1609366856.254100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XKOb","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/blob/master/base/show.jl#L353-L359"}]}]}]}]}