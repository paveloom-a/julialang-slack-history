{"cursor": 2, "messages": [{"client_msg_id":"ddcd03a8-218f-4844-93b0-f482b6553d4c","type":"message","text":"alright, I included it on the wishlist. We'll see what they come back to me with","user":"U674T3KB3","ts":"1613419671.048700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TNV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"alright, I included it on the wishlist. We'll see what they come back to me with"}]}]}],"reactions":[{"name":"pray","users":["U8MPCDJAY"],"count":1},{"name":"crossed_fingers","users":["U8MPCDJAY"],"count":1}]},{"client_msg_id":"3939ea64-6780-428e-a841-882936fbe0bc","type":"message","text":"Word from apple is that `open` does a bunch of security checks, so lower performance over Linux is known, but the filesystem team would be interested in seeing realworld benchmarks where it makes a difference to see if they can tweak things","user":"U674T3KB3","ts":"1613426670.049900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tPk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Word from apple is that "},{"type":"text","text":"open","style":{"code":true}},{"type":"text","text":" does a bunch of security checks, so lower performance over Linux is known, but the filesystem team would be interested in seeing realworld benchmarks where it makes a difference to see if they can tweak things"}]}]}]},{"client_msg_id":"c4e45a5c-7ddd-4f5f-a68c-fac970e04eb2","type":"message","text":"How about something like this? The code loading example might be too confounded? `cp` should be pretty raw though? General has `25,367 items` according to MacOS. Both on a fresh nightly\n\nMacOS:\n```julia&gt; @time using DifferentialEquations\n  7.668312 seconds (17.04 M allocations: 1.330 GiB, 3.54% gc time)\n\njulia&gt; @time cp(\"/Users/ian/.julia/registries/General\", mktempdir(), force=true);\n  6.240997 seconds (288.80 k allocations: 34.154 MiB, 1.11% gc time)```\nUbuntu VM in MacOS:\n```julia&gt; @time using DifferentialEquations\n  6.144343 seconds (15.64 M allocations: 1.233 GiB, 9.73% gc time, 0.07% compilation time)\n\njulia&gt; @time cp(\"/home/parallels/.julia/registries/General\", mktempdir(), force=true);\n  2.425770 seconds (288.64 k allocations: 33.191 MiB, 1.17% gc time)```","user":"U8MPCDJAY","ts":"1613428029.051600","team":"T68168MUP","edited":{"user":"U8MPCDJAY","ts":"1613428154.000000"},"blocks":[{"type":"rich_text","block_id":"rThqe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How about something like this? The code loading example might be too confounded? "},{"type":"text","text":"cp","style":{"code":true}},{"type":"text","text":" should be pretty raw though? General has "},{"type":"text","text":"25,367 items","style":{"code":true}},{"type":"text","text":" according to MacOS. Both on a fresh nightly\n\nMacOS:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @time using DifferentialEquations\n  7.668312 seconds (17.04 M allocations: 1.330 GiB, 3.54% gc time)\n\njulia> @time cp(\"/Users/ian/.julia/registries/General\", mktempdir(), force=true);\n  6.240997 seconds (288.80 k allocations: 34.154 MiB, 1.11% gc time)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Ubuntu VM in MacOS:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @time using DifferentialEquations\n  6.144343 seconds (15.64 M allocations: 1.233 GiB, 9.73% gc time, 0.07% compilation time)\n\njulia> @time cp(\"/home/parallels/.julia/registries/General\", mktempdir(), force=true);\n  2.425770 seconds (288.64 k allocations: 33.191 MiB, 1.17% gc time)"}]}]}]},{"client_msg_id":"cffddb58-31a3-4329-ba9c-48be49dc31fe","type":"message","text":"<@U674T3KB3> You probably know alraedy, but If you have apple's ears, it might be interesting to raise a few issues about Metal that might make it easier to use it as a backend for GPUCompiler.","user":"UAJH2818E","ts":"1613430707.054000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/OP","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U674T3KB3"},{"type":"text","text":" You probably know alraedy, but If you have apple's ears, it might be interesting to raise a few issues about Metal that might make it easier to use it as a backend for GPUCompiler."}]}]}],"thread_ts":"1613430707.054000","reply_count":3,"reply_users_count":2,"latest_reply":"1613430856.055500","reply_users":["UDB26738Q","UAJH2818E"],"subscribed":false},{"client_msg_id":"23e2e9b9-9fb7-4c7d-be37-17e59d9594ab","type":"message","text":"Send me a list, I'll forward it","user":"U674T3KB3","ts":"1613430729.054200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ftq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Send me a list, I'll forward it"}]}]}]},{"client_msg_id":"4d906805-0414-469d-b7b6-3feaf5ed1739","type":"message","text":"I'll try to cobble together my notes from last year, then","user":"UAJH2818E","ts":"1613430908.056400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/hSwN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'll try to cobble together my notes from last year, then"}]}]}]},{"client_msg_id":"bc7d34de-240b-4f2c-a9e9-1ba6f89b61b3","type":"message","text":"<https://reviews.llvm.org/rG4b661b4059b0>","user":"U67BXBF99","ts":"1613434363.060400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Mh0A","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://reviews.llvm.org/rG4b661b4059b0"}]}]}],"reactions":[{"name":"heart","users":["U6A0PD8CR"],"count":1}]},{"client_msg_id":"b689a523-f510-4017-949a-479ed63c5b2d","type":"message","text":"<@U679T6QF7> <@U8MPCDJAY> I've looked into the unwind warnings in that PR, and written up a summary: <https://github.com/JuliaLang/julia/pull/39127>. The conclusion is, just turn off the warnings and go forward with that PR. Let's get the M1 support out the door. I think this is basically the last big missing item.","user":"U674T3KB3","ts":"1613435651.061500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IJQAC","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U679T6QF7"},{"type":"text","text":" "},{"type":"user","user_id":"U8MPCDJAY"},{"type":"text","text":" I've looked into the unwind warnings in that PR, and written up a summary: "},{"type":"link","url":"https://github.com/JuliaLang/julia/pull/39127"},{"type":"text","text":". The conclusion is, just turn off the warnings and go forward with that PR. Let's get the M1 support out the door. I think this is basically the last big missing item."}]}]}],"reactions":[{"name":"+1","users":["U8MPCDJAY"],"count":1}]},{"client_msg_id":"62dd0315-801e-45b0-897a-8547ea9e7c92","type":"message","text":"I'll let y'all take it from here, but let me know if you run into issues","user":"U674T3KB3","ts":"1613435892.062000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dVT5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'll let y'all take it from here, but let me know if you run into issues"}]}]}]},{"client_msg_id":"2ffeb9dc-b8f0-49c0-ac3c-8189709c06ed","type":"message","text":"&gt;  I’ve got native TLS working on MachO by implementing dyld’s TLS support APIs in the Orc runtime. Hopefully we can do something similar for ELF eventually\nFrom LHames","user":"U67BJLYCS","ts":"1613499897.063200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2XZ","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":" I’ve got native TLS working on MachO by implementing dyld’s TLS support APIs in the Orc runtime. Hopefully we can do something similar for ELF eventually"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nFrom LHames"}]}]}]},{"client_msg_id":"18d0f5cc-4e64-422c-ab6b-2a091af596e3","type":"message","text":"I had a patch for ELF TLS support a while ago","user":"U674T3KB3","ts":"1613500099.063700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"08PKW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I had a patch for ELF TLS support a while ago"}]}]}],"reactions":[{"name":"elf","users":["UDB26738Q","U680THK2S"],"count":2}]},{"client_msg_id":"265a28a7-ff52-41d6-99ad-5daf1e5c224b","type":"message","text":"It was obsoleted by us just doing our own thing","user":"U674T3KB3","ts":"1613500115.064000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ei4XU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It was obsoleted by us just doing our own thing"}]}]}]},{"client_msg_id":"3e8e80e3-8519-46e0-addc-e90301db35cb","type":"message","text":"the only thing I ever needed it for was msan","user":"U674T3KB3","ts":"1613500139.064500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"df7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the only thing I ever needed it for was msan"}]}]}]},{"client_msg_id":"33f0e920-cd64-4d23-89ba-3197eaad3c4e","type":"message","text":"<@U674T3KB3> are the libunwind fixes through?","user":"U67BJLYCS","ts":"1613528765.067300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j6hi","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U674T3KB3"},{"type":"text","text":" are the libunwind fixes through?"}]}]}]},{"client_msg_id":"e0e2ff52-08b0-46d4-a174-94c640934db8","type":"message","text":"I might bottleneck Yggdrasil","user":"U67BJLYCS","ts":"1613528774.067700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rlmC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I might bottleneck Yggdrasil"}]}]}],"thread_ts":"1613528774.067700","reply_count":10,"reply_users_count":2,"latest_reply":"1613529849.070600","reply_users":["UDB26738Q","U67BJLYCS"],"subscribed":false},{"client_msg_id":"1d828f58-20ac-4fb7-9721-6f6a120e7fca","type":"message","text":"no, let me merge the Yggdrasil PR and verify that things work on CI","user":"U674T3KB3","ts":"1613528792.068300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9gAM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no, let me merge the Yggdrasil PR and verify that things work on CI"}]}]}]},{"client_msg_id":"99241d3b-9294-4a1c-8d0c-a181a57788da","type":"message","text":"need to add yet another patch for PPC and half precision support","user":"U67BJLYCS","ts":"1613528793.068400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bye0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"need to add yet another patch for PPC and half precision support"}]}]}]},{"client_msg_id":"532dbc87-1b64-4b99-b9b3-dbd91ce78138","type":"message","text":"+1","user":"U67BJLYCS","ts":"1613528798.068600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"b9M","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"+1"}]}]}]},{"client_msg_id":"be976a70-e9d3-4ea9-9ae1-297aca0746f8","type":"message","text":"<https://github.com/JuliaLang/julia/pull/39694>","user":"U674T3KB3","ts":"1613531535.070900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"z/HxG","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/pull/39694"}]}]}]},{"client_msg_id":"a16828c7-72e0-4edb-8286-5cdf63cf910f","type":"message","text":"Learning material questions:\nIs there any spec/documentation for\n• `CodeInfo`\n• `@code_lowered`\n• `@code_typed`\n• `IRTools's AST ?` ","user":"U01K2JB9GPJ","ts":"1613578724.071700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vwvIQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Learning material questions:\nIs there any spec/documentation for\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"CodeInfo","style":{"code":true}}]},{"type":"rich_text_section","elements":[{"type":"text","text":"@code_lowered","style":{"code":true}}]},{"type":"rich_text_section","elements":[{"type":"text","text":"@code_typed","style":{"code":true}}]},{"type":"rich_text_section","elements":[{"type":"text","text":"IRTools's AST ? ","style":{"code":true}}]}],"style":"bullet","indent":0}]}]},{"client_msg_id":"c656f7ad-2cff-4119-9208-605c34090a55","type":"message","text":"<@U674T3KB3> on Apple Silicon with LLVM libunwind I'm seeing this behaviour:\n```julia&gt; stacktrace()\nBase.StackTraces.StackFrame[]\n\njulia&gt; stacktrace(backtrace())\n13-element Vector{Base.StackTraces.StackFrame}:\n top-level scope at REPL[3]:1\n eval at boot.jl:369 [inlined]\n eval_user_input(ast::Any, backend::REPL.REPLBackend) at REPL.jl:139\n repl_backend_loop(backend::REPL.REPLBackend) at REPL.jl:200\n start_repl_backend(backend::REPL.REPLBackend, consumer::Any) at REPL.jl:185\n run_repl(repl::REPL.AbstractREPL, consumer::Any; backend_on_current_task::Bool) at REPL.jl:317\n run_repl(repl::REPL.AbstractREPL, consumer::Any) at REPL.jl:305\n (::Base.var\"#913#915\"{Bool, Bool, Bool})(REPL::Module) at client.jl:394\n #invokelatest#2 at essentials.jl:710 [inlined]\n invokelatest at essentials.jl:708 [inlined]\n run_main_repl(interactive::Bool, quiet::Bool, banner::Bool, history_file::Bool, color_set::Bool) at client.jl:379\n exec_options(opts::Base.JLOptions) at client.jl:309\n _start() at client.jl:492```","user":"U679T6QF7","ts":"1613600869.073000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LRw","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U674T3KB3"},{"type":"text","text":" on Apple Silicon with LLVM libunwind I'm seeing this behaviour:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> stacktrace()\nBase.StackTraces.StackFrame[]\n\njulia> stacktrace(backtrace())\n13-element Vector{Base.StackTraces.StackFrame}:\n top-level scope at REPL[3]:1\n eval at boot.jl:369 [inlined]\n eval_user_input(ast::Any, backend::REPL.REPLBackend) at REPL.jl:139\n repl_backend_loop(backend::REPL.REPLBackend) at REPL.jl:200\n start_repl_backend(backend::REPL.REPLBackend, consumer::Any) at REPL.jl:185\n run_repl(repl::REPL.AbstractREPL, consumer::Any; backend_on_current_task::Bool) at REPL.jl:317\n run_repl(repl::REPL.AbstractREPL, consumer::Any) at REPL.jl:305\n (::Base.var\"#913#915\"{Bool, Bool, Bool})(REPL::Module) at client.jl:394\n #invokelatest#2 at essentials.jl:710 [inlined]\n invokelatest at essentials.jl:708 [inlined]\n run_main_repl(interactive::Bool, quiet::Bool, banner::Bool, history_file::Bool, color_set::Bool) at client.jl:379\n exec_options(opts::Base.JLOptions) at client.jl:309\n _start() at client.jl:492"}]}]}]},{"client_msg_id":"14f1b29f-e833-4d96-ab6b-f76ca8816731","type":"message","text":"Seems good","user":"U674T3KB3","ts":"1613600892.073200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"54GaR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Seems good"}]}]}]},{"client_msg_id":"78aca1c7-b329-4407-b275-5d5f0ea46f51","type":"message","text":"What about the first line?","user":"U679T6QF7","ts":"1613600905.073500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hRO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What about the first line?"}]}]}]},{"client_msg_id":"a867e0f9-52e7-4e71-b161-bc1fba006cb0","type":"message","text":"ah, hmm","user":"U674T3KB3","ts":"1613600965.074100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1wxv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah, hmm"}]}]}]},{"client_msg_id":"67c21ab7-87ab-480e-8abb-a0c176554f07","type":"message","text":"Seems like when `backtrace` is used in a function it doesn't return any entries","user":"U679T6QF7","ts":"1613600968.074200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=JUdH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Seems like when "},{"type":"text","text":"backtrace","style":{"code":true}},{"type":"text","text":" is used in a function it doesn't return any entries"}]}]}]},{"client_msg_id":"1c0d706b-b920-4159-bcaa-d66e0708fcc6","type":"message","text":"yeah, I see","user":"U674T3KB3","ts":"1613601006.074400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VyPF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, I see"}]}]}]},{"client_msg_id":"9f2022c9-e3e5-4b4a-84ab-3db126269137","type":"message","text":"I'd guess the issue would be in the unwind info registration for dynamic frames","user":"U674T3KB3","ts":"1613601032.074800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hxHI5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'd guess the issue would be in the unwind info registration for dynamic frames"}]}]}]},{"client_msg_id":"36f91ef0-1d4e-45c3-9c37-ed9cc9eb33be","type":"message","text":"<https://github.com/JuliaLang/julia/blob/master/src/debuginfo.cpp#L1288>","user":"U674T3KB3","ts":"1613601110.075000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Pu1n1","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/blob/master/src/debuginfo.cpp#L1288"}]}]}]},{"client_msg_id":"97c08283-6784-4675-acdd-35075b8d1c60","type":"message","text":"I'm thinking LLVM libunwind may not define __register_frame when not built as part of the system library","user":"U674T3KB3","ts":"1613601225.075400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tQqK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm thinking LLVM libunwind may not define __register_frame when not built as part of the system library"}]}]}]},{"client_msg_id":"f7b11957-c2f2-4dbe-9ee6-8c6142945aa6","type":"message","text":"but you should check whether it works or not","user":"U674T3KB3","ts":"1613601253.075700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QHg69","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but you should check whether it works or not"}]}]}]},{"client_msg_id":"61fa73ae-0e51-46fb-8d55-228900cc9d15","type":"message","text":"just set a breakpoint in __register_frame and see if it picks up the one in the LLVM unwind","user":"U674T3KB3","ts":"1613601279.076300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aIJv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"just set a breakpoint in __register_frame and see if it picks up the one in the LLVM unwind"}]}]}]},{"client_msg_id":"f3b9e81e-7161-4965-a465-fbf6ac2b5b40","type":"message","text":"Looks like you might be able to just call `__unw_add_dynamic_fde` directly","user":"U674T3KB3","ts":"1613601355.076900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h=p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Looks like you might be able to just call "},{"type":"text","text":"__unw_add_dynamic_fde","style":{"code":true}},{"type":"text","text":" directly"}]}]}]},{"client_msg_id":"a7cf021b-bee7-4d4e-b5e4-e837f77b6c98","type":"message","text":"I never really liked the whole shadowing of __register_frame business","user":"U674T3KB3","ts":"1613601368.077500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WdYU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I never really liked the whole shadowing of __register_frame business"}]}]}]},{"client_msg_id":"751faa45-f4f5-43da-b33e-d6d8e3692269","type":"message","text":"I noticed there's an option for `LIBUNWIND_USES_ARM_EHABI`. I'll try enabling it","user":"U679T6QF7","ts":"1613601371.077800","team":"T68168MUP","edited":{"user":"U679T6QF7","ts":"1613601384.000000"},"blocks":[{"type":"rich_text","block_id":"QUr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I noticed there's an option for "},{"type":"text","text":"LIBUNWIND_USES_ARM_EHABI","style":{"code":true}},{"type":"text","text":". I'll try enabling it"}]}]}]},{"client_msg_id":"b05cef3a-765c-44dd-b8f7-08e359d3107d","type":"message","text":"No, I think that's something different","user":"U674T3KB3","ts":"1613601407.078100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NQe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No, I think that's something different"}]}]}]},{"client_msg_id":"584651b4-5adb-4737-84fd-a5c2a81db324","type":"message","text":"I think that's the legacy arm32 unwind info format","user":"U674T3KB3","ts":"1613601446.078500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Xgp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think that's the legacy arm32 unwind info format"}]}]}]},{"client_msg_id":"5bdce6ce-1029-4304-bee2-50d5f6aa1a59","type":"message","text":"Kk. I'll dig more into this in a couple hours. Thanks for the tips","user":"U679T6QF7","ts":"1613601469.079400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p73wm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Kk. I'll dig more into this in a couple hours. Thanks for the tips"}]}]}]},{"client_msg_id":"e5ee1687-255c-42b9-9997-ff18c74cd213","type":"message","text":"yeah, try that. I'd guess that's the issue","user":"U674T3KB3","ts":"1613601516.079700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ozB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, try that. I'd guess that's the issue"}]}]}]},{"client_msg_id":"73c83adf-61a1-4aae-9d62-87d88f00938a","type":"message","text":"the __register_frames thing","user":"U674T3KB3","ts":"1613601523.080000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"l28It","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the __register_frames thing"}]}]}]},{"client_msg_id":"2ffc0b84-36fb-434b-8d3b-0b94ff03eacc","type":"message","text":"I confirmed that LLVM libunwind does defined `__register_frame` and it does seem to be called correctly. I did notice that LLVM libunwind defines `_LIBUNWIND_BUILD_SJLJ_APIS` on Apple ARM (<https://github.com/llvm/llvm-project/blob/main/libunwind/src/config.h#L100>) so possibly that is related. I also noticed that Julia on Win32 has some references to SJLJ which may have some code paths needed for Apple Silicon.","user":"U679T6QF7","ts":"1613661120.083200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ebd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I confirmed that LLVM libunwind does defined "},{"type":"text","text":"__register_frame","style":{"code":true}},{"type":"text","text":" and it does seem to be called correctly. I did notice that LLVM libunwind defines "},{"type":"text","text":"_LIBUNWIND_BUILD_SJLJ_APIS","style":{"code":true}},{"type":"text","text":" on Apple ARM ("},{"type":"link","url":"https://github.com/llvm/llvm-project/blob/main/libunwind/src/config.h#L100"},{"type":"text","text":") so possibly that is related. I also noticed that Julia on Win32 has some references to SJLJ which may have some code paths needed for Apple Silicon."}]}]}]},{"client_msg_id":"79f98f3d-f773-4168-994c-c2dfcf2c0eea","type":"message","text":"<https://github.com/JuliaLang/julia/blob/11cbaf67b6fb5973f95d704a7a372cb43d770d62/base/io.jl#L646-L647>","user":"U67BJLYCS","ts":"1613697920.084200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nsJ4","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/blob/11cbaf67b6fb5973f95d704a7a372cb43d770d62/base/io.jl#L646-L647"}]}]}]},{"client_msg_id":"10671c33-dbd5-40fa-b48e-1668925d7987","type":"message","text":"Wouldn't: `GC.@preserve` make more sense?","user":"U67BJLYCS","ts":"1613697950.084700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QL+x","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Wouldn't: "},{"type":"text","text":"GC.@preserve","style":{"code":true}},{"type":"text","text":" make more sense?"}]}]}]},{"client_msg_id":"9b58c415-656a-44e8-87e5-c67039bf317a","type":"message","text":"```@noinline unsafe_write(s::IO, p::Ref{T}, n::Integer) where {T} =\n    unsafe_write(s, unsafe_convert(Ref{T}, p)::Ptr, n) # mark noinline to ensure ref is gc-rooted somewhere (by the caller)```","user":"U67BJLYCS","ts":"1613697954.084900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aHfS","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@noinline unsafe_write(s::IO, p::Ref{T}, n::Integer) where {T} =\n    unsafe_write(s, unsafe_convert(Ref{T}, p)::Ptr, n) # mark noinline to ensure ref is gc-rooted somewhere (by the caller)"}]}]}]},{"client_msg_id":"1560f6c8-8591-412f-b2c0-6d4147f68307","type":"message","text":"Didn’t use to exist","user":"U67BXBF99","ts":"1613698394.085100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SFCw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Didn’t use to exist"}]}]}]},{"client_msg_id":"41396dbf-e5d0-42a8-945a-ceb5e509d839","type":"message","text":"also not technically the same thing","user":"U67BXBF99","ts":"1613698404.085400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qAt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"also not technically the same thing"}]}]}]},{"client_msg_id":"831194ff-7bc1-441d-9503-161d27d993be","type":"message","text":"<@U674T3KB3> would <https://github.com/JuliaLang/julia/pull/39697> help us with the debugger performance problems we discussed last spring? If I understand the PR correctly, it would allow us to \"swap\" in a version of any arbitrary method that breaks on a breakpoint, and that version could even be called from normal compiled functions? Or something like that?","user":"U68UUUFPS","ts":"1613698750.087700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uga","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U674T3KB3"},{"type":"text","text":" would "},{"type":"link","url":"https://github.com/JuliaLang/julia/pull/39697"},{"type":"text","text":" help us with the debugger performance problems we discussed last spring? If I understand the PR correctly, it would allow us to \"swap\" in a version of any arbitrary method that breaks on a breakpoint, and that version could even be called from normal compiled functions? Or something like that?"}]}]}]},{"client_msg_id":"e3e2171e-b192-4838-aa87-a9c7776a6028","type":"message","text":"Not by itself, but the functionality it's building towards would help with that","user":"U674T3KB3","ts":"1613716590.089300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Anj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not by itself, but the functionality it's building towards would help with that"}]}]}]},{"client_msg_id":"fddd4a06-7159-4417-8abe-e6aaa42809b5","type":"message","text":"Is what I describe in section \"Sometimes things can get nasty\" of <https://bkamins.github.io/julialang/2021/02/19/binding.html> intended/documented? I am not asking about performance (which is clear and secondary I think), but about the impact of boxing on the behavior. What I mean that by changing `j = i` to `j = i + 1` in the codes I presented in the post (which I would consider an implementation detail) you radically change the result.","user":"U8JAMQGQY","ts":"1613736618.091400","team":"T68168MUP","edited":{"user":"U8JAMQGQY","ts":"1613736626.000000"},"blocks":[{"type":"rich_text","block_id":"=ga","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is what I describe in section \"Sometimes things can get nasty\" of "},{"type":"link","url":"https://bkamins.github.io/julialang/2021/02/19/binding.html"},{"type":"text","text":" intended/documented? I am not asking about performance (which is clear and secondary I think), but about the impact of boxing on the behavior. What I mean that by changing "},{"type":"text","text":"j = i","style":{"code":true}},{"type":"text","text":" to "},{"type":"text","text":"j = i + 1","style":{"code":true}},{"type":"text","text":" in the codes I presented in the post (which I would consider an implementation detail) you radically change the result."}]}]}]},{"client_msg_id":"b431bda5-0cd5-4144-8a07-188304197253","type":"message","text":"You probably want to add the \n```let j=j\n  Closure\n```","user":"U67BJLYCS","ts":"1613737160.092500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"v=C","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You probably want to add the \n```let j=j\n  Closure\n```"}]}]}]},{"client_msg_id":"2c5b686e-bce2-4971-994d-3f6b49d710b9","type":"message","text":"As an example","user":"U67BJLYCS","ts":"1613737166.092700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"E/q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"As an example"}]}]}]},{"client_msg_id":"60c0c689-d09f-4854-835c-825c126d6c5a","type":"message","text":"But this is primarily a issue around variable capture with closures","user":"U67BJLYCS","ts":"1613737245.093700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O5eAc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But this is primarily a issue around variable capture with closures"}]}]}]},{"client_msg_id":"a75b6c70-df34-464a-a1c3-0f528fbfe927","type":"message","text":"And the loop local variable behavior is separate from that","user":"U67BJLYCS","ts":"1613737289.094600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QdPKY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And the loop local variable behavior is separate from that"}]}]}]},{"client_msg_id":"5fc6fc12-c056-4ecf-a8d3-d25aab2634e7","type":"message","text":"Yes - I agree that *if I want a new binding* doing `let j=j` solves the issue. You can also use `outer` modifier in `g2` case to avoid boxing:\n```julia&gt; function g2()\n       l = []\n       local i\n       local j\n       for outer i in 0:3\n            j = i + 1\n            push!(l, () -&gt; j)\n       end\n       return l\n       end\njulia&gt; l2 = g2();\n\njulia&gt; for i in 1:4\n           println(l2[i]())\n       end\n1\n2\n3\n4```\n\nIn summary the point is that `j=i` and `j=i+1` produces drastically different behavior of the function that is related to `for` loop behavior if indexing variable is loop local. Also if you replace `for` loop with an equivalent `while` loop you get a consistent behavior (and without boxing):\n```julia&gt; function g1()\n       l = []\n       local j\n       i = 0\n       while i &lt; 4\n           j = i\n           push!(l, () -&gt; j)\n           i += 1\n       end\n       return l\n       end\ng1 (generic function with 1 method)\n\njulia&gt; l1 = g1();\n\njulia&gt; for i in 1:4\n           println(l1[i]())\n       end\n0\n1\n2\n3\n\njulia&gt; function g2()\n       l = []\n       local j\n       i = 0\n       while i &lt; 4\n           j = i + 1\n           push!(l, () -&gt; j)\n           i += 1\n       end\n       return l\n       end\ng2 (generic function with 1 method)\n\njulia&gt; l2 = g2();\n\njulia&gt; for i in 1:4\n           println(l2[i]())\n       end\n1\n2\n3\n4```\n","user":"U8JAMQGQY","ts":"1613742493.099600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Xy0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes - I agree that "},{"type":"text","text":"if I want a new binding","style":{"bold":true}},{"type":"text","text":" doing "},{"type":"text","text":"let j=j","style":{"code":true}},{"type":"text","text":" solves the issue. You can also use "},{"type":"text","text":"outer","style":{"code":true}},{"type":"text","text":" modifier in "},{"type":"text","text":"g2","style":{"code":true}},{"type":"text","text":" case to avoid boxing:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function g2()\n       l = []\n       local i\n       local j\n       for outer i in 0:3\n            j = i + 1\n            push!(l, () -> j)\n       end\n       return l\n       end\njulia> l2 = g2();\n\njulia> for i in 1:4\n           println(l2[i]())\n       end\n1\n2\n3\n4"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n\nIn summary the point is that "},{"type":"text","text":"j=i","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"j=i+1","style":{"code":true}},{"type":"text","text":" produces drastically different behavior of the function that is related to "},{"type":"text","text":"for","style":{"code":true}},{"type":"text","text":" loop behavior if indexing variable is loop local. Also if you replace "},{"type":"text","text":"for","style":{"code":true}},{"type":"text","text":" loop with an equivalent "},{"type":"text","text":"while","style":{"code":true}},{"type":"text","text":" loop you get a consistent behavior (and without boxing):\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function g1()\n       l = []\n       local j\n       i = 0\n       while i < 4\n           j = i\n           push!(l, () -> j)\n           i += 1\n       end\n       return l\n       end\ng1 (generic function with 1 method)\n\njulia> l1 = g1();\n\njulia> for i in 1:4\n           println(l1[i]())\n       end\n0\n1\n2\n3\n\njulia> function g2()\n       l = []\n       local j\n       i = 0\n       while i < 4\n           j = i + 1\n           push!(l, () -> j)\n           i += 1\n       end\n       return l\n       end\ng2 (generic function with 1 method)\n\njulia> l2 = g2();\n\njulia> for i in 1:4\n           println(l2[i]())\n       end\n1\n2\n3\n4"}]},{"type":"rich_text_section","elements":[]}]}]},{"client_msg_id":"4165b812-bd24-47ff-988b-ca20d8b9ea9d","type":"message","text":"So I think that:\n&gt; And the loop local variable behavior is separate from that\nIs not fully separate because as shown above if you use `outer` and indexing variable is not loop-local then the behavior is different than in the case if indexing variable is loop local (we drop `outer`).","user":"U8JAMQGQY","ts":"1613742546.100700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"56p7T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So I think that:\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"And the loop local variable behavior is separate from that"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Is not fully separate because as shown above if you use "},{"type":"text","text":"outer","style":{"code":true}},{"type":"text","text":" and indexing variable is not loop-local then the behavior is different than in the case if indexing variable is loop local (we drop "},{"type":"text","text":"outer","style":{"code":true}},{"type":"text","text":")."}]}]}]},{"client_msg_id":"F18FB1B7-7A88-48BB-BD85-794DAC43548D","type":"message","text":"That does look very strange in your examples","user":"U67BXBF99","ts":"1613747903.101200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JPTUf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That does look very strange in your examples"}]}]}]},{"client_msg_id":"5d54e74a-c053-4577-aa47-d07e5b3bc3bc","type":"message","text":"I’ve reopened <https://github.com/JuliaLang/julia/issues/37690> with your updated example (<@U687RKK0E>)","user":"U67BXBF99","ts":"1613754297.102200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R18","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’ve reopened "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/37690"},{"type":"text","text":" with your updated example ("},{"type":"user","user_id":"U687RKK0E"},{"type":"text","text":")"}]}]}]},{"client_msg_id":"cb4b47f0-d526-41bf-844a-baaa124a1b9c","type":"message","text":"Some day we need to just use actual dominator analysis, so we can assign vinfo:sa with much greater correctness","user":"U67BXBF99","ts":"1613754806.103100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WJNf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Some day we need to just use actual dominator analysis, so we can assign vinfo:sa with much greater correctness"}]}]}]},{"client_msg_id":"EE154B43-A28A-4209-9637-1C6DFC8F275A","type":"message","text":"Perhaps the wrong place for me to post this, but I am curious about this: <https://github.com/JuliaLang/julia/issues/39720|https://github.com/JuliaLang/julia/issues/39720>\n\nI can play around and try to fix it if there’s an actual problem here ","user":"UGR3910CQ","ts":"1613770455.104600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DrTv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Perhaps the wrong place for me to post this, but I am curious about this: "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/39720","text":"https://github.com/JuliaLang/julia/issues/39720"},{"type":"text","text":"\n"},{"type":"text","text":"\nI can play around and try to fix it if there’s an actual problem here "}]}]}]},{"client_msg_id":"06e3704a-dc6f-4a00-9822-221598ebf918","type":"message","text":"I think it is just a problem with the doc deployment in general right now","user":"U67D54KS8","ts":"1613770534.104900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"l0z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think it is just a problem with the doc deployment in general right now"}]}]}],"thread_ts":"1613770534.104900","reply_count":4,"reply_users_count":2,"latest_reply":"1613770675.107600","reply_users":["UGR3910CQ","U67D54KS8"],"subscribed":false,"reactions":[{"name":"+1","users":["UGR3910CQ"],"count":1}]},{"client_msg_id":"65f0a696-1227-4996-8c78-febe6c706237","type":"message","text":"<https://github.com/JuliaLang/julia/pull/39614#issuecomment-782316070>","user":"U67D54KS8","ts":"1613770572.105600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"k6L","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/pull/39614#issuecomment-782316070"}]}]}]},{"client_msg_id":"3fd53e5d-f4d1-4dce-9ec1-43007c5c343b","type":"message","text":"for all the garbage collection experts, been working with valentin to slowly expand capabilities of enzyme.jl to differentiate through julia’s garbage collector, when gc objects are only allocated in the topmost function, everything is fine","user":"UN3KKRCRJ","ts":"1613970571.002300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iXmW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"for all the garbage collection experts, been working with valentin to slowly expand capabilities of enzyme.jl to differentiate through julia’s garbage collector, when gc objects are only allocated in the topmost function, everything is fine"}]}]}]},{"client_msg_id":"cb0246dc-2dc0-4dc6-b25e-117dc35ac0b7","type":"message","text":"however if something is allocated in a subfunction, we need to save it for use in a corresponding reverse subfunction","user":"UN3KKRCRJ","ts":"1613970592.002800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gxTAl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"however if something is allocated in a subfunction, we need to save it for use in a corresponding reverse subfunction"}]}]}]},{"client_msg_id":"c7b4b366-5886-45f7-88de-2165b11bf624","type":"message","text":"so a bunch of related questions here, if I return a struct of objects [or array/tree of objects, etc] from the subfunction that I want to save, is there any way to mark them as wanting to be saved","user":"UN3KKRCRJ","ts":"1613970657.003900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fGE2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so a bunch of related questions here, if I return a struct of objects [or array/tree of objects, etc] from the subfunction that I want to save, is there any way to mark them as wanting to be saved"}]}]}]},{"client_msg_id":"3a811f78-be1b-4560-95b9-a3f3fef8f367","type":"message","text":"I know the precise point they’re allocated and can tag/etc them as required","user":"UN3KKRCRJ","ts":"1613970675.004300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/fEnI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I know the precise point they’re allocated and can tag/etc them as required"}]}]}]},{"client_msg_id":"0627d7af-b9c9-4c2b-beba-6efd08be3024","type":"message","text":"There is also a potential additional issue wrt “Pointers loaded from tracked object (currently 13)”","user":"UN3KKRCRJ","ts":"1613970753.004800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7FC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There is also a potential additional issue wrt “Pointers loaded from tracked object (currently 13)”"}]}]}]},{"client_msg_id":"01bb48d4-6753-48ae-a30f-93c6e7c2227d","type":"message","text":"I don't really know what you mean by marking them to be saved, but if you put in an intrinsic to escape them, they'll be preserved there. Obviously you'll need to teach the GC about whatever data structure you're using to preserve them","user":"U674T3KB3","ts":"1613970816.006100","team":"T68168MUP","edited":{"user":"U674T3KB3","ts":"1613970822.000000"},"blocks":[{"type":"rich_text","block_id":"vnLD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't really know what you mean by marking them to be saved, but if you put in an intrinsic to escape them, they'll be preserved there. Obviously you'll need to teach the GC about whatever data structure you're using to preserve them"}]}]}]},{"client_msg_id":"c2f588cc-b64e-489a-88ce-bf09fe7a9427","type":"message","text":"basically because if the array may point to a new derived pointer from something in the interim, we want to keep around the old derived pointer","user":"UN3KKRCRJ","ts":"1613970833.006400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"y2a7J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"basically because if the array may point to a new derived pointer from something in the interim, we want to keep around the old derived pointer"}]}]}]},{"client_msg_id":"ff8129d8-6380-45f0-82a0-6036a259e38e","type":"message","text":"so what is the right intrinsic to escape them","user":"UN3KKRCRJ","ts":"1613970848.006700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BtsMB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so what is the right intrinsic to escape them"}]}]}]},{"client_msg_id":"db61f2f5-9fb7-4665-82ac-2745614aba4e","type":"message","text":"and similarly is there an intrinsic that can be used to mark them as being managd by GC again","user":"UN3KKRCRJ","ts":"1613970864.007200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bddUV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and similarly is there an intrinsic that can be used to mark them as being managd by GC again"}]}]}]},{"client_msg_id":"a39efd74-907f-40c8-ab46-f8f6550b7231","type":"message","text":"there isn't one","user":"U674T3KB3","ts":"1613970874.007800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CS6L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there isn't one"}]}]}]},{"client_msg_id":"c7e91e4e-92d6-4ebb-82b8-84668f875c95","type":"message","text":"once you drop GC tracking it's fair game","user":"U674T3KB3","ts":"1613970882.008200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ywjhm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"once you drop GC tracking it's fair game"}]}]}]},{"client_msg_id":"56533547-7413-4194-befa-fe5771fb069c","type":"message","text":"like ideally the best situation is for the data to temporarily lose its managemeny from GC to us to take over","user":"UN3KKRCRJ","ts":"1613970886.008500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ujl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"like ideally the best situation is for the data to temporarily lose its managemeny from GC to us to take over"}]}]}]},{"client_msg_id":"e46f38fd-c423-4f73-a09a-7c2aef01e505","type":"message","text":"to delete","user":"U674T3KB3","ts":"1613970887.008600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"N8T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"to delete"}]}]}]},{"client_msg_id":"ee0afb9d-93fa-40f6-add7-f1cc1f07b17a","type":"message","text":"and give it back to GC","user":"UN3KKRCRJ","ts":"1613970900.008900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"o0r","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and give it back to GC"}]}]}]},{"client_msg_id":"b0c62239-8424-409b-b20d-bea8324f3e86","type":"message","text":"yeah, you can't do that","user":"U674T3KB3","ts":"1613970916.009700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FzG+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, you can't do that"}]}]}]},{"client_msg_id":"6d9fb266-4f7d-4a4b-9e21-d0ed92dbf8d1","type":"message","text":"yeah I figure as much","user":"UN3KKRCRJ","ts":"1613970923.010200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2JS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah I figure as much"}]}]}]},{"client_msg_id":"8ccf3789-8dec-4dde-b327-7cc58d132465","type":"message","text":"could I somehow bind the root of the object to the caller and not the current function scope?","user":"UN3KKRCRJ","ts":"1613970942.010900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"P18","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"could I somehow bind the root of the object to the caller and not the current function scope?"}]}]}]},{"client_msg_id":"a1adbbf7-a92b-44a9-930f-4fc5667eed40","type":"message","text":"whereever you're stuffing the pointer for later use needs to be markable by the GC","user":"U674T3KB3","ts":"1613970942.011000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eDD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"whereever you're stuffing the pointer for later use needs to be markable by the GC"}]}]}]},{"client_msg_id":"23864e3e-62d1-47b3-b762-45d9e611da5f","type":"message","text":"where are you saving the pointer?","user":"U674T3KB3","ts":"1613970961.011400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lClB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"where are you saving the pointer?"}]}]}]},{"client_msg_id":"42d0bf6e-a21c-4b78-8243-fb82e9efab6d","type":"message","text":"basically a struct of all pointers we need for the reverse pass","user":"UN3KKRCRJ","ts":"1613970980.011800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FwA+W","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"basically a struct of all pointers we need for the reverse pass"}]}]}]},{"client_msg_id":"58aac4ee-5d36-421f-b9c5-1fc2bc1d2705","type":"message","text":"ok, so you need to generate a GC layout for that","user":"U674T3KB3","ts":"1613970993.012400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FE1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ok, so you need to generate a GC layout for that"}]}]}]},{"client_msg_id":"3b997168-5c21-4d8e-bb1f-b36a69ac0782","type":"message","text":"if the object is allocated inside of a loop, then a malloc(sizeof(object) * # iters)","user":"UN3KKRCRJ","ts":"1613970998.012700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ukWe7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if the object is allocated inside of a loop, then a malloc(sizeof(object) * # iters)"}]}]}]},{"client_msg_id":"77434a34-1353-4178-bd74-dff0ca5ed4af","type":"message","text":"and register it with the GC somehow","user":"U674T3KB3","ts":"1613971004.013000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"egsU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and register it with the GC somehow"}]}]}]},{"client_msg_id":"9d32e65b-2d31-4b1b-9e7e-0f7bc7f8ac47","type":"message","text":"and the data structure itself is recursive for subcalls","user":"UN3KKRCRJ","ts":"1613971013.013300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TmW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and the data structure itself is recursive for subcalls"}]}]}]},{"client_msg_id":"07847885-119b-43cf-ae1a-c5b646067c55","type":"message","text":"we don't really have the concept of a dynamically generated GC layout at the moment, but it's something I've wanted to add","user":"U674T3KB3","ts":"1613971030.013700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vxDX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we don't really have the concept of a dynamically generated GC layout at the moment, but it's something I've wanted to add"}]}]}]},{"client_msg_id":"cbc3791d-ebd3-4ab2-9471-f46facdf2528","type":"message","text":"for precisely this reason","user":"U674T3KB3","ts":"1613971040.014000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"t1Q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"for precisely this reason"}]}]}]},{"client_msg_id":"f341f0e3-3664-4c03-b4af-9aef1fde3929","type":"message","text":"yeah","user":"UN3KKRCRJ","ts":"1613971046.014300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"md3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah"}]}]}]},{"client_msg_id":"cb972548-921d-4f4f-be72-bd405a3acbe5","type":"message","text":"unsurprisingly an optimized OpaqueClosure implementation needs it","user":"U674T3KB3","ts":"1613971052.014600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Pju3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"unsurprisingly an optimized OpaqueClosure implementation needs it"}]}]}]},{"client_msg_id":"a5b2fb6e-9dce-45e8-8eeb-30d7bea30b3a","type":"message","text":"because the OpaqueClosure environment is literally designed to represent AD residuals","user":"U674T3KB3","ts":"1613971070.015100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hJFF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"because the OpaqueClosure environment is literally designed to represent AD residuals"}]}]}]},{"client_msg_id":"cd3ca550-19c3-4610-860d-2d39f9a76427","type":"message","text":"It's not super hard, but would require some GC hacking","user":"U674T3KB3","ts":"1613971085.015400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RS=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's not super hard, but would require some GC hacking"}]}]}]},{"client_msg_id":"40805dee-cf6a-4d2a-97db-413ef2983067","type":"message","text":"yeah that makes sense","user":"UN3KKRCRJ","ts":"1613971111.015600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XY6k","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah that makes sense"}]}]}]},{"client_msg_id":"a91d418a-a6e1-4100-ad85-ca8e491ec5b3","type":"message","text":"is there anything useful we could use to bootstrap off of in the meantime?","user":"UN3KKRCRJ","ts":"1613971130.016100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qOs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is there anything useful we could use to bootstrap off of in the meantime?"}]}]}]},{"client_msg_id":"64b653fe-6c90-4714-8f6b-3daab70d16ca","type":"message","text":"just turn off GC while in Enzyme?","user":"U674T3KB3","ts":"1613971152.016600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vRiz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"just turn off GC while in Enzyme?"}]}]}]},{"client_msg_id":"b5ac3d11-f1b6-4afd-bfca-d743761e690b","type":"message","text":"I mean that does work, we know precisely where to free everything :stuck_out_tongue:","user":"UN3KKRCRJ","ts":"1613971175.017200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4v7m","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean that does work, we know precisely where to free everything "},{"type":"emoji","name":"stuck_out_tongue"}]}]}]},{"client_msg_id":"14ca5963-bee4-4972-a3e7-09e2edf3d0a5","type":"message","text":"as long as all preserved objects are in GC roots by the time you turn GC back on, nothing's gonna break","user":"U674T3KB3","ts":"1613971178.017300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xvzF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"as long as all preserved objects are in GC roots by the time you turn GC back on, nothing's gonna break"}]}]}]},{"client_msg_id":"ad820f94-426d-4602-9893-2697618ad63a","type":"message","text":"how would you turn gc off","user":"UN3KKRCRJ","ts":"1613971192.017500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"e/6zM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"how would you turn gc off"}]}]}]},{"client_msg_id":"a64405f2-5c90-47f6-8ef6-63d562631ed6","type":"message","text":"[the location to free being the reverse of the allocation]","user":"UN3KKRCRJ","ts":"1613971203.018000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yL+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"[the location to free being the reverse of the allocation]"}]}]}]},{"client_msg_id":"4c585aca-eca8-46f7-bbfd-05987afc598b","type":"message","text":"[assuming doesnt escape]","user":"UN3KKRCRJ","ts":"1613971209.018400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GPPU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"[assuming doesnt escape]"}]}]}]},{"client_msg_id":"8285f48a-0444-444b-98b9-94b39240f3b1","type":"message","text":"If you know the allocations don't escape, you don't need to allocate them using the GC at all","user":"U674T3KB3","ts":"1613971210.018500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hLK4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you know the allocations don't escape, you don't need to allocate them using the GC at all"}]}]}]},{"client_msg_id":"995963df-855c-4543-94af-f1bbe531735b","type":"message","text":"you can just promote them to the C heap","user":"U674T3KB3","ts":"1613971225.018800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Pp7jc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can just promote them to the C heap"}]}]}]},{"client_msg_id":"e9f86f61-4c11-4877-81b3-864747171767","type":"message","text":"or the stack","user":"U674T3KB3","ts":"1613971243.019000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TCdO+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or the stack"}]}]}]},{"client_msg_id":"74bc5858-d089-48fc-95df-a12ad1cb8441","type":"message","text":"in which case would something like this work:\n• in the forward pass, replace all gc.allocs, jl_array_alloc / etc to be address space 0, “turning off gc”","user":"UN3KKRCRJ","ts":"1613971291.019900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hjo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in which case would something like this work:\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in the forward pass, replace all gc.allocs, jl_array_alloc / etc to be address space 0, “turning off gc”"}]}],"style":"bullet","indent":0}]}]},{"client_msg_id":"04075ec7-50bc-4c05-b006-1b33f04be78f","type":"message","text":"in the reverse pass then the question is how to mark it trackable by GC","user":"UN3KKRCRJ","ts":"1613971305.020500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"62is","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in the reverse pass then the question is how to mark it trackable by GC"}]}]}]},{"client_msg_id":"f13b9d40-3005-45c4-bfef-710485096ee8","type":"message","text":"no, you can't give something back to the GC","user":"U674T3KB3","ts":"1613971320.021000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1QZj9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no, you can't give something back to the GC"}]}]}]},{"client_msg_id":"b30996c4-6d46-4b66-8a8b-c7c4fb321f1b","type":"message","text":"you need to decide at alloc time","user":"U674T3KB3","ts":"1613971324.021200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9IrvR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you need to decide at alloc time"}]}]}]},{"client_msg_id":"e6c6db3d-46d3-4dae-9b84-811f2f1fd206","type":"message","text":"yeah that makes sense sadly","user":"UN3KKRCRJ","ts":"1613971341.021400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p4N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah that makes sense sadly"}]}]}]},{"client_msg_id":"91270bd3-dbb9-4dbe-b26e-d9461f23cf03","type":"message","text":"you can just literally turn off the GC though","user":"U674T3KB3","ts":"1613971357.021600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7lr5x","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can just literally turn off the GC though"}]}]}]},{"client_msg_id":"e2f0d100-69b4-4ee8-bfe0-6327b836fa6b","type":"message","text":"I suppose if magic struct were seen as a GC object","user":"UN3KKRCRJ","ts":"1613971379.021900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2axl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I suppose if magic struct were seen as a GC object"}]}]}]},{"client_msg_id":"c53e6833-2c5a-4527-8288-4ca1880d8d78","type":"message","text":"then this woudl work fine","user":"UN3KKRCRJ","ts":"1613971382.022100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1AT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"then this woudl work fine"}]}]}]},{"client_msg_id":"1d37abb7-b565-4541-9608-eb87c20d5501","type":"message","text":"right, you need to generate a GC descriptor for it that tells the GC where the pointers in that struct are","user":"U674T3KB3","ts":"1613971405.022600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jEc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"right, you need to generate a GC descriptor for it that tells the GC where the pointers in that struct are"}]}]}]},{"client_msg_id":"8a6e468c-868f-4aa3-9f94-467c8b9ef653","type":"message","text":"It shouldn't be that hard","user":"U674T3KB3","ts":"1613971431.023100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"u1d","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It shouldn't be that hard"}]}]}]},{"client_msg_id":"ac323d34-e35a-44d3-accf-2a17612a3412","type":"message","text":"generating the description is probably 10 lines of code from the llvm struct type","user":"U674T3KB3","ts":"1613971448.024000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"glOq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"generating the description is probably 10 lines of code from the llvm struct type"}]}]}]},{"client_msg_id":"e4cab67d-b0c6-4477-bc21-128ac7f6ae81","type":"message","text":"what exactly is a gc descriptor in this context [slowly learning julia internals, so forgive me]","user":"UN3KKRCRJ","ts":"1613971451.024200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0a8M","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what exactly is a gc descriptor in this context [slowly learning julia internals, so forgive me]"}]}]}]},{"client_msg_id":"d3ae7a97-122e-4411-9cbb-df22c28dd0cb","type":"message","text":"<https://github.com/JuliaLang/julia/blob/master/src/julia.h#L454-L471>","user":"U674T3KB3","ts":"1613971464.024600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bJKu","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/blob/master/src/julia.h#L454-L471"}]}]}]},{"client_msg_id":"c6cbfebb-5bc9-43d8-b127-0a13fcbce188","type":"message","text":"and where would I pass this info [e.g. metadata, to a pss, etc]","user":"UN3KKRCRJ","ts":"1613971469.024900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"744/6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and where would I pass this info [e.g. metadata, to a pss, etc]"}]}]}]},{"client_msg_id":"b712470a-767e-4d74-a3cc-8a9fedeecc87","type":"message","text":"The biggest missing piece is that there's no way currently to just allocate a dynamic GC descriptor and tell the GC to use it for a particular struct","user":"U674T3KB3","ts":"1613971494.025500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5046V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The biggest missing piece is that there's no way currently to just allocate a dynamic GC descriptor and tell the GC to use it for a particular struct"}]}]}]},{"client_msg_id":"d2fcfbff-8060-42f2-9631-fbe9db7c17a6","type":"message","text":"adding that isn't too hard","user":"U674T3KB3","ts":"1613971510.026000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LUNop","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"adding that isn't too hard"}]}]}]},{"client_msg_id":"1534abbb-171b-4435-8b9d-dcd6ce318e4b","type":"message","text":"but a bit of effort","user":"U674T3KB3","ts":"1613971514.026200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"z/Dc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but a bit of effort"}]}]}]},{"client_msg_id":"59d17c9d-ddd6-44da-8475-6011bc646c44","type":"message","text":"Basically what you would do is add a new object type that is variable sized and has a pointer to a GC descriptor as its first word","user":"U674T3KB3","ts":"1613971542.026700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aGV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Basically what you would do is add a new object type that is variable sized and has a pointer to a GC descriptor as its first word"}]}]}]},{"client_msg_id":"27afcfbf-3c12-408c-a7b0-48df12d0c2e8","type":"message","text":"then add a new allocation intrinsic that takes a size and a pointer to a GC descriptor","user":"U674T3KB3","ts":"1613971555.027100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gVSm2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"then add a new allocation intrinsic that takes a size and a pointer to a GC descriptor"}]}]}]},{"client_msg_id":"ee7b73b5-f62f-4570-8f34-424a86fff008","type":"message","text":"and then add a new special marking case for that object type here: <https://github.com/JuliaLang/julia/blob/master/src/gc.c#L2617>","user":"U674T3KB3","ts":"1613971625.027600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MvD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and then add a new special marking case for that object type here: "},{"type":"link","url":"https://github.com/JuliaLang/julia/blob/master/src/gc.c#L2617"}]}]}]},{"client_msg_id":"a1c1bb02-99bb-415c-9306-c4cf988a128e","type":"message","text":"related question: I assume this is only necessary if the gc object itself isn’t top level","user":"UN3KKRCRJ","ts":"1613971636.027900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hlJHA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"related question: I assume this is only necessary if the gc object itself isn’t top level"}]}]}]},{"client_msg_id":"12df064e-b8c3-464b-a32c-1b7d82b76dde","type":"message","text":"e.g. if I return a gc object directly, that’s tracked fine","user":"UN3KKRCRJ","ts":"1613971647.028200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QT00","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"e.g. if I return a gc object directly, that’s tracked fine"}]}]}]},{"client_msg_id":"f5265c10-11dd-4b67-bd74-ec3a0f65f145","type":"message","text":"yes","user":"U674T3KB3","ts":"1613971654.028600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eEg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes"}]}]}]},{"client_msg_id":"fbd4fcc7-d760-44ca-a738-91f33a6b1d40","type":"message","text":"if I return an llvm struct of two objects, is that fine?","user":"UN3KKRCRJ","ts":"1613971655.028800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FIMX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if I return an llvm struct of two objects, is that fine?"}]}]}]},{"client_msg_id":"ed82b3a9-7115-4b13-96d3-68e4345077b2","type":"message","text":"=&gt; I only would need if the gc object were stored inside of a malloc’d array, yes?","user":"UN3KKRCRJ","ts":"1613971685.029800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qi8z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"=> I only would need if the gc object were stored inside of a malloc’d array, yes?"}]}]}]},{"client_msg_id":"27576e38-9f46-4475-bfa8-4317a2d25d88","type":"message","text":"probably, no warranty on things that codegen doesn't generate itself, but there is support for tracking internal pointers of FCAs","user":"U674T3KB3","ts":"1613971696.030100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sIC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"probably, no warranty on things that codegen doesn't generate itself, but there is support for tracking internal pointers of FCAs"}]}]}]},{"client_msg_id":"20ce826a-39ba-41a6-8beb-ec0fb2ec66a7","type":"message","text":"no idea if it works if you nest it deeper than that though","user":"U674T3KB3","ts":"1613971712.030400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Qnff","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no idea if it works if you nest it deeper than that though"}]}]}]},{"client_msg_id":"bbcce400-d2dc-4c39-ad7a-f3bb8d9445f2","type":"message","text":"like if I have say { { { ptr }, ptr }, ptr }","user":"UN3KKRCRJ","ts":"1613971733.031100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LH+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"like if I have say { { { ptr }, ptr }, ptr }"}]}]}]},{"client_msg_id":"b4ad0b26-2e21-46d3-9b60-0f443eb772cf","type":"message","text":"that may not necessarily work, but perhaps should?","user":"UN3KKRCRJ","ts":"1613971742.031400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nKVE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that may not necessarily work, but perhaps should?"}]}]}]},{"client_msg_id":"77c6add1-3d14-443b-8340-420ce70d1b22","type":"message","text":"[whree ptr is a gc object]","user":"UN3KKRCRJ","ts":"1613971748.031600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UiaKy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"[whree ptr is a gc object]"}]}]}]},{"client_msg_id":"50e7d4a9-7e6e-48f3-884b-ada8087b2cd7","type":"message","text":"[also thanks so much for letting me pick ur brain btw]","user":"UN3KKRCRJ","ts":"1613971764.032100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kPZy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"[also thanks so much for letting me pick ur brain btw]"}]}]}]},{"client_msg_id":"088d0109-f0ae-47c3-b4a3-fbcdbb4dd320","type":"message","text":"yes, if you leave it as a FCA that's semantically supposed to work","user":"U674T3KB3","ts":"1613971765.032200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Sq3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, if you leave it as a FCA that's semantically supposed to work"}]}]}]},{"client_msg_id":"5fbe9029-ae63-43ee-bd66-2894220db741","type":"message","text":"however, I'm pretty sure it won't work in the implementation","user":"U674T3KB3","ts":"1613971778.032600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jFf2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"however, I'm pretty sure it won't work in the implementation"}]}]}]},{"client_msg_id":"7d41df5e-d5a0-4a44-aaa7-9d7f4fbd8815","type":"message","text":"because we leave all structs as pointers and never work with FCAs","user":"U674T3KB3","ts":"1613971788.032900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oIVu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"because we leave all structs as pointers and never work with FCAs"}]}]}]},{"client_msg_id":"2565fde9-999a-4ebe-a993-742d25bbfb60","type":"message","text":"because LLVM itself is pretty bad at them","user":"U674T3KB3","ts":"1613971794.033100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dCa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"because LLVM itself is pretty bad at them"}]}]}]},{"client_msg_id":"e441221d-cd68-4c29-b8c9-2653070ed636","type":"message","text":"the only reason we have support at all is for like vectorization, but those don't created nested cases","user":"U674T3KB3","ts":"1613971825.033800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DF6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the only reason we have support at all is for like vectorization, but those don't created nested cases"}]}]}]},{"client_msg_id":"f32327c7-31bb-469d-8bc2-8060d1dede69","type":"message","text":"yeah that makes sense","user":"UN3KKRCRJ","ts":"1613971847.034000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"V/w","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah that makes sense"}]}]}]},{"client_msg_id":"e9158e29-c6d9-492b-b369-b284419bd3e5","type":"message","text":"and then for the non FCA case that would require a change to julia proper, i presume [not just a regular package for instance]","user":"UN3KKRCRJ","ts":"1613971891.034800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rnbr2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and then for the non FCA case that would require a change to julia proper, i presume [not just a regular package for instance]"}]}]}]},{"client_msg_id":"a3271458-52cf-47cb-929a-7f1b733bfae8","type":"message","text":"yes","user":"U674T3KB3","ts":"1613971907.035100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rF8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes"}]}]}]},{"client_msg_id":"d6cc45ee-bf06-4df6-ab9c-beb5109db6c9","type":"message","text":"unless say there were some potential magic workable by a custom llvm pass that was run to make it appear as normal","user":"UN3KKRCRJ","ts":"1613971928.035800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"t13z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"unless say there were some potential magic workable by a custom llvm pass that was run to make it appear as normal"}]}]}]},{"client_msg_id":"9f6468ba-09b6-44ac-b116-c4399bde0ee1","type":"message","text":"but it's a feature that's wanted in general, so you'd have a good chance of getting it in","user":"U674T3KB3","ts":"1613971936.036100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8Bl9+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but it's a feature that's wanted in general, so you'd have a good chance of getting it in"}]}]}]},{"client_msg_id":"4cd3dfd1-20e2-43d2-ad40-d5ebcb7bf9aa","type":"message","text":"or alterantively piggybacking off of an existing data structure for sake of GC","user":"UN3KKRCRJ","ts":"1613971957.036600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qkmx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or alterantively piggybacking off of an existing data structure for sake of GC"}]}]}]},{"client_msg_id":"3637d7b2-2f00-4a84-97e2-cbd24684eb0d","type":"message","text":"you could allocate an svec of all the gc tracked objects or something","user":"U674T3KB3","ts":"1613971999.037100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g0UX1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you could allocate an svec of all the gc tracked objects or something"}]}]}]},{"client_msg_id":"6bc81075-7dc6-4433-8b31-b920b125bde0","type":"message","text":"seems like that might be harder to keep track of than just generating the GC descriptors though","user":"U674T3KB3","ts":"1613972039.037800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tH4s","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"seems like that might be harder to keep track of than just generating the GC descriptors though"}]}]}]},{"client_msg_id":"30884f6c-7039-4f0a-a73b-bc764ab3ac04","type":"message","text":"would an svec of something which itself was a FCA of gc objects like above work","user":"UN3KKRCRJ","ts":"1613972040.037900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iIp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"would an svec of something which itself was a FCA of gc objects like above work"}]}]}]},{"client_msg_id":"758ca11e-cd42-4d08-9b24-56a1256d1861","type":"message","text":"no","user":"U674T3KB3","ts":"1613972047.038300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"T0bl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no"}]}]}]},{"client_msg_id":"47db9582-5d14-4d70-bead-d4f5e17980d4","type":"message","text":"obviously theres some extra magic though to create the julia types","user":"UN3KKRCRJ","ts":"1613972049.038500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7TJXs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"obviously theres some extra magic though to create the julia types"}]}]}]},{"client_msg_id":"2d52aadb-9711-4e3b-ac5c-7a0263a07472","type":"message","text":"an svec is basically just a bundle of gc roots","user":"U674T3KB3","ts":"1613972068.038900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tqsK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"an svec is basically just a bundle of gc roots"}]}]}]},{"client_msg_id":"352dc275-4e30-40d5-ba02-29ddcd8cebf3","type":"message","text":"(dynamically sized though, but lighter weight than an array)","user":"U674T3KB3","ts":"1613972097.039400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NSNo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(dynamically sized though, but lighter weight than an array)"}]}]}]},{"client_msg_id":"05055cb7-e396-4cf7-87dc-451dc65fac4e","type":"message","text":"ok so then for the magic thing here to work using existing infra, it would require both replacing the malloc an array of nested things into an svec, and also return a llvm struct of objects into an svec","user":"UN3KKRCRJ","ts":"1613972204.040400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qjm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ok so then for the magic thing here to work using existing infra, it would require both replacing the malloc an array of nested things into an svec, and also return a llvm struct of objects into an svec"}]}]}]},{"client_msg_id":"a0125014-6d24-4631-bc29-e8dd5de4b606","type":"message","text":"in the case of building the custom descriptor one “could” [but likely to fail in impl] do the FCA of gc objects and the malloc array becomes a custom descriptor","user":"UN3KKRCRJ","ts":"1613972249.041900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FXJnz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in the case of building the custom descriptor one “could” [but likely to fail in impl] do the FCA of gc objects and the malloc array becomes a custom descriptor"}]}]}]},{"client_msg_id":"070097df-5f8a-48bb-9f69-6beeba517b5d","type":"message","text":"probably? basically you'd have to split out your residual struct into the GC tracked and the non-GC tracked parts and allocate them separately","user":"U674T3KB3","ts":"1613972254.042300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/v7N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"probably? basically you'd have to split out your residual struct into the GC tracked and the non-GC tracked parts and allocate them separately"}]}]}]},{"client_msg_id":"310010eb-9512-4b01-94ef-d675fc62ad1c","type":"message","text":"that understands datastructure","user":"UN3KKRCRJ","ts":"1613972259.042400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7xLy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that understands datastructure"}]}]}]},{"client_msg_id":"2c4fbb60-74f1-4680-9705-99fd4a65ffaf","type":"message","text":"yeah =/","user":"UN3KKRCRJ","ts":"1613972277.042600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WY9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah =/"}]}]}]},{"client_msg_id":"7d062953-c420-44a4-a502-ac5fa9e705be","type":"message","text":"this was super helpful","user":"UN3KKRCRJ","ts":"1613972323.042800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ars=s","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this was super helpful"}]}]}]},{"client_msg_id":"c5cce99c-ee2a-4503-8f6e-16a0ed3e3203","type":"message","text":"mind if i also ask you a non gc question?","user":"UN3KKRCRJ","ts":"1613972330.043000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sdhXq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"mind if i also ask you a non gc question?"}]}]}]},{"client_msg_id":"e130945a-7a8e-4b47-b313-cc65827e5648","type":"message","text":"sure","user":"U674T3KB3","ts":"1613972334.043200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MVj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"sure"}]}]}]},{"client_msg_id":"83d81d5a-cf3b-446a-9b05-058cf44d28b4","type":"message","text":"not sure if this is because of gpucompiler.jl [seems not from code_llvm] but runtime functions seem to get lowered to magic constant integers bitcast to a function pointer","user":"UN3KKRCRJ","ts":"1613972383.044000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pK4lu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not sure if this is because of gpucompiler.jl [seems not from code_llvm] but runtime functions seem to get lowered to magic constant integers bitcast to a function pointer"}]}]}]},{"client_msg_id":"86c5235c-16b1-4a7d-aeb9-eb7be7cf441f","type":"message","text":"rather than a declaration","user":"UN3KKRCRJ","ts":"1613972386.044300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gSOA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"rather than a declaration"}]}]}]},{"client_msg_id":"5b8512b0-f4cb-4230-a4c6-a5d5eec77e41","type":"message","text":"e.g. jl_copy_array, jl_alloc_array, etc","user":"UN3KKRCRJ","ts":"1613972402.044700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ud1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"e.g. jl_copy_array, jl_alloc_array, etc"}]}]}]},{"client_msg_id":"27c3ad8e-ed17-4c1e-b63d-36ddd48b0fa3","type":"message","text":"is there a reason for this?","user":"UN3KKRCRJ","ts":"1613972408.044900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NIbC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is there a reason for this?"}]}]}]},{"client_msg_id":"4e05a460-2a83-4964-85b4-05aee538d423","type":"message","text":"In addition to making my life a lot easier, I would imagine that say adding readonly to jl_copy_array arg 0 would be really useful","user":"UN3KKRCRJ","ts":"1613972454.045900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sUh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In addition to making my life a lot easier, I would imagine that say adding readonly to jl_copy_array arg 0 would be really useful"}]}]}]},{"client_msg_id":"77a76e14-4ebc-4e1b-9434-420a61304e1a","type":"message","text":"[which cant happen if its a magic #]","user":"UN3KKRCRJ","ts":"1613972466.046300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QwrD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"[which cant happen if its a magic #]"}]}]}]},{"client_msg_id":"92048c78-3f97-4aff-bc84-047cbfc0d11d","type":"message","text":"those are probably called using `ccall`","user":"U674T3KB3","ts":"1613972466.046400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cLVd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"those are probably called using "},{"type":"text","text":"ccall","style":{"code":true}}]}]}]},{"client_msg_id":"cd85115f-bd44-41ae-b694-b58d9f50183e","type":"message","text":"yeah","user":"UN3KKRCRJ","ts":"1613972470.046600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O6Ub4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah"}]}]}]},{"client_msg_id":"edfdbc52-3c8b-412e-b0fb-7ee9bff4554d","type":"message","text":"you can add function args to magic # calls, we just don't have the syntax for it in ccall","user":"U674T3KB3","ts":"1613972486.047000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R0FtP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can add function args to magic # calls, we just don't have the syntax for it in ccall"}]}]}]},{"client_msg_id":"d296e884-806d-4b87-85dd-a3ee6116f80d","type":"message","text":"but anyway, the reason it is this way is that it basically implements relocations itself","user":"U674T3KB3","ts":"1613972515.047500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"80Lib","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but anyway, the reason it is this way is that it basically implements relocations itself"}]}]}]},{"client_msg_id":"d0d2efe2-b624-4701-9637-bf3888675522","type":"message","text":"in .o mode it is slightly more symbolic","user":"U674T3KB3","ts":"1613972548.048100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"30vY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in .o mode it is slightly more symbolic"}]}]}]},{"client_msg_id":"438aedc4-a558-4b9b-a725-57939005a670","type":"message","text":"I get the reason for doing so if you load from an explicit library via ccall","user":"UN3KKRCRJ","ts":"1613972570.048500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lnUF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I get the reason for doing so if you load from an explicit library via ccall"}]}]}]},{"client_msg_id":"07f15f0e-2fca-447b-945f-5169692ea3da","type":"message","text":"but would it be acceptable to do the function declaration rather than relocation ahead of time for ones without a specific library to ccall from?","user":"UN3KKRCRJ","ts":"1613972593.049300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YAK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but would it be acceptable to do the function declaration rather than relocation ahead of time for ones without a specific library to ccall from?"}]}]}]},{"client_msg_id":"a32f3037-4c78-4712-9442-bf269dedb0bd","type":"message","text":"[and alternatively is it somehow possible to get access to the relocation map and say invert it to find function being called given a magic #]","user":"UN3KKRCRJ","ts":"1613972633.049900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"q/jGJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"[and alternatively is it somehow possible to get access to the relocation map and say invert it to find function being called given a magic #]"}]}]}]},{"client_msg_id":"8bdefc89-304b-4c62-9426-ed4983f560d1","type":"message","text":"It's fine in theory, but you're really not supposed to assume anything about raw ccalls unless they're on the list of special intrinsics that have semantics beyond what is specified in the `ccall`","user":"U674T3KB3","ts":"1613972820.051300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p0uI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's fine in theory, but you're really not supposed to assume anything about raw ccalls unless they're on the list of special intrinsics that have semantics beyond what is specified in the "},{"type":"text","text":"ccall","style":{"code":true}}]}]}]},{"client_msg_id":"77d98d97-b14f-422c-865f-af20ac3de204","type":"message","text":"<@U674T3KB3> re dynamic layout for GC. Could we potentially use the extern/foreign GC integration for that, iirc that can add a custom type + scan logic","user":"U67BJLYCS","ts":"1613972879.052600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xlb","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U674T3KB3"},{"type":"text","text":" re dynamic layout for GC. Could we potentially use the extern/foreign GC integration for that, iirc that can add a custom type + scan logic"}]}]}]},{"client_msg_id":"fec37b48-436e-4c49-a68d-fb0a284eeeca","type":"message","text":"sure, but you'll still need to write some sort of descriptor and scan logic for it","user":"U674T3KB3","ts":"1613973021.053000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WsG4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"sure, but you'll still need to write some sort of descriptor and scan logic for it"}]}]}]},{"client_msg_id":"b55a0eb3-23fa-4ae9-aa9c-5b4c6fefa092","type":"message","text":"seems like you might as well just reuse the standard julia descriptor at that point and add the scan logic into gc.c","user":"U674T3KB3","ts":"1613973054.053500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"khg8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"seems like you might as well just reuse the standard julia descriptor at that point and add the scan logic into gc.c"}]}]}]},{"client_msg_id":"af7cea76-6918-4165-a98a-2d0bab56f8f6","type":"message","text":"also what makes svec more lightweight than an array [just less metadata and say assumes only 1d?]","user":"UN3KKRCRJ","ts":"1613973237.054500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=23SC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"also what makes svec more lightweight than an array [just less metadata and say assumes only 1d?]"}]}]}]},{"client_msg_id":"969db057-d743-4907-b81d-99b7a2cb4d41","type":"message","text":"arrays have two allocations, one for the metadata one for the actual data itself","user":"U674T3KB3","ts":"1613973266.054900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+Wn49","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"arrays have two allocations, one for the metadata one for the actual data itself"}]}]}]},{"client_msg_id":"d33eda21-a5b8-41c7-b64f-50055d023bad","type":"message","text":"svec only has one","user":"U674T3KB3","ts":"1613973271.055100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Toi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"svec only has one"}]}]}]},{"client_msg_id":"d5708d2a-e4c0-449c-b8dd-30ff783f2622","type":"message","text":"and less metadata","user":"U674T3KB3","ts":"1613973274.055300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O+d","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and less metadata"}]}]}]},{"client_msg_id":"6f5f8ff3-cd0f-4fe1-be1e-b1da39d7792a","type":"message","text":"makes sense","user":"UN3KKRCRJ","ts":"1613973290.055600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TvHR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"makes sense"}]}]}]},{"client_msg_id":"5d20a5ae-90fd-421e-93b0-76c6875b8d7c","type":"message","text":"also wait if we could programmatically create crazy types, could the svec work nicely with the FCAs still","user":"UN3KKRCRJ","ts":"1613973378.056300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TBd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"also wait if we could programmatically create crazy types, could the svec work nicely with the FCAs still"}]}]}]},{"client_msg_id":"67facbb1-2f0a-43db-81d0-8d9ca4ebacf9","type":"message","text":"basically just saying inline type for all the way down til the actual GC’d pointer","user":"UN3KKRCRJ","ts":"1613973399.056800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CzkX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"basically just saying inline type for all the way down til the actual GC’d pointer"}]}]}]},{"client_msg_id":"ca70fea5-6b67-4337-b16c-1152827f8587","type":"message","text":"and for things we don’t want to be GC’d mark the type as being some nonGC object","user":"UN3KKRCRJ","ts":"1613973412.057400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Xd7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and for things we don’t want to be GC’d mark the type as being some nonGC object"}]}]}]},{"client_msg_id":"91c38864-5ac6-4efe-9ded-b3a7e16036ae","type":"message","text":"like an int or something","user":"UN3KKRCRJ","ts":"1613973415.057600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1rqtx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"like an int or something"}]}]}]},{"client_msg_id":"45a95390-dd00-4b38-a258-928420b530ee","type":"message","text":"you're not allowed to create (julia) types in the optimizer","user":"U674T3KB3","ts":"1613973422.057700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x5rc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you're not allowed to create (julia) types in the optimizer"}]}]}]},{"client_msg_id":"62d7cdc7-d10f-4965-a698-41a325d36a9f","type":"message","text":"you are allowed to allocate instances of existing types","user":"U674T3KB3","ts":"1613973456.058000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"X5=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you are allowed to allocate instances of existing types"}]}]}]},{"client_msg_id":"f13bf21a-98c4-4011-8a76-fcb74d0c9a5c","type":"message","text":"most existing types have fixed numbers of gc roots","user":"U674T3KB3","ts":"1613973468.058600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dZMy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"most existing types have fixed numbers of gc roots"}]}]}]},{"client_msg_id":"e648d890-f80c-4411-a316-6382a5c44f8e","type":"message","text":"the exceptions are svec and arrays","user":"U674T3KB3","ts":"1613973477.058900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dqC2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the exceptions are svec and arrays"}]}]}]},{"client_msg_id":"bf5f1a77-4ffa-4564-ba12-fc27b340b320","type":"message","text":"(and foreign types with appropriate mark functions)","user":"U674T3KB3","ts":"1613973488.059400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ihaY8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(and foreign types with appropriate mark functions)"}]}]}]},{"client_msg_id":"cac6dd80-8462-4644-9e4b-4f86bddf6b9e","type":"message","text":"we currently make extensive use of reflection and basically there’s a callback inside of Enzyme during optimization that calls julia functions to create the specific llvm (via llvm.jl) for shadow allocations, eventually once the llvm module is complete and AD’d that goes through the codegen path [and <@U67BJLYCS> correct my description if you havent gone to sleep yet]","user":"UN3KKRCRJ","ts":"1613973599.061100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Cf9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we currently make extensive use of reflection and basically there’s a callback inside of Enzyme during optimization that calls julia functions to create the specific llvm (via llvm.jl) for shadow allocations, eventually once the llvm module is complete and AD’d that goes through the codegen path [and "},{"type":"user","user_id":"U67BJLYCS"},{"type":"text","text":" correct my description if you havent gone to sleep yet]"}]}]}]},{"client_msg_id":"b7279af3-b008-4a02-a108-0dc4f7aa3219","type":"message","text":"which I don’t think should be limited in not being able to create types, unless I’m misunderstanding","user":"UN3KKRCRJ","ts":"1613973621.061600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rwG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which I don’t think should be limited in not being able to create types, unless I’m misunderstanding"}]}]}]},{"client_msg_id":"ce5638a5-c1af-4823-8d7c-424c061bc88b","type":"message","text":"the runtime assumes no modifications to various global structures happen while the optimizer runs","user":"U674T3KB3","ts":"1613973709.062400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Mq2F","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the runtime assumes no modifications to various global structures happen while the optimizer runs"}]}]}]},{"client_msg_id":"351d8884-518b-481d-9a07-5ad28e30e947","type":"message","text":"for types that don't have any julia semantics, you might just about be able to get away with it","user":"U674T3KB3","ts":"1613973740.062800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xXX8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"for types that don't have any julia semantics, you might just about be able to get away with it"}]}]}]},{"client_msg_id":"9ce028e9-aafb-489f-b760-bdead1e650d7","type":"message","text":"but it's a bit iffy","user":"U674T3KB3","ts":"1613973744.063000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8=6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but it's a bit iffy"}]}]}]},{"client_msg_id":"94c5ad4a-ff33-447a-be4a-81759291222e","type":"message","text":"I see","user":"UN3KKRCRJ","ts":"1613973774.063200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xdjf9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see"}]}]}]},{"client_msg_id":"41e52556-5729-4521-85ce-0cd53bf6f23c","type":"message","text":"the system will yell at you for calling `eval` for example","user":"U674T3KB3","ts":"1613973790.064000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"P4l1z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the system will yell at you for calling "},{"type":"text","text":"eval","style":{"code":true}},{"type":"text","text":" for example"}]}]}]},{"client_msg_id":"d91cb0cf-0b05-4199-8047-1e290d95e899","type":"message","text":"you could probably ccall things directly","user":"U674T3KB3","ts":"1613973801.064400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"V1evA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you could probably ccall things directly"}]}]}]},{"client_msg_id":"9f1e1cf2-4d5a-4b9b-b43d-18e334b84419","type":"message","text":"and things *might* not break if you stick to simple types","user":"U674T3KB3","ts":"1613973812.064900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bZPN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and things "},{"type":"text","text":"might","style":{"bold":true}},{"type":"text","text":" not break if you stick to simple types"}]}]}]},{"client_msg_id":"fd2a7e9b-6b25-4965-9a6a-0f522dee682b","type":"message","text":"but you don't really need full julia types anyway","user":"U674T3KB3","ts":"1613973832.065700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"r5MbF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but you don't really need full julia types anyway"}]}]}]},{"client_msg_id":"a91e03f8-9192-4121-9b93-bda84adf0e70","type":"message","text":"what exaclty are the “while the optimizer runs” semantics, like I assume I can use LLVM.jl to call arbitrary non julia passes on a llvm module which is a julia data structure, but not yet considered internal julia code\nI can imagine running a julia llvm optimization pass being iffy, and also then running julias “actually turn this object into runnable code via reflection” to break","user":"UN3KKRCRJ","ts":"1613973863.066300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RN7N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what exaclty are the “while the optimizer runs” semantics, like I assume I can use LLVM.jl to call arbitrary non julia passes on a llvm module which is a julia data structure, but not yet considered internal julia code\nI can imagine running a julia llvm optimization pass being iffy, and also then running julias “actually turn this object into runnable code via reflection” to break"}]}]}]},{"client_msg_id":"3b90d0ff-eb8c-472e-bbe5-0300142a42ce","type":"message","text":"anything that doesn't modify the julia global state (bindings, method tables, types) is fine","user":"U674T3KB3","ts":"1613973916.066900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VlaK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"anything that doesn't modify the julia global state (bindings, method tables, types) is fine"}]}]}]},{"client_msg_id":"cc109753-e5c5-4934-b9a0-d4877b8c7b99","type":"message","text":"I guess you could instantiate tuples","user":"U674T3KB3","ts":"1613973987.067700","team":"T68168MUP","edited":{"user":"U674T3KB3","ts":"1613973995.000000"},"blocks":[{"type":"rich_text","block_id":"ndPln","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess you could instantiate tuples"}]}]}]},{"client_msg_id":"cc7d8f7c-02e1-4263-a4c9-faf9a077df16","type":"message","text":"that's legal","user":"U674T3KB3","ts":"1613973990.068000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uHEU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's legal"}]}]}]},{"client_msg_id":"a8a79be1-7d3d-460e-9fdc-beb6137ff9e3","type":"message","text":"I see, so I could say modify existing globals, etc, but can’t create a new type or run a generated function for example?","user":"UN3KKRCRJ","ts":"1613973991.068100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2d+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see, so I could say modify existing globals, etc, but can’t create a new type or run a generated function for example?"}]}]}]},{"client_msg_id":"afe9ca68-ba3d-46a2-a56a-8c670b421768","type":"message","text":"Right you would need to delay any such thing until runtime","user":"U67BJLYCS","ts":"1613974021.069300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0kdo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Right you would need to delay any such thing until runtime"}]}]}]},{"client_msg_id":"81d8f37a-0c3c-4a82-aa0a-a99c81a1e5d8","type":"message","text":"modifying globals is in the \"but be careful\" about it category","user":"U674T3KB3","ts":"1613974029.069500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zPo0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"modifying globals is in the \"but be careful\" about it category"}]}]}]},{"client_msg_id":"20c8783b-b426-47ce-b919-0dc09900b12c","type":"message","text":"the optimizer is supposed to be pure","user":"U674T3KB3","ts":"1613974041.069700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"T1G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the optimizer is supposed to be pure"}]}]}]},{"client_msg_id":"4d4c235b-fa51-47ee-909c-39d7ac18e2f0","type":"message","text":"I mean tuples I think should be sufficient being inline and capable of us constructing an equivalent layout to the struct actually used","user":"UN3KKRCRJ","ts":"1613974066.070000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wmUJV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean tuples I think should be sufficient being inline and capable of us constructing an equivalent layout to the struct actually used"}]}]}]},{"client_msg_id":"24cd61a5-49d1-4ee3-bac7-21a8e98ed46e","type":"message","text":"you'd need to recover julia types from the LLVM allocations though","user":"U674T3KB3","ts":"1613974083.070500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IPKF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you'd need to recover julia types from the LLVM allocations though"}]}]}]},{"client_msg_id":"9b22540b-3e17-43ce-ae46-656175a5d3e0","type":"message","text":"and presumably we could use an Csize_t for anything we dont want managed by julia’s gc","user":"UN3KKRCRJ","ts":"1613974102.071100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+mEL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and presumably we could use an Csize_t for anything we dont want managed by julia’s gc"}]}]}]},{"client_msg_id":"268b95d7-2c7f-4489-a419-e042cc6a99c2","type":"message","text":"which is information you may or may not have","user":"U674T3KB3","ts":"1613974106.071200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AlhI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which is information you may or may not have"}]}]}]},{"client_msg_id":"6a657a01-c949-4b07-bff6-e2821280ae52","type":"message","text":"generating a GC descriptor just requires knowing whether it's a GC tracked pointer or not","user":"U674T3KB3","ts":"1613974131.071900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w=HA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"generating a GC descriptor just requires knowing whether it's a GC tracked pointer or not"}]}]}]},{"client_msg_id":"59b6dca1-c6de-4f4e-8c59-390307bf6538","type":"message","text":"which is visible from the llvm type","user":"U674T3KB3","ts":"1613974153.072400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xCsD9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which is visible from the llvm type"}]}]}]},{"client_msg_id":"ad8c9f7a-2439-48bf-93e8-96c60c0f7327","type":"message","text":"is the size of a static array justa  pointer?","user":"UN3KKRCRJ","ts":"1613974158.072900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c+t+u","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is the size of a static array justa  pointer?"}]}]}]},{"client_msg_id":"3d828be2-9575-4338-afba-7de8dd2f8003","type":"message","text":"yeah I think we have that info at the right time","user":"UN3KKRCRJ","ts":"1613974242.074100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QyXHb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah I think we have that info at the right time"}]}]}]},{"client_msg_id":"469002c4-9e9f-41cf-9e41-44c143f6a937","type":"message","text":"the problem with generating a tuple is that you'd need to know the leaftype, since we don't have any invariant tuples","user":"U674T3KB3","ts":"1613974256.074400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=+M7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the problem with generating a tuple is that you'd need to know the leaftype, since we don't have any invariant tuples"}]}]}]},{"client_msg_id":"1615e1e5-3b92-4acc-bd41-0d98cfc334a2","type":"message","text":"my advice is to just generate the GC descriptor. I think that's by far the safest way to go about it","user":"U674T3KB3","ts":"1613974296.075100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"460","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"my advice is to just generate the GC descriptor. I think that's by far the safest way to go about it"}]}]}]},{"client_msg_id":"fb782d63-2688-40cb-b7b2-8c0708f34463","type":"message","text":"since we’re seeing the allocation itself which has the julia type in it, I think it should be fine?\n\nAlso to be clear I agree with you on generating the GC descriptor as the actual correct way to do, but am now just trying to amke sure my GC understanding is square","user":"UN3KKRCRJ","ts":"1613974349.076600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ve5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"since we’re seeing the allocation itself which has the julia type in it, I think it should be fine?\n\nAlso to be clear I agree with you on generating the GC descriptor as the actual correct way to do, but am now just trying to amke sure my GC understanding is square"}]}]}],"thread_ts":"1613974349.076600","reply_count":5,"reply_users_count":2,"latest_reply":"1613974500.077900","reply_users":["U674T3KB3","UN3KKRCRJ"],"subscribed":false},{"client_msg_id":"532f273b-60cd-4a5f-a3ac-e3706fac80b6","type":"message","text":"Alright, I'm off to bed. But just do the GC descriptor thing. I don't think it should be more than like 100 lines of code total","user":"U674T3KB3","ts":"1613974542.078600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zxXno","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Alright, I'm off to bed. But just do the GC descriptor thing. I don't think it should be more than like 100 lines of code total"}]}]}]},{"client_msg_id":"c92afc51-a99a-42b7-a22c-203192252c79","type":"message","text":"++ Thanks again so much Keno!","user":"UN3KKRCRJ","ts":"1613974554.078800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1fJ9L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"++ Thanks again so much Keno!"}]}]}]},{"client_msg_id":"4bfd9393-5125-4443-935d-1e73b04b39cc","type":"message","text":"Certainly learned a lot :slightly_smiling_face:","user":"UN3KKRCRJ","ts":"1613974561.079000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uEpyE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Certainly learned a lot "},{"type":"emoji","name":"slightly_smiling_face"}]}]}]},{"client_msg_id":"fd60220f-7c18-4d41-b343-977239d25ea8","type":"message","text":"So what’s the plan for this patch?\n<https://github.com/JuliaLang/julia/commit/e23ea66764d6b6d5de7a4ecf289f1c6f8835e27d>","user":"U66GD0880","ts":"1614119765.082800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HFrd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So what’s the plan for this patch?\n"},{"type":"link","url":"https://github.com/JuliaLang/julia/commit/e23ea66764d6b6d5de7a4ecf289f1c6f8835e27d"}]}]}]},{"client_msg_id":"2c767dee-655d-44eb-921b-8476c3508b8c","type":"message","text":"Is this something that is due to our reliance on the wrong unwind library?","user":"U66GD0880","ts":"1614119786.083200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h05=r","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is this something that is due to our reliance on the wrong unwind library?"}]}]}]},{"client_msg_id":"202d43aa-9801-4853-aef2-a48e8d25d299","type":"message","text":"<https://github.com/JuliaLang/julia/pull/36625|https://github.com/JuliaLang/julia/pull/36625>","user":"U674T3KB3","ts":"1614119827.083400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"X+E","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/pull/36625","text":"https://github.com/JuliaLang/julia/pull/36625"}]}]}]},{"client_msg_id":"014ca333-94de-4cdf-a70b-007f6cc10220","type":"message","text":"looks like that branch has stalled out?  What do we need to do to bring that back up to date?","user":"U66GD0880","ts":"1614120588.083800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5KJK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"looks like that branch has stalled out?  What do we need to do to bring that back up to date?"}]}]}]},{"client_msg_id":"ae942686-8a7d-431d-9ec4-2384dcea0daa","type":"message","text":"We need to decide what the behavior on Linux should be and fix it","user":"U674T3KB3","ts":"1614120693.084300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ct/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We need to decide what the behavior on Linux should be and fix it"}]}]}]},{"client_msg_id":"c3e1d023-20e6-4999-931a-f4daa40d3527","type":"message","text":"I guess I'll work on it","user":"U674T3KB3","ts":"1614121476.084500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nGLr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess I'll work on it"}]}]}]},{"client_msg_id":"c5a07cdd-99bd-4bd6-9679-095911a5ff1a","type":"message","text":"since it's the last Darwin aarch64 item (at least in terms of getting it to build)","user":"U674T3KB3","ts":"1614121497.085200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"H7m","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"since it's the last Darwin aarch64 item (at least in terms of getting it to build)"}]}]}],"reactions":[{"name":"fast_parrot","users":["U680THK2S"],"count":1}]},{"client_msg_id":"7d1edbd0-e2f5-46d4-a1fa-6068198a78a8","type":"message","text":"Why does adding `where` below confuse Julia (and some developers, CC <@U67431ELR>)?:\n```julia&gt; struct X{A, B}\n       end\n\njulia&gt; const Y{B, A} = X{A, B} where {A, B}\nX{A,B} where B where A\n\njulia&gt; const Z{B, A} = X{A, B} where {B, A}\nX{A,B} where A where B\n\njulia&gt; Y{2, 1} # confused\nX{2,1}\n\njulia&gt; Z{2, 1} # as expected\nX{1,2}```","user":"U8JAMQGQY","ts":"1614165779.086800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"I0Il9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Why does adding "},{"type":"text","text":"where","style":{"code":true}},{"type":"text","text":" below confuse Julia (and some developers, CC "},{"type":"user","user_id":"U67431ELR"},{"type":"text","text":")?:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> struct X{A, B}\n       end\n\njulia> const Y{B, A} = X{A, B} where {A, B}\nX{A,B} where B where A\n\njulia> const Z{B, A} = X{A, B} where {B, A}\nX{A,B} where A where B\n\njulia> Y{2, 1} # confused\nX{2,1}\n\njulia> Z{2, 1} # as expected\nX{1,2}"}]}]}],"thread_ts":"1614165779.086800","reply_count":8,"reply_users_count":2,"latest_reply":"1614168500.088400","reply_users":["UM30MT6RF","U8JAMQGQY"],"subscribed":false},{"client_msg_id":"0a7ea0c5-d96a-4a71-914d-accc83f5fa63","type":"message","text":"Does `@threadcall` support calling conventions?","user":"U68P09RFZ","ts":"1614226823.089600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TsA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does "},{"type":"text","text":"@threadcall","style":{"code":true}},{"type":"text","text":" support calling conventions?"}]}]}]},{"client_msg_id":"a9427d53-7839-4ca6-8125-95c38d61a6db","type":"message","text":"It appears not","user":"U68P09RFZ","ts":"1614227196.089900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9G9t","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It appears not"}]}]}]},{"client_msg_id":"e1a32bcd-f5ea-4ea3-9767-d19210f79902","type":"message","text":"I noticed thee test files names which are not listed in `testnames` in \"test/choosetests.jl\" : `[\"download\", \"filesystem\", \"stack_overflow\"]`. So I thought to add them, but looking at a CI log of a recent Julia PR (<https://build.julialang.org/#/builders/71/builds/1218>) , I noticed that the \"download\" test seems to still be run, any idea why?","user":"U6QPTG69E","ts":"1614343494.092000","team":"T68168MUP","attachments":[{"text":"Buildbot web UI","fallback":"Buildbot web UI","from_url":"https://build.julialang.org/#/builders/71/builds/1218","service_name":"build.julialang.org","id":1,"original_url":"https://build.julialang.org/#/builders/71/builds/1218"}],"blocks":[{"type":"rich_text","block_id":"e2fg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I noticed thee test files names which are not listed in "},{"type":"text","text":"testnames","style":{"code":true}},{"type":"text","text":" in \"test/choosetests.jl\" : "},{"type":"text","text":"[\"download\", \"filesystem\", \"stack_overflow\"]","style":{"code":true}},{"type":"text","text":". So I thought to add them, but looking at a CI log of a recent Julia PR ("},{"type":"link","url":"https://build.julialang.org/#/builders/71/builds/1218"},{"type":"text","text":") , I noticed that the \"download\" test seems to still be run, any idea why?"}]}]}]},{"client_msg_id":"1d864a07-3bb5-4175-8fcf-2ca0474e7888","type":"message","text":"some are listed in a separate net-enabled block, I think downloads pre-dated that and is explicitly listed in the buildbot config instead","user":"U67BXBF99","ts":"1614357589.093100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jaIC2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"some are listed in a separate net-enabled block, I think downloads pre-dated that and is explicitly listed in the buildbot config instead"}]}]}]},{"client_msg_id":"bcb1a524-0ae5-4067-bdae-af0aab20ed69","type":"message","text":"looks like filesystem is new","user":"U67BXBF99","ts":"1614357632.093400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QWbeS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"looks like filesystem is new"}]}]}]},{"client_msg_id":"ad77430b-249f-446b-b6e1-c8024cb18940","type":"message","text":"```commit e29a1aa21790305bdd7fb85ad844aef0f1719cc7\nAuthor: Ryan Birmingham &lt;birm@rbirm.us&gt;\nDate:   Mon Feb 24 13:35:27 2020 -0500\n\n    add filesystem tests to increase coverage (#34831)```","user":"U67BXBF99","ts":"1614357638.093800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1C4","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"commit e29a1aa21790305bdd7fb85ad844aef0f1719cc7\nAuthor: Ryan Birmingham <birm@rbirm.us>\nDate:   Mon Feb 24 13:35:27 2020 -0500\n\n    add filesystem tests to increase coverage (#34831)"}]}]}]},{"client_msg_id":"aefaf9ce-fbc6-4b17-9cca-87adf46fdbe1","type":"message","text":"stack_overflow is buggy, so leave it out","user":"U67BXBF99","ts":"1614357662.094100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IBb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"stack_overflow is buggy, so leave it out"}]}]}]},{"client_msg_id":"0260d10c-3e74-4fe4-8128-61d81a411915","type":"message","text":"Ok thanks. So couldn't I add \"download\" too and have it removed from the buildbot config?","user":"U6QPTG69E","ts":"1614358261.095200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Zwe1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok thanks. So couldn't I add \"download\" too and have it removed from the buildbot config?"}]}]}]},{"client_msg_id":"443f366f-fd6d-4562-b6f5-4c58e12ed72e","type":"message","text":"yep","user":"U67BXBF99","ts":"1614360491.095400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/rhKJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yep"}]}]}]},{"client_msg_id":"002d8c4d-10e3-4304-8093-eb7503049934","type":"message","text":"Any clues on why the `IOBuffer()` loop completes, but the `IOContext(IOBuffer())` loop segfaults about 50-80% of the way through?\nThe code paths in PNGFiles are the pretty much same, just a forwarding of `<http://io.io|io.io>` for the IOContext\n```using PNGFiles\nimg = rand(UInt8,7,7);\nbegin\n    for i in 1:1_000_000\n        PNGFiles.save(IOBuffer(), img)\n    end\n    println(\"first loop done\")\n    for i in 1:1_000_000\n        PNGFiles.save(IOContext(IOBuffer()), img)\n    end\nend```\n<https://github.com/JuliaIO/PNGFiles.jl/issues/32#issuecomment-786930610>","user":"U8MPCDJAY","ts":"1614383386.098900","team":"T68168MUP","edited":{"user":"U8MPCDJAY","ts":"1614384325.000000"},"blocks":[{"type":"rich_text","block_id":"HdTH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Any clues on why the "},{"type":"text","text":"IOBuffer()","style":{"code":true}},{"type":"text","text":" loop completes, but the "},{"type":"text","text":"IOContext(IOBuffer())","style":{"code":true}},{"type":"text","text":" loop segfaults about 50-80% of the way through?\nThe code paths in PNGFiles are the pretty much same, just a forwarding of "},{"type":"link","url":"http://io.io","text":"io.io","style":{"code":true}},{"type":"text","text":" for the IOContext\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using PNGFiles\nimg = rand(UInt8,7,7);\nbegin\n    for i in 1:1_000_000\n        PNGFiles.save(IOBuffer(), img)\n    end\n    println(\"first loop done\")\n    for i in 1:1_000_000\n        PNGFiles.save(IOContext(IOBuffer()), img)\n    end\nend"}]},{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaIO/PNGFiles.jl/issues/32#issuecomment-786930610"}]}]}]},{"client_msg_id":"f4a71d18-66a5-49db-9153-1c1d8d41988b","type":"message","text":"Turns out `<http://io.io|io.io>` wasn’t actually forwarded, and writing directly from a c function to an `IOContext` was the problem\nThe fix\n```if s isa IOContext\n    png_set_write_fn(png_ptr, <http://s.io|s.io>, writecallback_c[], C_NULL)\nelse\n    png_set_write_fn(png_ptr, s, writecallback_c[], C_NULL)\nend```","user":"U8MPCDJAY","ts":"1614385196.100600","team":"T68168MUP","edited":{"user":"U8MPCDJAY","ts":"1614385227.000000"},"blocks":[{"type":"rich_text","block_id":"Wc7AQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Turns out "},{"type":"link","url":"http://io.io","text":"io.io","style":{"code":true}},{"type":"text","text":" wasn’t actually forwarded, and writing directly from a c function to an "},{"type":"text","text":"IOContext","style":{"code":true}},{"type":"text","text":" was the problem\nThe fix\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"if s isa IOContext\n    png_set_write_fn(png_ptr, s.io, writecallback_c[], C_NULL)\nelse\n    png_set_write_fn(png_ptr, s, writecallback_c[], C_NULL)\nend"}]}]}]},{"client_msg_id":"debdd334-de3c-4239-bb37-4d43b8600542","type":"message","text":"commented there","user":"U67BXBF99","ts":"1614387611.101000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cv0Eg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"commented there"}]}]}]},{"client_msg_id":"17bbdb0d-d457-4c7f-90ee-148ab45702fe","type":"message","text":"<https://lwn.net/Articles/847256/>","user":"U67BXBF99","ts":"1614393792.101600","team":"T68168MUP","attachments":[{"title":"A new Debian debuginfod service","title_link":"https://lwn.net/Articles/847256/","text":"Sergio Durigan Junior has announced the availability of a debuginfod server for Debian systems. \"In a nutshell, by using a debuginfod service you will not need to install debuginfo (a.k.a. dbgsym) files anymore; the symbols will be served to GDB (or any other debuginfo consumer that supports debuginfod) over the network. Ultimately, this makes the debugging experience much smoother (I myself never remember the full URL of our debuginfo repository when I need it).\"","fallback":"A new Debian debuginfod service","from_url":"https://lwn.net/Articles/847256/","service_icon":"https://lwn.net/images/favicon.png","service_name":"lwn.net","id":1,"original_url":"https://lwn.net/Articles/847256/"}],"blocks":[{"type":"rich_text","block_id":"z0b","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://lwn.net/Articles/847256/"}]}]}]},{"client_msg_id":"b6c456ae-86ff-4832-a31d-3ed864bc94d5","type":"message","text":"Is there a way to inhibit task switching for a section of code? Or turn it into an error?","user":"U67BJLYCS","ts":"1614474836.121900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Os5C/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a way to inhibit task switching for a section of code? Or turn it into an error?"}]}]}],"thread_ts":"1614474836.121900","reply_count":3,"reply_users_count":2,"latest_reply":"1614475000.122800","reply_users":["U681ELA87","U67BJLYCS"],"subscribed":false},{"client_msg_id":"58b755c1-5a7c-459b-a23b-c10b75a7141a","type":"message","text":"We don't have a Julia side representation of `ptls_states` right?","user":"U67BJLYCS","ts":"1614474961.122300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"he8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We don't have a Julia side representation of "},{"type":"text","text":"ptls_states","style":{"code":true}},{"type":"text","text":" right?"}]}]}]},{"client_msg_id":"e482622f-399a-4283-92dc-d2dc260fe632","type":"message","text":"I would be okay with setting `in_pure_callback` :wink:","user":"U67BJLYCS","ts":"1614475031.123300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C7R","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I would be okay with setting "},{"type":"text","text":"in_pure_callback","style":{"code":true}},{"type":"text","text":" "},{"type":"emoji","name":"wink"}]}]}],"thread_ts":"1614475031.123300","reply_count":4,"reply_users_count":1,"latest_reply":"1614476847.124000","reply_users":["U67BJLYCS"],"subscribed":false},{"client_msg_id":"b3cf791d-33d2-4c2c-ad47-90d38fc2372b","type":"message","text":"<https://llvm.org/docs/JITLink.html>","user":"U67BXBF99","ts":"1614708592.133400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"v9a6R","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://llvm.org/docs/JITLink.html"}]}]}]}]}