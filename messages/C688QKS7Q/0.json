{"cursor": 4, "messages": [{"client_msg_id":"a91e03f8-9192-4121-9b93-bda84adf0e70","type":"message","text":"what exaclty are the “while the optimizer runs” semantics, like I assume I can use LLVM.jl to call arbitrary non julia passes on a llvm module which is a julia data structure, but not yet considered internal julia code\nI can imagine running a julia llvm optimization pass being iffy, and also then running julias “actually turn this object into runnable code via reflection” to break","user":"UN3KKRCRJ","ts":"1613973863.066300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RN7N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what exaclty are the “while the optimizer runs” semantics, like I assume I can use LLVM.jl to call arbitrary non julia passes on a llvm module which is a julia data structure, but not yet considered internal julia code\nI can imagine running a julia llvm optimization pass being iffy, and also then running julias “actually turn this object into runnable code via reflection” to break"}]}]}]},{"client_msg_id":"3b90d0ff-eb8c-472e-bbe5-0300142a42ce","type":"message","text":"anything that doesn't modify the julia global state (bindings, method tables, types) is fine","user":"U674T3KB3","ts":"1613973916.066900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VlaK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"anything that doesn't modify the julia global state (bindings, method tables, types) is fine"}]}]}]},{"client_msg_id":"cc109753-e5c5-4934-b9a0-d4877b8c7b99","type":"message","text":"I guess you could instantiate tuples","user":"U674T3KB3","ts":"1613973987.067700","team":"T68168MUP","edited":{"user":"U674T3KB3","ts":"1613973995.000000"},"blocks":[{"type":"rich_text","block_id":"ndPln","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess you could instantiate tuples"}]}]}]},{"client_msg_id":"cc7d8f7c-02e1-4263-a4c9-faf9a077df16","type":"message","text":"that's legal","user":"U674T3KB3","ts":"1613973990.068000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uHEU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's legal"}]}]}]},{"client_msg_id":"a8a79be1-7d3d-460e-9fdc-beb6137ff9e3","type":"message","text":"I see, so I could say modify existing globals, etc, but can’t create a new type or run a generated function for example?","user":"UN3KKRCRJ","ts":"1613973991.068100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2d+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see, so I could say modify existing globals, etc, but can’t create a new type or run a generated function for example?"}]}]}]},{"client_msg_id":"afe9ca68-ba3d-46a2-a56a-8c670b421768","type":"message","text":"Right you would need to delay any such thing until runtime","user":"U67BJLYCS","ts":"1613974021.069300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0kdo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Right you would need to delay any such thing until runtime"}]}]}]},{"client_msg_id":"81d8f37a-0c3c-4a82-aa0a-a99c81a1e5d8","type":"message","text":"modifying globals is in the \"but be careful\" about it category","user":"U674T3KB3","ts":"1613974029.069500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zPo0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"modifying globals is in the \"but be careful\" about it category"}]}]}]},{"client_msg_id":"20c8783b-b426-47ce-b919-0dc09900b12c","type":"message","text":"the optimizer is supposed to be pure","user":"U674T3KB3","ts":"1613974041.069700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"T1G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the optimizer is supposed to be pure"}]}]}]},{"client_msg_id":"4d4c235b-fa51-47ee-909c-39d7ac18e2f0","type":"message","text":"I mean tuples I think should be sufficient being inline and capable of us constructing an equivalent layout to the struct actually used","user":"UN3KKRCRJ","ts":"1613974066.070000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wmUJV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean tuples I think should be sufficient being inline and capable of us constructing an equivalent layout to the struct actually used"}]}]}]},{"client_msg_id":"24cd61a5-49d1-4ee3-bac7-21a8e98ed46e","type":"message","text":"you'd need to recover julia types from the LLVM allocations though","user":"U674T3KB3","ts":"1613974083.070500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IPKF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you'd need to recover julia types from the LLVM allocations though"}]}]}]},{"client_msg_id":"9b22540b-3e17-43ce-ae46-656175a5d3e0","type":"message","text":"and presumably we could use an Csize_t for anything we dont want managed by julia’s gc","user":"UN3KKRCRJ","ts":"1613974102.071100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+mEL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and presumably we could use an Csize_t for anything we dont want managed by julia’s gc"}]}]}]},{"client_msg_id":"268b95d7-2c7f-4489-a419-e042cc6a99c2","type":"message","text":"which is information you may or may not have","user":"U674T3KB3","ts":"1613974106.071200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AlhI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which is information you may or may not have"}]}]}]},{"client_msg_id":"6a657a01-c949-4b07-bff6-e2821280ae52","type":"message","text":"generating a GC descriptor just requires knowing whether it's a GC tracked pointer or not","user":"U674T3KB3","ts":"1613974131.071900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w=HA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"generating a GC descriptor just requires knowing whether it's a GC tracked pointer or not"}]}]}]},{"client_msg_id":"59b6dca1-c6de-4f4e-8c59-390307bf6538","type":"message","text":"which is visible from the llvm type","user":"U674T3KB3","ts":"1613974153.072400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xCsD9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which is visible from the llvm type"}]}]}]},{"client_msg_id":"ad8c9f7a-2439-48bf-93e8-96c60c0f7327","type":"message","text":"is the size of a static array justa  pointer?","user":"UN3KKRCRJ","ts":"1613974158.072900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c+t+u","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is the size of a static array justa  pointer?"}]}]}]},{"client_msg_id":"3d828be2-9575-4338-afba-7de8dd2f8003","type":"message","text":"yeah I think we have that info at the right time","user":"UN3KKRCRJ","ts":"1613974242.074100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QyXHb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah I think we have that info at the right time"}]}]}]},{"client_msg_id":"469002c4-9e9f-41cf-9e41-44c143f6a937","type":"message","text":"the problem with generating a tuple is that you'd need to know the leaftype, since we don't have any invariant tuples","user":"U674T3KB3","ts":"1613974256.074400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=+M7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the problem with generating a tuple is that you'd need to know the leaftype, since we don't have any invariant tuples"}]}]}]},{"client_msg_id":"1615e1e5-3b92-4acc-bd41-0d98cfc334a2","type":"message","text":"my advice is to just generate the GC descriptor. I think that's by far the safest way to go about it","user":"U674T3KB3","ts":"1613974296.075100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"460","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"my advice is to just generate the GC descriptor. I think that's by far the safest way to go about it"}]}]}]},{"client_msg_id":"fb782d63-2688-40cb-b7b2-8c0708f34463","type":"message","text":"since we’re seeing the allocation itself which has the julia type in it, I think it should be fine?\n\nAlso to be clear I agree with you on generating the GC descriptor as the actual correct way to do, but am now just trying to amke sure my GC understanding is square","user":"UN3KKRCRJ","ts":"1613974349.076600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ve5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"since we’re seeing the allocation itself which has the julia type in it, I think it should be fine?\n\nAlso to be clear I agree with you on generating the GC descriptor as the actual correct way to do, but am now just trying to amke sure my GC understanding is square"}]}]}],"thread_ts":"1613974349.076600","reply_count":5,"reply_users_count":2,"latest_reply":"1613974500.077900","reply_users":["U674T3KB3","UN3KKRCRJ"],"subscribed":false},{"client_msg_id":"532f273b-60cd-4a5f-a3ac-e3706fac80b6","type":"message","text":"Alright, I'm off to bed. But just do the GC descriptor thing. I don't think it should be more than like 100 lines of code total","user":"U674T3KB3","ts":"1613974542.078600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zxXno","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Alright, I'm off to bed. But just do the GC descriptor thing. I don't think it should be more than like 100 lines of code total"}]}]}]},{"client_msg_id":"c92afc51-a99a-42b7-a22c-203192252c79","type":"message","text":"++ Thanks again so much Keno!","user":"UN3KKRCRJ","ts":"1613974554.078800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1fJ9L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"++ Thanks again so much Keno!"}]}]}]},{"client_msg_id":"4bfd9393-5125-4443-935d-1e73b04b39cc","type":"message","text":"Certainly learned a lot :slightly_smiling_face:","user":"UN3KKRCRJ","ts":"1613974561.079000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uEpyE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Certainly learned a lot "},{"type":"emoji","name":"slightly_smiling_face"}]}]}]},{"client_msg_id":"fd60220f-7c18-4d41-b343-977239d25ea8","type":"message","text":"So what’s the plan for this patch?\n<https://github.com/JuliaLang/julia/commit/e23ea66764d6b6d5de7a4ecf289f1c6f8835e27d>","user":"U66GD0880","ts":"1614119765.082800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HFrd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So what’s the plan for this patch?\n"},{"type":"link","url":"https://github.com/JuliaLang/julia/commit/e23ea66764d6b6d5de7a4ecf289f1c6f8835e27d"}]}]}]},{"client_msg_id":"2c767dee-655d-44eb-921b-8476c3508b8c","type":"message","text":"Is this something that is due to our reliance on the wrong unwind library?","user":"U66GD0880","ts":"1614119786.083200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h05=r","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is this something that is due to our reliance on the wrong unwind library?"}]}]}]},{"client_msg_id":"202d43aa-9801-4853-aef2-a48e8d25d299","type":"message","text":"<https://github.com/JuliaLang/julia/pull/36625|https://github.com/JuliaLang/julia/pull/36625>","user":"U674T3KB3","ts":"1614119827.083400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"X+E","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/pull/36625","text":"https://github.com/JuliaLang/julia/pull/36625"}]}]}]},{"client_msg_id":"014ca333-94de-4cdf-a70b-007f6cc10220","type":"message","text":"looks like that branch has stalled out?  What do we need to do to bring that back up to date?","user":"U66GD0880","ts":"1614120588.083800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5KJK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"looks like that branch has stalled out?  What do we need to do to bring that back up to date?"}]}]}]},{"client_msg_id":"ae942686-8a7d-431d-9ec4-2384dcea0daa","type":"message","text":"We need to decide what the behavior on Linux should be and fix it","user":"U674T3KB3","ts":"1614120693.084300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ct/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We need to decide what the behavior on Linux should be and fix it"}]}]}]},{"client_msg_id":"c3e1d023-20e6-4999-931a-f4daa40d3527","type":"message","text":"I guess I'll work on it","user":"U674T3KB3","ts":"1614121476.084500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nGLr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess I'll work on it"}]}]}]},{"client_msg_id":"c5a07cdd-99bd-4bd6-9679-095911a5ff1a","type":"message","text":"since it's the last Darwin aarch64 item (at least in terms of getting it to build)","user":"U674T3KB3","ts":"1614121497.085200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"H7m","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"since it's the last Darwin aarch64 item (at least in terms of getting it to build)"}]}]}],"reactions":[{"name":"fast_parrot","users":["U680THK2S"],"count":1}]},{"client_msg_id":"7d1edbd0-e2f5-46d4-a1fa-6068198a78a8","type":"message","text":"Why does adding `where` below confuse Julia (and some developers, CC <@U67431ELR>)?:\n```julia&gt; struct X{A, B}\n       end\n\njulia&gt; const Y{B, A} = X{A, B} where {A, B}\nX{A,B} where B where A\n\njulia&gt; const Z{B, A} = X{A, B} where {B, A}\nX{A,B} where A where B\n\njulia&gt; Y{2, 1} # confused\nX{2,1}\n\njulia&gt; Z{2, 1} # as expected\nX{1,2}```","user":"U8JAMQGQY","ts":"1614165779.086800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"I0Il9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Why does adding "},{"type":"text","text":"where","style":{"code":true}},{"type":"text","text":" below confuse Julia (and some developers, CC "},{"type":"user","user_id":"U67431ELR"},{"type":"text","text":")?:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> struct X{A, B}\n       end\n\njulia> const Y{B, A} = X{A, B} where {A, B}\nX{A,B} where B where A\n\njulia> const Z{B, A} = X{A, B} where {B, A}\nX{A,B} where A where B\n\njulia> Y{2, 1} # confused\nX{2,1}\n\njulia> Z{2, 1} # as expected\nX{1,2}"}]}]}],"thread_ts":"1614165779.086800","reply_count":8,"reply_users_count":2,"latest_reply":"1614168500.088400","reply_users":["UM30MT6RF","U8JAMQGQY"],"subscribed":false},{"client_msg_id":"0a7ea0c5-d96a-4a71-914d-accc83f5fa63","type":"message","text":"Does `@threadcall` support calling conventions?","user":"U68P09RFZ","ts":"1614226823.089600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TsA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does "},{"type":"text","text":"@threadcall","style":{"code":true}},{"type":"text","text":" support calling conventions?"}]}]}]},{"client_msg_id":"a9427d53-7839-4ca6-8125-95c38d61a6db","type":"message","text":"It appears not","user":"U68P09RFZ","ts":"1614227196.089900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9G9t","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It appears not"}]}]}]},{"client_msg_id":"e1a32bcd-f5ea-4ea3-9767-d19210f79902","type":"message","text":"I noticed thee test files names which are not listed in `testnames` in \"test/choosetests.jl\" : `[\"download\", \"filesystem\", \"stack_overflow\"]`. So I thought to add them, but looking at a CI log of a recent Julia PR (<https://build.julialang.org/#/builders/71/builds/1218>) , I noticed that the \"download\" test seems to still be run, any idea why?","user":"U6QPTG69E","ts":"1614343494.092000","team":"T68168MUP","attachments":[{"text":"Buildbot web UI","fallback":"Buildbot web UI","from_url":"https://build.julialang.org/#/builders/71/builds/1218","service_name":"build.julialang.org","id":1,"original_url":"https://build.julialang.org/#/builders/71/builds/1218"}],"blocks":[{"type":"rich_text","block_id":"e2fg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I noticed thee test files names which are not listed in "},{"type":"text","text":"testnames","style":{"code":true}},{"type":"text","text":" in \"test/choosetests.jl\" : "},{"type":"text","text":"[\"download\", \"filesystem\", \"stack_overflow\"]","style":{"code":true}},{"type":"text","text":". So I thought to add them, but looking at a CI log of a recent Julia PR ("},{"type":"link","url":"https://build.julialang.org/#/builders/71/builds/1218"},{"type":"text","text":") , I noticed that the \"download\" test seems to still be run, any idea why?"}]}]}]},{"client_msg_id":"1d864a07-3bb5-4175-8fcf-2ca0474e7888","type":"message","text":"some are listed in a separate net-enabled block, I think downloads pre-dated that and is explicitly listed in the buildbot config instead","user":"U67BXBF99","ts":"1614357589.093100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jaIC2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"some are listed in a separate net-enabled block, I think downloads pre-dated that and is explicitly listed in the buildbot config instead"}]}]}]},{"client_msg_id":"bcb1a524-0ae5-4067-bdae-af0aab20ed69","type":"message","text":"looks like filesystem is new","user":"U67BXBF99","ts":"1614357632.093400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QWbeS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"looks like filesystem is new"}]}]}]},{"client_msg_id":"ad77430b-249f-446b-b6e1-c8024cb18940","type":"message","text":"```commit e29a1aa21790305bdd7fb85ad844aef0f1719cc7\nAuthor: Ryan Birmingham &lt;birm@rbirm.us&gt;\nDate:   Mon Feb 24 13:35:27 2020 -0500\n\n    add filesystem tests to increase coverage (#34831)```","user":"U67BXBF99","ts":"1614357638.093800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1C4","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"commit e29a1aa21790305bdd7fb85ad844aef0f1719cc7\nAuthor: Ryan Birmingham <birm@rbirm.us>\nDate:   Mon Feb 24 13:35:27 2020 -0500\n\n    add filesystem tests to increase coverage (#34831)"}]}]}]},{"client_msg_id":"aefaf9ce-fbc6-4b17-9cca-87adf46fdbe1","type":"message","text":"stack_overflow is buggy, so leave it out","user":"U67BXBF99","ts":"1614357662.094100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IBb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"stack_overflow is buggy, so leave it out"}]}]}]},{"client_msg_id":"0260d10c-3e74-4fe4-8128-61d81a411915","type":"message","text":"Ok thanks. So couldn't I add \"download\" too and have it removed from the buildbot config?","user":"U6QPTG69E","ts":"1614358261.095200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Zwe1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok thanks. So couldn't I add \"download\" too and have it removed from the buildbot config?"}]}]}]},{"client_msg_id":"443f366f-fd6d-4562-b6f5-4c58e12ed72e","type":"message","text":"yep","user":"U67BXBF99","ts":"1614360491.095400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/rhKJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yep"}]}]}]},{"client_msg_id":"002d8c4d-10e3-4304-8093-eb7503049934","type":"message","text":"Any clues on why the `IOBuffer()` loop completes, but the `IOContext(IOBuffer())` loop segfaults about 50-80% of the way through?\nThe code paths in PNGFiles are the pretty much same, just a forwarding of `<http://io.io|io.io>` for the IOContext\n```using PNGFiles\nimg = rand(UInt8,7,7);\nbegin\n    for i in 1:1_000_000\n        PNGFiles.save(IOBuffer(), img)\n    end\n    println(\"first loop done\")\n    for i in 1:1_000_000\n        PNGFiles.save(IOContext(IOBuffer()), img)\n    end\nend```\n<https://github.com/JuliaIO/PNGFiles.jl/issues/32#issuecomment-786930610>","user":"U8MPCDJAY","ts":"1614383386.098900","team":"T68168MUP","edited":{"user":"U8MPCDJAY","ts":"1614384325.000000"},"blocks":[{"type":"rich_text","block_id":"HdTH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Any clues on why the "},{"type":"text","text":"IOBuffer()","style":{"code":true}},{"type":"text","text":" loop completes, but the "},{"type":"text","text":"IOContext(IOBuffer())","style":{"code":true}},{"type":"text","text":" loop segfaults about 50-80% of the way through?\nThe code paths in PNGFiles are the pretty much same, just a forwarding of "},{"type":"link","url":"http://io.io","text":"io.io","style":{"code":true}},{"type":"text","text":" for the IOContext\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using PNGFiles\nimg = rand(UInt8,7,7);\nbegin\n    for i in 1:1_000_000\n        PNGFiles.save(IOBuffer(), img)\n    end\n    println(\"first loop done\")\n    for i in 1:1_000_000\n        PNGFiles.save(IOContext(IOBuffer()), img)\n    end\nend"}]},{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaIO/PNGFiles.jl/issues/32#issuecomment-786930610"}]}]}]},{"client_msg_id":"f4a71d18-66a5-49db-9153-1c1d8d41988b","type":"message","text":"Turns out `<http://io.io|io.io>` wasn’t actually forwarded, and writing directly from a c function to an `IOContext` was the problem\nThe fix\n```if s isa IOContext\n    png_set_write_fn(png_ptr, <http://s.io|s.io>, writecallback_c[], C_NULL)\nelse\n    png_set_write_fn(png_ptr, s, writecallback_c[], C_NULL)\nend```","user":"U8MPCDJAY","ts":"1614385196.100600","team":"T68168MUP","edited":{"user":"U8MPCDJAY","ts":"1614385227.000000"},"blocks":[{"type":"rich_text","block_id":"Wc7AQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Turns out "},{"type":"link","url":"http://io.io","text":"io.io","style":{"code":true}},{"type":"text","text":" wasn’t actually forwarded, and writing directly from a c function to an "},{"type":"text","text":"IOContext","style":{"code":true}},{"type":"text","text":" was the problem\nThe fix\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"if s isa IOContext\n    png_set_write_fn(png_ptr, s.io, writecallback_c[], C_NULL)\nelse\n    png_set_write_fn(png_ptr, s, writecallback_c[], C_NULL)\nend"}]}]}]},{"client_msg_id":"debdd334-de3c-4239-bb37-4d43b8600542","type":"message","text":"commented there","user":"U67BXBF99","ts":"1614387611.101000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cv0Eg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"commented there"}]}]}]},{"client_msg_id":"17bbdb0d-d457-4c7f-90ee-148ab45702fe","type":"message","text":"<https://lwn.net/Articles/847256/>","user":"U67BXBF99","ts":"1614393792.101600","team":"T68168MUP","attachments":[{"title":"A new Debian debuginfod service","title_link":"https://lwn.net/Articles/847256/","text":"Sergio Durigan Junior has announced the availability of a debuginfod server for Debian systems. \"In a nutshell, by using a debuginfod service you will not need to install debuginfo (a.k.a. dbgsym) files anymore; the symbols will be served to GDB (or any other debuginfo consumer that supports debuginfod) over the network. Ultimately, this makes the debugging experience much smoother (I myself never remember the full URL of our debuginfo repository when I need it).\"","fallback":"A new Debian debuginfod service","from_url":"https://lwn.net/Articles/847256/","service_icon":"https://lwn.net/images/favicon.png","service_name":"lwn.net","id":1,"original_url":"https://lwn.net/Articles/847256/"}],"blocks":[{"type":"rich_text","block_id":"z0b","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://lwn.net/Articles/847256/"}]}]}]},{"client_msg_id":"b6c456ae-86ff-4832-a31d-3ed864bc94d5","type":"message","text":"Is there a way to inhibit task switching for a section of code? Or turn it into an error?","user":"U67BJLYCS","ts":"1614474836.121900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Os5C/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a way to inhibit task switching for a section of code? Or turn it into an error?"}]}]}],"thread_ts":"1614474836.121900","reply_count":3,"reply_users_count":2,"latest_reply":"1614475000.122800","reply_users":["U681ELA87","U67BJLYCS"],"subscribed":false},{"client_msg_id":"58b755c1-5a7c-459b-a23b-c10b75a7141a","type":"message","text":"We don't have a Julia side representation of `ptls_states` right?","user":"U67BJLYCS","ts":"1614474961.122300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"he8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We don't have a Julia side representation of "},{"type":"text","text":"ptls_states","style":{"code":true}},{"type":"text","text":" right?"}]}]}]},{"client_msg_id":"e482622f-399a-4283-92dc-d2dc260fe632","type":"message","text":"I would be okay with setting `in_pure_callback` :wink:","user":"U67BJLYCS","ts":"1614475031.123300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C7R","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I would be okay with setting "},{"type":"text","text":"in_pure_callback","style":{"code":true}},{"type":"text","text":" "},{"type":"emoji","name":"wink"}]}]}],"thread_ts":"1614475031.123300","reply_count":4,"reply_users_count":1,"latest_reply":"1614476847.124000","reply_users":["U67BJLYCS"],"subscribed":false},{"client_msg_id":"b3cf791d-33d2-4c2c-ad47-90d38fc2372b","type":"message","text":"<https://llvm.org/docs/JITLink.html>","user":"U67BXBF99","ts":"1614708592.133400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"v9a6R","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://llvm.org/docs/JITLink.html"}]}]}]},{"type":"message","text":"I'm not sure if I want to \"advertise\" this (too easy to bitrot), but, just in case someone wants to visualize CFG/domtree of Julia's SSA IR now, I added a couple of APIs in <https://github.com/tkf/ShowCode.jl> for the visualizations (x-post <https://github.com/JuliaDebug/Cthulhu.jl/issues/26>)","files":[{"id":"F01QREXPY2V","created":1614974487,"timestamp":1614974487,"name":"image.png","title":"image.png","mimetype":"image/png","filetype":"png","pretty_type":"PNG","user":"UC7AF7NSU","editable":false,"size":70253,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01QREXPY2V/image.png","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01QREXPY2V/download/image.png","thumb_64":"https://files.slack.com/files-tmb/T68168MUP-F01QREXPY2V-c01446f9a1/image_64.png","thumb_80":"https://files.slack.com/files-tmb/T68168MUP-F01QREXPY2V-c01446f9a1/image_80.png","thumb_360":"https://files.slack.com/files-tmb/T68168MUP-F01QREXPY2V-c01446f9a1/image_360.png","thumb_360_w":360,"thumb_360_h":221,"thumb_480":"https://files.slack.com/files-tmb/T68168MUP-F01QREXPY2V-c01446f9a1/image_480.png","thumb_480_w":480,"thumb_480_h":294,"thumb_160":"https://files.slack.com/files-tmb/T68168MUP-F01QREXPY2V-c01446f9a1/image_160.png","thumb_720":"https://files.slack.com/files-tmb/T68168MUP-F01QREXPY2V-c01446f9a1/image_720.png","thumb_720_w":720,"thumb_720_h":441,"thumb_800":"https://files.slack.com/files-tmb/T68168MUP-F01QREXPY2V-c01446f9a1/image_800.png","thumb_800_w":800,"thumb_800_h":490,"original_w":827,"original_h":507,"thumb_tiny":"AwAdADCaGyieFGO7JUE/NTjYQ/7f/fVT2/8Ax7R/7o/lTZZChUrGz5z0NAEX2CHH8f8A31WVk1swyM4bdEyAevesWgB2T7/lSbj70g6UlAG7AM28X+6Kdx+XHSqkV2ViRdnRQOtO+1n+5z9aALf8Nc/Wr9sP9z9ayqAF4/yaPl/yaMmjP0oA/9k=","permalink":"https://julialang.slack.com/files/UC7AF7NSU/F01QREXPY2V/image.png","permalink_public":"https://slack-files.com/T68168MUP-F01QREXPY2V-eb3b6e66f5","is_starred":false,"has_rich_preview":false}],"upload":false,"blocks":[{"type":"rich_text","block_id":"09Apk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not sure if I want to \"advertise\" this (too easy to bitrot), but, just in case someone wants to visualize CFG/domtree of Julia's SSA IR now, I added a couple of APIs in "},{"type":"link","url":"https://github.com/tkf/ShowCode.jl"},{"type":"text","text":" for the visualizations (x-post "},{"type":"link","url":"https://github.com/JuliaDebug/Cthulhu.jl/issues/26"},{"type":"text","text":")"}]}]}],"user":"UC7AF7NSU","display_as_bot":false,"ts":"1614974614.137200","reactions":[{"name":"cool","users":["UM30MT6RF"],"count":1}]},{"client_msg_id":"4da1e1d7-9d90-4d98-ae93-a5efec33d4b9","type":"message","text":"Why are Julia pointers represented as integers in LLVM?\nI'd like to try switching LoopVectorization to use `Core.LLVMPtr{T,0}` instead of `Ptr{T}` internally, and an wondering if I'm missing since reason not to try that.\nThe motivation to try that is too reduce the amount of `inttoptr` and `ptrtoint`. Sometimes these get messed up somehow in loops, where there are multiple `phi` nodes for the same pointer, but each node has different types, e.g. one has `i64` and another has `double*`. Odds are switching to `LLVMPtr` won't help and I'll end up with `i8*` and `double*` instead, but seems worth a try. As is, the `@code_native` indeed shows multiple registers used for the same pointer, often with a super awkward and weird pattern like\n```julia\n# load/store from pa\n# load/store from pb-8\npa = pb\npb += 8\n```\nWhere `pb = pa + 8`, and llvm seems to be well aware of that fact, yet instead extra instructions in the hot loop and uses extra integer registers despite spilling them (i.e., being constrained in the number of integer registers) just outside the hot loop.","user":"UAUPJLBQX","ts":"1615004543.152700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2a9Z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Why are Julia pointers represented as integers in LLVM?\nI'd like to try switching LoopVectorization to use "},{"type":"text","text":"Core.LLVMPtr{T,0}","style":{"code":true}},{"type":"text","text":" instead of "},{"type":"text","text":"Ptr{T}","style":{"code":true}},{"type":"text","text":" internally, and an wondering if I'm missing since reason not to try that.\nThe motivation to try that is too reduce the amount of "},{"type":"text","text":"inttoptr","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"ptrtoint","style":{"code":true}},{"type":"text","text":". Sometimes these get messed up somehow in loops, where there are multiple "},{"type":"text","text":"phi ","style":{"code":true}},{"type":"text","text":"nodes for the same pointer, but each node has different types, e.g. one has "},{"type":"text","text":"i64 ","style":{"code":true}},{"type":"text","text":"and another has "},{"type":"text","text":"double*","style":{"code":true}},{"type":"text","text":". Odds are switching to "},{"type":"text","text":"LLVMPtr","style":{"code":true}},{"type":"text","text":" won't help and I'll end up with "},{"type":"text","text":"i8*","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"double*","style":{"code":true}},{"type":"text","text":" instead, but seems worth a try. As is, the "},{"type":"text","text":"@code_native","style":{"code":true}},{"type":"text","text":" indeed shows multiple registers used for the same pointer, often with a super awkward and weird pattern like\n```julia\n# load/store from pa\n# load/store from pb-8\npa = pb\npb += 8\n```\nWhere "},{"type":"text","text":"pb = pa + 8","style":{"code":true}},{"type":"text","text":", and llvm seems to be well aware of that fact, yet instead extra instructions in the hot loop and uses extra integer registers despite spilling them (i.e., being constrained in the number of integer registers) just outside the hot loop."}]}]}]},{"client_msg_id":"4f39cd0c-97af-456f-b515-c162c00a6d03","type":"message","text":"Basically because we implement arithmetic on them as integer arithmetic","user":"U674T3KB3","ts":"1615004613.153400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4qm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Basically because we implement arithmetic on them as integer arithmetic"}]}]}]},{"client_msg_id":"c1147390-8441-42d1-8228-dd7b01d4fb91","type":"message","text":"so it saves the compiler from emitting inttoptr/ptrtoint to do that arithmetic","user":"U674T3KB3","ts":"1615004634.153900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"S/M0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so it saves the compiler from emitting inttoptr/ptrtoint to do that arithmetic"}]}]}]},{"client_msg_id":"de793ae3-2a8c-474f-8554-56a7a62cd87f","type":"message","text":"at the cost of adding it when you dereference it","user":"U674T3KB3","ts":"1615004642.154300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xEP8t","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"at the cost of adding it when you dereference it"}]}]}]},{"client_msg_id":"ab0de772-15c2-4111-843c-73ead5d6c406","type":"message","text":"```julia&gt; x = rand(10);\n\njulia&gt; @code_llvm pointer(x) + 3\n;  @ pointer.jl:159 within `+'\ndefine i64 @\"julia_+_652\"(i64 zeroext %0, i64 signext %1) {\ntop:\n  %2 = inttoptr i64 %0 to i8*\n  %3 = getelementptr i8, i8* %2, i64 %1\n  %4 = ptrtoint i8* %3 to i64\n  ret i64 %4\n}```","user":"UAUPJLBQX","ts":"1615004748.154600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RfknP","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> x = rand(10);\n\njulia> @code_llvm pointer(x) + 3\n;  @ pointer.jl:159 within `+'\ndefine i64 @\"julia_+_652\"(i64 zeroext %0, i64 signext %1) {\ntop:\n  %2 = inttoptr i64 %0 to i8*\n  %3 = getelementptr i8, i8* %2, i64 %1\n  %4 = ptrtoint i8* %3 to i64\n  ret i64 %4\n}"}]}]}]},{"client_msg_id":"fcc0b16c-13b8-401f-9640-4aec74680952","type":"message","text":"ah right","user":"U674T3KB3","ts":"1615004759.154800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AZz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah right"}]}]}]},{"client_msg_id":"940fdee8-d128-4570-873d-5e5539577da3","type":"message","text":"I guess I did change that","user":"U674T3KB3","ts":"1615004763.155000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qeFRH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess I did change that"}]}]}]},{"client_msg_id":"11487940-bca0-4bf9-b138-774ea2496f04","type":"message","text":"I forget these things sometimes","user":"U674T3KB3","ts":"1615004773.155200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wERw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I forget these things sometimes"}]}]}]},{"client_msg_id":"5e50a300-c361-4167-baf9-73e328be4d0f","type":"message","text":"<@U67BXBF99> probably has opinions","user":"U674T3KB3","ts":"1615004788.155500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QToN","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U67BXBF99"},{"type":"text","text":" probably has opinions"}]}]}]},{"client_msg_id":"f6a3c5c4-8207-421b-a4ef-ef8004669447","type":"message","text":"Tracking variables through phi nodes and all the alias/\"based on\" analysis that llvm does is still a black box to me, so I appreciate the insight.\n\nLoopVectorization uses `getelementptr` via llvmcall anyway, because when unrolling code it does this to encourage llvm to emit code of the form\n```# load/store from baseptr\n# load/store from baseptr + stride\n# load/store from baseptr + 2*stride\n# load/store from baseptr + three_stride\n# load/store from baseptr + 4*stride\n# load/store from baseptr + five_stride\n# load/store from baseptr + 2*three_stride```\netc to use and calculate 4 integer registers instead of 7. This trick probably only works on x86. I should get an ARM to actually learn about their addressing.\ni.e., stride is defined in bytes, and then it bitcasts to a type to get the desired multiple on the stride","user":"UAUPJLBQX","ts":"1615005074.160100","team":"T68168MUP","edited":{"user":"UAUPJLBQX","ts":"1615005187.000000"},"blocks":[{"type":"rich_text","block_id":"4e7za","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Tracking variables through phi nodes and all the alias/\"based on\" analysis that llvm does is still a black box to me, so I appreciate the insight.\n\nLoopVectorization uses "},{"type":"text","text":"getelementptr","style":{"code":true}},{"type":"text","text":" via llvmcall anyway, because when unrolling code it does this to encourage llvm to emit code of the form\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"# load/store from baseptr\n# load/store from baseptr + stride\n# load/store from baseptr + 2*stride\n# load/store from baseptr + three_stride\n# load/store from baseptr + 4*stride\n# load/store from baseptr + five_stride\n# load/store from baseptr + 2*three_stride"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"etc to use and calculate 4 integer registers instead of 7. This trick probably only works on x86. I should get an ARM to actually learn about their addressing.\ni.e., stride is defined in bytes, and then it bitcasts to a type to get the desired multiple on the stride"}]}]}]},{"client_msg_id":"5968206D-C097-4A44-9D71-0B0AD31170D7","type":"message","text":"The main reason was banal (eliminate type mismatches), but has some side-effects. One is that we primarily used them as integers in Julia, since we didn’t have ptr_add","user":"U67BXBF99","ts":"1615011588.162600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EY5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The main reason was banal (eliminate type mismatches), but has some side-effects. One is that we primarily used them as integers in Julia, since we didn’t have ptr_add"}]}]}]},{"client_msg_id":"0FCCFC87-9C00-4BF4-9651-8BF746E43E2C","type":"message","text":"There’s some alias analysis questions upstream, and the provenance may be different for int and pointer, so casting needs to be done fairly explicitly at the source level","user":"U67BXBF99","ts":"1615011692.164700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vvpz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There’s some alias analysis questions upstream, and the provenance may be different for int and pointer, so casting needs to be done fairly explicitly at the source level"}]}]}]},{"client_msg_id":"758FC1DB-090E-4339-BCF6-CA4CBD535197","type":"message","text":"The GEP there potentially makes some strong aliasing claims, which are possibly unexpected, but it also isn’t actually clear if there are claims and what they are","user":"U67BXBF99","ts":"1615011795.166400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"b/x","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The GEP there potentially makes some strong aliasing claims, which are possibly unexpected, but it also isn’t actually clear if there are claims and what they are"}]}]}]}]}