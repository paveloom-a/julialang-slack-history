{"cursor": 6, "messages": [{"client_msg_id":"c701a9c8-2558-4689-a949-4f1e89e58859","type":"message","text":"<@U68A3ASP9> search for products is in <https://github.com/JuliaPackaging/BinaryBuilderBase.jl/blob/master/src/Products.jl|https://github.com/JuliaPackaging/BinaryBuilderBase.jl/blob/master/src/Products.jl> but this file wasn't changed in the last 2 months","user":"UDB26738Q","ts":"1613558562.459900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9jLV","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U68A3ASP9"},{"type":"text","text":" search for products is in "},{"type":"link","url":"https://github.com/JuliaPackaging/BinaryBuilderBase.jl/blob/master/src/Products.jl","text":"https://github.com/JuliaPackaging/BinaryBuilderBase.jl/blob/master/src/Products.jl"},{"type":"text","text":" but this file wasn't changed in the last 2 months"}]}]}],"thread_ts":"1613558562.459900","reply_count":21,"reply_users_count":2,"latest_reply":"1613560066.464300","reply_users":["UDB26738Q","U68A3ASP9"],"subscribed":false},{"client_msg_id":"22bae38b-0d28-42c1-aa4e-26a6b4424681","type":"message","text":"I'm trying to continue the OpenBLAS 64 bits on ARM adventure. Is there some special trick for the SuiteSparse version depending on OpenBLAS?\nSpecifically, OpenBLAS v0.3.10+4 was released recently, is there something special to make SuiteSparse depend on it?","user":"U82RE6STE","ts":"1613600154.465300","team":"T68168MUP","edited":{"user":"U82RE6STE","ts":"1613600386.000000"},"blocks":[{"type":"rich_text","block_id":"k2Vuk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm trying to continue the OpenBLAS 64 bits on ARM adventure. Is there some special trick for the SuiteSparse version depending on OpenBLAS?\nSpecifically, OpenBLAS v0.3.10+4 was released recently, is there something special to make SuiteSparse depend on it?"}]}]}]},{"client_msg_id":"6ec9d4b6-2622-4f85-a48b-8d9e3a5e3586","type":"message","text":"did anything changed in Julia v1.6 regarding `ARGS`?  we're getting meaningless\n````\nERROR: LoadError: UndefVarError: ARGS not defined```","user":"UDB26738Q","ts":"1613680388.470900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3Ui0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"did anything changed in Julia v1.6 regarding "},{"type":"text","text":"ARGS","style":{"code":true}},{"type":"text","text":"?  we're getting meaningless\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"`\nERROR: LoadError: UndefVarError: ARGS not defined"}]}]}],"thread_ts":"1613680388.470900","reply_count":14,"reply_users_count":2,"latest_reply":"1613682625.473700","reply_users":["U67SCG4HG","UDB26738Q"],"subscribed":false},{"client_msg_id":"0aae2362-50f7-4826-87cd-1e529f29d619","type":"message","text":"good, `dsymutil` now segfaults when building libjulia for macos","user":"UDB26738Q","ts":"1613690107.476200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yhi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"good, "},{"type":"text","text":"dsymutil","style":{"code":true}},{"type":"text","text":" now segfaults when building libjulia for macos"}]}]}]},{"client_msg_id":"e0e38ffb-cb2f-469f-8b2b-d01b83847248","type":"message","text":"Hej hej! I am trying to update the SEAL `build_tarballs.jl` in <https://github.com/JuliaPackaging/Yggdrasil/tree/master/S/SEAL|Yggdrasil> for the new v3.6 release of the SEAL library. Since 3.6 they do not bundle the dependencies with SEAL anymore but use CMake's `FetchContent` <https://cmake.org/cmake/help/latest/module/FetchContent.html|feature> to get and build them. However, this does not work in BB since there does not seem to be internet access from within a build environment. What's the recommended way to handle this in a sane way?","user":"UTKCH2WFL","ts":"1613741887.479600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eNz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hej hej! I am trying to update the SEAL "},{"type":"text","text":"build_tarballs.jl","style":{"code":true}},{"type":"text","text":" in "},{"type":"link","url":"https://github.com/JuliaPackaging/Yggdrasil/tree/master/S/SEAL","text":"Yggdrasil"},{"type":"text","text":" for the new v3.6 release of the SEAL library. Since 3.6 they do not bundle the dependencies with SEAL anymore but use CMake's "},{"type":"text","text":"FetchContent","style":{"code":true}},{"type":"text","text":" "},{"type":"link","url":"https://cmake.org/cmake/help/latest/module/FetchContent.html","text":"feature"},{"type":"text","text":" to get and build them. However, this does not work in BB since there does not seem to be internet access from within a build environment. What's the recommended way to handle this in a sane way?"}]}]}],"thread_ts":"1613741887.479600","reply_count":42,"reply_users_count":3,"latest_reply":"1613743915.488900","reply_users":["UDB26738Q","UTKCH2WFL","UH24GRBLL"],"subscribed":false},{"client_msg_id":"00a3c4b3-40c8-49a2-b7bb-7999e0c91a5b","type":"message","text":"Is it kosher to specify a symbolic link as the library product in a `build_tarballs.jl`? Microsoft's SEAL produces `libsealc.so.3.6.2` as a file and has `libsealc.so.3`, `libsealc.so.3.6` and `libsealc.so.3.6.2` point on it (or each other). I was thus wondering if it is ok to actually just name the symbolic link `libsealc.so` as the product, as otherwise the product needs to be changed with each new release (which wouldn't be such a huge issue either, I guess).","user":"UTKCH2WFL","ts":"1613749467.495500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LRI0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is it kosher to specify a symbolic link as the library product in a "},{"type":"text","text":"build_tarballs.jl","style":{"code":true}},{"type":"text","text":"? Microsoft's SEAL produces "},{"type":"text","text":"libsealc.so.3.6.2","style":{"code":true}},{"type":"text","text":" as a file and has "},{"type":"text","text":"libsealc.so.3","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"libsealc.so.3.6","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"libsealc.so.3.6.2","style":{"code":true}},{"type":"text","text":" point on it (or each other). I was thus wondering if it is ok to actually just name the symbolic link "},{"type":"text","text":"libsealc.so","style":{"code":true}},{"type":"text","text":" as the product, as otherwise the product needs to be changed with each new release (which wouldn't be such a huge issue either, I guess)."}]}]}],"thread_ts":"1613749467.495500","reply_count":3,"reply_users_count":2,"latest_reply":"1613749656.496000","reply_users":["UTKCH2WFL","UDB26738Q"],"subscribed":false},{"client_msg_id":"86f84590-dd36-4671-b823-e65efeccf9ce","type":"message","text":"cool, CompatHelper for BinaryBuilder has been crashing for 5 months and I just noticed it: <https://github.com/JuliaPackaging/BinaryBuilder.jl/actions/workflows/CompatHelper.yml>","user":"UDB26738Q","ts":"1613755260.496900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FHKPU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"cool, CompatHelper for BinaryBuilder has been crashing for 5 months and I just noticed it: "},{"type":"link","url":"https://github.com/JuliaPackaging/BinaryBuilder.jl/actions/workflows/CompatHelper.yml"}]}]}],"thread_ts":"1613755260.496900","reply_count":1,"reply_users_count":1,"latest_reply":"1613755444.497000","reply_users":["UDB26738Q"],"subscribed":false},{"client_msg_id":"21ee8821-1db1-4a87-8ca3-8ee0300bbda0","type":"message","text":"Could I get a final review on: <https://github.com/JuliaPackaging/Yggdrasil/pull/2594>?","user":"U679T6QF7","ts":"1613759990.497900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h59CZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Could I get a final review on: "},{"type":"link","url":"https://github.com/JuliaPackaging/Yggdrasil/pull/2594"},{"type":"text","text":"?"}]}]}],"thread_ts":"1613759990.497900","reply_count":4,"reply_users_count":3,"latest_reply":"1613761014.498700","reply_users":["UDB26738Q","U679T6QF7","U66GD0880"],"subscribed":false},{"client_msg_id":"7dc097eb-912e-4ee0-a8d4-4a22c23d1fa9","type":"message","text":"While building binary to Xyce I'm at the `configure`  stage. I'm given an errorthat <http://www.fftw.org/|FFTW3> is missing. It doesn't have any _jll file to add it as a dependency.  (I can disable it. But it would be nice to have it)\n\n*Edit* found fftw_jll which serves the purpose.\n\nAnother file is <https://github.com/westes/flex|FLEX>. Wizard builds the configure without it. But *fails* at the `make` stage. How do I add this as a dependency? (Should I add as \"an additional source in step 2a\") or is there a package that provides it.","user":"UN5FQHFNY","ts":"1613802408.006100","team":"T68168MUP","edited":{"user":"UN5FQHFNY","ts":"1613804638.000000"},"attachments":[{"title":"FFTW Home Page","title_link":"http://www.fftw.org/","text":"A fast, free C FFT library; includes real-complex, multidimensional, and parallel transforms. Benchmarked against many other FFTs.","fallback":"FFTW Home Page","from_url":"http://www.fftw.org/","service_icon":"http://www.fftw.org/favicon.ico","service_name":"fftw.org","id":1,"original_url":"http://www.fftw.org/"}],"blocks":[{"type":"rich_text","block_id":"naM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"While building binary to Xyce I'm at the "},{"type":"text","text":"configure","style":{"code":true}},{"type":"text","text":"  stage. I'm given an errorthat "},{"type":"link","url":"http://www.fftw.org/","text":"FFTW3"},{"type":"text","text":" is missing. It doesn't have any _jll file to add it as a dependency.  (I can disable it. But it would be nice to have it)\n\n*Edit* found fftw_jll which serves the purpose.\n\nAnother file is "},{"type":"link","url":"https://github.com/westes/flex","text":"FLEX"},{"type":"text","text":". Wizard builds the configure without it. But "},{"type":"text","text":"fails","style":{"bold":true}},{"type":"text","text":" at the "},{"type":"text","text":"make","style":{"code":true}},{"type":"text","text":" stage. How do I add this as a dependency? (Should I add as \"an additional source in step 2a\") or is there a package that provides it."}]}]}],"thread_ts":"1613802408.006100","reply_count":2,"reply_users_count":2,"latest_reply":"1613804512.007900","reply_users":["UTKCH2WFL","UN5FQHFNY"],"subscribed":false},{"client_msg_id":"38dbcf65-22f3-4fe2-bdcd-d0ffce4e07af","type":"message","text":"Can I ask what's the progress with <https://github.com/JuliaLang/julia/issues/34276> ? Just tried Julia after a long time on a linux laptop, and immediately hit that :disappointed:","user":"U679VPJ8L","ts":"1613854927.009800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JiXso","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can I ask what's the progress with "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/34276"},{"type":"text","text":" ? Just tried Julia after a long time on a linux laptop, and immediately hit that "},{"type":"emoji","name":"disappointed"}]}]}]},{"client_msg_id":"a3ffc1fc-e935-4c05-a9e8-6f15573e85ff","type":"message","text":"Is there an example of a package that installs a binary cli tool via the binarybuilder/jll infrastructure?\n\nBasically I'd like to be able to run `]add FooCLI` to install a binary built with BinaryBuilder to be used outside of Julia too. And then `]up` should update it etc\n\n(this might be the wrong channel/approach entirely)","user":"U6C5KSWAC","ts":"1613932268.012800","team":"T68168MUP","edited":{"user":"U6C5KSWAC","ts":"1613932362.000000"},"blocks":[{"type":"rich_text","block_id":"ce7x","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there an example of a package that installs a binary cli tool via the binarybuilder/jll infrastructure?\n\nBasically I'd like to be able to run "},{"type":"text","text":"]add FooCLI","style":{"code":true}},{"type":"text","text":" to install a binary built with BinaryBuilder to be used outside of Julia too. And then "},{"type":"text","text":"]up","style":{"code":true}},{"type":"text","text":" should update it etc\n\n(this might be the wrong channel/approach entirely)"}]}]}]},{"client_msg_id":"fd1242fd-7396-4e76-8097-d34ce85dd753","type":"message","text":"<https://discourse.julialang.org/t/announcing-ygg/54687|https://discourse.julialang.org/t/announcing-ygg/54687> might be relevant","user":"U67D54KS8","ts":"1613932415.013300","team":"T68168MUP","attachments":[{"service_name":"JuliaLang","title":"Announcing ygg","title_link":"https://discourse.julialang.org/t/announcing-ygg/54687","text":"ygg ygg is a simple installer for using BinaryBuilder.jl built binaries from Yggdrasil outside of Julia. Installing ygg is simple (see the README), and then installing binaries is even simpler. Here is an example of adding the fzf fuzzy finder: $ ygg install fzf The list of binaries that is currently available (see README) is just the ones I have used myself. Adding new ones is, generally, as simple as adding a line in the Makefile as in this commit. Feel free to add your favorite program to t...","fallback":"JuliaLang: Announcing ygg","thumb_url":"https://aws1.discourse-cdn.com/business5/uploads/julialang/original/2X/1/12829a7ba92b924d4ce81099cbf99785bee9b405.png","fields":[{"title":"Reading time","value":"1 mins :clock2:","short":true},{"title":"Likes","value":"78 :heart:","short":true}],"ts":1612533783,"from_url":"https://discourse.julialang.org/t/announcing-ygg/54687","thumb_width":408,"thumb_height":263,"service_icon":"https://aws1.discourse-cdn.com/business5/uploads/julialang/optimized/2X/6/6ca888e296f59ca2a599807f7d5edd489e3d1829_2_180x180.png","id":1,"original_url":"https://discourse.julialang.org/t/announcing-ygg/54687"}],"blocks":[{"type":"rich_text","block_id":"/S8","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://discourse.julialang.org/t/announcing-ygg/54687","text":"https://discourse.julialang.org/t/announcing-ygg/54687"},{"type":"text","text":" might be relevant"}]}]}],"reactions":[{"name":"+1","users":["U6C5KSWAC"],"count":1}]},{"client_msg_id":"8bcc70c1-0bfb-4950-8d7f-2259e8f53b10","type":"message","text":"`ygg` itself won't work, I don't want to use an extra tool for this. But I'll take a look at the source to see if I can replicate what it does somehow, thanks :slightly_smiling_face:","user":"U6C5KSWAC","ts":"1613932967.014200","team":"T68168MUP","edited":{"user":"U6C5KSWAC","ts":"1613932974.000000"},"blocks":[{"type":"rich_text","block_id":"LmEHW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ygg","style":{"code":true}},{"type":"text","text":" itself won't work, I don't want to use an extra tool for this. But I'll take a look at the source to see if I can replicate what it does somehow, thanks "},{"type":"emoji","name":"slightly_smiling_face"}]}]}]},{"client_msg_id":"84eeb54a-2021-4f26-809a-72f77822755f","type":"message","text":"Can we binary build go dependencies?","user":"U6A936746","ts":"1613941937.016100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TvWBD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can we binary build go dependencies?"}]}]}]},{"client_msg_id":"8779c9a0-ad93-4ddc-b73e-25f4e2fa403e","type":"message","text":"I hit the root required issue documented by BB. The surprising part is that the issue is indicated as fixed on Ubuntu after Xenial, and I'm running Bionic:\n```opt18% lsb_release -a\nLSB Version:\tcore-9.20170808ubuntu1-noarch:security-9.20170808ubuntu1-noarch\nDistributor ID:\tUbuntu\nDescription:\tUbuntu 18.04.5 LTS\nRelease:\t18.04\nCodename:\tbionic```\nContext:\nthe documentation in BB is this one: <https://docs.binarybuilder.org/latest/FAQ/#At-line-XXX,-ABORTED-(Operation-not-permitted)>\nrunning BB master on Julia 1.6\nBug report on Ubuntu: <https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1531747>","user":"U82RE6STE","ts":"1614006691.018200","team":"T68168MUP","edited":{"user":"U82RE6STE","ts":"1614006795.000000"},"attachments":[{"service_name":"Launchpad","title":"Bug #1531747 “overlay: mkdir fails if directory exists in lowerd...” : Bugs : linux package : Ubuntu","title_link":"https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1531747","text":"If a directory exists in the lowerdir but not in the mounted overlay, then mkdir of the directory in the target dir results in a mysterious -EPERM. I've seen this both in wily kernel (4.2.0-22-generic #27-Ubuntu) and in a hand-built xenial master-next (with unrelated patches added). ===================================================== #!/bin/sh -ex dir=`mktemp -d` cleanup() {  umount -l $dir/t  rm -rf $dir } trap cleanup EXIT echo \"dir is $dir\" mkdir -p $dir/l $dir/u $dir/w $dir/t mkdir ...","fallback":"Launchpad: Bug #1531747 “overlay: mkdir fails if directory exists in lowerd...” : Bugs : linux package : Ubuntu","from_url":"https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1531747","thumb_url":"https://bugs.launchpad.net/@@/launchpad.png","thumb_width":16,"thumb_height":16,"service_icon":"https://bugs.launchpad.net/@@/launchpad.png","id":1,"original_url":"https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1531747"}],"blocks":[{"type":"rich_text","block_id":"/RN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I hit the root required issue documented by BB. The surprising part is that the issue is indicated as fixed on Ubuntu after Xenial, and I'm running Bionic:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"opt18% lsb_release -a\nLSB Version:\tcore-9.20170808ubuntu1-noarch:security-9.20170808ubuntu1-noarch\nDistributor ID:\tUbuntu\nDescription:\tUbuntu 18.04.5 LTS\nRelease:\t18.04\nCodename:\tbionic"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Context:\nthe documentation in BB is this one: "},{"type":"link","url":"https://docs.binarybuilder.org/latest/FAQ/#At-line-XXX,-ABORTED-(Operation-not-permitted)"},{"type":"text","text":"\nrunning BB master on Julia 1.6\nBug report on Ubuntu: "},{"type":"link","url":"https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1531747"}]}]}]},{"client_msg_id":"b3663d9f-e879-41d2-998b-61b87d781760","type":"message","text":"I am trying to get BinaryBuilder to run on archlinux, on Julia 1.6.0-beta1. I start Julia with `env BINARYBUILDER_RUNNER=\"privileged\" julia`  (I also tried with sudo) and then I run the BinaryBuilder wizzard. When I am droppend into this compilation shell, I get an error message:\n```mount: /tmp/jl_8QzH5I/wwbWJHvS/.mounts/Rootfs.v2021.1.22.x86_64-linux-musl.squashfs: mount failed: Operation not permitted.\nfailed process: Process(`mount /root/.julia/scratchspaces/7f725544-6523-48cd-82d1-3fa08ff4056e/c00439a5aac2cd79e14acf22c6fd329297be0559/Rootfs.v2021.1.22.x86_64-linux-musl.squashfs_0.squashfs /tmp/jl_8QzH5I/wwbWJHvS/.mounts/Rootfs.v2021.1.22.x86_64-linux-musl.squashfs -o ro,loop`, ProcessExited(1)) [1]```\nAm I missing something? Do I somehow need to set certain privileges?","user":"UBEF50B7C","ts":"1614036514.021200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+e=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am trying to get BinaryBuilder to run on archlinux, on Julia 1.6.0-beta1. I start Julia with "},{"type":"text","text":"env BINARYBUILDER_RUNNER=\"privileged\" julia","style":{"code":true}},{"type":"text","text":"  (I also tried with sudo) and then I run the BinaryBuilder wizzard. When I am droppend into this compilation shell, I get an error message:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"mount: /tmp/jl_8QzH5I/wwbWJHvS/.mounts/Rootfs.v2021.1.22.x86_64-linux-musl.squashfs: mount failed: Operation not permitted.\nfailed process: Process(`mount /root/.julia/scratchspaces/7f725544-6523-48cd-82d1-3fa08ff4056e/c00439a5aac2cd79e14acf22c6fd329297be0559/Rootfs.v2021.1.22.x86_64-linux-musl.squashfs_0.squashfs /tmp/jl_8QzH5I/wwbWJHvS/.mounts/Rootfs.v2021.1.22.x86_64-linux-musl.squashfs -o ro,loop`, ProcessExited(1)) [1]"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Am I missing something? Do I somehow need to set certain privileges?"}]}]}],"thread_ts":"1614036514.021200","reply_count":8,"reply_users_count":2,"latest_reply":"1614037385.022800","reply_users":["UDB26738Q","UBEF50B7C"],"subscribed":false},{"client_msg_id":"6aa6a000-1278-4374-97ba-956066a66289","type":"message","text":"Just FYI I am building an aarch64-ILP64 SuiteSparse 5.4.1 that doesn’t link to LBT","user":"U66GD0880","ts":"1614104400.024300","team":"T68168MUP","edited":{"user":"U66GD0880","ts":"1614104416.000000"},"blocks":[{"type":"rich_text","block_id":"cFoKG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Just FYI I am building an aarch64-ILP64 SuiteSparse 5.4.1 that doesn’t link to LBT"}]}]}]},{"client_msg_id":"b9f45870-6938-4442-a811-cc12ebd9e3d8","type":"message","text":"so that we can un-break `master` without rushing LBT into Julia main","user":"U66GD0880","ts":"1614104429.024900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7gz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so that we can un-break "},{"type":"text","text":"master","style":{"code":true}},{"type":"text","text":" without rushing LBT into Julia main"}]}]}]},{"client_msg_id":"0e65ec99-f4bd-4824-a6fd-e81449a150b2","type":"message","text":"<https://github.com/JuliaLang/julia/issues/34276>\nI think this is solved now?","user":"U7V6YNG04","ts":"1614136894.026000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FFi+","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/issues/34276"},{"type":"text","text":"\nI think this is solved now?"}]}]}]},{"client_msg_id":"468e2549-0a2a-4379-a2dc-8c2f894ca30c","type":"message","text":"The Great Apple Silicon Party is finally upon us (gasp!).  I can build Julia and try to install packages and it all works…. except for the fact that very, very few JLLs are actually built for Apple Silicon.  It’s time to figure out how to build things for apple silicon by default.\n\nThe only complicating factor is that any JLL that supports apple silicon will need to be Julia 1.6+, since it generates `Artifacts.toml` files that are illegal.  Absent a clever workaround for that issue, I think the best path forward is as follows:\n\n* Change `supported_platforms()` in BB to include `armv6l` and `aarch64-darwin` in the list by default.\n* Set BB to default `julia_compat` to `1.6+`.\n* Rebuild a lot of stuff","user":"U66GD0880","ts":"1614146035.030500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1qE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The Great Apple Silicon Party is finally upon us (gasp!).  I can build Julia and try to install packages and it all works…. except for the fact that very, very few JLLs are actually built for Apple Silicon.  It’s time to figure out how to build things for apple silicon by default.\n\nThe only complicating factor is that any JLL that supports apple silicon will need to be Julia 1.6+, since it generates "},{"type":"text","text":"Artifacts.toml","style":{"code":true}},{"type":"text","text":" files that are illegal.  Absent a clever workaround for that issue, I think the best path forward is as follows:\n\n* Change "},{"type":"text","text":"supported_platforms()","style":{"code":true}},{"type":"text","text":" in BB to include "},{"type":"text","text":"armv6l","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"aarch64-darwin","style":{"code":true}},{"type":"text","text":" in the list by default.\n* Set BB to default "},{"type":"text","text":"julia_compat","style":{"code":true}},{"type":"text","text":" to "},{"type":"text","text":"1.6+","style":{"code":true}},{"type":"text","text":".\n* Rebuild a lot of stuff"}]}]}],"thread_ts":"1614146035.030500","reply_count":1,"reply_users_count":1,"latest_reply":"1614147381.031300","reply_users":["UCTJ1TGBV"],"subscribed":false,"reactions":[{"name":"apple","users":["U66GD0880"],"count":1},{"name":"arrow_right","users":["U66GD0880"],"count":1},{"name":"green_apple","users":["U66GD0880"],"count":1},{"name":"clapping","users":["UCTJ1TGBV"],"count":1}]},{"client_msg_id":"406d19d1-c20d-4d59-89e4-6d44be98d2a1","type":"message","text":"<https://dev.azure.com/JuliaPackaging/Yggdrasil/_build/results?buildId=9295&amp;view=logs&amp;j=2d1ccded-31ea-509c-66dd-f7e298296069&amp;t=51d4666b-8a2b-5399-627b-d374cc82c1a0&amp;l=8444>\n\n```/opt/bin/x86_64-linux-gnu-libgfortran3-cxx03/c++filt: line 5:     3 Segmentation fault      \"$@\"```\n:tombstone:","user":"UDB26738Q","ts":"1614333543.035900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pDsN3","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://dev.azure.com/JuliaPackaging/Yggdrasil/_build/results?buildId=9295&view=logs&j=2d1ccded-31ea-509c-66dd-f7e298296069&t=51d4666b-8a2b-5399-627b-d374cc82c1a0&l=8444"},{"type":"text","text":"\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"/opt/bin/x86_64-linux-gnu-libgfortran3-cxx03/c++filt: line 5:     3 Segmentation fault      \"$@\""}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n"},{"type":"emoji","name":"tombstone"}]}]}]},{"client_msg_id":"497dafa6-5546-442a-a2ef-1fdb7814cc5b","type":"message","text":"Is there a builtin cross-platform solution to fix warnings like\n```┌ Warning: Minimum instruction set detected for bin/rubberband is sandybridge, not x86_64 as desired.\n└ @ BinaryBuilder.Auditor ~/.julia/packages/BinaryBuilder/OMMHj/src/Auditor.jl:269```\nI am guessing I just need to add `-march=x86_64` to the `CXXFLAGS`, but that won't work for other platforms of course.","user":"UM30MT6RF","ts":"1614445520.037700","team":"T68168MUP","edited":{"user":"UM30MT6RF","ts":"1614445547.000000"},"blocks":[{"type":"rich_text","block_id":"fqPl6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a builtin cross-platform solution to fix warnings like\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"┌ Warning: Minimum instruction set detected for bin/rubberband is sandybridge, not x86_64 as desired.\n└ @ BinaryBuilder.Auditor ~/.julia/packages/BinaryBuilder/OMMHj/src/Auditor.jl:269"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I am guessing I just need to add "},{"type":"text","text":"-march=x86_64","style":{"code":true}},{"type":"text","text":" to the "},{"type":"text","text":"CXXFLAGS","style":{"code":true}},{"type":"text","text":", but that won't work for other platforms of course."}]}]}],"thread_ts":"1614445520.037700","reply_count":31,"reply_users_count":3,"latest_reply":"1614446910.044100","reply_users":["UDB26738Q","UM30MT6RF","U67BJLYCS"],"subscribed":false},{"client_msg_id":"7bd8ef10-6512-4f35-86fa-5955dcc00a75","type":"message","text":"&gt; (You probably don't want to use the configure script on macOS -- just use your preferred Makefile directly.)\n:face_with_rolling_eyes:","user":"UM30MT6RF","ts":"1614449537.050000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TKy","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"(You probably don't want to use the configure script on macOS -- just use your preferred Makefile directly.)"}]},{"type":"rich_text_section","elements":[{"type":"emoji","name":"face_with_rolling_eyes"}]}]}]},{"client_msg_id":"e632570d-b007-45b9-933d-54425f478b9d","type":"message","text":"I'm building a build_tarballs.jl with the wizard for Help2man.\n\nAfter\n```./configure --prefix=$prefix --host=$target\nmake\nmake install```\nIt installs an empty help2man directory in lib and creates a `help2man` of `perl script text executable` type in the bin . This is not recognized as a binary artifact. Is there any command I can use?","user":"UN5FQHFNY","ts":"1614581685.055900","team":"T68168MUP","edited":{"user":"UN5FQHFNY","ts":"1614581705.000000"},"blocks":[{"type":"rich_text","block_id":"Vl+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm building a build_tarballs.jl with the wizard for Help2man.\n\nAfter\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"./configure --prefix=$prefix --host=$target\nmake\nmake install"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"It installs an empty help2man directory in lib and creates a "},{"type":"text","text":"help2man","style":{"code":true}},{"type":"text","text":" of "},{"type":"text","text":"perl script text executable","style":{"code":true}},{"type":"text","text":" type in the bin . This is not recognized as a binary artifact. Is there any command I can use?"}]}]}]},{"client_msg_id":"c2c89610-674c-44dd-afaf-11612dff4d3a","type":"message","text":"<@UDB26738Q> <@U66GD0880> (CC <@U85R3JJ8L> <@U01CH05FTMM>) we are having a coding sprint this week, and I'd like to resolve the <https://github.com/JuliaPackaging/BinaryBuilderBase.jl/issues/89|BBB issue \"Meta JSON serialization does not preserve VersionSpec #89\"> . I see two paths forward, and ideally like to hear your thoughts first before I implemented one approach and it gets shot down because you prefer the other (not that it is my experience when working with you guys that you do that a lot, but sometimes one has to, I understand)","user":"U012FH66MFW","ts":"1614597299.060000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aCn","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UDB26738Q"},{"type":"text","text":" "},{"type":"user","user_id":"U66GD0880"},{"type":"text","text":" (CC "},{"type":"user","user_id":"U85R3JJ8L"},{"type":"text","text":" "},{"type":"user","user_id":"U01CH05FTMM"},{"type":"text","text":") we are having a coding sprint this week, and I'd like to resolve the "},{"type":"link","url":"https://github.com/JuliaPackaging/BinaryBuilderBase.jl/issues/89","text":"BBB issue \"Meta JSON serialization does not preserve VersionSpec #89\""},{"type":"text","text":" . I see two paths forward, and ideally like to hear your thoughts first before I implemented one approach and it gets shot down because you prefer the other (not that it is my experience when working with you guys that you do that a lot, but sometimes one has to, I understand)"}]}]}]},{"client_msg_id":"260c7e3a-8e28-4640-9093-9bf2bdad1dff","type":"message","text":"So the core of the issue is IMHO that dependencies are specified as a PackageSpec, and the version therein as a VersionSpec: `Dependency(PackageSpec(name=\"FLINT_jll\", version=VersionSpec(\"200.700\")))`. However, to make use of that VersionSpec, we have to put it into a Project.toml compat entry. But while there is a function to convert those to a VersionSpec (`Pkg.Types.semver_spec`) there is no converse. And the reason for that is IMHO clear: one cannot define such a function globally, at least not if one wants it to be \"inverse\" to `Pkg.Types.semver_spec` simply because `Pkg.Types.semver_spec` is not surjective.","user":"U012FH66MFW","ts":"1614597513.062000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qjhHc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So the core of the issue is IMHO that dependencies are specified as a PackageSpec, and the version therein as a VersionSpec: "},{"type":"text","text":"Dependency(PackageSpec(name=\"FLINT_jll\", version=VersionSpec(\"200.700\")))","style":{"code":true}},{"type":"text","text":". However, to make use of that VersionSpec, we have to put it into a Project.toml compat entry. But while there is a function to convert those to a VersionSpec ("},{"type":"text","text":"Pkg.Types.semver_spec","style":{"code":true}},{"type":"text","text":") there is no converse. And the reason for that is IMHO clear: one cannot define such a function globally, at least not if one wants it to be \"inverse\" to "},{"type":"text","text":"Pkg.Types.semver_spec","style":{"code":true}},{"type":"text","text":" simply because "},{"type":"text","text":"Pkg.Types.semver_spec","style":{"code":true}},{"type":"text","text":" is not surjective."}]}]}]},{"client_msg_id":"790e02d9-81ce-476b-9305-00f810373bc9","type":"message","text":"i.e. there are VersionSpec which cannot be expressed as compat entries. Pretty basic ones, in fact. It gets worse if you want to produce Project.toml files that are readable by Julia 1.0-1.3, as there you are not even allowed to use ranges `1.2.1 - 1.2.3`","user":"U012FH66MFW","ts":"1614597556.063000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jIR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i.e. there are VersionSpec which cannot be expressed as compat entries. Pretty basic ones, in fact. It gets worse if you want to produce Project.toml files that are readable by Julia 1.0-1.3, as there you are not even allowed to use ranges "},{"type":"text","text":"1.2.1 - 1.2.3","style":{"code":true}}]}]}]},{"client_msg_id":"4bf33fda-0943-4af4-9c28-6ba81a2649da","type":"message","text":"Solution 1 is to still write a partial inverse: a function `spec_semver` which satisfies `spec_semver(semver_spec(spec)) == spec`  and also `semver_spec(spec_semver(compat)) == compat` \"whenever possible\", and otherwise perhaps throws an error. Actually, based on experiments I don't think that's possible w/o rejecting very basic version specs, so one may need to relax that and only ask for `spec_semver(semver_spec(spec_semver(compat))) == spec_semver(compat)` (as `spec_semver` is not injective) and perhaps `semver_spec(spec_semver(semver_spec(spec))) == semver_spec(spec)` (I need to dig up my examples, I've been working on this a couple weeks ago, but never had enough contiguous time left for it to get anywhere). Overall, it'll never be perfect, but it might be possible to do it \"good enough\"","user":"U012FH66MFW","ts":"1614597955.067900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7Y0bh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Solution 1 is to still write a partial inverse: a function "},{"type":"text","text":"spec_semver","style":{"code":true}},{"type":"text","text":" which satisfies "},{"type":"text","text":"spec_semver(semver_spec(spec)) == spec","style":{"code":true}},{"type":"text","text":"  and also "},{"type":"text","text":"semver_spec(spec_semver(compat)) == compat","style":{"code":true}},{"type":"text","text":" \"whenever possible\", and otherwise perhaps throws an error. Actually, based on experiments I don't think that's possible w/o rejecting very basic version specs, so one may need to relax that and only ask for "},{"type":"text","text":"spec_semver(semver_spec(spec_semver(compat))) == spec_semver(compat)","style":{"code":true}},{"type":"text","text":" (as "},{"type":"text","text":"spec_semver","style":{"code":true}},{"type":"text","text":" is not injective) and perhaps "},{"type":"text","text":"semver_spec(spec_semver(semver_spec(spec))) == semver_spec(spec)","style":{"code":true}},{"type":"text","text":" (I need to dig up my examples, I've been working on this a couple weeks ago, but never had enough contiguous time left for it to get anywhere). Overall, it'll never be perfect, but it might be possible to do it \"good enough\""}]}]}]},{"client_msg_id":"4a1563b1-f2e3-4783-9a4d-724b6635825c","type":"message","text":"Solution 2 is IMHO more sane, don't use a `VersionSpec` in the build_tarball, but instead provide a compat string...","user":"U012FH66MFW","ts":"1614598003.069300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jrs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Solution 2 is IMHO more sane, don't use a "},{"type":"text","text":"VersionSpec","style":{"code":true}},{"type":"text","text":" in the build_tarball, but instead provide a compat string..."}]}]}]},{"client_msg_id":"2c4fcba4-7606-4b85-af71-3639e1c8c179","type":"message","text":"of course that then raises the question how to make it work with a `PackageSpec`","user":"U012FH66MFW","ts":"1614598018.069800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h8p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"of course that then raises the question how to make it work with a "},{"type":"text","text":"PackageSpec","style":{"code":true}}]}]}]},{"client_msg_id":"5b3122bf-faf5-4a79-8b20-795837e8112b","type":"message","text":"one option would be to use a syntax like this: `Dependency(PackageSpec(name=\"FLINT_jll\"), compat=\"...\")` and then use `semver_spec(dep.compat)` to populate the VersionSpec field of the PackageSpec","user":"U012FH66MFW","ts":"1614598057.070600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ASn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"one option would be to use a syntax like this: "},{"type":"text","text":"Dependency(PackageSpec(name=\"FLINT_jll\"), compat=\"...\")","style":{"code":true}},{"type":"text","text":" and then use "},{"type":"text","text":"semver_spec(dep.compat)","style":{"code":true}},{"type":"text","text":" to populate the VersionSpec field of the PackageSpec"}]}]}]},{"client_msg_id":"1d412196-2847-4d7d-9f01-17fc6bf6b33a","type":"message","text":"(and if the user provides both, I guess it should produce an error)","user":"U012FH66MFW","ts":"1614598080.071100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dQcfr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(and if the user provides both, I guess it should produce an error)"}]}]}]},{"client_msg_id":"de9c0b1f-a08d-496e-b981-ed467c7d87a8","type":"message","text":"perhaps I am missing some alternatives, and/or further issues, so I'll shut up now and wait a bit to see if anybody has any remarks :slightly_smiling_face:","user":"U012FH66MFW","ts":"1614598100.071600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wPpY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"perhaps I am missing some alternatives, and/or further issues, so I'll shut up now and wait a bit to see if anybody has any remarks "},{"type":"emoji","name":"slightly_smiling_face"}]}]}]},{"client_msg_id":"fffd0bff-f544-4509-a506-63f1afc96928","type":"message","text":"To do this, I think what is required is:\n\n- Remove `VersionBound` from Pkg (<https://github.com/JuliaLang/Pkg.jl/blob/6e8b621474a613f7174f95425a842bfd13dd416d/src/Versions.jl#L10>) and replace it with `VersionNumber`. Update all the needed functionality.\n- Make the resolver work with these `VersionNumber` s instead (pretty much revert <https://github.com/JuliaLang/Pkg.jl/pull/73/commits/f5eff1215b2de405fcd6c65ba7f90a02b448e729>).\n- Update everything else that parses and writes `VersionSpec` to work now when the \"atom\" is a `VersionNumber` instead of a `VersionBound`","user":"U67D54KS8","ts":"1614598402.073000","team":"T68168MUP","edited":{"user":"U67D54KS8","ts":"1614598430.000000"},"blocks":[{"type":"rich_text","block_id":"P+w","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"To do this, I think what is required is:\n\n- Remove "},{"type":"text","text":"VersionBound","style":{"code":true}},{"type":"text","text":" from Pkg ("},{"type":"link","url":"https://github.com/JuliaLang/Pkg.jl/blob/6e8b621474a613f7174f95425a842bfd13dd416d/src/Versions.jl#L10"},{"type":"text","text":") and replace it with "},{"type":"text","text":"VersionNumber","style":{"code":true}},{"type":"text","text":". Update all the needed functionality.\n- Make the resolver work with these "},{"type":"text","text":"VersionNumber","style":{"code":true}},{"type":"text","text":" s instead (pretty much revert "},{"type":"link","url":"https://github.com/JuliaLang/Pkg.jl/pull/73/commits/f5eff1215b2de405fcd6c65ba7f90a02b448e729"},{"type":"text","text":").\n- Update everything else that parses and writes "},{"type":"text","text":"VersionSpec","style":{"code":true}},{"type":"text","text":" to work now when the \"atom\" is a "},{"type":"text","text":"VersionNumber","style":{"code":true}},{"type":"text","text":" instead of a "},{"type":"text","text":"VersionBound","style":{"code":true}}]}]}]},{"client_msg_id":"985d7fca-291c-4b17-8ca3-ab2b002d3813","type":"message","text":"Personally I don't mind too much about the details of the implementation as long as it works well :grin: especially because I think it's more more work on the Pkg side, so I don't have many insights to provide, I'm glad Kristoffer shared some suggestions","user":"UDB26738Q","ts":"1614605956.075600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xYAn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Personally I don't mind too much about the details of the implementation as long as it works well "},{"type":"emoji","name":"grin"},{"type":"text","text":" especially because I think it's more more work on the Pkg side, so I don't have many insights to provide, I'm glad Kristoffer shared some suggestions"}]}]}]},{"client_msg_id":"3F83150E-59DA-4B4D-92AF-29D834956A14","type":"message","text":"Actually I don't understand <@U67D54KS8>'s suggestions at all? Why do I need to touch Pkg for either of my two proposals?!","user":"U012FH66MFW","ts":"1614609441.077100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TRtM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Actually I don't understand "},{"type":"user","user_id":"U67D54KS8"},{"type":"text","text":"'s suggestions at all? Why do I need to touch Pkg for either of my two proposals?!"}]}]}]},{"client_msg_id":"CA36C50E-C4FB-449A-8F32-0A5A1830366C","type":"message","text":"And why would I have to change VersionBound to VersionNumber?!","user":"U012FH66MFW","ts":"1614609466.077800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3JT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And why would I have to change VersionBound to VersionNumber?!"}]}]}]},{"client_msg_id":"f205471a-8528-45a4-aac5-c2d90447a7c1","type":"message","text":"Maybe I was misunderstanding the goal, but my assumption was that you guys wanted stuff like build version working in the Pkg ecosystem (which is currently does not). If that was wrong, feel free to ignore what I wrote :slightly_smiling_face:","user":"U67D54KS8","ts":"1614614738.079100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sF2s","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe I was misunderstanding the goal, but my assumption was that you guys wanted stuff like build version working in the Pkg ecosystem (which is currently does not). If that was wrong, feel free to ignore what I wrote "},{"type":"emoji","name":"slightly_smiling_face"}]}]}]},{"client_msg_id":"872CCEF0-A9A6-4D45-98D2-8D8299DE09EC","type":"message","text":"My goal is to be able to specify for some JLL being generated which has a dependency on some other Julia package Foo, which version of Foo the JLL is compatible with -- i.e., which compat entry for Foo shall be put into the Project.toml of the JLL. The existing code effectively only allows to specify compat string of the form `= X.Y` which is far too limited -- I'd like to be able to use `~X.Y` or `^X.Y` etc (and the same for X.Y.Z","user":"U012FH66MFW","ts":"1614625112.084800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iYM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My goal is to be able to specify for some JLL being generated which has a dependency on some other Julia package Foo, which version of Foo the JLL is compatible with -- i.e., which compat entry for Foo shall be put into the Project.toml of the JLL. The existing code effectively only allows to specify compat string of the form "},{"type":"text","text":"= X.Y","style":{"code":true}},{"type":"text","text":" which is far too limited -- I'd like to be able to use "},{"type":"text","text":"~X.Y","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"^X.Y","style":{"code":true}},{"type":"text","text":" etc (and the same for X.Y.Z"}]}]}]},{"client_msg_id":"030ea09e-2dee-4c51-af85-22a2618e8ba6","type":"message","text":"`ERROR: LoadError: GitError(Code:ENOTFOUND, Class:OS, could not find '/depot/downloads/llvm-project.git/objects/pack/pack_git2_rVW2ff' to stat: No such file or directory)` in <https://github.com/JuliaPackaging/Yggdrasil/pull/2631>","user":"U674T3KB3","ts":"1614639672.085300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Sx22W","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ERROR: LoadError: GitError(Code:ENOTFOUND, Class:OS, could not find '/depot/downloads/llvm-project.git/objects/pack/pack_git2_rVW2ff' to stat: No such file or directory)","style":{"code":true}},{"type":"text","text":" in "},{"type":"link","url":"https://github.com/JuliaPackaging/Yggdrasil/pull/2631"}]}]}]},{"client_msg_id":"2ef488d4-63bd-4698-a3e3-3451dded30fa","type":"message","text":"is this a known issue?","user":"U674T3KB3","ts":"1614639675.085500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BOEbz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is this a known issue?"}]}]}]},{"client_msg_id":"8d52ff27-0a91-42b7-ab8b-9c0c0970cb26","type":"message","text":"yeah... :horse_racing:","user":"UDB26738Q","ts":"1614639710.085800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g4EG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah... "},{"type":"emoji","name":"horse_racing"}]}]}]},{"client_msg_id":"9f75ca05-12a6-44be-8e95-2b80aecb93e6","type":"message","text":"wow, with the larger ccache, building llvm is finally much faster!","user":"UDB26738Q","ts":"1614639794.086300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=hu7k","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"wow, with the larger ccache, building llvm is finally much faster!"}]}]}]},{"client_msg_id":"5ec9b542-70b9-4fa7-abdc-bf9c7cb4eb4f","type":"message","text":"for the record, the issue is <https://github.com/libgit2/libgit2/issues/5726>","user":"UDB26738Q","ts":"1614639839.086500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Iy5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"for the record, the issue is "},{"type":"link","url":"https://github.com/libgit2/libgit2/issues/5726"}]}]}]},{"client_msg_id":"43b03fbf-4652-4962-8d4b-a351d7358bb5","type":"message","text":"sounds like they're waiting on us to give them more information?","user":"U674T3KB3","ts":"1614639895.086800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DhCd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"sounds like they're waiting on us to give them more information?"}]}]}]},{"client_msg_id":"89ab167e-8b9c-42b6-8ce6-306dc0dd8e9b","type":"message","text":"I believe <@U67BJLYCS> at some point was trying to write a C reproducer","user":"UDB26738Q","ts":"1614639945.087500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+k9p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I believe "},{"type":"user","user_id":"U67BJLYCS"},{"type":"text","text":" at some point was trying to write a C reproducer"}]}]}]},{"client_msg_id":"7d774235-dec2-45fe-8b10-83c815ebfea8","type":"message","text":"I'm surprised by\n\n&gt; is the bare clone being modified concurrently with the workers that are cloning that?\nI _think_ the source isn't being modified, but there are a bunch of runners cloning it at the same time","user":"UDB26738Q","ts":"1614639997.088200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c2d","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm surprised by\n\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"is the bare clone being modified concurrently with the workers that are cloning that?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nI "},{"type":"text","text":"think","style":{"italic":true}},{"type":"text","text":" the source isn't being modified, but there are a bunch of runners cloning it at the same time"}]}]}]},{"client_msg_id":"fccfd23f-54b8-413d-829a-7be5651efeae","type":"message","text":"I couldn't reproduce it locally","user":"U67BJLYCS","ts":"1614640104.088600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sInX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I couldn't reproduce it locally"}]}]}]},{"client_msg_id":"00a78a5c-63a3-4260-b8da-523449a8f3c7","type":"message","text":"And then it dropped of my to-do list","user":"U67BJLYCS","ts":"1614640115.089000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KDF/F","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And then it dropped of my to-do list"}]}]}]},{"client_msg_id":"dfee13de-209e-480b-ab43-630720db7ce3","type":"message","text":"where is the relevant code? Just so I can have a quick gander","user":"U674T3KB3","ts":"1614640289.089300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6cfCk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"where is the relevant code? Just so I can have a quick gander"}]}]}]},{"client_msg_id":"7675b230-d113-44bd-98b9-7290899f23c6","type":"message","text":"it should be <https://github.com/JuliaPackaging/BinaryBuilderBase.jl/blob/e1e18b46afc72b515223640a91f8fdc1c0203453/src/Prefix.jl#L254-L270>","user":"UDB26738Q","ts":"1614640320.089500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rFj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it should be "},{"type":"link","url":"https://github.com/JuliaPackaging/BinaryBuilderBase.jl/blob/e1e18b46afc72b515223640a91f8fdc1c0203453/src/Prefix.jl#L254-L270"}]}]}]},{"client_msg_id":"01107a62-ea8d-4459-8af9-1f5b358e1d56","type":"message","text":"(I was wondering if we do some sort of cleanup on finalizer that doesn't finish)","user":"U674T3KB3","ts":"1614640354.090000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eeJo0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(I was wondering if we do some sort of cleanup on finalizer that doesn't finish)"}]}]}]},{"client_msg_id":"e3145732-ab1c-4877-8c38-6f5dfb137379","type":"message","text":"that's an interesting idea.  I really don't see where we may be touching the source directly","user":"UDB26738Q","ts":"1614640451.090500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Mzx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's an interesting idea.  I really don't see where we may be touching the source directly"}]}]}]},{"client_msg_id":"55e39198-8300-4cd8-b400-d04852b786b1","type":"message","text":"there is also the issue that libgit2 is excruciatingly slow cloning the local repo, which increases the rate of failure in llvm","user":"UDB26738Q","ts":"1614640499.091200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OCFkU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there is also the issue that libgit2 is excruciatingly slow cloning the local repo, which increases the rate of failure in llvm"}]}]}]}]}