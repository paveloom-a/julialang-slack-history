{"cursor": 0, "messages": [{"client_msg_id":"25d8887e-4074-4d09-b1d0-9ce6e9f2be78","type":"message","text":"or maybe `channelview` is just not the right thing to call for this image","user":"USU9FRPEU","ts":"1609172623.114800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hnPQB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or maybe "},{"type":"text","text":"channelview","style":{"code":true}},{"type":"text","text":" is just not the right thing to call for this image"}]}]}]},{"client_msg_id":"98971460-9d8a-4670-8edf-645f8ce62d4b","type":"message","text":"There is a bug here with calling `channelview` on the `\"multi-channel-time-series.ome.tif\"` from TestImage. Where does the bug report belong?\n```julia&gt; img = testimage(\"multi-channel-time-series.ome.tif\")\n┌ Warning: ignored the empty prefix for '<http://www.openmicroscopy.org/Schemas/OME/2015-01>'; expected to be non-empty\n└ @ EzXML C:\\Users\\kittisopikulm\\.julia\\packages\\EzXML\\ZNwhK\\src\\xpath.jl:85\nGray ImageMeta with:\n  data: 4-dimensional AxisArray{Gray{N0f8},4,...} with axes:\n    :y, 1:167\n    :x, 1:439\n    :channel, [:C1, :C2, :C3]\n    :time, 1:7\nAnd data, a 167×439×3×7 reshape(reinterpret(Gray{N0f8}, ::Array{Int8,6}), 167, 439, 3, 7) with eltype Gray{Normed{UInt8,8}}\n  properties:\n    Description: \n    Elapsed_Times: Unitful.Quantity{Float64,�,Unitful.FreeUnits{(s,),�,nothing}}[NaN s NaN s … NaN s NaN s; NaN s NaN s … NaN s NaN s; NaN s NaN s … NaN s NaN s]\n\njulia&gt; channelview( img )\nERROR: ArgumentError: the length of each axis must match the corresponding size of data\nStacktrace:\n [1] AxisArray(::Array{Int8,6}, ::Tuple{Axis{:color,Base.OneTo{Int64}},Axis{:y,UnitRange{Int64}},Axis{:x,UnitRange{Int64}},Axis{:channel,Array{Symbol,1}},Axis{:time,UnitRange{Int64}},Axis{:dim_6,Base.OneTo{Int64}}}) at C:\\Users\\kittisopikulm\\.julia\\packages\\AxisArrays\\IFpjG\\src\\core.jl:229\n [2] AxisArray(::Array{Int8,6}, ::Tuple{Axis{:color,Base.OneTo{Int64}},Axis{:y,UnitRange{Int64}},Axis{:x,UnitRange{Int64}},Axis{:channel,Array{Symbol,1}},Axis{:time,UnitRange{Int64}}}) at C:\\Users\\kittisopikulm\\.julia\\packages\\AxisArrays\\IFpjG\\src\\core.jl:226\n [3] AxisArray at C:\\Users\\kittisopikulm\\.julia\\packages\\AxisArrays\\IFpjG\\src\\core.jl:222 [inlined]\n [4] _channelview at C:\\Users\\kittisopikulm\\.julia\\packages\\ImageAxes\\P5iag\\src\\ImageAxes.jl:126 [inlined]\n [5] channelview at C:\\Users\\kittisopikulm\\.julia\\packages\\ImageAxes\\P5iag\\src\\ImageAxes.jl:121 [inlined]\n [6] channelview(::ImageMeta{Gray{Normed{UInt8,8}},4,AxisArray{Gray{Normed{UInt8,8}},4,Base.ReshapedArray{Gray{Normed{UInt8,8}},4,Base.ReinterpretArray{Gray{Normed{UInt8,8}},6,Int8,Array{Int8,6}},Tuple{}},Tuple{Axis{:y,UnitRange{Int64}},Axis{:x,UnitRange{Int64}},Axis{:channel,Array{Symbol,1}},Axis{:time,UnitRange{Int64}}}},Dict{Symbol,Any}}) at C:\\Users\\kittisopikulm\\.julia\\packages\\ImageMetadata\\gFA3T\\src\\ImageMetadata.jl:252\n [7] top-level scope at REPL[142]:1\n\njulia&gt; axes( img )\n(Base.OneTo(167), Base.OneTo(439), Base.OneTo(3), Base.OneTo(7))\n\njulia&gt; size( img )\n(167, 439, 3, 7)```","user":"USU9FRPEU","ts":"1609171945.114400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RJwcL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There is a bug here with calling "},{"type":"text","text":"channelview","style":{"code":true}},{"type":"text","text":" on the "},{"type":"text","text":"\"multi-channel-time-series.ome.tif\"","style":{"code":true}},{"type":"text","text":" from TestImage. Where does the bug report belong?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> img = testimage(\"multi-channel-time-series.ome.tif\")\n┌ Warning: ignored the empty prefix for '"},{"type":"link","url":"http://www.openmicroscopy.org/Schemas/OME/2015-01"},{"type":"text","text":"'; expected to be non-empty\n└ @ EzXML C:\\Users\\kittisopikulm\\.julia\\packages\\EzXML\\ZNwhK\\src\\xpath.jl:85\nGray ImageMeta with:\n  data: 4-dimensional AxisArray{Gray{N0f8},4,...} with axes:\n    :y, 1:167\n    :x, 1:439\n    :channel, [:C1, :C2, :C3]\n    :time, 1:7\nAnd data, a 167×439×3×7 reshape(reinterpret(Gray{N0f8}, ::Array{Int8,6}), 167, 439, 3, 7) with eltype Gray{Normed{UInt8,8}}\n  properties:\n    Description: \n    Elapsed_Times: Unitful.Quantity{Float64,�,Unitful.FreeUnits{(s,),�,nothing}}[NaN s NaN s … NaN s NaN s; NaN s NaN s … NaN s NaN s; NaN s NaN s … NaN s NaN s]\n\njulia> channelview( img )\nERROR: ArgumentError: the length of each axis must match the corresponding size of data\nStacktrace:\n [1] AxisArray(::Array{Int8,6}, ::Tuple{Axis{:color,Base.OneTo{Int64}},Axis{:y,UnitRange{Int64}},Axis{:x,UnitRange{Int64}},Axis{:channel,Array{Symbol,1}},Axis{:time,UnitRange{Int64}},Axis{:dim_6,Base.OneTo{Int64}}}) at C:\\Users\\kittisopikulm\\.julia\\packages\\AxisArrays\\IFpjG\\src\\core.jl:229\n [2] AxisArray(::Array{Int8,6}, ::Tuple{Axis{:color,Base.OneTo{Int64}},Axis{:y,UnitRange{Int64}},Axis{:x,UnitRange{Int64}},Axis{:channel,Array{Symbol,1}},Axis{:time,UnitRange{Int64}}}) at C:\\Users\\kittisopikulm\\.julia\\packages\\AxisArrays\\IFpjG\\src\\core.jl:226\n [3] AxisArray at C:\\Users\\kittisopikulm\\.julia\\packages\\AxisArrays\\IFpjG\\src\\core.jl:222 [inlined]\n [4] _channelview at C:\\Users\\kittisopikulm\\.julia\\packages\\ImageAxes\\P5iag\\src\\ImageAxes.jl:126 [inlined]\n [5] channelview at C:\\Users\\kittisopikulm\\.julia\\packages\\ImageAxes\\P5iag\\src\\ImageAxes.jl:121 [inlined]\n [6] channelview(::ImageMeta{Gray{Normed{UInt8,8}},4,AxisArray{Gray{Normed{UInt8,8}},4,Base.ReshapedArray{Gray{Normed{UInt8,8}},4,Base.ReinterpretArray{Gray{Normed{UInt8,8}},6,Int8,Array{Int8,6}},Tuple{}},Tuple{Axis{:y,UnitRange{Int64}},Axis{:x,UnitRange{Int64}},Axis{:channel,Array{Symbol,1}},Axis{:time,UnitRange{Int64}}}},Dict{Symbol,Any}}) at C:\\Users\\kittisopikulm\\.julia\\packages\\ImageMetadata\\gFA3T\\src\\ImageMetadata.jl:252\n [7] top-level scope at REPL[142]:1\n\njulia> axes( img )\n(Base.OneTo(167), Base.OneTo(439), Base.OneTo(3), Base.OneTo(7))\n\njulia> size( img )\n(167, 439, 3, 7)"}]}]}]},{"client_msg_id":"15558f9e-8139-43b6-b0bb-61aaf95d66a1","type":"message","text":"`ImageFeatures.jl` has the functions for feature detection and matching between features.  Is there a function of package for estimating the geometric transform, like MATLAB has the `estimageGeometricTransform2D` function.","user":"U7CTYCM4H","ts":"1608216519.111500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LaH4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ImageFeatures.jl","style":{"code":true}},{"type":"text","text":" has the functions for feature detection and matching between features.  Is there a function of package for estimating the geometric transform, like MATLAB has the "},{"type":"text","text":"estimageGeometricTransform2D","style":{"code":true}},{"type":"text","text":" function."}]}]}],"thread_ts":"1608216519.111500","reply_count":3,"reply_users_count":2,"latest_reply":"1608216884.112000","reply_users":["U019078LDND","U7CTYCM4H"],"subscribed":false},{"client_msg_id":"ce409efb-c724-4f0c-8026-4280af6e65d6","type":"message","text":"Hi,\n\nI would like to warp an image by the log-polar transform but I have troubles to make it work. Can someone give me a push please?\n\n```using CoordinateTransformations, ImageTransformations\nstruct Retinotopy &lt;: Transformation; end\nstruct InvRetinotopy &lt;: Transformation; end\nfunction (::Retinotopy)(x)\n    length(x) == 2 || error(\"Polar transform takes a 2D coordinate\")\n\n    Polar(log(hypot(x[1], x[2])), atan(x[2], x[1]))\nend\n\nfunction (::InvRetinotopy)(x::Polar)\n    s,c = sincos(x.θ)\n    SVector(exp(x.r) * c, exp(x.r) * s)\nend\n(t::InvRetinotopy)(x) = t(Polar(x[1], x[2]))\nBase.inv(::Retinotopy) = InvRetinotopy()\n\ntfm = Retinotopy()\nimgw = warp(img, tfm);```","user":"U7GQE9JP9","ts":"1608204279.109700","team":"T68168MUP","edited":{"user":"U7GQE9JP9","ts":"1608204302.000000"},"blocks":[{"type":"rich_text","block_id":"x+jO6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi,\n\nI would like to warp an image by the log-polar transform but I have troubles to make it work. Can someone give me a push please?\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using CoordinateTransformations, ImageTransformations\nstruct Retinotopy <: Transformation; end\nstruct InvRetinotopy <: Transformation; end\nfunction (::Retinotopy)(x)\n    length(x) == 2 || error(\"Polar transform takes a 2D coordinate\")\n\n    Polar(log(hypot(x[1], x[2])), atan(x[2], x[1]))\nend\n\nfunction (::InvRetinotopy)(x::Polar)\n    s,c = sincos(x.θ)\n    SVector(exp(x.r) * c, exp(x.r) * s)\nend\n(t::InvRetinotopy)(x) = t(Polar(x[1], x[2]))\nBase.inv(::Retinotopy) = InvRetinotopy()\n\ntfm = Retinotopy()\nimgw = warp(img, tfm);"}]}]}],"thread_ts":"1608204279.109700","reply_count":1,"reply_users_count":1,"latest_reply":"1608292094.112400","reply_users":["UC8821DPY"],"subscribed":false},{"client_msg_id":"e1cc2efb-e428-482f-8925-3b14dfdf78bc","type":"message","text":"It should be pretty good for this. How many channels do you need? If it's something like 16 channels, then I'd recommend using an `SVector{16,T}` as the element type of your arrays and writing your algorithms for that datatype.","user":"UC8821DPY","ts":"1608026229.108300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GWk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It should be pretty good for this. How many channels do you need? If it's something like 16 channels, then I'd recommend using an "},{"type":"text","text":"SVector{16,T}","style":{"code":true}},{"type":"text","text":" as the element type of your arrays and writing your algorithms for that datatype."}]}]}]}]}