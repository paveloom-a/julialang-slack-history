{"cursor": 0, "messages": [{"client_msg_id":"bbb51170-0fd0-41e9-8f6f-daac739f5dcd","type":"message","text":"When I ran clang.jl's standard generator for wrapping julia around c library, it skipped function pointers as it is `CXType_FunctionProto`. For C\n\n```typedef int (foo)(int, int);```\nIs this right way to do it?\n```\nfunction f(Cint, Cint)::Cint end\nfoo = @cfunction(f, Cint, (Cint, Cint))```\nBut here f() returns nothing while expected to return Cint","user":"UN5FQHFNY","ts":"1610039502.002300","team":"T68168MUP","edited":{"user":"UN5FQHFNY","ts":"1610041356.000000"},"blocks":[{"type":"rich_text","block_id":"2nH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"When I ran clang.jl's standard generator for wrapping julia around c library, it skipped function pointers as it is "},{"type":"text","text":"CXType_FunctionProto","style":{"code":true}},{"type":"text","text":". For C\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"typedef int (foo)(int, int);"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Is this right way to do it?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"\nfunction f(Cint, Cint)::Cint end\nfoo = @cfunction(f, Cint, (Cint, Cint))"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"But here f() returns nothing while expected to return Cint"}]}]}],"thread_ts":"1610039502.002300","reply_count":1,"reply_users_count":1,"latest_reply":"1610041816.005200","reply_users":["UKVBDU6HF"],"subscribed":false},{"client_msg_id":"7D90A26B-6742-4E24-870F-C35DEE650881","type":"message","text":"are you sure that is a function pointer?","user":"U6DN7UPJ7","ts":"1610116563.006300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Prs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"are you sure that is a function pointer?"}]}]}]},{"client_msg_id":"81EEA46C-CD72-415E-9A5E-AEFD70EC5385","type":"message","text":"typedef int (*foo)(int, int); should be correctly converted to foo = Ptr{Cvoid}","user":"U6DN7UPJ7","ts":"1610116859.008900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3p6j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"typedef int (*foo)(int, int); should be correctly converted to foo = Ptr{Cvoid}"}]}]}]},{"client_msg_id":"ccf952e9-053d-41ec-b98e-48e42e69bcab","type":"message","text":"It skipped the conversion saying it is `CXType_FunctionProto.`","user":"UN5FQHFNY","ts":"1610117156.010100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"72Bmu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It skipped the conversion saying it is "},{"type":"text","text":"CXType_FunctionProto.","style":{"code":true}}]}]}]},{"client_msg_id":"84AE4CE6-E0AF-4907-AE85-C65A6602D939","type":"message","text":"note your version is only a proto not a *pointer*\n","user":"U6DN7UPJ7","ts":"1610117200.011600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JxD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"note your version is only a proto not a "},{"type":"text","text":"pointer","style":{"bold":true}},{"type":"text","text":"\n"}]}]}],"thread_ts":"1610117200.011600","reply_count":3,"reply_users_count":2,"latest_reply":"1610118043.023400","reply_users":["UN5FQHFNY","U6DN7UPJ7"],"subscribed":false},{"client_msg_id":"2f4754af-2e4b-4043-8e51-698df3cba3a0","type":"message","text":"In the C repo it does something like this (along with the above code)\n\n```static foo * f;\nf[] = {f1, f2, f3, f4};```\nwhere f1, f2, f3 are all functions which return int and take in 2 int","user":"UN5FQHFNY","ts":"1610117418.013300","team":"T68168MUP","edited":{"user":"UN5FQHFNY","ts":"1610117447.000000"},"blocks":[{"type":"rich_text","block_id":"x8P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In the C repo it does something like this (along with the above code)\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"static foo * f;\nf[] = {f1, f2, f3, f4};"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"where f1, f2, f3 are all functions which return int and take in 2 int"}]}]}]},{"client_msg_id":"3ed0dc14-f40c-4c5b-a271-5524d05d160b","type":"message","text":"Can I still define foo as foo = Ptr{Cvoid}","user":"UN5FQHFNY","ts":"1610117476.014000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tNXgE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can I still define foo as foo = Ptr{Cvoid}"}]}]}]},{"client_msg_id":"447d4c73-f143-4295-baf8-7e50ee9c1a63","type":"message","text":"Or do I define\n```function _f_i(b::int, a::int)::int\n   #do the thing\nend```\nfor each of f1, f2, f3\nAnd create\n```fptr_i = @cfunction(#for _f_i)```","user":"UN5FQHFNY","ts":"1610117609.017000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rNTJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Or do I define\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function _f_i(b::int, a::int)::int\n   #do the thing\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"for each of f1, f2, f3\nAnd create\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"fptr_i = @cfunction(#for _f_i)"}]}]}]},{"client_msg_id":"FA5B4707-B650-48D0-AEE6-598E6A7C0C42","type":"message","text":"in practice, you just need to define a julia callback function with the corresponding function prototype and then use @cfunction to retrieve the pointer and pass this pointer to ccall.","user":"U6DN7UPJ7","ts":"1610117809.020300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w=q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in practice, you just need to define a julia callback function with the corresponding function prototype and then use @cfunction to retrieve the pointer and pass this pointer to ccall."}]}]}]},{"client_msg_id":"9AEBB85F-73AD-4681-AD7C-B1ADC31B5813","type":"message","text":"but from your example above, it looks like you’d like to pass an array of function pointers?","user":"U6DN7UPJ7","ts":"1610117941.021700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FApf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but from your example above, it looks like you’d like to pass an array of function pointers?"}]}]}]},{"client_msg_id":"cef6ae8b-087d-484e-9c01-7859473d6305","type":"message","text":"Yup. I wanted to see know if I could just define one and still get the template part somehow. (It doesnt seem likely to me however)","user":"UN5FQHFNY","ts":"1610118019.023300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uUFAw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yup. I wanted to see know if I could just define one and still get the template part somehow. (It doesnt seem likely to me however)"}]}]}]},{"client_msg_id":"761A977E-9B05-4BB0-AE90-EE5ADFD5BE9B","type":"message","text":"Could you share the C repo youre currently wrapping?","user":"U6DN7UPJ7","ts":"1610118100.024600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CL2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Could you share the C repo youre currently wrapping?"}]}]}]},{"client_msg_id":"e403415d-850c-445b-93c0-8d13bf9af3c5","type":"message","text":"In a C function involving `char** var` as an input, it gets translated to `Ptr{Cstring}` in `ccall`\n\nWhen passed an object of type `Ptr{Cstring}` it throws `convert(::Cstring, ::Ptr{Cstring})` not defined error. I worked around this with `convert(T::Cstring, p::Ptr{Cstring}) = convert(Ptr{UInt8}, p) |&gt; unsafe_string` .\nNow the wrapped function works fine half the time and crashes the other half. Why that might be?\n\n[passing input type as `Cstring` in `ccall` crashes the repl all the time and passing it as a `Ptr{UInt8}` gives `trunc`  error]","user":"UN5FQHFNY","ts":"1610445417.034000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"n=rg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In a C function involving "},{"type":"text","text":"char** var","style":{"code":true}},{"type":"text","text":" as an input, it gets translated to "},{"type":"text","text":"Ptr{Cstring}","style":{"code":true}},{"type":"text","text":" in "},{"type":"text","text":"ccall","style":{"code":true}},{"type":"text","text":"\n\nWhen passed an object of type "},{"type":"text","text":"Ptr{Cstring}","style":{"code":true}},{"type":"text","text":" it throws "},{"type":"text","text":"convert(::Cstring, ::Ptr{Cstring})","style":{"code":true}},{"type":"text","text":" not defined error. I worked around this with "},{"type":"text","text":"convert(T::Cstring, p::Ptr{Cstring}) = convert(Ptr{UInt8}, p) |> unsafe_string","style":{"code":true}},{"type":"text","text":" .\nNow the wrapped function works fine half the time and crashes the other half. Why that might be?\n\n[passing input type as "},{"type":"text","text":"Cstring","style":{"code":true}},{"type":"text","text":" in "},{"type":"text","text":"ccall","style":{"code":true}},{"type":"text","text":" crashes the repl all the time and passing it as a "},{"type":"text","text":"Ptr{UInt8}","style":{"code":true}},{"type":"text","text":" gives "},{"type":"text","text":"trunc","style":{"code":true}},{"type":"text","text":"  error]"}]}]}]},{"client_msg_id":"0C4E9FE5-B654-4878-A57B-0FEC5AA13BED","type":"message","text":"that looks like a gc issue.","user":"U6DN7UPJ7","ts":"1610461915.034700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sssu7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that looks like a gc issue."}]}]}]},{"client_msg_id":"769aa726-3d1e-4033-9fa0-7dca5f5913f4","type":"message","text":"you probably need to use `GC.@preserve` , please read the doc for further details.","user":"U6DN7UPJ7","ts":"1610461970.035500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6ORhh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you probably need to use "},{"type":"text","text":"GC.@preserve","style":{"code":true}},{"type":"text","text":" , please read the doc for further details."}]}]}]},{"client_msg_id":"1e1f246d-7c46-4b1d-8de4-9bb107c8c486","type":"message","text":"I usually use `Ptr{UInt8}[pointer(string)]`  for the function that accepts  `char**`  as its argument type.","user":"U6DN7UPJ7","ts":"1610462236.036900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"r70wk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I usually use "},{"type":"text","text":"Ptr{UInt8}[pointer(string)]","style":{"code":true}},{"type":"text","text":"  for the function that accepts  "},{"type":"text","text":"char**","style":{"code":true}},{"type":"text","text":"  as its argument type."}]}]}]},{"client_msg_id":"9220c16e-b29d-4df9-a5fc-a5036e802709","type":"message","text":"I just enabled *Discussions* for Clang.jl repo, feel free to post Clang.jl related questions there :slightly_smiling_face:.","user":"U6DN7UPJ7","ts":"1610462514.038700","team":"T68168MUP","edited":{"user":"U6DN7UPJ7","ts":"1610462560.000000"},"blocks":[{"type":"rich_text","block_id":"vlo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I just enabled "},{"type":"text","text":"Discussions","style":{"bold":true}},{"type":"text","text":" for Clang.jl repo, feel free to post Clang.jl related questions there "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":"."}]}]}]},{"client_msg_id":"a6f855c1-0f7a-415d-8bc6-52b9f54f2560","type":"message","text":"Thanks <@U6DN7UPJ7>. Will pitch in discussions from now on","user":"UN5FQHFNY","ts":"1610464139.040200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9LvM0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks "},{"type":"user","user_id":"U6DN7UPJ7"},{"type":"text","text":". Will pitch in discussions from now on"}]}]}]}]}