{"cursor": 0, "messages": [{"client_msg_id":"e5d9938b-450d-416f-8cfb-aebee038ee10","type":"message","text":"When setting up tests and you'd like to test some of the functions that exist in the userspace when using `Requires.jl`, is there a way to `add` and `using` the `Requires`'d packages without those packages being added to the project or manifest tomls? In other words, is there a way to temporarily add them for the sake of testing?","user":"UM4TSHKF1","ts":"1608223358.107300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MnuNd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"When setting up tests and you'd like to test some of the functions that exist in the userspace when using "},{"type":"text","text":"Requires.jl","style":{"code":true}},{"type":"text","text":", is there a way to "},{"type":"text","text":"add","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"using","style":{"code":true}},{"type":"text","text":" the "},{"type":"text","text":"Requires","style":{"code":true}},{"type":"text","text":"'d packages without those packages being added to the project or manifest tomls? In other words, is there a way to temporarily add them for the sake of testing?"}]}]}],"thread_ts":"1608223358.107300","reply_count":4,"reply_users_count":2,"latest_reply":"1608240367.108200","reply_users":["U6A936746","UM4TSHKF1"],"subscribed":false},{"client_msg_id":"56ec06c6-cf2d-4a00-86e4-85da1851feba","type":"message","text":"I recently encountered an error message on my Travis-CI page on one of my public Julia packages : \"Builds have been temporarily disabled for public repositories due to a negative credit balance.\" I was wondering if anybody knows if I can have a free Travis account that works for public (open source) packages. I can't really afford the monthly fee for the subscription Travis account.","user":"U01FRP892UE","ts":"1608577317.111700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"He1V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I recently encountered an error message on my Travis-CI page on one of my public Julia packages : \"Builds have been temporarily disabled for public repositories due to a negative credit balance.\" I was wondering if anybody knows if I can have a free Travis account that works for public (open source) packages. I can't really afford the monthly fee for the subscription Travis account."}]}]}],"thread_ts":"1608577317.111700","reply_count":6,"reply_users_count":4,"latest_reply":"1608596792.113100","reply_users":["U6NFPDBV1","U6A936746","U01FRP892UE","UB7JS9CHF"],"subscribed":false},{"client_msg_id":"17939469-381c-4db0-98cd-db8d7164f60b","type":"message","text":"When writing software to deal with data that is bigger than memory (30gb+ - 200gb) is the standard to rely on virtual memory (assuming a good preforming SSD) or process the data in chunks then merge at the end?\n\nI’m assuming there’s multiple opinions on this topic. I couldn’t find much information online.\n\nHeres how I see it from my opinion, please correct me if Im wrong.\n\nVirtual memory:\n• Easier to implement\n• Great when additional memory needed is not too big\n• Hardware dependent\n• Doesn’t preform well on really big data?\n• Not possible on docker??\nChunking:\n• More lines of code, more things can go wrong.\n• Not as hardware dependent\n• Preforms better on really big data?","user":"U01FAHWCMFF","ts":"1608948176.117500","team":"T68168MUP","edited":{"user":"U01FAHWCMFF","ts":"1608948476.000000"},"blocks":[{"type":"rich_text","block_id":"A7=2P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"When writing software to deal with data that is bigger than memory (30gb+ - 200gb) is the standard to rely on virtual memory (assuming a good preforming SSD) or process the data in chunks then merge at the end?\n\nI’m assuming there’s multiple opinions on this topic. I couldn’t find much information online.\n\nHeres how I see it from my opinion, please correct me if Im wrong.\n\nVirtual memory:\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Easier to implement"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Great when additional memory needed is not too big"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Hardware dependent"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Doesn’t preform well on really big data?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Not possible on docker??"}]}],"style":"bullet","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"\nChunking:\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"More lines of code, more things can go wrong."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Not as hardware dependent"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Preforms better on really big data?"}]}],"style":"bullet","indent":0}]}],"thread_ts":"1608948176.117500","reply_count":2,"reply_users_count":2,"latest_reply":"1608949550.118200","reply_users":["UDDUC4R1Q","U01FAHWCMFF"],"subscribed":false},{"client_msg_id":"2640acdb-ee3f-4a8e-b91f-5dc5da3c3259","type":"message","text":"Is there a standard way to determine whether you're in a CI run? Something like `parse(Bool, lowercase(get(ENV, \"CI\", \"false\")))`?","user":"UB2QRMQPN","ts":"1609180705.120400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"beW0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a standard way to determine whether you're in a CI run? Something like "},{"type":"text","text":"parse(Bool, lowercase(get(ENV, \"CI\", \"false\")))","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1609180705.120400","reply_count":1,"reply_users_count":1,"latest_reply":"1609181345.120500","reply_users":["U6NFPDBV1"],"subscribed":false},{"client_msg_id":"2ec516e6-208c-4fe6-af8b-72125e8ab0d1","type":"message","text":"Question on how to use structs - my impression is that struct fields need to be annotated explicitly to ensure type stability, e.g., \n```using Test\nstruct foo\n    a\nend\nf(x::foo) = x.a\n@inferred f(foo(1)) # is not type stable```\nI have a struct with a bunch of fields, and I’ve been explicitly annotating all types to ensure type stability. I now want to be able to use different types for some of these fields (e.g., from Array to SparseMatrixCSC). \n\nIs there a way to allow for this while retaining type stability? I figured I could use `Union`, but that seemed hacky. ","user":"U011LUQ182G","ts":"1610053289.129200","team":"T68168MUP","edited":{"user":"U011LUQ182G","ts":"1610053923.000000"},"blocks":[{"type":"rich_text","block_id":"x6YPg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Question on how to use structs - my impression is that struct fields need to be annotated explicitly to ensure type stability, e.g., \n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using Test\nstruct foo\n    a\nend\nf(x::foo) = x.a\n@inferred f(foo(1)) # is not type stable"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I have a struct with a bunch of fields, and I’ve been explicitly annotating all types to ensure type stability. I now want to be able to use different types for some of these fields (e.g., from Array to SparseMatrixCSC). \n\nIs there a way to allow for this while retaining type stability? I figured I could use "},{"type":"text","text":"Union","style":{"code":true}},{"type":"text","text":", but that seemed hacky. "}]}]}],"thread_ts":"1610053289.129200","reply_count":2,"reply_users_count":1,"latest_reply":"1610054067.129700","reply_users":["U6NFPDBV1"],"subscribed":false},{"client_msg_id":"feddd8b1-5016-43b2-b040-f4f96cc35aa4","type":"message","text":"are there any best practices or tips that one should be aware of when trying to write sql (in particular, sqlite) unit tests?","user":"US8V7JSKB","ts":"1610435118.139700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rwLck","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"are there any best practices or tips that one should be aware of when trying to write sql (in particular, sqlite) unit tests?"}]}]}]},{"client_msg_id":"b904fd84-5259-43fa-b8ab-feecf1a22937","type":"message","text":"What's a good practice to having two packages in one repo? Just don't? Or place the second package at the top level of the first?","user":"U7HAYKY9X","ts":"1610468634.140500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Cby","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What's a good practice to having two packages in one repo? Just don't? Or place the second package at the top level of the first?"}]}]}]},{"client_msg_id":"1a824105-7892-43a8-98c4-dba61ae0ed73","type":"message","text":"is there a best practice for propagating changes among registered dependent packages?\n\nI have a registered packages `FooDep` which depends on my other package `Foo`. I’ve been making changes to `Foo`, registering and waiting, then updating `FooDep` to use the new version of Foo. This works ok, but is there a way to avoid the registration wait time?","user":"U011LUQ182G","ts":"1611162528.009600","team":"T68168MUP","edited":{"user":"U011LUQ182G","ts":"1611162538.000000"},"blocks":[{"type":"rich_text","block_id":"8Qi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is there a best practice for propagating changes among registered dependent packages?\n\nI have a registered packages "},{"type":"text","text":"FooDep","style":{"code":true}},{"type":"text","text":" which depends on my other package "},{"type":"text","text":"Foo","style":{"code":true}},{"type":"text","text":". I’ve been making changes to "},{"type":"text","text":"Foo","style":{"code":true}},{"type":"text","text":", registering and waiting, then updating "},{"type":"text","text":"FooDep","style":{"code":true}},{"type":"text","text":" to use the new version of Foo. This works ok, but is there a way to avoid the registration wait time?"}]}]}],"thread_ts":"1611162528.009600","reply_count":10,"reply_users_count":4,"latest_reply":"1611423148.012400","reply_users":["U68QW0PUZ","U011LUQ182G","U01FR2HFJ7M","U8T0YV7QC"],"subscribed":false},{"client_msg_id":"1067c13a-e790-4653-866d-a6d77a98a5a4","type":"message","text":"I have a small package that connects to a public API and downloads some data. The API requires a personal key for the connection. How can I test the package without publicly sharing my key? Are there any examples of this I can check? My package works fine, but I'd like to add some tests, both as an exercise for me, but also as good maintenance.","user":"UCAFZ51L3","ts":"1611176710.013300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g7R","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have a small package that connects to a public API and downloads some data. The API requires a personal key for the connection. How can I test the package without publicly sharing my key? Are there any examples of this I can check? My package works fine, but I'd like to add some tests, both as an exercise for me, but also as good maintenance."}]}]}],"thread_ts":"1611176710.013300","reply_count":3,"reply_users_count":2,"latest_reply":"1611181199.013800","reply_users":["U6NFPDBV1","UCAFZ51L3"],"subscribed":false},{"client_msg_id":"a392a2d0-3f51-4929-807c-ffb3d319ded0","type":"message","text":"When writing library code is it best to inbounds functions yourself or give the user the option to inbounds with @inbounds f()?\n\nIm assuming the first is better?","user":"U01FAHWCMFF","ts":"1611414036.003300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"N6Nq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"When writing library code is it best to inbounds functions yourself or give the user the option to inbounds with @inbounds f()?\n\nIm assuming the first is better?"}]}]}],"thread_ts":"1611414036.003300","reply_count":2,"reply_users_count":1,"latest_reply":"1611414783.003600","reply_users":["U6A936746"],"subscribed":false},{"client_msg_id":"5b397b3a-56b3-4562-8f01-57922f944e22","type":"message","text":"I have a short question regarding naming style. I have a struct containing a function, that depending on the situation (to be precise depending on the parameter `T`) might be mutating or non-mutating. Surely I'll wrap that accordingly for the user, as early as possible (i.e. with a direct evaluation function).\nThe goal is to support `MyStructs` that have either a `f(x)` or a `f!(y,x)` given (the first maybe for beginners).\n\n```struct MyStruct{T}\n\tmy_function::Function\nend```\nWhat would be a good name for `my_function` to indicate that it might be both mutating or nonmutating? I don't feel well using `my_function!` nor that well using `my_function` since both might be misleading (though direct access/appearance will only happen in 4 places). Maybe I should use some fancy utf8-symbol?","user":"UPJ6Q2SQY","ts":"1611477707.015100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FaTlk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have a short question regarding naming style. I have a struct containing a function, that depending on the situation (to be precise depending on the parameter "},{"type":"text","text":"T","style":{"code":true}},{"type":"text","text":") might be mutating or non-mutating. Surely I'll wrap that accordingly for the user, as early as possible (i.e. with a direct evaluation function).\nThe goal is to support "},{"type":"text","text":"MyStructs","style":{"code":true}},{"type":"text","text":" that have either a "},{"type":"text","text":"f(x)","style":{"code":true}},{"type":"text","text":" or a "},{"type":"text","text":"f!(y,x)","style":{"code":true}},{"type":"text","text":" given (the first maybe for beginners).\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct MyStruct{T}\n\tmy_function::Function\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nWhat would be a good name for "},{"type":"text","text":"my_function","style":{"code":true}},{"type":"text","text":" to indicate that it might be both mutating or nonmutating? I don't feel well using "},{"type":"text","text":"my_function!","style":{"code":true}},{"type":"text","text":" nor that well using "},{"type":"text","text":"my_function","style":{"code":true}},{"type":"text","text":" since both might be misleading (though direct access/appearance will only happen in 4 places). Maybe I should use some fancy utf8-symbol?"}]}]}],"thread_ts":"1611477707.015100","reply_count":6,"reply_users_count":3,"latest_reply":"1611482817.016300","reply_users":["U7HAYKY9X","UPJ6Q2SQY","U6A936746"],"subscribed":false},{"client_msg_id":"705231ec-438c-4f39-903c-9fb4690ce82e","type":"message","text":"Hello people, I got a question about whether to make a really central structure in a package of ours (Agents.jl) mutable or not mutable","user":"U8J1KET6K","ts":"1613676702.020800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bfls6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hello people, I got a question about whether to make a really central structure in a package of ours (Agents.jl) mutable or not mutable"}]}]}]},{"client_msg_id":"6508f7b2-394b-432c-8f42-3a5ffd5aa499","type":"message","text":"This structure, which at the moment is immutable, contains a dictionary of things, and this dictionary is mutated all the time. We needed to add a counter to this structure, that increments itself over time, and we had to go with a `Ref(::Int)` field, since we couldn't mutate the direct field in place.","user":"U8J1KET6K","ts":"1613676755.021900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"D3Ro","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This structure, which at the moment is immutable, contains a dictionary of things, and this dictionary is mutated all the time. We needed to add a counter to this structure, that increments itself over time, and we had to go with a "},{"type":"text","text":"Ref(::Int)","style":{"code":true}},{"type":"text","text":" field, since we couldn't mutate the direct field in place."}]}]}]},{"client_msg_id":"833a983f-3ffb-46ba-b12e-479c558f9967","type":"message","text":"My question is, what would be the arguments to keep our central structure immutable?","user":"U8J1KET6K","ts":"1613676765.022300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZPW4=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My question is, what would be the arguments to keep our central structure immutable?"}]}]}]},{"client_msg_id":"41cbed61-0d81-4e1c-b313-e616c1e93a49","type":"message","text":"We don't forsee a scenario where a user would make a vector of such structures for example, so is there any real benefit in the structure being immutable?","user":"U8J1KET6K","ts":"1613676790.022900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MR1N=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We don't forsee a scenario where a user would make a vector of such structures for example, so is there any real benefit in the structure being immutable?"}]}]}]},{"client_msg_id":"20c25511-d96d-4e7f-87e2-c7e76b838168","type":"message","text":"Perhaps it affects things like compilation speed? I must admit, I don't really know.","user":"U8J1KET6K","ts":"1613676824.023300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4/1hI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Perhaps it affects things like compilation speed? I must admit, I don't really know."}]}]}],"thread_ts":"1613676824.023300","reply_count":4,"reply_users_count":2,"latest_reply":"1613677840.025500","reply_users":["U7HAYKY9X","U8J1KET6K"],"subscribed":false},{"client_msg_id":"9d76ef39-a665-4a83-b00e-753cd407021c","type":"message","text":"I have functions that lazy-load a la `Requires.jl`, and it occurred to me that while I love the lazy-loading functionality, the functions (and more importantly their docstrings) aren't in the namespace before meeting the Requires.jl criteria. My solution was to create a stripped down method in the namespace that gives a helpful error when it's used `error: please load package XYZ with `using XYZ`` , which is then overwritten/replaced with the actual one once the package is loaded. Personally, I'm ok with my workaround, but I'm wondering if there's a way that `Requires.jl` can honor the docstrings of not-yet-loaded functions. Or perhaps a macro that forces returning an error with a message telling you to load in a package to \"unlock\" it","user":"UM4TSHKF1","ts":"1613678022.028400","team":"T68168MUP","edited":{"user":"UM4TSHKF1","ts":"1613678116.000000"},"blocks":[{"type":"rich_text","block_id":"LeGZ6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have functions that lazy-load a la "},{"type":"text","text":"Requires.jl","style":{"code":true}},{"type":"text","text":", and it occurred to me that while I love the lazy-loading functionality, the functions (and more importantly their docstrings) aren't in the namespace before meeting the Requires.jl criteria. My solution was to create a stripped down method in the namespace that gives a helpful error when it's used "},{"type":"text","text":"error: please load package XYZ with `using XYZ`","style":{"code":true}},{"type":"text","text":" , which is then overwritten/replaced with the actual one once the package is loaded. Personally, I'm ok with my workaround, but I'm wondering if there's a way that "},{"type":"text","text":"Requires.jl","style":{"code":true}},{"type":"text","text":" can honor the docstrings of not-yet-loaded functions. Or perhaps a macro that forces returning an error with a message telling you to load in a package to \"unlock\" it"}]}]}]},{"client_msg_id":"7b165974-1356-4b93-8bbf-0fb7a957a461","type":"message","text":"I have two packages: Manifolds.jl and ManifoldsBase.jl (an interface package) and I want to move a function from Manifolds.jl to ManifoldsBase.jl. This is technically a breaking change for the interface package since older versions of Manifolds.jl won't work as intended with newer versions of ManifoldsBase.jl. This new function won't break any other packages depending on ManifoldsBase.jl though. Given how frowned upon releasing breaking changes is (and especially for interface packages), what's the recommended way of handling this?","user":"U9AHT3YM7","ts":"1613730610.033500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gSv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have two packages: Manifolds.jl and ManifoldsBase.jl (an interface package) and I want to move a function from Manifolds.jl to ManifoldsBase.jl. This is technically a breaking change for the interface package since older versions of Manifolds.jl won't work as intended with newer versions of ManifoldsBase.jl. This new function won't break any other packages depending on ManifoldsBase.jl though. Given how frowned upon releasing breaking changes is (and especially for interface packages), what's the recommended way of handling this?"}]}]}],"thread_ts":"1613730610.033500","reply_count":6,"reply_users_count":2,"latest_reply":"1613732692.035000","reply_users":["U7HAYKY9X","U9AHT3YM7"],"subscribed":false},{"client_msg_id":"a1244186-9a3d-45b0-9c46-d1f3b6a795e9","type":"message","text":"Should packages have docstrings?","user":"USU9FRPEU","ts":"1614197415.000800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2Hwxk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Should packages have docstrings?"}]}]}]},{"client_msg_id":"afb8a633-9a31-430d-85a9-268a00dc4792","type":"message","text":"I :heart: docstrings on module names.","user":"U6740K1SP","ts":"1614198619.001100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EqEJk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I "},{"type":"emoji","name":"heart"},{"type":"text","text":" docstrings on module names."}]}]}],"reactions":[{"name":"point_up","users":["U82LX4ACB"],"count":1}]},{"client_msg_id":"70bf6d06-75df-44d4-b38d-bf518be46c4e","type":"message","text":"We should make that a requirement for registering a new package / tagging a new version.","user":"U67G3QRJM","ts":"1614202440.003700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EZS0s","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We should make that a requirement for registering a new package / tagging a new version."}]}]}]},{"client_msg_id":"210ee66e-5023-4617-80e1-d508b256b701","type":"message","text":"we used to show the README if there wasn’t a docstring.  I miss that.  A bunch of packages have very helpful briefs in their readmes.","user":"U6740K1SP","ts":"1614205266.004700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FCC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we used to show the README if there wasn’t a docstring.  I miss that.  A bunch of packages have very helpful briefs in their readmes."}]}]}]},{"client_msg_id":"2148f330-5d4d-42d7-8e9b-dcf3a875bd55","type":"message","text":"I wrote one for REPL and I've already found the minimal code used in a few blogs:\n```julia&gt; using REPL\n\nhelp?&gt; REPL\nsearch: REPL replace replace! atreplinit msg_reply BasicREPL LineEditREPL redisplay precompile StreamREPL __precompile__\n\n  Run Evaluate Print Loop (REPL)\n\n  Example minimal code\n  ```\n  import REPL\n  term = REPL.Terminals.TTYTerminal(\"dumb\", stdin, stdout, stderr)\n  repl = REPL.LineEditREPL(term, true)\n  REPL.run_repl(repl)\n  ``````\n","user":"USU9FRPEU","ts":"1614211167.006100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KYby","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I wrote one for REPL and I've already found the minimal code used in a few blogs:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using REPL\n\nhelp?> REPL\nsearch: REPL replace replace! atreplinit msg_reply BasicREPL LineEditREPL redisplay precompile StreamREPL __precompile__\n\n  Run Evaluate Print Loop (REPL)\n\n  Example minimal code\n  ```\n  import REPL\n  term = REPL.Terminals.TTYTerminal(\"dumb\", stdin, stdout, stderr)\n  repl = REPL.LineEditREPL(term, true)\n  REPL.run_repl(repl)\n  ```"}]},{"type":"rich_text_section","elements":[]}]}]},{"client_msg_id":"2d600813-0072-4ed4-9e72-4a000c3e8530","type":"message","text":"What the standard for the return value of mutating functions `foo!(a, b, c)`? Should they always return the modified element? And what if the modified element is a field for example (`a.field`)? Should `a` or `a.field` be returned?","user":"U7QLM6E2E","ts":"1614385553.011800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UZJtG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What the standard for the return value of mutating functions "},{"type":"text","text":"foo!(a, b, c)","style":{"code":true}},{"type":"text","text":"? Should they always return the modified element? And what if the modified element is a field for example ("},{"type":"text","text":"a.field","style":{"code":true}},{"type":"text","text":")? Should "},{"type":"text","text":"a","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"a.field","style":{"code":true}},{"type":"text","text":" be returned?"}]}]}]},{"client_msg_id":"43577f91-a978-4aeb-802b-5de292f97ed7","type":"message","text":"To what extent should I make my packages behave like the REPL vs non-REPL? e.g. `Integer^(negative integer)` :\n```julia&gt; 2^-1\n0.5\n\njulia&gt; foo(x, n) = x^n\nfoo (generic function with 1 method)\n\njulia&gt; foo(2, -1)\nERROR: DomainError with -1:\nCannot raise an integer x to a negative power -1.\nMake x or -1 a float by adding a zero decimal (e.g., 2.0^-1 or 2^-1.0 instead of 2^-1), or write 1/x^1, float(x)^-1, x^float(-1) or (x//1)^-1\nStacktrace:\n [1] throw_domerr_powbysq(#unused#::Int64, p::Int64)\n   @ Base ./intfuncs.jl:244\n [2] power_by_squaring(x_::Int64, p::Int64)\n   @ Base ./intfuncs.jl:265\n [3] ^\n   @ ./intfuncs.jl:289 [inlined]\n [4] foo(x::Int64, n::Int64)\n   @ Main ./REPL[2]:1\n [5] top-level scope\n   @ REPL[3]:1```\nIt's quite useful to automatically promote to `float`  and carry on, but is it bad practice?","user":"UDSG73JTH","ts":"1616166555.001500","team":"T68168MUP","edited":{"user":"UDSG73JTH","ts":"1616166591.000000"},"blocks":[{"type":"rich_text","block_id":"wuxq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"To what extent should I make my packages behave like the REPL vs non-REPL? e.g. "},{"type":"text","text":"Integer^(negative integer)","style":{"code":true}},{"type":"text","text":" :\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> 2^-1\n0.5\n\njulia> foo(x, n) = x^n\nfoo (generic function with 1 method)\n\njulia> foo(2, -1)\nERROR: DomainError with -1:\nCannot raise an integer x to a negative power -1.\nMake x or -1 a float by adding a zero decimal (e.g., 2.0^-1 or 2^-1.0 instead of 2^-1), or write 1/x^1, float(x)^-1, x^float(-1) or (x//1)^-1\nStacktrace:\n [1] throw_domerr_powbysq(#unused#::Int64, p::Int64)\n   @ Base ./intfuncs.jl:244\n [2] power_by_squaring(x_::Int64, p::Int64)\n   @ Base ./intfuncs.jl:265\n [3] ^\n   @ ./intfuncs.jl:289 [inlined]\n [4] foo(x::Int64, n::Int64)\n   @ Main ./REPL[2]:1\n [5] top-level scope\n   @ REPL[3]:1"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"It's quite useful to automatically promote to "},{"type":"text","text":"float","style":{"code":true}},{"type":"text","text":"  and carry on, but is it bad practice?"}]}]}],"thread_ts":"1616166555.001500","reply_count":3,"reply_users_count":2,"latest_reply":"1616166907.002100","reply_users":["U7HAYKY9X","U017LQ3A59U"],"subscribed":false},{"client_msg_id":"43aad961-8d69-49d7-9f61-29d6f23166d4","type":"message","text":"noob here. I want to dev someone else’s package but the “dev” function/command does not seem to be available from the REPL. It is also not part of the Pkg Package. Of course, when I run try to run their code `julia path/to/their/file.jl` I guess a package not installed error. Would someone point me to TFM? The best I could find is <https://www.youtube.com/watch?v=QVmU29rCjaA> starting at around 49:00.","user":"U01SUD7K8DR","ts":"1617202314.008800","team":"T68168MUP","attachments":[{"service_name":"YouTube","service_url":"https://www.youtube.com/","title":"Developing Julia Packages","title_link":"https://www.youtube.com/watch?v=QVmU29rCjaA","author_name":"The Julia Programming Language","author_link":"https://www.youtube.com/user/JuliaLanguage","thumb_url":"https://i.ytimg.com/vi/QVmU29rCjaA/hqdefault.jpg","thumb_width":480,"thumb_height":360,"fallback":"YouTube Video: Developing Julia Packages","video_html":"<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/QVmU29rCjaA?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","video_html_width":400,"video_html_height":225,"from_url":"https://www.youtube.com/watch?v=QVmU29rCjaA","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png","id":1,"original_url":"https://www.youtube.com/watch?v=QVmU29rCjaA"}],"blocks":[{"type":"rich_text","block_id":"PL5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"noob here. I want to dev someone else’s package but the “dev” function/command does not seem to be available from the REPL. It is also not part of the Pkg Package. Of course, when I run try to run their code "},{"type":"text","text":"julia path/to/their/file.jl","style":{"code":true}},{"type":"text","text":" I guess a package not installed error. Would someone point me to TFM? The best I could find is "},{"type":"link","url":"https://www.youtube.com/watch?v=QVmU29rCjaA"},{"type":"text","text":" starting at around 49:00."}]}]}],"thread_ts":"1617202314.008800","reply_count":5,"reply_users_count":2,"latest_reply":"1617203308.011300","reply_users":["U6C5KSWAC","U01SUD7K8DR"],"is_locked":false,"subscribed":false},{"client_msg_id":"6d875258-90e4-4752-b585-9c49202fb389","type":"message","text":"Or if there’s a better channel for this type of question, I am all ears :pray:","user":"U01SUD7K8DR","ts":"1617202344.009300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jS6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Or if there’s a better channel for this type of question, I am all ears "},{"type":"emoji","name":"pray"}]}]}]},{"client_msg_id":"e6046739-0619-44ba-95f0-343bed58253d","type":"message","text":"<@U01SUD7K8DR> <#C6A044SQH|helpdesk> might be better but you should be able to access the `dev` command in package mode (or through `using Pkg; Pkg.develop` :\n```(@v1.6) pkg&gt; ?dev\n  [dev|develop] [--shared|--local] pkg[=uuid] ...\n\n  Make a package available for development. If pkg is an existing local path, that path will be recorded in the manifest and used. Otherwise, a full git clone of pkg is made. The location of the clone is controlled by the\n  --shared (default) and --local arguments. The --shared location defaults to ~/.julia/dev, but can be controlled with the JULIA_PKG_DEVDIR environment variable. When --local is given, the clone is placed in a dev folder\n  in the current project. This operation is undone by free.\n\n  Examples\n\n  pkg&gt; develop Example\n  pkg&gt; develop <https://github.com/JuliaLang/Example.jl>\n  pkg&gt; develop ~/mypackages/Example\n  pkg&gt; develop --local Example```","user":"UEP056STX","ts":"1617202517.010100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qobaQ","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01SUD7K8DR"},{"type":"text","text":" "},{"type":"channel","channel_id":"C6A044SQH"},{"type":"text","text":" might be better but you should be able to access the "},{"type":"text","text":"dev","style":{"code":true}},{"type":"text","text":" command in package mode (or through "},{"type":"text","text":"using Pkg; Pkg.develop","style":{"code":true}},{"type":"text","text":" :\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"(@v1.6) pkg> ?dev\n  [dev|develop] [--shared|--local] pkg[=uuid] ...\n\n  Make a package available for development. If pkg is an existing local path, that path will be recorded in the manifest and used. Otherwise, a full git clone of pkg is made. The location of the clone is controlled by the\n  --shared (default) and --local arguments. The --shared location defaults to ~/.julia/dev, but can be controlled with the JULIA_PKG_DEVDIR environment variable. When --local is given, the clone is placed in a dev folder\n  in the current project. This operation is undone by free.\n\n  Examples\n\n  pkg> develop Example\n  pkg> develop "},{"type":"link","url":"https://github.com/JuliaLang/Example.jl"},{"type":"text","text":"\n  pkg> develop ~/mypackages/Example\n  pkg> develop --local Example"}]}]}],"thread_ts":"1617202517.010100","reply_count":1,"reply_users_count":1,"latest_reply":"1617202899.010900","reply_users":["U01SUD7K8DR"],"is_locked":false,"subscribed":false}]}