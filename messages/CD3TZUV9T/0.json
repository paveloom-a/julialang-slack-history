{"cursor": 0, "messages": [{"client_msg_id":"e5d9938b-450d-416f-8cfb-aebee038ee10","type":"message","text":"When setting up tests and you'd like to test some of the functions that exist in the userspace when using `Requires.jl`, is there a way to `add` and `using` the `Requires`'d packages without those packages being added to the project or manifest tomls? In other words, is there a way to temporarily add them for the sake of testing?","user":"UM4TSHKF1","ts":"1608223358.107300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MnuNd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"When setting up tests and you'd like to test some of the functions that exist in the userspace when using "},{"type":"text","text":"Requires.jl","style":{"code":true}},{"type":"text","text":", is there a way to "},{"type":"text","text":"add","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"using","style":{"code":true}},{"type":"text","text":" the "},{"type":"text","text":"Requires","style":{"code":true}},{"type":"text","text":"'d packages without those packages being added to the project or manifest tomls? In other words, is there a way to temporarily add them for the sake of testing?"}]}]}],"thread_ts":"1608223358.107300","reply_count":4,"reply_users_count":2,"latest_reply":"1608240367.108200","reply_users":["U6A936746","UM4TSHKF1"],"subscribed":false},{"client_msg_id":"56ec06c6-cf2d-4a00-86e4-85da1851feba","type":"message","text":"I recently encountered an error message on my Travis-CI page on one of my public Julia packages : \"Builds have been temporarily disabled for public repositories due to a negative credit balance.\" I was wondering if anybody knows if I can have a free Travis account that works for public (open source) packages. I can't really afford the monthly fee for the subscription Travis account.","user":"U01FRP892UE","ts":"1608577317.111700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"He1V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I recently encountered an error message on my Travis-CI page on one of my public Julia packages : \"Builds have been temporarily disabled for public repositories due to a negative credit balance.\" I was wondering if anybody knows if I can have a free Travis account that works for public (open source) packages. I can't really afford the monthly fee for the subscription Travis account."}]}]}],"thread_ts":"1608577317.111700","reply_count":6,"reply_users_count":4,"latest_reply":"1608596792.113100","reply_users":["U6NFPDBV1","U6A936746","U01FRP892UE","UB7JS9CHF"],"subscribed":false},{"client_msg_id":"17939469-381c-4db0-98cd-db8d7164f60b","type":"message","text":"When writing software to deal with data that is bigger than memory (30gb+ - 200gb) is the standard to rely on virtual memory (assuming a good preforming SSD) or process the data in chunks then merge at the end?\n\nI’m assuming there’s multiple opinions on this topic. I couldn’t find much information online.\n\nHeres how I see it from my opinion, please correct me if Im wrong.\n\nVirtual memory:\n• Easier to implement\n• Great when additional memory needed is not too big\n• Hardware dependent\n• Doesn’t preform well on really big data?\n• Not possible on docker??\nChunking:\n• More lines of code, more things can go wrong.\n• Not as hardware dependent\n• Preforms better on really big data?","user":"U01FAHWCMFF","ts":"1608948176.117500","team":"T68168MUP","edited":{"user":"U01FAHWCMFF","ts":"1608948476.000000"},"blocks":[{"type":"rich_text","block_id":"A7=2P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"When writing software to deal with data that is bigger than memory (30gb+ - 200gb) is the standard to rely on virtual memory (assuming a good preforming SSD) or process the data in chunks then merge at the end?\n\nI’m assuming there’s multiple opinions on this topic. I couldn’t find much information online.\n\nHeres how I see it from my opinion, please correct me if Im wrong.\n\nVirtual memory:\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Easier to implement"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Great when additional memory needed is not too big"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Hardware dependent"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Doesn’t preform well on really big data?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Not possible on docker??"}]}],"style":"bullet","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"\nChunking:\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"More lines of code, more things can go wrong."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Not as hardware dependent"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Preforms better on really big data?"}]}],"style":"bullet","indent":0}]}],"thread_ts":"1608948176.117500","reply_count":2,"reply_users_count":2,"latest_reply":"1608949550.118200","reply_users":["UDDUC4R1Q","U01FAHWCMFF"],"subscribed":false},{"client_msg_id":"2640acdb-ee3f-4a8e-b91f-5dc5da3c3259","type":"message","text":"Is there a standard way to determine whether you're in a CI run? Something like `parse(Bool, lowercase(get(ENV, \"CI\", \"false\")))`?","user":"UB2QRMQPN","ts":"1609180705.120400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"beW0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a standard way to determine whether you're in a CI run? Something like "},{"type":"text","text":"parse(Bool, lowercase(get(ENV, \"CI\", \"false\")))","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1609180705.120400","reply_count":1,"reply_users_count":1,"latest_reply":"1609181345.120500","reply_users":["U6NFPDBV1"],"subscribed":false},{"client_msg_id":"2ec516e6-208c-4fe6-af8b-72125e8ab0d1","type":"message","text":"Question on how to use structs - my impression is that struct fields need to be annotated explicitly to ensure type stability, e.g., \n```using Test\nstruct foo\n    a\nend\nf(x::foo) = x.a\n@inferred f(foo(1)) # is not type stable```\nI have a struct with a bunch of fields, and I’ve been explicitly annotating all types to ensure type stability. I now want to be able to use different types for some of these fields (e.g., from Array to SparseMatrixCSC). \n\nIs there a way to allow for this while retaining type stability? I figured I could use `Union`, but that seemed hacky. ","user":"U011LUQ182G","ts":"1610053289.129200","team":"T68168MUP","edited":{"user":"U011LUQ182G","ts":"1610053923.000000"},"blocks":[{"type":"rich_text","block_id":"x6YPg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Question on how to use structs - my impression is that struct fields need to be annotated explicitly to ensure type stability, e.g., \n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using Test\nstruct foo\n    a\nend\nf(x::foo) = x.a\n@inferred f(foo(1)) # is not type stable"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I have a struct with a bunch of fields, and I’ve been explicitly annotating all types to ensure type stability. I now want to be able to use different types for some of these fields (e.g., from Array to SparseMatrixCSC). \n\nIs there a way to allow for this while retaining type stability? I figured I could use "},{"type":"text","text":"Union","style":{"code":true}},{"type":"text","text":", but that seemed hacky. "}]}]}],"thread_ts":"1610053289.129200","reply_count":2,"reply_users_count":1,"latest_reply":"1610054067.129700","reply_users":["U6NFPDBV1"],"subscribed":false},{"client_msg_id":"feddd8b1-5016-43b2-b040-f4f96cc35aa4","type":"message","text":"are there any best practices or tips that one should be aware of when trying to write sql (in particular, sqlite) unit tests?","user":"US8V7JSKB","ts":"1610435118.139700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rwLck","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"are there any best practices or tips that one should be aware of when trying to write sql (in particular, sqlite) unit tests?"}]}]}]},{"client_msg_id":"b904fd84-5259-43fa-b8ab-feecf1a22937","type":"message","text":"What's a good practice to having two packages in one repo? Just don't? Or place the second package at the top level of the first?","user":"U7HAYKY9X","ts":"1610468634.140500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Cby","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What's a good practice to having two packages in one repo? Just don't? Or place the second package at the top level of the first?"}]}]}]},{"client_msg_id":"1a824105-7892-43a8-98c4-dba61ae0ed73","type":"message","text":"is there a best practice for propagating changes among registered dependent packages?\n\nI have a registered packages `FooDep` which depends on my other package `Foo`. I’ve been making changes to `Foo`, registering and waiting, then updating `FooDep` to use the new version of Foo. This works ok, but is there a way to avoid the registration wait time?","user":"U011LUQ182G","ts":"1611162528.009600","team":"T68168MUP","edited":{"user":"U011LUQ182G","ts":"1611162538.000000"},"blocks":[{"type":"rich_text","block_id":"8Qi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is there a best practice for propagating changes among registered dependent packages?\n\nI have a registered packages "},{"type":"text","text":"FooDep","style":{"code":true}},{"type":"text","text":" which depends on my other package "},{"type":"text","text":"Foo","style":{"code":true}},{"type":"text","text":". I’ve been making changes to "},{"type":"text","text":"Foo","style":{"code":true}},{"type":"text","text":", registering and waiting, then updating "},{"type":"text","text":"FooDep","style":{"code":true}},{"type":"text","text":" to use the new version of Foo. This works ok, but is there a way to avoid the registration wait time?"}]}]}],"thread_ts":"1611162528.009600","reply_count":10,"reply_users_count":4,"latest_reply":"1611423148.012400","reply_users":["U68QW0PUZ","U011LUQ182G","U01FR2HFJ7M","U8T0YV7QC"],"subscribed":false},{"client_msg_id":"1067c13a-e790-4653-866d-a6d77a98a5a4","type":"message","text":"I have a small package that connects to a public API and downloads some data. The API requires a personal key for the connection. How can I test the package without publicly sharing my key? Are there any examples of this I can check? My package works fine, but I'd like to add some tests, both as an exercise for me, but also as good maintenance.","user":"UCAFZ51L3","ts":"1611176710.013300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g7R","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have a small package that connects to a public API and downloads some data. The API requires a personal key for the connection. How can I test the package without publicly sharing my key? Are there any examples of this I can check? My package works fine, but I'd like to add some tests, both as an exercise for me, but also as good maintenance."}]}]}],"thread_ts":"1611176710.013300","reply_count":3,"reply_users_count":2,"latest_reply":"1611181199.013800","reply_users":["U6NFPDBV1","UCAFZ51L3"],"subscribed":false},{"client_msg_id":"a392a2d0-3f51-4929-807c-ffb3d319ded0","type":"message","text":"When writing library code is it best to inbounds functions yourself or give the user the option to inbounds with @inbounds f()?\n\nIm assuming the first is better?","user":"U01FAHWCMFF","ts":"1611414036.003300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"N6Nq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"When writing library code is it best to inbounds functions yourself or give the user the option to inbounds with @inbounds f()?\n\nIm assuming the first is better?"}]}]}],"thread_ts":"1611414036.003300","reply_count":2,"reply_users_count":1,"latest_reply":"1611414783.003600","reply_users":["U6A936746"],"subscribed":false},{"client_msg_id":"5b397b3a-56b3-4562-8f01-57922f944e22","type":"message","text":"I have a short question regarding naming style. I have a struct containing a function, that depending on the situation (to be precise depending on the parameter `T`) might be mutating or non-mutating. Surely I'll wrap that accordingly for the user, as early as possible (i.e. with a direct evaluation function).\nThe goal is to support `MyStructs` that have either a `f(x)` or a `f!(y,x)` given (the first maybe for beginners).\n\n```struct MyStruct{T}\n\tmy_function::Function\nend```\nWhat would be a good name for `my_function` to indicate that it might be both mutating or nonmutating? I don't feel well using `my_function!` nor that well using `my_function` since both might be misleading (though direct access/appearance will only happen in 4 places). Maybe I should use some fancy utf8-symbol?","user":"UPJ6Q2SQY","ts":"1611477707.015100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FaTlk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have a short question regarding naming style. I have a struct containing a function, that depending on the situation (to be precise depending on the parameter "},{"type":"text","text":"T","style":{"code":true}},{"type":"text","text":") might be mutating or non-mutating. Surely I'll wrap that accordingly for the user, as early as possible (i.e. with a direct evaluation function).\nThe goal is to support "},{"type":"text","text":"MyStructs","style":{"code":true}},{"type":"text","text":" that have either a "},{"type":"text","text":"f(x)","style":{"code":true}},{"type":"text","text":" or a "},{"type":"text","text":"f!(y,x)","style":{"code":true}},{"type":"text","text":" given (the first maybe for beginners).\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct MyStruct{T}\n\tmy_function::Function\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nWhat would be a good name for "},{"type":"text","text":"my_function","style":{"code":true}},{"type":"text","text":" to indicate that it might be both mutating or nonmutating? I don't feel well using "},{"type":"text","text":"my_function!","style":{"code":true}},{"type":"text","text":" nor that well using "},{"type":"text","text":"my_function","style":{"code":true}},{"type":"text","text":" since both might be misleading (though direct access/appearance will only happen in 4 places). Maybe I should use some fancy utf8-symbol?"}]}]}],"thread_ts":"1611477707.015100","reply_count":6,"reply_users_count":3,"latest_reply":"1611482817.016300","reply_users":["U7HAYKY9X","UPJ6Q2SQY","U6A936746"],"subscribed":false}]}