{"cursor": 0, "messages": [{"client_msg_id":"c0aec440-686b-4a38-ae00-815f41c18bc2","type":"message","text":"Is there a way to non-copy get an Arrow array from Python (via PyCall)? Asking because need rugged array provided by a python package","user":"UH8A351DJ","ts":"1609053755.250900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GBedn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a way to non-copy get an Arrow array from Python (via PyCall)? Asking because need rugged array provided by a python package"}]}]}]},{"client_msg_id":"9c05f336-e18f-4e66-8aa4-2dfba04dba95","type":"message","text":"Did something break with the new DataFrames and JSONTables? I haven't been able to create a DF using the example on the Readme for jtables, it returns a DF with one column and a dictionary on each row. Seems like I'm missing some extra step that wasn't required before, but I cannot figure it out.","user":"UCAFZ51L3","ts":"1609014572.247500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JfT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Did something break with the new DataFrames and JSONTables? I haven't been able to create a DF using the example on the Readme for jtables, it returns a DF with one column and a dictionary on each row. Seems like I'm missing some extra step that wasn't required before, but I cannot figure it out."}]}]}]},{"client_msg_id":"40bb0ef9-f2b7-4982-b4c6-287c0181bb20","type":"message","text":"Is it possible to use Apache Arrow to create a DataFrame that is larger than the available system memory?\nI don’t really need this ATM, but for peace of mind, I would like the capability to create a DataFrame of, say, 200 GB on my MacBook Pro that has 16 GB memory.","user":"U01CQTKB86N","ts":"1608974945.239300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MqCmj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is it possible to use Apache Arrow to create a DataFrame that is larger than the available system memory?\nI don’t really need this ATM, but for peace of mind, I would like the capability to create a DataFrame of, say, 200 GB on my MacBook Pro that has 16 GB memory."}]}]}],"thread_ts":"1608974945.239300","reply_count":2,"reply_users_count":1,"latest_reply":"1608976653.239600","reply_users":["U01CQTKB86N"],"subscribed":false},{"client_msg_id":"adaf16af-db5d-4dab-b61d-13fd05f0a5ca","type":"message","text":"Can someone confirm `df[shuffle(1:nrow(df)), :]` is the proper way to shuffle the rows of a dataframe?","user":"U01ARRMLM7E","ts":"1608842586.235200","team":"T68168MUP","edited":{"user":"U01ARRMLM7E","ts":"1608842659.000000"},"blocks":[{"type":"rich_text","block_id":"gAaE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can someone confirm "},{"type":"text","text":"df[shuffle(1:nrow(df)), :]","style":{"code":true}},{"type":"text","text":" is the proper way to shuffle the rows of a dataframe?"}]}]}]},{"client_msg_id":"44bd9f8d-c436-4349-84fe-6dda8ca7bb90","type":"message","text":"Also, the type is lost and the resulting value is an `Array{Any}`","user":"UKNN7CJ86","ts":"1608773192.233700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JEZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, the type is lost and the resulting value is an "},{"type":"text","text":"Array{Any}","style":{"code":true}}]}]}]},{"client_msg_id":"01dd2a66-815d-4772-b93a-f1e61fea96a2","type":"message","text":"here an example: it works, however I would prefer not having to use JSON as intermediary\n```bucket = Mongoc.Bucket(database)\nio = Mongoc.open_upload_stream(bucket, \"xxxxx\")\nwrite(io, JSON.json([1,2]))\nclose(io)\n\nMongoc.open_download_stream(bucket, \"xxxxx\") do io\n    tmp_str = read(io, String)\n    value = JSON.parse(tmp_str)\nend```","user":"UKNN7CJ86","ts":"1608773143.232900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/Tr4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"here an example: it works, however I would prefer not having to use JSON as intermediary\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"bucket = Mongoc.Bucket(database)\nio = Mongoc.open_upload_stream(bucket, \"xxxxx\")\nwrite(io, JSON.json([1,2]))\nclose(io)\n\nMongoc.open_download_stream(bucket, \"xxxxx\") do io\n    tmp_str = read(io, String)\n    value = JSON.parse(tmp_str)\nend"}]}]}]},{"client_msg_id":"f23372e2-cb38-44e9-8e33-23ba04d19ed8","type":"message","text":"I am trying to use the `buckets` in the `GridFS` of the `Mongoc` package. Can anyone confirm if that works with any data type or do I need to convert to Json (String) before uploading?","user":"UKNN7CJ86","ts":"1608772798.232100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wkzRO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am trying to use the "},{"type":"text","text":"buckets","style":{"code":true}},{"type":"text","text":" in the "},{"type":"text","text":"GridFS","style":{"code":true}},{"type":"text","text":" of the "},{"type":"text","text":"Mongoc","style":{"code":true}},{"type":"text","text":" package. Can anyone confirm if that works with any data type or do I need to convert to Json (String) before uploading?"}]}]}]},{"client_msg_id":"c31a734f-3b9a-46c1-93af-46febb72b840","type":"message","text":"Can Arrow.jl not deal with heterogenously typed tuples?\n```julia&gt; Arrow.write(\"foo.arrow\", DataFrame(a = [(1, 2.)]))\nERROR: MethodError: no method matching String(::Int64)\nClosest candidates are:\n  String(::String) at boot.jl:321\n  String(::Array{UInt8,1}) at strings/string.jl:39\n  String(::Base.CodeUnits{UInt8,String}) at strings/string.jl:77\n  ...\nStacktrace:\n [1] fieldoffset(::Arrow.FlatBuffers.Builder, ::Int64, ::Arrow.Primitive{Int64,Arrow.ToStruct{Int64,1,Array{Tuple{Int64,Float64},1}}}) at /local/scratch/ssd/sschaub/.julia/packages/Arrow/CyJ4L/src/write.jl:313\n [2] (::Arrow.var\"#74#75\"{Arrow.FlatBuffers.Builder,Arrow.Struct{Tuple{Int64,Float64},Tuple{Arrow.Primitive{Int64,Arrow.ToStruct{Int64,1,Array{Tuple{Int64,Float64},1}}},Arrow.Primitive{Float64,Arrow.ToStruct{Float64,2,Array{Tuple{Int64,Float64},1}}}}},Tuple{Int64,Int64}})(::Int64) at ./tuple.jl:0\n[...]```","user":"UM30MT6RF","ts":"1608718638.227600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"13Mv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can Arrow.jl not deal with heterogenously typed tuples?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Arrow.write(\"foo.arrow\", DataFrame(a = [(1, 2.)]))\nERROR: MethodError: no method matching String(::Int64)\nClosest candidates are:\n  String(::String) at boot.jl:321\n  String(::Array{UInt8,1}) at strings/string.jl:39\n  String(::Base.CodeUnits{UInt8,String}) at strings/string.jl:77\n  ...\nStacktrace:\n [1] fieldoffset(::Arrow.FlatBuffers.Builder, ::Int64, ::Arrow.Primitive{Int64,Arrow.ToStruct{Int64,1,Array{Tuple{Int64,Float64},1}}}) at /local/scratch/ssd/sschaub/.julia/packages/Arrow/CyJ4L/src/write.jl:313\n [2] (::Arrow.var\"#74#75\"{Arrow.FlatBuffers.Builder,Arrow.Struct{Tuple{Int64,Float64},Tuple{Arrow.Primitive{Int64,Arrow.ToStruct{Int64,1,Array{Tuple{Int64,Float64},1}}},Arrow.Primitive{Float64,Arrow.ToStruct{Float64,2,Array{Tuple{Int64,Float64},1}}}}},Tuple{Int64,Int64}})(::Int64) at ./tuple.jl:0\n[...]"}]}]}]},{"client_msg_id":"458eedc8-387f-4b85-ab26-7bcb0f554401","type":"message","text":"Hi, does anyone know how to load JDFs with FileTrees? (The issue is that JDFs get seen as directories rather than files.) I have asked about this before, but I can’t remember now how to do it, and the old response has disappeared into the slackhole. <@U68907M46> <@U6GD6JN2K>","user":"US8V7JSKB","ts":"1608675758.226300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"N8/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi, does anyone know how to load JDFs with FileTrees? (The issue is that JDFs get seen as directories rather than files.) I have asked about this before, but I can’t remember now how to do it, and the old response has disappeared into the slackhole. "},{"type":"user","user_id":"U68907M46"},{"type":"text","text":" "},{"type":"user","user_id":"U6GD6JN2K"}]}]}]},{"client_msg_id":"893726ea-1965-42e2-b9d8-371f65709e52","type":"message","text":"This <https://bkamins.github.io/julialang/2020/12/24/minilanguage.html> blog post was supposed to be published on 2020-12-24, but it seems my blog management software messed something up. But maybe it is better it went out early, as it is much longer than the average. I hope to answer with it, by-example, most of the questions people have regarding DataFrames.jl minilanguage.","user":"U8JAMQGQY","ts":"1608572665.222000","team":"T68168MUP","attachments":[{"service_name":"Blog by Bogumił Kamiński","title":"DataFrames.jl minilanguage explained","title_link":"https://bkamins.github.io/julialang/2020/12/24/minilanguage.html","text":"Introduction","fallback":"Blog by Bogumił Kamiński: DataFrames.jl minilanguage explained","ts":1608785495,"from_url":"https://bkamins.github.io/julialang/2020/12/24/minilanguage.html","service_icon":"https://bkamins.github.io/favicon.ico","id":1,"original_url":"https://bkamins.github.io/julialang/2020/12/24/minilanguage.html"}],"blocks":[{"type":"rich_text","block_id":"RXa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This "},{"type":"link","url":"https://bkamins.github.io/julialang/2020/12/24/minilanguage.html"},{"type":"text","text":" blog post was supposed to be published on 2020-12-24, but it seems my blog management software messed something up. But maybe it is better it went out early, as it is much longer than the average. I hope to answer with it, by-example, most of the questions people have regarding DataFrames.jl minilanguage."}]}]}],"reactions":[{"name":"100","users":["UBF9YRB6H","UAVMYR0F4","U68P09RFZ","U01CQTKB86N","UCAFZ51L3","U8JP5B9T2","US8V7JSKB","UKG4WF8PJ","U01EF0QVAB0","UK1BNFHFV"],"count":10},{"name":"+1::skin-tone-2","users":["U8T0YV7QC"],"count":1},{"name":"clap","users":["U01FR784NSW","U7EF5AWHW"],"count":2}]},{"client_msg_id":"661c4992-34b5-4230-8b0d-bfbe3e694f01","type":"message","text":"Anyone that uses YAML.jl able to review this PR? It looks purely like added functionality, but I'm not super familiar with the internals (despite being the package steward somehow) <https://github.com/JuliaData/YAML.jl/pull/104>","user":"U8JP5B9T2","ts":"1608567196.220000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mJg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Anyone that uses YAML.jl able to review this PR? It looks purely like added functionality, but I'm not super familiar with the internals (despite being the package steward somehow) "},{"type":"link","url":"https://github.com/JuliaData/YAML.jl/pull/104"}]}]}]},{"client_msg_id":"116c853c-9a30-42b7-b844-8c312c61ad7c","type":"message","text":"In `transform()` the name of the output goes at the end. Why is the `insertcols!` syntax `:b =&gt; [1,2,3]` instead of `[1,2,3] =&gt; :b` ?","user":"U01ARRMLM7E","ts":"1608414983.212400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c7AeD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In "},{"type":"text","text":"transform()","style":{"code":true}},{"type":"text","text":" the name of the output goes at the end. Why is the "},{"type":"text","text":"insertcols!","style":{"code":true}},{"type":"text","text":" syntax "},{"type":"text","text":":b => [1,2,3]","style":{"code":true}},{"type":"text","text":" instead of "},{"type":"text","text":"[1,2,3] => :b","style":{"code":true}},{"type":"text","text":" ?"}]}]}],"thread_ts":"1608414983.212400","reply_count":1,"reply_users_count":1,"latest_reply":"1608415396.212900","reply_users":["U8JAMQGQY"],"subscribed":false},{"client_msg_id":"ddb7ccc1-c8bf-44cc-ad8d-a08f8589934f","type":"message","text":"I’m trying to collapse the time dimension in a longitudinal dataset. For some columns, I just want the first value but some of the columns begin with a missing so there I’d like the first non-missing value. After reading the docs, <https://dataframes.juliadata.org/stable/man/split_apply_combine/>, I thought I could do something like this\n```datetime_df = combine(\n    groupby(df, :id),\n    AsTable([\"datetime\", \"Gender\"]) =&gt; (t -&gt; (datetime=first(t.datetime), Gender=first(t.Gender))) =&gt; AsTable)```\nbut it gives me\n```ERROR: ArgumentError: Unrecognized column selector: AsTable([\"datetime\", \"Gender\"]) =&gt; (var\"#283#284\"() =&gt; AsTable)```\nAm I doing something obviously wrong here?","user":"U680T6770","ts":"1608413892.211400","team":"T68168MUP","edited":{"user":"U680T6770","ts":"1608413920.000000"},"blocks":[{"type":"rich_text","block_id":"y=a1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’m trying to collapse the time dimension in a longitudinal dataset. For some columns, I just want the first value but some of the columns begin with a missing so there I’d like the first non-missing value. After reading the docs, "},{"type":"link","url":"https://dataframes.juliadata.org/stable/man/split_apply_combine/"},{"type":"text","text":", I thought I could do something like this\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"datetime_df = combine(\n    groupby(df, :id),\n    AsTable([\"datetime\", \"Gender\"]) => (t -> (datetime=first(t.datetime), Gender=first(t.Gender))) => AsTable)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"but it gives me\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"ERROR: ArgumentError: Unrecognized column selector: AsTable([\"datetime\", \"Gender\"]) => (var\"#283#284\"() => AsTable)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Am I doing something obviously wrong here?"}]}]}],"thread_ts":"1608413892.211400","reply_count":15,"reply_users_count":2,"latest_reply":"1608418100.217500","reply_users":["U8JAMQGQY","U680T6770"],"subscribed":false},{"client_msg_id":"9323c54d-ba4f-4671-9bad-7b42b9991b77","type":"message","text":"yes, or `setindex!(df, [1,2,3], :, :b)` or `setindex!(df, [1,2,3], !, :b)` the difference between these three options is when `:b` would be present in `df` (`insertcols!` will error, `:` is in-place, and `!` replaces)","user":"U8JAMQGQY","ts":"1608412394.209400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Lfg2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, or "},{"type":"text","text":"setindex!(df, [1,2,3], :, :b)","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"setindex!(df, [1,2,3], !, :b)","style":{"code":true}},{"type":"text","text":" the difference between these three options is when "},{"type":"text","text":":b","style":{"code":true}},{"type":"text","text":" would be present in "},{"type":"text","text":"df","style":{"code":true}},{"type":"text","text":" ("},{"type":"text","text":"insertcols!","style":{"code":true}},{"type":"text","text":" will error, "},{"type":"text","text":":","style":{"code":true}},{"type":"text","text":" is in-place, and "},{"type":"text","text":"!","style":{"code":true}},{"type":"text","text":" replaces)"}]}]}]},{"client_msg_id":"1dd28caf-77ee-4a6d-8d27-4531ae5bc22a","type":"message","text":"maybe\n```insertcols!(copy(df), :b =&gt; [1,2,3])```","user":"UK1BNFHFV","ts":"1608412286.208000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CDI+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"maybe\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"insertcols!(copy(df), :b => [1,2,3])"}]}]}]},{"client_msg_id":"2b8ccdf4-0018-42e0-8a5c-3871835393a5","type":"message","text":"```df = DataFrame(a=[1,2,3])\ntransform(df, [] =&gt; (()-&gt;[1,2,3]) =&gt; :b)```\nIs there a nicer way to do this (without macros, without in-place operations)?","user":"U01ARRMLM7E","ts":"1608408702.207500","team":"T68168MUP","edited":{"user":"U01ARRMLM7E","ts":"1608408943.000000"},"blocks":[{"type":"rich_text","block_id":"I+y9","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"df = DataFrame(a=[1,2,3])\ntransform(df, [] => (()->[1,2,3]) => :b)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a nicer way to do this (without macros, without in-place operations)?"}]}]}]},{"type":"message","text":"I appreciate this error. :smile: It's a lot more useful than a `MethodError` from deep within a libary-internal call stack","files":[{"id":"F01HP2VSZ8R","created":1608395988,"timestamp":1608395988,"name":"image.png","title":"image.png","mimetype":"image/png","filetype":"png","pretty_type":"PNG","user":"U68M6ERG8","editable":false,"size":22572,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01HP2VSZ8R/image.png","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01HP2VSZ8R/download/image.png","thumb_64":"https://files.slack.com/files-tmb/T68168MUP-F01HP2VSZ8R-7706960f54/image_64.png","thumb_80":"https://files.slack.com/files-tmb/T68168MUP-F01HP2VSZ8R-7706960f54/image_80.png","thumb_360":"https://files.slack.com/files-tmb/T68168MUP-F01HP2VSZ8R-7706960f54/image_360.png","thumb_360_w":360,"thumb_360_h":38,"thumb_480":"https://files.slack.com/files-tmb/T68168MUP-F01HP2VSZ8R-7706960f54/image_480.png","thumb_480_w":480,"thumb_480_h":51,"thumb_160":"https://files.slack.com/files-tmb/T68168MUP-F01HP2VSZ8R-7706960f54/image_160.png","thumb_720":"https://files.slack.com/files-tmb/T68168MUP-F01HP2VSZ8R-7706960f54/image_720.png","thumb_720_w":720,"thumb_720_h":76,"thumb_800":"https://files.slack.com/files-tmb/T68168MUP-F01HP2VSZ8R-7706960f54/image_800.png","thumb_800_w":800,"thumb_800_h":85,"thumb_960":"https://files.slack.com/files-tmb/T68168MUP-F01HP2VSZ8R-7706960f54/image_960.png","thumb_960_w":960,"thumb_960_h":102,"thumb_1024":"https://files.slack.com/files-tmb/T68168MUP-F01HP2VSZ8R-7706960f54/image_1024.png","thumb_1024_w":1024,"thumb_1024_h":108,"original_w":1378,"original_h":146,"thumb_tiny":"AwAFADDR2n+9Rg/3qdRQAmPc0Y9zS0UAJj3NGPc0tFAH/9k=","permalink":"https://julialang.slack.com/files/U68M6ERG8/F01HP2VSZ8R/image.png","permalink_public":"https://slack-files.com/T68168MUP-F01HP2VSZ8R-0420ffacfb","is_starred":false,"has_rich_preview":false}],"upload":false,"blocks":[{"type":"rich_text","block_id":"JIi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I appreciate this error. "},{"type":"emoji","name":"smile"},{"type":"text","text":" It's a lot more useful than a "},{"type":"text","text":"MethodError","style":{"code":true}},{"type":"text","text":" from deep within a libary-internal call stack"}]}]}],"user":"U68M6ERG8","display_as_bot":false,"ts":"1608396081.205800","reactions":[{"name":"+1","users":["UB197FRCL","U6795JH6H","U969CNQU9"],"count":3}]},{"client_msg_id":"8a511119-62c0-489d-9ed6-4216105495ac","type":"message","text":"A quick H2O data wrangling benchmark update. It now introduced handling of missing values in the tests. The test suite uncovered several bugs in different ecosystems that are much more mature than DataFrames.jl and interestingly no bugs in Julia :smile: (see <https://github.com/h2oai/db-benchmark/issues/40#issuecomment-747919633> for details).","user":"U8JAMQGQY","ts":"1608280043.198600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hV8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"A quick H2O data wrangling benchmark update. It now introduced handling of missing values in the tests. The test suite uncovered several bugs in different ecosystems that are much more mature than DataFrames.jl and interestingly no bugs in Julia "},{"type":"emoji","name":"smile"},{"type":"text","text":" (see "},{"type":"link","url":"https://github.com/h2oai/db-benchmark/issues/40#issuecomment-747919633"},{"type":"text","text":" for details)."}]}]}],"thread_ts":"1608280043.198600","reply_count":2,"reply_users_count":2,"latest_reply":"1608315543.203900","reply_users":["UBF9YRB6H","U8JAMQGQY"],"subscribed":false,"reactions":[{"name":"+1","users":["U67431ELR","U6A936746","U681ELA87","U01C15GH58B","U66M57AN4","UKG4WF8PJ","US8V7JSKB","UFWQ6DP0S"],"count":8},{"name":"gunther","users":["USFR23ZHQ","U681ELA87","U66M57AN4","UKG4WF8PJ"],"count":4},{"name":"mask-parrot","users":["U01GXNFKY6R","U66M57AN4","UKG4WF8PJ"],"count":3}]},{"client_msg_id":"2c78d12a-a98e-4eb2-beed-657b93629ae2","type":"message","text":"Recently I have received a private message on how to reproduce `case_when` from dplyr in Julia. Here are my conclusions: <https://bkamins.github.io/julialang/2020/12/18/casewhen.html>.","user":"U8JAMQGQY","ts":"1608279573.196900","team":"T68168MUP","attachments":[{"service_name":"Blog by Bogumił Kamiński","title":"Is case_when needed in DataFrames.jl?","title_link":"https://bkamins.github.io/julialang/2020/12/18/casewhen.html","text":"Introduction","fallback":"Blog by Bogumił Kamiński: Is case_when needed in DataFrames.jl?","ts":1608273193,"from_url":"https://bkamins.github.io/julialang/2020/12/18/casewhen.html","service_icon":"https://bkamins.github.io/favicon.ico","id":1,"original_url":"https://bkamins.github.io/julialang/2020/12/18/casewhen.html"}],"blocks":[{"type":"rich_text","block_id":"E3ir","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Recently I have received a private message on how to reproduce "},{"type":"text","text":"case_when","style":{"code":true}},{"type":"text","text":" from dplyr in Julia. Here are my conclusions: "},{"type":"link","url":"https://bkamins.github.io/julialang/2020/12/18/casewhen.html"},{"type":"text","text":"."}]}]}],"thread_ts":"1608279573.196900","reply_count":14,"reply_users_count":3,"latest_reply":"1608313116.203300","reply_users":["U67431ELR","U8JAMQGQY","UBF9YRB6H"],"subscribed":false,"reactions":[{"name":"fire","users":["UM4TSHKF1"],"count":1}]},{"client_msg_id":"1b85085d-84d6-4c43-972f-95ddce5d4cb8","type":"message","text":"is `mapreduce(DataFrame∘CSV.File, vcat, all_csvs);` the best practice of reading multiple CSV into a single DataFrame?","user":"UH8A351DJ","ts":"1608227930.183700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fWbV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is "},{"type":"text","text":"mapreduce(DataFrame∘CSV.File, vcat, all_csvs);","style":{"code":true}},{"type":"text","text":" the best practice of reading multiple CSV into a single DataFrame?"}]}]}],"thread_ts":"1608227930.183700","reply_count":22,"reply_users_count":6,"latest_reply":"1608243979.194000","reply_users":["UBF9YRB6H","U8JAMQGQY","UH8A351DJ","U681ELA87","UDXST8ARK","U82LX4ACB"],"subscribed":false},{"client_msg_id":"a43f3a41-19b3-4ce8-a826-c5cac4aa82aa","type":"message","text":"<https://discourse.julialang.org/t/techempower-frameworkbenchmarks-r20-deadline-12-28-first-julia-json-serialization-results/51936>","user":"UDGT4PM41","ts":"1608165958.182100","team":"T68168MUP","attachments":[{"service_name":"JuliaLang","title":"TechEmpower/FrameworkBenchmarks R20 deadline 12/28 + first julia \"JSON serialization\" results","title_link":"https://discourse.julialang.org/t/techempower-frameworkbenchmarks-r20-deadline-12-28-first-julia-json-serialization-results/51936","text":"TLDR: Techempower Framework benchmarks is a collaborative, open web framework benchmarking project The next release: Round 20 \"Last day for PR review is 12/28. \" First Julia results ( “http.jl” ) … current “rank: 149/166” not the best… :slightly_smiling_face: So if anybody has an experience in performance tuning ; then please check the current code. ( http.jl ) and/or please add a new/better/alternative Julia code Details: The good news, somebody ( not me ) has been added the first Ju...","fallback":"JuliaLang: TechEmpower/FrameworkBenchmarks R20 deadline 12/28 + first julia \"JSON serialization\" results","thumb_url":"https://aws1.discourse-cdn.com/business5/uploads/julialang/original/3X/0/3/03bea743f30b3b17cc3fb6b34a12068d13cd5ffb.png","fields":[{"title":"Reading time","value":"1 mins :clock2:","short":true},{"title":"Likes","value":"13 :heart:","short":true}],"ts":1608131860,"from_url":"https://discourse.julialang.org/t/techempower-frameworkbenchmarks-r20-deadline-12-28-first-julia-json-serialization-results/51936","thumb_width":486,"thumb_height":32,"service_icon":"https://aws1.discourse-cdn.com/business5/uploads/julialang/optimized/2X/6/6ca888e296f59ca2a599807f7d5edd489e3d1829_2_180x180.png","id":1,"original_url":"https://discourse.julialang.org/t/techempower-frameworkbenchmarks-r20-deadline-12-28-first-julia-json-serialization-results/51936"}],"blocks":[{"type":"rich_text","block_id":"Gto/","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://discourse.julialang.org/t/techempower-frameworkbenchmarks-r20-deadline-12-28-first-julia-json-serialization-results/51936"}]}]}]},{"client_msg_id":"6afe1744-12b0-47b1-a34a-c24ae6cb2e68","type":"message","text":"Did there used to be a `by()`  function in DataFrames.jl?","user":"U01ARRMLM7E","ts":"1608156180.178600","team":"T68168MUP","edited":{"user":"U01ARRMLM7E","ts":"1608156200.000000"},"blocks":[{"type":"rich_text","block_id":"IBhWJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Did there used to be a "},{"type":"text","text":"by()","style":{"code":true}},{"type":"text","text":"  function in DataFrames.jl?"}]}]}],"thread_ts":"1608156180.178600","reply_count":11,"reply_users_count":5,"latest_reply":"1608161694.181300","reply_users":["U67431ELR","U01ARRMLM7E","U6740K1SP","UBF9YRB6H","USTUBS9ED"],"subscribed":false},{"client_msg_id":"b1c36da9-6cc2-42ac-a733-1fa1578848a9","type":"message","text":"I have a .csv that has a (seemingly on purpose) emtpy last column with no missing marker. I.e., each row just ends on `;\\n`. Is there a way that I can tell CSV to ignore the last row, preferably without `drop`? As it is, I get an annoying warning that \"Thread 1 only found 6/7 columns\" in the last row","user":"UH24GRBLL","ts":"1608133613.172500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cQX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have a .csv that has a (seemingly on purpose) emtpy last column with no missing marker. I.e., each row just ends on "},{"type":"text","text":";\\n","style":{"code":true}},{"type":"text","text":". Is there a way that I can tell CSV to ignore the last row, preferably without "},{"type":"text","text":"drop","style":{"code":true}},{"type":"text","text":"? As it is, I get an annoying warning that \"Thread 1 only found 6/7 columns\" in the last row"}]}]}],"thread_ts":"1608133613.172500","reply_count":16,"reply_users_count":2,"latest_reply":"1608144633.177500","reply_users":["U681ELA87","UH24GRBLL"],"subscribed":false},{"client_msg_id":"c7002a13-d159-49e1-89a7-6372b86be5d6","type":"message","text":"<@U681ELA87> you described how to write arrow files from a bunch of CSV files just a couple of weeks ago, but it's already lost to the slack hole. I remember it had to do with `Tables.partitioner`, but I'm having issues. I currently have\n```Arrow.write(\"path/file.arrow\", Tables.partitioner(csvs) do file\n    df = CSV.File(file) |&gt; DataFrame\n    # some processing\n    return df\nend)```\nBut I'm having some issues. It's possible that the error is within my dataframe, but it looks like it's coming from Arrow - did I miss something? Should the call to `Arrow.write` come inside the partitioner loop?","user":"U8JP5B9T2","ts":"1608084336.164900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Uz2Iu","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U681ELA87"},{"type":"text","text":" you described how to write arrow files from a bunch of CSV files just a couple of weeks ago, but it's already lost to the slack hole. I remember it had to do with "},{"type":"text","text":"Tables.partitioner","style":{"code":true}},{"type":"text","text":", but I'm having issues. I currently have\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Arrow.write(\"path/file.arrow\", Tables.partitioner(csvs) do file\n    df = CSV.File(file) |> DataFrame\n    # some processing\n    return df\nend)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"But I'm having some issues. It's possible that the error is within my dataframe, but it looks like it's coming from Arrow - did I miss something? Should the call to "},{"type":"text","text":"Arrow.write","style":{"code":true}},{"type":"text","text":" come inside the partitioner loop?"}]}]}],"thread_ts":"1608084336.164900","reply_count":10,"reply_users_count":2,"latest_reply":"1608129295.170700","reply_users":["U681ELA87","U8JP5B9T2"],"subscribed":false},{"client_msg_id":"78083daf-22ce-48c9-b85a-782771d877b9","type":"message","text":"What does one call the row-ness or column-ness of a table? Orientation? does someone have a better word?","user":"U01ECBX4MB7","ts":"1608057454.158400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5s3/Q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What does one call the row-ness or column-ness of a table? Orientation? does someone have a better word?"}]}]}],"thread_ts":"1608057454.158400","reply_count":1,"reply_users_count":1,"latest_reply":"1608057801.159200","reply_users":["U681ELA87"],"subscribed":false},{"client_msg_id":"a29cbaad-09ab-4571-b70e-062e59119a0f","type":"message","text":"If I define a type, which is a generator of tables (`NamedTuple` of vectors), do I have to do / can I do anything other than define `Tables.partitions(x::MyGenerator) = x` ?","user":"U01ECBX4MB7","ts":"1608056601.156200","team":"T68168MUP","edited":{"user":"U01ECBX4MB7","ts":"1608056927.000000"},"blocks":[{"type":"rich_text","block_id":"uT31Z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If I define a type, which is a generator of tables ("},{"type":"text","text":"NamedTuple","style":{"code":true}},{"type":"text","text":" of vectors), do I have to do / can I do anything other than define "},{"type":"text","text":"Tables.partitions(x::MyGenerator) = x","style":{"code":true}},{"type":"text","text":" ?"}]}]}],"thread_ts":"1608056601.156200","reply_count":8,"reply_users_count":2,"latest_reply":"1608058871.159400","reply_users":["U681ELA87","U01ECBX4MB7"],"subscribed":false},{"client_msg_id":"87360e70-84ed-40d7-b064-490d772f67f4","type":"message","text":"How can I get back a `Date` from a `Dates.value(my_date)`? `Date(737774)` will of course just produce the first of January in the year 737774","user":"U7JQGPGCQ","ts":"1608052313.153300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5ZfrR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How can I get back a "},{"type":"text","text":"Date","style":{"code":true}},{"type":"text","text":" from a "},{"type":"text","text":"Dates.value(my_date)","style":{"code":true}},{"type":"text","text":"? "},{"type":"text","text":"Date(737774)","style":{"code":true}},{"type":"text","text":" will of course just produce the first of January in the year 737774"}]}]}],"thread_ts":"1608052313.153300","reply_count":4,"reply_users_count":2,"latest_reply":"1608053470.154000","reply_users":["U7JQGPGCQ","U681ELA87"],"subscribed":false},{"client_msg_id":"1ef96e12-99bc-464c-a6c9-0fd63e069c2b","type":"message","text":"<https://github.com/JuliaData/YAML.jl/pull/66>","user":"U8JP5B9T2","ts":"1608043008.151000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qSm","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaData/YAML.jl/pull/66"}]}]}]},{"client_msg_id":"f5f97666-309d-47b6-9314-a01397451149","type":"message","text":"Can someone with a windows machine check out this PR and run tests locally? We have a windows build failure but PR author says they pass locally, want to make sure that's not a fluke","user":"U8JP5B9T2","ts":"1608042915.150800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iwJFJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can someone with a windows machine check out this PR and run tests locally? We have a windows build failure but PR author says they pass locally, want to make sure that's not a fluke"}]}]}],"thread_ts":"1608042915.150800","reply_count":4,"reply_users_count":2,"latest_reply":"1608050094.152100","reply_users":["UEN48T0BT","U8JP5B9T2"],"subscribed":false},{"client_msg_id":"1A6F2FA7-FE55-4B96-9EF5-90B22ED8EBBF","type":"message","text":"This is expected. TypedTables is, as described, well-typed and will have that code advantage for specific operations. DataFrames eachrow is untyped, so relies on dynamic dispatch for each iteration. But try mapping over a df with a thousand columns and you’ll see TypedTables bring the compiler to its knees. There are trade offs, and TT (or `Tables.namedtupleiterator(df)`) should def be used in performance-critical situations.","user":"U681ELA87","ts":"1608010215.143300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5dU6v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is expected. TypedTables is, as described, well-typed and will have that code advantage for specific operations. DataFrames eachrow is untyped, so relies on dynamic dispatch for each iteration. But try mapping over a df with a thousand columns and you’ll see TypedTables bring the compiler to its knees. There are trade offs, and TT (or "},{"type":"text","text":"Tables.namedtupleiterator(df)","style":{"code":true}},{"type":"text","text":") should def be used in performance-critical situations."}]}]}],"thread_ts":"1608010215.143300","reply_count":5,"reply_users_count":4,"latest_reply":"1608015842.148100","reply_users":["UH8A351DJ","U681ELA87","U8JAMQGQY","UBF9YRB6H"],"subscribed":false,"reactions":[{"name":"heart","users":["UH8A351DJ","U6QGE7S86","UQE0NBSS1"],"count":3},{"name":"+1","users":["UH8A351DJ","UBF9YRB6H","U6A936746","U82LX4ACB","U6QGE7S86","UQE0NBSS1"],"count":6}]},{"type":"message","subtype":"thread_broadcast","text":"```julia&gt; using DataFrames, TypedTables\n\njulia&gt; loop(row) = row.x1 + row.x2 + sin(row.x3)\nloop (generic function with 1 method)\n\njulia&gt; df = DataFrame(rand(30000,3));\n\njulia&gt; @btime map(loop, Table(df));\n  217.713 μs (17 allocations: 235.06 KiB)\n\njulia&gt; @btime map(loop, eachrow(df));\n  5.170 ms (358479 allocations: 5.70 MiB)\n\njulia&gt; map(loop, eachrow(df)) == map(loop, Table(df))\ntrue```","user":"UH8A351DJ","ts":"1608009011.138000","thread_ts":"1608008494.137800","root":{"client_msg_id":"d4f05541-2bef-46b2-88cc-43224f608c88","type":"message","text":"`map(f, eachrow(df))` is much slower (and a lot more allocation) than `map(f, Table(df))`, Table from TypedTable.jl","user":"UH8A351DJ","ts":"1608008494.137800","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1608008503.000000"},"blocks":[{"type":"rich_text","block_id":"RZ9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"map(f, eachrow(df))","style":{"code":true}},{"type":"text","text":" is much slower (and a lot more allocation) than "},{"type":"text","text":"map(f, Table(df))","style":{"code":true}},{"type":"text","text":", Table from TypedTable.jl"}]}]}],"thread_ts":"1608008494.137800","reply_count":4,"reply_users_count":3,"latest_reply":"1608024258.148900","reply_users":["UH8A351DJ","U8JAMQGQY","U01ARRMLM7E"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"nKcoH","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using DataFrames, TypedTables\n\njulia> loop(row) = row.x1 + row.x2 + sin(row.x3)\nloop (generic function with 1 method)\n\njulia> df = DataFrame(rand(30000,3));\n\njulia> @btime map(loop, Table(df));\n  217.713 μs (17 allocations: 235.06 KiB)\n\njulia> @btime map(loop, eachrow(df));\n  5.170 ms (358479 allocations: 5.70 MiB)\n\njulia> map(loop, eachrow(df)) == map(loop, Table(df))\ntrue"}]}]}],"client_msg_id":"d1f830db-246c-4cdc-96a1-03b98fd6b2e2"},{"client_msg_id":"d4f05541-2bef-46b2-88cc-43224f608c88","type":"message","text":"`map(f, eachrow(df))` is much slower (and a lot more allocation) than `map(f, Table(df))`, Table from TypedTable.jl","user":"UH8A351DJ","ts":"1608008494.137800","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1608008503.000000"},"blocks":[{"type":"rich_text","block_id":"RZ9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"map(f, eachrow(df))","style":{"code":true}},{"type":"text","text":" is much slower (and a lot more allocation) than "},{"type":"text","text":"map(f, Table(df))","style":{"code":true}},{"type":"text","text":", Table from TypedTable.jl"}]}]}],"thread_ts":"1608008494.137800","reply_count":4,"reply_users_count":3,"latest_reply":"1608024258.148900","reply_users":["UH8A351DJ","U8JAMQGQY","U01ARRMLM7E"],"subscribed":false},{"client_msg_id":"172c01f9-118c-4e3a-b6f4-b357d79d0d30","type":"message","text":"How can I avoid this problem?","user":"U01ARRMLM7E","ts":"1608005673.135300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DjS6p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How can I avoid this problem?"}]}]}],"thread_ts":"1608005673.135300","reply_count":1,"reply_users_count":1,"latest_reply":"1608014725.147600","reply_users":["U8JAMQGQY"],"subscribed":false},{"client_msg_id":"b824d895-f3e4-448a-b97e-32e6d5274ba8","type":"message","text":"```julia&gt; DataFrame()\nError showing value of type DataFrame:\nERROR: TypeError: in keyword argument maximum_columns_width, expected Union{Int64, AbstractArray{Int64,1}}, got a value of type Array{Any,1}\nStacktrace:\n [1] _pt(::IOContext{REPL.Terminals.TTYTerminal}, ::PrettyTables.ColumnTable, ::Array{Any,2}; alignment::Array{Symbol,1}, backend::Nothing, cell_alignment::Nothing, cell_first_line_only::Bool, compact_printing::Bool, filters_row::Nothing, filters_col::Nothing, formatters::Tuple{typeof(DataFrames._pretty_tables_general_formatter),DataFrames.var\"#ft_float#558\"{Bool,Array{Int64,1},Array{Int64,1}}}, header_alignment::Symbol, header_cell_alignment::Nothing, renderer::Symbol, row_names::Nothing, row_name_alignment::Symbol, row_name_column_title::String, row_number_column_title::String, show_row_number::Bool, title::String, title_alignment::Symbol, kwargs::Base.Iterators.Pairs{Symbol,Any,NTuple{12,Symbol},NamedTuple{(:crop, :crop_num_lines_at_beginning, :ellipsis_line_skip, :hlines, :highlighters, :maximum_columns_width, :newline_at_end, :nosubheader, :row_name_crayon, :row_number_alignment, :vcrop_mode, :vlines),Tuple{Symbol,Int64,Int64,Array{Symbol,1},Tuple{PrettyTables.Highlighter},Array{Any,1},Bool,Bool,Crayons.Crayon,Symbol,Symbol,Array{Int64,1}}}}) at julia/packages/PrettyTables/W16qB/src/private.jl:422\n [2] _pretty_table(::IOContext{REPL.Terminals.TTYTerminal}, ::DataFrame, ::Array{Any,2}; kwargs::Base.Iterators.Pairs{Symbol,Any,NTuple{22,Symbol},NamedTuple{(:alignment, :compact_printing, :crop, :crop_num_lines_at_beginning, :ellipsis_line_skip, :formatters, :header_alignment, :hlines, :highlighters, :maximum_columns_width, :newline_at_end, :nosubheader, :row_name_alignment, :row_name_crayon, :row_name_column_title, :row_names, :row_number_alignment, :row_number_column_title, :show_row_number, :title, :vcrop_mode, :vlines),Tuple{Array{Symbol,1},Bool,Symbol,Int64,Int64,Tuple{typeof(DataFrames._pretty_tables_general_formatter),DataFrames.var\"#ft_float#558\"{Bool,Array{Int64,1},Array{Int64,1}}},Symbol,Array{Symbol,1},Tuple{PrettyTables.Highlighter},Array{Any,1},Bool,Bool,Symbol,Crayons.Crayon,String,Nothing,Symbol,String,Bool,String,Symbol,Array{Int64,1}}}}) at julia/packages/PrettyTables/W16qB/src/private.jl:356\n [3] pretty_table(::IOContext{REPL.Terminals.TTYTerminal}, ::DataFrame, ::Array{Any,2}; kwargs::Base.Iterators.Pairs{Symbol,Any,NTuple{22,Symbol},NamedTuple{(:alignment, :compact_printing, :crop, :crop_num_lines_at_beginning, :ellipsis_line_skip, :formatters, :header_alignment, :hlines, :highlighters, :maximum_columns_width, :newline_at_end, :nosubheader, :row_name_alignment, :row_name_crayon, :row_name_column_title, :row_names, :row_number_alignment, :row_number_column_title, :show_row_number, :title, :vcrop_mode, :vlines),Tuple{Array{Symbol,1},Bool,Symbol,Int64,Int64,Tuple{typeof(DataFrames._pretty_tables_general_formatter),DataFrames.var\"#ft_float#558\"{Bool,Array{Int64,1},Array{Int64,1}}},Symbol,Array{Symbol,1},Tuple{PrettyTables.Highlighter},Array{Any,1},Bool,Bool,Symbol,Crayons.Crayon,String,Nothing,Symbol,String,Bool,String,Symbol,Array{Int64,1}}}}) at julia/packages/PrettyTables/W16qB/src/print.jl:693\n [4] _show(::IOContext{REPL.Terminals.TTYTerminal}, ::DataFrame; allrows::Bool, allcols::Bool, rowlabel::Symbol, summary::Bool, eltypes::Bool, rowid::Nothing, truncate::Int64, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at julia/packages/DataFrames/Y3fUF/src/abstractdataframe/show.jl:388\n [5] #show#560 at julia/packages/DataFrames/Y3fUF/src/abstractdataframe/show.jl:480 [inlined]\n [6] show(::IOContext{REPL.Terminals.TTYTerminal}, ::DataFrame) at julia/packages/DataFrames/Y3fUF/src/abstractdataframe/show.jl:480\n [7] #show#575 at julia/packages/DataFrames/Y3fUF/src/abstractdataframe/io.jl:50 [inlined]\n [8] show(::IOContext{REPL.Terminals.TTYTerminal}, ::MIME{Symbol(\"text/plain\")}, ::DataFrame) at julia/packages/DataFrames/Y3fUF/src/abstractdataframe/io.jl:50\n [9] display(::REPL.REPLDisplay, ::MIME{Symbol(\"text/plain\")}, ::Any) at /build/source/usr/share/julia/stdlib/v1.5/REPL/src/REPL.jl:214\n [10] display(::REPL.REPLDisplay, ::Any) at /build/source/usr/share/julia/stdlib/v1.5/REPL/src/REPL.jl:218\n [11] display(::Any) at ./multimedia.jl:328```","user":"U01ARRMLM7E","ts":"1608005446.134900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"occ9-HG2A","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> DataFrame()\nError showing value of type DataFrame:\nERROR: TypeError: in keyword argument maximum_columns_width, expected Union{Int64, AbstractArray{Int64,1}}, got a value of type Array{Any,1}\nStacktrace:\n [1] _pt(::IOContext{REPL.Terminals.TTYTerminal}, ::PrettyTables.ColumnTable, ::Array{Any,2}; alignment::Array{Symbol,1}, backend::Nothing, cell_alignment::Nothing, cell_first_line_only::Bool, compact_printing::Bool, filters_row::Nothing, filters_col::Nothing, formatters::Tuple{typeof(DataFrames._pretty_tables_general_formatter),DataFrames.var\"#ft_float#558\"{Bool,Array{Int64,1},Array{Int64,1}}}, header_alignment::Symbol, header_cell_alignment::Nothing, renderer::Symbol, row_names::Nothing, row_name_alignment::Symbol, row_name_column_title::String, row_number_column_title::String, show_row_number::Bool, title::String, title_alignment::Symbol, kwargs::Base.Iterators.Pairs{Symbol,Any,NTuple{12,Symbol},NamedTuple{(:crop, :crop_num_lines_at_beginning, :ellipsis_line_skip, :hlines, :highlighters, :maximum_columns_width, :newline_at_end, :nosubheader, :row_name_crayon, :row_number_alignment, :vcrop_mode, :vlines),Tuple{Symbol,Int64,Int64,Array{Symbol,1},Tuple{PrettyTables.Highlighter},Array{Any,1},Bool,Bool,Crayons.Crayon,Symbol,Symbol,Array{Int64,1}}}}) at julia/packages/PrettyTables/W16qB/src/private.jl:422\n [2] _pretty_table(::IOContext{REPL.Terminals.TTYTerminal}, ::DataFrame, ::Array{Any,2}; kwargs::Base.Iterators.Pairs{Symbol,Any,NTuple{22,Symbol},NamedTuple{(:alignment, :compact_printing, :crop, :crop_num_lines_at_beginning, :ellipsis_line_skip, :formatters, :header_alignment, :hlines, :highlighters, :maximum_columns_width, :newline_at_end, :nosubheader, :row_name_alignment, :row_name_crayon, :row_name_column_title, :row_names, :row_number_alignment, :row_number_column_title, :show_row_number, :title, :vcrop_mode, :vlines),Tuple{Array{Symbol,1},Bool,Symbol,Int64,Int64,Tuple{typeof(DataFrames._pretty_tables_general_formatter),DataFrames.var\"#ft_float#558\"{Bool,Array{Int64,1},Array{Int64,1}}},Symbol,Array{Symbol,1},Tuple{PrettyTables.Highlighter},Array{Any,1},Bool,Bool,Symbol,Crayons.Crayon,String,Nothing,Symbol,String,Bool,String,Symbol,Array{Int64,1}}}}) at julia/packages/PrettyTables/W16qB/src/private.jl:356\n [3] pretty_table(::IOContext{REPL.Terminals.TTYTerminal}, ::DataFrame, ::Array{Any,2}; kwargs::Base.Iterators.Pairs{Symbol,Any,NTuple{22,Symbol},NamedTuple{(:alignment, :compact_printing, :crop, :crop_num_lines_at_beginning, :ellipsis_line_skip, :formatters, :header_alignment, :hlines, :highlighters, :maximum_columns_width, :newline_at_end, :nosubheader, :row_name_alignment, :row_name_crayon, :row_name_column_title, :row_names, :row_number_alignment, :row_number_column_title, :show_row_number, :title, :vcrop_mode, :vlines),Tuple{Array{Symbol,1},Bool,Symbol,Int64,Int64,Tuple{typeof(DataFrames._pretty_tables_general_formatter),DataFrames.var\"#ft_float#558\"{Bool,Array{Int64,1},Array{Int64,1}}},Symbol,Array{Symbol,1},Tuple{PrettyTables.Highlighter},Array{Any,1},Bool,Bool,Symbol,Crayons.Crayon,String,Nothing,Symbol,String,Bool,String,Symbol,Array{Int64,1}}}}) at julia/packages/PrettyTables/W16qB/src/print.jl:693\n [4] _show(::IOContext{REPL.Terminals.TTYTerminal}, ::DataFrame; allrows::Bool, allcols::Bool, rowlabel::Symbol, summary::Bool, eltypes::Bool, rowid::Nothing, truncate::Int64, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at julia/packages/DataFrames/Y3fUF/src/abstractdataframe/show.jl:388\n [5] #show#560 at julia/packages/DataFrames/Y3fUF/src/abstractdataframe/show.jl:480 [inlined]\n [6] show(::IOContext{REPL.Terminals.TTYTerminal}, ::DataFrame) at julia/packages/DataFrames/Y3fUF/src/abstractdataframe/show.jl:480\n [7] #show#575 at julia/packages/DataFrames/Y3fUF/src/abstractdataframe/io.jl:50 [inlined]\n [8] show(::IOContext{REPL.Terminals.TTYTerminal}, ::MIME{Symbol(\"text/plain\")}, ::DataFrame) at julia/packages/DataFrames/Y3fUF/src/abstractdataframe/io.jl:50\n [9] display(::REPL.REPLDisplay, ::MIME{Symbol(\"text/plain\")}, ::Any) at /build/source/usr/share/julia/stdlib/v1.5/REPL/src/REPL.jl:214\n [10] display(::REPL.REPLDisplay, ::Any) at /build/source/usr/share/julia/stdlib/v1.5/REPL/src/REPL.jl:218\n [11] display(::Any) at ./multimedia.jl:328"}]}]}]},{"client_msg_id":"b824d895-f3e4-448a-b97e-32e6d5274ba8","type":"message","text":"When I `using Turing` I am no longer able to view DataFrame objects in the repl.\n","user":"U01ARRMLM7E","ts":"1608005446.134800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"occ9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"When I "},{"type":"text","text":"using Turing","style":{"code":true}},{"type":"text","text":" I am no longer able to view DataFrame objects in the repl.\n"}]}]}],"reactions":[{"name":"bug","users":["UBF9YRB6H","UEN48T0BT"],"count":2}]},{"client_msg_id":"7bd78e23-ecb6-4e17-b618-a02f5ed3d8ad","type":"message","text":"Is there a recommended format for incorporating metadata in an Arrow file?  I know that `Arrow.setmetadata!` takes a `Dict{String,String}` but I was wondering about what keys to use.  Coming from an R background I would use keys like `title` , `description` and `reference` for a data set and perhaps `description` and, optionally, `units` to individual columns.  Is there prior art or alternative suggestions?","user":"UBGRZ7FSP","ts":"1607967082.131900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CKDfV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a recommended format for incorporating metadata in an Arrow file?  I know that "},{"type":"text","text":"Arrow.setmetadata!","style":{"code":true}},{"type":"text","text":" takes a "},{"type":"text","text":"Dict{String,String}","style":{"code":true}},{"type":"text","text":" but I was wondering about what keys to use.  Coming from an R background I would use keys like "},{"type":"text","text":"title","style":{"code":true}},{"type":"text","text":" , "},{"type":"text","text":"description","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"reference","style":{"code":true}},{"type":"text","text":" for a data set and perhaps "},{"type":"text","text":"description","style":{"code":true}},{"type":"text","text":" and, optionally, "},{"type":"text","text":"units","style":{"code":true}},{"type":"text","text":" to individual columns.  Is there prior art or alternative suggestions?"}]}]}],"thread_ts":"1607967082.131900","reply_count":3,"reply_users_count":2,"latest_reply":"1607967596.132500","reply_users":["U67431ELR","U681ELA87"],"subscribed":false,"reactions":[{"name":"+1","users":["U82LX4ACB"],"count":1}]},{"client_msg_id":"d8df33b3-1dde-4573-80ba-372d06d2b39f","type":"message","text":"is there an advised way in LibPQ to convert psql types to julia types?\n\nright now I have x = LibPQ.PQ_SYSTEM_TYPES[sym] and then LibPQ.__DEFAULT_TYPE_MAP[x]_\n\nbut I have an issue when I have a type \"timestamp with time zone\", which I believe maps to :timestamptz but I'm not 100% sure and I can't seem to find the piece of code where this occurs","user":"U6CF3AA5Q","ts":"1607911699.125000","team":"T68168MUP","edited":{"user":"U6CF3AA5Q","ts":"1607911753.000000"},"blocks":[{"type":"rich_text","block_id":"S9NZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is there an advised way in LibPQ to convert psql types to julia types?\n\nright now I have x = LibPQ.PQ_SYSTEM_TYPES[sym] and then LibPQ._"},{"type":"text","text":"DEFAULT_TYPE_MAP[x]","style":{"italic":true}},{"type":"text","text":"\n\nbut I have an issue when I have a type \"timestamp with time zone\", which I believe maps to :timestamptz but I'm not 100% sure and I can't seem to find the piece of code where this occurs"}]}]}],"thread_ts":"1607911699.125000","reply_count":6,"reply_users_count":3,"latest_reply":"1607980868.133800","reply_users":["UDXST8ARK","U69J94HT9","U6CF3AA5Q"],"subscribed":false},{"client_msg_id":"50fe1f18-cd10-41b5-8eb5-b382d83b278d","type":"message","text":"any idea to make the `Float32[]` less spammy?","user":"UH8A351DJ","ts":"1607910055.121800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"25c6E","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"any idea to make the "},{"type":"text","text":"Float32[]","style":{"code":true}},{"type":"text","text":" less spammy?"}]}]}]},{"type":"message","text":"","files":[{"id":"F01GQEELVMK","created":1607910041,"timestamp":1607910041,"name":"image.png","title":"image.png","mimetype":"image/png","filetype":"png","pretty_type":"PNG","user":"UH8A351DJ","editable":false,"size":48519,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01GQEELVMK/image.png","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01GQEELVMK/download/image.png","thumb_64":"https://files.slack.com/files-tmb/T68168MUP-F01GQEELVMK-c9e75caa28/image_64.png","thumb_80":"https://files.slack.com/files-tmb/T68168MUP-F01GQEELVMK-c9e75caa28/image_80.png","thumb_360":"https://files.slack.com/files-tmb/T68168MUP-F01GQEELVMK-c9e75caa28/image_360.png","thumb_360_w":360,"thumb_360_h":222,"thumb_480":"https://files.slack.com/files-tmb/T68168MUP-F01GQEELVMK-c9e75caa28/image_480.png","thumb_480_w":480,"thumb_480_h":296,"thumb_160":"https://files.slack.com/files-tmb/T68168MUP-F01GQEELVMK-c9e75caa28/image_160.png","thumb_720":"https://files.slack.com/files-tmb/T68168MUP-F01GQEELVMK-c9e75caa28/image_720.png","thumb_720_w":720,"thumb_720_h":443,"original_w":742,"original_h":457,"thumb_tiny":"AwAdADCpx6UDHoaAcdjTs+xoAbx6Gk/CnbgD0o3DNADfwpKViD0pKAHYJPFGGpQcUbjQAmDRgmlBxQDigBrdaSlbrSUAf//Z","permalink":"https://julialang.slack.com/files/UH8A351DJ/F01GQEELVMK/image.png","permalink_public":"https://slack-files.com/T68168MUP-F01GQEELVMK-dbbf2404e3","is_starred":false,"has_rich_preview":false}],"upload":false,"user":"UH8A351DJ","display_as_bot":false,"ts":"1607910043.121300","thread_ts":"1607910043.121300","reply_count":1,"reply_users_count":1,"latest_reply":"1607935054.125500","reply_users":["U67431ELR"],"subscribed":false}]}