{"cursor": 0, "messages": [{"client_msg_id":"f45dc03e-27d0-4713-a184-eeb9b0aa0967","type":"message","text":"Hi there. I have a very basic question about macros. I am trying to define a macro that generate the second method based on the first one. (something does something based on x, not only x[i])\n```f(i::Int, x::Vector) = something(x[i],x)\nf(x::Vector) = map(i -&gt; f(i, x), 1:length(x))```\nAny idea?","user":"U01FR2HFJ7M","ts":"1608622994.068400","team":"T68168MUP","edited":{"user":"U01FR2HFJ7M","ts":"1608623257.000000"},"blocks":[{"type":"rich_text","block_id":"iPO2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi there. I have a very basic question about macros. I am trying to define a macro that generate the second method based on the first one. (something does something based on x, not only x[i])\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"f(i::Int, x::Vector) = something(x[i],x)\nf(x::Vector) = map(i -> f(i, x), 1:length(x))"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Any idea?"}]}]}]},{"client_msg_id":"7a3004cf-0b61-459f-8bc3-26dc66c0aada","type":"message","text":"<@U01FR2HFJ7M> What do you need to do that needs a macro?","user":"U6QGE7S86","ts":"1608668741.069500","team":"T68168MUP","edited":{"user":"U6QGE7S86","ts":"1608668754.000000"},"blocks":[{"type":"rich_text","block_id":"8r=Vj","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01FR2HFJ7M"},{"type":"text","text":" What do you need to do that needs a macro?"}]}]}]},{"client_msg_id":"927aa77e-70c1-4f3e-ae3f-784faf2b519c","type":"message","text":"You might be able to do the same by making an array / dict of functions and then looking it up, then calling it.","user":"U6QGE7S86","ts":"1608668777.070100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fZn4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You might be able to do the same by making an array / dict of functions and then looking it up, then calling it."}]}]}]},{"client_msg_id":"15b3b9dd-0374-41ee-9841-e81d305715c2","type":"message","text":"One reason is that I'm lazy and I have a lot of those function. Also, users of my package can add some function on the fly that would need that the second method to be generated. But I can probably try to do something with a dict. Thanks for the help <@U6QGE7S86>","user":"U01FR2HFJ7M","ts":"1608676895.075200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Tlc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"One reason is that I'm lazy and I have a lot of those function. Also, users of my package can add some function on the fly that would need that the second method to be generated. But I can probably try to do something with a dict. Thanks for the help "},{"type":"user","user_id":"U6QGE7S86"}]}]}]},{"client_msg_id":"27e986e7-22c3-4785-8bf8-5aa55c00967b","type":"message","text":"```julia&gt; f(x) = 2x\nf (generic function with 1 method)\n\njulia&gt; h(x) = 3x\nh (generic function with 1 method)\n\njulia&gt; z(x) = 4x\nz (generic function with 1 method)\n\njulia&gt; funcs = (f,z,h)\n(f, z, h)\n\njulia&gt; funcs[2](3)\n12```","user":"U6QGE7S86","ts":"1608680352.076100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"V5M","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> f(x) = 2x\nf (generic function with 1 method)\n\njulia> h(x) = 3x\nh (generic function with 1 method)\n\njulia> z(x) = 4x\nz (generic function with 1 method)\n\njulia> funcs = (f,z,h)\n(f, z, h)\n\njulia> funcs[2](3)\n12"}]}]}]},{"client_msg_id":"d34d77b8-9346-4913-a7ad-6f425e079225","type":"message","text":"<@U01FR2HFJ7M> can you identify all the possible funcitons that you need to generate without input data?","user":"U6QGE7S86","ts":"1608680386.076700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"24bC","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01FR2HFJ7M"},{"type":"text","text":" can you identify all the possible funcitons that you need to generate without input data?"}]}]}]},{"client_msg_id":"5e3982f8-de81-4983-9169-7c666b0e7344","type":"message","text":"(i.e, at compile time?)","user":"U6QGE7S86","ts":"1608680624.077000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Msa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(i.e, at compile time?)"}]}]}]},{"client_msg_id":"67ab13bb-ac61-44eb-b538-58f59fe011e9","type":"message","text":"For most yes, but not all of them (as the user is likely to input some of its own).\nMore than using a macro, I wanted something as easy to use as the `@lazy` macro  of Lazy.jl.\nWell, I will go with handcoded ones for a start and think carefully for the user input ones later","user":"U01FR2HFJ7M","ts":"1608682705.081200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6zr34","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For most yes, but not all of them (as the user is likely to input some of its own).\nMore than using a macro, I wanted something as easy to use as the "},{"type":"text","text":"@lazy","style":{"code":true}},{"type":"text","text":" macro  of Lazy.jl.\nWell, I will go with handcoded ones for a start and think carefully for the user input ones later"}]}]}]},{"client_msg_id":"E3FE7BD7-F81A-4E15-BC04-9607420F85B1","type":"message","text":"So I’m not 100% sure of this, but I think that Julia is a lisp that uses M expressions. Is that written down somewhere that I could cite in a blog post? ","user":"U69L6CPJN","ts":"1609887218.084000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pnUB9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So I’m not 100% sure of this, but I think that Julia is a lisp that uses M expressions. Is that written down somewhere that I could cite in a blog post? "}]}]}]},{"client_msg_id":"CEBEC1AC-0D34-472F-A103-22137A09C94B","type":"message","text":"As I think about it, I’m not sure I know what “is a lisp” or “uses M expressions” really mean in a precise sense. ","user":"U69L6CPJN","ts":"1609887264.084700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"k=H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"As I think about it, I’m not sure I know what “is a lisp” or “uses M expressions” really mean in a precise sense. "}]}]}]},{"client_msg_id":"be058a3c-1292-454c-910f-e1d9e160c283","type":"message","text":"I think the general response is 'meh, what does it really mean to be a lisp anyways?'","user":"U8D9768Q6","ts":"1609890553.085400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=oKc8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think the general response is 'meh, what does it really mean to be a lisp anyways?'"}]}]}]},{"client_msg_id":"7cfd85e4-f15f-4d1b-984d-e1cecd1b7e32","type":"message","text":"It's generally not worth claiming to be a lisp, just like it was not worth claiming to have dependent types.","user":"U8D9768Q6","ts":"1609890590.086100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"izI2+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's generally not worth claiming to be a lisp, just like it was not worth claiming to have dependent types."}]}]}]},{"client_msg_id":"d4dd636b-aa5a-4b40-9b32-1bf56f19bda5","type":"message","text":"Many people in the lisp community don't consider Clojure to be a lisp. It would not be productive to have this conversation with those people","user":"U8D9768Q6","ts":"1609890630.086900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2sDT8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Many people in the lisp community don't consider Clojure to be a lisp. It would not be productive to have this conversation with those people"}]}]}]},{"client_msg_id":"b519ca74-2c1d-4d93-87a7-e8a2f17c03c0","type":"message","text":"but we do have dependent types!","user":"U69L6CPJN","ts":"1609899521.087200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yVL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but we do have dependent types!"}]}]}]},{"client_msg_id":"bd4877da-6a55-47e3-856a-1ab605ad3a7f","type":"message","text":"On a complete aside, in my opinion, being a lisp is moreso a philosophy then a set of features a language has.","user":"UDD5Z7FLZ","ts":"1609901453.087700","team":"T68168MUP","edited":{"user":"UDD5Z7FLZ","ts":"1609901463.000000"},"blocks":[{"type":"rich_text","block_id":"5wV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"On a complete aside, in my opinion, being a lisp is moreso a philosophy then a set of features a language has."}]}]}]},{"type":"message","subtype":"thread_broadcast","text":"Yes, but we no longer claim to have them because it upsets PL wheenies too much.","user":"U8D9768Q6","ts":"1609901727.087900","thread_ts":"1609899521.087200","root":{"client_msg_id":"b519ca74-2c1d-4d93-87a7-e8a2f17c03c0","type":"message","text":"but we do have dependent types!","user":"U69L6CPJN","ts":"1609899521.087200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yVL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but we do have dependent types!"}]}]}],"thread_ts":"1609899521.087200","reply_count":3,"reply_users_count":2,"latest_reply":"1609901954.089200","reply_users":["U8D9768Q6","U69L6CPJN"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"ZBv6r","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, but we no longer claim to have them because it upsets PL wheenies too much."}]}]}],"client_msg_id":"ed9aa3b7-b71e-45cc-8c11-a17a5ca9aded"},{"client_msg_id":"a48800f8-bb64-4190-a2db-9263028dedb6","type":"message","text":"I'd say lisp is a language family that Julia is closely related to, but not really a member of.","user":"U8D9768Q6","ts":"1609901774.088800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XYLAB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'd say lisp is a language family that Julia is closely related to, but not really a member of."}]}]}]},{"client_msg_id":"4ed986c5-668c-4685-8b38-5e50fd5a3899","type":"message","text":"Wikipedia says:\n&gt;  There are several new dialects of Lisp: <https://en.wikipedia.org/wiki/Arc_(programming_language)|Arc>, <https://en.wikipedia.org/wiki/Hy|Hy>, <https://en.wikipedia.org/wiki/Nu_(programming_language)|Nu>, <https://en.wikipedia.org/w/index.php?title=Liskell&amp;action=edit&amp;redlink=1|Liskell>, and <https://en.wikipedia.org/wiki/LFE_(programming_language)|LFE> (Lisp Flavored Erlang). The parser for <https://en.wikipedia.org/wiki/Julia_(programming_language)|Julia> is implemented in Femtolisp, a dialect of <https://en.wikipedia.org/wiki/Scheme_(programming_language)|Scheme> (Julia is inspired by Scheme, which in turn is a Lisp dialect).","user":"U69L6CPJN","ts":"1609902067.089600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WkC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Wikipedia says:\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":" There are several new dialects of Lisp: "},{"type":"link","url":"https://en.wikipedia.org/wiki/Arc_(programming_language)","text":"Arc"},{"type":"text","text":", "},{"type":"link","url":"https://en.wikipedia.org/wiki/Hy","text":"Hy"},{"type":"text","text":", "},{"type":"link","url":"https://en.wikipedia.org/wiki/Nu_(programming_language)","text":"Nu"},{"type":"text","text":", "},{"type":"link","url":"https://en.wikipedia.org/w/index.php?title=Liskell&action=edit&redlink=1","text":"Liskell"},{"type":"text","text":", and "},{"type":"link","url":"https://en.wikipedia.org/wiki/LFE_(programming_language)","text":"LFE"},{"type":"text","text":" (Lisp Flavored Erlang). The parser for "},{"type":"link","url":"https://en.wikipedia.org/wiki/Julia_(programming_language)","text":"Julia"},{"type":"text","text":" is implemented in Femtolisp, a dialect of "},{"type":"link","url":"https://en.wikipedia.org/wiki/Scheme_(programming_language)","text":"Scheme"},{"type":"text","text":" (Julia is inspired by Scheme, which in turn is a Lisp dialect)."}]}]}]},{"client_msg_id":"b850f916-9dc0-4301-b48c-1fb2c9ec80d8","type":"message","text":"Seems like all you need to be a lisp is homoiconicity, macros, and S-Expressions as a core data structure and lambdas (functions as data)","user":"U69L6CPJN","ts":"1609902171.090300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZRk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Seems like all you need to be a lisp is homoiconicity, macros, and S-Expressions as a core data structure and lambdas (functions as data)"}]}]}]},{"client_msg_id":"f010a305-146c-4a88-ac4f-32f08cec0623","type":"message","text":"based on the wiki page","user":"U69L6CPJN","ts":"1609902179.090500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Kauv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"based on the wiki page"}]}]}]},{"client_msg_id":"24502E9F-2516-4142-A7D8-27B8DFCFF505","type":"message","text":"<@U8D9768Q6> thats the cringiest thread I’ve ever read","user":"UKA81L34J","ts":"1609903403.091200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iSE+","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U8D9768Q6"},{"type":"text","text":" thats the cringiest thread I’ve ever read"}]}]}]},{"client_msg_id":"B30BECC6-CB72-4D74-AD68-1647C2B12800","type":"message","text":"You win","user":"UKA81L34J","ts":"1609903413.091400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Nf9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You win"}]}]}]},{"client_msg_id":"BACAAF91-0C20-4453-8D8B-6EC2D70C3C62","type":"message","text":"Sooo bad","user":"U8D9768Q6","ts":"1609903915.091800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WaFty","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sooo bad"}]}]}]},{"client_msg_id":"F27767D8-2DE0-47BD-B611-5971DD0C4254","type":"message","text":"What about when I dispatch on generated functions with isbits values ? Am I doing dependent types ?","user":"UKA81L34J","ts":"1609904464.092800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7DXAq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What about when I dispatch on generated functions with isbits values ? Am I doing dependent types ?"}]}]}]},{"client_msg_id":"2D01DFFC-67EE-4A36-9C05-9D3A950C54A2","type":"message","text":"Does Zig have dependent types with comptime ?","user":"UKA81L34J","ts":"1609904492.093300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Aosy6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does Zig have dependent types with comptime ?"}]}]}]},{"client_msg_id":"891DA576-0608-41FC-BD05-0F195801D0F4","type":"message","text":"I have so many questions","user":"UKA81L34J","ts":"1609904497.093500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ph/p4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have so many questions"}]}]}]},{"client_msg_id":"b3371d9f-7733-4f55-8a7b-e055816435e7","type":"message","text":"The example everyone uses is Vector where the length of the vector is in the type. StaticArrays does that :julia:  julia has dependent types.","user":"U69L6CPJN","ts":"1609907027.094500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"btDsU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The example everyone uses is Vector where the length of the vector is in the type. StaticArrays does that "},{"type":"emoji","name":"julia"},{"type":"text","text":"  julia has dependent types."}]}]}]},{"client_msg_id":"2bc8c197-44c1-49f7-a991-97f33a8cda54","type":"message","text":"It doesn't have a static type checker that can prove stuff using those types, but :shrug:","user":"U69L6CPJN","ts":"1609907062.095000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p0J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It doesn't have a static type checker that can prove stuff using those types, but "},{"type":"emoji","name":"shrug"}]}]}]},{"client_msg_id":"6b595cbd-4a74-4c76-b260-b5d59ee1f765","type":"message","text":"But if Haskell runs with ... :expressionless:","user":"U69BL50BF","ts":"1609907363.095400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2aH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But if Haskell runs with ... "},{"type":"emoji","name":"expressionless"}]}]}]},{"client_msg_id":"3e46d9d7-3e03-4cf2-a69a-23730c6dffbc","type":"message","text":"Is it possible to wrap an instance of a composite type as an `Expr`?\n\nHere is the context: Initially, I have an empty array of expressions `Expr[]` that later gets populated. However, on some occasions, I want to evaluate a given expression and then push the result to that array. The result after evaluating the expression is an instance of a composite type. I tried enclosing it with `:()` but it has no effect. Is there a way to accomplish this?","user":"UEA5FBCRH","ts":"1609925672.105500","team":"T68168MUP","edited":{"user":"UEA5FBCRH","ts":"1609925692.000000"},"blocks":[{"type":"rich_text","block_id":"aLS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is it possible to wrap an instance of a composite type as an "},{"type":"text","text":"Expr","style":{"code":true}},{"type":"text","text":"?\n\nHere is the context: Initially, I have an empty array of expressions "},{"type":"text","text":"Expr[]","style":{"code":true}},{"type":"text","text":" that later gets populated. However, on some occasions, I want to evaluate a given expression and then push the result to that array. The result after evaluating the expression is an instance of a composite type. I tried enclosing it with "},{"type":"text","text":":()","style":{"code":true}},{"type":"text","text":" but it has no effect. Is there a way to accomplish this?"}]}]}]},{"client_msg_id":"9148bf23-6e89-421b-8cb2-98cebc04455c","type":"message","text":"Given a function like `scan(a::UInt8, b::UInt8, acc=UInt64(0))::UInt64 = a + b + acc` how can I get the types of optional parameters like `acc`?","user":"U01J4FNA52A","ts":"1611261818.001500","team":"T68168MUP","edited":{"user":"U01J4FNA52A","ts":"1611262510.000000"},"blocks":[{"type":"rich_text","block_id":"FkT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Given a function like "},{"type":"text","text":"scan(a::UInt8, b::UInt8, acc=UInt64(0))::UInt64 = a + b + acc","style":{"code":true}},{"type":"text","text":" how can I get the types of optional parameters like "},{"type":"text","text":"acc","style":{"code":true}},{"type":"text","text":"?"}]}]}]},{"client_msg_id":"59e3b75e-f641-43aa-9cbc-7054adf80894","type":"message","text":"I've tried the `methods` function as suggested last week, but it doesn't quite tell me that the version that takes 2 args provides a default 3rd:\n```julia&gt; methods(scan)\n# 2 methods for generic function \"scan\":\n[1] scan(a::UInt8, b::UInt8) in Main at REPL[1]:1\n[2] scan(a::UInt8, b::UInt8, acc) in Main at REPL[1]:1```\nBonus points for also being able to introspect the default value of `UInt64(0)`!","user":"U01J4FNA52A","ts":"1611261905.002800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sOTSH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I've tried the "},{"type":"text","text":"methods","style":{"code":true}},{"type":"text","text":" function as suggested last week, but it doesn't quite tell me that the version that takes 2 args provides a default 3rd:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> methods(scan)\n# 2 methods for generic function \"scan\":\n[1] scan(a::UInt8, b::UInt8) in Main at REPL[1]:1\n[2] scan(a::UInt8, b::UInt8, acc) in Main at REPL[1]:1"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Bonus points for also being able to introspect the default value of "},{"type":"text","text":"UInt64(0)","style":{"code":true}},{"type":"text","text":"!"}]}]}],"thread_ts":"1611261905.002800","reply_count":3,"reply_users_count":2,"latest_reply":"1611313091.003900","reply_users":["U012FH66MFW","U01J4FNA52A"],"subscribed":false},{"client_msg_id":"89e28750-db27-4927-b6f6-83e420e36215","type":"message","text":"how do I evaluate an expr developed in package Utils in the computational context of a client's unknown package using a function or macro exported from Utils\n```module Utils\nexport @genstruct\n\nmacro genstruct()\n   provide(expr)\nend\n\nexpr = \n:($(Expr(:toplevel, quote\n    begin\n        struct StructA &lt;: Any\n            a::Int64\n        end\n    end\nend)))\n\nend # module\n\nmodule Client\n  using Utils\n  @genstruct(true)\n  StructA(...)\nend \n\n# if it is better, makes things simpler, \nexpr =\n:(Expr(:toplevel, $(Expr(:quote, quote\n    begin\n        struct StructA &lt;: Any\n            a::Int64\n        end\n    end\nend))))```","user":"U68QW0PUZ","ts":"1611898270.010800","team":"T68168MUP","edited":{"user":"U68QW0PUZ","ts":"1611898608.000000"},"blocks":[{"type":"rich_text","block_id":"l5P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"how do I evaluate an expr developed in package Utils in the computational context of a client's unknown package using a function or macro exported from Utils\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"module Utils\nexport @genstruct\n\nmacro genstruct()\n   provide(expr)\nend\n\nexpr = \n:($(Expr(:toplevel, quote\n    begin\n        struct StructA <: Any\n            a::Int64\n        end\n    end\nend)))\n\nend # module\n\nmodule Client\n  using Utils\n  @genstruct(true)\n  StructA(...)\nend \n\n# if it is better, makes things simpler, \nexpr =\n:(Expr(:toplevel, $(Expr(:quote, quote\n    begin\n        struct StructA <: Any\n            a::Int64\n        end\n    end\nend))))"}]}]}],"thread_ts":"1611898270.010800","reply_count":4,"reply_users_count":2,"latest_reply":"1611908430.013300","reply_users":["U67G3QRJM","U68QW0PUZ"],"subscribed":false},{"client_msg_id":"f8453358-3894-447f-beea-d44b0b61b63f","type":"message","text":"I am trying to generate a function `f(output_type, state)` which produces an output array of type `output_type` and arbitrary dimension. I don't want to restrict the possible `output_type` to be a fixed list of types (if I did then I could just use an if else sequence), would having a call to something like  `@inline create_array(::Type{&lt;:MyArray}, shape, elem1, elem2, elem3,...) = construct MyArray`  have the same cost as having the literal expression for the array in the generated `f` 's code?? Maybe `shape` needs to be a `Val`  and the methods need to be `@generated` ? I'm worried about the possibility that `@inline` does not take effect and the splatting incurs a big cost.","user":"U68907M46","ts":"1611929817.023500","team":"T68168MUP","edited":{"user":"U68907M46","ts":"1611930175.000000"},"blocks":[{"type":"rich_text","block_id":"S2Xij","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am trying to generate a function "},{"type":"text","text":"f(output_type, state)","style":{"code":true}},{"type":"text","text":" which produces an output array of type "},{"type":"text","text":"output_type","style":{"code":true}},{"type":"text","text":" and arbitrary dimension. I don't want to restrict the possible "},{"type":"text","text":"output_type","style":{"code":true}},{"type":"text","text":" to be a fixed list of types (if I did then I could just use an if else sequence), would having a call to something like  "},{"type":"text","text":"@inline create_array(::Type{<:MyArray}, shape, elem1, elem2, elem3,...) = construct MyArray","style":{"code":true}},{"type":"text","text":"  have the same cost as having the literal expression for the array in the generated "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" 's code?? Maybe "},{"type":"text","text":"shape","style":{"code":true}},{"type":"text","text":" needs to be a "},{"type":"text","text":"Val","style":{"code":true}},{"type":"text","text":"  and the methods need to be "},{"type":"text","text":"@generated","style":{"code":true}},{"type":"text","text":" ? I'm worried about the possibility that "},{"type":"text","text":"@inline","style":{"code":true}},{"type":"text","text":" does not take effect and the splatting incurs a big cost."}]}]}],"thread_ts":"1611929817.023500","reply_count":1,"reply_users_count":1,"latest_reply":"1611929837.023600","reply_users":["U68907M46"],"subscribed":false},{"client_msg_id":"fc5e5fc3-65a0-43eb-a66f-7a06647eae09","type":"message","text":"Guys, I use CodeTracking in my code, and I want to simplify:\nI have:\n```res = @code_expr myfn()\nres !== nothing ? res : Meta.parse(@code_string myfn())```\nI want to have it in one line:\n`@code_expr_easy myfn()`\nSo I created MVP to reproduce my issue:\n```# file Foo.jl\nmodule Foo\nusing CodeTracking\nmacro code_expr_easy(ex)\n  esc(quote\n    res = @code_expr $ex\n    res !== nothing ? res : Meta.parse(@code_string $ex)\n  end)\nend\nmyfn() = 1\n# This WORKS.\n@code_expr_easy myfn()\nend\n\nmyfn2() = 1\n# This NOT working outside the module.\n@code_expr_easy myfn2()\n# ERROR: UndefVarError: @code_expr not defined```\nWhat I don’t know is how could I interploate @code_expt inside the above created macro, because that would solve the issue.\n\nSo the question is, how to interpolate macro inside a macro?","user":"U016RL8KEHX","ts":"1614034791.004200","team":"T68168MUP","edited":{"user":"U016RL8KEHX","ts":"1614034830.000000"},"blocks":[{"type":"rich_text","block_id":"6eh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Guys, I use CodeTracking in my code, and I want to simplify:\nI have:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"res = @code_expr myfn()\nres !== nothing ? res : Meta.parse(@code_string myfn())"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I want to have it in one line:\n"},{"type":"text","text":"@code_expr_easy myfn()","style":{"code":true}},{"type":"text","text":"\nSo I created MVP to reproduce my issue:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"# file Foo.jl\nmodule Foo\nusing CodeTracking\nmacro code_expr_easy(ex)\n  esc(quote\n    res = @code_expr $ex\n    res !== nothing ? res : Meta.parse(@code_string $ex)\n  end)\nend\nmyfn() = 1\n# This WORKS.\n@code_expr_easy myfn()\nend\n\nmyfn2() = 1\n# This NOT working outside the module.\n@code_expr_easy myfn2()\n# ERROR: UndefVarError: @code_expr not defined"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"What I don’t know is how could I interploate @code_expt inside the above created macro, because that would solve the issue.\n\nSo the question is, how to interpolate macro inside a macro?"}]}]}]},{"client_msg_id":"1c7eca74-5139-43c5-a9b1-1bf7ce5fed37","type":"message","text":"What I expect\n```macro code_expr_easy(ex)\n  esc(quote\n    res = $(@code_expr($ex))\n    res !== nothing ? res : Meta.parse($(@code_string($ex)))\n  end)\nend```\nShould work, because I interpolate @code_expr from local context, but it gives:\nLoadError: LoadError: expression is not a function call, or is too complex for @code_expr to analyze; break it down to simpler parts if possible. In some cases, you may want to use Meta.@lower.","user":"U016RL8KEHX","ts":"1614035038.005500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"igHxd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What I expect\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"macro code_expr_easy(ex)\n  esc(quote\n    res = $(@code_expr($ex))\n    res !== nothing ? res : Meta.parse($(@code_string($ex)))\n  end)\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Should work, because I interpolate @code_expr from local context, but it gives:\nLoadError: LoadError: expression is not a function call, or is too complex for @code_expr to analyze; break it down to simpler parts if possible. In some cases, you may want to use Meta.@lower."}]}]}]},{"client_msg_id":"f3e971b0-6401-4623-9aae-4587af57b61e","type":"message","text":"What came to my mind is that, probably I shouldn’t esc the whole quote:\n```macro code_expr_easy(ex)\n  quote\n    res = @code_expr($(esc(ex)))\n    res !== nothing ? res : Meta.parse(@code_string($(esc(ex))))\n  end\nend```\nBut in this case @code_expr executes on the esc() function what gives the error:\nexpression is not a function call, or is too complex for @code_string to analyze; break it down to simpler parts if possible. In some cases, you may want to use Meta.@lower.\nSo I don’t really see, how I could get the code_expr of a code this way. :slightly_smiling_face:","user":"U016RL8KEHX","ts":"1614035481.007600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/uLql","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What came to my mind is that, probably I shouldn’t esc the whole quote:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"macro code_expr_easy(ex)\n  quote\n    res = @code_expr($(esc(ex)))\n    res !== nothing ? res : Meta.parse(@code_string($(esc(ex))))\n  end\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"But in this case @code_expr executes on the esc() function what gives the error:\nexpression is not a function call, or is too complex for @code_string to analyze; break it down to simpler parts if possible. In some cases, you may want to use Meta.@lower.\nSo I don’t really see, how I could get the code_expr of a code this way. "},{"type":"emoji","name":"slightly_smiling_face"}]}]}]},{"client_msg_id":"d2359e34-feb7-4b2c-85ea-49da767b40c4","type":"message","text":"Wrote an even more simplified issue, I hope someone can find a good solution to this, or label it as a too specific problem.\n<https://github.com/timholy/CodeTracking.jl/issues/79>","user":"U016RL8KEHX","ts":"1614036778.008600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d9q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Wrote an even more simplified issue, I hope someone can find a good solution to this, or label it as a too specific problem.\n"},{"type":"link","url":"https://github.com/timholy/CodeTracking.jl/issues/79"}]}]}]},{"client_msg_id":"82fdb168-a207-48fb-8796-f1fc2447f3e4","type":"message","text":"Ok. Problem solved. As Tim Holy said, I used esc at a wrong place.\nIf I esc the whole quote, then things start to work just fine.","user":"U016RL8KEHX","ts":"1614184624.009700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dXK4k","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok. Problem solved. As Tim Holy said, I used esc at a wrong place.\nIf I esc the whole quote, then things start to work just fine."}]}]}]},{"client_msg_id":"a12940b6-f8d6-4ad5-bd74-3aed1eba0f25","type":"message","text":"Guys, how to check whether a module has a method?\nI would believe:\n```hasproperty(__module__, sym)```\nBut it always returns false, even when this works:\n```getproperty(__module__, sym) ```\nSo my current solution is:\n```hasmodulemethod(mod::Module, method::Symbol) = begin\n  try\n    getproperty(mod, method)\n    return true\n  catch\n  end\n  return false\nend```\nI think there must be a better solution, then using try catch block. Could you guys help me out? :slightly_smiling_face:","user":"U016RL8KEHX","ts":"1614850740.013800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2ZJV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Guys, how to check whether a module has a method?\nI would believe:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"hasproperty(__module__, sym)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"But it always returns false, even when this works:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"getproperty(__module__, sym) "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"So my current solution is:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"hasmodulemethod(mod::Module, method::Symbol) = begin\n  try\n    getproperty(mod, method)\n    return true\n  catch\n  end\n  return false\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I think there must be a better solution, then using try catch block. Could you guys help me out? "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1614850740.013800","reply_count":2,"reply_users_count":2,"latest_reply":"1614851042.014100","reply_users":["U72EFQ9L4","U016RL8KEHX"],"subscribed":false}]}