{"cursor": 0, "messages": [{"client_msg_id":"8f207220-096b-4dc3-b6e4-bb82c673eaa5","type":"message","text":"So does irtools define its own IR? Does that mean someone can do the same thing with a domain specific IR?","user":"UDGT4PM41","ts":"1610047739.103400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oMtK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So does irtools define its own IR? Does that mean someone can do the same thing with a domain specific IR?"}]}]}]},{"client_msg_id":"c6d6b540-892c-4330-9a20-91baed778594","type":"message","text":"How does that work with Julia's codeinfo and internal representation","user":"UDGT4PM41","ts":"1610047778.104200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QEcEB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How does that work with Julia's codeinfo and internal representation"}]}]}]},{"client_msg_id":"68828e52-8701-4513-a6b2-dc7173a80a09","type":"message","text":"I'm looking through the source now","user":"UDGT4PM41","ts":"1610047794.104600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dIhiE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm looking through the source now"}]}]}]},{"client_msg_id":"47307b89-5433-43f2-bf1d-874b5b8e7039","type":"message","text":"IRTools defines basically a simpler version of CodeInfo that's easier to work with","user":"U8D9768Q6","ts":"1610047801.104800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LD2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"IRTools defines basically a simpler version of CodeInfo that's easier to work with"}]}]}]},{"client_msg_id":"19676320-4021-4c53-a7f4-e39ed44fab54","type":"message","text":"You can translate more CodeInfo to <http://IRTools.IR|IRTools.IR> and vice versa.","user":"U8D9768Q6","ts":"1610047855.105400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"luWe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can translate more CodeInfo to IRTools.IR and vice versa."}]}]}]},{"client_msg_id":"4968363a-bd38-4369-8459-fd60497660ea","type":"message","text":"I see","user":"UDGT4PM41","ts":"1610047876.105600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"k+xh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see"}]}]}]},{"client_msg_id":"092c7763-f09d-40d6-a674-b842c2eefdae","type":"message","text":"There’s three structures which you need to be aware of","user":"UKA81L34J","ts":"1610047996.107000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ay7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There’s three structures which you need to be aware of"}]}]}]},{"client_msg_id":"69f93932-c415-49d7-b3b2-6f3dd7c1d4bc","type":"message","text":"`CodeInfo`, `<http://IRTools.IR|IRTools.IR>`, and `Core.Compiler.IRCode`","user":"UKA81L34J","ts":"1610048008.107400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1BdU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"CodeInfo","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"IRTools.IR","style":{"code":true}},{"type":"text","text":", and "},{"type":"text","text":"Core.Compiler.IRCode","style":{"code":true}}]}]}]},{"client_msg_id":"e4ed4e87-44cc-40bd-9a13-df977b8544de","type":"message","text":"do we know how this will look when rebased on AbstractInterpreter or I assume that's an open design question","user":"UDGT4PM41","ts":"1610048093.108500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9Ep","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"do we know how this will look when rebased on AbstractInterpreter or I assume that's an open design question"}]}]}]},{"client_msg_id":"89916713-07d8-4480-bc38-c5e875d6643e","type":"message","text":"The ways things get converted between is outlined in <https://github.com/FluxML/IRTools.jl/blob/47f5627e480e81a3855e213730e1c030b0ee86e1/src/ir/wrap.jl>","user":"UKA81L34J","ts":"1610048105.109000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iuN04","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The ways things get converted between is outlined in "},{"type":"link","url":"https://github.com/FluxML/IRTools.jl/blob/47f5627e480e81a3855e213730e1c030b0ee86e1/src/ir/wrap.jl"}]}]}],"reactions":[{"name":"+1","users":["UDGT4PM41"],"count":1}]},{"client_msg_id":"aeea5806-28ff-4521-b6d4-a4cb5e729207","type":"message","text":"partially there, also partially in","user":"UKA81L34J","ts":"1610048119.109400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qeVe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"partially there, also partially in"}]}]}]},{"client_msg_id":"4f4e1aca-07a9-49fb-94b9-7cf3859b40ba","type":"message","text":"Like you can't have your own representation and still work with Julia's opt passes I take it","user":"UDGT4PM41","ts":"1610048134.109600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"be=R","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Like you can't have your own representation and still work with Julia's opt passes I take it"}]}]}]},{"client_msg_id":"0b2c2210-ee53-46e9-a6f0-8dcdc5fda6e2","type":"message","text":"Thanks <@UKA81L34J>","user":"UDGT4PM41","ts":"1610048177.110500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g3316","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks "},{"type":"user","user_id":"UKA81L34J"}]}]}]},{"client_msg_id":"7ea756fd-5aa1-436a-ac1e-5a95737c3d9e","type":"message","text":"The thing with julia’s IR is that is it painful to work with.\nBecause of things like you need to renumber all the SSA values if you insert or delete a line.\nThere are tools in `Core.Compiler`  for doing this.\nand Cassette’s `insert_statements` uses them.\nbut IRTools avoids needing to do them because it’s data structures are a bit higher level","user":"U6A936746","ts":"1610048270.112400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qgTs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The thing with julia’s IR is that is it painful to work with.\nBecause of things like you need to renumber all the SSA values if you insert or delete a line.\nThere are tools in "},{"type":"text","text":"Core.Compiler","style":{"code":true}},{"type":"text","text":"  for doing this.\nand Cassette’s "},{"type":"text","text":"insert_statements","style":{"code":true}},{"type":"text","text":" uses them.\nbut IRTools avoids needing to do them because it’s data structures are a bit higher level"}]}]}]},{"client_msg_id":"f0997fd4-5753-4a5f-9df2-f413c0e83e1c","type":"message","text":"I mean, I think the rebase will look different ? `AbstractInterpreter` works a bit differently.\n\nWith `IRTools` - you can manipulate the `<http://IRTools.IR|IRTools.IR>` directly with the APIs and you mostly have a guarantee it will convert to valid `IRCode` - however there’s no guarantee that you won’t segfault with a dumb mistake if you manipulate the `IR` and emit out of a `dynamo`  (`CodeInfo` gets updated with new `IRCode` after dynamo).","user":"UKA81L34J","ts":"1610048444.116700","team":"T68168MUP","edited":{"user":"UKA81L34J","ts":"1610048479.000000"},"blocks":[{"type":"rich_text","block_id":"M+X2a","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean, I think the rebase will look different ? "},{"type":"text","text":"AbstractInterpreter","style":{"code":true}},{"type":"text","text":" works a bit differently.\n\nWith "},{"type":"text","text":"IRTools","style":{"code":true}},{"type":"text","text":" - you can manipulate the "},{"type":"text","text":"IRTools.IR","style":{"code":true}},{"type":"text","text":" directly with the APIs and you mostly have a guarantee it will convert to valid "},{"type":"text","text":"IRCode","style":{"code":true}},{"type":"text","text":" - however there’s no guarantee that you won’t segfault with a dumb mistake if you manipulate the "},{"type":"text","text":"IR","style":{"code":true}},{"type":"text","text":" and emit out of a "},{"type":"text","text":"dynamo","style":{"code":true}},{"type":"text","text":"  ("},{"type":"text","text":"CodeInfo","style":{"code":true}},{"type":"text","text":" gets updated with new "},{"type":"text","text":"IRCode","style":{"code":true}},{"type":"text","text":" after dynamo)."}]}]}]},{"client_msg_id":"a2ca617e-b07e-4bfb-b5b4-31d7588283b3","type":"message","text":"What does `rebase`  mean?","user":"U6A936746","ts":"1610048484.117500","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1610048494.000000"},"blocks":[{"type":"rich_text","block_id":"/0S46","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What does "},{"type":"text","text":"rebase","style":{"code":true}},{"type":"text","text":"  mean?"}]}]}]},{"client_msg_id":"95de513a-cf45-48d2-be17-04c18abac714","type":"message","text":"<@U6A936746> I think Ari is asking what a new version of `IRTools` would look like with `AbstractInterpreter`","user":"UKA81L34J","ts":"1610048506.118300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/z2","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U6A936746"},{"type":"text","text":" I think Ari is asking what a new version of "},{"type":"text","text":"IRTools","style":{"code":true}},{"type":"text","text":" would look like with "},{"type":"text","text":"AbstractInterpreter","style":{"code":true}}]}]}]},{"client_msg_id":"8d675431-d71a-43e6-8645-2a2d4896e832","type":"message","text":"Ah i see","user":"U6A936746","ts":"1610048513.118800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"M+b9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah i see"}]}]}]},{"client_msg_id":"dc56b5d3-a229-4365-83e3-99580f211877","type":"message","text":"I don’t know what you can do with AA - like can you do method overlay with AA on type inferred code ? You now have a good amount of control but I don’t know what the art of the possible is.","user":"UKA81L34J","ts":"1610048554.120100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JOkd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don’t know what you can do with AA - like can you do method overlay with AA on type inferred code ? You now have a good amount of control but I don’t know what the art of the possible is."}]}]}]},{"client_msg_id":"92c2e1f5-59b1-469e-a7e5-8ee60a955563","type":"message","text":"Valentin made his own JIT, one sec","user":"UKA81L34J","ts":"1610048563.120400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wDC7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Valentin made his own JIT, one sec"}]}]}]},{"client_msg_id":"d9cf3442-c2b6-4dfe-bd82-fc2630d8a3c1","type":"message","text":"(or in process)","user":"UKA81L34J","ts":"1610048569.120700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"k5L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(or in process)"}]}]}]},{"client_msg_id":"87a1edbf-03aa-4370-a77b-69268adb1c15","type":"message","text":"Yeah I know nothing of the abstract interprettor stuff","user":"U6A936746","ts":"1610048580.121000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8Qi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah I know nothing of the abstract interprettor stuff"}]}]}]},{"client_msg_id":"f0d8042b-86ba-47ac-bf5d-60432423aa3b","type":"message","text":"<https://github.com/vchuravy/KernelCompiler.jl/blob/main/src/jit.jl>","user":"UKA81L34J","ts":"1610048602.121600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"q+H","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/vchuravy/KernelCompiler.jl/blob/main/src/jit.jl"}]}]}]},{"client_msg_id":"d2df0136-6565-45e5-976e-d0c9b16692a4","type":"message","text":"But this is basically with the `GPUCompiler` infrastructure and `LLVM.jl`","user":"UKA81L34J","ts":"1610048612.122100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Uh6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But this is basically with the "},{"type":"text","text":"GPUCompiler","style":{"code":true}},{"type":"text","text":" infrastructure and "},{"type":"text","text":"LLVM.jl","style":{"code":true}}]}]}]},{"client_msg_id":"0bcfb589-66d7-4c54-b35a-c3843c5d5ab1","type":"message","text":"I’m out of my depth but I think the native pipeline is different than the infra offered by those two packages","user":"UKA81L34J","ts":"1610048635.123100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"owpF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’m out of my depth but I think the native pipeline is different than the infra offered by those two packages"}]}]}]},{"client_msg_id":"7f005aa9-2892-4691-a549-c9e9bdd22156","type":"message","text":"Other IRTools things  (none of this is related to anything else though I am just spouting things)\nthe control flow graph and dominance tree (sp?) is really useful,  but julia’s IR doesn’t even have basic blocks.\nJulia does construct the basic blocks and then the control flow graph and then dominance tree(sp) as part of the optimizer\nand you can in-fact call that code yourself on the IR.\nMagneticReadHead does this.\n\nIRTools works at the basic block level already.\nIt also has its own algorithm for constructing the control flow graph and dominance tree.\nIt’s a different algorithm to the one julia itself uses, though both are from the literature.\n\nOne problem just in general with this is it makes your compile time looong, at least that is what i found with MRH.\nbecause you are doing it twice, and it is expensive to begin with.\n\nThe actual place I would like to insert tranforms is after the optimizer has generated this stuff.\nThough would then need to run the optimizer again i guess, at least on that part of the code?\nAlso at that stage just in general the IR is way richer, not only does it have these graphs structure, typing has occurred","user":"U6A936746","ts":"1610048763.125200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PzDz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Other IRTools things  (none of this is related to anything else though I am just spouting things)\nthe control flow graph and dominance tree (sp?) is really useful,  but julia’s IR doesn’t even have basic blocks.\nJulia does construct the basic blocks and then the control flow graph and then dominance tree(sp) as part of the optimizer\nand you can in-fact call that code yourself on the IR.\nMagneticReadHead does this.\n\nIRTools works at the basic block level already.\nIt also has its own algorithm for constructing the control flow graph and dominance tree.\nIt’s a different algorithm to the one julia itself uses, though both are from the literature.\n\nOne problem just in general with this is it makes your compile time looong, at least that is what i found with MRH.\nbecause you are doing it twice, and it is expensive to begin with.\n\nThe actual place I would like to insert tranforms is after the optimizer has generated this stuff.\nThough would then need to run the optimizer again i guess, at least on that part of the code?\nAlso at that stage just in general the IR is way richer, not only does it have these graphs structure, typing has occurred"}]}]}]},{"client_msg_id":"2cfd0d5c-6feb-4586-b8ac-8bb897649e3f","type":"message","text":"what stage does Abstract Interpetter run?","user":"U6A936746","ts":"1610048819.125600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+XqMu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what stage does Abstract Interpetter run?"}]}]}]},{"client_msg_id":"e6ae2970-b3c7-4577-b515-d861019042b3","type":"message","text":"I’m concerned that modifications after type inference would mess things up, and you’d have to be very careful","user":"UKA81L34J","ts":"1610048832.126100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nA0lc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’m concerned that modifications after type inference would mess things up, and you’d have to be very careful"}]}]}]},{"client_msg_id":"50558eb3-7307-4b8f-8d48-7fa23d8c9cfe","type":"message","text":"yeah absolutely","user":"U6A936746","ts":"1610048841.126400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uYQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah absolutely"}]}]}]},{"client_msg_id":"8edbecb7-3c58-4b18-ac7c-94d7f011fab5","type":"message","text":"Its already hard enough to not break things by changing right after lowering","user":"U6A936746","ts":"1610048854.126900","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1610048861.000000"},"blocks":[{"type":"rich_text","block_id":"7cX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Its already hard enough to not break things by changing right after lowering"}]}]}]},{"client_msg_id":"2cbdb767-81d2-4165-b325-d26f25ad8032","type":"message","text":"I think AA runs at type inference","user":"UKA81L34J","ts":"1610048862.127200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9GpOH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think AA runs at type inference"}]}]}]},{"client_msg_id":"7a57c10c-ca98-4293-9723-7a02979adb6a","type":"message","text":"what is AA?","user":"U6A936746","ts":"1610048874.127600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NVhms","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what is AA?"}]}]}]},{"client_msg_id":"273e1ec4-1ad3-4752-a647-02e82055289c","type":"message","text":"lol why do I keep saying that","user":"UKA81L34J","ts":"1610048881.127900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8+r","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"lol why do I keep saying that"}]}]}]},{"client_msg_id":"f1263269-5118-44d2-b083-70ca25e40e51","type":"message","text":"sorry","user":"UKA81L34J","ts":"1610048882.128200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"82Kd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"sorry"}]}]}]},{"client_msg_id":"13f3c681-8dd2-4f31-898a-8f6166fea1df","type":"message","text":"AbstractInterpreter = AI","user":"UKA81L34J","ts":"1610048886.128600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8tuxL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"AbstractInterpreter = AI"}]}]}]},{"client_msg_id":"7facf805-3e1f-40c0-8109-6d25015024e4","type":"message","text":"doink","user":"UKA81L34J","ts":"1610048887.128800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0eJ9c","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"doink"}]}]}]},{"client_msg_id":"3e89b383-7622-4031-af7b-b743041e4b84","type":"message","text":"prob because AI is something else","user":"U6A936746","ts":"1610048891.129000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HhM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"prob because AI is something else"}]}]}]},{"client_msg_id":"60b77ce0-d3dd-49f6-8c68-448a56681059","type":"message","text":"I thought AI was linear regression?","user":"UDGT4PM41","ts":"1610048896.129200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"i+OR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I thought AI was linear regression?"}]}]}],"reactions":[{"name":"correct_answer","users":["U6A936746"],"count":1}]},{"client_msg_id":"a790ab4b-463e-4903-9d32-bfcb3841aad5","type":"message","text":"AbInt","user":"U6A936746","ts":"1610048896.129300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RXG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"AbInt"}]}]}]},{"client_msg_id":"59fc1a92-0768-44fc-848e-2da935abf255","type":"message","text":"Here’s an example: <https://github.com/vchuravy/KernelCompiler.jl/blob/main/src/codegen.jl>","user":"UKA81L34J","ts":"1610049006.129600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IA8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Here’s an example: "},{"type":"link","url":"https://github.com/vchuravy/KernelCompiler.jl/blob/main/src/codegen.jl"}]}]}]},{"client_msg_id":"e88eb987-0f1f-4716-9acc-afa4dcb4b260","type":"message","text":"oh sorry, I don’t think Valentin is doing inference with his custom AbsInt yet","user":"UKA81L34J","ts":"1610049148.130000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bA0E","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh sorry, I don’t think Valentin is doing inference with his custom AbsInt yet"}]}]}]},{"client_msg_id":"a57e8da1-fa35-4f20-be5b-1ce8613dfc65","type":"message","text":"forget what I said","user":"UKA81L34J","ts":"1610049156.130300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pOvI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"forget what I said"}]}]}]},{"client_msg_id":"b2bad6df-59d7-420f-9658-c3515a51888a","type":"message","text":"My understanding is that the abstract interpreter is a whole pipeline and you can plug in at many points","user":"U8D9768Q6","ts":"1610049189.131100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"63N+c","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My understanding is that the abstract interpreter is a whole pipeline and you can plug in at many points"}]}]}]},{"client_msg_id":"8e94cbbd-629c-449e-b41a-5d7688649ec7","type":"message","text":"But can it do dependent typing ?","user":"UKA81L34J","ts":"1610049208.131600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+cqp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But can it do dependent typing ?"}]}]}],"reactions":[{"name":"joy","users":["UDGT4PM41"],"count":1}]},{"client_msg_id":"5e6ea533-075a-4426-a078-08fe3eec31da","type":"message","text":"That is the real question here.","user":"UKA81L34J","ts":"1610049227.132100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hO=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That is the real question here."}]}]}]},{"client_msg_id":"f94fc673-bd10-4d56-89e4-861f458102d0","type":"message","text":"That is, you can work at the untyped IR level, you can work on typed IR, you can choose when and which optimization passes run, etc","user":"U8D9768Q6","ts":"1610049251.132500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sOq3Q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That is, you can work at the untyped IR level, you can work on typed IR, you can choose when and which optimization passes run, etc"}]}]}]},{"client_msg_id":"533ae59d-b07f-4823-89c3-3fda4530cffb","type":"message","text":"I thought it was, is Julia a lisp?","user":"UDGT4PM41","ts":"1610049252.132600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hgGxe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I thought it was, is Julia a lisp?"}]}]}]},{"client_msg_id":"09864066-2b1b-40e5-9183-a5a3b2b30f1f","type":"message","text":"<@UDGT4PM41> I think a good package to follow is `JET` now","user":"UKA81L34J","ts":"1610049264.133100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZN8o","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UDGT4PM41"},{"type":"text","text":" I think a good package to follow is "},{"type":"text","text":"JET","style":{"code":true}},{"type":"text","text":" now"}]}]}]},{"client_msg_id":"8933b4e2-6b29-489b-ab3b-5beedaa0dd72","type":"message","text":"<https://github.com/aviatesk/JET.jl/blob/master/src/abstractinterpreterinterface.jl>","user":"UKA81L34J","ts":"1610049268.133400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XrsO8","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/aviatesk/JET.jl/blob/master/src/abstractinterpreterinterface.jl"}]}]}]},{"client_msg_id":"42ab8ebe-faca-43e1-9d40-d903fe8a6dd1","type":"message","text":"This seems to be a bit more fleshed out","user":"UKA81L34J","ts":"1610049273.133700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Z=9/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This seems to be a bit more fleshed out"}]}]}]},{"client_msg_id":"f67da299-6c7d-46ab-85af-728fd68b8c22","type":"message","text":"ah yea, that's a meaty example","user":"UDGT4PM41","ts":"1610049317.134700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1FKhX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah yea, that's a meaty example"}]}]}]},{"client_msg_id":"3a87454d-f57d-427e-a7b4-4a6457b34d2e","type":"message","text":"I can’t claim to understand it, but it looks like Shuhei is actually using it for something","user":"UKA81L34J","ts":"1610049320.134900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"P=1P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I can’t claim to understand it, but it looks like Shuhei is actually using it for something"}]}]}]},{"client_msg_id":"970d40e2-887c-4ba1-acbe-8557efff5cdd","type":"message","text":"And perhaps most importantly, you can have the compilation pipeline be recurrent. You could run the optimization passes, then modify things, then run them again for instance. That's supposedly why Diffractor works well for higher order derivatives because the code graph gets pruned instead of exploding","user":"U8D9768Q6","ts":"1610049364.135800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YkF=V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And perhaps most importantly, you can have the compilation pipeline be recurrent. You could run the optimization passes, then modify things, then run them again for instance. That's supposedly why Diffractor works well for higher order derivatives because the code graph gets pruned instead of exploding"}]}]}]},{"client_msg_id":"f8b03e42-c90d-4d8c-91b8-dbddd2799ae1","type":"message","text":"This sort of stuff gets me fired up, it’s too interesting","user":"UKA81L34J","ts":"1610049521.136500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WwZ72","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This sort of stuff gets me fired up, it’s too interesting"}]}]}]},{"client_msg_id":"c867faa6-e423-4a2b-9f28-c602f06866ae","type":"message","text":"Anyways I have to get back to my actual job","user":"UKA81L34J","ts":"1610049526.136700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3Vs9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Anyways I have to get back to my actual job"}]}]}]},{"client_msg_id":"751d1888-e231-4cc3-8a07-68b3a477badb","type":"message","text":"<@UDGT4PM41> last note - here’s the toplevel for `JET`","user":"UKA81L34J","ts":"1610050151.137000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kkuUT","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UDGT4PM41"},{"type":"text","text":" last note - here’s the toplevel for "},{"type":"text","text":"JET","style":{"code":true}}]}]}]},{"client_msg_id":"d105d214-2687-47e1-901f-9cabe59230a1","type":"message","text":"<https://github.com/aviatesk/JET.jl/blob/master/src/virtualprocess.jl>","user":"UKA81L34J","ts":"1610050152.137200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j0F","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/aviatesk/JET.jl/blob/master/src/virtualprocess.jl"}]}]}]},{"client_msg_id":"432a997d-43c3-4fc6-9689-bd28e66909e6","type":"message","text":"AbsInt is a parameterized inference pipeline with custom caching that is also capable with enough trickery to do pre-inference passes aka Cassette/IRTools and mid-optimization passes","user":"U67BJLYCS","ts":"1610051147.138500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5zgK0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"AbsInt is a parameterized inference pipeline with custom caching that is also capable with enough trickery to do pre-inference passes aka Cassette/IRTools and mid-optimization passes"}]}]}]},{"client_msg_id":"3d4667b0-81c9-4536-b71e-9b2ddb790852","type":"message","text":"Yao.jl uses it quite extensively already","user":"U67BJLYCS","ts":"1610051166.138900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FRyu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yao.jl uses it quite extensively already"}]}]}]}]}