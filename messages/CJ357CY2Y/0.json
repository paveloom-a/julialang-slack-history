{"cursor": 1, "messages": [{"client_msg_id":"73291a8e-9c7d-482c-aadd-ca21d0dac64f","type":"message","text":"guys, can I generate the same code from expressions like:\n`xcall(:(+), 0, 1)`\nto be the same as:\n`:(0 + 1)`\nI mean xcall basically returns `:(0 + 1)` but they are not identical.","user":"U016RL8KEHX","ts":"1611488958.000700","team":"T68168MUP","edited":{"user":"U016RL8KEHX","ts":"1611489025.000000"},"blocks":[{"type":"rich_text","block_id":"WCeE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"guys, can I generate the same code from expressions like:\n"},{"type":"text","text":"xcall(:(+), 0, 1)","style":{"code":true}},{"type":"text","text":"\nto be the same as:\n"},{"type":"text","text":":(0 + 1)","style":{"code":true}},{"type":"text","text":"\nI mean xcall basically returns "},{"type":"text","text":":(0 + 1)","style":{"code":true}},{"type":"text","text":" but they are not identical."}]}]}]},{"client_msg_id":"d86f00e2-c297-448e-95ef-a5a4d811e7e6","type":"message","text":"xcall and the :(0 + 1) both return an expression, but the second expression I can't push into an IRTools `IR` for example:\n`ir = @code_ir somefunc(), push!(ir, :(0 + 1))`","user":"U016RL8KEHX","ts":"1611494980.005000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FwfA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"xcall and the :(0 + 1) both return an expression, but the second expression I can't push into an IRTools "},{"type":"text","text":"IR","style":{"code":true}},{"type":"text","text":" for example:\n"},{"type":"text","text":"ir = @code_ir somefunc(), push!(ir, :(0 + 1))","style":{"code":true}}]}]}]},{"client_msg_id":"b5c25644-5e49-4bf8-9773-3ea5301d1fa5","type":"message","text":"It sounds reasonable, but can it be done in such a simple form, there must be a simple way to do this. :slightly_smiling_face:","user":"U016RL8KEHX","ts":"1611495014.005600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/0sLF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It sounds reasonable, but can it be done in such a simple form, there must be a simple way to do this. "},{"type":"emoji","name":"slightly_smiling_face"}]}]}]},{"client_msg_id":"33661174-1920-4ea3-bd40-419c6c655310","type":"message","text":"Naturally this would work: `push!(ir, xcall(:(+), 0, 1))`\nEven tho `xcall(:(+), 0, 1)` returns `:(0 + 1)` .\nWhat I see as a difference is that :(+) is a Symbol in `:(0 + 1)`, but it is Base.:+ in the `xcall(:(+), 0, 1)`  format, so what interest me is a simple way to move from exressions to IR code?","user":"U016RL8KEHX","ts":"1611495228.008500","team":"T68168MUP","edited":{"user":"U016RL8KEHX","ts":"1611495260.000000"},"blocks":[{"type":"rich_text","block_id":"F3qz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Naturally this would work: "},{"type":"text","text":"push!(ir, xcall(:(+), 0, 1))","style":{"code":true}},{"type":"text","text":"\nEven tho "},{"type":"text","text":"xcall(:(+), 0, 1)","style":{"code":true}},{"type":"text","text":" returns "},{"type":"text","text":":(0 + 1)","style":{"code":true}},{"type":"text","text":" .\nWhat I see as a difference is that :(+) is a Symbol in "},{"type":"text","text":":(0 + 1)","style":{"code":true}},{"type":"text","text":", but it is Base.:+ in the "},{"type":"text","text":"xcall(:(+), 0, 1)","style":{"code":true}},{"type":"text","text":"  format, so what interest me is a simple way to move from exressions to IR code?"}]}]}]},{"client_msg_id":"D2998796-8328-4099-9752-F04CCEC30A3E","type":"message","text":"You can’t always be sure that you are referring to the generic function that is exported into Main even in just normal Julia AST so you just need to write a Global reference ","user":"UC6SUUPRC","ts":"1611504961.010100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Z8p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can’t always be sure that you are referring to the generic function that is exported into Main even in just normal Julia AST so you just need to write a Global reference "}]}]}]},{"client_msg_id":"ecdeb44e-8e27-42f1-a221-6590e5fd9e64","type":"message","text":"I see I need to address what function I refer to. So then the question is, how can i convert `:(1 + 2)` to a representation where \"+\" is a Global reference and not just a Symbol?","user":"U016RL8KEHX","ts":"1611507778.011700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O+F2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see I need to address what function I refer to. So then the question is, how can i convert "},{"type":"text","text":":(1 + 2)","style":{"code":true}},{"type":"text","text":" to a representation where \"+\" is a Global reference and not just a Symbol?"}]}]}]},{"client_msg_id":"ba8db0e2-adc1-4d40-9948-f535d2ba10f2","type":"message","text":"Hm as I am asking this question, I see that :(1+2) needs a context where it is ran, so the \"+\" symbol can become a reference to a function, right?","user":"U016RL8KEHX","ts":"1611507867.012800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Sjn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hm as I am asking this question, I see that :(1+2) needs a context where it is ran, so the \"+\" symbol can become a reference to a function, right?"}]}]}]},{"client_msg_id":"1a3d0ddd-5b59-4109-b728-63436bcab124","type":"message","text":"<@U016RL8KEHX>\n```Expr(:call, GlobalRef(Base, :(+)), args...)```","user":"UKA81L34J","ts":"1611514631.013300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BtX","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U016RL8KEHX"},{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Expr(:call, GlobalRef(Base, :(+)), args...)"}]}]}],"reactions":[{"name":"+1","users":["U016RL8KEHX"],"count":1}]},{"client_msg_id":"41ffd079-b64c-47e6-9601-28f2318fc226","type":"message","text":"```julia&gt; Expr(:call, GlobalRef(Base, :(+)), 1, 2)\n:(1 + 2)```\n","user":"UKA81L34J","ts":"1611514755.014100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AU9","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Expr(:call, GlobalRef(Base, :(+)), 1, 2)\n:(1 + 2)"}]},{"type":"rich_text_section","elements":[]}]}]},{"client_msg_id":"11031201-d98c-45ee-ba32-319c9e91b167","type":"message","text":"This means that we use Base as a context to infer the function what \"+\" refers to right? :slightly_smiling_face:","user":"U016RL8KEHX","ts":"1611515029.014700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C=7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This means that we use Base as a context to infer the function what \"+\" refers to right? "},{"type":"emoji","name":"slightly_smiling_face"}]}]}]},{"client_msg_id":"17d634da-9568-433f-9158-9b46a7d0bf2e","type":"message","text":"Yeah - take a look at: <https://docs.julialang.org/en/v1/devdocs/ast/#Lowered-form>","user":"UKA81L34J","ts":"1611515069.014900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9F80=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah - take a look at: "},{"type":"link","url":"https://docs.julialang.org/en/v1/devdocs/ast/#Lowered-form"}]}]}]},{"client_msg_id":"134789fe-c2de-4503-84eb-3d9ebc19f6a3","type":"message","text":"`GlobalRef` refers to a `name` in module `mod` basically in the lowered IR.","user":"UKA81L34J","ts":"1611515096.015500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eJv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"GlobalRef","style":{"code":true}},{"type":"text","text":" refers to a "},{"type":"text","text":"name","style":{"code":true}},{"type":"text","text":" in module "},{"type":"text","text":"mod","style":{"code":true}},{"type":"text","text":" basically in the lowered IR."}]}]}]},{"client_msg_id":"5e7f0c51-cf35-4475-87a9-5e3d23449fe5","type":"message","text":"Note that IRTools IR _is different_ than this lowered IR but re-uses some of the structures (like `Expr` as a subfield inside of `IRTools` `Statement`)","user":"UKA81L34J","ts":"1611515138.016400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uJmi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Note that IRTools IR "},{"type":"text","text":"is different","style":{"italic":true}},{"type":"text","text":" than this lowered IR but re-uses some of the structures (like "},{"type":"text","text":"Expr","style":{"code":true}},{"type":"text","text":" as a subfield inside of "},{"type":"text","text":"IRTools","style":{"code":true}},{"type":"text","text":" "},{"type":"text","text":"Statement","style":{"code":true}},{"type":"text","text":")"}]}]}]},{"client_msg_id":"68e398cc-733d-4fa1-b5aa-00117bdcc636","type":"message","text":"if you want to refer to the current scope you should use `__module__`  if it’s inside a macro, or if it’s inside `@generated` you should always specified the actual module you are referring to","user":"UC6SUUPRC","ts":"1611601706.017700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"l3A4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you want to refer to the current scope you should use "},{"type":"text","text":"__module__","style":{"code":true}},{"type":"text","text":"  if it’s inside a macro, or if it’s inside "},{"type":"text","text":"@generated","style":{"code":true}},{"type":"text","text":" you should always specified the actual module you are referring to"}]}]}],"reactions":[{"name":"heart","users":["U016RL8KEHX"],"count":1}]},{"client_msg_id":"cdbfcab5-1671-4eb6-9ae4-c637fb092cf2","type":"message","text":"I have some questions about how `func` works. Looking at the body of the function\n```@eval @generated function $(gensym())($([Symbol(:arg, i) for i = 1:length(arguments(ir))]...))\n    return build_codeinfo($ir)\n  end```\nit seems `@generated` returns the function it defines, which is why we can call `f` after `f = func(ir)`. In addition, `@generated` somehow replaces the formal parameters of `ir` with those of the generated function, even though within the body of the generated function formal parameters hold types not values of actual arguments. This is implicit in Julia documentation involving ASTs, but in IRs this is less visual. Is my understanding correct?","user":"UMS8C22UA","ts":"1612026830.025500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FK1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have some questions about how "},{"type":"text","text":"func","style":{"code":true}},{"type":"text","text":" works. Looking at the body of the function\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@eval @generated function $(gensym())($([Symbol(:arg, i) for i = 1:length(arguments(ir))]...))\n    return build_codeinfo($ir)\n  end"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"it seems "},{"type":"text","text":"@generated","style":{"code":true}},{"type":"text","text":" returns the function it defines, which is why we can call "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" after "},{"type":"text","text":"f = func(ir)","style":{"code":true}},{"type":"text","text":". In addition, "},{"type":"text","text":"@generated","style":{"code":true}},{"type":"text","text":" somehow replaces the formal parameters of "},{"type":"text","text":"ir","style":{"code":true}},{"type":"text","text":" with those of the generated function, even though within the body of the generated function formal parameters hold types not values of actual arguments. This is implicit in Julia documentation involving ASTs, but in IRs this is less visual. Is my understanding correct?"}]}]}]},{"client_msg_id":"A4004DFE-5ADA-4748-AF3D-56CA22768C47","type":"message","text":"<@UMS8C22UA> When returning a piece of CodeInfo out of a generated function, the number of arguments must match the number of arguments of the generated function. Because when you return a piece of CodeInfo, you’re saying “for this generated function with these argument types, this is the body”\n\nI’m not sure what you mean by:\n\n&gt; within the body of the generated function formal parameters hold types not values of actual arguments.\n\nDo you mean the arguments are symbolic or ? They are formals.","user":"UKA81L34J","ts":"1612033244.028700","team":"T68168MUP","edited":{"user":"UKA81L34J","ts":"1612033259.000000"},"blocks":[{"type":"rich_text","block_id":"2jlz","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UMS8C22UA"},{"type":"text","text":" When returning a piece of CodeInfo out of a generated function, the number of arguments must match the number of arguments of the generated function. Because when you return a piece of CodeInfo, you’re saying “for this generated function with these argument types, this is the body”\n\nI’m not sure what you mean by:\n\n> within the body of the generated function formal parameters hold types not values of actual arguments.\n\nDo you mean the arguments are symbolic or ? They are formals."}]}]}]},{"client_msg_id":"ed413a6d-7abc-41ea-b268-b9935c74c432","type":"message","text":"Thanks, <@UKA81L34J>. That makes sense.\nBy \"within the body of the generated function formal parameters hold types not values of actual arguments,\" I was thinking about\n``` @generated function foo(x)\n           Core.println(x)\n           return :(x * x)\n       end```\nfrom Julia documentation. Here `x` inside the `Core.println` is a type, while inside `:(x * x)` a value, the actual argument, will be substituted. Above implies that symbol lookup is done like regular functions, via symbol talbes. However, inside `build_codeinfo` all arguments are set to empty strings -- via pushing into `slotname` , which leads me to think parameters are looked up by position. Is the difference that one returns AST and the other returns IRs?\n\"Formal parameter\" and \"actual argument\" are terminology I picked up from my compiler course a while ago, which I am using here to emphasize their distinction; they mean just parameter and argument. Sorry that they are confusing.","user":"UMS8C22UA","ts":"1612044280.038100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GFpV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks, "},{"type":"user","user_id":"UKA81L34J"},{"type":"text","text":". That makes sense.\nBy \"within the body of the generated function formal parameters hold types not values of actual arguments,\" I was thinking about\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":" @generated function foo(x)\n           Core.println(x)\n           return :(x * x)\n       end"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"from Julia documentation. Here "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" inside the "},{"type":"text","text":"Core.println","style":{"code":true}},{"type":"text","text":" is a type, while inside "},{"type":"text","text":":(x * x)","style":{"code":true}},{"type":"text","text":" a value, the actual argument, will be substituted. Above implies that symbol lookup is done like regular functions, via symbol talbes. However, inside "},{"type":"text","text":"build_codeinfo","style":{"code":true}},{"type":"text","text":" all arguments are set to empty strings -- via pushing into "},{"type":"text","text":"slotname","style":{"code":true}},{"type":"text","text":" , which leads me to think parameters are looked up by position. Is the difference that one returns AST and the other returns IRs?\n\"Formal parameter\" and \"actual argument\" are terminology I picked up from my compiler course a while ago, which I am using here to emphasize their distinction; they mean just parameter and argument. Sorry that they are confusing."}]}]}]},{"client_msg_id":"57e58495-fdc4-4ad6-9115-9bb38dedd615","type":"message","text":"I'm new to IRTools and Julia IR so I'm not sure whether my question makes sense.\nIs there a way to immediately return the result of a particular function that is called somewhere while recursing through a main function.\ne.g. return the result of the first matmul in a neural network, regardless of what would happen next.","user":"UBGC95BDJ","ts":"1612213452.041700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MoW6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm new to IRTools and Julia IR so I'm not sure whether my question makes sense.\nIs there a way to immediately return the result of a particular function that is called somewhere while recursing through a main function.\ne.g. return the result of the first matmul in a neural network, regardless of what would happen next."}]}]}]},{"client_msg_id":"c91c5f8a-8037-4bde-85da-aafbac20f5c8","type":"message","text":"sounds like you can just use Cassette, e.g create a context with a flag and when you hit `matmul` then set the flag to `false` so nothing will happens afterwards","user":"UC6SUUPRC","ts":"1612215550.042800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WDE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"sounds like you can just use Cassette, e.g create a context with a flag and when you hit "},{"type":"text","text":"matmul","style":{"code":true}},{"type":"text","text":" then set the flag to "},{"type":"text","text":"false","style":{"code":true}},{"type":"text","text":" so nothing will happens afterwards"}]}]}],"thread_ts":"1612215550.042800","reply_count":1,"reply_users_count":1,"latest_reply":"1612217826.043000","reply_users":["UBGC95BDJ"],"subscribed":false,"reactions":[{"name":"+1","users":["U8D9768Q6"],"count":1},{"name":"thankyou","users":["UBGC95BDJ"],"count":1}]},{"client_msg_id":"056623b4-81bc-4fa5-945b-c57c1aff0f53","type":"message","text":"<@UBGC95BDJ>\n```function main(args...)\n    try\n       Cassette.overdub(YourContext(), run_network, args...)\n    catch e\n       println(e)\n    end\nend```\nthen, in your `overdub` for matmul, just throw?","user":"UKA81L34J","ts":"1612220352.044700","team":"T68168MUP","edited":{"user":"UKA81L34J","ts":"1612220363.000000"},"blocks":[{"type":"rich_text","block_id":"aXq","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UBGC95BDJ"},{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function main(args...)\n    try\n       Cassette.overdub(YourContext(), run_network, args...)\n    catch e\n       println(e)\n    end\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"then, in your "},{"type":"text","text":"overdub","style":{"code":true}},{"type":"text","text":" for matmul, just throw?"}]}]}]},{"client_msg_id":"7f4b3dc4-39e6-493d-8c8a-6641e2d786c7","type":"message","text":"You can also structure `e` to contain the return value.","user":"UKA81L34J","ts":"1612220399.045100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QeOJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can also structure "},{"type":"text","text":"e","style":{"code":true}},{"type":"text","text":" to contain the return value."}]}]}]},{"client_msg_id":"5323bf59-a6fc-4e52-a899-85f03844d0bc","type":"message","text":"I think you can throw arrays. (Or any other value)\nSo you don't been need to declare an exception type or anything","user":"U6A936746","ts":"1612223911.046800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Wyi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think you can throw arrays. (Or any other value)\nSo you don't been need to declare an exception type or anything"}]}]}]},{"client_msg_id":"9c996f53-dd35-45bb-af25-17f65bdd91e8","type":"message","text":"Thanks! That works like a charm!","user":"UBGC95BDJ","ts":"1612265076.047200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uua","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks! That works like a charm!"}]}]}]},{"client_msg_id":"8b6ae4fb-8a49-490e-8085-dd75aebe46cf","type":"message","text":"Is there a straightforward way to substitute variables in the IR with IRTools, i.e. I want to replace all occurances of `IRTools.var(3)` with `IRTools.var(4)`?","user":"UM30MT6RF","ts":"1614085430.001600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hFfE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a straightforward way to substitute variables in the IR with IRTools, i.e. I want to replace all occurances of "},{"type":"text","text":"IRTools.var(3)","style":{"code":true}},{"type":"text","text":" with "},{"type":"text","text":"IRTools.var(4)","style":{"code":true}},{"type":"text","text":"?"}]}]}]},{"client_msg_id":"064caab0-86a5-450c-a8f0-3420a0a3acce","type":"message","text":"I think that's exactly what IRTools tries to avoid having to do...? Without further context I can just say: none that I know of; I usually did those things by turning\n```%3 = f(...)\n...\n%10 = g(%3)```\ninto\n```%100 = f(...)\n%3 = my_new_stuff(%100, ...)\n...\n%10 = g(%3)```\nBut again, depends on what you want to do.","user":"UN45LV5K6","ts":"1614086185.004700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PPB7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think that's exactly what IRTools tries to avoid having to do...? Without further context I can just say: none that I know of; I usually did those things by turning\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"%3 = f(...)\n...\n%10 = g(%3)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"into\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"%100 = f(...)\n%3 = my_new_stuff(%100, ...)\n...\n%10 = g(%3)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"But again, depends on what you want to do."}]}]}]},{"client_msg_id":"e96ce1f4-201f-47c8-b33c-6516c14e69d5","type":"message","text":"If it get's harder, try to rebuild the whole thing, maybe with a `Pipe`.","user":"UN45LV5K6","ts":"1614086247.005800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"98D","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If it get's harder, try to rebuild the whole thing, maybe with a "},{"type":"text","text":"Pipe","style":{"code":true}},{"type":"text","text":"."}]}]}]},{"client_msg_id":"db267fba-37e0-4d3c-920d-301db4dc750e","type":"message","text":"The problem in my case is that I want to replace a function argument with a different variable","user":"UM30MT6RF","ts":"1614086266.006000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PYKC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The problem in my case is that I want to replace a function argument with a different variable"}]}]}]},{"client_msg_id":"3c129254-38b7-40ab-940b-1a110da55135","type":"message","text":"I guess I could probably abuse inline for this","user":"UM30MT6RF","ts":"1614086446.006400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VIL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess I could probably abuse inline for this"}]}]}]},{"client_msg_id":"246aac6f-dd00-4373-8242-4564db60dcc0","type":"message","text":"You could try a variant of the approach above and replace the function argument (delete and add a new one), and then push a new statement to the top with defines the old variable instead, with some hack perhaps to manually set the name.\n\nOr if you go the rebuild route: pipes [have some substituition mechanism](<https://github.com/FluxML/IRTools.jl/blob/master/src/ir/ir.jl#L852>), which I never fully understood, though.","user":"UN45LV5K6","ts":"1614086873.009000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rG4mm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You could try a variant of the approach above and replace the function argument (delete and add a new one), and then push a new statement to the top with defines the old variable instead, with some hack perhaps to manually set the name.\n\nOr if you go the rebuild route: pipes [have some substituition mechanism]("},{"type":"link","url":"https://github.com/FluxML/IRTools.jl/blob/master/src/ir/ir.jl#L852"},{"type":"text","text":"), which I never fully understood, though."}]}]}]},{"client_msg_id":"281c94b5-4d9f-49be-b494-d28428cd745a","type":"message","text":"```1: (%1, %100)\n  %2 = your_new_stuff(%100)\n  ...\n  %5 = old_function(%2)```","user":"UN45LV5K6","ts":"1614086950.009800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"o2aGe","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"1: (%1, %100)\n  %2 = your_new_stuff(%100)\n  ...\n  %5 = old_function(%2)"}]}]}]},{"client_msg_id":"d1eb1cb7-c1db-4fb9-9631-13d8f5faa153","type":"message","text":"where `%100` is a fresh name.","user":"UN45LV5K6","ts":"1614086995.010100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s=l","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"where "},{"type":"text","text":"%100","style":{"code":true}},{"type":"text","text":" is a fresh name."}]}]}]},{"client_msg_id":"cc12e136-69e6-4349-93f0-63b4cb352e4b","type":"message","text":"Yeah, I tried this, but it didn't really work like I expected","user":"UM30MT6RF","ts":"1614087052.010500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DMl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, I tried this, but it didn't really work like I expected"}]}]}]},{"client_msg_id":"1ffc3dee-bf67-4d71-b840-cc99b3d11384","type":"message","text":"Did you rebuild the metadata of the resulting function?","user":"UN45LV5K6","ts":"1614087163.010900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cR3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Did you rebuild the metadata of the resulting function?"}]}]}]},{"client_msg_id":"a827ab86-33fa-4791-91f7-68a0e5d6c2da","type":"message","text":"A dynamo might not like this kind of things (but I'm not sure). That's how I did it once: <https://github.com/TuringLang/IRTracker.jl/blob/master/src/tracker.jl#L27>","user":"UN45LV5K6","ts":"1614087344.011500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FG4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"A dynamo might not like this kind of things (but I'm not sure). That's how I did it once: "},{"type":"link","url":"https://github.com/TuringLang/IRTracker.jl/blob/master/src/tracker.jl#L27"}]}]}]},{"client_msg_id":"5329dae0-adec-48c2-aebb-57412ecc6c7a","type":"message","text":"I don't think I did. I think I might just go with `inlining` the IR into a copy of itself, which seems to work.","user":"UM30MT6RF","ts":"1614088023.012300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"duu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't think I did. I think I might just go with "},{"type":"text","text":"inlining","style":{"code":true}},{"type":"text","text":" the IR into a copy of itself, which seems to work."}]}]}]},{"client_msg_id":"c11cbf69-e9dd-4899-9199-24cc2cfc8101","type":"message","text":"Ah, yeah. The faster equivalent of rebuilding the whole thing :slightly_smiling_face:","user":"UN45LV5K6","ts":"1614088158.012800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Cza2/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, yeah. The faster equivalent of rebuilding the whole thing "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"reactions":[{"name":"laughing","users":["UM30MT6RF"],"count":1}]},{"client_msg_id":"029ea6a3-19ad-4fb3-8039-ac421a7087cf","type":"message","text":"Does anybody know how to use `IRTools.func()`  in a precompiled module? I'm trying to manually construct a function from IR and put it into my module, but during testing it fails with:\n\n&gt;  Evaluation into the closed module `Inner` breaks incremental compilation because the side effects will not be permanent. This is likely due to some other module mutating `Inner` with `eval` during precompilation - don't do this.\nPutting it into a submodule with `__precompile__(false)`  fixes the issue, but as far as I understand it prevents prcompilation of the parent module too.","user":"U72B014PN","ts":"1616922754.003300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ljY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does anybody know how to use "},{"type":"text","text":"IRTools.func()","style":{"code":true}},{"type":"text","text":"  in a precompiled module? I'm trying to manually construct a function from IR and put it into my module, but during testing it fails with:\n\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":" Evaluation into the closed module "},{"type":"text","text":"Inner","style":{"code":true}},{"type":"text","text":" breaks incremental compilation because the side effects will not be permanent. This is likely due to some other module mutating "},{"type":"text","text":"Inner","style":{"code":true}},{"type":"text","text":" with "},{"type":"text","text":"eval","style":{"code":true}},{"type":"text","text":" during precompilation - don't do this."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nPutting it into a submodule with "},{"type":"text","text":"__precompile__(false)","style":{"code":true}},{"type":"text","text":"  fixes the issue, but as far as I understand it prevents prcompilation of the parent module too."}]}]}],"thread_ts":"1616922754.003300","reply_count":1,"reply_users_count":1,"latest_reply":"1616922921.003400","reply_users":["U72B014PN"],"is_locked":false,"subscribed":false},{"client_msg_id":"BE49FC7C-E363-4E51-9E86-B5C625623988","type":"message","text":"You could eval the func definition inside `__init__()`","user":"U8D9768Q6","ts":"1616946848.005000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Voc56","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You could eval the func definition inside "},{"type":"text","text":"__init__()","style":{"code":true}}]}]}]},{"client_msg_id":"313EB46D-97CF-4936-8C5A-1CC2EEBCEED5","type":"message","text":"`func` uses eval anyways","user":"U8D9768Q6","ts":"1616946877.005900","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1616946894.000000"},"blocks":[{"type":"rich_text","block_id":"yINN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"func","style":{"code":true}},{"type":"text","text":" uses eval anyways"}]}]}]},{"client_msg_id":"c496269a-200f-423e-97bf-b1f4c14e7eb2","type":"message","text":"Yeah, I thought about it, but `__init__()`  works during package initialization while I'm trying to create and use a function during package precompilation.\n\nBut I found out that `IRTools.func()`  supports an additional argument - a module to evaluate function in. I tried `func(@__MODULE__, ir)`  and it worked fine in my case.\n\n(Well, to be precise, it worked after I fixed the definition locally, so right now I'm preparing the PR. A good test for this use case turns to be much harder task than the fix itself :D)","user":"U72B014PN","ts":"1616948102.009900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+eZb/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, I thought about it, but "},{"type":"text","text":"__init__()","style":{"code":true}},{"type":"text","text":"  works during package initialization while I'm trying to create and use a function during package precompilation.\n\nBut I found out that "},{"type":"text","text":"IRTools.func()","style":{"code":true}},{"type":"text","text":"  supports an additional argument - a module to evaluate function in. I tried "},{"type":"text","text":"func(@__MODULE__, ir)","style":{"code":true}},{"type":"text","text":"  and it worked fine in my case.\n\n(Well, to be precise, it worked after I fixed the definition locally, so right now I'm preparing the PR. A good test for this use case turns to be much harder task than the fix itself :D)"}]}]}]},{"client_msg_id":"ff573063-feaa-40a1-be3a-8010cdc777f6","type":"message","text":"I would try to avoid `IRTools.func` altogether and use a dynamo instead","user":"UM30MT6RF","ts":"1616948271.010000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ger","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I would try to avoid "},{"type":"text","text":"IRTools.func","style":{"code":true}},{"type":"text","text":" altogether and use a dynamo instead"}]}]}]},{"client_msg_id":"100765e8-fbdf-458f-be39-f29815e40074","type":"message","text":"Ha, I didn't think about dynamos in this context, but now when you said it indeed looks like the easiest solution","user":"U72B014PN","ts":"1616948979.011100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0aQ8Y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ha, I didn't think about dynamos in this context, but now when you said it indeed looks like the easiest solution"}]}]}]},{"client_msg_id":"19194730-77f1-4f9e-a477-fb0e7254bd65","type":"message","text":"In dynamos, when constructing IR from scratch (i.e. `IR()`, not `IR(f, args...)` ), how do we construct an argument list? I tried this:\n\n```@dynamo function __splatnew__(a...)\n    ir = IR()\n    vT = argument!(ir)      # argument for a type to be constructed\n    vargs = argument!(ir)   # argument for its field values\n    vres = push!(ir, Expr(:splatnew, vT, vargs))\n    return!(ir, vres)\n    return ir\nend```\nbut it results in an undefined variable\n```struct Point x; y end\n\n@code_ir __splatnew__(Point, (1, 2))```\nresult:\n```1: (%1, %2)\n  %3 = %splatnew(%2, IRTools.Inner.Undefined())\n  return %3```\nany examples of building functions from the grounds up?","user":"U72B014PN","ts":"1616973951.017500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"moh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In dynamos, when constructing IR from scratch (i.e. "},{"type":"text","text":"IR()","style":{"code":true}},{"type":"text","text":", not "},{"type":"text","text":"IR(f, args...)","style":{"code":true}},{"type":"text","text":" ), how do we construct an argument list? I tried this:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@dynamo function __splatnew__(a...)\n    ir = IR()\n    vT = argument!(ir)      # argument for a type to be constructed\n    vargs = argument!(ir)   # argument for its field values\n    vres = push!(ir, Expr(:splatnew, vT, vargs))\n    return!(ir, vres)\n    return ir\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nbut it results in an undefined variable\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct Point x; y end\n\n@code_ir __splatnew__(Point, (1, 2))"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"result:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"1: (%1, %2)\n  %3 = %splatnew(%2, IRTools.Inner.Undefined())\n  return %3"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"any examples of building functions from the grounds up?"}]}]}],"thread_ts":"1616973951.017500","reply_count":1,"reply_users_count":1,"latest_reply":"1616975166.017700","reply_users":["UM30MT6RF"],"is_locked":false,"subscribed":false},{"client_msg_id":"fcb246ce-61cb-40ab-95f6-535b0417b5e9","type":"message","text":"<@U69BL50BF>,  Is it correct that IRtools will eventually be deprecated? Cc: <@UKA81L34J> and <@U01K2JB9GPJ>","user":"UDGT4PM41","ts":"1617804725.019200","team":"T68168MUP","edited":{"user":"UDGT4PM41","ts":"1617804785.000000"},"blocks":[{"type":"rich_text","block_id":"rhx9+","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U69BL50BF"},{"type":"text","text":",  Is it correct that IRtools will eventually be deprecated? Cc: "},{"type":"user","user_id":"UKA81L34J"},{"type":"text","text":" and "},{"type":"user","user_id":"U01K2JB9GPJ"}]}]}]},{"type":"message","subtype":"channel_join","ts":"1617804729.019400","user":"U69BL50BF","text":"<@U69BL50BF> has joined the channel","inviter":"UDGT4PM41"},{"client_msg_id":"601841f9-33cd-4cd4-8388-1c576f212ad4","type":"message","text":"that seems to be the plan./","user":"U69BL50BF","ts":"1617804936.019700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9Tg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that seems to be the plan./"}]}]}]},{"client_msg_id":"b089cfe2-1fb4-4f01-9f05-8d6d3f5b3b94","type":"message","text":"The AbstractInterpreter will take over.","user":"U69BL50BF","ts":"1617804950.019900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hrCW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The AbstractInterpreter will take over."}]}]}]},{"client_msg_id":"a3385d41-74eb-4449-b54d-3b5582c2aed4","type":"message","text":"Thanks","user":"UDGT4PM41","ts":"1617805124.020000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"83d5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks"}]}]}]},{"client_msg_id":"a863a9ae-7e5e-4a21-af51-3b2576014181","type":"message","text":"<@U69BL50BF> I really prefer working with `<http://IRTools.IR|IRTools.IR>` over `CodeInfo` — the utilities seem to be much better developed. Of course, what representation of `CodeInfo` we use does not affect `AbstractInterpreter` as long as we convert back. So I’m confused as to why `IRTools` would be deprecated — perhaps the `IR` can remain.","user":"UKA81L34J","ts":"1617805525.021500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zP+","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U69BL50BF"},{"type":"text","text":" I really prefer working with "},{"type":"text","text":"IRTools.IR","style":{"code":true}},{"type":"text","text":" over "},{"type":"text","text":"CodeInfo","style":{"code":true}},{"type":"text","text":" — the utilities seem to be much better developed. Of course, what representation of "},{"type":"text","text":"CodeInfo","style":{"code":true}},{"type":"text","text":" we use does not affect "},{"type":"text","text":"AbstractInterpreter","style":{"code":true}},{"type":"text","text":" as long as we convert back. So I’m confused as to why "},{"type":"text","text":"IRTools","style":{"code":true}},{"type":"text","text":" would be deprecated — perhaps the "},{"type":"text","text":"IR","style":{"code":true}},{"type":"text","text":" can remain."}]}]}],"thread_ts":"1617805525.021500","reply_count":3,"reply_users_count":2,"latest_reply":"1617806181.024700","reply_users":["U67BJLYCS","UKA81L34J"],"is_locked":false,"subscribed":false,"reactions":[{"name":"+1","users":["U8D9768Q6"],"count":1}]},{"client_msg_id":"fb24024b-fc15-4fa6-9a2f-37eda954d91b","type":"message","text":"Keno's plan is to make a higher level interface over the AbstractInterpreter","user":"U69BL50BF","ts":"1617805559.022000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qGPL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Keno's plan is to make a higher level interface over the AbstractInterpreter"}]}]}]},{"client_msg_id":"3761c91c-adac-4f3e-8df6-0ddf2787c4c9","type":"message","text":"Okay great — I started working on something similar <https://github.com/femtomc/Mixtape.jl> but it’s using `<http://IRTools.IR|IRTools.IR>` when I expose the IR to the user.","user":"UKA81L34J","ts":"1617805676.023400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=65","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Okay great — I started working on something similar "},{"type":"link","url":"https://github.com/femtomc/Mixtape.jl"},{"type":"text","text":" but it’s using "},{"type":"text","text":"IRTools.IR","style":{"code":true}},{"type":"text","text":" when I expose the IR to the user."}]}]}]},{"client_msg_id":"5cb423d4-1a5d-4244-b06f-2ae05bbc3142","type":"message","text":"It seems like anything which exposes untyped IR before AbstractInterpreter inference (for semantic changing transformations) is going to have to expose some nice IR like thing","user":"UKA81L34J","ts":"1617805717.024100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7klcL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It seems like anything which exposes untyped IR before AbstractInterpreter inference (for semantic changing transformations) is going to have to expose some nice IR like thing"}]}]}]},{"client_msg_id":"d6fa4af1-bcba-4d8b-b107-b265cb80a9fb","type":"message","text":"Re — CodeInfo utils: <@UC6SUUPRC> developed a bunch. Maybe we should start contributing to a common package. I wouldn’t mind working with `CodeInfo` if there was some nice set of utils","user":"UKA81L34J","ts":"1617806244.025500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8CoNA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Re — CodeInfo utils: "},{"type":"user","user_id":"UC6SUUPRC"},{"type":"text","text":" developed a bunch. Maybe we should start contributing to a common package. I wouldn’t mind working with "},{"type":"text","text":"CodeInfo","style":{"code":true}},{"type":"text","text":" if there was some nice set of utils"}]}]}]},{"client_msg_id":"07fe8860-fad2-4aad-ba4f-4f7bb28f093a","type":"message","text":"I have found Cassette's `insert_statements!` to be surprisingly powerful, in most cases I don't think it would be too hard to rewrite passes on `IR` with just that. Of course the gotcha is that if you make any boo-boos, you will get some fun segfaults.","user":"UM30MT6RF","ts":"1617809992.025600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1NJb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have found Cassette's "},{"type":"text","text":"insert_statements!","style":{"code":true}},{"type":"text","text":" to be surprisingly powerful, in most cases I don't think it would be too hard to rewrite passes on "},{"type":"text","text":"IR","style":{"code":true}},{"type":"text","text":" with just that. Of course the gotcha is that if you make any boo-boos, you will get some fun segfaults."}]}]}]},{"client_msg_id":"47511c9b-9e0c-4952-a8b8-75e5ed579c0a","type":"message","text":"It won't be super efficient of course, but don't AbstractInterpreters mostly work with `IRCode`, not `CodeInfo` anyways?","user":"UM30MT6RF","ts":"1617810067.025700","team":"T68168MUP","edited":{"user":"UM30MT6RF","ts":"1617810076.000000"},"blocks":[{"type":"rich_text","block_id":"HU3v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It won't be super efficient of course, but don't AbstractInterpreters mostly work with "},{"type":"text","text":"IRCode","style":{"code":true}},{"type":"text","text":", not "},{"type":"text","text":"CodeInfo","style":{"code":true}},{"type":"text","text":" anyways?"}]}]}]},{"client_msg_id":"a516dcfb-f977-4292-8b17-76dddf118d5d","type":"message","text":"<@UM30MT6RF> Apparently Keno is working on or planning to work on a  direct replacement for cassette.","user":"UDGT4PM41","ts":"1617810106.026400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pp6MI","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UM30MT6RF"},{"type":"text","text":" Apparently Keno is working on or planning to work on a  direct replacement for cassette."}]}]}]},{"client_msg_id":"0e76a55b-33be-43ea-9a91-bf27a93fda71","type":"message","text":"without the overhead and pitfalls","user":"UDGT4PM41","ts":"1617810113.026700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"toef","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"without the overhead and pitfalls"}]}]}],"thread_ts":"1617810113.026700","reply_count":1,"reply_users_count":1,"latest_reply":"1617810294.027000","reply_users":["UM30MT6RF"],"is_locked":false,"subscribed":false},{"client_msg_id":"4ffd9e51-a333-4e93-b138-81a84f675c24","type":"message","text":"this is a start in that direction: <https://github.com/JuliaLang/julia/pull/39697>","user":"UDGT4PM41","ts":"1617810152.026900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pez6h","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this is a start in that direction: "},{"type":"link","url":"https://github.com/JuliaLang/julia/pull/39697"}]}]}]},{"type":"message","subtype":"thread_broadcast","text":"I’m currently just moving what I wrote before for YaoCompiler to a single package. And rewrite YaoCompiler to polish the implementation as well as pushing test coverage. Perhaps would take a while","user":"UC6SUUPRC","ts":"1617814272.030400","thread_ts":"1617806244.025500","root":{"client_msg_id":"d6fa4af1-bcba-4d8b-b107-b265cb80a9fb","type":"message","text":"Re — CodeInfo utils: <@UC6SUUPRC> developed a bunch. Maybe we should start contributing to a common package. I wouldn’t mind working with `CodeInfo` if there was some nice set of utils","user":"UKA81L34J","ts":"1617806244.025500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8CoNA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Re — CodeInfo utils: "},{"type":"user","user_id":"UC6SUUPRC"},{"type":"text","text":" developed a bunch. Maybe we should start contributing to a common package. I wouldn’t mind working with "},{"type":"text","text":"CodeInfo","style":{"code":true}},{"type":"text","text":" if there was some nice set of utils"}]}]}],"thread_ts":"1617806244.025500","reply_count":1,"reply_users_count":1,"latest_reply":"1617814272.030400","reply_users":["UC6SUUPRC"],"is_locked":false,"subscribed":false},"blocks":[{"type":"rich_text","block_id":"f4vE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’m currently just moving what I wrote before for YaoCompiler to a single package. And rewrite YaoCompiler to polish the implementation as well as pushing test coverage. Perhaps would take a while"}]}]}],"client_msg_id":"99FEBF34-924C-4D60-87FF-F8413AE92B2D"},{"client_msg_id":"9481ffbb-1093-46c6-9b67-45acf4604fac","type":"message","text":"Oh man, I just started a branch in Yota to replace my custom `Tape` with `<http://IRTools.IR|IRTools.IR>` :scream: If `IRTools` is planned for deprecation, perhaps it doesn't make sense anymore. Is at least `CodeInfo` here to stay? :thinking_face:","user":"U72B014PN","ts":"1617817055.034700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nRp9I","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh man, I just started a branch in Yota to replace my custom "},{"type":"text","text":"Tape","style":{"code":true}},{"type":"text","text":" with "},{"type":"link","url":"http://IRTools.IR","text":"IRTools.IR","style":{"code":true}},{"type":"text","text":" "},{"type":"emoji","name":"scream"},{"type":"text","text":" If "},{"type":"text","text":"IRTools","style":{"code":true}},{"type":"text","text":" is planned for deprecation, perhaps it doesn't make sense anymore. Is at least "},{"type":"text","text":"CodeInfo","style":{"code":true}},{"type":"text","text":" here to stay? "},{"type":"emoji","name":"thinking_face"}]}]}]},{"client_msg_id":"1B038549-4226-4765-86D9-B8BD1E060794","type":"message","text":"The idea is just there’s no need to maintain several similar things... especially CodeInfo and IRCode has been used inside Julia compiler and Cassette for a long time they have been quite stable. You can still use IRTools for sure it’s just easier to work with the data structure your compiler provides directly sometimes I think. ","user":"UC6SUUPRC","ts":"1617817475.037800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OuID","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The idea is just there’s no need to maintain several similar things... especially CodeInfo and IRCode has been used inside Julia compiler and Cassette for a long time they have been quite stable. You can still use IRTools for sure it’s just easier to work with the data structure your compiler provides directly sometimes I think. "}]}]}]},{"client_msg_id":"930CE8B2-284E-4186-B758-97ABF31AC776","type":"message","text":"E.g in YaoCompiler I had a version using IRTools and I have to maintain <http://IRTools.IR|IRTools.IR>, CodeInfo and IRCode and converting them back and forth (mostly IR and CodeInfo) which makes it painful ","user":"UC6SUUPRC","ts":"1617817599.040300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FVz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"E.g in YaoCompiler I had a version using IRTools and I have to maintain IRTools.IR, CodeInfo and IRCode and converting them back and forth (mostly IR and CodeInfo) which makes it painful "}]}]}]},{"client_msg_id":"2A5EDA1B-0B23-4FDF-87AE-597F9043B01E","type":"message","text":"So if you want to work with abstract interpreter I think it’s probably better not use IRTools since most things inside Julia works on  CodeInfo ","user":"UC6SUUPRC","ts":"1617817660.041500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ua7Yb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So if you want to work with abstract interpreter I think it’s probably better not use IRTools since most things inside Julia works on  CodeInfo "}]}]}]}]}