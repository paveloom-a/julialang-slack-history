{"cursor": 0, "messages": [{"client_msg_id":"87a61e02-62df-4386-a74d-75d537a97a5b","type":"message","text":"I am wondering  about a `provide` method, a way for types' instances to provide their values into expressions. Like an inversion of dispatch forwarding .. rather than write code that redispatches through to the value of a struct comcretion,, write a [few] `provide` method[s] that is available to be called and will be autodialed where a value of that type is expressed without an overriding specialization.  For example, where Base.(+)(a::AProvidableType, b::TypeTwo) is defined, that handles the process of addition. otherwise `a + b` becomes `provide(a) + b` which becomes _.  With binary operators of mixed type, it would be similar to having `op(a, b)`  first selfdo `op(provide(a), b)` into `op(a_provided, b).` To asses type compatibility or determine multityped dispatch, an available-to-internals method that \"provides the type for a providable value\" `providetype`  completes this note.","user":"U68QW0PUZ","ts":"1612561799.032600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gmBZB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am wondering  about a "},{"type":"text","text":"provide","style":{"code":true}},{"type":"text","text":" method, a way for types' instances to provide their values into expressions. Like an inversion of dispatch forwarding .. rather than write code that redispatches through to the value of a struct comcretion,, write a [few] "},{"type":"text","text":"provide","style":{"code":true}},{"type":"text","text":" method[s] that is available to be called and will be autodialed where a value of that type is expressed without an overriding specialization.  For example, where Base.(+)(a::AProvidableType, b::TypeTwo) is defined, that handles the process of addition. otherwise "},{"type":"text","text":"a + b","style":{"code":true}},{"type":"text","text":" becomes "},{"type":"text","text":"provide(a) + b","style":{"code":true}},{"type":"text","text":" which becomes _.  With binary operators of mixed type, it would be similar to having "},{"type":"text","text":"op(a, b)","style":{"code":true}},{"type":"text","text":"  first selfdo "},{"type":"text","text":"op(provide(a), b)","style":{"code":true}},{"type":"text","text":" into "},{"type":"text","text":"op(a_provided, b).","style":{"code":true}},{"type":"text","text":" To asses type compatibility or determine multityped dispatch, an available-to-internals method that \"provides the type for a providable value\" "},{"type":"text","text":"providetype","style":{"code":true}},{"type":"text","text":"  completes this note."}]}]}]},{"client_msg_id":"6B8FDE75-A5E1-4BB1-8E5D-69103CA1C2A9","type":"message","text":"It’s not clear to me what you mean by this. Why would you need a function to get the value of a type? It’s already there...","user":"U8D9768Q6","ts":"1612562858.033600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HAZfA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It’s not clear to me what you mean by this. Why would you need a function to get the value of a type? It’s already there..."}]}]}]}]}