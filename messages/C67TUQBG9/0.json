{"cursor":0,"messages":[{"client_msg_id":"482daef5-903c-4a4b-9fbb-9bff3327ecc7","type":"message","text":"Reminder that triage is planned for today. Last triage of the year","user":"U674T3KB3","ts":"1608196900.175200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ExC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Reminder that triage is planned for today. Last triage of the year"}]}]}],"reactions":[{"name":"fast_parrot","users":["U678RKJ5A","U6QGE7S86","U68M6ERG8","U66GD0880"],"count":4}]},{"client_msg_id":"317ad711-1f89-40f8-bf01-75d318048100","type":"message","text":"would it be possible to get that PR <https://github.com/JuliaLang/julia/pull/34678> merged into 1.6? Especially since it is already tested, only consists of 1 line of feature (4 loc including tests) and has been approved by triage via the corresponding issue <https://github.com/JuliaLang/julia/issues/34674> in march this year. (I don't know why the PR got its individual triage label :see_no_evil:)","user":"UMWFZF5DW","ts":"1608200878.178200","team":"T68168MUP","edited":{"user":"UMWFZF5DW","ts":"1608204856.000000"},"blocks":[{"type":"rich_text","block_id":"w9PHU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"would it be possible to get that PR "},{"type":"link","url":"https://github.com/JuliaLang/julia/pull/34678"},{"type":"text","text":" merged into 1.6? Especially since it is already tested, only consists of 1 line of feature (4 loc including tests) and has been approved by triage via the corresponding issue "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/34674"},{"type":"text","text":" in march this year. (I don't know why the PR got its individual triage label "},{"type":"emoji","name":"see_no_evil"},{"type":"text","text":")"}]}]}]},{"client_msg_id":"05826dae-d184-4614-b809-33b9e9e7884b","type":"message","text":"I've just restarted ci for it. Since triage has already approved, Imo it's methane as soon as ci comes back. The triage label is probably for whether to backport to 1.6","user":"U0179G7FG4F","ts":"1608211455.180500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Syh62","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I've just restarted ci for it. Since triage has already approved, Imo it's methane as soon as ci comes back. The triage label is probably for whether to backport to 1.6"}]}]}],"thread_ts":"1608211455.180500","reply_count":4,"reply_users_count":2,"latest_reply":"1608215963.181200","reply_users":["UMWFZF5DW","U0179G7FG4F"],"subscribed":false},{"client_msg_id":"a8c884bb-4e80-4c29-b59b-af2c34f49279","type":"message","text":"I don't much like it; a generator doesn't have keys. And if it does, you'd think those would be the values of the iterator, not the keys of the iterator. And arbitrary iterators have keys even less than generators do.","user":"U687RKK0E","ts":"1608221322.182400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vXx3P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't much like it; a generator doesn't have keys. And if it does, you'd think those would be the values of the iterator, not the keys of the iterator. And arbitrary iterators have keys even less than generators do."}]}]}],"reactions":[{"name":"+1","users":["U7THT3TM3"],"count":1}]},{"client_msg_id":"1f5bfbd8-bc2b-4dfc-bab5-15118ac4119d","type":"message","text":"A generator, being a lazy map, does have keys IMO. Shouldn't generators be thought of as lazy maps?","user":"UMWFZF5DW","ts":"1608221376.183100","team":"T68168MUP","edited":{"user":"UMWFZF5DW","ts":"1608221389.000000"},"blocks":[{"type":"rich_text","block_id":"KOit","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"A generator, being a lazy map, does have keys IMO. Shouldn't generators be thought of as lazy maps?"}]}]}]},{"client_msg_id":"e2a7521f-9e48-40c7-8fb5-776b6b671267","type":"message","text":"It doesn't behave like a Dict in any other way.","user":"U687RKK0E","ts":"1608221612.184800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ufRk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It doesn't behave like a Dict in any other way."}]}]}]},{"client_msg_id":"4c574aaf-6225-4f1e-811e-9415a92b97b0","type":"message","text":"Arrays don't do either, do they?","user":"UMWFZF5DW","ts":"1608221643.185100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hIjWU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Arrays don't do either, do they?"}]}]}]},{"client_msg_id":"0f8b88cb-98db-495d-8c6f-b0c324ee639a","type":"message","text":"Arrays at least have indexing.","user":"U687RKK0E","ts":"1608221679.185800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6/wf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Arrays at least have indexing."}]}]}]},{"client_msg_id":"bcdefc3a-c8e6-49a5-ad75-495367b17101","type":"message","text":"I wanted it to be on par with `map(f, iter)` so that map and Generator (or, soon, Iterators.map) could optimally be used interchangeably.","user":"UMWFZF5DW","ts":"1608221750.186900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zXE+8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I wanted it to be on par with "},{"type":"text","text":"map(f, iter)","style":{"code":true}},{"type":"text","text":" so that map and Generator (or, soon, Iterators.map) could optimally be used interchangeably."}]}]}]},{"client_msg_id":"764a151c-e72f-4328-a4cf-bc78c35049e3","type":"message","text":"and yes, that also needs indexing","user":"UMWFZF5DW","ts":"1608221755.187100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Wj9h4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and yes, that also needs indexing"}]}]}]},{"client_msg_id":"23758825-f25c-431c-a643-0555da86ba04","type":"message","text":"<https://github.com/JuliaLang/julia/pull/37648> there is indexing","user":"UMWFZF5DW","ts":"1608221778.187300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"t3X","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/pull/37648"},{"type":"text","text":" there is indexing"}]}]}]},{"client_msg_id":"f4ff19b1-92d6-46e8-bec3-851496a30fce","type":"message","text":"So it should also be a subtype of AbstractArray?","user":"U687RKK0E","ts":"1608221811.187900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fWSML","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So it should also be a subtype of AbstractArray?"}]}]}]},{"client_msg_id":"acd2c7e9-6337-469b-8ee4-f696fc12a166","type":"message","text":"It should behave like one in all cases where its iterator is one","user":"UMWFZF5DW","ts":"1608221835.188300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0xQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It should behave like one in all cases where its iterator is one"}]}]}]},{"client_msg_id":"47248da4-e251-4981-92de-5186b0b23704","type":"message","text":"i.e. optimally it would mimic the structure of the underlying iterator","user":"UMWFZF5DW","ts":"1608221847.188700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fOG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i.e. optimally it would mimic the structure of the underlying iterator"}]}]}],"reactions":[{"name":"+1","users":["U679T6QF7","U0179G7FG4F","U680THK2S"],"count":3}]},{"client_msg_id":"d9d1fdd2-0560-4b7d-9dbb-dd3fb581c3c7","type":"message","text":"(as we already do for size, length etc)","user":"UMWFZF5DW","ts":"1608221865.189000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1co3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(as we already do for size, length etc)"}]}]}]},{"client_msg_id":"3567d675-fd80-45f9-a2e1-38dc9a15a1ae","type":"message","text":"to make it a generic lazy map. Alternatively we could introduce a new lazy map type which is particularly designed to redirect structural requests to the underlying iterator","user":"UMWFZF5DW","ts":"1608221919.190000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h4H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"to make it a generic lazy map. Alternatively we could introduce a new lazy map type which is particularly designed to redirect structural requests to the underlying iterator"}]}]}]},{"client_msg_id":"2a2fe583-a528-49ec-a349-908da7037d40","type":"message","text":"and maps value requests individually through the supplied function, no matter if requested via getindex or values or any other possible way","user":"UMWFZF5DW","ts":"1608221959.190800","team":"T68168MUP","edited":{"user":"UMWFZF5DW","ts":"1608221981.000000"},"blocks":[{"type":"rich_text","block_id":"n45","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and maps value requests individually through the supplied function, no matter if requested via getindex or values or any other possible way"}]}]}]},{"client_msg_id":"e5863f40-0dbc-4bc2-a263-254763e83b1e","type":"message","text":"in a purely abstract matter it could work on anything that somehow pairs 2 values (=any association)","user":"UMWFZF5DW","ts":"1608222045.191500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iJO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in a purely abstract matter it could work on anything that somehow pairs 2 values (=any association)"}]}]}]},{"client_msg_id":"5489d7b4-645d-4b91-91e8-e157629a2f9e","type":"message","text":"Well, I see we already define `axes` for it, which is almost the same thing. So perhaps we've already crossed this line anyway.","user":"U687RKK0E","ts":"1608222125.192500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nJUk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well, I see we already define "},{"type":"text","text":"axes","style":{"code":true}},{"type":"text","text":" for it, which is almost the same thing. So perhaps we've already crossed this line anyway."}]}]}]},{"client_msg_id":"73babaad-1197-44f8-8188-f9f149759d25","type":"message","text":"Though, it certainly would be nice to make some clear line decisions like whether Generator should be treated as lazy map and thus have all structure-preserving capabilities one would expect for a element-by-element mapping. And if so, then deciding if the mapping should be kept lazy and thus, applying another lazy map, will result in a generator with chained functions where changing the structure will only act on the iterator. Both will produce a new Generator object that subsumes all previous lazy maps. This needs a \"pure\" function to behave predictably, but that should be a requirement for lazy maps anyway IMO.","user":"UMWFZF5DW","ts":"1608222242.193900","team":"T68168MUP","edited":{"user":"UMWFZF5DW","ts":"1608222623.000000"},"blocks":[{"type":"rich_text","block_id":"w7DPO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Though, it certainly would be nice to make some clear line decisions like whether Generator should be treated as lazy map and thus have all structure-preserving capabilities one would expect for a element-by-element mapping. And if so, then deciding if the mapping should be kept lazy and thus, applying another lazy map, will result in a generator with chained functions where changing the structure will only act on the iterator. Both will produce a new Generator object that subsumes all previous lazy maps. This needs a \"pure\" function to behave predictably, but that should be a requirement for lazy maps anyway IMO."}]}]}]},{"client_msg_id":"cb75cf38-9c4c-4aad-9505-ee571a6c9ef8","type":"message","text":"that at least would give a clear path on what else to add :smile:; or that we need any other type.","user":"UMWFZF5DW","ts":"1608222292.194500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W5eL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that at least would give a clear path on what else to add "},{"type":"emoji","name":"smile"},{"type":"text","text":"; or that we need any other type."}]}]}]},{"client_msg_id":"9313495F-32E3-4F53-BB64-399CC0A1F304","type":"message","text":" for reference, maybe checK out <https://github.com/JuliaArrays/MappedArrays.jl|https://github.com/JuliaArrays/MappedArrays.jl>. I think this will likely serve you better than relying Generator as a lazy map. ","user":"U8D9768Q6","ts":"1608222812.196300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PXE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":" for reference, maybe checK out "},{"type":"link","url":"https://github.com/JuliaArrays/MappedArrays.jl","text":"https://github.com/JuliaArrays/MappedArrays.jl"},{"type":"text","text":". I think this will likely serve you better than relying Generator as a lazy map. "}]}]}]},{"client_msg_id":"70c3fc56-a4ae-41c1-bc4f-1ddeb92c81b8","type":"message","text":"<@U8D9768Q6> then we still should decide on what purpose Generator is for (since it's not meant to be a lazy map I guess) to finally clearly position on that line because such questions/interpretations keep coming up. Since we currently have Iterators.map == Generator and Iterators.map should be the lazy map (at least that's a reasonable expectation I guess) it's not out of nowhere to have that intuition IMO. That's why I alternatively suggested to add a new type which has that behavior and will be the default for Iterators.map in future.","user":"UMWFZF5DW","ts":"1608223324.200400","team":"T68168MUP","edited":{"user":"UMWFZF5DW","ts":"1608223354.000000"},"blocks":[{"type":"rich_text","block_id":"kNU","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U8D9768Q6"},{"type":"text","text":" then we still should decide on what purpose Generator is for (since it's not meant to be a lazy map I guess) to finally clearly position on that line because such questions/interpretations keep coming up. Since we currently have Iterators.map == Generator and Iterators.map should be the lazy map (at least that's a reasonable expectation I guess) it's not out of nowhere to have that intuition IMO. That's why I alternatively suggested to add a new type which has that behavior and will be the default for Iterators.map in future."}]}]}]},{"client_msg_id":"a2148e0d-e91a-46c1-90d0-93905c5a9172","type":"message","text":"Maybe we should solve it the same way as missing/nothing. Introduce a new type to have a clear separation of meanings.","user":"UMWFZF5DW","ts":"1608223405.201100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zoSG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe we should solve it the same way as missing/nothing. Introduce a new type to have a clear separation of meanings."}]}]}]},{"client_msg_id":"e2ac0af0-abac-4763-9687-35bac2eefca0","type":"message","text":"Also, I'd guess MappedArrays.jl only works for &lt;:AbstractArray while that proposed type should rely on julia's powers, i.e. duck typing, to do what we often consider to be very julian: Only restrict the argument types for dispatch and define the algorithm abstractly based on certain key functions. It'll work whenever those functions are available. A true pass-through type.\nall these structural functions (size, length, keys, values, getindex, whatever) could rely on the duck typing here","user":"UMWFZF5DW","ts":"1608223783.204800","team":"T68168MUP","edited":{"user":"UMWFZF5DW","ts":"1608223882.000000"},"blocks":[{"type":"rich_text","block_id":"eAj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, I'd guess MappedArrays.jl only works for <:AbstractArray while that proposed type should rely on julia's powers, i.e. duck typing, to do what we often consider to be very julian: Only restrict the argument types for dispatch and define the algorithm abstractly based on certain key functions. It'll work whenever those functions are available. A true pass-through type.\nall these structural functions (size, length, keys, values, getindex, whatever) could rely on the duck typing here"}]}]}]},{"client_msg_id":"0507df2a-1a50-4236-a7cb-e39afd930727","type":"message","text":"For a real lazy `map`, we should have `Iterators.map` be a separate function, then different iterators or collections can implement it to return whatever kind of object is appropriate, e.g. a MappedArray.","user":"U687RKK0E","ts":"1608223907.206200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fQfV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For a real lazy "},{"type":"text","text":"map","style":{"code":true}},{"type":"text","text":", we should have "},{"type":"text","text":"Iterators.map","style":{"code":true}},{"type":"text","text":" be a separate function, then different iterators or collections can implement it to return whatever kind of object is appropriate, e.g. a MappedArray."}]}]}]},{"client_msg_id":"d4cab08d-30b8-45fa-a7cc-0b45b3c0d9df","type":"message","text":"Oh good, it's already a separate function :slightly_smiling_face:","user":"U687RKK0E","ts":"1608223954.207200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=Wxnl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh good, it's already a separate function "},{"type":"emoji","name":"slightly_smiling_face"}]}]}]},{"client_msg_id":"2a8a7e42-fab5-47c2-9737-27bb21cd6fc7","type":"message","text":"So, to rephrase my wall of text, I'm not hammering on making that type be Generator, just to clear the line and fitting Iterators.map appropriately","user":"UMWFZF5DW","ts":"1608223955.207300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1qXJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So, to rephrase my wall of text, I'm not hammering on making that type be Generator, just to clear the line and fitting Iterators.map appropriately"}]}]}]},{"client_msg_id":"bc43e843-8cc2-42d3-a542-00d1a91a06e3","type":"message","text":"that being a separate function actually was your idea according to <https://github.com/JuliaLang/julia/pull/34352|https://github.com/JuliaLang/julia/pull/34352> :joy: But there's also <https://github.com/JuliaLang/julia/issues/34368|https://github.com/JuliaLang/julia/issues/34368> (which also has the triage label) pointing to the lack of proper extensibility because Iterators.map === Generator instead of Iterators.map(args...) == Generator(args...) because in the former way we add methods to the constructor of the Generator type and it would be weird to return a MappedArray etc from such a constructor.","user":"UMWFZF5DW","ts":"1608224396.209600","team":"T68168MUP","edited":{"user":"UMWFZF5DW","ts":"1608225167.000000"},"blocks":[{"type":"rich_text","block_id":"Ygw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that being a separate function actually was your idea according to "},{"type":"link","url":"https://github.com/JuliaLang/julia/pull/34352","text":"https://github.com/JuliaLang/julia/pull/34352"},{"type":"text","text":" "},{"type":"emoji","name":"joy"},{"type":"text","text":" But there's also "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/34368","text":"https://github.com/JuliaLang/julia/issues/34368"},{"type":"text","text":" (which also has the triage label) pointing to the lack of proper extensibility because Iterators.map === Generator instead of Iterators.map(args...) == Generator(args...) because in the former way we add methods to the constructor of the Generator type and it would be weird to return a MappedArray etc from such a constructor."}]}]}]},{"client_msg_id":"058e8875-7540-4d32-aed3-3a1e94b70328","type":"message","text":"<!channel> happening now","user":"U674T3KB3","ts":"1608232562.210900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L/Br","elements":[{"type":"rich_text_section","elements":[{"type":"broadcast","range":"channel"},{"type":"text","text":" happening now"}]}]}]},{"client_msg_id":"656eba19-192a-4062-8e94-2d0f08a20d82","type":"message","text":"Happy triaging (sadly busy with meetings)\nGuten rutsch!","user":"U67BJLYCS","ts":"1608232593.211400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iDLf3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Happy triaging (sadly busy with meetings)\nGuten rutsch!"}]}]}]},{"client_msg_id":"31fa4c9d-f441-4270-a7c2-36c6ae9641fd","type":"message","text":"I sadly can't participate in the call either but I'll keep my eyes on the chat in case you decide on anything :slightly_smiling_face:","user":"UMWFZF5DW","ts":"1608232878.212400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0xO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I sadly can't participate in the call either but I'll keep my eyes on the chat in case you decide on anything "},{"type":"emoji","name":"slightly_smiling_face"}]}]}]},{"client_msg_id":"7a728915-d228-4296-9b41-899d267283ce","type":"message","text":"This works:\n```julia&gt; Diagonal([I, I])\n2×2 Diagonal{UniformScaling{Bool},Array{UniformScaling{Bool},1}}:\n UniformScaling{Bool}(true)                ⋅             \n              ⋅               UniformScaling{Bool}(true)```","user":"UM30MT6RF","ts":"1608233526.212800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MtUup","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This works:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Diagonal([I, I])\n2×2 Diagonal{UniformScaling{Bool},Array{UniformScaling{Bool},1}}:\n UniformScaling{Bool}(true)                ⋅             \n              ⋅               UniformScaling{Bool}(true)"}]}]}]},{"client_msg_id":"4be956d9-a4d5-4222-9b7b-240da68dcec4","type":"message","text":"The zero element can vary based on your + and * (e.g. in a max-plus algebra)","user":"U68M6ERG8","ts":"1608233982.213500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"agL2=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The zero element can vary based on your + and * (e.g. in a max-plus algebra)"}]}]}],"thread_ts":"1608233982.213500","reply_count":3,"reply_users_count":2,"latest_reply":"1608235167.215200","reply_users":["U89GY9W1J","U0179G7FG4F"],"subscribed":false,"reactions":[{"name":"+1","users":["U89GY9W1J"],"count":1}]},{"client_msg_id":"8113d02a-caa0-49c8-914d-f556dde9279a","type":"message","text":"so it is `haszero(T) &amp;&amp; zero(T) == f(zero(S))` in usage?","user":"U67BXBF99","ts":"1608234482.214400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"==nJD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so it is "},{"type":"text","text":"haszero(T) && zero(T) == f(zero(S))","style":{"code":true}},{"type":"text","text":" in usage?"}]}]}],"thread_ts":"1608234482.214400","reply_count":1,"reply_users_count":1,"latest_reply":"1608234522.214800","reply_users":["UM30MT6RF"],"subscribed":false},{"client_msg_id":"734f812b-5242-4a9e-b7cd-f83bf4b46b1b","type":"message","text":"<https://github.com/JuliaLang/julia/pull/34678>","user":"U687RKK0E","ts":"1608235699.215900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RUw","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/pull/34678"}]}]}]},{"client_msg_id":"741e14a2-35b5-4b2f-a595-bb337f21caf3","type":"message","text":"and related: <https://github.com/JuliaLang/julia/pull/37648>","user":"UMWFZF5DW","ts":"1608235885.216200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3ku1p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and related: "},{"type":"link","url":"https://github.com/JuliaLang/julia/pull/37648"}]}]}]},{"client_msg_id":"b74ab810-3736-4b61-8dc5-af9c9c41504a","type":"message","text":"and <https://github.com/JuliaLang/julia/issues/34368>","user":"U687RKK0E","ts":"1608235984.216500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"o+Xh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/34368"}]}]}]},{"client_msg_id":"ebe97812-92d2-40fe-af02-a96379082721","type":"message","text":"<https://github.com/JuliaLang/julia/issues/38750>","user":"U6795JH6H","ts":"1608236778.216700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dth","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/issues/38750"}]}]}]},{"client_msg_id":"5c57586f-2802-4feb-b30a-ec5b8047e12c","type":"message","text":"`is_poisoning(x) = (x == x) !== true`","user":"U6795JH6H","ts":"1608238257.217000","team":"T68168MUP","edited":{"user":"U6795JH6H","ts":"1608238290.000000"},"blocks":[{"type":"rich_text","block_id":"eI5o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is_poisoning(x) = (x == x) !== true","style":{"code":true}}]}]}]},{"client_msg_id":"1582f6d0-b736-4ee8-99c4-73e7623b1c55","type":"message","text":"`is_poisoning(x) = (x == x) !== true`?","user":"U0179G7FG4F","ts":"1608238350.217300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"y/FQ0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is_poisoning(x) = (x == x) !== true","style":{"code":true}},{"type":"text","text":"?"}]}]}]},{"client_msg_id":"7ea028e4-9ca7-4d81-8704-9acabc458f2f","type":"message","text":"<https://github.com/JuliaLang/julia/pull/37196>","user":"UM30MT6RF","ts":"1608238803.217900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nm1uD","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/pull/37196"}]}]}]}]}