{"cursor": 0, "messages": [{"client_msg_id":"35070eae-6341-4808-bafa-fec493df6a0c","type":"message","text":"is there a reference where the rules for svd <https://github.com/JuliaDiff/ChainRules.jl/blob/master/src/rulesets/LinearAlgebra/factorization.jl#L37> came from?","user":"UDPLCA08H","ts":"1607963792.190600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pgjI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is there a reference where the rules for svd "},{"type":"link","url":"https://github.com/JuliaDiff/ChainRules.jl/blob/master/src/rulesets/LinearAlgebra/factorization.jl#L37"},{"type":"text","text":" came from?"}]}]}],"thread_ts":"1607963792.190600","reply_count":12,"reply_users_count":7,"latest_reply":"1607974321.194800","reply_users":["U6PQP41C3","UDXST8ARK","UDPLCA08H","U6A936746","UCD4Z3NJZ","UHDQQ4GN6","U6YRZ18GZ"],"subscribed":false},{"client_msg_id":"d752fd31-b647-4e2c-bbcd-b46583e9a7e6","type":"message","text":"Given a polynomial f I can obtain the expression to compute a Jacobian-vector-product (forward mode) by doing\n\n```julia&gt; @var x y ẋ ẏ\n(x, y, ẋ, ẏ)\n\njulia&gt; f = x + x * y\nx + x*y\n\njulia&gt; @var ε\n(ε,)\n\njulia&gt; differentiate(f([x,y] =&gt; [x,y] + ε * [ẋ, ẏ]), ε)(ε =&gt; 0)\nẋ + x*ẏ + y*ẋ```\n(In this case this is the same result as doing the naive symbolic computation, but in general this is the same as doing forward mode when additionally performing a common subexpression elimination).\n\nQuestion: Is there a similar way to obtain an expression for the reverse mode?","user":"U7KA5J01Y","ts":"1608026643.195500","team":"T68168MUP","edited":{"user":"U7KA5J01Y","ts":"1608040133.000000"},"blocks":[{"type":"rich_text","block_id":"Lfkc0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Given a polynomial f I can obtain the expression to compute a Jacobian-vector-product (forward mode) by doing\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @var x y ẋ ẏ\n(x, y, ẋ, ẏ)\n\njulia> f = x + x * y\nx + x*y\n\njulia> @var ε\n(ε,)\n\njulia> differentiate(f([x,y] => [x,y] + ε * [ẋ, ẏ]), ε)(ε => 0)\nẋ + x*ẏ + y*ẋ"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n(In this case this is the same result as doing the naive symbolic computation, but in general this is the same as doing forward mode when additionally performing a common subexpression elimination).\n\nQuestion: Is there a similar way to obtain an expression for the reverse mode?"}]}]}],"thread_ts":"1608026643.195500","reply_count":4,"reply_users_count":3,"latest_reply":"1608047716.198600","reply_users":["U67G3QRJM","U7KA5J01Y","UD0NS8PDF"],"subscribed":false},{"client_msg_id":"8285d6d9-1185-4d7a-a2a9-9bb856760425","type":"message","text":"A very basic question: In ReverseDiff and Zygote are we also supposed to call something like zero_grad() in PyTorch in order to clear previous gradients or are they not summed up?","user":"U019PPN3H6J","ts":"1608117011.200500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6oV=B","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"A very basic question: In ReverseDiff and Zygote are we also supposed to call something like zero_grad() in PyTorch in order to clear previous gradients or are they not summed up?"}]}]}],"thread_ts":"1608117011.200500","reply_count":3,"reply_users_count":3,"latest_reply":"1608159431.207400","reply_users":["U6A936746","U019PPN3H6J","U6PQP41C3"],"subscribed":false},{"client_msg_id":"714acb3d-1c5f-4c8d-a9fb-26a6037a6a77","type":"message","text":"What causes this with Zygote?\n```ERROR: Need an adjoint for constructor PDiagMat{Float64,Array{Float64,1}}. Gradient is of type PDiagMat{Float64,Array{Float64,1}}```\nSometimes it just gets unhappy about constructors, and sometimes it doesn’t","user":"U6A936746","ts":"1608128432.201100","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1608128454.000000"},"blocks":[{"type":"rich_text","block_id":"xx1X","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What causes this with Zygote?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"ERROR: Need an adjoint for constructor PDiagMat{Float64,Array{Float64,1}}. Gradient is of type PDiagMat{Float64,Array{Float64,1}}"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Sometimes it just gets unhappy about constructors, and sometimes it doesn’t"}]}]}]},{"client_msg_id":"ec85807a-b27a-4dd7-974e-8c6204a4f7bb","type":"message","text":"I had a dream about chainrules types last night","user":"UDGT4PM41","ts":"1608129071.202200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nRSi1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I had a dream about chainrules types last night"}]}]}],"reactions":[{"name":"zzz","users":["UCZ7VBGUD","UEN48T0BT","U6A936746","UCD4Z3NJZ","UH8A351DJ","U6QGE7S86","U677NAWV8"],"count":7},{"name":"chainrules","users":["U6A936746","UDXST8ARK","UEN48T0BT","UCD4Z3NJZ","UH8A351DJ","U6QGE7S86","U0160CXEY3Z","U677NAWV8"],"count":8},{"name":"vat-the-type-pirate-cat","users":["U7JQGPGCQ","U6QGE7S86","U677NAWV8"],"count":3}]},{"client_msg_id":"bad45d90-5924-41b8-8863-5273aae4f372","type":"message","text":"How can we define custom gradients (in ReverseDiff) for a function f:R^2 x R -&gt; R^2, (x,u)-&gt;f(x,u)? I thought that it is something like,\n```ReverseDiff.@grad f(x,u) = f(x,u), y -&gt; (y'*dfdx,y'*dfdu) ```\nbut this isn't working. Does anyone know how to define it properly?","user":"U019PPN3H6J","ts":"1608131294.206300","team":"T68168MUP","edited":{"user":"U019PPN3H6J","ts":"1608138651.000000"},"blocks":[{"type":"rich_text","block_id":"k1M","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How can we define custom gradients (in ReverseDiff) for a function f:R^2 x R -> R^2, (x,u)->f(x,u)? I thought that it is something like,\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"ReverseDiff.@grad f(x,u) = f(x,u), y -> (y'*dfdx,y'*dfdu) "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"but this isn't working. Does anyone know how to define it properly?"}]}]}]},{"client_msg_id":"c047da2b-27c8-4eb9-9802-7d2141427426","type":"message","text":"Trying to workout a nontrivial pullback manually is really giving me a new appreciation for how powerful AD really is...","user":"UM30MT6RF","ts":"1608306817.214500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WccL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Trying to workout a nontrivial pullback manually is really giving me a new appreciation for how powerful AD really is..."}]}]}],"thread_ts":"1608306817.214500","reply_count":2,"reply_users_count":2,"latest_reply":"1608317731.217400","reply_users":["UHDQQ4GN6","UM30MT6RF"],"subscribed":false,"reactions":[{"name":"+1","users":["U67G3QRJM"],"count":1}]},{"client_msg_id":"90de930f-df24-4d08-a56a-fa40214bca46","type":"message","text":"does anyone know if something like cvxlayers is implemented in Julia convex.jl? if not is it a decent idea to autodiff through a quadratic optimization program? My problems arent particularly big (~ 5-10 constraints, ~3-10 states)","user":"U01A38DLY8N","ts":"1608307220.216300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MSrl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"does anyone know if something like cvxlayers is implemented in Julia convex.jl? if not is it a decent idea to autodiff through a quadratic optimization program? My problems arent particularly big (~ 5-10 constraints, ~3-10 states)"}]}]}],"thread_ts":"1608307220.216300","reply_count":4,"reply_users_count":3,"latest_reply":"1608365736.218000","reply_users":["UCZ7VBGUD","U01A38DLY8N","U82RE6STE"],"subscribed":false},{"client_msg_id":"b592884f-63b3-40cc-9ccd-db23a4df60d6","type":"message","text":"is documentation down for ChainRulesTestUtils? Or did the link just change?\n<https://github.com/JuliaDiff/ChainRulesTestUtils.jl>","user":"U82RE6STE","ts":"1608477247.220000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sNag","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is documentation down for ChainRulesTestUtils? Or did the link just change?\n"},{"type":"link","url":"https://github.com/JuliaDiff/ChainRulesTestUtils.jl"}]}]}],"thread_ts":"1608477247.220000","reply_count":15,"reply_users_count":2,"latest_reply":"1608481485.225500","reply_users":["U6A936746","U82RE6STE"],"subscribed":false},{"client_msg_id":"b6d563e4-ab49-47c8-9b7a-e0f3e1acf5cc","type":"message","text":"both stable and latest are not responding","user":"U82RE6STE","ts":"1608477259.220400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YTM+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"both stable and latest are not responding"}]}]}]},{"client_msg_id":"12379cef-bb92-411d-9575-94e446575fba","type":"message","text":"I couldn't find in the docs for CR, if one returns the output directly from the pullback (din = dout), should one make a copy from it or return the same array reference?","user":"U82RE6STE","ts":"1608479855.224500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vGUV=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I couldn't find in the docs for CR, if one returns the output directly from the pullback (din = dout), should one make a copy from it or return the same array reference?"}]}]}],"thread_ts":"1608479855.224500","reply_count":7,"reply_users_count":2,"latest_reply":"1608482250.227900","reply_users":["U6A936746","U82RE6STE"],"subscribed":false},{"client_msg_id":"302cadad-a444-45be-abcf-1e5e9e573f84","type":"message","text":"The rrule test got me confused:\n```rrule_test(f, ȳ, (x, x̄)...;```\nI have two arguments to my function, a first one I don't differentiate, and then a vector: f(::DummyStruct, v)\nHow should I structure the input to `rrule_test` ?","user":"U82RE6STE","ts":"1608481989.227800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IDkj/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The rrule test got me confused:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"rrule_test(f, ȳ, (x, x̄)...;"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I have two arguments to my function, a first one I don't differentiate, and then a vector: f(::DummyStruct, v)\nHow should I structure the input to "},{"type":"text","text":"rrule_test","style":{"code":true}},{"type":"text","text":" ?"}]}]}],"thread_ts":"1608481989.227800","reply_count":3,"reply_users_count":2,"latest_reply":"1608482758.228500","reply_users":["U6A936746","U82RE6STE"],"subscribed":false},{"client_msg_id":"e2df2341-0bfe-43c8-aae4-de8747fe1f86","type":"message","text":"Does ChainRulesTestUtils require structures to be `to_vec` -able in some way?","user":"U82RE6STE","ts":"1608485414.230200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZJE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does ChainRulesTestUtils require structures to be "},{"type":"text","text":"to_vec","style":{"code":true}},{"type":"text","text":" -able in some way?"}]}]}],"thread_ts":"1608485414.230200","reply_count":11,"reply_users_count":2,"latest_reply":"1608487045.232400","reply_users":["U82RE6STE","U6A936746"],"subscribed":false},{"client_msg_id":"6cb480df-85b1-44e4-b795-4c093f4fd87b","type":"message","text":"is it encouraged in ChainRules to leverage special arrays (i.e. FillArrays) for derivatives, since there will be lots of special forms? ChainRulesCore.Zero seems like a special case of this in the scalar case","user":"U82RE6STE","ts":"1608493520.233500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jyX/6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is it encouraged in ChainRules to leverage special arrays (i.e. FillArrays) for derivatives, since there will be lots of special forms? ChainRulesCore.Zero seems like a special case of this in the scalar case"}]}]}],"thread_ts":"1608493520.233500","reply_count":6,"reply_users_count":2,"latest_reply":"1608494771.235000","reply_users":["U6A936746","U82RE6STE"],"subscribed":false},{"client_msg_id":"8ee7f0ed-7d29-4186-8f1a-8f3e792feb7a","type":"message","text":"Anyone have a moment to review this\n<https://github.com/JuliaDiff/ChainRulesTestUtils.jl/pull/93>","user":"U6A936746","ts":"1608577061.235600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"akpE9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Anyone have a moment to review this\n"},{"type":"link","url":"https://github.com/JuliaDiff/ChainRulesTestUtils.jl/pull/93"}]}]}],"thread_ts":"1608577061.235600","reply_count":1,"reply_users_count":1,"latest_reply":"1608630473.236000","reply_users":["U82RE6STE"],"subscribed":false,"reactions":[{"name":"merged","users":["U6A936746","U82RE6STE"],"count":2}]},{"client_msg_id":"b0ccd216-0c20-4a07-bdab-aec921803c7d","type":"message","text":"Quick question, I've got a custom array wrapper `FlatMap` which has a single field `Ix`, and gradients w.r.t. to it seem to be dropping the wrapper, e.g.\n```julia&gt; f = FlatMap{P}(rand(2,2));\n\njulia&gt; gradient(f -&gt; sum(FlatMap{P}(@. sin(f.Ix) + 2 * f.Ix)), f)[1]\n(Ix = [2.6497571430534186 2.9998943917323846; 2.7619849095897417 2.9517184834892687],)```\neven though I did define a custom adjoint for the constructor\n```@adjoint FlatMap{P}(Ix) where {P} = FlatMap{P}(Ix), Δ-&gt;(Δ.Ix,)```\nI was under the impression that defining the custom adjoint fixes this, but is that not the case?","user":"UUMJUCYRK","ts":"1608665468.240200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MSH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Quick question, I've got a custom array wrapper "},{"type":"text","text":"FlatMap","style":{"code":true}},{"type":"text","text":" which has a single field "},{"type":"text","text":"Ix","style":{"code":true}},{"type":"text","text":", and gradients w.r.t. to it seem to be dropping the wrapper, e.g.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> f = FlatMap{P}(rand(2,2));\n\njulia> gradient(f -> sum(FlatMap{P}(@. sin(f.Ix) + 2 * f.Ix)), f)[1]\n(Ix = [2.6497571430534186 2.9998943917323846; 2.7619849095897417 2.9517184834892687],)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"even though I did define a custom adjoint for the constructor\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@adjoint FlatMap{P}(Ix) where {P} = FlatMap{P}(Ix), Δ->(Δ.Ix,)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nI was under the impression that defining the custom adjoint fixes this, but is that not the case?"}]}]}]},{"client_msg_id":"41c45f9a-dad6-4edd-9301-dc9592aae188","type":"message","text":"Here's a full MWE.\n```using Zygote: gradient, @adjoint\n\nstruct ArrayWrapper\n    arr\nend\n\nBase.sum(A::ArrayWrapper) = sum(A.arr)\n@adjoint ArrayWrapper(arr) = ArrayWrapper(arr), Δ -&gt; (Δ.arr,)\n\ngradient(A -&gt; sum(A), ArrayWrapper([1,2,3]))[1]\n# (arr = 3-element Fill{Int64}: entries equal to 1,)```\nKind of guessing this doesn't work like I think it does? Or chance of a bug?","user":"UUMJUCYRK","ts":"1608677079.241000","team":"T68168MUP","edited":{"user":"UUMJUCYRK","ts":"1608678260.000000"},"blocks":[{"type":"rich_text","block_id":"r+Z2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Here's a full MWE.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using Zygote: gradient, @adjoint\n\nstruct ArrayWrapper\n    arr\nend\n\nBase.sum(A::ArrayWrapper) = sum(A.arr)\n@adjoint ArrayWrapper(arr) = ArrayWrapper(arr), Δ -> (Δ.arr,)\n\ngradient(A -> sum(A), ArrayWrapper([1,2,3]))[1]\n# (arr = 3-element Fill{Int64}: entries equal to 1,)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Kind of guessing this doesn't work like I think it does? Or chance of a bug?"}]}]}],"thread_ts":"1608677079.241000","reply_count":8,"reply_users_count":2,"latest_reply":"1608679194.243100","reply_users":["UD0NS8PDF","UUMJUCYRK"],"subscribed":false},{"client_msg_id":"059063ad-f890-4f00-854e-d71ad776461b","type":"message","text":"Really wishing there was something like `mul!` in LinearAlgebra that respected sparsity. e.g. when writing a ChainRules `rrule` for a linear operator `A` that includes a function `y = A x`, the inplace-able pullback is `mul!(∂A, Δy, x, true, true)` , but if `A` is a sparse matrix, and its differential is represented as a sparse matrix, this will make it dense when it should be sparse. So what we need is a function like `mul_sparse!(∂A, Δy, x, true, true)`, that would keep `∂A` sparse, only computing the parts of the outer product needed to fill those sparse elements, which would also preserve the time complexity of the pullback. This would allow authors to implement functions that only assume arguments satisfy LinearAlgebra's interface for linear operators along with custom `rrule`s that preserve the time and storage complexity of the primal in the pullback. Thoughts?","user":"UHDQQ4GN6","ts":"1608702389.252200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/i8t","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Really wishing there was something like "},{"type":"text","text":"mul!","style":{"code":true}},{"type":"text","text":" in LinearAlgebra that respected sparsity. e.g. when writing a ChainRules "},{"type":"text","text":"rrule","style":{"code":true}},{"type":"text","text":" for a linear operator "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" that includes a function "},{"type":"text","text":"y = A x","style":{"code":true}},{"type":"text","text":", the inplace-able pullback is "},{"type":"text","text":"mul!(∂A, Δy, x, true, true)","style":{"code":true}},{"type":"text","text":" , but if "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" is a sparse matrix, and its differential is represented as a sparse matrix, this will make it dense when it should be sparse. So what we need is a function like "},{"type":"text","text":"mul_sparse!(∂A, Δy, x, true, true)","style":{"code":true}},{"type":"text","text":", that would keep "},{"type":"text","text":"∂A","style":{"code":true}},{"type":"text","text":" sparse, only computing the parts of the outer product needed to fill those sparse elements, which would also preserve the time complexity of the pullback. This would allow authors to implement functions that only assume arguments satisfy LinearAlgebra's interface for linear operators along with custom "},{"type":"text","text":"rrule","style":{"code":true}},{"type":"text","text":"s that preserve the time and storage complexity of the primal in the pullback. Thoughts?"}]}]}],"thread_ts":"1608702389.252200","reply_count":1,"reply_users_count":1,"latest_reply":"1608702457.252300","reply_users":["UHDQQ4GN6"],"subscribed":false},{"client_msg_id":"3f1497b8-43ad-4855-b0c8-ba44dfd6f826","type":"message","text":"Regarding thunks, I have a frule with various ways to compute the return value. Some of them are expensive (eigen-decomposing a matrix), some of them are just returning a zero-ed array.\nIs the general guideline to `@thunk` the whole conditional, to thunk the last bits computing the final y, Delta_y (which means thunking trivial things)?","user":"U82RE6STE","ts":"1608719318.255100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6zVR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Regarding thunks, I have a frule with various ways to compute the return value. Some of them are expensive (eigen-decomposing a matrix), some of them are just returning a zero-ed array.\nIs the general guideline to "},{"type":"text","text":"@thunk","style":{"code":true}},{"type":"text","text":" the whole conditional, to thunk the last bits computing the final y, Delta_y (which means thunking trivial things)?"}]}]}],"thread_ts":"1608719318.255100","reply_count":1,"reply_users_count":1,"latest_reply":"1608719829.257000","reply_users":["U6A936746"],"subscribed":false},{"client_msg_id":"0fb3cdfb-1bb4-421d-b1d3-c10c231783ee","type":"message","text":"I don't think I can accept thunking in some cases, because one would have to check whether the returned thing is a value or a thunk","user":"U82RE6STE","ts":"1608719351.255800","team":"T68168MUP","edited":{"user":"U82RE6STE","ts":"1608719359.000000"},"blocks":[{"type":"rich_text","block_id":"2U9L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't think I can accept thunking in some cases, because one would have to check whether the returned thing is a value or a thunk"}]}]}],"thread_ts":"1608719351.255800","reply_count":5,"reply_users_count":2,"latest_reply":"1608719822.256800","reply_users":["U6A936746","U82RE6STE"],"subscribed":false},{"client_msg_id":"6216b75b-447e-4af7-8507-b26d023c55ca","type":"message","text":"If I'm implementing an `rrule` in a package, and it internally calls an `rrule` defined in ChainRules, what's the recommended way to handle that? 1) assume any sane user (e.g an AD package) who calls the `rrule` will also load ChainRules 2) instead of just using ChainRulesCore, use Requires to load ChainRules. Leaning towards (1).","user":"UHDQQ4GN6","ts":"1608721456.259300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"P1F","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If I'm implementing an "},{"type":"text","text":"rrule","style":{"code":true}},{"type":"text","text":" in a package, and it internally calls an "},{"type":"text","text":"rrule","style":{"code":true}},{"type":"text","text":" defined in ChainRules, what's the recommended way to handle that? 1) assume any sane user (e.g an AD package) who calls the "},{"type":"text","text":"rrule","style":{"code":true}},{"type":"text","text":" will also load ChainRules 2) instead of just using ChainRulesCore, use Requires to load ChainRules. Leaning towards (1)."}]}]}]},{"client_msg_id":"13a1e410-be5a-4497-b1b3-f44dadeb87d1","type":"message","text":"are you working on chain rules integration for DiffOpt.jl <@U82RE6STE>?","user":"UCZ7VBGUD","ts":"1608721874.260100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"o8Q2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"are you working on chain rules integration for DiffOpt.jl "},{"type":"user","user_id":"U82RE6STE"},{"type":"text","text":"?"}]}]}]},{"client_msg_id":"3200c393-2f63-4c51-a3a3-e9ecf797a9c7","type":"message","text":"hi, ive written a control algorithm that currently uses ForwardDiff and quadratic optimization. I was wondering if there was a way to ‘export’ the controller, such that it can be called from a microcontroller like the teensy. I suppose it should be possible to just run julia on a raspberry pi too - does anyone have any advice or experience with something like this?","user":"U01A38DLY8N","ts":"1608728410.265900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d3v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hi, ive written a control algorithm that currently uses ForwardDiff and quadratic optimization. I was wondering if there was a way to ‘export’ the controller, such that it can be called from a microcontroller like the teensy. I suppose it should be possible to just run julia on a raspberry pi too - does anyone have any advice or experience with something like this?"}]}]}]},{"type":"message","text":"","user":"U82RE6STE","ts":"1608832235.269900","team":"T68168MUP","attachments":[{"fallback":"[December 24th, 2020 6:48 PM] mathieu.besancon: If interested, I just wrote about some basics of the package here:\n<http://matbesancon.github.io/post/2020-12-23-chains_sets/>\nand here\n<http://matbesancon.github.io/post/2020-12-24-chains_sets2/>","ts":"1608832137.269400","author_id":"U82RE6STE","author_subname":"Mathieu Besançon","channel_id":"C6G240ENA","channel_name":"autodiff","is_msg_unfurl":true,"is_reply_unfurl":true,"text":"If interested, I just wrote about some basics of the package here:\n<http://matbesancon.github.io/post/2020-12-23-chains_sets/>\nand here\n<http://matbesancon.github.io/post/2020-12-24-chains_sets2/>","author_name":"Mathieu Besançon","author_link":"https://julialang.slack.com/team/U82RE6STE","author_icon":"https://avatars.slack-edge.com/2018-01-24/305197567655_508578aa5910bca4b959_48.jpg","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https://julialang.slack.com/archives/C6G240ENA/p1608832137269400?thread_ts=1608721874260100&cid=C6G240ENA","is_share":true,"footer":"From a thread in #autodiff"}],"thread_ts":"1608832235.269900","reply_count":3,"reply_users_count":2,"latest_reply":"1608834075.271100","reply_users":["U6A936746","U82RE6STE"],"subscribed":false,"reactions":[{"name":"100","users":["UKLKS1WC8"],"count":1}]},{"client_msg_id":"b0eac254-de1a-4197-bc5f-a9ee7a6cf949","type":"message","text":"What if I organised a AD, minisymposium for juliacon (or even as a standalone online 1 day workshop).\nLike a proper one,\n• featuring an invited speaker from outside the community (I recon i could get one of the Dex folk to talk about “What do we really want from a general purpose language that supports AD”)\n• short talks on the status of projects. (e.g. update on ChainRules)\n• 1-2 longer talks (e.g. How to test AD. Why *is* mutating Source To Source reverse mode AD hard?) \n• A panel discussion\nSince I am not organising the juliacon program, I have an itch.","user":"U6A936746","ts":"1609170664.276100","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1609171109.000000"},"blocks":[{"type":"rich_text","block_id":"nKy/j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What if I organised a AD, minisymposium for juliacon (or even as a standalone online 1 day workshop).\nLike a proper one,\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"featuring an invited speaker from outside the community (I recon i could get one of the Dex folk to talk about “What do we really want from a general purpose language that supports AD”)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"short talks on the status of projects. (e.g. update on ChainRules)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"1-2 longer talks (e.g. How to test AD. Why "},{"type":"text","text":"is","style":{"bold":true}},{"type":"text","text":" mutating Source To Source reverse mode AD hard?) "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"A panel discussion"}]}],"style":"bullet","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"\nSince I am not organising the juliacon program, I have an itch."}]}]}],"reactions":[{"name":"+1","users":["UR75SQMCZ","U6PQP41C3","UM30MT6RF"],"count":3}]},{"client_msg_id":"054b3b8d-8b8d-482c-b5cc-deb22d1f2d66","type":"message","text":"that would be really cool","user":"U69BL50BF","ts":"1609170717.276300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"A7BN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that would be really cool"}]}]}],"reactions":[{"name":"+1","users":["U6PQP41C3"],"count":1}]},{"client_msg_id":"e2f6ebae-da32-4790-9064-25eece07bd62","type":"message","text":"People should be aware of this super cool PR <@U6PQP41C3> is working on for Zygote.\nThat massively improves performance by allowing you to disable support for working with global variables\n<https://github.com/FluxML/Zygote.jl/pull/864>","user":"U6A936746","ts":"1609175213.278700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2K8sX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"People should be aware of this super cool PR "},{"type":"user","user_id":"U6PQP41C3"},{"type":"text","text":" is working on for Zygote.\nThat massively improves performance by allowing you to disable support for working with global variables\n"},{"type":"link","url":"https://github.com/FluxML/Zygote.jl/pull/864"}]}]}],"thread_ts":"1609175213.278700","reply_count":4,"reply_users_count":1,"latest_reply":"1609175708.279500","reply_users":["UJ7DVTVQ8"],"subscribed":false},{"client_msg_id":"7522e7f0-27f4-4032-9cad-85b9f764f66d","type":"message","text":"The following gives correct gradient results while manually setting the freeze flag of a Zygote.Buffer. I don't understand why working with mutating arrays directly is not possible if this is allowed, since this code essentially just ignores the freeze flag, which is the only addition to Zygote.Buffers besides the stored array.\n```function test(a::Zygote.Buffer, x::Vector, P)\n    mysum = 0.0\n    for j in eachindex(x)\n        Zygote.@ignore(a.freeze = false)\n        for i = 1:length(a)\n            a[i] = P*j\n        end\n        mysum += sum(copy(a))*x[j]\n    end\n    return mysum\nend\n# run to see that gradient computation is in fact correct\nfunction verify()\n    a = Zygote.Buffer(zeros(10))\n    x = rand(10); dx = zeros(10); dx[3] = 0.0001\n    @show((test(a, x, 2.0001)-test(a, x, 2))/0.0001)\n    @show((test(a, x + dx, 2)-test(a, x, 2))/0.0001)\n    @show gradient(test, a, x, 2)\nend```\nsample output:\n```(test(a, x, 2.0001) - test(a, x, 2)) / 0.0001 = 324.81947221413066\n(test(a, x + dx, 2) - test(a, x, 2)) / 0.0001 = 59.99999999971806\ngradient(test, a, x, 2) = (nothing, [20.0, 40.0, 60.0, 80.0, 100.0, 120.0, 140.0, 160.0, 180.0, 200.0], 324.8194722139076)```","user":"UFCNUVC67","ts":"1609244627.284600","team":"T68168MUP","edited":{"user":"UFCNUVC67","ts":"1609245117.000000"},"blocks":[{"type":"rich_text","block_id":"M7Jm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The following gives correct gradient results while manually setting the freeze flag of a Zygote.Buffer. I don't understand why working with mutating arrays directly is not possible if this is allowed, since this code essentially just ignores the freeze flag, which is the only addition to Zygote.Buffers besides the stored array.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function test(a::Zygote.Buffer, x::Vector, P)\n    mysum = 0.0\n    for j in eachindex(x)\n        Zygote.@ignore(a.freeze = false)\n        for i = 1:length(a)\n            a[i] = P*j\n        end\n        mysum += sum(copy(a))*x[j]\n    end\n    return mysum\nend\n# run to see that gradient computation is in fact correct\nfunction verify()\n    a = Zygote.Buffer(zeros(10))\n    x = rand(10); dx = zeros(10); dx[3] = 0.0001\n    @show((test(a, x, 2.0001)-test(a, x, 2))/0.0001)\n    @show((test(a, x + dx, 2)-test(a, x, 2))/0.0001)\n    @show gradient(test, a, x, 2)\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"sample output:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"(test(a, x, 2.0001) - test(a, x, 2)) / 0.0001 = 324.81947221413066\n(test(a, x + dx, 2) - test(a, x, 2)) / 0.0001 = 59.99999999971806\ngradient(test, a, x, 2) = (nothing, [20.0, 40.0, 60.0, 80.0, 100.0, 120.0, 140.0, 160.0, 180.0, 200.0], 324.8194722139076)"}]}]}]},{"client_msg_id":"d1fe7ef4-47bd-4db1-9667-88be4593901b","type":"message","text":"Also, as far as I understand how AD works, a copy of the vector `a` has to be frozen and remembered at every iteration of the for loop in order to perform backpropagation. This explains why much more memory is needed to calculate the gradient of test than to simply evaluate test. However, it does not explain why the required more memory cannot be reused, i.e., why every gradient(test, a, x, P) call allocates new memory. Is it possible to have gradient() only allocate once and then reuse the memory, the same way `a` is only allocated once and being reused in the forward pass?\nBenchmark of test() with vectors of length 10:\n```BenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     112.493 ns (0.00% GC)\n  median time:      112.856 ns (0.00% GC)\n  mean time:        115.533 ns (0.00% GC)\n  maximum time:     626.515 ns (0.00% GC)```\nBenchmark of gradient(test) with vectors of length 10:\n```BenchmarkTools.Trial: \n  memory estimate:  83.50 KiB\n  allocs estimate:  2717\n  --------------\n  minimum time:     180.096 μs (0.00% GC)\n  median time:      186.464 μs (0.00% GC)\n  mean time:        275.296 μs (4.49% GC)\n  maximum time:     9.814 ms (93.30% GC)```","user":"UFCNUVC67","ts":"1609244996.288400","team":"T68168MUP","edited":{"user":"UFCNUVC67","ts":"1609245240.000000"},"blocks":[{"type":"rich_text","block_id":"r2b=R","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, as far as I understand how AD works, a copy of the vector "},{"type":"text","text":"a","style":{"code":true}},{"type":"text","text":" has to be frozen and remembered at every iteration of the for loop in order to perform backpropagation. This explains why much more memory is needed to calculate the gradient of test than to simply evaluate test. However, it does not explain why the required more memory cannot be reused, i.e., why every gradient(test, a, x, P) call allocates new memory. Is it possible to have gradient() only allocate once and then reuse the memory, the same way "},{"type":"text","text":"a","style":{"code":true}},{"type":"text","text":" is only allocated once and being reused in the forward pass?\nBenchmark of test() with vectors of length 10:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"BenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     112.493 ns (0.00% GC)\n  median time:      112.856 ns (0.00% GC)\n  mean time:        115.533 ns (0.00% GC)\n  maximum time:     626.515 ns (0.00% GC)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Benchmark of gradient(test) with vectors of length 10:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"BenchmarkTools.Trial: \n  memory estimate:  83.50 KiB\n  allocs estimate:  2717\n  --------------\n  minimum time:     180.096 μs (0.00% GC)\n  median time:      186.464 μs (0.00% GC)\n  mean time:        275.296 μs (4.49% GC)\n  maximum time:     9.814 ms (93.30% GC)"}]}]}]},{"type":"message","subtype":"thread_broadcast","text":"Dougal Maclaurin said he would happily be such an invited speaker for this.","user":"U6A936746","ts":"1609259271.289100","thread_ts":"1609170664.276100","root":{"client_msg_id":"b0eac254-de1a-4197-bc5f-a9ee7a6cf949","type":"message","text":"What if I organised a AD, minisymposium for juliacon (or even as a standalone online 1 day workshop).\nLike a proper one,\n• featuring an invited speaker from outside the community (I recon i could get one of the Dex folk to talk about “What do we really want from a general purpose language that supports AD”)\n• short talks on the status of projects. (e.g. update on ChainRules)\n• 1-2 longer talks (e.g. How to test AD. Why *is* mutating Source To Source reverse mode AD hard?) \n• A panel discussion\nSince I am not organising the juliacon program, I have an itch.","user":"U6A936746","ts":"1609170664.276100","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1609171109.000000"},"blocks":[{"type":"rich_text","block_id":"nKy/j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What if I organised a AD, minisymposium for juliacon (or even as a standalone online 1 day workshop).\nLike a proper one,\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"featuring an invited speaker from outside the community (I recon i could get one of the Dex folk to talk about “What do we really want from a general purpose language that supports AD”)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"short talks on the status of projects. (e.g. update on ChainRules)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"1-2 longer talks (e.g. How to test AD. Why "},{"type":"text","text":"is","style":{"bold":true}},{"type":"text","text":" mutating Source To Source reverse mode AD hard?) "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"A panel discussion"}]}],"style":"bullet","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"\nSince I am not organising the juliacon program, I have an itch."}]}]}],"thread_ts":"1609170664.276100","reply_count":1,"reply_users_count":1,"latest_reply":"1609259271.289100","reply_users":["U6A936746"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"rBz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Dougal Maclaurin said he would happily be such an invited speaker for this."}]}]}],"client_msg_id":"653fb3c0-3517-49cd-bea0-37c4fd8856b7","edited":{"user":"U6A936746","ts":"1609261011.000000"}},{"client_msg_id":"7807be95-014a-4e30-b67f-384934402926","type":"message","text":"Dougal would be great to have!","user":"U67461GUB","ts":"1609259478.289600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"86z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Dougal would be great to have!"}]}]}],"reactions":[{"name":"heavy_check_mark","users":["U6A936746"],"count":1}]},{"type":"message","subtype":"channel_topic","ts":"1609261331.289900","user":"U6A936746","text":"<@U6A936746> set the channel topic: taking automatic differentiation seriously\n\nSee also <#C01J3R4FHB3|enzyme> for Enzyme AD specifically.","topic":"taking automatic differentiation seriously\n\nSee also <#C01J3R4FHB3|enzyme> for Enzyme AD specifically."},{"client_msg_id":"8cb7eb21-b84e-45f0-82f4-80ee3d2bf9d6","type":"message","text":"Oh yeah, the discussion from <https://www.youtube.com/watch?v=uoz08EqSpmY> made me remember I wanted to share something with you <@U6A936746>","user":"U69BL50BF","ts":"1609284550.290800","team":"T68168MUP","attachments":[{"service_name":"YouTube","service_url":"https://www.youtube.com/","title":"The Stardust Podcast #7 - Christopher Rackauckas","title_link":"https://www.youtube.com/watch?v=uoz08EqSpmY","author_name":"Matteo Manzi","author_link":"https://www.youtube.com/channel/UCxkveBmMqeXPXLzFdsnA0bA","thumb_url":"https://i.ytimg.com/vi/uoz08EqSpmY/hqdefault.jpg","thumb_width":480,"thumb_height":360,"fallback":"YouTube Video: The Stardust Podcast #7 - Christopher Rackauckas","video_html":"<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/uoz08EqSpmY?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","video_html_width":400,"video_html_height":225,"from_url":"https://www.youtube.com/watch?v=uoz08EqSpmY","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png","id":1,"original_url":"https://www.youtube.com/watch?v=uoz08EqSpmY"}],"blocks":[{"type":"rich_text","block_id":"8wjW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh yeah, the discussion from "},{"type":"link","url":"https://www.youtube.com/watch?v=uoz08EqSpmY"},{"type":"text","text":" made me remember I wanted to share something with you "},{"type":"user","user_id":"U6A936746"}]}]}],"thread_ts":"1609284550.290800","reply_count":2,"reply_users_count":2,"latest_reply":"1609284613.292000","reply_users":["U6A936746","U69BL50BF"],"subscribed":false},{"client_msg_id":"b796b46d-ee65-41aa-98f2-2439b85991a3","type":"message","text":"It turns out that uncertainty quantification has very similar analogues to automatic differentiation, with pushforward methods and pullback methods with similar tradeoffs","user":"U69BL50BF","ts":"1609284602.291500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rFMM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It turns out that uncertainty quantification has very similar analogues to automatic differentiation, with pushforward methods and pullback methods with similar tradeoffs"}]}]}]},{"client_msg_id":"c4c6036d-cd6d-4680-8da3-33b0b8262c29","type":"message","text":"<https://mitmath.github.io/18337/lecture19/uncertainty_programming>","user":"U69BL50BF","ts":"1609284604.291900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"q3F","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://mitmath.github.io/18337/lecture19/uncertainty_programming"}]}]}]},{"client_msg_id":"a5c98889-e94f-4eb5-ab2b-e059d6aa6828","type":"message","text":"But basically you can phrase <https://arxiv.org/abs/2008.08737> as the reverse-mode analogue to something like MonteCarloMeasurements.jl","user":"U69BL50BF","ts":"1609284668.292600","team":"T68168MUP","attachments":[{"service_name":"arXiv.org","title":"The Koopman Expectation: An Operator Theoretic Method for...","title_link":"https://arxiv.org/abs/2008.08737","text":"For dynamical systems involving decision making, the success of the system greatly depends on its ability to make good decisions with incomplete and uncertain information. By leveraging the...","fallback":"arXiv.org: The Koopman Expectation: An Operator Theoretic Method for...","from_url":"https://arxiv.org/abs/2008.08737","service_icon":"https://static.arxiv.org/static/browse/0.3.2.6/images/icons/favicon.ico","id":1,"original_url":"https://arxiv.org/abs/2008.08737"}],"blocks":[{"type":"rich_text","block_id":"f6fIB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But basically you can phrase "},{"type":"link","url":"https://arxiv.org/abs/2008.08737"},{"type":"text","text":" as the reverse-mode analogue to something like MonteCarloMeasurements.jl"}]}]}]},{"client_msg_id":"7bba5e48-d886-4488-b055-96f96a86ce91","type":"message","text":"So I think there's (1) differentiable programming, (2) probabilistic programming, and now (3) uncertainty programming","user":"U69BL50BF","ts":"1609284696.293200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"J/f","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So I think there's (1) differentiable programming, (2) probabilistic programming, and now (3) uncertainty programming"}]}]}],"thread_ts":"1609284696.293200","reply_count":4,"reply_users_count":3,"latest_reply":"1609325547.299600","reply_users":["U6A936746","U6C937ENB","U82RE6STE"],"subscribed":false},{"client_msg_id":"5720db6f-5192-4e53-9fe0-35d714c76fda","type":"message","text":":cool: \nI will look/listen properly tomorrow.","user":"U6A936746","ts":"1609285967.295300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WJA0Q","elements":[{"type":"rich_text_section","elements":[{"type":"emoji","name":"cool"},{"type":"text","text":" \nI will look/listen properly tomorrow."}]}]}]},{"client_msg_id":"38F725D7-8B1A-4026-9EF7-51F9CAED5E4B","type":"message","text":"Measurements.jl is essentially an operator\nOverloading  AD library","user":"U8D9768Q6","ts":"1609286099.296000","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1609286149.000000"},"blocks":[{"type":"rich_text","block_id":"NJqQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Measurements.jl is essentially an operator\nOverloading  AD library"}]}]}],"thread_ts":"1609286099.296000","reply_count":1,"reply_users_count":1,"latest_reply":"1609288081.296200","reply_users":["U6A936746"],"subscribed":false,"reactions":[{"name":"today-i-learned","users":["UGU761DU2"],"count":1}]},{"client_msg_id":"09537585-d71d-424a-8c05-db1e7869b108","type":"message","text":"btw anyone here in the alpha TPU thing? I'm referring what you sign up for in the link from the neurips JAX talk.\n\nSide note would <https://github.com/JuliaTPU/XLA.jl/tree/tb/libtpu> work on those machines?","user":"U6CF3AA5Q","ts":"1609301253.297600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"U3V+H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"btw anyone here in the alpha TPU thing? I'm referring what you sign up for in the link from the neurips JAX talk.\n\nSide note would "},{"type":"link","url":"https://github.com/JuliaTPU/XLA.jl/tree/tb/libtpu"},{"type":"text","text":" work on those machines?"}]}]}],"thread_ts":"1609301253.297600","reply_count":1,"reply_users_count":1,"latest_reply":"1609301318.297700","reply_users":["U674T3KB3"],"subscribed":false},{"type":"message","subtype":"thread_broadcast","text":"Mitosis.jl implements Reverse Mode uncertainty propagation rules, so yes, there is","user":"U6C937ENB","ts":"1609316630.299300","thread_ts":"1609284696.293200","root":{"client_msg_id":"7bba5e48-d886-4488-b055-96f96a86ce91","type":"message","text":"So I think there's (1) differentiable programming, (2) probabilistic programming, and now (3) uncertainty programming","user":"U69BL50BF","ts":"1609284696.293200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"J/f","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So I think there's (1) differentiable programming, (2) probabilistic programming, and now (3) uncertainty programming"}]}]}],"thread_ts":"1609284696.293200","reply_count":4,"reply_users_count":3,"latest_reply":"1609325547.299600","reply_users":["U6A936746","U6C937ENB","U82RE6STE"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"m2/1w","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Mitosis.jl implements Reverse Mode uncertainty propagation rules, so yes, there is"}]}]}],"client_msg_id":"421AFF43-3091-4ED3-B514-413ECBF11ACF"},{"client_msg_id":"62f002b9-5d46-42ea-b05b-ace6d9199004","type":"message","text":"I am trying to find the gradient for\n`f(x::AbstractArray, a:: Float64, b:: Float64, c:: Float64) = a*x.^2 .+ b*x .+ c`\n\nI have tried with the following\n`g_fwd(x::AbstractArray, a, b, c) = ForwardDiff.gradient(f, x)`\n`g_FWD = g_fwd(X, A, B, C)`\n\nbut getting an error as follows\n`ERROR: LoadError: MethodError: no method matching f(::Array{ForwardDiff.Dual{ForwardDiff.Tag{typeof(f),Float64},Float64,5},1})`\n`Closest candidates are:`\n  `f(::AbstractArray, ::Float64, ::Float64, ::Float64) at /home/rajeshnakka/.julia/dev/RVEgen/src/scratch.jl:9`\n\nI think I am not supplying the functions arguments in right way..!\nThanks in advance.","user":"U01JJ5R8T4G","ts":"1609415173.301300","team":"T68168MUP","edited":{"user":"U01JJ5R8T4G","ts":"1609415298.000000"},"blocks":[{"type":"rich_text","block_id":"hjd9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am trying to find the gradient for\n"},{"type":"text","text":"f(x::AbstractArray, a:: Float64, b:: Float64, c:: Float64) = a*x.^2 .+ b*x .+ c","style":{"code":true}},{"type":"text","text":"\n\nI have tried with the following\n"},{"type":"text","text":"g_fwd(x::AbstractArray, a, b, c) = ForwardDiff.gradient(f, x)","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"g_FWD = g_fwd(X, A, B, C)","style":{"code":true}},{"type":"text","text":"\n\nbut getting an error as follows\n"},{"type":"text","text":"ERROR: LoadError: MethodError: no method matching f(::Array{ForwardDiff.Dual{ForwardDiff.Tag{typeof(f),Float64},Float64,5},1})","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"Closest candidates are:","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"  f(::AbstractArray, ::Float64, ::Float64, ::Float64) at /home/rajeshnakka/.julia/dev/RVEgen/src/scratch.jl:9","style":{"code":true}},{"type":"text","text":"\n\nI think I am not supplying the functions arguments in right way..!\nThanks in advance."}]}]}],"thread_ts":"1609415173.301300","reply_count":1,"reply_users_count":1,"latest_reply":"1609416133.301600","reply_users":["UD0NS8PDF"],"subscribed":false},{"client_msg_id":"9569cf85-5059-4061-af71-472a808eaaf2","type":"message","text":"Does anyone know the schedule of Diffractor.jl and when will it be released?","user":"UE6BDNM9B","ts":"1609520585.302600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QFC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does anyone know the schedule of Diffractor.jl and when will it be released?"}]}]}],"thread_ts":"1609520585.302600","reply_count":8,"reply_users_count":3,"latest_reply":"1609523193.304200","reply_users":["U6A936746","UE6BDNM9B","U69BL50BF"],"subscribed":false},{"client_msg_id":"97cc6afa-6e30-4c82-9833-d1ac2f9f5e27","type":"message","text":"<@UC4QQPG4A> honing in on the weird adjoint issues, I found a case where Zygote causes a type error in the forward pass of a method :thinking_face:","user":"U69BL50BF","ts":"1609555968.312900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dr=kV","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UC4QQPG4A"},{"type":"text","text":" honing in on the weird adjoint issues, I found a case where Zygote causes a type error in the forward pass of a method "},{"type":"emoji","name":"thinking_face"}]}]}]},{"client_msg_id":"7cf304d0-79e7-4881-9db8-6592ce93d4a8","type":"message","text":"<https://github.com/SciML/DiffEqBase.jl/pull/627>","user":"U69BL50BF","ts":"1609556153.313100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"D3OF","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/SciML/DiffEqBase.jl/pull/627"}]}]}]},{"client_msg_id":"e0c11a5e-a336-4787-b59c-6ae703cba29b","type":"message","text":"found while forcing a straight differentiation of the DiffEq code","user":"U69BL50BF","ts":"1609556164.313500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Icm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"found while forcing a straight differentiation of the DiffEq code"}]}]}]},{"client_msg_id":"d9e5d770-13a2-4d8b-b2d8-e65f86e08d65","type":"message","text":"I haven't been able to hone it down, but I think it's either the generic getindex code or how iteration is done","user":"U69BL50BF","ts":"1609556212.314200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"35Mhw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I haven't been able to hone it down, but I think it's either the generic getindex code or how iteration is done"}]}]}]},{"client_msg_id":"69e722c1-93c2-4bbd-9a9e-e01c4562e1d7","type":"message","text":"<https://github.com/FluxML/Zygote.jl/blob/master/src/lib/array.jl#L37> that's a bit suspect. The type of `dy` might not match the array's element type if it's not type-stable and not completely `Any`. For example, `Vector{Number}` . That kind of thing is most likely usually harmless but I think some of this is changing types. That's not the issue I found (because this issue I found is in the forward pass!) but that's something to think about.","user":"U69BL50BF","ts":"1609556630.316000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DNB","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/FluxML/Zygote.jl/blob/master/src/lib/array.jl#L37"},{"type":"text","text":" that's a bit suspect. The type of "},{"type":"text","text":"dy","style":{"code":true}},{"type":"text","text":" might not match the array's element type if it's not type-stable and not completely "},{"type":"text","text":"Any","style":{"code":true}},{"type":"text","text":". For example, "},{"type":"text","text":"Vector{Number}","style":{"code":true}},{"type":"text","text":" . That kind of thing is most likely usually harmless but I think some of this is changing types. That's not the issue I found (because this issue I found is in the forward pass!) but that's something to think about."}]}]}]},{"client_msg_id":"dd7f56e8-b4be-42a2-9510-862a3f836d59","type":"message","text":"but actually, this might be the cause of behavior like <https://github.com/SciML/DiffEqFlux.jl/issues/401>","user":"U69BL50BF","ts":"1609556738.316300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/mkt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but actually, this might be the cause of behavior like "},{"type":"link","url":"https://github.com/SciML/DiffEqFlux.jl/issues/401"}]}]}]},{"client_msg_id":"b4211a62-5ac7-4cb5-9dd3-d7ba48961410","type":"message","text":"If anyone has time to reply to <https://discourse.julialang.org/t/forwarddiff-and-zygote-cannot-automatically-differentiate-ad-function-from-c-n-to-r-that-uses-fft/52440/16> please do since I might not have time for about a week and I think anyone in this channel could help out. And generally having the ForwardDiff overload to FFTW would be useful.","user":"U69BL50BF","ts":"1609713127.318500","team":"T68168MUP","attachments":[{"service_name":"JuliaLang","title":"ForwardDiff and Zygote cannot automatically differentiate (AD) function from C^n to R that uses FFT","title_link":"https://discourse.julialang.org/t/forwarddiff-and-zygote-cannot-automatically-differentiate-ad-function-from-c-n-to-r-that-uses-fft/52440/16","text":"I think I understand how dual numbers work. The first dimension keeps track of the function value and the second dimension has algebra defined that works exactly like dx and the chain rule, so it keeps track of the value of the gradient. However, I’m still having trouble seeing how to implement it in practice. I think the example above might be a bit advanced for me to understand what exactly is going on as I’m still a beginner in Julia. I would really appreciate if you could show me a toy examp...","fallback":"JuliaLang: ForwardDiff and Zygote cannot automatically differentiate (AD) function from C^n to R that uses FFT","thumb_url":"https://aws1.discourse-cdn.com/business5/uploads/julialang/original/2X/1/12829a7ba92b924d4ce81099cbf99785bee9b405.png","ts":1609628204,"from_url":"https://discourse.julialang.org/t/forwarddiff-and-zygote-cannot-automatically-differentiate-ad-function-from-c-n-to-r-that-uses-fft/52440/16","thumb_width":408,"thumb_height":263,"service_icon":"https://aws1.discourse-cdn.com/business5/uploads/julialang/optimized/2X/6/6ca888e296f59ca2a599807f7d5edd489e3d1829_2_180x180.png","id":1,"original_url":"https://discourse.julialang.org/t/forwarddiff-and-zygote-cannot-automatically-differentiate-ad-function-from-c-n-to-r-that-uses-fft/52440/16"}],"blocks":[{"type":"rich_text","block_id":"YROQM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If anyone has time to reply to "},{"type":"link","url":"https://discourse.julialang.org/t/forwarddiff-and-zygote-cannot-automatically-differentiate-ad-function-from-c-n-to-r-that-uses-fft/52440/16"},{"type":"text","text":" please do since I might not have time for about a week and I think anyone in this channel could help out. And generally having the ForwardDiff overload to FFTW would be useful."}]}]}],"thread_ts":"1609713127.318500","reply_count":1,"reply_users_count":1,"latest_reply":"1609714971.318700","reply_users":["UD0NS8PDF"],"subscribed":false},{"client_msg_id":"3f8dae3b-a0e7-457f-ae2c-2ad7320f5aaf","type":"message","text":"Does anyone have a hacky way to get 2nd derivatives of just the scalar functions (e.g. `sin`) using ChainRules alone?","user":"UHDQQ4GN6","ts":"1609821472.324000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nUA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does anyone have a hacky way to get 2nd derivatives of just the scalar functions (e.g. "},{"type":"text","text":"sin","style":{"code":true}},{"type":"text","text":") using ChainRules alone?"}]}]}]},{"client_msg_id":"deb1ff99-b21e-471c-8fff-7195ba3f2f2d","type":"message","text":"No, not really.","user":"U6788D83U","ts":"1609821673.324200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"655=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No, not really."}]}]}]},{"client_msg_id":"5772850f-02d6-44e2-9fa9-932f3fcab04d","type":"message","text":"Only hacky way I can think of is building a hacky forwards mode AD.","user":"U6A936746","ts":"1609836912.328500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xIP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Only hacky way I can think of is building a hacky forwards mode AD."}]}]}]},{"client_msg_id":"bdbc3fdf-a0ab-4355-af66-6c4f94df5114","type":"message","text":"yyyeah not worth it","user":"UHDQQ4GN6","ts":"1609837652.328700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kT5Y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yyyeah not worth it"}]}]}]},{"client_msg_id":"ca085721-b553-4985-a050-597171f5cef9","type":"message","text":"ChainRules alone? No. MTK? Yes","user":"U69BL50BF","ts":"1609840250.328900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LbE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ChainRules alone? No. MTK? Yes"}]}]}]},{"client_msg_id":"f2aac476-bdd8-4307-91a1-99f3bd5f809b","type":"message","text":"```using ModelingToolkit\n@variables x\n@derivatives D'~x\nexpand_derivatives(D(D(sin(x)))) # -1 * sin(x)```","user":"U69BL50BF","ts":"1609863307.330000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gXUmK","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using ModelingToolkit\n@variables x\n@derivatives D'~x\nexpand_derivatives(D(D(sin(x)))) # -1 * sin(x)"}]}]}],"reactions":[{"name":"+1","users":["U67G3QRJM","UKG4WF8PJ","U6A936746"],"count":3}]},{"type":"message","text":"Hi fellow ADlers. I'm trying to use Zygote and ran into the following issue with `@views`. On the CPU everything is fine, however, on the GPU I get wrong gradients with Zygote. BUT, only if the view has at least two identical indices. This is illustrated in this MWE where the second entry of the gradient will be right and the first entry wrong.\n\nBefore I put this on github, is this supposed to break?","files":[{"id":"F01HVGE2VL6","created":1609886097,"timestamp":1609886097,"name":"Untitled","title":"Untitled","mimetype":"text/plain","filetype":"julia","pretty_type":"Julia","user":"ULL3KSGBS","editable":true,"size":590,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01HVGE2VL6/untitled","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01HVGE2VL6/download/untitled","permalink":"https://julialang.slack.com/files/ULL3KSGBS/F01HVGE2VL6/untitled","permalink_public":"https://slack-files.com/T68168MUP-F01HVGE2VL6-fbeac473f4","edit_link":"https://julialang.slack.com/files/ULL3KSGBS/F01HVGE2VL6/untitled/edit","preview":"using Zygote\nusing ForwardDiff\nusing Test\nusing LinearAlgebra\nusing CUDA","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text/plain',window.getSelection().toString().replace(/\\u200b/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre><span class=\"cm-keyword\">using</span> <span class=\"cm-variable\">Zygote</span></pre></div>\n<div><pre><span class=\"cm-keyword\">using</span> <span class=\"cm-variable\">ForwardDiff</span></pre></div>\n<div><pre><span class=\"cm-keyword\">using</span> <span class=\"cm-variable\">Test</span></pre></div>\n<div><pre><span class=\"cm-keyword\">using</span> <span class=\"cm-variable\">LinearAlgebra</span></pre></div>\n<div><pre><span class=\"cm-keyword\">using</span> <span class=\"cm-variable\">CUDA</span></pre></div>\n</div>\n</div>\n","lines":28,"lines_more":23,"preview_is_truncated":false,"is_starred":false,"has_rich_preview":false}],"upload":true,"blocks":[{"type":"rich_text","block_id":"hpn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi fellow ADlers. I'm trying to use Zygote and ran into the following issue with "},{"type":"text","text":"@views","style":{"code":true}},{"type":"text","text":". On the CPU everything is fine, however, on the GPU I get wrong gradients with Zygote. BUT, only if the view has at least two identical indices. This is illustrated in this MWE where the second entry of the gradient will be right and the first entry wrong.\n\nBefore I put this on github, is this supposed to break?"}]}]}],"user":"ULL3KSGBS","display_as_bot":false,"ts":"1609886098.330800","edited":{"user":"ULL3KSGBS","ts":"1609886220.000000"},"client_msg_id":"dd47756e-eda8-48d8-80ab-0344ace43d6e","thread_ts":"1609886098.330800","reply_count":4,"reply_users_count":3,"latest_reply":"1609886945.332200","reply_users":["UM30MT6RF","UD0NS8PDF","ULL3KSGBS"],"subscribed":false},{"client_msg_id":"8eeb9491-5d64-4705-929d-b1cbcbb44215","type":"message","text":"Hi people, I am currently writing some `rrules` for `DifferentialOperators` in the `DiffEqOperators` library and need some help. I have written rules for the initialization of `CenteredDifference` which is a type that wraps the `DerivativeOperator` type and returns a struct of type `DerivativeOperator`.   The `CenteredDifference` type therefore only make sure that all the stencils eg. are correct and then initializes a `DerivativeOperator`. I want to make Zygote work on the expression `du = Ax*(Q*u)` Where `Ax` is of type `DerivativeOperator` and `Q*u` is a boundary padded vector. I thought that I would only need to implement the rrule for  `*` for `DerivativeOperator` and `BoundaryPaddedVector` and not for the initialization of `DerivativeOperator`  itself, since this is taken care of by the wrapper type `CenteredDifference`, which I already have an rrule for. Non the less Zygote asks for an adjoint for `DiffEqOperators.DerivativeOperator`. Can anyone explain why this is? (sorry for the long post)","user":"U016VPPCQA1","ts":"1609934293.343100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O2t=S","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi people, I am currently writing some "},{"type":"text","text":"rrules","style":{"code":true}},{"type":"text","text":" for "},{"type":"text","text":"DifferentialOperators","style":{"code":true}},{"type":"text","text":" in the "},{"type":"text","text":"DiffEqOperators","style":{"code":true}},{"type":"text","text":" library and need some help. I have written rules for the initialization of "},{"type":"text","text":"CenteredDifference","style":{"code":true}},{"type":"text","text":" which is a type that wraps the "},{"type":"text","text":"DerivativeOperator","style":{"code":true}},{"type":"text","text":" type and returns a struct of type "},{"type":"text","text":"DerivativeOperator","style":{"code":true}},{"type":"text","text":".   The "},{"type":"text","text":"CenteredDifference","style":{"code":true}},{"type":"text","text":" type therefore only make sure that all the stencils eg. are correct and then initializes a "},{"type":"text","text":"DerivativeOperator","style":{"code":true}},{"type":"text","text":". I want to make Zygote work on the expression "},{"type":"text","text":"du = Ax*(Q*u)","style":{"code":true}},{"type":"text","text":" Where "},{"type":"text","text":"Ax","style":{"code":true}},{"type":"text","text":" is of type "},{"type":"text","text":"DerivativeOperator","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"Q*u","style":{"code":true}},{"type":"text","text":" is a boundary padded vector. I thought that I would only need to implement the rrule for  "},{"type":"text","text":"*","style":{"code":true}},{"type":"text","text":" for "},{"type":"text","text":"DerivativeOperator","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"BoundaryPaddedVector","style":{"code":true}},{"type":"text","text":" and not for the initialization of "},{"type":"text","text":"DerivativeOperator","style":{"code":true}},{"type":"text","text":"  itself, since this is taken care of by the wrapper type "},{"type":"text","text":"CenteredDifference","style":{"code":true}},{"type":"text","text":", which I already have an rrule for. Non the less Zygote asks for an adjoint for "},{"type":"text","text":"DiffEqOperators.DerivativeOperator","style":{"code":true}},{"type":"text","text":". Can anyone explain why this is? (sorry for the long post)"}]}]}]},{"client_msg_id":"6d99d877-86fd-4f7f-b078-1172692c33de","type":"message","text":"I really wish I could explain that clearly and explain how to write those.","user":"U6A936746","ts":"1609934871.344000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h8PC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I really wish I could explain that clearly and explain how to write those."}]}]}]},{"client_msg_id":"3f398910-e961-463e-8ccf-5e2aaee4b660","type":"message","text":"I think it boils down to Zygote doesn't really understand constructors well","user":"U6A936746","ts":"1609934912.345400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AhEu6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think it boils down to Zygote doesn't really understand constructors well"}]}]}]},{"client_msg_id":"7ea63067-bd66-489d-a2b0-e555b54f1a1d","type":"message","text":"You can think about it like a constructor is a change in representation but not values","user":"U69BL50BF","ts":"1609942331.348500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yl=V6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can think about it like a constructor is a change in representation but not values"}]}]}]},{"client_msg_id":"a49b3149-e728-4b24-a594-993b9c0fcf36","type":"message","text":"its a homomorphism, i.e. there's a mapping between \"arrays\" and \"coefficients of stencils\" which changes the meaning of the array, but it's really an identity function.","user":"U69BL50BF","ts":"1609942387.349600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Jw/y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"its a homomorphism, i.e. there's a mapping between \"arrays\" and \"coefficients of stencils\" which changes the meaning of the array, but it's really an identity function."}]}]}]},{"client_msg_id":"130b5750-0c74-4684-bfab-b1734a172575","type":"message","text":"So you have to put the derivative of the identity in there.","user":"U69BL50BF","ts":"1609942400.350000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bPyD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So you have to put the derivative of the identity in there."}]}]}]},{"client_msg_id":"f1dc1ded-3f2a-493d-a3c4-9ce658f102f0","type":"message","text":"Is this intentional?\n```using ForwardDiff: Dual, value\nx1 = Dual.(1:4, 2:5, 3:6)\nvalue.(float.(x1)) # Vector{Float16}\nfloat.(value.(x1)) # Vector{Float64}```","user":"UD0NS8PDF","ts":"1609963918.350500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5EK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is this intentional?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using ForwardDiff: Dual, value\nx1 = Dual.(1:4, 2:5, 3:6)\nvalue.(float.(x1)) # Vector{Float16}\nfloat.(value.(x1)) # Vector{Float64}"}]}]}],"reactions":[{"name":"wat-duck","users":["U6A936746"],"count":1},{"name":"one","users":["U6A936746"],"count":1},{"name":"six","users":["U6A936746"],"count":1}]},{"client_msg_id":"8e7533ed-d447-4eec-b07a-f35c7b531722","type":"message","text":"Yeah, that’s kind of unfortunate. When computing `float` ForwardDiff tries to promote it with `Float16` to get the coarsest float to avoid adding precision when promoting","user":"U6788D83U","ts":"1609965513.352300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9SSU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, that’s kind of unfortunate. When computing "},{"type":"text","text":"float","style":{"code":true}},{"type":"text","text":" ForwardDiff tries to promote it with "},{"type":"text","text":"Float16","style":{"code":true}},{"type":"text","text":" to get the coarsest float to avoid adding precision when promoting"}]}]}],"thread_ts":"1609965513.352300","reply_count":2,"reply_users_count":2,"latest_reply":"1609965972.353200","reply_users":["U6A936746","U6788D83U"],"subscribed":false},{"client_msg_id":"3a99865c-cce1-4eeb-8426-723eb0214387","type":"message","text":"Just calling `float(T)` is also not good, because\n```julia&gt; float(Real)\nFloat64```","user":"U6788D83U","ts":"1609965552.352800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Fi73b","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Just calling "},{"type":"text","text":"float(T)","style":{"code":true}},{"type":"text","text":" is also not good, because\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> float(Real)\nFloat64"}]}]}]},{"client_msg_id":"29832e45-c755-49af-8c79-aa4a328739d3","type":"message","text":"I can see there are arguments that  Julia should have different promotion rules. But what’s the argument that Dual numbers should disagree with ordinary ones? That just sounds like a recipe for weird bugs.","user":"UD0NS8PDF","ts":"1609967473.354600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"M/F","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I can see there are arguments that  Julia should have different promotion rules. But what’s the argument that Dual numbers should disagree with ordinary ones? That just sounds like a recipe for weird bugs."}]}]}],"reactions":[{"name":"point_up","users":["U6A936746"],"count":1}]},{"client_msg_id":"e9651ae3-7eda-4f6a-9dfc-90bab13d839c","type":"message","text":"I don’t know :stuck_out_tongue: Maybe <@U674T0Y9Z>","user":"U6788D83U","ts":"1609967501.355100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7GLik","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don’t know "},{"type":"emoji","name":"stuck_out_tongue"},{"type":"text","text":" Maybe "},{"type":"user","user_id":"U674T0Y9Z"}]}]}],"reactions":[{"name":"jarrett","users":["U6A936746"],"count":1}]},{"client_msg_id":"0954d9d2-1c3c-4af5-82fc-384ae2050d55","type":"message","text":"I saw on <https://github.com/avik-pal/RayTracer.jl> an interesting note by <@U9J14HBSR>\n&gt;  It also seems that Zygote.jl is in maintainence mode and there will be a gradual transition to Diffractor.jl\nis there a document / announcement / timeline for this somewhere ?","user":"U82RE6STE","ts":"1610028725.356300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NQmOJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I saw on "},{"type":"link","url":"https://github.com/avik-pal/RayTracer.jl"},{"type":"text","text":" an interesting note by "},{"type":"user","user_id":"U9J14HBSR"},{"type":"text","text":"\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":" It also seems that Zygote.jl is in maintainence mode and there will be a gradual transition to Diffractor.jl"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"is there a document / announcement / timeline for this somewhere ?"}]}]}],"thread_ts":"1610028725.356300","reply_count":3,"reply_users_count":2,"latest_reply":"1610029469.357700","reply_users":["U9J14HBSR","U82RE6STE"],"subscribed":false},{"client_msg_id":"9604bf18-d195-442a-8b5c-8624531720ad","type":"message","text":"seems a bit early to put Zygote in maintenance mode when Diffractor is not even out yet.","user":"U82RE6STE","ts":"1610028786.357000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BOny2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"seems a bit early to put Zygote in maintenance mode when Diffractor is not even out yet."}]}]}]},{"type":"message","text":"FYI","user":"UMY1LV01G","ts":"1610034734.358600","team":"T68168MUP","attachments":[{"fallback":"[January 1st, 2021 9:03 AM] zsz6174: Does anyone know the schedule of Diffractor.jl and when will it be released?","ts":"1609520585.302600","author_id":"UE6BDNM9B","author_subname":"zsz","channel_id":"C6G240ENA","channel_name":"autodiff","is_msg_unfurl":true,"is_thread_root_unfurl":true,"text":"Does anyone know the schedule of Diffractor.jl and when will it be released?","author_name":"zsz","author_link":"https://julialang.slack.com/team/UE6BDNM9B","author_icon":"https://secure.gravatar.com/avatar/a525dab923ddfefdfbd7d6036f09f5c1.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https://julialang.slack.com/archives/C6G240ENA/p1609520585302600?thread_ts=1609520585302600&cid=C6G240ENA","is_share":true,"footer":"Thread in #autodiff"}],"blocks":[{"type":"rich_text","block_id":"qYW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"FYI"}]}]}]},{"client_msg_id":"183fb639-438b-4d6e-907e-95dd0d699294","type":"message","text":"Yes, It is just that major new features are planned on Diffractor - but Zygote will still be where things will be for a while.","user":"U67461GUB","ts":"1610034816.360800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GFjC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, It is just that major new features are planned on Diffractor - but Zygote will still be where things will be for a while."}]}]}]},{"client_msg_id":"15cd9780-3204-47fe-973c-63dad788f9c0","type":"message","text":"Per my post in that thread, the messaging for this definitely got muddled and inadvertently jumped the gun at some point.","user":"UMY1LV01G","ts":"1610034846.360900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pDCq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Per my post in that thread, the messaging for this definitely got muddled and inadvertently jumped the gun at some point."}]}]}]},{"client_msg_id":"a1d469c6-8332-4d66-9e5d-ca7c2a79cdf8","type":"message","text":"Good evening! I get an quite intimidating stack trace when I try to retrieve the gradient with regards to some parameters in an simulated ODE using Zygote. The error originates from <https://github.com/SciML/DiffEqSensitivity.jl/blob/master/src/derivative_wrappers.jl#L296> where the `dgrad[:]` and `vec(tmp2)` have different dimensions, `628` and `630` respectively. It is a difference of 2, so I strongly suspect  that I have implemented some of the `rrules` for boundary operation wrong. Do anyone have a clear understanding of what the role of  `tmp1` and `tmp2` in this function is?","user":"U016VPPCQA1","ts":"1610234162.371500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"n17","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Good evening! I get an quite intimidating stack trace when I try to retrieve the gradient with regards to some parameters in an simulated ODE using Zygote. The error originates from "},{"type":"link","url":"https://github.com/SciML/DiffEqSensitivity.jl/blob/master/src/derivative_wrappers.jl#L296"},{"type":"text","text":" where the "},{"type":"text","text":"dgrad[:]","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"vec(tmp2)","style":{"code":true}},{"type":"text","text":" have different dimensions, "},{"type":"text","text":"628","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"630","style":{"code":true}},{"type":"text","text":" respectively. It is a difference of 2, so I strongly suspect  that I have implemented some of the "},{"type":"text","text":"rrules","style":{"code":true}},{"type":"text","text":" for boundary operation wrong. Do anyone have a clear understanding of what the role of  "},{"type":"text","text":"tmp1","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"tmp2","style":{"code":true}},{"type":"text","text":" in this function is?"}]}]}]},{"client_msg_id":"dc32ceac-3092-4415-bdd4-365ccf96cde7","type":"message","text":"Tried to follow the dispatch of `which(back, [typeof(λ)])` which leads me to the function <https://github.com/FluxML/Zygote.jl/blob/master/src/compiler/interface.jl#L38> which in my view should return a function of (y, delta). But they are arrays, `tmp1` and `tmp2`","user":"U016VPPCQA1","ts":"1610235993.374500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+Wr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Tried to follow the dispatch of "},{"type":"text","text":"which(back, [typeof(λ)])","style":{"code":true}},{"type":"text","text":" which leads me to the function "},{"type":"link","url":"https://github.com/FluxML/Zygote.jl/blob/master/src/compiler/interface.jl#L38"},{"type":"text","text":" which in my view should return a function of (y, delta). But they are arrays, "},{"type":"text","text":"tmp1","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"tmp2","style":{"code":true}}]}]}]},{"client_msg_id":"4ad31e90-28a3-44e4-bfcd-32d0c7799e1f","type":"message","text":"Is there a known rrule for the finding the largest (or smallest) `M` eigenvectors of a huge, sparse matrix of size `N`?  In particular, thinking about the spectral decomposition of a graph (i.e. using the graph Laplacian) where I might use something like a Lanczos algorithm for the forward calculation.","user":"U7Z4938R3","ts":"1610291423.378200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"T1L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a known rrule for the finding the largest (or smallest) "},{"type":"text","text":"M","style":{"code":true}},{"type":"text","text":" eigenvectors of a huge, sparse matrix of size "},{"type":"text","text":"N","style":{"code":true}},{"type":"text","text":"?  In particular, thinking about the spectral decomposition of a graph (i.e. using the graph Laplacian) where I might use something like a Lanczos algorithm for the forward calculation."}]}]}]},{"client_msg_id":"c066e8c5-3966-40a9-b132-8b6ec99a6032","type":"message","text":"Yup, it's a linear system with intermediate orthogonalziations","user":"UMDEUKM29","ts":"1610292953.378700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SMW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yup, it's a linear system with intermediate orthogonalziations"}]}]}]},{"client_msg_id":"502ea721-eb85-41d4-8cd6-d325aa3a2a6b","type":"message","text":"more precisely, if you perturb the matrix by dA, then dx = (A-lambda)^+ dA x, where ^+ is the pseudo-inverse. You can solve this by solving Q (A-lambda) Q dx = Q dA x, where Q is the projector on the orthogonal of x","user":"UMDEUKM29","ts":"1610293427.380300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uRef","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"more precisely, if you perturb the matrix by dA, then dx = (A-lambda)^+ dA x, where ^+ is the pseudo-inverse. You can solve this by solving Q (A-lambda) Q dx = Q dA x, where Q is the projector on the orthogonal of x"}]}]}]},{"client_msg_id":"11b318b4-2e79-4a5d-a66b-19413ddfebd1","type":"message","text":"if you have several eigenvectors converged, you usually don't want to solve this directly because you will spend time trying to converge the contributions from neighboring eigenvectors, but those you can compute explicitly, so you split the variation in two parts, one on the vectors you know, one on those you don't","user":"UMDEUKM29","ts":"1610293532.382200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zM25","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you have several eigenvectors converged, you usually don't want to solve this directly because you will spend time trying to converge the contributions from neighboring eigenvectors, but those you can compute explicitly, so you split the variation in two parts, one on the vectors you know, one on those you don't"}]}]}]},{"client_msg_id":"80fb4658-df91-4aab-9e89-f616a2a9698f","type":"message","text":"that's for the frule, then you just take the adjoint to get the rrule","user":"UMDEUKM29","ts":"1610293555.382600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cT5UZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's for the frule, then you just take the adjoint to get the rrule"}]}]}]},{"client_msg_id":"0789da2f-0629-4403-ba40-b202bacfe3cb","type":"message","text":"we do this here <https://github.com/JuliaMolSim/DFTK.jl/blob/master/src/postprocess/chi0.jl#L128> but it's a bit specialized to our context I'm afraid","user":"UMDEUKM29","ts":"1610293692.383000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dFI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we do this here "},{"type":"link","url":"https://github.com/JuliaMolSim/DFTK.jl/blob/master/src/postprocess/chi0.jl#L128"},{"type":"text","text":" but it's a bit specialized to our context I'm afraid"}]}]}]},{"client_msg_id":"0cc9cd8e-f7f9-4cbb-a898-df473e694e99","type":"message","text":"Gotcha.  Lets say I have a preconditioner for the `A` matrix and the `K` is a tiny fraction of the total (e.g. `K = 20`  and `N` is maybe 10 million) does this scale well?","user":"U7Z4938R3","ts":"1610293917.384200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bpr2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Gotcha.  Lets say I have a preconditioner for the "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" matrix and the "},{"type":"text","text":"K","style":{"code":true}},{"type":"text","text":" is a tiny fraction of the total (e.g. "},{"type":"text","text":"K = 20","style":{"code":true}},{"type":"text","text":"  and "},{"type":"text","text":"N","style":{"code":true}},{"type":"text","text":" is maybe 10 million) does this scale well?"}]}]}]},{"client_msg_id":"59a309b7-1f14-46bf-9f01-973cca2cec2b","type":"message","text":"it's exactly the same complexity as the computation of the eigenvectors","user":"UMDEUKM29","ts":"1610293954.384700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7Ot","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's exactly the same complexity as the computation of the eigenvectors"}]}]}]},{"client_msg_id":"c70ec6c6-a3ea-4347-8d89-12ac2b91c7dc","type":"message","text":"and you can reuse the preconditioner you use for solving the eigenproblem (that's what we do)","user":"UMDEUKM29","ts":"1610293971.385300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pFvf1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and you can reuse the preconditioner you use for solving the eigenproblem (that's what we do)"}]}]}]},{"client_msg_id":"c48258d6-77dc-4416-8708-e29ffd1e641c","type":"message","text":"Has the adjoint/ChainRules rule for a 2D (more generally n-D) array comprehension been implemented for Zygote?","user":"U01G1P8A46S","ts":"1610296464.386500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IJK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Has the adjoint/ChainRules rule for a 2D (more generally n-D) array comprehension been implemented for Zygote?"}]}]}],"thread_ts":"1610296464.386500","reply_count":1,"reply_users_count":1,"latest_reply":"1610296908.386700","reply_users":["U6A936746"],"subscribed":false},{"client_msg_id":"e2e52d45-4f94-4a73-8be7-6ca6353b0d88","type":"message","text":"So, I think I nearly have a rule sett of `rrules` that works for `Ax = DerivativeOperator(...)` used in the form `u_dot = Ax*(Q*u)` . `Ax` is an struct dependent on coefficient parameters and u is the state vector. When I compare my Zygote gradients and gradients obtained with `FiniteDifferences` I get agreeing values for the gradient with respect to `u`, but not the correct gradient with respect to `coeff_func`, which is the coefficient array of the `DerivativeOperator`, given on initialization. I have scratched my head quite some time to find the cause of the dissagreeing result, so would be super grateful if someone here would take a quick look at my adjoints :blush: This is my repo: <https://github.com/simenhu/wave_inversion/blob/dev/src/simutils/adjoints.jl>.","user":"U016VPPCQA1","ts":"1610312920.396800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PKK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So, I think I nearly have a rule sett of "},{"type":"text","text":"rrules","style":{"code":true}},{"type":"text","text":" that works for "},{"type":"text","text":"Ax = DerivativeOperator(...)","style":{"code":true}},{"type":"text","text":" used in the form "},{"type":"text","text":"u_dot = Ax*(Q*u)","style":{"code":true}},{"type":"text","text":" . "},{"type":"text","text":"Ax","style":{"code":true}},{"type":"text","text":" is an struct dependent on coefficient parameters and u is the state vector. When I compare my Zygote gradients and gradients obtained with "},{"type":"text","text":"FiniteDifferences","style":{"code":true}},{"type":"text","text":" I get agreeing values for the gradient with respect to "},{"type":"text","text":"u","style":{"code":true}},{"type":"text","text":", but not the correct gradient with respect to "},{"type":"text","text":"coeff_func","style":{"code":true}},{"type":"text","text":", which is the coefficient array of the "},{"type":"text","text":"DerivativeOperator","style":{"code":true}},{"type":"text","text":", given on initialization. I have scratched my head quite some time to find the cause of the dissagreeing result, so would be super grateful if someone here would take a quick look at my adjoints "},{"type":"emoji","name":"blush"},{"type":"text","text":" This is my repo: "},{"type":"link","url":"https://github.com/simenhu/wave_inversion/blob/dev/src/simutils/adjoints.jl"},{"type":"text","text":"."}]}]}]},{"client_msg_id":"6941f8a2-1627-4836-ae05-df900e3a7a7f","type":"message","text":"Aside: AFAICT you don’t need to load ChainRules here, just ChainRulesCore","user":"U6A936746","ts":"1610314834.400500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mIKD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Aside: AFAICT you don’t need to load ChainRules here, just ChainRulesCore"}]}]}]},{"client_msg_id":"abea9444-09d6-4af5-9138-4768223069e5","type":"message","text":"Aside2, I recommend against calling that file `adjoints.jl`\nIt A) pretty confusing to people who are not already so familar that they aren’t going to be confused anyway\nB) not really true.  It’s the adjoint of the linearisation of the function at a point.\nbecause only linear operators have adjoints — not normal functions.\n\nI suggest calling it `chainrules.jl` instead","user":"U6A936746","ts":"1610314983.402500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"86R","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Aside2, I recommend against calling that file "},{"type":"text","text":"adjoints.jl","style":{"code":true}},{"type":"text","text":"\nIt A) pretty confusing to people who are not already so familar that they aren’t going to be confused anyway\nB) not really true.  It’s the adjoint of the linearisation of the function at a point.\nbecause only linear operators have adjoints — not normal functions.\n\nI suggest calling it "},{"type":"text","text":"chainrules.jl","style":{"code":true}},{"type":"text","text":" instead"}]}]}],"reactions":[{"name":"raised_hands","users":["U016VPPCQA1"],"count":1}]},{"client_msg_id":"95ae7657-8f2f-4a95-9d86-99ff60c7b4ee","type":"message","text":"<@UHDQQ4GN6> I am starting to catch up on all the PR s made over Christmas.\nCan you remind me where we are on being able to release ChainRulesTestUtils v0.6?\nAnd on being able to use it in ChainRules.jl?\nI know it is about inferability of rules, I just have lost track of what PRs are made and what remain","user":"U6A936746","ts":"1610378942.410400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yB2H","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UHDQQ4GN6"},{"type":"text","text":" I am starting to catch up on all the PR s made over Christmas.\nCan you remind me where we are on being able to release ChainRulesTestUtils v0.6?\nAnd on being able to use it in ChainRules.jl?\nI know it is about inferability of rules, I just have lost track of what PRs are made and what remain"}]}]}]},{"client_msg_id":"1e3aea12-a4af-4b27-a392-ce03bca273f4","type":"message","text":"---\nI am always a little dubious whenever things like `U' * ΔA * U`\nshows up in a pullback,\nbecause i looks like it  violates the rule that linear operators can be written as affine expressions (in the type theory sense, of affine meaning each input is used at most once)\nIn correct rules it will either be divided out (which seems like it is just a waste of work),\nor `U` will actually not be an input but something being closed over.","user":"U6A936746","ts":"1610392036.413900","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1610392054.000000"},"blocks":[{"type":"rich_text","block_id":"/4s","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"---\nI am always a little dubious whenever things like "},{"type":"text","text":"U' * ΔA * U","style":{"code":true}},{"type":"text","text":"\nshows up in a pullback,\nbecause i looks like it  violates the rule that linear operators can be written as affine expressions (in the type theory sense, of affine meaning each input is used at most once)\nIn correct rules it will either be divided out (which seems like it is just a waste of work),\nor "},{"type":"text","text":"U","style":{"code":true}},{"type":"text","text":" will actually not be an input but something being closed over."}]}]}]},{"client_msg_id":"80a50049-c713-48db-8e03-2e7c29d09835","type":"message","text":"Will file an issue when I get a chance but for now wondering if maybe a fix to this comes easy to one of the rrule wizards here? :slightly_smiling_face:\n```julia&gt; gradient(rand(2,2)) do x\n           sum(cat(x, x, dims=Val(3)))\n       end\n\nERROR: MethodError: no method matching iterate(::Val{3})```","user":"UUMJUCYRK","ts":"1610414231.416600","team":"T68168MUP","edited":{"user":"UUMJUCYRK","ts":"1610414279.000000"},"blocks":[{"type":"rich_text","block_id":"o3T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Will file an issue when I get a chance but for now wondering if maybe a fix to this comes easy to one of the rrule wizards here? "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> gradient(rand(2,2)) do x\n           sum(cat(x, x, dims=Val(3)))\n       end\n\nERROR: MethodError: no method matching iterate(::Val{3})"}]}]}],"thread_ts":"1610414231.416600","reply_count":4,"reply_users_count":2,"latest_reply":"1610416395.417900","reply_users":["UUMJUCYRK","UHDQQ4GN6"],"subscribed":false},{"client_msg_id":"fdf02a0d-ebed-44af-a0b9-9dac093da7a5","type":"message","text":"It works without the `Val`","user":"UUMJUCYRK","ts":"1610414258.416900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4bs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It works without the "},{"type":"text","text":"Val","style":{"code":true}}]}]}]},{"client_msg_id":"c5fd8989-ad54-4c7a-baf6-bfe6ed1fd5c6","type":"message","text":"I have been considering at some point dropping Mac and Windows testing from ChainRules.jl\nto open up more time for reverse dependency  (i.e. integration) tests and maybe to segement the main tests to run in parallel.","user":"U6A936746","ts":"1610536640.425700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3Z/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have been considering at some point dropping Mac and Windows testing from ChainRules.jl\nto open up more time for reverse dependency  (i.e. integration) tests and maybe to segement the main tests to run in parallel."}]}]}]},{"client_msg_id":"baa9def3-4115-42ff-9e17-b112e2782bff","type":"message","text":"That sounds like a good idea. Would it be possible to run the mac and windows when tagging a release or something?","user":"U67461GUB","ts":"1610547316.426200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CgI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That sounds like a good idea. Would it be possible to run the mac and windows when tagging a release or something?"}]}]}],"thread_ts":"1610547316.426200","reply_count":2,"reply_users_count":1,"latest_reply":"1610548062.426500","reply_users":["U6A936746"],"subscribed":false},{"client_msg_id":"c2c411bf-9172-4d9f-a46e-43c821054703","type":"message","text":"The only things that should be doing Mac and Windows testing are packages with platform-specific code like binaries. Everyone else is just wasting time.","user":"U69BL50BF","ts":"1610548600.427200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VyJj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The only things that should be doing Mac and Windows testing are packages with platform-specific code like binaries. Everyone else is just wasting time."}]}]}]},{"client_msg_id":"33a65af2-93e5-431f-a6e4-5960827305f3","type":"message","text":"What’s going on with Zygote’s versioning at the minute? Looks like there’s been quite a lot of non-breaking commits since 0.6.0, and no 0.6.x versions tagged.","user":"U6PQP41C3","ts":"1610619384.000700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"66Tpo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What’s going on with Zygote’s versioning at the minute? Looks like there’s been quite a lot of non-breaking commits since 0.6.0, and no 0.6.x versions tagged."}]}]}]},{"type":"message","subtype":"thread_broadcast","text":"with v1.6 it should be possible to rewrite `AutoPreallocation` using AbstractInterpreter, so at the same layer of Diffractor, and avoid the performance gotchas of the current version, right?","user":"UAJH2818E","ts":"1610964968.094800","thread_ts":"1610910288.059500","root":{"client_msg_id":"dd754c14-a95b-4b58-8db7-53ec1b140c2e","type":"message","text":"I guess if the julia compiler can allow custom optimization pass enabled under a certain context, we will be able to implement a better version of `AutoPreallocation` which does not have typeinf issue. I know <@UKA81L34J> wrote a GPUCompiler style Cassette recently, perhaps this would be a good use case to try.","user":"UC6SUUPRC","ts":"1610910288.059500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g/ei","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess if the julia compiler can allow custom optimization pass enabled under a certain context, we will be able to implement a better version of "},{"type":"text","text":"AutoPreallocation","style":{"code":true}},{"type":"text","text":" which does not have typeinf issue. I know "},{"type":"user","user_id":"UKA81L34J"},{"type":"text","text":" wrote a GPUCompiler style Cassette recently, perhaps this would be a good use case to try."}]}]}],"thread_ts":"1610910288.059500","reply_count":1,"reply_users_count":1,"latest_reply":"1610964968.094800","reply_users":["UAJH2818E"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"mTcpw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"with v1.6 it should be possible to rewrite "},{"type":"text","text":"AutoPreallocation","style":{"code":true}},{"type":"text","text":" using AbstractInterpreter, so at the same layer of Diffractor, and avoid the performance gotchas of the current version, right?"}]}]}],"client_msg_id":"836281e4-2819-46bf-b6ca-d85081cc5c59","reactions":[{"name":"crossed_fingers","users":["U6PQP41C3","UKG4WF8PJ"],"count":2}]},{"client_msg_id":"179C58F2-EE30-44C3-AFAB-905C59CF9564","type":"message","text":"no I think we need at least 1.7 (whenever the custom optimization pass feature lands)","user":"UC6SUUPRC","ts":"1610989230.096100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yqPjw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no I think we need at least 1.7 (whenever the custom optimization pass feature lands)"}]}]}]},{"client_msg_id":"3ECF738D-4666-44CF-B251-7FC661BB82E6","type":"message","text":"This optimization would be much easier to be implemented on IRCode level ","user":"UC6SUUPRC","ts":"1610989281.097200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BPVng","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This optimization would be much easier to be implemented on IRCode level "}]}]}]},{"client_msg_id":"AD65B62E-BC1D-42F0-A67F-A90A319FBF89","type":"message","text":"Currently the problem is Cassette will cause type inf failure but for this particular case it won’t change the type infer results in your program so it should be put on typed IR so we avoid this issue ","user":"UC6SUUPRC","ts":"1610989396.099500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TaM3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Currently the problem is Cassette will cause type inf failure but for this particular case it won’t change the type infer results in your program so it should be put on typed IR so we avoid this issue "}]}]}]},{"client_msg_id":"d39721e7-179d-4417-8f28-c5ab49234a33","type":"message","text":"I'm trying to use ForwardDiff on a function that takes a `FieldVector` (from StaticArrays) as input but without succes. Here's a MWE:\n```using StaticArrays\nusing ForwardDiff\n\nstruct MyType{T} &lt;: FieldVector{2,T}\n    a::T\n    b::T\nend\n\nStaticArrays.similar_type(p::Type{&lt;:MyType}, ::Type{T}, size::Size{(2,)}) where T = MyType{T}\n\nf(x) = x.a * x.b\nx = MyType(1.0, 2.0)\n\nForwardDiff.jacobian(f, x) ```\nwhich gives me the error\n```julia&gt; ForwardDiff.jacobian(f, x)\nERROR: type SArray has no field a\nStacktrace:\n [1] getproperty(x::SVector{2, ForwardDiff.Dual{ForwardDiff.Tag{typeof(f), Float64}, Float64, 2}}, f::Symbol)\n   @ Base ./Base.jl:33\n [2] f(x::SVector{2, ForwardDiff.Dual{ForwardDiff.Tag{typeof(f), Float64}, Float64, 2}})\n   @ Main ./REPL[6]:1\n [3] static_dual_eval(#unused#::Type{ForwardDiff.Tag{typeof(f), Float64}}, f::typeof(f), x::MyType{Float64})\n   @ ForwardDiff ~/.julia/packages/ForwardDiff/kU1ce/src/apiutils.jl:32\n [4] vector_mode_jacobian(f::Function, x::MyType{Float64})\n   @ ForwardDiff ~/.julia/packages/ForwardDiff/kU1ce/src/jacobian.jl:181\n [5] jacobian(f::Function, x::MyType{Float64})\n   @ ForwardDiff ~/.julia/packages/ForwardDiff/kU1ce/src/jacobian.jl:85\n [6] top-level scope\n   @ REPL[8]:1```\nAfter searching around a bit I noticed there is a open pull request to add FieldVector support to ForwardDiff but it is three years old already. I tried to follow the discussion in that pull request but it is outside my area of expertise. Anyone here who maybe knows how to get the MWE working (without replacing the `x.a` by `x[1]` and `x.b` by `x[2]` because that would beat the purpose of using FieldVectors)?","user":"UCT34GL7M","ts":"1611170789.105900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NEmT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm trying to use ForwardDiff on a function that takes a "},{"type":"text","text":"FieldVector","style":{"code":true}},{"type":"text","text":" (from StaticArrays) as input but without succes. Here's a MWE:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using StaticArrays\nusing ForwardDiff\n\nstruct MyType{T} <: FieldVector{2,T}\n    a::T\n    b::T\nend\n\nStaticArrays.similar_type(p::Type{<:MyType}, ::Type{T}, size::Size{(2,)}) where T = MyType{T}\n\nf(x) = x.a * x.b\nx = MyType(1.0, 2.0)\n\nForwardDiff.jacobian(f, x) "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"which gives me the error\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> ForwardDiff.jacobian(f, x)\nERROR: type SArray has no field a\nStacktrace:\n [1] getproperty(x::SVector{2, ForwardDiff.Dual{ForwardDiff.Tag{typeof(f), Float64}, Float64, 2}}, f::Symbol)\n   @ Base ./Base.jl:33\n [2] f(x::SVector{2, ForwardDiff.Dual{ForwardDiff.Tag{typeof(f), Float64}, Float64, 2}})\n   @ Main ./REPL[6]:1\n [3] static_dual_eval(#unused#::Type{ForwardDiff.Tag{typeof(f), Float64}}, f::typeof(f), x::MyType{Float64})\n   @ ForwardDiff ~/.julia/packages/ForwardDiff/kU1ce/src/apiutils.jl:32\n [4] vector_mode_jacobian(f::Function, x::MyType{Float64})\n   @ ForwardDiff ~/.julia/packages/ForwardDiff/kU1ce/src/jacobian.jl:181\n [5] jacobian(f::Function, x::MyType{Float64})\n   @ ForwardDiff ~/.julia/packages/ForwardDiff/kU1ce/src/jacobian.jl:85\n [6] top-level scope\n   @ REPL[8]:1"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"After searching around a bit I noticed there is a open pull request to add FieldVector support to ForwardDiff but it is three years old already. I tried to follow the discussion in that pull request but it is outside my area of expertise. Anyone here who maybe knows how to get the MWE working (without replacing the "},{"type":"text","text":"x.a","style":{"code":true}},{"type":"text","text":" by "},{"type":"text","text":"x[1]","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"x.b","style":{"code":true}},{"type":"text","text":" by "},{"type":"text","text":"x[2]","style":{"code":true}},{"type":"text","text":" because that would beat the purpose of using FieldVectors)?"}]}]}],"thread_ts":"1611170789.105900","reply_count":6,"reply_users_count":3,"latest_reply":"1611233159.006700","reply_users":["UD0NS8PDF","U9AHT3YM7","UCT34GL7M"],"subscribed":false},{"client_msg_id":"ebf25898-0952-4225-8c18-18f616ddbe52","type":"message","text":"What are the current implementations of forward mode with ChainRules?","user":"UKG4WF8PJ","ts":"1611175458.107200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"o3U3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What are the current implementations of forward mode with ChainRules?"}]}]}],"thread_ts":"1611175458.107200","reply_count":3,"reply_users_count":2,"latest_reply":"1611175924.107800","reply_users":["U6A936746","U67G3QRJM"],"subscribed":false},{"client_msg_id":"c7fd90be-75ef-4e20-92ac-536fd78d7216","type":"message","text":"I was thinking about differential types and the formalism behind. Is the intuition correct that thinking of differential types means giving up on the vector space semantics for the primal type, in the sense that:\n```+(x::P, dx::D) -&gt; P```\naddition does not have to be defined on the primal space, just like scaling does not have to be defined on the primal space, but the differential space has to be a vector space, and we have this `+`  operation taking two elements of different types, P and D and returning a P","user":"U82RE6STE","ts":"1611222848.003200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s7o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I was thinking about differential types and the formalism behind. Is the intuition correct that thinking of differential types means giving up on the vector space semantics for the primal type, in the sense that:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"+(x::P, dx::D) -> P"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"addition does not have to be defined on the primal space, just like scaling does not have to be defined on the primal space, but the differential space has to be a vector space, and we have this "},{"type":"text","text":"+","style":{"code":true}},{"type":"text","text":"  operation taking two elements of different types, P and D and returning a P"}]}]}],"thread_ts":"1611222848.003200","reply_count":32,"reply_users_count":5,"latest_reply":"1611248032.012300","reply_users":["U6A936746","U82RE6STE","U0160CXEY3Z","UD0NS8PDF","U674T3KB3"],"subscribed":false},{"client_msg_id":"84054a66-7332-4134-83f8-63da8ae3ecf7","type":"message","text":"I guess I was stuck in thinking in vector spaces but the relation between primal and differential types does not fit this framework. If there are good resources which could replace this feel free to point to them","user":"U82RE6STE","ts":"1611222928.004700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R5D","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess I was stuck in thinking in vector spaces but the relation between primal and differential types does not fit this framework. If there are good resources which could replace this feel free to point to them"}]}]}]},{"client_msg_id":"b4ec5ae4-8384-4180-a00b-7208067d43a8","type":"message","text":"What's an easy way to compute a Hessian of a generic function, which possibly uses a lot of LinearAlgebra?","user":"U7YD3DKL2","ts":"1611242075.011000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/lcy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What's an easy way to compute a Hessian of a generic function, which possibly uses a lot of LinearAlgebra?"}]}]}],"thread_ts":"1611242075.011000","reply_count":5,"reply_users_count":2,"latest_reply":"1611698262.050200","reply_users":["U01A38DLY8N","U7YD3DKL2"],"subscribed":false},{"client_msg_id":"e5d342d6-bd9b-4e31-bba2-5e31ba878807","type":"message","text":"I have written explanatory design docs for ChainRules that explain why `rrule` returns a closure, and why it lets you redefine how the primal is computed.\nThe PR is here:\n<https://github.com/JuliaDiff/ChainRulesCore.jl/pull/282>\n\nand you can look and the rendered preview here:\n<https://www.juliadiff.org/ChainRulesCore.jl/previews/PR282/design/changing_the_primal.html>\nFeedback would be appreciated","user":"U6A936746","ts":"1611354261.012900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DuvZd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have written explanatory design docs for ChainRules that explain why `rrule` returns a closure, and why it lets you redefine how the primal is computed.\nThe PR is here:\n"},{"type":"link","url":"https://github.com/JuliaDiff/ChainRulesCore.jl/pull/282"},{"type":"text","text":"\n\nand you can look and the rendered preview here:\n"},{"type":"link","url":"https://www.juliadiff.org/ChainRulesCore.jl/previews/PR282/design/changing_the_primal.html"},{"type":"text","text":"\nFeedback would be appreciated"}]}]}],"thread_ts":"1611354261.012900","reply_count":1,"reply_users_count":1,"latest_reply":"1611355409.014100","reply_users":["U6A936746"],"subscribed":false,"reactions":[{"name":"heart","users":["UH8A351DJ","UKG4WF8PJ","U017AJ68PFZ"],"count":3}]},{"client_msg_id":"6834bfc2-ec7d-4193-af3c-0f36a8a119d8","type":"message","text":"In my treatment I think it comes out naturally:\n\n<https://mitmath.github.io/18337/lecture10/estimation_identification>\n\nbecause the pullback is a function of the pushforward variables and it's not computed until later. There's really only a few sensible ways to compute that.","user":"U69BL50BF","ts":"1611354426.013800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YLv3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In my treatment I think it comes out naturally:\n\n"},{"type":"link","url":"https://mitmath.github.io/18337/lecture10/estimation_identification"},{"type":"text","text":"\n\nbecause the pullback is a function of the pushforward variables and it's not computed until later. There's really only a few sensible ways to compute that."}]}]}],"thread_ts":"1611354426.013800","reply_count":1,"reply_users_count":1,"latest_reply":"1611355196.013900","reply_users":["U6A936746"],"subscribed":false},{"client_msg_id":"887533a0-84a3-4d8f-b178-e77730f0e540","type":"message","text":"<https://twitter.com/dancherp/status/1353024050138914817>","user":"UDGT4PM41","ts":"1611444854.015000","team":"T68168MUP","attachments":[{"fallback":"<https://twitter.com/dancherp|@dancherp>: \"What types work with differentiation?\" :thinking_face:\n\nI condensed my learnings into an answer — featuring some type theory and differential geometry: <https://github.com/google-research/dex-lang/issues/454#issuecomment-766089519> <https://pbs.twimg.com/media/EsbnjKXW4AMYESS.jpg>","ts":1611421046,"author_name":"Dan Zheng","author_link":"https://twitter.com/dancherp/status/1353024050138914817","author_icon":"https://pbs.twimg.com/profile_images/1010414789351260160/dzAHJvda_normal.jpg","author_subname":"@dancherp","text":"\"What types work with differentiation?\" :thinking_face:\n\nI condensed my learnings into an answer — featuring some type theory and differential geometry: <https://github.com/google-research/dex-lang/issues/454#issuecomment-766089519> <https://pbs.twimg.com/media/EsbnjKXW4AMYESS.jpg>","service_name":"twitter","service_url":"https://twitter.com/","from_url":"https://twitter.com/dancherp/status/1353024050138914817","image_url":"https://pbs.twimg.com/media/EsbnjKXW4AMYESS.jpg","image_width":256,"image_height":1200,"image_bytes":57438,"id":1,"original_url":"https://twitter.com/dancherp/status/1353024050138914817","footer":"Twitter","footer_icon":"https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"}],"blocks":[{"type":"rich_text","block_id":"8KOV","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://twitter.com/dancherp/status/1353024050138914817"}]}]}],"thread_ts":"1611444854.015000","reply_count":1,"reply_users_count":1,"latest_reply":"1611450407.015200","reply_users":["UM6JW2SF9"],"subscribed":false},{"type":"message","subtype":"thread_broadcast","text":"Cool thread! On the footnote on optimal matrix accumulation order in O(n^3) I thought of \"Optimal Jacobian accumulation is NP-complete\". If I understood correctly the simpler matrix chain problem assumes that the factors don't have any internal structure / are just dense - i.e. a contrast to AD?","user":"UM6JW2SF9","ts":"1611450407.015200","thread_ts":"1611444854.015000","root":{"client_msg_id":"887533a0-84a3-4d8f-b178-e77730f0e540","type":"message","text":"<https://twitter.com/dancherp/status/1353024050138914817>","user":"UDGT4PM41","ts":"1611444854.015000","team":"T68168MUP","attachments":[{"fallback":"<https://twitter.com/dancherp|@dancherp>: \"What types work with differentiation?\" :thinking_face:\n\nI condensed my learnings into an answer — featuring some type theory and differential geometry: <https://github.com/google-research/dex-lang/issues/454#issuecomment-766089519> <https://pbs.twimg.com/media/EsbnjKXW4AMYESS.jpg>","ts":1611421046,"author_name":"Dan Zheng","author_link":"https://twitter.com/dancherp/status/1353024050138914817","author_icon":"https://pbs.twimg.com/profile_images/1010414789351260160/dzAHJvda_normal.jpg","author_subname":"@dancherp","text":"\"What types work with differentiation?\" :thinking_face:\n\nI condensed my learnings into an answer — featuring some type theory and differential geometry: <https://github.com/google-research/dex-lang/issues/454#issuecomment-766089519> <https://pbs.twimg.com/media/EsbnjKXW4AMYESS.jpg>","service_name":"twitter","service_url":"https://twitter.com/","from_url":"https://twitter.com/dancherp/status/1353024050138914817","image_url":"https://pbs.twimg.com/media/EsbnjKXW4AMYESS.jpg","image_width":256,"image_height":1200,"image_bytes":57438,"id":1,"original_url":"https://twitter.com/dancherp/status/1353024050138914817","footer":"Twitter","footer_icon":"https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"}],"blocks":[{"type":"rich_text","block_id":"8KOV","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://twitter.com/dancherp/status/1353024050138914817"}]}]}],"thread_ts":"1611444854.015000","reply_count":1,"reply_users_count":1,"latest_reply":"1611450407.015200","reply_users":["UM6JW2SF9"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"sEdH4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Cool thread! On the footnote on optimal matrix accumulation order in O(n^3) I thought of \"Optimal Jacobian accumulation is NP-complete\". If I understood correctly the simpler matrix chain problem assumes that the factors don't have any internal structure / are just dense - i.e. a contrast to AD?"}]}]}],"client_msg_id":"16a016f5-b16d-44e2-b9f3-ca5ee859d834"},{"client_msg_id":"ce041ade-ea42-45fb-ba55-4f57de512364","type":"message","text":"Hi all, <https://www.juliadiff.org/seems> a little outdated, is there a better starting point to learn about AD in Julia?","user":"U6CCK2SCV","ts":"1611476441.016300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d/K","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi all, "},{"type":"link","url":"https://www.juliadiff.org/seems"},{"type":"text","text":" a little outdated, is there a better starting point to learn about AD in Julia?"}]}]}],"thread_ts":"1611476441.016300","reply_count":2,"reply_users_count":2,"latest_reply":"1611480653.016700","reply_users":["UDXST8ARK","UD0NS8PDF"],"subscribed":false},{"client_msg_id":"1c1ba35a-61da-4bde-bdd1-93df3542b7df","type":"message","text":"Does anyone know if anyone has looked at making (Zygote-)differentiable Julia code callable from within JAX?","user":"U6PQP41C3","ts":"1611573699.018300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ysTi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does anyone know if anyone has looked at making (Zygote-)differentiable Julia code callable from within JAX?"}]}]}],"thread_ts":"1611573699.018300","reply_count":4,"reply_users_count":4,"latest_reply":"1611589600.024500","reply_users":["U6A936746","U90JR0C80","UFMH09DAR","U6PQP41C3"],"subscribed":false,"reactions":[{"name":"eyes","users":["U01A08JMUKT","UHDQQ4GN6","ULA52A5B5","UM6JW2SF9"],"count":4},{"name":"+1","users":["U6A936746"],"count":1}]},{"client_msg_id":"e15fa6df-711e-42a1-9b63-4c50ce2f9b1a","type":"message","text":"I’ve been trying to use Zygote to differentiate a function that is Real -&gt; Real, but uses complex numbers internally. Sometimes Zygote returns a complex gradient, while other times, it doesn’t, and I can’t figure out why. Any ideas? Ideally, it never should, IMO.\n\nMWE:\n```julia&gt; using Zygote\njulia&gt; f(θ) = abs(cis(θ) + cis(2θ));\njulia&gt; f(0.1)     # real -&gt; real\n1.9975005207899326\njulia&gt; f'(0.1)    # returns real gradient, as it should\n-0.049979169270678386\njulia&gt; f1(x) = 2 * abs(x + 1im * 2x);\njulia&gt; f1(2.0)   # real -&gt; real\n8.94427190999916\njulia&gt; f1'(2.0)  # returns complex gradient\n4.47213595499958 + 0.0im```","user":"U017AJ68PFZ","ts":"1611583598.021700","team":"T68168MUP","edited":{"user":"U017AJ68PFZ","ts":"1611583615.000000"},"blocks":[{"type":"rich_text","block_id":"pNN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’ve been trying to use Zygote to differentiate a function that is Real -> Real, but uses complex numbers internally. Sometimes Zygote returns a complex gradient, while other times, it doesn’t, and I can’t figure out why. Any ideas? Ideally, it never should, IMO.\n\nMWE:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using Zygote\njulia> f(θ) = abs(cis(θ) + cis(2θ));\njulia> f(0.1)     # real -> real\n1.9975005207899326\njulia> f'(0.1)    # returns real gradient, as it should\n-0.049979169270678386\njulia> f1(x) = 2 * abs(x + 1im * 2x);\njulia> f1(2.0)   # real -> real\n8.94427190999916\njulia> f1'(2.0)  # returns complex gradient\n4.47213595499958 + 0.0im"}]}]}],"thread_ts":"1611583598.021700","reply_count":8,"reply_users_count":4,"latest_reply":"1611636244.026800","reply_users":["U6A936746","U017AJ68PFZ","UHDQQ4GN6","UD0NS8PDF"],"subscribed":false},{"client_msg_id":"352b6d27-e6ee-4573-8c4a-0091024b430e","type":"message","text":"Hi, I’m trying to implement an `AbstractMatrix` -like structure with a slightly modified definition for matrix multiplication. Having it declared like a subtype of `AbstractMatrix` is convenient, because it can be for example used in `Flux.Dense` .  During implementation, I ran into several problems, which I could solve, but now I found an obstacle which I can’t get around. So I was wondering is `Flux` + `Zygote` + `ChainRules` suitable for `AbstractArray` subtypes or is there some fundamental problem why this is not recommended?","user":"U7XHKP15W","ts":"1611655943.031600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JvtW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi, I’m trying to implement an "},{"type":"text","text":"AbstractMatrix","style":{"code":true}},{"type":"text","text":" -like structure with a slightly modified definition for matrix multiplication. Having it declared like a subtype of "},{"type":"text","text":"AbstractMatrix","style":{"code":true}},{"type":"text","text":" is convenient, because it can be for example used in "},{"type":"text","text":"Flux.Dense","style":{"code":true}},{"type":"text","text":" .  During implementation, I ran into several problems, which I could solve, but now I found an obstacle which I can’t get around. So I was wondering is "},{"type":"text","text":"Flux","style":{"code":true}},{"type":"text","text":" + "},{"type":"text","text":"Zygote","style":{"code":true}},{"type":"text","text":" + "},{"type":"text","text":"ChainRules","style":{"code":true}},{"type":"text","text":" suitable for "},{"type":"text","text":"AbstractArray","style":{"code":true}},{"type":"text","text":" subtypes or is there some fundamental problem why this is not recommended?"}]}]}],"thread_ts":"1611655943.031600","reply_count":11,"reply_users_count":3,"latest_reply":"1611672418.042400","reply_users":["U7XHKP15W","UD0NS8PDF","U6A936746"],"subscribed":false},{"client_msg_id":"663268d4-3a88-48e5-bac7-b0c6881c623c","type":"message","text":"Dear AD-lovers,\nI am *looking for a good reference* explaining the relation between\n• (backward) AD, and \n• solving the adjoint of a given ODE or PDE;\nespecially in the context where one is interested in *computing the gradient of an ODE/PDE-constrained cost functional*. To what extent is it *possible to solve the adjoint equation ‘automatically’?*\n\nAlso, where could one find some introductory *numerical examples*, and fast (Julia) libraries for this?\n\nWould you have any suggestions?\nThank you!","user":"U01HC60USTH","ts":"1611657947.034400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5UcW6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Dear AD-lovers,\nI am "},{"type":"text","text":"looking for a good reference","style":{"bold":true}},{"type":"text","text":" explaining the relation between\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(backward) AD, and "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"solving the adjoint of a given ODE or PDE;"}]}],"style":"bullet","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"especially in the context where one is interested in "},{"type":"text","text":"computing the gradient of an ODE/PDE-constrained cost functional","style":{"bold":true}},{"type":"text","text":". To what extent is it "},{"type":"text","text":"possible to solve the adjoint equation ‘automatically’?","style":{"bold":true}},{"type":"text","text":"\n\nAlso, where could one find some introductory "},{"type":"text","text":"numerical examples","style":{"bold":true}},{"type":"text","text":", and fast (Julia) libraries for this?\n\nWould you have any suggestions?\nThank you!"}]}]}],"thread_ts":"1611657947.034400","reply_count":17,"reply_users_count":5,"latest_reply":"1611684528.045100","reply_users":["U6A936746","UMDEUKM29","U69BL50BF","U6P4UPP9D","U67G3QRJM"],"subscribed":false},{"client_msg_id":"5e1c8183-d2b3-4e37-8995-62d94773f134","type":"message","text":"<@UHDQQ4GN6> re:\nAD’ing though `sin`  (without a custom rule) will\n&gt;  … will incur something that looks a lot like truncation error (in apparent violation of Griewank and Walther’s 0th Rule of AD).\nIt is because lets say `sin` is implemented as a polynomial with 7 terms (plus some branches etc).\nIt’s derivative will be a polynomial with only 6 terms.\nWhich sure does look (at least superficially) like truncation error.\nThe function one gets out of ADing the `sin` implementation is less accurate than `cos` (which would in this example be a 7 term polynomial)\n\nGriewank and Walther’s 0th Rule of AD is “AD does not incur truncation errors”","user":"U6A936746","ts":"1611670816.041000","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1611670833.000000"},"blocks":[{"type":"rich_text","block_id":"5k4","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UHDQQ4GN6"},{"type":"text","text":" re:\nAD’ing though "},{"type":"text","text":"sin","style":{"code":true}},{"type":"text","text":"  (without a custom rule) will\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":" … will incur something that looks a lot like truncation error (in apparent violation of Griewank and Walther’s 0th Rule of AD)."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nIt is because lets say "},{"type":"text","text":"sin","style":{"code":true}},{"type":"text","text":" is implemented as a polynomial with 7 terms (plus some branches etc).\nIt’s derivative will be a polynomial with only 6 terms.\nWhich sure does look (at least superficially) like truncation error.\nThe function one gets out of ADing the "},{"type":"text","text":"sin","style":{"code":true}},{"type":"text","text":" implementation is less accurate than "},{"type":"text","text":"cos","style":{"code":true}},{"type":"text","text":" (which would in this example be a 7 term polynomial)\n\nGriewank and Walther’s 0th Rule of AD is “AD does not incur truncation errors”"}]}]}],"thread_ts":"1611670816.041000","reply_count":1,"reply_users_count":1,"latest_reply":"1611671660.042100","reply_users":["UM30MT6RF"],"subscribed":false,"reactions":[{"name":"+1","users":["U67G3QRJM","UKG4WF8PJ"],"count":2}]},{"client_msg_id":"063530dd-fe49-40ee-984a-7d8bd633c6e4","type":"message","text":"It’s a fun party trick to do that in Julia though. :slightly_smiling_face:","user":"U67461GUB","ts":"1611671032.041500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MJTk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It’s a fun party trick to do that in Julia though. "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1611671032.041500","reply_count":2,"reply_users_count":2,"latest_reply":"1611676398.042600","reply_users":["U6A936746","U6PQP41C3"],"subscribed":false,"reactions":[{"name":"heavy_check_mark","users":["U6A936746","U67G3QRJM"],"count":2}]},{"type":"message","subtype":"thread_broadcast","text":"I have been reading about this a lot lately. It is quite an interesting interwined story, it goes something roughly like this AFAICT.\n\nThe first numerical studies of cost functional ODEs actually proposed for the first time what we call backpropagation (look at The Numerical Solution of Variational Problems, Dreyfus 1962).\n\nYann LeCun derives backpropagation as a consequence of variational calculus and constraints between layers of a NN (A theoretical framework for back-propagation, LeCun 1988) and notes that it is equivalent to what was called multistage systems by the founders of applied control (Applied Optimal Control, Bryson &amp; Ho 1969).\n\nThen AD comes as a modern and general implementation of the extended ideas by Werbos 1974 but in some cases analogous to the discretization of such optimal control problems, as Griewank points out in his book and the article above.","user":"U6P4UPP9D","ts":"1611679103.043200","thread_ts":"1611657947.034400","root":{"client_msg_id":"663268d4-3a88-48e5-bac7-b0c6881c623c","type":"message","text":"Dear AD-lovers,\nI am *looking for a good reference* explaining the relation between\n• (backward) AD, and \n• solving the adjoint of a given ODE or PDE;\nespecially in the context where one is interested in *computing the gradient of an ODE/PDE-constrained cost functional*. To what extent is it *possible to solve the adjoint equation ‘automatically’?*\n\nAlso, where could one find some introductory *numerical examples*, and fast (Julia) libraries for this?\n\nWould you have any suggestions?\nThank you!","user":"U01HC60USTH","ts":"1611657947.034400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5UcW6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Dear AD-lovers,\nI am "},{"type":"text","text":"looking for a good reference","style":{"bold":true}},{"type":"text","text":" explaining the relation between\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(backward) AD, and "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"solving the adjoint of a given ODE or PDE;"}]}],"style":"bullet","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"especially in the context where one is interested in "},{"type":"text","text":"computing the gradient of an ODE/PDE-constrained cost functional","style":{"bold":true}},{"type":"text","text":". To what extent is it "},{"type":"text","text":"possible to solve the adjoint equation ‘automatically’?","style":{"bold":true}},{"type":"text","text":"\n\nAlso, where could one find some introductory "},{"type":"text","text":"numerical examples","style":{"bold":true}},{"type":"text","text":", and fast (Julia) libraries for this?\n\nWould you have any suggestions?\nThank you!"}]}]}],"thread_ts":"1611657947.034400","reply_count":17,"reply_users_count":5,"latest_reply":"1611684528.045100","reply_users":["U6A936746","UMDEUKM29","U69BL50BF","U6P4UPP9D","U67G3QRJM"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"=M==u","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have been reading about this a lot lately. It is quite an interesting interwined story, it goes something roughly like this AFAICT.\n\nThe first numerical studies of cost functional ODEs actually proposed for the first time what we call backpropagation (look at The Numerical Solution of Variational Problems, Dreyfus 1962).\n\nYann LeCun derives backpropagation as a consequence of variational calculus and constraints between layers of a NN (A theoretical framework for back-propagation, LeCun 1988) and notes that it is equivalent to what was called multistage systems by the founders of applied control (Applied Optimal Control, Bryson & Ho 1969).\n\nThen AD comes as a modern and general implementation of the extended ideas by Werbos 1974 but in some cases analogous to the discretization of such optimal control problems, as Griewank points out in his book and the article above."}]}]}],"client_msg_id":"2e93b924-2371-46d0-9f3b-c015a036c7c9"},{"client_msg_id":"f9f2c0dc-7ddc-4108-8491-eb8c1e8c587f","type":"message","text":"More fun :chainrules:  docs.\nTalks about how and why to use `add!!` and `InplaceableThunks`\n<https://github.com/JuliaDiff/ChainRulesCore.jl/pull/287>\nFeedback would be appreciated","user":"U6A936746","ts":"1611687160.047300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x+8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"More fun "},{"type":"emoji","name":"chainrules"},{"type":"text","text":"  docs.\nTalks about how and why to use "},{"type":"text","text":"add!!","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"InplaceableThunks","style":{"code":true}},{"type":"text","text":"\n"},{"type":"link","url":"https://github.com/JuliaDiff/ChainRulesCore.jl/pull/287"},{"type":"text","text":"\nFeedback would be appreciated"}]}]}]},{"client_msg_id":"ce6f2d30-af13-490e-9d1b-06e43b827c3c","type":"message","text":"Is there a reason why `ForwardDiff` with `StaticArrays` and `IntervalArithmetic` would suddenly have become so slow that it doesn’t finish calculating a 6x6 Jacobian in the amount of time I’m willing to wait? Here’s a MWE. The calculation just hangs. However, simple functions like `f(x) = 2.x` work fine","user":"U67G3QRJM","ts":"1611698052.048900","team":"T68168MUP","edited":{"user":"U67G3QRJM","ts":"1611698091.000000"},"blocks":[{"type":"rich_text","block_id":"Vuu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a reason why "},{"type":"text","text":"ForwardDiff","style":{"code":true}},{"type":"text","text":" with "},{"type":"text","text":"StaticArrays","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"IntervalArithmetic","style":{"code":true}},{"type":"text","text":" would suddenly have become so slow that it doesn’t finish calculating a 6x6 Jacobian in the amount of time I’m willing to wait? Here’s a MWE. The calculation just hangs. However, simple functions like "},{"type":"text","text":"f(x) = 2.x","style":{"code":true}},{"type":"text","text":" work fine"}]}]}]},{"type":"message","text":"","files":[{"id":"F01KYLF70RY","created":1611698064,"timestamp":1611698064,"name":"Untitled","title":"Untitled","mimetype":"text/plain","filetype":"text","pretty_type":"Plain Text","user":"U67G3QRJM","editable":true,"size":766,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01KYLF70RY/untitled","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01KYLF70RY/download/untitled","permalink":"https://julialang.slack.com/files/U67G3QRJM/F01KYLF70RY/untitled","permalink_public":"https://slack-files.com/T68168MUP-F01KYLF70RY-ca9726334d","edit_link":"https://julialang.slack.com/files/U67G3QRJM/F01KYLF70RY/untitled/edit","preview":"using IntervalArithmetic\nusing StaticArrays\nusing BenchmarkTools\nusing ForwardDiff\n","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text/plain',window.getSelection().toString().replace(/\\u200b/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>using IntervalArithmetic</pre></div>\n<div><pre>using StaticArrays</pre></div>\n<div><pre>using BenchmarkTools</pre></div>\n<div><pre>using ForwardDiff</pre></div>\n<div><pre></pre></div>\n</div>\n</div>\n","lines":24,"lines_more":19,"preview_is_truncated":false,"is_starred":false,"has_rich_preview":false}],"upload":true,"user":"U67G3QRJM","display_as_bot":false,"ts":"1611698065.049000","client_msg_id":"caa88838-2e12-4008-b4ff-1caac368898f"},{"client_msg_id":"c9b9930b-94a2-4bde-bfe1-b56579916872","type":"message","text":"How would I debug what’s going on here?","user":"U67G3QRJM","ts":"1611698100.049500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZbkYs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How would I debug what’s going on here?"}]}]}],"thread_ts":"1611698100.049500","reply_count":3,"reply_users_count":2,"latest_reply":"1611726657.051400","reply_users":["UJ7DVTVQ8","U67G3QRJM"],"subscribed":false},{"client_msg_id":"db5f5a4b-60e2-4938-9c4a-869998addc9b","type":"message","text":"This is suppposed to Just Work…","user":"U67G3QRJM","ts":"1611698162.049700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Iph","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is suppposed to Just Work…"}]}]}]},{"client_msg_id":"153cd6fd-eef7-435d-ba90-52370c64cbd4","type":"message","text":"Hmmm, even a simple function like `f(x) = 2 .* x .* x` takes a long time to compile though (8 seconds, 2GiB of allocations!)","user":"U67G3QRJM","ts":"1611698285.050700","team":"T68168MUP","edited":{"user":"U67G3QRJM","ts":"1611698417.000000"},"blocks":[{"type":"rich_text","block_id":"yeo1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmmm, even a simple function like "},{"type":"text","text":"f(x) = 2 .* x .* x","style":{"code":true}},{"type":"text","text":" takes a long time to compile though (8 seconds, 2GiB of allocations!)"}]}]}]},{"client_msg_id":"a939e681-c5c2-4bbb-aa42-5cd716da5a1a","type":"message","text":"Hi all,\n\nis there anything which would fundamentally prevent to calculate second order gradients with Zygote with custom gradients defined with ChainRulesCore? I had once (month ago) a working system with @adjoint, but I would like to change it to ChainRules, to be in line with community.","user":"U6YRZ18GZ","ts":"1611776359.053400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Lx4MF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi all,\n\nis there anything which would fundamentally prevent to calculate second order gradients with Zygote with custom gradients defined with ChainRulesCore? I had once (month ago) a working system with @adjoint, but I would like to change it to ChainRules, to be in line with community."}]}]}],"thread_ts":"1611776359.053400","reply_count":6,"reply_users_count":3,"latest_reply":"1611776694.054500","reply_users":["UHDQQ4GN6","U6A936746","U6YRZ18GZ"],"subscribed":false},{"client_msg_id":"f3b6a53a-4882-4287-842b-ce2b4d253cbb","type":"message","text":"Hi All,\n\none more question. I am modifying logitcrossentropy and softmax to support second order gradients, as I am interested with structured prediction with NNs. Should I keep this changes private, or try to put them somewehere, possibly NNlib.","user":"U6YRZ18GZ","ts":"1611821681.056600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Hqr0a","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi All,\n\none more question. I am modifying logitcrossentropy and softmax to support second order gradients, as I am interested with structured prediction with NNs. Should I keep this changes private, or try to put them somewehere, possibly NNlib."}]}]}]}]}