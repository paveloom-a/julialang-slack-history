{"cursor": 3, "messages": [{"client_msg_id":"b4ff10d3-b670-4f39-98cc-be7baa04d4cc","type":"message","text":"I read the following in the docs:\n&gt; *ForwardDiff* is algorithmically more efficient for differentiating functions where the input dimension is less than the output dimension, while *ReverseDiff* is algorithmically more efficient for differentiating functions where the output dimension is less than the input dimension.","user":"UGTUKUHLN","ts":"1613997737.014100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZgF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I read the following in the docs:\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"ForwardDiff","style":{"bold":true}},{"type":"text","text":" is algorithmically more efficient for differentiating functions where the input dimension is less than the output dimension, while "},{"type":"text","text":"ReverseDiff","style":{"bold":true}},{"type":"text","text":" is algorithmically more efficient for differentiating functions where the output dimension is less than the input dimension."}]}]}]},{"client_msg_id":"038900f6-4344-4116-b027-de514ec58685","type":"message","text":"So for gradients it would naturally make sense to use reversediff","user":"UGTUKUHLN","ts":"1613997755.014600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ICU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So for gradients it would naturally make sense to use reversediff"}]}]}]},{"client_msg_id":"861cbcdd-ac27-4207-aab2-8ae0b0349901","type":"message","text":"But they are somehow different enough that one works and the other doesn't, for exact same function","user":"UGTUKUHLN","ts":"1613997791.015200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3zur","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But they are somehow different enough that one works and the other doesn't, for exact same function"}]}]}]},{"client_msg_id":"d6f808bc-825e-43d4-a4d1-b03cd31733d4","type":"message","text":"Yes, they work in very different ways. Reverse diff is generally more complex, since you need to build up a tape, either explicitely along with tracked variables or directly in the IR, as is the case for Zygote, and then do a backwards pass to get the gradient. Forward diff is just a fairly straightforward single pass.","user":"UM30MT6RF","ts":"1613998214.019200","team":"T68168MUP","edited":{"user":"UM30MT6RF","ts":"1613998428.000000"},"blocks":[{"type":"rich_text","block_id":"E4J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, they work in very different ways. Reverse diff is generally more complex, since you need to build up a tape, either explicitely along with tracked variables or directly in the IR, as is the case for Zygote, and then do a backwards pass to get the gradient. Forward diff is just a fairly straightforward single pass."}]}]}]},{"client_msg_id":"35e852c2-b53f-4e39-a416-e58d71ec3f4e","type":"message","text":"There are a few reason e.g. Zygote can fail. A fairly common one is that it doesn't work with code that is mutating or that contains a `ccall`, in these cases you typically need to write a custom adjoint.","user":"UM30MT6RF","ts":"1613998390.022300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KNXFi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There are a few reason e.g. Zygote can fail. A fairly common one is that it doesn't work with code that is mutating or that contains a "},{"type":"text","text":"ccall","style":{"code":true}},{"type":"text","text":", in these cases you typically need to write a custom adjoint."}]}]}]},{"client_msg_id":"9ac39849-bc4b-4938-87af-834f3cd7ceff","type":"message","text":"Actually I mixed up a bit - ReverseDiff worked for me, but only without CompiledTape. And was very slow, ~50 times slower than ForwardDiff.","user":"UGTUKUHLN","ts":"1613998508.023700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GowUq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Actually I mixed up a bit - ReverseDiff worked for me, but only without CompiledTape. And was very slow, ~50 times slower than ForwardDiff."}]}]}]},{"client_msg_id":"eab797b2-e4f3-474b-8597-47a1e67dc84e","type":"message","text":"<@UM30MT6RF> but I assume there are cases when it is better to use ReverseDiff, right? Despite it being more complex.","user":"UGTUKUHLN","ts":"1613998601.024600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QcnF","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UM30MT6RF"},{"type":"text","text":" but I assume there are cases when it is better to use ReverseDiff, right? Despite it being more complex."}]}]}],"thread_ts":"1613998601.024600","reply_count":1,"reply_users_count":1,"latest_reply":"1613998720.027200","reply_users":["UM30MT6RF"],"subscribed":false},{"client_msg_id":"551e6be2-8c6d-45e2-ae1c-2b3a0ef100be","type":"message","text":"How many parameters?","user":"U6A936746","ts":"1613998657.024900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ShG+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How many parameters?"}]}]}]},{"client_msg_id":"82861b22-8794-4175-8439-186f939925a6","type":"message","text":"say 10, or 20","user":"UGTUKUHLN","ts":"1613998668.025400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dndE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"say 10, or 20"}]}]}]},{"client_msg_id":"187be9a1-de39-4ca1-ae28-041bd540fe8f","type":"message","text":"you need hundreds at least.","user":"U69BL50BF","ts":"1613998674.025800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"F8vN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you need hundreds at least."}]}]}]},{"client_msg_id":"4c0df628-3677-4f2d-a781-3fa7d5b3240b","type":"message","text":"Yeah use ForwardDiff","user":"U6A936746","ts":"1613998679.026000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Opr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah use ForwardDiff"}]}]}]},{"client_msg_id":"37444d6e-7162-4410-98ed-b6819a81c95a","type":"message","text":"ah, so ReverseDiff is for stuff like neural nets, and not for common analytical models?","user":"UGTUKUHLN","ts":"1613998743.028400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lF+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah, so ReverseDiff is for stuff like neural nets, and not for common analytical models?"}]}]}],"thread_ts":"1613998743.028400","reply_count":1,"reply_users_count":1,"latest_reply":"1613998845.031000","reply_users":["U6A936746"],"subscribed":false,"reactions":[{"name":"heavy_check_mark","users":["U6A936746"],"count":1}]},{"client_msg_id":"85151dd8-bb23-486a-a52a-bd4fc916db56","type":"message","text":"Reverse is faster than Forwards when number of parameters is much larger (at least 5x larger, often like 200x larger) than number of outputs.\nBecause there is a lot of overhead in reverse mode having to setup and manage the tape.\nWhich generally also means allocating and storing memory","user":"U6A936746","ts":"1613998773.029500","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1613998801.000000"},"blocks":[{"type":"rich_text","block_id":"gTSm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Reverse is faster than Forwards when number of parameters is much larger (at least 5x larger, often like 200x larger) than number of outputs.\nBecause there is a lot of overhead in reverse mode having to setup and manage the tape.\nWhich generally also means allocating and storing memory"}]}]}]},{"client_msg_id":"b37ac587-1ac2-4e7b-9233-1ffeb0382de4","type":"message","text":"I see, that's way above the scales I need now...","user":"UGTUKUHLN","ts":"1613998838.030800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"v=P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see, that's way above the scales I need now..."}]}]}]},{"client_msg_id":"1fb7d17e-0500-44c2-90cd-00ca73d1229d","type":"message","text":"And what about Zygote?","user":"UGTUKUHLN","ts":"1613998845.031200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C6bFw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And what about Zygote?"}]}]}]},{"client_msg_id":"a753c6cd-d8b8-4569-b858-7bf2ea8e3a64","type":"message","text":"Zygote is also reverse mode, so same applies","user":"U6A936746","ts":"1613998875.031900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"D9g3n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Zygote is also reverse mode, so same applies"}]}]}]},{"client_msg_id":"7b623a89-dc65-400f-b6ee-cd1a121c3bf3","type":"message","text":"Thanks!\nBtw, I'm very impressed by how easy it is to compute a gradient in julia. My model was written without even thinking about that, but ForwardDiff just works!","user":"UGTUKUHLN","ts":"1613998995.036000","team":"T68168MUP","edited":{"user":"UGTUKUHLN","ts":"1613999094.000000"},"blocks":[{"type":"rich_text","block_id":"Ksi/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks!\nBtw, I'm very impressed by how easy it is to compute a gradient in julia. My model was written without even thinking about that, but ForwardDiff just works!"}]}]}]},{"client_msg_id":"991a5357-e03f-40f4-9b9d-7ae9c4dd16b1","type":"message","text":"In theory, Zygote's approach is supposed to solve this problem, but in practice it puts a lot of strain on the compiler and often interferes with inference, so there is typically some overhead. This is something a next-gen AD should be a lot better at though.","user":"UM30MT6RF","ts":"1613999195.039000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3zsW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In theory, Zygote's approach is supposed to solve this problem, but in practice it puts a lot of strain on the compiler and often interferes with inference, so there is typically some overhead. This is something a next-gen AD should be a lot better at though."}]}]}]},{"client_msg_id":"87c41310-84d7-4ef8-8abe-148e78f750f1","type":"message","text":"It already looks like half-magic :)","user":"UGTUKUHLN","ts":"1613999292.039300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/Van","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It already looks like half-magic :)"}]}]}],"reactions":[{"name":"party_wizard","users":["UM30MT6RF"],"count":1}]},{"client_msg_id":"495869a3-5be6-47cb-9904-7961cac68103","type":"message","text":"I mean from a user's point of view","user":"UGTUKUHLN","ts":"1613999321.039600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Inb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean from a user's point of view"}]}]}]},{"client_msg_id":"7e3fbed6-af40-4afa-a4cc-c97dc3411b11","type":"message","text":"Probably I shoudl read more on autodiff at some point... Turns out what I thought AD is in general, is just forward mode.","user":"UGTUKUHLN","ts":"1613999589.041000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p5jHX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Probably I shoudl read more on autodiff at some point... Turns out what I thought AD is in general, is just forward mode."}]}]}],"thread_ts":"1613999589.041000","reply_count":2,"reply_users_count":1,"latest_reply":"1614000295.043200","reply_users":["U6A936746"],"subscribed":false},{"client_msg_id":"3316613f-1365-403a-8d11-64355397420b","type":"message","text":"One more question: does the number of parameters refer to the input dimension only, or to intermediates as well? E.g. suppose that f(x::Real)::Real computes a large matrix somewhere inside: should one use reverse diff then?","user":"UGTUKUHLN","ts":"1614000662.044900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=IU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"One more question: does the number of parameters refer to the input dimension only, or to intermediates as well? E.g. suppose that f(x::Real)::Real computes a large matrix somewhere inside: should one use reverse diff then?"}]}]}],"thread_ts":"1614000662.044900","reply_count":3,"reply_users_count":2,"latest_reply":"1614001005.045400","reply_users":["U6A936746","UGTUKUHLN"],"subscribed":false},{"type":"message","subtype":"thread_broadcast","text":"I found this nice short overview video on the differences between Forward Mode and Reverse Mode and the mechanics of it. I found it really understandable for me as a beginner and even went into what Lyndon was saying with advantages of Reverse Mode when the number of input variables (the ones you want to take a derivative with respect to) is large and the video mentioned how backprop is a special case of reverse mode\n\nWhat is Automatic Differentiation? by Ari Seff\n<https://youtu.be/wG_nF1awSSY|https://youtu.be/wG_nF1awSSY>","user":"U0138UTB7A4","ts":"1614019371.047500","thread_ts":"1613999589.041000","root":{"client_msg_id":"7e3fbed6-af40-4afa-a4cc-c97dc3411b11","type":"message","text":"Probably I shoudl read more on autodiff at some point... Turns out what I thought AD is in general, is just forward mode.","user":"UGTUKUHLN","ts":"1613999589.041000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p5jHX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Probably I shoudl read more on autodiff at some point... Turns out what I thought AD is in general, is just forward mode."}]}]}],"thread_ts":"1613999589.041000","reply_count":7,"reply_users_count":3,"latest_reply":"1614019371.047500","reply_users":["U6A936746","U01C3624SGJ","U0138UTB7A4"],"subscribed":false},"attachments":[{"service_name":"YouTube","service_url":"https://www.youtube.com/","title":"What is Automatic Differentiation?","title_link":"https://youtu.be/wG_nF1awSSY","author_name":"Ari Seff","author_link":"https://www.youtube.com/channel/UCIxertsVDip8QHpnhinkAow","thumb_url":"https://i.ytimg.com/vi/wG_nF1awSSY/hqdefault.jpg","thumb_width":480,"thumb_height":360,"fallback":"YouTube Video: What is Automatic Differentiation?","video_html":"<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/wG_nF1awSSY?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","video_html_width":400,"video_html_height":225,"from_url":"https://youtu.be/wG_nF1awSSY","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png","id":1,"original_url":"https://youtu.be/wG_nF1awSSY"}],"blocks":[{"type":"rich_text","block_id":"=waZ2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I found this nice short overview video on the differences between Forward Mode and Reverse Mode and the mechanics of it. I found it really understandable for me as a beginner and even went into what Lyndon was saying with advantages of Reverse Mode when the number of input variables (the ones you want to take a derivative with respect to) is large and the video mentioned how backprop is a special case of reverse mode\n\nWhat is Automatic Differentiation? by Ari Seff\n"},{"type":"link","url":"https://youtu.be/wG_nF1awSSY","text":"https://youtu.be/wG_nF1awSSY"}]}]}],"client_msg_id":"8b104e6c-9873-419e-a8ed-ee7938467c0b","edited":{"user":"U0138UTB7A4","ts":"1614019707.000000"}},{"client_msg_id":"133ef9d3-94f2-4b40-9bd2-adacc02a4d02","type":"message","text":"Guys, I use CodeTracking in my code, and I want to simplify:\nI have:\n```res = @code_expr myfn()\nres !== nothing ? res : Meta.parse(@code_string myfn())```\nI want to have it in one line:\n`@code_expr_easy myfn()`\nSo I defined this:\n```macro code_expr_easy(ex)\n  esc(quote\n    res = @code_expr $ex\n    res !== nothing ? res : Meta.parse(@code_string $ex)\n  end)\nend```\n```What works in files where using CodeTracking is used, but in other cases I get the error @code_expr not defined```\nUndefVarError: @code_expr not defined\n\nSo I changed @code_expr to $@code_expr but it is not working.\nSo the question is, how to interpolate macro into a macro?","user":"U016RL8KEHX","ts":"1614030355.053500","team":"T68168MUP","edited":{"user":"U016RL8KEHX","ts":"1614030456.000000"},"blocks":[{"type":"rich_text","block_id":"8Gb=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Guys, I use CodeTracking in my code, and I want to simplify:\nI have:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"res = @code_expr myfn()\nres !== nothing ? res : Meta.parse(@code_string myfn())"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I want to have it in one line:\n"},{"type":"text","text":"@code_expr_easy myfn()","style":{"code":true}},{"type":"text","text":"\nSo I defined this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"macro code_expr_easy(ex)\n  esc(quote\n    res = @code_expr $ex\n    res !== nothing ? res : Meta.parse(@code_string $ex)\n  end)\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"What works in files where using CodeTracking is used, but in other cases I get the error @code_expr not defined"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"UndefVarError: @code_expr not defined\n\nSo I changed @code_expr to $@code_expr but it is not working.\nSo the question is, how to interpolate macro into a macro?"}]}]}],"thread_ts":"1614030355.053500","reply_count":3,"reply_users_count":2,"latest_reply":"1614031360.054500","reply_users":["U6A936746","U016RL8KEHX"],"subscribed":false},{"client_msg_id":"996cd9e0-bfc2-443a-83da-bf02b0d9c0c2","type":"message","text":"`getproperty` in `Zygote@0.6`: how much work has been put into optimising it? IIRC there was a bug fix between 0.5 and 0.6, which is great, but I’m now getting type-stability issues whenever I write `my_struct.a_field` . Are we confident that this is the price of correctness until we have some compiler upgrades, or is it worth me trying to figure out if there is the opportunity to improve our current implementation so that we can have type stability?","user":"U6PQP41C3","ts":"1614077815.058900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VdcBO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"getproperty","style":{"code":true}},{"type":"text","text":" in "},{"type":"text","text":"Zygote@0.6","style":{"code":true}},{"type":"text","text":": how much work has been put into optimising it? IIRC there was a bug fix between 0.5 and 0.6, which is great, but I’m now getting type-stability issues whenever I write "},{"type":"text","text":"my_struct.a_field","style":{"code":true}},{"type":"text","text":" . Are we confident that this is the price of correctness until we have some compiler upgrades, or is it worth me trying to figure out if there is the opportunity to improve our current implementation so that we can have type stability?"}]}]}],"thread_ts":"1614077815.058900","reply_count":3,"reply_users_count":2,"latest_reply":"1614078315.059400","reply_users":["U6A936746","UM30MT6RF"],"subscribed":false},{"client_msg_id":"fed4b0a9-8d2b-4374-8aa5-e32bd8d4935a","type":"message","text":"Btw in this blog: <https://www.juliabloggers.com/automatic-differentiation-does-incur-truncation-errors-kinda/>\nI think the 6 different API for the autograd libs is to not get confused which one someone uses in their codes.","user":"U016RL8KEHX","ts":"1614079707.060700","team":"T68168MUP","edited":{"user":"U016RL8KEHX","ts":"1614079732.000000"},"blocks":[{"type":"rich_text","block_id":"x=UJI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Btw in this blog: "},{"type":"link","url":"https://www.juliabloggers.com/automatic-differentiation-does-incur-truncation-errors-kinda/"},{"type":"text","text":"\nI think the 6 different API for the autograd libs is to not get confused which one someone uses in their codes."}]}]}]},{"client_msg_id":"385a1618-5855-410e-a723-8e06c1c60dc9","type":"message","text":"Any workaround for the following issue?\n```julia&gt; using Zygote, Flux\njulia&gt; X = randn(5); Y = randn(5);\njulia&gt; ps = Flux.params(X,Y);\njulia&gt; gs = gradient(ps) do\n       sum([sin(x*y) for x in X, y in Y])\n       end```\n&gt; ERROR: Need an adjoint for constructor Base.Iterators.ProductIterator{Tuple{Array{Float64,1},Array{Float64,1}}}. Gradient is of type Array{Tuple{Float64,Float64},2}","user":"U7YD3DKL2","ts":"1614091216.062700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BBSFh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Any workaround for the following issue?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using Zygote, Flux\njulia> X = randn(5); Y = randn(5);\njulia> ps = Flux.params(X,Y);\njulia> gs = gradient(ps) do\n       sum([sin(x*y) for x in X, y in Y])\n       end"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"ERROR: Need an adjoint for constructor Base.Iterators.ProductIterator{Tuple{Array{Float64,1},Array{Float64,1}}}. Gradient is of type Array{Tuple{Float64,Float64},2}"}]}]}]},{"client_msg_id":"5f31ec7e-dfba-4274-835e-9bceb45f9405","type":"message","text":"Why does this work\n```julia&gt; f2(x) = sum(SMatrix{2,2,Float64,4}(x,x^2,√x,sin(x)))\njulia&gt; Zygote.gradient(f2,3.3)  # (6.887761171372725,)```\nwhen this fails?\n```julia&gt; function f3(x)::SMatrix{2,2,Float64,4}\n           [ x x^2; √x sin(x) ]\n       end\njulia&gt; Zygote.gradient(x-&gt;sum(f3(x)),3.3)  #  ERROR: Need an adjoint for constructor SMatrix{2, 2, Float64, 4}. Gradient is of type FillArrays.Fill{...```\nIt seems like function defs with return-type specifications cause Zygote missing-constructor-adjoint errors even when the constructor `rrule` is defined, but I could be misunderstanding something more basic. In my case, before the code above I have defined `rrule`s for `SMatrix` construction like this\n```julia&gt; ChainRulesCore.rrule(T::Type{&lt;:SMatrix}, x::AbstractMatrix) = ( T(x), dv -&gt; (nothing, dv) )\njulia&gt; ChainRulesCore.rrule(T::Type{&lt;:SMatrix}, xs::Number...) = ( T(xs...), dv -&gt; (nothing, dv...) )\njulia&gt; ChainRules.refresh_rules()\njulia&gt; Zygote.refresh()```\nSorry, probably a dumb question. Any advice or workaround would be much appreciated! Some of the functions causing this error for me are in imported packages, so I'm hoping to avoid this without redefining them.","user":"U01HK5WRVJT","ts":"1614104611.078100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DgBpT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Why does this work\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> f2(x) = sum(SMatrix{2,2,Float64,4}(x,x^2,√x,sin(x)))\njulia> Zygote.gradient(f2,3.3)  # (6.887761171372725,)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"when this fails?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function f3(x)::SMatrix{2,2,Float64,4}\n           [ x x^2; √x sin(x) ]\n       end\njulia> Zygote.gradient(x->sum(f3(x)),3.3)  #  ERROR: Need an adjoint for constructor SMatrix{2, 2, Float64, 4}. Gradient is of type FillArrays.Fill{..."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"It seems like function defs with return-type specifications cause Zygote missing-constructor-adjoint errors even when the constructor "},{"type":"text","text":"rrule","style":{"code":true}},{"type":"text","text":" is defined, but I could be misunderstanding something more basic. In my case, before the code above I have defined "},{"type":"text","text":"rrule","style":{"code":true}},{"type":"text","text":"s for "},{"type":"text","text":"SMatrix","style":{"code":true}},{"type":"text","text":" construction like this\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> ChainRulesCore.rrule(T::Type{<:SMatrix}, x::AbstractMatrix) = ( T(x), dv -> (nothing, dv) )\njulia> ChainRulesCore.rrule(T::Type{<:SMatrix}, xs::Number...) = ( T(xs...), dv -> (nothing, dv...) )\njulia> ChainRules.refresh_rules()\njulia> Zygote.refresh()"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Sorry, probably a dumb question. Any advice or workaround would be much appreciated! Some of the functions causing this error for me are in imported packages, so I'm hoping to avoid this without redefining them."}]}]}],"thread_ts":"1614104611.078100","reply_count":9,"reply_users_count":2,"latest_reply":"1614107503.080200","reply_users":["U6A936746","U01HK5WRVJT"],"subscribed":false},{"client_msg_id":"1929b266-aa1e-41db-ac44-3fc4fbaec7f6","type":"message","text":"Is this (below) an accurate view of one of the the differences with Julia's autodiff ecosystem and Python's autodiff frameworks?\n\nIt seems to me likes long as your code is written in normal Julia code, the Julia autodiff packages will probably work(?) at doing the autodiff in ways you want! Which leads to things like being able to backprop through other Julia packages like powerful differential equation solvers. \n\nWhereas in Python, with Tensorflow and Pytorch, you have to build the computational graph using the objects made for that purpose with knowing in mind in advance that you want to autodiff.\n\nIf anyone has some some other significant differences, feel free to suggest! I would love to look into them","user":"U0138UTB7A4","ts":"1614178341.085700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"v3=Rt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is this (below) an accurate view of one of the the differences with Julia's autodiff ecosystem and Python's autodiff frameworks?\n\nIt seems to me likes long as your code is written in normal Julia code, the Julia autodiff packages will probably work(?) at doing the autodiff in ways you want! Which leads to things like being able to backprop through other Julia packages like powerful differential equation solvers. \n\nWhereas in Python, with Tensorflow and Pytorch, you have to build the computational graph using the objects made for that purpose with knowing in mind in advance that you want to autodiff.\n\nIf anyone has some some other significant differences, feel free to suggest! I would love to look into them"}]}]}],"thread_ts":"1614178341.085700","reply_count":2,"reply_users_count":1,"latest_reply":"1614178816.086100","reply_users":["U6A936746"],"subscribed":false},{"client_msg_id":"75c29e1a-21f6-49d6-9ec4-e21005dde50f","type":"message","text":"Hey folks. I was just trying to understand what it means to make a library \"differentiable.\" Like is there a template for what a differentiable library looks like or how one is implemented. I need to write a differentiable solver for a linear program. Linear programs are not usually differentiable, but I can apply some smoothing to make it differentiable. But I am not sure how to implement this in a library so that I can connect it back to Flux or something. Any guidance would be appreciated.","user":"UDDSTBX19","ts":"1614188557.089700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VlAK5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hey folks. I was just trying to understand what it means to make a library \"differentiable.\" Like is there a template for what a differentiable library looks like or how one is implemented. I need to write a differentiable solver for a linear program. Linear programs are not usually differentiable, but I can apply some smoothing to make it differentiable. But I am not sure how to implement this in a library so that I can connect it back to Flux or something. Any guidance would be appreciated."}]}]}],"thread_ts":"1614188557.089700","reply_count":15,"reply_users_count":6,"latest_reply":"1614189597.094000","reply_users":["ULG5V164A","UDDSTBX19","U67G3QRJM","U6A936746","U82RE6STE","UCZ7VBGUD"],"subscribed":false},{"client_msg_id":"28b63518-d467-4cf7-8c0f-8f59e1a5e6e2","type":"message","text":"Hello everyone, I am cross-posting here from my <https://discourse.julialang.org/t/how-to-achieve-good-performance-with-zygote-pushforward-on-a-neural-network/55971|thread on discourse>.\nI am trying to use the function Zygote.pushforward on a neural network:\n```using Flux\nusing Statistics\n\nconst X = reshape(0:1f-1:10, 1, :)\nconst Y = sin.(X)\n\nm = Chain(\n    Dense(1, 10, tanh),\n    Dense(10, 10, tanh),\n    Dense(10, 10, tanh),\n    Dense(10, 1),\n)\n\nscalar_m(x) = first(m([x]))\nscalar_m′(x) = Flux.pushforward(scalar_m, x)(1)\nm′(X) = scalar_m′.(X)\n\nloss(X, Y) = Flux.mse(m(X), Y) + mean(abs2.(cos.(X) - m′(X)))\n\nopt = ADAM()\ncb() = @show loss(X, Y)\n@time Flux.@epochs 1000 Flux.train!(loss, params(m), [(X, Y)], opt; cb)```\nFor some reason, computing the derivative of the neural network using the finite difference method is many times faster. Anybody knows why?","user":"U01KF7VFJB1","ts":"1614237744.108900","team":"T68168MUP","edited":{"user":"U01KF7VFJB1","ts":"1614237832.000000"},"blocks":[{"type":"rich_text","block_id":"iat1n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hello everyone, I am cross-posting here from my "},{"type":"link","url":"https://discourse.julialang.org/t/how-to-achieve-good-performance-with-zygote-pushforward-on-a-neural-network/55971","text":"thread on discourse"},{"type":"text","text":".\nI am trying to use the function Zygote.pushforward on a neural network:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using Flux\nusing Statistics\n\nconst X = reshape(0:1f-1:10, 1, :)\nconst Y = sin.(X)\n\nm = Chain(\n    Dense(1, 10, tanh),\n    Dense(10, 10, tanh),\n    Dense(10, 10, tanh),\n    Dense(10, 1),\n)\n\nscalar_m(x) = first(m([x]))\nscalar_m′(x) = Flux.pushforward(scalar_m, x)(1)\nm′(X) = scalar_m′.(X)\n\nloss(X, Y) = Flux.mse(m(X), Y) + mean(abs2.(cos.(X) - m′(X)))\n\nopt = ADAM()\ncb() = @show loss(X, Y)\n@time Flux.@epochs 1000 Flux.train!(loss, params(m), [(X, Y)], opt; cb)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"For some reason, computing the derivative of the neural network using the finite difference method is many times faster. Anybody knows why?"}]}]}]},{"type":"message","text":"What's the meeting code for the ML and AD Development/Usage call?","user":"U9MD78Z9N","ts":"1614270861.110100","team":"T68168MUP"},{"client_msg_id":"0027df1e-1e24-4f88-8044-a7e499af694d","type":"message","text":"is there a meeting code?","user":"U69BL50BF","ts":"1614270906.110300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"S6PI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is there a meeting code?"}]}]}]},{"client_msg_id":"12f8f1b7-7cf6-488b-8dc0-770d5b90926e","type":"message","text":"oh","user":"U69BL50BF","ts":"1614270917.110500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h=oC+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh"}]}]}]},{"client_msg_id":"f0155c6b-ec89-4c4a-85b3-5e7fe4d0a70b","type":"message","text":"password is `julia` I think?","user":"U69BL50BF","ts":"1614270924.110800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oJ3C","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"password is "},{"type":"text","text":"julia","style":{"code":true}},{"type":"text","text":" I think?"}]}]}]},{"type":"message","text":"Thanks, it wasn't in the canedar","user":"U9MD78Z9N","ts":"1614270961.110900","team":"T68168MUP"},{"client_msg_id":"6ca4548b-6c65-4477-bc3f-4302ecebcdbd","type":"message","text":"Hi, I'd like to obtain the second order gradient of an NN. And I wrote","user":"U0197S1773K","ts":"1614323301.112900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2pQsQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi, I'd like to obtain the second order gradient of an NN. And I wrote"}]}]}]},{"client_msg_id":"129d5da5-e016-477e-add5-efa6855fdebe","type":"message","text":"```gs = gradient(inp) do hidden_out\n    tmp_gs = (gradient(ps) do\n        Flux.Losses.logitcrossentropy(tail_layers(inp), targ_c)\n    end)\n    tmp_gs[tmp_gs.params[3]][3, 6]\nend```\nBut the `getindex` of `tmp_gs` seemed unable to be differentiated.","user":"U0197S1773K","ts":"1614323389.114300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ze5mL","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"gs = gradient(inp) do hidden_out\n    tmp_gs = (gradient(ps) do\n        Flux.Losses.logitcrossentropy(tail_layers(inp), targ_c)\n    end)\n    tmp_gs[tmp_gs.params[3]][3, 6]\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"But the "},{"type":"text","text":"getindex","style":{"code":true}},{"type":"text","text":" of "},{"type":"text","text":"tmp_gs","style":{"code":true}},{"type":"text","text":" seemed unable to be differentiated."}]}]}]},{"client_msg_id":"87313512-44a7-4da2-b8a0-c98a06e74268","type":"message","text":"This is probably the most useless use of ForwardDiff you can have, but I implemented `a+b` using it.\n```julia&gt; using ForwardDiff\n\njulia&gt; f((a, b)) = (a^2)/2 + a*b\nf (generic function with 1 method)\n\njulia&gt; plus(a, b) = ForwardDiff.gradient(f, [a, b])[1]\nplus (generic function with 1 method)\n\njulia&gt; plus(5, 10)\n15.0```","user":"U01CQTKB86N","ts":"1614364808.118000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Wbf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is probably the most useless use of ForwardDiff you can have, but I implemented "},{"type":"text","text":"a+b","style":{"code":true}},{"type":"text","text":" using it.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using ForwardDiff\n\njulia> f((a, b)) = (a^2)/2 + a*b\nf (generic function with 1 method)\n\njulia> plus(a, b) = ForwardDiff.gradient(f, [a, b])[1]\nplus (generic function with 1 method)\n\njulia> plus(5, 10)\n15.0"}]}]}],"thread_ts":"1614364808.118000","reply_count":1,"reply_users_count":1,"latest_reply":"1614364993.118100","reply_users":["U01CQTKB86N"],"subscribed":false,"reactions":[{"name":"joy","users":["U674T0Y9Z"],"count":1}]},{"client_msg_id":"22c635ad-0376-4f5a-84c0-379b24694e9b","type":"message","text":"Hi all. I’m working on a differentiable physics simulation code and am getting started with Zygote.\nIs this code below a good way to calculate the Jacobian using Zygote? I’m trying to develop a simple example based off of the zygote docs\n```# Evaluate the Jacobian matrix using Zygote and compare to finite differences\nbegin\n\t# define a function f(x): R³ → R³\n\n\tf(x) = [x[1]^2 + 2*x[2]^2 + 3*x[3]^2\n\t\t\t10*x[1]^2 + 20*x[2]^2 + 30*x[3]^2\n\t\t\t100*x[1]^2 + 200*x[2]^2 + 300*x[3]^2]\n\t\n\t# Calculate the Jacobian of f using finite differences\n\t# fᵢ'(x0) ≈ (fᵢ(x0 + ϵd) - f(x0)) / ϵd\n\tx0 = 11.0\n\tϵd = 1e-6\n\n\tr1 = (f([x0+ϵd 0 0]) - f([x0 0 0])) / ϵd\n\tr2 = (f([0 x0+ϵd 0]) - f([0 x0 0])) / ϵd\n\tr3 = (f([0 0 x0+ϵd 0]) - f([0 0 x0])) / ϵd\n\tJ_fd = [r1 r2 r3]\n\t\n\t# Now calculate the Jacobian using Zygote.pullback\n\t# First calculate the pullback: \n\tfx0, back = Zygote.pullback(f, [x0 x0 x0])\n\t# Evaluate the Jacobian matrix row-wise by\n\t# evaluating back at the unit vectors\n\tr1 = back([1 0 0])[1]\n\tr2 = back([0 1 0])[1]\n\tr3 = back([0 0 1])[1]\n\tJ_zg = [r1; r2; r3]\nend```","user":"U018F5W2H24","ts":"1614372412.120200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4FrNS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi all. I’m working on a differentiable physics simulation code and am getting started with Zygote.\nIs this code below a good way to calculate the Jacobian using Zygote? I’m trying to develop a simple example based off of the zygote docs\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"# Evaluate the Jacobian matrix using Zygote and compare to finite differences\nbegin\n\t# define a function f(x): R³ → R³\n\n\tf(x) = [x[1]^2 + 2*x[2]^2 + 3*x[3]^2\n\t\t\t10*x[1]^2 + 20*x[2]^2 + 30*x[3]^2\n\t\t\t100*x[1]^2 + 200*x[2]^2 + 300*x[3]^2]\n\t\n\t# Calculate the Jacobian of f using finite differences\n\t# fᵢ'(x0) ≈ (fᵢ(x0 + ϵd) - f(x0)) / ϵd\n\tx0 = 11.0\n\tϵd = 1e-6\n\n\tr1 = (f([x0+ϵd 0 0]) - f([x0 0 0])) / ϵd\n\tr2 = (f([0 x0+ϵd 0]) - f([0 x0 0])) / ϵd\n\tr3 = (f([0 0 x0+ϵd 0]) - f([0 0 x0])) / ϵd\n\tJ_fd = [r1 r2 r3]\n\t\n\t# Now calculate the Jacobian using Zygote.pullback\n\t# First calculate the pullback: \n\tfx0, back = Zygote.pullback(f, [x0 x0 x0])\n\t# Evaluate the Jacobian matrix row-wise by\n\t# evaluating back at the unit vectors\n\tr1 = back([1 0 0])[1]\n\tr2 = back([0 1 0])[1]\n\tr3 = back([0 0 1])[1]\n\tJ_zg = [r1; r2; r3]\nend"}]}]}],"thread_ts":"1614372412.120200","reply_count":29,"reply_users_count":3,"latest_reply":"1614373864.127300","reply_users":["U6A936746","U018F5W2H24","UCD4Z3NJZ"],"subscribed":false},{"client_msg_id":"cb1150e3-9ad1-4145-a33c-2f7376a4f19f","type":"message","text":"It seems that Zygote converts `BitArray`  to `Array{Bool}`? This is causing me some issues.","user":"U7YD3DKL2","ts":"1614424641.130000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7e/5J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It seems that Zygote converts "},{"type":"text","text":"BitArray","style":{"code":true}},{"type":"text","text":"  to "},{"type":"text","text":"Array{Bool}","style":{"code":true}},{"type":"text","text":"? This is causing me some issues."}]}]}],"thread_ts":"1614424641.130000","reply_count":1,"reply_users_count":1,"latest_reply":"1614425048.130100","reply_users":["U7YD3DKL2"],"subscribed":false},{"client_msg_id":"b4dd4e54-6b89-496c-b330-985c0655a2cb","type":"message","text":"Hi. I'm trying understand AD starting from the basics. Right now I am going through <https://github.com/MikeInnes/diff-zoo/blob/notebooks/intro.ipynb> , which is super helpful btw! :)\nThere is an example comparing interpolated expressions and non-interpolated expressions in their behaviour in the following code. My question is this: Given `y2` and `y3` as below, how do I actually distinguish them from each other in general?\n```julia&gt; printstructure(x, _, _) = x\nprintstructure (generic function with 1 method)\n\njulia&gt; function printstructure(ex::Expr, cache = IdDict(), n = Ref(0))\n         haskey(cache, ex) &amp;&amp; return cache[ex]\n         args = map(x -&gt; printstructure(x, cache, n), ex.args)\n         cache[ex] = sym = Symbol(:y, n[] += 1)\n         println(:($sym = $(Expr(ex.head, args...))))\n         return sym\n       end\nprintstructure (generic function with 4 methods)\n\njulia&gt; y1 = :(1 * 2)\n:(1 * 2)\n\njulia&gt; y2 = :($y1 + $y1 + $y1 + $y1)\n:(1 * 2 + 1 * 2 + 1 * 2 + 1 * 2)\n\njulia&gt; printstructure(y2);\ny1 = 1 * 2\ny2 = y1 + y1 + y1 + y1\n\njulia&gt; y3 = :($(:(1 * 2)) + $(:(1 * 2)) + $(:(1 * 2)) + $(:(1 * 2)))\n:(1 * 2 + 1 * 2 + 1 * 2 + 1 * 2)\n\njulia&gt; y2 == y3\ntrue\n\njulia&gt; y2 === y3\nfalse\n\njulia&gt; printstructure(y3);\ny1 = 1 * 2\ny2 = 1 * 2\ny3 = 1 * 2\ny4 = 1 * 2\ny5 = y1 + y2 + y3 + y4\n\njulia&gt;```\nAlso, can someone explain the following strange behaviour? Why is `y1.args` bigger than `y1` itself?\n```julia&gt; sizeof(y1)\n16\n\njulia&gt; sizeof(y1.args)\n24```","user":"U0190AJCYK0","ts":"1614434572.134500","team":"T68168MUP","edited":{"user":"U0190AJCYK0","ts":"1614434989.000000"},"blocks":[{"type":"rich_text","block_id":"IR5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi. I'm trying understand AD starting from the basics. Right now I am going through "},{"type":"link","url":"https://github.com/MikeInnes/diff-zoo/blob/notebooks/intro.ipynb"},{"type":"text","text":" , which is super helpful btw! :)\nThere is an example comparing interpolated expressions and non-interpolated expressions in their behaviour in the following code. My question is this: Given "},{"type":"text","text":"y2","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"y3","style":{"code":true}},{"type":"text","text":" as below, how do I actually distinguish them from each other in general?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> printstructure(x, _, _) = x\nprintstructure (generic function with 1 method)\n\njulia> function printstructure(ex::Expr, cache = IdDict(), n = Ref(0))\n         haskey(cache, ex) && return cache[ex]\n         args = map(x -> printstructure(x, cache, n), ex.args)\n         cache[ex] = sym = Symbol(:y, n[] += 1)\n         println(:($sym = $(Expr(ex.head, args...))))\n         return sym\n       end\nprintstructure (generic function with 4 methods)\n\njulia> y1 = :(1 * 2)\n:(1 * 2)\n\njulia> y2 = :($y1 + $y1 + $y1 + $y1)\n:(1 * 2 + 1 * 2 + 1 * 2 + 1 * 2)\n\njulia> printstructure(y2);\ny1 = 1 * 2\ny2 = y1 + y1 + y1 + y1\n\njulia> y3 = :($(:(1 * 2)) + $(:(1 * 2)) + $(:(1 * 2)) + $(:(1 * 2)))\n:(1 * 2 + 1 * 2 + 1 * 2 + 1 * 2)\n\njulia> y2 == y3\ntrue\n\njulia> y2 === y3\nfalse\n\njulia> printstructure(y3);\ny1 = 1 * 2\ny2 = 1 * 2\ny3 = 1 * 2\ny4 = 1 * 2\ny5 = y1 + y2 + y3 + y4\n\njulia>"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Also, can someone explain the following strange behaviour? Why is "},{"type":"text","text":"y1.args","style":{"code":true}},{"type":"text","text":" bigger than "},{"type":"text","text":"y1","style":{"code":true}},{"type":"text","text":" itself?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> sizeof(y1)\n16\n\njulia> sizeof(y1.args)\n24"}]}]}],"thread_ts":"1614434572.134500","reply_count":1,"reply_users_count":1,"latest_reply":"1614435223.134700","reply_users":["U6A936746"],"subscribed":false},{"client_msg_id":"2ea397d5-193b-47c7-b698-9de90559b94d","type":"message","text":"Is there any reversediff style package that supports array mutation? My problem has 300 input variables and 1 output. A function evaluation takes 2.5s on my machine. ForwardDiff takes quite some time.","user":"UMC2RHKLZ","ts":"1614472691.140600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NfZFy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there any reversediff style package that supports array mutation? My problem has 300 input variables and 1 output. A function evaluation takes 2.5s on my machine. ForwardDiff takes quite some time."}]}]}],"thread_ts":"1614472691.140600","reply_count":9,"reply_users_count":2,"latest_reply":"1614474259.143200","reply_users":["UCD4Z3NJZ","UMC2RHKLZ"],"subscribed":false},{"client_msg_id":"b76f3d37-83e7-458e-84bb-d588f8c11790","type":"message","text":"Can zygote calculate gradients of functions that internally use `Dual` types from `ForwardDiff` ? The two AD systems are not calculating derivatives toward the same parameters. Any suggestions for other (combinations of) AD systems, this would work with?","user":"UQEDP1Q5V","ts":"1614569742.147700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vK5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can zygote calculate gradients of functions that internally use "},{"type":"text","text":"Dual","style":{"code":true}},{"type":"text","text":" types from "},{"type":"text","text":"ForwardDiff","style":{"code":true}},{"type":"text","text":" ? The two AD systems are not calculating derivatives toward the same parameters. Any suggestions for other (combinations of) AD systems, this would work with?"}]}]}],"thread_ts":"1614569742.147700","reply_count":1,"reply_users_count":1,"latest_reply":"1614572086.148100","reply_users":["U69BL50BF"],"subscribed":false},{"client_msg_id":"c04e5099-4520-4bf8-b59b-0039d576a34f","type":"message","text":"Hi. I’m trying reverse-mode AD on my physics simulation and am getting an error which I don’t know how to fix:\n```\nERROR: ArgumentError: unable to check bounds for indices of type Interpolations.WeightedAdjIndex{2,Float64}\nStacktrace:\n [1] checkindex(::Type{Bool}, ::Base.OneTo{Int64}, ::Interpolations.WeightedAdjIndex{2,Float64}) at ./abstractarray.jl:561\n [2] checkbounds at ./abstractarray.jl:491 [inlined]\n [3] checkbounds at ./abstractarray.jl:506 [inlined]\n [4] view at ./subarray.jl:158 [inlined]\n [5] (::Zygote.var\"#364#366\"{Array{Float64,1},Tuple{Interpolations.WeightedAdjIndex{2,Float64}}})(::Float64) at /Users/ralph/.julia/packages/Zygote/KpME9/src/lib/array.jl:41\n [6] (::Zygote.var\"#2225#back#360\"{Zygote.var\"#364#366\"{Array{Float64,1},Tuple{Interpolations.WeightedAdjIndex{2,Float64}}}})(::Float64) at /Users/ralph/.julia/packages/ZygoteRules/OjfTt/src/adjoint.jl:59\n [7] (::Zygote.var\"#151#152\"{Zygote.var\"#2225#back#360\"{Zygote.var\"#364#366\"{Array{Float64,1},Tuple{Interpolations.WeightedAdjIndex{2,Float64}}}},Tuple{Tuple{Nothing},Tuple{Nothing}}})(::Float64) at /Users/ralph/.julia/packages/Zygote/KpME9/src/lib/lib.jl:191\n [8] (::Zygote.var\"#1694#back#153\"{Zygote.var\"#151#152\"{Zygote.var\"#2225#back#360\"{Zygote.var\"#364#366\"{Array{Float64,1},Tuple{Interpolations.WeightedAdjIndex{2,Float64}}}},Tuple{Tuple{Nothing},Tuple{Nothing}}}})(::Float64) at /Users/ralph/.julia/packages/ZygoteRules/OjfTt/src/adjoint.jl:59\n [9] BSplineInterpolation at /Users/ralph/.julia/packages/Interpolations/qHlUr/src/b-splines/indexing.jl:8 [inlined]\n [10] (::Zygote.var\"#151#152\"{typeof(∂(λ)),Tuple{Tuple{Nothing}}})(::Float64) at /Users/ralph/.julia/packages/Zygote/KpME9/src/lib/lib.jl:191\n [11] (::Zygote.var\"#1694#back#153\"{Zygote.var\"#151#152\"{typeof(∂(λ)),Tuple{Tuple{Nothing}}}})(::Float64) at /Users/ralph/.julia/packages/ZygoteRules/OjfTt/src/adjoint.jl:59\n [12] ScaledInterpolation at /Users/ralph/.julia/packages/Interpolations/qHlUr/src/scaling/scaling.jl:73 [inlined]\n [13] (::Zygote.var\"#151#152\"{typeof(∂(λ)),Tuple{Tuple{Nothing}}})(::Float64) at /Users/ralph/.julia/packages/Zygote/KpME9/src/lib/lib.jl:191\n [14] (::Zygote.var\"#1694#back#153\"{Zygote.var\"#151#152\"{typeof(∂(λ)),Tuple{Tuple{Nothing}}}})(::Float64) at /Users/ralph/.julia/packages/ZygoteRules/OjfTt/src/adjoint.jl:59\n [15] Extrapolation at /Users/ralph/.julia/packages/Interpolations/qHlUr/src/extrapolation/extrapolation.jl:49 [inlined]\n [16] (::typeof(∂(λ)))(::Float64) at /Users/ralph/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [17] push_here! at /Users/ralph/source/repos/picfun/test_push_autodiff.jl:93 [inlined]\n [18] (::typeof(∂(push_here!)))(::Nothing) at /Users/ralph/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [19] diff_me at /Users/ralph/source/repos/picfun/test_push_autodiff.jl:220 [inlined]\n [20] (::typeof(∂(diff_me)))(::Array{Float64,1}) at /Users/ralph/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [21] diff_capture at /Users/ralph/source/repos/picfun/test_push_autodiff.jl:233 [inlined]\n [22] (::typeof(∂(diff_capture)))(::Array{Float64,1}) at /Users/ralph/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [23] (::Zygote.var\"#41#42\"{typeof(∂(diff_capture))})(::Array{Float64,1}) at /Users/ralph/.julia/packages/Zygote/KpME9/src/compiler/interface.jl:40\n [24] top-level scope at ./REPL[9]:5```\nFrom [17] on the Stacktrace is within the function `push_here!` which uses interpolations in combination with an iterative solver for a set of equations.\nThe signature of the function is like this:\n```function push_here(aux_0, aux_12, aux_new, interpolated_field, parameters, convergence_tolerances)```\nand updates `aux_12` and `aux_new` .\n\nI’ve came across this issue here <https://github.com/FluxML/Zygote.jl/issues/643>\nbut I’m unsure how to define a custom adjoint when the function mutates its arguments `aux_12` and `aux_new`. Does anyone have a suggestion on how to get such a function working with Zygote or reverse-mode AD?","user":"U018F5W2H24","ts":"1614682603.154400","team":"T68168MUP","edited":{"user":"U018F5W2H24","ts":"1614683005.000000"},"blocks":[{"type":"rich_text","block_id":"E7U","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi. I’m trying reverse-mode AD on my physics simulation and am getting an error which I don’t know how to fix:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"\nERROR: ArgumentError: unable to check bounds for indices of type Interpolations.WeightedAdjIndex{2,Float64}\nStacktrace:\n [1] checkindex(::Type{Bool}, ::Base.OneTo{Int64}, ::Interpolations.WeightedAdjIndex{2,Float64}) at ./abstractarray.jl:561\n [2] checkbounds at ./abstractarray.jl:491 [inlined]\n [3] checkbounds at ./abstractarray.jl:506 [inlined]\n [4] view at ./subarray.jl:158 [inlined]\n [5] (::Zygote.var\"#364#366\"{Array{Float64,1},Tuple{Interpolations.WeightedAdjIndex{2,Float64}}})(::Float64) at /Users/ralph/.julia/packages/Zygote/KpME9/src/lib/array.jl:41\n [6] (::Zygote.var\"#2225#back#360\"{Zygote.var\"#364#366\"{Array{Float64,1},Tuple{Interpolations.WeightedAdjIndex{2,Float64}}}})(::Float64) at /Users/ralph/.julia/packages/ZygoteRules/OjfTt/src/adjoint.jl:59\n [7] (::Zygote.var\"#151#152\"{Zygote.var\"#2225#back#360\"{Zygote.var\"#364#366\"{Array{Float64,1},Tuple{Interpolations.WeightedAdjIndex{2,Float64}}}},Tuple{Tuple{Nothing},Tuple{Nothing}}})(::Float64) at /Users/ralph/.julia/packages/Zygote/KpME9/src/lib/lib.jl:191\n [8] (::Zygote.var\"#1694#back#153\"{Zygote.var\"#151#152\"{Zygote.var\"#2225#back#360\"{Zygote.var\"#364#366\"{Array{Float64,1},Tuple{Interpolations.WeightedAdjIndex{2,Float64}}}},Tuple{Tuple{Nothing},Tuple{Nothing}}}})(::Float64) at /Users/ralph/.julia/packages/ZygoteRules/OjfTt/src/adjoint.jl:59\n [9] BSplineInterpolation at /Users/ralph/.julia/packages/Interpolations/qHlUr/src/b-splines/indexing.jl:8 [inlined]\n [10] (::Zygote.var\"#151#152\"{typeof(∂(λ)),Tuple{Tuple{Nothing}}})(::Float64) at /Users/ralph/.julia/packages/Zygote/KpME9/src/lib/lib.jl:191\n [11] (::Zygote.var\"#1694#back#153\"{Zygote.var\"#151#152\"{typeof(∂(λ)),Tuple{Tuple{Nothing}}}})(::Float64) at /Users/ralph/.julia/packages/ZygoteRules/OjfTt/src/adjoint.jl:59\n [12] ScaledInterpolation at /Users/ralph/.julia/packages/Interpolations/qHlUr/src/scaling/scaling.jl:73 [inlined]\n [13] (::Zygote.var\"#151#152\"{typeof(∂(λ)),Tuple{Tuple{Nothing}}})(::Float64) at /Users/ralph/.julia/packages/Zygote/KpME9/src/lib/lib.jl:191\n [14] (::Zygote.var\"#1694#back#153\"{Zygote.var\"#151#152\"{typeof(∂(λ)),Tuple{Tuple{Nothing}}}})(::Float64) at /Users/ralph/.julia/packages/ZygoteRules/OjfTt/src/adjoint.jl:59\n [15] Extrapolation at /Users/ralph/.julia/packages/Interpolations/qHlUr/src/extrapolation/extrapolation.jl:49 [inlined]\n [16] (::typeof(∂(λ)))(::Float64) at /Users/ralph/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [17] push_here! at /Users/ralph/source/repos/picfun/test_push_autodiff.jl:93 [inlined]\n [18] (::typeof(∂(push_here!)))(::Nothing) at /Users/ralph/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [19] diff_me at /Users/ralph/source/repos/picfun/test_push_autodiff.jl:220 [inlined]\n [20] (::typeof(∂(diff_me)))(::Array{Float64,1}) at /Users/ralph/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [21] diff_capture at /Users/ralph/source/repos/picfun/test_push_autodiff.jl:233 [inlined]\n [22] (::typeof(∂(diff_capture)))(::Array{Float64,1}) at /Users/ralph/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [23] (::Zygote.var\"#41#42\"{typeof(∂(diff_capture))})(::Array{Float64,1}) at /Users/ralph/.julia/packages/Zygote/KpME9/src/compiler/interface.jl:40\n [24] top-level scope at ./REPL[9]:5"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"From [17] on the Stacktrace is within the function "},{"type":"text","text":"push_here!","style":{"code":true}},{"type":"text","text":" which uses interpolations in combination with an iterative solver for a set of equations.\nThe signature of the function is like this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function push_here(aux_0, aux_12, aux_new, interpolated_field, parameters, convergence_tolerances)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"and updates "},{"type":"text","text":"aux_12","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"aux_new","style":{"code":true}},{"type":"text","text":" .\n\nI’ve came across this issue here "},{"type":"link","url":"https://github.com/FluxML/Zygote.jl/issues/643"},{"type":"text","text":"\nbut I’m unsure how to define a custom adjoint when the function mutates its arguments "},{"type":"text","text":"aux_12","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"aux_new","style":{"code":true}},{"type":"text","text":". Does anyone have a suggestion on how to get such a function working with Zygote or reverse-mode AD?"}]}]}]},{"client_msg_id":"ee8798e2-a539-4e16-8e81-546d67075327","type":"message","text":"Can you use the convenient `ps = Flux.params(model)`  and `gs = gradient(ps) do loss(model) end` interface, but with ReverseDiff instead of Zygote?","user":"U7YD3DKL2","ts":"1614710568.159300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yUc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can you use the convenient "},{"type":"text","text":"ps = Flux.params(model)","style":{"code":true}},{"type":"text","text":"  and "},{"type":"text","text":"gs = gradient(ps) do loss(model) end","style":{"code":true}},{"type":"text","text":" interface, but with ReverseDiff instead of Zygote?"}]}]}]},{"client_msg_id":"c9f1418b-811f-4737-81f4-03e8c08da760","type":"message","text":"Similarly, it would be nice to have a \"Hessian\" that understands `params` . So that you can do `hs[ps1, ps2]`  and it would return the correct block of the Hessian","user":"U7YD3DKL2","ts":"1614780460.163400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s8+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Similarly, it would be nice to have a \"Hessian\" that understands "},{"type":"text","text":"params","style":{"code":true}},{"type":"text","text":" . So that you can do "},{"type":"text","text":"hs[ps1, ps2]","style":{"code":true}},{"type":"text","text":"  and it would return the correct block of the Hessian"}]}]}]},{"client_msg_id":"bbcaee99-915d-4a3b-a9e9-2090812ec50a","type":"message","text":"How to get a ForwardSensitivity method to work, through the highest level interface?\n```using DiffEqSensitivity\nusing OrdinaryDiffEq\nusing ForwardDiff\nfunction fiip(du,u,p,t)\n    if t &lt; 0.01 ; println(u) end\n    du[1] = dx = p[1]*u[1] - p[2]*u[1]*u[2]\n    du[2] = dy = -p[3]*u[2] + p[4]*u[1]*u[2]\nend\nfunction cost2(p)\n    prob = ODEProblem(fiip,[1.0,1.0],(0.0,10.0),p,abstol= 1e-6,reltol = 1e-6)  \n    sol = solve(prob,Tsit5();saveat=0:10,sensealg=ForwardSensitivity())\n    sum(sol)\nend\nForwardDiff.gradient(cost2,[1.5,1.0,3.0,1.0])```\n```ForwardDiff.Dual{ForwardDiff.Tag{typeof(cost2),Float64},Float64,4}[Dual{ForwardDiff.Tag{typeof(cost2),Float64}}(1.0,0.0,0.0,0.0,0.0), Dual{ForwardDiff.Tag{typeof(cost2),Float64}}(1.0,0.0,0.0,0.0,0.0)]\nForwardDiff.Dual{ForwardDiff.Tag{typeof(cost2),Float64},Float64,4}[Dual{ForwardDiff.Tag{typeof(cost2),Float64}}(1.0,0.0,0.0,0.0,0.0), Dual{ForwardDiff.Tag{typeof(cost2),Float64}}(1.0,0.0,0.0,0.0,0.0)]\n...```","user":"UQEDP1Q5V","ts":"1614783537.165300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SAtzZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How to get a ForwardSensitivity method to work, through the highest level interface?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using DiffEqSensitivity\nusing OrdinaryDiffEq\nusing ForwardDiff\nfunction fiip(du,u,p,t)\n    if t < 0.01 ; println(u) end\n    du[1] = dx = p[1]*u[1] - p[2]*u[1]*u[2]\n    du[2] = dy = -p[3]*u[2] + p[4]*u[1]*u[2]\nend\nfunction cost2(p)\n    prob = ODEProblem(fiip,[1.0,1.0],(0.0,10.0),p,abstol= 1e-6,reltol = 1e-6)  \n    sol = solve(prob,Tsit5();saveat=0:10,sensealg=ForwardSensitivity())\n    sum(sol)\nend\nForwardDiff.gradient(cost2,[1.5,1.0,3.0,1.0])"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"ForwardDiff.Dual{ForwardDiff.Tag{typeof(cost2),Float64},Float64,4}[Dual{ForwardDiff.Tag{typeof(cost2),Float64}}(1.0,0.0,0.0,0.0,0.0), Dual{ForwardDiff.Tag{typeof(cost2),Float64}}(1.0,0.0,0.0,0.0,0.0)]\nForwardDiff.Dual{ForwardDiff.Tag{typeof(cost2),Float64},Float64,4}[Dual{ForwardDiff.Tag{typeof(cost2),Float64}}(1.0,0.0,0.0,0.0,0.0), Dual{ForwardDiff.Tag{typeof(cost2),Float64}}(1.0,0.0,0.0,0.0,0.0)]\n..."}]}]}]},{"client_msg_id":"7524979c-368c-4ab5-bb87-3110d8e63584","type":"message","text":"ForwardSensitivity is an overload for reverse mode","user":"U69BL50BF","ts":"1614783782.165600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qttff","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ForwardSensitivity is an overload for reverse mode"}]}]}]},{"client_msg_id":"3e51d493-16f3-4330-81d5-3d446715a4a7","type":"message","text":"It basically is, if you do Zygote on this (or whatever else uses ChainRules), then replace the derivative calculation of `solve` with `ForwardSensitivity`.","user":"U69BL50BF","ts":"1614783807.166200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3=cZQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It basically is, if you do Zygote on this (or whatever else uses ChainRules), then replace the derivative calculation of "},{"type":"text","text":"solve","style":{"code":true}},{"type":"text","text":" with "},{"type":"text","text":"ForwardSensitivity","style":{"code":true}},{"type":"text","text":"."}]}]}]},{"client_msg_id":"8ad39c97-c80e-4f4c-835e-ae3c345d20b4","type":"message","text":"What does that mean in practice: cross-country AD for Zygote and forward mode for (eventually) ForwardDiff2 ?\nAnyway, how the different sensalg interact with wider forward/reverse AD systems, is maybe something that should be added to the docs?\nFor ForwardSensitivity the docs just say:  An implementation of continuous forward sensitivity analysis.\nI interpreted this as that in combination with ForwardDiff it would make a DiffRule, similar to ChainRules.","user":"UQEDP1Q5V","ts":"1614785964.173000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9ej","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What does that mean in practice: cross-country AD for Zygote and forward mode for (eventually) ForwardDiff2 ?\nAnyway, how the different sensalg interact with wider forward/reverse AD systems, is maybe something that should be added to the docs?\nFor ForwardSensitivity the docs just say:  An implementation of continuous forward sensitivity analysis.\nI interpreted this as that in combination with ForwardDiff it would make a DiffRule, similar to ChainRules."}]}]}],"thread_ts":"1614785964.173000","reply_count":1,"reply_users_count":1,"latest_reply":"1614787996.173300","reply_users":["UQEDP1Q5V"],"subscribed":false},{"client_msg_id":"ca170dd4-05ce-4758-a193-97f91b44bc62","type":"message","text":"AFAIK OpenAD is the only AD system that does cross-country AD. no?\n\nIt is Chapter 9 of Griewank and Walther.\nI feel like along with chapter 13 it is a chapter of forbidden lore.\n(<@U90JR0C80>)","user":"U6A936746","ts":"1614793917.174900","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1614795594.000000"},"blocks":[{"type":"rich_text","block_id":"5vMd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"AFAIK OpenAD is the only AD system that does cross-country AD. no?\n\nIt is Chapter 9 of Griewank and Walther.\nI feel like along with chapter 13 it is a chapter of forbidden lore.\n("},{"type":"user","user_id":"U90JR0C80"},{"type":"text","text":")"}]}]}],"thread_ts":"1614793917.174900","reply_count":5,"reply_users_count":3,"latest_reply":"1614795701.176500","reply_users":["U9MD78Z9N","U82RE6STE","U6A936746"],"subscribed":false},{"client_msg_id":"4b8151d1-6e9e-4572-b5d3-50cf5e7d7baf","type":"message","text":"Hi! I'm using Turing package for an inference which assumes that the data follows a MvNormal distribution.  The covariance matrix for MvNormal distribution is calculated by an ODE. The code runs into MethodError while forcing the covariance matrix (last ODE solution) to be positive semi-definite because that Turing AD automatically changes the ODE solution into ForwardDiff.dual type. And dual type matrix could not be the input of function Symmetric() as well as eigen() to find the decomposition. Could you help me with this? Thanks a lot in advance.\n```using DifferentialEquations\nusing StatsPlots\nusing Plots\nusing DiffEqSensitivity\nusing LinearAlgebra\nusing Statistics\nusing Distributions\nusing Turing\nusing PDMats\nusing ProximalOperators\n\n# data\nu_account = [953.0; 1075.0; 1223.0];\n\n# Turing function\n@model bayes_ode(y) = begin\n    \n    # priors of parameter v1 follow lognormal distributions\n    logv1 ~ Normal(0.0,1.0) \n    \n    p = [exp(logv1)]\n    \n    # priors of three states A,B,C follows nomal distributions\n    A_mean ~ Normal(7.0,1.0)\n    B_mean ~ Normal(7.0,1.0)\n    C_mean ~ Normal(7.0,1.0)\n    \n    u_mean = [exp(A_mean),exp(B_mean),exp(C_mean)]\n    \n    u_initial = eltype(u_mean).(zeros(3))\n    \n    # time period two days \n    tspan = (0.0,2.0)\n    ita0 = u_initial\n    \n    # covarince from an ODE solution \n    d_phi(u,p,t) = [-p[1]*ita0[3]     0     -ita0[1];\n                  p[1]*ita0[3]   -p[1]      ita0[1];\n                           0         p[1]        -p[1] ]*u \n    \n    # input of covarince ODE\n    phi_0 = zeros(3,3)\n    phi_0[1,1] = 1e-16\n    phi_0[2,2] = 1e-16\n    phi_0[3,3] = 1e-16\n    \n    # take the last solution of the ODE (fowarddiff.dual type)\n    sol  = solve(ODEProblem(d_phi,eltype(p).(phi_0),tspan,p))\n    phi_new = sol[end] \n    \n    # trying to force the output matrix to be semi-positive diffinite\n    phi_new, _ = prox(IndPSD(), phi_new)\n    \n    # force semi-positive diffinite matrix to be positive definite\n    phi_new = phi_new + 1e-12*Matrix(I, 3, 3)\n    y[:] ~ MvNormal(ita0,phi_new)\nend\n\nRandom.seed!(87654)\niterations = 20\nchain = sample(bayes_ode(u_account), NUTS(0.65),iterations)```\n```MethodError: no method matching eigen!(::Symmetric{ForwardDiff.Dual{ForwardDiff.Tag{Turing.Core.var\"#f#1\"{DynamicPPL.VarInfo{NamedTuple{(:logv1, :logv2, :A_mean, :B_mean, :C_mean),Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName....```","user":"U01Q398M3QB","ts":"1614813832.186400","team":"T68168MUP","edited":{"user":"U01Q398M3QB","ts":"1614816864.000000"},"blocks":[{"type":"rich_text","block_id":"Q5pgb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi! I'm using Turing package for an inference which assumes that the data follows a MvNormal distribution.  The covariance matrix for MvNormal distribution is calculated by an ODE. The code runs into MethodError while forcing the covariance matrix (last ODE solution) to be positive semi-definite because that Turing AD automatically changes the ODE solution into ForwardDiff.dual type. And dual type matrix could not be the input of function Symmetric() as well as eigen() to find the decomposition. Could you help me with this? Thanks a lot in advance.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using DifferentialEquations\nusing StatsPlots\nusing Plots\nusing DiffEqSensitivity\nusing LinearAlgebra\nusing Statistics\nusing Distributions\nusing Turing\nusing PDMats\nusing ProximalOperators\n\n# data\nu_account = [953.0; 1075.0; 1223.0];\n\n# Turing function\n@model bayes_ode(y) = begin\n    \n    # priors of parameter v1 follow lognormal distributions\n    logv1 ~ Normal(0.0,1.0) \n    \n    p = [exp(logv1)]\n    \n    # priors of three states A,B,C follows nomal distributions\n    A_mean ~ Normal(7.0,1.0)\n    B_mean ~ Normal(7.0,1.0)\n    C_mean ~ Normal(7.0,1.0)\n    \n    u_mean = [exp(A_mean),exp(B_mean),exp(C_mean)]\n    \n    u_initial = eltype(u_mean).(zeros(3))\n    \n    # time period two days \n    tspan = (0.0,2.0)\n    ita0 = u_initial\n    \n    # covarince from an ODE solution \n    d_phi(u,p,t) = [-p[1]*ita0[3]     0     -ita0[1];\n                  p[1]*ita0[3]   -p[1]      ita0[1];\n                           0         p[1]        -p[1] ]*u \n    \n    # input of covarince ODE\n    phi_0 = zeros(3,3)\n    phi_0[1,1] = 1e-16\n    phi_0[2,2] = 1e-16\n    phi_0[3,3] = 1e-16\n    \n    # take the last solution of the ODE (fowarddiff.dual type)\n    sol  = solve(ODEProblem(d_phi,eltype(p).(phi_0),tspan,p))\n    phi_new = sol[end] \n    \n    # trying to force the output matrix to be semi-positive diffinite\n    phi_new, _ = prox(IndPSD(), phi_new)\n    \n    # force semi-positive diffinite matrix to be positive definite\n    phi_new = phi_new + 1e-12*Matrix(I, 3, 3)\n    y[:] ~ MvNormal(ita0,phi_new)\nend\n\nRandom.seed!(87654)\niterations = 20\nchain = sample(bayes_ode(u_account), NUTS(0.65),iterations)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"MethodError: no method matching eigen!(::Symmetric{ForwardDiff.Dual{ForwardDiff.Tag{Turing.Core.var\"#f#1\"{DynamicPPL.VarInfo{NamedTuple{(:logv1, :logv2, :A_mean, :B_mean, :C_mean),Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName...."}]}]}]},{"client_msg_id":"15aaf5df-1c9e-410a-8e72-e3756bb32fe5","type":"message","text":"<@U01Q398M3QB> as a start, I think you might need GenericLinearAlgebra.jl in scope to differentiate the SVD.","user":"U69BL50BF","ts":"1614825580.191400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Awxta","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01Q398M3QB"},{"type":"text","text":" as a start, I think you might need GenericLinearAlgebra.jl in scope to differentiate the SVD."}]}]}]},{"client_msg_id":"160332e9-4398-46b0-8e07-11e395eed015","type":"message","text":"Iirc it has a generic eigen","user":"U69BL50BF","ts":"1614825589.191800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5E1WQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Iirc it has a generic eigen"}]}]}]},{"client_msg_id":"57bdc48c-f002-4866-b146-f9d9c0bf4ace","type":"message","text":"I don't know if that would push it all the way through but that's the first problem","user":"U69BL50BF","ts":"1614825630.192600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZJi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't know if that would push it all the way through but that's the first problem"}]}]}]},{"client_msg_id":"98e37903-db36-4191-8c78-5c6689c12ab0","type":"message","text":"<@U69BL50BF> Thanks Chris, I will try SVD instead of Cholesky now.","user":"U01Q398M3QB","ts":"1614825966.193300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vZhaX","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U69BL50BF"},{"type":"text","text":" Thanks Chris, I will try SVD instead of Cholesky now."}]}]}]},{"client_msg_id":"f59e4182-6ad3-44c2-8987-4e71930bd640","type":"message","text":"Isn’t Cholesky easier to differentiate? Also, is the stack trace from the matrix exponential?","user":"U6788D83U","ts":"1614826044.194300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3EAq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Isn’t Cholesky easier to differentiate? Also, is the stack trace from the matrix exponential?"}]}]}]},{"client_msg_id":"acb953a8-3e63-4843-b6d7-603bf918053f","type":"message","text":"Please post the whole stack trace if you can. It’s not easy to spot where that’s from.","user":"U6788D83U","ts":"1614826121.195100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DRSov","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Please post the whole stack trace if you can. It’s not easy to spot where that’s from."}]}]}]},{"client_msg_id":"d850beb3-3935-4be0-b4fe-ae8fbeea70c5","type":"message","text":"<@U6788D83U> Thanks Yingbo. Cholesky requires a dense, symmetry and positive definite Float64 matrix as input. But here, the input matrix is a dual type and it might not be symmetry nor positive definite. I will minimize the problem soon as well as post the whole stack trace.","user":"U01Q398M3QB","ts":"1614826486.198700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tw77","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U6788D83U"},{"type":"text","text":" Thanks Yingbo. Cholesky requires a dense, symmetry and positive definite Float64 matrix as input. But here, the input matrix is a dual type and it might not be symmetry nor positive definite. I will minimize the problem soon as well as post the whole stack trace."}]}]}]},{"client_msg_id":"29f5236a-803f-45c5-a69e-d3ede547ddc1","type":"message","text":"It sounds like that you just need <https://github.com/JuliaLinearAlgebra/GenericLinearAlgebra.jl> and call generic Julia implementations for certain factorizations.","user":"U6788D83U","ts":"1614827271.199600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"D0wTj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It sounds like that you just need "},{"type":"link","url":"https://github.com/JuliaLinearAlgebra/GenericLinearAlgebra.jl"},{"type":"text","text":" and call generic Julia implementations for certain factorizations."}]}]}]},{"client_msg_id":"dea1a763-7954-46e5-a0a4-4dabca796599","type":"message","text":"I am not sure where that `eigen!` is from though.","user":"U6788D83U","ts":"1614827294.199900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Nfvj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am not sure where that "},{"type":"text","text":"eigen!","style":{"code":true}},{"type":"text","text":" is from though."}]}]}]},{"client_msg_id":"50a21de9-6376-4d97-beee-dd6e0dd19dbf","type":"message","text":"It looks like it's in `prox`","user":"U69BL50BF","ts":"1614829423.200300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"I25d","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It looks like it's in "},{"type":"text","text":"prox","style":{"code":true}}]}]}]},{"client_msg_id":"ae333796-0089-44bc-b3e1-86eab04ae561","type":"message","text":"but <@U6788D83U> GenericLinearAlgebra pirates right?","user":"U69BL50BF","ts":"1614829432.200600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VYsDf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but "},{"type":"user","user_id":"U6788D83U"},{"type":"text","text":" GenericLinearAlgebra pirates right?"}]}]}]},{"client_msg_id":"c448a6b0-ea21-4852-8a7c-8f959d57d312","type":"message","text":"so if it does, that would handle it.","user":"U69BL50BF","ts":"1614829439.200800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c8ls","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so if it does, that would handle it."}]}]}]},{"client_msg_id":"e9bb075a-4b05-4fa3-8c01-88003bdd22ea","type":"message","text":"Yes, it does <https://github.com/JuliaLinearAlgebra/GenericLinearAlgebra.jl/blob/74e818349c735f5640e704c1f54599e338d1091d/src/eigenSelfAdjoint.jl#L626-L651>","user":"U6788D83U","ts":"1614829577.201100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QtY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, it does "},{"type":"link","url":"https://github.com/JuliaLinearAlgebra/GenericLinearAlgebra.jl/blob/74e818349c735f5640e704c1f54599e338d1091d/src/eigenSelfAdjoint.jl#L626-L651"}]}]}]},{"client_msg_id":"c7f606a1-b874-45f8-a4a7-6c3363a47f5a","type":"message","text":"yeah so `using GenericLinearAlgebra` and then run your model again and see","user":"U69BL50BF","ts":"1614829612.201500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Oo0p0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah so "},{"type":"text","text":"using GenericLinearAlgebra","style":{"code":true}},{"type":"text","text":" and then run your model again and see"}]}]}]},{"client_msg_id":"32872df7-d71d-4fad-bc92-be0591cecbd8","type":"message","text":"I think the other issues are in ProximalOperators.jl","user":"U69BL50BF","ts":"1614829619.201800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8EaM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think the other issues are in ProximalOperators.jl"}]}]}]},{"client_msg_id":"ee4e96ce-09ad-4411-ba35-f3f9e27f9605","type":"message","text":"I would just `dev` and get rid of every `&lt;: Float64` and see if that works.","user":"U69BL50BF","ts":"1614829633.202200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1tps","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I would just "},{"type":"text","text":"dev","style":{"code":true}},{"type":"text","text":" and get rid of every "},{"type":"text","text":"<: Float64","style":{"code":true}},{"type":"text","text":" and see if that works."}]}]}]},{"type":"message","text":"Thanks very much <@U6788D83U> and <@U69BL50BF>\nBy changing\n```using LinearAlgebra```\ninto\n```using GenericLinearAlgebra```\nIt gives the error message:","files":[{"id":"F01PXKGENHL","created":1614841507,"timestamp":1614841507,"name":"using_GenericLinearAlgebra.pdf","title":"using_GenericLinearAlgebra.pdf","mimetype":"application/pdf","filetype":"pdf","pretty_type":"PDF","user":"U01Q398M3QB","editable":false,"size":55574,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01PXKGENHL/using_genericlinearalgebra.pdf","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01PXKGENHL/download/using_genericlinearalgebra.pdf","thumb_pdf":"https://files.slack.com/files-tmb/T68168MUP-F01PXKGENHL-1aa3de1395/using_genericlinearalgebra_thumb_pdf.png","thumb_pdf_w":935,"thumb_pdf_h":1210,"permalink":"https://julialang.slack.com/files/U01Q398M3QB/F01PXKGENHL/using_genericlinearalgebra.pdf","permalink_public":"https://slack-files.com/T68168MUP-F01PXKGENHL-0f05b18083","is_starred":false,"has_rich_preview":false}],"upload":false,"blocks":[{"type":"rich_text","block_id":"=w0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks very much "},{"type":"user","user_id":"U6788D83U"},{"type":"text","text":" and "},{"type":"user","user_id":"U69BL50BF"},{"type":"text","text":"\nBy changing\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using LinearAlgebra"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"into\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using GenericLinearAlgebra"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"It gives the error message:"}]}]}],"user":"U01Q398M3QB","display_as_bot":false,"ts":"1614841531.204400"},{"type":"message","text":"I also modify the code without using ProximalOperators.jl\n\n```D,V = GenericLinearAlgebra.eigen(GenericLinearAlgebra.Symmetric(phi))\nD .= max.(D,1e-12)\nphi_new = V*GenericLinearAlgebra.Diagonal(D)*V'```\nit gives the similar error message","files":[{"id":"F01Q4K572HZ","created":1614841718,"timestamp":1614841718,"name":"using_GenericLinearAlgebra_and_no_ProximalOperators.pdf","title":"using_GenericLinearAlgebra_and_no_ProximalOperators.pdf","mimetype":"application/pdf","filetype":"pdf","pretty_type":"PDF","user":"U01Q398M3QB","editable":false,"size":51723,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01Q4K572HZ/using_genericlinearalgebra_and_no_proximaloperators.pdf","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01Q4K572HZ/download/using_genericlinearalgebra_and_no_proximaloperators.pdf","thumb_pdf":"https://files.slack.com/files-tmb/T68168MUP-F01Q4K572HZ-a156ed5ece/using_genericlinearalgebra_and_no_proximaloperators_thumb_pdf.png","thumb_pdf_w":935,"thumb_pdf_h":1210,"permalink":"https://julialang.slack.com/files/U01Q398M3QB/F01Q4K572HZ/using_genericlinearalgebra_and_no_proximaloperators.pdf","permalink_public":"https://slack-files.com/T68168MUP-F01Q4K572HZ-05ffaed920","is_starred":false,"has_rich_preview":false}],"upload":false,"blocks":[{"type":"rich_text","block_id":"7/jL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I also modify the code without using ProximalOperators.jl\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"D,V = GenericLinearAlgebra.eigen(GenericLinearAlgebra.Symmetric(phi))\nD .= max.(D,1e-12)\nphi_new = V*GenericLinearAlgebra.Diagonal(D)*V'"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nit gives the similar error message"}]}]}],"user":"U01Q398M3QB","display_as_bot":false,"ts":"1614841722.205900"},{"client_msg_id":"52dbf4b7-11bb-4bc8-9b19-a4c946dd47a3","type":"message","text":"<@U69BL50BF> Thanks, Chris,  could you explain more about how to `dev` in order to modify the code in package ProximalOperators.jl? I got permission denied while doing this without `dev`","user":"U01Q398M3QB","ts":"1614841868.208100","team":"T68168MUP","edited":{"user":"U01Q398M3QB","ts":"1614841885.000000"},"blocks":[{"type":"rich_text","block_id":"v52","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U69BL50BF"},{"type":"text","text":" Thanks, Chris,  could you explain more about how to "},{"type":"text","text":"dev","style":{"code":true}},{"type":"text","text":" in order to modify the code in package ProximalOperators.jl? I got permission denied while doing this without "},{"type":"text","text":"dev","style":{"code":true}}]}]}]},{"client_msg_id":"6a7f9b8a-dccf-4fd5-b605-586ca7eeaf8f","type":"message","text":"<https://www.youtube.com/watch?v=QVmU29rCjaA>","user":"U69BL50BF","ts":"1614842272.208400","team":"T68168MUP","attachments":[{"service_name":"YouTube","service_url":"https://www.youtube.com/","title":"Developing Julia Packages","title_link":"https://www.youtube.com/watch?v=QVmU29rCjaA","author_name":"The Julia Programming Language","author_link":"https://www.youtube.com/user/JuliaLanguage","thumb_url":"https://i.ytimg.com/vi/QVmU29rCjaA/hqdefault.jpg","thumb_width":480,"thumb_height":360,"fallback":"YouTube Video: Developing Julia Packages","video_html":"<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/QVmU29rCjaA?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","video_html_width":400,"video_html_height":225,"from_url":"https://www.youtube.com/watch?v=QVmU29rCjaA","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png","id":1,"original_url":"https://www.youtube.com/watch?v=QVmU29rCjaA"}],"blocks":[{"type":"rich_text","block_id":"0Lp","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://www.youtube.com/watch?v=QVmU29rCjaA"}]}]}],"reactions":[{"name":"thumbsup_all","users":["U01Q398M3QB","UCD4Z3NJZ"],"count":2},{"name":"heart","users":["U01Q398M3QB"],"count":1}]},{"client_msg_id":"CB545061-0D36-44FA-A6C7-9160B754CF67","type":"message","text":"Nice video, a warning to viewers, atom is in maintenance only mode now, people are switching to vscode. <https://github.com/julia-vscode/julia-vscode|https://github.com/julia-vscode/julia-vscode>","user":"UCD4Z3NJZ","ts":"1614844422.213700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5ZD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Nice video, a warning to viewers, atom is in maintenance only mode now, people are switching to vscode. "},{"type":"link","url":"https://github.com/julia-vscode/julia-vscode","text":"https://github.com/julia-vscode/julia-vscode"}]}]}]},{"client_msg_id":"d9976faf-0c95-429d-990a-0499517a9d63","type":"message","text":"VSCode still isn't generally ready though. There are quite a few missing things. Too many for deep work :shrug: but you could get away with it in a pinch","user":"U69BL50BF","ts":"1614857696.216200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c5fG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"VSCode still isn't generally ready though. There are quite a few missing things. Too many for deep work "},{"type":"emoji","name":"shrug"},{"type":"text","text":" but you could get away with it in a pinch"}]}]}]},{"client_msg_id":"1004ea7a-caf3-445d-976f-b01f39608c7b","type":"message","text":"Guys, pretty much any pullback closure we use in julia is affected by this minor closure Core.Box thing, I think:\n<https://github.com/JuliaLang/julia/issues/39939>","user":"U016RL8KEHX","ts":"1615046173.232900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+kG0e","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Guys, pretty much any pullback closure we use in julia is affected by this minor closure Core.Box thing, I think:\n"},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/39939"}]}]}]},{"client_msg_id":"a349001e-4389-4c90-8b05-dd95e0123628","type":"message","text":"Probably want to make sure that it gets marked 1.6 blocker if it is a major issue.","user":"U67461GUB","ts":"1615046261.234700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qjC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Probably want to make sure that it gets marked 1.6 blocker if it is a major issue."}]}]}],"thread_ts":"1615046261.234700","reply_count":5,"reply_users_count":2,"latest_reply":"1615047378.237700","reply_users":["U016RL8KEHX","U67461GUB"],"subscribed":false,"reactions":[{"name":"heart","users":["U016RL8KEHX"],"count":1}]},{"client_msg_id":"20fe30ec-722a-4f41-9f5e-7d5c634f0c2e","type":"message","text":"I mean I thought it is already a solved problem, but everytime we reassign a symbol it gets Core.Box-ed. Basically `let` is not a local scope.","user":"U016RL8KEHX","ts":"1615046272.234900","team":"T68168MUP","edited":{"user":"U016RL8KEHX","ts":"1615046296.000000"},"blocks":[{"type":"rich_text","block_id":"WfX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean I thought it is already a solved problem, but everytime we reassign a symbol it gets Core.Box-ed. Basically "},{"type":"text","text":"let","style":{"code":true}},{"type":"text","text":" is not a local scope."}]}]}]},{"client_msg_id":"bd1f0f3e-1abc-4c76-a3ba-66d506daf780","type":"message","text":"I left a reply there, unfortunately this behavior is expected. This is something that opaque closures added in 1.7 should be able to avoid though.","user":"UM30MT6RF","ts":"1615047022.237300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jxs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I left a reply there, unfortunately this behavior is expected. This is something that opaque closures added in 1.7 should be able to avoid though."}]}]}],"reactions":[{"name":"+1","users":["U016RL8KEHX"],"count":1}]},{"client_msg_id":"4f04e400-de60-4330-830c-e53b885e9cdf","type":"message","text":"Does it make sense to have an AD-specific optimising compiler pass before adjoints are plugged in? For example, often a for loop can be transformed to a `foreach` with an input closure or opaque closure. Detecting somewhat local patterns like this and replacing them is something a compiler should be good at. This may then avoid having an `O(n)` long chain of adjoints, where `n` is the number of iterations in the loop, and instead reduce it to `O(1)` adjoints in the chain. Is this in the scope for a later version of Diffractor and/or Julia?","user":"U85JBUGGP","ts":"1615048636.241700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KhR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does it make sense to have an AD-specific optimising compiler pass before adjoints are plugged in? For example, often a for loop can be transformed to a "},{"type":"text","text":"foreach","style":{"code":true}},{"type":"text","text":" with an input closure or opaque closure. Detecting somewhat local patterns like this and replacing them is something a compiler should be good at. This may then avoid having an "},{"type":"text","text":"O(n)","style":{"code":true}},{"type":"text","text":" long chain of adjoints, where "},{"type":"text","text":"n","style":{"code":true}},{"type":"text","text":" is the number of iterations in the loop, and instead reduce it to "},{"type":"text","text":"O(1)","style":{"code":true}},{"type":"text","text":" adjoints in the chain. Is this in the scope for a later version of Diffractor and/or Julia?"}]}]}]},{"client_msg_id":"1ca889df-8e6c-4362-8203-e7dff8061d4e","type":"message","text":"Or perhaps this is more Enzyme territory.","user":"U85JBUGGP","ts":"1615048660.242100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"29/G4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Or perhaps this is more Enzyme territory."}]}]}]},{"client_msg_id":"769aef62-cd38-4614-964f-ee90d3f7ae72","type":"message","text":"My understanding is that while Diffractor is supposed to make AD on loops fast at runtime, the compile time will still scale with the number of loop iterations. Please correct me if I am wrong.","user":"U85JBUGGP","ts":"1615048835.243000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tnU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My understanding is that while Diffractor is supposed to make AD on loops fast at runtime, the compile time will still scale with the number of loop iterations. Please correct me if I am wrong."}]}]}]},{"client_msg_id":"4ed7c0f0-03cd-4013-96e1-fe5b6f8fdec7","type":"message","text":"Diffractor is all about getting the infrastructure to make optimizations lime that semantically legal","user":"U674T3KB3","ts":"1615048986.243800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sya","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Diffractor is all about getting the infrastructure to make optimizations lime that semantically legal"}]}]}]},{"client_msg_id":"6cbb8626-a472-42b5-8072-d945475d5ad0","type":"message","text":"Of course you still need to actually write them but at least it'll be possible","user":"U674T3KB3","ts":"1615049001.244400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mRh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Of course you still need to actually write them but at least it'll be possible"}]}]}]},{"client_msg_id":"af5e59e9-f782-4137-9952-97a7fe549e8d","type":"message","text":"Awesome!","user":"U85JBUGGP","ts":"1615049025.244800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VdHB4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Awesome!"}]}]}]},{"client_msg_id":"80a4350d-e647-4eb7-a066-35c36bf11c3a","type":"message","text":"Perhaps lowering loops to higher order function calls might be a pro-AD possibly breaking change to consider for 2.0.","user":"U85JBUGGP","ts":"1615049073.245400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SZPa4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Perhaps lowering loops to higher order function calls might be a pro-AD possibly breaking change to consider for 2.0."}]}]}]},{"client_msg_id":"5b284d6e-214c-44df-8955-7f7851486078","type":"message","text":"Not sure how many troubles that will create.","user":"U85JBUGGP","ts":"1615049093.245700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zlRm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not sure how many troubles that will create."}]}]}]},{"client_msg_id":"5808db65-1058-499d-9fda-81daf1549392","type":"message","text":"This lowering will then have the optimisation on by default, but maybe an AD-specific optimiser is the better way to go. Anyways, glad to hear it’s on the radar.","user":"U85JBUGGP","ts":"1615049153.246300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dZVpw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This lowering will then have the optimisation on by default, but maybe an AD-specific optimiser is the better way to go. Anyways, glad to hear it’s on the radar."}]}]}]},{"client_msg_id":"aaecea9b-adda-4121-bef6-9863da9d2ef6","type":"message","text":"We don't currently have a proper way to cite ChainRules.jl, do we?","user":"UM30MT6RF","ts":"1615136656.249300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gc=eL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We don't currently have a proper way to cite ChainRules.jl, do we?"}]}]}]},{"client_msg_id":"6497d946-4394-4103-bd3d-d5da5c9f0b79","type":"message","text":"That's a good question. I think not.","user":"U69BL50BF","ts":"1615137984.249500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LlJy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's a good question. I think not."}]}]}]},{"client_msg_id":"75e52471-29fe-4522-969c-48cb781415fd","type":"message","text":"Hi All,\n\nbeing begridden meant that I have spent some time to understand source code of Zygote, to better understand on what mechanism it relies on. In your discussions you mention “backedges” in AD context. I have noticed that Zygote has an `edge!` function. Can someone give me an example where such an edge is needed?\n\nThanks in advance","user":"U6YRZ18GZ","ts":"1615139708.252900","team":"T68168MUP","edited":{"user":"U6YRZ18GZ","ts":"1615139721.000000"},"blocks":[{"type":"rich_text","block_id":"/CX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi All,\n\nbeing begridden meant that I have spent some time to understand source code of Zygote, to better understand on what mechanism it relies on. In your discussions you mention “backedges” in AD context. I have noticed that Zygote has an "},{"type":"text","text":"edge!","style":{"code":true}},{"type":"text","text":" function. Can someone give me an example where such an edge is needed?\n\nThanks in advance"}]}]}],"thread_ts":"1615139708.252900","reply_count":1,"reply_users_count":1,"latest_reply":"1615140046.253100","reply_users":["UM30MT6RF"],"subscribed":false},{"client_msg_id":"391307e0-1908-4a35-b7bf-b8e663ac524f","type":"message","text":"Diffractor (WIP - still some known performance bugs):\n```julia&gt; @time @eval sin'''(1.0)\n  2.097331 seconds (2.49 M allocations: 149.539 MiB, 5.42% gc time, 16.26% compilation time)\n-0.5403023058681398\n\njulia&gt; @time @eval sin'''(1.0)\n  0.004400 seconds (2.94 k allocations: 172.250 KiB)\n-0.5403023058681398\n\njulia&gt; @time @eval cos'''(1.0)\n  0.694849 seconds (673.50 k allocations: 39.477 MiB, 2.19% gc time, 1.85% compilation time)\n0.8414709848078965\n\njulia&gt; @time @eval cos'''(1.0)\n  0.003586 seconds (3.05 k allocations: 178.844 KiB)\n0.8414709848078965```\nZygote:\n```julia&gt; @time @eval sin'''(1.0)\n102.234250 seconds (118.05 M allocations: 6.487 GiB, 3.14% gc time, 99.91% compilation time)\n-0.5403023058681398\n\njulia&gt; @time @eval sin'''(1.0)\n  0.009297 seconds (4.33 k allocations: 1.535 MiB)\n-0.5403023058681398\n\njulia&gt; @time @eval cos'''(1.0)\n 66.910576 seconds (39.20 M allocations: 2.066 GiB, 1.48% gc time, 99.80% compilation time)\n0.8414709848078965\n\njulia&gt; @time @eval cos'''(1.0)\n  0.009765 seconds (4.34 k allocations: 1.517 MiB)\n0.8414709848078965```","user":"U674T3KB3","ts":"1615180238.254900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"49oU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Diffractor (WIP - still some known performance bugs):\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @time @eval sin'''(1.0)\n  2.097331 seconds (2.49 M allocations: 149.539 MiB, 5.42% gc time, 16.26% compilation time)\n-0.5403023058681398\n\njulia> @time @eval sin'''(1.0)\n  0.004400 seconds (2.94 k allocations: 172.250 KiB)\n-0.5403023058681398\n\njulia> @time @eval cos'''(1.0)\n  0.694849 seconds (673.50 k allocations: 39.477 MiB, 2.19% gc time, 1.85% compilation time)\n0.8414709848078965\n\njulia> @time @eval cos'''(1.0)\n  0.003586 seconds (3.05 k allocations: 178.844 KiB)\n0.8414709848078965"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Zygote:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @time @eval sin'''(1.0)\n102.234250 seconds (118.05 M allocations: 6.487 GiB, 3.14% gc time, 99.91% compilation time)\n-0.5403023058681398\n\njulia> @time @eval sin'''(1.0)\n  0.009297 seconds (4.33 k allocations: 1.535 MiB)\n-0.5403023058681398\n\njulia> @time @eval cos'''(1.0)\n 66.910576 seconds (39.20 M allocations: 2.066 GiB, 1.48% gc time, 99.80% compilation time)\n0.8414709848078965\n\njulia> @time @eval cos'''(1.0)\n  0.009765 seconds (4.34 k allocations: 1.517 MiB)\n0.8414709848078965"}]}]}],"reactions":[{"name":"chart_with_downwards_trend","users":["UGU761DU2"],"count":1},{"name":"sonic","users":["UGU761DU2","U8D9768Q6"],"count":2}]},{"client_msg_id":"FEC8C5F4-D58D-407D-AE67-CB3DD05A7157","type":"message","text":"Can I ask what’s the significance of timing with the eval? ","user":"U8D9768Q6","ts":"1615180372.255400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"62jv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can I ask what’s the significance of timing with the eval? "}]}]}]},{"client_msg_id":"03a3e3a1-a846-4360-a39a-455f2d715a35","type":"message","text":"measures compile time. Zygote's biggest problem at higher order is that it takes forever to compile","user":"U674T3KB3","ts":"1615180401.256300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dWc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"measures compile time. Zygote's biggest problem at higher order is that it takes forever to compile"}]}]}]},{"client_msg_id":"8F756BE5-BE37-4A21-88F1-2A29C4D9DC07","type":"message","text":"Just to totally block constant prop?","user":"U8D9768Q6","ts":"1615180402.256400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1mjL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Just to totally block constant prop?"}]}]}]},{"client_msg_id":"941D82E2-1803-438C-8733-D6B696C0C973","type":"message","text":"I see","user":"U8D9768Q6","ts":"1615180422.256800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EDaKV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see"}]}]}]},{"client_msg_id":"F05E119F-F62A-4D9E-900C-8F75F4CC95C6","type":"message","text":"Looks very promising, congratulations Keno! I can’t wait to ply around with it. ","user":"U8D9768Q6","ts":"1615180469.257700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rAN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Looks very promising, congratulations Keno! I can’t wait to ply around with it. "}]}]}]},{"client_msg_id":"45b777dc-c6c4-4972-bf58-da9c184c8dff","type":"message","text":"Cool!","user":"UGU761DU2","ts":"1615180474.257900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"t83Yv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Cool!"}]}]}]},{"client_msg_id":"6aa85abe-25a7-4a4b-af48-e2cfda962ee2","type":"message","text":"we're getting close - but this last bit is quite tricky","user":"U674T3KB3","ts":"1615180501.258500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YBy0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we're getting close - but this last bit is quite tricky"}]}]}]},{"client_msg_id":"76826dc2-ea4c-4136-a008-9215cb90550b","type":"message","text":"I spent many hours writing about 15 lines of code today","user":"U674T3KB3","ts":"1615180510.258800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bmTHb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I spent many hours writing about 15 lines of code today"}]}]}]},{"client_msg_id":"7cf7487f-ebaa-4bdf-bc21-f8ecbfb54ce8","type":"message","text":"Is the plan that it’ll use the same API as Zygote in general?","user":"UGU761DU2","ts":"1615180724.259400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GtQJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is the plan that it’ll use the same API as Zygote in general?"}]}]}]},{"client_msg_id":"a7507600-e4f7-4d14-919a-2b1695e80508","type":"message","text":"yes","user":"U674T3KB3","ts":"1615180734.259600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Mqz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes"}]}]}],"reactions":[{"name":"+1","users":["UGU761DU2"],"count":1}]},{"client_msg_id":"80b1d919-df30-40a9-a8e0-8389d3ebcf05","type":"message","text":"with some extra tricks","user":"U674T3KB3","ts":"1615180747.259900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+nLUc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"with some extra tricks"}]}]}],"reactions":[{"name":"science_parrot","users":["UGU761DU2"],"count":1}]},{"client_msg_id":"584df413-1a08-45ae-93e7-f121c9aaa812","type":"message","text":"Like, I'll make the `'''` a special case that directly calls the third order derivative rather than recursing over itself","user":"U674T3KB3","ts":"1615180770.260400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VKC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Like, I'll make the "},{"type":"text","text":"'''","style":{"code":true}},{"type":"text","text":" a special case that directly calls the third order derivative rather than recursing over itself"}]}]}],"thread_ts":"1615180770.260400","reply_count":5,"reply_users_count":2,"latest_reply":"1615182564.264100","reply_users":["UJ7DVTVQ8","U674T3KB3"],"subscribed":false,"reactions":[{"name":"100","users":["U8D9768Q6","UGU761DU2"],"count":2}]},{"client_msg_id":"a67fd1d9-9c12-4469-809e-e6f1043dd193","type":"message","text":"I'm doing that for the moment, because it's an excellent stress test","user":"U674T3KB3","ts":"1615180782.260800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h1n9+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm doing that for the moment, because it's an excellent stress test"}]}]}]},{"client_msg_id":"f1e6db5a-f28c-4b50-a733-f97d23dfbdb8","type":"message","text":"Nice!","user":"UGU761DU2","ts":"1615180785.261100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8s1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Nice!"}]}]}]},{"type":"message","subtype":"thread_broadcast","text":"I'm still having some trouble writing out the general form of this isomorphism. I can do it manually for any particular order, but doing it for arbitrary N is a bit tricky - guess that means I don't really understand it well enough yet","user":"U674T3KB3","ts":"1615182379.263800","thread_ts":"1615180770.260400","root":{"client_msg_id":"584df413-1a08-45ae-93e7-f121c9aaa812","type":"message","text":"Like, I'll make the `'''` a special case that directly calls the third order derivative rather than recursing over itself","user":"U674T3KB3","ts":"1615180770.260400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VKC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Like, I'll make the "},{"type":"text","text":"'''","style":{"code":true}},{"type":"text","text":" a special case that directly calls the third order derivative rather than recursing over itself"}]}]}],"thread_ts":"1615180770.260400","reply_count":5,"reply_users_count":2,"latest_reply":"1615182564.264100","reply_users":["UJ7DVTVQ8","U674T3KB3"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"MtL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm still having some trouble writing out the general form of this isomorphism. I can do it manually for any particular order, but doing it for arbitrary N is a bit tricky - guess that means I don't really understand it well enough yet"}]}]}],"client_msg_id":"bc0603c3-354a-411f-b1ab-e96a5dedce64"},{"client_msg_id":"cdb883c9-2d34-4869-a7dd-44582eacf57d","type":"message","text":"<@U674T3KB3> I am looking forward for this. I am using second order gradients to train more explainable models and Zygote is of course taking its time (though I am very glad that it works)","user":"U6YRZ18GZ","ts":"1615191207.267400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wBVyR","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U674T3KB3"},{"type":"text","text":" I am looking forward for this. I am using second order gradients to train more explainable models and Zygote is of course taking its time (though I am very glad that it works)"}]}]}]},{"client_msg_id":"14f35687-8487-42f8-922b-12b2399e0399","type":"message","text":"I'm trying to make nested derivatives work with Zygote on my code and it's a pain. I was wondering, if I have code like that:\n\n```Zygote.@adjoint function f(...)\n   ....\n   function adjoint_of_f(ybar)\n       ....\n   end\n   return y, adjoint_of_f(ybar)\nend```\nand I try to do `Zygote.pullback(p -&gt; Zygote.pullback(f, ...), ...)` , will it try to differentiate `adjoint_of_f` or just for some reason `f` itself twice. For some reason it seems to be doing the latter","user":"UKJSNT1QR","ts":"1615224891.274400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Je=7P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm trying to make nested derivatives work with Zygote on my code and it's a pain. I was wondering, if I have code like that:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Zygote.@adjoint function f(...)\n   ....\n   function adjoint_of_f(ybar)\n       ....\n   end\n   return y, adjoint_of_f(ybar)\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nand I try to do "},{"type":"text","text":"Zygote.pullback(p -> Zygote.pullback(f, ...), ...)","style":{"code":true}},{"type":"text","text":" , will it try to differentiate "},{"type":"text","text":"adjoint_of_f","style":{"code":true}},{"type":"text","text":" or just for some reason "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" itself twice. For some reason it seems to be doing the latter"}]}]}]},{"client_msg_id":"e4395fbd-f8c8-47ec-acd7-cf84b59ed697","type":"message","text":"I'm mostly completely unable to understand what Zygote stacktraces are trying to tell me","user":"UKJSNT1QR","ts":"1615225007.275200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nN0C","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm mostly completely unable to understand what Zygote stacktraces are trying to tell me"}]}]}]},{"client_msg_id":"2ec58662-9da3-41a4-a504-aa805a131dd4","type":"message","text":"It'll AD the definition of rule as well as the adjoint_of_f","user":"U674T3KB3","ts":"1615225078.276200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iCF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It'll AD the definition of rule as well as the adjoint_of_f"}]}]}]},{"client_msg_id":"36cb5c42-eb26-4a5b-a87e-db2a85d9582a","type":"message","text":"But yeah, stack traces are a problem. Still trying to figure out what to do about that in diffractor","user":"U674T3KB3","ts":"1615225116.277000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tvrf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But yeah, stack traces are a problem. Still trying to figure out what to do about that in diffractor"}]}]}],"thread_ts":"1615225116.277000","reply_count":1,"reply_users_count":1,"latest_reply":"1615225180.278200","reply_users":["UM30MT6RF"],"subscribed":false},{"client_msg_id":"b4241ab6-fe5d-46e2-b82a-c9a6aaeb5aec","type":"message","text":"Ok, I was getting confused because the last \"understandable\" trace was pointing to some line in the body of `f`  itself and I was wondering why it would even be running that code. Is possible to define a Zygote.@adjoint of a Zygote.@adjoint to sidestep that problem?","user":"UKJSNT1QR","ts":"1615225214.279000","team":"T68168MUP","edited":{"user":"UKJSNT1QR","ts":"1615225229.000000"},"blocks":[{"type":"rich_text","block_id":"heZXL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok, I was getting confused because the last \"understandable\" trace was pointing to some line in the body of "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":"  itself and I was wondering why it would even be running that code. Is possible to define a Zygote.@adjoint of a Zygote.@adjoint to sidestep that problem?"}]}]}]},{"client_msg_id":"7dce3670-28eb-4ed2-b0f3-65f0b14214ea","type":"message","text":"Generally the way to do that is to pull out the forward part into a separate function and define an adjoint for that","user":"U674T3KB3","ts":"1615225314.280900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JgQ7O","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Generally the way to do that is to pull out the forward part into a separate function and define an adjoint for that"}]}]}]},{"client_msg_id":"a9476159-3852-406f-bf9c-c81b8ce725f2","type":"message","text":"hi guys, im trying to implement a method where i take successive derivatives of a function, and expose it as a new method. my input vector is ~ 5 element, and each function outputs a scalar. however when taking successive gradients, its slowing down significantly. Currently im using ForwardDiff, but if its better to use a different library for something like this, i would like to know!","user":"U01A38DLY8N","ts":"1615279087.285400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UMVq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hi guys, im trying to implement a method where i take successive derivatives of a function, and expose it as a new method. my input vector is ~ 5 element, and each function outputs a scalar. however when taking successive gradients, its slowing down significantly. Currently im using ForwardDiff, but if its better to use a different library for something like this, i would like to know!"}]}]}],"thread_ts":"1615279087.285400","reply_count":5,"reply_users_count":2,"latest_reply":"1615280030.286300","reply_users":["U01A38DLY8N","U6A936746"],"subscribed":false},{"client_msg_id":"05438f24-bfc7-454e-a51f-4b2324f70427","type":"message","text":"If I have something like\n\n```applychain(fs::Tuple, x, p) = applychain(Base.tail(fs), first(fs)(x,p[1:paramlength(first(fs))]), p[(paramlength(first(fs))+1):end])```\nIf I take its pullback (with Zygote) twice, I get:\n```ERROR: Mutating arrays is not supported\nStacktrace:\n [1] (::Zygote.var\"#376#377\")(::Nothing) at /home/guillaume/.julia/packages/Zygote/KpME9/src/lib/array.jl:61\n [2] (::Zygote.var\"#2271#back#378\"{Zygote.var\"#376#377\"})(::Nothing) at /home/guillaume/.julia/packages/ZygoteRules/OjfTt/src/adjoint.jl:59\n [3] materialize! at ./broadcast.jl:848 [inlined]\n [4] materialize! at ./broadcast.jl:845 [inlined]\n [5] materialize! at ./broadcast.jl:841 [inlined]\n [6] (::typeof(∂(materialize!)))(::Nothing) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [7] #364 at /home/guillaume/.julia/packages/Zygote/KpME9/src/lib/array.jl:42 [inlined]\n [8] (::typeof(∂(λ)))(::Nothing) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [9] #2225#back at /home/guillaume/.julia/packages/ZygoteRules/OjfTt/src/adjoint.jl:59 [inlined]\n [10] (::typeof(∂(λ)))(::Nothing) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [11] applychain at /home/guillaume/.julia/packages/DiffEqFlux/lS4Sa/src/fast_layers.jl:20 [inlined]\n [12] (::typeof(∂(λ)))(::Tuple{Nothing,Nothing,CuArray{Float32,3},Nothing}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [13] FastChain at /home/guillaume/.julia/packages/DiffEqFlux/lS4Sa/src/fast_layers.jl:21 [inlined]\n [14] (::typeof(∂(λ)))(::Tuple{Nothing,CuArray{Float32,3},Nothing}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [15] #89 at ./REPL[52]:2 [inlined]\n [16] (::typeof(∂(λ)))(::Tuple{Nothing,CuArray{Float32,3}}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [17] #41 at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface.jl:40 [inlined]\n [18] (::typeof(∂(λ)))(::Tuple{CuArray{Float32,3}}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [19] ftest2 at ./REPL[52]:3 [inlined]\n [20] (::typeof(∂(ftest2)))(::CuArray{Float32,3}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [21] (::Zygote.var\"#41#42\"{typeof(∂(ftest2))})(::CuArray{Float32,3}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface.jl:40\n [22] top-level scope at REPL[54]:1```\nHow do you make things safe of  `ERROR: Mutating arrays is not supported` when differentiating twice ?","user":"UKJSNT1QR","ts":"1615310762.288400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Z3it","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If I have something like\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"applychain(fs::Tuple, x, p) = applychain(Base.tail(fs), first(fs)(x,p[1:paramlength(first(fs))]), p[(paramlength(first(fs))+1):end])"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"If I take its pullback (with Zygote) twice, I get:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"ERROR: Mutating arrays is not supported\nStacktrace:\n [1] (::Zygote.var\"#376#377\")(::Nothing) at /home/guillaume/.julia/packages/Zygote/KpME9/src/lib/array.jl:61\n [2] (::Zygote.var\"#2271#back#378\"{Zygote.var\"#376#377\"})(::Nothing) at /home/guillaume/.julia/packages/ZygoteRules/OjfTt/src/adjoint.jl:59\n [3] materialize! at ./broadcast.jl:848 [inlined]\n [4] materialize! at ./broadcast.jl:845 [inlined]\n [5] materialize! at ./broadcast.jl:841 [inlined]\n [6] (::typeof(∂(materialize!)))(::Nothing) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [7] #364 at /home/guillaume/.julia/packages/Zygote/KpME9/src/lib/array.jl:42 [inlined]\n [8] (::typeof(∂(λ)))(::Nothing) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [9] #2225#back at /home/guillaume/.julia/packages/ZygoteRules/OjfTt/src/adjoint.jl:59 [inlined]\n [10] (::typeof(∂(λ)))(::Nothing) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [11] applychain at /home/guillaume/.julia/packages/DiffEqFlux/lS4Sa/src/fast_layers.jl:20 [inlined]\n [12] (::typeof(∂(λ)))(::Tuple{Nothing,Nothing,CuArray{Float32,3},Nothing}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [13] FastChain at /home/guillaume/.julia/packages/DiffEqFlux/lS4Sa/src/fast_layers.jl:21 [inlined]\n [14] (::typeof(∂(λ)))(::Tuple{Nothing,CuArray{Float32,3},Nothing}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [15] #89 at ./REPL[52]:2 [inlined]\n [16] (::typeof(∂(λ)))(::Tuple{Nothing,CuArray{Float32,3}}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [17] #41 at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface.jl:40 [inlined]\n [18] (::typeof(∂(λ)))(::Tuple{CuArray{Float32,3}}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [19] ftest2 at ./REPL[52]:3 [inlined]\n [20] (::typeof(∂(ftest2)))(::CuArray{Float32,3}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [21] (::Zygote.var\"#41#42\"{typeof(∂(ftest2))})(::CuArray{Float32,3}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface.jl:40\n [22] top-level scope at REPL[54]:1"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"How do you make things safe of  "},{"type":"text","text":"ERROR: Mutating arrays is not supported","style":{"code":true}},{"type":"text","text":" when differentiating twice ?"}]}]}]},{"client_msg_id":"7bf7336c-c885-4470-87c0-539ed23cb4c7","type":"message","text":"Would providing ChainRules adjoints for GraphBLAS be a reasonable gsoc idea?","user":"U017D4RFTFC","ts":"1615335127.292600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EHgRJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Would providing ChainRules adjoints for GraphBLAS be a reasonable gsoc idea?"}]}]}],"reactions":[{"name":"+1","users":["U6A936746"],"count":1}]},{"client_msg_id":"2f898699-22ae-4438-841a-921ac07b9201","type":"message","text":"It's something I'm already working on after some very generous help from <@U6A936746> a couple months back.","user":"U017D4RFTFC","ts":"1615335254.293700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"30kG0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's something I'm already working on after some very generous help from "},{"type":"user","user_id":"U6A936746"},{"type":"text","text":" a couple months back."}]}]}],"thread_ts":"1615335254.293700","reply_count":3,"reply_users_count":2,"latest_reply":"1615335375.294500","reply_users":["U6A936746","U017D4RFTFC"],"subscribed":false},{"client_msg_id":"5c8345cd-2f58-468c-8d48-e96adc11b6f5","type":"message","text":"Who should I ping about mentoring for that?","user":"U017D4RFTFC","ts":"1615338848.295500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tV3lC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Who should I ping about mentoring for that?"}]}]}],"thread_ts":"1615338848.295500","reply_count":1,"reply_users_count":1,"latest_reply":"1615338993.295600","reply_users":["U6A936746"],"subscribed":false},{"client_msg_id":"b28019df-fa30-45be-a101-45d2c61c0540","type":"message","text":"Some people in here might be interested in this post: <https://www.stochasticlifestyle.com/generalizing-automatic-differentiation-to-automatic-sparsity-uncertainty-stability-and-parallelism/>","user":"U69BL50BF","ts":"1615384487.298600","team":"T68168MUP","attachments":[{"service_name":"Stochastic Lifestyle","title":"Generalizing Automatic Differentiation to Automatic Sparsity, Uncertainty, Stability, and Parallelism - Stochastic Lifestyle","title_link":"https://www.stochasticlifestyle.com/generalizing-automatic-differentiation-to-automatic-sparsity-uncertainty-stability-and-parallelism/","text":"Automatic differentiation is a \"compiler trick\" whereby a code that calculates f(x) is transformed into a code that calculates f'(x). This trick and its two forms, forward and reverse mode automatic differentiation, have become the pervasive backbone behind all of the machine learning libraries. If you ask what PyTorch or Flux.jl is doing that's special, the answer is really that it's doing automatic differentiation over some functions. What I want to dig into in this blog post is a simple question: what is the trick behind automatic differentiation, why is it always differentiation, and are there other mathematical problems we can be focusing this trick towards? While very technical discussions on this can be found in our recent paper and descriptions of methods like intrusive uncertainty quantification, I want to give a high-level overview that really describes some of ... READ MORE","fallback":"Stochastic Lifestyle: Generalizing Automatic Differentiation to Automatic Sparsity, Uncertainty, Stability, and Parallelism - Stochastic Lifestyle","thumb_url":"https://www.stochasticlifestyle.com/wp-content/themes/chrisrack/style/faviPic2.PNG","fields":[{"title":"Written by","value":"Christopher Rackauckas","short":true},{"title":"Est. reading time","value":"14 minutes","short":true}],"ts":1615383832,"from_url":"https://www.stochasticlifestyle.com/generalizing-automatic-differentiation-to-automatic-sparsity-uncertainty-stability-and-parallelism/","thumb_width":669,"thumb_height":891,"service_icon":"https://i2.wp.com/www.stochasticlifestyle.com/wp-content/uploads/2016/01/cropped-faviPic.png?fit=180%2C180&#038;ssl=1","id":1,"original_url":"https://www.stochasticlifestyle.com/generalizing-automatic-differentiation-to-automatic-sparsity-uncertainty-stability-and-parallelism/"}],"blocks":[{"type":"rich_text","block_id":"fIaJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Some people in here might be interested in this post: "},{"type":"link","url":"https://www.stochasticlifestyle.com/generalizing-automatic-differentiation-to-automatic-sparsity-uncertainty-stability-and-parallelism/"}]}]}],"thread_ts":"1615384487.298600","reply_count":1,"reply_users_count":1,"latest_reply":"1615384803.298900","reply_users":["U01C2E6TYEM"],"subscribed":false,"reactions":[{"name":"+1","users":["UDXST8ARK","U01C2E6TYEM"],"count":2}]}]}