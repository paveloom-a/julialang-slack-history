{"cursor": 2, "messages": [{"client_msg_id":"c52247f9-e8d7-4cf3-91dc-891134d47558","type":"message","text":"&gt; ZygoteRules already made us go through standards proliferation once. \nZygoteRules was an issue and we knew that from the start.","user":"U69BL50BF","ts":"1612549014.194700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KSMLy","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"ZygoteRules already made us go through standards proliferation once. "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"ZygoteRules was an issue and we knew that from the start."}]}]}],"thread_ts":"1612549014.194700","reply_count":1,"reply_users_count":1,"latest_reply":"1612549226.201500","reply_users":["U6A936746"],"subscribed":false},{"client_msg_id":"86c034e5-37bb-4342-bd6a-fe25252680d9","type":"message","text":"I think we know we need to center around something ChainRules does or else it's AD-specific","user":"U69BL50BF","ts":"1612549033.195400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"paJXi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think we know we need to center around something ChainRules does or else it's AD-specific"}]}]}]},{"client_msg_id":"d7667176-2547-4d73-9468-ce7fe409086c","type":"message","text":"and ChainRules needs to agree to it in order to ever hope to solve the higher order AD problem","user":"U69BL50BF","ts":"1612549047.196300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Cz12","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and ChainRules needs to agree to it in order to ever hope to solve the higher order AD problem"}]}]}]},{"client_msg_id":"eb9aa792-69ef-4d2d-8abc-52b2493d956a","type":"message","text":"For those issues <@U6A936746> perhaps it makes sense for ChainRulesCore to depend on the API package.","user":"U85JBUGGP","ts":"1612549048.196400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d18","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For those issues "},{"type":"user","user_id":"U6A936746"},{"type":"text","text":" perhaps it makes sense for ChainRulesCore to depend on the API package."}]}]}]},{"client_msg_id":"eb5fc992-2e63-44ba-ab23-cd79813ca1d2","type":"message","text":"But the API package is useful on its own as well.","user":"U85JBUGGP","ts":"1612549071.197000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JMLo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But the API package is useful on its own as well."}]}]}]},{"client_msg_id":"0638abaf-db2d-48b0-8807-d886a2a3d5b4","type":"message","text":"so that packages can implement the API without relying on ChainRules?","user":"U69BL50BF","ts":"1612549095.197900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tAM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so that packages can implement the API without relying on ChainRules?"}]}]}]},{"client_msg_id":"ba326535-6365-484c-84a4-01a284073f82","type":"message","text":"yes","user":"U85JBUGGP","ts":"1612549099.198300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O7Npo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes"}]}]}]},{"client_msg_id":"847daff3-dbd0-42ea-b86b-98f97bbfd5bd","type":"message","text":"&gt; we can throw in parallelism support to make it fancier and more useful\nYeah that whole issue.","user":"U69BL50BF","ts":"1612549100.198400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"H6N","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"we can throw in parallelism support to make it fancier and more useful"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah that whole issue."}]}]}]},{"client_msg_id":"1d6f0e40-618c-473f-bec6-455888e5a244","type":"message","text":"I do want a parallel ForwardDiff.gradient but probably can't add it to the package, and can't add it out of the package :scream:","user":"U69BL50BF","ts":"1612549117.199100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PjfE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I do want a parallel ForwardDiff.gradient but probably can't add it to the package, and can't add it out of the package "},{"type":"emoji","name":"scream"}]}]}]},{"client_msg_id":"c512b058-555b-4a86-b7bb-f6271adee4a5","type":"message","text":"I guess one thing can do is like Tables.jl and TablesInterfaces.jl\nwhere you *could* implement TableInterfaces.jl directly.\nOr you could just implement Tables.jl and get TablesInterfaces.jl for free.\n\nSImilarly, you could provides a `ConfiguredRRule` for ChainRulesCore,\nand get your `AbstractAD.jacobean`, `AbstractAD.gradient` etc for free.","user":"U6A936746","ts":"1612549161.200300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Y0XNo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess one thing can do is like Tables.jl and TablesInterfaces.jl\nwhere you "},{"type":"text","text":"could","style":{"bold":true}},{"type":"text","text":" implement TableInterfaces.jl directly.\nOr you could just implement Tables.jl and get TablesInterfaces.jl for free.\n\nSImilarly, you could provides a "},{"type":"text","text":"ConfiguredRRule","style":{"code":true}},{"type":"text","text":" for ChainRulesCore,\nand get your "},{"type":"text","text":"AbstractAD.jacobean","style":{"code":true}},{"type":"text","text":", `AbstractAD.gradient` etc for free."}]}]}]},{"client_msg_id":"462f4951-77c7-4e65-a2af-9640de5315e6","type":"message","text":"&gt; I do want a parallel ForwardDiff.gradient but probably can’t add it to the package, and can’t add it out of the package :scream:\nwe can have parametric AD backends :slightly_smiling_face: `ParallelAD{&lt;:AbstractForwardMode}`","user":"U85JBUGGP","ts":"1612549165.200400","team":"T68168MUP","edited":{"user":"U85JBUGGP","ts":"1612549181.000000"},"blocks":[{"type":"rich_text","block_id":"qLSMz","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"I do want a parallel ForwardDiff.gradient but probably can’t add it to the package, and can’t add it out of the package "},{"type":"emoji","name":"scream"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"we can have parametric AD backends "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":" "},{"type":"text","text":"ParallelAD{<:AbstractForwardMode}","style":{"code":true}}]}]}]},{"client_msg_id":"890c1853-b078-47f5-989b-f0f0e839dcbb","type":"message","text":"yeah","user":"U69BL50BF","ts":"1612549175.200600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rs28","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah"}]}]}]},{"client_msg_id":"ffda5edd-e934-4e87-91ed-6de0d1d2d327","type":"message","text":"that would just require","user":"U69BL50BF","ts":"1612549179.200800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZFUpA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that would just require"}]}]}]},{"client_msg_id":"379d7808-8a3b-4a48-9899-b0be1669e10c","type":"message","text":"`jacobian(f,x,ForwardDiffJL(),cache_stuff;color,sparsity,...)`","user":"U69BL50BF","ts":"1612549189.201100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"joZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"jacobian(f,x,ForwardDiffJL(),cache_stuff;color,sparsity,...)","style":{"code":true}}]}]}]},{"client_msg_id":"ef64c795-5d65-48fb-9d52-286ac2c047be","type":"message","text":"because then as an instance it can have a default","user":"U69BL50BF","ts":"1612549196.201400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pnWyu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"because then as an instance it can have a default"}]}]}]},{"client_msg_id":"73ad28af-461c-4a39-a1aa-72bece525346","type":"message","text":"&gt; SImilarly, you could provides a `ConfiguredRRule` for ChainRulesCore,\n&gt; and get your `AbstractAD.jacobean`, `AbstractAD.gradient` etc for free.","user":"U69BL50BF","ts":"1612549237.202000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nbw","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"SImilarly, you could provides a "},{"type":"text","text":"ConfiguredRRule","style":{"code":true}},{"type":"text","text":" for ChainRulesCore,\nand get your "},{"type":"text","text":"AbstractAD.jacobean","style":{"code":true}},{"type":"text","text":", `AbstractAD.gradient` etc for free."}]}]}]},{"client_msg_id":"66e1959a-35b9-4d35-a0ac-1df84c2e993a","type":"message","text":"I think we need a bit more","user":"U69BL50BF","ts":"1612549239.202200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"N4v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think we need a bit more"}]}]}]},{"client_msg_id":"65cc9550-e4ac-4b37-971c-d884597ae49f","type":"message","text":"because this context object will be needed in the rule definitions","user":"U69BL50BF","ts":"1612549249.202800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Hfi8J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"because this context object will be needed in the rule definitions"}]}]}]},{"client_msg_id":"8efb4a0d-92de-4804-a063-f2a853f5b4b9","type":"message","text":"I think it'll need to get pasted in there somehow","user":"U69BL50BF","ts":"1612549262.203300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/wq5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think it'll need to get pasted in there somehow"}]}]}]},{"client_msg_id":"92e6e617-4d75-4b0e-90de-fdf9561cc962","type":"message","text":"so you can know the type that comes from the current differentiator","user":"U69BL50BF","ts":"1612549271.203700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aMly","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so you can know the type that comes from the current differentiator"}]}]}]},{"client_msg_id":"ee78b8c4-8a13-4106-96b9-bde3d09b5f96","type":"message","text":"to put it into the higher order AD call","user":"U69BL50BF","ts":"1612549277.204100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"z58","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"to put it into the higher order AD call"}]}]}]},{"client_msg_id":"9750ccc3-1e75-4199-b702-daa8497ce138","type":"message","text":"but that would be a breaking change :shrug:","user":"U69BL50BF","ts":"1612549284.204400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aWdOY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but that would be a breaking change "},{"type":"emoji","name":"shrug"}]}]}]},{"client_msg_id":"8d51836a-4252-4142-a76e-003c3ae50a03","type":"message","text":"`ConfiguredRRule`  is almost certainly an abstract type that you can put whatever junk your AD needs into.","user":"U6A936746","ts":"1612549317.205200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3lJoZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ConfiguredRRule","style":{"code":true}},{"type":"text","text":"  is almost certainly an abstract type that you can put whatever junk your AD needs into."}]}]}]},{"client_msg_id":"74a60654-1e14-4768-b9b0-21173c55d778","type":"message","text":"It’s whole point is to provide more-or-less AD specific stuff into the `rrule` definitions.","user":"U6A936746","ts":"1612549391.206400","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1612549397.000000"},"blocks":[{"type":"rich_text","block_id":"ZW5S","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It’s whole point is to provide more-or-less AD specific stuff into the "},{"type":"text","text":"rrule","style":{"code":true}},{"type":"text","text":" definitions."}]}]}]},{"client_msg_id":"539d7276-491b-4466-94d3-3afdeb6d70cb","type":"message","text":"while abstracting it enough that you are not just making rules for one AD","user":"U6A936746","ts":"1612549413.207300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"992","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"while abstracting it enough that you are not just making rules for one AD"}]}]}]},{"client_msg_id":"adccc0b9-c0dc-4f45-963b-a68f8758dffe","type":"message","text":"So I am not too familiar with the ChainRules story and technical requirements here but the idea of a unified AD API is reinvented over and over again in so many packages in Julia. This is the main problem I want to solve. If we can cater to the needs of ChainRulesCore as well with that package, then great. I think it’s not impossible with some coordination.","user":"U85JBUGGP","ts":"1612549481.208400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"clqV1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So I am not too familiar with the ChainRules story and technical requirements here but the idea of a unified AD API is reinvented over and over again in so many packages in Julia. This is the main problem I want to solve. If we can cater to the needs of ChainRulesCore as well with that package, then great. I think it’s not impossible with some coordination."}]}]}]},{"client_msg_id":"3974411a-edfc-49b7-906d-2f5523186675","type":"message","text":"I don’t think you can cater to the needs of ChainRulesCore with such a package","user":"U6A936746","ts":"1612549509.208900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j7O","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don’t think you can cater to the needs of ChainRulesCore with such a package"}]}]}]},{"client_msg_id":"bf874d17-f80f-4dcb-80b6-126687bf322a","type":"message","text":"it has the direction backwards","user":"U6A936746","ts":"1612549530.209400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0H7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it has the direction backwards"}]}]}]},{"client_msg_id":"94e8f22a-71ca-412e-8c57-6c5f69db527b","type":"message","text":"ChainRulesCore can cater to the needs of such a package","user":"U6A936746","ts":"1612549532.209600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0=3X5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ChainRulesCore can cater to the needs of such a package"}]}]}]},{"client_msg_id":"53888585-ddeb-4a0a-8137-447818c6b696","type":"message","text":"it can define an API, and then ForwardDiff.jl, FiniteDiff.jl, FiniteDifferences.jl, Zygote.jl, etc. can go on that API","user":"U69BL50BF","ts":"1612549557.210400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6d7dw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it can define an API, and then ForwardDiff.jl, FiniteDiff.jl, FiniteDifferences.jl, Zygote.jl, etc. can go on that API"}]}]}]},{"client_msg_id":"aad73bc4-4cca-43aa-ac93-73709bbab910","type":"message","text":"yes then ChainRulesCore only needs to “deal with” a single API","user":"U85JBUGGP","ts":"1612549576.211200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8SjGE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes then ChainRulesCore only needs to “deal with” a single API"}]}]}]},{"client_msg_id":"bf568a84-0aff-4925-8d66-3b1b9c8c44cf","type":"message","text":"no, still backwards","user":"U6A936746","ts":"1612549582.211600","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1612549591.000000"},"blocks":[{"type":"rich_text","block_id":"Wrjwq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no, still backwards"}]}]}]},{"client_msg_id":"569b7125-8d76-455a-9420-1f6b1cff288e","type":"message","text":"most of the packages are in JuliaDiff so there is some ability to move everything in tandem (and not break the old APIs)","user":"U69BL50BF","ts":"1612549583.211700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Zx6x","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"most of the packages are in JuliaDiff so there is some ability to move everything in tandem (and not break the old APIs)"}]}]}]},{"client_msg_id":"fec9f1c6-9849-4f29-8e81-4e823f2c8b12","type":"message","text":"&gt; no, still backwards\nIf so, then perhaps it makes sense to have 2 implementations initially and see if we can combine them later. The abstract AD package can be &lt; 50 locs. So rewriting it a few times is not hard.","user":"U85JBUGGP","ts":"1612549655.213500","team":"T68168MUP","edited":{"user":"U85JBUGGP","ts":"1612549666.000000"},"blocks":[{"type":"rich_text","block_id":"O7y","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"no, still backwards"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"If so, then perhaps it makes sense to have 2 implementations initially and see if we can combine them later. The abstract AD package can be < 50 locs. So rewriting it a few times is not hard."}]}]}],"reactions":[{"name":"+1","users":["U69BL50BF","U6A936746"],"count":2}]},{"client_msg_id":"43268366-326a-42dc-97e6-fe58831dcf1b","type":"message","text":"perfect is the enemy of the good here.","user":"U69BL50BF","ts":"1612549726.215200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QTK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"perfect is the enemy of the good here."}]}]}]},{"client_msg_id":"8745e29f-b584-4bb2-a0da-ec5dfee5471b","type":"message","text":"To be clear why ChainRulesCore can’t benefit from such a package\nIt is because you need more information in a `ConfiguredRRule` than `vjp` (rrule-like) or `jvp` (frule-like)\nyou need both (or to say you won’t provide one)\nyou need a bunch of traits about what rules should be allowed to be loaded (no mutation for Zygote).","user":"U6A936746","ts":"1612549774.216000","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1612549848.000000"},"blocks":[{"type":"rich_text","block_id":"dsq0B","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"To be clear why ChainRulesCore can’t benefit from such a package\nIt is because you need more information in a "},{"type":"text","text":"ConfiguredRRule","style":{"code":true}},{"type":"text","text":" than "},{"type":"text","text":"vjp","style":{"code":true}},{"type":"text","text":" (rrule-like) or "},{"type":"text","text":"jvp","style":{"code":true}},{"type":"text","text":" (frule-like)\nyou need both (or to say you won’t provide one)\nyou need a bunch of traits about what rules should be allowed to be loaded (no mutation for Zygote)."}]}]}]},{"client_msg_id":"dc18b870-d2e9-4815-b4d6-06e3db3b2d2d","type":"message","text":"In contrast you only *need* frule-like or rrule-like to implement jacobian, gradient, hessian, etc. (though might be some wins from doing them directly )","user":"U6A936746","ts":"1612549832.217600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RVYZk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In contrast you only "},{"type":"text","text":"need","style":{"bold":true}},{"type":"text","text":" frule-like or rrule-like to implement jacobian, gradient, hessian, etc. (though might be some wins from doing them directly )"}]}]}]},{"client_msg_id":"c965c1c3-eb67-412e-9ab6-0f7e623ff7c0","type":"message","text":"I see. These sounds like features that only ChainRules-compatible AD packages can define anyways. So the scope here is different. Because I am targeting all AD packages with the API package.","user":"U85JBUGGP","ts":"1612549842.217900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Yx=lC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see. These sounds like features that only ChainRules-compatible AD packages can define anyways. So the scope here is different. Because I am targeting all AD packages with the API package."}]}]}]},{"client_msg_id":"cd2543a5-c203-44ed-a5ef-97c5261c9357","type":"message","text":"No, not really, such rules don’t actually depend using anything from ChainRules except when dealing with structs.\nThough the extra stuff is not useful if not defining rules.","user":"U6A936746","ts":"1612549886.218900","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1612549982.000000"},"blocks":[{"type":"rich_text","block_id":"0VV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No, not really, such rules don’t actually depend using anything from ChainRules except when dealing with structs.\nThough the extra stuff is not useful if not defining rules."}]}]}]},{"client_msg_id":"94c14ea2-7ed1-45b7-8585-d1d77a94531e","type":"message","text":"It's similar. Step 1 is to get everyone onto the same API. Step 2 is get traits to differentiate methods (pun intended). Step 3 is to start writing AD-unaware high order rules.","user":"U69BL50BF","ts":"1612549895.219400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mger2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's similar. Step 1 is to get everyone onto the same API. Step 2 is get traits to differentiate methods (pun intended). Step 3 is to start writing AD-unaware high order rules."}]}]}]},{"client_msg_id":"02130127-08ea-4c51-a1ef-98fb98b29ea0","type":"message","text":"I stand by this statement\n<https://julialang.slack.com/archives/C6G240ENA/p1612549161200300>","user":"U6A936746","ts":"1612549999.221200","team":"T68168MUP","attachments":[{"from_url":"https://julialang.slack.com/archives/C6G240ENA/p1612549161200300","fallback":"[February 5th, 2021 10:19 AM] oxinabox: I guess one thing can do is like Tables.jl and TablesInterfaces.jl\nwhere you *could* implement TableInterfaces.jl directly.\nOr you could just implement Tables.jl and get TablesInterfaces.jl for free.\n\nSImilarly, you could provides a `ConfiguredRRule` for ChainRulesCore,\nand get your `AbstractAD.jacobean`, `AbstractAD.gradient` etc for free.","ts":"1612549161.200300","author_id":"U6A936746","author_subname":"Lyndon White","channel_id":"C6G240ENA","channel_name":"autodiff","is_msg_unfurl":true,"text":"I guess one thing can do is like Tables.jl and TablesInterfaces.jl\nwhere you *could* implement TableInterfaces.jl directly.\nOr you could just implement Tables.jl and get TablesInterfaces.jl for free.\n\nSImilarly, you could provides a `ConfiguredRRule` for ChainRulesCore,\nand get your `AbstractAD.jacobean`, `AbstractAD.gradient` etc for free.","author_name":"Lyndon White","author_link":"https://julialang.slack.com/team/U6A936746","author_icon":"https://avatars.slack-edge.com/2017-07-25/216502576448_36aaf550196bfa49acdc_48.jpg","mrkdwn_in":["text"],"id":1,"original_url":"https://julialang.slack.com/archives/C6G240ENA/p1612549161200300","footer":"Posted in #autodiff"}],"blocks":[{"type":"rich_text","block_id":"/hl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I stand by this statement\n"},{"type":"link","url":"https://julialang.slack.com/archives/C6G240ENA/p1612549161200300"}]}]}]},{"client_msg_id":"ae7ca0a0-3f45-4899-b7e3-826aa1bc49f8","type":"message","text":"&gt; No, not really\n&gt; you need a bunch of traits about what rules should be allowed to be loaded (no mutation for Zygote).\nThese traits can only be defined for a package and be visible to ChainRulesCore if the AD package depends on ChainRulesCore. But I suppose that’s your plan anyways.","user":"U85JBUGGP","ts":"1612550004.221500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7nz","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"No, not really"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"you need a bunch of traits about what rules should be allowed to be loaded (no mutation for Zygote)."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nThese traits can only be defined for a package and be visible to ChainRulesCore if the AD package depends on ChainRulesCore. But I suppose that’s your plan anyways."}]}]}],"thread_ts":"1612550004.221500","reply_count":6,"reply_users_count":2,"latest_reply":"1612550109.222900","reply_users":["U6A936746","U85JBUGGP"],"subscribed":false},{"type":"message","subtype":"thread_broadcast","text":"I see. I think we don’t disagree that a common API is needed. We just disagree on where it should live.","user":"U85JBUGGP","ts":"1612550077.222300","thread_ts":"1612550004.221500","root":{"client_msg_id":"ae7ca0a0-3f45-4899-b7e3-826aa1bc49f8","type":"message","text":"&gt; No, not really\n&gt; you need a bunch of traits about what rules should be allowed to be loaded (no mutation for Zygote).\nThese traits can only be defined for a package and be visible to ChainRulesCore if the AD package depends on ChainRulesCore. But I suppose that’s your plan anyways.","user":"U85JBUGGP","ts":"1612550004.221500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7nz","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"No, not really"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"you need a bunch of traits about what rules should be allowed to be loaded (no mutation for Zygote)."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nThese traits can only be defined for a package and be visible to ChainRulesCore if the AD package depends on ChainRulesCore. But I suppose that’s your plan anyways."}]}]}],"thread_ts":"1612550004.221500","reply_count":6,"reply_users_count":2,"latest_reply":"1612550109.222900","reply_users":["U6A936746","U85JBUGGP"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"wOGCW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see. I think we don’t disagree that a common API is needed. We just disagree on where it should live."}]}]}],"client_msg_id":"d34e5c9c-5f43-4a97-919b-17999445d568","edited":{"user":"U85JBUGGP","ts":"1612550088.000000"}},{"client_msg_id":"48293c24-7cdd-4b98-8c76-1d55302a332c","type":"message","text":"<@U85JBUGGP> I have bumped your privs up to owner on JuliaDiff. So you can create a repo there.\n(Plus :bus: factor)","user":"U6A936746","ts":"1612550291.226200","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1612550305.000000"},"blocks":[{"type":"rich_text","block_id":"8QoNC","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U85JBUGGP"},{"type":"text","text":" I have bumped your privs up to owner on JuliaDiff. So you can create a repo there.\n(Plus "},{"type":"emoji","name":"bus"},{"type":"text","text":" factor)"}]}]}],"reactions":[{"name":"heart","users":["U85JBUGGP"],"count":1}]},{"client_msg_id":"45e82003-af32-4d65-9eec-4f212b4113ab","type":"message","text":"So the main reason for wanting a separate package is that `ChainRulesCore` is more ambitious and targets a different layer of abstraction than the one I have in mind. This means that it can develop in ways, albeit great, that are not really necessary for a package like ~`FiniteDifferences`~ `ForwardDiff` to do its job. So I don’t think ~`FiniteDifferences`~ `ForwardDiff` should depend on a moving target like `ChainRulesCore` when the AD API component can be as static as a rock living in its own distant package that no one really needs to touch. Just summarising my thoughts.","user":"U85JBUGGP","ts":"1612550366.227300","team":"T68168MUP","edited":{"user":"U85JBUGGP","ts":"1612550464.000000"},"blocks":[{"type":"rich_text","block_id":"QLGZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So the main reason for wanting a separate package is that "},{"type":"text","text":"ChainRulesCore","style":{"code":true}},{"type":"text","text":" is more ambitious and targets a different layer of abstraction than the one I have in mind. This means that it can develop in ways, albeit great, that are not really necessary for a package like "},{"type":"text","text":"FiniteDifferences","style":{"strike":true,"code":true}},{"type":"text","text":" "},{"type":"text","text":"ForwardDiff","style":{"code":true}},{"type":"text","text":" to do its job. So I don’t think "},{"type":"text","text":"FiniteDifferences","style":{"strike":true,"code":true}},{"type":"text","text":" "},{"type":"text","text":"ForwardDiff","style":{"code":true}},{"type":"text","text":" should depend on a moving target like "},{"type":"text","text":"ChainRulesCore","style":{"code":true}},{"type":"text","text":" when the AD API component can be as static as a rock living in its own distant package that no one really needs to touch. Just summarising my thoughts."}]}]}],"thread_ts":"1612550366.227300","reply_count":18,"reply_users_count":2,"latest_reply":"1612551173.234700","reply_users":["U6A936746","U85JBUGGP"],"subscribed":false},{"client_msg_id":"1effc0a8-a27d-452c-bc47-0f88a9211f60","type":"message","text":"For context:\n<https://github.com/JuliaDiff/ChainRulesCore.jl/issues/68> is the main blocker for ChainRulesCore 1.0\nWhich is the issue that will build the ConfiguredRRule.\nI don’t know how breaking it will be, probably not very, if at all.","user":"U6A936746","ts":"1612550971.233800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pjHz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For context:\n"},{"type":"link","url":"https://github.com/JuliaDiff/ChainRulesCore.jl/issues/68"},{"type":"text","text":" is the main blocker for ChainRulesCore 1.0\nWhich is the issue that will build the ConfiguredRRule.\nI don’t know how breaking it will be, probably not very, if at all."}]}]}]},{"client_msg_id":"a8df7a48-18b5-4a06-8f59-31775d3bea37","type":"message","text":"Name bikeshedding for the API package? `AbstractAD`?","user":"U85JBUGGP","ts":"1612551248.236100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tysOK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Name bikeshedding for the API package? "},{"type":"text","text":"AbstractAD","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1612551248.236100","reply_count":21,"reply_users_count":4,"latest_reply":"1612552183.242800","reply_users":["U6A936746","U85JBUGGP","UM30MT6RF","U69BL50BF"],"subscribed":false},{"client_msg_id":"1a89d73e-878a-45dc-8c25-2a773b998385","type":"message","text":"Unrelated: I am still annoyed `Zygote` called `Zygote.pullback` pullback.\nWe had a discusion a week before that where literally  everyone agreed the name for that operations could be many things, so long as it wasn’t `pullback`","user":"U6A936746","ts":"1612551383.237600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7cr=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Unrelated: I am still annoyed "},{"type":"text","text":"Zygote","style":{"code":true}},{"type":"text","text":" called "},{"type":"text","text":"Zygote.pullback","style":{"code":true}},{"type":"text","text":" pullback.\nWe had a discusion a week before that where literally  everyone agreed the name for that operations could be many things, so long as it wasn’t "},{"type":"text","text":"pullback","style":{"code":true}}]}]}]},{"client_msg_id":"be8064ff-505e-4f42-803a-fbcc3df9de61","type":"message","text":"I am also annoyed that someone registered a package called `HigherOrderDerivatives.jl` that is just a simple forward-mode AD that suffers from perturbation confusion if you try to nest it.","user":"U6A936746","ts":"1612551535.239500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UQpl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am also annoyed that someone registered a package called "},{"type":"text","text":"HigherOrderDerivatives.jl","style":{"code":true}},{"type":"text","text":" that is just a simple forward-mode AD that suffers from perturbation confusion if you try to nest it."}]}]}]},{"type":"message","subtype":"thread_broadcast","text":"Requesting:\n\n\n• gradient\n• jacobian\n• hessian\n• value_and_directional_derivative (not, jvp)\n• directional_derivative (for just the send return)\n• value_and_pullback (returns a pullback function)\n• pullback_at\n","user":"U6A936746","ts":"1612552250.243500","thread_ts":"1612548723.186800","root":{"client_msg_id":"cb824fc5-0fef-4d95-8d0b-44433b831b72","type":"message","text":"I think it should just define stub functions for:\n\n• gradient\n• jacobian\n• hessian\n• jvp\n• pullback","user":"U69BL50BF","ts":"1612548723.186800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4OCgT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think it should just define stub functions for:\n\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"gradient"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"jacobian"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"hessian"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"jvp"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"pullback"}]}],"style":"bullet","indent":0}]}],"thread_ts":"1612548723.186800","reply_count":1,"reply_users_count":1,"latest_reply":"1612552250.243500","reply_users":["U6A936746"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"=x8ba","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Requesting:\n\n\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"gradient"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"jacobian"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"hessian"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"value_and_directional_derivative (not, jvp)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"directional_derivative (for just the send return)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"value_and_pullback (returns a pullback function)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"pullback_at"}]}],"style":"bullet","indent":0},{"type":"rich_text_section","elements":[]}]}],"client_msg_id":"0d317e30-a907-4a71-a6a7-f40bb15cfd4b"},{"type":"message","subtype":"thread_broadcast","text":"Also got to have test suites so can be certain everything implements API the same.\n\nI would also suggest that such test-suite should use reflection to ensure that  extra kwarg and positional args that are not common to everything are not present\nSo that changing ADs is just a matter of changing out an object that holds *everything* that makes an AD special.\n(including e.g. caches if its using its own special caches)","user":"U6A936746","ts":"1612553246.246600","thread_ts":"1612548723.186800","root":{"client_msg_id":"cb824fc5-0fef-4d95-8d0b-44433b831b72","type":"message","text":"I think it should just define stub functions for:\n\n• gradient\n• jacobian\n• hessian\n• jvp\n• pullback","user":"U69BL50BF","ts":"1612548723.186800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4OCgT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think it should just define stub functions for:\n\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"gradient"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"jacobian"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"hessian"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"jvp"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"pullback"}]}],"style":"bullet","indent":0}]}],"thread_ts":"1612548723.186800","reply_count":4,"reply_users_count":2,"latest_reply":"1612553246.246600","reply_users":["U6A936746","U85JBUGGP"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"owqZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also got to have test suites so can be certain everything implements API the same.\n\nI would also suggest that such test-suite should use reflection to ensure that  extra kwarg and positional args that are not common to everything are not present\nSo that changing ADs is just a matter of changing out an object that holds "},{"type":"text","text":"everything","style":{"bold":true}},{"type":"text","text":" that makes an AD special.\n(including e.g. caches if its using its own special caches)"}]}]}],"client_msg_id":"12ef4f3d-9186-4fe0-ba45-600193e6b74a","edited":{"user":"U6A936746","ts":"1612553279.000000"}},{"client_msg_id":"a0783663-cfaa-4e10-b820-1625cdf32d8a","type":"message","text":"Can I use Coloring Vectors with ForwardDiff without needing SparseDiffTools?\nOr is one of SparseDiffTools key feature supporting that easily in ForwardDiff","user":"U6A936746","ts":"1612567975.249700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yiI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can I use Coloring Vectors with ForwardDiff without needing SparseDiffTools?\nOr is one of SparseDiffTools key feature supporting that easily in ForwardDiff"}]}]}]},{"client_msg_id":"95081eed-fab5-4a9d-ab22-cc7f51baa2e8","type":"message","text":"---\nInstead of sleeping I rewrote <http://JuliaDiff.org|JuliaDiff.org>\n<https://github.com/JuliaDiff/juliadiff.github.io/pull/13>\nbecause it has been annoying me for *years*","user":"U6A936746","ts":"1612570919.250400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"taJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"---\nInstead of sleeping I rewrote "},{"type":"link","url":"http://JuliaDiff.org","text":"JuliaDiff.org"},{"type":"text","text":"\n"},{"type":"link","url":"https://github.com/JuliaDiff/juliadiff.github.io/pull/13"},{"type":"text","text":"\nbecause it has been annoying me for "},{"type":"text","text":"years","style":{"bold":true}}]}]}],"reactions":[{"name":"heart","users":["UH8A351DJ","UHDQQ4GN6","UCZ7VBGUD"],"count":3}]},{"client_msg_id":"6657221f-84f2-43ca-993f-10d314040a8a","type":"message","text":"&gt; Or is one of SparseDiffTools key feature supporting that easily in ForwardDiff\nIn theory it can get upstreamed","user":"U69BL50BF","ts":"1612577176.251300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TCsB","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"Or is one of SparseDiffTools key feature supporting that easily in ForwardDiff"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"In theory it can get upstreamed"}]}]}]},{"client_msg_id":"65a1f82a-b066-4bc4-9321-2411afd78b87","type":"message","text":"in practice, ForwardDiff's seeding code is really wierd","user":"U69BL50BF","ts":"1612577186.251600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"b5M","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in practice, ForwardDiff's seeding code is really wierd"}]}]}],"reactions":[{"name":"+1","users":["U6A936746"],"count":1}]},{"client_msg_id":"8c4536fd-eea1-41ab-bfec-9e23f44a1840","type":"message","text":"<@U85JBUGGP> problem with `value_and_pushforward_function`\nis that it is not as efficient to implement as  the function that returns `value_and_tangent`  and takes in a primal value and input tangent.\n:thread:","user":"U6A936746","ts":"1612613042.258900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fLmD","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U85JBUGGP"},{"type":"text","text":" problem with "},{"type":"text","text":"value_and_pushforward_function","style":{"code":true}},{"type":"text","text":"\nis that it is not as efficient to implement as  the function that returns "},{"type":"text","text":"value_and_tangent","style":{"code":true}},{"type":"text","text":"  and takes in a primal value and input tangent.\n"},{"type":"emoji","name":"thread"}]}]}],"thread_ts":"1612613042.258900","reply_count":2,"reply_users_count":1,"latest_reply":"1612613178.260900","reply_users":["U6A936746"],"subscribed":false},{"client_msg_id":"104b6ec4-22da-4ce3-bd29-032b11ff02e6","type":"message","text":"Continuing off of <https://julialang.slack.com/archives/C6G240ENA/p1612612982258400?thread_ts=1612548723.186800&amp;cid=C6G240ENA>. Yes but I think the most basic high level interface is `jacobian` and `primalvalue`. A package can implement `jacobian` internally using pullbacks or pushforwards to apply the chain rules efficiently. But we can also derive those functions at a higher level using only `jacobian` and `primalvalue`.","user":"U85JBUGGP","ts":"1612613174.260700","team":"T68168MUP","attachments":[{"from_url":"https://julialang.slack.com/archives/C6G240ENA/p1612612982258400?thread_ts=1612548723.186800&amp;cid=C6G240ENA","fallback":"[February 6th, 2021 4:03 AM] oxinabox: not simpler to me, but maybe i broke my mind.\n\nWe should, I think, have jacobian fallback to them. Fiddly to avoid an infinite loop but I think we can do it.","ts":"1612612982.258400","author_id":"U6A936746","author_subname":"Lyndon White","channel_id":"C6G240ENA","channel_name":"autodiff","is_msg_unfurl":true,"is_reply_unfurl":true,"text":"not simpler to me, but maybe i broke my mind.\n\nWe should, I think, have jacobian fallback to them. Fiddly to avoid an infinite loop but I think we can do it.","author_name":"Lyndon White","author_link":"https://julialang.slack.com/team/U6A936746","author_icon":"https://avatars.slack-edge.com/2017-07-25/216502576448_36aaf550196bfa49acdc_48.jpg","mrkdwn_in":["text"],"id":1,"original_url":"https://julialang.slack.com/archives/C6G240ENA/p1612612982258400?thread_ts=1612548723.186800&amp;cid=C6G240ENA","footer":"From a thread in #autodiff"}],"blocks":[{"type":"rich_text","block_id":"Smc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Continuing off of "},{"type":"link","url":"https://julialang.slack.com/archives/C6G240ENA/p1612612982258400?thread_ts=1612548723.186800&cid=C6G240ENA"},{"type":"text","text":". Yes but I think the most basic high level interface is "},{"type":"text","text":"jacobian","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"primalvalue","style":{"code":true}},{"type":"text","text":". A package can implement "},{"type":"text","text":"jacobian","style":{"code":true}},{"type":"text","text":" internally using pullbacks or pushforwards to apply the chain rules efficiently. But we can also derive those functions at a higher level using only "},{"type":"text","text":"jacobian","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"primalvalue","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1612613174.260700","reply_count":1,"reply_users_count":1,"latest_reply":"1612613328.263100","reply_users":["U6A936746"],"subscribed":false},{"client_msg_id":"2a9e794e-d39b-41da-a893-0b02b70df900","type":"message","text":"So when I implement `AbstractDifferentiation` (`AD`), autodiff package authors only really need to define `jacobian` and `primalvalue` for their backend. The rest of the functionality from the standard `AD` API comes for free. It will all eventually call the package’s internal `pullback` or `pushforward` but it will all just work iiuc.","user":"U85JBUGGP","ts":"1612613304.263000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bMKqg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So when I implement "},{"type":"text","text":"AbstractDifferentiation","style":{"code":true}},{"type":"text","text":" ("},{"type":"text","text":"AD","style":{"code":true}},{"type":"text","text":"), autodiff package authors only really need to define "},{"type":"text","text":"jacobian","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"primalvalue","style":{"code":true}},{"type":"text","text":" for their backend. The rest of the functionality from the standard "},{"type":"text","text":"AD","style":{"code":true}},{"type":"text","text":" API comes for free. It will all eventually call the package’s internal "},{"type":"text","text":"pullback","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"pushforward","style":{"code":true}},{"type":"text","text":" but it will all just work iiuc."}]}]}]},{"client_msg_id":"55ed46d0-d6c2-42a1-ac00-af2160a30e73","type":"message","text":"I think it’s best to wait for my PR to have something concrete to discuss.","user":"U85JBUGGP","ts":"1612613378.263700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HV9J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think it’s best to wait for my PR to have something concrete to discuss."}]}]}],"thread_ts":"1612613378.263700","reply_count":2,"reply_users_count":1,"latest_reply":"1612613495.264400","reply_users":["U6A936746"],"subscribed":false,"reactions":[{"name":"ok_hand","users":["U6A936746"],"count":1}]},{"client_msg_id":"55c19b20-0e0d-4e1c-ba53-911ae31877ff","type":"message","text":"Interesting that `jacobian` as a concept kind of sums up the essence of all of differentiation. It basically differentiates many things wrt many other things. I don’t think it gets more generic than this!","user":"U85JBUGGP","ts":"1612613738.266000","team":"T68168MUP","edited":{"user":"U85JBUGGP","ts":"1612613772.000000"},"blocks":[{"type":"rich_text","block_id":"GH5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Interesting that "},{"type":"text","text":"jacobian","style":{"code":true}},{"type":"text","text":" as a concept kind of sums up the essence of all of differentiation. It basically differentiates many things wrt many other things. I don’t think it gets more generic than this!"}]}]}],"thread_ts":"1612613738.266000","reply_count":1,"reply_users_count":1,"latest_reply":"1612613879.266200","reply_users":["U6A936746"],"subscribed":false},{"client_msg_id":"42d764e5-f04e-4ac1-9591-f4072ee26860","type":"message","text":"It seems that <http://juliadiff.org|juliadiff.org> is down. Anyone know why?","user":"UDXST8ARK","ts":"1612701805.274200","team":"T68168MUP","edited":{"user":"UDXST8ARK","ts":"1612701810.000000"},"blocks":[{"type":"rich_text","block_id":"uHD+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It seems that "},{"type":"link","url":"http://juliadiff.org","text":"juliadiff.org"},{"type":"text","text":" is down. Anyone know why?"}]}]}],"thread_ts":"1612701805.274200","reply_count":2,"reply_users_count":1,"latest_reply":"1612702711.274700","reply_users":["U6A936746"],"subscribed":false},{"type":"message","subtype":"thread_broadcast","text":"It means our docs are all broken too","user":"U6A936746","ts":"1612702711.274700","thread_ts":"1612701805.274200","root":{"client_msg_id":"42d764e5-f04e-4ac1-9591-f4072ee26860","type":"message","text":"It seems that <http://juliadiff.org|juliadiff.org> is down. Anyone know why?","user":"UDXST8ARK","ts":"1612701805.274200","team":"T68168MUP","edited":{"user":"UDXST8ARK","ts":"1612701810.000000"},"blocks":[{"type":"rich_text","block_id":"uHD+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It seems that "},{"type":"link","url":"http://juliadiff.org","text":"juliadiff.org"},{"type":"text","text":" is down. Anyone know why?"}]}]}],"thread_ts":"1612701805.274200","reply_count":2,"reply_users_count":1,"latest_reply":"1612702711.274700","reply_users":["U6A936746"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"7ab","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It means our docs are all broken too"}]}]}],"client_msg_id":"f2ca2976-b9a4-45ce-82e9-2850817520e1","reactions":[{"name":"heavy_check_mark","users":["UDXST8ARK"],"count":1}]},{"client_msg_id":"842ed6c9-b2a6-466d-85a9-fc9d0f85dde4","type":"message","text":"Hi ! I'm excited since watching <@U674T3KB3>'s talk in November and looking at the gist. Among other things, I've been doing higher-order derivatives over a first-order reverse pass in jax so far,\n1. Is forward mode AD also in scope for Diffractor?\n2. Are there opinions on \"Rule 10: never go back more than once, after all weight vectors are known\" (from the Griewank&amp;Walther book) and how it compares to the higher-order simplification approach of Diffractor (or if there's any connection at all) ?","user":"UM6JW2SF9","ts":"1612728559.294500","team":"T68168MUP","edited":{"user":"UM6JW2SF9","ts":"1612728673.000000"},"blocks":[{"type":"rich_text","block_id":"bTsKl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi ! I'm excited since watching "},{"type":"user","user_id":"U674T3KB3"},{"type":"text","text":"'s talk in November and looking at the gist. Among other things, I've been doing higher-order derivatives over a first-order reverse pass in jax so far,\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is forward mode AD also in scope for Diffractor?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Are there opinions on \"Rule 10: never go back more than once, after all weight vectors are known\" (from the Griewank&Walther book) and how it compares to the higher-order simplification approach of Diffractor (or if there's any connection at all) ?"}]}],"style":"ordered","indent":0}]}]},{"client_msg_id":"f929f25b-ee9c-486d-8225-87d644e1ee03","type":"message","text":"Honestly I find the notation in that book horribly confusing, so I'm not sure how to answer the question","user":"U674T3KB3","ts":"1612729223.295400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YcV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Honestly I find the notation in that book horribly confusing, so I'm not sure how to answer the question"}]}]}]},{"client_msg_id":"f2a08241-a685-4815-9b65-676a5294d1d8","type":"message","text":"And yes, forward mode is in scope","user":"U674T3KB3","ts":"1612729232.295700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Tc8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And yes, forward mode is in scope"}]}]}],"reactions":[{"name":"+1","users":["UM6JW2SF9"],"count":1}]},{"client_msg_id":"f98488d0-494a-4bd4-bc78-87c0b18ef06f","type":"message","text":"Yeah, I don't really understand what their rule 10 is trying to say","user":"U674T3KB3","ts":"1612729732.301600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"N4t","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, I don't really understand what their rule 10 is trying to say"}]}]}],"thread_ts":"1612729732.301600","reply_count":4,"reply_users_count":2,"latest_reply":"1612730920.303200","reply_users":["UM6JW2SF9","UMDEUKM29"],"subscribed":false},{"client_msg_id":"cd8bf8c0-d95a-407b-bc8f-6256acd84539","type":"message","text":"That's great, thanks! Looking forward","user":"UM6JW2SF9","ts":"1612729766.302000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wLfjZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's great, thanks! Looking forward"}]}]}]},{"client_msg_id":"560962f2-1f50-46fb-ab07-ffe2ce7b54ca","type":"message","text":"Has anyone observed a performance regression of Zygote in Julia 1.6.0-rc1\nIn Julia 1.5.2\nCompilation\n```julia&gt; @you wasted your time gradient(() -&gt; Flux.Losses.logitcrossentropy(model(ds).data, yy), ps)\n108.710175 seconds (99.36 M allocations: 5.025 GiB, 3.03% gc time)```\nand 2nd invokation subsequent evaluation\n```julia&gt; @time gradient(() -&gt; Flux.Losses.logitcrossentropy(model(ds).data, yy), ps)\n  0.262026 seconds (100.82 k allocations: 47.256 MiB)```\nJulia 1.6.0-rc1\n```julia&gt; @time gradient(() -&gt; Flux.Losses.logitcrossentropy(model(ds).data, yy), ps)\n1192.249257 seconds (82.90 M allocations: 4.778 GiB, 0.73% gc time, 99.95% compilation time)```\nsecond invocation\n```julia&gt; @time gradient(() -&gt; Flux.Losses.logitcrossentropy(model(ds).data, yy), ps)\n  2.337661 seconds (101.71 k allocations: 52.019 MiB, 93.80% compilation time)```\n","user":"U6YRZ18GZ","ts":"1612781210.306300","team":"T68168MUP","edited":{"user":"U6YRZ18GZ","ts":"1612781304.000000"},"blocks":[{"type":"rich_text","block_id":"VHCw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Has anyone observed a performance regression of Zygote in Julia 1.6.0-rc1\nIn Julia 1.5.2\nCompilation\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @you wasted your time gradient(() -> Flux.Losses.logitcrossentropy(model(ds).data, yy), ps)\n108.710175 seconds (99.36 M allocations: 5.025 GiB, 3.03% gc time)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nand 2nd invokation subsequent evaluation\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @time gradient(() -> Flux.Losses.logitcrossentropy(model(ds).data, yy), ps)\n  0.262026 seconds (100.82 k allocations: 47.256 MiB)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nJulia 1.6.0-rc1\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @time gradient(() -> Flux.Losses.logitcrossentropy(model(ds).data, yy), ps)\n1192.249257 seconds (82.90 M allocations: 4.778 GiB, 0.73% gc time, 99.95% compilation time)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"second invocation\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @time gradient(() -> Flux.Losses.logitcrossentropy(model(ds).data, yy), ps)\n  2.337661 seconds (101.71 k allocations: 52.019 MiB, 93.80% compilation time)"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1612781210.306300","reply_count":3,"reply_users_count":3,"latest_reply":"1612782103.307100","reply_users":["UM30MT6RF","U6YRZ18GZ","U6PQP41C3"],"subscribed":false},{"client_msg_id":"531f23e7-de7b-4e8e-b827-f8e2ff459534","type":"message","text":"Regarding the method overwrite warning when loading ChainRules, is that somthing that was intentionally done to support overloading-based ADs or is that an unrelated problem?","user":"UM30MT6RF","ts":"1612789756.309800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vQp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Regarding the method overwrite warning when loading ChainRules, is that somthing that was intentionally done to support overloading-based ADs or is that an unrelated problem?"}]}]}]},{"type":"message","subtype":"thread_broadcast","text":"The implementation turned out to be larger than I was hoping but here it is <https://github.com/JuliaDiff/AbstractDifferentiation.jl/pull/1>. Any feedback is welcome.","user":"U85JBUGGP","ts":"1612802252.313600","thread_ts":"1612613378.263700","root":{"client_msg_id":"55ed46d0-d6c2-42a1-ac00-af2160a30e73","type":"message","text":"I think it’s best to wait for my PR to have something concrete to discuss.","user":"U85JBUGGP","ts":"1612613378.263700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HV9J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think it’s best to wait for my PR to have something concrete to discuss."}]}]}],"thread_ts":"1612613378.263700","reply_count":25,"reply_users_count":4,"latest_reply":"1612807147.321400","reply_users":["U6A936746","U85JBUGGP","UMDEUKM29","U6PQP41C3"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"V2I","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The implementation turned out to be larger than I was hoping but here it is "},{"type":"link","url":"https://github.com/JuliaDiff/AbstractDifferentiation.jl/pull/1"},{"type":"text","text":". Any feedback is welcome."}]}]}],"client_msg_id":"89481e1d-8226-4cb4-a6a7-df7a5b1e3c57"},{"client_msg_id":"bfc4a183-7588-4a60-84cf-e8b1c3b29cbc","type":"message","text":"For those interested in using automatic differentiation to learn force fields for molecular simulation, we have a pre-print just out: <https://twitter.com/jgreener64/status/1358793009106665476>.\nNo Julia in this one, in fact I think this work was started before the first Zygote release, but I'm hoping that the next steps will be in Julia (using Molly.jl).","user":"U9TCDH0E7","ts":"1612803845.317200","team":"T68168MUP","attachments":[{"fallback":"<https://twitter.com/jgreener64|@jgreener64>: Breaking my Twitter silence to share our recent work on differentiable molecular simulation: <https://www.biorxiv.org/content/10.1101/2021.02.05.429941v1>.\n\nWe use automatic differentiation to learn all the parameters in a coarse-grained force field for proteins.\n\n(1/6)","ts":1612796473,"author_name":"Joe Greener","author_link":"https://twitter.com/jgreener64/status/1358793009106665476","author_icon":"https://pbs.twimg.com/profile_images/1161578493869776896/xXLprxTP_normal.png","author_subname":"@jgreener64","text":"Breaking my Twitter silence to share our recent work on differentiable molecular simulation: <https://www.biorxiv.org/content/10.1101/2021.02.05.429941v1>.\n\nWe use automatic differentiation to learn all the parameters in a coarse-grained force field for proteins.\n\n(1/6)","service_name":"twitter","service_url":"https://twitter.com/","from_url":"https://twitter.com/jgreener64/status/1358793009106665476","id":1,"original_url":"https://twitter.com/jgreener64/status/1358793009106665476","footer":"Twitter","footer_icon":"https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"}],"blocks":[{"type":"rich_text","block_id":"R2o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For those interested in using automatic differentiation to learn force fields for molecular simulation, we have a pre-print just out: "},{"type":"link","url":"https://twitter.com/jgreener64/status/1358793009106665476"},{"type":"text","text":".\nNo Julia in this one, in fact I think this work was started before the first Zygote release, but I'm hoping that the next steps will be in Julia (using Molly.jl)."}]}]}],"reactions":[{"name":"+1","users":["U67G3QRJM","U66SR8JHX","U85JBUGGP","UGU761DU2","UM6JW2SF9","U6A936746","U018F5W2H24"],"count":7},{"name":"100","users":["UGU761DU2"],"count":1}]},{"client_msg_id":"bd16e3d8-63b5-4c45-ab7f-105450154b81","type":"message","text":"<@U85JBUGGP> related to AbstractAutoDiff I am about to release a blog post that include this text:\n```julia&gt; import ForwardDiff, ReverseDiff, Nabla, Yota, Zygote, Tracker, Enzyme;\n\njulia&gt; ForwardDiff.derivative(my_sin, π/3)\n0.4999999963909432\n\njulia&gt; ReverseDiff.gradient(x-&gt;my_sin(x[1]), [π/3,])\n1-element Vector{Float64}:\n 0.4999999963909433\n\njulia&gt; Nabla.∇(my_sin)(π/3)\n(0.4999999963909433,)\n\njulia&gt; Yota.grad(my_sin, π/3)[2][1]\n0.4999999963909433\n\njulia&gt; Zygote.gradient(my_sin, π/3)\n(0.4999999963909433,)\n\njulia&gt; Tracker.gradient(my_sin, π/3)\n(0.4999999963909432 (tracked),)\n\njulia&gt; Enzyme.autodiff(my_sin, Active(π/3))\n0.4999999963909432```\nNot the point of the post but\n7 ADs, with 6 APIs (Tracker and Zygote are the same)","user":"U6A936746","ts":"1612809122.326100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QH7","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U85JBUGGP"},{"type":"text","text":" related to AbstractAutoDiff I am about to release a blog post that include this text:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> import ForwardDiff, ReverseDiff, Nabla, Yota, Zygote, Tracker, Enzyme;\n\njulia> ForwardDiff.derivative(my_sin, π/3)\n0.4999999963909432\n\njulia> ReverseDiff.gradient(x->my_sin(x[1]), [π/3,])\n1-element Vector{Float64}:\n 0.4999999963909433\n\njulia> Nabla.∇(my_sin)(π/3)\n(0.4999999963909433,)\n\njulia> Yota.grad(my_sin, π/3)[2][1]\n0.4999999963909433\n\njulia> Zygote.gradient(my_sin, π/3)\n(0.4999999963909433,)\n\njulia> Tracker.gradient(my_sin, π/3)\n(0.4999999963909432 (tracked),)\n\njulia> Enzyme.autodiff(my_sin, Active(π/3))\n0.4999999963909432"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Not the point of the post but\n7 ADs, with 6 APIs (Tracker and Zygote are the same)"}]}]}],"reactions":[{"name":"dizzy_face","users":["UMY1LV01G","U85JBUGGP","UGU761DU2"],"count":3},{"name":"differential","users":["UMY1LV01G","U9TCDH0E7","UGU761DU2"],"count":3}]},{"client_msg_id":"f71e89d4-abb6-4979-9dbb-3bcbcbac286d","type":"message","text":"hahaha ya this is kinda crazy","user":"U85JBUGGP","ts":"1612809214.326800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jCEN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hahaha ya this is kinda crazy"}]}]}]},{"client_msg_id":"ecc7720b-7d88-4c29-a8c2-cfe45ad6776b","type":"message","text":"Right that post is now on the newest page on hacker news\n<https://news.ycombinator.com/newest>\n*Automatic Differentiation Does Incur Truncation Errors (Kinda)*","user":"U6A936746","ts":"1612809991.330300","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1612810321.000000"},"blocks":[{"type":"rich_text","block_id":"0jU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Right that post is now on the newest page on hacker news\n"},{"type":"link","url":"https://news.ycombinator.com/newest"},{"type":"text","text":"\n*Automatic Differentiation Does Incur Truncation Errors (Kinda)*"}]}]}],"thread_ts":"1612809991.330300","reply_count":3,"reply_users_count":3,"latest_reply":"1612811586.336200","reply_users":["U8D9768Q6","U6A936746","UN3KKRCRJ"],"subscribed":false},{"client_msg_id":"44aee49a-6f41-4673-a1e0-aae9e7fbe184","type":"message","text":"your post got flagged for some reason","user":"U674T3KB3","ts":"1612810050.330600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tXReY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"your post got flagged for some reason"}]}]}],"thread_ts":"1612810050.330600","reply_count":9,"reply_users_count":3,"latest_reply":"1612811215.334400","reply_users":["U6A936746","U674T3KB3","UHDQQ4GN6"],"subscribed":false},{"client_msg_id":"c6bd165b-a41a-4ba7-a2c6-4b30385f5fda","type":"message","text":"They probably don’t like if people upvote a post after clicking on an external link to “newest”","user":"UGU761DU2","ts":"1612811382.335400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"u=O1D","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"They probably don’t like if people upvote a post after clicking on an external link to “newest”"}]}]}]},{"client_msg_id":"dddefc66-1dfc-4019-98db-c0a2225811c3","type":"message","text":"They probably really won't like it that after following an external link to \"newest\", I created an account just to upvote a single post.","user":"UHDQQ4GN6","ts":"1612811431.336000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DxQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"They probably really won't like it that after following an external link to \"newest\", I created an account just to upvote a single post."}]}]}],"reactions":[{"name":"joy","users":["UGU761DU2"],"count":1}]},{"client_msg_id":"3d031633-ee2e-4e7e-bc13-5be5f8adc6bd","type":"message","text":"Interesting fact: with AbstractDifferentiation.jl, you can define a custom chain rule for a function forwarding its pullback operator to ForwardDiff, SparseDiffTools, ReverseDiff, etc. with like 2-3 lines of code. So you can have an easily customisable AD pipeline. So you can be like: please use Zygote by default, but this function uses FD and that function uses SparseDiffTools and this function mutates so use ReverseDiff for it, etc. Probably JuliaCon material.","user":"U85JBUGGP","ts":"1612940851.352900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XUQd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Interesting fact: with AbstractDifferentiation.jl, you can define a custom chain rule for a function forwarding its pullback operator to ForwardDiff, SparseDiffTools, ReverseDiff, etc. with like 2-3 lines of code. So you can have an easily customisable AD pipeline. So you can be like: please use Zygote by default, but this function uses FD and that function uses SparseDiffTools and this function mutates so use ReverseDiff for it, etc. Probably JuliaCon material."}]}]}],"thread_ts":"1612940851.352900","reply_count":3,"reply_users_count":2,"latest_reply":"1612941239.354100","reply_users":["UTVH86LJ0","U85JBUGGP"],"subscribed":false,"reactions":[{"name":"+1","users":["U6A936746"],"count":1}]},{"client_msg_id":"1304bb95-84ad-4089-bbca-d5fc1e7cf056","type":"message","text":"I guess this is already possible but it’s too much boilerplate without AbstractDifferentiation.","user":"U85JBUGGP","ts":"1612940961.353500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zz/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess this is already possible but it’s too much boilerplate without AbstractDifferentiation."}]}]}]},{"client_msg_id":"276812ad-dd97-43f5-a79c-c30b750cd3fe","type":"message","text":"I will use Zygote","user":"UTVH86LJ0","ts":"1612941260.354600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p2o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I will use Zygote"}]}]}]},{"client_msg_id":"ff9494d7-8c4b-41d2-8ac1-28157cc4c0d7","type":"message","text":"Also with AbstractDifferentiation.jl, packages like Optim and Turing can use any of the AD packages in Julia with very little code.","user":"U85JBUGGP","ts":"1612941917.356100","team":"T68168MUP","edited":{"user":"U85JBUGGP","ts":"1612941953.000000"},"blocks":[{"type":"rich_text","block_id":"T6SgA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also with AbstractDifferentiation.jl, packages like Optim and Turing can use any of the AD packages in Julia with very little code."}]}]}]},{"client_msg_id":"48e6a903-ad44-44f6-8a54-897715c04bf7","type":"message","text":"and like more than half of DiffEqSensitivity can disappear (half joking)","user":"U85JBUGGP","ts":"1612942066.356600","team":"T68168MUP","edited":{"user":"U85JBUGGP","ts":"1612942133.000000"},"blocks":[{"type":"rich_text","block_id":"xZA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and like more than half of DiffEqSensitivity can disappear (half joking)"}]}]}]},{"client_msg_id":"4b1c12a1-7963-4dd3-9d96-09f9bb5d2a6d","type":"message","text":"Then there is the whole Zygote-AutoGrad/KNet integration. And mixing in symbolic AD and Enzyme…","user":"U85JBUGGP","ts":"1612943130.357700","team":"T68168MUP","edited":{"user":"U85JBUGGP","ts":"1612943192.000000"},"blocks":[{"type":"rich_text","block_id":"Xjx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Then there is the whole Zygote-AutoGrad/KNet integration. And mixing in symbolic AD and Enzyme…"}]}]}]},{"client_msg_id":"19023260-af3b-4a2b-a62c-d606df183334","type":"message","text":"&gt; and like more than half of DiffEqSensitivity can disappear (half joking)\nTotally not joking :rolling_on_the_floor_laughing:","user":"U69BL50BF","ts":"1612944823.358200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DlT","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"and like more than half of DiffEqSensitivity can disappear (half joking)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Totally not joking "},{"type":"emoji","name":"rolling_on_the_floor_laughing"}]}]}]},{"client_msg_id":"9e63d85e-c3cb-46a4-9333-ee45024afe5f","type":"message","text":"I am looking to extend Zygote with ChainRulesCore, but I am a bit confused on how to add arguments and keyword arguments that modify the function, but for which the gradients do not have to be computed. Minimal example:\n```julia\njulia&gt; using Zygote, ChainRulesCore\njulia&gt; h(x, y; pow=2) = (2x + y^2)^pow\nh (generic function with 1 method)\n\njulia&gt; function rrule(::typeof(h), x, y; pow=2)\n           println(\"rrule\")\n           return h(x,y;pow), ȳ -&gt; (NO_FIELDS, 2pow * (2x+y^2)^(pow-1) * ȳ * [1.0, 2y])\n       end\nrrule (generic function with 751 methods)\n\njulia&gt; gradient(h, 1.0, 2.0)\nrrule\n([24.0, 96.0],)\n\njulia&gt; gradient((x,y)-&gt;h(x,y, pow=3), 1.0, 2.0)\nrrule\nERROR: BoundsError: attempt to access (nothing, nothing, nothing, [216.0, 864.0])\n  at index [5]\nStacktrace:\n [1] getindex at ./tuple.jl:24 [inlined]\n [2] gradindex(::Tuple{Nothing,Nothing,Nothing,Array{Float64,1}}, ::Int64) at /Users/michielstock/.julia/packages/Zygote/ggM8Z/src/compiler/reverse.jl:12\n [3] #52 at ./REPL[48]:1 [inlined]\n [4] (::typeof(∂(#52)))(::Float64) at /Users/michielstock/.julia/packages/Zygote/ggM8Z/src/compiler/interface2.jl:0\n [5] (::Zygote.var\"#41#42\"{typeof(∂(#52))})(::Float64) at /Users/michielstock/.julia/packages/Zygote/ggM8Z/src/compiler/interface.jl:40\n [6] gradient(::Function, ::Float64, ::Vararg{Float64,N} where N) at /Users/michielstock/.julia/packages/Zygote/ggM8Z/src/compiler/interface.jl:49\n [7] top-level scope at REPL[48]:1\n ```\nIs what I want to do fundamentally not supported or am I missing something?","user":"UC8MP6UN8","ts":"1613039909.361200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xqKw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am looking to extend Zygote with ChainRulesCore, but I am a bit confused on how to add arguments and keyword arguments that modify the function, but for which the gradients do not have to be computed. Minimal example:\n```julia\njulia> using Zygote, ChainRulesCore\njulia> h(x, y; pow=2) = (2x + y^2)^pow\nh (generic function with 1 method)\n\njulia> function rrule(::typeof(h), x, y; pow=2)\n           println(\"rrule\")\n           return h(x,y;pow), ȳ -> (NO_FIELDS, 2pow * (2x+y^2)^(pow-1) * ȳ * [1.0, 2y])\n       end\nrrule (generic function with 751 methods)\n\njulia> gradient(h, 1.0, 2.0)\nrrule\n([24.0, 96.0],)\n\njulia> gradient((x,y)->h(x,y, pow=3), 1.0, 2.0)\nrrule\nERROR: BoundsError: attempt to access (nothing, nothing, nothing, [216.0, 864.0])\n  at index [5]\nStacktrace:\n [1] getindex at ./tuple.jl:24 [inlined]\n [2] gradindex(::Tuple{Nothing,Nothing,Nothing,Array{Float64,1}}, ::Int64) at /Users/michielstock/.julia/packages/Zygote/ggM8Z/src/compiler/reverse.jl:12\n [3] #52 at ./REPL[48]:1 [inlined]\n [4] (::typeof(∂(#52)))(::Float64) at /Users/michielstock/.julia/packages/Zygote/ggM8Z/src/compiler/interface2.jl:0\n [5] (::Zygote.var\"#41#42\"{typeof(∂(#52))})(::Float64) at /Users/michielstock/.julia/packages/Zygote/ggM8Z/src/compiler/interface.jl:40\n [6] gradient(::Function, ::Float64, ::Vararg{Float64,N} where N) at /Users/michielstock/.julia/packages/Zygote/ggM8Z/src/compiler/interface.jl:49\n [7] top-level scope at REPL[48]:1\n ```\nIs what I want to do fundamentally not supported or am I missing something?"}]}]}],"thread_ts":"1613039909.361200","reply_count":16,"reply_users_count":3,"latest_reply":"1613040961.364400","reply_users":["U6A936746","UD0NS8PDF","UC8MP6UN8"],"subscribed":false,"reactions":[{"name":"slack","users":["UD0NS8PDF"],"count":1}]},{"client_msg_id":"e621b097-1f2f-4a3a-8b7c-36699cec3df4","type":"message","text":"Are there tools to walk through Zygote process for building a gredient?","user":"U66SR8JHX","ts":"1613093826.367300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"scf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Are there tools to walk through Zygote process for building a gredient?"}]}]}]},{"client_msg_id":"c37c476e-a7f8-4e7f-a297-0474f34e7c27","type":"message","text":"I'm trying to do a forward-over-reverse Hessian. The backward pass (Zygote) is going to generate something including an FFT, then the forward needs to work through that. ForwardDiff doesn't seem to support complex numbers so I suppose it can't?\n```ForwardDiff.gradient(((A,),) -&gt; real(sum(fft(A*x))), [1]) # error```\nIs there anything in Julia that could potentially work?","user":"UUMJUCYRK","ts":"1613127703.369400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vKv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm trying to do a forward-over-reverse Hessian. The backward pass (Zygote) is going to generate something including an FFT, then the forward needs to work through that. ForwardDiff doesn't seem to support complex numbers so I suppose it can't?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"ForwardDiff.gradient(((A,),) -> real(sum(fft(A*x))), [1]) # error"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Is there anything in Julia that could potentially work?"}]}]}],"thread_ts":"1613127703.369400","reply_count":2,"reply_users_count":2,"latest_reply":"1613127907.369700","reply_users":["UD0NS8PDF","UUMJUCYRK"],"subscribed":false},{"client_msg_id":"484455e6-d39d-4a31-9a18-271c2daaa419","type":"message","text":"New paper by Conal Elliott <https://github.com/conal/paper-2021-language-derivatives|https://github.com/conal/paper-2021-language-derivatives>","user":"UDGT4PM41","ts":"1613149025.371700","team":"T68168MUP","edited":{"user":"UDGT4PM41","ts":"1613149049.000000"},"blocks":[{"type":"rich_text","block_id":"WGI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"New paper by Conal Elliott "},{"type":"link","url":"https://github.com/conal/paper-2021-language-derivatives","text":"https://github.com/conal/paper-2021-language-derivatives"}]}]}],"thread_ts":"1613149025.371700","reply_count":2,"reply_users_count":1,"latest_reply":"1613149890.372500","reply_users":["U6A936746"],"subscribed":false},{"client_msg_id":"fa44b453-c3d4-4c96-a8f8-ff0b0c84afb5","type":"message","text":"<http://www.juliadiff.org/> (the top level site only, not docs etc) will be down today while I replace it","user":"U6A936746","ts":"1613214371.380600","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1613214376.000000"},"blocks":[{"type":"rich_text","block_id":"SkC","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"http://www.juliadiff.org/"},{"type":"text","text":" (the top level site only, not docs etc) will be down today while I replace it"}]}]}]},{"client_msg_id":"69b75f95-8d75-47db-8213-2c0649cbe35c","type":"message","text":"and we are back up with the new site","user":"U6A936746","ts":"1613215403.381300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WPg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and we are back up with the new site"}]}]}]},{"client_msg_id":"8d124469-a140-425c-a806-f1fb9f2731d2","type":"message","text":"Zygote correctly differentiates through `cholesky`, right?","user":"U7YD3DKL2","ts":"1613472469.384600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TA+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Zygote correctly differentiates through "},{"type":"text","text":"cholesky","style":{"code":true}},{"type":"text","text":", right?"}]}]}],"thread_ts":"1613472469.384600","reply_count":1,"reply_users_count":1,"latest_reply":"1613472562.384700","reply_users":["U6PQP41C3"],"subscribed":false},{"client_msg_id":"d73ce2ab-52c6-4605-bb9f-028aa23014d2","type":"message","text":"This looks like a bug: <https://discourse.julialang.org/t/gradient-of-sum/55389>","user":"U7YD3DKL2","ts":"1613473768.385100","team":"T68168MUP","attachments":[{"service_name":"JuliaLang","title":"Gradient of sum","title_link":"https://discourse.julialang.org/t/gradient-of-sum/55389","text":"T = randn(10,10) ps = Flux.params(T) opt=ADAM() for iter = 1:100 gs = gradient(ps) do sum(T) end Flux.update!(opt, ps, gs) end throws an error: ArgumentError: Cannot setindex! to 0.0009999999900000003 for an AbstractFill with value 1.0. Stacktrace: [1] setindex! at /home/cossio/.julia/packages/FillArrays/tE9Xq/src/FillArrays.jl:41 [inlined] [2] _setindex! at ./abstractarray.jl:1176 [inlined] [3] setindex! at ./abstractarray.jl:1153 [inlined] [4] macro expansion at ./br...","fallback":"JuliaLang: Gradient of sum","thumb_url":"https://aws1.discourse-cdn.com/business5/uploads/julialang/original/2X/1/12829a7ba92b924d4ce81099cbf99785bee9b405.png","ts":1613473740,"from_url":"https://discourse.julialang.org/t/gradient-of-sum/55389","thumb_width":408,"thumb_height":263,"service_icon":"https://aws1.discourse-cdn.com/business5/uploads/julialang/optimized/2X/6/6ca888e296f59ca2a599807f7d5edd489e3d1829_2_180x180.png","id":1,"original_url":"https://discourse.julialang.org/t/gradient-of-sum/55389"}],"blocks":[{"type":"rich_text","block_id":"CDoaq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This looks like a bug: "},{"type":"link","url":"https://discourse.julialang.org/t/gradient-of-sum/55389"}]}]}]},{"client_msg_id":"c843a6a8-1b59-46b3-8653-289ca9b9873b","type":"message","text":"I'm having a moment of confusion about callable structs and ChainRules. Trying to define a `rrule` on a callable struct (basically a Flux layer) I get an error in testing (on `test_rrule`) that explicitly disallows using callable structs. If that's the case, why do we need to use `NO_FIELDS` as first argument for `rrule`, given that only functions without internal fields are allowed?","user":"U6BJ9E351","ts":"1613581012.388400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vMSC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm having a moment of confusion about callable structs and ChainRules. Trying to define a "},{"type":"text","text":"rrule","style":{"code":true}},{"type":"text","text":" on a callable struct (basically a Flux layer) I get an error in testing (on "},{"type":"text","text":"test_rrule","style":{"code":true}},{"type":"text","text":") that explicitly disallows using callable structs. If that's the case, why do we need to use "},{"type":"text","text":"NO_FIELDS","style":{"code":true}},{"type":"text","text":" as first argument for "},{"type":"text","text":"rrule","style":{"code":true}},{"type":"text","text":", given that only functions without internal fields are allowed?"}]}]}],"thread_ts":"1613581012.388400","reply_count":1,"reply_users_count":1,"latest_reply":"1613581978.389000","reply_users":["U6A936746"],"subscribed":false},{"client_msg_id":"546a7ac1-043e-40a5-984d-4249d04c8d09","type":"message","text":"Is the idea that callable structs will be allowed in the future?","user":"U6BJ9E351","ts":"1613581028.388900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bMNoO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is the idea that callable structs will be allowed in the future?"}]}]}]},{"client_msg_id":"0ecfb1e3-cef3-4c5a-ac84-f348640795e6","type":"message","text":"<https://gist.github.com/marcrasi/a932d569b934dfeeb75d0bd4dedb0051|https://gist.github.com/marcrasi/a932d569b934dfeeb75d0bd4dedb0051>","user":"UDGT4PM41","ts":"1613585153.389500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lwow","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://gist.github.com/marcrasi/a932d569b934dfeeb75d0bd4dedb0051","text":"https://gist.github.com/marcrasi/a932d569b934dfeeb75d0bd4dedb0051"}]}]}]},{"client_msg_id":"eaefb105-e413-49a0-a868-2a916a17fbae","type":"message","text":"Why does this not work?\n```using Flux, Zygote\nnn = Chain(Dense(1, 2), Dense(2, 1))\nf(x) = nn([x]) |&gt; sum\ndf(x) = gradient(f, x) |&gt; sum\nddf(x) = gradient(df, x) |&gt; sum```\n`f(1.0)` and `df(1.0)` work fine, but `ddf(1.0)` throws a `ERROR: Can't differentiate foreigncall expression`","user":"U017AJ68PFZ","ts":"1613741317.393000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CmHP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Why does this not work?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using Flux, Zygote\nnn = Chain(Dense(1, 2), Dense(2, 1))\nf(x) = nn([x]) |> sum\ndf(x) = gradient(f, x) |> sum\nddf(x) = gradient(df, x) |> sum"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"f(1.0)","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"df(1.0)","style":{"code":true}},{"type":"text","text":" work fine, but "},{"type":"text","text":"ddf(1.0)","style":{"code":true}},{"type":"text","text":" throws a "},{"type":"text","text":"ERROR: Can't differentiate foreigncall expression","style":{"code":true}}]}]}],"thread_ts":"1613741317.393000","reply_count":4,"reply_users_count":3,"latest_reply":"1613742250.394100","reply_users":["UD0NS8PDF","U017AJ68PFZ","U6YRZ18GZ"],"subscribed":false},{"client_msg_id":"4a0acc05-9ea8-413b-a5da-8e26004b0dcf","type":"message","text":"I need some advice for how to use ChainRulesCore to set up these rules:\n\ncontext: I’m writing code with the goal of doing statistical inference, so we want gradients w.r.t. the following parameters: `u_n, b, r`.\n\nThe “math” of the computation is broken up between the two methods, though:\n```# inside `law = PolynomialLimbDark(u_n)`\ng_n = convert_basis(u_n)\n# inside `f = compute(law, b, r)`\nx = # various functions dependent on b and r\nf = dot(g_n, x)```\nThe actual code that accompanies this is as follows\n```law = PolynomialLimbDark(u_n)\nf = compute(law, b, r)```\nI have analytical functions for the gradient `dfdg, dfdb, dfdr` and the jacobian `dgdu` . In terms of chain rules, how do I write, say, an `frule` for `compute`? here’s what I have so far-\n\n```function frule((_, Δld, Δb, Δr), ::typeof(compute), ld::PolynomialLimbDark, b, r)\n    f, dfdg, dfdb, dfdr = compute_grad(ld, b, r)\n    return f, ??? dfdb * Δb + dfdr * Δr\nend\n\nfunction frule((_, du_n), ::typeof(PolynomialLimbDark), u_n::AbstractVector)\n    ld = PolynomialLimbDark(u_n)\n    jac_gn = compute_gn_jac(u_n)\n    return ld, jac_gn # ??? is this right??? g_n is an internal field\nend```","user":"UN97XTLCV","ts":"1613925332.004600","team":"T68168MUP","edited":{"user":"UN97XTLCV","ts":"1613926239.000000"},"blocks":[{"type":"rich_text","block_id":"L+G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I need some advice for how to use ChainRulesCore to set up these rules:\n\ncontext: I’m writing code with the goal of doing statistical inference, so we want gradients w.r.t. the following parameters: "},{"type":"text","text":"u_n, b, r","style":{"code":true}},{"type":"text","text":".\n\nThe “math” of the computation is broken up between the two methods, though:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"# inside `law = PolynomialLimbDark(u_n)`\ng_n = convert_basis(u_n)\n# inside `f = compute(law, b, r)`\nx = # various functions dependent on b and r\nf = dot(g_n, x)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"The actual code that accompanies this is as follows\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"law = PolynomialLimbDark(u_n)\nf = compute(law, b, r)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nI have analytical functions for the gradient "},{"type":"text","text":"dfdg, dfdb, dfdr","style":{"code":true}},{"type":"text","text":" and the jacobian "},{"type":"text","text":"dgdu","style":{"code":true}},{"type":"text","text":" . In terms of chain rules, how do I write, say, an "},{"type":"text","text":"frule","style":{"code":true}},{"type":"text","text":" for "},{"type":"text","text":"compute","style":{"code":true}},{"type":"text","text":"? here’s what I have so far-\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function frule((_, Δld, Δb, Δr), ::typeof(compute), ld::PolynomialLimbDark, b, r)\n    f, dfdg, dfdb, dfdr = compute_grad(ld, b, r)\n    return f, ??? dfdb * Δb + dfdr * Δr\nend\n\nfunction frule((_, du_n), ::typeof(PolynomialLimbDark), u_n::AbstractVector)\n    ld = PolynomialLimbDark(u_n)\n    jac_gn = compute_gn_jac(u_n)\n    return ld, jac_gn # ??? is this right??? g_n is an internal field\nend"}]}]}]},{"client_msg_id":"18302aa8-e1f7-4b6b-ae48-65ca4e7c5dc6","type":"message","text":"I'm really confused with all the different autodiff packages and when to chose what, is there any dumb explanation? Documentation seems directed more towards those familiar with autodiff. As I understand, ReverseDiff and Zygote are recommended for gradients and ForwardDiff is said to be slow.\nRecently I needed a gradient of my loss function, and neither ReverseDiff nor Zygote worked - they failed somewhere in the internals. ForwardDiff, however, differentiates just fine, and is just ~two times slower than f(x) itself. My model code is pretty involved and utilizes a bunch of structs and packages, but pure julia and generic, as evidenced by ForwardDiff working.\nDoes it make sense to try and dig what fails for ReverseDiff and Zygote, are there any practical advantages in using them?","user":"UGTUKUHLN","ts":"1613997157.013200","team":"T68168MUP","edited":{"user":"UGTUKUHLN","ts":"1613997327.000000"},"blocks":[{"type":"rich_text","block_id":"8CF9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm really confused with all the different autodiff packages and when to chose what, is there any dumb explanation? Documentation seems directed more towards those familiar with autodiff. As I understand, ReverseDiff and Zygote are recommended for gradients and ForwardDiff is said to be slow.\nRecently I needed a gradient of my loss function, and neither ReverseDiff nor Zygote worked - they failed somewhere in the internals. ForwardDiff, however, differentiates just fine, and is just ~two times slower than f(x) itself. My model code is pretty involved and utilizes a bunch of structs and packages, but pure julia and generic, as evidenced by ForwardDiff working.\nDoes it make sense to try and dig what fails for ReverseDiff and Zygote, are there any practical advantages in using them?"}]}]}]},{"client_msg_id":"5721b362-474b-4a1d-861c-f38042b26d0f","type":"message","text":"ForwardDiff is fast","user":"U69BL50BF","ts":"1613997584.013600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cN4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ForwardDiff is fast"}]}]}]},{"client_msg_id":"a833ced5-171e-48f4-92fd-d66084afdc5a","type":"message","text":"at what it does","user":"U69BL50BF","ts":"1613997590.013800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/xQUU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"at what it does"}]}]}]},{"client_msg_id":"b4ff10d3-b670-4f39-98cc-be7baa04d4cc","type":"message","text":"I read the following in the docs:\n&gt; *ForwardDiff* is algorithmically more efficient for differentiating functions where the input dimension is less than the output dimension, while *ReverseDiff* is algorithmically more efficient for differentiating functions where the output dimension is less than the input dimension.","user":"UGTUKUHLN","ts":"1613997737.014100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZgF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I read the following in the docs:\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"ForwardDiff","style":{"bold":true}},{"type":"text","text":" is algorithmically more efficient for differentiating functions where the input dimension is less than the output dimension, while "},{"type":"text","text":"ReverseDiff","style":{"bold":true}},{"type":"text","text":" is algorithmically more efficient for differentiating functions where the output dimension is less than the input dimension."}]}]}]},{"client_msg_id":"038900f6-4344-4116-b027-de514ec58685","type":"message","text":"So for gradients it would naturally make sense to use reversediff","user":"UGTUKUHLN","ts":"1613997755.014600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ICU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So for gradients it would naturally make sense to use reversediff"}]}]}]},{"client_msg_id":"861cbcdd-ac27-4207-aab2-8ae0b0349901","type":"message","text":"But they are somehow different enough that one works and the other doesn't, for exact same function","user":"UGTUKUHLN","ts":"1613997791.015200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3zur","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But they are somehow different enough that one works and the other doesn't, for exact same function"}]}]}]},{"client_msg_id":"d6f808bc-825e-43d4-a4d1-b03cd31733d4","type":"message","text":"Yes, they work in very different ways. Reverse diff is generally more complex, since you need to build up a tape, either explicitely along with tracked variables or directly in the IR, as is the case for Zygote, and then do a backwards pass to get the gradient. Forward diff is just a fairly straightforward single pass.","user":"UM30MT6RF","ts":"1613998214.019200","team":"T68168MUP","edited":{"user":"UM30MT6RF","ts":"1613998428.000000"},"blocks":[{"type":"rich_text","block_id":"E4J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, they work in very different ways. Reverse diff is generally more complex, since you need to build up a tape, either explicitely along with tracked variables or directly in the IR, as is the case for Zygote, and then do a backwards pass to get the gradient. Forward diff is just a fairly straightforward single pass."}]}]}]},{"client_msg_id":"35e852c2-b53f-4e39-a416-e58d71ec3f4e","type":"message","text":"There are a few reason e.g. Zygote can fail. A fairly common one is that it doesn't work with code that is mutating or that contains a `ccall`, in these cases you typically need to write a custom adjoint.","user":"UM30MT6RF","ts":"1613998390.022300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KNXFi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There are a few reason e.g. Zygote can fail. A fairly common one is that it doesn't work with code that is mutating or that contains a "},{"type":"text","text":"ccall","style":{"code":true}},{"type":"text","text":", in these cases you typically need to write a custom adjoint."}]}]}]},{"client_msg_id":"9ac39849-bc4b-4938-87af-834f3cd7ceff","type":"message","text":"Actually I mixed up a bit - ReverseDiff worked for me, but only without CompiledTape. And was very slow, ~50 times slower than ForwardDiff.","user":"UGTUKUHLN","ts":"1613998508.023700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GowUq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Actually I mixed up a bit - ReverseDiff worked for me, but only without CompiledTape. And was very slow, ~50 times slower than ForwardDiff."}]}]}]},{"client_msg_id":"eab797b2-e4f3-474b-8597-47a1e67dc84e","type":"message","text":"<@UM30MT6RF> but I assume there are cases when it is better to use ReverseDiff, right? Despite it being more complex.","user":"UGTUKUHLN","ts":"1613998601.024600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QcnF","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UM30MT6RF"},{"type":"text","text":" but I assume there are cases when it is better to use ReverseDiff, right? Despite it being more complex."}]}]}],"thread_ts":"1613998601.024600","reply_count":1,"reply_users_count":1,"latest_reply":"1613998720.027200","reply_users":["UM30MT6RF"],"subscribed":false},{"client_msg_id":"551e6be2-8c6d-45e2-ae1c-2b3a0ef100be","type":"message","text":"How many parameters?","user":"U6A936746","ts":"1613998657.024900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ShG+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How many parameters?"}]}]}]},{"client_msg_id":"82861b22-8794-4175-8439-186f939925a6","type":"message","text":"say 10, or 20","user":"UGTUKUHLN","ts":"1613998668.025400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dndE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"say 10, or 20"}]}]}]},{"client_msg_id":"187be9a1-de39-4ca1-ae28-041bd540fe8f","type":"message","text":"you need hundreds at least.","user":"U69BL50BF","ts":"1613998674.025800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"F8vN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you need hundreds at least."}]}]}]},{"client_msg_id":"4c0df628-3677-4f2d-a781-3fa7d5b3240b","type":"message","text":"Yeah use ForwardDiff","user":"U6A936746","ts":"1613998679.026000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Opr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah use ForwardDiff"}]}]}]},{"client_msg_id":"37444d6e-7162-4410-98ed-b6819a81c95a","type":"message","text":"ah, so ReverseDiff is for stuff like neural nets, and not for common analytical models?","user":"UGTUKUHLN","ts":"1613998743.028400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lF+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah, so ReverseDiff is for stuff like neural nets, and not for common analytical models?"}]}]}],"thread_ts":"1613998743.028400","reply_count":1,"reply_users_count":1,"latest_reply":"1613998845.031000","reply_users":["U6A936746"],"subscribed":false,"reactions":[{"name":"heavy_check_mark","users":["U6A936746"],"count":1}]},{"client_msg_id":"85151dd8-bb23-486a-a52a-bd4fc916db56","type":"message","text":"Reverse is faster than Forwards when number of parameters is much larger (at least 5x larger, often like 200x larger) than number of outputs.\nBecause there is a lot of overhead in reverse mode having to setup and manage the tape.\nWhich generally also means allocating and storing memory","user":"U6A936746","ts":"1613998773.029500","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1613998801.000000"},"blocks":[{"type":"rich_text","block_id":"gTSm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Reverse is faster than Forwards when number of parameters is much larger (at least 5x larger, often like 200x larger) than number of outputs.\nBecause there is a lot of overhead in reverse mode having to setup and manage the tape.\nWhich generally also means allocating and storing memory"}]}]}]},{"client_msg_id":"b37ac587-1ac2-4e7b-9233-1ffeb0382de4","type":"message","text":"I see, that's way above the scales I need now...","user":"UGTUKUHLN","ts":"1613998838.030800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"v=P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see, that's way above the scales I need now..."}]}]}]},{"client_msg_id":"1fb7d17e-0500-44c2-90cd-00ca73d1229d","type":"message","text":"And what about Zygote?","user":"UGTUKUHLN","ts":"1613998845.031200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C6bFw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And what about Zygote?"}]}]}]},{"client_msg_id":"a753c6cd-d8b8-4569-b858-7bf2ea8e3a64","type":"message","text":"Zygote is also reverse mode, so same applies","user":"U6A936746","ts":"1613998875.031900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"D9g3n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Zygote is also reverse mode, so same applies"}]}]}]},{"client_msg_id":"7b623a89-dc65-400f-b6ee-cd1a121c3bf3","type":"message","text":"Thanks!\nBtw, I'm very impressed by how easy it is to compute a gradient in julia. My model was written without even thinking about that, but ForwardDiff just works!","user":"UGTUKUHLN","ts":"1613998995.036000","team":"T68168MUP","edited":{"user":"UGTUKUHLN","ts":"1613999094.000000"},"blocks":[{"type":"rich_text","block_id":"Ksi/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks!\nBtw, I'm very impressed by how easy it is to compute a gradient in julia. My model was written without even thinking about that, but ForwardDiff just works!"}]}]}]},{"client_msg_id":"991a5357-e03f-40f4-9b9d-7ae9c4dd16b1","type":"message","text":"In theory, Zygote's approach is supposed to solve this problem, but in practice it puts a lot of strain on the compiler and often interferes with inference, so there is typically some overhead. This is something a next-gen AD should be a lot better at though.","user":"UM30MT6RF","ts":"1613999195.039000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3zsW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In theory, Zygote's approach is supposed to solve this problem, but in practice it puts a lot of strain on the compiler and often interferes with inference, so there is typically some overhead. This is something a next-gen AD should be a lot better at though."}]}]}]},{"client_msg_id":"87c41310-84d7-4ef8-8abe-148e78f750f1","type":"message","text":"It already looks like half-magic :)","user":"UGTUKUHLN","ts":"1613999292.039300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/Van","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It already looks like half-magic :)"}]}]}],"reactions":[{"name":"party_wizard","users":["UM30MT6RF"],"count":1}]},{"client_msg_id":"495869a3-5be6-47cb-9904-7961cac68103","type":"message","text":"I mean from a user's point of view","user":"UGTUKUHLN","ts":"1613999321.039600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Inb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean from a user's point of view"}]}]}]}]}