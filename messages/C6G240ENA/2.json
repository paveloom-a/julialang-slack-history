{"cursor": 1, "messages": [{"client_msg_id":"d39721e7-179d-4417-8f28-c5ab49234a33","type":"message","text":"I'm trying to use ForwardDiff on a function that takes a `FieldVector` (from StaticArrays) as input but without succes. Here's a MWE:\n```using StaticArrays\nusing ForwardDiff\n\nstruct MyType{T} &lt;: FieldVector{2,T}\n    a::T\n    b::T\nend\n\nStaticArrays.similar_type(p::Type{&lt;:MyType}, ::Type{T}, size::Size{(2,)}) where T = MyType{T}\n\nf(x) = x.a * x.b\nx = MyType(1.0, 2.0)\n\nForwardDiff.jacobian(f, x) ```\nwhich gives me the error\n```julia&gt; ForwardDiff.jacobian(f, x)\nERROR: type SArray has no field a\nStacktrace:\n [1] getproperty(x::SVector{2, ForwardDiff.Dual{ForwardDiff.Tag{typeof(f), Float64}, Float64, 2}}, f::Symbol)\n   @ Base ./Base.jl:33\n [2] f(x::SVector{2, ForwardDiff.Dual{ForwardDiff.Tag{typeof(f), Float64}, Float64, 2}})\n   @ Main ./REPL[6]:1\n [3] static_dual_eval(#unused#::Type{ForwardDiff.Tag{typeof(f), Float64}}, f::typeof(f), x::MyType{Float64})\n   @ ForwardDiff ~/.julia/packages/ForwardDiff/kU1ce/src/apiutils.jl:32\n [4] vector_mode_jacobian(f::Function, x::MyType{Float64})\n   @ ForwardDiff ~/.julia/packages/ForwardDiff/kU1ce/src/jacobian.jl:181\n [5] jacobian(f::Function, x::MyType{Float64})\n   @ ForwardDiff ~/.julia/packages/ForwardDiff/kU1ce/src/jacobian.jl:85\n [6] top-level scope\n   @ REPL[8]:1```\nAfter searching around a bit I noticed there is a open pull request to add FieldVector support to ForwardDiff but it is three years old already. I tried to follow the discussion in that pull request but it is outside my area of expertise. Anyone here who maybe knows how to get the MWE working (without replacing the `x.a` by `x[1]` and `x.b` by `x[2]` because that would beat the purpose of using FieldVectors)?","user":"UCT34GL7M","ts":"1611170789.105900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NEmT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm trying to use ForwardDiff on a function that takes a "},{"type":"text","text":"FieldVector","style":{"code":true}},{"type":"text","text":" (from StaticArrays) as input but without succes. Here's a MWE:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using StaticArrays\nusing ForwardDiff\n\nstruct MyType{T} <: FieldVector{2,T}\n    a::T\n    b::T\nend\n\nStaticArrays.similar_type(p::Type{<:MyType}, ::Type{T}, size::Size{(2,)}) where T = MyType{T}\n\nf(x) = x.a * x.b\nx = MyType(1.0, 2.0)\n\nForwardDiff.jacobian(f, x) "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"which gives me the error\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> ForwardDiff.jacobian(f, x)\nERROR: type SArray has no field a\nStacktrace:\n [1] getproperty(x::SVector{2, ForwardDiff.Dual{ForwardDiff.Tag{typeof(f), Float64}, Float64, 2}}, f::Symbol)\n   @ Base ./Base.jl:33\n [2] f(x::SVector{2, ForwardDiff.Dual{ForwardDiff.Tag{typeof(f), Float64}, Float64, 2}})\n   @ Main ./REPL[6]:1\n [3] static_dual_eval(#unused#::Type{ForwardDiff.Tag{typeof(f), Float64}}, f::typeof(f), x::MyType{Float64})\n   @ ForwardDiff ~/.julia/packages/ForwardDiff/kU1ce/src/apiutils.jl:32\n [4] vector_mode_jacobian(f::Function, x::MyType{Float64})\n   @ ForwardDiff ~/.julia/packages/ForwardDiff/kU1ce/src/jacobian.jl:181\n [5] jacobian(f::Function, x::MyType{Float64})\n   @ ForwardDiff ~/.julia/packages/ForwardDiff/kU1ce/src/jacobian.jl:85\n [6] top-level scope\n   @ REPL[8]:1"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"After searching around a bit I noticed there is a open pull request to add FieldVector support to ForwardDiff but it is three years old already. I tried to follow the discussion in that pull request but it is outside my area of expertise. Anyone here who maybe knows how to get the MWE working (without replacing the "},{"type":"text","text":"x.a","style":{"code":true}},{"type":"text","text":" by "},{"type":"text","text":"x[1]","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"x.b","style":{"code":true}},{"type":"text","text":" by "},{"type":"text","text":"x[2]","style":{"code":true}},{"type":"text","text":" because that would beat the purpose of using FieldVectors)?"}]}]}],"thread_ts":"1611170789.105900","reply_count":6,"reply_users_count":3,"latest_reply":"1611233159.006700","reply_users":["UD0NS8PDF","U9AHT3YM7","UCT34GL7M"],"subscribed":false},{"client_msg_id":"ebf25898-0952-4225-8c18-18f616ddbe52","type":"message","text":"What are the current implementations of forward mode with ChainRules?","user":"UKG4WF8PJ","ts":"1611175458.107200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"o3U3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What are the current implementations of forward mode with ChainRules?"}]}]}],"thread_ts":"1611175458.107200","reply_count":3,"reply_users_count":2,"latest_reply":"1611175924.107800","reply_users":["U6A936746","U67G3QRJM"],"subscribed":false},{"client_msg_id":"c7fd90be-75ef-4e20-92ac-536fd78d7216","type":"message","text":"I was thinking about differential types and the formalism behind. Is the intuition correct that thinking of differential types means giving up on the vector space semantics for the primal type, in the sense that:\n```+(x::P, dx::D) -&gt; P```\naddition does not have to be defined on the primal space, just like scaling does not have to be defined on the primal space, but the differential space has to be a vector space, and we have this `+`  operation taking two elements of different types, P and D and returning a P","user":"U82RE6STE","ts":"1611222848.003200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s7o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I was thinking about differential types and the formalism behind. Is the intuition correct that thinking of differential types means giving up on the vector space semantics for the primal type, in the sense that:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"+(x::P, dx::D) -> P"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"addition does not have to be defined on the primal space, just like scaling does not have to be defined on the primal space, but the differential space has to be a vector space, and we have this "},{"type":"text","text":"+","style":{"code":true}},{"type":"text","text":"  operation taking two elements of different types, P and D and returning a P"}]}]}],"thread_ts":"1611222848.003200","reply_count":32,"reply_users_count":5,"latest_reply":"1611248032.012300","reply_users":["U6A936746","U82RE6STE","U0160CXEY3Z","UD0NS8PDF","U674T3KB3"],"subscribed":false},{"client_msg_id":"84054a66-7332-4134-83f8-63da8ae3ecf7","type":"message","text":"I guess I was stuck in thinking in vector spaces but the relation between primal and differential types does not fit this framework. If there are good resources which could replace this feel free to point to them","user":"U82RE6STE","ts":"1611222928.004700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R5D","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess I was stuck in thinking in vector spaces but the relation between primal and differential types does not fit this framework. If there are good resources which could replace this feel free to point to them"}]}]}]},{"client_msg_id":"b4ec5ae4-8384-4180-a00b-7208067d43a8","type":"message","text":"What's an easy way to compute a Hessian of a generic function, which possibly uses a lot of LinearAlgebra?","user":"U7YD3DKL2","ts":"1611242075.011000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/lcy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What's an easy way to compute a Hessian of a generic function, which possibly uses a lot of LinearAlgebra?"}]}]}],"thread_ts":"1611242075.011000","reply_count":5,"reply_users_count":2,"latest_reply":"1611698262.050200","reply_users":["U01A38DLY8N","U7YD3DKL2"],"subscribed":false},{"client_msg_id":"e5d342d6-bd9b-4e31-bba2-5e31ba878807","type":"message","text":"I have written explanatory design docs for ChainRules that explain why `rrule` returns a closure, and why it lets you redefine how the primal is computed.\nThe PR is here:\n<https://github.com/JuliaDiff/ChainRulesCore.jl/pull/282>\n\nand you can look and the rendered preview here:\n<https://www.juliadiff.org/ChainRulesCore.jl/previews/PR282/design/changing_the_primal.html>\nFeedback would be appreciated","user":"U6A936746","ts":"1611354261.012900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DuvZd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have written explanatory design docs for ChainRules that explain why `rrule` returns a closure, and why it lets you redefine how the primal is computed.\nThe PR is here:\n"},{"type":"link","url":"https://github.com/JuliaDiff/ChainRulesCore.jl/pull/282"},{"type":"text","text":"\n\nand you can look and the rendered preview here:\n"},{"type":"link","url":"https://www.juliadiff.org/ChainRulesCore.jl/previews/PR282/design/changing_the_primal.html"},{"type":"text","text":"\nFeedback would be appreciated"}]}]}],"thread_ts":"1611354261.012900","reply_count":1,"reply_users_count":1,"latest_reply":"1611355409.014100","reply_users":["U6A936746"],"subscribed":false,"reactions":[{"name":"heart","users":["UH8A351DJ","UKG4WF8PJ","U017AJ68PFZ"],"count":3}]},{"client_msg_id":"6834bfc2-ec7d-4193-af3c-0f36a8a119d8","type":"message","text":"In my treatment I think it comes out naturally:\n\n<https://mitmath.github.io/18337/lecture10/estimation_identification>\n\nbecause the pullback is a function of the pushforward variables and it's not computed until later. There's really only a few sensible ways to compute that.","user":"U69BL50BF","ts":"1611354426.013800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YLv3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In my treatment I think it comes out naturally:\n\n"},{"type":"link","url":"https://mitmath.github.io/18337/lecture10/estimation_identification"},{"type":"text","text":"\n\nbecause the pullback is a function of the pushforward variables and it's not computed until later. There's really only a few sensible ways to compute that."}]}]}],"thread_ts":"1611354426.013800","reply_count":1,"reply_users_count":1,"latest_reply":"1611355196.013900","reply_users":["U6A936746"],"subscribed":false},{"client_msg_id":"887533a0-84a3-4d8f-b178-e77730f0e540","type":"message","text":"<https://twitter.com/dancherp/status/1353024050138914817>","user":"UDGT4PM41","ts":"1611444854.015000","team":"T68168MUP","attachments":[{"fallback":"<https://twitter.com/dancherp|@dancherp>: \"What types work with differentiation?\" :thinking_face:\n\nI condensed my learnings into an answer — featuring some type theory and differential geometry: <https://github.com/google-research/dex-lang/issues/454#issuecomment-766089519> <https://pbs.twimg.com/media/EsbnjKXW4AMYESS.jpg>","ts":1611421046,"author_name":"Dan Zheng","author_link":"https://twitter.com/dancherp/status/1353024050138914817","author_icon":"https://pbs.twimg.com/profile_images/1010414789351260160/dzAHJvda_normal.jpg","author_subname":"@dancherp","text":"\"What types work with differentiation?\" :thinking_face:\n\nI condensed my learnings into an answer — featuring some type theory and differential geometry: <https://github.com/google-research/dex-lang/issues/454#issuecomment-766089519> <https://pbs.twimg.com/media/EsbnjKXW4AMYESS.jpg>","service_name":"twitter","service_url":"https://twitter.com/","from_url":"https://twitter.com/dancherp/status/1353024050138914817","image_url":"https://pbs.twimg.com/media/EsbnjKXW4AMYESS.jpg","image_width":256,"image_height":1200,"image_bytes":57438,"id":1,"original_url":"https://twitter.com/dancherp/status/1353024050138914817","footer":"Twitter","footer_icon":"https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"}],"blocks":[{"type":"rich_text","block_id":"8KOV","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://twitter.com/dancherp/status/1353024050138914817"}]}]}],"thread_ts":"1611444854.015000","reply_count":1,"reply_users_count":1,"latest_reply":"1611450407.015200","reply_users":["UM6JW2SF9"],"subscribed":false},{"type":"message","subtype":"thread_broadcast","text":"Cool thread! On the footnote on optimal matrix accumulation order in O(n^3) I thought of \"Optimal Jacobian accumulation is NP-complete\". If I understood correctly the simpler matrix chain problem assumes that the factors don't have any internal structure / are just dense - i.e. a contrast to AD?","user":"UM6JW2SF9","ts":"1611450407.015200","thread_ts":"1611444854.015000","root":{"client_msg_id":"887533a0-84a3-4d8f-b178-e77730f0e540","type":"message","text":"<https://twitter.com/dancherp/status/1353024050138914817>","user":"UDGT4PM41","ts":"1611444854.015000","team":"T68168MUP","attachments":[{"fallback":"<https://twitter.com/dancherp|@dancherp>: \"What types work with differentiation?\" :thinking_face:\n\nI condensed my learnings into an answer — featuring some type theory and differential geometry: <https://github.com/google-research/dex-lang/issues/454#issuecomment-766089519> <https://pbs.twimg.com/media/EsbnjKXW4AMYESS.jpg>","ts":1611421046,"author_name":"Dan Zheng","author_link":"https://twitter.com/dancherp/status/1353024050138914817","author_icon":"https://pbs.twimg.com/profile_images/1010414789351260160/dzAHJvda_normal.jpg","author_subname":"@dancherp","text":"\"What types work with differentiation?\" :thinking_face:\n\nI condensed my learnings into an answer — featuring some type theory and differential geometry: <https://github.com/google-research/dex-lang/issues/454#issuecomment-766089519> <https://pbs.twimg.com/media/EsbnjKXW4AMYESS.jpg>","service_name":"twitter","service_url":"https://twitter.com/","from_url":"https://twitter.com/dancherp/status/1353024050138914817","image_url":"https://pbs.twimg.com/media/EsbnjKXW4AMYESS.jpg","image_width":256,"image_height":1200,"image_bytes":57438,"id":1,"original_url":"https://twitter.com/dancherp/status/1353024050138914817","footer":"Twitter","footer_icon":"https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"}],"blocks":[{"type":"rich_text","block_id":"8KOV","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://twitter.com/dancherp/status/1353024050138914817"}]}]}],"thread_ts":"1611444854.015000","reply_count":1,"reply_users_count":1,"latest_reply":"1611450407.015200","reply_users":["UM6JW2SF9"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"sEdH4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Cool thread! On the footnote on optimal matrix accumulation order in O(n^3) I thought of \"Optimal Jacobian accumulation is NP-complete\". If I understood correctly the simpler matrix chain problem assumes that the factors don't have any internal structure / are just dense - i.e. a contrast to AD?"}]}]}],"client_msg_id":"16a016f5-b16d-44e2-b9f3-ca5ee859d834"},{"client_msg_id":"ce041ade-ea42-45fb-ba55-4f57de512364","type":"message","text":"Hi all, <https://www.juliadiff.org/seems> a little outdated, is there a better starting point to learn about AD in Julia?","user":"U6CCK2SCV","ts":"1611476441.016300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d/K","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi all, "},{"type":"link","url":"https://www.juliadiff.org/seems"},{"type":"text","text":" a little outdated, is there a better starting point to learn about AD in Julia?"}]}]}],"thread_ts":"1611476441.016300","reply_count":2,"reply_users_count":2,"latest_reply":"1611480653.016700","reply_users":["UDXST8ARK","UD0NS8PDF"],"subscribed":false},{"client_msg_id":"1c1ba35a-61da-4bde-bdd1-93df3542b7df","type":"message","text":"Does anyone know if anyone has looked at making (Zygote-)differentiable Julia code callable from within JAX?","user":"U6PQP41C3","ts":"1611573699.018300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ysTi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does anyone know if anyone has looked at making (Zygote-)differentiable Julia code callable from within JAX?"}]}]}],"thread_ts":"1611573699.018300","reply_count":4,"reply_users_count":4,"latest_reply":"1611589600.024500","reply_users":["U6A936746","U90JR0C80","UFMH09DAR","U6PQP41C3"],"subscribed":false,"reactions":[{"name":"eyes","users":["U01A08JMUKT","UHDQQ4GN6","ULA52A5B5","UM6JW2SF9"],"count":4},{"name":"+1","users":["U6A936746"],"count":1}]},{"client_msg_id":"e15fa6df-711e-42a1-9b63-4c50ce2f9b1a","type":"message","text":"I’ve been trying to use Zygote to differentiate a function that is Real -&gt; Real, but uses complex numbers internally. Sometimes Zygote returns a complex gradient, while other times, it doesn’t, and I can’t figure out why. Any ideas? Ideally, it never should, IMO.\n\nMWE:\n```julia&gt; using Zygote\njulia&gt; f(θ) = abs(cis(θ) + cis(2θ));\njulia&gt; f(0.1)     # real -&gt; real\n1.9975005207899326\njulia&gt; f'(0.1)    # returns real gradient, as it should\n-0.049979169270678386\njulia&gt; f1(x) = 2 * abs(x + 1im * 2x);\njulia&gt; f1(2.0)   # real -&gt; real\n8.94427190999916\njulia&gt; f1'(2.0)  # returns complex gradient\n4.47213595499958 + 0.0im```","user":"U017AJ68PFZ","ts":"1611583598.021700","team":"T68168MUP","edited":{"user":"U017AJ68PFZ","ts":"1611583615.000000"},"blocks":[{"type":"rich_text","block_id":"pNN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’ve been trying to use Zygote to differentiate a function that is Real -> Real, but uses complex numbers internally. Sometimes Zygote returns a complex gradient, while other times, it doesn’t, and I can’t figure out why. Any ideas? Ideally, it never should, IMO.\n\nMWE:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using Zygote\njulia> f(θ) = abs(cis(θ) + cis(2θ));\njulia> f(0.1)     # real -> real\n1.9975005207899326\njulia> f'(0.1)    # returns real gradient, as it should\n-0.049979169270678386\njulia> f1(x) = 2 * abs(x + 1im * 2x);\njulia> f1(2.0)   # real -> real\n8.94427190999916\njulia> f1'(2.0)  # returns complex gradient\n4.47213595499958 + 0.0im"}]}]}],"thread_ts":"1611583598.021700","reply_count":8,"reply_users_count":4,"latest_reply":"1611636244.026800","reply_users":["U6A936746","U017AJ68PFZ","UHDQQ4GN6","UD0NS8PDF"],"subscribed":false},{"client_msg_id":"352b6d27-e6ee-4573-8c4a-0091024b430e","type":"message","text":"Hi, I’m trying to implement an `AbstractMatrix` -like structure with a slightly modified definition for matrix multiplication. Having it declared like a subtype of `AbstractMatrix` is convenient, because it can be for example used in `Flux.Dense` .  During implementation, I ran into several problems, which I could solve, but now I found an obstacle which I can’t get around. So I was wondering is `Flux` + `Zygote` + `ChainRules` suitable for `AbstractArray` subtypes or is there some fundamental problem why this is not recommended?","user":"U7XHKP15W","ts":"1611655943.031600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JvtW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi, I’m trying to implement an "},{"type":"text","text":"AbstractMatrix","style":{"code":true}},{"type":"text","text":" -like structure with a slightly modified definition for matrix multiplication. Having it declared like a subtype of "},{"type":"text","text":"AbstractMatrix","style":{"code":true}},{"type":"text","text":" is convenient, because it can be for example used in "},{"type":"text","text":"Flux.Dense","style":{"code":true}},{"type":"text","text":" .  During implementation, I ran into several problems, which I could solve, but now I found an obstacle which I can’t get around. So I was wondering is "},{"type":"text","text":"Flux","style":{"code":true}},{"type":"text","text":" + "},{"type":"text","text":"Zygote","style":{"code":true}},{"type":"text","text":" + "},{"type":"text","text":"ChainRules","style":{"code":true}},{"type":"text","text":" suitable for "},{"type":"text","text":"AbstractArray","style":{"code":true}},{"type":"text","text":" subtypes or is there some fundamental problem why this is not recommended?"}]}]}],"thread_ts":"1611655943.031600","reply_count":11,"reply_users_count":3,"latest_reply":"1611672418.042400","reply_users":["U7XHKP15W","UD0NS8PDF","U6A936746"],"subscribed":false},{"client_msg_id":"663268d4-3a88-48e5-bac7-b0c6881c623c","type":"message","text":"Dear AD-lovers,\nI am *looking for a good reference* explaining the relation between\n• (backward) AD, and \n• solving the adjoint of a given ODE or PDE;\nespecially in the context where one is interested in *computing the gradient of an ODE/PDE-constrained cost functional*. To what extent is it *possible to solve the adjoint equation ‘automatically’?*\n\nAlso, where could one find some introductory *numerical examples*, and fast (Julia) libraries for this?\n\nWould you have any suggestions?\nThank you!","user":"U01HC60USTH","ts":"1611657947.034400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5UcW6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Dear AD-lovers,\nI am "},{"type":"text","text":"looking for a good reference","style":{"bold":true}},{"type":"text","text":" explaining the relation between\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(backward) AD, and "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"solving the adjoint of a given ODE or PDE;"}]}],"style":"bullet","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"especially in the context where one is interested in "},{"type":"text","text":"computing the gradient of an ODE/PDE-constrained cost functional","style":{"bold":true}},{"type":"text","text":". To what extent is it "},{"type":"text","text":"possible to solve the adjoint equation ‘automatically’?","style":{"bold":true}},{"type":"text","text":"\n\nAlso, where could one find some introductory "},{"type":"text","text":"numerical examples","style":{"bold":true}},{"type":"text","text":", and fast (Julia) libraries for this?\n\nWould you have any suggestions?\nThank you!"}]}]}],"thread_ts":"1611657947.034400","reply_count":17,"reply_users_count":5,"latest_reply":"1611684528.045100","reply_users":["U6A936746","UMDEUKM29","U69BL50BF","U6P4UPP9D","U67G3QRJM"],"subscribed":false},{"client_msg_id":"5e1c8183-d2b3-4e37-8995-62d94773f134","type":"message","text":"<@UHDQQ4GN6> re:\nAD’ing though `sin`  (without a custom rule) will\n&gt;  … will incur something that looks a lot like truncation error (in apparent violation of Griewank and Walther’s 0th Rule of AD).\nIt is because lets say `sin` is implemented as a polynomial with 7 terms (plus some branches etc).\nIt’s derivative will be a polynomial with only 6 terms.\nWhich sure does look (at least superficially) like truncation error.\nThe function one gets out of ADing the `sin` implementation is less accurate than `cos` (which would in this example be a 7 term polynomial)\n\nGriewank and Walther’s 0th Rule of AD is “AD does not incur truncation errors”","user":"U6A936746","ts":"1611670816.041000","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1611670833.000000"},"blocks":[{"type":"rich_text","block_id":"5k4","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UHDQQ4GN6"},{"type":"text","text":" re:\nAD’ing though "},{"type":"text","text":"sin","style":{"code":true}},{"type":"text","text":"  (without a custom rule) will\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":" … will incur something that looks a lot like truncation error (in apparent violation of Griewank and Walther’s 0th Rule of AD)."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nIt is because lets say "},{"type":"text","text":"sin","style":{"code":true}},{"type":"text","text":" is implemented as a polynomial with 7 terms (plus some branches etc).\nIt’s derivative will be a polynomial with only 6 terms.\nWhich sure does look (at least superficially) like truncation error.\nThe function one gets out of ADing the "},{"type":"text","text":"sin","style":{"code":true}},{"type":"text","text":" implementation is less accurate than "},{"type":"text","text":"cos","style":{"code":true}},{"type":"text","text":" (which would in this example be a 7 term polynomial)\n\nGriewank and Walther’s 0th Rule of AD is “AD does not incur truncation errors”"}]}]}],"thread_ts":"1611670816.041000","reply_count":1,"reply_users_count":1,"latest_reply":"1611671660.042100","reply_users":["UM30MT6RF"],"subscribed":false,"reactions":[{"name":"+1","users":["U67G3QRJM","UKG4WF8PJ"],"count":2}]},{"client_msg_id":"063530dd-fe49-40ee-984a-7d8bd633c6e4","type":"message","text":"It’s a fun party trick to do that in Julia though. :slightly_smiling_face:","user":"U67461GUB","ts":"1611671032.041500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MJTk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It’s a fun party trick to do that in Julia though. "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1611671032.041500","reply_count":2,"reply_users_count":2,"latest_reply":"1611676398.042600","reply_users":["U6A936746","U6PQP41C3"],"subscribed":false,"reactions":[{"name":"heavy_check_mark","users":["U6A936746","U67G3QRJM"],"count":2}]},{"type":"message","subtype":"thread_broadcast","text":"I have been reading about this a lot lately. It is quite an interesting interwined story, it goes something roughly like this AFAICT.\n\nThe first numerical studies of cost functional ODEs actually proposed for the first time what we call backpropagation (look at The Numerical Solution of Variational Problems, Dreyfus 1962).\n\nYann LeCun derives backpropagation as a consequence of variational calculus and constraints between layers of a NN (A theoretical framework for back-propagation, LeCun 1988) and notes that it is equivalent to what was called multistage systems by the founders of applied control (Applied Optimal Control, Bryson &amp; Ho 1969).\n\nThen AD comes as a modern and general implementation of the extended ideas by Werbos 1974 but in some cases analogous to the discretization of such optimal control problems, as Griewank points out in his book and the article above.","user":"U6P4UPP9D","ts":"1611679103.043200","thread_ts":"1611657947.034400","root":{"client_msg_id":"663268d4-3a88-48e5-bac7-b0c6881c623c","type":"message","text":"Dear AD-lovers,\nI am *looking for a good reference* explaining the relation between\n• (backward) AD, and \n• solving the adjoint of a given ODE or PDE;\nespecially in the context where one is interested in *computing the gradient of an ODE/PDE-constrained cost functional*. To what extent is it *possible to solve the adjoint equation ‘automatically’?*\n\nAlso, where could one find some introductory *numerical examples*, and fast (Julia) libraries for this?\n\nWould you have any suggestions?\nThank you!","user":"U01HC60USTH","ts":"1611657947.034400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5UcW6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Dear AD-lovers,\nI am "},{"type":"text","text":"looking for a good reference","style":{"bold":true}},{"type":"text","text":" explaining the relation between\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(backward) AD, and "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"solving the adjoint of a given ODE or PDE;"}]}],"style":"bullet","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"especially in the context where one is interested in "},{"type":"text","text":"computing the gradient of an ODE/PDE-constrained cost functional","style":{"bold":true}},{"type":"text","text":". To what extent is it "},{"type":"text","text":"possible to solve the adjoint equation ‘automatically’?","style":{"bold":true}},{"type":"text","text":"\n\nAlso, where could one find some introductory "},{"type":"text","text":"numerical examples","style":{"bold":true}},{"type":"text","text":", and fast (Julia) libraries for this?\n\nWould you have any suggestions?\nThank you!"}]}]}],"thread_ts":"1611657947.034400","reply_count":17,"reply_users_count":5,"latest_reply":"1611684528.045100","reply_users":["U6A936746","UMDEUKM29","U69BL50BF","U6P4UPP9D","U67G3QRJM"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"=M==u","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have been reading about this a lot lately. It is quite an interesting interwined story, it goes something roughly like this AFAICT.\n\nThe first numerical studies of cost functional ODEs actually proposed for the first time what we call backpropagation (look at The Numerical Solution of Variational Problems, Dreyfus 1962).\n\nYann LeCun derives backpropagation as a consequence of variational calculus and constraints between layers of a NN (A theoretical framework for back-propagation, LeCun 1988) and notes that it is equivalent to what was called multistage systems by the founders of applied control (Applied Optimal Control, Bryson & Ho 1969).\n\nThen AD comes as a modern and general implementation of the extended ideas by Werbos 1974 but in some cases analogous to the discretization of such optimal control problems, as Griewank points out in his book and the article above."}]}]}],"client_msg_id":"2e93b924-2371-46d0-9f3b-c015a036c7c9"},{"client_msg_id":"f9f2c0dc-7ddc-4108-8491-eb8c1e8c587f","type":"message","text":"More fun :chainrules:  docs.\nTalks about how and why to use `add!!` and `InplaceableThunks`\n<https://github.com/JuliaDiff/ChainRulesCore.jl/pull/287>\nFeedback would be appreciated","user":"U6A936746","ts":"1611687160.047300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x+8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"More fun "},{"type":"emoji","name":"chainrules"},{"type":"text","text":"  docs.\nTalks about how and why to use "},{"type":"text","text":"add!!","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"InplaceableThunks","style":{"code":true}},{"type":"text","text":"\n"},{"type":"link","url":"https://github.com/JuliaDiff/ChainRulesCore.jl/pull/287"},{"type":"text","text":"\nFeedback would be appreciated"}]}]}]},{"client_msg_id":"ce6f2d30-af13-490e-9d1b-06e43b827c3c","type":"message","text":"Is there a reason why `ForwardDiff` with `StaticArrays` and `IntervalArithmetic` would suddenly have become so slow that it doesn’t finish calculating a 6x6 Jacobian in the amount of time I’m willing to wait? Here’s a MWE. The calculation just hangs. However, simple functions like `f(x) = 2.x` work fine","user":"U67G3QRJM","ts":"1611698052.048900","team":"T68168MUP","edited":{"user":"U67G3QRJM","ts":"1611698091.000000"},"blocks":[{"type":"rich_text","block_id":"Vuu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a reason why "},{"type":"text","text":"ForwardDiff","style":{"code":true}},{"type":"text","text":" with "},{"type":"text","text":"StaticArrays","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"IntervalArithmetic","style":{"code":true}},{"type":"text","text":" would suddenly have become so slow that it doesn’t finish calculating a 6x6 Jacobian in the amount of time I’m willing to wait? Here’s a MWE. The calculation just hangs. However, simple functions like "},{"type":"text","text":"f(x) = 2.x","style":{"code":true}},{"type":"text","text":" work fine"}]}]}]},{"type":"message","text":"","files":[{"id":"F01KYLF70RY","created":1611698064,"timestamp":1611698064,"name":"Untitled","title":"Untitled","mimetype":"text/plain","filetype":"text","pretty_type":"Plain Text","user":"U67G3QRJM","editable":true,"size":766,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01KYLF70RY/untitled","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01KYLF70RY/download/untitled","permalink":"https://julialang.slack.com/files/U67G3QRJM/F01KYLF70RY/untitled","permalink_public":"https://slack-files.com/T68168MUP-F01KYLF70RY-ca9726334d","edit_link":"https://julialang.slack.com/files/U67G3QRJM/F01KYLF70RY/untitled/edit","preview":"using IntervalArithmetic\nusing StaticArrays\nusing BenchmarkTools\nusing ForwardDiff\n","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text/plain',window.getSelection().toString().replace(/\\u200b/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>using IntervalArithmetic</pre></div>\n<div><pre>using StaticArrays</pre></div>\n<div><pre>using BenchmarkTools</pre></div>\n<div><pre>using ForwardDiff</pre></div>\n<div><pre></pre></div>\n</div>\n</div>\n","lines":24,"lines_more":19,"preview_is_truncated":false,"is_starred":false,"has_rich_preview":false}],"upload":true,"user":"U67G3QRJM","display_as_bot":false,"ts":"1611698065.049000","client_msg_id":"caa88838-2e12-4008-b4ff-1caac368898f"},{"client_msg_id":"c9b9930b-94a2-4bde-bfe1-b56579916872","type":"message","text":"How would I debug what’s going on here?","user":"U67G3QRJM","ts":"1611698100.049500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZbkYs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How would I debug what’s going on here?"}]}]}],"thread_ts":"1611698100.049500","reply_count":3,"reply_users_count":2,"latest_reply":"1611726657.051400","reply_users":["UJ7DVTVQ8","U67G3QRJM"],"subscribed":false},{"client_msg_id":"db5f5a4b-60e2-4938-9c4a-869998addc9b","type":"message","text":"This is suppposed to Just Work…","user":"U67G3QRJM","ts":"1611698162.049700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Iph","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is suppposed to Just Work…"}]}]}]},{"client_msg_id":"153cd6fd-eef7-435d-ba90-52370c64cbd4","type":"message","text":"Hmmm, even a simple function like `f(x) = 2 .* x .* x` takes a long time to compile though (8 seconds, 2GiB of allocations!)","user":"U67G3QRJM","ts":"1611698285.050700","team":"T68168MUP","edited":{"user":"U67G3QRJM","ts":"1611698417.000000"},"blocks":[{"type":"rich_text","block_id":"yeo1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmmm, even a simple function like "},{"type":"text","text":"f(x) = 2 .* x .* x","style":{"code":true}},{"type":"text","text":" takes a long time to compile though (8 seconds, 2GiB of allocations!)"}]}]}]},{"client_msg_id":"a939e681-c5c2-4bbb-aa42-5cd716da5a1a","type":"message","text":"Hi all,\n\nis there anything which would fundamentally prevent to calculate second order gradients with Zygote with custom gradients defined with ChainRulesCore? I had once (month ago) a working system with @adjoint, but I would like to change it to ChainRules, to be in line with community.","user":"U6YRZ18GZ","ts":"1611776359.053400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Lx4MF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi all,\n\nis there anything which would fundamentally prevent to calculate second order gradients with Zygote with custom gradients defined with ChainRulesCore? I had once (month ago) a working system with @adjoint, but I would like to change it to ChainRules, to be in line with community."}]}]}],"thread_ts":"1611776359.053400","reply_count":6,"reply_users_count":3,"latest_reply":"1611776694.054500","reply_users":["UHDQQ4GN6","U6A936746","U6YRZ18GZ"],"subscribed":false},{"client_msg_id":"f3b6a53a-4882-4287-842b-ce2b4d253cbb","type":"message","text":"Hi All,\n\none more question. I am modifying logitcrossentropy and softmax to support second order gradients, as I am interested with structured prediction with NNs. Should I keep this changes private, or try to put them somewehere, possibly NNlib.","user":"U6YRZ18GZ","ts":"1611821681.056600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Hqr0a","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi All,\n\none more question. I am modifying logitcrossentropy and softmax to support second order gradients, as I am interested with structured prediction with NNs. Should I keep this changes private, or try to put them somewehere, possibly NNlib."}]}]}]},{"client_msg_id":"54eb006a-7168-415c-a4e8-20892a419776","type":"message","text":"<@U6A936746> when do you anticipate Zygote will support ChainRules's `InplaceableThunk`?","user":"UHDQQ4GN6","ts":"1611824744.057400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RrWuK","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U6A936746"},{"type":"text","text":" when do you anticipate Zygote will support ChainRules's "},{"type":"text","text":"InplaceableThunk","style":{"code":true}},{"type":"text","text":"?"}]}]}]},{"client_msg_id":"38256337-601f-42c2-8939-400ea0a0c492","type":"message","text":"One day i need to do something with\n```function linearize(f, x...)\n    function pushfoward(ẋ...)\n        y, ẏ = frule(ẋ, f, x...)\n        return ẏ\n    end\n    return pushfoward\nend```\nPossibly a companion package to ChainRules that does this, and other things like pullback via pushforwards and pushforwards via pullback.\nand getting jacobians and directional derivatives and gradients out simply.","user":"U6A936746","ts":"1611845383.058800","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1611845466.000000"},"blocks":[{"type":"rich_text","block_id":"Y5qj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"One day i need to do something with\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function linearize(f, x...)\n    function pushfoward(ẋ...)\n        y, ẏ = frule(ẋ, f, x...)\n        return ẏ\n    end\n    return pushfoward\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nPossibly a companion package to ChainRules that does this, and other things like pullback via pushforwards and pushforwards via pullback.\nand getting jacobians and directional derivatives and gradients out simply."}]}]}]},{"client_msg_id":"0dafba22-e120-4b23-8e9a-0f871df8ad72","type":"message","text":"Would the inclusion of newer julia libraries in <http://autodiff.org|autodiff.org> be relevant in some way? It seems outdated in general but it also is the central reference for autodiff frameworks.","user":"U6P4UPP9D","ts":"1611846363.064900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QKG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Would the inclusion of newer julia libraries in "},{"type":"link","url":"http://autodiff.org","text":"autodiff.org"},{"type":"text","text":" be relevant in some way? It seems outdated in general but it also is the central reference for autodiff frameworks."}]}]}],"thread_ts":"1611846363.064900","reply_count":3,"reply_users_count":2,"latest_reply":"1611846812.065800","reply_users":["U6A936746","UD0NS8PDF"],"subscribed":false,"reactions":[{"name":"+1","users":["U6A936746"],"count":1}]},{"type":"message","text":"","user":"U6A936746","ts":"1611860863.069100","team":"T68168MUP","attachments":[{"fallback":"[January 28th, 2021 7:07 PM] oxinabox: is Curtis-Powell-Reid seeding and Newsam-Ramsdell seeding as used in AD  just special cases of a more general method for finding matrixes for linear operators expressed as functions?","ts":"1611860854.070000","author_id":"U6A936746","author_subname":"Lyndon White","channel_id":"C677F4ABD","channel_name":"linear-algebra","is_msg_unfurl":true,"is_reply_unfurl":true,"text":"is Curtis-Powell-Reid seeding and Newsam-Ramsdell seeding as used in AD  just special cases of a more general method for finding matrixes for linear operators expressed as functions?","author_name":"Lyndon White","author_link":"https://julialang.slack.com/team/U6A936746","author_icon":"https://avatars.slack-edge.com/2017-07-25/216502576448_36aaf550196bfa49acdc_48.jpg","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https://julialang.slack.com/archives/C677F4ABD/p1611860854070000?thread_ts=1611844521065200&cid=C677F4ABD","is_share":true,"footer":"From a thread in #linear-algebra"}]},{"client_msg_id":"07b1a2e6-4a78-4639-bc29-158fb2f64f1b","type":"message","text":"Newsam-Ramsdell seeding is one of the things on my big list of things we should have,","user":"U6A936746","ts":"1611861135.069800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oOQA1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Newsam-Ramsdell seeding is one of the things on my big list of things we should have,"}]}]}]},{"client_msg_id":"042037ab-85ca-4379-a453-e438a3546ef7","type":"message","text":"Why can I do\n```f(x) = x[1]^2 + x[2]^2\ninputs = [1.0, 1.0]\nForwardDiff.jacobian(x -&gt; ReverseDiff.gradient(f, x), inputs)```\nbut not\n```f(x) = x[1]^2 + x[2]^2\ninputs = [1.0, 1.0]\nout = zeros(2)\nftape = ReverseDiff.compile(ReverseDiff.GradientTape(f, rand(2)))\nForwardDiff.jacobian(f_inputs -&gt; ReverseDiff.gradient!(out, ftape, f_inputs), inputs)```\n?\n\nFor the second I get a method error where it tries to convert a Float64 to a Dual.","user":"U01C2E6TYEM","ts":"1611915050.074800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bTmM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Why can I do\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"f(x) = x[1]^2 + x[2]^2\ninputs = [1.0, 1.0]\nForwardDiff.jacobian(x -> ReverseDiff.gradient(f, x), inputs)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"but not\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"f(x) = x[1]^2 + x[2]^2\ninputs = [1.0, 1.0]\nout = zeros(2)\nftape = ReverseDiff.compile(ReverseDiff.GradientTape(f, rand(2)))\nForwardDiff.jacobian(f_inputs -> ReverseDiff.gradient!(out, ftape, f_inputs), inputs)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"?\n\nFor the second I get a method error where it tries to convert a Float64 to a Dual."}]}]}]},{"client_msg_id":"e7c14708-e746-484f-88a9-8d82301ac1c2","type":"message","text":"Does the dual number approach extend to complex dual numbers (a 4-tuple with partial real and imag values)? I would have thought that it should, but I haven't seen support for it and a quick google didn't show anything. The use case I have in mind is eigen-/schur decompositions. I was taking a look at GenericSchur.jl to see if I could adapt it to support Duals, but dealing with complex numbers was the sticking point for me.","user":"U017YGFQTE3","ts":"1611915451.077100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5zK5p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does the dual number approach extend to complex dual numbers (a 4-tuple with partial real and imag values)? I would have thought that it should, but I haven't seen support for it and a quick google didn't show anything. The use case I have in mind is eigen-/schur decompositions. I was taking a look at GenericSchur.jl to see if I could adapt it to support Duals, but dealing with complex numbers was the sticking point for me."}]}]}],"thread_ts":"1611915451.077100","reply_count":6,"reply_users_count":3,"latest_reply":"1611918820.079800","reply_users":["UD0NS8PDF","U017YGFQTE3","UHDQQ4GN6"],"subscribed":false},{"client_msg_id":"665a8d0b-0751-49db-aae3-5cc9c70970a8","type":"message","text":"My read of this:\n<https://github.com/google-research/dex-lang/issues/454#issuecomment-770117681|https://github.com/google-research/dex-lang/issues/454#issuecomment-770117681>\n\nConal Elliott takes objection to fusing the pushforward with the primal in (e.g.) ChainRules' `frule`.\nHe thinks this kind of thing should be like `rrule` returning a primal result, and a pushforward linear operator (which will be a closure)","user":"U6A936746","ts":"1612031768.084800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Gd=M","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My read of this:\n"},{"type":"link","url":"https://github.com/google-research/dex-lang/issues/454#issuecomment-770117681","text":"https://github.com/google-research/dex-lang/issues/454#issuecomment-770117681"},{"type":"text","text":"\n\nConal Elliott takes objection to fusing the pushforward with the primal in (e.g.) ChainRules' "},{"type":"text","text":"frule","style":{"code":true}},{"type":"text","text":".\nHe thinks this kind of thing should be like "},{"type":"text","text":"rrule","style":{"code":true}},{"type":"text","text":" returning a primal result, and a pushforward linear operator (which will be a closure)"}]}]}],"thread_ts":"1612031768.084800","reply_count":48,"reply_users_count":7,"latest_reply":"1612053234.101600","reply_users":["U8R9JE0D6","UMY1LV01G","U6A936746","U8D9768Q6","UD0NS8PDF","U69BL50BF","UHDQQ4GN6"],"subscribed":false},{"client_msg_id":"5df7312c-3c6e-473b-9004-392f2df2133a","type":"message","text":"I know this has been asked N times but how do I do a jvp in ForwardDiff.jl? Is there a function to do that yet?","user":"U67G3QRJM","ts":"1612160305.103200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Foi1z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I know this has been asked N times but how do I do a jvp in ForwardDiff.jl? Is there a function to do that yet?"}]}]}],"thread_ts":"1612160305.103200","reply_count":3,"reply_users_count":2,"latest_reply":"1612201560.119100","reply_users":["UB197FRCL","U67G3QRJM"],"subscribed":false},{"client_msg_id":"ed9b75df-f7ce-4ea4-821f-623f9b2534d7","type":"message","text":"SparseDiffTools.jl has it.","user":"U69BL50BF","ts":"1612161337.103400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+VV3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"SparseDiffTools.jl has it."}]}]}]},{"client_msg_id":"4dc9c60d-259e-4098-bbc7-774de565a118","type":"message","text":"Or just `ForwardDiff.derivative(h-&gt;f(position + h*direction), 1.0)`","user":"U6788D83U","ts":"1612161469.104300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C=KH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Or just "},{"type":"text","text":"ForwardDiff.derivative(h->f(position + h*direction), 1.0)","style":{"code":true}}]}]}],"thread_ts":"1612161469.104300","reply_count":3,"reply_users_count":2,"latest_reply":"1612169780.117000","reply_users":["UB197FRCL","U6788D83U"],"subscribed":false},{"client_msg_id":"c24e3fb1-8745-4046-b7ef-357950a38bb1","type":"message","text":"The reason that forward mode AD can compute jvp efficiently is because it’s just a scalar derivative (i.e. the input of the function is a scalar), and forward mode AD is good at that.","user":"U6788D83U","ts":"1612161585.105800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XMx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The reason that forward mode AD can compute jvp efficiently is because it’s just a scalar derivative (i.e. the input of the function is a scalar), and forward mode AD is good at that."}]}]}],"reactions":[{"name":"+1","users":["U67G3QRJM","UKG4WF8PJ"],"count":2}]},{"client_msg_id":"1d3c2092-fa7b-418f-9b26-ded8c7028fba","type":"message","text":"Hmm, that doesn’t work for my interval case","user":"U67G3QRJM","ts":"1612162375.106200","team":"T68168MUP","edited":{"user":"U67G3QRJM","ts":"1612162379.000000"},"blocks":[{"type":"rich_text","block_id":"dTNaO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmm, that doesn’t work for my interval case"}]}]}]},{"client_msg_id":"b8bc3036-4e16-4337-b261-f7bf9bf8bda5","type":"message","text":"```  [1] convert(#unused#::Type{Interval{ForwardDiff.Dual{ForwardDiff.Tag{var\"#9#10\", Float64}, Interval{Float64}, 1}}}, x::Interval{Float64})\n    @ IntervalArithmetic ~/.julia/packages/IntervalArithmetic/odPjL/src/intervals/conversion.jl:20\n  [2] _promote\n    @ ./promotion.jl:269 [inlined]\n  [3] promote\n    @ ./promotion.jl:292 [inlined]\n  [4] +(x::Interval{Float64}, y::Interval{ForwardDiff.Dual{ForwardDiff.Tag{var\"#9#10\", Float64}, Interval{Float64}, 1}})```","user":"U67G3QRJM","ts":"1612162406.106500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Oq1ok","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"  [1] convert(#unused#::Type{Interval{ForwardDiff.Dual{ForwardDiff.Tag{var\"#9#10\", Float64}, Interval{Float64}, 1}}}, x::Interval{Float64})\n    @ IntervalArithmetic ~/.julia/packages/IntervalArithmetic/odPjL/src/intervals/conversion.jl:20\n  [2] _promote\n    @ ./promotion.jl:269 [inlined]\n  [3] promote\n    @ ./promotion.jl:292 [inlined]\n  [4] +(x::Interval{Float64}, y::Interval{ForwardDiff.Dual{ForwardDiff.Tag{var\"#9#10\", Float64}, Interval{Float64}, 1}})"}]}]}]},{"client_msg_id":"07c6d043-d196-407a-8884-e0896b94fbe8","type":"message","text":"It doesn’t know how to convert","user":"U67G3QRJM","ts":"1612162416.106700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8LE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It doesn’t know how to convert"}]}]}]},{"client_msg_id":"6a741312-f9eb-468f-8424-46023c79de95","type":"message","text":"There was a method with seeding duals directly iirc","user":"U67G3QRJM","ts":"1612162491.107200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vt15","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There was a method with seeding duals directly iirc"}]}]}]},{"client_msg_id":"4ae32da2-c392-4d4a-9176-e137e2e4303f","type":"message","text":"Yeah, that’s the SparseDiffTools one","user":"U6788D83U","ts":"1612162510.107500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QadKi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, that’s the SparseDiffTools one"}]}]}]},{"client_msg_id":"ea9cae74-d866-460b-bdc0-914a98b78bb9","type":"message","text":"For the above example, you might want to change `1.0` to the interval analog for 1","user":"U6788D83U","ts":"1612162564.108600","team":"T68168MUP","edited":{"user":"U6788D83U","ts":"1612162597.000000"},"blocks":[{"type":"rich_text","block_id":"ENb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For the above example, you might want to change "},{"type":"text","text":"1.0","style":{"code":true}},{"type":"text","text":" to the interval analog for 1"}]}]}]},{"client_msg_id":"e91a4f35-ae88-42ca-8599-8133a308afab","type":"message","text":"No that doesn’t help","user":"U67G3QRJM","ts":"1612162582.108800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"G/oz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No that doesn’t help"}]}]}]},{"client_msg_id":"ee2fc0c8-8555-412c-903c-084edfd4210f","type":"message","text":"The problem is when it tries to add an interval to a dual","user":"U67G3QRJM","ts":"1612162661.109300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6FG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The problem is when it tries to add an interval to a dual"}]}]}]},{"client_msg_id":"63d384b9-b7fe-4f5e-8732-b6aa57495071","type":"message","text":"`ForwardDiff.derivative(h-&gt;f(position*one(h) + h*direction), one(T))`","user":"U6788D83U","ts":"1612162693.109700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"b4HEg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ForwardDiff.derivative(h->f(position*one(h) + h*direction), one(T))","style":{"code":true}}]}]}]},{"client_msg_id":"efbd566a-5e7f-4ad8-a220-c5e61f037d65","type":"message","text":"What about this","user":"U6788D83U","ts":"1612162697.109900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9VS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What about this"}]}]}]},{"client_msg_id":"9701f870-ca26-4eac-8876-271ee07f10bf","type":"message","text":"What’s T there?","user":"U67G3QRJM","ts":"1612162703.110100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"X8O","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What’s T there?"}]}]}]},{"client_msg_id":"7d006d55-1a14-494f-9383-4685b2a3eeff","type":"message","text":"`one(T)` is the interval one","user":"U6788D83U","ts":"1612162717.110600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"q7l","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"one(T)","style":{"code":true}},{"type":"text","text":" is the interval one"}]}]}]},{"client_msg_id":"004a86a5-1eb0-46e1-aa2c-d51324939f3a","type":"message","text":"Still fails","user":"U67G3QRJM","ts":"1612162776.110800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WBqK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Still fails"}]}]}]},{"client_msg_id":"f5fa17a7-ba27-4b43-aaa2-bfffdca3ba93","type":"message","text":"OK this worked:\n```ForwardDiff.derivative(h -&gt; f(X + h .* (X - m)), 1..1)```","user":"U67G3QRJM","ts":"1612162837.111200","team":"T68168MUP","edited":{"user":"U67G3QRJM","ts":"1612162871.000000"},"blocks":[{"type":"rich_text","block_id":"NgV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"OK this worked:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"ForwardDiff.derivative(h -> f(X + h .* (X - m)), 1..1)"}]}]}]},{"client_msg_id":"a9955856-606b-4039-9ed5-8e1c9cf88185","type":"message","text":"Thanks!","user":"U67G3QRJM","ts":"1612162897.111800","team":"T68168MUP","edited":{"user":"U67G3QRJM","ts":"1612162904.000000"},"blocks":[{"type":"rich_text","block_id":"/1hM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks!"}]}]}]},{"client_msg_id":"9bfb5883-6c7b-438d-a9de-e9722468487f","type":"message","text":"<https://github.com/JuliaDiff/SparseDiffTools.jl#jacobian-vector-and-hessian-vector-products>","user":"U6788D83U","ts":"1612163032.112100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LA7T7","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaDiff/SparseDiffTools.jl#jacobian-vector-and-hessian-vector-products"}]}]}]},{"client_msg_id":"4b581270-e85b-4758-a556-9392f217d786","type":"message","text":"This uses direct seeding","user":"U6788D83U","ts":"1612163056.112700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6dh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This uses direct seeding"}]}]}]},{"client_msg_id":"23c50764-d77b-450b-9e46-7a20037da7ad","type":"message","text":"Ah I see, the problem was that I was using an extra type (`IntervalBox.jl`) in there, not just static vectors.","user":"U67G3QRJM","ts":"1612163130.113300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3zDF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah I see, the problem was that I was using an extra type ("},{"type":"text","text":"IntervalBox.jl","style":{"code":true}},{"type":"text","text":") in there, not just static vectors."}]}]}]},{"client_msg_id":"e0f23f53-ba61-443a-8d65-002dfa371ba2","type":"message","text":"Thanks","user":"U67G3QRJM","ts":"1612163137.113500","team":"T68168MUP","edited":{"user":"U67G3QRJM","ts":"1612163142.000000"},"blocks":[{"type":"rich_text","block_id":"Bfw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks"}]}]}]},{"client_msg_id":"a9fdaf90-6420-4620-bada-55b322b4486f","type":"message","text":"<@U67G3QRJM> I think your last derivative code gives you the derivative of `f` at `(2X - m)`  in the `X - m` direction if you use `1..1` and not `0..0` , but maybe I'm missing something (edited)","user":"UB197FRCL","ts":"1612165679.115300","team":"T68168MUP","edited":{"user":"UB197FRCL","ts":"1612165740.000000"},"blocks":[{"type":"rich_text","block_id":"yzl","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U67G3QRJM"},{"type":"text","text":" I think your last derivative code gives you the derivative of "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" at "},{"type":"text","text":"(2X - m)","style":{"code":true}},{"type":"text","text":"  in the "},{"type":"text","text":"X - m","style":{"code":true}},{"type":"text","text":" direction if you use "},{"type":"text","text":"1..1","style":{"code":true}},{"type":"text","text":" and not "},{"type":"text","text":"0..0","style":{"code":true}},{"type":"text","text":" , but maybe I'm missing something (edited)"}]}]}],"reactions":[{"name":"+1","users":["U67G3QRJM"],"count":1}]},{"client_msg_id":"7db0f015-9160-416c-a10d-6e2633448513","type":"message","text":"Ah yes, I think you're right that it should be evaluated at 0 rather than 1. Thanks <@UB197FRCL>!","user":"U67G3QRJM","ts":"1612195278.118300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YRGD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah yes, I think you're right that it should be evaluated at 0 rather than 1. Thanks "},{"type":"user","user_id":"UB197FRCL"},{"type":"text","text":"!"}]}]}]},{"client_msg_id":"72eea3c2-8c8e-416a-95b8-1b3547b5fd54","type":"message","text":"Can someone else with rights on ForwardDiff review this PR? <https://github.com/JuliaDiff/ForwardDiff.jl/pull/503>","user":"UHDQQ4GN6","ts":"1612210674.119900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9uM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can someone else with rights on ForwardDiff review this PR? "},{"type":"link","url":"https://github.com/JuliaDiff/ForwardDiff.jl/pull/503"}]}]}],"thread_ts":"1612210674.119900","reply_count":2,"reply_users_count":2,"latest_reply":"1612215774.120700","reply_users":["U6A936746","UHDQQ4GN6"],"subscribed":false},{"client_msg_id":"53b5af46-f535-4cc9-9a19-410d44b1fa1b","type":"message","text":"Can anyone give me advice on this:\n<https://discourse.julialang.org/t/repeatedly-calculating-a-hessian-using-both-forwarddiff-and-reversediff/54051>","user":"U01C2E6TYEM","ts":"1612214032.120200","team":"T68168MUP","attachments":[{"service_name":"JuliaLang","title":"Repeatedly calculating a hessian using both ForwardDiff and ReverseDiff","title_link":"https://discourse.julialang.org/t/repeatedly-calculating-a-hessian-using-both-forwarddiff-and-reversediff/54051","text":"I would like to calculate a Hessian matrix of a function f:\\mathbb{R}^n \\rightarrow \\mathbb{R} where n\\gg1. In my usecase the Jacobian of f is always needed, and the Hessian may or may not be needed (but this is known before calculation of the Jacobian). Additionally, I only require the Hessian with respect to the first m dimensions, again where n \\gg m &gt; 1, this is because the first m input dimensions are parameters, and the latter are data. I am aware that using diffresults one can recover th...","fallback":"JuliaLang: Repeatedly calculating a hessian using both ForwardDiff and ReverseDiff","thumb_url":"https://aws1.discourse-cdn.com/business5/uploads/julialang/original/2X/1/12829a7ba92b924d4ce81099cbf99785bee9b405.png","ts":1611750107,"from_url":"https://discourse.julialang.org/t/repeatedly-calculating-a-hessian-using-both-forwarddiff-and-reversediff/54051","thumb_width":408,"thumb_height":263,"service_icon":"https://aws1.discourse-cdn.com/business5/uploads/julialang/optimized/2X/6/6ca888e296f59ca2a599807f7d5edd489e3d1829_2_180x180.png","id":1,"original_url":"https://discourse.julialang.org/t/repeatedly-calculating-a-hessian-using-both-forwarddiff-and-reversediff/54051"}],"blocks":[{"type":"rich_text","block_id":"BJF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can anyone give me advice on this:\n"},{"type":"link","url":"https://discourse.julialang.org/t/repeatedly-calculating-a-hessian-using-both-forwarddiff-and-reversediff/54051"}]}]}]},{"client_msg_id":"7d2fe34d-5422-4e04-9adb-46f2fe8b629e","type":"message","text":"Is this the correct `rrule` for `reinterpret(reshape, ...)`?\n```function ChainRulesCore.rrule(::typeof(reinterpret), ::typeof(reshape), ::Type{R}, r::AbstractArray{T}) where {R, T}\n    function pullback(r̄)\n        return (NO_FIELDS, DoesNotExist(), DoesNotExist(), reinterpret(reshape, T, r̄))\n    end\n    return reinterpret(reshape, R, r), pullback\nend```","user":"U66SR8JHX","ts":"1612292937.124000","team":"T68168MUP","edited":{"user":"U66SR8JHX","ts":"1612292993.000000"},"blocks":[{"type":"rich_text","block_id":"Wyi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is this the correct "},{"type":"text","text":"rrule","style":{"code":true}},{"type":"text","text":" for "},{"type":"text","text":"reinterpret(reshape, ...)","style":{"code":true}},{"type":"text","text":"?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function ChainRulesCore.rrule(::typeof(reinterpret), ::typeof(reshape), ::Type{R}, r::AbstractArray{T}) where {R, T}\n    function pullback(r̄)\n        return (NO_FIELDS, DoesNotExist(), DoesNotExist(), reinterpret(reshape, T, r̄))\n    end\n    return reinterpret(reshape, R, r), pullback\nend"}]}]}],"thread_ts":"1612292937.124000","reply_count":28,"reply_users_count":3,"latest_reply":"1612317556.135200","reply_users":["U66SR8JHX","U6A936746","UD0NS8PDF"],"subscribed":false},{"client_msg_id":"031774cf-f7b8-4535-a4f9-22e945f762c1","type":"message","text":"Is this known to be broken?\n```julia&gt; gradient(x -&gt; sum(sin, Diagonal(x)), rand(2))[1]\nERROR: ArgumentError: cannot set off-diagonal entry (1, 2) to a nonzero value (1.0)\nStacktrace:\n  [1] setindex!\n    @ ~/.julia/dev/julia/usr/share/julia/stdlib/v1.7/LinearAlgebra/src/diagonal.jl:101 [inlined]```","user":"UD0NS8PDF","ts":"1612295136.126900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"52sv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is this known to be broken?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> gradient(x -> sum(sin, Diagonal(x)), rand(2))[1]\nERROR: ArgumentError: cannot set off-diagonal entry (1, 2) to a nonzero value (1.0)\nStacktrace:\n  [1] setindex!\n    @ ~/.julia/dev/julia/usr/share/julia/stdlib/v1.7/LinearAlgebra/src/diagonal.jl:101 [inlined]"}]}]}],"thread_ts":"1612295136.126900","reply_count":9,"reply_users_count":2,"latest_reply":"1612297425.134200","reply_users":["U6A936746","UD0NS8PDF"],"subscribed":false},{"client_msg_id":"7d6e07d4-3cb1-4867-b2be-8487ad3010bb","type":"message","text":"Any news on making broadcast faster on Zygote? I would have expected that after merging <https://github.com/FluxML/Zygote.jl/pull/503>, there would be some impact on this. There are some open issues / PRs on this: <https://github.com/FluxML/Zygote.jl/pull/338>, <https://github.com/FluxML/Zygote.jl/issues/336>, <https://github.com/FluxML/Zygote.jl/issues/592>.","user":"U7YD3DKL2","ts":"1612343266.137800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"B=V6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Any news on making broadcast faster on Zygote? I would have expected that after merging "},{"type":"link","url":"https://github.com/FluxML/Zygote.jl/pull/503"},{"type":"text","text":", there would be some impact on this. There are some open issues / PRs on this: "},{"type":"link","url":"https://github.com/FluxML/Zygote.jl/pull/338"},{"type":"text","text":", "},{"type":"link","url":"https://github.com/FluxML/Zygote.jl/issues/336"},{"type":"text","text":", "},{"type":"link","url":"https://github.com/FluxML/Zygote.jl/issues/592"},{"type":"text","text":"."}]}]}],"reactions":[{"name":"heavy_plus_sign","users":["UM6JW2SF9"],"count":1}]},{"client_msg_id":"0dbe24b6-9f14-46eb-a911-2c2668c3d73c","type":"message","text":"Is this a known issue?\n```julia&gt; using Zygote, LinearAlgebra\n\njulia&gt; gradient(x -&gt; sum(norm, collect(eachcol(x))), rand(3,4))[1]\n3×4 Matrix{Float64}:\n 0.0980459  0.916691  0.397663  0.548254\n 0.78843    0.216233  0.900898  0.0887359\n 0.60726    0.336038  0.173914  0.831591\n\njulia&gt; gradient(x -&gt; sum(norm, collect(eachcol(x))), rand(3,400))[1] # only size changed\nERROR: Can't differentiate loopinfo expression```\nEdit — <https://github.com/FluxML/Zygote.jl/pull/896>","user":"UD0NS8PDF","ts":"1612344632.138700","team":"T68168MUP","edited":{"user":"UD0NS8PDF","ts":"1612382723.000000"},"blocks":[{"type":"rich_text","block_id":"eyW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is this a known issue?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using Zygote, LinearAlgebra\n\njulia> gradient(x -> sum(norm, collect(eachcol(x))), rand(3,4))[1]\n3×4 Matrix{Float64}:\n 0.0980459  0.916691  0.397663  0.548254\n 0.78843    0.216233  0.900898  0.0887359\n 0.60726    0.336038  0.173914  0.831591\n\njulia> gradient(x -> sum(norm, collect(eachcol(x))), rand(3,400))[1] # only size changed\nERROR: Can't differentiate loopinfo expression"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Edit — "},{"type":"link","url":"https://github.com/FluxML/Zygote.jl/pull/896"}]}]}]},{"client_msg_id":"186b3d8e-7b85-4f24-98d9-f7bd1dc8053f","type":"message","text":"I have a matrix `X` and I want to compute the gradient of each column given a fixed function `f`. To avoid splitting things up I use the following ;\n```gradient(X) do X\n   sum(f, eachcol(X))\nend```\nwhich works appropriately but I was wondering if I could find some speedup since the gradient function is basically always the same","user":"U7QLM6E2E","ts":"1612364185.140100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"v3V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have a matrix "},{"type":"text","text":"X","style":{"code":true}},{"type":"text","text":" and I want to compute the gradient of each column given a fixed function "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":". To avoid splitting things up I use the following ;\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"gradient(X) do X\n   sum(f, eachcol(X))\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"which works appropriately but I was wondering if I could find some speedup since the gradient function is basically always the same"}]}]}],"thread_ts":"1612364185.140100","reply_count":14,"reply_users_count":4,"latest_reply":"1612446397.151300","reply_users":["U6A936746","U7QLM6E2E","UD0NS8PDF","UC4QQPG4A"],"subscribed":false},{"client_msg_id":"a305a2a2-0a85-433e-a69a-d0fc850055bb","type":"message","text":":bikeshed:\nWhat infix symbol should I use to pair a primal and its tangent/cotangent?\nCurrently writing it as `x ⟂ ẋ`\nwhich is nicer than `PrimalAndTangent(x, ẋ)` when you need to do it 3 or 4 times in a row.","user":"U6A936746","ts":"1612380998.145000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DYYyR","elements":[{"type":"rich_text_section","elements":[{"type":"emoji","name":"bikeshed"},{"type":"text","text":"\nWhat infix symbol should I use to pair a primal and its tangent/cotangent?\nCurrently writing it as `x ⟂ ẋ`\nwhich is nicer than "},{"type":"text","text":"PrimalAndTangent(x, ẋ)","style":{"code":true}},{"type":"text","text":" when you need to do it 3 or 4 times in a row."}]}]}],"thread_ts":"1612380998.145000","reply_count":9,"reply_users_count":5,"latest_reply":"1612430732.150100","reply_users":["UM6JW2SF9","U66SR8JHX","U8D9768Q6","U6A936746","UD0NS8PDF"],"subscribed":false},{"client_msg_id":"b5c05c83-b034-4030-bdac-96989a6fd9d5","type":"message","text":"Is there a way for Flux to automatically know that it doesn't actually need to compute the gradient of certain expressions, or does one need to put @ignore everywhere? For example, for a function f(x, h), when there is no need for the gradient with respect to h. I thought specifying params(x) would make this automatic.","user":"UFCNUVC67","ts":"1612429138.149500","team":"T68168MUP","edited":{"user":"UFCNUVC67","ts":"1612429210.000000"},"blocks":[{"type":"rich_text","block_id":"5mk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a way for Flux to automatically know that it doesn't actually need to compute the gradient of certain expressions, or does one need to put @ignore everywhere? For example, for a function f(x, h), when there is no need for the gradient with respect to h. I thought specifying params(x) would make this automatic."}]}]}],"thread_ts":"1612429138.149500","reply_count":3,"reply_users_count":3,"latest_reply":"1612439583.150700","reply_users":["UFCNUVC67","U6YRZ18GZ","U6A936746"],"subscribed":false},{"client_msg_id":"941632d3-005a-4917-b021-db740fad7942","type":"message","text":"I'm getting an error `Need an adjoint for constructor UniformScaling`  when using Zygote to AD through a matrix exponential where I'm using StaticArrays, for now I can go back to v0.6.0 but I was wondering if someone can help me define the right constructor","user":"ULA52A5B5","ts":"1612531361.156900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VAM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm getting an error "},{"type":"text","text":"Need an adjoint for constructor UniformScaling","style":{"code":true}},{"type":"text","text":"  when using Zygote to AD through a matrix exponential where I'm using StaticArrays, for now I can go back to v0.6.0 but I was wondering if someone can help me define the right constructor"}]}]}],"thread_ts":"1612531361.156900","reply_count":7,"reply_users_count":2,"latest_reply":"1612533280.158300","reply_users":["U6A936746","ULA52A5B5"],"subscribed":false},{"client_msg_id":"04354567-7661-4a6c-a3b4-3c8f53db9729","type":"message","text":"more :bikeshed: : Should I call the sensitivity of the output the `output_tangent` in `frule_test`,\nand the `output_cotangent` in `rrule_test`\nor just call them both `output_tangent`   for conciseness.\nCould use another name like `output_partial` or `output_sensitivity`  (though even that tends to imply reverse right?)\n<https://github.com/JuliaDiff/ChainRulesTestUtils.jl/pull/116#discussion_r570616871>","user":"U6A936746","ts":"1612535834.161100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"48p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"more "},{"type":"emoji","name":"bikeshed"},{"type":"text","text":" : Should I call the sensitivity of the output the "},{"type":"text","text":"output_tangent","style":{"code":true}},{"type":"text","text":" in "},{"type":"text","text":"frule_test","style":{"code":true}},{"type":"text","text":",\nand the "},{"type":"text","text":"output_cotangent","style":{"code":true}},{"type":"text","text":" in "},{"type":"text","text":"rrule_test","style":{"code":true}},{"type":"text","text":"\nor just call them both "},{"type":"text","text":"output_tangent","style":{"code":true}},{"type":"text","text":"   for conciseness.\nCould use another name like "},{"type":"text","text":"output_partial","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"output_sensitivity","style":{"code":true}},{"type":"text","text":"  (though even that tends to imply reverse right?)\n"},{"type":"link","url":"https://github.com/JuliaDiff/ChainRulesTestUtils.jl/pull/116#discussion_r570616871"}]}]}]},{"client_msg_id":"f6fea8de-0661-492d-810f-1a47ba42186e","type":"message","text":"I think we need an `AbstractAutoDiff.jl` package to define a generic API for autodiff in a backend-agnostic way. For example, `gradient`, `jacobian`, `hessian` with a first argument as `adbackend::AbstractAutoDiffBackend`. `hessian` can be the `jacobian` of the `gradient`, etc. AD packages can then subtype `AbstractAutoDiffBackend` and define the unified API for the package. For example, the backends can be `ForwardDiffAD`, `ForwardDiffOverReverseDiff`, `ReverseDiffOverForwardDiff`, etc. I deal with multiple AD backends on a regular basis and I hate having to make small changes to the AD code every time I switch out a package. So I basically end up reinventing the above in every package I need this in. So it would be nice to have it in one place and supported by the AD packages directly. Opinions?","user":"U85JBUGGP","ts":"1612546715.167400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cJ/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think we need an "},{"type":"text","text":"AbstractAutoDiff.jl","style":{"code":true}},{"type":"text","text":" package to define a generic API for autodiff in a backend-agnostic way. For example, "},{"type":"text","text":"gradient","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"jacobian","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"hessian","style":{"code":true}},{"type":"text","text":" with a first argument as "},{"type":"text","text":"adbackend::AbstractAutoDiffBackend","style":{"code":true}},{"type":"text","text":". "},{"type":"text","text":"hessian","style":{"code":true}},{"type":"text","text":" can be the "},{"type":"text","text":"jacobian","style":{"code":true}},{"type":"text","text":" of the "},{"type":"text","text":"gradient","style":{"code":true}},{"type":"text","text":", etc. AD packages can then subtype "},{"type":"text","text":"AbstractAutoDiffBackend","style":{"code":true}},{"type":"text","text":" and define the unified API for the package. For example, the backends can be "},{"type":"text","text":"ForwardDiffAD","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"ForwardDiffOverReverseDiff","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"ReverseDiffOverForwardDiff","style":{"code":true}},{"type":"text","text":", etc. I deal with multiple AD backends on a regular basis and I hate having to make small changes to the AD code every time I switch out a package. So I basically end up reinventing the above in every package I need this in. So it would be nice to have it in one place and supported by the AD packages directly. Opinions?"}]}]}]},{"client_msg_id":"7d3edd39-f771-4ddd-b097-5ff3f417c12e","type":"message","text":"I've been thinking about that too","user":"U69BL50BF","ts":"1612546949.167600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MKbg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I've been thinking about that too"}]}]}]},{"client_msg_id":"622cdd54-f9e3-4714-8b6d-cf31dad967da","type":"message","text":"with jvp and vjp functions","user":"U69BL50BF","ts":"1612546957.167800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"18Gc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"with jvp and vjp functions"}]}]}]},{"client_msg_id":"34a0134b-0f7a-45a7-bd48-ce51b5d604ea","type":"message","text":"are you looking at the DiffEqSensitivity code and thinking it's insane?","user":"U69BL50BF","ts":"1612546970.168200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lkg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"are you looking at the DiffEqSensitivity code and thinking it's insane?"}]}]}],"thread_ts":"1612546970.168200","reply_count":1,"reply_users_count":1,"latest_reply":"1612548292.175100","reply_users":["U85JBUGGP"],"subscribed":false},{"client_msg_id":"1fe5280f-273c-461e-9f89-6c74802b74a9","type":"message","text":"Because that would do it :rolling_on_the_floor_laughing:","user":"U69BL50BF","ts":"1612546974.168400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IhZSX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Because that would do it "},{"type":"emoji","name":"rolling_on_the_floor_laughing"}]}]}]},{"client_msg_id":"db7ed5b1-d214-4a39-9622-9afc6253657d","type":"message","text":"Yeah, I think that's a great idea! Would also be awesome to be able to quickly check derivatives against FiniteDifferences","user":"UM30MT6RF","ts":"1612547059.169400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XmzNM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, I think that's a great idea! Would also be awesome to be able to quickly check derivatives against FiniteDifferences"}]}]}],"reactions":[{"name":"+1","users":["U85JBUGGP"],"count":1}]},{"client_msg_id":"9d6b22ae-5004-4a5b-b8f5-e95c94e672ec","type":"message","text":"It is required as part of <https://github.com/JuliaDiff/ChainRulesCore.jl/issues/68>\nthat implementing AD’s provide a `rrule_like`  and `frule_like` package that can be called and that acts like the namesake function.\nShould be very easy to build everything else on top of that.\n\nHaving that, + <https://github.com/JuliaDiff/ChainRulesTestUtils.jl/issues/114>\nwill mean can have easy tests against FiniteDiffererences.jl\n(I am about to merge a PR that will make ChainRulesTestUtils much easier to use)\n\nInplace of `AbstractAutoDiffBackend` would be something that is currently sketched out  as being called `ConfiguredRRule` and `ConfiguredFRule`  (while that name doesn’t make sense I think it has all the things you want) it holds the `rrule_like` and `frule_like`  functions.\n+ exposes some traits about the AD: like in:\n<https://github.com/JuliaDiff/ChainRulesCore.jl/issues/270#issuecomment-773258073>","user":"U6A936746","ts":"1612548068.173700","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1612548294.000000"},"blocks":[{"type":"rich_text","block_id":"SjN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It is required as part of "},{"type":"link","url":"https://github.com/JuliaDiff/ChainRulesCore.jl/issues/68"},{"type":"text","text":"\nthat implementing AD’s provide a "},{"type":"text","text":"rrule_like","style":{"code":true}},{"type":"text","text":"  and "},{"type":"text","text":"frule_like","style":{"code":true}},{"type":"text","text":" package that can be called and that acts like the namesake function.\nShould be very easy to build everything else on top of that.\n\nHaving that, + "},{"type":"link","url":"https://github.com/JuliaDiff/ChainRulesTestUtils.jl/issues/114"},{"type":"text","text":"\nwill mean can have easy tests against FiniteDiffererences.jl\n(I am about to merge a PR that will make ChainRulesTestUtils much easier to use)\n\nInplace of "},{"type":"text","text":"AbstractAutoDiffBackend","style":{"code":true}},{"type":"text","text":" would be something that is currently sketched out  as being called "},{"type":"text","text":"ConfiguredRRule","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"ConfiguredFRule","style":{"code":true}},{"type":"text","text":"  (while that name doesn’t make sense I think it has all the things you want) it holds the "},{"type":"text","text":"rrule_like","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"frule_like","style":{"code":true}},{"type":"text","text":"  functions.\n+ exposes some traits about the AD: like in:\n"},{"type":"link","url":"https://github.com/JuliaDiff/ChainRulesCore.jl/issues/270#issuecomment-773258073"}]}]}],"reactions":[{"name":"+1","users":["U69BL50BF"],"count":1}]},{"client_msg_id":"a8de2dcf-86bb-4c48-905d-400e4bb662e8","type":"message","text":"I *think* it should be possible and reasonable to do all that without the AD in questions actually using ChainRules for its rules.\nJust ChainRulesCore for this consistent API.","user":"U6A936746","ts":"1612548180.175000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lAjKp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I "},{"type":"text","text":"think","style":{"bold":true}},{"type":"text","text":" it should be possible and reasonable to do all that without the AD in questions actually using ChainRules for its rules.\nJust ChainRulesCore for this consistent API."}]}]}]},{"client_msg_id":"df58df78-05a2-46f1-8327-4c139b1d61d3","type":"message","text":"yeah higher order AD needs it.","user":"U69BL50BF","ts":"1612548323.175800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4ej88","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah higher order AD needs it."}]}]}]},{"client_msg_id":"9f31c38c-9d02-4429-b7b9-eb00e5202e7c","type":"message","text":"I almost thing ChainRulesCore should define the high level API for it then","user":"U69BL50BF","ts":"1612548339.176300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ubhkm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I almost thing ChainRulesCore should define the high level API for it then"}]}]}]},{"client_msg_id":"707ff2e2-cc5d-49a3-bd44-cbb103efbaea","type":"message","text":"I think the API in ChainRulesCore.\n+ maybe enough package for stuff like Jacobian it starts to get too bloated.\nThough probably doesn’t?","user":"U6A936746","ts":"1612548400.178000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GUrS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think the API in ChainRulesCore.\n+ maybe enough package for stuff like Jacobian it starts to get too bloated.\nThough probably doesn’t?"}]}]}]},{"client_msg_id":"da7c072e-f01b-4527-b304-27a9006163cd","type":"message","text":"I don’t think we should tie it to `ChainRulesCore`. Let’s keep it lean as a light package defining the AD API.","user":"U85JBUGGP","ts":"1612548436.178900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hX+q+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don’t think we should tie it to "},{"type":"text","text":"ChainRulesCore","style":{"code":true}},{"type":"text","text":". Let’s keep it lean as a light package defining the AD API."}]}]}]},{"client_msg_id":"de883da2-77e2-471b-95bf-40a69212731f","type":"message","text":"ChainRulesCore is a light packages defining an AD API","user":"U6A936746","ts":"1612548460.179500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4un","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ChainRulesCore is a light packages defining an AD API"}]}]}]},{"client_msg_id":"c5fee79c-5270-4ea9-895c-8c67585ba2a9","type":"message","text":"but it defines more things than is necessary for FiniteDifferences or ForwardDiff to depend on","user":"U85JBUGGP","ts":"1612548524.181100","team":"T68168MUP","edited":{"user":"U85JBUGGP","ts":"1612548528.000000"},"blocks":[{"type":"rich_text","block_id":"vuZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but it defines more things than is necessary for FiniteDifferences or ForwardDiff to depend on"}]}]}]},{"client_msg_id":"6cd1178b-b8c9-467b-aaa6-a51639743285","type":"message","text":"such as?","user":"U6A936746","ts":"1612548547.181900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hkvGf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"such as?"}]}]}]},{"client_msg_id":"974ecb8f-a2fd-4fc3-b153-a21db6b409cc","type":"message","text":"most of the code in it now :sweat_smile:","user":"U85JBUGGP","ts":"1612548576.182600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Z56xD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"most of the code in it now "},{"type":"emoji","name":"sweat_smile"}]}]}]},{"client_msg_id":"832abc59-acba-4a96-9ae4-eeeddf496e93","type":"message","text":"It defines a bunch of types, that are needed if you want to be general to structures.\nIf you just want to do numbers and matrixes :shrug: no ambition. :stuck_out_tongue:","user":"U6A936746","ts":"1612548609.183200","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1612548617.000000"},"blocks":[{"type":"rich_text","block_id":"M10B","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It defines a bunch of types, that are needed if you want to be general to structures.\nIf you just want to do numbers and matrixes "},{"type":"emoji","name":"shrug"},{"type":"text","text":" no ambition. "},{"type":"emoji","name":"stuck_out_tongue"}]}]}]},{"client_msg_id":"e26ac6fa-7a64-4cee-84a1-7ed4b1251245","type":"message","text":"True which is a fundamental difference imo. I think the high level API package should allow each package to define only the methods it knows how to define without carrying extra luggage along for the ride.","user":"U85JBUGGP","ts":"1612548685.185100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s1glz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"True which is a fundamental difference imo. I think the high level API package should allow each package to define only the methods it knows how to define without carrying extra luggage along for the ride."}]}]}]},{"client_msg_id":"cb824fc5-0fef-4d95-8d0b-44433b831b72","type":"message","text":"I think it should just define stub functions for:\n\n• gradient\n• jacobian\n• hessian\n• jvp\n• pullback","user":"U69BL50BF","ts":"1612548723.186800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4OCgT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think it should just define stub functions for:\n\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"gradient"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"jacobian"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"hessian"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"jvp"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"pullback"}]}],"style":"bullet","indent":0}]}],"reactions":[{"name":"100","users":["U85JBUGGP"],"count":1}]},{"client_msg_id":"d237b69e-ca92-41f7-8849-b9a4f4249f1c","type":"message","text":"once you can define `frule_like` and `rrule_like` everything else comes forward from that.\nEven if you cant’t define them on all types.","user":"U6A936746","ts":"1612548723.186900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3sO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"once you can define "},{"type":"text","text":"frule_like","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"rrule_like","style":{"code":true}},{"type":"text","text":" everything else comes forward from that.\nEven if you cant’t define them on all types."}]}]}]},{"client_msg_id":"cc88cd50-af0d-47ca-a8a2-8744f34fa8af","type":"message","text":"so `ForwardDiff` and `FiniteDifferences` can define their array bits and `Zygote` can go full struct-mode.","user":"U85JBUGGP","ts":"1612548724.187100","team":"T68168MUP","edited":{"user":"U85JBUGGP","ts":"1612548736.000000"},"blocks":[{"type":"rich_text","block_id":"xWCuP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so "},{"type":"text","text":"ForwardDiff","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"FiniteDifferences","style":{"code":true}},{"type":"text","text":" can define their array bits and "},{"type":"text","text":"Zygote","style":{"code":true}},{"type":"text","text":" can go full struct-mode."}]}]}]},{"client_msg_id":"07bbfd1c-95d6-4ca7-b2cf-ec923da4e3a8","type":"message","text":"and then define the API so everyone does the arguments the same","user":"U69BL50BF","ts":"1612548734.187400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OoXI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and then define the API so everyone does the arguments the same"}]}]}]},{"client_msg_id":"0e26044e-20b2-4770-b930-cd6022d703e9","type":"message","text":"`jacobian(f,x,ForwardDiff,cache_stuff;color,sparsity,...)`","user":"U69BL50BF","ts":"1612548764.188600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xdyK2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"jacobian(f,x,ForwardDiff,cache_stuff;color,sparsity,...)","style":{"code":true}}]}]}]},{"client_msg_id":"de6a469b-9e27-47df-9b05-00a69ec4193d","type":"message","text":"but it shouldn't need to implement any of the code for it","user":"U69BL50BF","ts":"1612548771.188900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1IEF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but it shouldn't need to implement any of the code for it"}]}]}]},{"client_msg_id":"fb022688-30d4-4a69-ba57-119ae5cfdeea","type":"message","text":"just make it so there's a common agreed upon function to use","user":"U69BL50BF","ts":"1612548782.189300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p4qNY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"just make it so there's a common agreed upon function to use"}]}]}],"reactions":[{"name":"+1","users":["U85JBUGGP","U01L934LHDH"],"count":2}]},{"client_msg_id":"a4507808-ca7e-4bbf-a6a7-53f0d11f149a","type":"message","text":"and then have a third argument for dispatching","user":"U69BL50BF","ts":"1612548788.189500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BrnEJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and then have a third argument for dispatching"}]}]}]},{"client_msg_id":"901fe926-7ab8-4baf-abb9-ee6b90f27da3","type":"message","text":"It still doesn't solve the higher order AD problem because you'd need to know what dispatch to use, but :shrug:","user":"U69BL50BF","ts":"1612548862.191300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dYHk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It still doesn't solve the higher order AD problem because you'd need to know what dispatch to use, but "},{"type":"emoji","name":"shrug"}]}]}]},{"client_msg_id":"86cf42ed-5698-42e3-8fa0-927a5ebdb2fa","type":"message","text":"idk, I am just pretty cautious about <https://xkcd.com/927/>\nEven if operating at different levels of the stack.\nyou need so many of the same the same parts\nZygoteRules already made us go through standards proliferation once.","user":"U6A936746","ts":"1612548886.192000","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1612548896.000000"},"attachments":[{"title":"Standards","title_link":"https://xkcd.com/927/","author_name":"xkcd","author_link":"https://xkcd.com/","image_url":"https://imgs.xkcd.com/comics/standards.png","image_width":500,"image_height":283,"image_bytes":24305,"text":"[Title text] \"Fortunately, the charging one has been solved now that we've all standardized on mini-USB. Or is it micro-USB? Shit.\"","fallback":"xkcd: Standards","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/xkcd.png","id":1,"original_url":"https://xkcd.com/927/"}],"blocks":[{"type":"rich_text","block_id":"ZJ+Bg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"idk, I am just pretty cautious about "},{"type":"link","url":"https://xkcd.com/927/"},{"type":"text","text":"\nEven if operating at different levels of the stack.\nyou need so many of the same the same parts\nZygoteRules already made us go through standards proliferation once."}]}]}]},{"client_msg_id":"e108d0a4-5639-4f42-9596-59ad22261ac7","type":"message","text":"But what I am suggesting is not reinventing an existing standard, it’s proposing one that doesn’t seem to exist at the highest level of the stack.","user":"U85JBUGGP","ts":"1612548952.193200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LFqM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But what I am suggesting is not reinventing an existing standard, it’s proposing one that doesn’t seem to exist at the highest level of the stack."}]}]}]},{"client_msg_id":"0b5ae856-675f-4429-9b04-202b7b937b35","type":"message","text":"yeah, but it looks a lot like the stuff we are going to have to do for <https://github.com/JuliaDiff/ChainRulesCore.jl/issues/68> &amp;\n<https://github.com/JuliaDiff/ChainRulesTestUtils.jl/issues/114> &amp;\n<https://github.com/JuliaDiff/ChainRulesCore.jl/issues/270#issuecomment-773258073>","user":"U6A936746","ts":"1612548977.193800","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1612548998.000000"},"blocks":[{"type":"rich_text","block_id":"qYFs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, but it looks a lot like the stuff we are going to have to do for "},{"type":"link","url":"https://github.com/JuliaDiff/ChainRulesCore.jl/issues/68"},{"type":"text","text":" &\n"},{"type":"link","url":"https://github.com/JuliaDiff/ChainRulesTestUtils.jl/issues/114"},{"type":"text","text":" &\n"},{"type":"link","url":"https://github.com/JuliaDiff/ChainRulesCore.jl/issues/270#issuecomment-773258073"}]}]}]},{"client_msg_id":"366a17bd-ee32-489e-ab08-8f0d4e1ee29d","type":"message","text":"we can throw in parallelism support to make it fancier and more useful","user":"U85JBUGGP","ts":"1612548984.194100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8523","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we can throw in parallelism support to make it fancier and more useful"}]}]}]}]}