{"cursor": 0, "messages": [{"client_msg_id":"4808b27b-22dd-40cd-ab0e-1e9ab8cb5c44","type":"message","text":"Right now `mapreduce(*, +, fill(3, 2,2), fill(5, 2,2), dims=1)` just applies map &amp; then reduces. Is there an issue about not doing that, i.e. not allocating a matrix before reducing?","user":"UD0NS8PDF","ts":"1608733152.049900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7Pa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Right now "},{"type":"text","text":"mapreduce(*, +, fill(3, 2,2), fill(5, 2,2), dims=1)","style":{"code":true}},{"type":"text","text":" just applies map & then reduces. Is there an issue about not doing that, i.e. not allocating a matrix before reducing?"}]}]}]},{"client_msg_id":"23e3992f-020b-489d-af20-d3d03931e7e1","type":"message","text":"I seem to remember someone mentioning a package that let you have some dimensions being static, and some being not.","user":"U68P09RFZ","ts":"1608751868.050500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ze0B","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I seem to remember someone mentioning a package that let you have some dimensions being static, and some being not."}]}]}]},{"client_msg_id":"0477af0d-2783-4ea0-b839-1d5c583c085d","type":"message","text":"does anyone remember what it was?","user":"U68P09RFZ","ts":"1608751875.050700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XbcJA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"does anyone remember what it was?"}]}]}]},{"client_msg_id":"e84b5123-17db-40a4-9166-947a6baa1f8b","type":"message","text":"ah found it <https://github.com/mateuszbaran/HybridArrays.jl>","user":"U68P09RFZ","ts":"1608751964.051000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"A7H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah found it "},{"type":"link","url":"https://github.com/mateuszbaran/HybridArrays.jl"}]}]}],"reactions":[{"name":"+1","users":["UCZ7VBGUD","U8D9768Q6"],"count":2},{"name":"sonic","users":["UCZ7VBGUD"],"count":1}]},{"client_msg_id":"90D76606-B6FE-46AC-84CF-7E798907A45D","type":"message","text":"<https://github.com/mateuszbaran/HybridArrays.jl|https://github.com/mateuszbaran/HybridArrays.jl>","user":"UCZ7VBGUD","ts":"1608751964.051100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"umE","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/mateuszbaran/HybridArrays.jl","text":"https://github.com/mateuszbaran/HybridArrays.jl"}]}]}],"reactions":[{"name":"+1","users":["U68P09RFZ"],"count":1}]},{"client_msg_id":"48e2ca51-0a46-4b9c-bf73-9452e969e468","type":"message","text":"&gt; I seem to remember someone mentioning a package that let you have some dimensions being static, and some being not.\nArraysOfArrays can also do this\n\n```using ArraysOfArrays, StaticArrays\nA = rand(3, 1000)\nVofSV = nestedview(A, SVector{3})\nVofSV isa AbstractVector{&lt;:SVector{3}}```\nThe result is actually not a type defined in ArraysOfArrays, it just does a `reshape(reinterpret(...), ...)`. Works pretty well, though.","user":"U756M0EB0","ts":"1609005892.054200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uY4hZ","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"I seem to remember someone mentioning a package that let you have some dimensions being static, and some being not."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nArraysOfArrays can also do this\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using ArraysOfArrays, StaticArrays\nA = rand(3, 1000)\nVofSV = nestedview(A, SVector{3})\nVofSV isa AbstractVector{<:SVector{3}}"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"The result is actually not a type defined in ArraysOfArrays, it just does a "},{"type":"text","text":"reshape(reinterpret(...), ...)","style":{"code":true}},{"type":"text","text":". Works pretty well, though."}]}]}]},{"client_msg_id":"2ee9007b-2d97-456f-9e22-0296251fad68","type":"message","text":"That you can just do with Base though, like `reinterpret(typeof(SA[1,2,3]), rand(1:99, 3, 10)) |&gt; vec`?","user":"UD0NS8PDF","ts":"1609006646.054800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8tQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That you can just do with Base though, like "},{"type":"text","text":"reinterpret(typeof(SA[1,2,3]), rand(1:99, 3, 10)) |> vec","style":{"code":true}},{"type":"text","text":"?"}]}]}]},{"client_msg_id":"7ba88025-aeb3-48cf-bf35-94aad5a1e5fc","type":"message","text":"Re having some axes static, should this perhaps return `(SOneTo(3), OneTo(8))`?\n```julia&gt; reinterpret(reshape, Int, [SA[1,2,n] for n in 3:10])\n3×8 reinterpret(reshape, Int64, ::Vector{SVector{3, Int64}}) with eltype Int64:\n 1  1  1  1  1  1  1   1\n 2  2  2  2  2  2  2   2\n 3  4  5  6  7  8  9  10\n\njulia&gt; axes(ans)\n(Base.OneTo(3), Base.OneTo(8))```","user":"UD0NS8PDF","ts":"1609006704.055500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CU1b","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Re having some axes static, should this perhaps return "},{"type":"text","text":"(SOneTo(3), OneTo(8))","style":{"code":true}},{"type":"text","text":"?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> reinterpret(reshape, Int, [SA[1,2,n] for n in 3:10])\n3×8 reinterpret(reshape, Int64, ::Vector{SVector{3, Int64}}) with eltype Int64:\n 1  1  1  1  1  1  1   1\n 2  2  2  2  2  2  2   2\n 3  4  5  6  7  8  9  10\n\njulia> axes(ans)\n(Base.OneTo(3), Base.OneTo(8))"}]}]}]},{"client_msg_id":"ce256225-6395-4138-998e-605b1959fb27","type":"message","text":"Not sure about other approaches, but HybridArrays returns a statically sized array in practically any indexing situation where it can be done, and has statically sized views","user":"U9AHT3YM7","ts":"1609013085.056500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Wve","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not sure about other approaches, but HybridArrays returns a statically sized array in practically any indexing situation where it can be done, and has statically sized views"}]}]}]},{"client_msg_id":"a7fa882d-2206-49d4-aeb8-51a6d6006d34","type":"message","text":"and, at least for me, it's much more convenient to be able to mutate a hybrid array in any way I want, not just in SArray chunks","user":"U9AHT3YM7","ts":"1609013277.057400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Rp7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and, at least for me, it's much more convenient to be able to mutate a hybrid array in any way I want, not just in SArray chunks"}]}]}]},{"client_msg_id":"d13195fe-6cdc-475c-bb72-a310cfa78583","type":"message","text":"point 1 from here: <https://discourse.julialang.org/t/recent-developments-in-staticarrays-jl-land/47778> describes it in some detail","user":"U9AHT3YM7","ts":"1609013666.058300","team":"T68168MUP","attachments":[{"service_name":"JuliaLang","title":"Recent developments in StaticArrays.jl land","title_link":"https://discourse.julialang.org/t/recent-developments-in-staticarrays-jl-land/47778","text":"StaticArrays.jl has received a few cool new features since its 0.12.4 release that are now fast thanks to the memory layout changes in Julia 1.5. These changes are commonly known as non-allocating views but as I show here it’s just the tip of the iceberg :slightly_smiling_face:. Here is the outline to make this post a bit more digestible: A cool application. Sized abstract arrays. Faster matrix multiplication. Loading time reduction. These things may not be easy to find so I decided to write about it...","fallback":"JuliaLang: Recent developments in StaticArrays.jl land","thumb_url":"https://aws1.discourse-cdn.com/business5/uploads/julialang/original/2X/1/12829a7ba92b924d4ce81099cbf99785bee9b405.png","fields":[{"title":"Reading time","value":"3 mins :clock2:","short":true},{"title":"Likes","value":"75 :heart:","short":true}],"ts":1601896071,"from_url":"https://discourse.julialang.org/t/recent-developments-in-staticarrays-jl-land/47778","thumb_width":408,"thumb_height":263,"service_icon":"https://aws1.discourse-cdn.com/business5/uploads/julialang/optimized/2X/6/6ca888e296f59ca2a599807f7d5edd489e3d1829_2_180x180.png","id":1,"original_url":"https://discourse.julialang.org/t/recent-developments-in-staticarrays-jl-land/47778"}],"blocks":[{"type":"rich_text","block_id":"iA8f/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"point 1 from here: "},{"type":"link","url":"https://discourse.julialang.org/t/recent-developments-in-staticarrays-jl-land/47778"},{"type":"text","text":" describes it in some detail"}]}]}]},{"client_msg_id":"622ea302-f130-4f08-8344-79a2af311fb1","type":"message","text":"Agree this is the full-feature solution. I just suddenly wondered whether Base’s reinterpret ought to have a little more of its flavour. You can mutate the matrix from my msg. as `R[1,2] = 99` etc. And its type does contain the size, but `size` doesn’t use this.","user":"UD0NS8PDF","ts":"1609014312.060300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KXP+n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Agree this is the full-feature solution. I just suddenly wondered whether Base’s reinterpret ought to have a little more of its flavour. You can mutate the matrix from my msg. as "},{"type":"text","text":"R[1,2] = 99","style":{"code":true}},{"type":"text","text":" etc. And its type does contain the size, but "},{"type":"text","text":"size","style":{"code":true}},{"type":"text","text":" doesn’t use this."}]}]}]},{"client_msg_id":"f64b7c33-6dc7-4351-905d-445915e8b7d5","type":"message","text":"That's a good point, it may be something worth looking into.","user":"U9AHT3YM7","ts":"1609146739.060800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MbIaj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's a good point, it may be something worth looking into."}]}]}]},{"client_msg_id":"10362ee4-706f-4d87-8d04-bc199e2430f1","type":"message","text":"Good evening all! Was wondering about review for my PRs for multidimensional array concatenation syntax (<https://github.com/JuliaLang/julia/pull/33697>) and the precursor deprecation warning (<https://github.com/JuliaLang/julia/pull/37168>). I know bandwidth is limited for the array specialists here, just curious what the queue looks like. :slightly_smiling_face:","user":"U01HD5VFXJM","ts":"1609900527.066000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/nOv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Good evening all! Was wondering about review for my PRs for multidimensional array concatenation syntax ("},{"type":"link","url":"https://github.com/JuliaLang/julia/pull/33697"},{"type":"text","text":") and the precursor deprecation warning ("},{"type":"link","url":"https://github.com/JuliaLang/julia/pull/37168"},{"type":"text","text":"). I know bandwidth is limited for the array specialists here, just curious what the queue looks like. "},{"type":"emoji","name":"slightly_smiling_face"}]}]}]},{"client_msg_id":"f400c229-b287-4665-82dc-ed420d9051e1","type":"message","text":"Is ReadOnlyArrays.jl still the recommended way of creating a immutable/readonly/frozen array?","user":"U695B1S2X","ts":"1610388218.066900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"f+aB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is ReadOnlyArrays.jl still the recommended way of creating a immutable/readonly/frozen array?"}]}]}],"thread_ts":"1610388218.066900","reply_count":1,"reply_users_count":1,"latest_reply":"1610388347.067000","reply_users":["U6A936746"],"subscribed":false},{"client_msg_id":"3921eb22-fde0-4690-ae03-f24148879865","type":"message","text":"Does Juila have built-in support for <https://en.wikipedia.org/wiki/Pointwise_product|Pointwise product> operations between multidimensional arrays? or is there a package I could use to compute these efficiently?","user":"UEA5FBCRH","ts":"1610718993.001000","team":"T68168MUP","edited":{"user":"UEA5FBCRH","ts":"1610719064.000000"},"attachments":[{"title":"Pointwise product","title_link":"https://en.wikipedia.org/wiki/Pointwise_product","from_url":"https://en.wikipedia.org/wiki/Pointwise_product","author_name":"Wikipedia","author_link":"https://en.wikipedia.org/","text":"In mathematics, the pointwise product of two functions is another function, obtained by multiplying the image of the two functions at each value in the domain. If f and g are both functions with domain X and codomain Y, and elements of Y can be multiplied (for instance, Y could be some set of numbers), then the pointwise product of f and g is another function from X to Y which maps x in X to f(x)g(x) in Y.","fallback":"wikipedia: Pointwise product","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png","id":1,"original_url":"https://en.wikipedia.org/wiki/Pointwise_product"}],"blocks":[{"type":"rich_text","block_id":"rqcb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does Juila have built-in support for "},{"type":"link","url":"https://en.wikipedia.org/wiki/Pointwise_product","text":"Pointwise product"},{"type":"text","text":" operations between multidimensional arrays? or is there a package I could use to compute these efficiently?"}]}]}],"thread_ts":"1610718993.001000","reply_count":2,"reply_users_count":2,"latest_reply":"1610720624.001900","reply_users":["UEA5FBCRH","UD0NS8PDF"],"subscribed":false},{"client_msg_id":"370b418e-172b-47f1-83d6-ae389d8f1580","type":"message","text":"I just discovered that `copyto!` silently skips undefined entries. So something like `copyto!(Vector{Any}(undef, 3), 1, Vector{Any}(undef, 3), 1, 3)` works. In Julia 1.0 it throwed an error. Should this be documented?","user":"U67431ELR","ts":"1611224956.000900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=u7i","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I just discovered that "},{"type":"text","text":"copyto!","style":{"code":true}},{"type":"text","text":" silently skips undefined entries. So something like "},{"type":"text","text":"copyto!(Vector{Any}(undef, 3), 1, Vector{Any}(undef, 3), 1, 3)","style":{"code":true}},{"type":"text","text":" works. In Julia 1.0 it throwed an error. Should this be documented?"}]}]}],"thread_ts":"1611224956.000900","reply_count":3,"reply_users_count":2,"latest_reply":"1611244764.005300","reply_users":["U681ELA87","U6740K1SP"],"subscribed":false},{"client_msg_id":"b7de6b9a-7e6e-4d5f-ac08-8db923df2927","type":"message","text":"I was about to open an issue in *NamedDims.jl* pointing out how `dropdims,` when used with a `NamedDimsArray,` does incur in some penalty (time and memory) compared to when it is used with a plain `Array`. I noticed however that an issue has already been opened: <https://github.com/invenia/NamedDims.jl/issues/85>. I was wondering if any work has been done on this and if there is any way that I could help.","user":"UEA5FBCRH","ts":"1611258940.011200","team":"T68168MUP","edited":{"user":"UEA5FBCRH","ts":"1611258965.000000"},"blocks":[{"type":"rich_text","block_id":"=t=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I was about to open an issue in "},{"type":"text","text":"NamedDims.jl","style":{"bold":true}},{"type":"text","text":" pointing out how "},{"type":"text","text":"dropdims,","style":{"code":true}},{"type":"text","text":" when used with a "},{"type":"text","text":"NamedDimsArray,","style":{"code":true}},{"type":"text","text":" does incur in some penalty (time and memory) compared to when it is used with a plain "},{"type":"text","text":"Array","style":{"code":true}},{"type":"text","text":". I noticed however that an issue has already been opened: "},{"type":"link","url":"https://github.com/invenia/NamedDims.jl/issues/85"},{"type":"text","text":". I was wondering if any work has been done on this and if there is any way that I could help."}]}]}],"thread_ts":"1611258940.011200","reply_count":2,"reply_users_count":2,"latest_reply":"1611261576.011800","reply_users":["UDXST8ARK","UD0NS8PDF"],"subscribed":false,"reactions":[{"name":"+1","users":["U6A936746"],"count":1}]},{"client_msg_id":"506e1ca5-bf4f-4222-9dd3-2cfcb396e9e9","type":"message","text":"is there a package for contiguous “zipped” representations of same-sized arrays of arrays? e.g., if `u,v` are arrays of the same size, a way to represent them as `[u_1,u_2,...,u_i,v_i,...]` ?","user":"U011LUQ182G","ts":"1611369402.014400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Rdll","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is there a package for contiguous “zipped” representations of same-sized arrays of arrays? e.g., if "},{"type":"text","text":"u,v","style":{"code":true}},{"type":"text","text":" are arrays of the same size, a way to represent them as "},{"type":"text","text":"[u_1,u_2,...,u_i,v_i,...]","style":{"code":true}},{"type":"text","text":" ?"}]}]}]},{"client_msg_id":"8457D5CD-D5EE-49B7-8E36-6EA238C68E83","type":"message","text":"<https://github.com/jonniedie/ComponentArrays.jl|https://github.com/jonniedie/ComponentArrays.jl>","user":"U8D9768Q6","ts":"1611370533.014600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZO8Hd","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/jonniedie/ComponentArrays.jl","text":"https://github.com/jonniedie/ComponentArrays.jl"}]}]}],"thread_ts":"1611370533.014600","reply_count":5,"reply_users_count":2,"latest_reply":"1611382828.016000","reply_users":["U011LUQ182G","UD0NS8PDF"],"subscribed":false},{"type":"message","subtype":"channel_join","ts":"1611437029.016300","user":"UQE0NBSS1","text":"<@UQE0NBSS1> has joined the channel","inviter":"U68QW0PUZ"},{"client_msg_id":"00040516-c281-4046-969e-63e37661c1a0","type":"message","text":"I've started working on the final milestone issue for the next release of StructArrays, but I'm not completely sure whether the change is valid and worth the breakage. It is an attempt to make the interface more consistent. I'm adding a link to the PR here in case anybody wants to give feedback <https://github.com/JuliaArrays/StructArrays.jl/pull/167>","user":"U6BJ9E351","ts":"1611920196.018700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"r7s","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I've started working on the final milestone issue for the next release of StructArrays, but I'm not completely sure whether the change is valid and worth the breakage. It is an attempt to make the interface more consistent. I'm adding a link to the PR here in case anybody wants to give feedback "},{"type":"link","url":"https://github.com/JuliaArrays/StructArrays.jl/pull/167"}]}]}],"reactions":[{"name":"+1","users":["U66QZ3QF3"],"count":1}]},{"client_msg_id":"df4b4f68-a5d4-48b7-a773-d93080cbf323","type":"message","text":"<@UD0NS8PDF> does AxisKeys work with Factorizations?","user":"U6A936746","ts":"1612441297.019600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"24pKi","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UD0NS8PDF"},{"type":"text","text":" does AxisKeys work with Factorizations?"}]}]}],"thread_ts":"1612441297.019600","reply_count":1,"reply_users_count":1,"latest_reply":"1612442280.020700","reply_users":["UD0NS8PDF"],"subscribed":false},{"client_msg_id":"274c8d02-22d5-4906-a1fe-e21070fea4a9","type":"message","text":"<@UD0NS8PDF>  have a case for a named KeyedArray of JuMP affine expressions\nwhere calling `sum` on the keyed array mutates the content of the array.\ncalling `sum` on the NamedArray inside it, or the `Array` inside that doesn’t have this effect.","user":"U6A936746","ts":"1613567158.024200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/WG","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UD0NS8PDF"},{"type":"text","text":"  have a case for a named KeyedArray of JuMP affine expressions\nwhere calling "},{"type":"text","text":"sum","style":{"code":true}},{"type":"text","text":" on the keyed array mutates the content of the array.\ncalling "},{"type":"text","text":"sum","style":{"code":true}},{"type":"text","text":" on the NamedArray inside it, or the "},{"type":"text","text":"Array","style":{"code":true}},{"type":"text","text":" inside that doesn’t have this effect."}]}]}]},{"client_msg_id":"19cef7ec-aaf5-4d13-9515-ee8d89b8d38a","type":"message","text":"This is more of a curiosity, but I was wondering, how can Tullio.jl handle raise conditions when the LHS uses a nontrivial function of the indices? For example, I've noticed that one can do things like\n```@tullio C[i ÷ 2, k] += A[i, j] * B[j, k]```\nDoes Tullio have some smart way to multithread this, or does it just fall back to a sequential approach?","user":"U6BJ9E351","ts":"1613657824.027300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YOK1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is more of a curiosity, but I was wondering, how can Tullio.jl handle raise conditions when the LHS uses a nontrivial function of the indices? For example, I've noticed that one can do things like\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@tullio C[i ÷ 2, k] += A[i, j] * B[j, k]"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Does Tullio have some smart way to multithread this, or does it just fall back to a sequential approach?"}]}]}],"thread_ts":"1613657824.027300","reply_count":3,"reply_users_count":2,"latest_reply":"1613660141.027800","reply_users":["U6BJ9E351","UD0NS8PDF"],"subscribed":false},{"client_msg_id":"363d15cd-5259-427e-b43d-26850a9c793e","type":"message","text":"I have the following minimal working example:\n```using BenchmarkTools\n\nstruct MyFactor{vars, card, T}\n  vals::T\nend\n\na_vals = rand(2,3,1)\nb_vals = rand(2,1,2)\n\nc_vars = (2,3,4)\nc_card = (2,3,2)\n\n@btime a_vals.* b_vals\n@btime MyFactor{c_vars, c_card, Array{Float64, length(c_vars)}}(a_vals .* b_vals)```\nwhich ouputs:\n```julia&gt; include_string(Main, clipboard())\n  536.910 ns (3 allocations: 240 bytes)\n  1.273 μs (4 allocations: 256 bytes)\nMain.MyModule```\nIs this loss of performance by a factor of 2 when storing the broadcast result in my composite type something that should be expected? Or is there a way I can avoid it or at least improve it?\n\n(I'm running Julia 1.6)","user":"UEA5FBCRH","ts":"1613742408.035200","team":"T68168MUP","edited":{"user":"UEA5FBCRH","ts":"1613742659.000000"},"blocks":[{"type":"rich_text","block_id":"m+W","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have the following minimal working example:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using BenchmarkTools\n\nstruct MyFactor{vars, card, T}\n  vals::T\nend\n\na_vals = rand(2,3,1)\nb_vals = rand(2,1,2)\n\nc_vars = (2,3,4)\nc_card = (2,3,2)\n\n@btime a_vals.* b_vals\n@btime MyFactor{c_vars, c_card, Array{Float64, length(c_vars)}}(a_vals .* b_vals)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"which ouputs:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> include_string(Main, clipboard())\n  536.910 ns (3 allocations: 240 bytes)\n  1.273 μs (4 allocations: 256 bytes)\nMain.MyModule"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nIs this loss of performance by a factor of 2 when storing the broadcast result in my composite type something that should be expected? Or is there a way I can avoid it or at least improve it?\n\n(I'm running Julia 1.6)"}]}]}]},{"client_msg_id":"7d5b0dd2-9ce9-47bc-b4d6-10b36edfa0eb","type":"message","text":"It's a benchmark artifacts from that the global variables are not `const`","user":"U67D54KS8","ts":"1613743147.035900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"86rfj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's a benchmark artifacts from that the global variables are not "},{"type":"text","text":"const","style":{"code":true}}]}]}]},{"client_msg_id":"e68247ca-c83a-432a-aa7a-47217d7b48fa","type":"message","text":"Benchmark a function, make the `const` or interpolate them into `@btime` wiht `$` to see that you get the same performance","user":"U67D54KS8","ts":"1613743181.036600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5s9c","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Benchmark a function, make the "},{"type":"text","text":"const","style":{"code":true}},{"type":"text","text":" or interpolate them into "},{"type":"text","text":"@btime","style":{"code":true}},{"type":"text","text":" wiht "},{"type":"text","text":"$","style":{"code":true}},{"type":"text","text":" to see that you get the same performance"}]}]}]},{"client_msg_id":"4d311823-9819-4f28-8955-2275b05eddfc","type":"message","text":"Thanks for the answer! Hmm I actually had read that before. I tested both approaches, and got the follwing results:\n```julia&gt; include_string(Main, clipboard())\nWARNING: replacing module MyModule.\n  107.976 ns (1 allocation: 176 bytes)\n  107.511 ns (1 allocation: 176 bytes)\nMain.MyModule```\n```julia&gt; include_string(Main, clipboard())\n  106.980 ns (1 allocation: 176 bytes)\n  439.202 ns (4 allocations: 256 bytes)\nMain.MyOtherModule```\nCould you explain the difference?","user":"UEA5FBCRH","ts":"1613743499.037500","team":"T68168MUP","edited":{"user":"UEA5FBCRH","ts":"1613743604.000000"},"blocks":[{"type":"rich_text","block_id":"GmFx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks for the answer! Hmm I actually had read that before. I tested both approaches, and got the follwing results:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> include_string(Main, clipboard())\nWARNING: replacing module MyModule.\n  107.976 ns (1 allocation: 176 bytes)\n  107.511 ns (1 allocation: 176 bytes)\nMain.MyModule"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> include_string(Main, clipboard())\n  106.980 ns (1 allocation: 176 bytes)\n  439.202 ns (4 allocations: 256 bytes)\nMain.MyOtherModule"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nCould you explain the difference?"}]}]}]},{"client_msg_id":"6fbfddf3-8a6b-4195-8a5c-8f0882d65b79","type":"message","text":"Interpolating the global vars with `$` still produces a larger ellapsed time for the last statement.\n```@btime MyFactor{$c_vars, $c_card, Array{Float64, length($c_vars)}}($a_vals .* $b_vals)```\nor I'm I still doing something wrong?","user":"UEA5FBCRH","ts":"1613743676.038900","team":"T68168MUP","edited":{"user":"UEA5FBCRH","ts":"1613743782.000000"},"blocks":[{"type":"rich_text","block_id":"GHq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Interpolating the global vars with "},{"type":"text","text":"$","style":{"code":true}},{"type":"text","text":" still produces a larger ellapsed time for the last statement.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@btime MyFactor{$c_vars, $c_card, Array{Float64, length($c_vars)}}($a_vals .* $b_vals)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"or I'm I still doing something wrong?"}]}]}]},{"client_msg_id":"cd3591a2-88c1-4c03-9972-90e11754e035","type":"message","text":"Trying to untangle this:\n```julia&gt; @btime $a_vals .* $b_vals;\n  98.449 ns (1 allocation: 176 bytes)\n\njulia&gt; MyFactor{vars, card}(vals) where {vars, card} = MyFactor{vars, card, typeof(vals)}(vals);  # this constructor doesn't help\n\njulia&gt; @btime MyFactor{$c_vars, $c_card}($a_vals .* $b_vals);\n  846.955 ns (11 allocations: 640 bytes)\n\njulia&gt; const cv = c_vars; const cc = c_card;  # but making these const. does\n\njulia&gt; @btime MyFactor{cv, cc}($a_vals .* $b_vals);\n  95.441 ns (1 allocation: 176 bytes)```\nI guess the `$` isn’t enough here, just making these tuples local variables within a function won’t make this type-stable, they need to be constants there.","user":"UD0NS8PDF","ts":"1613746908.040900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GVe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Trying to untangle this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @btime $a_vals .* $b_vals;\n  98.449 ns (1 allocation: 176 bytes)\n\njulia> MyFactor{vars, card}(vals) where {vars, card} = MyFactor{vars, card, typeof(vals)}(vals);  # this constructor doesn't help\n\njulia> @btime MyFactor{$c_vars, $c_card}($a_vals .* $b_vals);\n  846.955 ns (11 allocations: 640 bytes)\n\njulia> const cv = c_vars; const cc = c_card;  # but making these const. does\n\njulia> @btime MyFactor{cv, cc}($a_vals .* $b_vals);\n  95.441 ns (1 allocation: 176 bytes)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I guess the "},{"type":"text","text":"$","style":{"code":true}},{"type":"text","text":" isn’t enough here, just making these tuples local variables within a function won’t make this type-stable, they need to be constants there."}]}]}]},{"client_msg_id":"3431b7dd-33d0-4e27-a958-4933b1dc7896","type":"message","text":"And do you have an idea of what would be the actual time this expression (broadcasting within a MyFactor constructor) takes to run when executed without the `@btime` macro? Would it be the 98 ns? or the 850 ns?","user":"UEA5FBCRH","ts":"1613749944.045700","team":"T68168MUP","edited":{"user":"UEA5FBCRH","ts":"1613750022.000000"},"blocks":[{"type":"rich_text","block_id":"74/=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And do you have an idea of what would be the actual time this expression (broadcasting within a MyFactor constructor) takes to run when executed without the "},{"type":"text","text":"@btime","style":{"code":true}},{"type":"text","text":" macro? Would it be the 98 ns? or the 850 ns?"}]}]}]},{"client_msg_id":"51c1bc3b-fcbf-4fd3-b655-1daeff467404","type":"message","text":"I have the feeling that it is not an artifact in `@btime` but rather a consequence of  `cv` and `cc` being const or not. Do you agree?","user":"UEA5FBCRH","ts":"1613750617.049100","team":"T68168MUP","edited":{"user":"UEA5FBCRH","ts":"1613750667.000000"},"blocks":[{"type":"rich_text","block_id":"3smS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have the feeling that it is not an artifact in "},{"type":"text","text":"@btime","style":{"code":true}},{"type":"text","text":" but rather a consequence of  "},{"type":"text","text":"cv","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"cc","style":{"code":true}},{"type":"text","text":" being const or not. Do you agree?"}]}]}]},{"client_msg_id":"6f0c62e2-b42a-40a9-84f9-b8fb5b7c455d","type":"message","text":"I have two `SparseMatrixCSC` `A` and `B`. I want to in-place modify `B` so that its storage is the same as `A`. That is, drop nonzero entries in `B` that are structurally zero in `A`, and add nonstructural zeros to `B` for nonzero entries in `A` not in `B`. The result should be that they have the same `colptr` and `rowval` fields. Is there a helper function for this in SparseArrays?","user":"UHDQQ4GN6","ts":"1613896857.000600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5Okl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have two "},{"type":"text","text":"SparseMatrixCSC","style":{"code":true}},{"type":"text","text":" "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"B","style":{"code":true}},{"type":"text","text":". I want to in-place modify "},{"type":"text","text":"B","style":{"code":true}},{"type":"text","text":" so that its storage is the same as "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":". That is, drop nonzero entries in "},{"type":"text","text":"B","style":{"code":true}},{"type":"text","text":" that are structurally zero in "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":", and add nonstructural zeros to "},{"type":"text","text":"B","style":{"code":true}},{"type":"text","text":" for nonzero entries in "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" not in "},{"type":"text","text":"B","style":{"code":true}},{"type":"text","text":". The result should be that they have the same "},{"type":"text","text":"colptr","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"rowval","style":{"code":true}},{"type":"text","text":" fields. Is there a helper function for this in SparseArrays?"}]}]}]},{"client_msg_id":"4fca82ad-cee8-4161-8698-29b6e8ae8902","type":"message","text":"`BlockArrays` allocates its own memory, and gives you an interface that lets you work with it in terms of blocks. Is there anything that goes the other direction? Say I have a two existing vectors, and want to treat them as a single `AbstractVector` without any additional allocations or copying","user":"U81PB6N77","ts":"1614109912.005100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ak340","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"BlockArrays","style":{"code":true}},{"type":"text","text":" allocates its own memory, and gives you an interface that lets you work with it in terms of blocks. Is there anything that goes the other direction? Say I have a two existing vectors, and want to treat them as a single "},{"type":"text","text":"AbstractVector","style":{"code":true}},{"type":"text","text":" without any additional allocations or copying"}]}]}],"thread_ts":"1614109912.005100","reply_count":1,"reply_users_count":1,"latest_reply":"1614110011.005200","reply_users":["U81PB6N77"],"subscribed":false},{"client_msg_id":"9eb361a6-5d46-4c4f-a55a-50312c6b7321","type":"message","text":"If anyone could review a relatively straightforward PR to AxisArrays I’d really appreciate it :simple_smile:\n<https://github.com/JuliaArrays/AxisArrays.jl/pull/195#pullrequestreview-598536125>","user":"UCR9S0L9E","ts":"1614362249.011600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RB+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If anyone could review a relatively straightforward PR to AxisArrays I’d really appreciate it "},{"type":"emoji","name":"simple_smile"},{"type":"text","text":"\n"},{"type":"link","url":"https://github.com/JuliaArrays/AxisArrays.jl/pull/195#pullrequestreview-598536125"}]}]}]},{"type":"message","subtype":"thread_broadcast","text":"gently bump - if anyone has the time to review it this week","user":"UCR9S0L9E","ts":"1614771849.013200","thread_ts":"1614362249.011600","root":{"client_msg_id":"9eb361a6-5d46-4c4f-a55a-50312c6b7321","type":"message","text":"If anyone could review a relatively straightforward PR to AxisArrays I’d really appreciate it :simple_smile:\n<https://github.com/JuliaArrays/AxisArrays.jl/pull/195#pullrequestreview-598536125>","user":"UCR9S0L9E","ts":"1614362249.011600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RB+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If anyone could review a relatively straightforward PR to AxisArrays I’d really appreciate it "},{"type":"emoji","name":"simple_smile"},{"type":"text","text":"\n"},{"type":"link","url":"https://github.com/JuliaArrays/AxisArrays.jl/pull/195#pullrequestreview-598536125"}]}]}],"thread_ts":"1614362249.011600","reply_count":7,"reply_users_count":3,"latest_reply":"1614771849.013200","reply_users":["U6A936746","U69J94HT9","UCR9S0L9E"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"qOc3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"gently bump - if anyone has the time to review it this week"}]}]}],"client_msg_id":"f79e095e-86be-47e5-83d1-70966c747cd8"},{"client_msg_id":"5031bccd-c4c0-4b8b-97ba-807828cad167","type":"message","text":"Has anyone mixed StructArrays and StaticArrays?","user":"U68P09RFZ","ts":"1615262547.000500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Dpd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Has anyone mixed StructArrays and StaticArrays?"}]}]}]},{"client_msg_id":"3c5b1295-f3e7-4460-97c6-07e264549595","type":"message","text":"It works, but there isn't a good way to access the underlying components.","user":"U68P09RFZ","ts":"1615262693.001900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sPEP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It works, but there isn't a good way to access the underlying components."}]}]}]},{"client_msg_id":"a6e8654f-405e-4378-9134-78ba37538d2a","type":"message","text":"the best I found was `X.data.:1`, but it's a bit clunky","user":"U68P09RFZ","ts":"1615262861.002300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"50h7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the best I found was "},{"type":"text","text":"X.data.:1","style":{"code":true}},{"type":"text","text":", but it's a bit clunky"}]}]}]},{"client_msg_id":"d729b55b-e4df-4970-bc5d-bc7cd1c92187","type":"message","text":"I feel like it would be nice to be able to `X.[1]` or something like that","user":"U68P09RFZ","ts":"1615263170.002800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NERE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I feel like it would be nice to be able to "},{"type":"text","text":"X.[1]","style":{"code":true}},{"type":"text","text":" or something like that"}]}]}]},{"client_msg_id":"94b681f8-841d-4c81-8644-e213d244af96","type":"message","text":"(currently that's a syntax error)","user":"U68P09RFZ","ts":"1615263203.003000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CLC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(currently that's a syntax error)"}]}]}]},{"client_msg_id":"cbf11df1-6ade-44c2-911e-dc03efe393db","type":"message","text":"It would be awesome to be able to do e.g. `X[i,:,:].[1]`","user":"U68P09RFZ","ts":"1615263421.003600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uMpl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It would be awesome to be able to do e.g. "},{"type":"text","text":"X[i,:,:].[1]","style":{"code":true}}]}]}]},{"client_msg_id":"306dd8b1-aef8-4f98-81cf-868167916017","type":"message","text":"You can do this in a macro.","user":"U8D9768Q6","ts":"1615264300.004200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jSR1D","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can do this in a macro."}]}]}]},{"client_msg_id":"0615d8d1-9f0d-49c2-bd86-0796466f69cd","type":"message","text":"ah, true","user":"U68P09RFZ","ts":"1615264321.004600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UVXDb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah, true"}]}]}]},{"client_msg_id":"aae35eac-ce1a-4f0e-87df-e7a370c30de9","type":"message","text":"```julia&gt; using MacroTools: postwalk, @capture\n\njulia&gt; macro ⋅(ex)\n           out = postwalk(ex) do x\n               if @capture(x, A_.[idxs__])\n                   :(getindex.(Ref($A), $(idxs...)))\n               else\n                   x\n               end\n           end\n           esc(out)\n       end\n@⋅ (macro with 1 method)\n\njulia&gt; using StructArrays, StaticArrays\n\njulia&gt; X = StructArray([SA[1, 2, 3], SA[4, 5, 6]])\n2-element StructArray(::Vector{Tuple{Int64, Int64, Int64}}) with eltype SVector{3, Int64}:\n [1, 2, 3]\n [4, 5, 6]\n\njulia&gt; @⋅ X[1, :].[1]\n3-element SVector{3, Int64} with indices SOneTo(3):\n 1\n 2\n 3```","user":"U8D9768Q6","ts":"1615264818.005600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7Ltvt","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using MacroTools: postwalk, @capture\n\njulia> macro ⋅(ex)\n           out = postwalk(ex) do x\n               if @capture(x, A_.[idxs__])\n                   :(getindex.(Ref($A), $(idxs...)))\n               else\n                   x\n               end\n           end\n           esc(out)\n       end\n@⋅ (macro with 1 method)\n\njulia> using StructArrays, StaticArrays\n\njulia> X = StructArray([SA[1, 2, 3], SA[4, 5, 6]])\n2-element StructArray(::Vector{Tuple{Int64, Int64, Int64}}) with eltype SVector{3, Int64}:\n [1, 2, 3]\n [4, 5, 6]\n\njulia> @⋅ X[1, :].[1]\n3-element SVector{3, Int64} with indices SOneTo(3):\n 1\n 2\n 3"}]}]}]},{"client_msg_id":"ee974e71-a8c7-40d1-9618-fb5f3f77de8d","type":"message","text":"you actually need to unwrap the tuple inside to get the \"column based layout\" (with three separate vectors containing each coordinate):\n```X = StructArray([SA[1, 2, 3], SA[4, 5, 6]], unwrap = t -&gt; isa(t, Tuple))```","user":"U6BJ9E351","ts":"1615280913.006500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Pjj9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you actually need to unwrap the tuple inside to get the \"column based layout\" (with three separate vectors containing each coordinate):\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"X = StructArray([SA[1, 2, 3], SA[4, 5, 6]], unwrap = t -> isa(t, Tuple))"}]}]}]},{"client_msg_id":"6759b827-e861-4d78-974b-2a5faa8808ab","type":"message","text":"but then you get the `X.data.:1` ugliness to actually access those","user":"U6BJ9E351","ts":"1615280989.007000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"X8S","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but then you get the "},{"type":"text","text":"X.data.:1","style":{"code":true}},{"type":"text","text":" ugliness to actually access those"}]}]}]},{"client_msg_id":"5ccd6b08-ccac-43c4-9e86-55bf93f4f27c","type":"message","text":"two ways forward:\n1. implement the \"non-standard layout interface\" (<https://juliaarrays.github.io/StructArrays.jl/dev/#Interface>) on StaticArrays to avoid the \"nesting\" (but I'm not sure where it should live to avoid type piracy)\n2. figure out a better syntax for things like `map(x-&gt;<http://x.re|x.re>, s)` or `map(x -&gt; x[1], s)` (<https://github.com/JuliaData/IndexedTables.jl/pull/203#issuecomment-447945900>)","user":"U6BJ9E351","ts":"1615281202.008900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LlGC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"two ways forward:\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"implement the \"non-standard layout interface\" ("},{"type":"link","url":"https://juliaarrays.github.io/StructArrays.jl/dev/#Interface"},{"type":"text","text":") on StaticArrays to avoid the \"nesting\" (but I'm not sure where it should live to avoid type piracy)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"figure out a better syntax for things like "},{"type":"text","text":"map(x->","style":{"code":true}},{"type":"link","url":"http://x.re","text":"x.re","style":{"code":true}},{"type":"text","text":", s)","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"map(x -> x[1], s)","style":{"code":true}},{"type":"text","text":" ("},{"type":"link","url":"https://github.com/JuliaData/IndexedTables.jl/pull/203#issuecomment-447945900"},{"type":"text","text":")"}]}],"style":"ordered","indent":0}]}]},{"client_msg_id":"3e9c60b8-c0a7-4390-9f2b-1ad4fe8f289b","type":"message","text":"Way 1. is actually very easy to do, but you need to pirate things:\n```julia&gt; StructArrays.staticschema(::Type{SVector{N, T}}) where {N, T} = NTuple{N, T}\n\njulia&gt; StructArrays.createinstance(::Type{&lt;:SVector}, args...) = SVector(args...)\n\njulia&gt; StructArrays.component(s::SVector, i) = getindex(s, i)\n\njulia&gt;  X = StructArray([SA[1, 2, 3], SA[4, 5, 6]])\n2-element StructArray(::Vector{Int64}, ::Vector{Int64}, ::Vector{Int64}) with eltype SVector{3, Int64}:\n [1, 2, 3]\n [4, 5, 6]\n\njulia&gt; X.:1\n2-element Vector{Int64}:\n 1\n 4```","user":"U6BJ9E351","ts":"1615281421.009300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kBri","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Way 1. is actually very easy to do, but you need to pirate things:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> StructArrays.staticschema(::Type{SVector{N, T}}) where {N, T} = NTuple{N, T}\n\njulia> StructArrays.createinstance(::Type{<:SVector}, args...) = SVector(args...)\n\njulia> StructArrays.component(s::SVector, i) = getindex(s, i)\n\njulia>  X = StructArray([SA[1, 2, 3], SA[4, 5, 6]])\n2-element StructArray(::Vector{Int64}, ::Vector{Int64}, ::Vector{Int64}) with eltype SVector{3, Int64}:\n [1, 2, 3]\n [4, 5, 6]\n\njulia> X.:1\n2-element Vector{Int64}:\n 1\n 4"}]}]}]},{"client_msg_id":"3832df30-151e-4d2d-856d-715a7145f2af","type":"message","text":"if we agree on a tiny package to define this interface, I guess both StructArrays and StaticArrays could depend on it to implement this without type piracy","user":"U6BJ9E351","ts":"1615281507.010200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Kj9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if we agree on a tiny package to define this interface, I guess both StructArrays and StaticArrays could depend on it to implement this without type piracy"}]}]}]},{"client_msg_id":"495450e9-5d84-4e28-b70a-03546cbfc806","type":"message","text":"Does anyone have a collection of custom reduction implementations for an AbstractArray? I’m making my way through reduce.jl and reducedim.jl, but they’re pretty intimidating. Wondering if there’s a good “middle ground” set of overloads I could do to allow all the Base user-facing APIs to “just work”.","user":"U681ELA87","ts":"1615609657.013100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EXgs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does anyone have a collection of custom reduction implementations for an AbstractArray? I’m making my way through reduce.jl and reducedim.jl, but they’re pretty intimidating. Wondering if there’s a good “middle ground” set of overloads I could do to allow all the Base user-facing APIs to “just work”."}]}]}]},{"client_msg_id":"205edb98-cc3b-47ae-ba29-e85c5d32fcb9","type":"message","text":"It might make sense to handle `reducedim.jl` via <https://github.com/JuliaLang/julia/pull/32310>, if and once it is merged","user":"U68P09RFZ","ts":"1615671403.014100","team":"T68168MUP","edited":{"user":"U68P09RFZ","ts":"1615672040.000000"},"blocks":[{"type":"rich_text","block_id":"Vmc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It might make sense to handle "},{"type":"text","text":"reducedim.jl","style":{"code":true}},{"type":"text","text":" via "},{"type":"link","url":"https://github.com/JuliaLang/julia/pull/32310"},{"type":"text","text":", if and once it is merged"}]}]}]},{"client_msg_id":"dea121b8-5d96-4ac8-8de2-47bfd9588ebf","type":"message","text":"the only annoying thing is the dims arg is reversed","user":"U68P09RFZ","ts":"1615671785.015400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7fVMH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the only annoying thing is the dims arg is reversed"}]}]}]},{"client_msg_id":"31904475-a296-4bff-83f4-0d8f588591a0","type":"message","text":"i.e. `reduce(+, X, dims=1)` would be `map(x -&gt; reduce(+, x), eachslice(X, dims=2, drop=false))`","user":"U68P09RFZ","ts":"1615671875.016300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RIqN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i.e. "},{"type":"text","text":"reduce(+, X, dims=1)","style":{"code":true}},{"type":"text","text":" would be "},{"type":"text","text":"map(x -> reduce(+, x), eachslice(X, dims=2, drop=false))","style":{"code":true}}]}]}]},{"client_msg_id":"57965A52-2801-44CF-A38F-29CCB3E82126","type":"message","text":"I could add a way to support both ways of specifying dims if we could come up with some names","user":"U68P09RFZ","ts":"1615675312.019100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w7W","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I could add a way to support both ways of specifying dims if we could come up with some names"}]}]}]},{"client_msg_id":"88D4FEB5-6C2A-450A-8855-5868AD5A3147","type":"message","text":"innerdims?","user":"U68P09RFZ","ts":"1615675491.019500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KB03H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"innerdims?"}]}]}]},{"client_msg_id":"EAF862A3-31EF-4627-AB48-2876AACA9E0B","type":"message","text":"bydims?","user":"U68P09RFZ","ts":"1615675530.019800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uB=K","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"bydims?"}]}]}]},{"client_msg_id":"7FC6D2C8-20B9-4503-AFA2-C0E2C3E9BDCC","type":"message","text":"overdims?","user":"U68P09RFZ","ts":"1615675562.020400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=71vO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"overdims?"}]}]}]},{"client_msg_id":"ad8e10b3-4075-4f95-ad28-42f32e29bbca","type":"message","text":"<@UCR9S0L9E> this conversation will be of interest","user":"U6A936746","ts":"1615678192.021400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JDsnM","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UCR9S0L9E"},{"type":"text","text":" this conversation will be of interest"}]}]}]},{"client_msg_id":"73aa8e9e-707d-459a-abb7-d49fd79d4a97","type":"message","text":"I got a little stuck because I already had a `map` overload, then defined `mapreduce(f, op, a) = reduce(op, map(f, a))`, but the default `reduce` in Base calls `mapreduce`, so my overload was hanging because I think it was recursively allocating huge `map` array results before it hit a stackoverflow.","user":"U681ELA87","ts":"1615678362.022900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4Zeu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I got a little stuck because I already had a "},{"type":"text","text":"map","style":{"code":true}},{"type":"text","text":" overload, then defined "},{"type":"text","text":"mapreduce(f, op, a) = reduce(op, map(f, a))","style":{"code":true}},{"type":"text","text":", but the default "},{"type":"text","text":"reduce","style":{"code":true}},{"type":"text","text":" in Base calls "},{"type":"text","text":"mapreduce","style":{"code":true}},{"type":"text","text":", so my overload was hanging because I think it was recursively allocating huge "},{"type":"text","text":"map","style":{"code":true}},{"type":"text","text":" array results before it hit a stackoverflow."}]}]}]},{"client_msg_id":"0887d31d-910f-41c6-802f-502b2df0bd01","type":"message","text":"Just FYI, JuliaFolds is all about extensible interface for sequential/parallel/GPU/distributed folds; `mapreduce` is derived as a corollary.","user":"UC7AF7NSU","ts":"1615679304.023200","team":"T68168MUP","edited":{"user":"UC7AF7NSU","ts":"1615679318.000000"},"blocks":[{"type":"rich_text","block_id":"bDl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Just FYI, JuliaFolds is all about extensible interface for sequential/parallel/GPU/distributed folds; "},{"type":"text","text":"mapreduce","style":{"code":true}},{"type":"text","text":" is derived as a corollary."}]}]}]},{"client_msg_id":"baaa0457-02c3-4623-b79a-ac2d2da76d33","type":"message","text":"Yeah, I've been thinking a lot about diving into all that because you get a little taste of it in the core transducer stuff in reduce.jl.","user":"U681ELA87","ts":"1615679579.024000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"f6KU4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, I've been thinking a lot about diving into all that because you get a little taste of it in the core transducer stuff in reduce.jl."}]}]}]},{"client_msg_id":"4952094c-8754-4d9b-a9f6-0a2498130d74","type":"message","text":"I guess the biggest issue is that I haven't done any refactoring I promised ages ago :slightly_smiling_face:","user":"UC7AF7NSU","ts":"1615679726.026800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AAad","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess the biggest issue is that I haven't done any refactoring I promised ages ago "},{"type":"emoji","name":"slightly_smiling_face"}]}]}]},{"client_msg_id":"2d47b716-fe1c-49e4-a9d6-7e1281361c84","type":"message","text":"For context, I'm looking into optimizations for `SentinelArrays.ChainedVector`, which is somewhat of a building block in the data ecosystem for \"chunked arrays\". We use it in CSV.jl where each thread parses a different chunk of a csv file and the final \"column\" is returned as a ChainedVector comprising each thread's parsed chunk. And in Arrow.jl, we parse all the record batches of an input file and again present a single user-facing column of a ChainedArray of each record batch's chunk. I'm looking into ways we could automatically provide threaded operations on ChainedVector or other non-threaded optimizations taking advantage of the natural \"partitions\".","user":"U681ELA87","ts":"1615679765.027400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gFm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For context, I'm looking into optimizations for "},{"type":"text","text":"SentinelArrays.ChainedVector","style":{"code":true}},{"type":"text","text":", which is somewhat of a building block in the data ecosystem for \"chunked arrays\". We use it in CSV.jl where each thread parses a different chunk of a csv file and the final \"column\" is returned as a ChainedVector comprising each thread's parsed chunk. And in Arrow.jl, we parse all the record batches of an input file and again present a single user-facing column of a ChainedArray of each record batch's chunk. I'm looking into ways we could automatically provide threaded operations on ChainedVector or other non-threaded optimizations taking advantage of the natural \"partitions\"."}]}]}]},{"client_msg_id":"7ce12a66-59d8-47bd-a36b-38d5f22d4830","type":"message","text":"Yeah, Apache Arrow and chunked columnar DB thing have been on back of my head while working on transducers as I've been seen Wes Mckinney et al pitching about it. It'd be great to finally put those things together.\n\nWhat you're thoughts on putting one indirection of putting SplittablesBase.jl in the middle? i.e., let `halve(array)` divide a set of chunks to two set of chunks. I think this is The Right (default) approach for parallelism. For example, that's what OpenCilk does for the parallel `for` loop. `halve` approach would derive divide-and-conquer task tree which has a bigger parallelism rather than the sequential spawn approach you will have with directly using `partition`. tl;dr, it'd be faster, theoretically.","user":"UC7AF7NSU","ts":"1615680638.028900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Akbt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, Apache Arrow and chunked columnar DB thing have been on back of my head while working on transducers as I've been seen Wes Mckinney et al pitching about it. It'd be great to finally put those things together.\n\nWhat you're thoughts on putting one indirection of putting SplittablesBase.jl in the middle? i.e., let "},{"type":"text","text":"halve(array)","style":{"code":true}},{"type":"text","text":" divide a set of chunks to two set of chunks. I think this is The Right (default) approach for parallelism. For example, that's what OpenCilk does for the parallel "},{"type":"text","text":"for","style":{"code":true}},{"type":"text","text":" loop. "},{"type":"text","text":"halve","style":{"code":true}},{"type":"text","text":" approach would derive divide-and-conquer task tree which has a bigger parallelism rather than the sequential spawn approach you will have with directly using "},{"type":"text","text":"partition","style":{"code":true}},{"type":"text","text":". tl;dr, it'd be faster, theoretically."}]}]}]},{"client_msg_id":"f8d1885c-18de-4155-8a34-6eb2da66759b","type":"message","text":"I think it might come up in practice if the combine operation is costly as well; e.g., when implementing parallel `unique`. I haven't benchmarked it yet, though.","user":"UC7AF7NSU","ts":"1615680755.029100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nE5cl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think it might come up in practice if the combine operation is costly as well; e.g., when implementing parallel "},{"type":"text","text":"unique","style":{"code":true}},{"type":"text","text":". I haven't benchmarked it yet, though."}]}]}]},{"client_msg_id":"c4bb2bee-871b-4593-803f-a88740510ad0","type":"message","text":"We can also use the mechanism that FoldsThreads.jl uses to switch to directly invoking something like `Iterators.artition`, when we observe a certain collective operation is better be done with sequential spawn.","user":"UC7AF7NSU","ts":"1615680947.029700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aWoAN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We can also use the mechanism that FoldsThreads.jl uses to switch to directly invoking something like "},{"type":"text","text":"Iterators.artition","style":{"code":true}},{"type":"text","text":", when we observe a certain collective operation is better be done with sequential spawn."}]}]}],"thread_ts":"1615680947.029700","reply_count":1,"reply_users_count":1,"latest_reply":"1615680953.029800","reply_users":["UC7AF7NSU"],"subscribed":false},{"client_msg_id":"69eac5b8-3786-4f3d-a71c-387112472120","type":"message","text":"This is awesome and a little overwhelming. I think I just need to carve out some time to dive into foldsThreads.jl and a few of the other packages you've put together on all this.","user":"U681ELA87","ts":"1615681039.030700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5nX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is awesome and a little overwhelming. I think I just need to carve out some time to dive into foldsThreads.jl and a few of the other packages you've put together on all this."}]}]}]},{"client_msg_id":"f6c997e2-7c64-4bec-b7b9-6f1dac689479","type":"message","text":"ah, FoldsThreads.jl have some of the crazy things I wrote in past few months :grin:. I don't recommend this as the first reference of JuliaFolds","user":"UC7AF7NSU","ts":"1615681248.031100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UeM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah, FoldsThreads.jl have some of the crazy things I wrote in past few months "},{"type":"emoji","name":"grin"},{"type":"text","text":". I don't recommend this as the first reference of JuliaFolds"}]}]}]},{"client_msg_id":"a77a1af4-3423-4a5f-ac92-ae14aca68f43","type":"message","text":"If you want to have a look at some code examples of `reduce` implementations, maybe these examples can help:\n<https://github.com/JuliaFolds/Transducers.jl/blob/f95d07b82509aa6a366995365862450c6df25c89/src/reduce.jl#L165-L186> (Transducers.jl's default parallel reduce)\n<https://github.com/JuliaFolds/FoldsThreads.jl/blob/master/src/nonthreaded.jl> (non-threaded, bare-minimum reduce that has the same call graph structure as threaded reduce)","user":"UC7AF7NSU","ts":"1615681523.031500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"m1D","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you want to have a look at some code examples of "},{"type":"text","text":"reduce","style":{"code":true}},{"type":"text","text":" implementations, maybe these examples can help:\n"},{"type":"link","url":"https://github.com/JuliaFolds/Transducers.jl/blob/f95d07b82509aa6a366995365862450c6df25c89/src/reduce.jl#L165-L186"},{"type":"text","text":" (Transducers.jl's default parallel reduce)\n"},{"type":"link","url":"https://github.com/JuliaFolds/FoldsThreads.jl/blob/master/src/nonthreaded.jl"},{"type":"text","text":" (non-threaded, bare-minimum reduce that has the same call graph structure as threaded reduce)"}]}]}]},{"client_msg_id":"8519596a-2d10-4ef4-95c6-fa81e092fe8b","type":"message","text":"Awesome","user":"U681ELA87","ts":"1615681560.031700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SnpZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Awesome"}]}]}]},{"client_msg_id":"2A412168-A03C-40A1-8361-502916B5DBA4","type":"message","text":"Is there some analog of `eachslice`","user":"U68P09RFZ","ts":"1615682255.033100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AqKi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there some analog of "},{"type":"text","text":"eachslice","style":{"code":true}}]}]}]},{"client_msg_id":"B56AFB7C-34ED-497E-8E5C-3B3C7BBBB2E5","type":"message","text":"Relatedly, if there are any good videos/presentations I’d love some other material to consume","user":"U681ELA87","ts":"1615682293.034100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d5n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Relatedly, if there are any good videos/presentations I’d love some other material to consume"}]}]}]},{"client_msg_id":"dba3b338-d13b-45ef-aea3-b2e8255f8e0a","type":"message","text":"Can we have a constructor for `Matrix` from a `Vector` of `Vector`s","user":"U67G3QRJM","ts":"1616078800.000700","team":"T68168MUP","edited":{"user":"U67G3QRJM","ts":"1616078825.000000"},"blocks":[{"type":"rich_text","block_id":"MJ8D","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can we have a constructor for "},{"type":"text","text":"Matrix","style":{"code":true}},{"type":"text","text":" from a "},{"type":"text","text":"Vector","style":{"code":true}},{"type":"text","text":" of `Vector`s"}]}]}],"thread_ts":"1616078800.000700","reply_count":10,"reply_users_count":3,"latest_reply":"1616079630.003100","reply_users":["U01C3624SGJ","U67G3QRJM","U67D54KS8"],"subscribed":false},{"client_msg_id":"73860d56-182d-4bd6-96d1-7ecb969a30e2","type":"message","text":"is there an array type for lazy evaluations of linear combinations of arrays?","user":"U011LUQ182G","ts":"1616637165.009800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZsznU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is there an array type for lazy evaluations of linear combinations of arrays?"}]}]}]},{"client_msg_id":"1871DCD4-0864-46EC-8CED-5AB0520C281A","type":"message","text":"LazyArrays.jl","user":"U8D9768Q6","ts":"1616637284.010100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"evY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"LazyArrays.jl"}]}]}],"reactions":[{"name":"+1","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"c27b1d8b-c342-42c4-8fa9-7a30a401bb30","type":"message","text":"`hvcat`  works by taking elements in row-major order, is there an easy way to do `vhcat` which takes arguments in column-major order?","user":"U68907M46","ts":"1617916324.012200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"o+=k","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hvcat","style":{"code":true}},{"type":"text","text":"  works by taking elements in row-major order, is there an easy way to do "},{"type":"text","text":"vhcat","style":{"code":true}},{"type":"text","text":" which takes arguments in column-major order?"}]}]}]},{"client_msg_id":"ab0b16ce-7444-4dae-ae2b-73f47fbb9bdc","type":"message","text":"I may have to manually permute the arguments... but that's pretty expensive...","user":"U68907M46","ts":"1617916474.012900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZMD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I may have to manually permute the arguments... but that's pretty expensive..."}]}]}]},{"client_msg_id":"ad5ceb91-a859-4e6f-8288-73b0b89077ce","type":"message","text":"How do you have the values?","user":"UD0NS8PDF","ts":"1617916939.013200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PAu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How do you have the values?"}]}]}]},{"client_msg_id":"d00114a5-8536-416f-b4a6-1ce8c5c7a75f","type":"message","text":"they're in my generated code, they come in column-major order... It's cool I just implemented it without hvcat -- creates a matrix and fills it. Thanks!","user":"U68907M46","ts":"1617923116.014900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BC8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"they're in my generated code, they come in column-major order... It's cool I just implemented it without hvcat -- creates a matrix and fills it. Thanks!"}]}]}]},{"client_msg_id":"46719115-4ace-4818-b1f9-a053c58965b5","type":"message","text":"Can someone help me make sense of this:\n\n\n```julia&gt; Base.axes(Base.broadcasted(+, a, c))\n(Base.Slice(1:10), Base.Slice(1:8))\n\njulia&gt; a .+ c .+ c\nERROR: MethodError: no method matching ndims(::Base.Broadcast.Broadcasted{SymbolicUtils.SymBroadcast, Nothing, typeof(+), Tuple{SymbolicUtils.Sym{Matrix{Number}, Base.ImmutableDict{DataType, Any}}, SymbolicUtils.Sym{Vector{Number}, Base.ImmutableDict{DataType, Any}}}})\nClosest candidates are:\n  ndims(::AbstractAlgebra.MatrixElem{T} where T) at /home/shashi/.julia/packages/AbstractAlgebra/RnlKH/src/generic/Matrix.jl:456\n  ndims(::LinearAlgebra.UniformScaling) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/uniformscaling.jl:87\n  ndims(::Base.Broadcast.Broadcasted{var\"#s829\", var\"#s828\", F, Args} where {var\"#s829\", var\"#s828\"&lt;:Tuple{Vararg{Any, N}}, F, Args&lt;:Tuple}) where N at broadcast.jl:232\n  ...\nStacktrace:\n [1] MappingRF\n   @ ./reduce.jl:93 [inlined]\n [2] afoldl(::Base.MappingRF{typeof(ndims), Base.BottomRF{typeof(max)}}, ::Int64, ::Base.Broadcast.Broadcasted{SymbolicUtils.SymBroadcast, Nothing, typeof(+), Tuple{SymbolicUtils.Sym{Matrix{Number}, Base.ImmutableDict{DataType, Any}}, SymbolicUtils.Sym{Vector{Number}, Base.ImmutableDict{DataType, Any}}}}, ::SymbolicUtils.Sym{Vector{Number}, Base.ImmutableDict{DataType, Any}})\n   @ Base ./operators.jl:533```\n\n`axes` does work, but the `Axes`  type parameter on the Broadcasted is `Nothing` in the failing case... How do I get it to work out?","user":"U68907M46","ts":"1617923175.016200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LY2B","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can someone help me make sense of this:\n\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Base.axes(Base.broadcasted(+, a, c))\n(Base.Slice(1:10), Base.Slice(1:8))\n\njulia> a .+ c .+ c\nERROR: MethodError: no method matching ndims(::Base.Broadcast.Broadcasted{SymbolicUtils.SymBroadcast, Nothing, typeof(+), Tuple{SymbolicUtils.Sym{Matrix{Number}, Base.ImmutableDict{DataType, Any}}, SymbolicUtils.Sym{Vector{Number}, Base.ImmutableDict{DataType, Any}}}})\nClosest candidates are:\n  ndims(::AbstractAlgebra.MatrixElem{T} where T) at /home/shashi/.julia/packages/AbstractAlgebra/RnlKH/src/generic/Matrix.jl:456\n  ndims(::LinearAlgebra.UniformScaling) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/uniformscaling.jl:87\n  ndims(::Base.Broadcast.Broadcasted{var\"#s829\", var\"#s828\", F, Args} where {var\"#s829\", var\"#s828\"<:Tuple{Vararg{Any, N}}, F, Args<:Tuple}) where N at broadcast.jl:232\n  ...\nStacktrace:\n [1] MappingRF\n   @ ./reduce.jl:93 [inlined]\n [2] afoldl(::Base.MappingRF{typeof(ndims), Base.BottomRF{typeof(max)}}, ::Int64, ::Base.Broadcast.Broadcasted{SymbolicUtils.SymBroadcast, Nothing, typeof(+), Tuple{SymbolicUtils.Sym{Matrix{Number}, Base.ImmutableDict{DataType, Any}}, SymbolicUtils.Sym{Vector{Number}, Base.ImmutableDict{DataType, Any}}}}, ::SymbolicUtils.Sym{Vector{Number}, Base.ImmutableDict{DataType, Any}})\n   @ Base ./operators.jl:533"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n\n"},{"type":"text","text":"axes","style":{"code":true}},{"type":"text","text":" does work, but the "},{"type":"text","text":"Axes","style":{"code":true}},{"type":"text","text":"  type parameter on the Broadcasted is "},{"type":"text","text":"Nothing","style":{"code":true}},{"type":"text","text":" in the failing case... How do I get it to work out?"}]}]}]},{"client_msg_id":"6b787e13-4819-45ae-b615-f35143918d2a","type":"message","text":"```julia&gt; a .+ c\n@arrayop(_[i,j] := a[i, j] + c[i])```\nAnd this works...","user":"U68907M46","ts":"1617923233.016600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BioF","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> a .+ c\n@arrayop(_[i,j] := a[i, j] + c[i])"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"And this works..."}]}]}]}]}