{"cursor":0,"messages":[{"client_msg_id":"4808b27b-22dd-40cd-ab0e-1e9ab8cb5c44","type":"message","text":"Right now `mapreduce(*, +, fill(3, 2,2), fill(5, 2,2), dims=1)` just applies map &amp; then reduces. Is there an issue about not doing that, i.e. not allocating a matrix before reducing?","user":"UD0NS8PDF","ts":"1608733152.049900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7Pa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Right now "},{"type":"text","text":"mapreduce(*, +, fill(3, 2,2), fill(5, 2,2), dims=1)","style":{"code":true}},{"type":"text","text":" just applies map & then reduces. Is there an issue about not doing that, i.e. not allocating a matrix before reducing?"}]}]}]},{"client_msg_id":"23e3992f-020b-489d-af20-d3d03931e7e1","type":"message","text":"I seem to remember someone mentioning a package that let you have some dimensions being static, and some being not.","user":"U68P09RFZ","ts":"1608751868.050500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ze0B","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I seem to remember someone mentioning a package that let you have some dimensions being static, and some being not."}]}]}]},{"client_msg_id":"0477af0d-2783-4ea0-b839-1d5c583c085d","type":"message","text":"does anyone remember what it was?","user":"U68P09RFZ","ts":"1608751875.050700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XbcJA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"does anyone remember what it was?"}]}]}]},{"client_msg_id":"e84b5123-17db-40a4-9166-947a6baa1f8b","type":"message","text":"ah found it <https://github.com/mateuszbaran/HybridArrays.jl>","user":"U68P09RFZ","ts":"1608751964.051000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"A7H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah found it "},{"type":"link","url":"https://github.com/mateuszbaran/HybridArrays.jl"}]}]}],"reactions":[{"name":"+1","users":["UCZ7VBGUD","U8D9768Q6"],"count":2},{"name":"sonic","users":["UCZ7VBGUD"],"count":1}]},{"client_msg_id":"90D76606-B6FE-46AC-84CF-7E798907A45D","type":"message","text":"<https://github.com/mateuszbaran/HybridArrays.jl|https://github.com/mateuszbaran/HybridArrays.jl>","user":"UCZ7VBGUD","ts":"1608751964.051100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"umE","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/mateuszbaran/HybridArrays.jl","text":"https://github.com/mateuszbaran/HybridArrays.jl"}]}]}],"reactions":[{"name":"+1","users":["U68P09RFZ"],"count":1}]},{"client_msg_id":"48e2ca51-0a46-4b9c-bf73-9452e969e468","type":"message","text":"&gt; I seem to remember someone mentioning a package that let you have some dimensions being static, and some being not.\nArraysOfArrays can also do this\n\n```using ArraysOfArrays, StaticArrays\nA = rand(3, 1000)\nVofSV = nestedview(A, SVector{3})\nVofSV isa AbstractVector{&lt;:SVector{3}}```\nThe result is actually not a type defined in ArraysOfArrays, it just does a `reshape(reinterpret(...), ...)`. Works pretty well, though.","user":"U756M0EB0","ts":"1609005892.054200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uY4hZ","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"I seem to remember someone mentioning a package that let you have some dimensions being static, and some being not."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nArraysOfArrays can also do this\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using ArraysOfArrays, StaticArrays\nA = rand(3, 1000)\nVofSV = nestedview(A, SVector{3})\nVofSV isa AbstractVector{<:SVector{3}}"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"The result is actually not a type defined in ArraysOfArrays, it just does a "},{"type":"text","text":"reshape(reinterpret(...), ...)","style":{"code":true}},{"type":"text","text":". Works pretty well, though."}]}]}]},{"client_msg_id":"2ee9007b-2d97-456f-9e22-0296251fad68","type":"message","text":"That you can just do with Base though, like `reinterpret(typeof(SA[1,2,3]), rand(1:99, 3, 10)) |&gt; vec`?","user":"UD0NS8PDF","ts":"1609006646.054800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8tQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That you can just do with Base though, like "},{"type":"text","text":"reinterpret(typeof(SA[1,2,3]), rand(1:99, 3, 10)) |> vec","style":{"code":true}},{"type":"text","text":"?"}]}]}]},{"client_msg_id":"7ba88025-aeb3-48cf-bf35-94aad5a1e5fc","type":"message","text":"Re having some axes static, should this perhaps return `(SOneTo(3), OneTo(8))`?\n```julia&gt; reinterpret(reshape, Int, [SA[1,2,n] for n in 3:10])\n3×8 reinterpret(reshape, Int64, ::Vector{SVector{3, Int64}}) with eltype Int64:\n 1  1  1  1  1  1  1   1\n 2  2  2  2  2  2  2   2\n 3  4  5  6  7  8  9  10\n\njulia&gt; axes(ans)\n(Base.OneTo(3), Base.OneTo(8))```","user":"UD0NS8PDF","ts":"1609006704.055500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CU1b","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Re having some axes static, should this perhaps return "},{"type":"text","text":"(SOneTo(3), OneTo(8))","style":{"code":true}},{"type":"text","text":"?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> reinterpret(reshape, Int, [SA[1,2,n] for n in 3:10])\n3×8 reinterpret(reshape, Int64, ::Vector{SVector{3, Int64}}) with eltype Int64:\n 1  1  1  1  1  1  1   1\n 2  2  2  2  2  2  2   2\n 3  4  5  6  7  8  9  10\n\njulia> axes(ans)\n(Base.OneTo(3), Base.OneTo(8))"}]}]}]},{"client_msg_id":"ce256225-6395-4138-998e-605b1959fb27","type":"message","text":"Not sure about other approaches, but HybridArrays returns a statically sized array in practically any indexing situation where it can be done, and has statically sized views","user":"U9AHT3YM7","ts":"1609013085.056500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Wve","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not sure about other approaches, but HybridArrays returns a statically sized array in practically any indexing situation where it can be done, and has statically sized views"}]}]}]},{"client_msg_id":"a7fa882d-2206-49d4-aeb8-51a6d6006d34","type":"message","text":"and, at least for me, it's much more convenient to be able to mutate a hybrid array in any way I want, not just in SArray chunks","user":"U9AHT3YM7","ts":"1609013277.057400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Rp7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and, at least for me, it's much more convenient to be able to mutate a hybrid array in any way I want, not just in SArray chunks"}]}]}]},{"client_msg_id":"d13195fe-6cdc-475c-bb72-a310cfa78583","type":"message","text":"point 1 from here: <https://discourse.julialang.org/t/recent-developments-in-staticarrays-jl-land/47778> describes it in some detail","user":"U9AHT3YM7","ts":"1609013666.058300","team":"T68168MUP","attachments":[{"service_name":"JuliaLang","title":"Recent developments in StaticArrays.jl land","title_link":"https://discourse.julialang.org/t/recent-developments-in-staticarrays-jl-land/47778","text":"StaticArrays.jl has received a few cool new features since its 0.12.4 release that are now fast thanks to the memory layout changes in Julia 1.5. These changes are commonly known as non-allocating views but as I show here it’s just the tip of the iceberg :slightly_smiling_face:. Here is the outline to make this post a bit more digestible: A cool application. Sized abstract arrays. Faster matrix multiplication. Loading time reduction. These things may not be easy to find so I decided to write about it...","fallback":"JuliaLang: Recent developments in StaticArrays.jl land","thumb_url":"https://aws1.discourse-cdn.com/business5/uploads/julialang/original/2X/1/12829a7ba92b924d4ce81099cbf99785bee9b405.png","fields":[{"title":"Reading time","value":"3 mins :clock2:","short":true},{"title":"Likes","value":"75 :heart:","short":true}],"ts":1601896071,"from_url":"https://discourse.julialang.org/t/recent-developments-in-staticarrays-jl-land/47778","thumb_width":408,"thumb_height":263,"service_icon":"https://aws1.discourse-cdn.com/business5/uploads/julialang/optimized/2X/6/6ca888e296f59ca2a599807f7d5edd489e3d1829_2_180x180.png","id":1,"original_url":"https://discourse.julialang.org/t/recent-developments-in-staticarrays-jl-land/47778"}],"blocks":[{"type":"rich_text","block_id":"iA8f/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"point 1 from here: "},{"type":"link","url":"https://discourse.julialang.org/t/recent-developments-in-staticarrays-jl-land/47778"},{"type":"text","text":" describes it in some detail"}]}]}]},{"client_msg_id":"622ea302-f130-4f08-8344-79a2af311fb1","type":"message","text":"Agree this is the full-feature solution. I just suddenly wondered whether Base’s reinterpret ought to have a little more of its flavour. You can mutate the matrix from my msg. as `R[1,2] = 99` etc. And its type does contain the size, but `size` doesn’t use this.","user":"UD0NS8PDF","ts":"1609014312.060300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KXP+n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Agree this is the full-feature solution. I just suddenly wondered whether Base’s reinterpret ought to have a little more of its flavour. You can mutate the matrix from my msg. as "},{"type":"text","text":"R[1,2] = 99","style":{"code":true}},{"type":"text","text":" etc. And its type does contain the size, but "},{"type":"text","text":"size","style":{"code":true}},{"type":"text","text":" doesn’t use this."}]}]}]},{"client_msg_id":"f64b7c33-6dc7-4351-905d-445915e8b7d5","type":"message","text":"That's a good point, it may be something worth looking into.","user":"U9AHT3YM7","ts":"1609146739.060800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MbIaj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's a good point, it may be something worth looking into."}]}]}]}]}