{"cursor": 5, "messages": [{"type":"message","subtype":"bot_message","text":"I have a list of references to objects, and I want to create a new set of objects but preserve the structure of the list","ts":"1615161182.015800","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"I have a list of references to objects, and I want to create a new set of objects but preserve the structure of the list","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"I suspect that somewhere along the line i'm going to have to deal with indices into the array anyway","ts":"1615161273.015900","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"I suspect that somewhere along the line i'm going to have to deal with indices into the array anyway","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"Starting back from this point, what does it mean to \"immutably change [p1,p2,p3]\"","ts":"1615161313.016000","username":"[gitter] <meff:sunadokei.party>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"Starting back from this point, what does it mean to \"immutably change [p1,p2,p3]\"","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"I want to make a copy of the combined data structure [p1,p2,p3] and [[Ref(p1),Ref(p2],[Ref(p2),Ref(p3)]], but changing the values of p1, p2 etc","ts":"1615161406.016100","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"I want to make a copy of the combined data structure [p1,p2,p3] and [[Ref(p1),Ref(p2],[Ref(p2),Ref(p3)]], but changing the values of p1, p2 etc","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"so the structure of the list of references should be preserved, but with a new set of objects","ts":"1615161429.016200","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"so the structure of the list of references should be preserved, but with a new set of objects","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"Can you do something like [[Ref(p1), Ref(p2)], ...] and then you manipulate the underlying p1 and p2?","ts":"1615161496.016300","username":"[gitter] <meff:sunadokei.party>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"Can you do something like [[Ref(p1), Ref(p2)], ...] and then you manipulate the underlying p1 and p2?","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"Well yes, that's the \"deepcopy + mutate\" solution","ts":"1615161516.016400","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"Well yes, that's the \"deepcopy + mutate\" solution","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"which requires, among other things, making p1 and p2 mutable","ts":"1615161537.016500","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"which requires, among other things, making p1 and p2 mutable","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"the easy way is to store a list of pairs of Int64s and treat them as indices :p","ts":"1615161580.016600","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"the easy way is to store a list of pairs of Int64s and treat them as indices :p","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"how would you do this with an indexed solution? Hold a vector of indices and change the indices in the original vector when a new point comes along?","ts":"1615161587.016700","username":"[gitter] <meff:sunadokei.party>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"how would you do this with an indexed solution? Hold a vector of indices and change the indices in the original vector when a new point comes along?","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"and do you never destroy old points in C?","ts":"1615161611.016800","username":"[gitter] <meff:sunadokei.party>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"and do you never destroy old points in C?","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"so with an indexed solution it's super easy, you can just say points .+ vector and keep the indices the same - boom, translated copy","ts":"1615161669.016900","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"so with an indexed solution it's super easy, you can just say points .+ vector and keep the indices the same - boom, translated copy","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"and if you want to merge two meshes, you concatenate the list of points and add the length of the first list to each index in the second","ts":"1615161696.017000","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"and if you want to merge two meshes, you concatenate the list of points and add the length of the first list to each index in the second","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"an index is a reference to an abstract place in an array, that still applies if you substitute an entirely different array with the same shape","ts":"1615161742.017100","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"an index is a reference to an abstract place in an array, that still applies if you substitute an entirely different array with the same shape","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"no I don't want to destroy the old points - I'm generating a new transform from the original set on each frame","ts":"1615161875.017200","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"no I don't want to destroy the old points - I'm generating a new transform from the original set on each frame","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"I guess the \"right\" way is to store the indices, and then provide an iterator over the thing it indexes so calling functions never have to deal with the implementation detail","ts":"1615161933.017300","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"I guess the \"right\" way is to store the indices, and then provide an iterator over the thing it indexes so calling functions never have to deal with the implementation detail","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"Ah, so you append new points onto the old vector of points, and then transform this entire vector of points at once, but your meshes just reference points in this large vector of available points?","ts":"1615161946.017400","username":"[gitter] <meff:sunadokei.party>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"Ah, so you append new points onto the old vector of points, and then transform this entire vector of points at once, but your meshes just reference points in this large vector of available points?","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"not neccesarily appending, could just be rotating the mesh for example","ts":"1615161998.017500","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"not neccesarily appending, could just be rotating the mesh for example","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"so all the points move around, but the points are still connected in the same way","ts":"1615162015.017600","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"so all the points move around, but the points are still connected in the same way","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"I was quite happy to have struct Line p1::point p2::point end, but then I hit this roadblock","ts":"1615162060.017700","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"I was quite happy to have struct Line p1::point p2::point end, but then I hit this roadblock","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"couldn't you hold the points in a separate vector and have `Line` hold `Ref(Point)` and then just execute your transforms on a vector holding all the `Point`s ?","ts":"1615162097.017800","username":"[gitter] <meff:sunadokei.party>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"couldn't you hold the points in a separate vector and have `Line` hold `Ref(Point)` and then just execute your transforms on a vector holding all the `Point`s ?","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"Yes, but without mutating the vector in place, all the Lines will still reference the old points","ts":"1615162133.017900","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"Yes, but without mutating the vector in place, all the Lines will still reference the old points","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"I guess you don't want the `Point`s in the second vector to be mutable","ts":"1615162133.018000","username":"[gitter] <meff:sunadokei.party>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"I guess you don't want the `Point`s in the second vector to be mutable","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"No, indeed :)","ts":"1615162140.018100","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"No, indeed :)","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"Do you need to share `Point`s between meshes?","ts":"1615162276.018200","username":"[gitter] <meff:sunadokei.party>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"Do you need to share `Point`s between meshes?","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"Nah","ts":"1615162350.018300","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"Nah","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"Idk in my head I would model this very differently, if I'm understanding this correctly. Indices work and may be beneficial if you're trying to exploit some cache locality, but a more \"naive\" solution for me would be to associate the points of a mesh with the mesh itself, so then operations on the mesh mutate the points specific to the mesh","ts":"1615162376.018400","username":"[gitter] <meff:sunadokei.party>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"Idk in my head I would model this very differently, if I'm understanding this correctly. Indices work and may be beneficial if you're trying to exploit some cache locality, but a more \"naive\" solution for me would be to associate the points of a mesh with the mesh itself, so then operations on the mesh mutate the points specific to the mesh","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":":/ I don't want to mutate anything.","ts":"1615162427.018500","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":":/ I don't want to mutate anything.","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"I think the 'right' way to do this immutably would be to use <https://juliaobjects.github.io/Accessors.jl/dev/>","ts":"1615162435.018600","username":"[zulip] <Mason Protter>","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2021-01-15/1637671884275_48.png"},"bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"I think the 'right' way to do this immutably would be to use <https://juliaobjects.github.io/Accessors.jl/dev/>","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"You'd basically want to write a `lens` that causes the edges to be updated if the points are updated","ts":"1615162471.018700","username":"[zulip] <Mason Protter>","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2021-01-15/1637671884275_48.png"},"bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"You'd basically want to write a `lens` that causes the edges to be updated if the points are updated","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"\"updated\" sounds like mutation again?","ts":"1615162510.018800","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"\"updated\" sounds like mutation again?","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"Nope. If you look at Setfield and Accessors, the whole point is that they avoid mutation","ts":"1615162540.018900","username":"[zulip] <Mason Protter>","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2021-01-15/1637671884275_48.png"},"bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"Nope. If you look at Setfield and Accessors, the whole point is that they avoid mutation","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"Of course, doing this with an array would probably be quite slow. But maybe you can use staticarrays or something?","ts":"1615162576.019000","username":"[zulip] <Mason Protter>","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2021-01-15/1637671884275_48.png"},"bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"Of course, doing this with an array would probably be quite slow. But maybe you can use staticarrays or something?","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"I'm already using StaticArrays","ts":"1615162588.019100","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"I'm already using StaticArrays","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"Ah then yeah, Setfield or it's successor Accessors are definitely what you want","ts":"1615162612.019200","username":"[zulip] <Mason Protter>","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2021-01-15/1637671884275_48.png"},"bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"Ah then yeah, Setfield or it's successor Accessors are definitely what you want","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"All I want to do is calculate a new set of points, but still be able to iterate over the list of pairs of points","ts":"1615162635.019300","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"All I want to do is calculate a new set of points, but still be able to iterate over the list of pairs of points","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"Yes, Lenses are a very natural way to do that","ts":"1615162704.019400","username":"[zulip] <Mason Protter>","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2021-01-15/1637671884275_48.png"},"bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"Yes, Lenses are a very natural way to do that","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"How does it work? I'm having trouble grokking it from this, ah, lean documentation :)","ts":"1615162740.019500","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"How does it work? I'm having trouble grokking it from this, ah, lean documentation :)","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"Or should I just \"watch the video\" :p","ts":"1615162803.019600","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"Or should I just \"watch the video\" :p","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"where does Accessors.jl \"store\" its updates? It looks similar to Haskell's lenses, and that just shifts mutations into function application, but function application still has to be stored somewhere","ts":"1615162856.019700","username":"[gitter] <meff:sunadokei.party>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"where does Accessors.jl \"store\" its updates? It looks similar to Haskell's lenses, and that just shifts mutations into function application, but function application still has to be stored somewhere","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"Just checking, you see the rest of the docs, right? There's quite a bit of documentation...","ts":"1615162861.019800","username":"[zulip] <Mason Protter>","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2021-01-15/1637671884275_48.png"},"bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"Just checking, you see the rest of the docs, right? There's quite a bit of documentation...","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"e.g. the left side of this: [image.png](/user_uploads/7178/W5AvAn3rgGXZ8sqTk4HaBkMa/image.png)  has lots of resources","ts":"1615162911.019900","username":"[zulip] <Mason Protter>","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2021-01-15/1637671884275_48.png"},"bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"e.g. the left side of this: [image.png](/user_uploads/7178/W5AvAn3rgGXZ8sqTk4HaBkMa/image.png)  has lots of resources","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"That upload does not work on Matrix, maybe the IRC bridge does a better job.","ts":"1615162939.020000","username":"[gitter] <meff:sunadokei.party>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"That upload does not work on Matrix, maybe the IRC bridge does a better job.","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":":/","ts":"1615162954.020100","username":"[zulip] <Mason Protter>","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2021-01-15/1637671884275_48.png"},"bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":":/","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"nope, no domain","ts":"1615162962.020200","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"nope, no domain","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"\"/user_uploads/7178/W5AvAn3rgGXZ8sqTk4HaBkMa/image.png\"","ts":"1615162969.020300","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"\"/user_uploads/7178/W5AvAn3rgGXZ8sqTk4HaBkMa/image.png\"","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"Okay, well these are all the doc pages <https://juliaobjects.github.io/Accessors.jl/dev/> <https://juliaobjects.github.io/Accessors.jl/dev/getting_started/> <https://juliaobjects.github.io/Accessors.jl/dev/lenses/> <https://juliaobjects.github.io/Accessors.jl/dev/docstrings/> <https://juliaobjects.github.io/Accessors.jl/dev/examples/custom_optics/> <https://juliaobjects.github.io/Accessors.jl/dev/examples/custom_macros/>","ts":"1615163211.020400","username":"[zulip] <Mason Protter>","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2021-01-15/1637671884275_48.png"},"bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"Okay, well these are all the doc pages\n<https://juliaobjects.github.io/Accessors.jl/dev/>\n<https://juliaobjects.github.io/Accessors.jl/dev/getting_started/>\n<https://juliaobjects.github.io/Accessors.jl/dev/lenses/>\n<https://juliaobjects.github.io/Accessors.jl/dev/docstrings/>\n<https://juliaobjects.github.io/Accessors.jl/dev/examples/custom_optics/>\n<https://juliaobjects.github.io/Accessors.jl/dev/examples/custom_macros/>","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"Hm, do all the points in the mesh have the same number of neighbors?","ts":"1615163422.020500","username":"[zulip] <Mason Protter>","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2021-01-15/1637671884275_48.png"},"bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"Hm, do all the points in the mesh have the same number of neighbors?","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"yeah no worries, I got it","ts":"1615163423.020600","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"yeah no worries, I got it","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"oh no not at all","ts":"1615163436.020700","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"oh no not at all","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"the only thing you can count on topologically is that an edge consist of two points, which may (will) be shared with other edges","ts":"1615163472.020800","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"the only thing you can count on topologically is that an edge consist of two points, which may (will) be shared with other edges","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"To be honest, after talking it over with you guys, I think I'll just store indices, and hide the implementation detail behind accesory functions","ts":"1615163531.020900","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"To be honest, after talking it over with you guys, I think I'll just store indices, and hide the implementation detail behind accesory functions","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"Yeah if I'm thinking about it, indices are probably the best way to get exactly the semantics you want","ts":"1615163666.021000","username":"[gitter] <meff:sunadokei.party>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"Yeah if I'm thinking about it, indices are probably the best way to get exactly the semantics you want","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"Fundamentally, the property I want is \"a reference that works on a new, tranformed copy of an array\"","ts":"1615163668.021100","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"Fundamentally, the property I want is \"a reference that works on a new, tranformed copy of an array\"","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"(or the original array, as required)","ts":"1615163685.021200","username":"[irc] <dTal>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"(or the original array, as required)","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"Yeah, I think that's a reasonable approach.","ts":"1615163694.021300","username":"[zulip] <Mason Protter>","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2021-01-15/1637671884275_48.png"},"bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"Yeah, I think that's a reasonable approach.","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"With Haskell's lenses at least you can definitely get ^ property, and you probably can from `Accessors.jl` also, but indices may be simpler for your usecase","ts":"1615163698.021400","username":"[gitter] <meff:sunadokei.party>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"With Haskell's lenses at least you can definitely get ^ property, and you probably can from `Accessors.jl` also, but indices may be simpler for your usecase","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"Hm, what if you just stored an `ImmutableDict{Point, ImmutableLinkedList{Point}}`? I think that'd nicely do everything, right @dTal?","ts":"1615168523.021500","username":"[zulip] <Mason Protter>","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2021-01-15/1637671884275_48.png"},"bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"Hm, what if you just stored an `ImmutableDict{Point, ImmutableLinkedList{Point}}`? I think that'd nicely do everything, right @dTal?","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"is there no easy way to define a default value for a Dict? say test_dict = Dict{String, Int}, I want the Int to be 0 by default for any value of String","ts":"1615272385.021600","username":"[irc] <deimos_>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"is there no easy way to define a default value for a Dict? say test_dict = Dict{String, Int}, I want the Int to be 0 by default for any value of String","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"sort of like test_dict = Dict{String, Int = 0} or something","ts":"1615272942.021700","username":"[irc] <deimos_>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c10ikvsg27ic4l1hhss0","text":{"type":"mrkdwn","text":"sort of like test_dict = Dict{String, Int = 0} or something","verbatim":false}}]}]}