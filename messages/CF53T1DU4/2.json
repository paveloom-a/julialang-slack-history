{"cursor": 1, "messages": [{"client_msg_id":"06c334f5-5b1b-4311-ba08-0f929bb41af3","type":"message","text":"Yes, but broadcasting a generator usually collects it first","user":"UD0NS8PDF","ts":"1613041893.179500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lEm96","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, but broadcasting a generator usually collects it first"}]}]}]},{"client_msg_id":"94ced444-2be0-4b02-bf86-3f05cf80cdd7","type":"message","text":"yes, that's true","user":"UH24GRBLL","ts":"1613041907.179800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Xv1yE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, that's true"}]}]}]},{"client_msg_id":"5954e88a-f9b6-491f-b584-7a5889ca6d13","type":"message","text":"With `copyto!(@view(diff[:, :, dim]), (X[dim, i] - X[dim, j] for i=1:n, j=1:n))` it does seem faster","user":"UD0NS8PDF","ts":"1613041929.180100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2+B7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"With "},{"type":"text","text":"copyto!(@view(diff[:, :, dim]), (X[dim, i] - X[dim, j] for i=1:n, j=1:n))","style":{"code":true}},{"type":"text","text":" it does seem faster"}]}]}]},{"client_msg_id":"b23591d4-6a93-413c-b8e1-037e8cd8591e","type":"message","text":"```for i=1:n, j=1:n, dim=1:d\n        diff[i,j,dim] = X[dim,i] - X[dim,j]\nend```\niteration order may need tweaking, but this is probably just as good","user":"UH24GRBLL","ts":"1613042003.180600","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1613042008.000000"},"blocks":[{"type":"rich_text","block_id":"4Ly","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"for i=1:n, j=1:n, dim=1:d\n        diff[i,j,dim] = X[dim,i] - X[dim,j]\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"iteration order may need tweaking, but this is probably just as good"}]}]}]},{"client_msg_id":"93d49f04-e2b2-4816-ab6b-1f3c50ab249f","type":"message","text":"the resulting difference matrix is (except forthe sign) symmetric, right?","user":"UH24GRBLL","ts":"1613042068.181800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vlHpT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the resulting difference matrix is (except forthe sign) symmetric, right?"}]}]}]},{"client_msg_id":"5b5c0d81-f2cc-4fe0-a9ae-fde9a02b23ec","type":"message","text":"what is the difference between\n`copyto!(@view(diff[:, :, dim]), (X[dim, i] - X[dim, j] for i=1:n, j=1:n))`\nand\n`diff[:, :, dim] .= (X[dim, i] - X[dim, j] for i=1:n, j=1:n)` ?","user":"U7PD3M3L5","ts":"1613042068.181900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eu9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what is the difference between\n"},{"type":"text","text":"copyto!(@view(diff[:, :, dim]), (X[dim, i] - X[dim, j] for i=1:n, j=1:n))","style":{"code":true}},{"type":"text","text":"\nand\n"},{"type":"text","text":"diff[:, :, dim] .= (X[dim, i] - X[dim, j] for i=1:n, j=1:n)","style":{"code":true}},{"type":"text","text":" ?"}]}]}]},{"client_msg_id":"a8b8d12f-7c7b-40b3-b2e4-985df2c1d8c0","type":"message","text":"Simple loops:\n```julia&gt; d4(X) = @einsum Diff[i, j, μ] := X[μ, i] - X[μ, j];\n\njulia&gt; @btime d4($X);\n  827.337 ns (1 allocation: 6.00 KiB)```\nYes to the asymmetry, but not sure of a tidy way of encoding that, for a 3-array.","user":"UD0NS8PDF","ts":"1613042162.183100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5pMU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Simple loops:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> d4(X) = @einsum Diff[i, j, μ] := X[μ, i] - X[μ, j];\n\njulia> @btime d4($X);\n  827.337 ns (1 allocation: 6.00 KiB)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Yes to the asymmetry, but not sure of a tidy way of encoding that, for a 3-array."}]}]}]},{"client_msg_id":"f94d8806-1276-4f49-ac4c-ac14d6fa51e0","type":"message","text":"The difference is a quirk of broadcasting. Not every generator has a known (or even fixed) size, while broadcasting really needs to know that before starting. So it (I think always) calls `collect`, to make a matrix, before proceeding. Thus the `.= (...` version ends up exactly like the `.= [...` version.","user":"UD0NS8PDF","ts":"1613042289.185100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FRb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The difference is a quirk of broadcasting. Not every generator has a known (or even fixed) size, while broadcasting really needs to know that before starting. So it (I think always) calls "},{"type":"text","text":"collect","style":{"code":true}},{"type":"text","text":", to make a matrix, before proceeding. Thus the "},{"type":"text","text":".= (...","style":{"code":true}},{"type":"text","text":" version ends up exactly like the "},{"type":"text","text":".= [...","style":{"code":true}},{"type":"text","text":" version."}]}]}]},{"client_msg_id":"780b2470-3053-4707-9c6f-d11a50bf8c82","type":"message","text":"if you pass `Diff` into `d4`, you'll save that last allocation as well","user":"UH24GRBLL","ts":"1613042381.186200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yHn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you pass "},{"type":"text","text":"Diff","style":{"code":true}},{"type":"text","text":" into "},{"type":"text","text":"d4","style":{"code":true}},{"type":"text","text":", you'll save that last allocation as well"}]}]}]},{"client_msg_id":"4426c382-ef78-45a0-a409-8a7d0b3ccd71","type":"message","text":"and with the `copy_to`  it inffers the generator output type from the copy destination? Why do I need the `@view` ?","user":"U7PD3M3L5","ts":"1613042401.186600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2Io","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and with the "},{"type":"text","text":"copy_to","style":{"code":true}},{"type":"text","text":"  it inffers the generator output type from the copy destination? Why do I need the "},{"type":"text","text":"@view","style":{"code":true}},{"type":"text","text":" ?"}]}]}]},{"client_msg_id":"673ae319-03f1-4ddc-b5e0-ce004c306100","type":"message","text":"in julia, slices create copies","user":"UH24GRBLL","ts":"1613042414.186900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"y3C8R","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in julia, slices create copies"}]}]}]},{"client_msg_id":"678fe260-1c55-4f02-9547-da81054ac1a3","type":"message","text":"`@view` instead creates a view into the underlying memory","user":"UH24GRBLL","ts":"1613042426.187600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QLT7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"@view","style":{"code":true}},{"type":"text","text":" instead creates a view into the underlying memory"}]}]}]},{"client_msg_id":"bb1ded95-2c84-4b11-aff9-b9ed73667690","type":"message","text":"uff really :smile:","user":"U7PD3M3L5","ts":"1613042426.187700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"m7YfI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"uff really "},{"type":"emoji","name":"smile"}]}]}]},{"client_msg_id":"7a06df2b-a2e2-45cd-bbbd-5382de3a79e9","type":"message","text":"man thats a lot to keep in my head","user":"U7PD3M3L5","ts":"1613042431.188000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FGQAb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"man thats a lot to keep in my head"}]}]}]},{"client_msg_id":"8b9b2f5f-8378-4ac2-b047-afe78901f503","type":"message","text":"it's not that much :) slices copy, loops are fast (REALLY fast)","user":"UH24GRBLL","ts":"1613042471.189100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5ZR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's not that much :) slices copy, loops are fast (REALLY fast)"}]}]}]},{"client_msg_id":"1082d601-db97-4a7b-b085-846c7ad7ecd7","type":"message","text":"Slice notation left of `=` or `.=` is special, it’s really `setindex!` or `broadcast!` (I think). But `copyto!` is an ordinary function, so its arguments get evaluated first.","user":"UD0NS8PDF","ts":"1613042496.189900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JyW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Slice notation left of "},{"type":"text","text":"=","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":".=","style":{"code":true}},{"type":"text","text":" is special, it’s really "},{"type":"text","text":"setindex!","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"broadcast!","style":{"code":true}},{"type":"text","text":" (I think). But "},{"type":"text","text":"copyto!","style":{"code":true}},{"type":"text","text":" is an ordinary function, so its arguments get evaluated first."}]}]}]},{"client_msg_id":"20d3d59f-3867-41d8-b180-d7db10b13b47","type":"message","text":"and we need the `copyto`  s.t. it can predict the output size of the generator?","user":"U7PD3M3L5","ts":"1613042537.190700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qU5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and we need the "},{"type":"text","text":"copyto","style":{"code":true}},{"type":"text","text":"  s.t. it can predict the output size of the generator?"}]}]}]},{"client_msg_id":"7b48e3b1-540c-4a94-9193-cce404568f25","type":"message","text":"yes, something like `A[:] .= B[:]` broadcasts the setindex, which (internally) calls `copyto!` since it writes to a slice","user":"UH24GRBLL","ts":"1613042559.191500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mKGLD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, something like "},{"type":"text","text":"A[:] .= B[:]","style":{"code":true}},{"type":"text","text":" broadcasts the setindex, which (internally) calls "},{"type":"text","text":"copyto!","style":{"code":true}},{"type":"text","text":" since it writes to a slice"}]}]}]},{"client_msg_id":"fcbaf6b3-fc25-4151-b72c-8d4ae11015df","type":"message","text":"I want to stress that you don't have to write the `copyto!(...)` manually - it was just an attempt at making the generator variant fast (looks ugly in my opionion :man-shrugging:)","user":"UH24GRBLL","ts":"1613042602.192900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UFv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I want to stress that you don't have to write the "},{"type":"text","text":"copyto!(...)","style":{"code":true}},{"type":"text","text":" manually - it was just an attempt at making the generator variant fast (looks ugly in my opionion "},{"type":"emoji","name":"man-shrugging"},{"type":"text","text":")"}]}]}],"reactions":[{"name":"+1","users":["UD0NS8PDF"],"count":1}]},{"client_msg_id":"9d2a6682-da74-4b7a-8b7f-54f02a33f4ab","type":"message","text":"I haven't benchmarked it, but I'd wager\n\n```for i=1:n, j=1:n, dim=1:d\n        diff[i,j,dim] = X[dim,i] - X[dim,j]\nend```\nis plenty fast enough - and if it isn't we can work with that to make it faster","user":"UH24GRBLL","ts":"1613042651.194000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FfBh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I haven't benchmarked it, but I'd wager\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"for i=1:n, j=1:n, dim=1:d\n        diff[i,j,dim] = X[dim,i] - X[dim,j]\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nis plenty fast enough - and if it isn't we can work with that to make it faster"}]}]}]},{"client_msg_id":"ee5e2b6e-d481-4991-9b2e-5b0a882f9057","type":"message","text":"I think `copyto!` doesn’t need to know the length, it just starts iterating and writing. But it’s a much simpler thing than broadcasting. It doesn’t try to look for size-1 dimensions of some arrays to expand…","user":"UD0NS8PDF","ts":"1613042653.194100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4fZf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think "},{"type":"text","text":"copyto!","style":{"code":true}},{"type":"text","text":" doesn’t need to know the length, it just starts iterating and writing. But it’s a much simpler thing than broadcasting. It doesn’t try to look for size-1 dimensions of some arrays to expand…"}]}]}]},{"client_msg_id":"6a20e29b-8c66-4172-978a-193b6493fd5a","type":"message","text":"These simple loops are precisely what the `@einsum` variant above times.","user":"UD0NS8PDF","ts":"1613042676.194500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+nb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"These simple loops are precisely what the "},{"type":"text","text":"@einsum","style":{"code":true}},{"type":"text","text":" variant above times."}]}]}]},{"client_msg_id":"b8f21d48-e689-4885-97e2-835945a89bc3","type":"message","text":"right - I just prefer being explicit instead of pulling in a macro :)","user":"UH24GRBLL","ts":"1613042714.194800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"51i6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"right - I just prefer being explicit instead of pulling in a macro :)"}]}]}]},{"client_msg_id":"b84aea64-d9ce-4618-b9a2-c5d5c3911879","type":"message","text":"lets me pretend that I have a clue what's going on","user":"UH24GRBLL","ts":"1613042731.195400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MKD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"lets me pretend that I have a clue what's going on"}]}]}]},{"client_msg_id":"cc72ebb5-6f85-43d9-8e62-4067ad53dc74","type":"message","text":"Sure :slightly_smiling_face:. With `@inbounds`.","user":"UD0NS8PDF","ts":"1613042736.195500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WYO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sure "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":". With "},{"type":"text","text":"@inbounds","style":{"code":true}},{"type":"text","text":"."}]}]}]},{"client_msg_id":"8b49ccfc-8fac-4119-a0b7-861af9c402dd","type":"message","text":"and `@simd`","user":"UH24GRBLL","ts":"1613042744.195900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+ig","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and "},{"type":"text","text":"@simd","style":{"code":true}}]}]}]},{"client_msg_id":"747682dc-f0ef-4e4d-a13d-7a1d49752c39","type":"message","text":"And I never remember what loop is innermost in `for i=1:n, j=1:n, dim=1:d` on one line :confused:","user":"UD0NS8PDF","ts":"1613042758.196300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IQs=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And I never remember what loop is innermost in "},{"type":"text","text":"for i=1:n, j=1:n, dim=1:d","style":{"code":true}},{"type":"text","text":" on one line "},{"type":"emoji","name":"confused"}]}]}]},{"client_msg_id":"41d2dfd9-17a6-4521-b472-027ebfc9411c","type":"message","text":"that's why I mentioned the order may need tweaking :D","user":"UH24GRBLL","ts":"1613042770.196600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eSpy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's why I mentioned the order may need tweaking :D"}]}]}],"thread_ts":"1613042770.196600","reply_count":1,"reply_users_count":1,"latest_reply":"1613042963.199200","reply_users":["UD0NS8PDF"],"subscribed":false},{"client_msg_id":"0002206d-26ed-4c88-844a-cb1dfca1b754","type":"message","text":"I think you'd want to iterate `dim` first, since that accesses `X`","user":"UH24GRBLL","ts":"1613042796.197100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"303WA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think you'd want to iterate "},{"type":"text","text":"dim","style":{"code":true}},{"type":"text","text":" first, since that accesses "},{"type":"text","text":"X","style":{"code":true}}]}]}]},{"client_msg_id":"661f8509-f4a8-403e-9e47-e2a82d43ccab","type":"message","text":"but about the loops being fast. Calculating this:\n```    dist = SqEuclidean()\n    res .= exp.(-pairwise(dist, X, X, dims=2) ./ (2*σ_squ))```\nto get an `nxn`  kernel matrix was about 15x faster than doing it in a for-loop I think","user":"U7PD3M3L5","ts":"1613042848.198200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"N1S","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but about the loops being fast. Calculating this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"    dist = SqEuclidean()\n    res .= exp.(-pairwise(dist, X, X, dims=2) ./ (2*σ_squ))"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"to get an "},{"type":"text","text":"nxn","style":{"code":true}},{"type":"text","text":"  kernel matrix was about 15x faster than doing it in a for-loop I think"}]}]}]},{"client_msg_id":"03d3b996-1397-4156-836a-825b3db05762","type":"message","text":"allthough I did maybe misuse a generator in an allocating way, I did not know about `[]`  allocating","user":"U7PD3M3L5","ts":"1613042871.198700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TSPR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"allthough I did maybe misuse a generator in an allocating way, I did not know about "},{"type":"text","text":"[]","style":{"code":true}},{"type":"text","text":"  allocating"}]}]}]},{"client_msg_id":"d9c75ca4-8453-4da0-8072-3643a65a67a1","type":"message","text":"this is the reason why I didn't want to use a loop here in the first place","user":"U7PD3M3L5","ts":"1613042888.199100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"G7GO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this is the reason why I didn't want to use a loop here in the first place"}]}]}]},{"client_msg_id":"0c8d4666-9c2c-4c16-994b-18e6002461fa","type":"message","text":"Yes. Very simple loops are fast here, because the operation is something close to a copy, you iterate through the data once. But `pairwise(SqEuclidean(),` is a more complicated operation, it sums over some indices, it’s a bit like matrix multiplication.","user":"UD0NS8PDF","ts":"1613043107.201600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R12","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes. Very simple loops are fast here, because the operation is something close to a copy, you iterate through the data once. But "},{"type":"text","text":"pairwise(SqEuclidean(),","style":{"code":true}},{"type":"text","text":" is a more complicated operation, it sums over some indices, it’s a bit like matrix multiplication."}]}]}]},{"client_msg_id":"5e30fece-58e5-4e51-9073-b718dd607018","type":"message","text":"<https://juliahub.com/ui/Packages/Distances/yuMjt/0.10.2#Pairwise-benchmark>\n\nis also of note","user":"UH24GRBLL","ts":"1613043154.202600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LzYn","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://juliahub.com/ui/Packages/Distances/yuMjt/0.10.2#Pairwise-benchmark"},{"type":"text","text":"\n\nis also of note"}]}]}]},{"client_msg_id":"f5dd6405-3682-41a5-86e6-ef7f582f844b","type":"message","text":"&gt; Generically, pairwise distances are computed using a straightforward loop implementation. For distances of which a major part of the computation is a quadratic form, however, the performance can be drastically improved by restructuring the computation and delegating the core part to GEMM in BLAS","user":"UH24GRBLL","ts":"1613043168.203000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Xmne","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"Generically, pairwise distances are computed using a straightforward loop implementation. For distances of which a major part of the computation is a quadratic form, however, the performance can be drastically improved by restructuring the computation and delegating the core part to GEMM in BLAS"}]}]}]},{"client_msg_id":"af55c7a2-5de0-4322-82e1-93cd7081a46b","type":"message","text":"And that’s something for which simple loops (even in a fast language) can be beaten by smarter code. I’m not sure what Distances does but one way of calculating this does just re-write it as matrix multiplication.","user":"UD0NS8PDF","ts":"1613043170.203200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+q/9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And that’s something for which simple loops (even in a fast language) can be beaten by smarter code. I’m not sure what Distances does but one way of calculating this does just re-write it as matrix multiplication."}]}]}]},{"client_msg_id":"362c5863-1270-425e-9a0b-6f855a6e7e6c","type":"message","text":"The beauty of it is that the loop version (if written non allocating and SIMD friendly) is still blazingly fast and the matmul is just an optimization on top of that. In some other languages, the loop version isn't even a contender, with it being more than 100x slower","user":"UH24GRBLL","ts":"1613043281.204600","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1613043284.000000"},"blocks":[{"type":"rich_text","block_id":"ZydaJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The beauty of it is that the loop version (if written non allocating and SIMD friendly) is still blazingly fast and the matmul is just an optimization on top of that. In some other languages, the loop version isn't even a contender, with it being more than 100x slower"}]}]}]},{"client_msg_id":"fc1762fa-f092-4bca-8c5c-4cc2b92ac2de","type":"message","text":"Ok I lied a bit and this is the full version of the function I am trying to calculate (it is the matrix I told you above with the differences * k a kernel matrix). These are the versions and the benchmarks:","user":"U7PD3M3L5","ts":"1613043423.205600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zUK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok I lied a bit and this is the full version of the function I am trying to calculate (it is the matrix I told you above with the differences * k a kernel matrix). These are the versions and the benchmarks:"}]}]}]},{"client_msg_id":"6bddb76e-f474-45d9-8efc-9745ac47b140","type":"message","text":"```function calc_dx_K(K, X, σ_squ, res)\n    (d, n) = size(X)\n    \n    for dim=1:d\n        res[:, :, dim] .= (-1/σ_squ * (X[dim, i] - X[dim, j]) * K[i, j] for i=1:n, j=1:n)\n    end\n    \n    res\nend```\n`2.006 ms (200 allocations: 4.89 MiB)`\n```function calc_dx_K_cast(K, X, σ_squ, res)\n    (d, n) = size(X)\n    @cast res[i, j, dim] = -1/σ_squ * (X[dim, i] - X[dim, j]) * K[i, j]\n    res\nend```\n`  704.595 μs (8 allocations: 125.38 KiB)`\n```\nfunction calc_dx_K_loop(K, X, σ_squ, res)\n    (d, n) = size(X)\n    for i=1:n, j=1:n, dim=1:d\n        res[i, j, dim] = -1/σ_squ * (X[dim, i] - X[dim, j]) * K[i, j]\n    end\n    res\nend```\n`  1.827 ms (0 allocations: 0 bytes)`","user":"U7PD3M3L5","ts":"1613043487.206600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JFJNQ","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function calc_dx_K(K, X, σ_squ, res)\n    (d, n) = size(X)\n    \n    for dim=1:d\n        res[:, :, dim] .= (-1/σ_squ * (X[dim, i] - X[dim, j]) * K[i, j] for i=1:n, j=1:n)\n    end\n    \n    res\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"`2.006 ms (200 allocations: 4.89 MiB)`\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function calc_dx_K_cast(K, X, σ_squ, res)\n    (d, n) = size(X)\n    @cast res[i, j, dim] = -1/σ_squ * (X[dim, i] - X[dim, j]) * K[i, j]\n    res\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"`  704.595 μs (8 allocations: 125.38 KiB)`\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"\nfunction calc_dx_K_loop(K, X, σ_squ, res)\n    (d, n) = size(X)\n    for i=1:n, j=1:n, dim=1:d\n        res[i, j, dim] = -1/σ_squ * (X[dim, i] - X[dim, j]) * K[i, j]\n    end\n    res\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"`  1.827 ms (0 allocations: 0 bytes)`"}]}]}]},{"client_msg_id":"010c255a-9ee0-4449-aa47-d21bcb88191a","type":"message","text":"I benchmarked them with\n```X = rand(d, n)\nK = rand(n, n)\nres = similar(X, n, n, d)\n\n@btime calc_dx_K($K, $X, 2, $res) ```","user":"U7PD3M3L5","ts":"1613043507.206800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xkku","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I benchmarked them with\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"X = rand(d, n)\nK = rand(n, n)\nres = similar(X, n, n, d)\n\n@btime calc_dx_K($K, $X, 2, $res) "}]}]}]},{"client_msg_id":"c316f969-f2ba-42d4-8208-6cf7d19da8be","type":"message","text":"put an `@inbounds` on that loop version, right in front of the `for`","user":"UH24GRBLL","ts":"1613043530.207400","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1613043535.000000"},"blocks":[{"type":"rich_text","block_id":"Oq1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"put an "},{"type":"text","text":"@inbounds","style":{"code":true}},{"type":"text","text":" on that loop version, right in front of the "},{"type":"text","text":"for","style":{"code":true}}]}]}]},{"client_msg_id":"e57abb6e-7bac-43c5-a0c4-c1e7317100f5","type":"message","text":"this is probably since the loop is doing the wrong order?","user":"U7PD3M3L5","ts":"1613043530.207500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uEuI4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this is probably since the loop is doing the wrong order?"}]}]}]},{"client_msg_id":"f6c05d3e-b7c8-4c30-b377-fff9899f838c","type":"message","text":"I'm not sure if it helps with SIMD, but you can also hoist the `-1/sigma_squ` out of the loop into its own variable - though the compiler should be able to do that on its own","user":"UH24GRBLL","ts":"1613043594.208300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/rHQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not sure if it helps with SIMD, but you can also hoist the "},{"type":"text","text":"-1/sigma_squ","style":{"code":true}},{"type":"text","text":" out of the loop into its own variable - though the compiler should be able to do that on its own"}]}]}]},{"client_msg_id":"8105375b-128c-4c7d-b234-64b21bd8d2b9","type":"message","text":"loop version with `@inbounds` : 1.740 ms (0 allocations: 0 bytes)","user":"U7PD3M3L5","ts":"1613043623.208600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lrg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"loop version with "},{"type":"text","text":"@inbounds","style":{"code":true}},{"type":"text","text":" : 1.740 ms (0 allocations: 0 bytes)"}]}]}]},{"client_msg_id":"86d42268-7daa-47e4-886c-5d726972a5c1","type":"message","text":"```julia&gt; function calc_dx_K_loop(K, X, σ_squ, res)\n           (d, n) = size(X)\n           factor = -1/σ_squ\n           @inbounds for i=1:n, j=1:n, dim=1:d\n               res[i, j, dim] = factor * (X[dim, i] - X[dim, j]) * K[i, j]\n           end\n           res\n       end\ncalc_dx_K_loop (generic function with 1 method)\n\njulia&gt; @benchmark calc_dx_K_loop($K, $X, 2, $res)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     744.531 ns (0.00% GC)\n  median time:      745.312 ns (0.00% GC)\n  mean time:        811.813 ns (0.00% GC)\n  maximum time:     12.431 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     128```","user":"UH24GRBLL","ts":"1613043856.209000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"csv","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function calc_dx_K_loop(K, X, σ_squ, res)\n           (d, n) = size(X)\n           factor = -1/σ_squ\n           @inbounds for i=1:n, j=1:n, dim=1:d\n               res[i, j, dim] = factor * (X[dim, i] - X[dim, j]) * K[i, j]\n           end\n           res\n       end\ncalc_dx_K_loop (generic function with 1 method)\n\njulia> @benchmark calc_dx_K_loop($K, $X, 2, $res)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     744.531 ns (0.00% GC)\n  median time:      745.312 ns (0.00% GC)\n  mean time:        811.813 ns (0.00% GC)\n  maximum time:     12.431 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     128"}]}]}]},{"client_msg_id":"c697c5ad-4918-4a8e-9a3f-c5396c32b463","type":"message","text":"yeah but you probably have a different computer to mine","user":"U7PD3M3L5","ts":"1613043895.209300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xjq/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah but you probably have a different computer to mine"}]}]}]},{"client_msg_id":"d0cb5099-631f-43c6-8741-9a27356aef67","type":"message","text":"so only the relative difference is of interest or not","user":"U7PD3M3L5","ts":"1613043925.210000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"55hc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so only the relative difference is of interest or not"}]}]}]},{"client_msg_id":"0b2d4cab-36df-45ee-bbdd-8242c7a45cb6","type":"message","text":"this version\n```function calc_dx_K_generator(K, X, σ_squ, res)\n    (d, n) = size(X)\n    for dim=1:d\n        copyto!(@view(res[:, :, dim]), ( -1/σ_squ * (X[dim, i] - X[dim, j]) * K[i, j] for i=1:n, j=1:n))\n    end\n    res\nend```\ntakes   1.705 ms (0 allocations: 0 bytes), so pretty much the same like the loop version","user":"U7PD3M3L5","ts":"1613043949.210500","team":"T68168MUP","edited":{"user":"U7PD3M3L5","ts":"1613044018.000000"},"blocks":[{"type":"rich_text","block_id":"qLziU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this version\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function calc_dx_K_generator(K, X, σ_squ, res)\n    (d, n) = size(X)\n    for dim=1:d\n        copyto!(@view(res[:, :, dim]), ( -1/σ_squ * (X[dim, i] - X[dim, j]) * K[i, j] for i=1:n, j=1:n))\n    end\n    res\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"takes   1.705 ms (0 allocations: 0 bytes), so pretty much the same like the loop version"}]}]}]},{"client_msg_id":"78c875b9-aef2-4ee1-b9c8-e4fbffc78824","type":"message","text":"if I force the target to be cold cache lines, I get it this\n```julia&gt; @benchmark calc_dx_K_loop(a, b, 2, c) setup=(a=deepcopy(K);b=deepcopy(X);c=similar(X, n, n, d)) evals=1\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     2.200 μs (0.00% GC)\n  median time:      2.600 μs (0.00% GC)\n  mean time:        3.190 μs (0.00% GC)\n  maximum time:     72.900 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1```","user":"UH24GRBLL","ts":"1613044022.211700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"o9/d","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if I force the target to be cold cache lines, I get it this\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @benchmark calc_dx_K_loop(a, b, 2, c) setup=(a=deepcopy(K);b=deepcopy(X);c=similar(X, n, n, d)) evals=1\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     2.200 μs (0.00% GC)\n  median time:      2.600 μs (0.00% GC)\n  mean time:        3.190 μs (0.00% GC)\n  maximum time:     72.900 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1"}]}]}]},{"client_msg_id":"379a432a-a708-48f3-bc68-af1f0ddc91cf","type":"message","text":"and what do you get for the cast version?","user":"U7PD3M3L5","ts":"1613044064.212200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"abq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and what do you get for the cast version?"}]}]}]},{"client_msg_id":"ce75b149-d05e-4497-b0d9-c54f4c11d204","type":"message","text":"that one is the fastest on my pc","user":"U7PD3M3L5","ts":"1613044073.212500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bm9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that one is the fastest on my pc"}]}]}]},{"client_msg_id":"0a6e5f1e-52a4-4ba9-990f-5668fa3c76f1","type":"message","text":"I don't have that macro, is it from Distances?","user":"UH24GRBLL","ts":"1613044081.212900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LSLi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't have that macro, is it from Distances?"}]}]}],"thread_ts":"1613044081.212900","reply_count":1,"reply_users_count":1,"latest_reply":"1613044119.213500","reply_users":["UD0NS8PDF"],"subscribed":false},{"client_msg_id":"45d67473-bee6-42b7-9c94-a40ccf57fbba","type":"message","text":"Oh that’s interesting. My times were:\n```julia&gt; @btime calc_dx_K_loop($K, $X, 2, $res); # without @inbounds\n  1.068 μs (0 allocations: 0 bytes)\n\njulia&gt; @btime calc_dx_K_cast($K, $X, 2, $res);\n  2.291 μs (6 allocations: 2.88 KiB)\n\njulia&gt; function calc_dx_K_loop(K, X, σ_squ, res)\n           (d, n) = size(X)\n           @inbounds for i=1:n, j=1:n, dim=1:d\n               res[i, j, dim] = -1/σ_squ * (X[dim, i] - X[dim, j]) * K[i, j]\n           end\n           res\n       end\ncalc_dx_K_loop (generic function with 1 method)\n\njulia&gt; @btime calc_dx_K_loop($K, $X, 2, $res);\n  692.162 ns (0 allocations: 0 bytes)\n\njulia&gt; using LoopVectorization\n\njulia&gt; function calc_dx_K_loop(K, X, σ_squ, res)\n           (d, n) = size(X)\n           pre = -1/σ_squ\n           @avx for i=1:n, j=1:n, dim=1:d\n               res[i, j, dim] = pre * (X[dim, i] - X[dim, j]) * K[i, j]\n           end\n           res\n       end\ncalc_dx_K_loop (generic function with 1 method)\n\njulia&gt; @btime calc_dx_K_loop($K, $X, 2, $res);\n  502.534 ns (0 allocations: 0 bytes)```","user":"UD0NS8PDF","ts":"1613044087.213100","team":"T68168MUP","edited":{"user":"UD0NS8PDF","ts":"1613044311.000000"},"blocks":[{"type":"rich_text","block_id":"fm9A","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh that’s interesting. My times were:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @btime calc_dx_K_loop($K, $X, 2, $res); # without @inbounds\n  1.068 μs (0 allocations: 0 bytes)\n\njulia> @btime calc_dx_K_cast($K, $X, 2, $res);\n  2.291 μs (6 allocations: 2.88 KiB)\n\njulia> function calc_dx_K_loop(K, X, σ_squ, res)\n           (d, n) = size(X)\n           @inbounds for i=1:n, j=1:n, dim=1:d\n               res[i, j, dim] = -1/σ_squ * (X[dim, i] - X[dim, j]) * K[i, j]\n           end\n           res\n       end\ncalc_dx_K_loop (generic function with 1 method)\n\njulia> @btime calc_dx_K_loop($K, $X, 2, $res);\n  692.162 ns (0 allocations: 0 bytes)\n\njulia> using LoopVectorization\n\njulia> function calc_dx_K_loop(K, X, σ_squ, res)\n           (d, n) = size(X)\n           pre = -1/σ_squ\n           @avx for i=1:n, j=1:n, dim=1:d\n               res[i, j, dim] = pre * (X[dim, i] - X[dim, j]) * K[i, j]\n           end\n           res\n       end\ncalc_dx_K_loop (generic function with 1 method)\n\njulia> @btime calc_dx_K_loop($K, $X, 2, $res);\n  502.534 ns (0 allocations: 0 bytes)"}]}]}]},{"client_msg_id":"05fdb668-9f6d-4e51-9c43-5885d1188a4e","type":"message","text":"My machine is\n\n```julia&gt; versioninfo()\nJulia Version 1.6.0-rc1\nCommit a58bdd9010* (2021-02-06 15:49 UTC)\nPlatform Info:\n  OS: Linux (x86_64-linux-gnu)\n  CPU: Intel(R) Core(TM) i7-6600U CPU @ 2.60GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-11.0.1 (ORCJIT, skylake)\nEnvironment:\n  JULIA_PKG_SERVER =\n  JULIA_NUM_THREADS = 4```","user":"UH24GRBLL","ts":"1613044099.213300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4Kn3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My machine is\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> versioninfo()\nJulia Version 1.6.0-rc1\nCommit a58bdd9010* (2021-02-06 15:49 UTC)\nPlatform Info:\n  OS: Linux (x86_64-linux-gnu)\n  CPU: Intel(R) Core(TM) i7-6600U CPU @ 2.60GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-11.0.1 (ORCJIT, skylake)\nEnvironment:\n  JULIA_PKG_SERVER =\n  JULIA_NUM_THREADS = 4"}]}]}]},{"client_msg_id":"f9a3b997-114b-4ab4-a24b-f48a87f10047","type":"message","text":"also 4 threads on BLAS","user":"UH24GRBLL","ts":"1613044127.213800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"B9VF2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"also 4 threads on BLAS"}]}]}]},{"client_msg_id":"ddaff09d-6f45-4a61-8e66-9b311d88d8e1","type":"message","text":"yeah, I'm not surprised that `@avx` kills it here","user":"UH24GRBLL","ts":"1613044184.214200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yRw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, I'm not surprised that "},{"type":"text","text":"@avx","style":{"code":true}},{"type":"text","text":" kills it here"}]}]}]},{"client_msg_id":"1c23ee25-0b48-4d3c-8180-6b547c8b2671","type":"message","text":"@cast is from tensorcast","user":"U7PD3M3L5","ts":"1613044228.214600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2sMXM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"@cast is from tensorcast"}]}]}]},{"client_msg_id":"4e783a04-7721-4954-9b3d-a12a29d6555e","type":"message","text":"what is your result with `@cast`  <@UD0NS8PDF>?","user":"U7PD3M3L5","ts":"1613044241.214900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lQAYG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what is your result with "},{"type":"text","text":"@cast","style":{"code":true}},{"type":"text","text":"  "},{"type":"user","user_id":"UD0NS8PDF"},{"type":"text","text":"?"}]}]}]},{"client_msg_id":"92bdb68f-7eed-4546-9489-ff83614b3a4b","type":"message","text":"it is much faster on my machine allthough it allocates","user":"U7PD3M3L5","ts":"1613044256.215200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"m0+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it is much faster on my machine allthough it allocates"}]}]}]},{"client_msg_id":"b51b028e-d632-44e9-b983-c0520bf9035d","type":"message","text":"oh we should also compare to Tullio","user":"UH24GRBLL","ts":"1613044293.215400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ooIO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh we should also compare to Tullio"}]}]}]},{"client_msg_id":"a368347a-01d5-40c8-9613-f9738e50bbce","type":"message","text":"For me `@tullio` matches the `@avx` version above, i.e. it’s getting no benefit from threading.","user":"UD0NS8PDF","ts":"1613044346.216200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"P53","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For me "},{"type":"text","text":"@tullio","style":{"code":true}},{"type":"text","text":" matches the "},{"type":"text","text":"@avx","style":{"code":true}},{"type":"text","text":" version above, i.e. it’s getting no benefit from threading."}]}]}]},{"client_msg_id":"ce2400ad-7cbe-4885-b308-11fdf1a8864f","type":"message","text":"<@UD0NS8PDF> has faster RAM than I do, I'm limited to the 2µs :(","user":"UH24GRBLL","ts":"1613044364.216800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jZxsD","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UD0NS8PDF"},{"type":"text","text":" has faster RAM than I do, I'm limited to the 2µs :("}]}]}]},{"client_msg_id":"6d1f9861-81f8-41c3-b5e8-2bd1da6940db","type":"message","text":"```julia&gt; function calc_dx_K_loop(K, X, σ_squ, res)\n           (d, n) = size(X)\n           factor = -1/σ_squ\n           @avx for i=1:n, j=1:n, dim=1:d\n               res[i, j, dim] = factor * (X[dim, i] - X[dim, j]) * K[i, j]\n           end\n           res\n       end\ncalc_dx_K_loop (generic function with 1 method)\n\njulia&gt; @benchmark calc_dx_K_loop(a, b, 2, c) setup=(a=deepcopy(K);b=deepcopy(X);c=similar(X, n, n, d)) evals=1\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     2.000 μs (0.00% GC)\n  median time:      2.200 μs (0.00% GC)\n  mean time:        2.932 μs (0.00% GC)\n  maximum time:     29.100 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1```","user":"UH24GRBLL","ts":"1613044367.217000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=ofQC","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function calc_dx_K_loop(K, X, σ_squ, res)\n           (d, n) = size(X)\n           factor = -1/σ_squ\n           @avx for i=1:n, j=1:n, dim=1:d\n               res[i, j, dim] = factor * (X[dim, i] - X[dim, j]) * K[i, j]\n           end\n           res\n       end\ncalc_dx_K_loop (generic function with 1 method)\n\njulia> @benchmark calc_dx_K_loop(a, b, 2, c) setup=(a=deepcopy(K);b=deepcopy(X);c=similar(X, n, n, d)) evals=1\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     2.000 μs (0.00% GC)\n  median time:      2.200 μs (0.00% GC)\n  mean time:        2.932 μs (0.00% GC)\n  maximum time:     29.100 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1"}]}]}]},{"client_msg_id":"44199e20-db10-4d9d-915f-bc008d19f2a7","type":"message","text":"I can't really help further with checks from my machine, since I hit memory loading bounds","user":"UH24GRBLL","ts":"1613044390.217800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vO3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I can't really help further with checks from my machine, since I hit memory loading bounds"}]}]}]},{"client_msg_id":"ab53da0b-3d0e-4814-b84b-59cb2346488d","type":"message","text":"you mean the 2microseconds are the time it takes to get the stuff from RAM into the processor cache?","user":"U7PD3M3L5","ts":"1613044449.219400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FkZX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you mean the 2microseconds are the time it takes to get the stuff from RAM into the processor cache?"}]}]}]},{"client_msg_id":"43f63ceb-73f8-4666-b6d5-25d5b694627d","type":"message","text":"And `@cast` is 2.291 μs, I added it above now. I’m a little confused but think I’m on the same branch as the tagged version. The allocations are because it’s trying to avoid reshaping `X` after transposing it… a new version should avoid this.","user":"UD0NS8PDF","ts":"1613044455.219500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lyz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And "},{"type":"text","text":"@cast","style":{"code":true}},{"type":"text","text":" is 2.291 μs, I added it above now. I’m a little confused but think I’m on the same branch as the tagged version. The allocations are because it’s trying to avoid reshaping "},{"type":"text","text":"X","style":{"code":true}},{"type":"text","text":" after transposing it… a new version should avoid this."}]}]}]},{"client_msg_id":"2327f218-a76f-4806-824a-fc511b41a98e","type":"message","text":"if I just `@btime`, I also get 500ns, but that's because you're choosing the minimum time of a number of benchmarkruns over the same exact data to the same exact memory locations - basically measuring caching effects","user":"UH24GRBLL","ts":"1613044490.220300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1Dp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if I just "},{"type":"text","text":"@btime","style":{"code":true}},{"type":"text","text":", I also get 500ns, but that's because you're choosing the minimum time of a number of benchmarkruns over the same exact data to the same exact memory locations - basically measuring caching effects"}]}]}]},{"client_msg_id":"8bb6c2e7-64bf-4af3-b73a-3911d2d345a0","type":"message","text":"that's why I chose to go the route of providing `@benchmark` with a setup and `evals=1`, to force it to write to each location only once","user":"UH24GRBLL","ts":"1613044522.220900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"diFxc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's why I chose to go the route of providing "},{"type":"text","text":"@benchmark","style":{"code":true}},{"type":"text","text":" with a setup and "},{"type":"text","text":"evals=1","style":{"code":true}},{"type":"text","text":", to force it to write to each location only once"}]}]}]},{"client_msg_id":"8270d764-04bf-4ecc-91b2-b4bd22ffcbda","type":"message","text":"much more typical use :)","user":"UH24GRBLL","ts":"1613044540.221100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SVD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"much more typical use :)"}]}]}]},{"client_msg_id":"3febe7d3-f2a7-45d2-b001-15fb6afb5fc6","type":"message","text":"weird that on your machine looping is faster and on mine its caching?","user":"U7PD3M3L5","ts":"1613044582.221400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WCTk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"weird that on your machine looping is faster and on mine its caching?"}]}]}]},{"client_msg_id":"ad98f024-8b9e-42b9-95ec-88d0aa1a39f1","type":"message","text":"you've only measured with `@btime`, correct?","user":"UH24GRBLL","ts":"1613044618.222000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fkmaM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you've only measured with "},{"type":"text","text":"@btime","style":{"code":true}},{"type":"text","text":", correct?"}]}]}]},{"client_msg_id":"94b5b924-21d4-4715-8c8c-e82e73a5e023","type":"message","text":"it is not very unprobable that the `K`  matrix will be in cache actually","user":"U7PD3M3L5","ts":"1613044626.222500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0hq5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it is not very unprobable that the "},{"type":"text","text":"K","style":{"code":true}},{"type":"text","text":"  matrix will be in cache actually"}]}]}]},{"client_msg_id":"48dc5723-be30-4012-9ada-246eae5f1607","type":"message","text":"its pretty common in the code","user":"U7PD3M3L5","ts":"1613044631.222900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QuP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"its pretty common in the code"}]}]}]},{"client_msg_id":"1d5c5a90-8675-4078-aaa3-ae7a79f07dfc","type":"message","text":"try measuring with that `@benchmark calc_dx_K_loop(a, b, 2, c) setup(a=deepcopy(K);b=deepcopy(X);c=similar(X, n, n, d)) evals=1`","user":"UH24GRBLL","ts":"1613044641.223200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Nbkv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"try measuring with that "},{"type":"text","text":"@benchmark calc_dx_K_loop(a, b, 2, c) setup(a=deepcopy(K);b=deepcopy(X);c=similar(X, n, n, d)) evals=1","style":{"code":true}}]}]}]},{"client_msg_id":"67e59025-51b3-4bb9-b3f9-73454a2eee41","type":"message","text":"Yes, `K` will be - but will `res`?","user":"UH24GRBLL","ts":"1613044651.223700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"y6G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, "},{"type":"text","text":"K","style":{"code":true}},{"type":"text","text":" will be - but will "},{"type":"text","text":"res","style":{"code":true}},{"type":"text","text":"?"}]}]}]},{"client_msg_id":"5030c295-7fb9-4f2e-abff-7ebe24a4c908","type":"message","text":"It is a bit weird. I’m on a 2018-ish macbook pro, the cheapest kind.","user":"UD0NS8PDF","ts":"1613044662.224100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iDV9L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It is a bit weird. I’m on a 2018-ish macbook pro, the cheapest kind."}]}]}]},{"client_msg_id":"dbd92d73-81cd-4238-ae3a-bec0c5f1ab3b","type":"message","text":"I mean res is a buffer I will be reusing all the time","user":"U7PD3M3L5","ts":"1613044669.224500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"32f","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean res is a buffer I will be reusing all the time"}]}]}]},{"client_msg_id":"36e44f2a-c95d-44b8-b2f7-d9063709d815","type":"message","text":"but yeah at that point its maybe not in cache anymore","user":"U7PD3M3L5","ts":"1613044678.225000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"01pgk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but yeah at that point its maybe not in cache anymore"}]}]}]},{"client_msg_id":"b2ec290c-40a5-458e-a61a-da1d0bbdb874","type":"message","text":"or at least not in the very closes caches","user":"U7PD3M3L5","ts":"1613044691.225600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AdJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or at least not in the very closes caches"}]}]}]},{"client_msg_id":"daa93597-a3c3-4f1a-b739-41197605b7d7","type":"message","text":"For me the copy comparison looks like so, I don’t quite know what to make of these (fairly repeatable) numbers:\n```julia&gt; @btime calc_dx_K_loop($K, $X, 2, $res); # version with @avx\n  503.715 ns (0 allocations: 0 bytes)\n\njulia&gt; @btime calc_dx_K_loop(K_, X_, 2, res_)  setup=(K_=copy($K); X_=copy($X); res_=copy($res)) evals=1;\n  527.000 ns (0 allocations: 0 bytes)\n\njulia&gt; @btime calc_dx_K_loop(K_, X_, 2, res_)  setup=(K_=copy(K); X_=copy(X); res_=copy(res)) evals=1;\n  533.000 ns (0 allocations: 0 bytes)\n\njulia&gt; @btime calc_dx_K_loop(K_, X_, 2, res_)  setup=(K_=deepcopy($K); X_=deepcopy($X); res_=deepcopy($res)) evals=1;\n  707.000 ns (0 allocations: 0 bytes)\n\njulia&gt; @btime calc_dx_K_loop(K_, X_, 2, res_)  setup=(K_=deepcopy(K); X_=deepcopy(X); res_=deepcopy(res)) evals=1;\n  544.000 ns (0 allocations: 0 bytes)```","user":"UD0NS8PDF","ts":"1613044699.226000","team":"T68168MUP","edited":{"user":"UD0NS8PDF","ts":"1613044949.000000"},"blocks":[{"type":"rich_text","block_id":"8UF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For me the copy comparison looks like so, I don’t quite know what to make of these (fairly repeatable) numbers:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @btime calc_dx_K_loop($K, $X, 2, $res); # version with @avx\n  503.715 ns (0 allocations: 0 bytes)\n\njulia> @btime calc_dx_K_loop(K_, X_, 2, res_)  setup=(K_=copy($K); X_=copy($X); res_=copy($res)) evals=1;\n  527.000 ns (0 allocations: 0 bytes)\n\njulia> @btime calc_dx_K_loop(K_, X_, 2, res_)  setup=(K_=copy(K); X_=copy(X); res_=copy(res)) evals=1;\n  533.000 ns (0 allocations: 0 bytes)\n\njulia> @btime calc_dx_K_loop(K_, X_, 2, res_)  setup=(K_=deepcopy($K); X_=deepcopy($X); res_=deepcopy($res)) evals=1;\n  707.000 ns (0 allocations: 0 bytes)\n\njulia> @btime calc_dx_K_loop(K_, X_, 2, res_)  setup=(K_=deepcopy(K); X_=deepcopy(X); res_=deepcopy(res)) evals=1;\n  544.000 ns (0 allocations: 0 bytes)"}]}]}],"thread_ts":"1613044699.226000","reply_count":5,"reply_users_count":2,"latest_reply":"1613045716.236100","reply_users":["UH24GRBLL","UD0NS8PDF"],"subscribed":false},{"client_msg_id":"ac910628-a287-4507-8b63-ce61d032f9f1","type":"message","text":"I'm on a dell latitude 7490","user":"U7PD3M3L5","ts":"1613044705.226300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NMnc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm on a dell latitude 7490"}]}]}]},{"client_msg_id":"13651e86-2274-48e3-9ae3-522194d328f6","type":"message","text":"```julia&gt; @benchmark calc_dx_K_loop($K, $X, 2, c) setup=(c=similar(X, n, n, d);) evals=1\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     2.000 μs (0.00% GC)\n  median time:      2.200 μs (0.00% GC)\n  mean time:        3.325 μs (0.00% GC)\n  maximum time:     118.500 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1```\nmaking sure K and X are hot, it'S not enough","user":"UH24GRBLL","ts":"1613044708.226600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pxw37","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @benchmark calc_dx_K_loop($K, $X, 2, c) setup=(c=similar(X, n, n, d);) evals=1\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     2.000 μs (0.00% GC)\n  median time:      2.200 μs (0.00% GC)\n  mean time:        3.325 μs (0.00% GC)\n  maximum time:     118.500 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nmaking sure K and X are hot, it'S not enough"}]}]}]},{"client_msg_id":"6e878604-4fc7-49bf-a01f-4cacd42c8f19","type":"message","text":"it has 8 threads though?","user":"U7PD3M3L5","ts":"1613044710.226700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zWY0S","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it has 8 threads though?"}]}]}]},{"client_msg_id":"9b157530-d997-4faf-9a7f-e7e0740d759a","type":"message","text":"Wait I'll check again to be sure","user":"U7PD3M3L5","ts":"1613044716.226900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g9qk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Wait I'll check again to be sure"}]}]}]},{"client_msg_id":"e81c5187-cef4-4cbe-9c3c-808161ed3670","type":"message","text":"`versioninfo()` can tell you","user":"UH24GRBLL","ts":"1613044729.227300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JaLjo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"versioninfo()","style":{"code":true}},{"type":"text","text":" can tell you"}]}]}]},{"client_msg_id":"0cca2ec6-6b9f-49c5-94e3-ec51c0cd186a","type":"message","text":"I think this is all single-threaded, `@avx` doesn’t spawn.","user":"UD0NS8PDF","ts":"1613044734.227500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PTc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think this is all single-threaded, "},{"type":"text","text":"@avx","style":{"code":true}},{"type":"text","text":" doesn’t spawn."}]}]}]},{"client_msg_id":"3f85bd5d-2270-49b0-b11f-c46c2806f3b0","type":"message","text":"yep","user":"UH24GRBLL","ts":"1613044741.227700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qnJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yep"}]}]}]},{"client_msg_id":"c190ed24-9035-4bb3-8281-0081f2b9d105","type":"message","text":"```  OS: Linux (x86_64-pc-linux-gnu)\n  CPU: Intel(R) Core(TM) i7-8650U CPU @ 1.90GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)```\n","user":"U7PD3M3L5","ts":"1613044746.228000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c9Sb","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"  OS: Linux (x86_64-pc-linux-gnu)\n  CPU: Intel(R) Core(TM) i7-8650U CPU @ 1.90GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)"}]},{"type":"rich_text_section","elements":[]}]}]},{"client_msg_id":"b13cb57a-7c41-4adf-a378-695f39a5133d","type":"message","text":"this is what versioninfo gives me","user":"U7PD3M3L5","ts":"1613044750.228200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kKXm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this is what versioninfo gives me"}]}]}]},{"client_msg_id":"c6ba0f5f-bd41-4503-b87d-a5b2fc2596d1","type":"message","text":"Mine is:\n```Julia Version 1.7.0-DEV.406\nPlatform Info:\n  OS: macOS (x86_64-apple-darwin18.7.0)\n  CPU: Intel(R) Core(TM) i5-7360U CPU @ 2.30GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-11.0.1 (ORCJIT, skylake)```","user":"UD0NS8PDF","ts":"1613044801.228600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9kg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Mine is:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Julia Version 1.7.0-DEV.406\nPlatform Info:\n  OS: macOS (x86_64-apple-darwin18.7.0)\n  CPU: Intel(R) Core(TM) i5-7360U CPU @ 2.30GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-11.0.1 (ORCJIT, skylake)"}]}]}]},{"client_msg_id":"0734eb7c-d244-463a-8ab6-c087d6f3fed1","type":"message","text":"yeah, threads won't help here - the matrices are probably too small","user":"UH24GRBLL","ts":"1613044839.229000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aT/zw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, threads won't help here - the matrices are probably too small"}]}]}]},{"client_msg_id":"0ab2705a-b8f5-44b9-8ed9-75bd1018c1e4","type":"message","text":"```julia&gt; @btime calc_dx_K_loop(K_, X_, 2, res_)  setup=(K_=deepcopy(K); X_=deepcopy(X); res_=deepcopy(res)) evals=1;\n  2.000 μs (0 allocations: 0 bytes)```\nMemory bandwidth :man-shrugging:","user":"UH24GRBLL","ts":"1613045001.229400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DRQMo","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @btime calc_dx_K_loop(K_, X_, 2, res_)  setup=(K_=deepcopy(K); X_=deepcopy(X); res_=deepcopy(res)) evals=1;\n  2.000 μs (0 allocations: 0 bytes)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nMemory bandwidth "},{"type":"emoji","name":"man-shrugging"}]}]}]},{"client_msg_id":"071dfaf4-3363-4f2a-a33e-7e3a2eb6920d","type":"message","text":"So\n```function calc_dx_K_cast(K, X, σ_squ, res)\n    (d, n) = size(X)\n    @cast res[i, j, dim] = -1/σ_squ * (X[dim, i] - X[dim, j]) * K[i, j]\n    res\nend```\n`704.319 μs (8 allocations: 125.38 KiB)`\n\n```function calc_dx_K_loop(K, X, σ_squ, res)\n    (d, n) = size(X)\n    @inbounds for i=1:n, j=1:n, dim=1:d\n        res[i, j, dim] = -1/σ_squ * (X[dim, i] - X[dim, j]) * K[i, j]\n    end\n    res\nend```\n`1.726 ms (0 allocations: 0 bytes)`\n\n```function calc_dx_K_vectorized(K, X, σ_squ, res)\n    (d, n) = size(X)\n    @avx for i=1:n, j=1:n, dim=1:d\n        res[i, j, dim] = -1/σ_squ * (X[dim, i] - X[dim, j]) * K[i, j]\n    end\n    res\nend```\n`206.479 μs (0 allocations: 0 bytes)`","user":"U7PD3M3L5","ts":"1613045269.231100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8YSsq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function calc_dx_K_cast(K, X, σ_squ, res)\n    (d, n) = size(X)\n    @cast res[i, j, dim] = -1/σ_squ * (X[dim, i] - X[dim, j]) * K[i, j]\n    res\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n"},{"type":"text","text":"704.319 μs (8 allocations: 125.38 KiB)","style":{"code":true}},{"type":"text","text":"\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function calc_dx_K_loop(K, X, σ_squ, res)\n    (d, n) = size(X)\n    @inbounds for i=1:n, j=1:n, dim=1:d\n        res[i, j, dim] = -1/σ_squ * (X[dim, i] - X[dim, j]) * K[i, j]\n    end\n    res\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n"},{"type":"text","text":"1.726 ms (0 allocations: 0 bytes)","style":{"code":true}},{"type":"text","text":"\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function calc_dx_K_vectorized(K, X, σ_squ, res)\n    (d, n) = size(X)\n    @avx for i=1:n, j=1:n, dim=1:d\n        res[i, j, dim] = -1/σ_squ * (X[dim, i] - X[dim, j]) * K[i, j]\n    end\n    res\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n"},{"type":"text","text":"206.479 μs (0 allocations: 0 bytes)","style":{"code":true}}]}]}]},{"client_msg_id":"2b8eb780-43ef-4621-8f3c-4fbe8e9f621a","type":"message","text":"Benchmarked with `@btime calc_dx_K($K, $X, 2, $res)`  since `@benchmark calc_dx_K_loop(a, b, 2, c) setup(a=deepcopy(K);b=deepcopy(X);c=similar(X, n, n, d)) evals=1`  gave me `syntax: invalid syntax ; b = deepcopy(X),; c = similar(X, n, n, d)`","user":"U7PD3M3L5","ts":"1613045305.231600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TtFs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Benchmarked with "},{"type":"text","text":"@btime calc_dx_K($K, $X, 2, $res)","style":{"code":true}},{"type":"text","text":"  since "},{"type":"text","text":"@benchmark calc_dx_K_loop(a, b, 2, c) setup(a=deepcopy(K);b=deepcopy(X);c=similar(X, n, n, d)) evals=1","style":{"code":true}},{"type":"text","text":"  gave me "},{"type":"text","text":"syntax: invalid syntax ; b = deepcopy(X),; c = similar(X, n, n, d)","style":{"code":true}}]}]}]},{"client_msg_id":"bf52078a-059b-4381-9748-ad4875f99dd5","type":"message","text":"the vectorization is the clear winner, but casting also gives pretty good results for being so easy","user":"U7PD3M3L5","ts":"1613045362.232200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BRs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the vectorization is the clear winner, but casting also gives pretty good results for being so easy"}]}]}]},{"client_msg_id":"98b86855-7cd6-4b9d-87fd-eef8eb12c56a","type":"message","text":"all of those are doing vectorization one way or another :)","user":"UH24GRBLL","ts":"1613045454.233100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cWAcf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"all of those are doing vectorization one way or another :)"}]}]}]},{"client_msg_id":"15685d0c-9974-4ba7-a5c6-b709a78e7ed2","type":"message","text":"they are all using simd instructions?","user":"U7PD3M3L5","ts":"1613045469.233600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qdAF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"they are all using simd instructions?"}]}]}]},{"client_msg_id":"65cb22f8-3740-421e-8019-b32f51fa72ee","type":"message","text":"I'd just be aware that `@cast` allocates the result, which may slow things down","user":"UH24GRBLL","ts":"1613045472.233700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uY7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'd just be aware that "},{"type":"text","text":"@cast","style":{"code":true}},{"type":"text","text":" allocates the result, which may slow things down"}]}]}]},{"client_msg_id":"0b644638-0a45-4842-82f3-2b445a511012","type":"message","text":"you can check yourself with `@code_llvm` - if there's some `broadcast` in there, it vectorizes at least some part","user":"UH24GRBLL","ts":"1613045492.234200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cO1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can check yourself with "},{"type":"text","text":"@code_llvm","style":{"code":true}},{"type":"text","text":" - if there's some "},{"type":"text","text":"broadcast","style":{"code":true}},{"type":"text","text":" in there, it vectorizes at least some part"}]}]}]},{"client_msg_id":"64aab638-cec5-449b-8a89-443244549773","type":"message","text":"`@cast res[i, j, dim] = ` with = not `:=` isn’t allocating `res`. What it’s doing is transposing `X[dim, j]` and then, when it wants to reshape that to put `dims` last, it makes a copy because `reshape(transpose(...` is dog-slow. It’s an implementation quirk which the new version should remove.","user":"UD0NS8PDF","ts":"1613045643.236000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QOzvR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"`@cast res[i, j, dim] = ` with = not "},{"type":"text","text":":=","style":{"code":true}},{"type":"text","text":" isn’t allocating "},{"type":"text","text":"res","style":{"code":true}},{"type":"text","text":". What it’s doing is transposing "},{"type":"text","text":"X[dim, j]","style":{"code":true}},{"type":"text","text":" and then, when it wants to reshape that to put "},{"type":"text","text":"dims","style":{"code":true}},{"type":"text","text":" last, it makes a copy because "},{"type":"text","text":"reshape(transpose(...","style":{"code":true}},{"type":"text","text":" is dog-slow. It’s an implementation quirk which the new version should remove."}]}]}]}]}