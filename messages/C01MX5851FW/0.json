{"cursor": 0, "messages": [{"type":"message","subtype":"channel_join","ts":"1612997896.000200","user":"ULL3KSGBS","text":"<@ULL3KSGBS> has joined the channel"},{"type":"message","subtype":"channel_purpose","ts":"1612997896.000300","user":"ULL3KSGBS","text":"<@ULL3KSGBS> set the channel purpose: ECP project ExaSGD","purpose":"ECP project ExaSGD"},{"type":"message","subtype":"channel_join","ts":"1612997915.000500","user":"UN2U72Q3F","text":"<@UN2U72Q3F> has joined the channel","inviter":"ULL3KSGBS"},{"type":"message","subtype":"channel_join","ts":"1612997915.000700","user":"U67BJLYCS","text":"<@U67BJLYCS> has joined the channel","inviter":"ULL3KSGBS"},{"type":"message","subtype":"channel_join","ts":"1612997916.000900","user":"U6A0PD8CR","text":"<@U6A0PD8CR> has joined the channel","inviter":"ULL3KSGBS"},{"client_msg_id":"2c29382a-ec89-489c-8023-efae5a7228da","type":"message","text":"Hi <@U67BJLYCS>! We have two construction sites at the moment. 1) Porting to AMDGPU.jl and 2) Moving to second-order Hessians. We use KernelAbstractions in ExaPF together with ForwardDiff and moved to Hessians using AD now. What we observe is that a small test case uses a lot of compile time with KA:\n `julia --project --optimize=0 --check-bounds=no test/Polar/hessian.jl  157.00s user 3.38s system 101% cpu 2:38.77 total`\nvs\n `julia --project --optimize=0 --check-bounds=no test/Polar/hessian.jl  57.49s user 3.22s system 102% cpu 59.058 total`\nwithout KA on the CPU. The difference is all only compile time. The actual kernel is computationally extremely small. A quick `@profile` shows a scary number of Cassette potholes. Francois was spending quite some time on making our code less inference heavy. So we are aware that we may just be doing something wrong. Do you have any idea? Basically what makes it blow up is that we are using a float type of\n`t1s{N,V} = ForwardDiff.Dual{Nothing,V, N} where {N,V}` and go second order with `t2s{M,N,V} =  ForwardDiff.Dual{Nothing,t1s{N,V}, M} where {M,N,V}` . `M` and `N` grow with larger problems. I fear that some expressions may just explode in size.","user":"ULL3KSGBS","ts":"1612998631.007900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L2l","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi "},{"type":"user","user_id":"U67BJLYCS"},{"type":"text","text":"! We have two construction sites at the moment. 1) Porting to AMDGPU.jl and 2) Moving to second-order Hessians. We use KernelAbstractions in ExaPF together with ForwardDiff and moved to Hessians using AD now. What we observe is that a small test case uses a lot of compile time with KA:\n "},{"type":"text","text":"julia --project --optimize=0 --check-bounds=no test/Polar/hessian.jl  157.00s user 3.38s system 101% cpu 2:38.77 total","style":{"code":true}},{"type":"text","text":"\nvs\n "},{"type":"text","text":"julia --project --optimize=0 --check-bounds=no test/Polar/hessian.jl  57.49s user 3.22s system 102% cpu 59.058 total","style":{"code":true}},{"type":"text","text":"\nwithout KA on the CPU. The difference is all only compile time. The actual kernel is computationally extremely small. A quick "},{"type":"text","text":"@profile","style":{"code":true}},{"type":"text","text":" shows a scary number of Cassette potholes. Francois was spending quite some time on making our code less inference heavy. So we are aware that we may just be doing something wrong. Do you have any idea? Basically what makes it blow up is that we are using a float type of\n"},{"type":"text","text":"t1s{N,V} = ForwardDiff.Dual{Nothing,V, N} where {N,V}","style":{"code":true}},{"type":"text","text":" and go second order with "},{"type":"text","text":"t2s{M,N,V} =  ForwardDiff.Dual{Nothing,t1s{N,V}, M} where {M,N,V}","style":{"code":true}},{"type":"text","text":" . "},{"type":"text","text":"M","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"N","style":{"code":true}},{"type":"text","text":" grow with larger problems. I fear that some expressions may just explode in size."}]}]}]},{"client_msg_id":"41f28b9d-73f4-45e3-aaf2-913a7b7c4b12","type":"message","text":"Hi!","user":"U67BJLYCS","ts":"1613000665.008100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wg4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi!"}]}]}]},{"client_msg_id":"add8c510-e387-4672-9dc9-c339cfeb31cf","type":"message","text":"I can't say that I am surprised","user":"U67BJLYCS","ts":"1613000721.008400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nEvJi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I can't say that I am surprised"}]}]}]},{"client_msg_id":"7ea3d9a7-2497-45db-b927-01b49e79c812","type":"message","text":"using Cassette means that we hit an empty inference cache for everything","user":"U67BJLYCS","ts":"1613000747.009000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"esz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"using Cassette means that we hit an empty inference cache for everything"}]}]}]},{"client_msg_id":"49ec9328-75a0-4bc2-9378-6f2ad113f5f3","type":"message","text":"Can you remind me where the code lives?","user":"U67BJLYCS","ts":"1613000777.009400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QHJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can you remind me where the code lives?"}]}]}]},{"client_msg_id":"627653f3-fe43-4e80-b595-ece08115a230","type":"message","text":"This is the full code. Though, we should try to build a MWE. Let me know if you'd be interested in that. It's the main power flow kernel:\n <https://github.com/exanauts/ExaPF.jl/blob/ab577acb9ddbb470b3d9fe606423a168028df6a2/src/polar/kernels.jl#L65-L96>\n\nAnd it's called from here with second-order types:\n<https://github.com/exanauts/ExaPF.jl/blob/ab577acb9ddbb470b3d9fe606423a168028df6a2/src/autodiff.jl#L583-L590>\n\nThere's a bit reordering going on due the application background before calling the kernel. This is implemented through views. Again, once compiled, the code flies. So that's good. If you think there's a way to fix it we'll invest some time in a MWE and try to isolate it there.","user":"ULL3KSGBS","ts":"1613056192.002500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jQn=d","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is the full code. Though, we should try to build a MWE. Let me know if you'd be interested in that. It's the main power flow kernel:\n "},{"type":"link","url":"https://github.com/exanauts/ExaPF.jl/blob/ab577acb9ddbb470b3d9fe606423a168028df6a2/src/polar/kernels.jl#L65-L96"},{"type":"text","text":"\n\nAnd it's called from here with second-order types:\n"},{"type":"link","url":"https://github.com/exanauts/ExaPF.jl/blob/ab577acb9ddbb470b3d9fe606423a168028df6a2/src/autodiff.jl#L583-L590"},{"type":"text","text":"\n\nThere's a bit reordering going on due the application background before calling the kernel. This is implemented through views. Again, once compiled, the code flies. So that's good. If you think there's a way to fix it we'll invest some time in a MWE and try to isolate it there."}]}]}]},{"client_msg_id":"2c08bae1-f5af-4da9-af4b-e225abdf60d4","type":"message","text":"<@U67BJLYCS> Sorry I missed your message here in the Julia slack. I have still to organize my notifications here.","user":"ULL3KSGBS","ts":"1613056947.003200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+cmSS","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U67BJLYCS"},{"type":"text","text":" Sorry I missed your message here in the Julia slack. I have still to organize my notifications here."}]}]}]},{"client_msg_id":"ef1d07dd-c39a-4431-8ff2-998f43835c0d","type":"message","text":"Valentin, forget about it. I've just today wrote a handwritten adjoint and we are doing forward over reverse now. It's fast, and once Enzyme digests GPU code, we can just flip the switch.","user":"ULL3KSGBS","ts":"1613102362.004100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8sbJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Valentin, forget about it. I've just today wrote a handwritten adjoint and we are doing forward over reverse now. It's fast, and once Enzyme digests GPU code, we can just flip the switch."}]}]}]},{"client_msg_id":"7215f0fb-f942-4c70-951b-9160d354be98","type":"message","text":"haha okay","user":"U67BJLYCS","ts":"1613107628.005500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"i+Oq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"haha okay"}]}]}]},{"client_msg_id":"a4fad8c3-102a-45cf-a3ca-54b201f29eab","type":"message","text":"well if you do have an MWE","user":"U67BJLYCS","ts":"1613107637.005800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gyLi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well if you do have an MWE"}]}]}]},{"client_msg_id":"82d12a52-2e0c-4ef6-838c-3edc2481cfa8","type":"message","text":"I can look at the compilation times","user":"U67BJLYCS","ts":"1613107643.006000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HrOM6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I can look at the compilation times"}]}]}]},{"client_msg_id":"58a20365-5cf1-4446-b0db-8ffc8139f785","type":"message","text":"So Enzyme supporting GPU is more important?","user":"U67BJLYCS","ts":"1613107659.006300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AeQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So Enzyme supporting GPU is more important?"}]}]}]},{"client_msg_id":"ebdb8574-d22b-4c5b-ae42-2c37d89e6cf9","type":"message","text":"Gotcha","user":"U67BJLYCS","ts":"1613107661.006500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+7NN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Gotcha"}]}]}]},{"client_msg_id":"0b67f70c-f474-493f-a346-61964a5cea12","type":"message","text":"Lol. Yes I can confirm now. So KA + ForwardDiff + adjoint is still our way to go.","user":"ULL3KSGBS","ts":"1613575646.001500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AxxqX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Lol. Yes I can confirm now. So KA + ForwardDiff + adjoint is still our way to go."}]}]}]},{"client_msg_id":"6a94f382-99f0-4fa2-80e9-2e2d44fa1f2e","type":"message","text":"+1","user":"U67BJLYCS","ts":"1613576570.001700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nZhK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"+1"}]}]}]},{"client_msg_id":"757366e4-ad41-40ce-a89f-41cd87ea69be","type":"message","text":"Julian has been working on AMD support for KA","user":"U67BJLYCS","ts":"1613576589.002200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Rr4n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Julian has been working on AMD support for KA"}]}]}]},{"client_msg_id":"983a8df7-c973-4c63-afab-2285fb5f66ab","type":"message","text":"So that should materialize soon (tm)","user":"U67BJLYCS","ts":"1613576601.002700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sqyL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So that should materialize soon (tm)"}]}]}]},{"client_msg_id":"c5df731c-7c08-4285-9266-1f855473a242","type":"message","text":"That's great. I also aligned our deadline with respect to AMD to June.","user":"ULL3KSGBS","ts":"1613576630.003300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xU5Ax","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's great. I also aligned our deadline with respect to AMD to June."}]}]}]},{"client_msg_id":"dec3bced-fd9d-4fd1-b129-1affd0b84e55","type":"message","text":"Post March 1st I hopefully find the time to do Enzyme +KA integration","user":"U67BJLYCS","ts":"1613576684.004100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h2y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Post March 1st I hopefully find the time to do Enzyme +KA integration"}]}]}]},{"type":"message","text":"@channel We have ExaPF successfully running on Summit on the NVIDIA GPU, and all with KA with a reduced Hessian falling out of it at the end. That was an important goal. There will be a bit more testing and we'll have a review on March 30. After that, we will pester you probably a bit :slightly_smiling_face: .","files":[{"id":"F01QRRFPL7K","created":1614979946,"timestamp":1614979946,"name":"image.png","title":"image.png","mimetype":"image/png","filetype":"png","pretty_type":"PNG","user":"ULL3KSGBS","editable":false,"size":4052,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01QRRFPL7K/image.png","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01QRRFPL7K/download/image.png","thumb_64":"https://files.slack.com/files-tmb/T68168MUP-F01QRRFPL7K-6202752507/image_64.png","thumb_80":"https://files.slack.com/files-tmb/T68168MUP-F01QRRFPL7K-6202752507/image_80.png","thumb_360":"https://files.slack.com/files-tmb/T68168MUP-F01QRRFPL7K-6202752507/image_360.png","thumb_360_w":343,"thumb_360_h":42,"thumb_160":"https://files.slack.com/files-tmb/T68168MUP-F01QRRFPL7K-6202752507/image_160.png","original_w":343,"original_h":42,"thumb_tiny":"AwAFADCnv+tG8nr/AEptFAg49D+dLwOlJRQAZOMGl3HGDTaKBn//2Q==","permalink":"https://julialang.slack.com/files/ULL3KSGBS/F01QRRFPL7K/image.png","permalink_public":"https://slack-files.com/T68168MUP-F01QRRFPL7K-bccc291422","is_starred":false,"has_rich_preview":false}],"upload":false,"blocks":[{"type":"rich_text","block_id":"hxA7E","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"@channel We have ExaPF successfully running on Summit on the NVIDIA GPU, and all with KA with a reduced Hessian falling out of it at the end. That was an important goal. There will be a bit more testing and we'll have a review on March 30. After that, we will pester you probably a bit "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":" ."}]}]}],"user":"ULL3KSGBS","display_as_bot":false,"ts":"1614979949.002000"},{"client_msg_id":"30e54212-371f-4abd-a1ff-337e9c2c040f","type":"message","text":"Awesome work! I'm working on getting ROCKernels+AMDGPU passing the KA tests, so hopefully we'll be ready for you all :slightly_smiling_face:","user":"U6A0PD8CR","ts":"1614981031.002900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6W0K","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Awesome work! I'm working on getting ROCKernels+AMDGPU passing the KA tests, so hopefully we'll be ready for you all "},{"type":"emoji","name":"slightly_smiling_face"}]}]}]},{"client_msg_id":"7c4d06de-b44c-428e-9657-20621f6e229e","type":"message","text":"Nice, can't wait seeing it all work in harmony :slightly_smiling_face: .","user":"ULL3KSGBS","ts":"1614981089.003700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6LZJo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Nice, can't wait seeing it all work in harmony "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":" ."}]}]}]}]}