{"cursor": 19, "messages": [{"client_msg_id":"6930ac10-d18f-4322-9214-f9d15578bf51","type":"message","text":"aha right","user":"U01H36BUDJB","ts":"1615247212.054600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Aq/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"aha right"}]}]}]},{"client_msg_id":"1b1d0fe9-976d-4fc5-9a23-73e855ec1ca8","type":"message","text":"and if this doesn't change anything... that means the Jacobian is just ill-conditioned?","user":"U01H36BUDJB","ts":"1615247311.055100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hkA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and if this doesn't change anything... that means the Jacobian is just ill-conditioned?"}]}]}]},{"client_msg_id":"e329438a-fe53-4936-969d-b7fdce69a7ca","type":"message","text":"possibly?","user":"U69BL50BF","ts":"1615247356.055300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"imf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"possibly?"}]}]}]},{"client_msg_id":"fcedbca4-4664-4984-aff4-a45d2ff0a123","type":"message","text":"If that doesn't change anything, then it's... something :rolling_on_the_floor_laughing:","user":"U69BL50BF","ts":"1615247365.055600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oXrl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If that doesn't change anything, then it's... something "},{"type":"emoji","name":"rolling_on_the_floor_laughing"}]}]}]},{"client_msg_id":"3b5df691-e953-43cf-b304-53b49013536a","type":"message","text":"it doesn't happen to be a DAE?","user":"U69BL50BF","ts":"1615247369.055800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eAl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it doesn't happen to be a DAE?"}]}]}]},{"client_msg_id":"8f552652-75ab-4031-a4c3-c22e6d617061","type":"message","text":"not as I have it defined","user":"U01H36BUDJB","ts":"1615247377.056000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q78","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not as I have it defined"}]}]}]},{"client_msg_id":"d00b6ddc-65de-4e80-bdb8-d77dbe1eb8bf","type":"message","text":"though perhaps it could be...","user":"U01H36BUDJB","ts":"1615247389.056200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DemtL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"though perhaps it could be..."}]}]}]},{"client_msg_id":"34117f1d-1994-4a48-8a6d-5d585f116515","type":"message","text":"better for it to not be if it doesn't have to be.","user":"U69BL50BF","ts":"1615247417.056700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j2rDe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"better for it to not be if it doesn't have to be."}]}]}]},{"client_msg_id":"10c19e84-1de7-4a3d-80df-217109935d23","type":"message","text":"I should be able to at least check the jacobian manually I assume... by calling the `ODEFunction` from `ForwardDiff.jacobian` ?","user":"U01H36BUDJB","ts":"1615247585.057500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"62J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I should be able to at least check the jacobian manually I assume... by calling the "},{"type":"text","text":"ODEFunction","style":{"code":true}},{"type":"text","text":" from "},{"type":"text","text":"ForwardDiff.jacobian","style":{"code":true}},{"type":"text","text":" ?"}]}]}]},{"client_msg_id":"b304fda6-1ded-455d-a6bd-7d5f75cc1c15","type":"message","text":"yeah you can call ForwardDiff on it and see what you get/","user":"U69BL50BF","ts":"1615247651.057800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s2xUQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah you can call ForwardDiff on it and see what you get/"}]}]}]},{"client_msg_id":"9fb00727-a6b4-4651-a455-be152b4507f7","type":"message","text":"I am doing some slightly weird stuff with in-place modifications of arrays and whatnot... is that an issue? Everything should get converted to `ForwardDiff.Dual` s though","user":"U01H36BUDJB","ts":"1615247924.058800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ehRy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am doing some slightly weird stuff with in-place modifications of arrays and whatnot... is that an issue? Everything should get converted to "},{"type":"text","text":"ForwardDiff.Dual","style":{"code":true}},{"type":"text","text":" s though"}]}]}]},{"client_msg_id":"4a00c9ca-d2f7-4e52-a914-b73f84271b8b","type":"message","text":"yeah every element of the jacobian is NaN :joy:","user":"U01H36BUDJB","ts":"1615248298.059200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0KbLk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah every element of the jacobian is NaN "},{"type":"emoji","name":"joy"}]}]}]},{"client_msg_id":"3529aadc-ad90-4f2e-b9ba-66483db4e16e","type":"message","text":"<@U69BL50BF> Do you know (by familiarity with Zygote oddities) why `fastchain` isn't twice differentiable ?\n\n```applychain(fs::Tuple, x, p) = applychain(Base.tail(fs), first(fs)(x,p[1:paramlength(first(fs))]), p[(paramlength(first(fs))+1):end])\n(c::FastChain)(x,p) = applychain(c.layers, x, p)```\nIf I take its pullback (with Zygote) twice, I get:\n\n```ERROR: Mutating arrays is not supported\nStacktrace:\n [1] (::Zygote.var\"#376#377\")(::Nothing) at /home/guillaume/.julia/packages/Zygote/KpME9/src/lib/array.jl:61\n [2] (::Zygote.var\"#2271#back#378\"{Zygote.var\"#376#377\"})(::Nothing) at /home/guillaume/.julia/packages/ZygoteRules/OjfTt/src/adjoint.jl:59\n [3] materialize! at ./broadcast.jl:848 [inlined]\n [4] materialize! at ./broadcast.jl:845 [inlined]\n [5] materialize! at ./broadcast.jl:841 [inlined]\n [6] (::typeof(∂(materialize!)))(::Nothing) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [7] #364 at /home/guillaume/.julia/packages/Zygote/KpME9/src/lib/array.jl:42 [inlined]\n [8] (::typeof(∂(λ)))(::Nothing) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [9] #2225#back at /home/guillaume/.julia/packages/ZygoteRules/OjfTt/src/adjoint.jl:59 [inlined]\n [10] (::typeof(∂(λ)))(::Nothing) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [11] applychain at /home/guillaume/.julia/packages/DiffEqFlux/lS4Sa/src/fast_layers.jl:20 [inlined]\n [12] (::typeof(∂(λ)))(::Tuple{Nothing,Nothing,CuArray{Float32,3},Nothing}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [13] FastChain at /home/guillaume/.julia/packages/DiffEqFlux/lS4Sa/src/fast_layers.jl:21 [inlined]\n [14] (::typeof(∂(λ)))(::Tuple{Nothing,CuArray{Float32,3},Nothing}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [15] #89 at ./REPL[52]:2 [inlined]\n [16] (::typeof(∂(λ)))(::Tuple{Nothing,CuArray{Float32,3}}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [17] #41 at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface.jl:40 [inlined]\n [18] (::typeof(∂(λ)))(::Tuple{CuArray{Float32,3}}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [19] ftest2 at ./REPL[52]:3 [inlined]\n [20] (::typeof(∂(ftest2)))(::CuArray{Float32,3}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [21] (::Zygote.var\"#41#42\"{typeof(∂(ftest2))})(::CuArray{Float32,3}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface.jl:40\n [22] top-level scope at REPL[54]:1```","user":"UKJSNT1QR","ts":"1615303931.003200","team":"T68168MUP","edited":{"user":"UKJSNT1QR","ts":"1615304212.000000"},"blocks":[{"type":"rich_text","block_id":"CpvB","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U69BL50BF"},{"type":"text","text":" Do you know (by familiarity with Zygote oddities) why "},{"type":"text","text":"fastchain","style":{"code":true}},{"type":"text","text":" isn't twice differentiable ?\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"applychain(fs::Tuple, x, p) = applychain(Base.tail(fs), first(fs)(x,p[1:paramlength(first(fs))]), p[(paramlength(first(fs))+1):end])\n(c::FastChain)(x,p) = applychain(c.layers, x, p)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"If I take its pullback (with Zygote) twice, I get:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"ERROR: Mutating arrays is not supported\nStacktrace:\n [1] (::Zygote.var\"#376#377\")(::Nothing) at /home/guillaume/.julia/packages/Zygote/KpME9/src/lib/array.jl:61\n [2] (::Zygote.var\"#2271#back#378\"{Zygote.var\"#376#377\"})(::Nothing) at /home/guillaume/.julia/packages/ZygoteRules/OjfTt/src/adjoint.jl:59\n [3] materialize! at ./broadcast.jl:848 [inlined]\n [4] materialize! at ./broadcast.jl:845 [inlined]\n [5] materialize! at ./broadcast.jl:841 [inlined]\n [6] (::typeof(∂(materialize!)))(::Nothing) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [7] #364 at /home/guillaume/.julia/packages/Zygote/KpME9/src/lib/array.jl:42 [inlined]\n [8] (::typeof(∂(λ)))(::Nothing) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [9] #2225#back at /home/guillaume/.julia/packages/ZygoteRules/OjfTt/src/adjoint.jl:59 [inlined]\n [10] (::typeof(∂(λ)))(::Nothing) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [11] applychain at /home/guillaume/.julia/packages/DiffEqFlux/lS4Sa/src/fast_layers.jl:20 [inlined]\n [12] (::typeof(∂(λ)))(::Tuple{Nothing,Nothing,CuArray{Float32,3},Nothing}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [13] FastChain at /home/guillaume/.julia/packages/DiffEqFlux/lS4Sa/src/fast_layers.jl:21 [inlined]\n [14] (::typeof(∂(λ)))(::Tuple{Nothing,CuArray{Float32,3},Nothing}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [15] #89 at ./REPL[52]:2 [inlined]\n [16] (::typeof(∂(λ)))(::Tuple{Nothing,CuArray{Float32,3}}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [17] #41 at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface.jl:40 [inlined]\n [18] (::typeof(∂(λ)))(::Tuple{CuArray{Float32,3}}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [19] ftest2 at ./REPL[52]:3 [inlined]\n [20] (::typeof(∂(ftest2)))(::CuArray{Float32,3}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [21] (::Zygote.var\"#41#42\"{typeof(∂(ftest2))})(::CuArray{Float32,3}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface.jl:40\n [22] top-level scope at REPL[54]:1"}]}]}]},{"client_msg_id":"47053272-127d-4fe7-8528-276609062c48","type":"message","text":"I'm trying to (greatly hopefully) speedup the Normalizing Flow example because it's inacceptably slow. For that I've added a `BatchFastDense` layer to compute all K components at once. I can add it to DiffEqFlux if it's useful somehow. Doesn't work yet because `NNlib.batched_mul` adjoint doesn't actually really work, so I have to patch that too. Then there's the problem above and *hopefully* it's the last problem. Not very hopeful because everytime I finally fix something it just explodes in a later stage :slightly_smiling_face:","user":"UKJSNT1QR","ts":"1615304177.006400","team":"T68168MUP","edited":{"user":"UKJSNT1QR","ts":"1615304262.000000"},"blocks":[{"type":"rich_text","block_id":"CfEmQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm trying to (greatly hopefully) speedup the Normalizing Flow example because it's inacceptably slow. For that I've added a "},{"type":"text","text":"BatchFastDense","style":{"code":true}},{"type":"text","text":" layer to compute all K components at once. I can add it to DiffEqFlux if it's useful somehow. Doesn't work yet because "},{"type":"text","text":"NNlib.batched_mul","style":{"code":true}},{"type":"text","text":" adjoint doesn't actually really work, so I have to patch that too. Then there's the problem above and "},{"type":"text","text":"hopefully","style":{"bold":true}},{"type":"text","text":" it's the last problem. Not very hopeful because everytime I finally fix something it just explodes in a later stage "},{"type":"emoji","name":"slightly_smiling_face"}]}]}]},{"client_msg_id":"2abd1d33-19d6-4986-b2c2-fd59ff583acc","type":"message","text":"any ideas on what usually causes this error?\n```Double callback crossing floating pointer reducer errored```","user":"U01G3BG7AFR","ts":"1615305023.007100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d75","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"any ideas on what usually causes this error?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Double callback crossing floating pointer reducer errored"}]}]}],"thread_ts":"1615305023.007100","reply_count":3,"reply_users_count":2,"latest_reply":"1615306126.008400","reply_users":["U01G3BG7AFR","U69BL50BF"],"subscribed":false},{"client_msg_id":"26d86edd-cdc9-4895-be1f-093d23f59c3b","type":"message","text":"If someone familiar with `DiffEqBase` could take a quick look at <https://github.com/SciML/DiffEqBase.jl/issues/648> that would be great!","user":"U01H36BUDJB","ts":"1615331717.014500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lm2N3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If someone familiar with "},{"type":"text","text":"DiffEqBase","style":{"code":true}},{"type":"text","text":" could take a quick look at "},{"type":"link","url":"https://github.com/SciML/DiffEqBase.jl/issues/648"},{"type":"text","text":" that would be great!"}]}]}]},{"client_msg_id":"bf1c4782-3b38-454c-b336-6e5e80ac4f0f","type":"message","text":"Also, <@U69BL50BF> in case you're interested, Rodas4P is now &gt;10x faster than Euler on my heat conduction + phase change problem after providing a tridiagonal Jacobian prototype :slightly_smiling_face: :partying_face:","user":"U01H36BUDJB","ts":"1615332030.016300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MxR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, "},{"type":"user","user_id":"U69BL50BF"},{"type":"text","text":" in case you're interested, Rodas4P is now >10x faster than Euler on my heat conduction + phase change problem after providing a tridiagonal Jacobian prototype "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":" "},{"type":"emoji","name":"partying_face"}]}]}],"reactions":[{"name":"tada","users":["U69BL50BF"],"count":1}]},{"client_msg_id":"0ad5ced0-12b3-4366-bba8-a2711755bf66","type":"message","text":"how do i get a Table/DataFrame of every DE.jl solver, the alg order, and the type constraint on the `Problem` that it can solve?","user":"UM8JUNJG7","ts":"1615344106.017400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dsGz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"how do i get a Table/DataFrame of every DE.jl solver, the alg order, and the type constraint on the "},{"type":"text","text":"Problem","style":{"code":true}},{"type":"text","text":" that it can solve?"}]}]}]},{"client_msg_id":"91293108-af64-4bf2-aa82-897a07772cac","type":"message","text":"is there a way to tell a call back function to not be called again once it triggers the affect. It does slow down the system a bit.","user":"U01G3BG7AFR","ts":"1615345683.018700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FSk7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is there a way to tell a call back function to not be called again once it triggers the affect. It does slow down the system a bit."}]}]}]},{"client_msg_id":"3ec6d84b-0542-4b3b-b461-aa3f806b5b62","type":"message","text":"I had some issues in my package today where some functionality in DiffEqBase.jl couldn't be found (e.g. `DiffEqBase.interpret_vars`). I then found out about SciMLBase.jl, added it as a dependency which solved most errors, but since I still rely on DiffEqBase.jl and on OrdinaryDiffEq.jl I now have lots of warnings about common exports, and I have to fix a few more issues. It's a bit unclear to me which functions I should use, and how I should handle these dependencies in general. Does anyone have any recommendations for issues of this kind?","user":"UMQME35EV","ts":"1615388282.024700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fu8Jj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I had some issues in my package today where some functionality in DiffEqBase.jl couldn't be found (e.g. "},{"type":"text","text":"DiffEqBase.interpret_vars","style":{"code":true}},{"type":"text","text":"). I then found out about SciMLBase.jl, added it as a dependency which solved most errors, but since I still rely on DiffEqBase.jl and on OrdinaryDiffEq.jl I now have lots of warnings about common exports, and I have to fix a few more issues. It's a bit unclear to me which functions I should use, and how I should handle these dependencies in general. Does anyone have any recommendations for issues of this kind?"}]}]}],"thread_ts":"1615388282.024700","reply_count":2,"reply_users_count":2,"latest_reply":"1615388447.025100","reply_users":["UMQME35EV","U01H36BUDJB"],"subscribed":false},{"client_msg_id":"d9fc8725-e472-47eb-bf36-6af149e79d51","type":"message","text":"i recall reading something about the plans for PDE.jl, where is that?'","user":"UM8JUNJG7","ts":"1615391379.027200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xS1P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i recall reading something about the plans for PDE.jl, where is that?'"}]}]}]},{"client_msg_id":"da78f5ca-0fe6-4976-a98e-6723837763d4","type":"message","text":"It's moreso that everything is centering around an abstract PDESystem interface defined by MTK","user":"U69BL50BF","ts":"1615391410.027700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+PX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's moreso that everything is centering around an abstract PDESystem interface defined by MTK"}]}]}]},{"client_msg_id":"bcf17326-e042-4b84-951a-c7d6ef4d66f5","type":"message","text":"and all the discretizations and stuff?","user":"UM8JUNJG7","ts":"1615391447.028600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lTr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and all the discretizations and stuff?"}]}]}]},{"client_msg_id":"606bc4bc-458a-45e8-9522-ac88b7f20bc9","type":"message","text":"I don't quite know where to document it in full, and I don't want to guarantee it won't change before we have a few discretizers working, so you won't find an abstract documentation of it yet.","user":"U69BL50BF","ts":"1615391461.028900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PVf1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't quite know where to document it in full, and I don't want to guarantee it won't change before we have a few discretizers working, so you won't find an abstract documentation of it yet."}]}]}]},{"client_msg_id":"c5d598ad-7b84-4b36-9dcb-ab408cfd33e3","type":"message","text":"But, it's just about time it gets written","user":"U69BL50BF","ts":"1615391468.029200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"N38GD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But, it's just about time it gets written"}]}]}],"reactions":[{"name":"heart","users":["UM8JUNJG7"],"count":1}]},{"client_msg_id":"6f9d93d8-2b0e-47d1-8748-3bc6943dbf8e","type":"message","text":"that is what \"PDE.jl\" was going to be.","user":"U69BL50BF","ts":"1615391475.029600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"a9oN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that is what \"PDE.jl\" was going to be."}]}]}]},{"client_msg_id":"20c12a44-b7c0-41f3-92b1-6b602f4fdd2a","type":"message","text":"So I guess noone is actively working on integrating some kind of FEM scheme into MTK (and the DiffEq ecosystem in general) yet? Or is this a non-goal due to its complexity?","user":"U014A5E6L3V","ts":"1615411605.032800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Hd5QG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So I guess noone is actively working on integrating some kind of FEM scheme into MTK (and the DiffEq ecosystem in general) yet? Or is this a non-goal due to its complexity?"}]}]}]},{"client_msg_id":"c459b903-9412-4c52-90d8-2890d6832535","type":"message","text":"<https://github.com/gridap/GridapODEs.jl/issues/4>","user":"U69BL50BF","ts":"1615411637.033000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dk3","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/gridap/GridapODEs.jl/issues/4"}]}]}],"reactions":[{"name":"rocket","users":["U014A5E6L3V"],"count":1}]},{"client_msg_id":"fa33fafc-46fb-4533-8194-464e694d4bf6","type":"message","text":"How much performance impact should be expected from using `ForwrardDiffSensitivity` over longer time spans? I would think it would just increase runtime by a small constant factor, but I'm seeing a pretty huge impact.","user":"U01H36BUDJB","ts":"1615417114.034600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SY1H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How much performance impact should be expected from using "},{"type":"text","text":"ForwrardDiffSensitivity","style":{"code":true}},{"type":"text","text":" over longer time spans? I would think it would just increase runtime by a small constant factor, but I'm seeing a pretty huge impact."}]}]}]},{"client_msg_id":"ed069e80-46a5-4f51-ad3e-4d9d676ed47d","type":"message","text":"By huge impact I mean &gt;1000x slower...","user":"U01H36BUDJB","ts":"1615417258.035000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"r5i","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"By huge impact I mean >1000x slower..."}]}]}]},{"client_msg_id":"803d8cce-7403-40b1-b33d-c551111f183f","type":"message","text":"depends on the number of parameters","user":"U69BL50BF","ts":"1615417295.035200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5Hx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"depends on the number of parameters"}]}]}]},{"client_msg_id":"bee1bf25-e7ce-4eb5-beda-bd354025a7a7","type":"message","text":"it's O(np)","user":"U69BL50BF","ts":"1615417298.035400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2Dlq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's O(np)"}]}]}]},{"client_msg_id":"bdf09de2-8643-4c7d-a068-bcb7cd1e9122","type":"message","text":"though if it's a stiff ODE solver it's O((np)^3)","user":"U69BL50BF","ts":"1615417309.035800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8kXq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"though if it's a stiff ODE solver it's O((np)^3)"}]}]}]},{"client_msg_id":"f2ca8e2d-0612-48a2-bdea-418d715b1d3e","type":"message","text":"It's literally 1 parameter.","user":"U01H36BUDJB","ts":"1615417337.036000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Fyze","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's literally 1 parameter."}]}]}]},{"client_msg_id":"f145ae10-9019-43e5-a539-a32b84af082d","type":"message","text":"An array of size 1","user":"U01H36BUDJB","ts":"1615417342.036200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WH/L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"An array of size 1"}]}]}]},{"client_msg_id":"bf36397d-a53d-4033-907e-c3269876c479","type":"message","text":"uhh, that's not good then :rolling_on_the_floor_laughing:","user":"U69BL50BF","ts":"1615417364.036400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PkVE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"uhh, that's not good then "},{"type":"emoji","name":"rolling_on_the_floor_laughing"}]}]}]},{"client_msg_id":"7c536d5b-3eb9-4496-b6fc-2e142dd4a19a","type":"message","text":"do you see type inference issues?","user":"U69BL50BF","ts":"1615417369.036700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CgYo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"do you see type inference issues?"}]}]}]},{"client_msg_id":"934c9e3b-2227-40d5-ab1d-dace5f713d79","type":"message","text":"what would be the appropriate place to put @code_warntype?","user":"U01H36BUDJB","ts":"1615417393.037100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oavdM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what would be the appropriate place to put @code_warntype?"}]}]}]},{"client_msg_id":"7936021c-8c6c-46cc-83ca-08de57598e6f","type":"message","text":"before `ForwardDiff.gradient` or just before `solve` ??","user":"U01H36BUDJB","ts":"1615417404.037400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dcl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"before "},{"type":"text","text":"ForwardDiff.gradient","style":{"code":true}},{"type":"text","text":" or just before "},{"type":"text","text":"solve","style":{"code":true}},{"type":"text","text":" ??"}]}]}]},{"client_msg_id":"ceb60d1e-2f49-4936-a5a6-8fdc5c9214a4","type":"message","text":"solve I guess?","user":"U69BL50BF","ts":"1615417424.037900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=pGq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"solve I guess?"}]}]}]},{"client_msg_id":"1f13dd84-f640-4146-8e72-20e2574e1574","type":"message","text":"solve is type stable but the surrounding function for the gradient is not","user":"U01H36BUDJB","ts":"1615417675.038400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/YGvV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"solve is type stable but the surrounding function for the gradient is not"}]}]}]},{"client_msg_id":"932d11ab-5b8e-4745-a044-0782737c4244","type":"message","text":"including the return value; shows up as Any","user":"U01H36BUDJB","ts":"1615417696.038800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ykn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"including the return value; shows up as Any"}]}]}]},{"client_msg_id":"e79d2f07-2eeb-405d-add5-32c9b3dd1195","type":"message","text":"maybe because I have to recreate the `ODEProblem` to have the Tridiagonal Jacobian use `eltype(p)` ... are there any examples laying around using `ForwardDiffSensitivity` with `jac_prototype`?","user":"U01H36BUDJB","ts":"1615417810.039900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"z8tN9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"maybe because I have to recreate the "},{"type":"text","text":"ODEProblem","style":{"code":true}},{"type":"text","text":" to have the Tridiagonal Jacobian use "},{"type":"text","text":"eltype(p)","style":{"code":true}},{"type":"text","text":" ... are there any examples laying around using "},{"type":"text","text":"ForwardDiffSensitivity","style":{"code":true}},{"type":"text","text":" with "},{"type":"text","text":"jac_prototype","style":{"code":true}},{"type":"text","text":"?"}]}]}]},{"client_msg_id":"60d4f38c-ab15-44e6-9893-e6e6faaa893a","type":"message","text":"I don't think so, but it should be fine?","user":"U69BL50BF","ts":"1615418822.040300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7Yr7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't think so, but it should be fine?"}]}]}]},{"client_msg_id":"0174aacd-54c4-4d53-84a6-c9341122cf5b","type":"message","text":"fixed it. though yes, as you mentioned, it is still considerably slower for the stiff solver","user":"U01H36BUDJB","ts":"1615418857.040800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZeU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"fixed it. though yes, as you mentioned, it is still considerably slower for the stiff solver"}]}]}]},{"client_msg_id":"197433f4-afa7-4d80-a697-ec77eabbc2e9","type":"message","text":"about 3x slower","user":"U01H36BUDJB","ts":"1615418878.041100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wut","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"about 3x slower"}]}]}]},{"client_msg_id":"7d088e79-0500-4945-a581-a4858c13a310","type":"message","text":"ah damn, ran into the whole `ReverseDiff` /`ComponentArray` incompatibility issue again....","user":"U01H36BUDJB","ts":"1615419516.042500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6m8A","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah damn, ran into the whole "},{"type":"text","text":"ReverseDiff","style":{"code":true}},{"type":"text","text":" /"},{"type":"text","text":"ComponentArray","style":{"code":true}},{"type":"text","text":" incompatibility issue again...."}]}]}]},{"client_msg_id":"4974173f-8c09-4aab-8d94-72c9d297332e","type":"message","text":"guess I need to try and contribute to <https://github.com/jonniedie/ComponentArrays.jl/issues/37>","user":"U01H36BUDJB","ts":"1615419543.042800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DLu5Q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"guess I need to try and contribute to "},{"type":"link","url":"https://github.com/jonniedie/ComponentArrays.jl/issues/37"}]}]}]},{"client_msg_id":"0C8CABAE-0034-48DF-B830-89ACDD8176C0","type":"message","text":"I’ll see if I can get some more time tonight to look at it. I think I’m getting close. ","user":"US4A6G6B0","ts":"1615423607.044200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KdD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’ll see if I can get some more time tonight to look at it. I think I’m getting close. "}]}]}]},{"client_msg_id":"9ceb3fcc-1496-447f-869f-6eddf5113d43","type":"message","text":"I would really appreciate advice on how to make use of threads when solving a large system of ODEs.\nThe function being solved can be thought of as:\n 1) Assess all states and populate some matrices\n 2) Act on columns of those matrices individually to calculate derivatives\n\nThe way I'm attempting to do this (which may well be terrible, please tell me if so) is to create one `ODEProblem` per thread in which the first step runs, then wait for all threads to finish step 1, then continues with the second step on a range of the columns of the matrices. This means that the second step can be threaded which gives a good speed improvement.\n\nOne of the difficulties is that I need to sync the ODEProblems themselves to make sure they're always solving the same timestep, and the syncing in general is a bit nasty/inefficient.\n\nThis feels like a hacky way of doing this, and I'd be grateful for any advice on either how to do this better or if this is an OK way how to sync simultaneous solving of ODE problems.\n\nThanks in advance.\n\nExample code here:\n```function f!(du, u, p t)\n    # This function sets values used by all threads\n    f_global!(du, u, p)\n\n    # Need to sync all threads after f_global!\n    sync_thread(Threads.threadid())\n\n    # This function can be done on separate thread as per range and finish whenever\n    f_separate!(du, u, p)\nend\n\nranges = [1:10000, 10001:20000] # Assume two threads for this example\n# u0, t_range, p exist\n\nThreads.@threads for i in 1:Threads.nthreads()\n    range = ranges[Threads.threadid()]\n    prob = ODEProblem(f!, u0[range], t_range, p)\n    sol = solve(prob, Tsit5())\n    do_something_with_output(sol)\nend```\n","user":"U017FUJDBT7","ts":"1615436515.047400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QgeL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I would really appreciate advice on how to make use of threads when solving a large system of ODEs.\nThe function being solved can be thought of as:\n 1) Assess all states and populate some matrices\n 2) Act on columns of those matrices individually to calculate derivatives\n\nThe way I'm attempting to do this (which may well be terrible, please tell me if so) is to create one "},{"type":"text","text":"ODEProblem","style":{"code":true}},{"type":"text","text":" per thread in which the first step runs, then wait for all threads to finish step 1, then continues with the second step on a range of the columns of the matrices. This means that the second step can be threaded which gives a good speed improvement.\n\nOne of the difficulties is that I need to sync the ODEProblems themselves to make sure they're always solving the same timestep, and the syncing in general is a bit nasty/inefficient.\n\nThis feels like a hacky way of doing this, and I'd be grateful for any advice on either how to do this better or if this is an OK way how to sync simultaneous solving of ODE problems.\n\nThanks in advance.\n\nExample code here:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function f!(du, u, p t)\n    # This function sets values used by all threads\n    f_global!(du, u, p)\n\n    # Need to sync all threads after f_global!\n    sync_thread(Threads.threadid())\n\n    # This function can be done on separate thread as per range and finish whenever\n    f_separate!(du, u, p)\nend\n\nranges = [1:10000, 10001:20000] # Assume two threads for this example\n# u0, t_range, p exist\n\nThreads.@threads for i in 1:Threads.nthreads()\n    range = ranges[Threads.threadid()]\n    prob = ODEProblem(f!, u0[range], t_range, p)\n    sol = solve(prob, Tsit5())\n    do_something_with_output(sol)\nend"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1615436515.047400","reply_count":6,"reply_users_count":2,"latest_reply":"1615439353.048600","reply_users":["U69BL50BF","U017FUJDBT7"],"subscribed":false},{"client_msg_id":"32c8e94d-e841-4108-afea-2f630e6d8a9e","type":"message","text":"I did a major clean up of the ModelingToolkit.jl repo, transitioning it towards being \"really released\". Let me know if I missed anything.","user":"U69BL50BF","ts":"1615466874.050400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pAE2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I did a major clean up of the ModelingToolkit.jl repo, transitioning it towards being \"really released\". Let me know if I missed anything."}]}]}]},{"client_msg_id":"44d2ee05-450e-488b-aecb-1015416f85ed","type":"message","text":"With all the recent changes to MTK, did the compile time for large ODE systems improve? Before it could take weeks if you had 10000 ODEs.","user":"UQEDP1Q5V","ts":"1615497481.057000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gAAMj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"With all the recent changes to MTK, did the compile time for large ODE systems improve? Before it could take weeks if you had 10000 ODEs."}]}]}]},{"client_msg_id":"3cc27481-ea06-45a8-b91e-63b16dac0961","type":"message","text":"yes, I think Shashi's function splitting helped that a lot.","user":"U69BL50BF","ts":"1615498798.057600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uyEJO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, I think Shashi's function splitting helped that a lot."}]}]}]},{"client_msg_id":"e9ff122e-1d3f-4aa6-80f7-7f6846585d2b","type":"message","text":"Did you left it compiling for weeks? Did it finish? (Maybe I am not getting the hyperbole, but seems likely with Julia)","user":"U6788D83U","ts":"1615498876.058300","team":"T68168MUP","edited":{"user":"U6788D83U","ts":"1615498882.000000"},"blocks":[{"type":"rich_text","block_id":"9MCLn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Did you left it compiling for weeks? Did it finish? (Maybe I am not getting the hyperbole, but seems likely with Julia)"}]}]}]}]}