{"cursor": 1, "messages": [{"client_msg_id":"ee2b1597-ce38-4b18-b6cd-908226b2b237","type":"message","text":"<https://diffeqflux.sciml.ai/dev/examples/exogenous_input/> that's an exogenous signal example","user":"U69BL50BF","ts":"1608737631.026700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8k+63","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://diffeqflux.sciml.ai/dev/examples/exogenous_input/"},{"type":"text","text":" that's an exogenous signal example"}]}]}]},{"client_msg_id":"72b7f6ad-ce23-4d04-b844-f81576dba318","type":"message","text":"Cool, thanks! Really cool stuff, thanks for all of your hard work!","user":"U01H36BUDJB","ts":"1608738150.027000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Yd/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Cool, thanks! Really cool stuff, thanks for all of your hard work!"}]}]}]},{"client_msg_id":"7d1a8089-5a44-4616-8350-c03ba6416c3d","type":"message","text":"Is there some pre-implemented method to get a smoothed local interpolation of noisy data? I was thinking of something like Savitzky-Golay or kernelized regression, but I need a local interpolation with smooth transitions.","user":"U019PPN3H6J","ts":"1608739596.034700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Td1QI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there some pre-implemented method to get a smoothed local interpolation of noisy data? I was thinking of something like Savitzky-Golay or kernelized regression, but I need a local interpolation with smooth transitions."}]}]}],"thread_ts":"1608739596.034700","reply_count":2,"reply_users_count":2,"latest_reply":"1608740478.035000","reply_users":["UJ7DVTVQ8","U019PPN3H6J"],"subscribed":false},{"client_msg_id":"73fdf27e-e6c1-4967-956a-3e914713e3f6","type":"message","text":"Hi, I have a callback similar to `PresetTimeCallback`  and `tstops` prlong the endpoint value I set in `tspan` . Where is it possible to set back the endpoint value of tspan ?","user":"UBP7GU04T","ts":"1608848043.037700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5SC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi, I have a callback similar to "},{"type":"text","text":"PresetTimeCallback","style":{"code":true}},{"type":"text","text":"  and "},{"type":"text","text":"tstops","style":{"code":true}},{"type":"text","text":" prlong the endpoint value I set in "},{"type":"text","text":"tspan","style":{"code":true}},{"type":"text","text":" . Where is it possible to set back the endpoint value of tspan ?"}]}]}]},{"client_msg_id":"3c1d8f93-31b4-4409-b4f7-b6c404454b0c","type":"message","text":"I have an SDE on a Lie group, written\n```dx = L dw\ng(t + dt) = g(t) \\circ \\exp(\\sum_{i=1}^d E_i dx_i)\ng(0) = e```\nwhere `x` is in the Lie algebra, `\\exp` is the group exponential map, `E_i` is some orthogonal basis in the Lie algebra, `d` is the dimension, `\\circ` is group composition,  `e` is the identity element, and `dw` is a wiener process. Can this SDE be solved with the DifferentialEquations ecosystem? I have a custom Euler-Maruyama solver right now but would like to generalize.","user":"UHDQQ4GN6","ts":"1608975490.041800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qqc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have an SDE on a Lie group, written\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"dx = L dw\ng(t + dt) = g(t) \\circ \\exp(\\sum_{i=1}^d E_i dx_i)\ng(0) = e"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"where "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" is in the Lie algebra, "},{"type":"text","text":"\\exp","style":{"code":true}},{"type":"text","text":" is the group exponential map, "},{"type":"text","text":"E_i","style":{"code":true}},{"type":"text","text":" is some orthogonal basis in the Lie algebra, "},{"type":"text","text":"d","style":{"code":true}},{"type":"text","text":" is the dimension, "},{"type":"text","text":"\\circ","style":{"code":true}},{"type":"text","text":" is group composition,  "},{"type":"text","text":"e","style":{"code":true}},{"type":"text","text":" is the identity element, and "},{"type":"text","text":"dw","style":{"code":true}},{"type":"text","text":" is a wiener process. Can this SDE be solved with the DifferentialEquations ecosystem? I have a custom Euler-Maruyama solver right now but would like to generalize."}]}]}]},{"client_msg_id":"dbc66431-a571-4455-85f4-2e69c4a789cd","type":"message","text":"there are exponential integrators for SDEs","user":"U69BL50BF","ts":"1608989817.042000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kJAdD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there are exponential integrators for SDEs"}]}]}]},{"client_msg_id":"7824d659-12e9-4fb6-8ae1-9e217a464c7b","type":"message","text":"we haven't implemented them yet :shrug:","user":"U69BL50BF","ts":"1608989824.042300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wO=U","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we haven't implemented them yet "},{"type":"emoji","name":"shrug"}]}]}]},{"client_msg_id":"65fc51e7-23d7-4fba-96b6-db591608638f","type":"message","text":"<@U69BL50BF> Have you or your colleagues thought about the relationship between (and apparent advantages of) UDEs and traditional data assimilation techniques, i.e. via Kalman filters or something similar? Of course UDEs are far more powerful and expressive, but this might be a useful comparison to make in order to convince scientists/practitioners in the modeling world who might be skeptical of directly modifying their numerical models.","user":"U01H36BUDJB","ts":"1609159054.045000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sXM","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U69BL50BF"},{"type":"text","text":" Have you or your colleagues thought about the relationship between (and apparent advantages of) UDEs and traditional data assimilation techniques, i.e. via Kalman filters or something similar? Of course UDEs are far more powerful and expressive, but this might be a useful comparison to make in order to convince scientists/practitioners in the modeling world who might be skeptical of directly modifying their numerical models."}]}]}]},{"client_msg_id":"135b0995-431e-421a-8e14-9cfdc01bdfb0","type":"message","text":"<@U01H36BUDJB> we're working on it","user":"U69BL50BF","ts":"1609164569.045500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yoRT3","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01H36BUDJB"},{"type":"text","text":" we're working on it"}]}]}]},{"client_msg_id":"a5ef6fe3-6547-4e6c-aa1b-a0c7727c8bdb","type":"message","text":"I actually have an NSF grant with Youssef Marzouk on space weather prediction which is incorporating SciML into data assimilation, and the magnetic navigation project is doing it too","user":"U69BL50BF","ts":"1609164652.047400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3Xz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I actually have an NSF grant with Youssef Marzouk on space weather prediction which is incorporating SciML into data assimilation, and the magnetic navigation project is doing it too"}]}]}]},{"client_msg_id":"fbd469d0-085d-4f66-9e65-0c0b7843fb35","type":"message","text":"So some papers on that are due to come out in 2021","user":"U69BL50BF","ts":"1609164667.047900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ETgB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So some papers on that are due to come out in 2021"}]}]}]},{"client_msg_id":"41c45cf7-5e46-4f4b-b6b4-ea1085b17560","type":"message","text":"New to DiffEqPhysics, I failed with a trivial example. See this issue: <https://github.com/SciML/DiffEqPhysics.jl/issues/60>","user":"UDHCV0BHD","ts":"1609250417.049600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kQ4E","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"New to DiffEqPhysics, I failed with a trivial example. See this issue: "},{"type":"link","url":"https://github.com/SciML/DiffEqPhysics.jl/issues/60"}]}]}]},{"client_msg_id":"bb30daa1-d1f6-47ac-88ef-3e8f33d8c6cf","type":"message","text":"Should calculating the determinant of a (small, real) matrix using MTK be something that works for arbitrary matrices? Or should it fall to the user to check that the function MTK generates does not involve division by zero for their particular matrix?","user":"UQEDP1Q5V","ts":"1609295390.051500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Am7N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Should calculating the determinant of a (small, real) matrix using MTK be something that works for arbitrary matrices? Or should it fall to the user to check that the function MTK generates does not involve division by zero for their particular matrix?"}]}]}]},{"client_msg_id":"a716da32-ef8c-4dc5-9f4a-99f17b6e13dc","type":"message","text":"hmm, in general stable determinant calculations are hard","user":"U69BL50BF","ts":"1609295640.051800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kLGd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmm, in general stable determinant calculations are hard"}]}]}]},{"client_msg_id":"6a231918-7849-4e65-bf00-6805bd88f1f7","type":"message","text":"<@U6788D83U> is there a way we should overload det?","user":"U69BL50BF","ts":"1609295667.052100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"btoz","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U6788D83U"},{"type":"text","text":" is there a way we should overload det?"}]}]}]},{"client_msg_id":"0ec7890e-53b6-48c3-aae8-4699afdde9f4","type":"message","text":"We already have it\n```julia&gt; using ModelingToolkit, LinearAlgebra\n\njulia&gt; @variables A[1:4, 1:4];\n\njulia&gt; det(A)\n((((1 * A₁ˏ₁) * (A₂ˏ₂ - ((A₂ˏ₁ / A₁ˏ₁) * A₁ˏ₂))) * ((A₃ˏ₃ - ((A₃ˏ₁ / A₁ˏ₁) * A₁ˏ₃)) - (((A₃ˏ₂ - ((A₃ˏ₁ / A₁ˏ₁) * A₁ˏ₂)) / (A₂ˏ₂ - ((A₂ˏ₁ / A₁ˏ₁) * A₁ˏ₂))) * (A₂ˏ₃ - ((A₂ˏ₁ / A₁ˏ₁) * A₁ˏ₃))))) * (((A₄ˏ₄ - ((A₄ˏ₁ / A₁ˏ₁) * A₁ˏ₄)) - (((A₄ˏ₂ - ((A₄ˏ₁ / A₁ˏ₁) * A₁ˏ₂)) / (A₂ˏ₂ - ((A₂ˏ₁ / A₁ˏ₁) * A₁ˏ₂))) * (A₂ˏ₄ - ((A₂ˏ₁ / A₁ˏ₁) * A₁ˏ₄)))) - ((((A₄ˏ₃ - ((A₄ˏ₁ / A₁ˏ₁) * A₁ˏ₃)) - (((A₄ˏ₂ - ((A₄ˏ₁ / A₁ˏ₁) * A₁ˏ₂)) / (A₂ˏ₂ - ((A₂ˏ₁ / A₁ˏ₁) * A₁ˏ₂))) * (A₂ˏ₃ - ((A₂ˏ₁ / A₁ˏ₁) * A₁ˏ₃)))) / ((A₃ˏ₃ - ((A₃ˏ₁ / A₁ˏ₁) * A₁ˏ₃)) - (((A₃ˏ₂ - ((A₃ˏ₁ / A₁ˏ₁) * A₁ˏ₂)) / (A₂ˏ₂ - ((A₂ˏ₁ / A₁ˏ₁) * A₁ˏ₂))) * (A₂ˏ₃ - ((A₂ˏ₁ / A₁ˏ₁) * A₁ˏ₃))))) * ((A₃ˏ₄ - ((A₃ˏ₁ / A₁ˏ₁) * A₁ˏ₄)) - (((A₃ˏ₂ - ((A₃ˏ₁ / A₁ˏ₁) * A₁ˏ₂)) / (A₂ˏ₂ - ((A₂ˏ₁ / A₁ˏ₁) * A₁ˏ₂))) * (A₂ˏ₄ - ((A₂ˏ₁ / A₁ˏ₁) * A₁ˏ₄))))))) * 1```","user":"U6788D83U","ts":"1609300998.053200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p=5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We already have it\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using ModelingToolkit, LinearAlgebra\n\njulia> @variables A[1:4, 1:4];\n\njulia> det(A)\n((((1 * A₁ˏ₁) * (A₂ˏ₂ - ((A₂ˏ₁ / A₁ˏ₁) * A₁ˏ₂))) * ((A₃ˏ₃ - ((A₃ˏ₁ / A₁ˏ₁) * A₁ˏ₃)) - (((A₃ˏ₂ - ((A₃ˏ₁ / A₁ˏ₁) * A₁ˏ₂)) / (A₂ˏ₂ - ((A₂ˏ₁ / A₁ˏ₁) * A₁ˏ₂))) * (A₂ˏ₃ - ((A₂ˏ₁ / A₁ˏ₁) * A₁ˏ₃))))) * (((A₄ˏ₄ - ((A₄ˏ₁ / A₁ˏ₁) * A₁ˏ₄)) - (((A₄ˏ₂ - ((A₄ˏ₁ / A₁ˏ₁) * A₁ˏ₂)) / (A₂ˏ₂ - ((A₂ˏ₁ / A₁ˏ₁) * A₁ˏ₂))) * (A₂ˏ₄ - ((A₂ˏ₁ / A₁ˏ₁) * A₁ˏ₄)))) - ((((A₄ˏ₃ - ((A₄ˏ₁ / A₁ˏ₁) * A₁ˏ₃)) - (((A₄ˏ₂ - ((A₄ˏ₁ / A₁ˏ₁) * A₁ˏ₂)) / (A₂ˏ₂ - ((A₂ˏ₁ / A₁ˏ₁) * A₁ˏ₂))) * (A₂ˏ₃ - ((A₂ˏ₁ / A₁ˏ₁) * A₁ˏ₃)))) / ((A₃ˏ₃ - ((A₃ˏ₁ / A₁ˏ₁) * A₁ˏ₃)) - (((A₃ˏ₂ - ((A₃ˏ₁ / A₁ˏ₁) * A₁ˏ₂)) / (A₂ˏ₂ - ((A₂ˏ₁ / A₁ˏ₁) * A₁ˏ₂))) * (A₂ˏ₃ - ((A₂ˏ₁ / A₁ˏ₁) * A₁ˏ₃))))) * ((A₃ˏ₄ - ((A₃ˏ₁ / A₁ˏ₁) * A₁ˏ₄)) - (((A₃ˏ₂ - ((A₃ˏ₁ / A₁ˏ₁) * A₁ˏ₂)) / (A₂ˏ₂ - ((A₂ˏ₁ / A₁ˏ₁) * A₁ˏ₂))) * (A₂ˏ₄ - ((A₂ˏ₁ / A₁ˏ₁) * A₁ˏ₄))))))) * 1"}]}]}]},{"client_msg_id":"f7c32468-fe2e-40da-9723-3d9cb61b89c2","type":"message","text":"`det` just uses LU","user":"U6788D83U","ts":"1609301054.054100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QHatr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"det","style":{"code":true}},{"type":"text","text":" just uses LU"}]}]}]},{"client_msg_id":"2ea5c849-bb4e-4c70-8c51-f5a6d86953c6","type":"message","text":"Also, since my LU PR, we have pretty nice capabilities like\n```julia&gt; simplify.(A \\ A[:, 1])\n4-element Vector{Num}:\n 1\n 0\n 0\n 0```","user":"U6788D83U","ts":"1609301105.054900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Do=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, since my LU PR, we have pretty nice capabilities like\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> simplify.(A \\ A[:, 1])\n4-element Vector{Num}:\n 1\n 0\n 0\n 0"}]}]}]},{"client_msg_id":"2b2fcde9-8286-4fa7-b81f-19751b5d940c","type":"message","text":"What I meant, is that the divisions in your expression can cause `NaN` for certain matrices.\n```using ModelingToolkit\nusing LinearAlgebra\n@variables X[1:2,1:2]\n\nd = det(X);\n_det = eval(build_function(d,X))\n\nX_test1 = [1.0 0.0; 0.0 1.0]\ndet(X_test1)\n_det(X_test1)\n\nX_test2 = zeros(2,2)\ndet(X_test2)\n_det(X_test2)\n\nX_test3 = [0.0 1.0; 1.0 0.0]\ndet(X_test3)\n_det(X_test3)```\nI personally understand why tracing  `det` and `lu` causes this, but am just wondering if a user should expect this behavior?","user":"UQEDP1Q5V","ts":"1609313436.059400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Evyg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What I meant, is that the divisions in your expression can cause "},{"type":"text","text":"NaN","style":{"code":true}},{"type":"text","text":" for certain matrices.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using ModelingToolkit\nusing LinearAlgebra\n@variables X[1:2,1:2]\n\nd = det(X);\n_det = eval(build_function(d,X))\n\nX_test1 = [1.0 0.0; 0.0 1.0]\ndet(X_test1)\n_det(X_test1)\n\nX_test2 = zeros(2,2)\ndet(X_test2)\n_det(X_test2)\n\nX_test3 = [0.0 1.0; 1.0 0.0]\ndet(X_test3)\n_det(X_test3)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I personally understand why tracing  "},{"type":"text","text":"det","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"lu","style":{"code":true}},{"type":"text","text":" causes this, but am just wondering if a user should expect this behavior?"}]}]}]},{"client_msg_id":"06FAE29F-5889-441E-93C7-9A1175E8174A","type":"message","text":"That’s not solvable. There’s no value information in symbols","user":"U6788D83U","ts":"1609314456.060200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O9Z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That’s not solvable. There’s no value information in symbols"}]}]}]},{"client_msg_id":"A0344DC2-1B62-4CCC-AD61-E682C84C163F","type":"message","text":"If you want O(N^3) computation time of det instead of O(N!) you need value information.","user":"U6788D83U","ts":"1609314515.061400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BeEK3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you want O(N^3) computation time of det instead of O(N!) you need value information."}]}]}]},{"client_msg_id":"7A4F09F2-0B30-4F7F-91DB-105AD1DB4BF0","type":"message","text":"There are better ways for evaluating det for small matrices than just unroll the expression. You can specialize on size and use StaticArrays.","user":"U6788D83U","ts":"1609314783.063300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lBbmJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There are better ways for evaluating det for small matrices than just unroll the expression. You can specialize on size and use StaticArrays."}]}]}]},{"client_msg_id":"6c76d22b-73c3-4ce1-92f1-dcc2c9fb9544","type":"message","text":"I understand it is not solvable in an efficient way, but I just found it a bit disconcerting `det` can silently evaluate to `NaN` . (And also I have weird use cases where I need the unrolled expression)","user":"UQEDP1Q5V","ts":"1609315381.066000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VeM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I understand it is not solvable in an efficient way, but I just found it a bit disconcerting "},{"type":"text","text":"det","style":{"code":true}},{"type":"text","text":" can silently evaluate to "},{"type":"text","text":"NaN","style":{"code":true}},{"type":"text","text":" . (And also I have weird use cases where I need the unrolled expression)"}]}]}]},{"client_msg_id":"5f57a004-637e-479c-883e-319264d225c7","type":"message","text":"Maybe we could have\n```det(A; cofactor=true) ...```\nby default.","user":"U6788D83U","ts":"1609315459.066800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LFuqd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe we could have\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"det(A; cofactor=true) ..."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"by default."}]}]}]},{"client_msg_id":"bf4944bf-17da-4049-a40c-e5d9825d5f8d","type":"message","text":"det by cofactor expansion won’t give NaN, but that’s probably not usable for anything larger than 4 x 4","user":"U6788D83U","ts":"1609315509.067500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Kczva","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"det by cofactor expansion won’t give NaN, but that’s probably not usable for anything larger than 4 x 4"}]}]}]},{"client_msg_id":"950440f4-675d-4527-be31-4d38a1f8cf6d","type":"message","text":"<https://github.com/SciML/ModelingToolkit.jl/pull/707>\n<@UQEDP1Q5V>","user":"U6788D83U","ts":"1609318337.068100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NCUR9","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/SciML/ModelingToolkit.jl/pull/707"},{"type":"text","text":"\n"},{"type":"user","user_id":"UQEDP1Q5V"}]}]}]},{"type":"message","subtype":"channel_join","ts":"1609333513.068400","user":"U01HYEN2ES0","text":"<@U01HYEN2ES0> has joined the channel","inviter":"UEP056STX"},{"client_msg_id":"9fa762e5-91a3-41ae-9e01-3552b0ad97f3","type":"message","text":"<@U69BL50BF> just confirming that the answer is no since I can't find one, but there isn't a preferred paper to cite for ModelingToolkit is there?","user":"U013L06JN15","ts":"1609334792.069000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BTw","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U69BL50BF"},{"type":"text","text":" just confirming that the answer is no since I can't find one, but there isn't a preferred paper to cite for ModelingToolkit is there?"}]}]}]},{"client_msg_id":"12da64d6-2def-4c43-b8f7-24a91f641c2d","type":"message","text":"<@U013L06JN15> there is none right now. Looking to get it out in March.","user":"U69BL50BF","ts":"1609335881.069400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rh+s","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U013L06JN15"},{"type":"text","text":" there is none right now. Looking to get it out in March."}]}]}]},{"client_msg_id":"63cdd9c0-1719-49a3-a7c6-5de1afec5e31","type":"message","text":"For now, cite DifferentialEquations","user":"U69BL50BF","ts":"1609335887.069700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"D=Oag","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For now, cite DifferentialEquations"}]}]}],"thread_ts":"1609335887.069700","reply_count":1,"reply_users_count":1,"latest_reply":"1609337375.069800","reply_users":["U013L06JN15"],"subscribed":false},{"client_msg_id":"18096c5c-a98f-4212-890a-ba0345ac1487","type":"message","text":"Is there some classic papers or standard references that stablished the technique implemented in the differentiable optimal control utilities in DiffEqFlux? Apart from the ones included in the `CITATION.bib` file.","user":"U6P4UPP9D","ts":"1609349515.073000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"J+eK6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there some classic papers or standard references that stablished the technique implemented in the differentiable optimal control utilities in DiffEqFlux? Apart from the ones included in the "},{"type":"text","text":"CITATION.bib","style":{"code":true}},{"type":"text","text":" file."}]}]}]},{"client_msg_id":"2f36afcd-ba76-4c7a-91a4-990eba87dc1e","type":"message","text":"The UDE paper references a neural optimal control paper you can dig up","user":"U69BL50BF","ts":"1609349582.073600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FB/jo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The UDE paper references a neural optimal control paper you can dig up"}]}]}]},{"client_msg_id":"b0d051f8-d2a1-4d79-a5eb-15b3830496e2","type":"message","text":"in general it's called the \"Direct method\" for optimal control","user":"U69BL50BF","ts":"1609349592.073900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LiV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in general it's called the \"Direct method\" for optimal control"}]}]}]},{"client_msg_id":"48848696-76c2-4ef4-85d5-879ef9102850","type":"message","text":"So IIUC, is it correct to say that the use of AD, reverse integration or NLP solvers after integration are different implementations and tradeoffs of the same Direct method?","user":"U6P4UPP9D","ts":"1609350164.075900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2brFx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So IIUC, is it correct to say that the use of AD, reverse integration or NLP solvers after integration are different implementations and tradeoffs of the same Direct method?"}]}]}]},{"client_msg_id":"3738ef41-0be3-4b96-892f-ca57c67c3228","type":"message","text":"no","user":"U69BL50BF","ts":"1609350409.076200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QdW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no"}]}]}]},{"client_msg_id":"9c633c8e-8dd4-426b-9509-62d81bc2736b","type":"message","text":"reverse integration is reversible computing AD, like NiLang.jl, applied in the continuous case","user":"U69BL50BF","ts":"1609350438.076900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6hQHH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"reverse integration is reversible computing AD, like NiLang.jl, applied in the continuous case"}]}]}]},{"client_msg_id":"fed96cf1-a8c9-498a-838b-ea3a16cd40a3","type":"message","text":"using NLP solvers of ODE integrators and differentiating through them in order to solve optimal control problems is the classic Direct method","user":"U69BL50BF","ts":"1609350472.077600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MHL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"using NLP solvers of ODE integrators and differentiating through them in order to solve optimal control problems is the classic Direct method"}]}]}]},{"client_msg_id":"5467ca6f-90c3-48d4-aff7-d9794fb2ab6b","type":"message","text":"those are two different concepts","user":"U69BL50BF","ts":"1609350492.077800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SFL8I","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"those are two different concepts"}]}]}]},{"client_msg_id":"f93f3ef0-897e-426f-b5c1-dfe662ae1672","type":"message","text":"and generally for optimal control you don't want to use reverse integration (which is why DiffEqFlux usually doesn't default to it)","user":"U69BL50BF","ts":"1609350512.078300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JaJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and generally for optimal control you don't want to use reverse integration (which is why DiffEqFlux usually doesn't default to it)"}]}]}]},{"client_msg_id":"0d159c53-ee63-4eed-9940-73c3d436e538","type":"message","text":"Yeah, I saw the ANODE paper that highlights the problem of doing that. I need to dig more on this, DiffEqFlux works nicely on my control problems and I wanted to cite correctly the origin of the idea, thanks for the pointers!","user":"U6P4UPP9D","ts":"1609352095.082100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TimF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, I saw the ANODE paper that highlights the problem of doing that. I need to dig more on this, DiffEqFlux works nicely on my control problems and I wanted to cite correctly the origin of the idea, thanks for the pointers!"}]}]}]},{"client_msg_id":"bcaa1fbb-bd94-43ec-a90a-3e955ad569c1","type":"message","text":"I have a very long discrete problem (300k steps) which takes a long time to compute. So the parameter training on top of it (via sciml_train, similar to what is done <https://diffeqflux.sciml.ai/stable/examples/optimization_ode/#Copy-Paste-Code-1|here>, just having a discrete problem instead of ODE problem) is very slow. I wonder if there are ways to inform faster parameter search by solving the problem only on the first X steps? Is this already implemented somehow?","user":"U01HTAK9DNG","ts":"1609410087.085600","team":"T68168MUP","edited":{"user":"U01HTAK9DNG","ts":"1609410099.000000"},"blocks":[{"type":"rich_text","block_id":"7Gl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have a very long discrete problem (300k steps) which takes a long time to compute. So the parameter training on top of it (via sciml_train, similar to what is done "},{"type":"link","url":"https://diffeqflux.sciml.ai/stable/examples/optimization_ode/#Copy-Paste-Code-1","text":"here"},{"type":"text","text":", just having a discrete problem instead of ODE problem) is very slow. I wonder if there are ways to inform faster parameter search by solving the problem only on the first X steps? Is this already implemented somehow?"}]}]}]},{"client_msg_id":"37b80e27-ba6b-44c2-a253-fda30e6f7e25","type":"message","text":"you can `remake` to have a shorter `tspan`","user":"U69BL50BF","ts":"1609420468.086100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Nb4y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can "},{"type":"text","text":"remake","style":{"code":true}},{"type":"text","text":" to have a shorter "},{"type":"text","text":"tspan","style":{"code":true}}]}]}]},{"client_msg_id":"0cdd745d-749d-471f-b5c6-62561582bb19","type":"message","text":"<@U6A936746> the bridge :disappointed:","user":"U69BL50BF","ts":"1609420832.086300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DRj","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U6A936746"},{"type":"text","text":" the bridge "},{"type":"emoji","name":"disappointed"}]}]}]},{"client_msg_id":"a31a8b2c-1ccc-458f-8efe-c5701a1146ed","type":"message","text":"Should be back any second now","user":"U6A936746","ts":"1609420898.086500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8YrZ8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Should be back any second now"}]}]}]},{"client_msg_id":"70bc5005-0492-4833-be4d-acf919d8bda4","type":"message","text":":pray:","user":"U69BL50BF","ts":"1609421095.086700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DjA3k","elements":[{"type":"rich_text_section","elements":[{"type":"emoji","name":"pray"}]}]}]},{"type":"message","subtype":"thread_broadcast","text":"But this means that I will also optimise on the shorter time span. Isn't it possible to do something like intelligent search pruning a-la <https://ml.informatik.uni-freiburg.de/papers/15-IJCAI-Extrapolation_of_Learning_Curves.pdf>?","user":"U01HTAK9DNG","ts":"1609441976.086800","thread_ts":"1609420468.086100","root":{"client_msg_id":"37b80e27-ba6b-44c2-a253-fda30e6f7e25","type":"message","text":"you can `remake` to have a shorter `tspan`","user":"U69BL50BF","ts":"1609420468.086100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Nb4y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can "},{"type":"text","text":"remake","style":{"code":true}},{"type":"text","text":" to have a shorter "},{"type":"text","text":"tspan","style":{"code":true}}]}]}],"thread_ts":"1609420468.086100","reply_count":1,"reply_users_count":1,"latest_reply":"1609441976.086800","reply_users":["U01HTAK9DNG"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"wkk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But this means that I will also optimise on the shorter time span. Isn't it possible to do something like intelligent search pruning a-la "},{"type":"link","url":"https://ml.informatik.uni-freiburg.de/papers/15-IJCAI-Extrapolation_of_Learning_Curves.pdf"},{"type":"text","text":"?"}]}]}],"client_msg_id":"ddcee4ed-2bcf-4e56-b7ec-67e81c45ecf1"},{"type":"message","text":"I'm trying to convert my `sol` to a dataframe, but my `u0` is a 33-element vector, which seems to cause my df to be 33xtime, instead of the timex33 like in the I/O docs.  Any idea why?  I want to append some solutions from different tspans, so I want time to be on the rows like the example.","files":[{"id":"F01HVKWFD50","created":1609530328,"timestamp":1609530328,"name":"image.png","title":"image.png","mimetype":"image/png","filetype":"png","pretty_type":"PNG","user":"ULZQ4DCSU","editable":false,"size":46288,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01HVKWFD50/image.png","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01HVKWFD50/download/image.png","thumb_64":"https://files.slack.com/files-tmb/T68168MUP-F01HVKWFD50-7202b5a354/image_64.png","thumb_80":"https://files.slack.com/files-tmb/T68168MUP-F01HVKWFD50-7202b5a354/image_80.png","thumb_360":"https://files.slack.com/files-tmb/T68168MUP-F01HVKWFD50-7202b5a354/image_360.png","thumb_360_w":360,"thumb_360_h":230,"thumb_480":"https://files.slack.com/files-tmb/T68168MUP-F01HVKWFD50-7202b5a354/image_480.png","thumb_480_w":480,"thumb_480_h":306,"thumb_160":"https://files.slack.com/files-tmb/T68168MUP-F01HVKWFD50-7202b5a354/image_160.png","thumb_720":"https://files.slack.com/files-tmb/T68168MUP-F01HVKWFD50-7202b5a354/image_720.png","thumb_720_w":720,"thumb_720_h":459,"original_w":729,"original_h":465,"thumb_tiny":"AwAeADCsOlKRUWaM0xEnFHFJR3oAWkPSikNAxCBSUv5UlAD6U03PtRkelAhx60hpNw9KCR6UDP/Z","permalink":"https://julialang.slack.com/files/ULZQ4DCSU/F01HVKWFD50/image.png","permalink_public":"https://slack-files.com/T68168MUP-F01HVKWFD50-4d67dd9b33","is_starred":false,"has_rich_preview":false}],"upload":false,"blocks":[{"type":"rich_text","block_id":"552+H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm trying to convert my "},{"type":"text","text":"sol","style":{"code":true}},{"type":"text","text":" to a dataframe, but my "},{"type":"text","text":"u0","style":{"code":true}},{"type":"text","text":" is a 33-element vector, which seems to cause my df to be 33xtime, instead of the timex33 like in the I/O docs.  Any idea why?  I want to append some solutions from different tspans, so I want time to be on the rows like the example."}]}]}],"user":"ULZQ4DCSU","display_as_bot":false,"ts":"1609530449.093200"},{"client_msg_id":"3f9edea9-cfc7-4fab-8fa1-e2eef354788c","type":"message","text":"your screenshot looks right?","user":"U69BL50BF","ts":"1609530541.093700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ai7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"your screenshot looks right?"}]}]}]},{"client_msg_id":"bc1dbc8a-5f35-4a47-8acb-8a8caf809380","type":"message","text":"It's supposed to be timestamp, value 1, etc. across columns though.  But, it's almost transposing.","user":"ULZQ4DCSU","ts":"1609530835.094400","team":"T68168MUP","edited":{"user":"ULZQ4DCSU","ts":"1609530877.000000"},"blocks":[{"type":"rich_text","block_id":"+fLg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's supposed to be timestamp, value 1, etc. across columns though.  But, it's almost transposing."}]}]}]},{"client_msg_id":"b96ab273-d638-4cff-88f3-8c7b7da4a19d","type":"message","text":"wait that's not the time steps? So `x1` is not the timeseries of the first variable?","user":"U69BL50BF","ts":"1609531479.095000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kJE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"wait that's not the time steps? So "},{"type":"text","text":"x1","style":{"code":true}},{"type":"text","text":" is not the timeseries of the first variable?"}]}]}]},{"client_msg_id":"0471aeb9-1fc1-4ea5-b998-a6deb6e2ca04","type":"message","text":"no x1, etc. are each time step","user":"ULZQ4DCSU","ts":"1609531611.095400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"udP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no x1, etc. are each time step"}]}]}]},{"client_msg_id":"031c1dd9-79f3-4a52-b2ab-0fe366521005","type":"message","text":"33 rows are for each variable","user":"ULZQ4DCSU","ts":"1609531622.095700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7BTP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"33 rows are for each variable"}]}]}]},{"client_msg_id":"ca7cadb6-5a05-4c7e-9cea-199329a79213","type":"message","text":"oh yes that's wrong then","user":"U69BL50BF","ts":"1609531854.095900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L4H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh yes that's wrong then"}]}]}]},{"client_msg_id":"13c852f7-533a-4db3-ae4e-f6a86ab71dc2","type":"message","text":"what version of DiffEqBase?","user":"U69BL50BF","ts":"1609531861.096200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rNg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what version of DiffEqBase?"}]}]}]},{"client_msg_id":"35b52884-be50-4c3a-80cb-868ba0ffee3d","type":"message","text":"v6.48.2","user":"ULZQ4DCSU","ts":"1609532006.096500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"m6FUx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"v6.48.2"}]}]}]},{"client_msg_id":"52da76fc-aad8-416c-851e-6a1a5a29b19d","type":"message","text":"can you update to 6.53?","user":"U69BL50BF","ts":"1609532107.096700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zRq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"can you update to 6.53?"}]}]}]}]}