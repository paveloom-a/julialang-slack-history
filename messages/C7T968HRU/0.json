{"cursor": 23, "messages": [{"client_msg_id":"06f6b36d-a0d6-4238-a3b4-ce35b42797ae","type":"message","text":"I saw that DiffEqBase introduces an alternative broadcasting operation `@..`. Is this aiming to address some of the performance issues with `@.`? Where is it defined in DiffEqBase?","user":"U011LUQ182G","ts":"1618194809.468700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"58SI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I saw that DiffEqBase introduces an alternative broadcasting operation "},{"type":"text","text":"@..","style":{"code":true}},{"type":"text","text":". Is this aiming to address some of the performance issues with "},{"type":"text","text":"@.","style":{"code":true}},{"type":"text","text":"? Where is it defined in DiffEqBase?"}]}]}]},{"client_msg_id":"66afee5c-4513-48c3-bd22-5fcfbf3abc9b","type":"message","text":"<https://github.com/SciML/DiffEqBase.jl/blob/master/src/diffeqfastbc.jl>","user":"U6788D83U","ts":"1618197032.468900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=ReRg","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/SciML/DiffEqBase.jl/blob/master/src/diffeqfastbc.jl"}]}]}]},{"client_msg_id":"97005496-c228-4ddf-b357-095fbaea900b","type":"message","text":"It basically converts broadcasts into maps","user":"U6788D83U","ts":"1618197060.469400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kQqp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It basically converts broadcasts into maps"}]}]}],"reactions":[{"name":"+1","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"a3a02d94-8d28-46ce-940c-d6462afe5c0b","type":"message","text":"But it’s just much better to avoid using bc all together if you are not concerned with genericness.","user":"U6788D83U","ts":"1618197120.470300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KlC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But it’s just much better to avoid using bc all together if you are not concerned with genericness."}]}]}]},{"client_msg_id":"5116ba38-bf0b-428b-888c-876ac0450446","type":"message","text":"It’s a pity that it cannot match the performance of ordinary for loops","user":"U6788D83U","ts":"1618197184.471100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KIh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It’s a pity that it cannot match the performance of ordinary for loops"}]}]}],"reactions":[{"name":"today-i-learned","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"EC63B91F-14E9-4A3A-9BFC-9788398D1FC7","type":"message","text":"Thanks! ","user":"U011LUQ182G","ts":"1618197308.471500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MgXT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks! "}]}]}]},{"client_msg_id":"4aa7fcd4-2887-4b17-819f-a463c8976c4b","type":"message","text":"It has the potential to be better though","user":"U6788D83U","ts":"1618197398.472300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"G=Rm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It has the potential to be better though"}]}]}]},{"client_msg_id":"74a45915-32c1-42ea-aba1-54637dcb771d","type":"message","text":"there’s much more structure in broadcasting statements than for loops","user":"U6788D83U","ts":"1618197427.472800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Z5O","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there’s much more structure in broadcasting statements than for loops"}]}]}]},{"client_msg_id":"4febc111-b566-4c02-82d3-7df82ca2b3b7","type":"message","text":"It’s pretty challenging to optimize away all the abstractions","user":"U6788D83U","ts":"1618197480.473300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eXI/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It’s pretty challenging to optimize away all the abstractions"}]}]}]},{"client_msg_id":"a235b23e-0188-4505-8bac-2959a5e15149","type":"message","text":"Since\n```julia&gt; [1] .+ [2, 3, 4]\n3-element Vector{Int64}:\n 3\n 4\n 5```\nis valid, LLVM has to figure out that arrays with length 1 are a special case and generate more efficient code for the length-n case.","user":"U6788D83U","ts":"1618197632.474900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lhg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Since\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> [1] .+ [2, 3, 4]\n3-element Vector{Int64}:\n 3\n 4\n 5"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"is valid, LLVM has to figure out that arrays with length 1 are a special case and generate more efficient code for the length-n case."}]}]}]},{"client_msg_id":"8b4809e5-b3de-4499-8e66-ac06ca672168","type":"message","text":"Maybe your student can hack the bc implementation in Julia to make it fast :slightly_smiling_face:","user":"U6788D83U","ts":"1618198386.480900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ci=t","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe your student can hack the bc implementation in Julia to make it fast "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"reactions":[{"name":"laughing","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"ef1bdca4-1079-4eeb-a8b7-200963f1c899","type":"message","text":"If I can find a student who really knows Julia, that’d be really useful for me too! \n\nI was interested in customizing broadcast to play nicer with @avx and multithreading, but since I’ve never even written a macro before, I figure I have some things to learn before writing anything fast and useful.","user":"U011LUQ182G","ts":"1618198604.484800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"grh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If I can find a student who really knows Julia, that’d be really useful for me too! \n\nI was interested in customizing broadcast to play nicer with @avx and multithreading, but since I’ve never even written a macro before, I figure I have some things to learn before writing anything fast and useful."}]}]}],"thread_ts":"1618198604.484800","reply_count":16,"reply_users_count":2,"latest_reply":"1618200244.000400","reply_users":["UM8JUNJG7","U011LUQ182G"],"is_locked":false,"subscribed":false},{"client_msg_id":"D285828B-49B6-4249-9747-814ADE01A51F","type":"message","text":"Why not just use `@avxt`?","user":"U8D9768Q6","ts":"1618198778.487100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YNXqg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Why not just use "},{"type":"text","text":"@avxt","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1618198778.487100","reply_count":8,"reply_users_count":3,"latest_reply":"1618199640.491200","reply_users":["U011LUQ182G","U8D9768Q6","UAUPJLBQX"],"is_locked":false,"subscribed":false},{"client_msg_id":"cd17edc9-bf72-4d7c-9ad3-89558f57d34c","type":"message","text":"The problem with broadcasts is that a lot of behavior is determined by information only known at runtime","user":"UAUPJLBQX","ts":"1618199762.492100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"71qR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The problem with broadcasts is that a lot of behavior is determined by information only known at runtime"}]}]}]},{"client_msg_id":"7b824981-392c-44b9-a5ec-61b32c7a72a6","type":"message","text":"Makes it harder to compile efficient code, as you don't have that runtime information.","user":"UAUPJLBQX","ts":"1618199792.492200","team":"T68168MUP","edited":{"user":"UAUPJLBQX","ts":"1618199822.000000"},"blocks":[{"type":"rich_text","block_id":"2z0C","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Makes it harder to compile efficient code, as you don't have that runtime information."}]}]}]},{"client_msg_id":"664e413a-1bc8-4aea-9591-fc681f69118b","type":"message","text":"We can enumerate all the special cases and optimize the common case.","user":"U6788D83U","ts":"1618199824.492800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YmI/G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We can enumerate all the special cases and optimize the common case."}]}]}]},{"client_msg_id":"7743201e-bafd-48b4-8047-ff078b6c138f","type":"message","text":"Enumerating all the special cases can really blow up code.","user":"UAUPJLBQX","ts":"1618199854.493200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Qe3j1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Enumerating all the special cases can really blow up code."}]}]}],"thread_ts":"1618199854.493200","reply_count":7,"reply_users_count":2,"latest_reply":"1618200742.008500","reply_users":["U8D9768Q6","UAUPJLBQX"],"is_locked":false,"subscribed":false},{"client_msg_id":"80ec7bd7-4a58-417b-a096-9b7b2b31ec2e","type":"message","text":"I am only aware of length-1 being the special case.","user":"U6788D83U","ts":"1618199874.493600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6fPm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am only aware of length-1 being the special case."}]}]}]},{"client_msg_id":"fefc2d24-e5c1-406b-9d61-0662acc279a2","type":"message","text":"If we have 5 3d arrays...","user":"UAUPJLBQX","ts":"1618199895.494200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zCMrc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If we have 5 3d arrays..."}]}]}]},{"client_msg_id":"3b24ceaa-f425-480d-ab39-acde2e94db56","type":"message","text":"But most of these don't need special handling","user":"UAUPJLBQX","ts":"1618199919.494600","team":"T68168MUP","edited":{"user":"UAUPJLBQX","ts":"1618199958.000000"},"blocks":[{"type":"rich_text","block_id":"nvq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But most of these don't need special handling"}]}]}]},{"client_msg_id":"73f41c9a-7383-4abc-8ef4-f3a7b7004216","type":"message","text":"size == 1 -&gt; stride = 0.\nThat gets most of them (and are the cases LV currently gets)","user":"UAUPJLBQX","ts":"1618199937.495000","team":"T68168MUP","edited":{"user":"UAUPJLBQX","ts":"1618200037.000000"},"blocks":[{"type":"rich_text","block_id":"=VoKT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"size == 1 -> stride = 0.\nThat gets most of them (and are the cases LV currently gets)"}]}]}]},{"client_msg_id":"4fecca54-7283-4995-8c14-2c3ec37135f8","type":"message","text":"We can use fallback code for all the cases that are not common","user":"U6788D83U","ts":"1618199938.495100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+9m","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We can use fallback code for all the cases that are not common"}]}]}]},{"client_msg_id":"2720fdb0-ac8f-4599-ba90-a5fcf543615c","type":"message","text":"Common being all arrays are of the same size (scalars are also ok)","user":"U6788D83U","ts":"1618199986.496200","team":"T68168MUP","edited":{"user":"U6788D83U","ts":"1618200020.000000"},"blocks":[{"type":"rich_text","block_id":"L4quO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Common being all arrays are of the same size (scalars are also ok)"}]}]}]},{"type":"message","text":"`size == 1` is already broken in LoopVectorization.jl though right?","files":[{"id":"F01UNBCBXEC","created":1618200072,"timestamp":1618200072,"name":"image.png","title":"image.png","mimetype":"image/png","filetype":"png","pretty_type":"PNG","user":"U8D9768Q6","editable":false,"size":16462,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01UNBCBXEC/image.png","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01UNBCBXEC/download/image.png","thumb_64":"https://files.slack.com/files-tmb/T68168MUP-F01UNBCBXEC-a57af254d9/image_64.png","thumb_80":"https://files.slack.com/files-tmb/T68168MUP-F01UNBCBXEC-a57af254d9/image_80.png","thumb_360":"https://files.slack.com/files-tmb/T68168MUP-F01UNBCBXEC-a57af254d9/image_360.png","thumb_360_w":360,"thumb_360_h":68,"thumb_480":"https://files.slack.com/files-tmb/T68168MUP-F01UNBCBXEC-a57af254d9/image_480.png","thumb_480_w":480,"thumb_480_h":90,"thumb_160":"https://files.slack.com/files-tmb/T68168MUP-F01UNBCBXEC-a57af254d9/image_160.png","thumb_720":"https://files.slack.com/files-tmb/T68168MUP-F01UNBCBXEC-a57af254d9/image_720.png","thumb_720_w":720,"thumb_720_h":135,"thumb_800":"https://files.slack.com/files-tmb/T68168MUP-F01UNBCBXEC-a57af254d9/image_800.png","thumb_800_w":800,"thumb_800_h":150,"original_w":840,"original_h":158,"thumb_tiny":"AwAJADCVoyWPzsOfWmeU3/PR/wA60aKnlNPaMzxEf+ej/nR5J/56P+daFFHKP2jM/wAo/wDPR/zpViIdT5jnn1q/RRyh7Rn/2Q==","permalink":"https://julialang.slack.com/files/U8D9768Q6/F01UNBCBXEC/image.png","permalink_public":"https://slack-files.com/T68168MUP-F01UNBCBXEC-51dfa976fb","is_starred":false,"has_rich_preview":false}],"upload":false,"blocks":[{"type":"rich_text","block_id":"qIP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"size == 1","style":{"code":true}},{"type":"text","text":" is already broken in LoopVectorization.jl though right?"}]}]}],"user":"U8D9768Q6","display_as_bot":false,"ts":"1618200075.497900"},{"client_msg_id":"17d9fd91-d33c-45b5-979b-16bf4202c04e","type":"message","text":"Yeah, I should probably add a check and fall back to regular materialize","user":"UAUPJLBQX","ts":"1618200101.498700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fe7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, I should probably add a check and fall back to regular materialize"}]}]}]},{"client_msg_id":"140862b4-4c3d-4457-bab1-fda07e237563","type":"message","text":"I should spend some time to improve `@..` and make a separate package for generic yet reasonably fast bc.","user":"U6788D83U","ts":"1618200111.498900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fTbH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I should spend some time to improve "},{"type":"text","text":"@..","style":{"code":true}},{"type":"text","text":" and make a separate package for generic yet reasonably fast bc."}]}]}],"reactions":[{"name":"pray","users":["U011LUQ182G","UM8JUNJG7","UAUPJLBQX"],"count":3}]},{"client_msg_id":"4990fbaf-7d98-4315-ae82-6fe079ba8f05","type":"message","text":"<@UAUPJLBQX> wanna team up?","user":"U6788D83U","ts":"1618200149.499500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NxS4t","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UAUPJLBQX"},{"type":"text","text":" wanna team up?"}]}]}],"reactions":[{"name":"+1","users":["UAUPJLBQX"],"count":1}]},{"client_msg_id":"5a4063e0-26a5-4a8c-b2ef-b6181a98a027","type":"message","text":"I'm down","user":"UAUPJLBQX","ts":"1618200178.499800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jKJ5R","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm down"}]}]}]},{"client_msg_id":"ad16819e-76af-4725-8eb5-e737ff58532c","type":"message","text":"Maybe LV broadcasting should also add a \"all same size\" branch to use linear indexing","user":"UAUPJLBQX","ts":"1618200241.000300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xHB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe LV broadcasting should also add a \"all same size\" branch to use linear indexing"}]}]}],"reactions":[{"name":"+1","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"128d6558-1d1c-46b5-90cd-c9ed4064d653","type":"message","text":"yeah","user":"U6788D83U","ts":"1618200256.000800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vss","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah"}]}]}]},{"client_msg_id":"dfe9342a-9ccd-42a5-81f2-3d431900b657","type":"message","text":"Manually calling `vec` was way faster in <@U011LUQ182G>'s example, since the matrices were 10x10_000.","user":"UAUPJLBQX","ts":"1618200324.001200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZumbU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Manually calling "},{"type":"text","text":"vec ","style":{"code":true}},{"type":"text","text":"was way faster in "},{"type":"user","user_id":"U011LUQ182G"},{"type":"text","text":"'s example, since the matrices were 10x10_000."}]}]}]},{"client_msg_id":"2a1d6fe3-ea3e-4efb-a721-83a13c07eec0","type":"message","text":"With AVX512, that meant only 10/16 vector lanes were getting used. A pretty extreme example of where that special casing would help a lot.","user":"UAUPJLBQX","ts":"1618200407.002500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"B6pb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"With AVX512, that meant only 10/16 vector lanes were getting used. A pretty extreme example of where that special casing would help a lot."}]}]}],"reactions":[{"name":"+1","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"9992f9a3-b7bc-4527-a048-349f66c160fb","type":"message","text":"that was nice to know - that `vec` could fix broadcast not auto-flattening","user":"U011LUQ182G","ts":"1618200432.003000","team":"T68168MUP","edited":{"user":"U011LUQ182G","ts":"1618200505.000000"},"blocks":[{"type":"rich_text","block_id":"YS/O","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that was nice to know - that "},{"type":"text","text":"vec","style":{"code":true}},{"type":"text","text":" could fix broadcast not auto-flattening"}]}]}]},{"type":"message","subtype":"thread_broadcast","text":"Wouldn't you just make a `@noinline` function barrier between all the special cases? Presumably the function barrier should be very little overhead compared to a broadcast expression, right?","user":"U8D9768Q6","ts":"1618200436.003200","thread_ts":"1618199854.493200","root":{"client_msg_id":"7743201e-bafd-48b4-8047-ff078b6c138f","type":"message","text":"Enumerating all the special cases can really blow up code.","user":"UAUPJLBQX","ts":"1618199854.493200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Qe3j1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Enumerating all the special cases can really blow up code."}]}]}],"thread_ts":"1618199854.493200","reply_count":7,"reply_users_count":2,"latest_reply":"1618200742.008500","reply_users":["U8D9768Q6","UAUPJLBQX"],"is_locked":false,"subscribed":false},"blocks":[{"type":"rich_text","block_id":"Q1x","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Wouldn't you just make a "},{"type":"text","text":"@noinline","style":{"code":true}},{"type":"text","text":" function barrier between all the special cases? Presumably the function barrier should be very little overhead compared to a broadcast expression, right?"}]}]}],"client_msg_id":"b9a8cb82-6a96-459f-9bec-785bc250e1ac","edited":{"user":"U8D9768Q6","ts":"1618200450.000000"}},{"client_msg_id":"8e1c1fa8-d419-40c3-b74a-6d92e1efce12","type":"message","text":"noinline will make bc allocate","user":"U6788D83U","ts":"1618200478.003900","team":"T68168MUP","edited":{"user":"U6788D83U","ts":"1618200517.000000"},"blocks":[{"type":"rich_text","block_id":"v2+1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"noinline will make bc allocate"}]}]}]},{"client_msg_id":"5bd6af6c-05d9-417b-a1b7-4e6ebcd21840","type":"message","text":"bc must inline all the functions to be not allocating","user":"U6788D83U","ts":"1618200503.004700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0ge","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"bc must inline all the functions to be not allocating"}]}]}],"reactions":[{"name":"+1","users":["UAUPJLBQX"],"count":1}]},{"client_msg_id":"bfed6f74-a1f0-4446-87a4-7e6a12e629a0","type":"message","text":"Well, it needs to inline everything except axes checks","user":"U6788D83U","ts":"1618200550.006000","team":"T68168MUP","edited":{"user":"U6788D83U","ts":"1618200554.000000"},"blocks":[{"type":"rich_text","block_id":"V6I","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well, it needs to inline everything except axes checks"}]}]}]},{"client_msg_id":"1f9012b0-f217-40ff-92d9-3686a2416317","type":"message","text":"I don't mean the functions in the broadcast expression, I mean the different forms of the expression","user":"U8D9768Q6","ts":"1618200567.006600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2AW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't mean the functions in the broadcast expression, I mean the different forms of the expression"}]}]}]},{"client_msg_id":"7cad1ff2-dc6b-4e40-86b6-7b4eb28fdae7","type":"message","text":"Urg, that needs some macro gymnastics that I don’t like","user":"U6788D83U","ts":"1618200612.007600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sXN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Urg, that needs some macro gymnastics that I don’t like"}]}]}]},{"client_msg_id":"1b918750-4994-40a4-aa48-b9ce13d67e1d","type":"message","text":"It makes broadcasting less powerful","user":"U6788D83U","ts":"1618200649.008300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kTv87","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It makes broadcasting less powerful"}]}]}]},{"client_msg_id":"4c34db4b-face-49bd-b437-af013f315382","type":"message","text":"Yeah, creating structs with functions fields (broadcastables) allocates, so they need to inline to get compiled away.","user":"UAUPJLBQX","ts":"1618200846.009500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L0/B3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, creating structs with functions fields (broadcastables) allocates, so they need to inline to get compiled away."}]}]}]},{"client_msg_id":"0504d209-da4b-422e-8b00-265f025e0825","type":"message","text":"LoopVectorization is set up to do those gymnastics","user":"UAUPJLBQX","ts":"1618200876.010000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"r0z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"LoopVectorization is set up to do those gymnastics"}]}]}]},{"client_msg_id":"2df3a460-1dfd-4bde-9d15-02ba408590f1","type":"message","text":"(it can run on multiple threads without allocations, afterall, and that obviously isn't inlined)","user":"UAUPJLBQX","ts":"1618200909.010700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RQt0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(it can run on multiple threads without allocations, afterall, and that obviously isn't inlined)"}]}]}]},{"client_msg_id":"2c9585ca-bba1-4b87-ad19-d6732f3a663b","type":"message","text":"But there is value of course to having a generic `@..` that handles arbitrary Julia types, like dual numbers","user":"UAUPJLBQX","ts":"1618200951.011300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TRks7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But there is value of course to having a generic "},{"type":"text","text":"@..","style":{"code":true}},{"type":"text","text":" that handles arbitrary Julia types, like dual numbers"}]}]}]},{"client_msg_id":"f7fb40d0-aaac-48e6-97a3-50b5e058db2d","type":"message","text":"or anything someone may want to throw at it. We should still be able to get that to work","user":"UAUPJLBQX","ts":"1618201000.011900","team":"T68168MUP","edited":{"user":"UAUPJLBQX","ts":"1618201023.000000"},"blocks":[{"type":"rich_text","block_id":"PDpST","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or anything someone may want to throw at it. We should still be able to get that to work"}]}]}]},{"client_msg_id":"352e9c34-4915-4bc3-836c-97ac54c399c6","type":"message","text":"but just inlining 3 different cases is probably reasonable enough.","user":"UAUPJLBQX","ts":"1618201035.012500","team":"T68168MUP","edited":{"user":"UAUPJLBQX","ts":"1618201058.000000"},"blocks":[{"type":"rich_text","block_id":"H/0kI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but just inlining 3 different cases is probably reasonable enough."}]}]}]},{"client_msg_id":"b94a53a4-9e21-49b1-9966-fb301baafa79","type":"message","text":"Also runtime alias checks? :stuck_out_tongue:","user":"U6788D83U","ts":"1618201064.013300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MVLAf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also runtime alias checks? "},{"type":"emoji","name":"stuck_out_tongue"}]}]}]},{"client_msg_id":"a63923d1-9fee-412b-a754-f47bd6747acd","type":"message","text":"Base broadcasting assumes non-aliasing","user":"UAUPJLBQX","ts":"1618201081.013800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tgd71","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Base broadcasting assumes non-aliasing"}]}]}]},{"client_msg_id":"31123c9a-ccdc-4b87-a46e-a22fd11dbebc","type":"message","text":"are we really going to support it?","user":"UAUPJLBQX","ts":"1618201090.014100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sQh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"are we really going to support it?"}]}]}]},{"client_msg_id":"c466bbb5-0e52-43b1-aff2-267a91e7c913","type":"message","text":"(e.g., you can't do a cumsum through aliased sums with broadcasting)","user":"UAUPJLBQX","ts":"1618201123.014600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uML8m","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(e.g., you can't do a cumsum through aliased sums with broadcasting)"}]}]}]},{"client_msg_id":"0bc0207d-560c-4e86-bbee-3de12b959ffa","type":"message","text":"Yeah, it’s probably fine not supporting it","user":"U6788D83U","ts":"1618201207.015500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/Xz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, it’s probably fine not supporting it"}]}]}]},{"client_msg_id":"b33b37f5-c5e0-4301-8526-1f6237003e05","type":"message","text":"bc with array alias is pretty weird","user":"U6788D83U","ts":"1618201220.015900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TeS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"bc with array alias is pretty weird"}]}]}]},{"client_msg_id":"1e94881f-25e3-4e70-a7d8-f0b4493030d9","type":"message","text":"Although, if we don't add `@simd ivdep` (which we can't add if we want `BitArray`s to work...)","user":"UAUPJLBQX","ts":"1618201255.016500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ocF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Although, if we don't add "},{"type":"text","text":"@simd ivdep","style":{"code":true}},{"type":"text","text":" (which we can't add if we want "},{"type":"text","text":"BitArray","style":{"code":true}},{"type":"text","text":"s to work...)"}]}]}]},{"client_msg_id":"2ba0019d-76d2-4474-a41f-cc2d287a50a3","type":"message","text":"LLVM would automatically add alias checks","user":"UAUPJLBQX","ts":"1618201262.016700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W6p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"LLVM would automatically add alias checks"}]}]}]},{"client_msg_id":"b96e639d-47f7-4364-810c-abb31eee4e85","type":"message","text":"Broadcasting breaks these by copying arrays if they alias","user":"UAUPJLBQX","ts":"1618201279.017100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HRCs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Broadcasting breaks these by copying arrays if they alias"}]}]}]},{"client_msg_id":"a4f2f878-9843-4b0d-a3da-64099289150e","type":"message","text":"I guess the semantics of broadcasting are that inputs aren't modified, so that's why it copies?","user":"UAUPJLBQX","ts":"1618201328.018000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"D1Jr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess the semantics of broadcasting are that inputs aren't modified, so that's why it copies?"}]}]}]},{"client_msg_id":"246a443c-90f3-4599-95f3-10e4d7e4e30e","type":"message","text":"Versus if LLVM's alias checks fail, it'd run the loops serially, modifying the inputs correctly (following the loop as written).","user":"UAUPJLBQX","ts":"1618201375.019400","team":"T68168MUP","edited":{"user":"UAUPJLBQX","ts":"1618201410.000000"},"blocks":[{"type":"rich_text","block_id":"3Wa+B","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Versus if LLVM's alias checks fail, it'd run the loops serially, modifying the inputs correctly (following the loop as written)."}]}]}]},{"client_msg_id":"2f10c6b6-2a50-4e30-8bfb-3d44a81b2fbe","type":"message","text":"If someone wrote a broadcast expression instead of loops, I get how maybe \"as the loops were written\" isn't exactly clear","user":"UAUPJLBQX","ts":"1618201440.020800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XWb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If someone wrote a broadcast expression instead of loops, I get how maybe \"as the loops were written\" isn't exactly clear"}]}]}]},{"client_msg_id":"4f6f2699-c233-45e7-ac72-d2b60c0c80f2","type":"message","text":"I am not sure how generic can `@..` be","user":"U6788D83U","ts":"1618201586.021500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"emezw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am not sure how generic can "},{"type":"text","text":"@..","style":{"code":true}},{"type":"text","text":" be"}]}]}]},{"client_msg_id":"3338a406-e921-4753-b257-1d41c86ac35c","type":"message","text":"We have to promote styles and such","user":"U6788D83U","ts":"1618201666.023400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EFa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We have to promote styles and such"}]}]}]},{"client_msg_id":"aade1d4f-6232-4768-b14c-9df34fb5a33f","type":"message","text":"Do we just want to be generic w/ respect to element type, and for array dims assume all dims unknown at compile time are equal?","user":"UAUPJLBQX","ts":"1618201695.024000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9mXjp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Do we just want to be generic w/ respect to element type, and for array dims assume all dims unknown at compile time are equal?"}]}]}],"reactions":[{"name":"+1","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"f3d041a4-06b3-4699-a854-5f6b9ececfd5","type":"message","text":"We can have a wrapper style, so `@.. a + b + c` becomes sth like `W(a) .+ W(b) .+ W(c)`","user":"U6788D83U","ts":"1618201731.024800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w1g","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We can have a wrapper style, so "},{"type":"text","text":"@.. a + b + c","style":{"code":true}},{"type":"text","text":" becomes sth like "},{"type":"text","text":"W(a) .+ W(b) .+ W(c)","style":{"code":true}}]}]}]},{"client_msg_id":"a7e1d390-3bbb-415d-83c4-b2e162957938","type":"message","text":"So just a fast bc for Array and StaticArray?","user":"U6788D83U","ts":"1618201763.025400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pTL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So just a fast bc for Array and StaticArray?"}]}]}]},{"client_msg_id":"df06fa47-38c1-4780-9836-a4ba9fb1ac7b","type":"message","text":"I think we can hijack other styles similar, copyto! and such, but generate more versions of them","user":"U6788D83U","ts":"1618201822.026900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"f80","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think we can hijack other styles similar, copyto! and such, but generate more versions of them"}]}]}]},{"client_msg_id":"d574661b-17a5-464c-a0d0-ad69f7440c32","type":"message","text":"So this can work generically for different array types as well","user":"U6788D83U","ts":"1618201842.027500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Xtax","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So this can work generically for different array types as well"}]}]}]},{"client_msg_id":"c52b6aec-8a36-4e74-a7bd-02d8ecb2912c","type":"message","text":"Or extending it by adding the extra 2 cases.\n\nFor broadcasting, I always recursively descended into the Broadcasted objects to reconstruct the loops","user":"UAUPJLBQX","ts":"1618201875.028100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IJkxr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Or extending it by adding the extra 2 cases.\n\nFor broadcasting, I always recursively descended into the Broadcasted objects to reconstruct the loops"}]}]}]},{"client_msg_id":"3a98d4a8-4b92-41f4-b16d-49e36f488640","type":"message","text":"Do you also construct the flattened `f` ?","user":"U6788D83U","ts":"1618201909.028900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"92JW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Do you also construct the flattened "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" ?"}]}]}]},{"client_msg_id":"9ceb1bc4-a3b4-46f1-b4be-fb1bdfcfbb50","type":"message","text":"No","user":"UAUPJLBQX","ts":"1618201917.029200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gwIYw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No"}]}]}]},{"client_msg_id":"b544c1ec-38b7-45b5-9ef2-c163fe45ebfd","type":"message","text":"Reconstructing the loops lets me avoid making the flattened `f`. You can instead make the unflattened bunch of calls on individual arguments","user":"UAUPJLBQX","ts":"1618202009.030900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"v+1A1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Reconstructing the loops lets me avoid making the flattened "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":". You can instead make the unflattened bunch of calls on individual arguments"}]}]}]},{"client_msg_id":"3bb4c226-a5ce-4458-a00f-3e454266b9d0","type":"message","text":"So the first target is just to have a faster bc for Array that’s generic wrt element types","user":"U6788D83U","ts":"1618202017.031300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mxlq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So the first target is just to have a faster bc for Array that’s generic wrt element types"}]}]}]},{"client_msg_id":"7ef0189d-ef0d-4dfb-a8e4-731f18343e1e","type":"message","text":"and avoid issues like the compiler giving up on recursions","user":"UAUPJLBQX","ts":"1618202027.031500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s/os","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and avoid issues like the compiler giving up on recursions"}]}]}]},{"client_msg_id":"a05e0f74-e1b3-40cc-9591-5a494beaccc8","type":"message","text":"Cool","user":"U6788D83U","ts":"1618202050.031700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s/ohN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Cool"}]}]}]},{"client_msg_id":"0984d6ca-ca13-40b5-9d65-1519e1d50da8","type":"message","text":"• Sizes have to match, and memory layouts. No mixing row major (e.g. `Adjoint`) and column major arrays...","user":"UAUPJLBQX","ts":"1618202372.033700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9cv","elements":[{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sizes have to match, and memory layouts. No mixing row major (e.g. "},{"type":"text","text":"Adjoint","style":{"code":true}},{"type":"text","text":") and column major arrays..."}]}],"style":"bullet","indent":0}]}]},{"client_msg_id":"a1cb6602-52e2-43c1-b968-bcf91ea41b71","type":"message","text":"<https://github.com/JuliaLang/julia/issues?q=is%3Aissue+is%3Aopen+broadcast+label%3Aperformance>","user":"UAUPJLBQX","ts":"1618202465.033900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"N6ty","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/issues?q=is%3Aissue+is%3Aopen+broadcast+label%3Aperformance"}]}]}]},{"client_msg_id":"06fe15d1-2fac-4330-b15a-f9441832ff2e","type":"message","text":"Gives some issues where we can make sure that our implementation wins","user":"UAUPJLBQX","ts":"1618202487.034500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xO=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Gives some issues where we can make sure that our implementation wins"}]}]}]},{"client_msg_id":"4b9cbb78-b87d-4e7b-9515-6c63f7cdc9a4","type":"message","text":"lol, that’s quite a few","user":"U6788D83U","ts":"1618202516.034700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ou4P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"lol, that’s quite a few"}]}]}]},{"client_msg_id":"98e95021-686e-472b-9fe5-39a3f7c7fdbf","type":"message","text":"I like the idea of just generating for loops given a broadcast tree","user":"U6788D83U","ts":"1618202559.035300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lAW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I like the idea of just generating for loops given a broadcast tree"}]}]}]},{"client_msg_id":"9e67c08a-b38e-4e29-8f0e-24ff474af30e","type":"message","text":"<@UAUPJLBQX> <@U6788D83U> what about just adding a few more dispatches?","user":"U69BL50BF","ts":"1618226447.036700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wPcXc","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UAUPJLBQX"},{"type":"text","text":" "},{"type":"user","user_id":"U6788D83U"},{"type":"text","text":" what about just adding a few more dispatches?"}]}]}]},{"client_msg_id":"1040301e-f231-4c8c-b93b-2c81e2b8de1c","type":"message","text":"I think it's fine to have an Array dispatch that does absolutely everything","user":"U69BL50BF","ts":"1618226462.037200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"koI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think it's fine to have an Array dispatch that does absolutely everything"}]}]}]},{"client_msg_id":"b1e1a836-310a-40bb-bbdf-04cc1129d25a","type":"message","text":"a BitArray that doesn't ivdep","user":"U69BL50BF","ts":"1618226467.037400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vikc0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"a BitArray that doesn't ivdep"}]}]}]},{"client_msg_id":"315f37a8-4ac8-4e8f-a7ce-1335123e45df","type":"message","text":"etc.","user":"U69BL50BF","ts":"1618226468.037600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EJZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"etc."}]}]}],"thread_ts":"1618226468.037600","reply_count":1,"reply_users_count":1,"latest_reply":"1618228138.045700","reply_users":["UAUPJLBQX"],"is_locked":false,"subscribed":false},{"client_msg_id":"62a3f3a7-2223-413c-a212-fa88b28f1073","type":"message","text":"It seems that if one generates a method on the fly with `ModelingToolkit` and/or `Symbolics.jl`  (e.g. an analytical derivative), there arise some world age issues when calling it later (i.e. I get the classic `The applicable method may be too new: running in world age...` error). Does anyone know the right way to do this to avoid this issue?","user":"U01H36BUDJB","ts":"1618226703.039300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"u53","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It seems that if one generates a method on the fly with "},{"type":"text","text":"ModelingToolkit","style":{"code":true}},{"type":"text","text":" and/or "},{"type":"text","text":"Symbolics.jl","style":{"code":true}},{"type":"text","text":"  (e.g. an analytical derivative), there arise some world age issues when calling it later (i.e. I get the classic "},{"type":"text","text":"The applicable method may be too new: running in world age...","style":{"code":true}},{"type":"text","text":" error). Does anyone know the right way to do this to avoid this issue?"}]}]}]},{"client_msg_id":"fc8c4373-711a-43a5-83df-dfbd19dd4f31","type":"message","text":"you used `expression=Val{false}` or RuntimeGeneratedFunctions.jl?","user":"U69BL50BF","ts":"1618227298.039800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZasEn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you used `expression=Val{false}` or RuntimeGeneratedFunctions.jl?"}]}]}]},{"client_msg_id":"bf75a128-d08d-4468-a80e-380493142fc8","type":"message","text":"ehm... no I just did `eval(expr)` where `expr` was generated by `build_function` and then stored the resulting function in a struct :sweat_smile:","user":"U01H36BUDJB","ts":"1618227410.040500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"A2/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ehm... no I just did "},{"type":"text","text":"eval(expr)","style":{"code":true}},{"type":"text","text":" where "},{"type":"text","text":"expr","style":{"code":true}},{"type":"text","text":" was generated by "},{"type":"text","text":"build_function","style":{"code":true}},{"type":"text","text":" and then stored the resulting function in a struct "},{"type":"emoji","name":"sweat_smile"}]}]}]},{"client_msg_id":"54d61414-8924-4040-853b-c0bda23d2664","type":"message","text":"should I use `RuntimeGeneratedFunctions.jl` ?","user":"U01H36BUDJB","ts":"1618227423.040800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rw/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"should I use "},{"type":"text","text":"RuntimeGeneratedFunctions.jl","style":{"code":true}},{"type":"text","text":" ?"}]}]}]},{"client_msg_id":"4ff7cd0c-3246-48ae-8cc8-80708b5a0c5f","type":"message","text":"yes","user":"U69BL50BF","ts":"1618227475.041000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1Uzca","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes"}]}]}],"reactions":[{"name":"+1","users":["U01H36BUDJB"],"count":1}]},{"client_msg_id":"261cbacd-d67c-4f7a-a962-3e47cb954e27","type":"message","text":"<@U69BL50BF> Using RuntimeGeneratedFunctions, the generated function seems to be allocating, even though it theoretically shouldn't. Would it matter that it was generated from an (immutable) struct method (i.e. callable struct)?","user":"U01H36BUDJB","ts":"1618231278.049900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Wm8","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U69BL50BF"},{"type":"text","text":" Using RuntimeGeneratedFunctions, the generated function seems to be allocating, even though it theoretically shouldn't. Would it matter that it was generated from an (immutable) struct method (i.e. callable struct)?"}]}]}]},{"client_msg_id":"ed8b28f2-89f1-4a63-8bda-b5fa91ea76ac","type":"message","text":"no, shouldn't matter.","user":"U69BL50BF","ts":"1618231299.050100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"V7+1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no, shouldn't matter."}]}]}],"thread_ts":"1618231299.050100","reply_count":2,"reply_users_count":2,"latest_reply":"1618231877.051100","reply_users":["U01H36BUDJB","U69BL50BF"],"is_locked":false,"subscribed":false},{"client_msg_id":"525d521e-54cc-4797-a403-a76b2b49f4c4","type":"message","text":"hmm...","user":"U01H36BUDJB","ts":"1618231312.050300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"A145Z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmm..."}]}]}]},{"client_msg_id":"76b1360d-4890-46dd-a54e-ccf57e54fc7c","type":"message","text":"I’m using a continuous callback to check when some condition `x` hits zero and alter my system parameters `p` if so. I’d like to inspect this condition later on. Right know I am using a saving callback for that, because `x` depends und `p` and since the history of `p` is not saved I can’t recover the information from the solution.\nTwo problems:\n- two conditions for two callbacks. Therefore I am calculating `x` twice for every time step.\n- unlike in the solution, the saving callback won’t save right before the other affect kicks in: in the plots it looks like my condition was never actually reached.\n\nAny ideas?","user":"U01BYANF42K","ts":"1618231364.050700","team":"T68168MUP","edited":{"user":"U01BYANF42K","ts":"1618231417.000000"},"blocks":[{"type":"rich_text","block_id":"=7v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’m using a continuous callback to check when some condition "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" hits zero and alter my system parameters "},{"type":"text","text":"p","style":{"code":true}},{"type":"text","text":" if so. I’d like to inspect this condition later on. Right know I am using a saving callback for that, because "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" depends und "},{"type":"text","text":"p","style":{"code":true}},{"type":"text","text":" and since the history of "},{"type":"text","text":"p","style":{"code":true}},{"type":"text","text":" is not saved I can’t recover the information from the solution.\nTwo problems:\n- two conditions for two callbacks. Therefore I am calculating "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" twice for every time step.\n- unlike in the solution, the saving callback won’t save right before the other affect kicks in: in the plots it looks like my condition was never actually reached.\n\nAny ideas?"}]}]}]},{"client_msg_id":"f9c31bdf-cb4c-4f61-93e3-b60dd72e26d6","type":"message","text":"Hi <@U69BL50BF> I cant use DiffEqOp, I get:\n\n```julia&gt; using DiffEqOperators\n[ Info: Precompiling DiffEqOperators [9fdde737-9c7f-55bf-ade8-46b3f136cc48]\nERROR: LoadError: LoadError: UndefVarError: SciMLBase not defined\nStacktrace:\n  [1] top-level scope\n    @ ~/.julia/packages/DiffEqOperators/DMYUH/src/MOLFiniteDifference/MOL_discretization.jl:14\n  [2] include(mod::Module, _path::String)\n    @ Base ./Base.jl:386\n  [3] include(x::String)\n    @ DiffEqOperators ~/.julia/packages/DiffEqOperators/DMYUH/src/DiffEqOperators.jl:1\n  [4] top-level scope\n    @ ~/.julia/packages/DiffEqOperators/DMYUH/src/DiffEqOperators.jl:51\n  [5] include\n    @ ./Base.jl:386 [inlined]\n  [6] include_package_for_output(pkg::Base.PkgId, input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId, UInt64}}, source::Nothing)\n    @ Base ./loading.jl:1213\n  [7] top-level scope\n    @ none:1\n  [8] eval\n    @ ./boot.jl:360 [inlined]\n  [9] eval(x::Expr)\n    @ Base.MainInclude ./client.jl:446\n [10] top-level scope\n    @ none:1\nin expression starting at /home/rveltz/.julia/packages/DiffEqOperators/DMYUH/src/MOLFiniteDifference/MOL_discretization.jl:14\nin expression starting at /home/rveltz/.julia/packages/DiffEqOperators/DMYUH/src/DiffEqOperators.jl:1\nERROR: Failed to precompile DiffEqOperators [9fdde737-9c7f-55bf-ade8-46b3f136cc48] to /home/rveltz/.julia/compiled/v1.6/DiffEqOperators/jl_1FxxFE.\nStacktrace:\n [1] error(s::String)\n   @ Base ./error.jl:33\n [2] compilecache(pkg::Base.PkgId, path::String, internal_stderr::Base.TTY, internal_stdout::Base.TTY)\n   @ Base ./loading.jl:1360\n [3] compilecache(pkg::Base.PkgId, path::String)\n   @ Base ./loading.jl:1306\n [4] _require(pkg::Base.PkgId)\n   @ Base ./loading.jl:1021\n [5] require(uuidkey::Base.PkgId)\n   @ Base ./loading.jl:914\n [6] require(into::Module, mod::Symbol)\n   @ Base ./loading.jl:901 ```\nIs it expected? Note that\n\n```(@v1.6) pkg&gt; st\n      Status `~/.julia/environments/v1.6/Project.toml`\n  [621f4979] AbstractFFTs v1.0.1\n  [6e4b80f9] BenchmarkTools v0.5.0\n  [0f109fa4] BifurcationKit v0.1.3 `<https://github.com/rveltz/BifurcationKit.jl.git#master>`\n  [0ca6dcf5] BlockPowerFlow v0.1.0 `<https://github.com/exanauts/BlockPowerFlow.jl#master>`\n  [052768ef] CUDA v2.6.3\n  [9fdde737] DiffEqOperators v4.23.0\n  [7a1cc6ca] FFTW v1.3.2\n  [28b8d3ca] GR v0.57.3\n  [0b1a1467] KrylovKit v0.5.2\n  [7f56f5a3] LSODA v0.6.2\n  [7a12625a] LinearMaps v3.3.0\n  [4d4711f2] MatrixMarket v0.3.1\n  [cddba4cf] MeanField2d v0.1.0 `<https://gitlab.inria.fr/rveltz/meanfield2d.git#master>`\n  [d96e819e] Parameters v0.12.2\n  [86206cdf] PiecewiseDeterministicMarkovProcesses v0.0.1 `<https://github.com/rveltz/PiecewiseDeterministicMarkovProcesses.jl.git#master>`\n  [91a5bcdd] Plots v1.11.2\n  [92933f4c] ProgressMeter v1.5.0\n  [295af30f] Revise v3.1.14\n  [0bca4576] SciMLBase v1.11.0\n  [efcf1570] Setfield v0.7.0\n  [65edfddc] SixelTerm v0.1.0 `<https://github.com/tshort/SixelTerm.jl#master>````","user":"U7GQE9JP9","ts":"1618235425.052700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XsK1Q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi "},{"type":"user","user_id":"U69BL50BF"},{"type":"text","text":" I cant use DiffEqOp, I get:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using DiffEqOperators\n[ Info: Precompiling DiffEqOperators [9fdde737-9c7f-55bf-ade8-46b3f136cc48]\nERROR: LoadError: LoadError: UndefVarError: SciMLBase not defined\nStacktrace:\n  [1] top-level scope\n    @ ~/.julia/packages/DiffEqOperators/DMYUH/src/MOLFiniteDifference/MOL_discretization.jl:14\n  [2] include(mod::Module, _path::String)\n    @ Base ./Base.jl:386\n  [3] include(x::String)\n    @ DiffEqOperators ~/.julia/packages/DiffEqOperators/DMYUH/src/DiffEqOperators.jl:1\n  [4] top-level scope\n    @ ~/.julia/packages/DiffEqOperators/DMYUH/src/DiffEqOperators.jl:51\n  [5] include\n    @ ./Base.jl:386 [inlined]\n  [6] include_package_for_output(pkg::Base.PkgId, input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId, UInt64}}, source::Nothing)\n    @ Base ./loading.jl:1213\n  [7] top-level scope\n    @ none:1\n  [8] eval\n    @ ./boot.jl:360 [inlined]\n  [9] eval(x::Expr)\n    @ Base.MainInclude ./client.jl:446\n [10] top-level scope\n    @ none:1\nin expression starting at /home/rveltz/.julia/packages/DiffEqOperators/DMYUH/src/MOLFiniteDifference/MOL_discretization.jl:14\nin expression starting at /home/rveltz/.julia/packages/DiffEqOperators/DMYUH/src/DiffEqOperators.jl:1\nERROR: Failed to precompile DiffEqOperators [9fdde737-9c7f-55bf-ade8-46b3f136cc48] to /home/rveltz/.julia/compiled/v1.6/DiffEqOperators/jl_1FxxFE.\nStacktrace:\n [1] error(s::String)\n   @ Base ./error.jl:33\n [2] compilecache(pkg::Base.PkgId, path::String, internal_stderr::Base.TTY, internal_stdout::Base.TTY)\n   @ Base ./loading.jl:1360\n [3] compilecache(pkg::Base.PkgId, path::String)\n   @ Base ./loading.jl:1306\n [4] _require(pkg::Base.PkgId)\n   @ Base ./loading.jl:1021\n [5] require(uuidkey::Base.PkgId)\n   @ Base ./loading.jl:914\n [6] require(into::Module, mod::Symbol)\n   @ Base ./loading.jl:901 "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Is it expected? Note that\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"(@v1.6) pkg> st\n      Status `~/.julia/environments/v1.6/Project.toml`\n  [621f4979] AbstractFFTs v1.0.1\n  [6e4b80f9] BenchmarkTools v0.5.0\n  [0f109fa4] BifurcationKit v0.1.3 `"},{"type":"link","url":"https://github.com/rveltz/BifurcationKit.jl.git#master"},{"type":"text","text":"`\n  [0ca6dcf5] BlockPowerFlow v0.1.0 `"},{"type":"link","url":"https://github.com/exanauts/BlockPowerFlow.jl#master"},{"type":"text","text":"`\n  [052768ef] CUDA v2.6.3\n  [9fdde737] DiffEqOperators v4.23.0\n  [7a1cc6ca] FFTW v1.3.2\n  [28b8d3ca] GR v0.57.3\n  [0b1a1467] KrylovKit v0.5.2\n  [7f56f5a3] LSODA v0.6.2\n  [7a12625a] LinearMaps v3.3.0\n  [4d4711f2] MatrixMarket v0.3.1\n  [cddba4cf] MeanField2d v0.1.0 `"},{"type":"link","url":"https://gitlab.inria.fr/rveltz/meanfield2d.git#master"},{"type":"text","text":"`\n  [d96e819e] Parameters v0.12.2\n  [86206cdf] PiecewiseDeterministicMarkovProcesses v0.0.1 `"},{"type":"link","url":"https://github.com/rveltz/PiecewiseDeterministicMarkovProcesses.jl.git#master"},{"type":"text","text":"`\n  [91a5bcdd] Plots v1.11.2\n  [92933f4c] ProgressMeter v1.5.0\n  [295af30f] Revise v3.1.14\n  [0bca4576] SciMLBase v1.11.0\n  [efcf1570] Setfield v0.7.0\n  [65edfddc] SixelTerm v0.1.0 `"},{"type":"link","url":"https://github.com/tshort/SixelTerm.jl#master"},{"type":"text","text":"`"}]}]}]},{"client_msg_id":"d43c4bef-2ed9-4740-9a90-278a31b0c27a","type":"message","text":"uhh not expected.","user":"U69BL50BF","ts":"1618235479.052900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ux3B","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"uhh not expected."}]}]}]},{"client_msg_id":"0485e7b1-d654-4027-b10b-a4ea86e7dce8","type":"message","text":"what can I do?","user":"U7GQE9JP9","ts":"1618235658.053100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DFjZZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what can I do?"}]}]}]},{"client_msg_id":"b330ccb5-3ea2-4e27-bd68-6f020019b067","type":"message","text":"`]resolve`?","user":"U69BL50BF","ts":"1618235890.053600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fQg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"]resolve","style":{"code":true}},{"type":"text","text":"?"}]}]}]},{"client_msg_id":"b04a7719-9589-4858-b1d9-41835ad9fd0a","type":"message","text":"Add the SciML base package","user":"U01HMTRF78E","ts":"1618235894.053700","team":"T68168MUP","edited":{"user":"U01HMTRF78E","ts":"1618235933.000000"},"blocks":[{"type":"rich_text","block_id":"YdiD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Add the SciML base package"}]}]}]},{"client_msg_id":"d6c5e1f2-b6e3-4ad3-b804-df5efe9daf47","type":"message","text":"I did both, see the `]st`  above","user":"U7GQE9JP9","ts":"1618235907.054100","team":"T68168MUP","edited":{"user":"U7GQE9JP9","ts":"1618235924.000000"},"blocks":[{"type":"rich_text","block_id":"Qm537","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I did both, see the "},{"type":"text","text":"]st","style":{"code":true}},{"type":"text","text":"  above"}]}]}]},{"client_msg_id":"f65107be-83cd-400c-8888-16bbe52ae5f1","type":"message","text":"The tests run fine, so I think you just need to `resolve`?","user":"U69BL50BF","ts":"1618235949.054700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MAghs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The tests run fine, so I think you just need to "},{"type":"text","text":"resolve","style":{"code":true}},{"type":"text","text":"?"}]}]}]},{"client_msg_id":"bc5895e8-1fc9-4e24-98a3-b4a87be5c3ff","type":"message","text":"no luckl","user":"U7GQE9JP9","ts":"1618236295.054900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"n3PZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no luckl"}]}]}]},{"client_msg_id":"f7922fa5-9cd7-4ef7-a482-03b8d5bd63a3","type":"message","text":"odd.","user":"U69BL50BF","ts":"1618236304.055100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=Hz3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"odd."}]}]}]},{"client_msg_id":"b1dd1f63-c3b7-4c50-a0d7-9c9b4ce0c799","type":"message","text":"```[rveltz@nefgpu01 ~]$ sh juliaLoad.sh\nloading CUDA OK\n               _\n   _       _ _(_)_     |  Documentation: <https://docs.julialang.org>\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.6.0 (2021-03-24)\n _/ |\\__'_|_|_|\\__'_|  |\n|__/                   |\n\njulia&gt; using Di\nDiffEqOperators Distributed\njulia&gt; using DiffEqOperators\n[ Info: Precompiling DiffEqOperators [9fdde737-9c7f-55bf-ade8-46b3f136cc48]\nERROR: LoadError: LoadError: UndefVarError: SciMLBase not defined\nStacktrace:\n  [1] top-level scope\n    @ ~/.julia/packages/DiffEqOperators/DMYUH/src/MOLFiniteDifference/MOL_discretization.jl:14\n  [2] include(mod::Module, _path::String)\n    @ Base ./Base.jl:386\n  [3] include(x::String)\n    @ DiffEqOperators ~/.julia/packages/DiffEqOperators/DMYUH/src/DiffEqOperators.jl:1\n  [4] top-level scope\n    @ ~/.julia/packages/DiffEqOperators/DMYUH/src/DiffEqOperators.jl:51\n  [5] include\n    @ ./Base.jl:386 [inlined]\n  [6] include_package_for_output(pkg::Base.PkgId, input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId, UInt64}}, source::Nothing)\n    @ Base ./loading.jl:1213\n  [7] top-level scope\n    @ none:1\n  [8] eval\n    @ ./boot.jl:360 [inlined]\n  [9] eval(x::Expr)\n    @ Base.MainInclude ./client.jl:446\n [10] top-level scope\n    @ none:1\nin expression starting at /home/rveltz/.julia/packages/DiffEqOperators/DMYUH/src/MOLFiniteDifference/MOL_discretization.jl:14\nin expression starting at /home/rveltz/.julia/packages/DiffEqOperators/DMYUH/src/DiffEqOperators.jl:1\nERROR: Failed to precompile DiffEqOperators [9fdde737-9c7f-55bf-ade8-46b3f136cc48] to /home/rveltz/.julia/compiled/v1.6/DiffEqOperators/jl_kXCstl.\nStacktrace:\n [1] error(s::String)\n   @ Base ./error.jl:33\n [2] compilecache(pkg::Base.PkgId, path::String, internal_stderr::Base.TTY, internal_stdout::Base.TTY)\n   @ Base ./loading.jl:1360\n [3] compilecache(pkg::Base.PkgId, path::String)\n   @ Base ./loading.jl:1306\n [4] _require(pkg::Base.PkgId)\n   @ Base ./loading.jl:1021\n [5] require(uuidkey::Base.PkgId)\n   @ Base ./loading.jl:914\n [6] require(into::Module, mod::Symbol)\n   @ Base ./loading.jl:901\n\n(@v1.6) pkg&gt; resolve\n  No Changes to `~/.julia/environments/v1.6/Project.toml`\n  No Changes to `~/.julia/environments/v1.6/Manifest.toml`\n\njulia&gt; using DiffEqOperators\n[ Info: Precompiling DiffEqOperators [9fdde737-9c7f-55bf-ade8-46b3f136cc48]\nERROR: LoadError: LoadError: UndefVarError: SciMLBase not defined\nStacktrace:\n  [1] top-level scope\n    @ ~/.julia/packages/DiffEqOperators/DMYUH/src/MOLFiniteDifference/MOL_discretization.jl:14\n  [2] include(mod::Module, _path::String)\n    @ Base ./Base.jl:386\n  [3] include(x::String)\n    @ DiffEqOperators ~/.julia/packages/DiffEqOperators/DMYUH/src/DiffEqOperators.jl:1\n  [4] top-level scope\n    @ ~/.julia/packages/DiffEqOperators/DMYUH/src/DiffEqOperators.jl:51\n  [5] include\n    @ ./Base.jl:386 [inlined]\n  [6] include_package_for_output(pkg::Base.PkgId, input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId, UInt64}}, source::Nothing)\n    @ Base ./loading.jl:1213\n  [7] top-level scope\n    @ none:1\n  [8] eval\n    @ ./boot.jl:360 [inlined]\n  [9] eval(x::Expr)\n    @ Base.MainInclude ./client.jl:446\n [10] top-level scope\n    @ none:1\nin expression starting at /home/rveltz/.julia/packages/DiffEqOperators/DMYUH/src/MOLFiniteDifference/MOL_discretization.jl:14\nin expression starting at /home/rveltz/.julia/packages/DiffEqOperators/DMYUH/src/DiffEqOperators.jl:1\nERROR: Failed to precompile DiffEqOperators [9fdde737-9c7f-55bf-ade8-46b3f136cc48] to /home/rveltz/.julia/compiled/v1.6/DiffEqOperators/jl_FFcsjv.\nStacktrace:\n [1] error(s::String)\n   @ Base ./error.jl:33\n [2] compilecache(pkg::Base.PkgId, path::String, internal_stderr::Base.TTY, internal_stdout::Base.TTY)\n   @ Base ./loading.jl:1360\n [3] compilecache(pkg::Base.PkgId, path::String)\n   @ Base ./loading.jl:1306\n [4] _require(pkg::Base.PkgId)\n   @ Base ./loading.jl:1021\n [5] require(uuidkey::Base.PkgId)\n   @ Base ./loading.jl:914\n [6] require(into::Module, mod::Symbol)\n   @ Base ./loading.jl:901\n\n(@v1.6) pkg&gt; s\nERROR: Could not determine command\n\n(@v1.6) pkg&gt; st\n      Status `~/.julia/environments/v1.6/Project.toml`\n  [621f4979] AbstractFFTs v1.0.1\n  [6e4b80f9] BenchmarkTools v0.5.0\n  [0f109fa4] BifurcationKit v0.1.3 `<https://github.com/rveltz/BifurcationKit.jl.git#master>`\n  [0ca6dcf5] BlockPowerFlow v0.1.0 `<https://github.com/exanauts/BlockPowerFlow.jl#master>`\n  [052768ef] CUDA v2.6.3\n  [9fdde737] DiffEqOperators v4.23.0\n  [7a1cc6ca] FFTW v1.3.2\n  [28b8d3ca] GR v0.57.3\n  [0b1a1467] KrylovKit v0.5.2\n  [7f56f5a3] LSODA v0.6.2\n  [7a12625a] LinearMaps v3.3.0\n  [4d4711f2] MatrixMarket v0.3.1\n  [cddba4cf] MeanField2d v0.1.0 `<https://gitlab.inria.fr/rveltz/meanfield2d.git#master>`\n  [d96e819e] Parameters v0.12.2\n  [86206cdf] PiecewiseDeterministicMarkovProcesses v0.0.1 `<https://github.com/rveltz/PiecewiseDeterministicMarkovProcesses.jl.git#master>`\n  [91a5bcdd] Plots v1.11.2\n  [92933f4c] ProgressMeter v1.5.0\n  [295af30f] Revise v3.1.14\n  [0bca4576] SciMLBase v1.11.1\n  [efcf1570] Setfield v0.7.0\n  [65edfddc] SixelTerm v0.1.0 `<https://github.com/tshort/SixelTerm.jl#master>````","user":"U7GQE9JP9","ts":"1618236335.055500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Gc4","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"[rveltz@nefgpu01 ~]$ sh juliaLoad.sh\nloading CUDA OK\n               _\n   _       _ _(_)_     |  Documentation: "},{"type":"link","url":"https://docs.julialang.org"},{"type":"text","text":"\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.6.0 (2021-03-24)\n _/ |\\__'_|_|_|\\__'_|  |\n|__/                   |\n\njulia> using Di\nDiffEqOperators Distributed\njulia> using DiffEqOperators\n[ Info: Precompiling DiffEqOperators [9fdde737-9c7f-55bf-ade8-46b3f136cc48]\nERROR: LoadError: LoadError: UndefVarError: SciMLBase not defined\nStacktrace:\n  [1] top-level scope\n    @ ~/.julia/packages/DiffEqOperators/DMYUH/src/MOLFiniteDifference/MOL_discretization.jl:14\n  [2] include(mod::Module, _path::String)\n    @ Base ./Base.jl:386\n  [3] include(x::String)\n    @ DiffEqOperators ~/.julia/packages/DiffEqOperators/DMYUH/src/DiffEqOperators.jl:1\n  [4] top-level scope\n    @ ~/.julia/packages/DiffEqOperators/DMYUH/src/DiffEqOperators.jl:51\n  [5] include\n    @ ./Base.jl:386 [inlined]\n  [6] include_package_for_output(pkg::Base.PkgId, input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId, UInt64}}, source::Nothing)\n    @ Base ./loading.jl:1213\n  [7] top-level scope\n    @ none:1\n  [8] eval\n    @ ./boot.jl:360 [inlined]\n  [9] eval(x::Expr)\n    @ Base.MainInclude ./client.jl:446\n [10] top-level scope\n    @ none:1\nin expression starting at /home/rveltz/.julia/packages/DiffEqOperators/DMYUH/src/MOLFiniteDifference/MOL_discretization.jl:14\nin expression starting at /home/rveltz/.julia/packages/DiffEqOperators/DMYUH/src/DiffEqOperators.jl:1\nERROR: Failed to precompile DiffEqOperators [9fdde737-9c7f-55bf-ade8-46b3f136cc48] to /home/rveltz/.julia/compiled/v1.6/DiffEqOperators/jl_kXCstl.\nStacktrace:\n [1] error(s::String)\n   @ Base ./error.jl:33\n [2] compilecache(pkg::Base.PkgId, path::String, internal_stderr::Base.TTY, internal_stdout::Base.TTY)\n   @ Base ./loading.jl:1360\n [3] compilecache(pkg::Base.PkgId, path::String)\n   @ Base ./loading.jl:1306\n [4] _require(pkg::Base.PkgId)\n   @ Base ./loading.jl:1021\n [5] require(uuidkey::Base.PkgId)\n   @ Base ./loading.jl:914\n [6] require(into::Module, mod::Symbol)\n   @ Base ./loading.jl:901\n\n(@v1.6) pkg> resolve\n  No Changes to `~/.julia/environments/v1.6/Project.toml`\n  No Changes to `~/.julia/environments/v1.6/Manifest.toml`\n\njulia> using DiffEqOperators\n[ Info: Precompiling DiffEqOperators [9fdde737-9c7f-55bf-ade8-46b3f136cc48]\nERROR: LoadError: LoadError: UndefVarError: SciMLBase not defined\nStacktrace:\n  [1] top-level scope\n    @ ~/.julia/packages/DiffEqOperators/DMYUH/src/MOLFiniteDifference/MOL_discretization.jl:14\n  [2] include(mod::Module, _path::String)\n    @ Base ./Base.jl:386\n  [3] include(x::String)\n    @ DiffEqOperators ~/.julia/packages/DiffEqOperators/DMYUH/src/DiffEqOperators.jl:1\n  [4] top-level scope\n    @ ~/.julia/packages/DiffEqOperators/DMYUH/src/DiffEqOperators.jl:51\n  [5] include\n    @ ./Base.jl:386 [inlined]\n  [6] include_package_for_output(pkg::Base.PkgId, input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId, UInt64}}, source::Nothing)\n    @ Base ./loading.jl:1213\n  [7] top-level scope\n    @ none:1\n  [8] eval\n    @ ./boot.jl:360 [inlined]\n  [9] eval(x::Expr)\n    @ Base.MainInclude ./client.jl:446\n [10] top-level scope\n    @ none:1\nin expression starting at /home/rveltz/.julia/packages/DiffEqOperators/DMYUH/src/MOLFiniteDifference/MOL_discretization.jl:14\nin expression starting at /home/rveltz/.julia/packages/DiffEqOperators/DMYUH/src/DiffEqOperators.jl:1\nERROR: Failed to precompile DiffEqOperators [9fdde737-9c7f-55bf-ade8-46b3f136cc48] to /home/rveltz/.julia/compiled/v1.6/DiffEqOperators/jl_FFcsjv.\nStacktrace:\n [1] error(s::String)\n   @ Base ./error.jl:33\n [2] compilecache(pkg::Base.PkgId, path::String, internal_stderr::Base.TTY, internal_stdout::Base.TTY)\n   @ Base ./loading.jl:1360\n [3] compilecache(pkg::Base.PkgId, path::String)\n   @ Base ./loading.jl:1306\n [4] _require(pkg::Base.PkgId)\n   @ Base ./loading.jl:1021\n [5] require(uuidkey::Base.PkgId)\n   @ Base ./loading.jl:914\n [6] require(into::Module, mod::Symbol)\n   @ Base ./loading.jl:901\n\n(@v1.6) pkg> s\nERROR: Could not determine command\n\n(@v1.6) pkg> st\n      Status `~/.julia/environments/v1.6/Project.toml`\n  [621f4979] AbstractFFTs v1.0.1\n  [6e4b80f9] BenchmarkTools v0.5.0\n  [0f109fa4] BifurcationKit v0.1.3 `"},{"type":"link","url":"https://github.com/rveltz/BifurcationKit.jl.git#master"},{"type":"text","text":"`\n  [0ca6dcf5] BlockPowerFlow v0.1.0 `"},{"type":"link","url":"https://github.com/exanauts/BlockPowerFlow.jl#master"},{"type":"text","text":"`\n  [052768ef] CUDA v2.6.3\n  [9fdde737] DiffEqOperators v4.23.0\n  [7a1cc6ca] FFTW v1.3.2\n  [28b8d3ca] GR v0.57.3\n  [0b1a1467] KrylovKit v0.5.2\n  [7f56f5a3] LSODA v0.6.2\n  [7a12625a] LinearMaps v3.3.0\n  [4d4711f2] MatrixMarket v0.3.1\n  [cddba4cf] MeanField2d v0.1.0 `"},{"type":"link","url":"https://gitlab.inria.fr/rveltz/meanfield2d.git#master"},{"type":"text","text":"`\n  [d96e819e] Parameters v0.12.2\n  [86206cdf] PiecewiseDeterministicMarkovProcesses v0.0.1 `"},{"type":"link","url":"https://github.com/rveltz/PiecewiseDeterministicMarkovProcesses.jl.git#master"},{"type":"text","text":"`\n  [91a5bcdd] Plots v1.11.2\n  [92933f4c] ProgressMeter v1.5.0\n  [295af30f] Revise v3.1.14\n  [0bca4576] SciMLBase v1.11.1\n  [efcf1570] Setfield v0.7.0\n  [65edfddc] SixelTerm v0.1.0 `"},{"type":"link","url":"https://github.com/tshort/SixelTerm.jl#master"},{"type":"text","text":"`"}]}]}]},{"client_msg_id":"ed3893bc-d1ee-4ebb-b180-15bf8cd49d93","type":"message","text":"well a tag is needed anyways.","user":"U69BL50BF","ts":"1618236401.055700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eiY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well a tag is needed anyways."}]}]}]},{"client_msg_id":"f51f5fb8-f166-41c4-a8e1-4872d4e36001","type":"message","text":"and master is good, so","user":"U69BL50BF","ts":"1618236406.056000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CjT3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and master is good, so"}]}]}]},{"client_msg_id":"2ff4be2d-abd9-41ff-ab38-aecfe94507ca","type":"message","text":"it must've been the ScaledDiffEqOperator move","user":"U69BL50BF","ts":"1618236413.056300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Igek","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it must've been the ScaledDiffEqOperator move"}]}]}]},{"client_msg_id":"61ffcb05-12fb-46f9-baa9-ac6a45f4fa93","type":"message","text":"OK trying the master now","user":"U7GQE9JP9","ts":"1618236426.056500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sD4W4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"OK trying the master now"}]}]}]},{"client_msg_id":"6794f661-a71e-4966-9901-acb0f0c5513c","type":"message","text":"dont work :scream: I had the same issue on another cluster machine yesterday and a `] resolve`  did the thing","user":"U7GQE9JP9","ts":"1618236536.057500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fyx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"dont work "},{"type":"emoji","name":"scream"},{"type":"text","text":" I had the same issue on another cluster machine yesterday and a "},{"type":"text","text":"] resolve","style":{"code":true}},{"type":"text","text":"  did the thing"}]}]}]},{"client_msg_id":"3e7c656e-b1cc-46d1-acee-3cd9fee153c7","type":"message","text":"I'm not sure if it will work, but deleting the manifest and calling `] instantiate` solved some issues before","user":"U01C3624SGJ","ts":"1618236632.058400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Kp9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not sure if it will work, but deleting the manifest and calling "},{"type":"text","text":"] instantiate","style":{"code":true}},{"type":"text","text":" solved some issues before"}]}]}]},{"client_msg_id":"bc6258b6-25b1-4246-9117-d01ed17c9d7b","type":"message","text":"i removed Project.toml and reintalled everything :thumbsup:","user":"U7GQE9JP9","ts":"1618236907.058900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AsZ6G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i removed Project.toml and reintalled everything "},{"type":"emoji","name":"thumbsup"}]}]}]},{"client_msg_id":"dcdddffe-e58e-4b2a-b260-2935825cf940","type":"message","text":"thank you  everybody","user":"U7GQE9JP9","ts":"1618236912.059100","team":"T68168MUP","edited":{"user":"U7GQE9JP9","ts":"1618236924.000000"},"blocks":[{"type":"rich_text","block_id":"etak4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thank you  everybody"}]}]}]},{"client_msg_id":"674aa555-339f-46ce-bc5b-7619269b3796","type":"message","text":"nuking the enviroment is always a good option its just annoying","user":"U01C3624SGJ","ts":"1618236948.059600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q6vmE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"nuking the enviroment is always a good option its just annoying"}]}]}]}]}