{"cursor": 19, "messages": [{"client_msg_id":"6930ac10-d18f-4322-9214-f9d15578bf51","type":"message","text":"aha right","user":"U01H36BUDJB","ts":"1615247212.054600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Aq/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"aha right"}]}]}]},{"client_msg_id":"1b1d0fe9-976d-4fc5-9a23-73e855ec1ca8","type":"message","text":"and if this doesn't change anything... that means the Jacobian is just ill-conditioned?","user":"U01H36BUDJB","ts":"1615247311.055100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hkA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and if this doesn't change anything... that means the Jacobian is just ill-conditioned?"}]}]}]},{"client_msg_id":"e329438a-fe53-4936-969d-b7fdce69a7ca","type":"message","text":"possibly?","user":"U69BL50BF","ts":"1615247356.055300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"imf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"possibly?"}]}]}]},{"client_msg_id":"fcedbca4-4664-4984-aff4-a45d2ff0a123","type":"message","text":"If that doesn't change anything, then it's... something :rolling_on_the_floor_laughing:","user":"U69BL50BF","ts":"1615247365.055600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oXrl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If that doesn't change anything, then it's... something "},{"type":"emoji","name":"rolling_on_the_floor_laughing"}]}]}]},{"client_msg_id":"3b5df691-e953-43cf-b304-53b49013536a","type":"message","text":"it doesn't happen to be a DAE?","user":"U69BL50BF","ts":"1615247369.055800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eAl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it doesn't happen to be a DAE?"}]}]}]},{"client_msg_id":"8f552652-75ab-4031-a4c3-c22e6d617061","type":"message","text":"not as I have it defined","user":"U01H36BUDJB","ts":"1615247377.056000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q78","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not as I have it defined"}]}]}]},{"client_msg_id":"d00b6ddc-65de-4e80-bdb8-d77dbe1eb8bf","type":"message","text":"though perhaps it could be...","user":"U01H36BUDJB","ts":"1615247389.056200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DemtL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"though perhaps it could be..."}]}]}]},{"client_msg_id":"34117f1d-1994-4a48-8a6d-5d585f116515","type":"message","text":"better for it to not be if it doesn't have to be.","user":"U69BL50BF","ts":"1615247417.056700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j2rDe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"better for it to not be if it doesn't have to be."}]}]}]},{"client_msg_id":"10c19e84-1de7-4a3d-80df-217109935d23","type":"message","text":"I should be able to at least check the jacobian manually I assume... by calling the `ODEFunction` from `ForwardDiff.jacobian` ?","user":"U01H36BUDJB","ts":"1615247585.057500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"62J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I should be able to at least check the jacobian manually I assume... by calling the "},{"type":"text","text":"ODEFunction","style":{"code":true}},{"type":"text","text":" from "},{"type":"text","text":"ForwardDiff.jacobian","style":{"code":true}},{"type":"text","text":" ?"}]}]}]},{"client_msg_id":"b304fda6-1ded-455d-a6bd-7d5f75cc1c15","type":"message","text":"yeah you can call ForwardDiff on it and see what you get/","user":"U69BL50BF","ts":"1615247651.057800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s2xUQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah you can call ForwardDiff on it and see what you get/"}]}]}]},{"client_msg_id":"9fb00727-a6b4-4651-a455-be152b4507f7","type":"message","text":"I am doing some slightly weird stuff with in-place modifications of arrays and whatnot... is that an issue? Everything should get converted to `ForwardDiff.Dual` s though","user":"U01H36BUDJB","ts":"1615247924.058800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ehRy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am doing some slightly weird stuff with in-place modifications of arrays and whatnot... is that an issue? Everything should get converted to "},{"type":"text","text":"ForwardDiff.Dual","style":{"code":true}},{"type":"text","text":" s though"}]}]}]},{"client_msg_id":"4a00c9ca-d2f7-4e52-a914-b73f84271b8b","type":"message","text":"yeah every element of the jacobian is NaN :joy:","user":"U01H36BUDJB","ts":"1615248298.059200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0KbLk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah every element of the jacobian is NaN "},{"type":"emoji","name":"joy"}]}]}]},{"client_msg_id":"3529aadc-ad90-4f2e-b9ba-66483db4e16e","type":"message","text":"<@U69BL50BF> Do you know (by familiarity with Zygote oddities) why `fastchain` isn't twice differentiable ?\n\n```applychain(fs::Tuple, x, p) = applychain(Base.tail(fs), first(fs)(x,p[1:paramlength(first(fs))]), p[(paramlength(first(fs))+1):end])\n(c::FastChain)(x,p) = applychain(c.layers, x, p)```\nIf I take its pullback (with Zygote) twice, I get:\n\n```ERROR: Mutating arrays is not supported\nStacktrace:\n [1] (::Zygote.var\"#376#377\")(::Nothing) at /home/guillaume/.julia/packages/Zygote/KpME9/src/lib/array.jl:61\n [2] (::Zygote.var\"#2271#back#378\"{Zygote.var\"#376#377\"})(::Nothing) at /home/guillaume/.julia/packages/ZygoteRules/OjfTt/src/adjoint.jl:59\n [3] materialize! at ./broadcast.jl:848 [inlined]\n [4] materialize! at ./broadcast.jl:845 [inlined]\n [5] materialize! at ./broadcast.jl:841 [inlined]\n [6] (::typeof(∂(materialize!)))(::Nothing) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [7] #364 at /home/guillaume/.julia/packages/Zygote/KpME9/src/lib/array.jl:42 [inlined]\n [8] (::typeof(∂(λ)))(::Nothing) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [9] #2225#back at /home/guillaume/.julia/packages/ZygoteRules/OjfTt/src/adjoint.jl:59 [inlined]\n [10] (::typeof(∂(λ)))(::Nothing) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [11] applychain at /home/guillaume/.julia/packages/DiffEqFlux/lS4Sa/src/fast_layers.jl:20 [inlined]\n [12] (::typeof(∂(λ)))(::Tuple{Nothing,Nothing,CuArray{Float32,3},Nothing}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [13] FastChain at /home/guillaume/.julia/packages/DiffEqFlux/lS4Sa/src/fast_layers.jl:21 [inlined]\n [14] (::typeof(∂(λ)))(::Tuple{Nothing,CuArray{Float32,3},Nothing}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [15] #89 at ./REPL[52]:2 [inlined]\n [16] (::typeof(∂(λ)))(::Tuple{Nothing,CuArray{Float32,3}}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [17] #41 at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface.jl:40 [inlined]\n [18] (::typeof(∂(λ)))(::Tuple{CuArray{Float32,3}}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [19] ftest2 at ./REPL[52]:3 [inlined]\n [20] (::typeof(∂(ftest2)))(::CuArray{Float32,3}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [21] (::Zygote.var\"#41#42\"{typeof(∂(ftest2))})(::CuArray{Float32,3}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface.jl:40\n [22] top-level scope at REPL[54]:1```","user":"UKJSNT1QR","ts":"1615303931.003200","team":"T68168MUP","edited":{"user":"UKJSNT1QR","ts":"1615304212.000000"},"blocks":[{"type":"rich_text","block_id":"CpvB","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U69BL50BF"},{"type":"text","text":" Do you know (by familiarity with Zygote oddities) why "},{"type":"text","text":"fastchain","style":{"code":true}},{"type":"text","text":" isn't twice differentiable ?\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"applychain(fs::Tuple, x, p) = applychain(Base.tail(fs), first(fs)(x,p[1:paramlength(first(fs))]), p[(paramlength(first(fs))+1):end])\n(c::FastChain)(x,p) = applychain(c.layers, x, p)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"If I take its pullback (with Zygote) twice, I get:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"ERROR: Mutating arrays is not supported\nStacktrace:\n [1] (::Zygote.var\"#376#377\")(::Nothing) at /home/guillaume/.julia/packages/Zygote/KpME9/src/lib/array.jl:61\n [2] (::Zygote.var\"#2271#back#378\"{Zygote.var\"#376#377\"})(::Nothing) at /home/guillaume/.julia/packages/ZygoteRules/OjfTt/src/adjoint.jl:59\n [3] materialize! at ./broadcast.jl:848 [inlined]\n [4] materialize! at ./broadcast.jl:845 [inlined]\n [5] materialize! at ./broadcast.jl:841 [inlined]\n [6] (::typeof(∂(materialize!)))(::Nothing) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [7] #364 at /home/guillaume/.julia/packages/Zygote/KpME9/src/lib/array.jl:42 [inlined]\n [8] (::typeof(∂(λ)))(::Nothing) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [9] #2225#back at /home/guillaume/.julia/packages/ZygoteRules/OjfTt/src/adjoint.jl:59 [inlined]\n [10] (::typeof(∂(λ)))(::Nothing) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [11] applychain at /home/guillaume/.julia/packages/DiffEqFlux/lS4Sa/src/fast_layers.jl:20 [inlined]\n [12] (::typeof(∂(λ)))(::Tuple{Nothing,Nothing,CuArray{Float32,3},Nothing}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [13] FastChain at /home/guillaume/.julia/packages/DiffEqFlux/lS4Sa/src/fast_layers.jl:21 [inlined]\n [14] (::typeof(∂(λ)))(::Tuple{Nothing,CuArray{Float32,3},Nothing}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [15] #89 at ./REPL[52]:2 [inlined]\n [16] (::typeof(∂(λ)))(::Tuple{Nothing,CuArray{Float32,3}}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [17] #41 at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface.jl:40 [inlined]\n [18] (::typeof(∂(λ)))(::Tuple{CuArray{Float32,3}}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [19] ftest2 at ./REPL[52]:3 [inlined]\n [20] (::typeof(∂(ftest2)))(::CuArray{Float32,3}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface2.jl:0\n [21] (::Zygote.var\"#41#42\"{typeof(∂(ftest2))})(::CuArray{Float32,3}) at /home/guillaume/.julia/packages/Zygote/KpME9/src/compiler/interface.jl:40\n [22] top-level scope at REPL[54]:1"}]}]}]},{"client_msg_id":"47053272-127d-4fe7-8528-276609062c48","type":"message","text":"I'm trying to (greatly hopefully) speedup the Normalizing Flow example because it's inacceptably slow. For that I've added a `BatchFastDense` layer to compute all K components at once. I can add it to DiffEqFlux if it's useful somehow. Doesn't work yet because `NNlib.batched_mul` adjoint doesn't actually really work, so I have to patch that too. Then there's the problem above and *hopefully* it's the last problem. Not very hopeful because everytime I finally fix something it just explodes in a later stage :slightly_smiling_face:","user":"UKJSNT1QR","ts":"1615304177.006400","team":"T68168MUP","edited":{"user":"UKJSNT1QR","ts":"1615304262.000000"},"blocks":[{"type":"rich_text","block_id":"CfEmQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm trying to (greatly hopefully) speedup the Normalizing Flow example because it's inacceptably slow. For that I've added a "},{"type":"text","text":"BatchFastDense","style":{"code":true}},{"type":"text","text":" layer to compute all K components at once. I can add it to DiffEqFlux if it's useful somehow. Doesn't work yet because "},{"type":"text","text":"NNlib.batched_mul","style":{"code":true}},{"type":"text","text":" adjoint doesn't actually really work, so I have to patch that too. Then there's the problem above and "},{"type":"text","text":"hopefully","style":{"bold":true}},{"type":"text","text":" it's the last problem. Not very hopeful because everytime I finally fix something it just explodes in a later stage "},{"type":"emoji","name":"slightly_smiling_face"}]}]}]},{"client_msg_id":"2abd1d33-19d6-4986-b2c2-fd59ff583acc","type":"message","text":"any ideas on what usually causes this error?\n```Double callback crossing floating pointer reducer errored```","user":"U01G3BG7AFR","ts":"1615305023.007100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d75","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"any ideas on what usually causes this error?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Double callback crossing floating pointer reducer errored"}]}]}],"thread_ts":"1615305023.007100","reply_count":3,"reply_users_count":2,"latest_reply":"1615306126.008400","reply_users":["U01G3BG7AFR","U69BL50BF"],"subscribed":false},{"client_msg_id":"26d86edd-cdc9-4895-be1f-093d23f59c3b","type":"message","text":"If someone familiar with `DiffEqBase` could take a quick look at <https://github.com/SciML/DiffEqBase.jl/issues/648> that would be great!","user":"U01H36BUDJB","ts":"1615331717.014500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lm2N3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If someone familiar with "},{"type":"text","text":"DiffEqBase","style":{"code":true}},{"type":"text","text":" could take a quick look at "},{"type":"link","url":"https://github.com/SciML/DiffEqBase.jl/issues/648"},{"type":"text","text":" that would be great!"}]}]}]},{"client_msg_id":"bf1c4782-3b38-454c-b336-6e5e80ac4f0f","type":"message","text":"Also, <@U69BL50BF> in case you're interested, Rodas4P is now &gt;10x faster than Euler on my heat conduction + phase change problem after providing a tridiagonal Jacobian prototype :slightly_smiling_face: :partying_face:","user":"U01H36BUDJB","ts":"1615332030.016300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MxR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, "},{"type":"user","user_id":"U69BL50BF"},{"type":"text","text":" in case you're interested, Rodas4P is now >10x faster than Euler on my heat conduction + phase change problem after providing a tridiagonal Jacobian prototype "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":" "},{"type":"emoji","name":"partying_face"}]}]}],"reactions":[{"name":"tada","users":["U69BL50BF"],"count":1}]},{"client_msg_id":"0ad5ced0-12b3-4366-bba8-a2711755bf66","type":"message","text":"how do i get a Table/DataFrame of every DE.jl solver, the alg order, and the type constraint on the `Problem` that it can solve?","user":"UM8JUNJG7","ts":"1615344106.017400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dsGz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"how do i get a Table/DataFrame of every DE.jl solver, the alg order, and the type constraint on the "},{"type":"text","text":"Problem","style":{"code":true}},{"type":"text","text":" that it can solve?"}]}]}]},{"client_msg_id":"91293108-af64-4bf2-aa82-897a07772cac","type":"message","text":"is there a way to tell a call back function to not be called again once it triggers the affect. It does slow down the system a bit.","user":"U01G3BG7AFR","ts":"1615345683.018700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FSk7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is there a way to tell a call back function to not be called again once it triggers the affect. It does slow down the system a bit."}]}]}]},{"client_msg_id":"3ec6d84b-0542-4b3b-b461-aa3f806b5b62","type":"message","text":"I had some issues in my package today where some functionality in DiffEqBase.jl couldn't be found (e.g. `DiffEqBase.interpret_vars`). I then found out about SciMLBase.jl, added it as a dependency which solved most errors, but since I still rely on DiffEqBase.jl and on OrdinaryDiffEq.jl I now have lots of warnings about common exports, and I have to fix a few more issues. It's a bit unclear to me which functions I should use, and how I should handle these dependencies in general. Does anyone have any recommendations for issues of this kind?","user":"UMQME35EV","ts":"1615388282.024700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fu8Jj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I had some issues in my package today where some functionality in DiffEqBase.jl couldn't be found (e.g. "},{"type":"text","text":"DiffEqBase.interpret_vars","style":{"code":true}},{"type":"text","text":"). I then found out about SciMLBase.jl, added it as a dependency which solved most errors, but since I still rely on DiffEqBase.jl and on OrdinaryDiffEq.jl I now have lots of warnings about common exports, and I have to fix a few more issues. It's a bit unclear to me which functions I should use, and how I should handle these dependencies in general. Does anyone have any recommendations for issues of this kind?"}]}]}],"thread_ts":"1615388282.024700","reply_count":2,"reply_users_count":2,"latest_reply":"1615388447.025100","reply_users":["UMQME35EV","U01H36BUDJB"],"subscribed":false},{"client_msg_id":"d9fc8725-e472-47eb-bf36-6af149e79d51","type":"message","text":"i recall reading something about the plans for PDE.jl, where is that?'","user":"UM8JUNJG7","ts":"1615391379.027200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xS1P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i recall reading something about the plans for PDE.jl, where is that?'"}]}]}]},{"client_msg_id":"da78f5ca-0fe6-4976-a98e-6723837763d4","type":"message","text":"It's moreso that everything is centering around an abstract PDESystem interface defined by MTK","user":"U69BL50BF","ts":"1615391410.027700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+PX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's moreso that everything is centering around an abstract PDESystem interface defined by MTK"}]}]}]},{"client_msg_id":"bcf17326-e042-4b84-951a-c7d6ef4d66f5","type":"message","text":"and all the discretizations and stuff?","user":"UM8JUNJG7","ts":"1615391447.028600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lTr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and all the discretizations and stuff?"}]}]}]},{"client_msg_id":"606bc4bc-458a-45e8-9522-ac88b7f20bc9","type":"message","text":"I don't quite know where to document it in full, and I don't want to guarantee it won't change before we have a few discretizers working, so you won't find an abstract documentation of it yet.","user":"U69BL50BF","ts":"1615391461.028900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PVf1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't quite know where to document it in full, and I don't want to guarantee it won't change before we have a few discretizers working, so you won't find an abstract documentation of it yet."}]}]}]},{"client_msg_id":"c5d598ad-7b84-4b36-9dcb-ab408cfd33e3","type":"message","text":"But, it's just about time it gets written","user":"U69BL50BF","ts":"1615391468.029200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"N38GD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But, it's just about time it gets written"}]}]}],"reactions":[{"name":"heart","users":["UM8JUNJG7"],"count":1}]},{"client_msg_id":"6f9d93d8-2b0e-47d1-8748-3bc6943dbf8e","type":"message","text":"that is what \"PDE.jl\" was going to be.","user":"U69BL50BF","ts":"1615391475.029600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"a9oN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that is what \"PDE.jl\" was going to be."}]}]}]},{"client_msg_id":"20c12a44-b7c0-41f3-92b1-6b602f4fdd2a","type":"message","text":"So I guess noone is actively working on integrating some kind of FEM scheme into MTK (and the DiffEq ecosystem in general) yet? Or is this a non-goal due to its complexity?","user":"U014A5E6L3V","ts":"1615411605.032800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Hd5QG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So I guess noone is actively working on integrating some kind of FEM scheme into MTK (and the DiffEq ecosystem in general) yet? Or is this a non-goal due to its complexity?"}]}]}]},{"client_msg_id":"c459b903-9412-4c52-90d8-2890d6832535","type":"message","text":"<https://github.com/gridap/GridapODEs.jl/issues/4>","user":"U69BL50BF","ts":"1615411637.033000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dk3","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/gridap/GridapODEs.jl/issues/4"}]}]}],"reactions":[{"name":"rocket","users":["U014A5E6L3V"],"count":1}]},{"client_msg_id":"fa33fafc-46fb-4533-8194-464e694d4bf6","type":"message","text":"How much performance impact should be expected from using `ForwrardDiffSensitivity` over longer time spans? I would think it would just increase runtime by a small constant factor, but I'm seeing a pretty huge impact.","user":"U01H36BUDJB","ts":"1615417114.034600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SY1H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How much performance impact should be expected from using "},{"type":"text","text":"ForwrardDiffSensitivity","style":{"code":true}},{"type":"text","text":" over longer time spans? I would think it would just increase runtime by a small constant factor, but I'm seeing a pretty huge impact."}]}]}]},{"client_msg_id":"ed069e80-46a5-4f51-ad3e-4d9d676ed47d","type":"message","text":"By huge impact I mean &gt;1000x slower...","user":"U01H36BUDJB","ts":"1615417258.035000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"r5i","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"By huge impact I mean >1000x slower..."}]}]}]},{"client_msg_id":"803d8cce-7403-40b1-b33d-c551111f183f","type":"message","text":"depends on the number of parameters","user":"U69BL50BF","ts":"1615417295.035200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5Hx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"depends on the number of parameters"}]}]}]},{"client_msg_id":"bee1bf25-e7ce-4eb5-beda-bd354025a7a7","type":"message","text":"it's O(np)","user":"U69BL50BF","ts":"1615417298.035400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2Dlq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's O(np)"}]}]}]},{"client_msg_id":"bdf09de2-8643-4c7d-a068-bcb7cd1e9122","type":"message","text":"though if it's a stiff ODE solver it's O((np)^3)","user":"U69BL50BF","ts":"1615417309.035800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8kXq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"though if it's a stiff ODE solver it's O((np)^3)"}]}]}]},{"client_msg_id":"f2ca8e2d-0612-48a2-bdea-418d715b1d3e","type":"message","text":"It's literally 1 parameter.","user":"U01H36BUDJB","ts":"1615417337.036000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Fyze","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's literally 1 parameter."}]}]}]},{"client_msg_id":"f145ae10-9019-43e5-a539-a32b84af082d","type":"message","text":"An array of size 1","user":"U01H36BUDJB","ts":"1615417342.036200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WH/L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"An array of size 1"}]}]}]},{"client_msg_id":"bf36397d-a53d-4033-907e-c3269876c479","type":"message","text":"uhh, that's not good then :rolling_on_the_floor_laughing:","user":"U69BL50BF","ts":"1615417364.036400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PkVE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"uhh, that's not good then "},{"type":"emoji","name":"rolling_on_the_floor_laughing"}]}]}]},{"client_msg_id":"7c536d5b-3eb9-4496-b6fc-2e142dd4a19a","type":"message","text":"do you see type inference issues?","user":"U69BL50BF","ts":"1615417369.036700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CgYo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"do you see type inference issues?"}]}]}]},{"client_msg_id":"934c9e3b-2227-40d5-ab1d-dace5f713d79","type":"message","text":"what would be the appropriate place to put @code_warntype?","user":"U01H36BUDJB","ts":"1615417393.037100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oavdM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what would be the appropriate place to put @code_warntype?"}]}]}]},{"client_msg_id":"7936021c-8c6c-46cc-83ca-08de57598e6f","type":"message","text":"before `ForwardDiff.gradient` or just before `solve` ??","user":"U01H36BUDJB","ts":"1615417404.037400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dcl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"before "},{"type":"text","text":"ForwardDiff.gradient","style":{"code":true}},{"type":"text","text":" or just before "},{"type":"text","text":"solve","style":{"code":true}},{"type":"text","text":" ??"}]}]}]},{"client_msg_id":"ceb60d1e-2f49-4936-a5a6-8fdc5c9214a4","type":"message","text":"solve I guess?","user":"U69BL50BF","ts":"1615417424.037900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=pGq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"solve I guess?"}]}]}]},{"client_msg_id":"1f13dd84-f640-4146-8e72-20e2574e1574","type":"message","text":"solve is type stable but the surrounding function for the gradient is not","user":"U01H36BUDJB","ts":"1615417675.038400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/YGvV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"solve is type stable but the surrounding function for the gradient is not"}]}]}]},{"client_msg_id":"932d11ab-5b8e-4745-a044-0782737c4244","type":"message","text":"including the return value; shows up as Any","user":"U01H36BUDJB","ts":"1615417696.038800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ykn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"including the return value; shows up as Any"}]}]}]},{"client_msg_id":"e79d2f07-2eeb-405d-add5-32c9b3dd1195","type":"message","text":"maybe because I have to recreate the `ODEProblem` to have the Tridiagonal Jacobian use `eltype(p)` ... are there any examples laying around using `ForwardDiffSensitivity` with `jac_prototype`?","user":"U01H36BUDJB","ts":"1615417810.039900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"z8tN9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"maybe because I have to recreate the "},{"type":"text","text":"ODEProblem","style":{"code":true}},{"type":"text","text":" to have the Tridiagonal Jacobian use "},{"type":"text","text":"eltype(p)","style":{"code":true}},{"type":"text","text":" ... are there any examples laying around using "},{"type":"text","text":"ForwardDiffSensitivity","style":{"code":true}},{"type":"text","text":" with "},{"type":"text","text":"jac_prototype","style":{"code":true}},{"type":"text","text":"?"}]}]}]},{"client_msg_id":"60d4f38c-ab15-44e6-9893-e6e6faaa893a","type":"message","text":"I don't think so, but it should be fine?","user":"U69BL50BF","ts":"1615418822.040300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7Yr7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't think so, but it should be fine?"}]}]}]},{"client_msg_id":"0174aacd-54c4-4d53-84a6-c9341122cf5b","type":"message","text":"fixed it. though yes, as you mentioned, it is still considerably slower for the stiff solver","user":"U01H36BUDJB","ts":"1615418857.040800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZeU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"fixed it. though yes, as you mentioned, it is still considerably slower for the stiff solver"}]}]}]},{"client_msg_id":"197433f4-afa7-4d80-a697-ec77eabbc2e9","type":"message","text":"about 3x slower","user":"U01H36BUDJB","ts":"1615418878.041100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wut","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"about 3x slower"}]}]}]},{"client_msg_id":"7d088e79-0500-4945-a581-a4858c13a310","type":"message","text":"ah damn, ran into the whole `ReverseDiff` /`ComponentArray` incompatibility issue again....","user":"U01H36BUDJB","ts":"1615419516.042500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6m8A","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah damn, ran into the whole "},{"type":"text","text":"ReverseDiff","style":{"code":true}},{"type":"text","text":" /"},{"type":"text","text":"ComponentArray","style":{"code":true}},{"type":"text","text":" incompatibility issue again...."}]}]}]},{"client_msg_id":"4974173f-8c09-4aab-8d94-72c9d297332e","type":"message","text":"guess I need to try and contribute to <https://github.com/jonniedie/ComponentArrays.jl/issues/37>","user":"U01H36BUDJB","ts":"1615419543.042800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DLu5Q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"guess I need to try and contribute to "},{"type":"link","url":"https://github.com/jonniedie/ComponentArrays.jl/issues/37"}]}]}]},{"client_msg_id":"0C8CABAE-0034-48DF-B830-89ACDD8176C0","type":"message","text":"I’ll see if I can get some more time tonight to look at it. I think I’m getting close. ","user":"US4A6G6B0","ts":"1615423607.044200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KdD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’ll see if I can get some more time tonight to look at it. I think I’m getting close. "}]}]}]},{"client_msg_id":"9ceb3fcc-1496-447f-869f-6eddf5113d43","type":"message","text":"I would really appreciate advice on how to make use of threads when solving a large system of ODEs.\nThe function being solved can be thought of as:\n 1) Assess all states and populate some matrices\n 2) Act on columns of those matrices individually to calculate derivatives\n\nThe way I'm attempting to do this (which may well be terrible, please tell me if so) is to create one `ODEProblem` per thread in which the first step runs, then wait for all threads to finish step 1, then continues with the second step on a range of the columns of the matrices. This means that the second step can be threaded which gives a good speed improvement.\n\nOne of the difficulties is that I need to sync the ODEProblems themselves to make sure they're always solving the same timestep, and the syncing in general is a bit nasty/inefficient.\n\nThis feels like a hacky way of doing this, and I'd be grateful for any advice on either how to do this better or if this is an OK way how to sync simultaneous solving of ODE problems.\n\nThanks in advance.\n\nExample code here:\n```function f!(du, u, p t)\n    # This function sets values used by all threads\n    f_global!(du, u, p)\n\n    # Need to sync all threads after f_global!\n    sync_thread(Threads.threadid())\n\n    # This function can be done on separate thread as per range and finish whenever\n    f_separate!(du, u, p)\nend\n\nranges = [1:10000, 10001:20000] # Assume two threads for this example\n# u0, t_range, p exist\n\nThreads.@threads for i in 1:Threads.nthreads()\n    range = ranges[Threads.threadid()]\n    prob = ODEProblem(f!, u0[range], t_range, p)\n    sol = solve(prob, Tsit5())\n    do_something_with_output(sol)\nend```\n","user":"U017FUJDBT7","ts":"1615436515.047400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QgeL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I would really appreciate advice on how to make use of threads when solving a large system of ODEs.\nThe function being solved can be thought of as:\n 1) Assess all states and populate some matrices\n 2) Act on columns of those matrices individually to calculate derivatives\n\nThe way I'm attempting to do this (which may well be terrible, please tell me if so) is to create one "},{"type":"text","text":"ODEProblem","style":{"code":true}},{"type":"text","text":" per thread in which the first step runs, then wait for all threads to finish step 1, then continues with the second step on a range of the columns of the matrices. This means that the second step can be threaded which gives a good speed improvement.\n\nOne of the difficulties is that I need to sync the ODEProblems themselves to make sure they're always solving the same timestep, and the syncing in general is a bit nasty/inefficient.\n\nThis feels like a hacky way of doing this, and I'd be grateful for any advice on either how to do this better or if this is an OK way how to sync simultaneous solving of ODE problems.\n\nThanks in advance.\n\nExample code here:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function f!(du, u, p t)\n    # This function sets values used by all threads\n    f_global!(du, u, p)\n\n    # Need to sync all threads after f_global!\n    sync_thread(Threads.threadid())\n\n    # This function can be done on separate thread as per range and finish whenever\n    f_separate!(du, u, p)\nend\n\nranges = [1:10000, 10001:20000] # Assume two threads for this example\n# u0, t_range, p exist\n\nThreads.@threads for i in 1:Threads.nthreads()\n    range = ranges[Threads.threadid()]\n    prob = ODEProblem(f!, u0[range], t_range, p)\n    sol = solve(prob, Tsit5())\n    do_something_with_output(sol)\nend"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1615436515.047400","reply_count":6,"reply_users_count":2,"latest_reply":"1615439353.048600","reply_users":["U69BL50BF","U017FUJDBT7"],"subscribed":false},{"client_msg_id":"32c8e94d-e841-4108-afea-2f630e6d8a9e","type":"message","text":"I did a major clean up of the ModelingToolkit.jl repo, transitioning it towards being \"really released\". Let me know if I missed anything.","user":"U69BL50BF","ts":"1615466874.050400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pAE2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I did a major clean up of the ModelingToolkit.jl repo, transitioning it towards being \"really released\". Let me know if I missed anything."}]}]}]},{"client_msg_id":"44d2ee05-450e-488b-aecb-1015416f85ed","type":"message","text":"With all the recent changes to MTK, did the compile time for large ODE systems improve? Before it could take weeks if you had 10000 ODEs.","user":"UQEDP1Q5V","ts":"1615497481.057000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gAAMj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"With all the recent changes to MTK, did the compile time for large ODE systems improve? Before it could take weeks if you had 10000 ODEs."}]}]}]},{"client_msg_id":"3cc27481-ea06-45a8-b91e-63b16dac0961","type":"message","text":"yes, I think Shashi's function splitting helped that a lot.","user":"U69BL50BF","ts":"1615498798.057600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uyEJO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, I think Shashi's function splitting helped that a lot."}]}]}]},{"client_msg_id":"e9ff122e-1d3f-4aa6-80f7-7f6846585d2b","type":"message","text":"Did you left it compiling for weeks? Did it finish? (Maybe I am not getting the hyperbole, but seems likely with Julia)","user":"U6788D83U","ts":"1615498876.058300","team":"T68168MUP","edited":{"user":"U6788D83U","ts":"1615498882.000000"},"blocks":[{"type":"rich_text","block_id":"9MCLn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Did you left it compiling for weeks? Did it finish? (Maybe I am not getting the hyperbole, but seems likely with Julia)"}]}]}]},{"client_msg_id":"ba39c39b-dc2d-4e52-9ceb-257f6c58095b","type":"message","text":"Yes it eventually finished.","user":"UQEDP1Q5V","ts":"1615501282.058700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iY4zt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes it eventually finished."}]}]}]},{"client_msg_id":"222475ac-cbf8-447e-86d9-ff4a52187bf2","type":"message","text":"Is there or will there be support for <https://github.com/denizyuret/AutoGrad.jl|AutoGrad.jl> in DiffEqSensitivity? I'm not sure where it fits into the broader collection of Julia autodiff frameworks.","user":"U01H36BUDJB","ts":"1615555674.060100","team":"T68168MUP","edited":{"user":"U01H36BUDJB","ts":"1615555700.000000"},"blocks":[{"type":"rich_text","block_id":"ON1vb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there or will there be support for "},{"type":"link","url":"https://github.com/denizyuret/AutoGrad.jl","text":"AutoGrad.jl"},{"type":"text","text":" in DiffEqSensitivity? I'm not sure where it fits into the broader collection of Julia autodiff frameworks."}]}]}]},{"client_msg_id":"9da4cc0f-1824-4331-9a10-2e69932a4e34","type":"message","text":"ehh, it doesn't have much of a place","user":"U69BL50BF","ts":"1615555806.060400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RWBn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ehh, it doesn't have much of a place"}]}]}]},{"client_msg_id":"3c2d7103-019f-4b04-8f33-5c629fc9e82c","type":"message","text":"Less type support than ReverseDiff, and slower than ReverseDiff","user":"U69BL50BF","ts":"1615555818.060800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ubx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Less type support than ReverseDiff, and slower than ReverseDiff"}]}]}]},{"client_msg_id":"fcbfd11f-e992-47d8-b8b4-91a2b6dc7d42","type":"message","text":"Ok good to know.","user":"U01H36BUDJB","ts":"1615555897.061000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Omf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok good to know."}]}]}]},{"client_msg_id":"3f99329a-378e-4b09-a962-1866583782a5","type":"message","text":"I've seen several mentions of depreciating `DEDataArray` . What is the recommended way of doing control problems w/ a record of the input? Re: <https://diffeq.sciml.ai/stable/features/diffeq_arrays/#control_problem>","user":"UP95S4864","ts":"1615559868.062000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NB1IB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I've seen several mentions of depreciating "},{"type":"text","text":"DEDataArray","style":{"code":true}},{"type":"text","text":" . What is the recommended way of doing control problems w/ a record of the input? Re: "},{"type":"link","url":"https://diffeq.sciml.ai/stable/features/diffeq_arrays/#control_problem"}]}]}]},{"client_msg_id":"c5251968-fff5-4c97-b821-aa2128b4eaf3","type":"message","text":"I'm using `DEDataArray` for  my own reasons (not for a control problem), but I guess a parameterized function is the recommended way to go for representing control inputs.","user":"U01H36BUDJB","ts":"1615560314.063000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/N3e","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm using "},{"type":"text","text":"DEDataArray","style":{"code":true}},{"type":"text","text":" for  my own reasons (not for a control problem), but I guess a parameterized function is the recommended way to go for representing control inputs."}]}]}]},{"client_msg_id":"73132cac-be56-426e-836e-8e0a91d5a680","type":"message","text":"You could achieve that either with `p` or with a callable struct. The latter would be better if you don't want your control parameters included in the sensitivities.","user":"U01H36BUDJB","ts":"1615560364.063900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AaGQP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You could achieve that either with "},{"type":"text","text":"p","style":{"code":true}},{"type":"text","text":" or with a callable struct. The latter would be better if you don't want your control parameters included in the sensitivities."}]}]}]},{"client_msg_id":"7a224980-7b0d-4efd-96f2-0154541e6500","type":"message","text":"The issue w/ a parametrized function is you don't get a control history. How would a callable struct get around this?","user":"UP95S4864","ts":"1615560576.065200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/7JY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The issue w/ a parametrized function is you don't get a control history. How would a callable struct get around this?"}]}]}]},{"client_msg_id":"741cbb5b-e663-41d1-9542-e5fcc1d8b8b3","type":"message","text":"It wouldn't. This is why I use `DEDataArray` . As far as I know, there is no other solution at the moment.","user":"U01H36BUDJB","ts":"1615560681.065900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GmyM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It wouldn't. This is why I use "},{"type":"text","text":"DEDataArray","style":{"code":true}},{"type":"text","text":" . As far as I know, there is no other solution at the moment."}]}]}]},{"client_msg_id":"ed04b57d-9106-415c-b30c-0c2d9a4432af","type":"message","text":"Got it. Since I saw Chris mention possibly depreciating `DEDataArray` if figured there was an alternative means to the same ends as `DEDataArray`","user":"UP95S4864","ts":"1615560750.067000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=j5q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Got it. Since I saw Chris mention possibly depreciating "},{"type":"text","text":"DEDataArray","style":{"code":true}},{"type":"text","text":" if figured there was an alternative means to the same ends as "},{"type":"text","text":"DEDataArray","style":{"code":true}}]}]}],"reactions":[{"name":"eyes","users":["U0178LR5K7F"],"count":1}]},{"client_msg_id":"698ff5ac-c946-4361-b649-532a4ff3c78f","type":"message","text":"He suggested that ModelingToolkit would provide an alternative, I suppose through being able to define arbitrary variables. It's not clear to me how exactly this solves the problem, but I assume he knows it better than I do.","user":"U01H36BUDJB","ts":"1615560802.068000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2x9i9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"He suggested that ModelingToolkit would provide an alternative, I suppose through being able to define arbitrary variables. It's not clear to me how exactly this solves the problem, but I assume he knows it better than I do."}]}]}],"reactions":[{"name":"+1","users":["UP95S4864"],"count":1}]},{"client_msg_id":"f1388ee7-b035-4bdc-b5b8-5902b323b55c","type":"message","text":"the one thing it won't do is have a record of the control, right now.","user":"U69BL50BF","ts":"1615560948.068500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8CtZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the one thing it won't do is have a record of the control, right now."}]}]}]},{"client_msg_id":"da4dad04-bfdf-4581-b6bd-edac91ace99c","type":"message","text":"I am simply modifying the control as a `p`  in a periodic callback. Is there any reason to not just add an additional state w/ no dynamics and modify that instead?","user":"UP95S4864","ts":"1615561009.069400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sjY7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am simply modifying the control as a "},{"type":"text","text":"p","style":{"code":true}},{"type":"text","text":"  in a periodic callback. Is there any reason to not just add an additional state w/ no dynamics and modify that instead?"}]}]}]},{"client_msg_id":"8a4ac5d8-ae10-4eb9-8dfe-d9ca9f3fbabb","type":"message","text":"<@U6788D83U> told me a while back that this is a bad idea. I assume because it messes with the solvers.","user":"U01H36BUDJB","ts":"1615561074.070200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"S3bi","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U6788D83U"},{"type":"text","text":" told me a while back that this is a bad idea. I assume because it messes with the solvers."}]}]}]},{"client_msg_id":"1e81c10c-04c6-422c-be99-a2b9ebb8bdaa","type":"message","text":"&gt; Is there any reason to not just add an additional state w/ no dynamics and modify that instead?\nnot really. that should be good if you're not using an implicit method","user":"U69BL50BF","ts":"1615561083.070400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/j=","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"Is there any reason to not just add an additional state w/ no dynamics and modify that instead?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"not really. that should be good if you're not using an implicit method"}]}]}]},{"client_msg_id":"b410f1f0-79b7-44b6-9f84-94543978ac16","type":"message","text":"yeah see I use implicit methods","user":"U01H36BUDJB","ts":"1615561108.070600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Cek","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah see I use implicit methods"}]}]}]},{"client_msg_id":"cc42e406-19fa-4537-883d-79137b81f5a5","type":"message","text":"Roger that. Coupling with `ComponentArrays`  would make this a simple solution","user":"UP95S4864","ts":"1615561171.071300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fMdU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Roger that. Coupling with "},{"type":"text","text":"ComponentArrays","style":{"code":true}},{"type":"text","text":"  would make this a simple solution"}]}]}]},{"client_msg_id":"a8d032bf-ee15-49ac-8bbb-f1069b8da1ff","type":"message","text":"Is there an example for parameter estimation / sensitivity analysis with parameter-dependent `u0`?","user":"U017PV1H2LV","ts":"1615571223.072800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"q7D","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there an example for parameter estimation / sensitivity analysis with parameter-dependent "},{"type":"text","text":"u0","style":{"code":true}},{"type":"text","text":"?"}]}]}]},{"client_msg_id":"14e76ed9-353d-4b2f-b40b-3b8c26c00264","type":"message","text":"I think it will just work if do\n```gradient(p) do p\n    u0 = gen_u0(p)\n    solve(prob, u0, tspan, p)\nend```","user":"U6788D83U","ts":"1615571317.074000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1CnP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think it will just work if do\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"gradient(p) do p\n    u0 = gen_u0(p)\n    solve(prob, u0, tspan, p)\nend"}]}]}]},{"client_msg_id":"5353ea93-c8eb-4f58-9b1b-93bd2462291d","type":"message","text":"If it doesn’t, then please file a bug report.","user":"U6788D83U","ts":"1615571329.074400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"I7s","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If it doesn’t, then please file a bug report."}]}]}]},{"client_msg_id":"4ba2cf0e-91b7-4f4c-9d90-af9675194e06","type":"message","text":"<https://diffeqflux.sciml.ai/dev/examples/feedback_control/> does it","user":"U69BL50BF","ts":"1615571359.075100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1Ag=g","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://diffeqflux.sciml.ai/dev/examples/feedback_control/"},{"type":"text","text":" does it"}]}]}]},{"client_msg_id":"ae93078b-0b9a-4076-ab8b-a595766301ab","type":"message","text":"perfect, thanks!","user":"U017PV1H2LV","ts":"1615571518.075400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dKH9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"perfect, thanks!"}]}]}]},{"client_msg_id":"a287d8ed-8c33-443e-8ef6-e3538286091e","type":"message","text":"Hi all, I recently made a package (<https://dhruva2.github.io/MinimallyDisruptiveCurves.docs/>) that’s in the process of being registered. I had a couple of questions/things I wanted to say. This slack channel seemed like the best fit(?):\n1. The package implements ‘regional’ sensitivity analysis for differentiable models by solving a differential equation on the model parameters, the trajectory of which conforms to parameter sets that closely fit the data (i.e. have a low cost, for some user-defined cost function). *Open-ended question*: I’m not an expert Julia coder, and I have a full-time job that is orthogonal to this package, so if anybody had any pointers on how the codebase could be improved/extended/merged, I’d be really happy to hear about them. \n2. Would it be possible/reasonable to fit the package within the SciML ecosystem? The algorithm may not be battle-tested enough to do so (although I’ve put a few examples [here](<https://github.com/Dhruva2/MDCExamples>). Certainly it could be improved by people with expertise in numerical analysis. Nevertheless, the goals of the package fit well within those of the SciML organisation, as I see it.\nThanks!","user":"U01GJHBBR7E","ts":"1615572797.084300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NAiD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi all, I recently made a package ("},{"type":"link","url":"https://dhruva2.github.io/MinimallyDisruptiveCurves.docs/"},{"type":"text","text":") that’s in the process of being registered. I had a couple of questions/things I wanted to say. This slack channel seemed like the best fit(?):\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The package implements ‘regional’ sensitivity analysis for differentiable models by solving a differential equation on the model parameters, the trajectory of which conforms to parameter sets that closely fit the data (i.e. have a low cost, for some user-defined cost function). "},{"type":"text","text":"Open-ended question","style":{"bold":true}},{"type":"text","text":": I’m not an expert Julia coder, and I have a full-time job that is orthogonal to this package, so if anybody had any pointers on how the codebase could be improved/extended/merged, I’d be really happy to hear about them. "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Would it be possible/reasonable to fit the package within the SciML ecosystem? The algorithm may not be battle-tested enough to do so (although I’ve put a few examples [here]("},{"type":"link","url":"https://github.com/Dhruva2/MDCExamples"},{"type":"text","text":"). Certainly it could be improved by people with expertise in numerical analysis. Nevertheless, the goals of the package fit well within those of the SciML organisation, as I see it."}]}],"style":"ordered","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"\nThanks!"}]}]}]},{"client_msg_id":"899b317f-d835-435d-978b-bd5fbf482035","type":"message","text":"Is there a way to specify `jac_prototype` that is somehow type agnostic to work properly with autodiff and sensitivity analysis? For forward diff, for example, if I specify the Jacobian as a `Tridiagonal` with type `Float64` it will fail when differentiating because everything is of type `ForwardDiff.Dual` . However, if I define it with type `ForwardDiff.Dual` it will fail on the forward pass of sensitivity analysis (or with numerical diff) when things are type `Float64` .","user":"U01H36BUDJB","ts":"1615730119.090200","team":"T68168MUP","edited":{"user":"U01H36BUDJB","ts":"1615730128.000000"},"blocks":[{"type":"rich_text","block_id":"Lau","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a way to specify "},{"type":"text","text":"jac_prototype","style":{"code":true}},{"type":"text","text":" that is somehow type agnostic to work properly with autodiff and sensitivity analysis? For forward diff, for example, if I specify the Jacobian as a "},{"type":"text","text":"Tridiagonal","style":{"code":true}},{"type":"text","text":" with type "},{"type":"text","text":"Float64","style":{"code":true}},{"type":"text","text":" it will fail when differentiating because everything is of type "},{"type":"text","text":"ForwardDiff.Dual","style":{"code":true}},{"type":"text","text":" . However, if I define it with type "},{"type":"text","text":"ForwardDiff.Dual","style":{"code":true}},{"type":"text","text":" it will fail on the forward pass of sensitivity analysis (or with numerical diff) when things are type "},{"type":"text","text":"Float64","style":{"code":true}},{"type":"text","text":" ."}]}]}]},{"client_msg_id":"7ef0df59-73a6-459e-8197-79b1cc0657d7","type":"message","text":"that's specifically a ForwardDiffSensitivity issue?","user":"U69BL50BF","ts":"1615730186.090600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YZZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's specifically a ForwardDiffSensitivity issue?"}]}]}]},{"client_msg_id":"721a081c-5998-4e00-bb24-f294480d681d","type":"message","text":"I've so far observed it with `ForwardDiffSensitivity` , yes, but it seems like it would be a problem for reverse-mode as well because of `TrackedReal` .","user":"U01H36BUDJB","ts":"1615730230.091200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"G9q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I've so far observed it with "},{"type":"text","text":"ForwardDiffSensitivity","style":{"code":true}},{"type":"text","text":" , yes, but it seems like it would be a problem for reverse-mode as well because of "},{"type":"text","text":"TrackedReal","style":{"code":true}},{"type":"text","text":" ."}]}]}]},{"client_msg_id":"a25d9755-4432-45ec-aa47-f53bb0fa6d5a","type":"message","text":"open an issue with some examples. We should just force a promotion","user":"U69BL50BF","ts":"1615730265.091600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"A/Oe8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"open an issue with some examples. We should just force a promotion"}]}]}]},{"client_msg_id":"81661942-efbb-4db2-a3cb-a4890ed647f8","type":"message","text":"A well-placed `A .* u ./ u` solves it","user":"U69BL50BF","ts":"1615730285.091900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"i/OU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"A well-placed "},{"type":"text","text":"A .* u ./ u","style":{"code":true}},{"type":"text","text":" solves it"}]}]}]},{"client_msg_id":"36ec11bb-acf9-4d57-85b2-bcc16843be0e","type":"message","text":"on which repository? `DiffEqSensitivity` ?","user":"U01H36BUDJB","ts":"1615730305.092200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ija","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"on which repository? "},{"type":"text","text":"DiffEqSensitivity","style":{"code":true}},{"type":"text","text":" ?"}]}]}]},{"client_msg_id":"181f18a0-e144-44e8-be08-3987edd723fe","type":"message","text":"yes","user":"U69BL50BF","ts":"1615730417.092400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YipH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes"}]}]}],"reactions":[{"name":"+1","users":["U01H36BUDJB"],"count":1}]},{"client_msg_id":"d6410c33-6418-4216-a9c7-130344de5b5b","type":"message","text":"I guess I am a bit surprised that this is an issue, though. I thought maybe I was just doing something wrong. Has `jac_prototype` not been tested/used with sensitivity analysis in any of the examples?","user":"U01H36BUDJB","ts":"1615730502.093300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"N5Z2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess I am a bit surprised that this is an issue, though. I thought maybe I was just doing something wrong. Has "},{"type":"text","text":"jac_prototype","style":{"code":true}},{"type":"text","text":" not been tested/used with sensitivity analysis in any of the examples?"}]}]}]},{"client_msg_id":"d4ade8f2-c751-41b5-8082-29be296d1117","type":"message","text":"it's tested in the adjoint methods","user":"U69BL50BF","ts":"1615730610.093500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ukc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's tested in the adjoint methods"}]}]}]},{"client_msg_id":"b3c1f096-b721-4510-af80-0d116a99476d","type":"message","text":"continuous adjoint","user":"U69BL50BF","ts":"1615730618.093700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ByL1v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"continuous adjoint"}]}]}]},{"client_msg_id":"e54036c0-0cbf-410f-9cc0-b92b982d415c","type":"message","text":"it sounds like this is specific to sparsity + discrete adjoint methods","user":"U69BL50BF","ts":"1615730631.094100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jivvT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it sounds like this is specific to sparsity + discrete adjoint methods"}]}]}]},{"client_msg_id":"c99b6f58-1127-4b0f-98ab-4ca16f3e2195","type":"message","text":"but don't the continuous methods still use autodiff?","user":"U01H36BUDJB","ts":"1615730665.094500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"F22","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but don't the continuous methods still use autodiff?"}]}]}]},{"client_msg_id":"7c8a6a14-5e4f-4c8a-bb48-eb669d8cccfe","type":"message","text":"within the RHS, not over the solver","user":"U69BL50BF","ts":"1615730780.094700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oAx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"within the RHS, not over the solver"}]}]}]},{"client_msg_id":"97ee492b-a244-4385-ba80-2d97cd304a8a","type":"message","text":"ah right, that explains it","user":"U01H36BUDJB","ts":"1615730854.094900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5Te","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah right, that explains it"}]}]}]},{"client_msg_id":"91033403-6f98-41fb-a4d6-bece1593f7f8","type":"message","text":"I just asked a question on Gitter but from the history there and here it looks like it's not (at least bidirectionally) bridged to Slack? In general I'm pretty confused about where (other than Discourse) I can/should ask questions about ModelingToolkit/DifferentialEquations.","user":"U7ZNTQFLH","ts":"1615745924.096300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ucuo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I just asked a question on Gitter but from the history there and here it looks like it's not (at least bidirectionally) bridged to Slack? In general I'm pretty confused about where (other than Discourse) I can/should ask questions about ModelingToolkit/DifferentialEquations."}]}]}]},{"client_msg_id":"e630b254-8d34-483b-98c8-a48b7be81d3b","type":"message","text":"<@U6A936746> the bot :disappointed:","user":"U69BL50BF","ts":"1615745972.096600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vG3Z3","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U6A936746"},{"type":"text","text":" the bot "},{"type":"emoji","name":"disappointed"}]}]}]},{"client_msg_id":"64c4eb86-60a7-4765-bed5-6dba72ad1f20","type":"message","text":":robot_face: :fire:","user":"U69BL50BF","ts":"1615745977.096800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"olo","elements":[{"type":"rich_text_section","elements":[{"type":"emoji","name":"robot_face"},{"type":"text","text":" "},{"type":"emoji","name":"fire"}]}]}]},{"client_msg_id":"90d21840-d9e7-475a-bb18-9fe8f660d2f1","type":"message","text":"Should be back shortly","user":"U6A936746","ts":"1615746087.097200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RTQK2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Should be back shortly"}]}]}],"reactions":[{"name":"heart","users":["U7ZNTQFLH"],"count":1}]},{"type":"message","subtype":"bot_message","text":"@pbouffard for the most part, the packages should be independent in their development. DiffEq is really stable, so you should only need to be on release unless there's something major that happens (in which case, it's probably master in SciMLBase for an interface improvement relating to symbolics)","ts":"1615746104.097400","username":"[gitter] <ChrisRackauckas>","icons":{"image_48":"https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2017-10-18/257963008226_48.png"},"bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c175804g27iaek8aehs0","text":{"type":"mrkdwn","text":"@pbouffard for the most part, the packages should be independent in their development. DiffEq is really stable, so you should only need to be on release unless there's something major that happens (in which case, it's probably master in SciMLBase for an interface improvement relating to symbolics)","verbatim":false}}],"reactions":[{"name":"+1","users":["U7ZNTQFLH"],"count":1}]},{"client_msg_id":"d962f48f-edec-4302-8f52-66de2b7e4fdb","type":"message","text":"yay!","user":"U69BL50BF","ts":"1615746119.097800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yih9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yay!"}]}]}]},{"client_msg_id":"44593852-9bfc-49f4-bc40-64f4c9f41c85","type":"message","text":"this time the bot crashed not because of bugs in MattermostBridge / the libraries it uses. But because someone rebooted the server hosting my VM.","user":"U6A936746","ts":"1615746157.098600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5g1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this time the bot crashed not because of bugs in MattermostBridge / the libraries it uses. But because someone rebooted the server hosting my VM."}]}]}]},{"client_msg_id":"bb9c6bdf-21b6-4c9e-9aef-60855f868054","type":"message","text":"Hey folks, can anyone indicate the best control theory library to go with DiffEq nowadays. Like there is `ControlSystems.jl` I believe, but I was not sure if that is still the one to use, or if there is any plan for a more integrated `GalacticControl` library in the offing :slightly_smiling_face:. I want to just start with a simple LTI system to work out the kinks, but then I am trying to model an irrigation system for agriculture, so the \"system\" will be the St. Venant PDE shallow water equations, and the control will be opening and closing the gate. Or is this something that I should look at MTK for?","user":"UDDSTBX19","ts":"1615747721.102600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"td=n6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hey folks, can anyone indicate the best control theory library to go with DiffEq nowadays. Like there is "},{"type":"text","text":"ControlSystems.jl","style":{"code":true}},{"type":"text","text":" I believe, but I was not sure if that is still the one to use, or if there is any plan for a more integrated "},{"type":"text","text":"GalacticControl","style":{"code":true}},{"type":"text","text":" library in the offing "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":". I want to just start with a simple LTI system to work out the kinks, but then I am trying to model an irrigation system for agriculture, so the \"system\" will be the St. Venant PDE shallow water equations, and the control will be opening and closing the gate. Or is this something that I should look at MTK for?"}]}]}]},{"client_msg_id":"87fc6acb-4e80-4377-8205-e5e698a19d56","type":"message","text":"MTK isn't quite there yet. It's getting really close though.","user":"U69BL50BF","ts":"1615747816.102900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c3s9n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"MTK isn't quite there yet. It's getting really close though."}]}]}]},{"client_msg_id":"e3d4a17f-a903-43c3-9709-e7b0d04033cf","type":"message","text":"<@U69BL50BF> Yes, seems like you guys are making really good progress. So no rush. So then is `ControlSystems.jl` the best plan for now, and then update to MTK in the future?","user":"UDDSTBX19","ts":"1615748033.104100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qgE","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U69BL50BF"},{"type":"text","text":" Yes, seems like you guys are making really good progress. So no rush. So then is "},{"type":"text","text":"ControlSystems.jl","style":{"code":true}},{"type":"text","text":" the best plan for now, and then update to MTK in the future?"}]}]}]},{"client_msg_id":"f9974ba1-03df-42b3-8498-7232fddf632c","type":"message","text":"yes, and ControlSystems.jl may be a group we work with as a top level interface too. It's hard to know how this part is going to evolve.","user":"U69BL50BF","ts":"1615748332.104800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C33L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, and ControlSystems.jl may be a group we work with as a top level interface too. It's hard to know how this part is going to evolve."}]}]}],"reactions":[{"name":"heavy_check_mark","users":["UDDSTBX19"],"count":1}]},{"client_msg_id":"d00500cb-8620-4089-a2e7-2d0955ce213e","type":"message","text":"Controlsystems.jl almost exclusively concerns itself with linear control theory, for which it should correspond roughly to matlab control systems toolbox.","user":"UJ7DVTVQ8","ts":"1615752969.107300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hUTa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Controlsystems.jl almost exclusively concerns itself with linear control theory, for which it should correspond roughly to matlab control systems toolbox."}]}]}]},{"client_msg_id":"4477a353-0945-48fc-ac08-f4f7ac1c4d27","type":"message","text":"Matlab has more tools for robust synthesis, and we have more of typical Julia stuff, like support for ad, uncertainty propagation and good support for complex coefficient systems.","user":"UJ7DVTVQ8","ts":"1615753038.108900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+NY8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Matlab has more tools for robust synthesis, and we have more of typical Julia stuff, like support for ad, uncertainty propagation and good support for complex coefficient systems."}]}]}]},{"client_msg_id":"587612f4-9d31-4174-a6c7-3cfcded221b6","type":"message","text":"<@U69BL50BF> On a related note, I've been messing around with having MTK symbolically build open loop optimal control problems from the necessary conditions for the Pontryagin minimum principle and then passing it off to the `TwoPointBVProblem` solver (basically just pulling the function, parameters, and initial conditions out of the `ODESystem` manually). It seems to do pretty well. I'm just happy that it worked, to be honest. Is this a method you guys are already using with the `ControlSystem` type? The only thing I saw in the docs was for the discretize-then-optimize method.\n\nAlso, how do you currently handle final conditions in the objective function for the `ControlSystem` type? Like for free final state problems and such.","user":"US4A6G6B0","ts":"1615762198.119800","team":"T68168MUP","edited":{"user":"US4A6G6B0","ts":"1615762749.000000"},"blocks":[{"type":"rich_text","block_id":"luP","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U69BL50BF"},{"type":"text","text":" On a related note, I've been messing around with having MTK symbolically build open loop optimal control problems from the necessary conditions for the Pontryagin minimum principle and then passing it off to the "},{"type":"text","text":"TwoPointBVProblem","style":{"code":true}},{"type":"text","text":" solver (basically just pulling the function, parameters, and initial conditions out of the "},{"type":"text","text":"ODESystem","style":{"code":true}},{"type":"text","text":" manually). It seems to do pretty well. I'm just happy that it worked, to be honest. Is this a method you guys are already using with the "},{"type":"text","text":"ControlSystem","style":{"code":true}},{"type":"text","text":" type? The only thing I saw in the docs was for the discretize-then-optimize method.\n\nAlso, how do you currently handle final conditions in the objective function for the "},{"type":"text","text":"ControlSystem","style":{"code":true}},{"type":"text","text":" type? Like for free final state problems and such."}]}]}]},{"client_msg_id":"30b85200-a7b7-4990-ba8a-a2357ab436e8","type":"message","text":"how are you discretizing to the two point BVP?","user":"U69BL50BF","ts":"1615762746.120600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qd+c","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"how are you discretizing to the two point BVP?"}]}]}]},{"client_msg_id":"8f755919-aec8-4ac5-8acf-a2bf244d5008","type":"message","text":"```solve(bvp, MIRK4(), dt=0.05)```","user":"US4A6G6B0","ts":"1615762792.121000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/GXF","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"solve(bvp, MIRK4(), dt=0.05)"}]}]}]},{"client_msg_id":"c3fec95a-afb8-4c17-ab13-39a5551b3de0","type":"message","text":"Here's a gist:\n<https://gist.github.com/jonniedie/e02c0a8f82a10329eeeee66bcb262978>","user":"US4A6G6B0","ts":"1615763022.121900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lvfe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Here's a gist:\n"},{"type":"link","url":"https://gist.github.com/jonniedie/e02c0a8f82a10329eeeee66bcb262978"}]}]}]},{"client_msg_id":"8863ffb4-054c-4215-a8d9-8357edd48857","type":"message","text":"I definitely didn't do it the cleanest way, with getting variables from the other system, though. The string thing is kinda a hack just to get it working because I was having a hard time doing the derivatives with respect to state variables of the other system without bringing those variables in directly.","user":"US4A6G6B0","ts":"1615763109.123600","team":"T68168MUP","edited":{"user":"US4A6G6B0","ts":"1615763208.000000"},"blocks":[{"type":"rich_text","block_id":"azzV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I definitely didn't do it the cleanest way, with getting variables from the other system, though. The string thing is kinda a hack just to get it working because I was having a hard time doing the derivatives with respect to state variables of the other system without bringing those variables in directly."}]}]}]},{"client_msg_id":"660460fb-7f71-4f5c-a325-85dc75398254","type":"message","text":"oh yes, that's a variational method","user":"U69BL50BF","ts":"1615763724.124100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zvJs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh yes, that's a variational method"}]}]}]},{"client_msg_id":"90e2a4a8-2fb0-42e4-9ec7-57fc4e9be557","type":"message","text":"it's different from the one we have so far which requires an optimization.","user":"U69BL50BF","ts":"1615763733.124400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j8GK5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's different from the one we have so far which requires an optimization."}]}]}]},{"client_msg_id":"14e4734f-e461-4572-88bb-0e0f18420550","type":"message","text":"I don't know anything about Lie groups, but can these problem types not be used for faster sensitivity analysis?\n<https://diffeq.sciml.ai/stable/types/nonautonomous_linear_ode/#Note-About-Affine-Equations>","user":"UQEDP1Q5V","ts":"1615764058.126200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zJZnq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't know anything about Lie groups, but can these problem types not be used for faster sensitivity analysis?\n"},{"type":"link","url":"https://diffeq.sciml.ai/stable/types/nonautonomous_linear_ode/#Note-About-Affine-Equations"}]}]}]},{"client_msg_id":"bde65b7a-3593-476c-9b4f-ba0933285a21","type":"message","text":"```function spring_mass_damper_system(;name)\n  @variables x(t)\n  D = Differential(t)\n  @parameters M b k\n  eqs = [D(D(x)) ~ b/M*D(x) + k/M*x] # equations defining the system\n  iv = t # the independent variable\n  states = [x] # the dependent (state) variables\n  ps = [M, b, k] # parameter variables\n  default_u0 = [D(x) =&gt; 0.0, x =&gt; 0.0] # default initial conditions\n  default_p = [M =&gt; 1.0, b =&gt; 1.0, k =&gt; 1.0] # default parameter values\n  sys = ODESystem(eqs, iv, states, ps, name=name, default_u0=default_u0, default_p=default_p)\n  ode_order_lowering(sys)\nend\n\nfunction spring_mass_damper_problem()\n  @named smd_sys = spring_mass_damper_system()\n  @show smd_sys\n  u0 = [] # initial conditions (empty = use defaults)\n  tspan = (0, 10.0) # time span\n  u0_kludge = Vector{Pair{Num, Float64}}() # <https://github.com/SciML/ModelingToolkit.jl/issues/869>\n  prob = ODEProblem(smd_sys, u0_kludge, tspan)\n  # return prob\n  sol = solve(prob, Tsit5())\nend\n\nsol = spring_mass_damper_problem()```\nGives me\n\n```ERROR: MethodError: no method matching promote_typeof()\nClosest candidates are:\n  promote_typeof(::Any) at promotion.jl:271\n  promote_typeof(::Any, ::Any...) at promotion.jl:272\nStacktrace:\n  [1] varmap_to_vars(varmap::Dict{Num, Float64}, varlist::Vector{Term{Real, Nothing}}; defaults::Dict{Any, Any})\n    @ ModelingToolkit ~/.julia/dev/ModelingToolkit/src/variables.jl:15\n  [2] varmap_to_vars\n    @ ~/.julia/dev/ModelingToolkit/src/variables.jl:8 [inlined]\n  [3] #varmap_to_vars#11\n    @ ~/.julia/dev/ModelingToolkit/src/variables.jl:28 [inlined]\n  [4] (::ModelingToolkit.var\"#varmap_to_vars##kw\")(::NamedTuple{(:defaults,), Tuple{Dict{Any, Any}}}, ::typeof(ModelingToolkit.varmap_to_vars), varmap::Vector{Pair{Num, Float64}}, varlist::Vector{Term{Real, Nothing}})\n    @ ModelingToolkit ~/.julia/dev/ModelingToolkit/src/variables.jl:27\n  [5] process_DEProblem(constructor::Type, sys::ODESystem, u0map::Vector{Pair{Num, Float64}}, parammap::SciMLBase.NullParameters; version::Nothing, tgrad::Bool, jac::Bool, checkbounds::Bool, sparse::Bool, simplify::Bool, linenumbers::Bool, parallel::Symbolics.SerialForm, eval_expression::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n    @ ModelingToolkit ~/.julia/dev/ModelingToolkit/src/systems/diffeqs/abstractodesystem.jl:277\n  [6] process_DEProblem\n    @ ~/.julia/dev/ModelingToolkit/src/systems/diffeqs/abstractodesystem.jl:271 [inlined]\n  [7] (ODEProblem{true, tType, isinplace, P, F, K, PT} where {tType, isinplace, P, F, K, PT})(sys::ODESystem, u0map::Vector{Pair{Num, Float64}}, tspan::Tuple{Int64, Float64}, parammap::SciMLBase.NullParameters; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n    @ ModelingToolkit ~/.julia/dev/ModelingToolkit/src/systems/diffeqs/abstractodesystem.jl:323\n  [8] ODEProblem\n    @ ~/.julia/dev/ModelingToolkit/src/systems/diffeqs/abstractodesystem.jl:323 [inlined]\n  [9] ODEProblem\n    @ ~/.julia/dev/ModelingToolkit/src/systems/diffeqs/abstractodesystem.jl:323 [inlined]\n [10] #ODEProblem#162\n    @ ~/.julia/dev/ModelingToolkit/src/systems/diffeqs/abstractodesystem.jl:303 [inlined]\n [11] ODEProblem\n    @ ~/.julia/dev/ModelingToolkit/src/systems/diffeqs/abstractodesystem.jl:303 [inlined]\n [12] spring_mass_damper_problem()\n    @ Main ~/.julia/dev/ModelingToolkitExamples/examples/hellomtk.jl:78\n [13] top-level scope\n    @ ~/.julia/dev/ModelingToolkitExamples/examples/hellomtk.jl:83\nin expression starting at /Users/patrick/.julia/dev/ModelingToolkitExamples/examples/hellomtk.jl:83```\n","user":"U7ZNTQFLH","ts":"1615764328.128200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TO754","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function spring_mass_damper_system(;name)\n  @variables x(t)\n  D = Differential(t)\n  @parameters M b k\n  eqs = [D(D(x)) ~ b/M*D(x) + k/M*x] # equations defining the system\n  iv = t # the independent variable\n  states = [x] # the dependent (state) variables\n  ps = [M, b, k] # parameter variables\n  default_u0 = [D(x) => 0.0, x => 0.0] # default initial conditions\n  default_p = [M => 1.0, b => 1.0, k => 1.0] # default parameter values\n  sys = ODESystem(eqs, iv, states, ps, name=name, default_u0=default_u0, default_p=default_p)\n  ode_order_lowering(sys)\nend\n\nfunction spring_mass_damper_problem()\n  @named smd_sys = spring_mass_damper_system()\n  @show smd_sys\n  u0 = [] # initial conditions (empty = use defaults)\n  tspan = (0, 10.0) # time span\n  u0_kludge = Vector{Pair{Num, Float64}}() # "},{"type":"link","url":"https://github.com/SciML/ModelingToolkit.jl/issues/869"},{"type":"text","text":"\n  prob = ODEProblem(smd_sys, u0_kludge, tspan)\n  # return prob\n  sol = solve(prob, Tsit5())\nend\n\nsol = spring_mass_damper_problem()"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nGives me\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"ERROR: MethodError: no method matching promote_typeof()\nClosest candidates are:\n  promote_typeof(::Any) at promotion.jl:271\n  promote_typeof(::Any, ::Any...) at promotion.jl:272\nStacktrace:\n  [1] varmap_to_vars(varmap::Dict{Num, Float64}, varlist::Vector{Term{Real, Nothing}}; defaults::Dict{Any, Any})\n    @ ModelingToolkit ~/.julia/dev/ModelingToolkit/src/variables.jl:15\n  [2] varmap_to_vars\n    @ ~/.julia/dev/ModelingToolkit/src/variables.jl:8 [inlined]\n  [3] #varmap_to_vars#11\n    @ ~/.julia/dev/ModelingToolkit/src/variables.jl:28 [inlined]\n  [4] (::ModelingToolkit.var\"#varmap_to_vars##kw\")(::NamedTuple{(:defaults,), Tuple{Dict{Any, Any}}}, ::typeof(ModelingToolkit.varmap_to_vars), varmap::Vector{Pair{Num, Float64}}, varlist::Vector{Term{Real, Nothing}})\n    @ ModelingToolkit ~/.julia/dev/ModelingToolkit/src/variables.jl:27\n  [5] process_DEProblem(constructor::Type, sys::ODESystem, u0map::Vector{Pair{Num, Float64}}, parammap::SciMLBase.NullParameters; version::Nothing, tgrad::Bool, jac::Bool, checkbounds::Bool, sparse::Bool, simplify::Bool, linenumbers::Bool, parallel::Symbolics.SerialForm, eval_expression::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n    @ ModelingToolkit ~/.julia/dev/ModelingToolkit/src/systems/diffeqs/abstractodesystem.jl:277\n  [6] process_DEProblem\n    @ ~/.julia/dev/ModelingToolkit/src/systems/diffeqs/abstractodesystem.jl:271 [inlined]\n  [7] (ODEProblem{true, tType, isinplace, P, F, K, PT} where {tType, isinplace, P, F, K, PT})(sys::ODESystem, u0map::Vector{Pair{Num, Float64}}, tspan::Tuple{Int64, Float64}, parammap::SciMLBase.NullParameters; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n    @ ModelingToolkit ~/.julia/dev/ModelingToolkit/src/systems/diffeqs/abstractodesystem.jl:323\n  [8] ODEProblem\n    @ ~/.julia/dev/ModelingToolkit/src/systems/diffeqs/abstractodesystem.jl:323 [inlined]\n  [9] ODEProblem\n    @ ~/.julia/dev/ModelingToolkit/src/systems/diffeqs/abstractodesystem.jl:323 [inlined]\n [10] #ODEProblem#162\n    @ ~/.julia/dev/ModelingToolkit/src/systems/diffeqs/abstractodesystem.jl:303 [inlined]\n [11] ODEProblem\n    @ ~/.julia/dev/ModelingToolkit/src/systems/diffeqs/abstractodesystem.jl:303 [inlined]\n [12] spring_mass_damper_problem()\n    @ Main ~/.julia/dev/ModelingToolkitExamples/examples/hellomtk.jl:78\n [13] top-level scope\n    @ ~/.julia/dev/ModelingToolkitExamples/examples/hellomtk.jl:83\nin expression starting at /Users/patrick/.julia/dev/ModelingToolkitExamples/examples/hellomtk.jl:83"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1615764328.128200","reply_count":16,"reply_users_count":3,"latest_reply":"1615768157.133500","reply_users":["U69BL50BF","U6788D83U","U7ZNTQFLH"],"subscribed":false},{"client_msg_id":"72f5ea24-bea4-49b1-bb42-654c3f1ef154","type":"message","text":"it won't automatically construct a Lie group problem in reverse. That would be a good thing to add.","user":"U69BL50BF","ts":"1615764332.128400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j3IYb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it won't automatically construct a Lie group problem in reverse. That would be a good thing to add."}]}]}]},{"client_msg_id":"11cc876f-230e-48de-9741-6187467c5652","type":"message","text":"Also, should it not be\" extend A by a column containing g, and furthermore a zero row, the corresponding state has initial condition 1.\"","user":"UQEDP1Q5V","ts":"1615764343.128500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/=T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, should it not be\" extend A by a column containing g, and furthermore a zero row, the corresponding state has initial condition 1.\""}]}]}]},{"client_msg_id":"541b9d4d-e5e9-4456-b04f-0b903873ca4f","type":"message","text":"Forward mode could benefit also by just adding zero rows to A? For example, for a reaction problem containing 500 u and 500 p?","user":"UQEDP1Q5V","ts":"1615765641.130000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"luFQi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Forward mode could benefit also by just adding zero rows to A? For example, for a reaction problem containing 500 u and 500 p?"}]}]}]},{"client_msg_id":"01f606a5-58d9-4c23-a68b-496e296f602f","type":"message","text":"How can I create a step function of time to be included on the rhs of an ODE? My efforts so far all seem to result in `TypeError: non-boolean (Num) used in boolean context`.","user":"U7ZNTQFLH","ts":"1615770854.134800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bKAP/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How can I create a step function of time to be included on the rhs of an ODE? My efforts so far all seem to result in "},{"type":"text","text":"TypeError: non-boolean (Num) used in boolean context","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1615770854.134800","reply_count":2,"reply_users_count":2,"latest_reply":"1615771658.135100","reply_users":["UQEDP1Q5V","U69BL50BF"],"subscribed":false},{"client_msg_id":"21dad35a-e2b7-436e-96b6-e0268ba9983a","type":"message","text":"Has anyone had success with Strang splitting for multidimensional PDEs in Julia?","user":"U01C2E6TYEM","ts":"1615839350.136900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"r7K","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Has anyone had success with Strang splitting for multidimensional PDEs in Julia?"}]}]}]},{"client_msg_id":"b11b83eb-d6a3-4f69-b05f-fc3fa3e558d5","type":"message","text":"doing it by hand?","user":"U69BL50BF","ts":"1615839417.137100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GP/c","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"doing it by hand?"}]}]}]},{"client_msg_id":"bf8ddab1-7f15-4485-b1e9-d812b122729d","type":"message","text":"Yeah","user":"U01C2E6TYEM","ts":"1615839457.137400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"isRlz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah"}]}]}]}]}