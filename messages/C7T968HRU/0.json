{"cursor": 12, "messages": [{"client_msg_id":"985e9372-6752-4987-8b50-2e8439280138","type":"message","text":"I have a few questions, that perhaps are more general and basic than this channel, so I’m sorry if this is the wrong place to ask:\n\nI’m trying to implement neural CDE/ continuous time RNNs and I’ve got a basic, sluggish implementation running. The core of it is a `NeuralODE`-like struct that when called runs the following function\n```function (n::RNNODE)(X::DataInterpolations.LinearInterpolation,  u₀, p=n.p)\n\n    tstops = eltype(n.u₀).(collect(X.t))\n\n    dudt_= let re=n.re, x=X, preprocess=n.preprocess\n      (u,p,t) -&gt; re(p)(u, preprocess(X(t)))\n    end\n\n    ff = ODEFunction{false}(dudt_,tgrad=basic_tgrad)\n    prob = ODEProblem{false}(ff,u₀,getfield(n,:tspan),p)\n    solve(prob,n.args...;sense=n.sense, tstops=tstops, n.kwargs...)\nend```\nwhere `n.preprocess` is some function mapping an array to another array (e.g. permuting dimensions)\n\nQ 1) Is it always a good idea to use a `let` lock in cases like these as opposed a closure?\nQ 2) No matter what I try I keep hints from the profiler that the line `(u,p,t) -&gt; re(p)(u, preprocess(X(t)))`   is dynamically dispatched.  I’m not sure what I could do to avoid the dynamic dispatch. The preprocessing function is specified once, when the `RNNODE` constructor is used, after it’s constant for each solver step and each mini-batch.","user":"UPM0H43C7","ts":"1612816314.369300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pP9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have a few questions, that perhaps are more general and basic than this channel, so I’m sorry if this is the wrong place to ask:\n\nI’m trying to implement neural CDE/ continuous time RNNs and I’ve got a basic, sluggish implementation running. The core of it is a "},{"type":"text","text":"NeuralODE","style":{"code":true}},{"type":"text","text":"-like struct that when called runs the following function\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function (n::RNNODE)(X::DataInterpolations.LinearInterpolation,  u₀, p=n.p)\n\n    tstops = eltype(n.u₀).(collect(X.t))\n\n    dudt_= let re=n.re, x=X, preprocess=n.preprocess\n      (u,p,t) -> re(p)(u, preprocess(X(t)))\n    end\n\n    ff = ODEFunction{false}(dudt_,tgrad=basic_tgrad)\n    prob = ODEProblem{false}(ff,u₀,getfield(n,:tspan),p)\n    solve(prob,n.args...;sense=n.sense, tstops=tstops, n.kwargs...)\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"where "},{"type":"text","text":"n.preprocess","style":{"code":true}},{"type":"text","text":" is some function mapping an array to another array (e.g. permuting dimensions)\n\nQ 1) Is it always a good idea to use a "},{"type":"text","text":"let","style":{"code":true}},{"type":"text","text":" lock in cases like these as opposed a closure?\nQ 2) No matter what I try I keep hints from the profiler that the line "},{"type":"text","text":"(u,p,t) -> re(p)(u, preprocess(X(t))) ","style":{"code":true}},{"type":"text","text":"  is dynamically dispatched.  I’m not sure what I could do to avoid the dynamic dispatch. The preprocessing function is specified once, when the "},{"type":"text","text":"RNNODE","style":{"code":true}},{"type":"text","text":" constructor is used, after it’s constant for each solver step and each mini-batch."}]}]}]},{"client_msg_id":"14bccda1-5887-4d54-99d2-41aebed2cb65","type":"message","text":"&gt; Q 1) Is it always a good idea to use a `let` lock in cases like these as opposed a closure?\nIt's never bad","user":"U69BL50BF","ts":"1612816341.369600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bZMS","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"Q 1) Is it always a good idea to use a "},{"type":"text","text":"let","style":{"code":true}},{"type":"text","text":" lock in cases like these as opposed a closure?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"It's never bad"}]}]}]},{"client_msg_id":"a5e07922-2fe5-43fd-af5e-a3fdc84a20b7","type":"message","text":"&gt; dynamically dispatched.  I’m not sure what I could do to avoid the dynamic dispatch. The preprocessing function is specified once, when the `RNNODE` constructor is used, after it’s constant for each solver step and each mini-batch.","user":"U69BL50BF","ts":"1612816470.370000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bPWQV","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"dynamically dispatched.  I’m not sure what I could do to avoid the dynamic dispatch. The preprocessing function is specified once, when the "},{"type":"text","text":"RNNODE","style":{"code":true}},{"type":"text","text":" constructor is used, after it’s constant for each solver step and each mini-batch."}]}]}]},{"client_msg_id":"6df5a148-d553-4609-b571-be463859ce51","type":"message","text":"how is the type defined?","user":"U69BL50BF","ts":"1612816473.370200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VP1=l","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"how is the type defined?"}]}]}]},{"client_msg_id":"82e4f1cd-9f57-4cbe-acb0-442e644d773d","type":"message","text":"it’s a poor re-purposing of your code :smile:\n```struct RNNODE{M&lt;:AbstractRNNDELayer,P,RE,T,A,K,I,S} &lt;: NeuralDELayer\n    model::M\n    p::P\n    re::RE\n    tspan::T\n    args::A\n    kwargs::K\n    sense\n    in::I\n    hidden::I\n    preprocess\n    #extendedstates::S\n\n    function RNNODE(model,tspan, args...;p = nothing, preprocess = identity,\n        sense = InterpolatingAdjoint(autojacvec=ZygoteVJP()), append_input=false, kwargs...)\n        _p,re = destructure(model)\n        nhidden = size(model.Wᵣ,2)\n        nin = size(model.Wᵢ,2)\n        if isnothing(p)\n            p = _p\n        end\n\n        new{typeof(model),typeof(p),typeof(re),\n            typeof(tspan),typeof(args),typeof(kwargs),\n            typeof(nin), append_input}(\n            model,p,re,tspan,args,kwargs,sense,nin,\n            nhidden, preprocess)\n    end\nend```","user":"UPM0H43C7","ts":"1612816603.370800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6pPL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it’s a poor re-purposing of your code "},{"type":"emoji","name":"smile"},{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct RNNODE{M<:AbstractRNNDELayer,P,RE,T,A,K,I,S} <: NeuralDELayer\n    model::M\n    p::P\n    re::RE\n    tspan::T\n    args::A\n    kwargs::K\n    sense\n    in::I\n    hidden::I\n    preprocess\n    #extendedstates::S\n\n    function RNNODE(model,tspan, args...;p = nothing, preprocess = identity,\n        sense = InterpolatingAdjoint(autojacvec=ZygoteVJP()), append_input=false, kwargs...)\n        _p,re = destructure(model)\n        nhidden = size(model.Wᵣ,2)\n        nin = size(model.Wᵢ,2)\n        if isnothing(p)\n            p = _p\n        end\n\n        new{typeof(model),typeof(p),typeof(re),\n            typeof(tspan),typeof(args),typeof(kwargs),\n            typeof(nin), append_input}(\n            model,p,re,tspan,args,kwargs,sense,nin,\n            nhidden, preprocess)\n    end\nend"}]}]}]},{"client_msg_id":"8a35877a-6602-4d2b-b089-7ce23634a5e0","type":"message","text":"the lack of the type on preprocess is the issue","user":"U69BL50BF","ts":"1612816733.371100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5uuB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the lack of the type on preprocess is the issue"}]}]}]},{"client_msg_id":"2072aa4f-91bd-4fc7-82c9-53e1217bcc76","type":"message","text":"it needs a type parameter","user":"U69BL50BF","ts":"1612816736.371300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YW5xL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it needs a type parameter"}]}]}],"thread_ts":"1612816736.371300","reply_count":3,"reply_users_count":2,"latest_reply":"1612818110.374000","reply_users":["UPM0H43C7","U69BL50BF"],"subscribed":false},{"client_msg_id":"804e536e-c5f3-4ded-b92e-6d37e9a6c847","type":"message","text":"ah, cool","user":"UPM0H43C7","ts":"1612816758.371700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2Ooul","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah, cool"}]}]}]},{"type":"message","subtype":"bot_message","text":"Is it possible to access lsoda() when using diffeqpy? When I try using de.lsoda(), I get an attribute error. Note that I already installed LSODA.jl using Pkg.add(\"LSODA\"). I am able to access solvers in Sundials like CVODE_BDF and CODE_Adams.","ts":"1612817361.372800","username":"[gitter] <sibyjackgrove>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c05cuukg27ibs0bi3tjg","text":{"type":"mrkdwn","text":"Is it possible to access lsoda() when using diffeqpy? When I try using de.lsoda(), I get an attribute error. Note that I already installed LSODA.jl using Pkg.add(\"LSODA\"). I am able to access solvers in Sundials like CVODE_BDF and CODE_Adams.","verbatim":false}}]},{"client_msg_id":"342b9df0-1509-44b0-a03a-b3d35997ab9b","type":"message","text":"@sibyjackgrove you'll need to `using LSODA` , probably through `eval`.","user":"U69BL50BF","ts":"1612818080.373700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8QKWJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"@sibyjackgrove you'll need to "},{"type":"text","text":"using LSODA","style":{"code":true}},{"type":"text","text":" , probably through "},{"type":"text","text":"eval","style":{"code":true}},{"type":"text","text":"."}]}]}]},{"type":"message","subtype":"bot_message","text":"@chr @GitterIRCbot  &gt; [slack] &lt;chrisrackauckas&gt; @sibyjackgrove you'll need to `using LSODA` , probably through `eval`.  I tried Main.eval(\"using LSODA\") . But  de.lsoda still gives error.","ts":"1612819824.374300","username":"[gitter] <sibyjackgrove>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c05cuukg27ibs0bi3tjg","text":{"type":"mrkdwn","text":"@chr @GitterIRCbot \n&gt; [slack] &lt;chrisrackauckas&gt; @sibyjackgrove you'll need to `using LSODA` , probably through `eval`.\n\nI tried Main.eval(\"using LSODA\") . But  de.lsoda still gives error.","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"@ChrisRackauckas  &gt; [slack] &lt;chrisrackauckas&gt; @sibyjackgrove you'll need to `using LSODA` , probably through `eval`.  I tried Main.eval(\"using LSODA\") . But  de.lsoda still gives error.","ts":"1612819926.374400","username":"[gitter] <sibyjackgrove>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c05cuukg27ibs0bi3tjg","text":{"type":"mrkdwn","text":"@ChrisRackauckas \n&gt; [slack] &lt;chrisrackauckas&gt; @sibyjackgrove you'll need to `using LSODA` , probably through `eval`.\n\nI tried Main.eval(\"using LSODA\") . But  de.lsoda still gives error.","verbatim":false}}]},{"client_msg_id":"0f30414d-5d3b-455a-b013-08fc506bc68f","type":"message","text":"when you eval'd did it return anything?","user":"U69BL50BF","ts":"1612820110.374700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d0rn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"when you eval'd did it return anything?"}]}]}]},{"type":"message","subtype":"bot_message","text":"@ChrisRackauckas  &gt; [slack] &lt;chrisrackauckas&gt; when you eval'd did it return anything?  No, Main.eval(\"using LSODA\") is returning an none. I also tried importing using: from julia import LSODA and it is importing without error. Though de.lsoda is still not working.","ts":"1612820343.374800","username":"[gitter] <sibyjackgrove>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c05cuukg27ibs0bi3tjg","text":{"type":"mrkdwn","text":"@ChrisRackauckas \n&gt; [slack] &lt;chrisrackauckas&gt; when you eval'd did it return anything?\n\nNo, Main.eval(\"using LSODA\") is returning an none. I also tried importing using: from julia import LSODA and it is importing without error. Though de.lsoda is still not working.","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"Does diffeqpy use GPU automatically depending on the size of the ODE system? If not,  could you tell me how I can make it use GPU for large  ODE systems (&gt;1,000 ODEs).","ts":"1612820648.374900","username":"[gitter] <sibyjackgrove>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c05cuukg27ibs0bi3tjg","text":{"type":"mrkdwn","text":"Does diffeqpy use GPU automatically depending on the size of the ODE system? If not,  could you tell me how I can make it use GPU for large  ODE systems (&gt;1,000 ODEs).","verbatim":false}}]},{"client_msg_id":"3e410a6a-b6d4-4b75-9397-8f308e2b7467","type":"message","text":"You'll need to convert the differential equations to Julia in order to make use of GPUs, and then use CuArray initial conditions like shown in <https://github.com/SciML/DiffEqGPU.jl#within-method-gpu-parallelism-with-direct-cuarray-usage>","user":"U69BL50BF","ts":"1612820835.375700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R25M","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You'll need to convert the differential equations to Julia in order to make use of GPUs, and then use CuArray initial conditions like shown in "},{"type":"link","url":"https://github.com/SciML/DiffEqGPU.jl#within-method-gpu-parallelism-with-direct-cuarray-usage"}]}]}]},{"client_msg_id":"2d6be5b4-9c31-42d8-96f4-a92b1426c6af","type":"message","text":"Right now we cannot GPU accelerate code from Python.","user":"U69BL50BF","ts":"1612820853.376000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"t+xDz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Right now we cannot GPU accelerate code from Python."}]}]}]},{"type":"message","subtype":"bot_message","text":"@ChrisRackauckas   &gt; [slack] &lt;chrisrackauckas&gt; You'll need to convert the differential equations to Julia in order to make use of GPUs, and then use CuArray initial conditions like shown in <https://github.com/SciML/DiffEqGPU.jl#within-method-gpu-parallelism-with-direct-cuarray-usage>  ","ts":"1612820987.376100","username":"[gitter] <sibyjackgrove>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c05cuukg27ibs0bi3tjg","text":{"type":"mrkdwn","text":"@ChrisRackauckas \n\n&gt; [slack] &lt;chrisrackauckas&gt; You'll need to convert the differential equations to Julia in order to make use of GPUs, and then use CuArray initial conditions like shown in <https://github.com/SciML/DiffEqGPU.jl#within-method-gpu-parallelism-with-direct-cuarray-usage>\n\n","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"@ChrisRackauckas ","ts":"1612820999.376200","username":"[gitter] <sibyjackgrove>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c05cuukg27ibs0bi3tjg","text":{"type":"mrkdwn","text":"@ChrisRackauckas ","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"@ChrisRackauckas  &gt; [slack] &lt;chrisrackauckas&gt; You'll need to convert the differential equations to Julia in order to make use of GPUs, and then use CuArray initial conditions like shown in <https://github.com/SciML/DiffEqGPU.jl#within-method-gpu-parallelism-with-direct-cuarray-usage>  Oh ok. So I need to convert the ODEs to Julia. But can I still use diffeqpy for solving the ODEs?","ts":"1612821257.376300","username":"[gitter] <sibyjackgrove>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c05cuukg27ibs0bi3tjg","text":{"type":"mrkdwn","text":"@ChrisRackauckas \n&gt; [slack] &lt;chrisrackauckas&gt; You'll need to convert the differential equations to Julia in order to make use of GPUs, and then use CuArray initial conditions like shown in <https://github.com/SciML/DiffEqGPU.jl#within-method-gpu-parallelism-with-direct-cuarray-usage>\n\nOh ok. So I need to convert the ODEs to Julia. But can I still use diffeqpy for solving the ODEs?","verbatim":false}}]},{"client_msg_id":"26127e23-86f6-407d-b30d-d2821115dc79","type":"message","text":"Yeah. There's a caveat with the GPU stuff needing to be defined on the Julia side because we need to recompile it for GPUs, but you can still call the solver from diffeqpy if that part has been done.","user":"U69BL50BF","ts":"1612821383.377000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oXvl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah. There's a caveat with the GPU stuff needing to be defined on the Julia side because we need to recompile it for GPUs, but you can still call the solver from diffeqpy if that part has been done."}]}]}]},{"client_msg_id":"0a11a23a-4baa-42ce-8fad-38a222c9ede4","type":"message","text":"So when using DiffEqFlux `sciml_train` or `Flux.train!` , there is currently no way to specify only subcomponents of `p`  to be optimized, correct? But this is a planned feature for the future?","user":"U01H36BUDJB","ts":"1612860943.378400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7oJ8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So when using DiffEqFlux "},{"type":"text","text":"sciml_train","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"Flux.train!","style":{"code":true}},{"type":"text","text":" , there is currently no way to specify only subcomponents of "},{"type":"text","text":"p","style":{"code":true}},{"type":"text","text":"  to be optimized, correct? But this is a planned feature for the future?"}]}]}]},{"client_msg_id":"466cffe8-bfed-4998-aa0b-72810f77fa27","type":"message","text":"it's planned","user":"U69BL50BF","ts":"1612872178.378600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jqGh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's planned"}]}]}]},{"type":"message","subtype":"bot_message","text":"Is there any way to convert a system of ODEs which were defined using ArrayPartitions (such as the example here <https://diffeq.sciml.ai/stable/features/diffeq_arrays/>) to an ODESystem using modelingtoolkitize? Seems modelingtoolkitize can't pick out all the states, lhs, and rhs equations at the moment? ","ts":"1612881486.378700","username":"[gitter] <timknab>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c05cuukg27ibs0bi3tjg","text":{"type":"mrkdwn","text":"Is there any way to convert a system of ODEs which were defined using ArrayPartitions (such as the example here <https://diffeq.sciml.ai/stable/features/diffeq_arrays/>) to an ODESystem using modelingtoolkitize? Seems modelingtoolkitize can't pick out all the states, lhs, and rhs equations at the moment? ","verbatim":false}}]},{"client_msg_id":"cb47ff1d-2a52-4177-95d3-76d535b27ab8","type":"message","text":"oh interesting. Open an issue with an MWE","user":"U69BL50BF","ts":"1612882585.379000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p/uM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh interesting. Open an issue with an MWE"}]}]}]},{"client_msg_id":"c70521b2-94f1-4e33-a24f-44b9dbb15326","type":"message","text":"I would've thought the linear index would work there","user":"U69BL50BF","ts":"1612882596.379200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lu4T=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I would've thought the linear index would work there"}]}]}]},{"type":"message","subtype":"bot_message","text":"Opened an issue in ModelingToolkit, thanks","ts":"1612884402.379300","username":"[gitter] <timknab>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c05cuukg27ibs0bi3tjg","text":{"type":"mrkdwn","text":"Opened an issue in ModelingToolkit, thanks","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"@ChrisRackauckas  &gt; [slack] &lt;chrisrackauckas&gt; Yeah. There's a caveat with the GPU stuff needing to be defined on the Julia side because we need to recompile it for GPUs, but you can still call the solver from diffeqpy if that part has been done.  Thank you for the clarification!","ts":"1612885930.379400","username":"[gitter] <sibyjackgrove>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c05cuukg27ibs0bi3tjg","text":{"type":"mrkdwn","text":"@ChrisRackauckas \n&gt; [slack] &lt;chrisrackauckas&gt; Yeah. There's a caveat with the GPU stuff needing to be defined on the Julia side because we need to recompile it for GPUs, but you can still call the solver from diffeqpy if that part has been done.\n\nThank you for the clarification!","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"When I am solving a large system of ODEs (&gt;100 ODE) using diffeqpy, I see that only core is being utilized. Is there a setting that I can use to make the solver use multiple cores?","ts":"1612887331.379500","username":"[gitter] <sibyjackgrove>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c05cuukg27ibs0bi3tjg","text":{"type":"mrkdwn","text":"When I am solving a large system of ODEs (&gt;100 ODE) using diffeqpy, I see that only core is being utilized. Is there a setting that I can use to make the solver use multiple cores?","verbatim":false}}]},{"client_msg_id":"02a41430-ed7c-48ca-8bab-51275c17a641","type":"message","text":"the implicit methods will make use of multithreading if it's helpful (it's not always). Otherwise, most parallelism comes from the user definition of `f`.","user":"U69BL50BF","ts":"1612888665.380300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JdBwF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the implicit methods will make use of multithreading if it's helpful (it's not always). Otherwise, most parallelism comes from the user definition of "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":"."}]}]}]},{"client_msg_id":"6f512967-d3a3-416f-a732-b6ee76846573","type":"message","text":"The way this is usually then handled is through the auto-parallelism of ModelingToolkit, which isn't quite available from Python yet.","user":"U69BL50BF","ts":"1612888735.380800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vwp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The way this is usually then handled is through the auto-parallelism of ModelingToolkit, which isn't quite available from Python yet."}]}]}]},{"client_msg_id":"bdfc152a-0cb3-48d2-a867-4b32cdb5f7e7","type":"message","text":"<https://www.youtube.com/watch?v=Jf2VUGaPL4k>","user":"U69BL50BF","ts":"1612888736.381000","team":"T68168MUP","attachments":[{"service_name":"YouTube","service_url":"https://www.youtube.com/","title":"Christopher Rackauckas - Accelerating Differential Equations In R and Python| PyData GLobal 2020","title_link":"https://www.youtube.com/watch?v=Jf2VUGaPL4k","author_name":"PyData","author_link":"https://www.youtube.com/user/PyDataTV","thumb_url":"https://i.ytimg.com/vi/Jf2VUGaPL4k/hqdefault.jpg","thumb_width":480,"thumb_height":360,"fallback":"YouTube Video: Christopher Rackauckas - Accelerating Differential Equations In R and Python| PyData GLobal 2020","video_html":"<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/Jf2VUGaPL4k?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","video_html_width":400,"video_html_height":225,"from_url":"https://www.youtube.com/watch?v=Jf2VUGaPL4k","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png","id":1,"original_url":"https://www.youtube.com/watch?v=Jf2VUGaPL4k"}],"blocks":[{"type":"rich_text","block_id":"kU9","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://www.youtube.com/watch?v=Jf2VUGaPL4k"}]}]}]},{"client_msg_id":"906dd6fb-f7ac-46e6-8532-085b941e5e94","type":"message","text":"that talk will hopefully solidify a few things about our progress in that domain.","user":"U69BL50BF","ts":"1612888751.381500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rGw5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that talk will hopefully solidify a few things about our progress in that domain."}]}]}]},{"type":"message","subtype":"bot_message","text":"@ChrisRackauckas  Yes, I watched this talk. From what I understand, the ODE should be in Julia to make use of ModelingToolkit. Is that right? ","ts":"1612888934.381600","username":"[gitter] <sibyjackgrove>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c05cuukg27ibs0bi3tjg","text":{"type":"mrkdwn","text":"@ChrisRackauckas  Yes, I watched this talk. From what I understand, the ODE should be in Julia to make use of ModelingToolkit. Is that right? ","verbatim":false}}]},{"client_msg_id":"9cc8194a-1a1a-45db-bfef-e7e4cd14b34f","type":"message","text":"From R we can automatically transform the equation to MTK","user":"U69BL50BF","ts":"1612888987.381900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LNPR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"From R we can automatically transform the equation to MTK"}]}]}]},{"client_msg_id":"a25bfa0e-3b3a-420d-b66c-c38516d7cf65","type":"message","text":"From Python we currently cannot, and hopefully that will get fixed this year.","user":"U69BL50BF","ts":"1612889036.382500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6xu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"From Python we currently cannot, and hopefully that will get fixed this year."}]}]}]},{"type":"message","subtype":"bot_message","text":"@ChrisRackauckas Ok, thanks for clarification.","ts":"1612889071.382600","username":"[gitter] <sibyjackgrove>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c05cuukg27ibs0bi3tjg","text":{"type":"mrkdwn","text":"@ChrisRackauckas Ok, thanks for clarification.","verbatim":false}}]},{"client_msg_id":"419569e1-7687-4f79-8872-265ca7a359fe","type":"message","text":"Is it possible to have overlapping array components with ComponentArrays? It appears not. This is an issue for me because I need to compute boundary conditions between components, so each component will share one cell/index at the boundary, and the boundary condition would itself require a component at (and around) the boundary.","user":"U01H36BUDJB","ts":"1612893020.384200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"chRox","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is it possible to have overlapping array components with ComponentArrays? It appears not. This is an issue for me because I need to compute boundary conditions between components, so each component will share one cell/index at the boundary, and the boundary condition would itself require a component at (and around) the boundary."}]}]}]},{"type":"message","subtype":"bot_message","text":"Thanks! Did you end up getting to this yesterday? I don't see any changes on the github repo, but maybe I'm looking in the wrong place.","ts":"1612893758.384300","username":"[gitter] <damonbayer>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c05cuukg27ibs0bi3tjg","text":{"type":"mrkdwn","text":"Thanks! Did you end up getting to this yesterday? I don't see any changes on the github repo, but maybe I'm looking in the wrong place.","verbatim":false}}]},{"client_msg_id":"548803f7-b248-446d-8488-2f07455f3f0f","type":"message","text":"@damonbayer it should be good now. It was a versioning issue so I had to tag something else. Let me run the diffeqr test set to see if that handled it though.","user":"U69BL50BF","ts":"1612895296.385000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p6YM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"@damonbayer it should be good now. It was a versioning issue so I had to tag something else. Let me run the diffeqr test set to see if that handled it though."}]}]}]},{"client_msg_id":"d8f7adb9-ec27-46ae-9c17-16f52d1ff2d8","type":"message","text":"Is there a way to cause the solver to terminate early based on some arbitrary criteria, e.g. if a control system has stabilized a system at a reference state?","user":"U7ZNTQFLH","ts":"1612898970.386700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Awnn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a way to cause the solver to terminate early based on some arbitrary criteria, e.g. if a control system has stabilized a system at a reference state?"}]}]}]},{"client_msg_id":"49185518-ff1d-4c8f-9e34-4854ad015aca","type":"message","text":"yes, use a `ContinuousCallback` and use the `terminate!(integrator)` function from the Integrator interface <@U7ZNTQFLH>","user":"U69BL50BF","ts":"1612899077.387300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vZo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, use a "},{"type":"text","text":"ContinuousCallback","style":{"code":true}},{"type":"text","text":" and use the "},{"type":"text","text":"terminate!(integrator)","style":{"code":true}},{"type":"text","text":" function from the Integrator interface "},{"type":"user","user_id":"U7ZNTQFLH"}]}]}]},{"client_msg_id":"32e23f9d-12d3-439d-a546-596e06ce24e4","type":"message","text":"there's an example on the callbacks and event handling page.","user":"U69BL50BF","ts":"1612899085.387600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LlW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there's an example on the callbacks and event handling page."}]}]}],"thread_ts":"1612899085.387600","reply_count":1,"reply_users_count":1,"latest_reply":"1612899232.387700","reply_users":["U7ZNTQFLH"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"When I try using de.CVODE_BDF(linear_solver=\"LapackDense\"). I get the error: Julia exception: Linear solver choice not accepted. Could you let me know how I can give change the linear solver option.","ts":"1612900751.387900","username":"[gitter] <sibyjackgrove>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c05cuukg27ibs0bi3tjg","text":{"type":"mrkdwn","text":"When I try using de.CVODE_BDF(linear_solver=\"LapackDense\"). I get the error: Julia exception: Linear solver choice not accepted. Could you let me know how I can give change the linear solver option.","verbatim":false}}]},{"client_msg_id":"67617d05-6a00-4963-9b4f-5ed4744e8375","type":"message","text":"Hi,\n\nI want to have  sparse matrix of Laplacian with periodic boundary conditions. I tried DiffEqOpe but this does not work\n\n```function DiffOp(N, lx)\n\thx = 2lx/N\n\t# D   = CenteredDifference(2, 2, hx, N)\n\tD2x = CenteredDifference(2, 2, hx, N)\n\tQx = PeriodicBC(typeof(hx))\n\tΔ = sparse(D2x * Qx)\n\treturn Δ\nend\n\tDiffOp(100, 1.)```\nIs it not supposed to work like that?","user":"U7GQE9JP9","ts":"1612902458.388700","team":"T68168MUP","edited":{"user":"U7GQE9JP9","ts":"1612903648.000000"},"blocks":[{"type":"rich_text","block_id":"YgLw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi,\n\nI want to have  sparse matrix of Laplacian with periodic boundary conditions. I tried DiffEqOpe but this does not work\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function DiffOp(N, lx)\n\thx = 2lx/N\n\t# D   = CenteredDifference(2, 2, hx, N)\n\tD2x = CenteredDifference(2, 2, hx, N)\n\tQx = PeriodicBC(typeof(hx))\n\tΔ = sparse(D2x * Qx)\n\treturn Δ\nend\n\tDiffOp(100, 1.)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Is it not supposed to work like that?"}]}]}]},{"type":"message","subtype":"bot_message","text":"I believe I installed the patch you referenced: `remotes::install_github(repo = \"SciML/diffeqr\", ref = \"ChrisRackauckas-patch-1\")`, but I still run into the same error when with `diffeq_setup`. ","ts":"1612903335.389000","username":"[gitter] <damonbayer>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c05cuukg27ibs0bi3tjg","text":{"type":"mrkdwn","text":"I believe I installed the patch you referenced: `remotes::install_github(repo = \"SciML/diffeqr\", ref = \"ChrisRackauckas-patch-1\")`, but I still run into the same error when with `diffeq_setup`.\n","verbatim":false}}]},{"client_msg_id":"1bb363bf-a316-40a1-b590-563505894f77","type":"message","text":"@sibyjackgrove it's supposed to be a Julia Symbol, `:LapackDense`, not a string. I am not quite sure how you make that from Python: maybe you need to eval it? `de.CVODE_BDF(linear_solver=de.eval(\":LapackDense \")`?","user":"U69BL50BF","ts":"1612903491.390400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7ZTr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"@sibyjackgrove it's supposed to be a Julia Symbol, "},{"type":"text","text":":LapackDense","style":{"code":true}},{"type":"text","text":", not a string. I am not quite sure how you make that from Python: maybe you need to eval it? "},{"type":"text","text":"de.CVODE_BDF(linear_solver=de.eval(\":LapackDense \")","style":{"code":true}},{"type":"text","text":"?"}]}]}]},{"client_msg_id":"100d4df9-f1cd-40c7-9e93-ff015bed424c","type":"message","text":"<@UC7AF7NSU> do you know how to make a symbol from Python?","user":"U69BL50BF","ts":"1612903515.391000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c/C","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UC7AF7NSU"},{"type":"text","text":" do you know how to make a symbol from Python?"}]}]}]},{"client_msg_id":"b281d919-ea42-4a12-b2a0-d31eb6b19153","type":"message","text":"@damonbayer yeah I see the test failure. I think the package server just hasn't updated yet.","user":"U69BL50BF","ts":"1612903529.391400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dVNK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"@damonbayer yeah I see the test failure. I think the package server just hasn't updated yet."}]}]}]},{"client_msg_id":"5327d475-383e-4257-8acb-291c4f4e6865","type":"message","text":"<@U7GQE9JP9> what's the issue there?","user":"U69BL50BF","ts":"1612903548.391600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wKsTN","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U7GQE9JP9"},{"type":"text","text":" what's the issue there?"}]}]}]},{"client_msg_id":"54532a5b-00e1-49be-99b2-e431611aff11","type":"message","text":"dimension mismatch","user":"U7GQE9JP9","ts":"1612903581.391800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Un3E","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"dimension mismatch"}]}]}]},{"client_msg_id":"87754043-19f9-4b5e-a226-9b4d53ea433d","type":"message","text":"I am ono master","user":"U7GQE9JP9","ts":"1612903586.392000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FQw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am ono master"}]}]}]},{"client_msg_id":"038be5c5-f405-4170-8ba1-f226d5d1836c","type":"message","text":"open an issue with that","user":"U69BL50BF","ts":"1612903653.392300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=C5A","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"open an issue with that"}]}]}]},{"client_msg_id":"5f9aa691-19c3-4b7a-a157-95ced334819a","type":"message","text":"ok","user":"U7GQE9JP9","ts":"1612903662.392700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SVcmD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ok"}]}]}]},{"client_msg_id":"3e32c9f0-ca66-4c2f-b1f3-7cc856437d21","type":"message","text":"one of the operator GSoCs might be interested in taking a look","user":"U69BL50BF","ts":"1612903669.392900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wFaW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"one of the operator GSoCs might be interested in taking a look"}]}]}]},{"client_msg_id":"239cb72c-eae5-4e89-933b-faafdd4d546d","type":"message","text":"I'm not quite why that would fail though since I think we have tests directly on that case so it's suspicious.","user":"U69BL50BF","ts":"1612903687.393400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Cmp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not quite why that would fail though since I think we have tests directly on that case so it's suspicious."}]}]}]},{"client_msg_id":"e1aec714-c797-41e1-a645-f01add9dd0ea","type":"message","text":"done: <https://github.com/SciML/DiffEqOperators.jl/issues/331>","user":"U7GQE9JP9","ts":"1612903859.393600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"J1b","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"done: "},{"type":"link","url":"https://github.com/SciML/DiffEqOperators.jl/issues/331"}]}]}]},{"client_msg_id":"008d0c6e-410c-4769-a24f-efd9b99251b6","type":"message","text":"<@U69BL50BF> I would like to ask you something else","user":"U7GQE9JP9","ts":"1612903875.394000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Llv","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U69BL50BF"},{"type":"text","text":" I would like to ask you something else"}]}]}]},{"type":"message","subtype":"bot_message","text":"@ChrisRackauckas  &gt; [slack] &lt;chrisrackauckas&gt; @sibyjackgrove it's supposed to be a Julia Symbol, `:LapackDense`, not a string. I am not quite sure how you make that from Python: maybe you need to eval it? `de.CVODE_BDF(linear_solver=de.eval(\":LapackDense \")`?  Unfortunately, de.CVODE_BDF(linear_solver=de.eval(\":LapackDense \") doesn't work.","ts":"1612903923.394400","username":"[gitter] <sibyjackgrove>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c05cuukg27ibs0bi3tjg","text":{"type":"mrkdwn","text":"@ChrisRackauckas \n&gt; [slack] &lt;chrisrackauckas&gt; @sibyjackgrove it's supposed to be a Julia Symbol, `:LapackDense`, not a string. I am not quite sure how you make that from Python: maybe you need to eval it? `de.CVODE_BDF(linear_solver=de.eval(\":LapackDense \")`?\n\nUnfortunately, de.CVODE_BDF(linear_solver=de.eval(\":LapackDense \") doesn't work.","verbatim":false}}]},{"client_msg_id":"7df92dc8-3768-4cd2-9a28-771fa7f4033b","type":"message","text":"I often face the issue of declaring the type of something  that is not known at compile time. A  bad example is to save the eigenvectors of an operator. Depending on the method, they have different type. But you dont know it until you compute it so I have to precompute  it and send it to the data for saving. This feels clunky. I am not sure I describe the thing well, partly because I manage to get  around this but I am not satisfied. I can feel it if I addd more utilities, I have to change my structs.","user":"U7GQE9JP9","ts":"1612904129.397600","team":"T68168MUP","edited":{"user":"U7GQE9JP9","ts":"1612904172.000000"},"blocks":[{"type":"rich_text","block_id":"Vfs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I often face the issue of declaring the type of something  that is not known at compile time. A  bad example is to save the eigenvectors of an operator. Depending on the method, they have different type. But you dont know it until you compute it so I have to precompute  it and send it to the data for saving. This feels clunky. I am not sure I describe the thing well, partly because I manage to get  around this but I am not satisfied. I can feel it if I addd more utilities, I have to change my structs."}]}]}]},{"type":"message","subtype":"bot_message","text":"New here and not sure if I am right here with this question, but I am trying to create an `ODESystem` in  `ModelingToolkit.jl` using a for loop like so: ``` parnames = [\"k1\", \"k2\"] for parname in parnames        @parameters parname end  k1 ERROR: UndefVarError: k1 not defined ```  I think this is wrong on several levels (including for loop scoping). Does anyone have an idea how I can use strings with the `@parameter` macro in a for loop (or otherwise know where to ask this question best)? Thanks!","ts":"1612906415.397800","username":"[gitter] <paulflang>","bot_id":"B795XHD0X","thread_ts":"1612906415.397800","reply_count":2,"reply_users_count":1,"latest_reply":"1612907579.398200","reply_users":["U01H36BUDJB"],"subscribed":false,"blocks":[{"type":"section","block_id":"matterbridge_c05cuukg27ibs0bi3tjg","text":{"type":"mrkdwn","text":"New here and not sure if I am right here with this question, but I am trying to create an `ODESystem` in  `ModelingToolkit.jl` using a for loop like so:\n```\nparnames = [\"k1\", \"k2\"]\nfor parname in parnames\n       @parameters parname\nend\n\nk1\nERROR: UndefVarError: k1 not defined\n```\n\nI think this is wrong on several levels (including for loop scoping). Does anyone have an idea how I can use strings with the `@parameter` macro in a for loop (or otherwise know where to ask this question best)?\nThanks!","verbatim":false}}]},{"type":"message","subtype":"bot_message","text":"Which pure Julia solver would be best for a system of ODEs with &gt;100 ODEs?","ts":"1612908474.398400","username":"[gitter] <sibyjackgrove>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c05cuukg27ibs0bi3tjg","text":{"type":"mrkdwn","text":"Which pure Julia solver would be best for a system of ODEs with &gt;100 ODEs?","verbatim":false}}]}]}