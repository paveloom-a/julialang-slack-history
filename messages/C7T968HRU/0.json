{"cursor": 14, "messages": [{"client_msg_id":"d1b353b1-6f42-48ac-a969-ca251ee178e3","type":"message","text":"I wasn't aware of a ForwardDiffAdjoint","user":"U01H36BUDJB","ts":"1613343031.006200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"U2l","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I wasn't aware of a ForwardDiffAdjoint"}]}]}]},{"client_msg_id":"e3d35c74-979b-4901-b320-a0983e48af09","type":"message","text":"yes, ForwardDiffSensitivity","user":"U69BL50BF","ts":"1613345033.006500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PGfK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, ForwardDiffSensitivity"}]}]}]},{"client_msg_id":"e1f5d0c6-e625-4e3d-80dc-48fe69e21fbb","type":"message","text":"Are there any restrictions on the sort of callbacks that work with Koopman uncertainty quantification?\nWhat happens if you use  continuous time callbacks `if u == u1 then swap u = u0`  and `if u == u2 then swap u = u0`.","user":"UQEDP1Q5V","ts":"1613398549.010500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TlMGJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Are there any restrictions on the sort of callbacks that work with Koopman uncertainty quantification?\nWhat happens if you use  continuous time callbacks "},{"type":"text","text":"if u == u1 then swap u = u0","style":{"code":true}},{"type":"text","text":"  and "},{"type":"text","text":"if u == u2 then swap u = u0","style":{"code":true}},{"type":"text","text":"."}]}]}]},{"client_msg_id":"39f9ea41-6f0b-451a-af11-c8a4ea2b749f","type":"message","text":"there shouldn't be.","user":"U69BL50BF","ts":"1613400265.010700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/RsZ6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there shouldn't be."}]}]}]},{"client_msg_id":"f9020c2e-45f1-4850-a0f4-faea30b056b6","type":"message","text":"I’m having an issue where a `DiscreteCallback` works fine inside a function, but causes weird behavior once wrapped with `Zygote.gradient` it includes additional time points in the solution struct.","user":"UPM0H43C7","ts":"1613442394.012400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sTAKB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’m having an issue where a "},{"type":"text","text":"DiscreteCallback","style":{"code":true}},{"type":"text","text":" works fine inside a function, but causes weird behavior once wrapped with "},{"type":"text","text":"Zygote.gradient","style":{"code":true}},{"type":"text","text":" it includes additional time points in the solution struct."}]}]}]},{"client_msg_id":"6d4fbc35-85b6-46c7-9f83-9acc1be07924","type":"message","text":"can you open an issue in DiffEqSensitivity? You'll see the 3 known issues with it at the top","user":"U69BL50BF","ts":"1613442420.012800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rfE8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"can you open an issue in DiffEqSensitivity? You'll see the 3 known issues with it at the top"}]}]}]},{"client_msg_id":"71b25fb2-06ea-4d5b-9b51-8538885f875d","type":"message","text":"ah thanks","user":"UPM0H43C7","ts":"1613442436.013000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Md1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah thanks"}]}]}]},{"client_msg_id":"ccada9ed-3a09-4ab3-bb4a-90411725e74c","type":"message","text":"Does CVODE_BDF supports ForwardDiff.jl?","user":"U014K4SE396","ts":"1613448027.013200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1z0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does CVODE_BDF supports ForwardDiff.jl?"}]}]}]},{"client_msg_id":"a814383b-910e-4b9a-8f06-8fcaf7e8bec1","type":"message","text":"Is there any detailed documentation of internalnorm, and how to modify it? It doesn't seem to be found by search","user":"UC7FP1MQV","ts":"1613465555.015000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"V4cB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there any detailed documentation of internalnorm, and how to modify it? It doesn't seem to be found by search"}]}]}]},{"client_msg_id":"7969ae71-e2e9-4b7e-be5d-9f1c01306187","type":"message","text":"Is there some reason why it wouldn't work to use a callable struct as the function for `ODEProblem` ? Would be a nice alternative to closures, but I'm getting weird errors.","user":"U01H36BUDJB","ts":"1613490171.016500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"B5Hjk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there some reason why it wouldn't work to use a callable struct as the function for "},{"type":"text","text":"ODEProblem","style":{"code":true}},{"type":"text","text":" ? Would be a nice alternative to closures, but I'm getting weird errors."}]}]}],"thread_ts":"1613490171.016500","reply_count":25,"reply_users_count":2,"latest_reply":"1613491561.022600","reply_users":["U69BL50BF","U01H36BUDJB"],"subscribed":false},{"client_msg_id":"f62f1fa4-680e-4634-b3a0-410c9df5ba44","type":"message","text":"<@U69BL50BF> Hi!! Where is the iterator coded? In DiffEqBase?","user":"U7GQE9JP9","ts":"1613507063.029400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zVE","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U69BL50BF"},{"type":"text","text":" Hi!! Where is the iterator coded? In DiffEqBase?"}]}]}]},{"client_msg_id":"28aad9bb-0bd1-407f-92ce-b47a54227b93","type":"message","text":"SciMLBase.","user":"U69BL50BF","ts":"1613507071.029600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kvR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"SciMLBase."}]}]}]},{"client_msg_id":"2fbc8060-a3a0-481e-89dd-0c11e7afb8d2","type":"message","text":"Thanks. I want to add event detection but my iterator is clunky.","user":"U7GQE9JP9","ts":"1613507103.030100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DeyG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks. I want to add event detection but my iterator is clunky."}]}]}]},{"client_msg_id":"9adc9f4a-a683-45b2-ac2e-0b7542fd3d03","type":"message","text":"Your state is just an integer?","user":"U7GQE9JP9","ts":"1613507190.030400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hCzT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Your state is just an integer?"}]}]}]},{"client_msg_id":"c07fa06a-bbd2-4359-be0e-e1ca26a13dd5","type":"message","text":"it's the integrator itself","user":"U69BL50BF","ts":"1613508061.030600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PxW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's the integrator itself"}]}]}]},{"client_msg_id":"e73a4feb-c2a8-4fbe-a853-e0def8f1593b","type":"message","text":"I see. I wanted to get inspiration from <https://lostella.github.io/2018/07/25/iterative-methods-done-right.html> to build iterable by composition, but I am not sure. Designing is hard","user":"U7GQE9JP9","ts":"1613508272.031700","team":"T68168MUP","attachments":[{"service_name":"Lorenzo Stella","title":"Iterative methods done right (life’s too short to write for-loops)","title_link":"https://lostella.github.io/2018/07/25/iterative-methods-done-right.html","text":"Notes on the implementation of iterative methods in Julia, using iterables.","fallback":"Lorenzo Stella: Iterative methods done right (life’s too short to write for-loops)","image_url":"https://lostella.github.io/img/dodici.png","ts":1532476800,"from_url":"https://lostella.github.io/2018/07/25/iterative-methods-done-right.html","image_width":250,"image_height":250,"image_bytes":14667,"id":1,"original_url":"https://lostella.github.io/2018/07/25/iterative-methods-done-right.html"}],"blocks":[{"type":"rich_text","block_id":"nf7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see. I wanted to get inspiration from "},{"type":"link","url":"https://lostella.github.io/2018/07/25/iterative-methods-done-right.html"},{"type":"text","text":" to build iterable by composition, but I am not sure. Designing is hard"}]}]}]},{"client_msg_id":"c2b28497-a261-4328-ae0c-c012926c51cb","type":"message","text":"mutable iterators is a functional type theorist's nemesis, but it's useful.","user":"U69BL50BF","ts":"1613508518.032200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IB4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"mutable iterators is a functional type theorist's nemesis, but it's useful."}]}]}]},{"client_msg_id":"40188b73-fc54-43a8-9605-7ce45a3fd7ff","type":"message","text":"you would advise against tje above approach? It is easy to add callbacks / event with the `tee` then","user":"U7GQE9JP9","ts":"1613508625.033000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XgTA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you would advise against tje above approach? It is easy to add callbacks / event with the "},{"type":"text","text":"tee","style":{"code":true}},{"type":"text","text":" then"}]}]}]},{"client_msg_id":"97b7dd54-a563-4737-9388-90c95a924573","type":"message","text":"nah, I like mutable iterators. The DiffEq iterators are all mutable.","user":"U69BL50BF","ts":"1613508720.033300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MVsE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"nah, I like mutable iterators. The DiffEq iterators are all mutable."}]}]}]},{"client_msg_id":"9d4a32da-d5ff-460b-92f8-d2df9c3cd352","type":"message","text":"I'm just mentioning that you do lose a lot of the \"iterator\" properties that people always discuss in the sense of functional programming","user":"U69BL50BF","ts":"1613508740.033800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZSz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm just mentioning that you do lose a lot of the \"iterator\" properties that people always discuss in the sense of functional programming"}]}]}]},{"client_msg_id":"aac7ccf1-fa39-427e-882c-ff03558e0ec0","type":"message","text":"but it's a pretty nice user convenience anyways.","user":"U69BL50BF","ts":"1613508749.034100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Aaeu5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but it's a pretty nice user convenience anyways."}]}]}]},{"client_msg_id":"51537c5b-0a0f-4479-a692-43c0e9432d0c","type":"message","text":"OK, I guess I am not educated enough to appreciate.","user":"U7GQE9JP9","ts":"1613508768.034500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"U+7U","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"OK, I guess I am not educated enough to appreciate."}]}]}]},{"client_msg_id":"590c1c31-25bc-4959-b7a8-8f7df2c814f2","type":"message","text":"`For faster solving at low tolerances (&lt;1e-9) but when Vector{Float64} is used, use radau.` radau seems not to be exported by DifferentialEquations.jl, where is it defined?","user":"UNG2XJJP3","ts":"1613579693.036800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SysL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For faster solving at low tolerances (<1e-9) but when Vector{Float64} is used, use radau.","style":{"code":true}},{"type":"text","text":" radau seems not to be exported by DifferentialEquations.jl, where is it defined?"}]}]}],"thread_ts":"1613579693.036800","reply_count":3,"reply_users_count":2,"latest_reply":"1613579919.037900","reply_users":["U69BL50BF","UNG2XJJP3"],"subscribed":false},{"client_msg_id":"2d002b99-b919-4639-918f-0b68030a8319","type":"message","text":"<@U69BL50BF> is there a way to trigger a `SavingCallback` with a `ContinuousCallback`?","user":"UB2QRMQPN","ts":"1613579717.037100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EQW","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U69BL50BF"},{"type":"text","text":" is there a way to trigger a "},{"type":"text","text":"SavingCallback","style":{"code":true}},{"type":"text","text":" with a "},{"type":"text","text":"ContinuousCallback","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1613579717.037100","reply_count":2,"reply_users_count":2,"latest_reply":"1613579942.038100","reply_users":["U69BL50BF","UB2QRMQPN"],"subscribed":false},{"client_msg_id":"d38dbe49-bccb-4ea9-b68f-10e9dfdde640","type":"message","text":"I've been using a `struct` for my parameters instead of something like ComponentArrays.jl. It seems to work fine and I'm currently not differentiating w.r.t. `p`. Is there any performance hit or problem with doing this? Especially when using `CVODE_BDF`?","user":"UMC2RHKLZ","ts":"1613600421.040000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KMI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I've been using a "},{"type":"text","text":"struct","style":{"code":true}},{"type":"text","text":" for my parameters instead of something like ComponentArrays.jl. It seems to work fine and I'm currently not differentiating w.r.t. "},{"type":"text","text":"p","style":{"code":true}},{"type":"text","text":". Is there any performance hit or problem with doing this? Especially when using "},{"type":"text","text":"CVODE_BDF","style":{"code":true}},{"type":"text","text":"?"}]}]}]},{"client_msg_id":"31233d54-5936-4444-9e8a-aa33adaee40c","type":"message","text":"Yes, I'm pretty sure Flux and/or `sciml_train` will not accept non-array-like `p` . It has to be an array and it has to support `setindex!` .","user":"U01H36BUDJB","ts":"1613600830.041600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mCux","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, I'm pretty sure Flux and/or "},{"type":"text","text":"sciml_train","style":{"code":true}},{"type":"text","text":" will not accept non-array-like "},{"type":"text","text":"p","style":{"code":true}},{"type":"text","text":" . It has to be an array and it has to support "},{"type":"text","text":"setindex!","style":{"code":true}},{"type":"text","text":" ."}]}]}]},{"client_msg_id":"3d2692d6-8964-4bfe-baa6-929363a7ee51","type":"message","text":"You *could* try to make your `struct` behave like an array by extending `DEDataArray` perhaps. I was considering that.","user":"U01H36BUDJB","ts":"1613600911.042300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vNm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You "},{"type":"text","text":"could","style":{"bold":true}},{"type":"text","text":" try to make your "},{"type":"text","text":"struct","style":{"code":true}},{"type":"text","text":" behave like an array by extending "},{"type":"text","text":"DEDataArray","style":{"code":true}},{"type":"text","text":" perhaps. I was considering that."}]}]}]},{"client_msg_id":"f8e56ba5-6ad7-45be-ae31-309550c55166","type":"message","text":"Cool, I fully expect to get bitten by this once I try to differentiate w.r.t params, so maybe I should just change it now. :slightly_smiling_face:","user":"UMC2RHKLZ","ts":"1613601126.042900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"X/g4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Cool, I fully expect to get bitten by this once I try to differentiate w.r.t params, so maybe I should just change it now. "},{"type":"emoji","name":"slightly_smiling_face"}]}]}]},{"client_msg_id":"3eb2d82e-c6a3-4f6c-93c5-4b681fe1abda","type":"message","text":"You can also make your ODE function a callable struct `(fn::MyODE)(du,u,p,t)` and store non-differentiated parameters in the struct and differentiated parameters in `p`.","user":"U01H36BUDJB","ts":"1613601257.044100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4mR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can also make your ODE function a callable struct "},{"type":"text","text":"(fn::MyODE)(du,u,p,t)","style":{"code":true}},{"type":"text","text":" and store non-differentiated parameters in the struct and differentiated parameters in "},{"type":"text","text":"p","style":{"code":true}},{"type":"text","text":"."}]}]}]},{"client_msg_id":"0fb6629b-bf7c-4ad2-b0eb-b2a31da2d5f3","type":"message","text":"Ah, very cool idea. Thanks!","user":"UMC2RHKLZ","ts":"1613601556.044400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"G+TQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, very cool idea. Thanks!"}]}]}]},{"client_msg_id":"2dca6bbe-d47b-4c70-8dcb-d6466adb1827","type":"message","text":"Second question: for the `ODEFunction` `jac` parameter, I'm running into trouble using a custom type for the jacobian. Currently it's just a struct with some information and a `mul!` function, per the documentation. I am using `jac_prototype`, filling it in with a dummy value. However, I also needed to define `similar` and am now running into undefined `jacobian2W!`, any tips?\n\nMy state is a 3xNx2 `Array`, mostly because it helps me organize the computation. I suppose I could flatten it all out and use types from LinearMaps.jl?","user":"UMC2RHKLZ","ts":"1613601899.048100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PUeua","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Second question: for the "},{"type":"text","text":"ODEFunction","style":{"code":true}},{"type":"text","text":" "},{"type":"text","text":"jac","style":{"code":true}},{"type":"text","text":" parameter, I'm running into trouble using a custom type for the jacobian. Currently it's just a struct with some information and a "},{"type":"text","text":"mul!","style":{"code":true}},{"type":"text","text":" function, per the documentation. I am using "},{"type":"text","text":"jac_prototype","style":{"code":true}},{"type":"text","text":", filling it in with a dummy value. However, I also needed to define "},{"type":"text","text":"similar","style":{"code":true}},{"type":"text","text":" and am now running into undefined "},{"type":"text","text":"jacobian2W!","style":{"code":true}},{"type":"text","text":", any tips?\n\nMy state is a 3xNx2 "},{"type":"text","text":"Array","style":{"code":true}},{"type":"text","text":", mostly because it helps me organize the computation. I suppose I could flatten it all out and use types from LinearMaps.jl?"}]}]}]},{"client_msg_id":"fffcc479-e879-4346-ba8a-1d5ccefcc075","type":"message","text":"write it in the flattened form.","user":"U69BL50BF","ts":"1613603615.048300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wKp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"write it in the flattened form."}]}]}]},{"client_msg_id":"c9b159d0-d810-49e7-9ccb-885555e72332","type":"message","text":"The Jacobian at least","user":"U69BL50BF","ts":"1613603624.048500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j2C","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The Jacobian at least"}]}]}]},{"client_msg_id":"5ee75e98-fa70-4169-8df7-729665a25b57","type":"message","text":"it needs to be defined on the flattened form for things like LU-factorization to be well-defined.","user":"U69BL50BF","ts":"1613603635.048900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CzSR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it needs to be defined on the flattened form for things like LU-factorization to be well-defined."}]}]}]},{"client_msg_id":"29aba07a-ae42-4d93-8667-6e672492bd78","type":"message","text":"Got it. Thanks! So will solvers still try LU-factorization if all I give it is `mul!`? I'm probably mistaken but I thought the netwon-krylov solvers only needed a VJP function. I have a system of ~2k ODEs arising from a PDE discretization, and was trying to use `CVODE_BDF`.\n\nEither way I think my life gets easier if I write in flattened form and use LinearMaps.jl.","user":"UMC2RHKLZ","ts":"1613604611.052000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Dqo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Got it. Thanks! So will solvers still try LU-factorization if all I give it is "},{"type":"text","text":"mul!","style":{"code":true}},{"type":"text","text":"? I'm probably mistaken but I thought the netwon-krylov solvers only needed a VJP function. I have a system of ~2k ODEs arising from a PDE discretization, and was trying to use "},{"type":"text","text":"CVODE_BDF","style":{"code":true}},{"type":"text","text":".\n\nEither way I think my life gets easier if I write in flattened form and use LinearMaps.jl."}]}]}]},{"client_msg_id":"84604dec-e413-4727-a327-fe905342fc2a","type":"message","text":"oh for that you can use `CVODE_BDF(linear_solver=:GMRES)`","user":"U69BL50BF","ts":"1613604685.052400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wgE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh for that you can use "},{"type":"text","text":"CVODE_BDF(linear_solver=:GMRES)","style":{"code":true}}]}]}]},{"client_msg_id":"aac2a020-b16b-4015-9fd6-1ab64d6048cd","type":"message","text":"I don't know if the vjp function is setup for that library though?","user":"U69BL50BF","ts":"1613604698.052700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3HH3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't know if the vjp function is setup for that library though?"}]}]}]},{"client_msg_id":"4fb113c6-f533-4cae-b2de-b71667e84083","type":"message","text":"so it'll use the finite difference trick inside of Sundials","user":"U69BL50BF","ts":"1613604711.053100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+f5nf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so it'll use the finite difference trick inside of Sundials"}]}]}]},{"client_msg_id":"52609c88-777f-47dc-900e-283352db3ecd","type":"message","text":"we could overload that though","user":"U69BL50BF","ts":"1613604714.053300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YHKm5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we could overload that though"}]}]}]},{"client_msg_id":"d0612742-1f89-4cd9-af5e-0bbb13ab8939","type":"message","text":"Ah, I see - so it would pretty much ignore the `jac` from my ODEFunction?","user":"UMC2RHKLZ","ts":"1613605276.054000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"v8yg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, I see - so it would pretty much ignore the "},{"type":"text","text":"jac","style":{"code":true}},{"type":"text","text":" from my ODEFunction?"}]}]}]},{"client_msg_id":"e71a3335-f7f0-44a7-9407-5f99ec7eeded","type":"message","text":"GMRES works better and seems pretty fast, thanks! I don't think it's using my `mul!` with my custom jacobian type. It's expected that I can't ForwardDiff the solution to that problem, right?","user":"UMC2RHKLZ","ts":"1613606037.056800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"30xv8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"GMRES works better and seems pretty fast, thanks! I don't think it's using my `mul!` with my custom jacobian type. It's expected that I can't ForwardDiff the solution to that problem, right?"}]}]}]},{"client_msg_id":"ee2ff0c4-ea6e-4af8-acf3-fa4fdccd9b3d","type":"message","text":"Another question: is there a solver that works well with a custom vjp function and on large fairly-stiff equations?","user":"UMC2RHKLZ","ts":"1613606865.058000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pX6a","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Another question: is there a solver that works well with a custom vjp function and on large fairly-stiff equations?"}]}]}]},{"client_msg_id":"d835ed61-5cd8-411c-8594-d6f74ab21d3d","type":"message","text":"CVODE is probably the best for matrix-free and super large equations right now.","user":"U69BL50BF","ts":"1613607643.059700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TlP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"CVODE is probably the best for matrix-free and super large equations right now."}]}]}]},{"client_msg_id":"2b44f50e-4bb5-41cd-aafb-01a74b3ee0d0","type":"message","text":"&gt; Ah, I see - so it would pretty much ignore the `jac` from my ODEFunction?\nYup","user":"U69BL50BF","ts":"1613607652.060100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uR3","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"Ah, I see - so it would pretty much ignore the "},{"type":"text","text":"jac","style":{"code":true}},{"type":"text","text":" from my ODEFunction?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Yup"}]}]}]},{"client_msg_id":"fe0beaac-f686-4c99-9784-452ffbdf0c3a","type":"message","text":"&gt; GMRES works better and seems pretty fast, thanks! I don't think it's using my `mul!` with my custom jacobian type. It's expected that I can't ForwardDiff the solution to that problem, right?\nIt's ignoring it. We can fix that, but it's not doing it right now.","user":"U69BL50BF","ts":"1613607672.060500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"t/YN","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"GMRES works better and seems pretty fast, thanks! I don't think it's using my `mul!` with my custom jacobian type. It's expected that I can't ForwardDiff the solution to that problem, right?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"It's ignoring it. We can fix that, but it's not doing it right now."}]}]}]},{"client_msg_id":"9dcc9d68-9aac-433f-9de9-21ae65939046","type":"message","text":"I'm on a possibly ill-advised adventure to use sundials directly through the Sundials.jl interface. Hopefully if it works I could contribute the custom vjp stuff back to the ecosystem.\n\nI'm running into what looks like an artifacts issue when trying to create a new SUNLINSOL object:\n```julia&gt; Sundials.SUNLinSolNewEmpty()\nERROR: UndefVarError: libsundials_sundials not defined```\nIs this a known issue? I can't seem to find how DifferentialEquations actually creates different SINLINSOLs, but I always seem to run into trouble with github search.","user":"UMC2RHKLZ","ts":"1613623420.064000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"edG3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm on a possibly ill-advised adventure to use sundials directly through the Sundials.jl interface. Hopefully if it works I could contribute the custom vjp stuff back to the ecosystem.\n\nI'm running into what looks like an artifacts issue when trying to create a new SUNLINSOL object:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Sundials.SUNLinSolNewEmpty()\nERROR: UndefVarError: libsundials_sundials not defined"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Is this a known issue? I can't seem to find how DifferentialEquations actually creates different SINLINSOLs, but I always seem to run into trouble with github search."}]}]}]},{"client_msg_id":"35a01eaf-2b35-4561-99f8-756d54cff216","type":"message","text":"<@UMC2RHKLZ> it's all in here: <https://github.com/SciML/Sundials.jl/blob/master/src/common_interface/solve.jl#L250-L309>","user":"U69BL50BF","ts":"1613623624.064200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R=mfC","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UMC2RHKLZ"},{"type":"text","text":" it's all in here: "},{"type":"link","url":"https://github.com/SciML/Sundials.jl/blob/master/src/common_interface/solve.jl#L250-L309"}]}]}]},{"client_msg_id":"297222c1-1218-4a61-be45-b7b9b6bdfe2c","type":"message","text":"Exactly what I couldn't find! Thanks","user":"UMC2RHKLZ","ts":"1613623708.064700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wKl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Exactly what I couldn't find! Thanks"}]}]}]},{"client_msg_id":"4d49dd3a-7e2a-4b02-b194-fe79d783b344","type":"message","text":"I was reading this article <https://www.stochasticlifestyle.com/like-julia-scales-productive-insights-julia-developer/> when I ran into the comment \"infamous PETSc\" which made me giggle. I currently rely on Firedrake (FEM frontend for PETSc) for my work. I like how easy it is to use the large PETSc preconditioner library with Firedrake. This combination is specially important for physics based preconditioners. I have been meaning to take the leap to Julia, but the best FEM library that I have found so far is gridap.jl which is still in its infancy (very promising though). Are there other libraries that I am missing out? Does the SciML project plan to integrate with gridap.jl in any way?","user":"U015TC0GMQ9","ts":"1613669419.068700","team":"T68168MUP","attachments":[{"service_name":"Stochastic Lifestyle","title":"I Like Julia Because It Scales and Is Productive: Some Insights From A Julia Developer - Stochastic Lifestyle","title_link":"https://www.stochasticlifestyle.com/like-julia-scales-productive-insights-julia-developer/","text":"In this post I would like to reflect a bit on the Julia programming language. These are my personal views and I have had more than a year developing a lot of packages for the Julia programming language. After roaming around many different languages including R, MATLAB, C, and Python; Julia is finally a language I am sticking to. In this post I would like to explain why. I want to go back through some thoughts about what the current state of the language is, who it's good for, and what changes I would like to see. My opinions changed a lot since first starting to work on Julia, so I'd just like to share the changed mindset one has after using the language deeply. Quick Summary Here's a quick summary of my views. Julia is not only a fast language, but ... READ MORE","fallback":"Stochastic Lifestyle: I Like Julia Because It Scales and Is Productive: Some Insights From A Julia Developer - Stochastic Lifestyle","thumb_url":"https://www.stochasticlifestyle.com/wp-content/themes/chrisrack/style/faviPic2.PNG","fields":[{"title":"Written by","value":"Christopher Rackauckas","short":true},{"title":"Est. reading time","value":"7 minutes","short":true}],"ts":1507899480,"from_url":"https://www.stochasticlifestyle.com/like-julia-scales-productive-insights-julia-developer/","thumb_width":669,"thumb_height":891,"service_icon":"https://i2.wp.com/www.stochasticlifestyle.com/wp-content/uploads/2016/01/cropped-faviPic.png?fit=180%2C180&#038;ssl=1","id":1,"original_url":"https://www.stochasticlifestyle.com/like-julia-scales-productive-insights-julia-developer/"}],"blocks":[{"type":"rich_text","block_id":"Mc5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I was reading this article "},{"type":"link","url":"https://www.stochasticlifestyle.com/like-julia-scales-productive-insights-julia-developer/"},{"type":"text","text":" when I ran into the comment \"infamous PETSc\" which made me giggle. I currently rely on Firedrake (FEM frontend for PETSc) for my work. I like how easy it is to use the large PETSc preconditioner library with Firedrake. This combination is specially important for physics based preconditioners. I have been meaning to take the leap to Julia, but the best FEM library that I have found so far is gridap.jl which is still in its infancy (very promising though). Are there other libraries that I am missing out? Does the SciML project plan to integrate with gridap.jl in any way?"}]}]}]},{"client_msg_id":"0d427248-6e44-4d8f-b60f-79b545b8b724","type":"message","text":"yes, we plan to integrate with it as it grows","user":"U69BL50BF","ts":"1613669736.069100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hfB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, we plan to integrate with it as it grows"}]}]}]},{"client_msg_id":"f983b039-2c6f-4a6e-a931-c13c03e99130","type":"message","text":"specifically through MTK's symbolic PDESystem","user":"U69BL50BF","ts":"1613669744.069400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GvrW6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"specifically through MTK's symbolic PDESystem"}]}]}]},{"client_msg_id":"a89af46f-3439-4b67-93eb-39c3ae72150f","type":"message","text":"but we do need better preconditioning libraries.","user":"U69BL50BF","ts":"1613669758.069800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+Ua","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but we do need better preconditioning libraries."}]}]}]},{"client_msg_id":"37de500e-337c-4eaa-b442-91710db53f89","type":"message","text":"Hi -- I saw in the solver compatibility chart the OrdinaryDiffEq.jl can handle ApproxFun types. Are there any examples of this, or its status? Have given the DifferentialEquations docs a search and only the chart is returned. OrdinaryDiffEq search has one issue open.","user":"U0178LR5K7F","ts":"1613684380.072200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BKb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi -- I saw in the solver compatibility chart the OrdinaryDiffEq.jl can handle ApproxFun types. Are there any examples of this, or its status? Have given the DifferentialEquations docs a search and only the chart is returned. OrdinaryDiffEq search has one issue open."}]}]}]},{"client_msg_id":"03ce4ebd-4421-42de-ab7d-112834a7341f","type":"message","text":"yeah you can do it, it's been awhile since I've tested it.","user":"U69BL50BF","ts":"1613684617.072600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vs/l","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah you can do it, it's been awhile since I've tested it."}]}]}]}]}