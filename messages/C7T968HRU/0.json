{"cursor": 13, "messages": [{"client_msg_id":"93cd71db-62d2-4aa0-a3d3-db33ce5777ff","type":"message","text":"<https://benchmarks.sciml.ai/html/NonStiffODE/linear_wpd.html> is 100 dimensional but linear","user":"U69BL50BF","ts":"1613063770.435100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KmZ","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://benchmarks.sciml.ai/html/NonStiffODE/linear_wpd.html"},{"type":"text","text":" is 100 dimensional but linear"}]}]}]},{"client_msg_id":"affa4f65-142d-49d9-8197-5046d29ad555","type":"message","text":"we could use bigger non-stiff problems","user":"U69BL50BF","ts":"1613063777.435400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xE3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we could use bigger non-stiff problems"}]}]}]},{"client_msg_id":"7c5a88b0-f5fd-4e94-9a13-9bd7bfa46d01","type":"message","text":"I think every time I see a big problem it's stiff :sweat_smile:","user":"U69BL50BF","ts":"1613063786.435700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"drG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think every time I see a big problem it's stiff "},{"type":"emoji","name":"sweat_smile"}]}]}]},{"client_msg_id":"2906c390-6e19-48f1-822c-17d18558fde8","type":"message","text":"Hi, I get `Instability`  error for an ODE model which previously solved fine using `AutoVern9(KenCarp5())` after updating `DiffEqBase` from `6.49.2` to `6.53.6`. Has this to do with the switch to `SciMLBase` . Unfortunately, it's not straightforward to post a MWE of the model.","user":"UGFMDAMC3","ts":"1613063817.436300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6sg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi, I get "},{"type":"text","text":"Instability","style":{"code":true}},{"type":"text","text":"  error for an ODE model which previously solved fine using "},{"type":"text","text":"AutoVern9(KenCarp5())","style":{"code":true}},{"type":"text","text":" after updating "},{"type":"text","text":"DiffEqBase","style":{"code":true}},{"type":"text","text":" from "},{"type":"text","text":"6.49.2","style":{"code":true}},{"type":"text","text":" to "},{"type":"text","text":"6.53.6","style":{"code":true}},{"type":"text","text":". Has this to do with the switch to "},{"type":"text","text":"SciMLBase","style":{"code":true}},{"type":"text","text":" . Unfortunately, it's not straightforward to post a MWE of the model."}]}]}],"thread_ts":"1613063817.436300","reply_count":3,"reply_users_count":2,"latest_reply":"1613064183.438200","reply_users":["U69BL50BF","UGFMDAMC3"],"subscribed":false},{"client_msg_id":"c2ed1035-84a2-4648-85f2-7678481fc3bc","type":"message","text":"Aha, I haven't really tested if the problem is stiff or not.","user":"U014K4SE396","ts":"1613063874.436900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Zg3PJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Aha, I haven't really tested if the problem is stiff or not."}]}]}]},{"type":"message","text":"Looks like Vern9 is pretty faster than Tsit5?","files":[{"id":"F01N6TR39G9","created":1613063896,"timestamp":1613063896,"name":"image.png","title":"image.png","mimetype":"image/png","filetype":"png","pretty_type":"PNG","user":"U014K4SE396","editable":false,"size":51615,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01N6TR39G9/image.png","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01N6TR39G9/download/image.png","thumb_64":"https://files.slack.com/files-tmb/T68168MUP-F01N6TR39G9-612cb07809/image_64.png","thumb_80":"https://files.slack.com/files-tmb/T68168MUP-F01N6TR39G9-612cb07809/image_80.png","thumb_360":"https://files.slack.com/files-tmb/T68168MUP-F01N6TR39G9-612cb07809/image_360.png","thumb_360_w":360,"thumb_360_h":240,"thumb_480":"https://files.slack.com/files-tmb/T68168MUP-F01N6TR39G9-612cb07809/image_480.png","thumb_480_w":480,"thumb_480_h":320,"thumb_160":"https://files.slack.com/files-tmb/T68168MUP-F01N6TR39G9-612cb07809/image_160.png","original_w":576,"original_h":384,"thumb_tiny":"AwAgADDSNB4PtR1GelIR68e4oAUtjrxQTxxTQSOMgil2g8jigBquTjdxkZqSo9mOo/KnKMdDxQAuKWkIo59KAAqD7Gm7SMkDn2NOGfSgHPagBob2NKMAjHQ0vUcikA7kDNAH/9k=","permalink":"https://julialang.slack.com/files/U014K4SE396/F01N6TR39G9/image.png","permalink_public":"https://slack-files.com/T68168MUP-F01N6TR39G9-4aceea8a15","is_starred":false,"has_rich_preview":false}],"upload":false,"blocks":[{"type":"rich_text","block_id":"g777G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Looks like Vern9 is pretty faster than Tsit5?"}]}]}],"user":"U014K4SE396","display_as_bot":false,"ts":"1613063908.437300"},{"client_msg_id":"2ca3150c-989b-47d5-9b8c-bca33d3089b0","type":"message","text":"at low tolerances","user":"U69BL50BF","ts":"1613064055.437700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mfqLM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"at low tolerances"}]}]}]},{"client_msg_id":"30a9a985-6d5b-4108-a816-f67187f509ac","type":"message","text":"I tried asking over at flux-bridged but no luck. <@U69BL50BF>, ppl mentioned issues with how `destructure`/ `_restructure` works inside diffeqflux for recurrent layers ( resulting in the PR <https://github.com/FluxML/Flux.jl/pull/1353> ).\nBut it looks like it’s not so much the definition of either of those functions but the custom Zygote adjoint.\n```@adjoint function _restructure(m, xs; cache = IdDict())\n  _restructure(m, xs, cache = cache), dm -&gt; (nothing,destructure(dm, cache = cache)[1])\nend```\nanonymous function `dm -&gt; (nothing, destructure(dm, cache=cache)[1])`  is causing problems ( manifesting in  `DimensionMismatch` reported in <https://github.com/SciML/DiffEqFlux.jl/issues/432> and a few other issues).\n(sorry this is getting long)\nTake an example of\n```struct RNNCell{F,A,V,S}\n  σ::F\n  Wi::A\n  Wh::A\n  b::V\n  state0::S\nend```\nwith the forward call not depending on `state0`.\nThe adjoint of _restructure will call `destructure(dm, cache=cache)`  only with the fields that are actually used in the forward, meanwhile `state0` will be `nothing` .\nI think this causes a dimension mismatch since the parameter vector produced by initially destructuring such a layer will include `state0` even if it isn’t used.","user":"UPM0H43C7","ts":"1613066673.444000","team":"T68168MUP","edited":{"user":"UPM0H43C7","ts":"1613067077.000000"},"blocks":[{"type":"rich_text","block_id":"eDED","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I tried asking over at flux-bridged but no luck. "},{"type":"user","user_id":"U69BL50BF"},{"type":"text","text":", ppl mentioned issues with how "},{"type":"text","text":"destructure","style":{"code":true}},{"type":"text","text":"/ "},{"type":"text","text":"_restructure","style":{"code":true}},{"type":"text","text":" works inside diffeqflux for recurrent layers ( resulting in the PR "},{"type":"link","url":"https://github.com/FluxML/Flux.jl/pull/1353"},{"type":"text","text":" ).\nBut it looks like it’s not so much the definition of either of those functions but the custom Zygote adjoint.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@adjoint function _restructure(m, xs; cache = IdDict())\n  _restructure(m, xs, cache = cache), dm -> (nothing,destructure(dm, cache = cache)[1])\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"anonymous function "},{"type":"text","text":"dm -> (nothing, destructure(dm, cache=cache)[1])","style":{"code":true}},{"type":"text","text":"  is causing problems ( manifesting in  "},{"type":"text","text":"DimensionMismatch","style":{"code":true}},{"type":"text","text":" reported in "},{"type":"link","url":"https://github.com/SciML/DiffEqFlux.jl/issues/432"},{"type":"text","text":" and a few other issues).\n(sorry this is getting long)\nTake an example of\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct RNNCell{F,A,V,S}\n  σ::F\n  Wi::A\n  Wh::A\n  b::V\n  state0::S\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"with the forward call not depending on "},{"type":"text","text":"state0","style":{"code":true}},{"type":"text","text":".\nThe adjoint of _restructure will call "},{"type":"text","text":"destructure(dm, cache=cache)","style":{"code":true}},{"type":"text","text":"  only with the fields that are actually used in the forward, meanwhile "},{"type":"text","text":"state0","style":{"code":true}},{"type":"text","text":" will be "},{"type":"text","text":"nothing","style":{"code":true}},{"type":"text","text":" .\nI think this causes a dimension mismatch since the parameter vector produced by initially destructuring such a layer will include "},{"type":"text","text":"state0","style":{"code":true}},{"type":"text","text":" even if it isn’t used."}]}]}]},{"client_msg_id":"e796eb83-cf04-43ff-8e3e-3f690611e376","type":"message","text":"@damonbayer the R package servers updated and it looks like it all passes now. You just have to make sure you do a package update on the Julia packages.","user":"U69BL50BF","ts":"1613135345.445800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YoCc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"@damonbayer the R package servers updated and it looks like it all passes now. You just have to make sure you do a package update on the Julia packages."}]}]}]},{"client_msg_id":"8085cf6d-2d76-4df9-8e1c-06c2dfe925ee","type":"message","text":"Is it safe to modify `u` directly in a callback? Or should `set_u!` still be used?","user":"U01H36BUDJB","ts":"1613135607.446300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+Ql","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is it safe to modify "},{"type":"text","text":"u","style":{"code":true}},{"type":"text","text":" directly in a callback? Or should "},{"type":"text","text":"set_u!","style":{"code":true}},{"type":"text","text":" still be used?"}]}]}]},{"client_msg_id":"38cd4027-a789-4817-8bcb-8eeab4a74f12","type":"message","text":"The examples in the documentation appear to modify it directly.","user":"U01H36BUDJB","ts":"1613135617.446600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gP0kE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The examples in the documentation appear to modify it directly."}]}]}]},{"client_msg_id":"f9b15b74-92fd-40da-bc4c-2c337c579afe","type":"message","text":"it's safe","user":"U69BL50BF","ts":"1613136087.446800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"y7TY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's safe"}]}]}],"reactions":[{"name":"tada","users":["U01H36BUDJB"],"count":1}]},{"client_msg_id":"6825c16d-1a43-48f4-a959-aee1d667b016","type":"message","text":"Hi everybody. I want to create a structure with a unique component that holds a pointer to one trajectory of a Ensemble solution `sol`, such that:\n```struct Foo{U}\n  u::U\nend\n\nFoo(sol[1])```\nThe problem with this is that the `Foo` declaration allocates! I cannot figure out what is the allocation about:\n```@btime Foo($(sol[1]))\n22.975 ns (1 allocation: 192 bytes)```\nOf course it doesn’t allocate if I use a pointer to a different object, such as a vector:\n```v = rand(3);\n@btime Foo($v)\n1.542 ns (0 allocations: 0 bytes)```\nOr if I use the pointer to the solution, it doesn’t allocate as well:\n```@btime Foo($sol)\n1.546 ns (0 allocations: 0 bytes)```\nJust for clarification, these calls doesn’t allocate as well:\n```@btime $sol[1]\n11.244 ns (0 allocations: 0 bytes)\n\n@btime $(sol.u[1])\n11.243 ns (0 allocations: 0 bytes)```\nAny idea?","user":"U01658MJH3P","ts":"1613140317.452200","team":"T68168MUP","edited":{"user":"U01658MJH3P","ts":"1613140537.000000"},"blocks":[{"type":"rich_text","block_id":"W8P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi everybody. I want to create a structure with a unique component that holds a pointer to one trajectory of a Ensemble solution "},{"type":"text","text":"sol","style":{"code":true}},{"type":"text","text":", such that:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct Foo{U}\n  u::U\nend\n\nFoo(sol[1])"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"The problem with this is that the "},{"type":"text","text":"Foo","style":{"code":true}},{"type":"text","text":" declaration allocates! I cannot figure out what is the allocation about:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@btime Foo($(sol[1]))\n22.975 ns (1 allocation: 192 bytes)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Of course it doesn’t allocate if I use a pointer to a different object, such as a vector:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"v = rand(3);\n@btime Foo($v)\n1.542 ns (0 allocations: 0 bytes)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Or if I use the pointer to the solution, it doesn’t allocate as well:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@btime Foo($sol)\n1.546 ns (0 allocations: 0 bytes)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Just for clarification, these calls doesn’t allocate as well:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@btime $sol[1]\n11.244 ns (0 allocations: 0 bytes)\n\n@btime $(sol.u[1])\n11.243 ns (0 allocations: 0 bytes)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Any idea?"}]}]}]},{"client_msg_id":"1edccfe1-d366-4b9c-a29a-cac07f3bbd38","type":"message","text":"it's because of the heap allocation to hold the global that is returned.","user":"U69BL50BF","ts":"1613141486.452600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lT3A","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's because of the heap allocation to hold the global that is returned."}]}]}]},{"client_msg_id":"077b6bc1-9799-4cd7-b6be-39cec7c1a351","type":"message","text":"but I am using `$` when needed, to avoid globals","user":"U01658MJH3P","ts":"1613141584.453000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"D8t9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but I am using "},{"type":"text","text":"$","style":{"code":true}},{"type":"text","text":" when needed, to avoid globals"}]}]}]},{"client_msg_id":"53d52df5-c5ba-44b0-b4bc-dd9fa87f792a","type":"message","text":"I see this allocation even when I am not working with globals. What I am missing?\n```const sol1 = sol[1]\n@btime Foo($sol1)\n23.584 ns (1 allocation: 192 bytes)```","user":"U01658MJH3P","ts":"1613141722.454100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NH+Jd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see this allocation even when I am not working with globals. What I am missing?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"const sol1 = sol[1]\n@btime Foo($sol1)\n23.584 ns (1 allocation: 192 bytes)"}]}]}]},{"client_msg_id":"298035a4-8c50-49a6-a43d-d290ce75086f","type":"message","text":"but the Foo itself returns","user":"U69BL50BF","ts":"1613141742.454300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Hs6Ty","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but the Foo itself returns"}]}]}]},{"client_msg_id":"aad577ad-9f79-42f7-ab1d-70ae6cf6432f","type":"message","text":"what if you do `Foo($sol1);`?","user":"U69BL50BF","ts":"1613141749.454600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zOx9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what if you do "},{"type":"text","text":"Foo($sol1);","style":{"code":true}},{"type":"text","text":"?"}]}]}]},{"client_msg_id":"a9a64649-51d0-4d11-a733-5423e0c6aafc","type":"message","text":"actually that would still do it","user":"U69BL50BF","ts":"1613141760.454800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W4Z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"actually that would still do it"}]}]}]},{"client_msg_id":"dd2c433d-bfce-4355-9b29-c60e8d33a2df","type":"message","text":"basically returning the `Foo` to the global scope is that allocation.","user":"U69BL50BF","ts":"1613141772.455200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rzeU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"basically returning the "},{"type":"text","text":"Foo","style":{"code":true}},{"type":"text","text":" to the global scope is that allocation."}]}]}]},{"client_msg_id":"3cd578d6-d4ff-490d-9c07-d5eae64b467d","type":"message","text":"but I am seeing the same allocation even when Foo is returned in local scopes inside functions","user":"U01658MJH3P","ts":"1613141809.455800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"q+SX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but I am seeing the same allocation even when Foo is returned in local scopes inside functions"}]}]}]},{"client_msg_id":"e8db70e0-7441-4930-9159-40493cdbd169","type":"message","text":"and what about the other cases such as using a vector or using the complete solution `sol`","user":"U01658MJH3P","ts":"1613141851.456500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iFATx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and what about the other cases such as using a vector or using the complete solution "},{"type":"text","text":"sol","style":{"code":true}}]}]}]},{"client_msg_id":"eaa4b329-070a-4bde-98df-e5a61a82bea2","type":"message","text":"I think it would come down to whether the compiler can elide its construction","user":"U69BL50BF","ts":"1613141973.456800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zP5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think it would come down to whether the compiler can elide its construction"}]}]}]},{"client_msg_id":"2e7857f5-8e1e-484c-8827-6ec6a856e00a","type":"message","text":"Yes, something like that… I will try asking in <#C6A044SQH|helpdesk> if there is any way around","user":"U01658MJH3P","ts":"1613142749.458000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZlNL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, something like that… I will try asking in "},{"type":"channel","channel_id":"C6A044SQH"},{"type":"text","text":" if there is any way around"}]}]}]},{"client_msg_id":"4d2da7f1-d7b9-4350-808b-4dd0cc76c336","type":"message","text":"Basically, what I see is that if I use a solution coming from a problem, it allocates but if I use a solution coming from an ensemble problem, it doesn’t allocate. It is odd.","user":"U01658MJH3P","ts":"1613144622.459200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jXn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Basically, what I see is that if I use a solution coming from a problem, it allocates but if I use a solution coming from an ensemble problem, it doesn’t allocate. It is odd."}]}]}]},{"client_msg_id":"2550ab57-e27d-4a3f-b9a8-c61a236bfe86","type":"message","text":"What is the type of `sol[1]`?","user":"U01H36BUDJB","ts":"1613146628.459600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DVcmd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What is the type of "},{"type":"text","text":"sol[1]","style":{"code":true}},{"type":"text","text":"?"}]}]}]},{"client_msg_id":"4389747b-94c5-4df0-aaac-60ee8c606719","type":"message","text":"my guess is that `sol[1]` is an Array, so at the point where `getindex(ODESolution,...)` returns, the compiler allocates memory for the returned array.","user":"U01H36BUDJB","ts":"1613146893.461900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vB2I9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"my guess is that "},{"type":"text","text":"sol[1]","style":{"code":true}},{"type":"text","text":" is an Array, so at the point where "},{"type":"text","text":"getindex(ODESolution,...)","style":{"code":true}},{"type":"text","text":" returns, the compiler allocates memory for the returned array."}]}]}]},{"client_msg_id":"ce5e750c-04c6-4802-92ef-08a0ac2e90eb","type":"message","text":"if `sol` is the solution of a ensemble stochastic problem, `sol[1]`  is a `SciMLBase.RODESolution`","user":"U01658MJH3P","ts":"1613146917.462300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZHx7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if "},{"type":"text","text":"sol","style":{"code":true}},{"type":"text","text":" is the solution of a ensemble stochastic problem, "},{"type":"text","text":"sol[1]","style":{"code":true}},{"type":"text","text":"  is a "},{"type":"text","text":"SciMLBase.RODESolution","style":{"code":true}}]}]}]},{"client_msg_id":"84a73496-9c42-4049-83d9-55543d601385","type":"message","text":"Oh. Hmm. Well then I'm not sure, I would think it would just be a reference.","user":"U01H36BUDJB","ts":"1613146956.462800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"U=E5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh. Hmm. Well then I'm not sure, I would think it would just be a reference."}]}]}]},{"client_msg_id":"e0d44fc6-1b3a-454e-beec-db9ccf227521","type":"message","text":"maybe `RODESolution` subtypes `AbstractArray` ?","user":"U01H36BUDJB","ts":"1613147005.463700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"65oHg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"maybe "},{"type":"text","text":"RODESolution","style":{"code":true}},{"type":"text","text":" subtypes "},{"type":"text","text":"AbstractArray","style":{"code":true}},{"type":"text","text":" ?"}]}]}]},{"client_msg_id":"942ab46f-7343-4f01-ba91-2fbd05cc2cbe","type":"message","text":"also, this doesn’t allocate:\n```@btime $sol[1]\n11.243 ns (0 allocations: 0 bytes)```","user":"U01658MJH3P","ts":"1613147015.463900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PZCe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"also, this doesn’t allocate:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@btime $sol[1]\n11.243 ns (0 allocations: 0 bytes)"}]}]}]},{"client_msg_id":"2ca6f1d5-c14c-42b7-a560-2dcbb8372e58","type":"message","text":"Yes that makes sense.","user":"U01H36BUDJB","ts":"1613147056.464600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZZi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes that makes sense."}]}]}]},{"client_msg_id":"a5ea89fa-cd82-4018-bb8b-841acb4caadf","type":"message","text":"but\n```@btime Foo($sol[1])\n33.463 ns (1 allocation: 192 bytes)```\nallocates!","user":"U01658MJH3P","ts":"1613147092.465200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MKM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@btime Foo($sol[1])\n33.463 ns (1 allocation: 192 bytes)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"allocates!"}]}]}]},{"client_msg_id":"e7a55fc5-90d4-45a4-830e-1c58cb013104","type":"message","text":"the difference is that with `Foo($sol[1])` the value has to be passed into `Foo` . So I think that's why it allocates.","user":"U01H36BUDJB","ts":"1613147121.465700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NaMBt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the difference is that with "},{"type":"text","text":"Foo($sol[1])","style":{"code":true}},{"type":"text","text":" the value has to be passed into "},{"type":"text","text":"Foo","style":{"code":true}},{"type":"text","text":" . So I think that's why it allocates."}]}]}]},{"client_msg_id":"b8423275-b4a8-4a71-ac80-7189ba7df928","type":"message","text":"you mean that `sol[1]` is copied and that is the allocation?","user":"U01658MJH3P","ts":"1613147172.466200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ttb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you mean that "},{"type":"text","text":"sol[1]","style":{"code":true}},{"type":"text","text":" is copied and that is the allocation?"}]}]}]},{"client_msg_id":"fcacd70a-4b2b-4359-b73f-8c9c5eaf380c","type":"message","text":"yes, I think so","user":"U01H36BUDJB","ts":"1613147179.466400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gRLZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, I think so"}]}]}]},{"client_msg_id":"777c0ee4-5bd5-4533-9cdb-fcc31e8a8c68","type":"message","text":"no, I don’t think so","user":"U01658MJH3P","ts":"1613147189.466600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kwTX1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no, I don’t think so"}]}]}]},{"client_msg_id":"3f8a0fed-b426-40f4-b73b-fac1eb67cd1f","type":"message","text":"with `$sol[1]` you're basically benchmarking `getindex` directly","user":"U01H36BUDJB","ts":"1613147207.467400","team":"T68168MUP","edited":{"user":"U01H36BUDJB","ts":"1613147222.000000"},"blocks":[{"type":"rich_text","block_id":"K0Ask","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"with "},{"type":"text","text":"$sol[1]","style":{"code":true}},{"type":"text","text":" you're basically benchmarking "},{"type":"text","text":"getindex","style":{"code":true}},{"type":"text","text":" directly"}]}]}]},{"client_msg_id":"18e96a17-8062-4287-a81c-6a3b6e5d5bd4","type":"message","text":"the allocation is way to small and also that would imply that if I pass a vector, it would do the same","user":"U01658MJH3P","ts":"1613147211.467500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"U9w","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the allocation is way to small and also that would imply that if I pass a vector, it would do the same"}]}]}]},{"client_msg_id":"d6a73604-9e6a-44d5-8e9e-6b5f770c4bbb","type":"message","text":"no because the vector is being interpolated directly in, there's cross between stackframes","user":"U01H36BUDJB","ts":"1613147241.468400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sdt+I","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no because the vector is being interpolated directly in, there's cross between stackframes"}]}]}]},{"client_msg_id":"4681a776-acf7-4b07-897a-c01a585ee7d0","type":"message","text":"that's why `Foo($v)` doesn't allocate","user":"U01H36BUDJB","ts":"1613147269.468700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZHF4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's why "},{"type":"text","text":"Foo($v)","style":{"code":true}},{"type":"text","text":" doesn't allocate"}]}]}]},{"client_msg_id":"0487c558-4224-437f-998e-d6ee2bc497b6","type":"message","text":"it's just a single function call","user":"U01H36BUDJB","ts":"1613147283.469000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w1wFC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's just a single function call"}]}]}]},{"client_msg_id":"9ed23fce-91fe-4455-9799-ad030d44dba0","type":"message","text":"but anyway, this probably belongs in performance-helpdesk","user":"U01H36BUDJB","ts":"1613147307.469300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HJli","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but anyway, this probably belongs in performance-helpdesk"}]}]}]},{"client_msg_id":"c03a1728-6fab-48f6-9dca-1f724b02b462","type":"message","text":"yes, I will post it there!","user":"U01658MJH3P","ts":"1613147331.469600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bntCj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, I will post it there!"}]}]}]},{"client_msg_id":"9cf15262-4182-4a2f-b3ec-04c0822fba81","type":"message","text":"I believe that copying sol[1] would involve many more allocations","user":"U01658MJH3P","ts":"1613147368.470100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"41SJz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I believe that copying sol[1] would involve many more allocations"}]}]}]},{"client_msg_id":"3ffdb314-e44b-4ac2-8063-8d7c32434dbb","type":"message","text":"It has many fields\n```julia&gt; sol1.\nW          dense       errors      prob        seed        tslocation  u_analytic\nalg        destats     interp      retcode     t           u```","user":"U01658MJH3P","ts":"1613147386.470500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Rtr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It has many fields\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> sol1.\nW          dense       errors      prob        seed        tslocation  u_analytic\nalg        destats     interp      retcode     t           u"}]}]}]},{"client_msg_id":"b53493d9-1465-4bbe-afcb-17d2439f239f","type":"message","text":"no, `sol[1]` is just syntactic sugar for `getindex(sol,1)`","user":"U01H36BUDJB","ts":"1613147516.470900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Z2K9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no, "},{"type":"text","text":"sol[1]","style":{"code":true}},{"type":"text","text":" is just syntactic sugar for "},{"type":"text","text":"getindex(sol,1)","style":{"code":true}}]}]}]},{"client_msg_id":"cd3b6a4e-d5f9-4aca-8aab-d49ce37011ed","type":"message","text":"sol[1] is just sol.u[1]","user":"U6788D83U","ts":"1613147564.471800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0PoS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"sol[1] is just sol.u[1]"}]}]}],"reactions":[{"name":"heavy_plus_sign","users":["U01H36BUDJB"],"count":1}]},{"client_msg_id":"1cedbcba-0a72-448a-82f0-b4c110175f4d","type":"message","text":"```const sol1 = sol[1]\n@btime Foo($sol1)\n23.432 ns (1 allocation: 192 bytes)```","user":"U01658MJH3P","ts":"1613147593.472100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BDGa","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"const sol1 = sol[1]\n@btime Foo($sol1)\n23.432 ns (1 allocation: 192 bytes)"}]}]}]},{"client_msg_id":"92f4d0b5-f64f-4c34-bfc8-7e803f6eeabe","type":"message","text":"&gt; sol[1] is just sol.u[1]\nyes of course, but that allocation makes sense to you?","user":"U01658MJH3P","ts":"1613147620.472700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2qpQ6","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"sol[1] is just sol.u[1]"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"yes of course, but that allocation makes sense to you?"}]}]}]},{"client_msg_id":"44c388a1-a9fd-44ae-bdc9-f9ef4cc5d325","type":"message","text":"Yes, that is puzzling.","user":"U01H36BUDJB","ts":"1613147620.472800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c7dE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, that is puzzling."}]}]}]},{"client_msg_id":"1c934989-4393-4e82-b549-d49e51f299b2","type":"message","text":"Try `@btime (Foo($sol1); nothing)`","user":"U6788D83U","ts":"1613147647.473300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zBf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Try "},{"type":"text","text":"@btime (Foo($sol1); nothing)","style":{"code":true}}]}]}]},{"client_msg_id":"f7cad014-2350-4199-ba6e-6bcaa1fffdeb","type":"message","text":"```julia&gt; @btime Foo($sol)\n  1.545 ns (0 allocations: 0 bytes)```","user":"U01658MJH3P","ts":"1613147669.473900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ySt","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @btime Foo($sol)\n  1.545 ns (0 allocations: 0 bytes)"}]}]}]},{"client_msg_id":"92634120-5270-4405-9a6c-69f13b09580a","type":"message","text":"yeah so maybe it's the `Foo` call; but it's weird that it doesn't allocate in the other examples then. Might have something to do with the magic `@btime` does.","user":"U01H36BUDJB","ts":"1613147709.474700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FBf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah so maybe it's the "},{"type":"text","text":"Foo","style":{"code":true}},{"type":"text","text":" call; but it's weird that it doesn't allocate in the other examples then. Might have something to do with the magic "},{"type":"text","text":"@btime","style":{"code":true}},{"type":"text","text":" does."}]}]}]},{"client_msg_id":"ae3dbd07-654b-4628-a240-39924813de20","type":"message","text":"`Foo` shouldn’t allocate if `Foo` is immutable","user":"U6788D83U","ts":"1613147734.475600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vMPs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Foo","style":{"code":true}},{"type":"text","text":" shouldn’t allocate if "},{"type":"text","text":"Foo","style":{"code":true}},{"type":"text","text":" is immutable"}]}]}]},{"client_msg_id":"100ccec5-be5f-4678-a79c-bad16348e5a6","type":"message","text":"```julia&gt; @btime (Foo($sol1); nothing)\n  0.027 ns (0 allocations: 0 bytes)```","user":"U01658MJH3P","ts":"1613147749.476000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q5nal","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @btime (Foo($sol1); nothing)\n  0.027 ns (0 allocations: 0 bytes)"}]}]}]},{"client_msg_id":"45659c3c-0f3b-4f45-ad4e-1e0842bfffbb","type":"message","text":"in general, I always `@btime` and `@benchmark` functions, not direct expressions, just to be safe","user":"U01H36BUDJB","ts":"1613147753.476200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VjA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in general, I always "},{"type":"text","text":"@btime","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"@benchmark","style":{"code":true}},{"type":"text","text":" functions, not direct expressions, just to be safe"}]}]}]},{"client_msg_id":"36908e70-fbfd-4c98-9045-62607de7c847","type":"message","text":"yes, it is inmutable","user":"U01658MJH3P","ts":"1613147757.476500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7Zc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, it is inmutable"}]}]}]},{"client_msg_id":"58ff1a9b-9193-419e-a572-d53a42b16ae2","type":"message","text":"Yeah, benchmarking is tricky.","user":"U6788D83U","ts":"1613147770.477000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eLi90","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, benchmarking is tricky."}]}]}]},{"client_msg_id":"5f86f6d1-bc59-43fc-8cdc-c1ecca5d1cc9","type":"message","text":"but I am seeing the same allocations even when working with `Foo` declarations inside local scopes in functions","user":"U01658MJH3P","ts":"1613147795.477400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7Rx5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but I am seeing the same allocations even when working with "},{"type":"text","text":"Foo","style":{"code":true}},{"type":"text","text":" declarations inside local scopes in functions"}]}]}]},{"client_msg_id":"76c2d7ed-0d15-47c4-a60c-1578d2d09e62","type":"message","text":"```julia&gt; function test(sol)\n         return Foo(sol)\n       end\ntest (generic function with 1 method)\n\njulia&gt; @btime test($sol1)\n  23.137 ns (1 allocation: 192 bytes)```","user":"U01658MJH3P","ts":"1613147839.477700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"km+/K","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function test(sol)\n         return Foo(sol)\n       end\ntest (generic function with 1 method)\n\njulia> @btime test($sol1)\n  23.137 ns (1 allocation: 192 bytes)"}]}]}]},{"client_msg_id":"4dce46c4-b68c-4866-8811-e0f8b2529514","type":"message","text":"```julia&gt; @btime test($sol)\n  1.545 ns (0 allocations: 0 bytes)```","user":"U01658MJH3P","ts":"1613147858.478500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p6GR","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @btime test($sol)\n  1.545 ns (0 allocations: 0 bytes)"}]}]}]},{"client_msg_id":"8d30de4b-71d7-4b4e-93c9-23e275d82f2f","type":"message","text":"those benchmarks are not very meaningful. try with a larger example","user":"U6788D83U","ts":"1613147861.478700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BYs6A","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"those benchmarks are not very meaningful. try with a larger example"}]}]}]},{"client_msg_id":"71ef94b5-e74d-4a04-86e7-c364bca36f44","type":"message","text":"yes, my example is way larger but I see the same allocation","user":"U01658MJH3P","ts":"1613147897.479700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mvZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, my example is way larger but I see the same allocation"}]}]}]},{"client_msg_id":"a6c9ac7e-ef8b-45cd-8093-60a992d176e1","type":"message","text":"If you are returning an immutable type containing a mutable object, then it allocates a pointer","user":"U6788D83U","ts":"1613147905.479900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ULBJt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you are returning an immutable type containing a mutable object, then it allocates a pointer"}]}]}]},{"client_msg_id":"efa0bbe4-5038-4939-ab37-e2d6018dfe16","type":"message","text":"I see","user":"U01658MJH3P","ts":"1613147917.480300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MEAB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see"}]}]}]},{"client_msg_id":"54e65010-52c0-4229-a765-7ac34fb4c6fc","type":"message","text":"so `SciMLBase.RODESolution` is mutable","user":"U01658MJH3P","ts":"1613147933.481000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OpPd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so "},{"type":"text","text":"SciMLBase.RODESolution","style":{"code":true}},{"type":"text","text":" is mutable"}]}]}]},{"client_msg_id":"e115cd1e-d867-4fae-8aeb-73adc099cc83","type":"message","text":"?","user":"U01658MJH3P","ts":"1613147933.481200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oFffI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"?"}]}]}]},{"client_msg_id":"7a9ab7f3-800c-4ad5-8755-f1f6150ea84c","type":"message","text":"Optimizing the pointer away may or may not happen depending what object you return","user":"U6788D83U","ts":"1613147944.481800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nKrK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Optimizing the pointer away may or may not happen depending what object you return"}]}]}]},{"client_msg_id":"7e57dfbc-82c1-4415-8a7e-cc85c41a74a1","type":"message","text":"but `SciMLBase.EnsembleSolution` is inmutable","user":"U01658MJH3P","ts":"1613147945.481900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iuF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but "},{"type":"text","text":"SciMLBase.EnsembleSolution","style":{"code":true}},{"type":"text","text":" is inmutable"}]}]}]},{"client_msg_id":"76d63320-a5ae-4d1a-b08c-7b6d54fbf3c9","type":"message","text":"?","user":"U01658MJH3P","ts":"1613147950.482100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"egM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"?"}]}]}]},{"client_msg_id":"15bc0608-743f-475b-9db6-08eb40705488","type":"message","text":"are you 100% sure that this allocation is your performance bottleneck? It might not be the main issue. I wouldn't think pointer allocations would affect your performance so much...","user":"U01H36BUDJB","ts":"1613147996.482700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ewt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"are you 100% sure that this allocation is your performance bottleneck? It might not be the main issue. I wouldn't think pointer allocations would affect your performance so much..."}]}]}]},{"client_msg_id":"96b7bb5b-7404-4f31-99ea-83b4b37c5864","type":"message","text":"this function is called 1 million times, it is not a bottleneck but i would like to remove it :smile:","user":"U01658MJH3P","ts":"1613148441.483300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Fyph","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this function is called 1 million times, it is not a bottleneck but i would like to remove it "},{"type":"emoji","name":"smile"}]}]}]},{"type":"message","subtype":"bot_message","text":"Is there any way to reduce the speed up the import of diffeqpy?","ts":"1613148655.483400","username":"[gitter] <sibyjackgrove>","bot_id":"B795XHD0X","blocks":[{"type":"section","block_id":"matterbridge_c05cuukg27ibs0bi3tjg","text":{"type":"mrkdwn","text":"Is there any way to reduce the speed up the import of diffeqpy?","verbatim":false}}]}]}