[{"client_msg_id":"5c9e79a5-c951-44de-834b-c3bf3c3f071f","type":"message","text":"I've got some multithreaded code that continuously allocates and frees large matrices. The tasks never terminate, they just write their outputs to a channel that is consumed.\nIt appears that garbage collection never runs, and the process keeps on allocating until it gets OOM killed. If I stick a GC.gc() in the main loop, memory usage stays bounded.\nI'm going to try and produce an MWE, but it might be a bit tricky.\nNonetheless, has anyone seen behaviour like this? It is driving me a bit nuts.","user":"UCNPT22MQ","ts":"1610061964.283000","team":"T68168MUP","edited":{"user":"UCNPT22MQ","ts":"1610061977.000000"},"blocks":[{"type":"rich_text","block_id":"11n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I've got some multithreaded code that continuously allocates and frees large matrices. The tasks never terminate, they just write their outputs to a channel that is consumed.\nIt appears that garbage collection never runs, and the process keeps on allocating until it gets OOM killed. If I stick a GC.gc() in the main loop, memory usage stays bounded.\nI'm going to try and produce an MWE, but it might be a bit tricky.\nNonetheless, has anyone seen behaviour like this? It is driving me a bit nuts."}]}]}],"thread_ts":"1610061964.283000","reply_count":11,"reply_users_count":5,"latest_reply":"1610315805.291100","reply_users":["U680THK2S","UCNPT22MQ","U8T0YV7QC","U01DD7Z0D89","U01GRS159T8"],"subscribed":false},{"client_msg_id":"bcd85547-0fb8-47f2-9eb7-039b92169f46","type":"message","text":"I believe I've seen that before but wasn't able to come up with an MWE for it, nor was I able to solve it without inserting explicit GC runs like you have","user":"U680THK2S","ts":"1610062190.283300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"27f9S","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I believe I've seen that before but wasn't able to come up with an MWE for it, nor was I able to solve it without inserting explicit GC runs like you have"}]}]}],"thread_ts":"1610061964.283000","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"0ae51e68-c011-4ae0-abfe-2e987bda35aa","type":"message","text":"Thanks, that's good/bad to hear. Explicit GC seems to be required on every loop for the leak to stop, but that absolutely kills performance.","user":"UCNPT22MQ","ts":"1610062335.283500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Wn2Fi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks, that's good/bad to hear. Explicit GC seems to be required on every loop for the leak to stop, but that absolutely kills performance."}]}]}],"thread_ts":"1610061964.283000","parent_user_id":"UCNPT22MQ","reactions":[{"name":"heavy_check_mark","users":["U680THK2S"],"count":1}]},{"client_msg_id":"9EC01BF8-650B-4E49-8681-E4BBEACE6B78","type":"message","text":"I had a slightly different experience where GC did run automatically but it consumed majority of the time (like 80-90%). As far as I know, the current multithreading implementation does not work well when you allocate a lot. ","user":"U8T0YV7QC","ts":"1610070651.286800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7s9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I had a slightly different experience where GC did run automatically but it consumed majority of the time (like 80-90%). As far as I know, the current multithreading implementation does not work well when you allocate a lot. "}]}]}],"thread_ts":"1610061964.283000","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"9751e376-d2ae-4035-a4e0-80285177dbe3","type":"message","text":"At what points is GC usually allowed to happen? Is there anything that would prevent those points from occuring? Any way I can encourage them, without necessarily forcing them?","user":"UCNPT22MQ","ts":"1610075742.287000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"liG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"At what points is GC usually allowed to happen? Is there anything that would prevent those points from occuring? Any way I can encourage them, without necessarily forcing them?"}]}]}],"thread_ts":"1610061964.283000","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"f32d3345-0f33-4125-8d1a-c2b6982c18a6","type":"message","text":"You might be interested in <https://docs.julialang.org/en/v1/base/base/#Base.GC.safepoint|GC.safepoint()>. (I'm not the one to tell whether that's actually relevant to your problem.)","user":"U01DD7Z0D89","ts":"1610097380.287800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PUN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You might be interested in "},{"type":"link","url":"https://docs.julialang.org/en/v1/base/base/#Base.GC.safepoint","text":"GC.safepoint()"},{"type":"text","text":". (I'm not the one to tell whether that's actually relevant to your problem.)"}]}]}],"thread_ts":"1610061964.283000","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"191d5b37-b37b-4db4-9cf3-7a306fa24a37","type":"message","text":"Thanks, I came across that too via this which sounds relevant: <https://github.com/JuliaLang/julia/issues/33033|https://github.com/JuliaLang/julia/issues/33033>\nThe odd thing is, though, that all of my threads allocate / have yield points (they're putting/taking on channels), so it's odd that there is never a place to stop them all. I'll fiddle around with explicit safepoints/yields though","user":"UCNPT22MQ","ts":"1610113064.288000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w9QS=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks, I came across that too via this which sounds relevant: "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/33033","text":"https://github.com/JuliaLang/julia/issues/33033"},{"type":"text","text":"\nThe odd thing is, though, that all of my threads allocate / have yield points (they're putting/taking on channels), so it's odd that there is never a place to stop them all. I'll fiddle around with explicit safepoints/yields though"}]}]}],"thread_ts":"1610061964.283000","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"c4d9e4fd-15ae-4e43-90b7-927295fc4024","type":"message","text":"if you can fixup your code to only make few large allocations you will probably have a better experience","user":"U01GRS159T8","ts":"1610314157.290200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ug/e","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you can fixup your code to only make few large allocations you will probably have a better experience"}]}]}],"thread_ts":"1610061964.283000","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"a384eb78-b687-48f1-ba04-a5bbffe4345e","type":"message","text":"many small allocations kills performance","user":"U01GRS159T8","ts":"1610314170.290400","team":"T68168MUP","edited":{"user":"U01GRS159T8","ts":"1610314185.000000"},"blocks":[{"type":"rich_text","block_id":"w07","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"many small allocations kills performance"}]}]}],"thread_ts":"1610061964.283000","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"0a854bad-9bb5-46f7-8719-1bb3a5443e7f","type":"message","text":"I know you said your threads are allocating large matrices, but if you can track down the small, frequent allocations (which can be caused by something as simple as a runtime dispatch) things will be much faster","user":"U01GRS159T8","ts":"1610314265.290700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zhYib","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I know you said your threads are allocating large matrices, but if you can track down the small, frequent allocations (which can be caused by something as simple as a runtime dispatch) things will be much faster"}]}]}],"thread_ts":"1610061964.283000","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"e39a23d9-0c43-43e8-abe7-a015f46ecdd0","type":"message","text":"generally I just pool large allocations too because I dont trust the garbage collector","user":"U01GRS159T8","ts":"1610314284.290900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MJC5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"generally I just pool large allocations too because I dont trust the garbage collector"}]}]}],"thread_ts":"1610061964.283000","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"bee74cf4-4531-42cf-a147-47a1d22ed55f","type":"message","text":"Thanks <@U01GRS159T8>, I did have a look at allocations and there are very few - they're just big. Most of the time is spent in a tightish loop filling the matrices","user":"UCNPT22MQ","ts":"1610315805.291100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JWO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks "},{"type":"user","user_id":"U01GRS159T8"},{"type":"text","text":", I did have a look at allocations and there are very few - they're just big. Most of the time is spent in a tightish loop filling the matrices"}]}]}],"thread_ts":"1610061964.283000","parent_user_id":"UCNPT22MQ"}]