[{"client_msg_id":"dc41eb5c-93fe-46ba-90f7-3589b4146b9e","type":"message","text":"I’ve looked into the parallel computing sections of the manual. Then I see that there is JuliaFolds that has a different view on how to do this, and there might be others. How should one go about thinking this, what’s the actual difference, and which is better for what?","user":"U01CQTKB86N","ts":"1608312913.201700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DOOxu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’ve looked into the parallel computing sections of the manual. Then I see that there is JuliaFolds that has a different view on how to do this, and there might be others. How should one go about thinking this, what’s the actual difference, and which is better for what?"}]}]}],"thread_ts":"1608312913.201700","reply_count":10,"reply_users_count":2,"latest_reply":"1608494907.228200","reply_users":["U8D9768Q6","U01CQTKB86N"],"subscribed":false},{"client_msg_id":"255785B0-F804-4B60-B462-3AFC7D944E08","type":"message","text":"I’d personally use the JuliaFolds stuff for anything that’s not super low level, nitty gritty. JuliaFolds has some really nice, well thought out APIs that help you avoid a lot of the pain points of multi threading. ","user":"U8D9768Q6","ts":"1608321664.206700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wgMM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’d personally use the JuliaFolds stuff for anything that’s not super low level, nitty gritty. JuliaFolds has some really nice, well thought out APIs that help you avoid a lot of the pain points of multi threading. "}]}]}],"thread_ts":"1608312913.201700","parent_user_id":"U01CQTKB86N","reactions":[{"name":"+1","users":["U01CQTKB86N","UKG4WF8PJ"],"count":2}]},{"client_msg_id":"0310cc87-129e-45d4-ac38-94cd4d12e7fb","type":"message","text":"Or maybe Actors, now that those exist in Julia?","user":"U01CQTKB86N","ts":"1608321915.207000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NdqH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Or maybe Actors, now that those exist in Julia?"}]}]}],"thread_ts":"1608312913.201700","parent_user_id":"U01CQTKB86N"},{"client_msg_id":"F5D7B7F7-AB7B-47B4-89ED-B87D263934D7","type":"message","text":"I guess it depends on what you’re doing. There are definitely use cases where actors make sense, but for me, when I find myself in cases where I’m doing things like multithreaded data traversal, mapping or accumulation, I think JuliaFolds makes way more sense ","user":"U8D9768Q6","ts":"1608324946.211400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ku8KZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess it depends on what you’re doing. There are definitely use cases where actors make sense, but for me, when I find myself in cases where I’m doing things like multithreaded data traversal, mapping or accumulation, I think JuliaFolds makes way more sense "}]}]}],"thread_ts":"1608312913.201700","parent_user_id":"U01CQTKB86N","reactions":[{"name":"+1","users":["U01CQTKB86N","UKG4WF8PJ"],"count":2}]},{"client_msg_id":"F8A31C0F-82A8-46FC-B9CB-9506511F0F72","type":"message","text":"Anything where you’d initially find yourself wanting to reach for a sequential loop can be expressed using Transducers.jl, and if it can be parallelized, Transducers will make that much easier. ","user":"U8D9768Q6","ts":"1608325845.213500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Eio","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Anything where you’d initially find yourself wanting to reach for a sequential loop can be expressed using Transducers.jl, and if it can be parallelized, Transducers will make that much easier. "}]}]}],"thread_ts":"1608312913.201700","parent_user_id":"U01CQTKB86N"},{"client_msg_id":"920948d5-117d-46fd-9901-fa8094ed9474","type":"message","text":"There’s a sample task I’d like to parallelise: rolling average of window size ten. It’s not that simple as every output depends on ten inputs. Would this be something that could be represented with a transducer?","user":"U01CQTKB86N","ts":"1608327624.213700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=cs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There’s a sample task I’d like to parallelise: rolling average of window size ten. It’s not that simple as every output depends on ten inputs. Would this be something that could be represented with a transducer?"}]}]}],"thread_ts":"1608312913.201700","parent_user_id":"U01CQTKB86N"},{"client_msg_id":"4205f1cf-f4f3-4d89-9a2b-a3fceb49590c","type":"message","text":"How about something like this?\n```julia&gt; using ThreadsX, Plots\n\njulia&gt; function rolling_average(v; window_size::Int=10)\n           @assert window_size &gt; 0\n           loffset = window_size ÷ 2\n           roffset = loffset + window_size%2\n           ThreadsX.map(eachindex(v)) do i\n               mean(@view v[max(begin, i-loffset) : min(end, i+roffset)])\n           end\n       end\nrolling_average (generic function with 1 method)\n\njulia&gt; let xs = range(-10, 10, length=1000)\n           ys = @. exp(-xs^2) + randn()/10\n           plot(xs, ys)\n           plot!(xs, rolling_average(ys))\n       end```","user":"U8D9768Q6","ts":"1608329167.213900","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1608329380.000000"},"blocks":[{"type":"rich_text","block_id":"O9I","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How about something like this?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using ThreadsX, Plots\n\njulia> function rolling_average(v; window_size::Int=10)\n           @assert window_size > 0\n           loffset = window_size ÷ 2\n           roffset = loffset + window_size%2\n           ThreadsX.map(eachindex(v)) do i\n               mean(@view v[max(begin, i-loffset) : min(end, i+roffset)])\n           end\n       end\nrolling_average (generic function with 1 method)\n\njulia> let xs = range(-10, 10, length=1000)\n           ys = @. exp(-xs^2) + randn()/10\n           plot(xs, ys)\n           plot!(xs, rolling_average(ys))\n       end"}]}]}],"thread_ts":"1608312913.201700","parent_user_id":"U01CQTKB86N"},{"type":"message","text":"","files":[{"id":"F01GUSA78CX","created":1608329442,"timestamp":1608329442,"name":"image.png","title":"image.png","mimetype":"image/png","filetype":"png","pretty_type":"PNG","user":"U8D9768Q6","editable":false,"size":64826,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01GUSA78CX/image.png","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01GUSA78CX/download/image.png","thumb_64":"https://files.slack.com/files-tmb/T68168MUP-F01GUSA78CX-43b939210c/image_64.png","thumb_80":"https://files.slack.com/files-tmb/T68168MUP-F01GUSA78CX-43b939210c/image_80.png","thumb_360":"https://files.slack.com/files-tmb/T68168MUP-F01GUSA78CX-43b939210c/image_360.png","thumb_360_w":360,"thumb_360_h":242,"thumb_480":"https://files.slack.com/files-tmb/T68168MUP-F01GUSA78CX-43b939210c/image_480.png","thumb_480_w":480,"thumb_480_h":322,"thumb_160":"https://files.slack.com/files-tmb/T68168MUP-F01GUSA78CX-43b939210c/image_160.png","original_w":713,"original_h":479,"thumb_tiny":"AwAgADDSHU0tIOp6UtABTUbcuTSt900i8EigB1JzmlooAjeQJye5pouAT0IFSEAnnmjaOeKasJ3GeaHIUc5pzvsYE9CKUKARgdKU4PUUaBqRC4HHBpUlDsBT9i56UBQp6c09Ban/2Q==","permalink":"https://julialang.slack.com/files/U8D9768Q6/F01GUSA78CX/image.png","permalink_public":"https://slack-files.com/T68168MUP-F01GUSA78CX-21ccc87ac6","is_starred":false,"has_rich_preview":false}],"upload":false,"user":"U8D9768Q6","display_as_bot":false,"ts":"1608329445.214900","thread_ts":"1608312913.201700","parent_user_id":"U01CQTKB86N"},{"client_msg_id":"21cf236c-dd60-4202-93d5-0472d88ea143","type":"message","text":"<@U8D9768Q6> Thanks, I’m not sure how it’s supposed to work, but it doesn’t compute the same result as RollingFunctions.jl, and it’s also slower.\n```using Random, Distributions, BenchmarkTools, RollingFunctions, ThreadsX, DataFrames\nfunction rolling_average(v; window_size::Int=10)\n    @assert window_size &gt; 0\n    loffset = window_size ÷ 2\n    roffset = loffset + window_size%2\n    ThreadsX.map(eachindex(v)) do i\n        mean(@view v[max(begin, i-loffset) : min(end, i+roffset)])\n    end\nend\nN = 1000\nd = Normal()\ndf = DataFrame(:data =&gt; rand(d, N))\ndf[!, \"runmean\"] = @btime runmean(df.data, 10)\ndf[!, \"rolling_average\"] = @btime rolling_average(df.data, window_size=10)\ndf.runmean[10:end] ≈ df.rolling_average[10:end]\n\n  10.628 μs (4 allocations: 16.13 KiB)\n  86.767 μs (2852 allocations: 215.78 KiB)\nfalse```","user":"U01CQTKB86N","ts":"1608367793.215700","team":"T68168MUP","edited":{"user":"U01CQTKB86N","ts":"1608367805.000000"},"blocks":[{"type":"rich_text","block_id":"BN6","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U8D9768Q6"},{"type":"text","text":" Thanks, I’m not sure how it’s supposed to work, but it doesn’t compute the same result as RollingFunctions.jl, and it’s also slower.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using Random, Distributions, BenchmarkTools, RollingFunctions, ThreadsX, DataFrames\nfunction rolling_average(v; window_size::Int=10)\n    @assert window_size > 0\n    loffset = window_size ÷ 2\n    roffset = loffset + window_size%2\n    ThreadsX.map(eachindex(v)) do i\n        mean(@view v[max(begin, i-loffset) : min(end, i+roffset)])\n    end\nend\nN = 1000\nd = Normal()\ndf = DataFrame(:data => rand(d, N))\ndf[!, \"runmean\"] = @btime runmean(df.data, 10)\ndf[!, \"rolling_average\"] = @btime rolling_average(df.data, window_size=10)\ndf.runmean[10:end] ≈ df.rolling_average[10:end]\n\n  10.628 μs (4 allocations: 16.13 KiB)\n  86.767 μs (2852 allocations: 215.78 KiB)\nfalse"}]}]}],"thread_ts":"1608312913.201700","parent_user_id":"U01CQTKB86N"},{"client_msg_id":"c7b7ab90-b219-43ad-b8fe-1522430315d2","type":"message","text":"I have some versions of rolling mean calculation in this slightly messy notebook. I’ve been trying to find the fastest algorithm for it, and learn Julia at the same time. <https://github.com/StatisticalMice/ProjectsPublic/blob/main/Benchmarks/julia-moving-average-2.ipynb>","user":"U01CQTKB86N","ts":"1608368511.216000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qe6i","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have some versions of rolling mean calculation in this slightly messy notebook. I’ve been trying to find the fastest algorithm for it, and learn Julia at the same time. "},{"type":"link","url":"https://github.com/StatisticalMice/ProjectsPublic/blob/main/Benchmarks/julia-moving-average-2.ipynb"}]}]}],"thread_ts":"1608312913.201700","parent_user_id":"U01CQTKB86N"},{"client_msg_id":"1de8e846-5362-4d50-9088-9f27a711a1a8","type":"message","text":"RollingFunctions is doing something different. Not very surprised it's faster as it's technique is more amenable to SIMD.","user":"U8D9768Q6","ts":"1608494907.228200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2VO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"RollingFunctions is doing something different. Not very surprised it's faster as it's technique is more amenable to SIMD."}]}]}],"thread_ts":"1608312913.201700","parent_user_id":"U01CQTKB86N"}]