[{"client_msg_id":"4e717dc4-f6ba-406a-9dc9-daf98a1024c6","type":"message","text":"Is is correct, that if I have some code of the form\n```Threads.@threads for i in 1:20\n   # do something\nend```\nthen Julia will just split 1:20 into equal sized pieces and not take into consideration that not each value might have the same runtime?","user":"UBEF50B7C","ts":"1616116477.015100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KOs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is is correct, that if I have some code of the form\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Threads.@threads for i in 1:20\n   # do something\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"then Julia will just split 1:20 into equal sized pieces and not take into consideration that not each value might have the same runtime?"}]}]}],"thread_ts":"1616116477.015100","reply_count":10,"reply_users_count":4,"latest_reply":"1616119475.018200","reply_users":["U01C3624SGJ","UBEF50B7C","U67BJLYCS","U8D9768Q6"],"subscribed":false},{"client_msg_id":"1bf3a78a-640b-4c69-a40e-3d21ec6e0cb0","type":"message","text":"Yes, it will split like 1:4 for thread 1 5:9 for 2 etc","user":"U01C3624SGJ","ts":"1616116614.015200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gwS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, it will split like 1:4 for thread 1 5:9 for 2 etc"}]}]}],"thread_ts":"1616116477.015100","parent_user_id":"UBEF50B7C"},{"client_msg_id":"8714bd47-5ee0-491f-b133-1ec9fdedd458","type":"message","text":"I should have expected that... I guess the good news it then that there is still more potential to make my code faster","user":"UBEF50B7C","ts":"1616116888.015400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9x+F2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I should have expected that... I guess the good news it then that there is still more potential to make my code faster"}]}]}],"thread_ts":"1616116477.015100","parent_user_id":"UBEF50B7C"},{"client_msg_id":"4b9bcd3e-b6b7-4bb1-89ab-db54ea50eb47","type":"message","text":"If you need different load balancing I recommend using `Threads.@spawn` directly","user":"U67BJLYCS","ts":"1616117345.015600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"V09l2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you need different load balancing I recommend using "},{"type":"text","text":"Threads.@spawn","style":{"code":true}},{"type":"text","text":" directly"}]}]}],"thread_ts":"1616116477.015100","parent_user_id":"UBEF50B7C"},{"client_msg_id":"6180611c-e4c4-4a70-acf9-3afcffdc76c3","type":"message","text":"I am calculating the entries for a symmetric matrix, so I think by calculating the indices directly I will probably have a slightly lower overhead - but I guess I should also benchmark with `Threads.@spawn`","user":"UBEF50B7C","ts":"1616117522.015800","team":"T68168MUP","edited":{"user":"UBEF50B7C","ts":"1616117531.000000"},"blocks":[{"type":"rich_text","block_id":"beVh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am calculating the entries for a symmetric matrix, so I think by calculating the indices directly I will probably have a slightly lower overhead - but I guess I should also benchmark with "},{"type":"text","text":"Threads.@spawn","style":{"code":true}}]}]}],"thread_ts":"1616116477.015100","parent_user_id":"UBEF50B7C"},{"client_msg_id":"3C204D7D-5315-4DD5-8CAD-082F84F37B4C","type":"message","text":"ThreadsX.map will load balance ","user":"U8D9768Q6","ts":"1616118314.016500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RnZG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ThreadsX.map will load balance "}]}]}],"thread_ts":"1616116477.015100","parent_user_id":"UBEF50B7C"},{"client_msg_id":"7AF165A2-41FF-43E9-83AA-EAB09DC136C9","type":"message","text":"(Or `ThreadsX.foreach` or other equivalents)","user":"U8D9768Q6","ts":"1616118358.017400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RsXfx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(Or "},{"type":"text","text":"ThreadsX.foreach","style":{"code":true}},{"type":"text","text":" or other equivalents)"}]}]}],"thread_ts":"1616116477.015100","parent_user_id":"UBEF50B7C"},{"client_msg_id":"a356276d-6b37-4008-aabc-c9ac0a5188d4","type":"message","text":"So the version with `@threads` looks like this\n```G = Matrix{Float64}(undef, n, n)\n    indices = [(i, j) for i in 1:n for j in i:n]\n    Threads.@threads for idx in indices\n        i, j = idx\n        @inbounds v = apply_preprocessed(kernel, pre[i], pre[j])\n        @inbounds G[i, j] = v\n        @inbounds G[j, i] = v\n    end```\n(I guess I can replace that index array with a custom iterator later - a generator does not work though)","user":"UBEF50B7C","ts":"1616119124.017600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7sSa2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So the version with "},{"type":"text","text":"@threads","style":{"code":true}},{"type":"text","text":" looks like this\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"G = Matrix{Float64}(undef, n, n)\n    indices = [(i, j) for i in 1:n for j in i:n]\n    Threads.@threads for idx in indices\n        i, j = idx\n        @inbounds v = apply_preprocessed(kernel, pre[i], pre[j])\n        @inbounds G[i, j] = v\n        @inbounds G[j, i] = v\n    end"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"(I guess I can replace that index array with a custom iterator later - a generator does not work though)"}]}]}],"thread_ts":"1616116477.015100","parent_user_id":"UBEF50B7C"},{"client_msg_id":"c42ebd02-efe8-41da-8d0b-8f95ca4e1bc5","type":"message","text":"this version using `@spawn` seems to give the correct results and seems to be equally or even a bit faster, but I think it is incorrect, as technically I would have to call wait on all tasks...\n```function f(i, j, kernel, pre, G)\n        @inbounds v = apply_preprocessed(kernel, pre[i], pre[j])\n        @inbounds G[i, j] = v\n        @inbounds G[j, i] = v\n    end\n\n    for i in 1:n, j in i:n\n        Threads.@spawn f($i, $j, $kernel, $pre, $G)\n    end```","user":"UBEF50B7C","ts":"1616119226.017800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kh40","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this version using "},{"type":"text","text":"@spawn","style":{"code":true}},{"type":"text","text":" seems to give the correct results and seems to be equally or even a bit faster, but I think it is incorrect, as technically I would have to call wait on all tasks...\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function f(i, j, kernel, pre, G)\n        @inbounds v = apply_preprocessed(kernel, pre[i], pre[j])\n        @inbounds G[i, j] = v\n        @inbounds G[j, i] = v\n    end\n\n    for i in 1:n, j in i:n\n        Threads.@spawn f($i, $j, $kernel, $pre, $G)\n    end"}]}]}],"thread_ts":"1616116477.015100","parent_user_id":"UBEF50B7C"},{"client_msg_id":"3a9f0a76-986e-4486-b75c-9e57f599e203","type":"message","text":"but maybe spawn isn't made for such small tasks and I should start the task with larger chunks anyway?","user":"UBEF50B7C","ts":"1616119333.018000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C9V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but maybe spawn isn't made for such small tasks and I should start the task with larger chunks anyway?"}]}]}],"thread_ts":"1616116477.015100","parent_user_id":"UBEF50B7C"},{"client_msg_id":"e2c6a096-b836-4c01-8023-787d16169911","type":"message","text":"I guess I will also try ThreadsX - I just added this as a dependency anyways","user":"UBEF50B7C","ts":"1616119475.018200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q/f","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess I will also try ThreadsX - I just added this as a dependency anyways"}]}]}],"thread_ts":"1616116477.015100","parent_user_id":"UBEF50B7C"}]