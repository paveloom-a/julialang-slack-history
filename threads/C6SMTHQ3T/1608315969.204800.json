[{"client_msg_id":"ea211e5a-9332-4881-8c8c-671641960ef1","type":"message","text":"Crossposting my announcement of <https://github.com/JuliaActors/Actors.jl|Actors 0.2> on Discourse:\n\n<https://discourse.julialang.org/t/ann-actors-0-2-genservers-and-guards/52056>","user":"UP9P4JFNJ","ts":"1608315969.204800","team":"T68168MUP","attachments":[{"service_name":"JuliaLang","title":"[ANN] Actors 0.2, GenServers and Guards","title_link":"https://discourse.julialang.org/t/ann-actors-0-2-genservers-and-guards/52056","text":"I’m happy to announce the release of Actors 0.2 together with two actor infrastructure libraries GenServers and Guards. Actors: Concurrency based on the Actor Model Actors implements the classical Actor model in Julia. It builds on Julia’s concurrency primitives, provides a message based programming model for making concurrency easy to understand and reason about and integrates well with Julia’s features for multi-threading and distributed computing. Actors expresses actor behavior as a fun...","fallback":"JuliaLang: [ANN] Actors 0.2, GenServers and Guards","thumb_url":"https://aws1.discourse-cdn.com/business5/uploads/julialang/original/2X/1/12829a7ba92b924d4ce81099cbf99785bee9b405.png","fields":[{"title":"Reading time","value":"1 mins :clock2:","short":true},{"title":"Likes","value":"3 :heart:","short":true}],"ts":1608308480,"from_url":"https://discourse.julialang.org/t/ann-actors-0-2-genservers-and-guards/52056","thumb_width":408,"thumb_height":263,"service_icon":"https://aws1.discourse-cdn.com/business5/uploads/julialang/optimized/2X/6/6ca888e296f59ca2a599807f7d5edd489e3d1829_2_180x180.png","id":1,"original_url":"https://discourse.julialang.org/t/ann-actors-0-2-genservers-and-guards/52056"}],"blocks":[{"type":"rich_text","block_id":"QPA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Crossposting my announcement of "},{"type":"link","url":"https://github.com/JuliaActors/Actors.jl","text":"Actors 0.2"},{"type":"text","text":" on Discourse:\n\n"},{"type":"link","url":"https://discourse.julialang.org/t/ann-actors-0-2-genservers-and-guards/52056"}]}]}],"thread_ts":"1608315969.204800","reply_count":15,"reply_users_count":3,"latest_reply":"1608576509.230800","reply_users":["U01CQTKB86N","UP9P4JFNJ","U6QGE7S86"],"subscribed":false,"reactions":[{"name":"wow","users":["U680THK2S","U01CQTKB86N","UDGT4PM41","U6QGE7S86"],"count":4}]},{"client_msg_id":"b47ed25f-5f10-4a7c-a195-a626cd6abb09","type":"message","text":"These sound similar to what’s in Elixir? <https://elixirschool.com/en/lessons/advanced/concurrency/>","user":"U01CQTKB86N","ts":"1608322143.207200","team":"T68168MUP","attachments":[{"service_name":"ElixirSchool","title":"Elixir School","title_link":"https://elixirschool.com/en/lessons/advanced/concurrency/","text":"The premier destination for learning and mastering Elixir","fallback":"ElixirSchool: Elixir School","image_url":"https://elixirschool.com/assets/og_image-fad975b316dea5dc361d199bdfaa076006da49a0a3296f799aa7217b4c8b0cbe.jpg","from_url":"https://elixirschool.com/en/lessons/advanced/concurrency/","image_width":476,"image_height":250,"image_bytes":33928,"service_icon":"https://elixirschool.com/assets/favicons/apple-touch-icon-06ad80501b5734bba0428ca0fc14fcbe45811a144914f7be78cdab3c3ea25458.png","id":1,"original_url":"https://elixirschool.com/en/lessons/advanced/concurrency/"}],"blocks":[{"type":"rich_text","block_id":"hwVxl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"These sound similar to what’s in Elixir? "},{"type":"link","url":"https://elixirschool.com/en/lessons/advanced/concurrency/"}]}]}],"thread_ts":"1608315969.204800","parent_user_id":"UP9P4JFNJ"},{"client_msg_id":"c8d07f01-6347-4928-a951-8f1322fe905c","type":"message","text":"The <https://juliaactors.github.io/Actors.jl/stable/protocol/|Actors protocol> is inspired by the <https://erlang.org/doc/design_principles/gen_server_concepts.html|GenServer API> in Erlang/OTP. Elixir uses that too.\n\nThis allows to `call` and `cast` Julia functions even if they are not based on messaging. The messaging to the function is done through the function parameters.\n\nThe <https://juliaactors.github.io/GenServers.jl/stable/|GenServers> library is very similar to the <https://elixirschool.com/en/lessons/advanced/otp-concurrency/|Elixir GenServer>.","user":"UP9P4JFNJ","ts":"1608322854.207500","team":"T68168MUP","edited":{"user":"UP9P4JFNJ","ts":"1608323047.000000"},"attachments":[{"service_name":"ElixirSchool","title":"Elixir School","title_link":"https://elixirschool.com/en/lessons/advanced/otp-concurrency/","text":"The premier destination for learning and mastering Elixir","fallback":"ElixirSchool: Elixir School","image_url":"https://elixirschool.com/assets/og_image-fad975b316dea5dc361d199bdfaa076006da49a0a3296f799aa7217b4c8b0cbe.jpg","from_url":"https://elixirschool.com/en/lessons/advanced/otp-concurrency/","image_width":476,"image_height":250,"image_bytes":33928,"service_icon":"https://elixirschool.com/assets/favicons/apple-touch-icon-06ad80501b5734bba0428ca0fc14fcbe45811a144914f7be78cdab3c3ea25458.png","id":1,"original_url":"https://elixirschool.com/en/lessons/advanced/otp-concurrency/"}],"blocks":[{"type":"rich_text","block_id":"KT2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The "},{"type":"link","url":"https://juliaactors.github.io/Actors.jl/stable/protocol/","text":"Actors protocol"},{"type":"text","text":" is inspired by the "},{"type":"link","url":"https://erlang.org/doc/design_principles/gen_server_concepts.html","text":"GenServer API"},{"type":"text","text":" in Erlang/OTP. Elixir uses that too.\n\nThis allows to "},{"type":"text","text":"call","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"cast","style":{"code":true}},{"type":"text","text":" Julia functions even if they are not based on messaging. The messaging to the function is done through the function parameters.\n\nThe "},{"type":"link","url":"https://juliaactors.github.io/GenServers.jl/stable/","text":"GenServers"},{"type":"text","text":" library is very similar to the "},{"type":"link","url":"https://elixirschool.com/en/lessons/advanced/otp-concurrency/","text":"Elixir GenServer"},{"type":"text","text":"."}]}]}],"thread_ts":"1608315969.204800","parent_user_id":"UP9P4JFNJ","reactions":[{"name":"100","users":["U01CQTKB86N","U6QGE7S86"],"count":2}]},{"client_msg_id":"651f2b4d-c801-4c40-8c83-572c690b50cf","type":"message","text":"I wonder if it would be feasible to connect Julia actors to Erlang actors?","user":"U01CQTKB86N","ts":"1608323446.208000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zz7np","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I wonder if it would be feasible to connect Julia actors to Erlang actors?"}]}]}],"thread_ts":"1608315969.204800","parent_user_id":"UP9P4JFNJ"},{"client_msg_id":"858e0398-bb28-4de8-a33e-2d190c64c12d","type":"message","text":"I think, it will be definitely possible. I saw a library for translating data back and forth. But we are not yet there. The messaging has to be done over TCP, sockets or something similar. This is one of the directions to go after the error handling has been implemented.","user":"UP9P4JFNJ","ts":"1608323750.208300","team":"T68168MUP","edited":{"user":"UP9P4JFNJ","ts":"1608323978.000000"},"blocks":[{"type":"rich_text","block_id":"+l5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think, it will be definitely possible. I saw a library for translating data back and forth. But we are not yet there. The messaging has to be done over TCP, sockets or something similar. This is one of the directions to go after the error handling has been implemented."}]}]}],"thread_ts":"1608315969.204800","parent_user_id":"UP9P4JFNJ"},{"client_msg_id":"fbfb037a-da82-4556-a247-7e0e5969396e","type":"message","text":"I have limited knowledge of this right now, but Phoenix, the web server for Elixir, has something called channels that are multiplexed over Websocket and it has clients in different languages. It would make sense for the channels to be related to actors, but I can’t say for sure. That might be a solution.","user":"U01CQTKB86N","ts":"1608324205.208700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bcrBm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have limited knowledge of this right now, but Phoenix, the web server for Elixir, has something called channels that are multiplexed over Websocket and it has clients in different languages. It would make sense for the channels to be related to actors, but I can’t say for sure. That might be a solution."}]}]}],"thread_ts":"1608315969.204800","parent_user_id":"UP9P4JFNJ"},{"client_msg_id":"2ecdfba7-1709-40ce-b2d4-9dcf6985c57e","type":"message","text":"I am sure that the Erlang/Elixir side is better prepared for an interface than the Julia/Actors side. But the effort may not be very big on both sides and there is much to gain from it for both sides.","user":"UP9P4JFNJ","ts":"1608324414.208900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qrSOC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am sure that the Erlang/Elixir side is better prepared for an interface than the Julia/Actors side. But the effort may not be very big on both sides and there is much to gain from it for both sides."}]}]}],"thread_ts":"1608315969.204800","parent_user_id":"UP9P4JFNJ"},{"client_msg_id":"b57a4710-e517-40cd-8495-7dc7779c5815","type":"message","text":"There was a discussion about it in the Elixir-forum:\n\n<https://elixirforum.com/t/julia-elixir/34064>\n\nBut that without the perspective that Julia could have actors too. A bridge between Julia actors and Elixir processes would be definitely a more elegant way.","user":"UP9P4JFNJ","ts":"1608324833.209100","team":"T68168MUP","attachments":[{"service_name":"Elixir Programming Language Forum","title":"Julia + elixir","title_link":"https://elixirforum.com/t/julia-elixir/34064","text":"Spinning this off in a new thread because I think it’s interesting and merits its own discussion. Agree with @hauleth that the basis should be spinning up a c-node inside of julia, but it’s going to need a bit more than that. A few questions: How to manage Julia versions to run on Julia has a --worker node setting, should we use that? How do you load up the correct dependencies? Also, julia annoyingly uses global dependencies, more like python than elixir, which has project-level dependenci...","fallback":"Elixir Programming Language Forum: Julia + elixir","thumb_url":"https://elixirforum.com/uploads/default/original/2X/3/301658d2571b34804e642eb7a28976609422ac3b.png","fields":[{"title":"Reading time","value":"4 mins :clock2:","short":true},{"title":"Likes","value":"21 :heart:","short":true}],"ts":1598823640,"from_url":"https://elixirforum.com/t/julia-elixir/34064","thumb_width":512,"thumb_height":512,"service_icon":"https://elixirforum.com/uploads/default/optimized/2X/4/457566b7009507e9265f01af98b7c03e9f4ad0fa_2_180x180.png","id":1,"original_url":"https://elixirforum.com/t/julia-elixir/34064"}],"blocks":[{"type":"rich_text","block_id":"Ev2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There was a discussion about it in the Elixir-forum:\n\n"},{"type":"link","url":"https://elixirforum.com/t/julia-elixir/34064"},{"type":"text","text":"\n\nBut that without the perspective that Julia could have actors too. A bridge between Julia actors and Elixir processes would be definitely a more elegant way."}]}]}],"thread_ts":"1608315969.204800","parent_user_id":"UP9P4JFNJ","reactions":[{"name":"+1","users":["U01CQTKB86N","U6QGE7S86"],"count":2}]},{"client_msg_id":"5aac52d6-4230-4abc-a3c6-eecf463ddbee","type":"message","text":"This looks amazing. Have you benchmarked against Elixir?","user":"U6QGE7S86","ts":"1608525899.228700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mekE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This looks amazing. Have you benchmarked against Elixir?"}]}]}],"thread_ts":"1608315969.204800","parent_user_id":"UP9P4JFNJ"},{"client_msg_id":"333f1ade-b8a7-4595-823b-35cca17fcd9e","type":"message","text":"not really. Last spring I did the following preliminary exercise:\n\n<https://discourse.julialang.org/t/lightweight-tasks-julia-vs-elixir-otp/35082>\n\nThat showed - not surprisingly - that Julia is much faster than Elixir in spawning few actors. But the results were not conclusive and the whole experiment has to be repeated and extended.\n\nYet the preliminary experiment convinced me that this was a road worth to go.","user":"UP9P4JFNJ","ts":"1608533996.228900","team":"T68168MUP","attachments":[{"service_name":"JuliaLang","title":"Lightweight tasks, Julia vs Elixir/OTP","title_link":"https://discourse.julialang.org/t/lightweight-tasks-julia-vs-elixir-otp/35082","text":"I wanted to know, whether Julia can cope with Elixir/OTP lightweight tasks and made a comparison for chaining a lot of them following the example from “Programming in Elixir”. My Julia code is: function counter(next::Channel{Int}) return ch -&gt; put!(next, take!(ch)+1) end function create_processes(start::Channel{Int}, n::Int; spawn=false) next = start for i in 1:n next = Channel{Int}(counter(next), spawn=spawn) end put!(next, 0) take!(start) end const start ...","fallback":"JuliaLang: Lightweight tasks, Julia vs Elixir/OTP","thumb_url":"https://aws1.discourse-cdn.com/business5/uploads/julialang/original/2X/e/efe4eef3964bd5264cddae42ad99111a19a7b07f.png","fields":[{"title":"Reading time","value":"5 mins :clock2:","short":true},{"title":"Likes","value":"30 :heart:","short":true}],"ts":1582569048,"from_url":"https://discourse.julialang.org/t/lightweight-tasks-julia-vs-elixir-otp/35082","thumb_width":600,"thumb_height":400,"service_icon":"https://aws1.discourse-cdn.com/business5/uploads/julialang/optimized/2X/6/6ca888e296f59ca2a599807f7d5edd489e3d1829_2_180x180.png","id":1,"original_url":"https://discourse.julialang.org/t/lightweight-tasks-julia-vs-elixir-otp/35082"}],"blocks":[{"type":"rich_text","block_id":"zfs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not really. Last spring I did the following preliminary exercise:\n\n"},{"type":"link","url":"https://discourse.julialang.org/t/lightweight-tasks-julia-vs-elixir-otp/35082"},{"type":"text","text":"\n\nThat showed - not surprisingly - that Julia is much faster than Elixir in spawning few actors. But the results were not conclusive and the whole experiment has to be repeated and extended.\n\nYet the preliminary experiment convinced me that this was a road worth to go."}]}]}],"thread_ts":"1608315969.204800","parent_user_id":"UP9P4JFNJ","reactions":[{"name":"100","users":["U6QGE7S86"],"count":1}]},{"client_msg_id":"c0fb0b07-1b95-4474-84d1-cc2159921596","type":"message","text":"Awesome stuff. Excited to see a Julian approach to fault tolerance.","user":"U6QGE7S86","ts":"1608534055.229300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"70hRX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Awesome stuff. Excited to see a Julian approach to fault tolerance."}]}]}],"thread_ts":"1608315969.204800","parent_user_id":"UP9P4JFNJ","reactions":[{"name":"+1","users":["UP9P4JFNJ"],"count":1}]},{"client_msg_id":"43e66bc9-b082-4a6c-aa09-1002812316cf","type":"message","text":"I hope that this should not be too difficult to implement. There is a lot to learn from Erlang/Elixir/OTP and `Actors` is prepared for it.","user":"UP9P4JFNJ","ts":"1608536379.229600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Dti","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I hope that this should not be too difficult to implement. There is a lot to learn from Erlang/Elixir/OTP and "},{"type":"text","text":"Actors","style":{"code":true}},{"type":"text","text":" is prepared for it."}]}]}],"thread_ts":"1608315969.204800","parent_user_id":"UP9P4JFNJ"},{"client_msg_id":"384ef2d4-c994-434d-976f-822b69ca7cfd","type":"message","text":"OTP?","user":"U6QGE7S86","ts":"1608571680.230100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2SU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"OTP?"}]}]}],"thread_ts":"1608315969.204800","parent_user_id":"UP9P4JFNJ"},{"client_msg_id":"ffff5876-c9a8-441f-92f4-d4d1c1dc59a2","type":"message","text":"&gt; *OTP* is a collection of useful <https://en.wikipedia.org/wiki/Middleware|middleware>, <https://en.wikipedia.org/wiki/Library_(computing)|libraries>, and <https://en.wikipedia.org/wiki/Programming_tool|tools> written in the <https://en.wikipedia.org/wiki/Erlang_(programming_language)|Erlang programming language>. It is an integral part of the <https://en.wikipedia.org/wiki/Open-source_software|open-source> distribution of Erlang. The name OTP was originally an acronym for *Open Telecom Platform*, which was a branding attempt before <https://en.wikipedia.org/wiki/Ericsson|Ericsson> released Erlang/OTP as open source. However neither Erlang nor OTP is specific to telecom applications.\n<https://erlang.org/doc/design_principles/des_princ.html>\n\nErlang and Elixir both use OTP","user":"UP9P4JFNJ","ts":"1608573635.230300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cOQ","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"OTP","style":{"bold":true}},{"type":"text","text":" is a collection of useful "},{"type":"link","url":"https://en.wikipedia.org/wiki/Middleware","text":"middleware"},{"type":"text","text":", "},{"type":"link","url":"https://en.wikipedia.org/wiki/Library_(computing)","text":"libraries"},{"type":"text","text":", and "},{"type":"link","url":"https://en.wikipedia.org/wiki/Programming_tool","text":"tools"},{"type":"text","text":" written in the "},{"type":"link","url":"https://en.wikipedia.org/wiki/Erlang_(programming_language)","text":"Erlang programming language"},{"type":"text","text":". It is an integral part of the "},{"type":"link","url":"https://en.wikipedia.org/wiki/Open-source_software","text":"open-source"},{"type":"text","text":" distribution of Erlang. The name OTP was originally an acronym for "},{"type":"text","text":"Open Telecom Platform","style":{"bold":true}},{"type":"text","text":", which was a branding attempt before "},{"type":"link","url":"https://en.wikipedia.org/wiki/Ericsson","text":"Ericsson"},{"type":"text","text":" released Erlang/OTP as open source. However neither Erlang nor OTP is specific to telecom applications."}]},{"type":"rich_text_section","elements":[{"type":"link","url":"https://erlang.org/doc/design_principles/des_princ.html"},{"type":"text","text":"\n\nErlang and Elixir both use OTP"}]}]}],"thread_ts":"1608315969.204800","parent_user_id":"UP9P4JFNJ","reactions":[{"name":"+1::skin-tone-5","users":["U6QGE7S86"],"count":1}]},{"client_msg_id":"51a8ac5c-9009-4111-b8fa-99e4ea545bc3","type":"message","text":"Ah, gotcha.","user":"U6QGE7S86","ts":"1608573839.230500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nWnZW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, gotcha."}]}]}],"thread_ts":"1608315969.204800","parent_user_id":"UP9P4JFNJ"},{"client_msg_id":"8527c602-c9bf-490f-bb8a-ad157dbf9496","type":"message","text":"Right now I have a rough sketch of how fault tolerance can be implemented in `Actors` <https://github.com/JuliaActors/Actors.jl/issues|issues> #16, #17 and #18. Everything seems doable, no stumbling blocks so far. Some work though.","user":"UP9P4JFNJ","ts":"1608576509.230800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gkhz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Right now I have a rough sketch of how fault tolerance can be implemented in "},{"type":"text","text":"Actors","style":{"code":true}},{"type":"text","text":" "},{"type":"link","url":"https://github.com/JuliaActors/Actors.jl/issues","text":"issues"},{"type":"text","text":" #16, #17 and #18. Everything seems doable, no stumbling blocks so far. Some work though."}]}]}],"thread_ts":"1608315969.204800","parent_user_id":"UP9P4JFNJ"}]