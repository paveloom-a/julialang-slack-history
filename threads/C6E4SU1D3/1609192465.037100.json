[{"client_msg_id":"6d624e0d-c560-4f8e-8808-a429e9a280e2","type":"message","text":"Is there a Julia implementation of `tricontourf`? I could use matplotlib’s implementation with PyPlot, but I’d prefer not to depend on Python","user":"UH5CZ4V8B","ts":"1609192465.037100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3rKtK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a Julia implementation of "},{"type":"text","text":"tricontourf","style":{"code":true}},{"type":"text","text":"? I could use matplotlib’s implementation with PyPlot, but I’d prefer not to depend on Python"}]}]}],"thread_ts":"1609192465.037100","reply_count":3,"reply_users_count":2,"latest_reply":"1609197913.037800","reply_users":["U01GVKTVA23","UH5CZ4V8B"],"subscribed":false},{"client_msg_id":"82ee4bc0-9d3c-4e8e-b147-3edd091b8433","type":"message","text":"see <https://discourse.julialang.org/t/making-a-surface-from-scattered-data/27622/5?u=gyoshi>\n?\n\nI believe pretty much all the backends of Plots.jl are ultimately built on non-julia, though.\n\nMakie.jl would be the most 'pure' julia, I think.\n\nMakie.jl currently does not support triangulating data itself, but you can check out Delaunay.jl. (which still uses scipy for the calculation...)","user":"U01GVKTVA23","ts":"1609194479.037200","team":"T68168MUP","edited":{"user":"U01GVKTVA23","ts":"1609194713.000000"},"attachments":[{"service_name":"JuliaLang","title":"Making a surface from scattered data","title_link":"https://discourse.julialang.org/t/making-a-surface-from-scattered-data/27622/5?u=gyoshi","text":"I’m not sure why we need spline interpolation to do this. Using the default GR backend, seems like surface naturally interpolates via Delaunay triangulation. The following code using Plots x = randn(1000) y = randn(1000) z = @. sin(x)*sin(y) surface(x,y,z,camera=(0,90)) gives something like","fallback":"JuliaLang: Making a surface from scattered data","thumb_url":"https://discourse-cloud-file-uploads.s3.dualstack.us-west-2.amazonaws.com/business5/uploads/julialang/original/2X/c/c33152a8aae857d8cd59fa801011eb2836ae7c49.png","ts":1581604152,"from_url":"https://discourse.julialang.org/t/making-a-surface-from-scattered-data/27622/5?u=gyoshi","thumb_width":980,"thumb_height":898,"service_icon":"https://aws1.discourse-cdn.com/business5/uploads/julialang/optimized/2X/6/6ca888e296f59ca2a599807f7d5edd489e3d1829_2_180x180.png","id":1,"original_url":"https://discourse.julialang.org/t/making-a-surface-from-scattered-data/27622/5?u=gyoshi"}],"blocks":[{"type":"rich_text","block_id":"5PzI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"see "},{"type":"link","url":"https://discourse.julialang.org/t/making-a-surface-from-scattered-data/27622/5?u=gyoshi"},{"type":"text","text":"\n?\n\nI believe pretty much all the backends of Plots.jl are ultimately built on non-julia, though.\n\nMakie.jl would be the most 'pure' julia, I think.\n\nMakie.jl currently does not support triangulating data itself, but you can check out Delaunay.jl. (which still uses scipy for the calculation...)"}]}]}],"thread_ts":"1609192465.037100","parent_user_id":"UH5CZ4V8B"},{"client_msg_id":"455de80d-76eb-4073-ba61-0f6629cd3c34","type":"message","text":"GR would be fine, not sure if `surface` really does what I want though.\n\nI have the triangulation already, so no need for Delaunay","user":"UH5CZ4V8B","ts":"1609195814.037600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s4n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"GR would be fine, not sure if "},{"type":"text","text":"surface","style":{"code":true}},{"type":"text","text":" really does what I want though.\n\nI have the triangulation already, so no need for Delaunay"}]}]}],"thread_ts":"1609192465.037100","parent_user_id":"UH5CZ4V8B"},{"client_msg_id":"3f2afa1e-4dd7-48cb-b48d-669c2bac9f7c","type":"message","text":"`AbstractPlotting.mesh` is probably close enough.\n\nIf there is a GR-based solution, I’d also be happy to hear about it.","user":"UH5CZ4V8B","ts":"1609197913.037800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0+X","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"AbstractPlotting.mesh","style":{"code":true}},{"type":"text","text":" is probably close enough.\n\nIf there is a GR-based solution, I’d also be happy to hear about it."}]}]}],"thread_ts":"1609192465.037100","parent_user_id":"UH5CZ4V8B"}]