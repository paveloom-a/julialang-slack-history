[{"client_msg_id":"1304951c-9568-4aa7-b42c-60e438b1a55d","type":"message","text":"Hello everyone,\nI'm Dodd (he/him), a postdoc working on a mix of topics in nonlinear optics, integrated photonics and Raman spectroscopy in the EECS dept. at MIT. I've been coming up to speed on Julia for the past several months and developing code for PDE-constrained optimization (\"inverse design\") of waveguides for short laser pulses. Migrating from using python to control compiled PDE solver libraries has been surprisingly approachable thanks to all of the great ongoing work in the Julia community and is already proving useful for my research. I am excited to join and hopefully contribute to the ecosystem.\nI am currently focused on automatic differentiation applied to eigenmode solutions of parameterized PDEs (just the Helmholtz equation for now), Other relevant buzzwords include \"adjoint method\" and \"matrix-free\"/\"implicit\" operators. Please feel free to reach out if you have overlapping interests and would like to chat. I look forward to learning from/with you all.","user":"U01HK5WRVJT","ts":"1613145232.134000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fGy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hello everyone,\nI'm Dodd (he/him), a postdoc working on a mix of topics in nonlinear optics, integrated photonics and Raman spectroscopy in the EECS dept. at MIT. I've been coming up to speed on Julia for the past several months and developing code for PDE-constrained optimization (\"inverse design\") of waveguides for short laser pulses. Migrating from using python to control compiled PDE solver libraries has been surprisingly approachable thanks to all of the great ongoing work in the Julia community and is already proving useful for my research. I am excited to join and hopefully contribute to the ecosystem.\nI am currently focused on automatic differentiation applied to eigenmode solutions of parameterized PDEs (just the Helmholtz equation for now), Other relevant buzzwords include \"adjoint method\" and \"matrix-free\"/\"implicit\" operators. Please feel free to reach out if you have overlapping interests and would like to chat. I look forward to learning from/with you all."}]}]}],"thread_ts":"1613145232.134000","reply_count":5,"reply_users_count":2,"latest_reply":"1613796159.000200","reply_users":["U69BL50BF","U01HK5WRVJT"],"subscribed":false,"reactions":[{"name":"wave","users":["U01MLF2CTNJ","U01724Q3PGW","UGU761DU2","UKG4WF8PJ","U6A936746","U01M655G9AR","U013B3NSZGB"],"count":7},{"name":"heart","users":["U6A936746","UJ0D85C65"],"count":2}]},{"client_msg_id":"73cca815-79f6-421f-96d2-02784089949c","type":"message","text":"I assume you found <https://diffeqflux.sciml.ai/dev/examples/pde_constrained/> and <https://diffeq.sciml.ai/stable/tutorials/advanced_ode_example/#Defining-Linear-Solver-Routines-and-Jacobian-Free-Newton-Krylov>?","user":"U69BL50BF","ts":"1613153079.135500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Oaa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I assume you found "},{"type":"link","url":"https://diffeqflux.sciml.ai/dev/examples/pde_constrained/"},{"type":"text","text":" and "},{"type":"link","url":"https://diffeq.sciml.ai/stable/tutorials/advanced_ode_example/#Defining-Linear-Solver-Routines-and-Jacobian-Free-Newton-Krylov"},{"type":"text","text":"?"}]}]}],"thread_ts":"1613145232.134000","parent_user_id":"U01HK5WRVJT"},{"client_msg_id":"9756be8a-6e4b-4c12-b779-bde765f5872d","type":"message","text":"thanks for your reply! sorry for not responding sooner. Also thank you for the references, I have seen the first link, but the second is new to me. I will read it over today.\n\nI've actually been meaning to reach out to you. I just started incorporating ModelingToolkit's CAS+runtime-generated-function tools into my code (at this point for models of various materials' dielectric tensors parameterized by frequency, temperature, etc.), and I am trying to understand how to best leverage the multitude of tools in the DiffEq ecosystem.\n\n At the time I started, I was still learning the basics of Julia and could not tell whether a parameterized FD-discretized PDE eigensolver (incl. FFTs  &amp; complex vector fields) would be implementable within DiffEq/ModelingToolkit, so I just implemented the Helmholtz Eqn operator and preconditioner using LinearMaps.FunctionMap and used IterativeSolvers.LOBCG as the solver.  That has worked so far, but I would not be surprised to learn that it could be improved using DiffEq.","user":"U01HK5WRVJT","ts":"1613570718.163300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"b7OCH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thanks for your reply! sorry for not responding sooner. Also thank you for the references, I have seen the first link, but the second is new to me. I will read it over today.\n\nI've actually been meaning to reach out to you. I just started incorporating ModelingToolkit's CAS+runtime-generated-function tools into my code (at this point for models of various materials' dielectric tensors parameterized by frequency, temperature, etc.), and I am trying to understand how to best leverage the multitude of tools in the DiffEq ecosystem.\n\n At the time I started, I was still learning the basics of Julia and could not tell whether a parameterized FD-discretized PDE eigensolver (incl. FFTs  & complex vector fields) would be implementable within DiffEq/ModelingToolkit, so I just implemented the Helmholtz Eqn operator and preconditioner using LinearMaps.FunctionMap and used IterativeSolvers.LOBCG as the solver.  That has worked so far, but I would not be surprised to learn that it could be improved using DiffEq."}]}]}],"thread_ts":"1613145232.134000","parent_user_id":"U01HK5WRVJT"},{"client_msg_id":"106aec7b-c422-4466-b1f1-cb0c49202f44","type":"message","text":"Over the past few months I have been able to get a solver and the adjoint solver working with ChainRules/Zygote so that I can back-propagate sensitivities through iteratively-solved eigenmodes to the geometry+material parameters that determine the Helmholtz PDE. That was very exciting. Currently I am trying to streamline the `(parameters)-&gt;(dielectric tensor at each gridpoint)` function, which includes some fancy smoothing at the boundaries between materials (anisotropic, sensitive to surface normal orientation, <https://doi.org/10.1103/PhysRevE.77.036611|technique from Steven Johnson's group>). Ideally that function could be runtime compiled for a given parameterized geometry (a list of 2D or 3D <https://github.com/stevengj/GeometryPrimitives.jl|shapes> with parameters determining their position, size, orientation, etc. and each with an associated dielectric tensor parameterized by frequency). Calculations with Shape structs involve a boatload of control flow and boolean operations (eg. is a given grid point inside or outside of a shape, which overlapping shape takes precedence at a given grid point, etc.). Do you think ModelingToolkit.Num types could be used for with parameterized shapes in this context? Without symbolic math I've been able to make these objects compatible with fwd/rev-mode AD, but I am dreaming of runtime-compiling functions mapping all of my input parameters directly to a smoothed+discretized dielectric tensor field. That mapping usually has a lot of sparsity that could make my parameterized PDE solutions much faster to differentiate and optimize.","user":"U01HK5WRVJT","ts":"1613573713.163500","team":"T68168MUP","attachments":[{"service_name":"Physical Review E","title":"Perturbation theory for anisotropic dielectric interfaces, and application to subpixel smoothing of discretized numerical methods","title_link":"https://doi.org/10.1103/PhysRevE.77.036611","text":"We derive a correct first-order perturbation theory in electromagnetism for cases where an interface between two anisotropic dielectric materials is slightly shifted. Most previous perturbative methods give incorrect results for this case, even to lowest order, because of the complicated discontinuous boundary conditions on the electric field at such an interface. Our final expression is simply a surface integral, over the material interface, of the continuous field components from the unperturbed structure. The derivation is based on a ``localized'' coordinate-transformation technique, which avoids both the problem of field discontinuities and the challenge of constructing an explicit coordinate transformation by taking the limit in which the coordinate perturbation is infinitesimally localized around the boundary. Not only is our result potentially useful in evaluating boundary perturbations, e.g., from fabrication imperfections, in highly anisotropic media such as many metamaterials, but it also has a direct application in numerical electromagnetism. In particular, we show how it leads to a subpixel smoothing scheme to ameliorate staircasing effects in discretized simulations of anisotropic media, in such a way as to greatly reduce the numerical errors compared to other proposed smoothing schemes.","fallback":"Physical Review E: Perturbation theory for anisotropic dielectric interfaces, and application to subpixel smoothing of discretized numerical methods","ts":1206428400,"from_url":"https://doi.org/10.1103/PhysRevE.77.036611","id":1,"original_url":"https://doi.org/10.1103/PhysRevE.77.036611"}],"blocks":[{"type":"rich_text","block_id":"DvZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Over the past few months I have been able to get a solver and the adjoint solver working with ChainRules/Zygote so that I can back-propagate sensitivities through iteratively-solved eigenmodes to the geometry+material parameters that determine the Helmholtz PDE. That was very exciting. Currently I am trying to streamline the "},{"type":"text","text":"(parameters)->(dielectric tensor at each gridpoint)","style":{"code":true}},{"type":"text","text":" function, which includes some fancy smoothing at the boundaries between materials (anisotropic, sensitive to surface normal orientation, "},{"type":"link","url":"https://doi.org/10.1103/PhysRevE.77.036611","text":"technique from Steven Johnson's group"},{"type":"text","text":"). Ideally that function could be runtime compiled for a given parameterized geometry (a list of 2D or 3D "},{"type":"link","url":"https://github.com/stevengj/GeometryPrimitives.jl","text":"shapes"},{"type":"text","text":" with parameters determining their position, size, orientation, etc. and each with an associated dielectric tensor parameterized by frequency). Calculations with Shape structs involve a boatload of control flow and boolean operations (eg. is a given grid point inside or outside of a shape, which overlapping shape takes precedence at a given grid point, etc.). Do you think ModelingToolkit.Num types could be used for with parameterized shapes in this context? Without symbolic math I've been able to make these objects compatible with fwd/rev-mode AD, but I am dreaming of runtime-compiling functions mapping all of my input parameters directly to a smoothed+discretized dielectric tensor field. That mapping usually has a lot of sparsity that could make my parameterized PDE solutions much faster to differentiate and optimize."}]}]}],"thread_ts":"1613145232.134000","parent_user_id":"U01HK5WRVJT"},{"client_msg_id":"98f16b25-6240-488b-a09c-d610a351d35a","type":"message","text":"lol sorry I wrote you an essay, feel free to ignore. Would love to chat sometime if you have any interest or advice. <mailto:dodd@mit.edu|dodd@mit.edu> (currently working on campus)","user":"U01HK5WRVJT","ts":"1613573890.163800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4uES8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"lol sorry I wrote you an essay, feel free to ignore. Would love to chat sometime if you have any interest or advice. "},{"type":"link","url":"mailto:dodd@mit.edu","text":"dodd@mit.edu"},{"type":"text","text":" (currently working on campus)"}]}]}],"thread_ts":"1613145232.134000","parent_user_id":"U01HK5WRVJT"},{"client_msg_id":"41cd7b9e-1ab2-40ba-a177-2ef455bb7bdb","type":"message","text":"&gt; Do you think ModelingToolkit.Num types could be used for with parameterized shapes in this context?\nYou'd have to do it on the internal scalars. You'd basically flatten it all down.","user":"U69BL50BF","ts":"1613796159.000200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DOjO","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"Do you think ModelingToolkit.Num types could be used for with parameterized shapes in this context?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"You'd have to do it on the internal scalars. You'd basically flatten it all down."}]}]}],"thread_ts":"1613145232.134000","parent_user_id":"U01HK5WRVJT"}]