[{"client_msg_id":"1304951c-9568-4aa7-b42c-60e438b1a55d","type":"message","text":"Hello everyone,\nI'm Dodd (he/him), a postdoc working on a mix of topics in nonlinear optics, integrated photonics and Raman spectroscopy in the EECS dept. at MIT. I've been coming up to speed on Julia for the past several months and developing code for PDE-constrained optimization (\"inverse design\") of waveguides for short laser pulses. Migrating from using python to control compiled PDE solver libraries has been surprisingly approachable thanks to all of the great ongoing work in the Julia community and is already proving useful for my research. I am excited to join and hopefully contribute to the ecosystem.\nI am currently focused on automatic differentiation applied to eigenmode solutions of parameterized PDEs (just the Helmholtz equation for now), Other relevant buzzwords include \"adjoint method\" and \"matrix-free\"/\"implicit\" operators. Please feel free to reach out if you have overlapping interests and would like to chat. I look forward to learning from/with you all.","user":"U01HK5WRVJT","ts":"1613145232.134000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fGy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hello everyone,\nI'm Dodd (he/him), a postdoc working on a mix of topics in nonlinear optics, integrated photonics and Raman spectroscopy in the EECS dept. at MIT. I've been coming up to speed on Julia for the past several months and developing code for PDE-constrained optimization (\"inverse design\") of waveguides for short laser pulses. Migrating from using python to control compiled PDE solver libraries has been surprisingly approachable thanks to all of the great ongoing work in the Julia community and is already proving useful for my research. I am excited to join and hopefully contribute to the ecosystem.\nI am currently focused on automatic differentiation applied to eigenmode solutions of parameterized PDEs (just the Helmholtz equation for now), Other relevant buzzwords include \"adjoint method\" and \"matrix-free\"/\"implicit\" operators. Please feel free to reach out if you have overlapping interests and would like to chat. I look forward to learning from/with you all."}]}]}],"thread_ts":"1613145232.134000","reply_count":2,"reply_users_count":2,"latest_reply":"1613570718.163300","reply_users":["U69BL50BF","U01HK5WRVJT"],"subscribed":false,"reactions":[{"name":"wave","users":["U01MLF2CTNJ","U01M655G9AR","U01724Q3PGW","U013B3NSZGB","UKG4WF8PJ","UGU761DU2","U6A936746"],"count":7},{"name":"heart","users":["U6A936746"],"count":1}]},{"client_msg_id":"73cca815-79f6-421f-96d2-02784089949c","type":"message","text":"I assume you found <https://diffeqflux.sciml.ai/dev/examples/pde_constrained/> and <https://diffeq.sciml.ai/stable/tutorials/advanced_ode_example/#Defining-Linear-Solver-Routines-and-Jacobian-Free-Newton-Krylov>?","user":"U69BL50BF","ts":"1613153079.135500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Oaa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I assume you found "},{"type":"link","url":"https://diffeqflux.sciml.ai/dev/examples/pde_constrained/"},{"type":"text","text":" and "},{"type":"link","url":"https://diffeq.sciml.ai/stable/tutorials/advanced_ode_example/#Defining-Linear-Solver-Routines-and-Jacobian-Free-Newton-Krylov"},{"type":"text","text":"?"}]}]}],"thread_ts":"1613145232.134000","parent_user_id":"U01HK5WRVJT"},{"client_msg_id":"9756be8a-6e4b-4c12-b779-bde765f5872d","type":"message","text":"thanks for your reply! sorry for not responding sooner. Also thank you for the references, I have seen the first link, but the second is new to me. I will read it over today.\n\nI've actually been meaning to reach out to you. I just started incorporating ModelingToolkit's CAS+runtime-generated-function tools into my code (at this point for models of various materials' dielectric tensors parameterized by frequency, temperature, etc.), and I am trying to understand how to best leverage the multitude of tools in the DiffEq ecosystem.\n\n At the time I started, I was still learning the basics of Julia and could not tell whether a parameterized FD-discretized PDE eigensolver (incl. FFTs  &amp; complex vector fields) would be implementable within DiffEq/ModelingToolkit, so I just implemented the Helmholtz Eqn operator and preconditioner using LinearMaps.FunctionMap and used IterativeSolvers.LOBCG as the solver.  That has worked so far, but I would not be surprised to learn that it could be improved using DiffEq.","user":"U01HK5WRVJT","ts":"1613570718.163300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"b7OCH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thanks for your reply! sorry for not responding sooner. Also thank you for the references, I have seen the first link, but the second is new to me. I will read it over today.\n\nI've actually been meaning to reach out to you. I just started incorporating ModelingToolkit's CAS+runtime-generated-function tools into my code (at this point for models of various materials' dielectric tensors parameterized by frequency, temperature, etc.), and I am trying to understand how to best leverage the multitude of tools in the DiffEq ecosystem.\n\n At the time I started, I was still learning the basics of Julia and could not tell whether a parameterized FD-discretized PDE eigensolver (incl. FFTs  & complex vector fields) would be implementable within DiffEq/ModelingToolkit, so I just implemented the Helmholtz Eqn operator and preconditioner using LinearMaps.FunctionMap and used IterativeSolvers.LOBCG as the solver.  That has worked so far, but I would not be surprised to learn that it could be improved using DiffEq."}]}]}],"thread_ts":"1613145232.134000","parent_user_id":"U01HK5WRVJT"}]