[{"client_msg_id":"37b589cb-546b-4664-99cc-60085795f2ec","type":"message","text":"Is there a way to implicitly convert two variables with the same *intrinsic type* but coming from different modules? see below for example\n```LoadError: MethodError: no method matching synthetise_schedule(::Array{Main.Scheduler.Loader.Entities.Agent,1}, ::Array{<http://Main.Scheduler.Loader.Entities.Space|Main.Scheduler.Loader.Entities.Space>,1}, ::Dict{String,Array{String,1}})\nClosest candidates are:\nsynthetise_schedule(::Array{Main.Scheduler.Entities.Agent,1}, ::Array{<http://Main.Scheduler.Entities.Space|Main.Scheduler.Entities.Space>,1}, ::Dict{String,Array{String,1}}) ```\nFor instance,\n`<http://Main.Scheduler.Loader.Entities.Space|Main.Scheduler.Loader.Entities.Space>` and `<http://Main.Scheduler.Entities.Space|Main.Scheduler.Entities.Space>` refer to the same element but for some reason they are not considered the same type.\nI don’t export types in any of my modules and sub-modules, but I have the following `using` statements at the top of my `Scheduler`  module\n```using .Loader: load_data, read_config\nusing .Entities: Agent, Space, Event```","user":"U01EZ6VN118","ts":"1612972505.471500","team":"T68168MUP","edited":{"user":"U01EZ6VN118","ts":"1612972692.000000"},"blocks":[{"type":"rich_text","block_id":"xhRMF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a way to implicitly convert two variables with the same "},{"type":"text","text":"intrinsic type","style":{"bold":true}},{"type":"text","text":" but coming from different modules? see below for example\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"LoadError: MethodError: no method matching synthetise_schedule(::Array{Main.Scheduler.Loader.Entities.Agent,1}, ::Array{Main.Scheduler.Loader.Entities.Space,1}, ::Dict{String,Array{String,1}})\nClosest candidates are:\nsynthetise_schedule(::Array{Main.Scheduler.Entities.Agent,1}, ::Array{Main.Scheduler.Entities.Space,1}, ::Dict{String,Array{String,1}}) "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"For instance,\n"},{"type":"text","text":"Main.Scheduler.Loader.Entities.Space","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"Main.Scheduler.Entities.Space","style":{"code":true}},{"type":"text","text":" refer to the same element but for some reason they are not considered the same type.\nI don’t export types in any of my modules and sub-modules, but I have the following "},{"type":"text","text":"using","style":{"code":true}},{"type":"text","text":" statements at the top of my "},{"type":"text","text":"Scheduler","style":{"code":true}},{"type":"text","text":"  module\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using .Loader: load_data, read_config\nusing .Entities: Agent, Space, Event"}]}]}],"thread_ts":"1612972505.471500","reply_count":3,"reply_users_count":2,"latest_reply":"1612973103.472300","reply_users":["B01J9QZ4SP8","U68QW0PUZ"],"subscribed":false,"reactions":[{"name":"bridge","users":["U01EZ6VN118"],"count":1}]},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1612972507.471600","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1612972505.471500","parent_user_id":"U01EZ6VN118"},{"type":"message","subtype":"bot_message","text":"Success, it has been cross posted <https://discourse.julialang.org/t/55006| to Discourse>. Keep and eye out on Discourse for responses and please add an answer there once you are satisfied with the solution so others can benefit as well. Happy debugging!","ts":"1612972705.472100","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1612972505.471500","parent_user_id":"U01EZ6VN118"},{"client_msg_id":"bdb73534-df54-47bf-bbeb-106d9f8d787a","type":"message","text":"```module A\n  export MyType\n\n  struct MyType\n    x::Int\n  end\nend\n\nmodule B\n  export MyType\n\n  struct MyType\n    x::Int\n  end\nend\n\nusing .A: MyType # works\nusing .B: MyType # warns \nWARNING: ignoring conflicting import of B.MyType into Main```\nYou should be importing the shared type from one place\n```module A\n  export MyType\n  \n  struct MyType\n    x::Int\n  end\nend\n\nmodule B\n   using ..A:MyType\n   # ...\nend\n\nmodule C\n  using ..A:MyType\n  # ...\nend\n\nusing .B: MyType # ok\nusing .C: MyType # ok```\n","user":"U68QW0PUZ","ts":"1612973103.472300","team":"T68168MUP","edited":{"user":"U68QW0PUZ","ts":"1612973335.000000"},"blocks":[{"type":"rich_text","block_id":"vGb/U","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"module A\n  export MyType\n\n  struct MyType\n    x::Int\n  end\nend\n\nmodule B\n  export MyType\n\n  struct MyType\n    x::Int\n  end\nend\n\nusing .A: MyType # works\nusing .B: MyType # warns \nWARNING: ignoring conflicting import of B.MyType into Main"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"You should be importing the shared type from one place\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"module A\n  export MyType\n  \n  struct MyType\n    x::Int\n  end\nend\n\nmodule B\n   using ..A:MyType\n   # ...\nend\n\nmodule C\n  using ..A:MyType\n  # ...\nend\n\nusing .B: MyType # ok\nusing .C: MyType # ok"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1612972505.471500","parent_user_id":"U01EZ6VN118"}]