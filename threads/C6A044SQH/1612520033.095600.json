[{"client_msg_id":"fe1d245a-f863-4b5f-a5d1-01e85907b2b9","type":"message","text":"How do you make broadcasting work with custom types, do I need to manually override base functions such as length, iterate, etc..?\n```function apply(t::LinearTransform, x::Real)\n    x = x * t.scale\nend```\nWith a single instance t of a LinearTransform, I would want this to work as apply.(t, some_vector). It seems I manually override some base functions to do this, and I'm not sure what the overrides are for all cases.","user":"UFCNUVC67","ts":"1612520033.095600","team":"T68168MUP","edited":{"user":"UFCNUVC67","ts":"1612520136.000000"},"blocks":[{"type":"rich_text","block_id":"n4h7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How do you make broadcasting work with custom types, do I need to manually override base functions such as length, iterate, etc..?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function apply(t::LinearTransform, x::Real)\n    x = x * t.scale\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"With a single instance t of a LinearTransform, I would want this to work as apply.(t, some_vector). It seems I manually override some base functions to do this, and I'm not sure what the overrides are for all cases."}]}]}],"thread_ts":"1612520033.095600","reply_count":6,"reply_users_count":4,"latest_reply":"1612522016.098000","reply_users":["B01J9QZ4SP8","UH24GRBLL","UD0NS8PDF","UFCNUVC67"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1612520036.095700","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1612520033.095600","parent_user_id":"UFCNUVC67"},{"client_msg_id":"daa3d1d7-7fe2-4863-b6eb-0803fd19abd1","type":"message","text":"<https://docs.julialang.org/en/v1/manual/interfaces/#man-interfaces-broadcasting>","user":"UH24GRBLL","ts":"1612520147.096000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7d4","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://docs.julialang.org/en/v1/manual/interfaces/#man-interfaces-broadcasting"}]}]}],"thread_ts":"1612520033.095600","parent_user_id":"UFCNUVC67","reactions":[{"name":"+1","users":["UFCNUVC67"],"count":1}]},{"client_msg_id":"9a070d5f-d4c4-4c70-a075-7e2034eda5c7","type":"message","text":"<https://youtu.be/jS9eouMJf_Y?t=1169>  might also be helpful","user":"UH24GRBLL","ts":"1612520669.096300","team":"T68168MUP","attachments":[{"service_name":"YouTube","service_url":"https://www.youtube.com/","title":"An introduction to high performance custom arrays | Matt Bauman","title_link":"https://youtu.be/jS9eouMJf_Y?t=1169","author_name":"The Julia Programming Language","author_link":"https://www.youtube.com/user/JuliaLanguage","thumb_url":"https://i.ytimg.com/vi/jS9eouMJf_Y/hqdefault.jpg","thumb_width":480,"thumb_height":360,"fallback":"YouTube Video: An introduction to high performance custom arrays | Matt Bauman","video_html":"<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/jS9eouMJf_Y?start=1169&feature=oembed&start=1169&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","video_html_width":400,"video_html_height":225,"from_url":"https://youtu.be/jS9eouMJf_Y?t=1169","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png","id":1,"original_url":"https://youtu.be/jS9eouMJf_Y?t=1169"}],"blocks":[{"type":"rich_text","block_id":"gsC/P","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://youtu.be/jS9eouMJf_Y?t=1169"},{"type":"text","text":"  might also be helpful"}]}]}],"thread_ts":"1612520033.095600","parent_user_id":"UFCNUVC67"},{"client_msg_id":"ae079025-a35a-40f7-93c6-8e744999ed89","type":"message","text":"Do you want LinearTransform to behave like a vector here, or like a scalar, same one for every element of the vector?","user":"UD0NS8PDF","ts":"1612521155.096600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"T+91Y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Do you want LinearTransform to behave like a vector here, or like a scalar, same one for every element of the vector?"}]}]}],"thread_ts":"1612520033.095600","parent_user_id":"UFCNUVC67"},{"client_msg_id":"49ac7723-ae86-4306-841c-004bc1d45bf7","type":"message","text":"The second is just `Base.Broadcast.broadcastable(x::LinearTransform) = Ref(x)`, the first is more work","user":"UD0NS8PDF","ts":"1612521189.096800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4Ll","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The second is just "},{"type":"text","text":"Base.Broadcast.broadcastable(x::LinearTransform) = Ref(x)","style":{"code":true}},{"type":"text","text":", the first is more work"}]}]}],"thread_ts":"1612520033.095600","parent_user_id":"UFCNUVC67"},{"client_msg_id":"cf8bc163-05fa-4053-8b5b-f87a75a84f42","type":"message","text":"Yeah it's just a single instance, I don't need to iterate over it. Thanks for all the links!","user":"UFCNUVC67","ts":"1612522016.098000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ClU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah it's just a single instance, I don't need to iterate over it. Thanks for all the links!"}]}]}],"thread_ts":"1612520033.095600","parent_user_id":"UFCNUVC67"}]