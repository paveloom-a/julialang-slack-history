[{"client_msg_id":"85db77d0-e597-4044-820e-f095837db396","type":"message","text":"Hello! I have a 3-dimensional array A and I would like to vertically concatenate along the third dimension. This can be done, for example, using `vcat(A[:,:,1],A[:,:,2])` .\nBut `size(A) = (128,8,6)` . Is there a better way than writing `vcat(A[:,:,1],A[:,:,2],A[:,:,3],A[:,:,4],A[:,:,5],A[:,:,6])` ? It's useful for me to know as I may end having a number &gt;&gt;&gt; 6. Thanks!","user":"U01HHACHU77","ts":"1610425383.340700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"r1pcU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hello! I have a 3-dimensional array A and I would like to vertically concatenate along the third dimension. This can be done, for example, using "},{"type":"text","text":"vcat(A[:,:,1],A[:,:,2])","style":{"code":true}},{"type":"text","text":" .\nBut "},{"type":"text","text":"size(A) = (128,8,6)","style":{"code":true}},{"type":"text","text":" . Is there a better way than writing "},{"type":"text","text":"vcat(A[:,:,1],A[:,:,2],A[:,:,3],A[:,:,4],A[:,:,5],A[:,:,6])","style":{"code":true}},{"type":"text","text":" ? It's useful for me to know as I may end having a number >>> 6. Thanks!"}]}]}],"thread_ts":"1610425383.340700","reply_count":9,"reply_users_count":4,"latest_reply":"1610459681.366200","reply_users":["U011LUQ182G","UB197FRCL","UD0NS8PDF","U01HHACHU77"],"subscribed":false},{"client_msg_id":"d6b1abfd-8cc7-4372-993a-d6edd7f80cb7","type":"message","text":"you could use a comprehension `vcat((A[:,:,i] for i = 1:6)...)`, though there might be a more efficient way","user":"U011LUQ182G","ts":"1610425892.340900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c4XFM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you could use a comprehension "},{"type":"text","text":"vcat((A[:,:,i] for i = 1:6)...)","style":{"code":true}},{"type":"text","text":", though there might be a more efficient way"}]}]}],"thread_ts":"1610425383.340700","parent_user_id":"U01HHACHU77"},{"client_msg_id":"5414041a-6f0a-43d6-b4c6-de34eb0a6fcd","type":"message","text":"`reshape` may help?","user":"UB197FRCL","ts":"1610433169.341400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"25Oy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"reshape","style":{"code":true}},{"type":"text","text":" may help?"}]}]}],"thread_ts":"1610425383.340700","parent_user_id":"U01HHACHU77"},{"client_msg_id":"75a32ade-a77f-463f-b3f4-09c07d9b67a5","type":"message","text":"`reduce(vcat, view(A, :, :, i) for i in 1:6)`","user":"UB197FRCL","ts":"1610433196.341600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9WKN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"reduce(vcat, view(A, :, :, i) for i in 1:6)","style":{"code":true}}]}]}],"thread_ts":"1610425383.340700","parent_user_id":"U01HHACHU77"},{"client_msg_id":"d726b338-ab6c-40dd-a66c-f5f6bc08ecdc","type":"message","text":"`reshape(permutedims(A, (1,3,2)), (128*6,8))` works but it's hard to understand IMO","user":"UB197FRCL","ts":"1610433390.341800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pAb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"reshape(permutedims(A, (1,3,2)), (128*6,8))","style":{"code":true}},{"type":"text","text":" works but it's hard to understand IMO"}]}]}],"thread_ts":"1610425383.340700","parent_user_id":"U01HHACHU77","reactions":[{"name":"+1","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"c0153835-2b22-411c-a34e-c48ba35042e6","type":"message","text":"FWIW, I got:\n```julia&gt; @btime vcat(($A[:,:,i] for i = 1:6)...) ;\n  16.047 μs (18 allocations: 97.19 KiB)\n\njulia&gt; @btime reduce(vcat, view($A, :, :, i) for i in 1:6) ;\n  27.232 μs (22 allocations: 161.25 KiB)\n\njulia&gt; @btime reshape(permutedims($A, (2,3,1)), (128*6,8)) ;\n  4.533 μs (3 allocations: 48.14 KiB)```\nwhere I made `A` with\n```julia&gt; A = Array(reshape(1:128*8*6, 128,8,6))```","user":"UB197FRCL","ts":"1610433599.342000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Lahn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"FWIW, I got:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @btime vcat(($A[:,:,i] for i = 1:6)...) ;\n  16.047 μs (18 allocations: 97.19 KiB)\n\njulia> @btime reduce(vcat, view($A, :, :, i) for i in 1:6) ;\n  27.232 μs (22 allocations: 161.25 KiB)\n\njulia> @btime reshape(permutedims($A, (2,3,1)), (128*6,8)) ;\n  4.533 μs (3 allocations: 48.14 KiB)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"where I made "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" with\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> A = Array(reshape(1:128*8*6, 128,8,6))"}]}]}],"thread_ts":"1610425383.340700","parent_user_id":"U01HHACHU77","reactions":[{"name":"white_check_mark","users":["U01HHACHU77"],"count":1}]},{"client_msg_id":"b832bd0b-177f-4335-b9ac-689751577f17","type":"message","text":"And with a bigger `A` (with `size(A,3) == 100` instead of `6`):\n```julia&gt; @btime reduce(vcat, view($A, :, :, i) for i in 1:100) ;\n  5.325 ms (492 allocations: 39.47 MiB)\n\njulia&gt; @btime vcat(($A[:,:,i] for i = 1:100)...) ;\n  270.569 μs (210 allocations: 1.58 MiB)\n\njulia&gt; @btime reshape(permutedims($A, (2,3,1)), (128*100,8)) ;\n  174.613 μs (3 allocations: 800.14 KiB) ```","user":"UB197FRCL","ts":"1610433756.342200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"J=Py","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And with a bigger "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" (with "},{"type":"text","text":"size(A,3) == 100","style":{"code":true}},{"type":"text","text":" instead of "},{"type":"text","text":"6","style":{"code":true}},{"type":"text","text":"):\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @btime reduce(vcat, view($A, :, :, i) for i in 1:100) ;\n  5.325 ms (492 allocations: 39.47 MiB)\n\njulia> @btime vcat(($A[:,:,i] for i = 1:100)...) ;\n  270.569 μs (210 allocations: 1.58 MiB)\n\njulia> @btime reshape(permutedims($A, (2,3,1)), (128*100,8)) ;\n  174.613 μs (3 allocations: 800.14 KiB) "}]}]}],"thread_ts":"1610425383.340700","parent_user_id":"U01HHACHU77"},{"client_msg_id":"86d828ac-1250-4736-88c3-5e6c123a0d32","type":"message","text":"And with `vcat` and `views`:\n```julia&gt; @btime vcat((view($A,:,:,i) for i = 1:100)...) ;\n  191.150 μs (410 allocations: 836.97 KiB)```","user":"UB197FRCL","ts":"1610433995.342400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s8J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And with "},{"type":"text","text":"vcat","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"views","style":{"code":true}},{"type":"text","text":":\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @btime vcat((view($A,:,:,i) for i = 1:100)...) ;\n  191.150 μs (410 allocations: 836.97 KiB)"}]}]}],"thread_ts":"1610425383.340700","parent_user_id":"U01HHACHU77"},{"client_msg_id":"04f519f8-6e76-46a9-bbb8-a26f0316ed37","type":"message","text":"Two other ways not mentioned are to use `eachslice`, and to use my package (a lazy version of “works but it’s hard to understand” which is, I hope, easier to understand):\n```julia&gt; A = randn(128,8,6);\n\njulia&gt; B1 = vcat((A[:,:,i] for i = 1:6)...);\n\njulia&gt; B2 = reduce(vcat, eachslice(A, dims=3));\n\njulia&gt; using TensorCast\n\njulia&gt; @cast B3[(i,k),j] := A[i,j,k]; # lazy, reshape(PermutedDimsArray(...\n\njulia&gt; B1 == B2 == B3\ntrue```\nDoing `reduce(vcat, collect(eachslice(A, dims=3)))` is faster than without the collect, in fact, as the generator doesn’t hit the fast array-of-arrays method.","user":"UD0NS8PDF","ts":"1610445206.351100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7=x","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Two other ways not mentioned are to use "},{"type":"text","text":"eachslice","style":{"code":true}},{"type":"text","text":", and to use my package (a lazy version of “works but it’s hard to understand” which is, I hope, easier to understand):\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> A = randn(128,8,6);\n\njulia> B1 = vcat((A[:,:,i] for i = 1:6)...);\n\njulia> B2 = reduce(vcat, eachslice(A, dims=3));\n\njulia> using TensorCast\n\njulia> @cast B3[(i,k),j] := A[i,j,k]; # lazy, reshape(PermutedDimsArray(...\n\njulia> B1 == B2 == B3\ntrue"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Doing "},{"type":"text","text":"reduce(vcat, collect(eachslice(A, dims=3)))","style":{"code":true}},{"type":"text","text":" is faster than without the collect, in fact, as the generator doesn’t hit the fast array-of-arrays method."}]}]}],"thread_ts":"1610425383.340700","parent_user_id":"U01HHACHU77","reactions":[{"name":"+1","users":["UB197FRCL"],"count":1}]},{"client_msg_id":"dde2dd88-7ce7-4b01-b830-f74c7573a3d6","type":"message","text":"Thanks, <@UB197FRCL> <@U011LUQ182G> <@UD0NS8PDF> :+1::slightly_smiling_face:","user":"U01HHACHU77","ts":"1610459681.366200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"amoCf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks, "},{"type":"user","user_id":"UB197FRCL"},{"type":"text","text":" "},{"type":"user","user_id":"U011LUQ182G"},{"type":"text","text":" "},{"type":"user","user_id":"UD0NS8PDF"},{"type":"text","text":" "},{"type":"emoji","name":"+1"},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1610425383.340700","parent_user_id":"U01HHACHU77"}]