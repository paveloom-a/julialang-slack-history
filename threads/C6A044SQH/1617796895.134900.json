[{"client_msg_id":"580a039f-274a-4f4b-a42e-b6caca0998ae","type":"message","text":"Hi, a question on diagnosing memory issues... I have a code with some weird behavior. More precisely I have function `A`  which I execute on similar inputs of similiar size. The weird thing is that if I do this 4 times as much I would expect it to take 4 times as long but instead it takes 40 times longer. I know this thanks to `TimerOutputs.jl`  and I am not quite sure how to explain this behavior. I suspect memory and using Swap might be behind it. How could I test this hypothesis in Julia? My OS profiler doesn't reveal anything","user":"U01L0RJC6FM","ts":"1617796895.134900","team":"T68168MUP","edited":{"user":"U01L0RJC6FM","ts":"1617796941.000000"},"blocks":[{"type":"rich_text","block_id":"Ew+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi, a question on diagnosing memory issues... I have a code with some weird behavior. More precisely I have function "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":"  which I execute on similar inputs of similiar size. The weird thing is that if I do this 4 times as much I would expect it to take 4 times as long but instead it takes 40 times longer. I know this thanks to "},{"type":"text","text":"TimerOutputs.jl","style":{"code":true}},{"type":"text","text":"  and I am not quite sure how to explain this behavior. I suspect memory and using Swap might be behind it. How could I test this hypothesis in Julia? My OS profiler doesn't reveal anything"}]}]}],"thread_ts":"1617796895.134900","reply_count":62,"reply_users_count":3,"latest_reply":"1617821616.191400","reply_users":["U011LUQ182G","U01PLQWQXPV","U01L0RJC6FM"],"is_locked":false,"subscribed":false},{"client_msg_id":"4F9217D1-1D2C-49DC-824A-8AF0CC674201","type":"message","text":"Do the allocations scale as 40x too? And does @btime give similar results?","user":"U011LUQ182G","ts":"1617801064.138300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hrmu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Do the allocations scale as 40x too? And does @btime give similar results?"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"c4efee01-0087-48d5-96ff-292c1c003937","type":"message","text":"Given that it would be weird for the OS profiler not to notice memory swap usage, some questions first\n\n1. Is your function pure or does it produce side-effects?\n2. If you suspect it's a swap problem, did you try the same benchmark but with inputs that fit comfortably in your memory?","user":"U01PLQWQXPV","ts":"1617803541.144600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+Xbs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Given that it would be weird for the OS profiler not to notice memory swap usage, some questions first\n\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is your function pure or does it produce side-effects?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"If you suspect it's a swap problem, did you try the same benchmark but with inputs that fit comfortably in your memory?"}]}],"style":"ordered","indent":0}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"3d1e88b6-a69d-4564-b6f0-4ef3e33c2c0c","type":"message","text":"hmm not sure whether i understand 1.","user":"U01L0RJC6FM","ts":"1617806993.149900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hrR/5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmm not sure whether i understand 1."}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"f39b1ae0-0c51-48ba-a35d-0af876775a4b","type":"message","text":"if you mean whether it affects other tasks it should be pure","user":"U01L0RJC6FM","ts":"1617807009.150100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rkk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you mean whether it affects other tasks it should be pure"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM","reactions":[{"name":"thumbsup_all","users":["U01PLQWQXPV"],"count":1}]},{"client_msg_id":"66eb6153-b835-44d8-b284-f5a1da30816b","type":"message","text":"reg. 2 - yes the moment I wrote this I realized that and I think I can exclude the swap problem","user":"U01L0RJC6FM","ts":"1617807045.150300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1wBD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"reg. 2 - yes the moment I wrote this I realized that and I think I can exclude the swap problem"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"fefbaa77-7d4f-4a0c-b146-fba070d65e81","type":"message","text":"however I suspect that it is the problem of matrix access  `A[i,j]`  scaling with the matrix itself","user":"U01L0RJC6FM","ts":"1617807079.150500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HAze5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"however I suspect that it is the problem of matrix access  "},{"type":"text","text":"A[i,j]","style":{"code":true}},{"type":"text","text":"  scaling with the matrix itself"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"846589a9-5193-4df9-acac-01abe79d9454","type":"message","text":"while the subproblems don't really scale it seems that the access scales","user":"U01L0RJC6FM","ts":"1617807340.150800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Eanu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"while the subproblems don't really scale it seems that the access scales"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"71dd4913-07ec-495c-8c33-032580026d11","type":"message","text":"Have you tried `@profile` ing and seeing where your program is stalling? Array lookup should be O(1) (for standard dense arrays, naturally)","user":"U01PLQWQXPV","ts":"1617807383.151000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x3Bw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Have you tried "},{"type":"text","text":"@profile","style":{"code":true}},{"type":"text","text":" ing and seeing where your program is stalling? Array lookup should be O(1) (for standard dense arrays, naturally)"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"5adfcead-faf7-46ec-8933-d8dfff508b0d","type":"message","text":"<https://docs.julialang.org/en/v1/manual/profile/>","user":"U01PLQWQXPV","ts":"1617807414.151200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zWiic","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://docs.julialang.org/en/v1/manual/profile/"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"fe457548-e8c9-4436-a537-7ee67430b0af","type":"message","text":"If it ends up being on the lookup it may be due to smaller matrices fitting in the cache and lookups of larger matrices causing loads of cache misses","user":"U01PLQWQXPV","ts":"1617807571.151400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rLGG7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If it ends up being on the lookup it may be due to smaller matrices fitting in the cache and lookups of larger matrices causing loads of cache misses"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"86906cb5-cd76-4fab-9548-6466f9d51617","type":"message","text":"oh right, I am talking about the access into a large sparse matrix `A`","user":"U01L0RJC6FM","ts":"1617807746.151600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"a=t","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh right, I am talking about the access into a large sparse matrix "},{"type":"text","text":"A","style":{"code":true}}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"980610cd-048d-4e33-b046-85400bfdba6a","type":"message","text":"I haven't tried @profile as I have to say the output is highly unreadable and I have lost quite some time not seeing the bigger picture","user":"U01L0RJC6FM","ts":"1617807829.151800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3jWz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I haven't tried @profile as I have to say the output is highly unreadable and I have lost quite some time not seeing the bigger picture"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"48e9866d-0fff-4216-b968-20078e235a3a","type":"message","text":"TimerOutputs is clearly pointing the finger at matrix access though","user":"U01L0RJC6FM","ts":"1617808170.152100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"q/C3C","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"TimerOutputs is clearly pointing the finger at matrix access though"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"2b07fbf5-4a2f-4e08-9409-9fe3f5c72030","type":"message","text":"<@U011LUQ182G> yeah i tried BenchmarkTools.. same results","user":"U01L0RJC6FM","ts":"1617811384.156300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VtJIz","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U011LUQ182G"},{"type":"text","text":" yeah i tried BenchmarkTools.. same results"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"86e6e388-343a-44a9-9a2d-9a2d7b5dae0c","type":"message","text":"I am getting the impression that there is quite the non-linearity in `A[i,j]` as A gets bigger but looking at the code I don't see it","user":"U01L0RJC6FM","ts":"1617811424.157400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4SO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am getting the impression that there is quite the non-linearity in "},{"type":"text","text":"A[i,j]","style":{"code":true}},{"type":"text","text":" as A gets bigger but looking at the code I don't see it"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"35301491-d93f-4dff-8ddd-748cd08dc021","type":"message","text":"i am even converting I to a `UnitRange{Int}`  to get the most efficient access into `A`","user":"U01L0RJC6FM","ts":"1617811465.158900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0Cfe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i am even converting I to a "},{"type":"text","text":"UnitRange{Int}","style":{"code":true}},{"type":"text","text":"  to get the most efficient access into "},{"type":"text","text":"A","style":{"code":true}}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"A49945A2-422E-4F2F-9BB0-FF9F2C89B8E1","type":"message","text":"How are you traversing the matrix entries? Colptr and rowvals?","user":"U011LUQ182G","ts":"1617811530.161100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UClFr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How are you traversing the matrix entries? Colptr and rowvals?"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"c05cb56e-5ac0-4420-a8fa-0ea20e8b6e93","type":"message","text":"I pre-sort the arrays to make sure it's fast.. in the algorithm itself i don't have much control","user":"U01L0RJC6FM","ts":"1617818869.179200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=8/=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I pre-sort the arrays to make sure it's fast.. in the algorithm itself i don't have much control"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM","reactions":[{"name":"+1","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"659e820a-d7c2-4462-8fad-d8e6a563fb58","type":"message","text":"it's a multifrontal elimination with nested dissection","user":"U01L0RJC6FM","ts":"1617818880.179500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6El","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's a multifrontal elimination with nested dissection"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"type":"message","text":"","files":[{"id":"F01T4UU8PFH","created":1617818922,"timestamp":1617818922,"name":"Screenshot 2021-04-07 at 20.08.32.png","title":"Screenshot 2021-04-07 at 20.08.32.png","mimetype":"image/png","filetype":"png","pretty_type":"PNG","user":"U01L0RJC6FM","editable":false,"size":240201,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01T4UU8PFH/screenshot_2021-04-07_at_20.08.32.png","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01T4UU8PFH/download/screenshot_2021-04-07_at_20.08.32.png","thumb_64":"https://files.slack.com/files-tmb/T68168MUP-F01T4UU8PFH-ce5371b8e6/screenshot_2021-04-07_at_20.08.32_64.png","thumb_80":"https://files.slack.com/files-tmb/T68168MUP-F01T4UU8PFH-ce5371b8e6/screenshot_2021-04-07_at_20.08.32_80.png","thumb_360":"https://files.slack.com/files-tmb/T68168MUP-F01T4UU8PFH-ce5371b8e6/screenshot_2021-04-07_at_20.08.32_360.png","thumb_360_w":360,"thumb_360_h":239,"thumb_480":"https://files.slack.com/files-tmb/T68168MUP-F01T4UU8PFH-ce5371b8e6/screenshot_2021-04-07_at_20.08.32_480.png","thumb_480_w":480,"thumb_480_h":318,"thumb_160":"https://files.slack.com/files-tmb/T68168MUP-F01T4UU8PFH-ce5371b8e6/screenshot_2021-04-07_at_20.08.32_160.png","thumb_720":"https://files.slack.com/files-tmb/T68168MUP-F01T4UU8PFH-ce5371b8e6/screenshot_2021-04-07_at_20.08.32_720.png","thumb_720_w":720,"thumb_720_h":477,"thumb_800":"https://files.slack.com/files-tmb/T68168MUP-F01T4UU8PFH-ce5371b8e6/screenshot_2021-04-07_at_20.08.32_800.png","thumb_800_w":800,"thumb_800_h":530,"thumb_960":"https://files.slack.com/files-tmb/T68168MUP-F01T4UU8PFH-ce5371b8e6/screenshot_2021-04-07_at_20.08.32_960.png","thumb_960_w":960,"thumb_960_h":636,"thumb_1024":"https://files.slack.com/files-tmb/T68168MUP-F01T4UU8PFH-ce5371b8e6/screenshot_2021-04-07_at_20.08.32_1024.png","thumb_1024_w":1024,"thumb_1024_h":678,"original_w":1624,"original_h":1076,"thumb_tiny":"AwAfADDQ3UA59qTBzTgT3zQAmeKM8GkwcDijacGgBc89O9Opu05/GnUAJgDtRgelAINLQAYFGBRRQAUUUUAf/9k=","permalink":"https://julialang.slack.com/files/U01L0RJC6FM/F01T4UU8PFH/screenshot_2021-04-07_at_20.08.32.png","permalink_public":"https://slack-files.com/T68168MUP-F01T4UU8PFH-e42a1c37a6","is_starred":false,"has_rich_preview":false}],"upload":false,"user":"U01L0RJC6FM","display_as_bot":false,"ts":"1617818926.179700","thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"75589bff-5623-45bf-93ae-55f0a00b572a","type":"message","text":"this is how the matrix looks like.. so basically I operate on blocks of the matrix that are interior DOFs and corresponding neighborhoods.. i.e. computing Schur complements","user":"U01L0RJC6FM","ts":"1617818971.179900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vIr4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this is how the matrix looks like.. so basically I operate on blocks of the matrix that are interior DOFs and corresponding neighborhoods.. i.e. computing Schur complements"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"64b8cbc1-4838-4274-a939-9db8e0a3286a","type":"message","text":"you can see the timings as well.. basically assemble blocks is the bad one which kills my linear complexity atm.. everything else is behaved","user":"U01L0RJC6FM","ts":"1617819012.180200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8UM53","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can see the timings as well.. basically assemble blocks is the bad one which kills my linear complexity atm.. everything else is behaved"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"7fa1beb9-893f-4325-a9ce-3f8ce1e9ebc0","type":"message","text":"yeah, I see the usual arrowhead structure…\n\ndoes everything scale 40x with a 4x larger problem size, or just Gauss transforms?","user":"U011LUQ182G","ts":"1617819056.180400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aCN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, I see the usual arrowhead structure…\n\ndoes everything scale 40x with a 4x larger problem size, or just Gauss transforms?"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"c1969d5c-68e9-4ab0-b29d-3a23b78723a1","type":"message","text":"no Gauss transforms are linear so 4x","user":"U01L0RJC6FM","ts":"1617819072.180600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TIW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no Gauss transforms are linear so 4x"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"4d5453c6-263c-4738-8369-b109d3fba447","type":"message","text":"so which part scales 40x?","user":"U011LUQ182G","ts":"1617819087.180800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"msq0O","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so which part scales 40x?"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"9be8a505-8c43-4dcf-8f44-40a619f10c03","type":"message","text":"assemble blocks which basically extracts A[i,b]","user":"U01L0RJC6FM","ts":"1617819102.181000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C32","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"assemble blocks which basically extracts A[i,b]"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"deb2bf8b-5bbe-4dcb-b214-957f2b2eac31","type":"message","text":"weird. can you extract just that subroutine to more closely profile it?","user":"U011LUQ182G","ts":"1617819155.181200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aDaPT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"weird. can you extract just that subroutine to more closely profile it?"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"0202088a-22ba-4c74-94d1-d1d39769f18a","type":"message","text":"hmm maybe getting timings on each line would be better... but it is basically the type-unstable routine in my code... but it might be ok as I believe the problem is the access","user":"U01L0RJC6FM","ts":"1617819216.181400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gqLD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmm maybe getting timings on each line would be better... but it is basically the type-unstable routine in my code... but it might be ok as I believe the problem is the access"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"bca2d4c3-4e97-4c56-b930-f5aefbdbbde5","type":"message","text":"if it’s type unstable, doesn’t that explain the poor scaling?","user":"U011LUQ182G","ts":"1617819246.181600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mII4K","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if it’s type unstable, doesn’t that explain the poor scaling?"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"2401ef6b-8b51-46a7-8dbc-2b0bcae75bc0","type":"message","text":"hmm I don't see how that would affect scaling or would it?","user":"U01L0RJC6FM","ts":"1617819282.181800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fF/9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmm I don't see how that would affect scaling or would it?"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"type":"message","text":"just for reference.. this is the same problem 4x times smaller","files":[{"id":"F01TGLQTN6R","created":1617819325,"timestamp":1617819325,"name":"Screenshot 2021-04-07 at 20.15.15.png","title":"Screenshot 2021-04-07 at 20.15.15.png","mimetype":"image/png","filetype":"png","pretty_type":"PNG","user":"U01L0RJC6FM","editable":false,"size":220870,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01TGLQTN6R/screenshot_2021-04-07_at_20.15.15.png","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01TGLQTN6R/download/screenshot_2021-04-07_at_20.15.15.png","thumb_64":"https://files.slack.com/files-tmb/T68168MUP-F01TGLQTN6R-e9bc226b5f/screenshot_2021-04-07_at_20.15.15_64.png","thumb_80":"https://files.slack.com/files-tmb/T68168MUP-F01TGLQTN6R-e9bc226b5f/screenshot_2021-04-07_at_20.15.15_80.png","thumb_360":"https://files.slack.com/files-tmb/T68168MUP-F01TGLQTN6R-e9bc226b5f/screenshot_2021-04-07_at_20.15.15_360.png","thumb_360_w":360,"thumb_360_h":188,"thumb_480":"https://files.slack.com/files-tmb/T68168MUP-F01TGLQTN6R-e9bc226b5f/screenshot_2021-04-07_at_20.15.15_480.png","thumb_480_w":480,"thumb_480_h":251,"thumb_160":"https://files.slack.com/files-tmb/T68168MUP-F01TGLQTN6R-e9bc226b5f/screenshot_2021-04-07_at_20.15.15_160.png","thumb_720":"https://files.slack.com/files-tmb/T68168MUP-F01TGLQTN6R-e9bc226b5f/screenshot_2021-04-07_at_20.15.15_720.png","thumb_720_w":720,"thumb_720_h":376,"thumb_800":"https://files.slack.com/files-tmb/T68168MUP-F01TGLQTN6R-e9bc226b5f/screenshot_2021-04-07_at_20.15.15_800.png","thumb_800_w":800,"thumb_800_h":418,"thumb_960":"https://files.slack.com/files-tmb/T68168MUP-F01TGLQTN6R-e9bc226b5f/screenshot_2021-04-07_at_20.15.15_960.png","thumb_960_w":960,"thumb_960_h":502,"thumb_1024":"https://files.slack.com/files-tmb/T68168MUP-F01TGLQTN6R-e9bc226b5f/screenshot_2021-04-07_at_20.15.15_1024.png","thumb_1024_w":1024,"thumb_1024_h":535,"original_w":1492,"original_h":780,"thumb_tiny":"AwAZADDQ+X2o49qbTgB1GaAF4FID70HvSd/xoAXv1pw6VGP605Pu0AAHtRj2/Wl7mloATFGPalooATA9KXpRRQB//9k=","permalink":"https://julialang.slack.com/files/U01L0RJC6FM/F01TGLQTN6R/screenshot_2021-04-07_at_20.15.15.png","permalink_public":"https://slack-files.com/T68168MUP-F01TGLQTN6R-c6e0a9db1f","is_starred":false,"has_rich_preview":false}],"upload":false,"blocks":[{"type":"rich_text","block_id":"Srp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"just for reference.. this is the same problem 4x times smaller"}]}]}],"user":"U01L0RJC6FM","display_as_bot":false,"ts":"1617819338.182000","thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"11862f95-1bea-433d-94c9-3cbcd1ff7592","type":"message","text":"Depending on how it’s type unstable, it could? I dunno, I find it hard to conclude anything about type unstable code.\n\nI always fix the type instability first then try to profile","user":"U011LUQ182G","ts":"1617819346.182200","team":"T68168MUP","edited":{"user":"U011LUQ182G","ts":"1617819359.000000"},"blocks":[{"type":"rich_text","block_id":"RlH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Depending on how it’s type unstable, it could? I dunno, I find it hard to conclude anything about type unstable code.\n\nI always fix the type instability first then try to profile"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"e24a91a1-ab7b-4053-a161-86a16be9f9d6","type":"message","text":"you can see that assemble blocks had a 10x increase","user":"U01L0RJC6FM","ts":"1617819362.182900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mkT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can see that assemble blocks had a 10x increase"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"bfa7f708-7afb-40f1-9c6a-0ae1b34144fd","type":"message","text":"hmm the problem with the type instability comes from the issue of how I defined my custom type here","user":"U01L0RJC6FM","ts":"1617819400.183700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jDg3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmm the problem with the type instability comes from the issue of how I defined my custom type here"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"d113c8cc-f600-4e70-ac59-762f739cfebc","type":"message","text":"yeah, but if the code is type unstable you’re basically just guessing as to why the cost is larger since there’s a bunch of JIT interpreter and run-time compile crap slowing it down","user":"U011LUQ182G","ts":"1617819405.184000","team":"T68168MUP","edited":{"user":"U011LUQ182G","ts":"1617819414.000000"},"blocks":[{"type":"rich_text","block_id":"c8Gi1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, but if the code is type unstable you’re basically just guessing as to why the cost is larger since there’s a bunch of JIT interpreter and run-time compile crap slowing it down"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"61b68b22-5d7b-4da7-af30-d229e65cb357","type":"message","text":"I see...","user":"U01L0RJC6FM","ts":"1617819416.184400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HuXz4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see..."}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"350501f8-fe22-4b90-ac3e-b5491c26d8a0","type":"message","text":"Ah, gotcha. We should probably revisit that then","user":"U011LUQ182G","ts":"1617819426.184700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BSNK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, gotcha. We should probably revisit that then"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"95ed6ce3-706d-439e-b4b8-9579836ecf58","type":"message","text":"I think it’s hard to tell why your custom object is type unstable without a MWE","user":"U011LUQ182G","ts":"1617819444.184900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RmkK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think it’s hard to tell why your custom object is type unstable without a MWE"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"08439889-12bf-4648-be85-50a179ced03d","type":"message","text":"well that is sort of a dead end","user":"U01L0RJC6FM","ts":"1617819446.185100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FJ+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well that is sort of a dead end"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"1e7ce271-4125-4e3e-ad89-374178c7e70e","type":"message","text":"?","user":"U011LUQ182G","ts":"1617819449.185300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8K5ke","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"?"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"3d65b2fe-9094-4dde-bc68-483418e45e56","type":"message","text":"I posted about it a few days ago and we came to the conclusion that this is the way to do it","user":"U01L0RJC6FM","ts":"1617819468.185600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+0=3/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I posted about it a few days ago and we came to the conclusion that this is the way to do it"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"ead88f67-eecc-4351-982d-731dc16efaed","type":"message","text":"lemme see whether I can find the thread for reference","user":"U01L0RJC6FM","ts":"1617819478.185800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AB9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"lemme see whether I can find the thread for reference"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM","reactions":[{"name":"+1","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"d81eb9cc-bcc6-425e-a92f-6e5114e7f0b5","type":"message","text":"<https://julialang.slack.com/archives/C6A044SQH/p1617467872366200>","user":"U01L0RJC6FM","ts":"1617819558.186100","team":"T68168MUP","attachments":[{"from_url":"https://julialang.slack.com/archives/C6A044SQH/p1617467872366200","fallback":"[April 3rd, 2021 9:37 AM] bonevbs: hi, a question on type-inference. I have a recusive type that distinguishes between leave-nodes and branch nodes of a tree-structure.\n```struct LeafNode{T}\n  data{T} # this holds something\nend\n\nstruct BranchNode{T} where T\n  left::Union{TreeNode{T}, BranchNode{T}}\n  right::Union{TreeNode{T}, BranchNode{T}}\nend\n\nconst TreeNode{T} = Union{TreeNode{T}, BranchNode{T}}```\nas my Julia-skills progressed with the package while writing it, I might not have realized that this might have been a mistake. In particular, I thought that this is nice as most algorithms should behave differently if they encounter a leaf node.\n\nOne of the things that I noticed is that this definition seems to be problematic for type-inference as `getproperty`  does not always give you the same return type on the treenode. Are there easy ways to redeem this apart from a complete rewrite?","ts":"1617467872.366200","author_id":"U01L0RJC6FM","author_subname":"Boris Bonev","channel_id":"C6A044SQH","channel_name":"helpdesk","is_msg_unfurl":true,"is_thread_root_unfurl":true,"text":"hi, a question on type-inference. I have a recusive type that distinguishes between leave-nodes and branch nodes of a tree-structure.\n```struct LeafNode{T}\n  data{T} # this holds something\nend\n\nstruct BranchNode{T} where T\n  left::Union{TreeNode{T}, BranchNode{T}}\n  right::Union{TreeNode{T}, BranchNode{T}}\nend\n\nconst TreeNode{T} = Union{TreeNode{T}, BranchNode{T}}```\nas my Julia-skills progressed with the package while writing it, I might not have realized that this might have been a mistake. In particular, I thought that this is nice as most algorithms should behave differently if they encounter a leaf node.\n\nOne of the things that I noticed is that this definition seems to be problematic for type-inference as `getproperty`  does not always give you the same return type on the treenode. Are there easy ways to redeem this apart from a complete rewrite?","author_name":"Boris Bonev","author_link":"https://julialang.slack.com/team/U01L0RJC6FM","author_icon":"https://secure.gravatar.com/avatar/53605d00fe178b7a09a5b0fa81c4cefc.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0000-48.png","mrkdwn_in":["text"],"id":1,"original_url":"https://julialang.slack.com/archives/C6A044SQH/p1617467872366200","footer":"Thread in #helpdesk"}],"blocks":[{"type":"rich_text","block_id":"a0E","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://julialang.slack.com/archives/C6A044SQH/p1617467872366200"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"00173812-7a72-49bf-9228-76d1c911e775","type":"message","text":"so the gist is it's a hierarchical matrix type with a binary-tree structure. And the data the leaves hold are completely different from what the branches hold","user":"U01L0RJC6FM","ts":"1617819664.186400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kdo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so the gist is it's a hierarchical matrix type with a binary-tree structure. And the data the leaves hold are completely different from what the branches hold"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"52799a60-c5f4-47b1-9fe0-8850b160873d","type":"message","text":"in fact the package is openly accessible, you can see the datastructure here: <https://github.com/bonevbs/HssMatrices.jl/blob/main/src/hssmatrix.jl>","user":"U01L0RJC6FM","ts":"1617819720.186600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4wPTP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in fact the package is openly accessible, you can see the datastructure here: "},{"type":"link","url":"https://github.com/bonevbs/HssMatrices.jl/blob/main/src/hssmatrix.jl"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM","reactions":[{"name":"+1","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"eaddfe08-dc89-4307-be7e-fdbc49de0074","type":"message","text":"I am actually not sure whether the abstract field type is preferred over the `A11::Union{HssNode, HssLeaf}`  field type","user":"U01L0RJC6FM","ts":"1617819826.186900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/22dS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am actually not sure whether the abstract field type is preferred over the "},{"type":"text","text":"A11::Union{HssNode, HssLeaf}","style":{"code":true}},{"type":"text","text":"  field type"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"2dcd6f93-f2e6-42e2-b029-023bbf464c60","type":"message","text":"~I see `getproperty` had type instability. I ran into that too - does it help if you use `getfield` instead?~","user":"U011LUQ182G","ts":"1617819829.187100","team":"T68168MUP","edited":{"user":"U011LUQ182G","ts":"1617820044.000000"},"blocks":[{"type":"rich_text","block_id":"WRG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see ","style":{"strike":true}},{"type":"text","text":"getproperty","style":{"strike":true,"code":true}},{"type":"text","text":" had type instability. I ran into that too - does it help if you use ","style":{"strike":true}},{"type":"text","text":"getfield","style":{"strike":true,"code":true}},{"type":"text","text":" instead?","style":{"strike":true}}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"c71b2018-3ba8-45b6-bf8b-0e430f6b7564","type":"message","text":"I have no clue, but that gigantic nested hierarchical type you showed in that thread makes sense that it’d slow things down…","user":"U011LUQ182G","ts":"1617819853.187300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JBiH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have no clue, but that gigantic nested hierarchical type you showed in that thread makes sense that it’d slow things down…"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"c28a4920-d467-4e6b-aa22-a2aff6187dac","type":"message","text":"yeah exactly you don't wanna specialize on the tree structure","user":"U01L0RJC6FM","ts":"1617819881.187600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"URUP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah exactly you don't wanna specialize on the tree structure"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"43792b73-6f0d-4a49-8695-b8480f7e662b","type":"message","text":"so basically you either bite the bullet and you unify everything into a single type with many `Union{Nothing, Something}` fields or you accept the type-stability and have clean code..","user":"U01L0RJC6FM","ts":"1617819932.187800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rcmR+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so basically you either bite the bullet and you unify everything into a single type with many "},{"type":"text","text":"Union{Nothing, Something}","style":{"code":true}},{"type":"text","text":" fields or you accept the type-stability and have clean code.."}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"3fdd296b-8607-4acb-b7c4-530caed999ff","type":"message","text":"on your proposal.. I am not sure how that would change things? I hadn't considered it","user":"U01L0RJC6FM","ts":"1617819949.188400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=Ha","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"on your proposal.. I am not sure how that would change things? I hadn't considered it"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"b4370a00-04a6-4994-8541-af4c9e813489","type":"message","text":"wait, nvm, that was me forgetting some details","user":"U011LUQ182G","ts":"1617820052.188700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PMdS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"wait, nvm, that was me forgetting some details"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"27f7415a-fc33-4e9d-96e7-18c7be5ffd13","type":"message","text":"Yeah…it sounds to me like storing the hierarchy in the type system is inherently tricky","user":"U011LUQ182G","ts":"1617820160.188900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XR8un","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah…it sounds to me like storing the hierarchy in the type system is inherently tricky"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"cdf74d8b-d927-4fcc-b54e-a9baa97ab1b2","type":"message","text":"well worst-case I can go for the massive rewrite of the library.. but that's really my last option","user":"U01L0RJC6FM","ts":"1617820206.189100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rpNEZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well worst-case I can go for the massive rewrite of the library.. but that's really my last option"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM","reactions":[{"name":"ahhhhhhh","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"30bfc113-5536-4a10-bdd1-b0f48406a43c","type":"message","text":"considering that noone wants to make their own code more ugly :sweat_smile:","user":"U01L0RJC6FM","ts":"1617820241.189400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"afa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"considering that noone wants to make their own code more ugly "},{"type":"emoji","name":"sweat_smile"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM","reactions":[{"name":"heavy_check_mark","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"7fd6dff9-ed44-49be-bfb3-d37965fc5d97","type":"message","text":"Hmm I wonder whether there is a way to tell Julia what type getproperty will return... I do know it will be a branch node","user":"U01L0RJC6FM","ts":"1617820381.189700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZMN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmm I wonder whether there is a way to tell Julia what type getproperty will return... I do know it will be a branch node"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"3d22ed35-c564-43c6-bafd-d319aa0343ef","type":"message","text":"you can annotate the return type <https://discourse.julialang.org/t/do-you-put-return-type-in-function-definitions/32120/3>\n\nNot sure if it will fix things though (inference based on return type seems trickier)","user":"U011LUQ182G","ts":"1617820431.189900","team":"T68168MUP","edited":{"user":"U011LUQ182G","ts":"1617820449.000000"},"blocks":[{"type":"rich_text","block_id":"+hhDu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can annotate the return type "},{"type":"link","url":"https://discourse.julialang.org/t/do-you-put-return-type-in-function-definitions/32120/3"},{"type":"text","text":"\n\nNot sure if it will fix things though (inference based on return type seems trickier)"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"07b020fd-a36b-46af-bc91-183f541d57f6","type":"message","text":"yeah I thought about that... but setting the return type for getproperty is not an option.. I guess I can try to separate the matrix access A[i,j] from any type-instabilities due to the HssMatrix and see which one is causing the slow-down","user":"U01L0RJC6FM","ts":"1617820607.190400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GjGr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah I thought about that... but setting the return type for getproperty is not an option.. I guess I can try to separate the matrix access A[i,j] from any type-instabilities due to the HssMatrix and see which one is causing the slow-down"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"957e0813-3c2e-4cc6-9dc5-71330e4b303d","type":"message","text":"<@U01L0RJC6FM>, can you give us you current assemble_blocks MWE? I would like to have a crack at it, just to rule out there's nothing else I would do (given my limited knowledge)","user":"U01PLQWQXPV","ts":"1617821103.190600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"K7E+","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01L0RJC6FM"},{"type":"text","text":", can you give us you current assemble_blocks MWE? I would like to have a crack at it, just to rule out there's nothing else I would do (given my limited knowledge)"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM","reactions":[{"name":"+1","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"6e3301c4-5b60-4460-b441-68e31f57cd50","type":"message","text":"cool, with pleasure.. I can't stress how thankful I am for all your help :slightly_smiling_face:","user":"U01L0RJC6FM","ts":"1617821137.190900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2G1PY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"cool, with pleasure.. I can't stress how thankful I am for all your help "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"630afc40-5c20-4212-86b0-f5b9172b3537","type":"message","text":"here we go... not very minimal but that's what I still had from the weekend.. So this is about type instability right? If you would like one regarding the timings I can come up with one that will probably be a bit more involved","user":"U01L0RJC6FM","ts":"1617821586.191200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yoY+G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"here we go... not very minimal but that's what I still had from the weekend.. So this is about type instability right? If you would like one regarding the timings I can come up with one that will probably be a bit more involved"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"265c0024-81eb-434e-8676-1909f9da0889","type":"message","text":"```using SparseArrays, HssMatrices, LowRankApprox, Random\n\n# 2x2 block matrix that can hold any type of \nstruct BlockMatrix{T, T11 &lt;: AbstractMatrix{T}, T12 &lt;: AbstractMatrix{T}, T21 &lt;: AbstractMatrix{T}, T22 &lt;: AbstractMatrix{T}} &lt;: AbstractMatrix{T}\n  A11::T11\n  A12::T12\n  A21::T21\n  A22::T22\n\n  # inner constructor checks for consistency among dimensions\n  function BlockMatrix(A11, A12, A21, A22)\n    size(A11, 1) == size(A12, 1) || throw(DimensionMismatch(\"first dimension of A11 and A12 do not match. Expected $(size(A11, 1)), got $(size(A12, 1))\"))\n    size(A11, 2) == size(A21, 2) || throw(DimensionMismatch(\"second dimension of A11 and A12 do not match. Expected $(size(A11, 2)), got $(size(A21, 2))\"))\n    size(A22, 1) == size(A21, 1) || throw(DimensionMismatch(\"first dimension of A22 and A21 do not match. Expected $(size(A22, 1)), got $(size(A21, 1))\"))\n    size(A22, 2) == size(A12, 2) || throw(DimensionMismatch(\"second dimension of A22 and A12 do not match. Expected $(size(A22, 2)), got $(size(A12, 2))\"))\n    new{eltype(A11), typeof(A11), typeof(A12), typeof(A21), typeof(A22)}(A11, A12, A21, A22)\n  end\nend\n\n#@inline contigious(idx::Vector{Int}) = idx[1]:idx[end] == idx ? (idx[1]:idx[end]) : idx\n\nfunction _assemble_blocks(A::AbstractMatrix{T}, S1::AbstractMatrix{T}, S2::AbstractMatrix{T}, int1::AbstractVector{Int}, int2::AbstractVector{Int}, bnd1::AbstractVector{Int}, bnd2::AbstractVector{Int}; args...) where T\n  ni1 = length(int1); nb1 = length(bnd1)\n  ni2 = length(int2); nb2 = length(bnd2)\n  Aii = BlockMatrix(S1[1:ni1, 1:ni1], Matrix(view(A, int1, int2)), Matrix(view(A, int2, int1)), S2[1:ni2, 1:ni2])\n  Aib = BlockMatrix(S1[1:ni1, ni1+1:ni1+nb1], Matrix(view(A, int1, bnd2)), Matrix(view(A, int2, bnd1)), S2[1:ni2, ni2+1:ni2+nb2])\n  Abi = BlockMatrix(S1[ni1+1:ni1+nb1, 1:ni1], Matrix(view(A, bnd1, int2)), Matrix(view(A, bnd2, int1)), S2[ni2+1:ni2+nb2, 1:ni2])\n  Abb = BlockMatrix(S1[ni1+1:ni1+nb1, ni1+1:ni1+nb1], Matrix(view(A, bnd1, bnd2)), Matrix(view(A, bnd2, bnd1)), S2[ni2+1:ni2+nb2, ni2+1:ni2+nb2])\n  return Aii, Aib, Abi, Abb\nend\n\n# For HSS matrices we want to specialize the routine in order to exploit the pre-determined blocking which exposes interior DOFs\nfunction _assemble_blocks(A::AbstractMatrix{T}, S1::HssMatrix{T}, S2::HssMatrix{T}, int1::AbstractVector{Int}, int2::AbstractVector{Int}, bnd1::AbstractVector{Int}, bnd2::AbstractVector{Int}; atol::Float64, rtol::Float64, verbose=false) where T\n  rcl1, ccl1 = cluster(S1.A11); rcl2, ccl2 = cluster(S2.A11)\n  # extract generators of children Schur complements\n  Uint1, Vint1 = generators(S1.A11); Uint1 = Uint1*S1.B12\n  Uint2, Vint2 = generators(S2.A11); Uint2 = Uint2*S2.B12\n  Ubnd1, Vbnd1 = generators(S1.A22); Ubnd1 = Ubnd1*S1.B21\n  Ubnd2, Vbnd2 = generators(S2.A22); Ubnd2 = Ubnd2*S2.B21\n\n  # form the blocks\n  Aii = BlockMatrix(S1.A11, hss(A[int1, int2], rcl1, ccl2; atol=atol, rtol=rtol), hss(A[int2, int1], rcl2, ccl1; atol=atol, rtol=rtol), S2.A11) # check hssranks of the offdiagonal guys\n  Aib = BlockMatrix(LowRankMatrix(Uint1, Vbnd1), A[int1, bnd2], A[int2, bnd1], LowRankMatrix(Uint2, Vbnd2))\n  Abi = BlockMatrix(LowRankMatrix(Ubnd1, Vint1), A[bnd1, int2], A[bnd2, int1], LowRankMatrix(Ubnd2, Vint2))\n  Abb = BlockMatrix(S1.A22, A[bnd1, bnd2], A[bnd2, bnd1], S2.A22)\n  return Aii, Aib, Abi, Abb\nend\n\n\nA = sprandn(10000,10000,0.1);\nint1 = randperm(10000)[1:100]; int2 = randperm(10000)[1:100]\nbnd1 = randperm(10000)[1:100]; bnd2 = randperm(10000)[1:100]\ncl = bisection_cluster((length(int1), 1000))\nS1 = hss(randn(1000,1000), cl, cl); S2 = hss(randn(1000,1000), cl, cl)\n\n@code_warntype _assemble_blocks(A, S1, S2, int1, int2, bnd1, bnd2)```","user":"U01L0RJC6FM","ts":"1617821616.191400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0ydt","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using SparseArrays, HssMatrices, LowRankApprox, Random\n\n# 2x2 block matrix that can hold any type of \nstruct BlockMatrix{T, T11 <: AbstractMatrix{T}, T12 <: AbstractMatrix{T}, T21 <: AbstractMatrix{T}, T22 <: AbstractMatrix{T}} <: AbstractMatrix{T}\n  A11::T11\n  A12::T12\n  A21::T21\n  A22::T22\n\n  # inner constructor checks for consistency among dimensions\n  function BlockMatrix(A11, A12, A21, A22)\n    size(A11, 1) == size(A12, 1) || throw(DimensionMismatch(\"first dimension of A11 and A12 do not match. Expected $(size(A11, 1)), got $(size(A12, 1))\"))\n    size(A11, 2) == size(A21, 2) || throw(DimensionMismatch(\"second dimension of A11 and A12 do not match. Expected $(size(A11, 2)), got $(size(A21, 2))\"))\n    size(A22, 1) == size(A21, 1) || throw(DimensionMismatch(\"first dimension of A22 and A21 do not match. Expected $(size(A22, 1)), got $(size(A21, 1))\"))\n    size(A22, 2) == size(A12, 2) || throw(DimensionMismatch(\"second dimension of A22 and A12 do not match. Expected $(size(A22, 2)), got $(size(A12, 2))\"))\n    new{eltype(A11), typeof(A11), typeof(A12), typeof(A21), typeof(A22)}(A11, A12, A21, A22)\n  end\nend\n\n#@inline contigious(idx::Vector{Int}) = idx[1]:idx[end] == idx ? (idx[1]:idx[end]) : idx\n\nfunction _assemble_blocks(A::AbstractMatrix{T}, S1::AbstractMatrix{T}, S2::AbstractMatrix{T}, int1::AbstractVector{Int}, int2::AbstractVector{Int}, bnd1::AbstractVector{Int}, bnd2::AbstractVector{Int}; args...) where T\n  ni1 = length(int1); nb1 = length(bnd1)\n  ni2 = length(int2); nb2 = length(bnd2)\n  Aii = BlockMatrix(S1[1:ni1, 1:ni1], Matrix(view(A, int1, int2)), Matrix(view(A, int2, int1)), S2[1:ni2, 1:ni2])\n  Aib = BlockMatrix(S1[1:ni1, ni1+1:ni1+nb1], Matrix(view(A, int1, bnd2)), Matrix(view(A, int2, bnd1)), S2[1:ni2, ni2+1:ni2+nb2])\n  Abi = BlockMatrix(S1[ni1+1:ni1+nb1, 1:ni1], Matrix(view(A, bnd1, int2)), Matrix(view(A, bnd2, int1)), S2[ni2+1:ni2+nb2, 1:ni2])\n  Abb = BlockMatrix(S1[ni1+1:ni1+nb1, ni1+1:ni1+nb1], Matrix(view(A, bnd1, bnd2)), Matrix(view(A, bnd2, bnd1)), S2[ni2+1:ni2+nb2, ni2+1:ni2+nb2])\n  return Aii, Aib, Abi, Abb\nend\n\n# For HSS matrices we want to specialize the routine in order to exploit the pre-determined blocking which exposes interior DOFs\nfunction _assemble_blocks(A::AbstractMatrix{T}, S1::HssMatrix{T}, S2::HssMatrix{T}, int1::AbstractVector{Int}, int2::AbstractVector{Int}, bnd1::AbstractVector{Int}, bnd2::AbstractVector{Int}; atol::Float64, rtol::Float64, verbose=false) where T\n  rcl1, ccl1 = cluster(S1.A11); rcl2, ccl2 = cluster(S2.A11)\n  # extract generators of children Schur complements\n  Uint1, Vint1 = generators(S1.A11); Uint1 = Uint1*S1.B12\n  Uint2, Vint2 = generators(S2.A11); Uint2 = Uint2*S2.B12\n  Ubnd1, Vbnd1 = generators(S1.A22); Ubnd1 = Ubnd1*S1.B21\n  Ubnd2, Vbnd2 = generators(S2.A22); Ubnd2 = Ubnd2*S2.B21\n\n  # form the blocks\n  Aii = BlockMatrix(S1.A11, hss(A[int1, int2], rcl1, ccl2; atol=atol, rtol=rtol), hss(A[int2, int1], rcl2, ccl1; atol=atol, rtol=rtol), S2.A11) # check hssranks of the offdiagonal guys\n  Aib = BlockMatrix(LowRankMatrix(Uint1, Vbnd1), A[int1, bnd2], A[int2, bnd1], LowRankMatrix(Uint2, Vbnd2))\n  Abi = BlockMatrix(LowRankMatrix(Ubnd1, Vint1), A[bnd1, int2], A[bnd2, int1], LowRankMatrix(Ubnd2, Vint2))\n  Abb = BlockMatrix(S1.A22, A[bnd1, bnd2], A[bnd2, bnd1], S2.A22)\n  return Aii, Aib, Abi, Abb\nend\n\n\nA = sprandn(10000,10000,0.1);\nint1 = randperm(10000)[1:100]; int2 = randperm(10000)[1:100]\nbnd1 = randperm(10000)[1:100]; bnd2 = randperm(10000)[1:100]\ncl = bisection_cluster((length(int1), 1000))\nS1 = hss(randn(1000,1000), cl, cl); S2 = hss(randn(1000,1000), cl, cl)\n\n@code_warntype _assemble_blocks(A, S1, S2, int1, int2, bnd1, bnd2)"}]}]}],"thread_ts":"1617796895.134900","parent_user_id":"U01L0RJC6FM"}]