[{"client_msg_id":"1bfa59e1-dea4-4fa7-8932-ff35c6038f44","type":"message","text":"When I try to assert the input argument with `::Function` , I found something that confused me a lot. Here is the example:\n```f(x) = x + 1;\nf2(x) = x + 2;\ng(f::Function, x) = 1*f(x);\ng(f_array::Array{Function,1}, x) = [1*f_array[1](x), -1*f_array[2](x)];```\nFor `g([f,f],1)`, it returns error:\n```ERROR: MethodError: no method matching g(::Array{typeof(f),1}, ::Int64)\nClosest candidates are:\n  g(::Function, ::Any) at REPL[3]:1\n  g(::Array{Function,1}, ::Any) at REPL[4]:1\nStacktrace:\n [1] top-level scope at REPL[7]:1```\nHowever, it is OK with `g([f,f2],1)`\nit returns\n```2-element Array{Int64,1}:\n  2\n -3```\nI'm curious about the reason and what should I modify my code to allow `g([f,f],x)` , with type assertion that make sure the first input argument is an array of function.\n\nCan someone explain for me, or provide me some keywords that I can find the answer myself?\nThanks in advance.","user":"U01PWAYKT08","ts":"1616905158.344100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"V3O","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"When I try to assert the input argument with "},{"type":"text","text":"::Function","style":{"code":true}},{"type":"text","text":" , I found something that confused me a lot. Here is the example:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"f(x) = x + 1;\nf2(x) = x + 2;\ng(f::Function, x) = 1*f(x);\ng(f_array::Array{Function,1}, x) = [1*f_array[1](x), -1*f_array[2](x)];"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"For "},{"type":"text","text":"g([f,f],1)","style":{"code":true}},{"type":"text","text":", it returns error:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"ERROR: MethodError: no method matching g(::Array{typeof(f),1}, ::Int64)\nClosest candidates are:\n  g(::Function, ::Any) at REPL[3]:1\n  g(::Array{Function,1}, ::Any) at REPL[4]:1\nStacktrace:\n [1] top-level scope at REPL[7]:1"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"However, it is OK with "},{"type":"text","text":"g([f,f2],1)","style":{"code":true}},{"type":"text","text":"\nit returns\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"2-element Array{Int64,1}:\n  2\n -3"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I'm curious about the reason and what should I modify my code to allow "},{"type":"text","text":"g([f,f],x)","style":{"code":true}},{"type":"text","text":" , with type assertion that make sure the first input argument is an array of function.\n\nCan someone explain for me, or provide me some keywords that I can find the answer myself?\nThanks in advance."}]}]}],"thread_ts":"1616905158.344100","reply_count":1,"reply_users_count":1,"latest_reply":"1616909450.346900","reply_users":["U0179G7FG4F"],"is_locked":false,"subscribed":false},{"client_msg_id":"9127743b-8b96-4c42-9954-e6c90a076469","type":"message","text":"All `Function`s have their own type. You want `g(f_array::Array{&lt;:Function,1}, x)` (actually you don't want that for other reasons, but that will get you on the right track)","user":"U0179G7FG4F","ts":"1616909450.346900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JSM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"All "},{"type":"text","text":"Function","style":{"code":true}},{"type":"text","text":"s have their own type. You want "},{"type":"text","text":"g(f_array::Array{<:Function,1}, x)","style":{"code":true}},{"type":"text","text":" (actually you don't want that for other reasons, but that will get you on the right track)"}]}]}],"thread_ts":"1616905158.344100","parent_user_id":"U01PWAYKT08"}]