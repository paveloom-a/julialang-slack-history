[{"client_msg_id":"d678f2ef-c155-4c24-bc95-a37cd258053b","type":"message","text":"Question on multiple dispatch: I have read that it would be often much better to keep types as generic as possible. For example `f(x,y)=x+y` is preferrable to `f(x::T, y::T) where T = x + y` . I have some code with some custom Matrix-type datastructures and some function `matmul(A::OwnMatrix, x::Matrix)` , but writing the code as `matmul(A::OwnMatrix{T}, x::Matrix{T}) where T` , which is less general seems to be outperforming the more general definition. As I am concerned with performance could someone clear up my confusion on multiple dispatch and what the \"goto\"-solution in Julia is?","user":"U01L0RJC6FM","ts":"1612164858.334100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"10p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Question on multiple dispatch: I have read that it would be often much better to keep types as generic as possible. For example "},{"type":"text","text":"f(x,y)=x+y","style":{"code":true}},{"type":"text","text":" is preferrable to "},{"type":"text","text":"f(x::T, y::T) where T = x + y","style":{"code":true}},{"type":"text","text":" . I have some code with some custom Matrix-type datastructures and some function "},{"type":"text","text":"matmul(A::OwnMatrix, x::Matrix)","style":{"code":true}},{"type":"text","text":" , but writing the code as "},{"type":"text","text":"matmul(A::OwnMatrix{T}, x::Matrix{T}) where T","style":{"code":true}},{"type":"text","text":" , which is less general seems to be outperforming the more general definition. As I am concerned with performance could someone clear up my confusion on multiple dispatch and what the \"goto\"-solution in Julia is?"}]}]}],"thread_ts":"1612164858.334100","reply_count":23,"reply_users_count":5,"latest_reply":"1612167292.338900","reply_users":["B01J9QZ4SP8","U7HAYKY9X","UH24GRBLL","UDB26738Q","U01L0RJC6FM"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1612164860.334200","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1612164858.334100","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"ea275f2f-2a82-4e0f-b0a8-96e0e2406e28","type":"message","text":"In 99% of cases, there is no performance difference whether or not you annotate the type in a function signature. The only exception is this case:\n<https://docs.julialang.org/en/v1/manual/performance-tips/#Be-aware-of-when-Julia-avoids-specializing>\nWhich should be relatively rare.","user":"U7HAYKY9X","ts":"1612164984.334500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"y6M","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In 99% of cases, there is no performance difference whether or not you annotate the type in a function signature. The only exception is this case:\n"},{"type":"link","url":"https://docs.julialang.org/en/v1/manual/performance-tips/#Be-aware-of-when-Julia-avoids-specializing"},{"type":"text","text":"\nWhich should be relatively rare."}]}]}],"thread_ts":"1612164858.334100","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"e625f97f-4c49-4816-8966-6f0616591d5d","type":"message","text":"So unless that's what is happening in your code, you're probably seeing some kind of benchmarking artifact - perhaps you're accidentally timing the wrong things.\nThere is some disagreement about whether the most idiomatic solution is to leave off type annotations entirely, except if you need to control dispatch (i.e. have different methods for the same function), or if you should use type annotations for readability and to catch bugs easier. But performance is not a variable - that should be the same","user":"U7HAYKY9X","ts":"1612165109.334700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HIw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So unless that's what is happening in your code, you're probably seeing some kind of benchmarking artifact - perhaps you're accidentally timing the wrong things.\nThere is some disagreement about whether the most idiomatic solution is to leave off type annotations entirely, except if you need to control dispatch (i.e. have different methods for the same function), or if you should use type annotations for readability and to catch bugs easier. But performance is not a variable - that should be the same"}]}]}],"thread_ts":"1612164858.334100","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"66ccf119-f38e-4741-8004-3fb8e1165f08","type":"message","text":"the second version is not less general, it just explicitly asks for specialization","user":"UH24GRBLL","ts":"1612165127.334900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iUUt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the second version is not less general, it just explicitly asks for specialization"}]}]}],"thread_ts":"1612164858.334100","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"f60bde23-bffa-44b3-9f51-901365d472f4","type":"message","text":"As for type annotations - I usually start out with none at all and slowly add them when necessary, either to control dispatch or to force specialization in case it helps with performance","user":"UH24GRBLL","ts":"1612165173.335100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0qp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"As for type annotations - I usually start out with none at all and slowly add them when necessary, either to control dispatch or to force specialization in case it helps with performance"}]}]}],"thread_ts":"1612164858.334100","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"f9dcb328-eb06-4016-ac48-c35b2ae774ff","type":"message","text":"by how much do you see the second version outperform the first?","user":"UH24GRBLL","ts":"1612165243.335300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0Eo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"by how much do you see the second version outperform the first?"}]}]}],"thread_ts":"1612164858.334100","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"ef17fed2-85d6-4a40-8660-3e608e56e421","type":"message","text":"Note that `f(x, y)` isn't _identical_ to `f(x::T, y::T) where T`: in the former `x` and `y` can have any type, in the latter they have the same type, whatever it is","user":"UDB26738Q","ts":"1612165263.335500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YJqB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Note that "},{"type":"text","text":"f(x, y)","style":{"code":true}},{"type":"text","text":" isn't "},{"type":"text","text":"identical","style":{"italic":true}},{"type":"text","text":" to "},{"type":"text","text":"f(x::T, y::T) where T","style":{"code":true}},{"type":"text","text":": in the former "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"y","style":{"code":true}},{"type":"text","text":" can have any type, in the latter they have the same type, whatever it is"}]}]}],"thread_ts":"1612164858.334100","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"702633f4-cf89-448e-aa79-07aa75912afc","type":"message","text":"ah yes, that's true - the second version restricts the element types like that","user":"UH24GRBLL","ts":"1612165292.335700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aG+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah yes, that's true - the second version restricts the element types like that"}]}]}],"thread_ts":"1612164858.334100","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"7a1e19f6-7ce6-4ee3-8864-b36ea73a70dc","type":"message","text":"yes I would definitely prefer the `f(x,y)` version due to readability. `f(x::T, y::S) where {T,S}` should be equivalent but I see around 25% better performance with the second version.","user":"U01L0RJC6FM","ts":"1612166391.335900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"F/Weo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes I would definitely prefer the "},{"type":"text","text":"f(x,y)","style":{"code":true}},{"type":"text","text":" version due to readability. "},{"type":"text","text":"f(x::T, y::S) where {T,S}","style":{"code":true}},{"type":"text","text":" should be equivalent but I see around 25% better performance with the second version."}]}]}],"thread_ts":"1612164858.334100","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"680f254b-7755-4bd7-b089-acf313c48f5e","type":"message","text":"but I should note that it is rather performant code so perhaps it is some benchmarking artifact? the jump is from 0.00105 seconds to ~0.0013 seconds","user":"U01L0RJC6FM","ts":"1612166447.336100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yYX6f","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but I should note that it is rather performant code so perhaps it is some benchmarking artifact? the jump is from 0.00105 seconds to ~0.0013 seconds"}]}]}],"thread_ts":"1612164858.334100","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"bbba9bec-c9b9-4e14-8f29-efaf35fa281e","type":"message","text":"what's the code?","user":"UH24GRBLL","ts":"1612166511.336300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Jr3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what's the code?"}]}]}],"thread_ts":"1612164858.334100","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"3d4c9eb5-d413-4969-a8fb-7e7664c6fab0","type":"message","text":"its this code: <https://github.com/bonevbs/HssMatrices.jl/blob/datastructure/src/matmul.jl>","user":"U01L0RJC6FM","ts":"1612166752.336700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"N9fuj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"its this code: "},{"type":"link","url":"https://github.com/bonevbs/HssMatrices.jl/blob/datastructure/src/matmul.jl"}]}]}],"thread_ts":"1612164858.334100","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"e79e4ac2-6509-484d-8a3d-4b1ebc6bf4b6","type":"message","text":"I am also a bit confused on how to introduce promotion into the entire mix. My idea was to generally avoid specifying elemnt types in order to get the desired behavior automatically","user":"U01L0RJC6FM","ts":"1612166853.336900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"e6yTp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am also a bit confused on how to introduce promotion into the entire mix. My idea was to generally avoid specifying elemnt types in order to get the desired behavior automatically"}]}]}],"thread_ts":"1612164858.334100","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"34b11747-a82b-4b90-b80d-abdd8efb7bf0","type":"message","text":"the function at line 20?","user":"UH24GRBLL","ts":"1612166880.337100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"V84","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the function at line 20?"}]}]}],"thread_ts":"1612164858.334100","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"c3a7cfc0-e7b4-405b-9938-0ac4efc057af","type":"message","text":"yes, or rather the functions with the underscores","user":"U01L0RJC6FM","ts":"1612166905.337300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/Q=d","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, or rather the functions with the underscores"}]}]}],"thread_ts":"1612164858.334100","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"9170596b-c6d7-48d1-95ff-344ab4d99cc6","type":"message","text":"as they get called","user":"U01L0RJC6FM","ts":"1612166928.337500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wkiP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"as they get called"}]}]}],"thread_ts":"1612164858.334100","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"219a3963-8940-42ff-88cd-dd0881162454","type":"message","text":"I think that's simply because there's no lookup needed to construct the results","user":"UH24GRBLL","ts":"1612166937.337700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"i6/e/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think that's simply because there's no lookup needed to construct the results"}]}]}],"thread_ts":"1612164858.334100","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"737f6f43-cc2a-4bde-899d-288f5d6acdff","type":"message","text":"if you specify the types, the compiler will see what the result type will be without having to check at runtime what the input types are","user":"UH24GRBLL","ts":"1612166995.337900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nXAda","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you specify the types, the compiler will see what the result type will be without having to check at runtime what the input types are"}]}]}],"thread_ts":"1612164858.334100","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"314b0809-ea50-4f0d-a70f-aa58a7d2c8cb","type":"message","text":"probably leading to more optimizations","user":"UH24GRBLL","ts":"1612167005.338100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uZX/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"probably leading to more optimizations"}]}]}],"thread_ts":"1612164858.334100","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"084c7997-b97c-4b53-bb8e-989f4783570e","type":"message","text":"i see, so that would be a constant so i could also simply go for the untyped version","user":"U01L0RJC6FM","ts":"1612167107.338300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IF3v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i see, so that would be a constant so i could also simply go for the untyped version"}]}]}],"thread_ts":"1612164858.334100","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"7e315cca-e756-4499-bdba-a448ea9a614a","type":"message","text":"possibly, yes","user":"UH24GRBLL","ts":"1612167257.338500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Mw46","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"possibly, yes"}]}]}],"thread_ts":"1612164858.334100","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"f63f0c8a-d166-4f40-ae94-79d21b0f5cc6","type":"message","text":"cool, thanks for all the answers :slightly_smiling_face:","user":"U01L0RJC6FM","ts":"1612167273.338700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ppf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"cool, thanks for all the answers "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1612164858.334100","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"1b9bb788-79ea-4183-a0a4-f3335bd27b4f","type":"message","text":"it's always super helpful coming here :smile:","user":"U01L0RJC6FM","ts":"1612167292.338900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ORPu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's always super helpful coming here "},{"type":"emoji","name":"smile"}]}]}],"thread_ts":"1612164858.334100","parent_user_id":"U01L0RJC6FM"}]