[{"client_msg_id":"c0300dd6-ddcb-49fd-b8af-986eede1a296","type":"message","text":"I have this LLVM code via Godbolt: <https://godbolt.org/z/4qrdE7> . Can I basically take the body of the `define` and pass that to `Base.llvmcall` ?\n```\ndefine dso_local &lt;4 x i64&gt; @_Z12unpack12to16PKc(i8* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds i8, i8* %0, i64 -4\n  %3 = bitcast i8* %2 to &lt;32 x i8&gt;*\n  %4 = load &lt;32 x i8&gt;, &lt;32 x i8&gt;* %3, align 1, !tbaa !2\n  %5 = shufflevector &lt;32 x i8&gt; %4, &lt;32 x i8&gt; undef, &lt;32 x i32&gt; &lt;i32 4, i32 5, i32 5, i32 6, i32 7, i32 8, i32 8, i32 9, i32 10, i32 11, i32 11, i32 12, i32 13, i32 14, i32 14, i32 15, i32 16, i32 17, i32 17, i32 18, i32 19, i32 20, i32 20, i32 21, i32 22, i32 23, i32 23, i32 24, i32 25, i32 26, i32 26, i32 27&gt;\n  %6 = bitcast &lt;32 x i8&gt; %5 to &lt;16 x i16&gt;\n  %7 = lshr &lt;16 x i16&gt; %6, &lt;i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4&gt;\n  %8 = and &lt;16 x i16&gt; %6, &lt;i16 4095, i16 undef, i16 4095, i16 undef, i16 4095, i16 undef, i16 4095, i16 undef, i16 4095, i16 undef, i16 4095, i16 undef, i16 4095, i16 undef, i16 4095, i16 undef&gt;\n  %9 = shufflevector &lt;16 x i16&gt; %8, &lt;16 x i16&gt; %7, &lt;16 x i32&gt; &lt;i32 0, i32 17, i32 2, i32 19, i32 4, i32 21, i32 6, i32 23, i32 8, i32 25, i32 10, i32 27, i32 12, i32 29, i32 14, i32 31&gt;\n  %10 = bitcast &lt;16 x i16&gt; %9 to &lt;4 x i64&gt;\n  ret &lt;4 x i64&gt; %10\n}```\n","user":"USU9FRPEU","ts":"1615213248.095700","team":"T68168MUP","attachments":[{"title":"Compiler Explorer - C++ (x86-64 clang 11.0.1)","title_link":"https://godbolt.org/z/4qrdE7","text":"// uses 24 bytes starting at p by doing a 32-byte load from p-4. // Don't use this for the first vector of a page-aligned array __m256i unpack12to16(const char *p) { __m256i v = _mm256_loadu_si256( (const __m256i*)(p-4) ); // v= [ x J I H G F | E D C B A x ] where each letter is a 3-byte pair of two 12-bit fields const __m256i bytegrouping = _mm256_setr_epi8(4,5, 5,6, 7,8, 8,9, 10,11, 11,12, 13,14, 14,15, // low half uses last 12B 0,1, 1,2, 3,4, 4,5, 6, 7, 7, 8, 9,10, 10,11); // high half uses first 12B v = _mm256_shuffle_epi8(v, bytegrouping); // each 16-bit chunk has the bits it needs, but not in the right position // in each chunk of 8 nibbles (4 bytes): [ f e d c | d c b a ] __m256i hi = _mm256_srli_epi16(v, 4); // [ 0 f e d | xxxx ] __m256i lo = _mm256_and_si256(v, _mm256_set1_epi32(0x00000FFF)); // [ 0000 | 0 c b a ] return _mm256_blend_epi16(lo, hi, 0b10101010); }","fallback":"Compiler Explorer - C++ (x86-64 clang 11.0.1)","from_url":"https://godbolt.org/z/4qrdE7","service_icon":"https://godbolt.org/favicon.ico?v=1","service_name":"godbolt.org","id":1,"original_url":"https://godbolt.org/z/4qrdE7"}],"blocks":[{"type":"rich_text","block_id":"Y37mw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have this LLVM code via Godbolt: "},{"type":"link","url":"https://godbolt.org/z/4qrdE7"},{"type":"text","text":" . Can I basically take the body of the "},{"type":"text","text":"define","style":{"code":true}},{"type":"text","text":" and pass that to "},{"type":"text","text":"Base.llvmcall","style":{"code":true}},{"type":"text","text":" ?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"\ndefine dso_local <4 x i64> @_Z12unpack12to16PKc(i8* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds i8, i8* %0, i64 -4\n  %3 = bitcast i8* %2 to <32 x i8>*\n  %4 = load <32 x i8>, <32 x i8>* %3, align 1, !tbaa !2\n  %5 = shufflevector <32 x i8> %4, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 5, i32 6, i32 7, i32 8, i32 8, i32 9, i32 10, i32 11, i32 11, i32 12, i32 13, i32 14, i32 14, i32 15, i32 16, i32 17, i32 17, i32 18, i32 19, i32 20, i32 20, i32 21, i32 22, i32 23, i32 23, i32 24, i32 25, i32 26, i32 26, i32 27>\n  %6 = bitcast <32 x i8> %5 to <16 x i16>\n  %7 = lshr <16 x i16> %6, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>\n  %8 = and <16 x i16> %6, <i16 4095, i16 undef, i16 4095, i16 undef, i16 4095, i16 undef, i16 4095, i16 undef, i16 4095, i16 undef, i16 4095, i16 undef, i16 4095, i16 undef, i16 4095, i16 undef>\n  %9 = shufflevector <16 x i16> %8, <16 x i16> %7, <16 x i32> <i32 0, i32 17, i32 2, i32 19, i32 4, i32 21, i32 6, i32 23, i32 8, i32 25, i32 10, i32 27, i32 12, i32 29, i32 14, i32 31>\n  %10 = bitcast <16 x i16> %9 to <4 x i64>\n  ret <4 x i64> %10\n}"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1615213248.095700","reply_count":2,"reply_users_count":2,"latest_reply":"1615213289.096100","reply_users":["B01J9QZ4SP8","U7HAYKY9X"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1615213250.095800","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1615213248.095700","parent_user_id":"USU9FRPEU"},{"client_msg_id":"d734cc65-bacc-4472-9ec2-f0683c294ea3","type":"message","text":"Yep, I've done that sometihng like that here:\n<https://github.com/jakobnissen/ScanByte.jl/blob/master/src/codegen.jl#L79>","user":"U7HAYKY9X","ts":"1615213289.096100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oRL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yep, I've done that sometihng like that here:\n"},{"type":"link","url":"https://github.com/jakobnissen/ScanByte.jl/blob/master/src/codegen.jl#L79"}]}]}],"thread_ts":"1615213248.095700","parent_user_id":"USU9FRPEU","reactions":[{"name":"+1","users":["USU9FRPEU"],"count":1}]}]