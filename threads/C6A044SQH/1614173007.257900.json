[{"client_msg_id":"fc388f01-01f5-46e6-be56-767d998b12a5","type":"message","text":"If I have a package `A` that depends on package `B` and package `B` does a breaking upgrade, (e.g. 1.0.0 -&gt; 2.0.0),  and the dependencies of package `A` are updated so they require at least version  `2.0.0` from package `B` :  Is that also considered a breaking change for package `A`?","user":"UBEF50B7C","ts":"1614173007.257900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jW5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If I have a package "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" that depends on package "},{"type":"text","text":"B","style":{"code":true}},{"type":"text","text":" and package "},{"type":"text","text":"B","style":{"code":true}},{"type":"text","text":" does a breaking upgrade, (e.g. 1.0.0 -> 2.0.0),  and the dependencies of package "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" are updated so they require at least version  "},{"type":"text","text":"2.0.0","style":{"code":true}},{"type":"text","text":" from package "},{"type":"text","text":"B","style":{"code":true}},{"type":"text","text":" :  Is that also considered a breaking change for package "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1614173007.257900","reply_count":6,"reply_users_count":4,"latest_reply":"1614175381.259400","reply_users":["B01J9QZ4SP8","U67SCG4HG","UBEF50B7C","UCZ7VBGUD"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1614173009.258000","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1614173007.257900","parent_user_id":"UBEF50B7C"},{"client_msg_id":"b5f5c865-10dd-4b93-ab42-5d4f058174d0","type":"message","text":"Breaking changes have nothing to do with dependencies really. A breaking change for `A` is if some functionality in `A` changes.","user":"U67SCG4HG","ts":"1614174177.258300","team":"T68168MUP","edited":{"user":"U67SCG4HG","ts":"1614174181.000000"},"blocks":[{"type":"rich_text","block_id":"YuTD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Breaking changes have nothing to do with dependencies really. A breaking change for "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" is if some functionality in "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" changes."}]}]}],"thread_ts":"1614173007.257900","parent_user_id":"UBEF50B7C"},{"client_msg_id":"db3b3276-e4b7-4e26-9a8f-86875963a6e8","type":"message","text":"yes, but adding a new (non major version) of `A`  would then result in using a newer version of `B` , so in some sense the combined system `(A, B)` would be breaking then?","user":"UBEF50B7C","ts":"1614174510.258600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7zSJF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, but adding a new (non major version) of "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":"  would then result in using a newer version of "},{"type":"text","text":"B","style":{"code":true}},{"type":"text","text":" , so in some sense the combined system "},{"type":"text","text":"(A, B)","style":{"code":true}},{"type":"text","text":" would be breaking then?"}]}]}],"thread_ts":"1614173007.257900","parent_user_id":"UBEF50B7C"},{"client_msg_id":"45cdf9b3-6ccc-426e-85f9-cfad3945dfe2","type":"message","text":"maybe in that case, one can say, that it is the users responsibility to also specify the version of `B` for their project, if they really depend on it, and only in some very special cases (for example a function from `A` calls a function from `B` that has a different behavior now),  would one also have to change the major version of `A`.","user":"UBEF50B7C","ts":"1614174618.258800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uNbW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"maybe in that case, one can say, that it is the users responsibility to also specify the version of "},{"type":"text","text":"B","style":{"code":true}},{"type":"text","text":" for their project, if they really depend on it, and only in some very special cases (for example a function from "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" calls a function from "},{"type":"text","text":"B","style":{"code":true}},{"type":"text","text":" that has a different behavior now),  would one also have to change the major version of "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1614173007.257900","parent_user_id":"UBEF50B7C","reactions":[{"name":"+1","users":["UCZ7VBGUD"],"count":1}]},{"client_msg_id":"740d4f13-3b9b-40d4-b2a4-9afc0bab88b5","type":"message","text":"yeah, it comes down to what is the “public API” of A. I think where this gets tricky is things like if `A.foo()` returns a `B.Object` and the behavior of `B.Object` changes in the new version of `B` . Then `B` is kind of leaking into the public API of `A`.\n\nI think it comes down to how it’s documented/supposed to be used; if you document that users can depend on the result of `A.foo()` having certain properties and these properties change, then it seems breaking. If you just say “this constructs a `B.Object`, see `B` for more on using those” then maybe it’s up to the user to depend on `B` to have stability for what exactly that is.","user":"UCZ7VBGUD","ts":"1614175168.259100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"myM1X","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, it comes down to what is the “public API” of A. I think where this gets tricky is things like if "},{"type":"text","text":"A.foo()","style":{"code":true}},{"type":"text","text":" returns a "},{"type":"text","text":"B.Object","style":{"code":true}},{"type":"text","text":" and the behavior of "},{"type":"text","text":"B.Object","style":{"code":true}},{"type":"text","text":" changes in the new version of "},{"type":"text","text":"B","style":{"code":true}},{"type":"text","text":" . Then "},{"type":"text","text":"B","style":{"code":true}},{"type":"text","text":" is kind of leaking into the public API of "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":".\n\nI think it comes down to how it’s documented/supposed to be used; if you document that users can depend on the result of "},{"type":"text","text":"A.foo()","style":{"code":true}},{"type":"text","text":" having certain properties and these properties change, then it seems breaking. If you just say “this constructs a "},{"type":"text","text":"B.Object","style":{"code":true}},{"type":"text","text":", see "},{"type":"text","text":"B","style":{"code":true}},{"type":"text","text":" for more on using those” then maybe it’s up to the user to depend on "},{"type":"text","text":"B","style":{"code":true}},{"type":"text","text":" to have stability for what exactly that is."}]}]}],"thread_ts":"1614173007.257900","parent_user_id":"UBEF50B7C"},{"client_msg_id":"c10a3f92-abc1-4e22-97e4-106d7e044ffe","type":"message","text":"(and if `B` is just used internally and does not leak into the API of `A` at all, then I think there’s no issue and it’s definitely fine to do major version bumps of `B` !)","user":"UCZ7VBGUD","ts":"1614175381.259400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SiMde","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(and if "},{"type":"text","text":"B","style":{"code":true}},{"type":"text","text":" is just used internally and does not leak into the API of "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" at all, then I think there’s no issue and it’s definitely fine to do major version bumps of "},{"type":"text","text":"B","style":{"code":true}},{"type":"text","text":" !)"}]}]}],"thread_ts":"1614173007.257900","parent_user_id":"UBEF50B7C"}]