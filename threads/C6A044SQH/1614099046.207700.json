[{"client_msg_id":"32366336-685a-415a-9edd-8cdf8b3a1642","type":"message","text":"Is there a simple/intuitive way to partition a matrix by arbitrary strides? Like if I had a 20 x 5 matrix and wanted the output to be a vector/iterable of 10x5, 3x5, 4x5, 3x5 ? Essentially, the \"split\" part of split-apply-combine, but for a matrix, and based on partition size.\nTheoretically:\n```foo(rand(20,5), [10,3,4,3])```","user":"UM4TSHKF1","ts":"1614099046.207700","team":"T68168MUP","edited":{"user":"UM4TSHKF1","ts":"1614099258.000000"},"blocks":[{"type":"rich_text","block_id":"Mxc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a simple/intuitive way to partition a matrix by arbitrary strides? Like if I had a 20 x 5 matrix and wanted the output to be a vector/iterable of 10x5, 3x5, 4x5, 3x5 ? Essentially, the \"split\" part of split-apply-combine, but for a matrix, and based on partition size.\nTheoretically:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"foo(rand(20,5), [10,3,4,3])"}]}]}],"thread_ts":"1614099046.207700","reply_count":16,"reply_users_count":4,"latest_reply":"1614110246.222800","reply_users":["B01J9QZ4SP8","UD0NS8PDF","UM4TSHKF1","U6740K1SP"],"subscribed":false,"reactions":[{"name":"bridge","users":["UM4TSHKF1"],"count":1}]},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1614099054.207800","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1614099046.207700","parent_user_id":"UM4TSHKF1"},{"type":"message","subtype":"bot_message","text":"Success, it has been cross posted <https://discourse.julialang.org/t/55863| to Discourse>. Keep and eye out on Discourse for responses and please add an answer there once you are satisfied with the solution so others can benefit as well. Happy debugging!","ts":"1614099432.208500","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1614099046.207700","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"3ffaa682-a18c-4b9d-b723-3aa1e8b23da8","type":"message","text":"```julia&gt; function foo(mat, sizes)\n       axes(mat,1) == 1:sum(sizes) || error(\"bad sizes!\")\n       z = 0\n       map(sizes) do s\n         r = z+1:z+s\n         z = s\n         mat[r,:]\n       end\n       end;\n\njulia&gt; foo(rand(20,5), [10,3,4,3]) .|&gt; size\n4-element Vector{Tuple{Int64, Int64}}:\n (10, 5)\n (3, 5)\n (4, 5)\n (3, 5)```","user":"UD0NS8PDF","ts":"1614100138.208800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zadId","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function foo(mat, sizes)\n       axes(mat,1) == 1:sum(sizes) || error(\"bad sizes!\")\n       z = 0\n       map(sizes) do s\n         r = z+1:z+s\n         z = s\n         mat[r,:]\n       end\n       end;\n\njulia> foo(rand(20,5), [10,3,4,3]) .|> size\n4-element Vector{Tuple{Int64, Int64}}:\n (10, 5)\n (3, 5)\n (4, 5)\n (3, 5)"}]}]}],"thread_ts":"1614099046.207700","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"a5c8274e-f911-4dad-87c3-62b19354f416","type":"message","text":"That's brilliant, thank you! Is that functionality not in `Base` ?","user":"UM4TSHKF1","ts":"1614100358.209000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L+cZx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's brilliant, thank you! Is that functionality not in "},{"type":"text","text":"Base","style":{"code":true}},{"type":"text","text":" ?"}]}]}],"thread_ts":"1614099046.207700","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"16d2972b-88ad-4e06-ada9-429dec730de6","type":"message","text":"There is a capability to partition an iterator by a constant value. Not sure we have arbitrary length partitions.","user":"U6740K1SP","ts":"1614100589.209400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KuE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There is a capability to partition an iterator by a constant value. Not sure we have arbitrary length partitions."}]}]}],"thread_ts":"1614099046.207700","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"c3eac0d6-e539-4c23-95a2-9d9fddc27804","type":"message","text":"This solution was provided on the discourse cross-post:\n```@views function splititerator(M::AbstractMatrix, rowlens::AbstractVector{&lt;:Integer})\n    sum(rowlens) &lt;= size(M,1) || throw(DimensionError())\n    let s = cumsum([1;rowlens])\n        return (M[s[i]:s[i+1]-1,:] for i = 1:length(s)-1)\n    end\nend```","user":"UM4TSHKF1","ts":"1614100635.209600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oHHY0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This solution was provided on the discourse cross-post:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@views function splititerator(M::AbstractMatrix, rowlens::AbstractVector{<:Integer})\n    sum(rowlens) <= size(M,1) || throw(DimensionError())\n    let s = cumsum([1;rowlens])\n        return (M[s[i]:s[i+1]-1,:] for i = 1:length(s)-1)\n    end\nend"}]}]}],"thread_ts":"1614099046.207700","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"83cbac4e-4488-4f6b-ac30-21666763b14b","type":"message","text":"Which returns a generator","user":"UM4TSHKF1","ts":"1614100642.209800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YXVBD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Which returns a generator"}]}]}],"thread_ts":"1614099046.207700","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"7715121b-0443-4a16-84c0-db08cabe8137","type":"message","text":"I’d split the problem.  First create a function that partitions the _indices_ `1:end` in the manner you want, and then iteratively generate them and use them as your first index","user":"U6740K1SP","ts":"1614100698.210000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LYXZl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’d split the problem.  First create a function that partitions the "},{"type":"text","text":"indices","style":{"italic":true}},{"type":"text","text":" "},{"type":"text","text":"1:end","style":{"code":true}},{"type":"text","text":" in the manner you want, and then iteratively generate them and use them as your first index"}]}]}],"thread_ts":"1614099046.207700","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"eb35b599-5cb3-4053-ae37-04196ef53975","type":"message","text":"E.g., for constant splits, you can do:\n```(A[i, :] for i in Iterators.partition(axes(A, 1), 5))```","user":"U6740K1SP","ts":"1614100739.210200","team":"T68168MUP","edited":{"user":"U6740K1SP","ts":"1614100764.000000"},"blocks":[{"type":"rich_text","block_id":"I2J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"E.g., for constant splits, you can do:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"(A[i, :] for i in Iterators.partition(axes(A, 1), 5))"}]}]}],"thread_ts":"1614099046.207700","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"7ff6c775-6981-4480-bd86-d56c46b78b40","type":"message","text":"`cumsum` is neat, I guess that’s what mine builds by hand. I feel there ought to be a clever `foldl` solution…","user":"UD0NS8PDF","ts":"1614100910.210500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0fSMM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"cumsum","style":{"code":true}},{"type":"text","text":" is neat, I guess that’s what mine builds by hand. I feel there ought to be a clever "},{"type":"text","text":"foldl","style":{"code":true}},{"type":"text","text":" solution…"}]}]}],"thread_ts":"1614099046.207700","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"63de9cc3-d4c6-449a-8c0c-2bf2e4727583","type":"message","text":"```julia&gt; foo(mat, sizes::Tuple{}) = ()\n       foo(mat, sizes::Tuple) = @views (mat[1:first(sizes),:], foo(mat[first(sizes)+1:end,:], Base.tail(sizes))...);\n\njulia&gt; foo(rand(20,5), (10,3,4,3)) .|&gt; size\n((10, 5), (3, 5), (4, 5), (3, 5))```","user":"UD0NS8PDF","ts":"1614101221.210700","team":"T68168MUP","edited":{"user":"UD0NS8PDF","ts":"1614101261.000000"},"blocks":[{"type":"rich_text","block_id":"4YM","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> foo(mat, sizes::Tuple{}) = ()\n       foo(mat, sizes::Tuple) = @views (mat[1:first(sizes),:], foo(mat[first(sizes)+1:end,:], Base.tail(sizes))...);\n\njulia> foo(rand(20,5), (10,3,4,3)) .|> size\n((10, 5), (3, 5), (4, 5), (3, 5))"}]}]}],"thread_ts":"1614099046.207700","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"5ec231a8-52bf-4edc-87f7-b564e7a2e34f","type":"message","text":"This last solution is 3x faster on my system :slightly_smiling_face:","user":"UM4TSHKF1","ts":"1614101404.212100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"om7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This last solution is 3x faster on my system "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1614099046.207700","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"dc87542f-a0f7-4b05-8adc-5afd34fbee3e","type":"message","text":"Even faster when doing `@views function...`\n```# without @views\njulia&gt; @btime foo(tmp, (10,3,4,3));\n  435.914 ns (9 allocations: 2.30 KiB)\n\njulia&gt; @btime foo(tmp, (10,3,4,3));\n  52.205 ns (1 allocation: 208 bytes)```","user":"UM4TSHKF1","ts":"1614101584.212300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Fw8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Even faster when doing "},{"type":"text","text":"@views function...","style":{"code":true}},{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"# without @views\njulia> @btime foo(tmp, (10,3,4,3));\n  435.914 ns (9 allocations: 2.30 KiB)\n\njulia> @btime foo(tmp, (10,3,4,3));\n  52.205 ns (1 allocation: 208 bytes)"}]}]}],"thread_ts":"1614099046.207700","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"f66341b7-3966-4ce3-a501-539dd933b5a6","type":"message","text":"Thanks so much <@UD0NS8PDF>! I posted your responses on the discourse for visibility.","user":"UM4TSHKF1","ts":"1614101792.213600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dSE6y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks so much "},{"type":"user","user_id":"UD0NS8PDF"},{"type":"text","text":"! I posted your responses on the discourse for visibility."}]}]}],"thread_ts":"1614099046.207700","parent_user_id":"UM4TSHKF1","reactions":[{"name":"+1","users":["UD0NS8PDF"],"count":1}]},{"client_msg_id":"7b245cf6-dc08-440a-9839-556d657b6c05","type":"message","text":"I guess the minimal generator of indices is something like this:\n```function steps(vals, steps)\n    i = firstindex(vals)\n    (view(vals, i:(i=i+s)-1) for s in steps)\nend\n\ncollect(steps(1:20, [10,3,4,3]))\n\nmat = reshape(1:40,20,2)\n[view(mat,r,:) for r in steps(axes(mat,1), [10,3,4,3])]```","user":"UD0NS8PDF","ts":"1614107601.220200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"i2Xgf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess the minimal generator of indices is something like this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function steps(vals, steps)\n    i = firstindex(vals)\n    (view(vals, i:(i=i+s)-1) for s in steps)\nend\n\ncollect(steps(1:20, [10,3,4,3]))\n\nmat = reshape(1:40,20,2)\n[view(mat,r,:) for r in steps(axes(mat,1), [10,3,4,3])]"}]}]}],"thread_ts":"1614099046.207700","parent_user_id":"UM4TSHKF1"},{"type":"message","subtype":"bot_message","text":"Hey <@UM4TSHKF1>, if you were able to find an answer here on Slack, please cross post it to Discourse via the link above. Thank you! ","ts":"1614110246.222800","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1614099046.207700","parent_user_id":"UM4TSHKF1"}]