[{"client_msg_id":"15bf8bed-14b9-43fa-a161-5bc317aff945","type":"message","text":"Can anyone think of an easy, threadsafe way to build a dict, multithreaded? I could build a vector and then convert it to a Dict, but I'm not sure pushing to vectors are threadsafe either?","user":"U7HAYKY9X","ts":"1612806474.290100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LnW9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can anyone think of an easy, threadsafe way to build a dict, multithreaded? I could build a vector and then convert it to a Dict, but I'm not sure pushing to vectors are threadsafe either?"}]}]}],"thread_ts":"1612806474.290100","reply_count":95,"reply_users_count":9,"latest_reply":"1612862763.355600","reply_users":["B01J9QZ4SP8","UDB26738Q","U6NFPDBV1","U7HAYKY9X","U67SCG4HG","UH24GRBLL","U0179G7FG4F","UC7AF7NSU","UP9P4JFNJ"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1612806476.290200","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X","reactions":[{"name":"bridge","users":["U7HAYKY9X"],"count":1}]},{"type":"message","subtype":"bot_message","text":"Success, it has been cross posted <https://discourse.julialang.org/t/54856| to Discourse>. Keep and eye out on Discourse for responses and please add an answer there once you are satisfied with the solution so others can benefit as well. Happy debugging!","ts":"1612806576.290500","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"3f792541-9767-4199-8a5f-42508672c98c","type":"message","text":"pushing to a vector no, but to a\n```Vector{Vector{...}}(undef, nthreads()}```\nit is","user":"UDB26738Q","ts":"1612806603.290700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8ojC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"pushing to a vector no, but to a\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Vector{Vector{...}}(undef, nthreads()}"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"it is"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X","reactions":[{"name":"+1","users":["U7HAYKY9X"],"count":1}]},{"client_msg_id":"1f0f2463-a47e-4a08-85d2-8214e3b901fc","type":"message","text":"There's also <https://github.com/wherrera10/ThreadSafeDicts.jl>","user":"U6NFPDBV1","ts":"1612806614.290900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dqs4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There's also "},{"type":"link","url":"https://github.com/wherrera10/ThreadSafeDicts.jl"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"f70cba54-a9ff-4069-a259-e5a2a2bd11d3","type":"message","text":"Alright. I'll do it  the roundabout way","user":"U7HAYKY9X","ts":"1612806662.291100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w2lp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Alright. I'll do it  the roundabout way"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"0c15c100-389f-4c07-957f-9ddb5addc5fc","type":"message","text":"If the work of computing the elements is bigger than the time to insert you could just lock","user":"U67SCG4HG","ts":"1612806683.291300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KsQe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If the work of computing the elements is bigger than the time to insert you could just lock"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"375cc188-0d7e-4c3e-9f08-d3e57927c155","type":"message","text":"which is probably what ThreadSafeDicts.jl does?","user":"UDB26738Q","ts":"1612806713.291500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Pk6FK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which is probably what ThreadSafeDicts.jl does?"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X","reactions":[{"name":"point_up","users":["U6NFPDBV1"],"count":1}]},{"client_msg_id":"5ba469ef-ed98-4af7-bb6a-677dbb105de6","type":"message","text":"Yea","user":"U67SCG4HG","ts":"1612806725.291700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xGtYz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yea"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"b7fd1d9c-f363-4232-9900-d78c7985742d","type":"message","text":"there isn't much documentation, to say the least, but there are references to locks everywhere :joy:","user":"UDB26738Q","ts":"1612806769.292000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ONoq7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there isn't much documentation, to say the least, but there are references to locks everywhere "},{"type":"emoji","name":"joy"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"d3c4022a-9d43-4c5d-8bb0-764589398aba","type":"message","text":"<https://github.com/JuliaServices/WorkerUtilities.jl/blob/2e0f59bbfad14dd0f3b4935f8a5e14b2955867b8/src/WorkerUtilities.jl#L74-L107> is also pretty convenient for `ThreadSafeAnything`","user":"U67SCG4HG","ts":"1612806777.292200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UXP","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaServices/WorkerUtilities.jl/blob/2e0f59bbfad14dd0f3b4935f8a5e14b2955867b8/src/WorkerUtilities.jl#L74-L107"},{"type":"text","text":" is also pretty convenient for "},{"type":"text","text":"ThreadSafeAnything","style":{"code":true}}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"f213190d-2cfd-4005-9c7d-03673a6daf91","type":"message","text":"yeah, lock-/wait-free programming is not easy right now","user":"UH24GRBLL","ts":"1612806923.292400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rI0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, lock-/wait-free programming is not easy right now"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"330a5c54-1384-4293-ba0c-fd69ef610093","type":"message","text":"I've spent my whole day reading about this and how it could be done in julia","user":"UH24GRBLL","ts":"1612806941.292600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eV6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I've spent my whole day reading about this and how it could be done in julia"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"8b801b49-f0b6-49a1-b98d-0aef58a9ccaa","type":"message","text":"let's just say it's in the works","user":"UH24GRBLL","ts":"1612806949.292800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Hu/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"let's just say it's in the works"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"b544ed57-baee-450e-a1cb-9d9fb9d9b0d3","type":"message","text":"Can't you just build separate dicts per thread and merge them?","user":"U0179G7FG4F","ts":"1612807008.293000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AbIJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can't you just build separate dicts per thread and merge them?"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"afe5747a-2c04-42ab-a9ca-9f6dbf324c54","type":"message","text":"I opted for the following design\n```a = Vector{MyType}(undef, length(xs))\nThreads.@threads for (i, x) in collect(enumerate(xs))\n    a[i] = calc_mytype()\nend\nDict(zip(xs, a))```","user":"U7HAYKY9X","ts":"1612807071.293200","team":"T68168MUP","edited":{"user":"U7HAYKY9X","ts":"1612807085.000000"},"blocks":[{"type":"rich_text","block_id":"NmRu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I opted for the following design\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"a = Vector{MyType}(undef, length(xs))\nThreads.@threads for (i, x) in collect(enumerate(xs))\n    a[i] = calc_mytype()\nend\nDict(zip(xs, a))"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X","reactions":[{"name":"thumbsup_all","users":["U0179G7FG4F","UC7AF7NSU"],"count":2}]},{"client_msg_id":"7c103ecd-c7e8-48e2-9af4-c3ba74a3434c","type":"message","text":"Works because `calc_mytype` is fairly slow, but thanks for the tip about ThreadSafeDicts :)","user":"U7HAYKY9X","ts":"1612807157.293600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eNL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Works because "},{"type":"text","text":"calc_mytype","style":{"code":true}},{"type":"text","text":" is fairly slow, but thanks for the tip about ThreadSafeDicts :)"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"697f2bb8-1676-4d38-b052-d6c47d3a3b7f","type":"message","text":"My tutorials explain how to use Dict with multiple threads: <https://juliafolds.github.io/data-parallelism/tutorials/quick-introduction/#histogram_with_reduce> / <https://juliafolds.github.io/Transducers.jl/dev/tutorials/tutorial_parallel/#Example:-ad-hoc-histogram>\n\nIf you want performance, using \"thread-safe\" data structure is not the best approach, usually.","user":"UC7AF7NSU","ts":"1612808678.293900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"k+O","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My tutorials explain how to use Dict with multiple threads: "},{"type":"link","url":"https://juliafolds.github.io/data-parallelism/tutorials/quick-introduction/#histogram_with_reduce"},{"type":"text","text":" / "},{"type":"link","url":"https://juliafolds.github.io/Transducers.jl/dev/tutorials/tutorial_parallel/#Example:-ad-hoc-histogram"},{"type":"text","text":"\n\nIf you want performance, using \"thread-safe\" data structure is not the best approach, usually."}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X","reactions":[{"name":"100","users":["U7HAYKY9X"],"count":1}]},{"client_msg_id":"7603a65e-a696-467e-833f-e538189e2f5e","type":"message","text":"yes","user":"UH24GRBLL","ts":"1612808949.294200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"neq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"964d9e73-300b-43ca-9c99-b1cee92d221d","type":"message","text":"requiring thread safety is, if possible, best avoided","user":"UH24GRBLL","ts":"1612808965.294400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MZmB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"requiring thread safety is, if possible, best avoided"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"37a5a287-9699-468f-a173-49ab50d3423b","type":"message","text":"at least for now","user":"UH24GRBLL","ts":"1612808974.294600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tzC3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"at least for now"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"ced97f3c-e837-40ee-a921-d8ead65e5351","type":"message","text":"In my case each element takes something like 200 ms to compute and is embarrasingly parallel so I can get pretty sloppy and still reap large benefits.","user":"U7HAYKY9X","ts":"1612809182.294800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9Gn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In my case each element takes something like 200 ms to compute and is embarrasingly parallel so I can get pretty sloppy and still reap large benefits."}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"d771009c-1ebd-48c1-90b7-b9fe8abbabd0","type":"message","text":"That's pretty cool, <@UC7AF7NSU>!","user":"U7HAYKY9X","ts":"1612809419.295000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bU8yt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's pretty cool, "},{"type":"user","user_id":"UC7AF7NSU"},{"type":"text","text":"!"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X","reactions":[{"name":"+1","users":["UC7AF7NSU"],"count":1}]},{"type":"message","subtype":"bot_message","text":"Hey <@U7HAYKY9X>, if you were able to find an answer here on Slack, please cross post it to Discourse via the link above. Thank you! ","ts":"1612817386.295400","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"7e717ea5-b4ab-420c-8ff9-5d1b982f0315","type":"message","text":"I have a <https://juliaactors.github.io/Actors.jl/dev/actors/#dict-server|lock-free example of a thread-safe Dict> in <https://github.com/JuliaActors/Actors.jl|Actors.jl>","user":"UP9P4JFNJ","ts":"1612854268.336400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"504=C","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have a "},{"type":"link","url":"https://juliaactors.github.io/Actors.jl/dev/actors/#dict-server","text":"lock-free example of a thread-safe Dict"},{"type":"text","text":" in "},{"type":"link","url":"https://github.com/JuliaActors/Actors.jl","text":"Actors.jl"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"ac6fe841-b123-4904-be41-430fd0e480b2","type":"message","text":"interesting! is `lk` in that example the wrapped `Dict`?","user":"UH24GRBLL","ts":"1612854711.337400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ezuh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"interesting! is "},{"type":"text","text":"lk","style":{"code":true}},{"type":"text","text":" in that example the wrapped "},{"type":"text","text":"Dict","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"e8c24731-9b87-481d-9bc4-3b29c7210983","type":"message","text":"how do you prevent multiple actors from racing on `setindex!`?","user":"UH24GRBLL","ts":"1612854764.337600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HlThJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"how do you prevent multiple actors from racing on "},{"type":"text","text":"setindex!","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"e771e843-165f-4fd9-959c-9eaf7e6366d9","type":"message","text":"how do you synchronize state between actors?","user":"UH24GRBLL","ts":"1612854829.337800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cVbxb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"how do you synchronize state between actors?"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"38d67e60-ffe5-4f69-98aa-69b3c9593c5b","type":"message","text":"`lk` is the `Link` to the actor.\n&gt; how do you prevent multiple actors from racing on `setindex!`?\nThere is only one actor (on one thread) serving the Dict. If you access it from some other thread, this goes on via message passing over a `Channel` wrapped in the given `Link` (above).","user":"UP9P4JFNJ","ts":"1612854923.338000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s=E","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"lk","style":{"code":true}},{"type":"text","text":" is the "},{"type":"text","text":"Link","style":{"code":true}},{"type":"text","text":" to the actor.\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"how do you prevent multiple actors from racing on "},{"type":"text","text":"setindex!","style":{"code":true}},{"type":"text","text":"?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"There is only one actor (on one thread) serving the Dict. If you access it from some other thread, this goes on via message passing over a "},{"type":"text","text":"Channel","style":{"code":true}},{"type":"text","text":" wrapped in the given "},{"type":"text","text":"Link","style":{"code":true}},{"type":"text","text":" (above)."}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"843a89cd-048a-49be-94dc-4a475b0e729c","type":"message","text":"The actor prrocesses only one message at a time","user":"UP9P4JFNJ","ts":"1612854953.338200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rJbtt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The actor prrocesses only one message at a time"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"9e5c394c-3c5b-4f7e-a129-c4a6ee9a014e","type":"message","text":"ah, so all accesses to the dict are forced to go through that thread?","user":"UH24GRBLL","ts":"1612855031.338400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ex8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah, so all accesses to the dict are forced to go through that thread?"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"72fb2c05-71f8-4ad6-8947-a9ed2bd0e108","type":"message","text":"… and through that Channel, right.","user":"UP9P4JFNJ","ts":"1612855085.338600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NvI2r","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"… and through that Channel, right."}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"0fa0ee2f-d4fa-43d3-b379-84009890484c","type":"message","text":"ok, so effectively accesses to that dict are serialized?","user":"UH24GRBLL","ts":"1612855101.338800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SL5f","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ok, so effectively accesses to that dict are serialized?"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"273878bc-f056-431b-989b-db0daccd4fa5","type":"message","text":"only one thread can make progress at a time","user":"UH24GRBLL","ts":"1612855132.339000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/3an","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"only one thread can make progress at a time"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"8b52ae34-b2de-4885-9d90-40ffbeda70b6","type":"message","text":"So that means from a system perspective it is not wait free, as you mentioned in another thread. Other threads or actors have to wait for getting `Dict` access. It operates like a server.","user":"UP9P4JFNJ","ts":"1612855224.339200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"f/XnJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So that means from a system perspective it is not wait free, as you mentioned in another thread. Other threads or actors have to wait for getting "},{"type":"text","text":"Dict","style":{"code":true}},{"type":"text","text":" access. It operates like a server."}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"6a394c01-33af-4356-b569-5008e1ab8287","type":"message","text":"hmmm","user":"UH24GRBLL","ts":"1612855296.339400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LWln","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmmm"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"29bbee68-2445-4374-838a-d8a5e37ccce2","type":"message","text":"I think that isn't even non-blocking","user":"UH24GRBLL","ts":"1612855304.339600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"l4B+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think that isn't even non-blocking"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"69c7f9d9-6a53-4888-ae2a-c46c3d384c2d","type":"message","text":"since if the thread \"owning\" the dict stalls/fails/gets starved, it's possible that no other thread may be able to make progress","user":"UH24GRBLL","ts":"1612855328.339800","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1612855338.000000"},"blocks":[{"type":"rich_text","block_id":"NsSV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"since if the thread \"owning\" the dict stalls/fails/gets starved, it's possible that no other thread may be able to make progress"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"6c4b8001-e654-4557-9ec1-fd4453d860b6","type":"message","text":"If you want to speed up that, you can implement several actors serving the `Dict`, for example for `setindex` and `getindex` but there will be only one actor basically responsible for `Dict` access.","user":"UP9P4JFNJ","ts":"1612855389.340100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VnpV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you want to speed up that, you can implement several actors serving the "},{"type":"text","text":"Dict","style":{"code":true}},{"type":"text","text":", for example for "},{"type":"text","text":"setindex","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"getindex","style":{"code":true}},{"type":"text","text":" but there will be only one actor basically responsible for "},{"type":"text","text":"Dict","style":{"code":true}},{"type":"text","text":" access."}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"48a9d28d-d2b6-4e4e-920c-116c7370be01","type":"message","text":"There was a really great talk about testing concurrent systems, I've always wanted to have something like that in julia","user":"UH24GRBLL","ts":"1612855394.340300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"H=KE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There was a really great talk about testing concurrent systems, I've always wanted to have something like that in julia"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"c0f9a1dd-d45e-4e69-95df-5eec8c84077d","type":"message","text":"right - making getindex lock-free is somewhat simple if you accept that you may have to fetch more than once","user":"UH24GRBLL","ts":"1612855445.340500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fhdt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"right - making getindex lock-free is somewhat simple if you accept that you may have to fetch more than once"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"94598b65-9ad6-474e-a4cf-0318525d4134","type":"message","text":"setindex is being implicitly locked by the progress the owning thread has to make before you see the change manifested","user":"UH24GRBLL","ts":"1612855464.340700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0M3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"setindex is being implicitly locked by the progress the owning thread has to make before you see the change manifested"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"34371875-ee17-4184-9197-282a6f3b6dcb","type":"message","text":"<https://www.youtube.com/watch?v=4fFDFbi3toc> - that's the talk!","user":"UH24GRBLL","ts":"1612855559.340900","team":"T68168MUP","attachments":[{"service_name":"YouTube","service_url":"https://www.youtube.com/","title":"\"Testing Distributed Systems w/ Deterministic Simulation\" by Will Wilson","title_link":"https://www.youtube.com/watch?v=4fFDFbi3toc","author_name":"Strange Loop Conference","author_link":"https://www.youtube.com/channel/UC_QIfHvN9auy2CoOdSfMWDw","thumb_url":"https://i.ytimg.com/vi/4fFDFbi3toc/hqdefault.jpg","thumb_width":480,"thumb_height":360,"fallback":"YouTube Video: \"Testing Distributed Systems w/ Deterministic Simulation\" by Will Wilson","video_html":"<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/4fFDFbi3toc?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","video_html_width":400,"video_html_height":225,"from_url":"https://www.youtube.com/watch?v=4fFDFbi3toc","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png","id":1,"original_url":"https://www.youtube.com/watch?v=4fFDFbi3toc"}],"blocks":[{"type":"rich_text","block_id":"tb7r","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://www.youtube.com/watch?v=4fFDFbi3toc"},{"type":"text","text":" - that's the talk!"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"cae8d981-e54c-44a2-a186-61118a920a64","type":"message","text":"for computations like the one described above (taking 200 ms) that approach should work well. It is composable since it is lock free.","user":"UP9P4JFNJ","ts":"1612855604.341200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5+Dxz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"for computations like the one described above (taking 200 ms) that approach should work well. It is composable since it is lock free."}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"f42f7c5d-1fa2-4c41-8f65-98baa2f7ec5b","type":"message","text":"yeah","user":"UH24GRBLL","ts":"1612855629.341400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8MBkC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"d5732140-eb3e-4772-863f-b0d2bbaa38ee","type":"message","text":"ok, thank you, I will take a look at it.","user":"UP9P4JFNJ","ts":"1612855635.341600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"U7d","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ok, thank you, I will take a look at it."}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"e6198f5d-9e33-438f-bd3b-2394e6c6a781","type":"message","text":"just has a performance bottleneck","user":"UH24GRBLL","ts":"1612855637.341800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1v6x","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"just has a performance bottleneck"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"47efb2ff-766d-4d82-abff-0aab704cf791","type":"message","text":"yes that it somehow unavoidable in distributed computing.","user":"UP9P4JFNJ","ts":"1612855709.342000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uZnQI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes that it somehow unavoidable in distributed computing."}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"f9ff2a20-3956-48e9-a50e-ef822e726980","type":"message","text":"well yeah, but it's possible to make that much faster by allowing multiple writes to different keys at the same time","user":"UH24GRBLL","ts":"1612855734.342400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uxYM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well yeah, but it's possible to make that much faster by allowing multiple writes to different keys at the same time"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"a2985e73-c857-417c-9c29-6bbf5cff7068","type":"message","text":"probably not in that exact example","user":"UH24GRBLL","ts":"1612855744.342600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4+HWB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"probably not in that exact example"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"1c6666a5-35c5-405d-891e-aaddf6076253","type":"message","text":"yes, but that would require to rewrite the `Dict` functionality. That would be an undertaking.","user":"UP9P4JFNJ","ts":"1612855861.343200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/rr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, but that would require to rewrite the "},{"type":"text","text":"Dict","style":{"code":true}},{"type":"text","text":" functionality. That would be an undertaking."}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"f405fde2-db3d-4f0a-80ac-065de0c0e995","type":"message","text":"in that simple example I chose only to wrap the given functionality.","user":"UP9P4JFNJ","ts":"1612855899.343600","team":"T68168MUP","edited":{"user":"UP9P4JFNJ","ts":"1612855913.000000"},"blocks":[{"type":"rich_text","block_id":"NJk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in that simple example I chose only to wrap the given functionality."}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"dd209c3e-7d54-4692-af93-e2243671da9b","type":"message","text":"yep! the construction you've done is probably the easiest/best to achieve right now","user":"UH24GRBLL","ts":"1612856003.345000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gWkx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yep! the construction you've done is probably the easiest/best to achieve right now"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"5fc73831-d561-4f9a-ae7f-7c10bd05d89a","type":"message","text":"we'd need a few more low level primitives in order to create that perfect dict, but I think we'll get there","user":"UH24GRBLL","ts":"1612856058.345600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NHl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we'd need a few more low level primitives in order to create that perfect dict, but I think we'll get there"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"692273b3-f594-4645-b29c-e91480eda31d","type":"message","text":"Yes, but I would also prefer to have more high level primitives for concurrency.\n\nOne such approach would be <https://en.wikipedia.org/wiki/Software_transactional_memory|Software transactional memory (STM>) but we don’t have that (yet) in Julia.","user":"UP9P4JFNJ","ts":"1612856156.345800","team":"T68168MUP","attachments":[{"title":"Software transactional memory","title_link":"https://en.wikipedia.org/wiki/Software_transactional_memory","from_url":"https://en.wikipedia.org/wiki/Software_transactional_memory","author_name":"Wikipedia","author_link":"https://en.wikipedia.org/","text":"In computer science, software transactional memory (STM) is a concurrency control mechanism analogous to database transactions for controlling access to shared memory in concurrent computing. It is an alternative to lock-based synchronization. STM is a strategy implemented in software, rather than as a hardware component. A transaction in this context occurs when a piece of code executes a series of reads and writes to shared memory. These reads and writes logically occur at a single instant in time; intermediate states are not visible to other (successful) transactions. The idea of providing hardware support for transactions originated in a 1986 paper by Tom Knight.  The idea was popularized by Maurice Herlihy and J. Eliot B. Moss. In 1995 Nir Shavit and Dan Touitou extended this idea to software-only transactional memory (STM). Since 2005, STM has been the focus of intense research and support for practical implementations is growing.","fallback":"wikipedia: Software transactional memory","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png","id":1,"original_url":"https://en.wikipedia.org/wiki/Software_transactional_memory"}],"blocks":[{"type":"rich_text","block_id":"LYm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, but I would also prefer to have more high level primitives for concurrency.\n\nOne such approach would be "},{"type":"link","url":"https://en.wikipedia.org/wiki/Software_transactional_memory","text":"Software transactional memory (STM"},{"type":"text","text":") but we don’t have that (yet) in Julia."}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"cfd7ad24-7718-490c-8bd6-959d904f87bd","type":"message","text":"I'm familiar with that approach, databases use that","user":"UH24GRBLL","ts":"1612856236.346100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"30NV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm familiar with that approach, databases use that"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"c911fe8d-6b2b-4175-bf83-791d741be0ed","type":"message","text":"the problem lies in the log - you have to maintain consistency and gate access there, in order to prevent actors from overwriting each other's changes _there_","user":"UH24GRBLL","ts":"1612856270.346300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1r2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the problem lies in the log - you have to maintain consistency and gate access there, in order to prevent actors from overwriting each other's changes "},{"type":"text","text":"there","style":{"italic":true}}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"bad6f4cd-1f00-4494-8621-f5b950b0d6e1","type":"message","text":"yes, but for a case like the OP’s it would work just fine. He could write something like:\n```atomic\n    d[i] = something\nend```\nand be just fine.","user":"UP9P4JFNJ","ts":"1612856442.346500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DoomF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, but for a case like the OP’s it would work just fine. He could write something like:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"atomic\n    d[i] = something\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"and be just fine."}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"58ac1e19-83d8-41f5-a7e9-707302d7da26","type":"message","text":"That would be a minimal change to his code.","user":"UP9P4JFNJ","ts":"1612856479.346700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Mq1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That would be a minimal change to his code."}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"6528d310-c50b-4de4-9f7d-c2f1fd4bcd41","type":"message","text":"if you can split your problem into multiple independent subproblems, lock-free/wait-free/STM is the wrong way to go anyway - you only need those approaches if you have contention on an algorithmic level","user":"UH24GRBLL","ts":"1612856509.346900","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1612856523.000000"},"blocks":[{"type":"rich_text","block_id":"z7hT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you can split your problem into multiple independent subproblems, lock-free/wait-free/STM is the wrong way to go anyway - you only need those approaches if you have contention on an algorithmic level"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"53eeb179-8a69-473b-9c73-ad35cd57997c","type":"message","text":"well, obviously there is not one way fitting it all","user":"UP9P4JFNJ","ts":"1612856662.347300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pwP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well, obviously there is not one way fitting it all"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"0cae5f11-5f76-4c23-8ecd-e304e19b952e","type":"message","text":"There aren't *that* many fundamental data structures. If we had an easy and threadsafe way to construct Dict, Array, Set and String, that would go a long way.","user":"U7HAYKY9X","ts":"1612857143.347700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h+a3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There aren't "},{"type":"text","text":"that","style":{"bold":true}},{"type":"text","text":" many fundamental data structures. If we had an easy and threadsafe way to construct Dict, Array, Set and String, that would go a long way."}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"911acc7b-ef5c-42c2-8307-85f466809cce","type":"message","text":"I was also a little disappointed that `Threads.@threads for (i, x) in enumerate(xs)` doesn't actually work, even when `length(enumerate(xs))` is known.","user":"U7HAYKY9X","ts":"1612857195.347900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mOv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I was also a little disappointed that "},{"type":"text","text":"Threads.@threads for (i, x) in enumerate(xs)","style":{"code":true}},{"type":"text","text":" doesn't actually work, even when "},{"type":"text","text":"length(enumerate(xs))","style":{"code":true}},{"type":"text","text":" is known."}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X","reactions":[{"name":"clap","users":["UP9P4JFNJ"],"count":1}]},{"client_msg_id":"5c01e72d-8a9a-45fb-964c-0992fed3907b","type":"message","text":"&gt; If we had an easy and threadsafe way to construct Dict, Array, Set and String …\nI have an experimental library <https://github.com/JuliaActors/Guards.jl|Guards.jl> based on <https://github.com/JuliaActors/Actors.jl|Actors.jl> going in that direction.","user":"UP9P4JFNJ","ts":"1612857482.348200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/4Z","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"If we had an easy and threadsafe way to construct Dict, Array, Set and String …"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I have an experimental library "},{"type":"link","url":"https://github.com/JuliaActors/Guards.jl","text":"Guards.jl"},{"type":"text","text":" based on "},{"type":"link","url":"https://github.com/JuliaActors/Actors.jl","text":"Actors.jl"},{"type":"text","text":" going in that direction."}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"9cce2a72-50c8-48e9-9f88-a7189a6acb90","type":"message","text":"performant thread safety on a datastructure is hard and (right now) semantically difficult to express in julia","user":"UH24GRBLL","ts":"1612858184.348500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fMm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"performant thread safety on a datastructure is hard and (right now) semantically difficult to express in julia"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X","reactions":[{"name":"+1","users":["UP9P4JFNJ"],"count":1}]},{"client_msg_id":"74e09c73-1684-481e-8cfa-a06629e9e4ce","type":"message","text":"right now you're basically stuck with locks or using something like Actors, which serializes/guards access, reducing throughput significantly","user":"UH24GRBLL","ts":"1612858220.348700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VppT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"right now you're basically stuck with locks or using something like Actors, which serializes/guards access, reducing throughput significantly"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"eaa25417-ca75-459f-8a31-4f6ff4e1b8d3","type":"message","text":"even if we have more performant thread safe basic data structures, I wouldn't go using them just for the hell of it - often, thread safety precludes a bunch of optimizations that you'd usually expect, like SIMD","user":"UH24GRBLL","ts":"1612858289.349000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"a6e","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"even if we have more performant thread safe basic data structures, I wouldn't go using them just for the hell of it - often, thread safety precludes a bunch of optimizations that you'd usually expect, like SIMD"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"08573ff2-a41a-4959-8770-e28799b43f73","type":"message","text":"so you have to be even more vigilant than usual when using them","user":"UH24GRBLL","ts":"1612858306.349200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rIM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so you have to be even more vigilant than usual when using them"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"2e9c1a79-2412-4863-a3d0-a5bfe099df21","type":"message","text":"What I miss right now is some *measurements* about all that. Because all of that is relative to an application. And I would like to have some curves quantifying the effects. Thus perhaps one could better choose the best approach for his application.\n\n(I’m an engineer and engineering handbooks are full of such curves illustrating trade-offs).","user":"UP9P4JFNJ","ts":"1612858554.349400","team":"T68168MUP","edited":{"user":"UP9P4JFNJ","ts":"1612858649.000000"},"blocks":[{"type":"rich_text","block_id":"dj7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What I miss right now is some "},{"type":"text","text":"measurements","style":{"bold":true}},{"type":"text","text":" about all that. Because all of that is relative to an application. And I would like to have some curves quantifying the effects. Thus perhaps one could better choose the best approach for his application.\n\n(I’m an engineer and engineering handbooks are full of such curves illustrating trade-offs)."}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"adde61fc-5cf4-47cd-95ab-e06cfbe1499a","type":"message","text":"I don't know of any measurements (about non-SIMD on thread safety..?) off the top of my head, but that's mainly because the semantics don't allow for it. If you e.g. lock single elements of an array, you can't SIMD because that spans multiple indices. If you lock the whole array, you don't have concurrent access, the very thing you wanted to do in the first place. Designing stuff that sits kind of in between is hard.","user":"UH24GRBLL","ts":"1612859407.349700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ayd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't know of any measurements (about non-SIMD on thread safety..?) off the top of my head, but that's mainly because the semantics don't allow for it. If you e.g. lock single elements of an array, you can't SIMD because that spans multiple indices. If you lock the whole array, you don't have concurrent access, the very thing you wanted to do in the first place. Designing stuff that sits kind of in between is hard."}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"7ae52363-9a6c-40d3-aef9-4b3db9a17ce0","type":"message","text":"The application is somewhat orthogonal to all that if the algorithms themselves disallow those optimizations that are only well-defined and well-behaved on code that guarantees serial consequentiality.","user":"UH24GRBLL","ts":"1612859462.349900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3+7m","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The application is somewhat orthogonal to all that if the algorithms themselves disallow those optimizations that are only well-defined and well-behaved on code that guarantees serial consequentiality."}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"816a99f8-1e36-48b3-ac74-5c60a6cb8b3a","type":"message","text":"The fundamental problem lies in the fact that currently, there is no way to express _how_ different variables/their memory are allowed to interact in a way that's transparent to the compiler (so called memory ordering)","user":"UH24GRBLL","ts":"1612859544.350100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2nhT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The fundamental problem lies in the fact that currently, there is no way to express "},{"type":"text","text":"how","style":{"italic":true}},{"type":"text","text":" different variables/their memory are allowed to interact in a way that's transparent to the compiler (so called memory ordering)"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"875f699d-159c-4fa1-bec9-dde7eb8e73d7","type":"message","text":"at the moment, it's (somewhat) assumed to be serial execution, which isn't the case for all code (which is why you have to be super careful with multithreaded code and all kinds of race conditions)","user":"UH24GRBLL","ts":"1612859615.350300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2Ici","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"at the moment, it's (somewhat) assumed to be serial execution, which isn't the case for all code (which is why you have to be super careful with multithreaded code and all kinds of race conditions)"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"76e3c158-5863-4ded-85a0-3dcd440c7cd9","type":"message","text":"&gt; I was also a little disappointed that Threads.@threads for (i, x) in enumerate(xs) doesn't actually work, even when length(enumerate(xs)) is known.\n<@U7HAYKY9X> FYI FLoops supports `enumerate` and a lot of other containers (strings, dicts, sets, many combinators in `Iterators`)","user":"UC7AF7NSU","ts":"1612859797.350500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6EKzX","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"I was also a little disappointed that Threads.@threads for (i, x) in enumerate(xs) doesn't actually work, even when length(enumerate(xs)) is known."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n"},{"type":"user","user_id":"U7HAYKY9X"},{"type":"text","text":" FYI FLoops supports "},{"type":"text","text":"enumerate","style":{"code":true}},{"type":"text","text":" and a lot of other containers (strings, dicts, sets, many combinators in "},{"type":"text","text":"Iterators","style":{"code":true}},{"type":"text","text":")"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"caea668c-2e91-4228-9c64-84a5ce97c621","type":"message","text":"Measurements would include\n• number of threads,\n• thread-safety approach (like single-threaded, actors, locks …)\n• --&gt; parallel portion (see <https://en.wikipedia.org/wiki/Amdahl%27s_law|Amdahl’s law>)\n• speedup\nThis gives you a design-space to choose an approach","user":"UP9P4JFNJ","ts":"1612859803.350700","team":"T68168MUP","edited":{"user":"UP9P4JFNJ","ts":"1612860466.000000"},"attachments":[{"image_url":"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ea/AmdahlsLaw.svg/1200px-AmdahlsLaw.svg.png","image_width":1200,"image_height":938,"image_bytes":76563,"title":"Amdahl's law","title_link":"https://en.wikipedia.org/wiki/Amdahl%27s_law","from_url":"https://en.wikipedia.org/wiki/Amdahl%27s_law","author_name":"Wikipedia","author_link":"https://en.wikipedia.org/","text":"In computer architecture, Amdahl's law (or Amdahl's argument) is a formula which gives the theoretical speedup in latency of the execution of a task at fixed workload that can be expected of a system whose resources are improved. It is named after computer scientist Gene Amdahl, and was presented at the AFIPS Spring Joint Computer Conference in 1967.\nAmdahl's law is often used in parallel computing to predict the theoretical speedup when using multiple processors. For example, if a program needs 20 hours to complete using a single thread, but a one-hour portion of the program cannot be parallelized, therefore only the remaining 19 hours (p = 0.95) of execution time can be parallelized, then regardless of how many threads are devoted to a parallelized execution of this program, the minimum execution time cannot be less than one hour. Hence, the theoretical speedup is limited to at most 20 times the single thread performance, \n  \n    \n      \n        \n          (\n          \n            \n              \n                \n                  1\n                  \n                    1\n                    −\n                    p\n                  \n                \n              \n            \n            =\n            20\n          \n          )\n        \n      \n    \n    {\\displaystyle \\left({\\dfrac {1}{1-p}}=20\\right)}\n  .","fallback":"wikipedia: Amdahl's law","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png","id":1,"original_url":"https://en.wikipedia.org/wiki/Amdahl%27s_law"}],"blocks":[{"type":"rich_text","block_id":"wtW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Measurements would include\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"number of threads,"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"thread-safety approach (like single-threaded, actors, locks …)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"--> parallel portion (see "},{"type":"link","url":"https://en.wikipedia.org/wiki/Amdahl%27s_law","text":"Amdahl’s law"},{"type":"text","text":")"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"speedup"}]}],"style":"bullet","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"This gives you a design-space to choose an approach"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"ba796910-7be2-4dcb-80d8-d17640e405ee","type":"message","text":"Basically if a parallel computation takes long enough (a high proportion), it should not matter much for parallel speedup whether you use actors, locks, STM … On the other extreme you won’t gain much with multithreading at all.\n\nDoing such measurements should be not too difficult and having some more benchmarking results and options would be useful.","user":"UP9P4JFNJ","ts":"1612861057.351100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0vh52","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Basically if a parallel computation takes long enough (a high proportion), it should not matter much for parallel speedup whether you use actors, locks, STM … On the other extreme you won’t gain much with multithreading at all.\n\nDoing such measurements should be not too difficult and having some more benchmarking results and options would be useful."}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"7b03a27b-87f6-449f-aa89-79afbf601ff4","type":"message","text":"I'm familiar with Amdahl's law and I don't think it applies here at all. it's on a different level of parallelism. the kinds of problems where contention matters are inherently slowed down by locks and serialization, reducing the parallel part of the fraction significantly.","user":"UH24GRBLL","ts":"1612861269.351300","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1612861389.000000"},"blocks":[{"type":"rich_text","block_id":"9oWB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm familiar with Amdahl's law and I don't think it applies here at all. it's on a different level of parallelism. the kinds of problems where contention matters are inherently slowed down by locks and serialization, reducing the parallel part of the fraction significantly."}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"9b23b2ca-a01c-4ad9-804b-1aadcc246fef","type":"message","text":"don’t you agree that on a level as the OP’s with 200ms parallel time between Dict access there is plenty of room for thread-safety mechanisms?\n\nI once did measurements with actors and it took less than 800 ns for a full message ping-pong.","user":"UP9P4JFNJ","ts":"1612861572.351600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fLIU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"don’t you agree that on a level as the OP’s with 200ms parallel time between Dict access there is plenty of room for thread-safety mechanisms?\n\nI once did measurements with actors and it took less than 800 ns for a full message ping-pong."}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"a9076d87-9a19-4ffd-933e-18bbd61e715b","type":"message","text":"What is the level in your opinion where Amdahl’s law doesn’t anymore apply?","user":"UP9P4JFNJ","ts":"1612861623.351800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"G++","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What is the level in your opinion where Amdahl’s law doesn’t anymore apply?"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"9aa0bc3c-3498-4f48-8595-5539093d7316","type":"message","text":"not at all - I think for the use case OP has where (if I understand correctly) each key in the dict is unique, you don't have contention anyway","user":"UH24GRBLL","ts":"1612861629.352000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MBqF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not at all - I think for the use case OP has where (if I understand correctly) each key in the dict is unique, you don't have contention anyway"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"5ead506f-9a26-4f32-b010-a43b4f3eb43f","type":"message","text":"but he had a thread collision, no?","user":"UP9P4JFNJ","ts":"1612861693.352200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MY7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but he had a thread collision, no?"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"b1cf566a-fde8-47d3-81fd-60aeee448319","type":"message","text":"it's not that it doesn't apply, it's that locks &amp; other synchronization measures by design reduce parallelism of your algorithm, making amdahl's law less effective","user":"UH24GRBLL","ts":"1612861710.352400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w2Uqq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's not that it doesn't apply, it's that locks & other synchronization measures by design reduce parallelism of your algorithm, making amdahl's law less effective"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"ef5e83c7-8393-4c69-95d1-2dbae128c97d","type":"message","text":"No, as I understood it they just wanted to do it faster","user":"UH24GRBLL","ts":"1612861736.352600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Obg0/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No, as I understood it they just wanted to do it faster"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"41fe902c-d877-469b-95a0-756c265e211a","type":"message","text":"they were just concerned that they may have a problem since it's multithreading after all (which isn't always true)","user":"UH24GRBLL","ts":"1612861765.352800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lYm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"they were just concerned that they may have a problem since it's multithreading after all (which isn't always true)"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"3a63f8d0-3d63-4178-8d48-a921e28a0c59","type":"message","text":"I didn't actually check for collisions, I just assumed that I would have a hash collision in the dict eventually, even with unique keys, and I was unsure how the Dict would handle that internally. It's probably not threadsafe","user":"U7HAYKY9X","ts":"1612861983.353000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1GUTK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I didn't actually check for collisions, I just assumed that I would have a hash collision in the dict eventually, even with unique keys, and I was unsure how the Dict would handle that internally. It's probably not threadsafe"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"c3674b3d-5516-4179-a2a7-9a1ba902469d","type":"message","text":"I agree that once you come to fine-grained parallelism, safe parallel access to shared data involves a significant overhead.","user":"UP9P4JFNJ","ts":"1612862000.353200","team":"T68168MUP","edited":{"user":"UP9P4JFNJ","ts":"1612862290.000000"},"blocks":[{"type":"rich_text","block_id":"sFcv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I agree that once you come to fine-grained parallelism, safe parallel access to shared data involves a significant overhead."}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"f4f8ce67-8ccd-4f1d-b89c-c38803299bf6","type":"message","text":"Sure, there are lots of knobs to turn, depending on different things. What surprises me is that there is no simple \"just do this in parallel\" option for building data structures. Similar to how you can do `Threads.@threads for ...` without worrying about the scheduler, there should at least be one way of doing `@threads Dict(zip(foo, bar))` in a threadsafe way without worrying about exactly how that is done.","user":"U7HAYKY9X","ts":"1612862100.353400","team":"T68168MUP","edited":{"user":"U7HAYKY9X","ts":"1612862117.000000"},"blocks":[{"type":"rich_text","block_id":"GMKG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sure, there are lots of knobs to turn, depending on different things. What surprises me is that there is no simple \"just do this in parallel\" option for building data structures. Similar to how you can do "},{"type":"text","text":"Threads.@threads for ...","style":{"code":true}},{"type":"text","text":" without worrying about the scheduler, there should at least be one way of doing "},{"type":"text","text":"@threads Dict(zip(foo, bar))","style":{"code":true}},{"type":"text","text":" in a threadsafe way without worrying about exactly how that is done."}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X","reactions":[{"name":"+1","users":["UP9P4JFNJ"],"count":1}]},{"client_msg_id":"2ccd0f02-5964-4a8e-b53d-454a05871ca4","type":"message","text":"hash collisions are an orthogonal problem to thread safety though","user":"UH24GRBLL","ts":"1612862114.353600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EEn6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hash collisions are an orthogonal problem to thread safety though"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"db480081-74d6-4d1a-a01e-967a115ef02a","type":"message","text":"see <https://discourse.julialang.org/t/can-dicts-be-threadsafe/27172>","user":"UP9P4JFNJ","ts":"1612862121.353900","team":"T68168MUP","attachments":[{"service_name":"JuliaLang","title":"Can dicts be threadsafe?","title_link":"https://discourse.julialang.org/t/can-dicts-be-threadsafe/27172","text":"dict = Dict{Int64,Vector{Float64}}() nentries = 5e5 Threads.@threads for n in 1:nentries dict[n] = [rand() for i in 1:100] end @assert length(dict) == nentries The assertion fails for me in Julia 1.1.0, as the dict is shorter than the number of entries. Is there a way to safely use dicts with threads?","fallback":"JuliaLang: Can dicts be threadsafe?","thumb_url":"https://aws1.discourse-cdn.com/business5/uploads/julialang/original/2X/1/12829a7ba92b924d4ce81099cbf99785bee9b405.png","fields":[{"title":"Reading time","value":"2 mins :clock2:","short":true},{"title":"Likes","value":"28 :heart:","short":true}],"ts":1565003251,"from_url":"https://discourse.julialang.org/t/can-dicts-be-threadsafe/27172","thumb_width":408,"thumb_height":263,"service_icon":"https://aws1.discourse-cdn.com/business5/uploads/julialang/optimized/2X/6/6ca888e296f59ca2a599807f7d5edd489e3d1829_2_180x180.png","id":1,"original_url":"https://discourse.julialang.org/t/can-dicts-be-threadsafe/27172"}],"blocks":[{"type":"rich_text","block_id":"9iyD+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"see "},{"type":"link","url":"https://discourse.julialang.org/t/can-dicts-be-threadsafe/27172"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"9fd81066-d18f-4e4e-be31-0a2154f79964","type":"message","text":"Even if it just creates a lock in the loop and passes every iteration through it before going to the dict.","user":"U7HAYKY9X","ts":"1612862297.354400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"btwNh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Even if it just creates a lock in the loop and passes every iteration through it before going to the dict."}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"9b407979-fd3a-4124-9fbc-89d8be90a0ed","type":"message","text":"therefore I would like to have STM as mentioned before.","user":"UP9P4JFNJ","ts":"1612862393.354600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4ZIM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"therefore I would like to have STM as mentioned before."}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"f14c567b-889b-4d32-b436-1f487ce5a882","type":"message","text":"the semantics of STM are not fine grained enough","user":"UH24GRBLL","ts":"1612862671.354800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ew+6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the semantics of STM are not fine grained enough"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"2550c6dd-ed8d-421c-b45d-ae385d079e6d","type":"message","text":"plus you still have the synchronization overhead of the log","user":"UH24GRBLL","ts":"1612862688.355000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UEz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"plus you still have the synchronization overhead of the log"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"0724510f-9548-4461-9a87-b0c6635f5c7b","type":"message","text":"you really want to be able to specify how variables are allowed to interact memory wise","user":"UH24GRBLL","ts":"1612862703.355200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"idQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you really want to be able to specify how variables are allowed to interact memory wise"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"89f73647-2f1a-4671-8f19-0524367506bd","type":"message","text":"<https://docs.google.com/document/d/e/2PACX-1vT7Ibthj9WyM8s5bcQbiKsVK6MtvzqmnPFMy-bcjZLlbqv55a0_sTJ99AkbvPIZk3t7MbhZ57NzaIzC/pub>","user":"UH24GRBLL","ts":"1612862712.355400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"H/i0","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://docs.google.com/document/d/e/2PACX-1vT7Ibthj9WyM8s5bcQbiKsVK6MtvzqmnPFMy-bcjZLlbqv55a0_sTJ99AkbvPIZk3t7MbhZ57NzaIzC/pub"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X","reactions":[{"name":"+1","users":["UP9P4JFNJ"],"count":1}]},{"client_msg_id":"a66bb4b7-485e-47f1-ba41-ac46a7e5daee","type":"message","text":"by specifying memory ordering, you can (if you do it right) avoid synchronization at all","user":"UH24GRBLL","ts":"1612862763.355600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VYC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"by specifying memory ordering, you can (if you do it right) avoid synchronization at all"}]}]}],"thread_ts":"1612806474.290100","parent_user_id":"U7HAYKY9X"}]