[{"client_msg_id":"623d37f8-cf3c-43eb-a328-2531174a57e2","type":"message","text":"I have a C program (first attempt was an implementation in MATLAB, but the execution took forever) which I would like to translate to Julia and compare the performance. The C program has two linked lists A and B. Each time step, A is extended by new elements, the complete list A is processed, elements of A are modified and some elements may be moved to B.  What would be the Julia approach not only to make it just work but to get high performance?  As I understand linked lists suffer from random heap access which may degrade the performance due to cache misses..?","user":"URPFQPSEQ","ts":"1611216609.024400","team":"T68168MUP","edited":{"user":"URPFQPSEQ","ts":"1611216659.000000"},"blocks":[{"type":"rich_text","block_id":"slJ0n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have a C program (first attempt was an implementation in MATLAB, but the execution took forever) which I would like to translate to Julia and compare the performance. The C program has two linked lists A and B. Each time step, A is extended by new elements, the complete list A is processed, elements of A are modified and some elements may be moved to B.  What would be the Julia approach not only to make it just work but to get high performance?  As I understand linked lists suffer from random heap access which may degrade the performance due to cache misses..?"}]}]}],"thread_ts":"1611216609.024400","reply_count":21,"reply_users_count":3,"latest_reply":"1611219609.039800","reply_users":["U7HAYKY9X","URPFQPSEQ","USU9FRPEU"],"subscribed":false},{"client_msg_id":"4112a60a-8331-43ac-a214-d8baa10c6f7e","type":"message","text":"Any reason these lists can't just be arrays?","user":"U7HAYKY9X","ts":"1611216790.024700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5AS0m","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Any reason these lists can't just be arrays?"}]}]}],"thread_ts":"1611216609.024400","parent_user_id":"URPFQPSEQ","reactions":[{"name":"+1","users":["U7K185TUN"],"count":1}]},{"client_msg_id":"33302154-8749-4e3a-8b1a-5ec474f3d169","type":"message","text":"that's what I thought first... but if I want to move random elements from A to B, is this then not creating new arrays each time?","user":"URPFQPSEQ","ts":"1611217210.025000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"e0pUB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's what I thought first... but if I want to move random elements from A to B, is this then not creating new arrays each time?"}]}]}],"thread_ts":"1611216609.024400","parent_user_id":"URPFQPSEQ"},{"client_msg_id":"0589251d-fcd7-45bd-9164-c49ac0e6fb29","type":"message","text":"Nope. The idea about linked lists is that you can insert or remove elements in the middle of the list in constant time.","user":"U7HAYKY9X","ts":"1611217349.025200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EnQj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Nope. The idea about linked lists is that you can insert or remove elements in the middle of the list in constant time."}]}]}],"thread_ts":"1611216609.024400","parent_user_id":"URPFQPSEQ"},{"client_msg_id":"8972fded-33f6-4eb1-9e60-52dd4dc6f6c4","type":"message","text":"Ok, but if the elements of A are in an array instead of a linked list:\nA=[A1...Ak...An]\nand I want to remove a random Ak then the a new array has to be created and all elements except Ak need to be copied to the new array...\n\n...or there is a more clever way of faking a linked list with an array, but instead of pointers I put the array index of the next element as additional element field... and never delete the elements.. with the downside of using memory even for elements which I don't need anymore?","user":"URPFQPSEQ","ts":"1611217841.026300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kub","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok, but if the elements of A are in an array instead of a linked list:\nA=[A1...Ak...An]\nand I want to remove a random Ak then the a new array has to be created and all elements except Ak need to be copied to the new array...\n\n...or there is a more clever way of faking a linked list with an array, but instead of pointers I put the array index of the next element as additional element field... and never delete the elements.. with the downside of using memory even for elements which I don't need anymore?"}]}]}],"thread_ts":"1611216609.024400","parent_user_id":"URPFQPSEQ"},{"client_msg_id":"7d370a41-4217-482e-9440-4d5025daa2a6","type":"message","text":"Does A have to be indexed?","user":"USU9FRPEU","ts":"1611217942.026500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"42F","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does A have to be indexed?"}]}]}],"thread_ts":"1611216609.024400","parent_user_id":"URPFQPSEQ"},{"client_msg_id":"b401585c-8542-4424-915e-ad047e6b8258","type":"message","text":"You may be interested in <https://juliacollections.github.io/DataStructures.jl>","user":"USU9FRPEU","ts":"1611218160.026700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1lC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You may be interested in "},{"type":"link","url":"https://juliacollections.github.io/DataStructures.jl"}]}]}],"thread_ts":"1611216609.024400","parent_user_id":"URPFQPSEQ"},{"client_msg_id":"5d2f2a74-3bd2-493d-9185-c55dd989608b","type":"message","text":"some of this sounds like a plain `Dict`  or a `Set` could be useful","user":"USU9FRPEU","ts":"1611218182.027100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SJqm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"some of this sounds like a plain "},{"type":"text","text":"Dict","style":{"code":true}},{"type":"text","text":"  or a "},{"type":"text","text":"Set","style":{"code":true}},{"type":"text","text":" could be useful"}]}]}],"thread_ts":"1611216609.024400","parent_user_id":"URPFQPSEQ"},{"client_msg_id":"86179440-8eac-4cf6-a162-8132450e2c67","type":"message","text":"Each step all elements of A are processed. I do not need indexing the elements","user":"URPFQPSEQ","ts":"1611218310.029600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"49/kv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Each step all elements of A are processed. I do not need indexing the elements"}]}]}],"thread_ts":"1611216609.024400","parent_user_id":"URPFQPSEQ"},{"client_msg_id":"515cd1fa-67b5-428e-8aff-76a0e8e692da","type":"message","text":"a `Deque` may be what you are looking for... basically you loop and use `popfirst!` to pop stuff off `A` and then you either `push!` it back on to `A` or to `B`","user":"USU9FRPEU","ts":"1611218610.034200","team":"T68168MUP","edited":{"user":"USU9FRPEU","ts":"1611218696.000000"},"blocks":[{"type":"rich_text","block_id":"jBYL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"a "},{"type":"text","text":"Deque","style":{"code":true}},{"type":"text","text":" may be what you are looking for... basically you loop and use "},{"type":"text","text":"popfirst!","style":{"code":true}},{"type":"text","text":" to pop stuff off "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" and then you either "},{"type":"text","text":"push!","style":{"code":true}},{"type":"text","text":" it back on to "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" or to "},{"type":"text","text":"B","style":{"code":true}}]}]}],"thread_ts":"1611216609.024400","parent_user_id":"URPFQPSEQ"},{"client_msg_id":"e67bca71-54f7-4ff3-818f-16083a3d9d5b","type":"message","text":"or rather `popfirst!`","user":"USU9FRPEU","ts":"1611218661.035000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qu+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or rather "},{"type":"text","text":"popfirst!","style":{"code":true}}]}]}],"thread_ts":"1611216609.024400","parent_user_id":"URPFQPSEQ"},{"client_msg_id":"8fd897f8-e264-442f-b23f-853f94cb0e00","type":"message","text":"<https://juliacollections.github.io/DataStructures.jl/latest/deque/>","user":"USU9FRPEU","ts":"1611218710.035400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"S224","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://juliacollections.github.io/DataStructures.jl/latest/deque/"}]}]}],"thread_ts":"1611216609.024400","parent_user_id":"URPFQPSEQ"},{"client_msg_id":"f6823320-fdbc-49d1-8825-f5ab85cf7d3d","type":"message","text":"Deque only operates on the border elements..I can't remove elements from the middle","user":"URPFQPSEQ","ts":"1611218863.036800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PKYd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Deque only operates on the border elements..I can't remove elements from the middle"}]}]}],"thread_ts":"1611216609.024400","parent_user_id":"URPFQPSEQ"},{"client_msg_id":"d0008adc-984f-4bb7-9ed9-3eded92a999c","type":"message","text":"You are popping everything off to examine it and pushing on to the back","user":"USU9FRPEU","ts":"1611218902.037300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gXBh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You are popping everything off to examine it and pushing on to the back"}]}]}],"thread_ts":"1611216609.024400","parent_user_id":"URPFQPSEQ"},{"client_msg_id":"e67c1e24-740c-4509-ab10-5e7509f21b73","type":"message","text":"```julia&gt; A = collect(1:10)\n10-element Array{Int64,1}:\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n\njulia&gt; v = popfirst!(A)\n1\n\njulia&gt; A\n9-element Array{Int64,1}:\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n\njulia&gt; push!(A,v)\n10-element Array{Int64,1}:\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n  1```","user":"USU9FRPEU","ts":"1611218936.037700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UHY","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> A = collect(1:10)\n10-element Array{Int64,1}:\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n\njulia> v = popfirst!(A)\n1\n\njulia> A\n9-element Array{Int64,1}:\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n\njulia> push!(A,v)\n10-element Array{Int64,1}:\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n  1"}]}]}],"thread_ts":"1611216609.024400","parent_user_id":"URPFQPSEQ"},{"client_msg_id":"0f71e476-6671-4175-9647-57041986d87e","type":"message","text":"a ok.. when I push back i can push back either to A or B","user":"URPFQPSEQ","ts":"1611218937.037900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+pkY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"a ok.. when I push back i can push back either to A or B"}]}]}],"thread_ts":"1611216609.024400","parent_user_id":"URPFQPSEQ"},{"client_msg_id":"95bce55d-5a06-48a7-ae7b-961768c82d7d","type":"message","text":"You can actually do this with a normal `Array`, but `Deque` is faster","user":"USU9FRPEU","ts":"1611218961.038100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"z/Q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can actually do this with a normal "},{"type":"text","text":"Array","style":{"code":true}},{"type":"text","text":", but "},{"type":"text","text":"Deque","style":{"code":true}},{"type":"text","text":" is faster"}]}]}],"thread_ts":"1611216609.024400","parent_user_id":"URPFQPSEQ"},{"client_msg_id":"d26aa53f-bbf1-4698-bbbe-87b2327920d1","type":"message","text":"Basically `Deque` is backed by an Array, but it just has a cursor pointing to the front and back","user":"USU9FRPEU","ts":"1611218988.038300","team":"T68168MUP","edited":{"user":"USU9FRPEU","ts":"1611219042.000000"},"blocks":[{"type":"rich_text","block_id":"x/PI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Basically "},{"type":"text","text":"Deque","style":{"code":true}},{"type":"text","text":" is backed by an Array, but it just has a cursor pointing to the front and back"}]}]}],"thread_ts":"1611216609.024400","parent_user_id":"URPFQPSEQ"},{"client_msg_id":"c83f9df0-0525-400d-b780-8a07fb43b110","type":"message","text":"```julia&gt; A = collect(1:10)\n10-element Array{Int64,1}:\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n\njulia&gt; B = []\nAny[]\n\njulia&gt; for i=1:10\n           v = popfirst!(A)\n           isodd(v) ? push!(A,v) : push!(B,v)\n       end\n\njulia&gt; A\n5-element Array{Int64,1}:\n 1\n 3\n 5\n 7\n 9\n\njulia&gt; B\n5-element Array{Any,1}:\n  2\n  4\n  6\n  8\n 10```","user":"USU9FRPEU","ts":"1611219127.038600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wzjvp","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> A = collect(1:10)\n10-element Array{Int64,1}:\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n\njulia> B = []\nAny[]\n\njulia> for i=1:10\n           v = popfirst!(A)\n           isodd(v) ? push!(A,v) : push!(B,v)\n       end\n\njulia> A\n5-element Array{Int64,1}:\n 1\n 3\n 5\n 7\n 9\n\njulia> B\n5-element Array{Any,1}:\n  2\n  4\n  6\n  8\n 10"}]}]}],"thread_ts":"1611216609.024400","parent_user_id":"URPFQPSEQ"},{"client_msg_id":"bdd11cf6-3ebd-4969-95e0-7dbd46aff62c","type":"message","text":"OK this makes sense... so I can try to implement it with\n1. Deque\n2. Linked Lists (<https://github.com/JuliaCollections/DataStructures.jl/blob/master/docs/src/linked_list.md>)\nand compare them.. probably Deque is faster?","user":"URPFQPSEQ","ts":"1611219222.038800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ap+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"OK this makes sense... so I can try to implement it with\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Deque"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Linked Lists ("},{"type":"link","url":"https://github.com/JuliaCollections/DataStructures.jl/blob/master/docs/src/linked_list.md"},{"type":"text","text":")"}]}],"style":"ordered","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"and compare them.. probably Deque is faster?"}]}]}],"thread_ts":"1611216609.024400","parent_user_id":"URPFQPSEQ"},{"client_msg_id":"dd6a4451-357b-4914-a03c-a176ca6e7cc9","type":"message","text":"You might even want to look at `CircularDeque`","user":"USU9FRPEU","ts":"1611219287.039000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"URJj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You might even want to look at "},{"type":"text","text":"CircularDeque","style":{"code":true}}]}]}],"thread_ts":"1611216609.024400","parent_user_id":"URPFQPSEQ"},{"client_msg_id":"fd1733ee-2e16-422e-80a7-30f23f9dc3c6","type":"message","text":"Thanks :slightly_smiling_face:","user":"URPFQPSEQ","ts":"1611219609.039800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dfW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1611216609.024400","parent_user_id":"URPFQPSEQ"}]