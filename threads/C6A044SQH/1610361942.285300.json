[{"client_msg_id":"aa5d5ba4-65de-491a-b959-7b9681a7bcc6","type":"message","text":"Hi everyone,\nI have a very basic question, but one that has been bothering me for a while.\nJulia being column major order I would expect this:\n```function r_col_loop(x::Array{T}) where T\n    N = size(x,2)\n    r = Array{T,1}(undef,N)\n\n    @inbounds for i = 1:N\n        x2 = 0.0\n        for dim = 1:3\n            x2 += x[dim, i]^2\n        end\n        r[i] = √( x2 )\n    end\n    return r\nend```\nto be faster than this:\n```function r_row_loop(x::Array{T}) where T\n    N = size(x,1)\n    r = Array{T,1}(undef,N)\n\n    @inbounds for i = 1:N\n        x2 = 0.0\n        for dim = 1:3\n            x2 += x[i, dim]^2\n        end\n        r[i] = √( x2 )\n    end\n    return r\nend```\nbut when I time it I get:\n```x_row = rand(1_000_000, 3)\n@btime r_row_loop($x_row)\n    1.770 ms (2 allocations: 7.63 MiB)\n\nx_col = rand(3, 1_000_000)\n@btime r_col_loop($x_col)\n    1.965 ms (2 allocations: 7.63 MiB)```\nThe difference is even larger when I use broadcasting with `@views`:\n```function r_row_dot(x::Array{T}) where T\n    @views @. √( x[:,1]^2 + x[:,2]^2 + x[:,3]^2)\nend\n@btime r_row_dot($x_row)\n    1.536 ms (2 allocations: 7.63 MiB)\n\nfunction r_col_dot(x::Array{T}) where T\n    @views @. √( x[1,:]^2 + x[2,:]^2 + x[3,:]^2)\nend\n@btime r_col_dot($x_col)\n    1.933 ms (2 allocations: 7.63 MiB)```\nI'm obviously missing/misunderstanding a crucial part here, could someone please help me out?","user":"U0104GF2B6F","ts":"1610361942.285300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QxV6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi everyone,\nI have a very basic question, but one that has been bothering me for a while.\nJulia being column major order I would expect this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function r_col_loop(x::Array{T}) where T\n    N = size(x,2)\n    r = Array{T,1}(undef,N)\n\n    @inbounds for i = 1:N\n        x2 = 0.0\n        for dim = 1:3\n            x2 += x[dim, i]^2\n        end\n        r[i] = √( x2 )\n    end\n    return r\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"to be faster than this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function r_row_loop(x::Array{T}) where T\n    N = size(x,1)\n    r = Array{T,1}(undef,N)\n\n    @inbounds for i = 1:N\n        x2 = 0.0\n        for dim = 1:3\n            x2 += x[i, dim]^2\n        end\n        r[i] = √( x2 )\n    end\n    return r\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"but when I time it I get:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"x_row = rand(1_000_000, 3)\n@btime r_row_loop($x_row)\n    1.770 ms (2 allocations: 7.63 MiB)\n\nx_col = rand(3, 1_000_000)\n@btime r_col_loop($x_col)\n    1.965 ms (2 allocations: 7.63 MiB)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"The difference is even larger when I use broadcasting with "},{"type":"text","text":"@views","style":{"code":true}},{"type":"text","text":":\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function r_row_dot(x::Array{T}) where T\n    @views @. √( x[:,1]^2 + x[:,2]^2 + x[:,3]^2)\nend\n@btime r_row_dot($x_row)\n    1.536 ms (2 allocations: 7.63 MiB)\n\nfunction r_col_dot(x::Array{T}) where T\n    @views @. √( x[1,:]^2 + x[2,:]^2 + x[3,:]^2)\nend\n@btime r_col_dot($x_col)\n    1.933 ms (2 allocations: 7.63 MiB)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I'm obviously missing/misunderstanding a crucial part here, could someone please help me out?"}]}]}],"thread_ts":"1610361942.285300","reply_count":13,"reply_users_count":4,"latest_reply":"1610370511.309100","reply_users":["UH24GRBLL","U7HAYKY9X","U0104GF2B6F","UD0NS8PDF"],"subscribed":false},{"client_msg_id":"e912d90c-fbd0-420c-8d8f-ebff09196454","type":"message","text":"<https://docs.julialang.org/en/v1/manual/performance-tips/#man-performance-column-major>","user":"UH24GRBLL","ts":"1610362090.285400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/jqq","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://docs.julialang.org/en/v1/manual/performance-tips/#man-performance-column-major"}]}]}],"thread_ts":"1610361942.285300","parent_user_id":"U0104GF2B6F"},{"client_msg_id":"28d8f5ff-bad6-43ca-b6ac-9d5cd27417b9","type":"message","text":"since you only have 3 elements in one of your dimensions, I suspect that each cache line will still cover neighboring columns, allowing you to somewhat benefit","user":"UH24GRBLL","ts":"1610362201.285700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hGG7W","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"since you only have 3 elements in one of your dimensions, I suspect that each cache line will still cover neighboring columns, allowing you to somewhat benefit"}]}]}],"thread_ts":"1610361942.285300","parent_user_id":"U0104GF2B6F","reactions":[{"name":"+1","users":["U0104GF2B6F","U011LUQ182G"],"count":2}]},{"client_msg_id":"b4ff45c6-19e6-4b86-bfd9-5de8c9bc39d8","type":"message","text":"For me, r_col_loop is faster, by a little bit. Are you sure you didn't switch the two accidentally?","user":"U7HAYKY9X","ts":"1610362390.287400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"M7gh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For me, r_col_loop is faster, by a little bit. Are you sure you didn't switch the two accidentally?"}]}]}],"thread_ts":"1610361942.285300","parent_user_id":"U0104GF2B6F"},{"client_msg_id":"f2a05d46-7164-4f1b-bc8c-5b6dd001f1a7","type":"message","text":"I'm pretty sure I didn't, for me r_row_loop is consistently faster, but the difference ranges between roughly 5-15%","user":"U0104GF2B6F","ts":"1610362578.288600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wmFv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm pretty sure I didn't, for me r_row_loop is consistently faster, but the difference ranges between roughly 5-15%"}]}]}],"thread_ts":"1610361942.285300","parent_user_id":"U0104GF2B6F"},{"client_msg_id":"d9a2e914-fb5c-4c51-8757-b62097e80bd9","type":"message","text":"do you still observe the faster speed with a square matrix instead of the lopsided one?","user":"UH24GRBLL","ts":"1610362762.288800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j5fE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"do you still observe the faster speed with a square matrix instead of the lopsided one?"}]}]}],"thread_ts":"1610361942.285300","parent_user_id":"U0104GF2B6F"},{"client_msg_id":"3c453e96-7ba7-452a-8b23-e9bc58c9aba0","type":"message","text":"No, in that case r_col_loop is faster","user":"U0104GF2B6F","ts":"1610362903.289000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HrRE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No, in that case r_col_loop is faster"}]}]}],"thread_ts":"1610361942.285300","parent_user_id":"U0104GF2B6F"},{"client_msg_id":"9be30a24-036d-424c-805c-39bba2843170","type":"message","text":"then it's most likely caching effects you're measuring","user":"UH24GRBLL","ts":"1610362935.289200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d4I0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"then it's most likely caching effects you're measuring"}]}]}],"thread_ts":"1610361942.285300","parent_user_id":"U0104GF2B6F"},{"client_msg_id":"8c309893-e98f-4d3e-a3de-813d94ea3f27","type":"message","text":"Perfect, thanks a lot for the help!","user":"U0104GF2B6F","ts":"1610362959.289400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"r3Ez","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Perfect, thanks a lot for the help!"}]}]}],"thread_ts":"1610361942.285300","parent_user_id":"U0104GF2B6F"},{"client_msg_id":"5b039b21-7751-4258-90cd-7ab3660fb327","type":"message","text":"One potential advantage of row_loop is that if can be more simd-friendly, along `i` which has stride 1, even if it’s less cache-friendly. Unrolling the `dims` loop helps:\n```julia&gt; function r_row_loop_3(x::Array{T}) where T\n           N = size(x,1)\n           r = Array{T}(undef, N)\n           @inbounds for i in 1:N\n               r[i] = x[i, 1]^2 + x[i, 2]^2 + x[i, 3]^2 |&gt; sqrt\n           end\n           return r\n       end;\n\njulia&gt; r_row_loop_3(x_row) ≈ r_row_loop(x_row)\ntrue\n\njulia&gt; @btime r_row_loop_3($(Float32.(x_row)));\n  474.483 μs (2 allocations: 3.81 MiB)\n\njulia&gt; @btime r_row_loop($(Float32.(x_row))); # changed 0.0 -&gt; zero(T)\n  898.867 μs (2 allocations: 3.81 MiB)\n\njulia&gt; @btime r_col_loop($(Float32.(x_col)));\n  997.677 μs (2 allocations: 3.81 MiB)```\nMore dramatic in Float32 than 64. No similar benefit for r_col_loop.","user":"UD0NS8PDF","ts":"1610369732.307600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VXyU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"One potential advantage of row_loop is that if can be more simd-friendly, along "},{"type":"text","text":"i","style":{"code":true}},{"type":"text","text":" which has stride 1, even if it’s less cache-friendly. Unrolling the "},{"type":"text","text":"dims","style":{"code":true}},{"type":"text","text":" loop helps:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function r_row_loop_3(x::Array{T}) where T\n           N = size(x,1)\n           r = Array{T}(undef, N)\n           @inbounds for i in 1:N\n               r[i] = x[i, 1]^2 + x[i, 2]^2 + x[i, 3]^2 |> sqrt\n           end\n           return r\n       end;\n\njulia> r_row_loop_3(x_row) ≈ r_row_loop(x_row)\ntrue\n\njulia> @btime r_row_loop_3($(Float32.(x_row)));\n  474.483 μs (2 allocations: 3.81 MiB)\n\njulia> @btime r_row_loop($(Float32.(x_row))); # changed 0.0 -> zero(T)\n  898.867 μs (2 allocations: 3.81 MiB)\n\njulia> @btime r_col_loop($(Float32.(x_col)));\n  997.677 μs (2 allocations: 3.81 MiB)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"More dramatic in Float32 than 64. No similar benefit for r_col_loop."}]}]}],"thread_ts":"1610361942.285300","parent_user_id":"U0104GF2B6F"},{"client_msg_id":"d0284e0b-ff87-47d0-85eb-e5618cfa77f4","type":"message","text":"there's no benefit for the column version because it's too short - 3 elements is not enough to benefit","user":"UH24GRBLL","ts":"1610370108.307800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1KV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there's no benefit for the column version because it's too short - 3 elements is not enough to benefit"}]}]}],"thread_ts":"1610361942.285300","parent_user_id":"U0104GF2B6F"},{"client_msg_id":"f3b5be69-a68e-4075-829b-4ea3b53a71da","type":"message","text":"Hmm. Maybe you are saying that 3 is too short for simd, which I agree with.","user":"UD0NS8PDF","ts":"1610370444.308700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aGc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmm. Maybe you are saying that 3 is too short for simd, which I agree with."}]}]}],"thread_ts":"1610361942.285300","parent_user_id":"U0104GF2B6F"},{"client_msg_id":"0a7fd9c4-6df1-44ba-a9f9-d2a6be27aeec","type":"message","text":"yes","user":"UH24GRBLL","ts":"1610370487.308900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"E65iF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes"}]}]}],"thread_ts":"1610361942.285300","parent_user_id":"U0104GF2B6F"},{"client_msg_id":"1393f33d-b839-4704-a7a0-c393ac383dd3","type":"message","text":"you could underload the vectors, but loading them is slower than just manipulating the three elements directly","user":"UH24GRBLL","ts":"1610370511.309100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XlcT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you could underload the vectors, but loading them is slower than just manipulating the three elements directly"}]}]}],"thread_ts":"1610361942.285300","parent_user_id":"U0104GF2B6F"}]