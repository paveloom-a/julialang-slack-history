[{"client_msg_id":"6b08ee53-920f-4b7b-b8bf-310a912a5169","type":"message","text":"Is there a way to use `map`  w/  `enumerate`  such that the original collection type is returned? E.g.\n```A = (a = 1, b = 2.0, c = 4.0)\n\nB = map(A) do _a\n    _a\nend # NamedTuple{(:a, :b, :c),Tuple{Int64,Float64,Float64}}\n\nB2 = map(enumerate(A)) do (idx,_a)\n        _a\nend #Array{Real,1}```","user":"UP95S4864","ts":"1616429935.397100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Aci","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a way to use "},{"type":"text","text":"map","style":{"code":true}},{"type":"text","text":"  w/  "},{"type":"text","text":"enumerate","style":{"code":true}},{"type":"text","text":"  such that the original collection type is returned? E.g.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"A = (a = 1, b = 2.0, c = 4.0)\n\nB = map(A) do _a\n    _a\nend # NamedTuple{(:a, :b, :c),Tuple{Int64,Float64,Float64}}\n\nB2 = map(enumerate(A)) do (idx,_a)\n        _a\nend #Array{Real,1}"}]}]}],"thread_ts":"1616429935.397100","reply_count":1,"reply_users_count":1,"latest_reply":"1616430369.397700","reply_users":["U7HAYKY9X"],"subscribed":false},{"client_msg_id":"5f16a57e-4618-4a8e-818d-6498c8f82723","type":"message","text":"Not that I'm aware of. Tuple is special cased for map, I think, to make it type stable. You can always use `Iterators.map` (on Julia 1.6) or a generator expression, and build a Tuple from that. But I don't think the compiler will be clever enough to realize it's type stable","user":"U7HAYKY9X","ts":"1616430369.397700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C7w","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not that I'm aware of. Tuple is special cased for map, I think, to make it type stable. You can always use "},{"type":"text","text":"Iterators.map","style":{"code":true}},{"type":"text","text":" (on Julia 1.6) or a generator expression, and build a Tuple from that. But I don't think the compiler will be clever enough to realize it's type stable"}]}]}],"thread_ts":"1616429935.397100","parent_user_id":"UP95S4864"}]