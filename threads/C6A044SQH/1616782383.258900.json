[{"client_msg_id":"c5d51e44-36f4-4197-8b09-9b1098ec679d","type":"message","text":"I'm stumped. Why do these identical functions work differently? One accepts the symbol while the other throws an error.\n\nThis one works when I call `print_string_only(:Hi)`\n```function print_string_only(str::String)\n    println(str)\nend```\n`Output: Hi`\n\n\nThis one doesn't  work with call `print_stri_only(:Hi)`\n```function print_stri_only(str::String)\n    println(str)\nend```\n\nand gives me this error instead\n```ERROR: MethodError: no method matching print_stri_only(::Symbol)\nClosest candidates are:\n print_stri_only(::String) at REPL[138]:1\nStacktrace:\n[1] top-level scope at REPL[140]:1```\n\nUpdate: I think I may have at one point specified type Symbol for the first function. In doing so, even after now specifying type String, it will keep the ability to accept symbols even if I then change it to type String. Should this be happening? If so, why does this happen?","user":"U01QJ915TFD","ts":"1616782383.258900","team":"T68168MUP","edited":{"user":"U01QJ915TFD","ts":"1616783993.000000"},"blocks":[{"type":"rich_text","block_id":"TfnTd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm stumped. Why do these identical functions work differently? One accepts the symbol while the other throws an error.\n\nThis one works when I call "},{"type":"text","text":"print_string_only(:Hi)","style":{"code":true}},{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function print_string_only(str::String)\n    println(str)\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Output: Hi","style":{"code":true}},{"type":"text","text":"\n\n\nThis one doesn't  work with call "},{"type":"text","text":"print_stri_only(:Hi)","style":{"code":true}},{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function print_stri_only(str::String)\n    println(str)\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n\nand gives me this error instead\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"ERROR: MethodError: no method matching print_stri_only(::Symbol)\nClosest candidates are:\n print_stri_only(::String) at REPL[138]:1\nStacktrace:\n[1] top-level scope at REPL[140]:1"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n\nUpdate: I think I may have at one point specified type Symbol for the first function. In doing so, even after now specifying type String, it will keep the ability to accept symbols even if I then change it to type String. Should this be happening? If so, why does this happen?"}]}]}],"thread_ts":"1616782383.258900","reply_count":43,"reply_users_count":3,"latest_reply":"1616786206.270400","reply_users":["UH9KWTTD3","U01FKQQ7J0J","U01QJ915TFD"],"is_locked":false,"subscribed":false},{"client_msg_id":"ea19e890-5e08-4a2c-8503-f69b28531937","type":"message","text":"Both give the same error for me:\n```julia&gt; print_string_only(str::String) = println(str)\nprint_string_only (generic function with 1 method)\n\njulia&gt; print_stri_only(str::String) = println(str)\nprint_stri_only (generic function with 1 method)\n\njulia&gt; print_string_only(:Hi)\nERROR: MethodError: no method matching print_string_only(::Symbol)\nClosest candidates are:\n  print_string_only(::String) at REPL[2]:1\nStacktrace:\n [1] top-level scope\n   @ REPL[4]:1\n\njulia&gt; print_stri_only(:Hi)\nERROR: MethodError: no method matching print_stri_only(::Symbol)\nClosest candidates are:\n  print_stri_only(::String) at REPL[3]:1\nStacktrace:\n [1] top-level scope\n   @ REPL[5]:1```","user":"UH9KWTTD3","ts":"1616783863.259300","team":"T68168MUP","edited":{"user":"UH9KWTTD3","ts":"1616783870.000000"},"blocks":[{"type":"rich_text","block_id":"PNcH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Both give the same error for me:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> print_string_only(str::String) = println(str)\nprint_string_only (generic function with 1 method)\n\njulia> print_stri_only(str::String) = println(str)\nprint_stri_only (generic function with 1 method)\n\njulia> print_string_only(:Hi)\nERROR: MethodError: no method matching print_string_only(::Symbol)\nClosest candidates are:\n  print_string_only(::String) at REPL[2]:1\nStacktrace:\n [1] top-level scope\n   @ REPL[4]:1\n\njulia> print_stri_only(:Hi)\nERROR: MethodError: no method matching print_stri_only(::Symbol)\nClosest candidates are:\n  print_stri_only(::String) at REPL[3]:1\nStacktrace:\n [1] top-level scope\n   @ REPL[5]:1"}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"e216f65a-3175-48e2-89cb-f3ce7dd2fba2","type":"message","text":"What does `methods(print_string_only)` show?","user":"U01FKQQ7J0J","ts":"1616783904.259600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0c7u","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What does "},{"type":"text","text":"methods(print_string_only)","style":{"code":true}},{"type":"text","text":" show?"}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD","reactions":[{"name":"point_up::skin-tone-5","users":["UH9KWTTD3"],"count":1}]},{"client_msg_id":"4a592bf5-6f5b-40f5-a1c7-052610888dc3","type":"message","text":"My guess is that at one point previously you defined `print_string_only` that accepts something that `Symbol` is a subtype of","user":"UH9KWTTD3","ts":"1616783919.259800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5On","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My guess is that at one point previously you defined "},{"type":"text","text":"print_string_only","style":{"code":true}},{"type":"text","text":" that accepts something that "},{"type":"text","text":"Symbol","style":{"code":true}},{"type":"text","text":" is a subtype of"}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"4d37645f-433a-4b7c-9398-467fb85fc320","type":"message","text":"Yes using `methods` will tell you if such an alternate method exists for the function\n```julia&gt; methods(print_string_only)\n# 1 method for generic function \"print_string_only\":\n[1] print_string_only(str::String) in Main at REPL[2]:1\n\njulia&gt; print_string_only(str) = println(str)\nprint_string_only (generic function with 2 methods)\n\njulia&gt; methods(print_string_only)\n# 2 methods for generic function \"print_string_only\":\n[1] print_string_only(str::String) in Main at REPL[2]:1\n[2] print_string_only(str) in Main at REPL[7]:1```","user":"UH9KWTTD3","ts":"1616783945.260000","team":"T68168MUP","edited":{"user":"UH9KWTTD3","ts":"1616783991.000000"},"blocks":[{"type":"rich_text","block_id":"W2HQj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes using "},{"type":"text","text":"methods","style":{"code":true}},{"type":"text","text":" will tell you if such an alternate method exists for the function\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> methods(print_string_only)\n# 1 method for generic function \"print_string_only\":\n[1] print_string_only(str::String) in Main at REPL[2]:1\n\njulia> print_string_only(str) = println(str)\nprint_string_only (generic function with 2 methods)\n\njulia> methods(print_string_only)\n# 2 methods for generic function \"print_string_only\":\n[1] print_string_only(str::String) in Main at REPL[2]:1\n[2] print_string_only(str) in Main at REPL[7]:1"}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"3f44ded8-c4a4-46ce-9d17-ddf964e605f9","type":"message","text":"@Update: I think I may have at one point specified type Symbol for the first function. In doing so, even after now specifying type String, it will keep the ability to accept symbols even if I then change it to type String. Should this be happening? If so, why does this happen?","user":"U01QJ915TFD","ts":"1616784029.260500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DYb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"@Update: I think I may have at one point specified type Symbol for the first function. In doing so, even after now specifying type String, it will keep the ability to accept symbols even if I then change it to type String. Should this be happening? If so, why does this happen?"}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"2f2d1b92-3bda-41d3-9e3d-f7ba6ba34bdc","type":"message","text":"<@U01FKQQ7J0J>\n```julia&gt; methods(print_string_only)\n# 2 methods for generic function \"print_string_only\":\n[1] print_string_only(str::String) in Main at REPL[145]:1\n[2] print_string_only(str) in Main at REPL[103]:1```","user":"U01QJ915TFD","ts":"1616784102.260700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ALoj","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01FKQQ7J0J"},{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> methods(print_string_only)\n# 2 methods for generic function \"print_string_only\":\n[1] print_string_only(str::String) in Main at REPL[145]:1\n[2] print_string_only(str) in Main at REPL[103]:1"}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"8396ba6c-1139-4a6e-9042-a27cab1e5e54","type":"message","text":"In Julia, multiple dispatch allows us to have many methods for a single function. A method is the function name + arguments + types of arguments. So, it is by design that you don’t wipe out `print_string_only(str)` when you define `print_string_only(str::String)`.","user":"UH9KWTTD3","ts":"1616784123.260900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Df2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In Julia, multiple dispatch allows us to have many methods for a single function. A method is the function name + arguments + types of arguments. So, it is by design that you don’t wipe out "},{"type":"text","text":"print_string_only(str)","style":{"code":true}},{"type":"text","text":" when you define "},{"type":"text","text":"print_string_only(str::String)","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"902b93d2-05ff-46cf-bbfa-36e8ae6005f1","type":"message","text":"<@UH9KWTTD3> So basically by changing the type to two different things one one function, it will keep the ability to use both?","user":"U01QJ915TFD","ts":"1616784190.261100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1As","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH9KWTTD3"},{"type":"text","text":" So basically by changing the type to two different things one one function, it will keep the ability to use both?"}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"d3f139c2-1f44-4664-a88a-2ae1e3781db7","type":"message","text":"This way if you call `print_string_only` with any argument other than `String`, then the [2] method gets called. With a `String`, [1] gets called. The advantage here is that I can define a specialized/alternate version `print_string_only` for just `String`s.","user":"UH9KWTTD3","ts":"1616784211.261300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NiHfy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This way if you call "},{"type":"text","text":"print_string_only","style":{"code":true}},{"type":"text","text":" with any argument other than "},{"type":"text","text":"String","style":{"code":true}},{"type":"text","text":", then the [2] method gets called. With a "},{"type":"text","text":"String","style":{"code":true}},{"type":"text","text":", [1] gets called. The advantage here is that I can define a specialized/alternate version "},{"type":"text","text":"print_string_only","style":{"code":true}},{"type":"text","text":" for just `String`s."}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"f7a49be5-79ea-4ad7-8d06-e513e292f264","type":"message","text":"Yes, that’s right","user":"UH9KWTTD3","ts":"1616784246.261500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HUlsv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, that’s right"}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"e3d58bef-edab-4ee2-acfa-27130cd5b203","type":"message","text":"You can read more here: <https://docs.julialang.org/en/v1/manual/methods/#Defining-Methods>","user":"UH9KWTTD3","ts":"1616784312.261900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"k9PWE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can read more here: "},{"type":"link","url":"https://docs.julialang.org/en/v1/manual/methods/#Defining-Methods"}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"706180b5-4ebf-4d19-96ec-a393d1930430","type":"message","text":"<@UH9KWTTD3> I thought the only way of using multiple dispatch was explicitly in the following way:\n\n```prints_both(symb::String) = print_string_only(symb)```","user":"U01QJ915TFD","ts":"1616784315.262200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"y+3","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH9KWTTD3"},{"type":"text","text":" I thought the only way of using multiple dispatch was explicitly in the following way:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"prints_both(symb::String) = print_string_only(symb)"}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"05db3575-be30-4b93-9e95-d057558436b5","type":"message","text":"I was under the impression this was the only way of applying multiple dispatch, that is that it could only be used on a new function it was assigned to","user":"U01QJ915TFD","ts":"1616784361.262500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Jtl3n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I was under the impression this was the only way of applying multiple dispatch, that is that it could only be used on a new function it was assigned to"}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"7d58073d-2905-492b-9286-988ccf8e2a32","type":"message","text":"<@U01QJ915TFD> The second method shown is equivalent to `print_string_only(str::Any)`.  When you pass a `Symbol` to the `print_string_only` function, that's the method that gets called because it is the best (only in this case) type match.  If you check the methods on `print_stri_only` you'll probably see that it has only one method that takes a `String`.  FWIW, you probably want to use `str::AbstractString` instead of `str::String` on your `String`-like function arguments.","user":"U01FKQQ7J0J","ts":"1616784401.262700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Hy32","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01QJ915TFD"},{"type":"text","text":" The second method shown is equivalent to "},{"type":"text","text":"print_string_only(str::Any)","style":{"code":true}},{"type":"text","text":".  When you pass a "},{"type":"text","text":"Symbol","style":{"code":true}},{"type":"text","text":" to the "},{"type":"text","text":"print_string_only","style":{"code":true}},{"type":"text","text":" function, that's the method that gets called because it is the best (only in this case) type match.  If you check the methods on "},{"type":"text","text":"print_stri_only","style":{"code":true}},{"type":"text","text":" you'll probably see that it has only one method that takes a "},{"type":"text","text":"String","style":{"code":true}},{"type":"text","text":".  FWIW, you probably want to use "},{"type":"text","text":"str::AbstractString","style":{"code":true}},{"type":"text","text":" instead of "},{"type":"text","text":"str::String","style":{"code":true}},{"type":"text","text":" on your "},{"type":"text","text":"String","style":{"code":true}},{"type":"text","text":"-like function arguments."}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"9af2f126-5112-4dbd-9fb9-485c6b1d153d","type":"message","text":"<@U01QJ915TFD> I’m not sure exactly what you mean. Do you mind explaining a bit more?","user":"UH9KWTTD3","ts":"1616784409.262900","team":"T68168MUP","edited":{"user":"UH9KWTTD3","ts":"1616784431.000000"},"blocks":[{"type":"rich_text","block_id":"8CY","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01QJ915TFD"},{"type":"text","text":" I’m not sure exactly what you mean. Do you mind explaining a bit more?"}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"11296b6d-2a8e-45ff-bc06-fff235ce79be","type":"message","text":"<@U01FKQQ7J0J> Makes sense. So the second method even if it doesn't say Any that's what it equals because at one point I had accidentally specified for it to take a Symbol type instead of the String type.","user":"U01QJ915TFD","ts":"1616784552.263900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x2A","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01FKQQ7J0J"},{"type":"text","text":" Makes sense. So the second method even if it doesn't say Any that's what it equals because at one point I had accidentally specified for it to take a Symbol type instead of the String type."}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD","reactions":[{"name":"+1::skin-tone-5","users":["UH9KWTTD3"],"count":1}]},{"client_msg_id":"8f768900-d907-487b-a367-fe854e9eba30","type":"message","text":"<@U01FKQQ7J0J> What would AbstractString do?","user":"U01QJ915TFD","ts":"1616784570.264100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2DD2a","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01FKQQ7J0J"},{"type":"text","text":" What would AbstractString do?"}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"d0a80ba6-376c-4685-820e-7accf3bc619c","type":"message","text":"<@UH9KWTTD3> I thought that if I ever wanted to use multiple dispatch, the only way of doing so would be by creating a new function call and assigning the old function call which was only able of taking in strings for example like this :\n\n```prints_both(symb::String) = print_string_only(symb)```\n","user":"U01QJ915TFD","ts":"1616784639.264400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NGqS","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH9KWTTD3"},{"type":"text","text":" I thought that if I ever wanted to use multiple dispatch, the only way of doing so would be by creating a new function call and assigning the old function call which was only able of taking in strings for example like this :\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"prints_both(symb::String) = print_string_only(symb)"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"28515eec-558f-430e-9bc1-12f975c882bf","type":"message","text":"Shouldn't I prefer this way over accidentally specifying two different types to one function? Otherwise I would have to call the methods function to know what's really hidden underneath","user":"U01QJ915TFD","ts":"1616784711.264600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bC9DL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Shouldn't I prefer this way over accidentally specifying two different types to one function? Otherwise I would have to call the methods function to know what's really hidden underneath"}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"9ad84817-831e-4a2f-889b-99e89e3e9812","type":"message","text":"<@UH9KWTTD3> You mentioned that what happened here in my case was an example of multiple dispatch so that I don't wipe out a type I previously had used, upon specifying a new type for a function.","user":"U01QJ915TFD","ts":"1616784902.264800","team":"T68168MUP","edited":{"user":"U01QJ915TFD","ts":"1616784934.000000"},"blocks":[{"type":"rich_text","block_id":"ea35","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH9KWTTD3"},{"type":"text","text":" You mentioned that what happened here in my case was an example of multiple dispatch so that I don't wipe out a type I previously had used, upon specifying a new type for a function."}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"e07f651f-2543-487c-bfe5-fc840bdd822e","type":"message","text":"Multiple dispatch is always being used. Specifically it refers to the fact that when you call `f(1, 2.0)`, Julia will look at all the possible methods for `f` that you defined, then select the right one based the number of arguments and the types of each argument. Like <@U01FKQQ7J0J> suggested, it does this matching the arguments, `1, 2.0`, as best as it can.","user":"UH9KWTTD3","ts":"1616784931.265000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iJ=B","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Multiple dispatch is always being used. Specifically it refers to the fact that when you call "},{"type":"text","text":"f(1, 2.0)","style":{"code":true}},{"type":"text","text":", Julia will look at all the possible methods for "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" that you defined, then select the right one based the number of arguments and the types of each argument. Like "},{"type":"user","user_id":"U01FKQQ7J0J"},{"type":"text","text":" suggested, it does this matching the arguments, "},{"type":"text","text":"1, 2.0","style":{"code":true}},{"type":"text","text":", as best as it can."}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"4e12b96b-62a9-4546-a770-ab8870e10291","type":"message","text":"<@UH9KWTTD3> Makes sense. Good to know that it's always there. Until this happened to me I had no idea it was always there.","user":"U01QJ915TFD","ts":"1616785000.265300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+eD","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH9KWTTD3"},{"type":"text","text":" Makes sense. Good to know that it's always there. Until this happened to me I had no idea it was always there."}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"04c1a857-7c2e-41e2-9fea-53f5b90b6565","type":"message","text":"`AbstractString` is the abstract supertype of a both String and SubString so a `str::AbstractString` will accept/\"match\" either of those types (and any other type that is a descendent of `AbstractString`).  You have to decide whether that's what you really want, but usually it will be.","user":"U01FKQQ7J0J","ts":"1616785014.265500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pt5H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"AbstractString","style":{"code":true}},{"type":"text","text":" is the abstract supertype of a both String and SubString so a "},{"type":"text","text":"str::AbstractString","style":{"code":true}},{"type":"text","text":" will accept/\"match\" either of those types (and any other type that is a descendent of "},{"type":"text","text":"AbstractString","style":{"code":true}},{"type":"text","text":").  You have to decide whether that's what you really want, but usually it will be."}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"ea31a4ce-0f49-4718-b4f6-1baaef0941dd","type":"message","text":"<@U01FKQQ7J0J> Oh that's awesome. Yes I can foresee a usecase in which I will definitely need abstractstring or I'll get an error. This is really nice. I'll use it from now on.","user":"U01QJ915TFD","ts":"1616785074.265700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oESV","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01FKQQ7J0J"},{"type":"text","text":" Oh that's awesome. Yes I can foresee a usecase in which I will definitely need abstractstring or I'll get an error. This is really nice. I'll use it from now on."}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"de050b88-64e3-4805-b057-bf8e5d21c92c","type":"message","text":"<@U01QJ915TFD> What I meant is that in your case, you defined two methods for the function `print_string_only`. One that accepts a single argument of type (or subtype) `Any`, and one that accepts a single argument of type `String`. Since `Symbol` is a subtype of `Any` (every type in Julia is a subtype of `Any`), when you called `print_string_only(:Hi)`, multiple dispatch invoked the method you defined for a single argument of type `Any`.","user":"UH9KWTTD3","ts":"1616785078.265900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XBJ","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01QJ915TFD"},{"type":"text","text":" What I meant is that in your case, you defined two methods for the function "},{"type":"text","text":"print_string_only","style":{"code":true}},{"type":"text","text":". One that accepts a single argument of type (or subtype) "},{"type":"text","text":"Any","style":{"code":true}},{"type":"text","text":", and one that accepts a single argument of type "},{"type":"text","text":"String","style":{"code":true}},{"type":"text","text":". Since "},{"type":"text","text":"Symbol","style":{"code":true}},{"type":"text","text":" is a subtype of "},{"type":"text","text":"Any","style":{"code":true}},{"type":"text","text":" (every type in Julia is a subtype of "},{"type":"text","text":"Any","style":{"code":true}},{"type":"text","text":"), when you called "},{"type":"text","text":"print_string_only(:Hi)","style":{"code":true}},{"type":"text","text":", multiple dispatch invoked the method you defined for a single argument of type "},{"type":"text","text":"Any","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"a180e2f6-b568-4438-9bd4-23cdc32eb6a7","type":"message","text":"<@UH9KWTTD3> <@U01FKQQ7J0J> Thank you both for helping me understand this at such a deeper level now. I was excited enough after a brief introduction to multiple dispatch today but now I like it even more! For some reason my brain is preferring all of these things like multiple dispatch and also specifying types which in another language I had tried were not prevalent or at the forefront as they are here.","user":"U01QJ915TFD","ts":"1616785236.266100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"diT5P","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH9KWTTD3"},{"type":"text","text":" "},{"type":"user","user_id":"U01FKQQ7J0J"},{"type":"text","text":" Thank you both for helping me understand this at such a deeper level now. I was excited enough after a brief introduction to multiple dispatch today but now I like it even more! For some reason my brain is preferring all of these things like multiple dispatch and also specifying types which in another language I had tried were not prevalent or at the forefront as they are here."}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"4dd30f33-a660-418b-8b20-7ec2e96b0151","type":"message","text":"Yeah multiple dispatch is at the heart of Julia and one the things that makes it such a joy to write code in. I think the first three paragraphs here (<https://docs.julialang.org/en/v1/manual/methods/>) are worth fully understanding (ideally the whole section) when you have time. It will help you write code in a “Julian” way.","user":"UH9KWTTD3","ts":"1616785344.266300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kRc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah multiple dispatch is at the heart of Julia and one the things that makes it such a joy to write code in. I think the first three paragraphs here ("},{"type":"link","url":"https://docs.julialang.org/en/v1/manual/methods/"},{"type":"text","text":") are worth fully understanding (ideally the whole section) when you have time. It will help you write code in a “Julian” way."}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"66953b01-a812-4f47-a73d-56219bc6b818","type":"message","text":"Is it just me or does slack delete messages? I hope these don't ever get deleted as has happened for some other older messages I like to refer to.","user":"U01QJ915TFD","ts":"1616785363.266500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZrB2B","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is it just me or does slack delete messages? I hope these don't ever get deleted as has happened for some other older messages I like to refer to."}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"4d06e716-94b6-41e0-b348-df0c15928255","type":"message","text":"These will get deleted","user":"UH9KWTTD3","ts":"1616785384.266700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"92BtW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"These will get deleted"}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"10c6dc3e-a2de-43a2-a196-0f153936c89e","type":"message","text":"We don’t have paid Slack for the Julia org","user":"UH9KWTTD3","ts":"1616785398.266900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8Qhz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We don’t have paid Slack for the Julia org"}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"b02aeb7b-92a8-485f-bc6c-c57fab91e9a0","type":"message","text":"Oh no!","user":"U01QJ915TFD","ts":"1616785405.267100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"t+2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh no!"}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"a882666b-ddf2-47bd-909d-f1aef0bf5c51","type":"message","text":"Julia's type system and multiple dispatch are cool, but knowing when to specify types on parameters (vs when not to) is a bit nuanced.  When I started with Julia I had (perhaps still have) a tendency to go a little \"type crazy\" and put types on everything.  I don't think that's wrong, per se, but I think it's often not necessary.","user":"U01FKQQ7J0J","ts":"1616785458.267300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4JbB=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Julia's type system and multiple dispatch are cool, but knowing when to specify types on parameters (vs when not to) is a bit nuanced.  When I started with Julia I had (perhaps still have) a tendency to go a little \"type crazy\" and put types on everything.  I don't think that's wrong, per se, but I think it's often not necessary."}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD","reactions":[{"name":"point_up::skin-tone-5","users":["UH9KWTTD3"],"count":1}]},{"client_msg_id":"5fdec842-10d2-4b81-b26b-c221733bb439","type":"message","text":"If you are starting out with Julia and want a resource for questions that is not deleted, you can try the Julia Zulip (similar to Slack) or the Julia Discourse forum. Both are linked on the community page: <https://julialang.org/community/>","user":"UH9KWTTD3","ts":"1616785507.267600","team":"T68168MUP","attachments":[{"title":"Community","title_link":"https://julialang.org/community/","text":"The official website for the Julia Language. Julia is a language that is fast, dynamic, easy to use, and open source. Click here to learn more.","fallback":"Community","image_url":"https://julialang.org/assets/images/julia-open-graph.png","from_url":"https://julialang.org/community/","image_width":500,"image_height":250,"image_bytes":742374,"service_name":"julialang.org","id":1,"original_url":"https://julialang.org/community/"}],"blocks":[{"type":"rich_text","block_id":"uNTqb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you are starting out with Julia and want a resource for questions that is not deleted, you can try the Julia Zulip (similar to Slack) or the Julia Discourse forum. Both are linked on the community page: "},{"type":"link","url":"https://julialang.org/community/"}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"a3f2a53a-f410-4989-ba56-a185d4ef94dd","type":"message","text":"<@U01FKQQ7J0J> HAHAHA sounds like how I feel now in which just finding out about types makes me want to go type crazy. What I like is that it gets me in the habit of actually thinking what I want and there are less surprises because everything is specified. It almost takes a mental load off of me. But yeah I'll be sure to try to not overuse if not necessary.","user":"U01QJ915TFD","ts":"1616785624.268100","team":"T68168MUP","edited":{"user":"U01QJ915TFD","ts":"1616785645.000000"},"blocks":[{"type":"rich_text","block_id":"He3G","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01FKQQ7J0J"},{"type":"text","text":" HAHAHA sounds like how I feel now in which just finding out about types makes me want to go type crazy. What I like is that it gets me in the habit of actually thinking what I want and there are less surprises because everything is specified. It almost takes a mental load off of me. But yeah I'll be sure to try to not overuse if not necessary."}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"2f65558c-6d85-454a-9726-a9495ddc76a7","type":"message","text":"<@UH9KWTTD3> Thanks will definitely check out all those links.","user":"U01QJ915TFD","ts":"1616785687.268400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UgF+","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH9KWTTD3"},{"type":"text","text":" Thanks will definitely check out all those links."}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"999037ed-6e36-4e4f-80ef-b0357c917c43","type":"message","text":"But yeah would be nice to have this slack as a paid slack. Is that really expensive? I thought that only those who want to pay must pay with a paid org account. Anyone else can keep free accounts.","user":"U01QJ915TFD","ts":"1616785742.268600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1nQn=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But yeah would be nice to have this slack as a paid slack. Is that really expensive? I thought that only those who want to pay must pay with a paid org account. Anyone else can keep free accounts."}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"02d22818-2776-406c-b213-965f926189f9","type":"message","text":"This blog is worth a read about the nuance of specifying the types: <https://www.oxinabox.net/2020/02/09/whycompositionaljulia.html#multiple-dispatch--duck-typing>\nand <https://www.oxinabox.net/2020/04/19/Julia-Antipatterns.html>\n\nSorry for the flood of links!","user":"UH9KWTTD3","ts":"1616785766.268800","team":"T68168MUP","edited":{"user":"UH9KWTTD3","ts":"1616785792.000000"},"blocks":[{"type":"rich_text","block_id":"LlY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This blog is worth a read about the nuance of specifying the types: "},{"type":"link","url":"https://www.oxinabox.net/2020/02/09/whycompositionaljulia.html#multiple-dispatch--duck-typing"},{"type":"text","text":"\nand "},{"type":"link","url":"https://www.oxinabox.net/2020/04/19/Julia-Antipatterns.html"},{"type":"text","text":"\n\nSorry for the flood of links!"}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"4287078b-a9dd-438a-a7ee-7d40be4338d0","type":"message","text":"<@UH9KWTTD3> On the contrary, thank you very much for sharing. I'm very hungry for Julia knowledge. I was not expecting to like it as much as I do.","user":"U01QJ915TFD","ts":"1616785868.269100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MMVu","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH9KWTTD3"},{"type":"text","text":" On the contrary, thank you very much for sharing. I'm very hungry for Julia knowledge. I was not expecting to like it as much as I do."}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"bca1d18e-bbbb-42f0-91ab-1f8e0b05b1e6","type":"message","text":"<@UH9KWTTD3> I see an option saying that if I upgrade to a paid plan I'll have access to every single message. So does this mean that this slack can stay free overall and just those who pay can have access to the entire history? Hopefully this upgrade option I see is not to upgrade the entire julia community :slightly_smiling_face: that would be expensive","user":"U01QJ915TFD","ts":"1616786047.269400","team":"T68168MUP","edited":{"user":"U01QJ915TFD","ts":"1616786088.000000"},"blocks":[{"type":"rich_text","block_id":"QLm","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH9KWTTD3"},{"type":"text","text":" I see an option saying that if I upgrade to a paid plan I'll have access to every single message. So does this mean that this slack can stay free overall and just those who pay can have access to the entire history? Hopefully this upgrade option I see is not to upgrade the entire julia community "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":" that would be expensive"}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"2c69ea44-d226-4401-a693-e4077c8e1414","type":"message","text":"No don’t accept that! Each user can’t pay for Slack individually, the org has to pay. So that message is asking you if you want to pay for all of us in this workspace!","user":"UH9KWTTD3","ts":"1616786102.269700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XYEK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No don’t accept that! Each user can’t pay for Slack individually, the org has to pay. So that message is asking you if you want to pay for all of us in this workspace!"}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"f4e71693-f7ba-4292-8812-93ba2663ed7b","type":"message","text":"Yeah the amount it tells you in that message is per person per month. So your bill would be that amount times the number of active members!","user":"UH9KWTTD3","ts":"1616786152.269900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2Ev","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah the amount it tells you in that message is per person per month. So your bill would be that amount times the number of active members!"}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"},{"client_msg_id":"6fd00ae8-6348-4039-a9bd-a4bebd35acba","type":"message","text":"I'm sure the generous gesture would be appreciated by many, but yeah, don't do that! :sweat_smile:","user":"U01FKQQ7J0J","ts":"1616786169.270100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aJF6=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm sure the generous gesture would be appreciated by many, but yeah, don't do that! "},{"type":"emoji","name":"sweat_smile"}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD","reactions":[{"name":"joy","users":["UH9KWTTD3","U01QJ915TFD"],"count":2}]},{"client_msg_id":"4959c4b9-d445-40e0-b117-8475179855cc","type":"message","text":"<@UH9KWTTD3> <@U01FKQQ7J0J> :rolling_on_the_floor_laughing:","user":"U01QJ915TFD","ts":"1616786206.270400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zcfgr","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH9KWTTD3"},{"type":"text","text":" "},{"type":"user","user_id":"U01FKQQ7J0J"},{"type":"text","text":" "},{"type":"emoji","name":"rolling_on_the_floor_laughing"}]}]}],"thread_ts":"1616782383.258900","parent_user_id":"U01QJ915TFD"}]