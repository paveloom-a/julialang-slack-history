[{"client_msg_id":"24e70651-a194-4977-84a6-f74768b4482d","type":"message","text":"Got an illegal instruction doing\n```@benchmark unsafe_load(Ptr{Int}(0))```\nIs this one of those: \"That's too stupid to not yield illegal instructions\", or are illegal instructions always a bug?","user":"U7HAYKY9X","ts":"1613942797.084200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0tul","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Got an illegal instruction doing\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@benchmark unsafe_load(Ptr{Int}(0))"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Is this one of those: \"That's too stupid to not yield illegal instructions\", or are illegal instructions always a bug?"}]}]}],"thread_ts":"1613942797.084200","reply_count":3,"reply_users_count":2,"latest_reply":"1613968567.103700","reply_users":["B01J9QZ4SP8","U01HD5VFXJM"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1613942799.084300","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1613942797.084200","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"61db7b13-57a1-4f27-bcb6-f5b6c7aa6b15","type":"message","text":"Is the question that it should produce EXCEPTION_ACCESS_VIOLATION instead of EXCEPTION_ILLEGAL_INSTRUCTION?","user":"U01HD5VFXJM","ts":"1613960472.098500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cmKXk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is the question that it should produce EXCEPTION_ACCESS_VIOLATION instead of EXCEPTION_ILLEGAL_INSTRUCTION?"}]}]}],"thread_ts":"1613942797.084200","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"d4d118ad-cbe8-428a-b281-33254b551ce2","type":"message","text":"I was curious so I found a minimal example:\n\n```core = :(unsafe_load(Ptr{Int}(0)))\n\ncorefunc = gensym(\"core\")\nsignature_def = Expr(:call, corefunc)\n\na = eval(:($(signature_def) = $(core)))\n\na()```\nInspecting the LLVM, for some reason this becomes this very simple set of instructions:\n```define i64 @\"julia_##core#245_183\"() #0 {\ntop:\n; ┌ @ pointer.jl:105 within `unsafe_load' @ pointer.jl:105\n   call void @llvm.trap()\n   unreachable\n; └\n}```\nCompared with normal:\n```julia&gt; @code_llvm unsafe_load(Ptr{Int}(0))\n;  @ pointer.jl:105 within `unsafe_load'\n; Function Attrs: uwtable\ndefine i64 @julia_unsafe_load_231(i64 %0) #0 {\ntop:\n;  @ pointer.jl:105 within `unsafe_load' @ pointer.jl:105\n  %1 = inttoptr i64 %0 to i64*\n  %2 = load i64, i64* %1, align 1\n;  @ pointer.jl:105 within `unsafe_load'\n  ret i64 %2\n}```\nand compared with the above example but with `Ptr{Int}(1)`:\n```;  @ none within `##core#246'\n; Function Attrs: uwtable\ndefine i64 @\"julia_##core#246_233\"() #0 {\ntop:\n; ┌ @ pointer.jl:105 within `unsafe_load' @ pointer.jl:105\n   %0 = load i64, i64* inttoptr (i64 1 to i64*), align 1\n; └\n  ret i64 %0\n}```\nIf I use a variable instead `i = 0; core = :(unsafe_load(Ptr{Int}(i)))`, it's an access violation again. But if I make `i` a constant, it's an illegal instruction.","user":"U01HD5VFXJM","ts":"1613968567.103700","team":"T68168MUP","edited":{"user":"U01HD5VFXJM","ts":"1613968606.000000"},"blocks":[{"type":"rich_text","block_id":"9qo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I was curious so I found a minimal example:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"core = :(unsafe_load(Ptr{Int}(0)))\n\ncorefunc = gensym(\"core\")\nsignature_def = Expr(:call, corefunc)\n\na = eval(:($(signature_def) = $(core)))\n\na()"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nInspecting the LLVM, for some reason this becomes this very simple set of instructions:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"define i64 @\"julia_##core#245_183\"() #0 {\ntop:\n; ┌ @ pointer.jl:105 within `unsafe_load' @ pointer.jl:105\n   call void @llvm.trap()\n   unreachable\n; └\n}"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nCompared with normal:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @code_llvm unsafe_load(Ptr{Int}(0))\n;  @ pointer.jl:105 within `unsafe_load'\n; Function Attrs: uwtable\ndefine i64 @julia_unsafe_load_231(i64 %0) #0 {\ntop:\n;  @ pointer.jl:105 within `unsafe_load' @ pointer.jl:105\n  %1 = inttoptr i64 %0 to i64*\n  %2 = load i64, i64* %1, align 1\n;  @ pointer.jl:105 within `unsafe_load'\n  ret i64 %2\n}"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nand compared with the above example but with "},{"type":"text","text":"Ptr{Int}(1)","style":{"code":true}},{"type":"text","text":":\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":";  @ none within `##core#246'\n; Function Attrs: uwtable\ndefine i64 @\"julia_##core#246_233\"() #0 {\ntop:\n; ┌ @ pointer.jl:105 within `unsafe_load' @ pointer.jl:105\n   %0 = load i64, i64* inttoptr (i64 1 to i64*), align 1\n; └\n  ret i64 %0\n}"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nIf I use a variable instead "},{"type":"text","text":"i = 0; core = :(unsafe_load(Ptr{Int}(i)))","style":{"code":true}},{"type":"text","text":", it's an access violation again. But if I make "},{"type":"text","text":"i","style":{"code":true}},{"type":"text","text":" a constant, it's an illegal instruction."}]}]}],"thread_ts":"1613942797.084200","parent_user_id":"U7HAYKY9X"}]