[{"client_msg_id":"3c6603e1-1b0e-421c-9a4d-21c4e4235e45","type":"message","text":"I’m seeing a weird performance sensitivity to order of operations.\n```foo1(x,y) = @. x*(x + y) + y*y\nfoo2(x,y) = @. (x + y)*x + y*y```\nFor StaticArray inputs, the first function allocates, while the second function does not.\n```x = @SVector [1.0]\ny = @SVector [2.0]\njulia&gt; @btime foo1($x,$y);\n  478.870 ns (25 allocations: 480 bytes)\njulia&gt; @btime foo2($x,$y);\n  2.949 ns (0 allocations: 0 bytes)```\nAny explanation? Is this expected behavior?\n\nI see a difference in the outputs of `@code_typed` (e.g., `foo1` calls `invoke Base.Broadcast.var` and `Core._apply_iterate` ,`foo2` does not) but I’m not sure how to interpret them.","user":"U011LUQ182G","ts":"1612390947.027700","team":"T68168MUP","edited":{"user":"U011LUQ182G","ts":"1612392107.000000"},"blocks":[{"type":"rich_text","block_id":"a9qQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’m seeing a weird performance sensitivity to order of operations.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"foo1(x,y) = @. x*(x + y) + y*y\nfoo2(x,y) = @. (x + y)*x + y*y"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"For StaticArray inputs, the first function allocates, while the second function does not.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"x = @SVector [1.0]\ny = @SVector [2.0]\njulia> @btime foo1($x,$y);\n  478.870 ns (25 allocations: 480 bytes)\njulia> @btime foo2($x,$y);\n  2.949 ns (0 allocations: 0 bytes)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Any explanation? Is this expected behavior?\n\nI see a difference in the outputs of "},{"type":"text","text":"@code_typed","style":{"code":true}},{"type":"text","text":" (e.g., "},{"type":"text","text":"foo1","style":{"code":true}},{"type":"text","text":" calls "},{"type":"text","text":"invoke Base.Broadcast.var","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"Core._apply_iterate","style":{"code":true}},{"type":"text","text":" ,"},{"type":"text","text":"foo2","style":{"code":true}},{"type":"text","text":" does not) but I’m not sure how to interpret them."}]}]}],"thread_ts":"1612390947.027700","reply_count":23,"reply_users_count":4,"latest_reply":"1612394475.034600","reply_users":["B01J9QZ4SP8","U6740K1SP","U011LUQ182G","UUMJUCYRK"],"subscribed":false,"reactions":[{"name":"bridge","users":["U011LUQ182G"],"count":1}]},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1612390949.027800","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1612390947.027700","parent_user_id":"U011LUQ182G"},{"client_msg_id":"64582d14-7f41-4a46-8cb3-d8140aaf8165","type":"message","text":"Likely hitting some compiler heuristic threshold for Broadcast.flatten.","user":"U6740K1SP","ts":"1612392093.028900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3Qt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Likely hitting some compiler heuristic threshold for Broadcast.flatten."}]}]}],"thread_ts":"1612390947.027700","parent_user_id":"U011LUQ182G"},{"client_msg_id":"a200285e-36cc-451f-b7c1-424c2d611bd0","type":"message","text":"which is how StaticArrays implements broadcasting","user":"U6740K1SP","ts":"1612392104.029100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ftGRX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which is how StaticArrays implements broadcasting"}]}]}],"thread_ts":"1612390947.027700","parent_user_id":"U011LUQ182G"},{"client_msg_id":"5cbf2b1e-d5ea-4ba3-83a1-95f122aa0f3f","type":"message","text":"is `Broadcast.flatten` something you expect to show up in `@code_typed`?","user":"U011LUQ182G","ts":"1612392231.029400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JtOCE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is "},{"type":"text","text":"Broadcast.flatten","style":{"code":true}},{"type":"text","text":" something you expect to show up in "},{"type":"text","text":"@code_typed","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1612390947.027700","parent_user_id":"U011LUQ182G"},{"type":"message","subtype":"bot_message","text":"Success, it has been cross posted <https://discourse.julialang.org/t/i-m-seeing-a-weird-performance-sensitivity-to-order-of-operations-foo1-x-y/54568|to Discourse>. Keep and eye out on Discourse for responses and please add an answer there once you are satisfied with the solution so others can benefit as well. Happy debugging!","ts":"1612392267.029700","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1612390947.027700","parent_user_id":"U011LUQ182G"},{"client_msg_id":"ea27b57e-8ed8-4aa5-9f14-931de6c00c66","type":"message","text":"Broadcast.flatten is an alternative way to implement broadcasting. It creates lots of anonymous functions. If they don’t inline, you’ll see them as `var\"5#6\"`s and the like.","user":"U6740K1SP","ts":"1612392407.029900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LziO2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Broadcast.flatten is an alternative way to implement broadcasting. It creates lots of anonymous functions. If they don’t inline, you’ll see them as "},{"type":"text","text":"var\"5#6\"","style":{"code":true}},{"type":"text","text":"s and the like."}]}]}],"thread_ts":"1612390947.027700","parent_user_id":"U011LUQ182G","reactions":[{"name":"+1","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"567dcc41-90bd-469b-a173-5784c695f5b3","type":"message","text":"that’s not a good answer, but it’s something","user":"U6740K1SP","ts":"1612392469.030200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Y8J6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that’s not a good answer, but it’s something"}]}]}],"thread_ts":"1612390947.027700","parent_user_id":"U011LUQ182G"},{"client_msg_id":"c5045aad-94bb-4bb4-8211-416466f8feee","type":"message","text":"It helps explain the issue, so thanks! Just checked and the extra allocs disappear if using Tuples instead of StaticArrays.\n\nStill seems a bit weird but sounds more like an edge case now.","user":"U011LUQ182G","ts":"1612392682.030400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C=P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It helps explain the issue, so thanks! Just checked and the extra allocs disappear if using Tuples instead of StaticArrays.\n\nStill seems a bit weird but sounds more like an edge case now."}]}]}],"thread_ts":"1612390947.027700","parent_user_id":"U011LUQ182G"},{"client_msg_id":"80b0e0ae-1387-4c1b-bc4d-e01bae84205f","type":"message","text":"Yeah, tuples use the builtin broadcast implementation — which just works with the structure directly","user":"U6740K1SP","ts":"1612392747.030600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SZ91","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, tuples use the builtin broadcast implementation — which just works with the structure directly"}]}]}],"thread_ts":"1612390947.027700","parent_user_id":"U011LUQ182G"},{"client_msg_id":"788ba238-3545-4d29-ab48-4f2ad6608f60","type":"message","text":"instead of transforming it with `Broadcast.flatten`","user":"U6740K1SP","ts":"1612392810.030800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pUC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"instead of transforming it with "},{"type":"text","text":"Broadcast.flatten","style":{"code":true}}]}]}],"thread_ts":"1612390947.027700","parent_user_id":"U011LUQ182G"},{"client_msg_id":"4f346568-657d-48cb-bf56-6c0161d4a48e","type":"message","text":"makes sense. the order of operations thing had me shook, but I guess I can just check for allocations.","user":"U011LUQ182G","ts":"1612392933.031000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GFm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"makes sense. the order of operations thing had me shook, but I guess I can just check for allocations."}]}]}],"thread_ts":"1612390947.027700","parent_user_id":"U011LUQ182G"},{"client_msg_id":"9535ec53-6067-49c9-890e-6dc6500104cf","type":"message","text":"possibly related to <https://github.com/JuliaLang/julia/issues/27988>","user":"U6740K1SP","ts":"1612392995.031200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Sds","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"possibly related to "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/27988"}]}]}],"thread_ts":"1612390947.027700","parent_user_id":"U011LUQ182G","reactions":[{"name":"+1","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"f6130610-3785-433a-b951-1cbddfccc603","type":"message","text":"yeah, it shouldn’t happen","user":"U6740K1SP","ts":"1612393001.031400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3Gc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, it shouldn’t happen"}]}]}],"thread_ts":"1612390947.027700","parent_user_id":"U011LUQ182G"},{"client_msg_id":"d23c6adc-346c-4d73-9067-907608815fdf","type":"message","text":"That was an interesting read. Tried SparseArrays after seeing <@UUMJUCYRK>’s MWE. Both `foo1, foo2` seem to allocate extra, though expanding the product out fully avoids this.\n```using SparseArrays\nx = sparsevec([1.0])\ny = sparsevec([2.0])\nfoo1(x,y) = @. x*(x + y) + y*y\nfoo2(x,y) = @. (x + y)*x + y*y\nfoo3(x,y) = @. x*x + x*y + y*y\n\njulia&gt; @btime foo1($x,$y);\n  1.111 μs (47 allocations: 1.09 KiB)\njulia&gt; @btime foo2($x,$y);\n  1.124 μs (29 allocations: 1.20 KiB)\njulia&gt; @btime foo3($x,$y);\n  124.881 ns (2 allocations: 192 bytes)```","user":"U011LUQ182G","ts":"1612393646.031800","team":"T68168MUP","edited":{"user":"U011LUQ182G","ts":"1612393676.000000"},"blocks":[{"type":"rich_text","block_id":"uyK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That was an interesting read. Tried SparseArrays after seeing "},{"type":"user","user_id":"UUMJUCYRK"},{"type":"text","text":"’s MWE. Both "},{"type":"text","text":"foo1, foo2","style":{"code":true}},{"type":"text","text":" seem to allocate extra, though expanding the product out fully avoids this.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using SparseArrays\nx = sparsevec([1.0])\ny = sparsevec([2.0])\nfoo1(x,y) = @. x*(x + y) + y*y\nfoo2(x,y) = @. (x + y)*x + y*y\nfoo3(x,y) = @. x*x + x*y + y*y\n\njulia> @btime foo1($x,$y);\n  1.111 μs (47 allocations: 1.09 KiB)\njulia> @btime foo2($x,$y);\n  1.124 μs (29 allocations: 1.20 KiB)\njulia> @btime foo3($x,$y);\n  124.881 ns (2 allocations: 192 bytes)"}]}]}],"thread_ts":"1612390947.027700","parent_user_id":"U011LUQ182G"},{"client_msg_id":"bb2ce86e-b03c-4c49-a662-26187550b29d","type":"message","text":"Sounds like this isn’t going to be easy to fix.\n\nNot sure if it’d be helpful to add even more MWEs to that comment thread, so I’ll just xpost to Discourse. Thanks for the help, <@U6740K1SP>!","user":"U011LUQ182G","ts":"1612393965.032300","team":"T68168MUP","edited":{"user":"U011LUQ182G","ts":"1612393986.000000"},"blocks":[{"type":"rich_text","block_id":"TBp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sounds like this isn’t going to be easy to fix.\n\nNot sure if it’d be helpful to add even more MWEs to that comment thread, so I’ll just xpost to Discourse. Thanks for the help, "},{"type":"user","user_id":"U6740K1SP"},{"type":"text","text":"!"}]}]}],"thread_ts":"1612390947.027700","parent_user_id":"U011LUQ182G"},{"client_msg_id":"f2da933c-b4d9-47d3-aa89-e35401032585","type":"message","text":"which…it looks like you already did, nvm.","user":"U011LUQ182G","ts":"1612394024.032600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XuS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which…it looks like you already did, nvm."}]}]}],"thread_ts":"1612390947.027700","parent_user_id":"U011LUQ182G"},{"client_msg_id":"a1384f1b-3ff4-49ad-928f-7f4d96b8658e","type":"message","text":":slightly_smiling_face:","user":"U6740K1SP","ts":"1612394036.032800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4uW/4","elements":[{"type":"rich_text_section","elements":[{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1612390947.027700","parent_user_id":"U011LUQ182G","reactions":[{"name":"sweat_smile","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"a099ac9c-7973-4021-966a-71899a33ce97","type":"message","text":"If its the same issue its probably nice to add, but I'm not sure it is since afaict there's no inference failure here, `@code_wartype foo1(x,y)` looks good.","user":"UUMJUCYRK","ts":"1612394076.033100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CoT5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If its the same issue its probably nice to add, but I'm not sure it is since afaict there's no inference failure here, "},{"type":"text","text":"@code_wartype foo1(x,y)","style":{"code":true}},{"type":"text","text":" looks good."}]}]}],"thread_ts":"1612390947.027700","parent_user_id":"U011LUQ182G","reactions":[{"name":"+1","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"15847892-ba7f-4cd7-936a-1ae5307b278f","type":"message","text":"Anyway, seems like its not too hard to use the `(x + y)*x` order here (although sucks that you have to catch these), but in more complex cases a workaround for that issue which also works in your case here is just write the broadcast kernel out by hand,\n```foo3(x,y) = broadcast(x,y) do x,y\n    x*(x + y) + y*y\nend```","user":"UUMJUCYRK","ts":"1612394202.033400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x1/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Anyway, seems like its not too hard to use the "},{"type":"text","text":"(x + y)*x","style":{"code":true}},{"type":"text","text":" order here (although sucks that you have to catch these), but in more complex cases a workaround for that issue which also works in your case here is just write the broadcast kernel out by hand,\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"foo3(x,y) = broadcast(x,y) do x,y\n    x*(x + y) + y*y\nend"}]}]}],"thread_ts":"1612390947.027700","parent_user_id":"U011LUQ182G","reactions":[{"name":"today-i-learned","users":["U011LUQ182G"],"count":1},{"name":"+1","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"0ac2dfe5-9703-42b2-9eb0-8e465f936cb0","type":"message","text":"My hunch is that it’s a different symptom of the same problem.  The compiler is stressed but hasn’t completely given up yet.  Add one more layer and it’ll stop inferring.","user":"U6740K1SP","ts":"1612394273.033800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1EW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My hunch is that it’s a different symptom of the same problem.  The compiler is stressed but hasn’t completely given up yet.  Add one more layer and it’ll stop inferring."}]}]}],"thread_ts":"1612390947.027700","parent_user_id":"U011LUQ182G"},{"client_msg_id":"df456112-b16b-4882-9f9d-4c021982f308","type":"message","text":"This is right at the knife’s edge","user":"U6740K1SP","ts":"1612394287.034000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fOLY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is right at the knife’s edge"}]}]}],"thread_ts":"1612390947.027700","parent_user_id":"U011LUQ182G"},{"client_msg_id":"60c1d82c-46a7-4212-90c0-5fc152b63f32","type":"message","text":"In that sense, this MWE is really helpful to post there","user":"U6740K1SP","ts":"1612394329.034200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dNZR3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In that sense, this MWE is really helpful to post there"}]}]}],"thread_ts":"1612390947.027700","parent_user_id":"U011LUQ182G","reactions":[{"name":"+1","users":["U011LUQ182G","UUMJUCYRK"],"count":2}]},{"client_msg_id":"8064276c-a83d-45ef-9ed2-669007cbff15","type":"message","text":"<@U6740K1SP> will do, thanks for the feedback.\n\n<@UUMJUCYRK> that’s a neat workaround - thanks!","user":"U011LUQ182G","ts":"1612394475.034600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6p+ty","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U6740K1SP"},{"type":"text","text":" will do, thanks for the feedback.\n\n"},{"type":"user","user_id":"UUMJUCYRK"},{"type":"text","text":" that’s a neat workaround - thanks!"}]}]}],"thread_ts":"1612390947.027700","parent_user_id":"U011LUQ182G"}]