[{"client_msg_id":"7c84f186-1e42-4dec-91a6-4211ab53299d","type":"message","text":"As an exercise, I implemented my own unoptimized version of an InsertionSort algorithm. I was rather surprised at the fact that my implementation of the algorithm outperformed Julia's implementation at an array of size &lt; 10 for the most part. Here is Base's implementation:\n\n```function sort!(v::AbstractVector, lo::Integer, hi::Integer, ::InsertionSortAlg, o::Ordering)\n    @inbounds for i = lo+1:hi\n        j = i\n        x = v[i]\n        while j &gt; lo\n            if lt(o, x, v[j-1])\n                v[j] = v[j-1]\n                j -= 1\n                continue\n            end\n            break\n        end\n        v[j] = x\n    end\n    return v\nend```\nHere is my implementation:\n\n```function insertionsort(input)\n\n    @inbounds for curr = 2:length(input)\n        prior = curr - 1\n        while prior != 0\n            if input[curr] &lt; input[prior]\n                input[curr], input[prior] = input[prior], input[curr]\n            end\n            curr = prior\n            prior -= 1\n        end\n    end\n    return input\nend```\nHowever, this performance advantage was quickly outpaced by Julia's implementation and I was curious if anyone could explain a few things related to Julia's implementation:\n\n1. What is the `@inbounds` macro and why is it suggested to be used? It seems redundant and it negatively impacted my time when I tried to use it.\n2. When is it wise to make the trade off between allocations and speed? My implementation only made 1 and is always around half the allocation size of Base's.\n3. As this is an exercise, what should I consider more in the future to improve my algorithms?\nThanks everyone for the help! Much appreciated! :smile:\n\nP.S. Here is how I ran benchmarks on my code (thanks to <@U6N6VQE30> for some feedback on benchmarking!):\n\n```using BenchmarkTools\n\ninput = rand(100)\n\n@btime(insertionsort($input)) |&gt; println\n@btime(sort!($input, alg=InsertionSort)) |&gt; println```\nWhich produces:\n\n```  2.845 μs (0 allocations: 0 bytes)\n  208.888 ns (0 allocations: 0 bytes))```","user":"US64J0NPQ","ts":"1608424949.025900","team":"T68168MUP","edited":{"user":"US64J0NPQ","ts":"1608426059.000000"},"blocks":[{"type":"rich_text","block_id":"vLcZ9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"As an exercise, I implemented my own unoptimized version of an InsertionSort algorithm. I was rather surprised at the fact that my implementation of the algorithm outperformed Julia's implementation at an array of size < 10 for the most part. Here is Base's implementation:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function sort!(v::AbstractVector, lo::Integer, hi::Integer, ::InsertionSortAlg, o::Ordering)\n    @inbounds for i = lo+1:hi\n        j = i\n        x = v[i]\n        while j > lo\n            if lt(o, x, v[j-1])\n                v[j] = v[j-1]\n                j -= 1\n                continue\n            end\n            break\n        end\n        v[j] = x\n    end\n    return v\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nHere is my implementation:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function insertionsort(input)\n\n    @inbounds for curr = 2:length(input)\n        prior = curr - 1\n        while prior != 0\n            if input[curr] < input[prior]\n                input[curr], input[prior] = input[prior], input[curr]\n            end\n            curr = prior\n            prior -= 1\n        end\n    end\n    return input\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nHowever, this performance advantage was quickly outpaced by Julia's implementation and I was curious if anyone could explain a few things related to Julia's implementation:\n\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What is the "},{"type":"text","text":"@inbounds","style":{"code":true}},{"type":"text","text":" macro and why is it suggested to be used? It seems redundant and it negatively impacted my time when I tried to use it."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"When is it wise to make the trade off between allocations and speed? My implementation only made 1 and is always around half the allocation size of Base's."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"As this is an exercise, what should I consider more in the future to improve my algorithms?"}]}],"style":"ordered","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"\nThanks everyone for the help! Much appreciated! "},{"type":"emoji","name":"smile"},{"type":"text","text":"\n\nP.S. Here is how I ran benchmarks on my code (thanks to "},{"type":"user","user_id":"U6N6VQE30"},{"type":"text","text":" for some feedback on benchmarking!):\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using BenchmarkTools\n\ninput = rand(100)\n\n@btime(insertionsort($input)) |> println\n@btime(sort!($input, alg=InsertionSort)) |> println"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nWhich produces:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"  2.845 μs (0 allocations: 0 bytes)\n  208.888 ns (0 allocations: 0 bytes))"}]}]}],"thread_ts":"1608424949.025900","reply_count":30,"reply_users_count":3,"latest_reply":"1608487998.122600","reply_users":["U6N6VQE30","US64J0NPQ","UH24GRBLL"],"subscribed":false},{"client_msg_id":"7e149942-09ad-4fde-a871-f36004006dd0","type":"message","text":"This should allocate 0 bytes","user":"U6N6VQE30","ts":"1608425223.026000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QUnt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This should allocate 0 bytes"}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ"},{"client_msg_id":"2ce2f764-b5a7-4ed9-ae27-75ef90c7429e","type":"message","text":"It's very weird adding inbounds makes it worse, cause it adds a conditional (that probably predicted correctly all the time)","user":"U6N6VQE30","ts":"1608425514.026300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tIH+0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's very weird adding inbounds makes it worse, cause it adds a conditional (that probably predicted correctly all the time)"}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ"},{"client_msg_id":"9fe37a8a-3898-4ab5-981a-2b6cb7cb1fd8","type":"message","text":"<@U6N6VQE30> - edited my post per your comment to include benchmarking. Why am I seeing that allocation?","user":"US64J0NPQ","ts":"1608425545.026500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xDNY","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U6N6VQE30"},{"type":"text","text":" - edited my post per your comment to include benchmarking. Why am I seeing that allocation?"}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ"},{"client_msg_id":"94044ad9-9dd2-4a7b-b76b-55f2bea5825e","type":"message","text":"Probably smth with kwargs and interpolation","user":"U6N6VQE30","ts":"1608425571.026700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"n=0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Probably smth with kwargs and interpolation"}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ"},{"client_msg_id":"46fbf0de-e335-42f3-b8bc-526e6cc56e93","type":"message","text":"Can you call sort! with hi and lo etc directly?","user":"U6N6VQE30","ts":"1608425588.026900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7Wu7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can you call sort! with hi and lo etc directly?"}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ"},{"client_msg_id":"2c0b835d-9720-4df6-bd8f-de613815984a","type":"message","text":"Oh, you have to call sort!, not sort","user":"U6N6VQE30","ts":"1608425615.027100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Sd48","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh, you have to call sort!, not sort"}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ"},{"client_msg_id":"cdeb7173-4ee0-4d63-bf99-c2f02d9d078e","type":"message","text":"`sort` sorts out of place, so it allocates and copies before sorting","user":"U6N6VQE30","ts":"1608425660.027300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"E4lF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"sort","style":{"code":true}},{"type":"text","text":" sorts out of place, so it allocates and copies before sorting"}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ"},{"client_msg_id":"7ded72ff-f976-421a-8734-c79ec8d519be","type":"message","text":"Ah - that was an oversight on my part! Should've checked between the two. Hang on, let me re-run benchmarks. Also, `@inbounds` did make my small implementation faster actually. For some reason, the first time I tried it, it did not result in a speed up. Must've not saved the function before testing. :sweat_smile:","user":"US64J0NPQ","ts":"1608425755.027500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hobK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah - that was an oversight on my part! Should've checked between the two. Hang on, let me re-run benchmarks. Also, "},{"type":"text","text":"@inbounds","style":{"code":true}},{"type":"text","text":" did make my small implementation faster actually. For some reason, the first time I tried it, it did not result in a speed up. Must've not saved the function before testing. "},{"type":"emoji","name":"sweat_smile"}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ","reactions":[{"name":"heavy_check_mark","users":["U6N6VQE30"],"count":1}]},{"client_msg_id":"8ab7bce2-f219-4c95-826e-03f412bfc15d","type":"message","text":"Ah there we go - now the Julia version makes much more sense.","user":"US64J0NPQ","ts":"1608425812.027800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=sCb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah there we go - now the Julia version makes much more sense."}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ"},{"client_msg_id":"84671c28-7ded-4f4b-8bb9-6f5029da4693","type":"message","text":"You might wanna see <https://m.youtube.com/watch?v=FJJTYQYB1JQ|https://m.youtube.com/watch?v=FJJTYQYB1JQ>","user":"U6N6VQE30","ts":"1608425814.028000","team":"T68168MUP","attachments":[{"service_name":"YouTube","service_url":"https://www.youtube.com/","title":"CppCon 2019: Andrei Alexandrescu “Speed Is Found In The Minds of People\"","title_link":"https://m.youtube.com/watch?v=FJJTYQYB1JQ","author_name":"CppCon","author_link":"https://www.youtube.com/user/CppCon","thumb_url":"https://i.ytimg.com/vi/FJJTYQYB1JQ/hqdefault.jpg","thumb_width":480,"thumb_height":360,"fallback":"YouTube Video: CppCon 2019: Andrei Alexandrescu “Speed Is Found In The Minds of People\"","video_html":"<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/FJJTYQYB1JQ?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","video_html_width":400,"video_html_height":225,"from_url":"https://m.youtube.com/watch?v=FJJTYQYB1JQ","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png","id":1,"original_url":"https://m.youtube.com/watch?v=FJJTYQYB1JQ"}],"blocks":[{"type":"rich_text","block_id":"W9g","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You might wanna see "},{"type":"link","url":"https://m.youtube.com/watch?v=FJJTYQYB1JQ","text":"https://m.youtube.com/watch?v=FJJTYQYB1JQ"}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ"},{"client_msg_id":"0d720e48-d426-42dd-9a79-32ba027af208","type":"message","text":"Deals with insertion sort too","user":"U6N6VQE30","ts":"1608425836.028300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"H+i0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Deals with insertion sort too"}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ"},{"client_msg_id":"ddd78619-3908-4d84-b8a1-3157e03564dc","type":"message","text":"Ooo I love the name of that video! Is it about algorithm design approaches or specific implementations?","user":"US64J0NPQ","ts":"1608425866.028500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2682","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ooo I love the name of that video! Is it about algorithm design approaches or specific implementations?"}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ"},{"client_msg_id":"edcda92c-dca4-44be-96af-d33fd898f7ed","type":"message","text":"I don't remember everything, but it's a lot of micro optimizations in different sorting algorithms","user":"U6N6VQE30","ts":"1608425936.028700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nk3dW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't remember everything, but it's a lot of micro optimizations in different sorting algorithms"}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ"},{"client_msg_id":"edccab0c-fa05-40ce-bf42-e09c59070d88","type":"message","text":"Gotcha - so in this case, is `@inbounds` removing the internal check for inbounds conditions since I _know with certainty_ that I will never go out of bounds?","user":"US64J0NPQ","ts":"1608426111.029200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w1oad","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Gotcha - so in this case, is "},{"type":"text","text":"@inbounds","style":{"code":true}},{"type":"text","text":" removing the internal check for inbounds conditions since I "},{"type":"text","text":"know with certainty","style":{"italic":true}},{"type":"text","text":" that I will never go out of bounds?"}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ","reactions":[{"name":"+1","users":["U0179G7FG4F"],"count":1}]},{"client_msg_id":"f435b618-3f6d-4e74-8c50-2edc8e176d5d","type":"message","text":"no, that's not it - you're benchmarking wrong.","user":"UH24GRBLL","ts":"1608449243.056500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZZQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no, that's not it - you're benchmarking wrong."}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ"},{"client_msg_id":"83703f52-88b5-4d80-bdd9-5dfdc8acd371","type":"message","text":"since both your `insertionsort` and `sort!` sort inplace, only the _first_ run during the benchmark (actually during the warmup for the benchmark) is doing any sorting at all.","user":"UH24GRBLL","ts":"1608449283.056700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s=a","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"since both your "},{"type":"text","text":"insertionsort","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"sort!","style":{"code":true}},{"type":"text","text":" sort inplace, only the "},{"type":"text","text":"first","style":{"italic":true}},{"type":"text","text":" run during the benchmark (actually during the warmup for the benchmark) is doing any sorting at all."}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ","reactions":[{"name":"smile","users":["U6N6VQE30"],"count":1}]},{"client_msg_id":"5c40a72f-6d0a-4bd7-8eee-c06eaa2f9a46","type":"message","text":"subsequent runs are already dealing with a sorted array, thus are uncannily fast","user":"UH24GRBLL","ts":"1608449303.056900","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1608449313.000000"},"blocks":[{"type":"rich_text","block_id":"eyW2A","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"subsequent runs are already dealing with a sorted array, thus are uncannily fast"}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ"},{"client_msg_id":"9246244a-34e3-4b4a-b40e-77d8bc37cd64","type":"message","text":"you probably want to do `@btime sortfunc(f) setup=(f=deepcopy(state)) evals=1` to make sure each evaluation during the benchmark is dealing with an unsorted array","user":"UH24GRBLL","ts":"1608450668.063800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kh4R","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you probably want to do "},{"type":"text","text":"@btime sortfunc(f) setup=(f=deepcopy(state)) evals=1","style":{"code":true}},{"type":"text","text":" to make sure each evaluation during the benchmark is dealing with an unsorted array"}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ"},{"client_msg_id":"0373661d-dafa-4ea1-b7d7-c6c266d0f610","type":"message","text":"and you probably also want to randomize the state new each time, in order to minimize caching &amp; branch prediction effects","user":"UH24GRBLL","ts":"1608450694.064200","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1608450702.000000"},"blocks":[{"type":"rich_text","block_id":"cNiTz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and you probably also want to randomize the state new each time, in order to minimize caching & branch prediction effects"}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ"},{"client_msg_id":"e662bee6-a7c4-4716-b0e7-2acba0aa9ae1","type":"message","text":"Good catch! :man-facepalming:  When you say state, <@UH24GRBLL>, what do you mean? Are you referring to the input? If so, could I randomize the state per your suggestion like: `f=deepcopy(rand(10))`?","user":"US64J0NPQ","ts":"1608484876.096000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JZYF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Good catch! "},{"type":"emoji","name":"man-facepalming"},{"type":"text","text":"  When you say state, "},{"type":"user","user_id":"UH24GRBLL"},{"type":"text","text":", what do you mean? Are you referring to the input? If so, could I randomize the state per your suggestion like: "},{"type":"text","text":"f=deepcopy(rand(10))","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ"},{"client_msg_id":"2fddafd9-e573-481d-a727-8f9f2351066e","type":"message","text":"You want to save your random vector elsewhere outside of the benchmark","user":"U6N6VQE30","ts":"1608485128.102000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"olhT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You want to save your random vector elsewhere outside of the benchmark"}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ"},{"client_msg_id":"62caedc2-9b75-4c83-b912-76b895adc62b","type":"message","text":"no, that's not what I mean <@U6N6VQE30>","user":"UH24GRBLL","ts":"1608487723.120300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qBA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no, that's not what I mean "},{"type":"user","user_id":"U6N6VQE30"}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ"},{"client_msg_id":"155c88f3-3ba9-4ec2-90a1-b7c816d5e3df","type":"message","text":"I'm talking about something like `@btime sortfunc(f) setup=(f=rand(100)) evals=1`","user":"UH24GRBLL","ts":"1608487764.120700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8I6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm talking about something like "},{"type":"text","text":"@btime sortfunc(f) setup=(f=rand(100)) evals=1","style":{"code":true}}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ"},{"client_msg_id":"ac411561-4514-4a95-bee2-46b7aea52dc4","type":"message","text":"i.e. giving each invocation of sortfunc a different vector to sort","user":"UH24GRBLL","ts":"1608487778.121300","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1608487782.000000"},"blocks":[{"type":"rich_text","block_id":"rQJG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i.e. giving each invocation of sortfunc a different vector to sort"}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ"},{"client_msg_id":"59c05cd0-827b-4e84-84b1-e24df71cb2cd","type":"message","text":"`deepcopy` on the result of `rand` during `setup` is redundant","user":"UH24GRBLL","ts":"1608487816.121600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"f/3G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"deepcopy","style":{"code":true}},{"type":"text","text":" on the result of "},{"type":"text","text":"rand","style":{"code":true}},{"type":"text","text":" during "},{"type":"text","text":"setup","style":{"code":true}},{"type":"text","text":" is redundant"}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ"},{"client_msg_id":"cd05eca9-d6c9-4428-aa3c-d64934d8e4a9","type":"message","text":"the bindings in `setup` are evaluated before each benchmarking run. The number of `evals` gives the number of evaluations per run.","user":"UH24GRBLL","ts":"1608487856.121800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KLhD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the bindings in "},{"type":"text","text":"setup","style":{"code":true}},{"type":"text","text":" are evaluated before each benchmarking run. The number of "},{"type":"text","text":"evals","style":{"code":true}},{"type":"text","text":" gives the number of evaluations per run."}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ"},{"client_msg_id":"d040e65f-7fbe-41a1-903d-6b5763275140","type":"message","text":"These numbers are usually tuned during the setup (iirc so that each benchmark runs for 5s), but you can force them to specific values","user":"UH24GRBLL","ts":"1608487888.122000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+UT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"These numbers are usually tuned during the setup (iirc so that each benchmark runs for 5s), but you can force them to specific values"}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ"},{"client_msg_id":"2c52458a-15fd-4a42-87ff-d509adee1724","type":"message","text":"I've had a PR for improving the communication before each benchmark is run in mind, but I'm not quite sure where to start","user":"UH24GRBLL","ts":"1608487919.122200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KwZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I've had a PR for improving the communication before each benchmark is run in mind, but I'm not quite sure where to start"}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ"},{"client_msg_id":"b808a62e-777b-44bf-a279-d062f2deabfc","type":"message","text":"maybe something similar to how `cargo bench` shows it?","user":"UH24GRBLL","ts":"1608487934.122400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KLKG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"maybe something similar to how "},{"type":"text","text":"cargo bench","style":{"code":true}},{"type":"text","text":" shows it?"}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ"},{"client_msg_id":"a8e258c1-f9ba-4ee8-85c9-0508c6e854e7","type":"message","text":"you'd do the `deepcopy` thing if the input is very specific and you're fine with measuring caching effects, <@US64J0NPQ>","user":"UH24GRBLL","ts":"1608487998.122600","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1608488007.000000"},"blocks":[{"type":"rich_text","block_id":"FYcT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you'd do the "},{"type":"text","text":"deepcopy","style":{"code":true}},{"type":"text","text":" thing if the input is very specific and you're fine with measuring caching effects, "},{"type":"user","user_id":"US64J0NPQ"}]}]}],"thread_ts":"1608424949.025900","parent_user_id":"US64J0NPQ"}]