[{"client_msg_id":"ab91ac0f-56a6-456a-b2ae-30df78b50fe9","type":"message","text":"Here's a question about the performance of iteration over `AbstractArray` type wrappers: I am surprised that using `enumerate` over a wrapper array is sometimes slower than just using the underlying vector - but only for certain element types.\n\nThe problem is best illustrated by example:\n```import Base: size, getindex, IndexStyle\n\n# define a wrapper type over a vector\nstruct V{T} &lt;: AbstractVector{T}\n    x::Vector{T}\nend\nsize(v::V) = (length(v.x),)\nBase.@propagate_inbounds getindex(v::V, i::Int) = v.x[i]\nIndexStyle(::Type{&lt;:V}) = IndexLinear()\n\n# do something with `enumerate` over this wrapper\nfunction f(v)\n    s = zero(eltype(v))\n    for (i,xᵢ) in enumerate(v)   # &lt;--\n        s += xᵢ*i\n    end\n    return s\nend\n# same thing, but grab the underlying vector directly\nfunction g(v)\n    s = zero(eltype(v))\n    for (i,xᵢ) in enumerate(v.x) # &lt;--\n        s += xᵢ*i\n    end\n    return s\nend\n\n# test performance\nv_int   = V(rand(1:10, 100000))\n\n@btime f($v_int) # slow: 59.199 μs\n@btime g($v_int) # fast: 30.200 μs\n\nv_float = V(rand(100000))\n\n@btime f($v_float) # 117.999 μs\n@btime g($v_float) # 117.999 μs```\nWhy is the `Int` version getting hit with a performance penalty (and, as puzzling for me, why isn't the `Float64` version)?","user":"UCE6XE42Z","ts":"1611193053.005300","team":"T68168MUP","edited":{"user":"UCE6XE42Z","ts":"1611196003.000000"},"blocks":[{"type":"rich_text","block_id":"lyvrb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Here's a question about the performance of iteration over "},{"type":"text","text":"AbstractArray","style":{"code":true}},{"type":"text","text":" type wrappers: I am surprised that using "},{"type":"text","text":"enumerate","style":{"code":true}},{"type":"text","text":" over a wrapper array is sometimes slower than just using the underlying vector - but only for certain element types.\n\nThe problem is best illustrated by example:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"import Base: size, getindex, IndexStyle\n\n# define a wrapper type over a vector\nstruct V{T} <: AbstractVector{T}\n    x::Vector{T}\nend\nsize(v::V) = (length(v.x),)\nBase.@propagate_inbounds getindex(v::V, i::Int) = v.x[i]\nIndexStyle(::Type{<:V}) = IndexLinear()\n\n# do something with `enumerate` over this wrapper\nfunction f(v)\n    s = zero(eltype(v))\n    for (i,xᵢ) in enumerate(v)   # <--\n        s += xᵢ*i\n    end\n    return s\nend\n# same thing, but grab the underlying vector directly\nfunction g(v)\n    s = zero(eltype(v))\n    for (i,xᵢ) in enumerate(v.x) # <--\n        s += xᵢ*i\n    end\n    return s\nend\n\n# test performance\nv_int   = V(rand(1:10, 100000))\n\n@btime f($v_int) # slow: 59.199 μs\n@btime g($v_int) # fast: 30.200 μs\n\nv_float = V(rand(100000))\n\n@btime f($v_float) # 117.999 μs\n@btime g($v_float) # 117.999 μs"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Why is the "},{"type":"text","text":"Int","style":{"code":true}},{"type":"text","text":" version getting hit with a performance penalty (and, as puzzling for me, why isn't the "},{"type":"text","text":"Float64","style":{"code":true}},{"type":"text","text":" version)?"}]}]}],"thread_ts":"1611193053.005300","reply_count":129,"reply_users_count":2,"latest_reply":"1611252099.099600","reply_users":["UH24GRBLL","UCE6XE42Z"],"subscribed":false},{"client_msg_id":"d0091f61-8c0e-410c-a946-22c6fc8f84ef","type":"message","text":"I'm guessing it's because of lack of inlining or some accidental type instability","user":"UH24GRBLL","ts":"1611225577.052500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j2ijw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm guessing it's because of lack of inlining or some accidental type instability"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"48593252-1116-46c3-8a28-ac4e91ec5d7a","type":"message","text":"have you seen <https://www.youtube.com/watch?v=jS9eouMJf_Y> ?","user":"UH24GRBLL","ts":"1611225580.052700","team":"T68168MUP","attachments":[{"service_name":"YouTube","service_url":"https://www.youtube.com/","title":"An introduction to high performance custom arrays | Matt Bauman","title_link":"https://www.youtube.com/watch?v=jS9eouMJf_Y","author_name":"The Julia Programming Language","author_link":"https://www.youtube.com/user/JuliaLanguage","thumb_url":"https://i.ytimg.com/vi/jS9eouMJf_Y/hqdefault.jpg","thumb_width":480,"thumb_height":360,"fallback":"YouTube Video: An introduction to high performance custom arrays | Matt Bauman","video_html":"<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/jS9eouMJf_Y?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","video_html_width":400,"video_html_height":225,"from_url":"https://www.youtube.com/watch?v=jS9eouMJf_Y","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png","id":1,"original_url":"https://www.youtube.com/watch?v=jS9eouMJf_Y"}],"blocks":[{"type":"rich_text","block_id":"EDR/R","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"have you seen "},{"type":"link","url":"https://www.youtube.com/watch?v=jS9eouMJf_Y"},{"type":"text","text":" ?"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"4be076bd-aeaa-4229-a4bb-b8f3f6d23d8a","type":"message","text":"Hmm, it doesn't seem inlining related per se; I tried adding `@inline` to the `getindex` definition, and that doesn't change anything.","user":"UCE6XE42Z","ts":"1611239391.065500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"==j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmm, it doesn't seem inlining related per se; I tried adding "},{"type":"text","text":"@inline","style":{"code":true}},{"type":"text","text":" to the "},{"type":"text","text":"getindex","style":{"code":true}},{"type":"text","text":" definition, and that doesn't change anything."}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"714a268f-cd70-4b66-9ef8-028a43e2566d","type":"message","text":"I had a rewatch of a good portion of that presentation; it's great, but I don't think it holds the key to this issue here","user":"UCE6XE42Z","ts":"1611239417.065700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"z4oq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I had a rewatch of a good portion of that presentation; it's great, but I don't think it holds the key to this issue here"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"e34f0120-4e5a-45a8-a306-d25dbb8f8b1b","type":"message","text":"have you forwarded to size to the size of the inner array as well?","user":"UH24GRBLL","ts":"1611239482.065900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qtE6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"have you forwarded to size to the size of the inner array as well?"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"f6a50909-516b-4de5-a91d-5c658801569a","type":"message","text":"indexing style might also be best to forward directly","user":"UH24GRBLL","ts":"1611239502.066100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"e4Lr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"indexing style might also be best to forward directly"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"4373115d-a77f-425b-a68e-1523b033022a","type":"message","text":"I've already defined `size` and `IndexStyle` specializations here though","user":"UCE6XE42Z","ts":"1611239521.066300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TZB0/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I've already defined "},{"type":"text","text":"size","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"IndexStyle","style":{"code":true}},{"type":"text","text":" specializations here though"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"64911c7e-7e54-4920-b14b-e49679cc74c9","type":"message","text":"How do you mean?","user":"UCE6XE42Z","ts":"1611239524.066500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/aM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How do you mean?"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"123d19d7-e26f-4c8d-9d03-b164b5d0695e","type":"message","text":"The fact that this works without issue for `Float64` element types but not `Int64` element types suggests to me that this is subtler, somehow","user":"UCE6XE42Z","ts":"1611239581.066700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4jrat","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The fact that this works without issue for "},{"type":"text","text":"Float64","style":{"code":true}},{"type":"text","text":" element types but not "},{"type":"text","text":"Int64","style":{"code":true}},{"type":"text","text":" element types suggests to me that this is subtler, somehow"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"f2635dfe-f0e3-4cc2-9fd8-439ad91693f2","type":"message","text":"you can do `size(v::V) = size(v.x)` and similar for the IndexStyle","user":"UH24GRBLL","ts":"1611239602.066900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wAf8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can do "},{"type":"text","text":"size(v::V) = size(v.x)","style":{"code":true}},{"type":"text","text":" and similar for the IndexStyle"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"67f0636f-c5dd-4547-b511-b3f01f66f4ee","type":"message","text":"I think there might be some differences here :thinking_face:","user":"UH24GRBLL","ts":"1611239614.067100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iK/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think there might be some differences here "},{"type":"emoji","name":"thinking_face"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"0fe0c59c-6d8c-469a-b87a-1a3b468f4a29","type":"message","text":"another thing might be that Vector has to multi-argument `getindex` defined, so that could be another difference","user":"UH24GRBLL","ts":"1611239646.067300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kb4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"another thing might be that Vector has to multi-argument "},{"type":"text","text":"getindex","style":{"code":true}},{"type":"text","text":" defined, so that could be another difference"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"d1077a14-af34-47ef-93b2-e2f025bc0adf","type":"message","text":"Sure, that's true, and that might be clearer style - but in this case we already have `size(v::Vector) ==(length(v),)`  and also `IndexStyle(::Vector) == IndexLinear()`","user":"UCE6XE42Z","ts":"1611239682.067500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uXC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sure, that's true, and that might be clearer style - but in this case we already have "},{"type":"text","text":"size(v::Vector) ==(length(v),)","style":{"code":true}},{"type":"text","text":"  and also "},{"type":"text","text":"IndexStyle(::Vector) == IndexLinear()","style":{"code":true}}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"880fb9f9-74d3-4557-9e1b-2982629768d4","type":"message","text":"So I don't see how that could make a difference either","user":"UCE6XE42Z","ts":"1611239695.067700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DffJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So I don't see how that could make a difference either"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"0b8dff52-3680-4862-8edb-3139cf485fd3","type":"message","text":"the regular `Vector{Int}` SIMDs, whereas your wrapper does not","user":"UH24GRBLL","ts":"1611239829.067900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HVXzI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the regular "},{"type":"text","text":"Vector{Int}","style":{"code":true}},{"type":"text","text":" SIMDs, whereas your wrapper does not"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"e1bea158-1afd-468f-a2e2-44fbed3d23aa","type":"message","text":"the Float64 version also doesn't seem to SIMD since there's some type promotion stuff going on due to the enumerate, explaining why both versions are the same","user":"UH24GRBLL","ts":"1611239885.068100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"H3FL3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the Float64 version also doesn't seem to SIMD since there's some type promotion stuff going on due to the enumerate, explaining why both versions are the same"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"43fe5f4c-53da-410f-bc46-ea5872a85386","type":"message","text":"so my thought process was that forwarding more information and maybe defining the multi-arg getindex would help this SIMDing","user":"UH24GRBLL","ts":"1611239912.068300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Nc+Bi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so my thought process was that forwarding more information and maybe defining the multi-arg getindex would help this SIMDing"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"dfbb8386-118c-4590-bd74-f996e4c6b7e1","type":"message","text":"that's all :)","user":"UH24GRBLL","ts":"1611239922.068500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HaAB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's all :)"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"4dbaf80f-07e4-48bb-a6c8-bcb76d4545aa","type":"message","text":"the Int64 version doesn't have to deal with type conversions, since everything is Int64 already anyway","user":"UH24GRBLL","ts":"1611239958.068700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"e+VN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the Int64 version doesn't have to deal with type conversions, since everything is Int64 already anyway"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"592bfa09-b848-4637-ad27-404b1915bed7","type":"message","text":"what the wrapper version doesn't see/do is that getindex always derefs the same array","user":"UH24GRBLL","ts":"1611239990.068900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KBq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what the wrapper version doesn't see/do is that getindex always derefs the same array"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"063fbc3e-824f-4991-8f2c-602b1aebadb9","type":"message","text":"now, since the difference is already visible in `@code_llvm` (since the Vector{Int} version already shows vector loads), the optimization has to happen before we hit LLVM","user":"UH24GRBLL","ts":"1611240061.069100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sigM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"now, since the difference is already visible in "},{"type":"text","text":"@code_llvm","style":{"code":true}},{"type":"text","text":" (since the Vector{Int} version already shows vector loads), the optimization has to happen before we hit LLVM"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"e8d19e1a-cdc5-439a-a350-c443383aaf18","type":"message","text":"leading to the conclusion that there's some missing interface methods defined for the wrapper vs. the original Vector","user":"UH24GRBLL","ts":"1611240088.069300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nxz7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"leading to the conclusion that there's some missing interface methods defined for the wrapper vs. the original Vector"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"8f6a0f88-a3b5-4307-bd6c-236a785684bb","type":"message","text":"Hmm, those are all interesting points.","user":"UCE6XE42Z","ts":"1611240218.069500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KoTp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmm, those are all interesting points."}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"dd496d70-f0c1-453e-91d1-8458b5ff9892","type":"message","text":"I just don't see what interface methods could be missing: this is all that's requested in the AbstractArray interface documentation","user":"UCE6XE42Z","ts":"1611240247.069700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9JFFT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I just don't see what interface methods could be missing: this is all that's requested in the AbstractArray interface documentation"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"a98e5914-8d9f-4cf5-b674-da677cefbb4a","type":"message","text":"yes, that's the bare minimum to fulfill the interface","user":"UH24GRBLL","ts":"1611240285.069900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Bqp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, that's the bare minimum to fulfill the interface"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"743ecdb8-ac66-46ca-b433-7fb9c73c5ce4","type":"message","text":"that doesn't mean that it's all that's necessary to make all optimizations available","user":"UH24GRBLL","ts":"1611240304.070100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Os4hx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that doesn't mean that it's all that's necessary to make all optimizations available"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"98d57ac4-3804-408f-b38c-62d53556fbad","type":"message","text":"The issue also exists in this simpler variation:\n```import Base: size, getindex, IndexStyle\n\n# define a wrapper type over a vector\nstruct V{T} &lt;: AbstractVector{T}\n    x::Vector{T}\nend\nsize(v::V) = size(v.x)\nBase.@propagate_inbounds getindex(v::V, i::Int) = v.x[i]\nIndexStyle(::Type{&lt;:V{T}}) where T = IndexStyle(Vector{T}) # ... IndexLinear()\n\n# do something with `enumerate` over this wrapper\nfunction f(v)\n    s = zero(eltype(v))\n    for xᵢ in v   # &lt;--\n        s += xᵢ\n    end\n    return s\nend\n# same thing, but grab the underlying vector directly\nfunction g(v)\n    s = zero(eltype(v))\n    for xᵢ in v.x # &lt;--\n        s += xᵢ\n    end\n    return s\nend\n# manual iteration over elements\nfunction h(v)\n    s = zero(eltype(v))\n    @inbounds for i in eachindex(v) # &lt;--\n        xᵢ = v[i]                   # &lt;--\n        s += xᵢ\n    end\n    return s\nend\n\n# test performance\nusing BenchmarkTools\nv_int   = V(rand(1:10, 100000))\nv_float = V(rand(100000))\n\n@btime f($v_int) # slow:    40.499 μs\n@btime g($v_int) # fast:    14.399 μs\n@btime h($v_int) # fastest: 13.799 μs\n\n@btime f($v_float) # 117.999 μs\n@btime g($v_float) # 117.999 μs\n@btime h($v_float) # 117.999 μs```","user":"UCE6XE42Z","ts":"1611240319.070300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7pV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The issue also exists in this simpler variation:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"import Base: size, getindex, IndexStyle\n\n# define a wrapper type over a vector\nstruct V{T} <: AbstractVector{T}\n    x::Vector{T}\nend\nsize(v::V) = size(v.x)\nBase.@propagate_inbounds getindex(v::V, i::Int) = v.x[i]\nIndexStyle(::Type{<:V{T}}) where T = IndexStyle(Vector{T}) # ... IndexLinear()\n\n# do something with `enumerate` over this wrapper\nfunction f(v)\n    s = zero(eltype(v))\n    for xᵢ in v   # <--\n        s += xᵢ\n    end\n    return s\nend\n# same thing, but grab the underlying vector directly\nfunction g(v)\n    s = zero(eltype(v))\n    for xᵢ in v.x # <--\n        s += xᵢ\n    end\n    return s\nend\n# manual iteration over elements\nfunction h(v)\n    s = zero(eltype(v))\n    @inbounds for i in eachindex(v) # <--\n        xᵢ = v[i]                   # <--\n        s += xᵢ\n    end\n    return s\nend\n\n# test performance\nusing BenchmarkTools\nv_int   = V(rand(1:10, 100000))\nv_float = V(rand(100000))\n\n@btime f($v_int) # slow:    40.499 μs\n@btime g($v_int) # fast:    14.399 μs\n@btime h($v_int) # fastest: 13.799 μs\n\n@btime f($v_float) # 117.999 μs\n@btime g($v_float) # 117.999 μs\n@btime h($v_float) # 117.999 μs"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"5be40ef8-764b-4d2d-8d40-6395f3246362","type":"message","text":"most of the optional methods allow for more optimizations under different circumstances - the base interface is just used as the fallback then","user":"UH24GRBLL","ts":"1611240352.070500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"egyr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"most of the optional methods allow for more optimizations under different circumstances - the base interface is just used as the fallback then"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"587c9995-3300-4fe0-8d0e-caa4c4ec3953","type":"message","text":"Sure; but my question then is what is then the missing interface methods?","user":"UCE6XE42Z","ts":"1611240358.070700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MKo1G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sure; but my question then is what is then the missing interface methods?"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"6599e798-2b13-496b-88be-cf55fefb4b89","type":"message","text":"Seems to me most of the optional methods are mainly intended to facilitate non-conventional behaviors (e.g. non-1-based indexing, etc.) not optimizations","user":"UCE6XE42Z","ts":"1611240403.070900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/RU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Seems to me most of the optional methods are mainly intended to facilitate non-conventional behaviors (e.g. non-1-based indexing, etc.) not optimizations"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"fdc51461-6fab-4003-91be-bf9456d60149","type":"message","text":"e.g. the multiarguemtn getindex, like I've mentioned above","user":"UH24GRBLL","ts":"1611240410.071100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uX0M","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"e.g. the multiarguemtn getindex, like I've mentioned above"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"d8ade0d4-7815-4fdb-ac5f-848db9e46b9c","type":"message","text":"like `getindex(A, I...)`","user":"UH24GRBLL","ts":"1611240431.071300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=+jQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"like "},{"type":"text","text":"getindex(A, I...)","style":{"code":true}}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"0a17adae-ca2c-4900-9261-bd8c8def717e","type":"message","text":"But the multi-arg `getindex` doesn't seem relevant here since that's specifically for arrays with `CartesianIndex` style","user":"UCE6XE42Z","ts":"1611240472.071500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"U/J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But the multi-arg "},{"type":"text","text":"getindex","style":{"code":true}},{"type":"text","text":" doesn't seem relevant here since that's specifically for arrays with "},{"type":"text","text":"CartesianIndex","style":{"code":true}},{"type":"text","text":" style"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"52397425-f54b-423e-abca-9bb52b893105","type":"message","text":"(and, I just tried, defining multi-arg `getindex` doesn't change anything)","user":"UCE6XE42Z","ts":"1611240521.071700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Njfd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(and, I just tried, defining multi-arg "},{"type":"text","text":"getindex","style":{"code":true}},{"type":"text","text":" doesn't change anything)"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"81e33471-09f6-4922-b3c1-c8b561decda0","type":"message","text":"I'll try to cross-post this to Discourse; this is still a mystery to me..! Thanks for you input and suggestions <@UH24GRBLL>","user":"UCE6XE42Z","ts":"1611240669.072100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=ND","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'll try to cross-post this to Discourse; this is still a mystery to me..! Thanks for you input and suggestions "},{"type":"user","user_id":"UH24GRBLL"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"4a05482c-a732-4d65-af61-7fa8de6b74a4","type":"message","text":"like I said, the core issue is that there's SIMD going on for the plain Vector and not for your wrapper","user":"UH24GRBLL","ts":"1611241085.072300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g0hF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"like I said, the core issue is that there's SIMD going on for the plain Vector and not for your wrapper"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"d2840858-79b3-4231-9db4-963bf1c249d6","type":"message","text":"I appreciate that; so the goal is to make it SIMD in either case.","user":"UCE6XE42Z","ts":"1611241248.072500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6=fD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I appreciate that; so the goal is to make it SIMD in either case."}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"cb43a314-428d-4f88-8fde-83135b73cd7d","type":"message","text":"the `@code_llvm` shows a bunch of bounds checking going on, so eliminating that is the core problem","user":"UH24GRBLL","ts":"1611241263.072700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LWnp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the "},{"type":"text","text":"@code_llvm","style":{"code":true}},{"type":"text","text":" shows a bunch of bounds checking going on, so eliminating that is the core problem"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"6e335e07-5335-460d-a18a-d8ae8ee7aa59","type":"message","text":"<https://discourse.julialang.org/t/iteration-getindex-performance-of-abstractarray-wrapper-types/53729>","user":"UCE6XE42Z","ts":"1611241264.072900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aMH","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://discourse.julialang.org/t/iteration-getindex-performance-of-abstractarray-wrapper-types/53729"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"7141af8e-561c-4a88-95be-ad98245f3b2a","type":"message","text":"```julia&gt; iterate(v_int)\n(9, (Base.OneTo(100000), 1))\n\njulia&gt; iterate(v_int.x)\n(9, 2)```","user":"UH24GRBLL","ts":"1611241704.073100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DVO","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> iterate(v_int)\n(9, (Base.OneTo(100000), 1))\n\njulia> iterate(v_int.x)\n(9, 2)"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"c8b3f574-4e07-4062-8068-b167fd106127","type":"message","text":"there's your difference","user":"UH24GRBLL","ts":"1611241708.073300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rwxD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there's your difference"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"ad044de4-8f9c-4d46-8951-0547dbc2326b","type":"message","text":"Yeah, I noticed that as well; but the confusing thing is that this is exactly the same for the `Float64` version (that doesn't have these problems):\n```julia&gt; iterate(v_float)\n(0.02047866779322205, (Base.OneTo(100000), 1))\n\njulia&gt; iterate(v_float.x)\n(0.02047866779322205, 2)```","user":"UCE6XE42Z","ts":"1611241786.073500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"b+VoI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, I noticed that as well; but the confusing thing is that this is exactly the same for the "},{"type":"text","text":"Float64","style":{"code":true}},{"type":"text","text":" version (that doesn't have these problems):\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> iterate(v_float)\n(0.02047866779322205, (Base.OneTo(100000), 1))\n\njulia> iterate(v_float.x)\n(0.02047866779322205, 2)"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"a693b4b8-efbf-4044-a6cd-d03997100f1b","type":"message","text":"like I said, the float version can't SIMD due to the type conversion happening when trying to multiply the index (from enumerate) with the element","user":"UH24GRBLL","ts":"1611241882.073700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oEU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"like I said, the float version can't SIMD due to the type conversion happening when trying to multiply the index (from enumerate) with the element"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"aecf4ad0-0dfa-4741-8c11-73adfd008282","type":"message","text":"the index is Int64, the element is Float64 - the conversion has to take place","user":"UH24GRBLL","ts":"1611241896.073900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lCn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the index is Int64, the element is Float64 - the conversion has to take place"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"6d4473b7-b5e7-42ed-a607-45338237c5f3","type":"message","text":"```julia&gt; using BenchmarkTools\n\njulia&gt; @benchmark f($v_int.x)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     32.600 μs (0.00% GC)\n  median time:      33.400 μs (0.00% GC)\n  mean time:        37.432 μs (0.00% GC)\n  maximum time:     504.100 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1\n\njulia&gt; @benchmark f($v_int)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     32.400 μs (0.00% GC)\n  median time:      33.200 μs (0.00% GC)\n  mean time:        35.545 μs (0.00% GC)\n  maximum time:     476.400 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1```","user":"UH24GRBLL","ts":"1611242016.074100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gcYl","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using BenchmarkTools\n\njulia> @benchmark f($v_int.x)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     32.600 μs (0.00% GC)\n  median time:      33.400 μs (0.00% GC)\n  mean time:        37.432 μs (0.00% GC)\n  maximum time:     504.100 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1\n\njulia> @benchmark f($v_int)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     32.400 μs (0.00% GC)\n  median time:      33.200 μs (0.00% GC)\n  mean time:        35.545 μs (0.00% GC)\n  maximum time:     476.400 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"f65f629f-bee5-424e-9896-588ee14b4a33","type":"message","text":"```julia&gt; Base.iterate(v::V) = (first(v), 2)\n\njulia&gt; Base.iterate(v::V, i) = iterate(v.x, i)```\njust by adding those two","user":"UH24GRBLL","ts":"1611242032.074300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AUG","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Base.iterate(v::V) = (first(v), 2)\n\njulia> Base.iterate(v::V, i) = iterate(v.x, i)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\njust by adding those two"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"d1229c04-3bd9-43f4-8cdc-98ab5983149e","type":"message","text":"<@UCE6XE42Z> does that solve your mystery?","user":"UH24GRBLL","ts":"1611242276.075000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2tWO","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UCE6XE42Z"},{"type":"text","text":" does that solve your mystery?"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"d02ac6b4-59d3-401c-a39b-e399f28c9c31","type":"message","text":"the Float64 version has the exact same problem, it's just that it doesn't SIMD at all, not even as a Vector, because the index that's returned by `enumerate` has to be converted to Float64 first, preventing SIMD","user":"UH24GRBLL","ts":"1611242323.075200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W6e","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the Float64 version has the exact same problem, it's just that it doesn't SIMD at all, not even as a Vector, because the index that's returned by "},{"type":"text","text":"enumerate","style":{"code":true}},{"type":"text","text":" has to be converted to Float64 first, preventing SIMD"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"7fd808e9-c6ba-4cb5-baee-5cd7187a8916","type":"message","text":"Sorry; I had an IRL thing.","user":"UCE6XE42Z","ts":"1611242592.075700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5GN+C","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sorry; I had an IRL thing."}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"5540a2d6-1792-43c8-92ff-244b22e48155","type":"message","text":"I'll try defining the `iterate` methods you mention - but I want to stress that the `enumerate` and conversion thing probably is a red herring: in the example #2 I posted above - and the same thing in the Discourse post - I find the same problem even in a simpler `sum`-like implementation where it is just plain iteration without any indices","user":"UCE6XE42Z","ts":"1611242672.075900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BeJM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'll try defining the "},{"type":"text","text":"iterate","style":{"code":true}},{"type":"text","text":" methods you mention - but I want to stress that the "},{"type":"text","text":"enumerate","style":{"code":true}},{"type":"text","text":" and conversion thing probably is a red herring: in the example #2 I posted above - and the same thing in the Discourse post - I find the same problem even in a simpler "},{"type":"text","text":"sum","style":{"code":true}},{"type":"text","text":"-like implementation where it is just plain iteration without any indices"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"80c468e1-fc73-44ea-ac22-56a2397db05d","type":"message","text":"Defining those `iterate` methods indeed fix the problem..!","user":"UCE6XE42Z","ts":"1611242810.076100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=cyo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Defining those "},{"type":"text","text":"iterate","style":{"code":true}},{"type":"text","text":" methods indeed fix the problem..!"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"f56165ea-6ee4-4238-a03f-927c8c0df305","type":"message","text":"Floating point operations are almost always slower than int operations, no matter what you do","user":"UH24GRBLL","ts":"1611242810.076300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"T2vZs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Floating point operations are almost always slower than int operations, no matter what you do"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"61a846e1-7cf3-4115-9827-383fda34181f","type":"message","text":"```julia&gt; @benchmark sum(v_float)\nBenchmarkTools.Trial:\n  memory estimate:  16 bytes\n  allocs estimate:  1\n  --------------\n  minimum time:     119.400 μs (0.00% GC)\n  median time:      119.600 μs (0.00% GC)\n  mean time:        125.445 μs (0.00% GC)\n  maximum time:     647.900 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1```","user":"UH24GRBLL","ts":"1611242818.076500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g0CFk","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @benchmark sum(v_float)\nBenchmarkTools.Trial:\n  memory estimate:  16 bytes\n  allocs estimate:  1\n  --------------\n  minimum time:     119.400 μs (0.00% GC)\n  median time:      119.600 μs (0.00% GC)\n  mean time:        125.445 μs (0.00% GC)\n  maximum time:     647.900 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"53f4fab3-554f-4973-ada3-68c9d80540f6","type":"message","text":"I'm not concerned that the floating point version is slower - I'm concerned that the iteration abstraction has a performance penalty for the `Vector{Int}` wrapper but not for the `Vector{Float64}` wrapper","user":"UCE6XE42Z","ts":"1611242857.076700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/+Gnc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not concerned that the floating point version is slower - I'm concerned that the iteration abstraction has a performance penalty for the "},{"type":"text","text":"Vector{Int}","style":{"code":true}},{"type":"text","text":" wrapper but not for the "},{"type":"text","text":"Vector{Float64}","style":{"code":true}},{"type":"text","text":" wrapper"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"b38954be-08bf-4e0b-9d01-10c6aa9198e3","type":"message","text":"```julia&gt; @benchmark sum(v_float)\nBenchmarkTools.Trial:\n  memory estimate:  16 bytes\n  allocs estimate:  1\n  --------------\n  minimum time:     119.400 μs (0.00% GC)\n  median time:      119.600 μs (0.00% GC)\n  mean time:        125.445 μs (0.00% GC)\n  maximum time:     647.900 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1\n\njulia&gt; function h(v)\n           s = zero(eltype(v))\n           @inbounds for i in eachindex(v) # &lt;--\n                s += v[i]\n           end\n           return s\n       end\nh (generic function with 1 method)\n\njulia&gt; @benchmark h(v_float)\nBenchmarkTools.Trial:\n  memory estimate:  16 bytes\n  allocs estimate:  1\n  --------------\n  minimum time:     119.500 μs (0.00% GC)\n  median time:      119.600 μs (0.00% GC)\n  mean time:        126.015 μs (0.00% GC)\n  maximum time:     724.600 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1```","user":"UH24GRBLL","ts":"1611242876.076900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8hY","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @benchmark sum(v_float)\nBenchmarkTools.Trial:\n  memory estimate:  16 bytes\n  allocs estimate:  1\n  --------------\n  minimum time:     119.400 μs (0.00% GC)\n  median time:      119.600 μs (0.00% GC)\n  mean time:        125.445 μs (0.00% GC)\n  maximum time:     647.900 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1\n\njulia> function h(v)\n           s = zero(eltype(v))\n           @inbounds for i in eachindex(v) # <--\n                s += v[i]\n           end\n           return s\n       end\nh (generic function with 1 method)\n\njulia> @benchmark h(v_float)\nBenchmarkTools.Trial:\n  memory estimate:  16 bytes\n  allocs estimate:  1\n  --------------\n  minimum time:     119.500 μs (0.00% GC)\n  median time:      119.600 μs (0.00% GC)\n  mean time:        126.015 μs (0.00% GC)\n  maximum time:     724.600 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"3648c9ab-b592-4e89-ad8c-ec7a1e8e1dc4","type":"message","text":"I mean, sure, but to me that's more a problem of the floating point version not SIMDing whereas the Int version does","user":"UH24GRBLL","ts":"1611242929.077500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ze+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean, sure, but to me that's more a problem of the floating point version not SIMDing whereas the Int version does"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"cd4e0efe-d350-45dd-9981-64a9570deeb7","type":"message","text":"Yes, that is my point: everything works as expected for the `Vector{Float64}` wrapper, but not for the `Vector{Int}` wrapper, where we apparently need to define these `iterate` specializations to get \"native\" performance","user":"UCE6XE42Z","ts":"1611242953.077700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZoMLL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, that is my point: everything works as expected for the "},{"type":"text","text":"Vector{Float64}","style":{"code":true}},{"type":"text","text":" wrapper, but not for the "},{"type":"text","text":"Vector{Int}","style":{"code":true}},{"type":"text","text":" wrapper, where we apparently need to define these "},{"type":"text","text":"iterate","style":{"code":true}},{"type":"text","text":" specializations to get \"native\" performance"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"68ce4a15-bf67-47a6-9759-3312ed9b65b6","type":"message","text":"you can't really SIMD floating point easily without making sacrifices in accuracy, since floating point addition is not commutative","user":"UH24GRBLL","ts":"1611242953.077900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hFP+6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can't really SIMD floating point easily without making sacrifices in accuracy, since floating point addition is not commutative"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"11fd1be3-23c2-4e23-9e7f-d47f2a015a21","type":"message","text":"all versions are native performance, it's just that the Int wrapper doesn't SIMD by default because it doesn't see that it's always just a offset into memory..","user":"UH24GRBLL","ts":"1611243011.078100","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1611243018.000000"},"blocks":[{"type":"rich_text","block_id":"3/G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"all versions are native performance, it's just that the Int wrapper doesn't SIMD by default because it doesn't see that it's always just a offset into memory.."}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"6bbd127c-431a-4f32-b5d2-61f43074f5f8","type":"message","text":"My point here is that it should probably not be necessary to define these `iterate` methods to get \"proper\" performance of the `Vector{Int}` wrapper; I think this should fall out of the `AbstractArray`  subtyping.","user":"UCE6XE42Z","ts":"1611243026.078400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LsI5T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My point here is that it should probably not be necessary to define these "},{"type":"text","text":"iterate","style":{"code":true}},{"type":"text","text":" methods to get \"proper\" performance of the "},{"type":"text","text":"Vector{Int}","style":{"code":true}},{"type":"text","text":" wrapper; I think this should fall out of the "},{"type":"text","text":"AbstractArray","style":{"code":true}},{"type":"text","text":"  subtyping."}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"4b0f2afd-7526-4ecb-b51f-9852fe46162e","type":"message","text":"By native I just mean \"same performance as underlying vector\"","user":"UCE6XE42Z","ts":"1611243060.078600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BPCJX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"By native I just mean \"same performance as underlying vector\""}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"b2a046fe-3cea-4327-a87a-7e171a525d94","type":"message","text":"that's not possible unfortunately, since just subtyping AbstractArray does not guarantee contigous memory","user":"UH24GRBLL","ts":"1611243079.078800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4tm6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's not possible unfortunately, since just subtyping AbstractArray does not guarantee contigous memory"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"b219edad-a4f9-419a-981e-65bef1c11239","type":"message","text":"by default you have to check bounds on iterate - `Vector` can optimize that though, since it can assume all indices between firstindex and the last index are valid","user":"UH24GRBLL","ts":"1611243216.079000","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1611243230.000000"},"blocks":[{"type":"rich_text","block_id":"xrc1/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"by default you have to check bounds on iterate - "},{"type":"text","text":"Vector","style":{"code":true}},{"type":"text","text":" can optimize that though, since it can assume all indices between firstindex and the last index are valid"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"ce3ffcf6-6b0f-4555-bf05-f05b76a9744f","type":"message","text":"you can check `@edit iterate(v_int.x)` on how that's done","user":"UH24GRBLL","ts":"1611243248.079300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BkLEP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can check "},{"type":"text","text":"@edit iterate(v_int.x)","style":{"code":true}},{"type":"text","text":" on how that's done"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"2b652b20-441f-4d38-a91e-8ecbeb923116","type":"message","text":"without telling the iteration interface that your type too can support that, it can't know that we can rely on that","user":"UH24GRBLL","ts":"1611243268.079500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jlW4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"without telling the iteration interface that your type too can support that, it can't know that we can rely on that"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"a7399eaf-7922-4452-a6c7-4910e970ae11","type":"message","text":"if you check `@edit iterate(v_int)` without defining the custom iteration methods, you'll see that it is optimized as far as can be done with just the knowledge that it's &lt;: AbstractArray","user":"UH24GRBLL","ts":"1611243315.079700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ANmh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you check "},{"type":"text","text":"@edit iterate(v_int)","style":{"code":true}},{"type":"text","text":" without defining the custom iteration methods, you'll see that it is optimized as far as can be done with just the knowledge that it's <: AbstractArray"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"82e94e2a-7c98-44f6-8221-d426a78f384d","type":"message","text":"the check for `=== nothing` and the branch that results from that is what prevents SIMD","user":"UH24GRBLL","ts":"1611243345.080100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GtF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the check for "},{"type":"text","text":"=== nothing","style":{"code":true}},{"type":"text","text":" and the branch that results from that is what prevents SIMD"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"f40ba412-2741-49c0-bdfc-928001209d80","type":"message","text":"I've noted your `iterate` point in <https://discourse.julialang.org/t/iteration-getindex-performance-of-abstractarray-wrapper-types/53729/2?u=tchr> now. I think this should be in the Interfaces docs.","user":"UCE6XE42Z","ts":"1611243375.080400","team":"T68168MUP","attachments":[{"service_name":"JuliaLang","title":"Iteration/getindex performance of AbstractArray wrapper-types","title_link":"https://discourse.julialang.org/t/iteration-getindex-performance-of-abstractarray-wrapper-types/53729/2?u=tchr","text":"@Sukera pointed out on Slack that defining iterate(v::V) = iterate(v.x) iterate(v::V, i) = iterate(v.x, i) removes the performance penalty for the Vector{Int} wrapper relative to the underlying array. Needing to do this to get “full” performance is not specifically mentioned in the AbstractArray Interfaces docs; maybe it should be?","fallback":"JuliaLang: Iteration/getindex performance of AbstractArray wrapper-types","thumb_url":"https://aws1.discourse-cdn.com/business5/uploads/julialang/original/2X/1/12829a7ba92b924d4ce81099cbf99785bee9b405.png","ts":1611243308,"from_url":"https://discourse.julialang.org/t/iteration-getindex-performance-of-abstractarray-wrapper-types/53729/2?u=tchr","thumb_width":408,"thumb_height":263,"service_icon":"https://aws1.discourse-cdn.com/business5/uploads/julialang/optimized/2X/6/6ca888e296f59ca2a599807f7d5edd489e3d1829_2_180x180.png","id":1,"original_url":"https://discourse.julialang.org/t/iteration-getindex-performance-of-abstractarray-wrapper-types/53729/2?u=tchr"}],"blocks":[{"type":"rich_text","block_id":"e0dNh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I've noted your "},{"type":"text","text":"iterate","style":{"code":true}},{"type":"text","text":" point in "},{"type":"link","url":"https://discourse.julialang.org/t/iteration-getindex-performance-of-abstractarray-wrapper-types/53729/2?u=tchr"},{"type":"text","text":" now. I think this should be in the Interfaces docs."}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"05e9eec5-2d26-4b77-b1da-e75dbc431423","type":"message","text":"I agree that it should be mentioned in the docs, but I don't think the Interfaces section is the correct place - after all, the interface is satisfied with the other methods and adding the custom `iterate` forward doesn't give you extra features or different behaviour","user":"UH24GRBLL","ts":"1611243476.080700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GAMc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I agree that it should be mentioned in the docs, but I don't think the Interfaces section is the correct place - after all, the interface is satisfied with the other methods and adding the custom "},{"type":"text","text":"iterate","style":{"code":true}},{"type":"text","text":" forward doesn't give you extra features or different behaviour"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"b9e21f0f-177d-4144-8875-33dd0650cecd","type":"message","text":"instead, the Performance tips are probably the best place to put this","user":"UH24GRBLL","ts":"1611243488.080900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HKlL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"instead, the Performance tips are probably the best place to put this"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"5c3ee2fc-e725-4717-a3d5-e67a78b0d664","type":"message","text":"The performance tips section is already crazy overloaded.","user":"UCE6XE42Z","ts":"1611243503.081100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TPLOs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The performance tips section is already crazy overloaded."}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"03795405-a248-458f-a159-c5e153a30fa5","type":"message","text":"Would you be so kind as to make a PR?","user":"UH24GRBLL","ts":"1611243504.081300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ze6j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Would you be so kind as to make a PR?"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"b41351c6-f22f-4402-9374-1430bf095438","type":"message","text":"It has everything under the sun in no particular sorting","user":"UCE6XE42Z","ts":"1611243522.081500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vj1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It has everything under the sun in no particular sorting"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"a06767ec-035a-4149-93f4-2fd7da1e8d84","type":"message","text":"it doesn't really fit the interface section though","user":"UH24GRBLL","ts":"1611243554.081700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"32X=D","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it doesn't really fit the interface section though"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"4ea517e8-94ff-4b8c-ac1a-34de8345651b","type":"message","text":"I'll see if I can understand the root cause properly; if I can, I'll make a PR to some doc section","user":"UCE6XE42Z","ts":"1611243564.081900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uY4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'll see if I can understand the root cause properly; if I can, I'll make a PR to some doc section"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"2969e8bc-7f95-4803-93b6-4d8feed7afae","type":"message","text":"and while I agree that the section is kinda bloated, it's better to have it there and be able to link to it directly instead of having to link some seemingly unrelated section and then telling people to look for the specific mention","user":"UH24GRBLL","ts":"1611243603.082100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jG3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and while I agree that the section is kinda bloated, it's better to have it there and be able to link to it directly instead of having to link some seemingly unrelated section and then telling people to look for the specific mention"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"4ad8dba3-6206-463b-822c-af5a2051e0ed","type":"message","text":"(the fundamental problem is the branch in the default `iterate` that can't be elided by default, which prevents SIMD)","user":"UH24GRBLL","ts":"1611243649.082300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JZOp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(the fundamental problem is the branch in the default "},{"type":"text","text":"iterate","style":{"code":true}},{"type":"text","text":" that can't be elided by default, which prevents SIMD)"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"1813d218-31c6-4cbb-9cd5-adc113fb5159","type":"message","text":"My point is that I would never think to look there when encountering this problem: it's just too large of a haystack to be looking in for this specific a problem","user":"UCE6XE42Z","ts":"1611243664.082500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FrTUM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My point is that I would never think to look there when encountering this problem: it's just too large of a haystack to be looking in for this specific a problem"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"eb9ef410-8338-4a64-b3bb-5926b65defaf","type":"message","text":"Anyway, food for thought certainly; I'll digest this a bit - thanks for sticking through it.","user":"UCE6XE42Z","ts":"1611243703.082700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gIQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Anyway, food for thought certainly; I'll digest this a bit - thanks for sticking through it."}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z","reactions":[{"name":"+1","users":["UH24GRBLL"],"count":1}]},{"client_msg_id":"7cb9ca07-0885-4a58-8e43-f563ddfa82dd","type":"message","text":"hmm, the `iterate` method is mentioned as an optional method for the `AbstractArray` interface","user":"UH24GRBLL","ts":"1611243842.082900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h43TW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmm, the "},{"type":"text","text":"iterate","style":{"code":true}},{"type":"text","text":" method is mentioned as an optional method for the "},{"type":"text","text":"AbstractArray","style":{"code":true}},{"type":"text","text":" interface"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"b8f521f6-fb13-41d5-a10b-f5ef14333ac6","type":"message","text":"so maybe shortly mentioning it in the description part for `iterate` of that table would be best, actually - maybe `important when wrapping other arrays`?","user":"UH24GRBLL","ts":"1611243968.083200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cA2+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so maybe shortly mentioning it in the description part for "},{"type":"text","text":"iterate","style":{"code":true}},{"type":"text","text":" of that table would be best, actually - maybe "},{"type":"text","text":"important when wrapping other arrays","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"81e98943-797f-4d38-8173-561ecf36374c","type":"message","text":"I've played around some more with this and I think it should be possible to fix this for any wrapper type","user":"UH24GRBLL","ts":"1611244872.083400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xWX7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I've played around some more with this and I think it should be possible to fix this for any wrapper type"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"ec51edc4-1b08-490d-a81f-4e8e5bac1062","type":"message","text":"I don't know what the consequences of the patch could be though","user":"UH24GRBLL","ts":"1611244898.083600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1EBlT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't know what the consequences of the patch could be though"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"cf5964c1-d224-4fc5-9c52-d4f23c5b12d4","type":"message","text":"I'd have to run the benchmarks","user":"UH24GRBLL","ts":"1611244908.083800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xya","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'd have to run the benchmarks"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"ee1c2ff1-0405-4071-b45a-0cec20433c53","type":"message","text":"That would be nice, indeed.","user":"UCE6XE42Z","ts":"1611245600.084500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Fnc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That would be nice, indeed."}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"2f280d7d-0afe-450c-a2de-3d616dc96625","type":"message","text":"I was thinking it could be possible to add a new method to `iterate(::AbstractArray, ::OneTo)` that mimics the one in `iterate(::Array, i)` , but my attempt at that didn't work.","user":"UCE6XE42Z","ts":"1611245661.084700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XJKKO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I was thinking it could be possible to add a new method to "},{"type":"text","text":"iterate(::AbstractArray, ::OneTo)","style":{"code":true}},{"type":"text","text":" that mimics the one in "},{"type":"text","text":"iterate(::Array, i)","style":{"code":true}},{"type":"text","text":" , but my attempt at that didn't work."}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"ceafd5b9-4a73-488a-a8ab-cb2e59a9ae2f","type":"message","text":"I don't know what the policy around `@propagate_inbounds` is, but adding that to the existing method eliminates the boundscheck as well","user":"UH24GRBLL","ts":"1611245684.084900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mUv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't know what the policy around "},{"type":"text","text":"@propagate_inbounds","style":{"code":true}},{"type":"text","text":" is, but adding that to the existing method eliminates the boundscheck as well"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"d384f667-66b4-4d25-bd9d-af91508d2a17","type":"message","text":"that would fix this for anything that's iterable and has inbounds semantics, but I don't know if that's desired here","user":"UH24GRBLL","ts":"1611245713.085100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"snna","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that would fix this for anything that's iterable and has inbounds semantics, but I don't know if that's desired here"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"7944e21b-1ca2-4f6a-8ec6-f13669944e38","type":"message","text":"I'll check locally if anything breaks when I add this and if I don't see anything immediately blowing up in my face, I'll make a PR so the timing benchmarks can run on CI","user":"UH24GRBLL","ts":"1611245758.085300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ov+1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'll check locally if anything breaks when I add this and if I don't see anything immediately blowing up in my face, I'll make a PR so the timing benchmarks can run on CI"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"74f0c7f7-ce3f-4880-8985-27f78bd4e845","type":"message","text":"Hmm; adding `Base.@propagate_inbounds` to `iterate(A::AbstractArray, state=(eachindex(A),))` and to `iterate(r::Base.OrdinalRange)` didn't change anything for me?","user":"UCE6XE42Z","ts":"1611245988.085500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KDZt9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmm; adding "},{"type":"text","text":"Base.@propagate_inbounds","style":{"code":true}},{"type":"text","text":" to "},{"type":"text","text":"iterate(A::AbstractArray, state=(eachindex(A),))","style":{"code":true}},{"type":"text","text":" and to "},{"type":"text","text":"iterate(r::Base.OrdinalRange)","style":{"code":true}},{"type":"text","text":" didn't change anything for me?"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"56275c29-f6d1-4b44-aadc-4e21792dd968","type":"message","text":"Which method are you adding it to?","user":"UCE6XE42Z","ts":"1611246012.085700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"N+gn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Which method are you adding it to?"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"92991a3b-db4e-47c4-a0e0-4d6c9ab62dea","type":"message","text":"the former","user":"UH24GRBLL","ts":"1611246023.085900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nHWi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the former"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"b9171f3d-6aa1-45d1-bb5d-515945fbf8d7","type":"message","text":"Doesn't do anything for me (on 1.5.1)","user":"UCE6XE42Z","ts":"1611246052.086100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W6i","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Doesn't do anything for me (on 1.5.1)"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"9f7bd005-4451-432b-8710-4b3c75a88058","type":"message","text":"yeah I'm on 1.6 :)","user":"UH24GRBLL","ts":"1611246062.086300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GyZQu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah I'm on 1.6 :)"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"fb3ebee5-68c8-42c0-b9ff-be31706d33da","type":"message","text":"that's why I want to try this out locally with the most recent branch of 1.6","user":"UH24GRBLL","ts":"1611246077.086500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ul6K","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's why I want to try this out locally with the most recent branch of 1.6"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"52fee6cd-da74-481e-9b70-ff2fef6598b6","type":"message","text":"currently building that, then I'll test some more","user":"UH24GRBLL","ts":"1611246088.086700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yKBu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"currently building that, then I'll test some more"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"ebcf2b85-6a5e-47f4-8126-2837a3a1ffeb","type":"message","text":"iterate on the Ordinalrange shouldn't make a difference imo - it's the `A[y[1]]` in the iterate on AbstractArray that boundschecks","user":"UH24GRBLL","ts":"1611246142.087000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XcCAj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"iterate on the Ordinalrange shouldn't make a difference imo - it's the "},{"type":"text","text":"A[y[1]]","style":{"code":true}},{"type":"text","text":" in the iterate on AbstractArray that boundschecks"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"1a22730e-9644-4258-a363-c5cf010928dd","type":"message","text":"Tried on 1.6.0-beta1 just now; doesn't do anything for me there either. I'm just pirating the method though, dunno if that's why.","user":"UCE6XE42Z","ts":"1611246155.087400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DSa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Tried on 1.6.0-beta1 just now; doesn't do anything for me there either. I'm just pirating the method though, dunno if that's why."}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"3d96cc7e-ebd2-46de-95c4-d89c93714251","type":"message","text":"That makes sense, re: OrdinalRange","user":"UCE6XE42Z","ts":"1611246177.087900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Zl8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That makes sense, re: OrdinalRange"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"d319971c-71b3-4e92-b8b2-c04706827d63","type":"message","text":"how are you pirating it?","user":"UH24GRBLL","ts":"1611246190.088200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=0gFO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"how are you pirating it?"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"13a9c58b-000a-458f-a35f-573f6bc07e4c","type":"message","text":"just `import Base: iterate`  and then\n```Base.@propagate_inbounds function iterate(A::AbstractArray, state=(eachindex(A),))\n    y = iterate(state...)\n    y === nothing &amp;&amp; return nothing\n    A[y[1]], (state[1], Base.tail(y)...)\nend```","user":"UCE6XE42Z","ts":"1611246240.088500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7xKnj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"just "},{"type":"text","text":"import Base: iterate","style":{"code":true}},{"type":"text","text":"  and then\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Base.@propagate_inbounds function iterate(A::AbstractArray, state=(eachindex(A),))\n    y = iterate(state...)\n    y === nothing && return nothing\n    A[y[1]], (state[1], Base.tail(y)...)\nend"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"823c871c-59a4-4491-82c3-fd9146370b9e","type":"message","text":"yeah, defining that works for me","user":"UH24GRBLL","ts":"1611246280.088700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wy1fz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, defining that works for me"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"3e6af07f-9a05-4034-a564-949478414bf0","type":"message","text":":confused:","user":"UCE6XE42Z","ts":"1611246292.088900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hMEM","elements":[{"type":"rich_text_section","elements":[{"type":"emoji","name":"confused"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"52e9305d-7e06-445b-8e85-05dc66066b1f","type":"message","text":"gimme a sec, I'll check once my build of the newest branch is done","user":"UH24GRBLL","ts":"1611246308.089300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ENz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"gimme a sec, I'll check once my build of the newest branch is done"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"5d6a7db6-0740-47f1-8836-390b5f5659a6","type":"message","text":"IIRC, beta1 was a little behind the commit I was on an hour ago","user":"UH24GRBLL","ts":"1611246328.089600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ONq0R","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"IIRC, beta1 was a little behind the commit I was on an hour ago"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"c3350c0e-059c-4d89-9e87-f563f12c3107","type":"message","text":"In fact, on 1.6.0-beta1, I'm seeing a significantly larger performance gap - 88 μs instead of 40 μs for the \"slow\" `Vector{Int}` wrapper that doesn't have the `iterate` specializations.","user":"UCE6XE42Z","ts":"1611246380.089800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"X5t","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In fact, on 1.6.0-beta1, I'm seeing a significantly larger performance gap - 88 μs instead of 40 μs for the \"slow\" "},{"type":"text","text":"Vector{Int}","style":{"code":true}},{"type":"text","text":" wrapper that doesn't have the "},{"type":"text","text":"iterate","style":{"code":true}},{"type":"text","text":" specializations."}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"eb972871-63aa-4efc-9d7c-c342769d75c4","type":"message","text":"well I'm seeing 91µs vs 32µs, so the gap on your end seems smaller","user":"UH24GRBLL","ts":"1611246571.090000","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1611246579.000000"},"blocks":[{"type":"rich_text","block_id":"opbF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well I'm seeing 91µs vs 32µs, so the gap on your end seems smaller"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"3f200a3e-3a24-41a0-94f2-5f9c40a7c3c6","type":"message","text":"I think I will file an issue for that as a regression","user":"UCE6XE42Z","ts":"1611246613.090300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xxG2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think I will file an issue for that as a regression"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"5d4cffed-2020-4cac-a51c-292aa32dddd5","type":"message","text":"check on the 1.6 first","user":"UH24GRBLL","ts":"1611246643.090500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c5/L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"check on the 1.6 first"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"639e9173-2635-4226-80a7-33c51572bdf8","type":"message","text":"the beta is ~60 commits behind by now","user":"UH24GRBLL","ts":"1611246659.090700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0t+mw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the beta is ~60 commits behind by now"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"677564a7-1d0e-4684-aa81-c1a91f0e6970","type":"message","text":"I don't have the nightly version unfortunately","user":"UCE6XE42Z","ts":"1611246843.090900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+8A","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't have the nightly version unfortunately"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"b7575bfa-a93a-4990-ad30-b9f5cacad33b","type":"message","text":"It can always be closed if this isn't relevant on nightly","user":"UCE6XE42Z","ts":"1611246864.091100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"B4Omz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It can always be closed if this isn't relevant on nightly"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"47c83714-4ca2-4da3-a3e3-44c6509d4513","type":"message","text":"Ok, I found the difference","user":"UH24GRBLL","ts":"1611248063.094800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1kbG3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok, I found the difference"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"24e40063-f1ba-41ac-8756-afa3dd660b42","type":"message","text":"adding `@inbounds` to `f` was also important","user":"UH24GRBLL","ts":"1611248076.095000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uZlB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"adding "},{"type":"text","text":"@inbounds","style":{"code":true}},{"type":"text","text":" to "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" was also important"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"62487c81-fe25-4c47-838d-6fb7ec25b668","type":"message","text":"neither alone is enough, but both together work","user":"UH24GRBLL","ts":"1611248091.095200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ab/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"neither alone is enough, but both together work"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"1514a159-7d55-4832-8c4f-cccd66f98da1","type":"message","text":"oh my, adding the `@propagate_inbounds` to `iterate` as well as `@inbounds` to both `f` and `h` make both significantly faster","user":"UH24GRBLL","ts":"1611248628.095900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XlVj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh my, adding the "},{"type":"text","text":"@propagate_inbounds","style":{"code":true}},{"type":"text","text":" to "},{"type":"text","text":"iterate","style":{"code":true}},{"type":"text","text":" as well as "},{"type":"text","text":"@inbounds","style":{"code":true}},{"type":"text","text":" to both "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"h","style":{"code":true}},{"type":"text","text":" make both significantly faster"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"9f3e5726-69e2-4c34-bc4b-eaadaad7ce43","type":"message","text":"for Int - Floats don't change because floating point summation doesn't easily SIMD","user":"UH24GRBLL","ts":"1611248723.096100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VCb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"for Int - Floats don't change because floating point summation doesn't easily SIMD"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"82f02000-7b7e-4983-9c45-0a56adc12aa1","type":"message","text":"are you sure the `f` you measured is the plain sum?","user":"UH24GRBLL","ts":"1611249002.096900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ryXo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"are you sure the "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" you measured is the plain sum?"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"fc90ead4-15e5-433e-b38e-2abf3d145f03","type":"message","text":"because I get way faster times on 1.6 than 40µs for the plain sum - the muladd sum is 40µs for me","user":"UH24GRBLL","ts":"1611249031.097100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pU5Fe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"because I get way faster times on 1.6 than 40µs for the plain sum - the muladd sum is 40µs for me"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"437a10c2-83b0-4f6d-bc6c-384786fe2711","type":"message","text":"```julia&gt; function h(v)\n           s = zero(eltype(v))\n           for vᵢ in v\n               s += vᵢ\n           end\n           return s\n       end\nh (generic function with 1 method)\n\njulia&gt; @benchmark h(v_int)\nBenchmarkTools.Trial:\n  memory estimate:  16 bytes\n  allocs estimate:  1\n  --------------\n  minimum time:     17.900 μs (0.00% GC)\n  median time:      18.200 μs (0.00% GC)\n  mean time:        57.270 μs (0.00% GC)\n  maximum time:     9.892 ms (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1```","user":"UH24GRBLL","ts":"1611249037.097300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7Qe","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function h(v)\n           s = zero(eltype(v))\n           for vᵢ in v\n               s += vᵢ\n           end\n           return s\n       end\nh (generic function with 1 method)\n\njulia> @benchmark h(v_int)\nBenchmarkTools.Trial:\n  memory estimate:  16 bytes\n  allocs estimate:  1\n  --------------\n  minimum time:     17.900 μs (0.00% GC)\n  median time:      18.200 μs (0.00% GC)\n  mean time:        57.270 μs (0.00% GC)\n  maximum time:     9.892 ms (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"9ad75e1b-1e96-4631-8a47-c11527b00d0c","type":"message","text":"that's with forwarded `iterate`","user":"UH24GRBLL","ts":"1611249049.097500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+bdMt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's with forwarded "},{"type":"text","text":"iterate","style":{"code":true}}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"16496cf7-b91c-4167-87b6-961bdc7351c8","type":"message","text":"I guess the expectation is that when we do `for x in xs` that this automatically implies `@inbounds` so it is sad that we need to do that manually here then","user":"UCE6XE42Z","ts":"1611249467.097700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dwaf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess the expectation is that when we do "},{"type":"text","text":"for x in xs","style":{"code":true}},{"type":"text","text":" that this automatically implies "},{"type":"text","text":"@inbounds","style":{"code":true}},{"type":"text","text":" so it is sad that we need to do that manually here then"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"c5921da1-0845-471c-bdad-7780ebf123d5","type":"message","text":"But you are absolutely right that the combination of `@inbounds` and `@propagate_inbounds` indeed fixes it - nice find! The sad thing is that it is not \"automatic\" but requires that one add the extraneous `@inbounds`  notation that isn't otherwise needed for this type of iteration","user":"UCE6XE42Z","ts":"1611249640.097900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iAAk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But you are absolutely right that the combination of "},{"type":"text","text":"@inbounds","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"@propagate_inbounds","style":{"code":true}},{"type":"text","text":" indeed fixes it - nice find! The sad thing is that it is not \"automatic\" but requires that one add the extraneous "},{"type":"text","text":"@inbounds","style":{"code":true}},{"type":"text","text":"  notation that isn't otherwise needed for this type of iteration"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"d808d831-bb73-4319-9a62-a75721cf66bd","type":"message","text":"Still, it seems worthwhile to me to add the `@propagate_inbounds` to the Base version of `iterate(::AbstractArray, ...)`","user":"UCE6XE42Z","ts":"1611249677.098100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LzBi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Still, it seems worthwhile to me to add the "},{"type":"text","text":"@propagate_inbounds","style":{"code":true}},{"type":"text","text":" to the Base version of "},{"type":"text","text":"iterate(::AbstractArray, ...)","style":{"code":true}}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"841d527e-17e1-40e8-9872-e3e11b98be2e","type":"message","text":"(and your fix works on both 1.6.0-beta1 and 1.5.1 on my end btw)","user":"UCE6XE42Z","ts":"1611249728.098300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"E0Qfn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(and your fix works on both 1.6.0-beta1 and 1.5.1 on my end btw)"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"1e89df46-1e15-4cbe-ac43-7106c579063a","type":"message","text":"yeah, I've added it as a comment on github as well","user":"UH24GRBLL","ts":"1611249988.098900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wsRL8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, I've added it as a comment on github as well"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"ac21405a-d936-4fa4-89a1-536bbbee4194","type":"message","text":"I have no idea about the impact of that `@propagate_inbounds` though, so best to let people familiar with the details investigate further","user":"UH24GRBLL","ts":"1611250056.099100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BWmi3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have no idea about the impact of that "},{"type":"text","text":"@propagate_inbounds","style":{"code":true}},{"type":"text","text":" though, so best to let people familiar with the details investigate further"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"926cebe8-34c2-4815-9766-e9b4a72482b9","type":"message","text":"adding the manual forward to the inner array also still fixes it, without having to do `@inbounds` even","user":"UH24GRBLL","ts":"1611250094.099300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/hMvG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"adding the manual forward to the inner array also still fixes it, without having to do "},{"type":"text","text":"@inbounds","style":{"code":true}},{"type":"text","text":" even"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"35a1e430-ab77-4c97-b4b2-27531e2d5623","type":"message","text":"Yep","user":"UCE6XE42Z","ts":"1611252099.099600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4/XxO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yep"}]}]}],"thread_ts":"1611193053.005300","parent_user_id":"UCE6XE42Z"}]