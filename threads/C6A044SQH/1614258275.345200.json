[{"client_msg_id":"ce000d26-259e-468e-915c-c8f21e89835c","type":"message","text":"How to distinguish between \"found\" and \"not found\" in `findfirst(dict)`? E.g.:\n```d = Dict(nothing =&gt; 1, 2 =&gt; 3)\nfindfirst(==(3), d)  # == 2, ok: d[2] == 3\nfindfirst(==(1), d)  # == nothing, ok: d[nothing] == 1\nfindfirst(==(2), d)  # == nothing, but actually not found```\nFor now I do an extra check that `f(d[findfirst(f, d)]) == true`, but this doesn't look clean...","user":"UGTUKUHLN","ts":"1614258275.345200","team":"T68168MUP","edited":{"user":"UGTUKUHLN","ts":"1614258386.000000"},"blocks":[{"type":"rich_text","block_id":"X4tz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How to distinguish between \"found\" and \"not found\" in "},{"type":"text","text":"findfirst(dict)","style":{"code":true}},{"type":"text","text":"? E.g.:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"d = Dict(nothing => 1, 2 => 3)\nfindfirst(==(3), d)  # == 2, ok: d[2] == 3\nfindfirst(==(1), d)  # == nothing, ok: d[nothing] == 1\nfindfirst(==(2), d)  # == nothing, but actually not found"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"For now I do an extra check that "},{"type":"text","text":"f(d[findfirst(f, d)]) == true","style":{"code":true}},{"type":"text","text":", but this doesn't look clean..."}]}]}],"thread_ts":"1614258275.345200","reply_count":21,"reply_users_count":4,"latest_reply":"1614269113.374300","reply_users":["B01J9QZ4SP8","U7HAYKY9X","UBF9YRB6H","UGTUKUHLN"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1614258279.345300","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1614258275.345200","parent_user_id":"UGTUKUHLN","reactions":[{"name":"bridge","users":["UGTUKUHLN"],"count":1}]},{"type":"message","subtype":"bot_message","text":"Success, it has been cross posted <https://discourse.julialang.org/t/56014| to Discourse>. Keep and eye out on Discourse for responses and please add an answer there once you are satisfied with the solution so others can benefit as well. Happy debugging!","ts":"1614258297.345600","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1614258275.345200","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"6c39bbb3-b01c-43e2-9642-030230f07542","type":"message","text":"I don't think you can... A better approach would be if Base had used a dedicated `Nullable` -like type for this.","user":"U7HAYKY9X","ts":"1614259703.347100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zw2N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't think you can... A better approach would be if Base had used a dedicated "},{"type":"text","text":"Nullable","style":{"code":true}},{"type":"text","text":" -like type for this."}]}]}],"thread_ts":"1614258275.345200","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"d758d75d-87e5-4251-9921-de680105879f","type":"message","text":"You can implement that youself, quite easily, though. Check out the implementation for `findfirst` for dicts, and copy it. Then return either `Some(k)` or `nothing` .","user":"U7HAYKY9X","ts":"1614259744.347300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rNU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can implement that youself, quite easily, though. Check out the implementation for "},{"type":"text","text":"findfirst","style":{"code":true}},{"type":"text","text":" for dicts, and copy it. Then return either "},{"type":"text","text":"Some(k)","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"nothing","style":{"code":true}},{"type":"text","text":" ."}]}]}],"thread_ts":"1614258275.345200","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"a2c48ac9-54bd-4f2b-8595-fc5933fab16f","type":"message","text":"I think you should just avoid using `nothing` as a key, to be honest. Julia is a flexible language but as a consequence you get opportunities like this to do confusing things","user":"UBF9YRB6H","ts":"1614260894.349300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=Mtyg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think you should just avoid using "},{"type":"text","text":"nothing","style":{"code":true}},{"type":"text","text":" as a key, to be honest. Julia is a flexible language but as a consequence you get opportunities like this to do confusing things"}]}]}],"thread_ts":"1614258275.345200","parent_user_id":"UGTUKUHLN","reactions":[{"name":"+1","users":["UPNRULT51","U01HD5VFXJM"],"count":2}]},{"client_msg_id":"947e330f-e51b-4ab8-8784-2f9f2bcdae3e","type":"message","text":"<@U7HAYKY9X> sure, but an additional check is easier than copying findfirst :) Then why does `Some` even exist in base if it's not used in such cases?","user":"UGTUKUHLN","ts":"1614260919.349500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"r1Gc","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U7HAYKY9X"},{"type":"text","text":" sure, but an additional check is easier than copying findfirst :) Then why does "},{"type":"text","text":"Some","style":{"code":true}},{"type":"text","text":" even exist in base if it's not used in such cases?"}]}]}],"thread_ts":"1614258275.345200","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"193eb1ed-32fb-4302-9a62-f2f86f1a9bdc","type":"message","text":"Don't know. This was discussed extensively about 3-4 years ago before I learned Julia - I haven't read those discussions. I agree the final design is not very good. One advantage of the current design is that it relieves you from having to unwrap the `Some` , but I do think the price we currently pay for it is too high.","user":"U7HAYKY9X","ts":"1614261147.350100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BhM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Don't know. This was discussed extensively about 3-4 years ago before I learned Julia - I haven't read those discussions. I agree the final design is not very good. One advantage of the current design is that it relieves you from having to unwrap the "},{"type":"text","text":"Some","style":{"code":true}},{"type":"text","text":" , but I do think the price we currently pay for it is too high."}]}]}],"thread_ts":"1614258275.345200","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"3f6a2f91-10eb-466d-b2bf-428b92bac1e2","type":"message","text":"I made <https://github.com/jakobnissen/ErrorTypes.jl> recently precisely for this purpose :)","user":"U7HAYKY9X","ts":"1614261172.350300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kYj8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I made "},{"type":"link","url":"https://github.com/jakobnissen/ErrorTypes.jl"},{"type":"text","text":" recently precisely for this purpose :)"}]}]}],"thread_ts":"1614258275.345200","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"76aa3ad7-1d56-441b-9344-2abf0fe24851","type":"message","text":"<@UBF9YRB6H> `nothing` as a Dict key was not confusing at all before I needed `findfirst` . Have been using such dicts for several months and didn't notice any issues before.","user":"UGTUKUHLN","ts":"1614262428.351100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TbQc","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UBF9YRB6H"},{"type":"text","text":" "},{"type":"text","text":"nothing","style":{"code":true}},{"type":"text","text":" as a Dict key was not confusing at all before I needed "},{"type":"text","text":"findfirst","style":{"code":true}},{"type":"text","text":" . Have been using such dicts for several months and didn't notice any issues before."}]}]}],"thread_ts":"1614258275.345200","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"3dc88667-0951-44a5-8227-2bb5d50840e6","type":"message","text":"Also, it's interesting to note that it's also inconsistent which function errors when no result is found, and which returns a sentinel value. Compare `findfirst(isodd, [])`  with `minimum([])`","user":"U7HAYKY9X","ts":"1614262664.351400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6M1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, it's interesting to note that it's also inconsistent which function errors when no result is found, and which returns a sentinel value. Compare "},{"type":"text","text":"findfirst(isodd, [])","style":{"code":true}},{"type":"text","text":"  with "},{"type":"text","text":"minimum([])","style":{"code":true}}]}]}],"thread_ts":"1614258275.345200","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"6e1abd03-5d7a-45cb-b11a-4122a20e0b9d","type":"message","text":"I don't think that's inconsistent, tbh.","user":"UBF9YRB6H","ts":"1614262746.351800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"igiTF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't think that's inconsistent, tbh."}]}]}],"thread_ts":"1614258275.345200","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"538026a0-a775-4824-8404-6785f3be0b67","type":"message","text":"Really? Why not? Isn't it sort of the same thing?","user":"U7HAYKY9X","ts":"1614262823.352000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OlJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Really? Why not? Isn't it sort of the same thing?"}]}]}],"thread_ts":"1614258275.345200","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"2b446699-c85c-40cd-8593-1d16f5358fb8","type":"message","text":"Kind of? But `minimum([])` is clearly undefined with no elements. Whereas `findfirst` is saying \"find the first instance of `x` in a collection\", which is still a logical thing to ask of an empty collection.","user":"UBF9YRB6H","ts":"1614263029.352200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XjG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Kind of? But "},{"type":"text","text":"minimum([])","style":{"code":true}},{"type":"text","text":" is clearly undefined with no elements. Whereas "},{"type":"text","text":"findfirst","style":{"code":true}},{"type":"text","text":" is saying \"find the first instance of "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" in a collection\", which is still a logical thing to ask of an empty collection."}]}]}],"thread_ts":"1614258275.345200","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"7f4ab427-b48f-4ee8-8b8f-cea58c8c96f7","type":"message","text":"The minimum of an empty set is undefined. Looking at an empty set and saying \"this thing isn't in it\" is fine.","user":"UBF9YRB6H","ts":"1614263057.352600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Zi=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The minimum of an empty set is undefined. Looking at an empty set and saying \"this thing isn't in it\" is fine."}]}]}],"thread_ts":"1614258275.345200","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"3d8cf64a-6901-49fc-88a3-82d98147812f","type":"message","text":"It's far from \"clearly undefined\" for minimum, btw. In math a minimum of an empty set of real number is commonly defined as +inf. This doesn't mean that I want julia's `minimum(Float[])` to return `inf` :)","user":"UGTUKUHLN","ts":"1614263233.352800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hv/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's far from \"clearly undefined\" for minimum, btw. In math a minimum of an empty set of real number is commonly defined as +inf. This doesn't mean that I want julia's "},{"type":"text","text":"minimum(Float[])","style":{"code":true}},{"type":"text","text":" to return "},{"type":"text","text":"inf","style":{"code":true}},{"type":"text","text":" :)"}]}]}],"thread_ts":"1614258275.345200","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"b6d3eafa-82c9-4f9c-9526-c8a7da09575d","type":"message","text":"But something like `init=` keyword argument to `minimum` could be useful - the same way as it exists for `sum` and others.","user":"UGTUKUHLN","ts":"1614263353.353000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nY8S","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But something like "},{"type":"text","text":"init=","style":{"code":true}},{"type":"text","text":" keyword argument to "},{"type":"text","text":"minimum","style":{"code":true}},{"type":"text","text":" could be useful - the same way as it exists for "},{"type":"text","text":"sum","style":{"code":true}},{"type":"text","text":" and others."}]}]}],"thread_ts":"1614258275.345200","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"1762c7c6-3d4d-49fa-ae6e-022d1287d9ec","type":"message","text":"a `minimum` is just a wrapper for `reduce`, which as an `init` keyword argument.\n\nA quick google search indicates that it's not necessarily the convention that an empty set has a `+Inf` minimum in math","user":"UBF9YRB6H","ts":"1614263655.353400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7m6F","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"a "},{"type":"text","text":"minimum","style":{"code":true}},{"type":"text","text":" is just a wrapper for "},{"type":"text","text":"reduce","style":{"code":true}},{"type":"text","text":", which as an "},{"type":"text","text":"init","style":{"code":true}},{"type":"text","text":" keyword argument.\n\nA quick google search indicates that it's not necessarily the convention that an empty set has a "},{"type":"text","text":"+Inf","style":{"code":true}},{"type":"text","text":" minimum in math"}]}]}],"thread_ts":"1614258275.345200","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"e6f93ee3-17eb-4c0a-a13d-6c449612a7a0","type":"message","text":"There has been added an init keyword to minimum (at least in 1.6). <@UBF9YRB6H> my idea is not that it would have a minimum of Inf or NaN or something, but rather that it should return an error value, similar to <https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.min>","user":"U7HAYKY9X","ts":"1614263809.353600","team":"T68168MUP","attachments":[{"title":"std::iter::Iterator - Rust","title_link":"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.min","text":"API documentation for the Rust `Iterator` trait in crate `std`.","fallback":"std::iter::Iterator - Rust","from_url":"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.min","service_icon":"https://doc.rust-lang.org/favicon.ico","service_name":"doc.rust-lang.org","id":1,"original_url":"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.min"}],"blocks":[{"type":"rich_text","block_id":"0SHc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There has been added an init keyword to minimum (at least in 1.6). "},{"type":"user","user_id":"UBF9YRB6H"},{"type":"text","text":" my idea is not that it would have a minimum of Inf or NaN or something, but rather that it should return an error value, similar to "},{"type":"link","url":"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.min"}]}]}],"thread_ts":"1614258275.345200","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"10f2207f-4fc3-498d-b069-f7fde21e000b","type":"message","text":"`nothing` would be the equivalent value. Feel free to file an issue if you think it should be changed","user":"UBF9YRB6H","ts":"1614263915.353900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CR4um","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"nothing","style":{"code":true}},{"type":"text","text":" would be the equivalent value. Feel free to file an issue if you think it should be changed"}]}]}],"thread_ts":"1614258275.345200","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"996f9136-1934-4f6a-9c2e-37646b8234cf","type":"message","text":"It's not an equivalent value precisely because of OP's issue. The problem is that `nothing` is a valid key value. (And there's also issues with `Union` vs an enum, but that's a different issue). But realistically, that's not going to change, it's way too fundamental for Julia to be changed now","user":"U7HAYKY9X","ts":"1614264475.355600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HB4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's not an equivalent value precisely because of OP's issue. The problem is that "},{"type":"text","text":"nothing","style":{"code":true}},{"type":"text","text":" is a valid key value. (And there's also issues with "},{"type":"text","text":"Union","style":{"code":true}},{"type":"text","text":" vs an enum, but that's a different issue). But realistically, that's not going to change, it's way too fundamental for Julia to be changed now"}]}]}],"thread_ts":"1614258275.345200","parent_user_id":"UGTUKUHLN"},{"type":"message","subtype":"bot_message","text":"Hey <@UGTUKUHLN>, if you were able to find an answer here on Slack, please cross post it to Discourse via the link above. Thank you! ","ts":"1614269113.374300","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1614258275.345200","parent_user_id":"UGTUKUHLN"}]