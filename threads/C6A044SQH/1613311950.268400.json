[{"client_msg_id":"10EBFEE6-2785-4155-A497-1155CA52406E","type":"message","text":"Sorry for the n00b question, but: say `foo(x)` returns a Vector{Int} if fixed length, say 3. Then `[foo(i) for i in 1:10]` returns a vector of vectors. What's \"the best\" way to instead get a 10x3 Matrix{Int} ?","user":"U012FH66MFW","ts":"1613311950.268400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Edl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sorry for the n00b question, but: say "},{"type":"text","text":"foo(x)","style":{"code":true}},{"type":"text","text":" returns a Vector{Int} if fixed length, say 3. Then "},{"type":"text","text":"[foo(i) for i in 1:10]","style":{"code":true}},{"type":"text","text":" returns a vector of vectors. What's \"the best\" way to instead get a 10x3 Matrix{Int} ?"}]}]}],"thread_ts":"1613311950.268400","reply_count":18,"reply_users_count":6,"latest_reply":"1613320177.283600","reply_users":["B01J9QZ4SP8","UCZ7VBGUD","U01L0RJC6FM","U7HAYKY9X","UD0NS8PDF","U012FH66MFW"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1613311952.268500","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1613311950.268400","parent_user_id":"U012FH66MFW"},{"client_msg_id":"04581885-77A8-4F0B-87D5-35828E7E1239","type":"message","text":"The easiest way is probably `reduce(hcat, vec_of_vec)`","user":"UCZ7VBGUD","ts":"1613312419.269900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2uH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The easiest way is probably "},{"type":"text","text":"reduce(hcat, vec_of_vec)","style":{"code":true}}]}]}],"thread_ts":"1613311950.268400","parent_user_id":"U012FH66MFW"},{"client_msg_id":"fc4fcf74-3f65-4b83-b528-21b937b8f5f2","type":"message","text":"`hcat((ones(3) for i in 1:10)...)`","user":"U01L0RJC6FM","ts":"1613312425.270100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7VWLf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hcat((ones(3) for i in 1:10)...)","style":{"code":true}}]}]}],"thread_ts":"1613311950.268400","parent_user_id":"U012FH66MFW"},{"client_msg_id":"f767e7c0-6acd-4278-8f15-e9444a608d16","type":"message","text":"if Tuples are acceptable intermediary","user":"U01L0RJC6FM","ts":"1613312438.270300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W4CtG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if Tuples are acceptable intermediary"}]}]}],"thread_ts":"1613311950.268400","parent_user_id":"U012FH66MFW"},{"client_msg_id":"a454afba-fccb-4b58-8be7-2f0e1696cac4","type":"message","text":"That's no good. Splatting is hard on the compiler, so only use it if you know there are just a few elements","user":"U7HAYKY9X","ts":"1613312573.270500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ms6O","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's no good. Splatting is hard on the compiler, so only use it if you know there are just a few elements"}]}]}],"thread_ts":"1613311950.268400","parent_user_id":"U012FH66MFW"},{"client_msg_id":"c7941faf-8c10-4299-8423-a8aa2be5d76a","type":"message","text":"oh i see didn't know that, ignore my answer in this case :slightly_smiling_face:","user":"U01L0RJC6FM","ts":"1613312641.270900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rb=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh i see didn't know that, ignore my answer in this case "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1613311950.268400","parent_user_id":"U012FH66MFW","reactions":[{"name":"+1","users":["U7HAYKY9X"],"count":1}]},{"client_msg_id":"dabae509-65fe-4013-b6df-aead9f25836b","type":"message","text":"<@U012FH66MFW> I don't know of any *really* good way, but perhaps `reshape(reduce(hcat, vecs), length(vecs), :)`\nEdit: Nevermind, in wrong","user":"U7HAYKY9X","ts":"1613312679.271100","team":"T68168MUP","edited":{"user":"U7HAYKY9X","ts":"1613314064.000000"},"blocks":[{"type":"rich_text","block_id":"xgBfe","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U012FH66MFW"},{"type":"text","text":" I don't know of any "},{"type":"text","text":"really","style":{"bold":true}},{"type":"text","text":" good way, but perhaps "},{"type":"text","text":"reshape(reduce(hcat, vecs), length(vecs), :)","style":{"code":true}},{"type":"text","text":"\nEdit: Nevermind, in wrong"}]}]}],"thread_ts":"1613311950.268400","parent_user_id":"U012FH66MFW"},{"client_msg_id":"c7973261-c72b-4f64-9293-53109a4e3f2e","type":"message","text":"`reduce(hcat, vec_of_vec)` will get you a 3x10 matrix, with the vectors as columns. If you want the transpose, 10x3 with rows, `reduce(vcat, vec_of_vec')` is one way.","user":"UD0NS8PDF","ts":"1613313263.271900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ViaK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"reduce(hcat, vec_of_vec)","style":{"code":true}},{"type":"text","text":" will get you a 3x10 matrix, with the vectors as columns. If you want the transpose, 10x3 with rows, "},{"type":"text","text":"reduce(vcat, vec_of_vec')","style":{"code":true}},{"type":"text","text":" is one way."}]}]}],"thread_ts":"1613311950.268400","parent_user_id":"U012FH66MFW","reactions":[{"name":"+1","users":["UCZ7VBGUD"],"count":1}]},{"client_msg_id":"BBB7141F-A4CF-412B-A0DD-27436FAC26ED","type":"message","text":"(Careful about the complex conjugate though!)","user":"UCZ7VBGUD","ts":"1613314446.275400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1z3E","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(Careful about the complex conjugate though!)"}]}]}],"thread_ts":"1613311950.268400","parent_user_id":"U012FH66MFW"},{"client_msg_id":"C121669F-B8AE-4510-95A0-79ABDF6DE291","type":"message","text":"If you have an in-place `foo!(x,i)` then you can just pass it views of the rows of a pre-allocated matrix to mutate. I think that’s usually more clear as to what’s happening and also performant (and you can easily put it in a `@threads` to thread it too).","user":"UCZ7VBGUD","ts":"1613314608.278900","team":"T68168MUP","edited":{"user":"UCZ7VBGUD","ts":"1613314632.000000"},"blocks":[{"type":"rich_text","block_id":"2CQot","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you have an in-place "},{"type":"text","text":"foo!(x,i)","style":{"code":true}},{"type":"text","text":" then you can just pass it views of the rows of a pre-allocated matrix to mutate. I think that’s usually more clear as to what’s happening and also performant (and you can easily put it in a "},{"type":"text","text":"@threads","style":{"code":true}},{"type":"text","text":" to thread it too)."}]}]}],"thread_ts":"1613311950.268400","parent_user_id":"U012FH66MFW"},{"client_msg_id":"e6b7a4ee-5d07-4cad-99b8-54856970f976","type":"message","text":"It's kind of shocking that this hasn't got an easy solution.","user":"U7HAYKY9X","ts":"1613315506.279600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5QN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's kind of shocking that this hasn't got an easy solution."}]}]}],"thread_ts":"1613311950.268400","parent_user_id":"U012FH66MFW"},{"client_msg_id":"6032a63c-5208-495a-b0a8-9b7f42a448fe","type":"message","text":"I mean, why isn't `reduce(vcat, (reshape(i, 1, :) for i in xs))` as least efficient? It has a known size and eltype, there is no reason the compiler couldn't optimize that","user":"U7HAYKY9X","ts":"1613315571.281000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+xY7e","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean, why isn't "},{"type":"text","text":"reduce(vcat, (reshape(i, 1, :) for i in xs))","style":{"code":true}},{"type":"text","text":" as least efficient? It has a known size and eltype, there is no reason the compiler couldn't optimize that"}]}]}],"thread_ts":"1613311950.268400","parent_user_id":"U012FH66MFW"},{"client_msg_id":"6A3CDA9F-59D8-408A-B8CF-952918E281A6","type":"message","text":"Thanks, all, very helpful! I was kind of hoping for some kind of \"matrix comprehension\" analogue to \"list/vector comprehension\". But also good to know I didn't miss anything major :joy: ","user":"U012FH66MFW","ts":"1613315621.282400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0TuZe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks, all, very helpful! I was kind of hoping for some kind of \"matrix comprehension\" analogue to \"list/vector comprehension\". But also good to know I didn't miss anything major "},{"type":"emoji","name":"joy"},{"type":"text","text":" "}]}]}],"thread_ts":"1613311950.268400","parent_user_id":"U012FH66MFW"},{"client_msg_id":"f2b31606-c150-4301-9a83-6c587a720849","type":"message","text":"The `reduce(hcat, vec_of_vec)` and vcat cases have a special method. There’s a PR to do something similar for generators, somewhere…","user":"UD0NS8PDF","ts":"1613315648.282600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WqrKX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The "},{"type":"text","text":"reduce(hcat, vec_of_vec)","style":{"code":true}},{"type":"text","text":" and vcat cases have a special method. There’s a PR to do something similar for generators, somewhere…"}]}]}],"thread_ts":"1613311950.268400","parent_user_id":"U012FH66MFW"},{"client_msg_id":"73b7f046-e220-4500-9a1d-2ad0c60285f5","type":"message","text":"And there are packages…","user":"UD0NS8PDF","ts":"1613315663.282800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/TX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And there are packages…"}]}]}],"thread_ts":"1613311950.268400","parent_user_id":"U012FH66MFW"},{"client_msg_id":"71125912-3154-4c5c-be41-5e38c9df1d88","type":"message","text":"<https://github.com/JuliaLang/julia/pull/31644> :) Too bad it went nowhere, yet","user":"U7HAYKY9X","ts":"1613315843.283000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iu4K","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/pull/31644"},{"type":"text","text":" :) Too bad it went nowhere, yet"}]}]}],"thread_ts":"1613311950.268400","parent_user_id":"U012FH66MFW"},{"client_msg_id":"06943983-57f9-4414-b7dd-946e2c41c7ed","type":"message","text":"<@U7HAYKY9X> I agree, though one could always go the non-vectorized way. Considering you already have a function `foo(x)` generating your vectors it might be worth considering writiing a function generating the matrix, with preallocation etc. that should give you the most efficient solution.","user":"U01L0RJC6FM","ts":"1613319027.283200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"a9dHG","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U7HAYKY9X"},{"type":"text","text":" I agree, though one could always go the non-vectorized way. Considering you already have a function "},{"type":"text","text":"foo(x)","style":{"code":true}},{"type":"text","text":" generating your vectors it might be worth considering writiing a function generating the matrix, with preallocation etc. that should give you the most efficient solution."}]}]}],"thread_ts":"1613311950.268400","parent_user_id":"U012FH66MFW"},{"client_msg_id":"539eae6e-3cf8-4ba6-9442-113d0355e2ab","type":"message","text":"If they are as short as 3, you could also consider returning Tuples, or StaticVectors, from `foo`.","user":"UD0NS8PDF","ts":"1613320177.283600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"orV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If they are as short as 3, you could also consider returning Tuples, or StaticVectors, from "},{"type":"text","text":"foo","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1613311950.268400","parent_user_id":"U012FH66MFW"}]