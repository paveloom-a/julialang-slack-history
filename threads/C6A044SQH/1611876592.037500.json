[{"client_msg_id":"f4df7bbc-b2f7-4efa-9b04-10632f35b1c0","type":"message","text":"Is there a way of working with Int32s in Julia that is not too painful.\n\nFor example if you’re doing something a in loop on a Int32 variable: x.\n\n`for i in 1:1_000_000_000`\n    `x += 1`\n`end`\nThis will add a type Int32 with a type Int64 which is slow. Now I know you can do `x += Int32(1)` but that is tedious and ugly if I have to do that for the entire script.\n\nIs there a way around this?","user":"U01FAHWCMFF","ts":"1611876592.037500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mEa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a way of working with Int32s in Julia that is not too painful.\n\nFor example if you’re doing something a in loop on a Int32 variable: x.\n\n"},{"type":"text","text":"for i in 1:1_000_000_000","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"    x += 1","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"end","style":{"code":true}},{"type":"text","text":"\nThis will add a type Int32 with a type Int64 which is slow. Now I know you can do "},{"type":"text","text":"x += Int32(1)","style":{"code":true}},{"type":"text","text":" but that is tedious and ugly if I have to do that for the entire script.\n\nIs there a way around this?"}]}]}],"thread_ts":"1611876592.037500","reply_count":14,"reply_users_count":4,"latest_reply":"1611877236.041600","reply_users":["U01GRS159T8","UDB26738Q","U01FAHWCMFF","UB197FRCL"],"subscribed":false},{"client_msg_id":"bd14201e-494c-4097-b7b9-cb6b484deb82","type":"message","text":"for i::Int32 in 1:100 should do it for you","user":"U01GRS159T8","ts":"1611876821.038400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"luK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"for i::Int32 in 1:100 should do it for you"}]}]}],"thread_ts":"1611876592.037500","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"04b3c672-2fbb-4fd9-b6f3-2fd19da093b7","type":"message","text":"but `i` isn't used anywhere?","user":"UDB26738Q","ts":"1611876849.038600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gRHBT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but "},{"type":"text","text":"i","style":{"code":true}},{"type":"text","text":" isn't used anywhere?"}]}]}],"thread_ts":"1611876592.037500","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"32282326-3aa7-4019-8e6c-a9548370ae84","type":"message","text":"oh I misread his example","user":"U01GRS159T8","ts":"1611876884.038800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"novco","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh I misread his example"}]}]}],"thread_ts":"1611876592.037500","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"5e82371b-d5ff-4803-8e70-ab2d833cc7b1","type":"message","text":"yeah afaik Int32(1) is the only way of saying you want literal 1 as an Int32","user":"U01GRS159T8","ts":"1611876910.039000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xDj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah afaik Int32(1) is the only way of saying you want literal 1 as an Int32"}]}]}],"thread_ts":"1611876592.037500","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"30c36dd9-93de-4d66-a7c2-1652fe6e624d","type":"message","text":"if you want to ensure `x += 1` is typestable you can do\n```x += one(x)```","user":"UDB26738Q","ts":"1611876913.039200","team":"T68168MUP","edited":{"user":"UDB26738Q","ts":"1611876927.000000"},"blocks":[{"type":"rich_text","block_id":"vDnY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you want to ensure "},{"type":"text","text":"x += 1","style":{"code":true}},{"type":"text","text":" is typestable you can do\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"x += one(x)"}]}]}],"thread_ts":"1611876592.037500","parent_user_id":"U01FAHWCMFF","reactions":[{"name":"point_up","users":["UB197FRCL"],"count":1}]},{"client_msg_id":"3b080c6e-fe2e-42d7-9810-35a2d39cd8ba","type":"message","text":"THanks guys, I was just hoping to see if there a library or option somewhere of specifying default types for things like ints or floats","user":"U01FAHWCMFF","ts":"1611876960.039500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+Ud","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"THanks guys, I was just hoping to see if there a library or option somewhere of specifying default types for things like ints or floats"}]}]}],"thread_ts":"1611876592.037500","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"8d124714-eda1-4287-aef3-27ee2d7ad306","type":"message","text":"for floats there is <https://github.com/stevengj/ChangePrecision.jl>","user":"UDB26738Q","ts":"1611876976.039700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OzSJR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"for floats there is "},{"type":"link","url":"https://github.com/stevengj/ChangePrecision.jl"}]}]}],"thread_ts":"1611876592.037500","parent_user_id":"U01FAHWCMFF","reactions":[{"name":"+1","users":["U01FAHWCMFF"],"count":1}]},{"client_msg_id":"bb412c66-5bea-484a-ac52-224955784e20","type":"message","text":"for ints there is <https://github.com/rfourquet/SafeREPL.jl>, but this only for the REPL, as far as I know","user":"UDB26738Q","ts":"1611877030.040000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZUVJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"for ints there is "},{"type":"link","url":"https://github.com/rfourquet/SafeREPL.jl"},{"type":"text","text":", but this only for the REPL, as far as I know"}]}]}],"thread_ts":"1611876592.037500","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"ad50f0fe-0415-41dc-a58b-3acf3e76a1fc","type":"message","text":"oh no, there is also the option to do it in the source code","user":"UDB26738Q","ts":"1611877066.040200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MOQx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh no, there is also the option to do it in the source code"}]}]}],"thread_ts":"1611876592.037500","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"12303939-c126-4f12-8eb8-361dfee25892","type":"message","text":"From the source code, you mean Julia Base?","user":"U01FAHWCMFF","ts":"1611877089.040400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jS91","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"From the source code, you mean Julia Base?"}]}]}],"thread_ts":"1611876592.037500","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"6d2a812a-63d2-4769-b23e-ceade0876557","type":"message","text":"<https://github.com/rfourquet/SafeREPL.jl/blob/f8d8c22357f73f42de8c65362286af660ca067f7/README.md#how-to-use-in-source-code>","user":"UDB26738Q","ts":"1611877110.040600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=vtV","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/rfourquet/SafeREPL.jl/blob/f8d8c22357f73f42de8c65362286af660ca067f7/README.md#how-to-use-in-source-code"}]}]}],"thread_ts":"1611876592.037500","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"7bba8578-a276-4e70-b0fd-09748adc9517","type":"message","text":"Hmm looks interesting, will take a look into these. Thanks","user":"U01FAHWCMFF","ts":"1611877153.040900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"r+HPc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmm looks interesting, will take a look into these. Thanks"}]}]}],"thread_ts":"1611876592.037500","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"b54b9403-9972-4add-b71f-176de9ff88c3","type":"message","text":"I think most important is to try to follow the ChangePrecision advice:\n&gt; For production code and long-term software development in Julia, you are strongly urged to write precision-independent code — that is, your functions should determine their working precision from the precision of their _arguments_, so that by simply passing data in a different precision they compute in that precision.","user":"UB197FRCL","ts":"1611877172.041300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O5ti","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think most important is to try to follow the ChangePrecision advice:\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"For production code and long-term software development in Julia, you are strongly urged to write precision-independent code — that is, your functions should determine their working precision from the precision of their "},{"type":"text","text":"arguments","style":{"italic":true}},{"type":"text","text":", so that by simply passing data in a different precision they compute in that precision."}]}]}],"thread_ts":"1611876592.037500","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"18e379a5-ad04-4475-b98d-373f1ff1463d","type":"message","text":"E.g.,\n```function foo(x::T) where T\n    for i in 1:1_000_000_000\n        x += one(T)\n    end\n    x\nend```","user":"UB197FRCL","ts":"1611877236.041600","team":"T68168MUP","edited":{"user":"UB197FRCL","ts":"1611877246.000000"},"blocks":[{"type":"rich_text","block_id":"VJB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"E.g.,\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function foo(x::T) where T\n    for i in 1:1_000_000_000\n        x += one(T)\n    end\n    x\nend"}]}]}],"thread_ts":"1611876592.037500","parent_user_id":"U01FAHWCMFF","reactions":[{"name":"+1","users":["U01FAHWCMFF"],"count":1}]}]