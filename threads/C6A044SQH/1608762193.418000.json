[{"client_msg_id":"66e3bb6d-4408-4f61-ace2-6b71fa6a06eb","type":"message","text":"Whats the correct way for implementing python-like generators in Julia for functions? Note: There is no way to preload the generator or know the full size of it\nLots of different opinions online it seems.\n```def myfunc(HttpStream):\n    for json_obj in HttpStream:\n        yield json_obj```","user":"U01FAHWCMFF","ts":"1608762193.418000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"E+qEL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Whats the correct way for implementing python-like generators in Julia for functions? Note: There is no way to preload the generator or know the full size of it\nLots of different opinions online it seems.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"def myfunc(HttpStream):\n    for json_obj in HttpStream:\n        yield json_obj"}]}]}],"thread_ts":"1608762193.418000","reply_count":4,"reply_users_count":2,"latest_reply":"1608817109.457200","reply_users":["U01CQTKB86N","U01GVKTVA23"],"subscribed":false},{"client_msg_id":"7fc6e4b8-b2a1-461e-80ff-d32cbbf4b2b2","type":"message","text":"I have a feeling that there is no single best answer without knowing more, but one solution could be to use asynchronous programming and channels: <https://docs.julialang.org/en/v1/manual/asynchronous-programming/>","user":"U01CQTKB86N","ts":"1608806480.452400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/Kv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have a feeling that there is no single best answer without knowing more, but one solution could be to use asynchronous programming and channels: "},{"type":"link","url":"https://docs.julialang.org/en/v1/manual/asynchronous-programming/"}]}]}],"thread_ts":"1608762193.418000","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"8214b8a0-bf61-4456-b1d5-054a63074373","type":"message","text":"If you want a more direct implementation in Julia, Closures should be able to do that. Another option could be to define something that confirms to the Iteration interface. Or perhaps you want to use Agents.jl. I’m sure other options exist.","user":"U01CQTKB86N","ts":"1608807928.454200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"G6nr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you want a more direct implementation in Julia, Closures should be able to do that. Another option could be to define something that confirms to the Iteration interface. Or perhaps you want to use Agents.jl. I’m sure other options exist."}]}]}],"thread_ts":"1608762193.418000","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"2e0f20ba-9e66-4832-a8ff-e31a87a4122e","type":"message","text":"Btw, does Julia support HTTP/2?","user":"U01CQTKB86N","ts":"1608807970.454400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hV+F","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Btw, does Julia support HTTP/2?"}]}]}],"thread_ts":"1608762193.418000","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"eab85b7b-aaa4-449e-8cf5-19d52b9b668e","type":"message","text":"ResumableFunctions.jl implements python-like generators","user":"U01GVKTVA23","ts":"1608817109.457200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"I8dMa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ResumableFunctions.jl implements python-like generators"}]}]}],"thread_ts":"1608762193.418000","parent_user_id":"U01FAHWCMFF"}]