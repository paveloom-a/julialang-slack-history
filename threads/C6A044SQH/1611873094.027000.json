[{"client_msg_id":"d0efb3aa-2265-4258-ac8d-036ef6c92d7e","type":"message","text":"is there a way to use the partial initialization with inner constructors but \"skip\" fields? Ie if I have\n```mutable struct T\n    a\n    lazy\n    c\n    T() = new(1, undef, 3)\nend```\nBasically this kind of behavior? From the doc, it seems like I can only omit the last fields if I want (like `T() = new(1,2) will not define c`), but not selectively skip some (and keywords don't work either)","user":"U014F58NBDY","ts":"1611873094.027000","team":"T68168MUP","edited":{"user":"U014F58NBDY","ts":"1611873206.000000"},"blocks":[{"type":"rich_text","block_id":"hQytN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is there a way to use the partial initialization with inner constructors but \"skip\" fields? Ie if I have\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"mutable struct T\n    a\n    lazy\n    c\n    T() = new(1, undef, 3)\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nBasically this kind of behavior? From the doc, it seems like I can only omit the last fields if I want (like "},{"type":"text","text":"T() = new(1,2) will not define c","style":{"code":true}},{"type":"text","text":"), but not selectively skip some (and keywords don't work either)"}]}]}],"thread_ts":"1611873094.027000","reply_count":2,"reply_users_count":2,"latest_reply":"1611873501.027500","reply_users":["U680THK2S","U014F58NBDY"],"subscribed":false},{"client_msg_id":"43c8c6d9-b782-4a0d-a17b-4a0a8ef080e6","type":"message","text":"If it's mutable, you can do\n```mutable struct T\n    a\n    lazy\n    b\n    function T()\n        t = new()\n        t.a = 1\n        t.b = 3\n        return t\n    end\nend```","user":"U680THK2S","ts":"1611873442.027300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iUcS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If it's mutable, you can do\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"mutable struct T\n    a\n    lazy\n    b\n    function T()\n        t = new()\n        t.a = 1\n        t.b = 3\n        return t\n    end\nend"}]}]}],"thread_ts":"1611873094.027000","parent_user_id":"U014F58NBDY"},{"client_msg_id":"fd71b717-4a3b-4d7f-996f-829fad68779a","type":"message","text":"yep it is, and I didn't think of this, thank you! This is exactly what I needed","user":"U014F58NBDY","ts":"1611873501.027500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8151","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yep it is, and I didn't think of this, thank you! This is exactly what I needed"}]}]}],"thread_ts":"1611873094.027000","parent_user_id":"U014F58NBDY","reactions":[{"name":"+1","users":["U680THK2S"],"count":1}]}]