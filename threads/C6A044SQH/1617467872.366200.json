[{"client_msg_id":"0f4d00f2-bc69-4c16-a13a-241d72d45bcd","type":"message","text":"hi, a question on type-inference. I have a recusive type that distinguishes between leave-nodes and branch nodes of a tree-structure.\n```struct LeafNode{T}\n  data{T} # this holds something\nend\n\nstruct BranchNode{T} where T\n  left::Union{TreeNode{T}, BranchNode{T}}\n  right::Union{TreeNode{T}, BranchNode{T}}\nend\n\nconst TreeNode{T} = Union{TreeNode{T}, BranchNode{T}}```\nas my Julia-skills progressed with the package while writing it, I might not have realized that this might have been a mistake. In particular, I thought that this is nice as most algorithms should behave differently if they encounter a leaf node.\n\nOne of the things that I noticed is that this definition seems to be problematic for type-inference as `getproperty`  does not always give you the same return type on the treenode. Are there easy ways to redeem this apart from a complete rewrite?","user":"U01L0RJC6FM","ts":"1617467872.366200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rTAt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hi, a question on type-inference. I have a recusive type that distinguishes between leave-nodes and branch nodes of a tree-structure.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct LeafNode{T}\n  data{T} # this holds something\nend\n\nstruct BranchNode{T} where T\n  left::Union{TreeNode{T}, BranchNode{T}}\n  right::Union{TreeNode{T}, BranchNode{T}}\nend\n\nconst TreeNode{T} = Union{TreeNode{T}, BranchNode{T}}"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"as my Julia-skills progressed with the package while writing it, I might not have realized that this might have been a mistake. In particular, I thought that this is nice as most algorithms should behave differently if they encounter a leaf node.\n\nOne of the things that I noticed is that this definition seems to be problematic for type-inference as "},{"type":"text","text":"getproperty","style":{"code":true}},{"type":"text","text":"  does not always give you the same return type on the treenode. Are there easy ways to redeem this apart from a complete rewrite?"}]}]}],"thread_ts":"1617467872.366200","reply_count":23,"reply_users_count":3,"latest_reply":"1617475824.377100","reply_users":["U01PLQWQXPV","U8D9768Q6","U01L0RJC6FM"],"is_locked":false,"subscribed":false},{"client_msg_id":"afaa6a8c-b347-414b-99f6-ae3e5e1cd377","type":"message","text":"This is common pitfall\n\nSee here\n<https://docs.julialang.org/en/v1/manual/performance-tips/#Avoid-fields-with-abstract-type>","user":"U01PLQWQXPV","ts":"1617468251.367100","team":"T68168MUP","edited":{"user":"U01PLQWQXPV","ts":"1617468296.000000"},"blocks":[{"type":"rich_text","block_id":"y6KJm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is common pitfall\n\nSee here\n"},{"type":"link","url":"https://docs.julialang.org/en/v1/manual/performance-tips/#Avoid-fields-with-abstract-type"}]}]}],"thread_ts":"1617467872.366200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"EC9EAAA2-AFB2-4BA1-8C38-29B4B6184626","type":"message","text":"This can be made pretty performant generally, since the branch node holds a small union type. Julia‘a compiler has tricks to make this performant ","user":"U8D9768Q6","ts":"1617468730.368900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HR+2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This can be made pretty performant generally, since the branch node holds a small union type. Julia‘a compiler has tricks to make this performant "}]}]}],"thread_ts":"1617467872.366200","parent_user_id":"U01L0RJC6FM","reactions":[{"name":"thumbsup_all","users":["U0179G7FG4F"],"count":1}]},{"client_msg_id":"203DEEA9-D7D0-4826-A5B6-1F27684FDF0B","type":"message","text":"To clarify, a ‘small union’ is a union type with only a few possible members. In this case, it’s just two members. I’d do some benchmarking to make sure, but I don’t anticipate this causing much trouble.  ","user":"U8D9768Q6","ts":"1617468866.371300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mej","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"To clarify, a ‘small union’ is a union type with only a few possible members. In this case, it’s just two members. I’d do some benchmarking to make sure, but I don’t anticipate this causing much trouble.  "}]}]}],"thread_ts":"1617467872.366200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"f6743ca6-6362-4940-b5fa-dcc9b9cfc6e1","type":"message","text":"hmm, if I include the types of `left` and `right` in the type annotation, then this would require a recursion right? It seems to me julia cannot handle\n```struct LeafNode{T}\n  data{T} # this holds something\nend\nstruct BranchNode{T, TL::Union{TreeNode{T}, BranchNode{T}}, TR::Union{TreeNode{T}, BranchNode{T}}} where T\n  left::TL\n  right::TR\nend\nconst TreeNode{T} = Union{TreeNode{T}, BranchNode{T}}```\ndoesn't seem to work","user":"U01L0RJC6FM","ts":"1617472250.372400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OIlXa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmm, if I include the types of "},{"type":"text","text":"left","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"right","style":{"code":true}},{"type":"text","text":" in the type annotation, then this would require a recursion right? It seems to me julia cannot handle\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct LeafNode{T}\n  data{T} # this holds something\nend\nstruct BranchNode{T, TL::Union{TreeNode{T}, BranchNode{T}}, TR::Union{TreeNode{T}, BranchNode{T}}} where T\n  left::TL\n  right::TR\nend\nconst TreeNode{T} = Union{TreeNode{T}, BranchNode{T}}"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"doesn't seem to work"}]}]}],"thread_ts":"1617467872.366200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"29bc4238-787d-4c46-a752-034e21fda971","type":"message","text":"Actually this reminds me precisely of a package by the very own <@U8D9768Q6> on `SumTypes`  (although not completely the same).","user":"U01PLQWQXPV","ts":"1617473965.372700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"f0R3d","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Actually this reminds me precisely of a package by the very own "},{"type":"user","user_id":"U8D9768Q6"},{"type":"text","text":" on "},{"type":"text","text":"SumTypes","style":{"code":true}},{"type":"text","text":"  (although not completely the same)."}]}]}],"thread_ts":"1617467872.366200","parent_user_id":"U01L0RJC6FM","reactions":[{"name":"smile","users":["U8D9768Q6"],"count":1}]},{"client_msg_id":"9a724970-a340-4f5d-a731-05ced7167656","type":"message","text":"What about using an abstract helper type\n\n```abstract type TreeNode{T} end\n\nstruct LeafNode &lt;: TreeNode{T}\n    data::T\nend\n\nstruct BranchNode{T, L&lt;:TreeNode{T}, R&lt;:TreeNode{T}} &lt;: TreeNode{T}\n    left::L\n    right::R\nend```","user":"U01PLQWQXPV","ts":"1617474015.372900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6POJv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What about using an abstract helper type\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"abstract type TreeNode{T} end\n\nstruct LeafNode <: TreeNode{T}\n    data::T\nend\n\nstruct BranchNode{T, L<:TreeNode{T}, R<:TreeNode{T}} <: TreeNode{T}\n    left::L\n    right::R\nend"}]}]}],"thread_ts":"1617467872.366200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"c016a58a-f252-4041-9d4a-90407f0af794","type":"message","text":"that's actually exactly what i did here but I am not sure this is what I want","user":"U01L0RJC6FM","ts":"1617474053.373100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0paB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's actually exactly what i did here but I am not sure this is what I want"}]}]}],"thread_ts":"1617467872.366200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"615d65e6-2e90-46c2-9459-d9b7e2ec2565","type":"message","text":"once I get big tree structures i get types that look like this:","user":"U01L0RJC6FM","ts":"1617474079.373400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NiWvt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"once I get big tree structures i get types that look like this:"}]}]}],"thread_ts":"1617467872.366200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"51e715dd-a0d6-4562-af90-85c6047b5c47","type":"message","text":"```1000×1000 HssNode{Float64, HssNode{Float64, HssNode{Float64, HssNode{Float64, HssLeaf{Float64}, HssLeaf{Float64}}, HssNode{Float64, HssLeaf{Float64}, HssLeaf{Float64}}}, HssNode{Float64, HssNode{Float64, HssLeaf{Float64}, HssLeaf{Float64}}, HssNode{Float64, HssLeaf{Float64}, HssLeaf{Float64}}}}, HssNode{Float64, HssNode{Float64, HssNode{Float64, HssLeaf{Float64}, HssLeaf{Float64}}, HssNode{Float64, HssLeaf{Float64}, HssLeaf{Float64}}}, HssNode{Float64, HssNode{Float64, HssLeaf{Float64}, HssLeaf{Float64}}, HssNode{Float64, HssLeaf{Float64}, HssLeaf{Float64}}}}}```","user":"U01L0RJC6FM","ts":"1617474093.373600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vEJ","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"1000×1000 HssNode{Float64, HssNode{Float64, HssNode{Float64, HssNode{Float64, HssLeaf{Float64}, HssLeaf{Float64}}, HssNode{Float64, HssLeaf{Float64}, HssLeaf{Float64}}}, HssNode{Float64, HssNode{Float64, HssLeaf{Float64}, HssLeaf{Float64}}, HssNode{Float64, HssLeaf{Float64}, HssLeaf{Float64}}}}, HssNode{Float64, HssNode{Float64, HssNode{Float64, HssLeaf{Float64}, HssLeaf{Float64}}, HssNode{Float64, HssLeaf{Float64}, HssLeaf{Float64}}}, HssNode{Float64, HssNode{Float64, HssLeaf{Float64}, HssLeaf{Float64}}, HssNode{Float64, HssLeaf{Float64}, HssLeaf{Float64}}}}}"}]}]}],"thread_ts":"1617467872.366200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"89f6960c-22aa-420b-be75-f8779a5ff5a8","type":"message","text":"isn't that super bad for performance if julie tries to specialize everytime depending on the tree-structure?","user":"U01L0RJC6FM","ts":"1617474127.373800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"o5ee","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"isn't that super bad for performance if julie tries to specialize everytime depending on the tree-structure?"}]}]}],"thread_ts":"1617467872.366200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"c92bbba3-808f-4179-925d-07df2c9507f3","type":"message","text":"or won't that happen","user":"U01L0RJC6FM","ts":"1617474131.374000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tdQIo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or won't that happen"}]}]}],"thread_ts":"1617467872.366200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"F67B7FF8-F416-421A-AE4B-FD3E3F9A09BC","type":"message","text":"Yeah, you don’t want that","user":"U8D9768Q6","ts":"1617474295.374500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gPUI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, you don’t want that"}]}]}],"thread_ts":"1617467872.366200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"042f4b56-c8e1-4d41-a8b4-d17f54153c47","type":"message","text":"ah this is frustrating.. it seems that the best choice for performance is\n```struct BinaryNode{T} where T\n  left::BinaryNode{T}\n  right::BinaryNode{T}\n  data::T\n  isleaf::Bool\nend```\ni really want to avoid that.. when I started writing my package I re-wrote everything to use union-types as that seemed more julianic","user":"U01L0RJC6FM","ts":"1617474437.374700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ojh4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah this is frustrating.. it seems that the best choice for performance is\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct BinaryNode{T} where T\n  left::BinaryNode{T}\n  right::BinaryNode{T}\n  data::T\n  isleaf::Bool\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"i really want to avoid that.. when I started writing my package I re-wrote everything to use union-types as that seemed more julianic"}]}]}],"thread_ts":"1617467872.366200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"d30af842-3f50-4ed7-86ec-bc85cec5d284","type":"message","text":"this would require a pretty big re-write of the package","user":"U01L0RJC6FM","ts":"1617474453.374900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Gca","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this would require a pretty big re-write of the package"}]}]}],"thread_ts":"1617467872.366200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"9871551c-5e0a-40a3-a31f-041fd13b4d91","type":"message","text":"What's wrong with the performance of the small unions?","user":"U8D9768Q6","ts":"1617474470.375100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TjTvq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What's wrong with the performance of the small unions?"}]}]}],"thread_ts":"1617467872.366200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"eef7e4cd-5627-479f-a060-cb50235bc14c","type":"message","text":"the problem is that `getproperty`  becomes type-unstable and this type-instability propagates to my other code which is relying on performance","user":"U01L0RJC6FM","ts":"1617474532.375300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CfA1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the problem is that "},{"type":"text","text":"getproperty","style":{"code":true}},{"type":"text","text":"  becomes type-unstable and this type-instability propagates to my other code which is relying on performance"}]}]}],"thread_ts":"1617467872.366200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"68845cb9-ac04-452b-a4f0-25c8eb961887","type":"message","text":"Are you sure that type instability is a problem though? Julia is very good at splitting a two member union","user":"U8D9768Q6","ts":"1617474608.375700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Oih","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Are you sure that type instability is a problem though? Julia is very good at splitting a two member union"}]}]}],"thread_ts":"1617467872.366200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"6c8fee0f-c30a-4c54-bb4c-c47e79fb8692","type":"message","text":"im not actually.. so you suggest investigating the type-stabilities further down the line to check whether they are really cause by this?","user":"U01L0RJC6FM","ts":"1617474668.375900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1RA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"im not actually.. so you suggest investigating the type-stabilities further down the line to check whether they are really cause by this?"}]}]}],"thread_ts":"1617467872.366200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"930cee02-7aff-47f8-9973-c0917993816b","type":"message","text":"Yes","user":"U8D9768Q6","ts":"1617474696.376100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Sl7rF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes"}]}]}],"thread_ts":"1617467872.366200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"7019819c-6142-4bfa-ba65-6c28e0155b07","type":"message","text":"For example, here's a vector of `Union{Int, Float64}` compared to a `Vector{Float64}`,\n```julia&gt; let v1 = Union{Int, Float64}[rand(Bool) ? rand(1:10) : rand() for _ in 1:100], v2 = Float64.(v1)\n           @btime foldl(+, $v1)\n           @btime foldl(+, $v2)\n       end;\n  242.741 ns (0 allocations: 0 bytes)\n  63.366 ns (0 allocations: 0 bytes)```\nthis reduction is type unstable, but the instability is small, so it's not actually all that expensive. Yes, this is significantly slower than the `Float64`s, but keep in mind that adding two numbers together is much faster than a branch.","user":"U8D9768Q6","ts":"1617475015.376300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=wm4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For example, here's a vector of "},{"type":"text","text":"Union{Int, Float64}","style":{"code":true}},{"type":"text","text":" compared to a "},{"type":"text","text":"Vector{Float64}","style":{"code":true}},{"type":"text","text":",\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> let v1 = Union{Int, Float64}[rand(Bool) ? rand(1:10) : rand() for _ in 1:100], v2 = Float64.(v1)\n           @btime foldl(+, $v1)\n           @btime foldl(+, $v2)\n       end;\n  242.741 ns (0 allocations: 0 bytes)\n  63.366 ns (0 allocations: 0 bytes)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"this reduction is type unstable, but the instability is small, so it's not actually all that expensive. Yes, this is significantly slower than the "},{"type":"text","text":"Float64","style":{"code":true}},{"type":"text","text":"s, but keep in mind that adding two numbers together is much faster than a branch."}]}]}],"thread_ts":"1617467872.366200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"e31219fd-02ee-497e-8a69-07dbd2ea2350","type":"message","text":"(I use `foldl(+` here because this way there's not SIMD that makes the difference even bigger)","user":"U8D9768Q6","ts":"1617475047.376500","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1617477013.000000"},"blocks":[{"type":"rich_text","block_id":"LGbAm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(I use "},{"type":"text","text":"foldl(+","style":{"code":true}},{"type":"text","text":" here because this way there's not SIMD that makes the difference even bigger)"}]}]}],"thread_ts":"1617467872.366200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"ee847e91-bcef-4767-b225-41fe626a862d","type":"message","text":"hmm thanks for the enlightening example","user":"U01L0RJC6FM","ts":"1617475769.376900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"D85","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmm thanks for the enlightening example"}]}]}],"thread_ts":"1617467872.366200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"21e9a24e-9ac8-4a50-b84a-3a1d44cd980e","type":"message","text":"my problem is actually that my type that looks like a tree is actually a matrix type. So I have some code where compound matrices which may include my type have to be constructed over and over again","user":"U01L0RJC6FM","ts":"1617475824.377100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wDBx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"my problem is actually that my type that looks like a tree is actually a matrix type. So I have some code where compound matrices which may include my type have to be constructed over and over again"}]}]}],"thread_ts":"1617467872.366200","parent_user_id":"U01L0RJC6FM"}]