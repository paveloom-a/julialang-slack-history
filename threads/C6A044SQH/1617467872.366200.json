[{"client_msg_id":"0f4d00f2-bc69-4c16-a13a-241d72d45bcd","type":"message","text":"hi, a question on type-inference. I have a recusive type that distinguishes between leave-nodes and branch nodes of a tree-structure.\n```struct LeafNode{T}\n  data{T} # this holds something\nend\n\nstruct BranchNode{T} where T\n  left::Union{TreeNode{T}, BranchNode{T}}\n  right::Union{TreeNode{T}, BranchNode{T}}\nend\n\nconst TreeNode{T} = Union{TreeNode{T}, BranchNode{T}}```\nas my Julia-skills progressed with the package while writing it, I might not have realized that this might have been a mistake. In particular, I thought that this is nice as most algorithms should behave differently if they encounter a leaf node.\n\nOne of the things that I noticed is that this definition seems to be problematic for type-inference as `getproperty`  does not always give you the same return type on the treenode. Are there easy ways to redeem this apart from a complete rewrite?","user":"U01L0RJC6FM","ts":"1617467872.366200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rTAt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hi, a question on type-inference. I have a recusive type that distinguishes between leave-nodes and branch nodes of a tree-structure.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct LeafNode{T}\n  data{T} # this holds something\nend\n\nstruct BranchNode{T} where T\n  left::Union{TreeNode{T}, BranchNode{T}}\n  right::Union{TreeNode{T}, BranchNode{T}}\nend\n\nconst TreeNode{T} = Union{TreeNode{T}, BranchNode{T}}"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"as my Julia-skills progressed with the package while writing it, I might not have realized that this might have been a mistake. In particular, I thought that this is nice as most algorithms should behave differently if they encounter a leaf node.\n\nOne of the things that I noticed is that this definition seems to be problematic for type-inference as "},{"type":"text","text":"getproperty","style":{"code":true}},{"type":"text","text":"  does not always give you the same return type on the treenode. Are there easy ways to redeem this apart from a complete rewrite?"}]}]}],"thread_ts":"1617467872.366200","reply_count":3,"reply_users_count":2,"latest_reply":"1617468866.371300","reply_users":["U01PLQWQXPV","U8D9768Q6"],"is_locked":false,"subscribed":false},{"client_msg_id":"afaa6a8c-b347-414b-99f6-ae3e5e1cd377","type":"message","text":"This is common pitfall\n\nSee here\n<https://docs.julialang.org/en/v1/manual/performance-tips/#Avoid-fields-with-abstract-type>","user":"U01PLQWQXPV","ts":"1617468251.367100","team":"T68168MUP","edited":{"user":"U01PLQWQXPV","ts":"1617468296.000000"},"blocks":[{"type":"rich_text","block_id":"y6KJm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is common pitfall\n\nSee here\n"},{"type":"link","url":"https://docs.julialang.org/en/v1/manual/performance-tips/#Avoid-fields-with-abstract-type"}]}]}],"thread_ts":"1617467872.366200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"EC9EAAA2-AFB2-4BA1-8C38-29B4B6184626","type":"message","text":"This can be made pretty performant generally, since the branch node holds a small union type. Julia‘a compiler has tricks to make this performant ","user":"U8D9768Q6","ts":"1617468730.368900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HR+2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This can be made pretty performant generally, since the branch node holds a small union type. Julia‘a compiler has tricks to make this performant "}]}]}],"thread_ts":"1617467872.366200","parent_user_id":"U01L0RJC6FM","reactions":[{"name":"thumbsup_all","users":["U0179G7FG4F"],"count":1}]},{"client_msg_id":"203DEEA9-D7D0-4826-A5B6-1F27684FDF0B","type":"message","text":"To clarify, a ‘small union’ is a union type with only a few possible members. In this case, it’s just two members. I’d do some benchmarking to make sure, but I don’t anticipate this causing much trouble.  ","user":"U8D9768Q6","ts":"1617468866.371300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mej","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"To clarify, a ‘small union’ is a union type with only a few possible members. In this case, it’s just two members. I’d do some benchmarking to make sure, but I don’t anticipate this causing much trouble.  "}]}]}],"thread_ts":"1617467872.366200","parent_user_id":"U01L0RJC6FM"}]