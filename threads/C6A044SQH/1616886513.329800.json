[{"client_msg_id":"e96dbd4f-a2ff-4665-9154-5407d290af3e","type":"message","text":"I'm using a custom array type (in my case ShiftedArrays) and I'm wondering why `sum` is for this array type slow. Even a naive own sum function `f`is faster. Anybody has a clue what's going on?\n```julia&gt; using ShiftedArrays, BenchmarkTools\njulia&gt; x = randn((1024, 1024, 7, 4));\n\njulia&gt; y = ShiftedArrays.circshift(x, (200, 300, 5, -20));\n\njulia&gt; function f(x)\n       r = zero(eltype(x))\n       for i in eachindex(x)\n           @inbounds r += x[i]\n       end\n       return r\n       end\nf (generic function with 1 method)\n\njulia&gt; @btime f($x);\n  33.795 ms (0 allocations: 0 bytes)\n\njulia&gt; @btime f($y);\n  70.892 ms (0 allocations: 0 bytes)\n\njulia&gt; @btime sum($x);\n  13.065 ms (0 allocations: 0 bytes)\n\njulia&gt; @btime sum($y);\n  168.689 ms (0 allocations: 0 bytes)```","user":"U84GATUBU","ts":"1616886513.329800","team":"T68168MUP","edited":{"user":"U84GATUBU","ts":"1616886610.000000"},"blocks":[{"type":"rich_text","block_id":"gfoA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm using a custom array type (in my case ShiftedArrays) and I'm wondering why "},{"type":"text","text":"sum","style":{"code":true}},{"type":"text","text":" is for this array type slow. Even a naive own sum function "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":"is faster. Anybody has a clue what's going on?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using ShiftedArrays, BenchmarkTools\njulia> x = randn((1024, 1024, 7, 4));\n\njulia> y = ShiftedArrays.circshift(x, (200, 300, 5, -20));\n\njulia> function f(x)\n       r = zero(eltype(x))\n       for i in eachindex(x)\n           @inbounds r += x[i]\n       end\n       return r\n       end\nf (generic function with 1 method)\n\njulia> @btime f($x);\n  33.795 ms (0 allocations: 0 bytes)\n\njulia> @btime f($y);\n  70.892 ms (0 allocations: 0 bytes)\n\njulia> @btime sum($x);\n  13.065 ms (0 allocations: 0 bytes)\n\njulia> @btime sum($y);\n  168.689 ms (0 allocations: 0 bytes)"}]}]}],"thread_ts":"1616886513.329800","reply_count":3,"reply_users_count":1,"latest_reply":"1616888607.336300","reply_users":["UD0NS8PDF"],"is_locked":false,"subscribed":false},{"client_msg_id":"8f915e3f-1cce-40c6-bd02-735924a4aaf9","type":"message","text":"Times for me, same as above:\n```julia&gt; @btime f($x);\n  27.545 ms (0 allocations: 0 bytes)\n\njulia&gt; @btime f($y);\n  120.352 ms (0 allocations: 0 bytes)\n\njulia&gt; @btime sum($x);\n  5.487 ms (0 allocations: 0 bytes)\n\njulia&gt; @btime sum($y);\n  631.843 ms (0 allocations: 0 bytes)```\nand sum over all `dims`, which I think avoids `sum`’s accuracy-improving cleverness? Much closer to `f`\n```julia&gt; @btime sum($x; dims=(1,2,3,4))\n  5.493 ms (8 allocations: 368 bytes)\n1×1×1×1 Array{Float64, 4}:\n[:, :, 1, 1] =\n 2718.3273266495567\n\njulia&gt; @btime sum($y; dims=(1,2,3,4))\n  106.760 ms (8 allocations: 368 bytes)\n1×1×1×1 Array{Float64, 4}:\n[:, :, 1, 1] =\n 2718.3273266501506```","user":"UD0NS8PDF","ts":"1616888466.335900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"t+1r","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Times for me, same as above:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @btime f($x);\n  27.545 ms (0 allocations: 0 bytes)\n\njulia> @btime f($y);\n  120.352 ms (0 allocations: 0 bytes)\n\njulia> @btime sum($x);\n  5.487 ms (0 allocations: 0 bytes)\n\njulia> @btime sum($y);\n  631.843 ms (0 allocations: 0 bytes)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"and sum over all "},{"type":"text","text":"dims","style":{"code":true}},{"type":"text","text":", which I think avoids "},{"type":"text","text":"sum","style":{"code":true}},{"type":"text","text":"’s accuracy-improving cleverness? Much closer to "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @btime sum($x; dims=(1,2,3,4))\n  5.493 ms (8 allocations: 368 bytes)\n1×1×1×1 Array{Float64, 4}:\n[:, :, 1, 1] =\n 2718.3273266495567\n\njulia> @btime sum($y; dims=(1,2,3,4))\n  106.760 ms (8 allocations: 368 bytes)\n1×1×1×1 Array{Float64, 4}:\n[:, :, 1, 1] =\n 2718.3273266501506"}]}]}],"thread_ts":"1616886513.329800","parent_user_id":"U84GATUBU"},{"client_msg_id":"09dea9d0-3b3f-487e-97e8-3e20f7b59a55","type":"message","text":"Xref also <https://github.com/JuliaLang/julia/pull/39513>, there are slowdowns even for built-in wrappers.","user":"UD0NS8PDF","ts":"1616888606.336100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Jl/u","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Xref also "},{"type":"link","url":"https://github.com/JuliaLang/julia/pull/39513"},{"type":"text","text":", there are slowdowns even for built-in wrappers."}]}]}],"thread_ts":"1616886513.329800","parent_user_id":"U84GATUBU"},{"client_msg_id":"101c8bdd-0fce-484b-8f1e-e0b0fa7bc50e","type":"message","text":"Although `CircShiftedArray` needs a `mod` on every index, which won’t be free. I think ideally it would pass `mapreduce` on to its parent.","user":"UD0NS8PDF","ts":"1616888607.336300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/+iq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Although "},{"type":"text","text":"CircShiftedArray","style":{"code":true}},{"type":"text","text":" needs a "},{"type":"text","text":"mod","style":{"code":true}},{"type":"text","text":" on every index, which won’t be free. I think ideally it would pass "},{"type":"text","text":"mapreduce","style":{"code":true}},{"type":"text","text":" on to its parent."}]}]}],"thread_ts":"1616886513.329800","parent_user_id":"U84GATUBU"}]