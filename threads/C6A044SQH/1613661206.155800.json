[{"client_msg_id":"0c0d4d5a-c3f8-460e-965f-eea480c26d61","type":"message","text":"I can't seem to get this right: so I ask here : ) I want to create a block-matrix type that can hold 4 blocks to form a 2x2 block matrix. Something along the lines of\n```struct BlockMatrix{T, T11 &lt;: AbstractMatrix{T}, T12 &lt;: AbstractMatrix{T}, T21 &lt;: AbstractMatrix{T}, T22 &lt;: AbstractMatrix{T}} &lt;: AbstractMatrix{T}\n  A11::T11\n  A12::T12\n  A21::T21\n  A22::T22\nend```\nThe idea is that it can hold all kinds of matrices for each block, depending on what is chosen during construction, be it sparse arrays, low-rank matrix or dense matrix. As there is a lot of possible combinations here I am not sure whether this is the right approach to play nice with type inference. Shou;ld I perhaps cut out the `T11, T12...`  types and instead use `A11::Union{Matrix{T}, LowRankMatrix{T}}`  etc.? Thanks in advance for your inputs :slightly_smiling_face:","user":"U01L0RJC6FM","ts":"1613661206.155800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hzVh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I can't seem to get this right: so I ask here : ) I want to create a block-matrix type that can hold 4 blocks to form a 2x2 block matrix. Something along the lines of\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct BlockMatrix{T, T11 <: AbstractMatrix{T}, T12 <: AbstractMatrix{T}, T21 <: AbstractMatrix{T}, T22 <: AbstractMatrix{T}} <: AbstractMatrix{T}\n  A11::T11\n  A12::T12\n  A21::T21\n  A22::T22\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"The idea is that it can hold all kinds of matrices for each block, depending on what is chosen during construction, be it sparse arrays, low-rank matrix or dense matrix. As there is a lot of possible combinations here I am not sure whether this is the right approach to play nice with type inference. Shou;ld I perhaps cut out the "},{"type":"text","text":"T11, T12...","style":{"code":true}},{"type":"text","text":"  types and instead use "},{"type":"text","text":"A11::Union{Matrix{T}, LowRankMatrix{T}}","style":{"code":true}},{"type":"text","text":"  etc.? Thanks in advance for your inputs "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1613661206.155800","reply_count":1,"reply_users_count":1,"latest_reply":"1613661208.155900","reply_users":["B01J9QZ4SP8"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1613661208.155900","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1613661206.155800","parent_user_id":"U01L0RJC6FM"}]