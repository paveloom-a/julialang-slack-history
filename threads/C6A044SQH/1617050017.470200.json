[{"client_msg_id":"0C303A49-A30A-4AF0-AE37-68D994F8670A","type":"message","text":"Hi. I am trying to Port C++ program to Julia, but facing some difficulties with float type accuracy. In c++ double float type operation 19.92-0.02 results in 19.9. In Julia Float64 same operation results in 19.900000000000002. what's the best way in Julia to align it to C++ float behavior?","user":"U019RA3V6SU","ts":"1617050017.470200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"m=nQ7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi. I am trying to Port C++ program to Julia, but facing some difficulties with float type accuracy. In c++ double float type operation 19.92-0.02 results in 19.9. In Julia Float64 same operation results in 19.900000000000002. what's the best way in Julia to align it to C++ float behavior?"}]}]}],"thread_ts":"1617050017.470200","reply_count":13,"reply_users_count":5,"latest_reply":"1617052884.488600","reply_users":["U0179G7FG4F","U012XER8K4M","UH24GRBLL","U019RA3V6SU","USU9FRPEU"],"is_locked":false,"subscribed":false},{"client_msg_id":"727bb8ef-ced1-4838-b39c-ab321185e7d6","type":"message","text":"I think this might just be a difference in printing","user":"U0179G7FG4F","ts":"1617050504.472000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Zsq8j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think this might just be a difference in printing"}]}]}],"thread_ts":"1617050017.470200","parent_user_id":"U019RA3V6SU"},{"client_msg_id":"e8342e22-7ba0-4cc4-8055-e84087055f38","type":"message","text":"(and or parsing)","user":"U0179G7FG4F","ts":"1617050529.472200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VzC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(and or parsing)"}]}]}],"thread_ts":"1617050017.470200","parent_user_id":"U019RA3V6SU"},{"client_msg_id":"82bccea4-accd-4837-9998-e7f20c6dd6bf","type":"message","text":"wait. That's wrong. C++ is using less precise 32 bit floats by default (`float`) while Julia uses 64 bit `float`  (`double` in C)","user":"U0179G7FG4F","ts":"1617050657.473100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nHe2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"wait. That's wrong. C++ is using less precise 32 bit floats by default ("},{"type":"text","text":"float","style":{"code":true}},{"type":"text","text":") while Julia uses 64 bit "},{"type":"text","text":"float","style":{"code":true}},{"type":"text","text":"  ("},{"type":"text","text":"double","style":{"code":true}},{"type":"text","text":" in C)"}]}]}],"thread_ts":"1617050017.470200","parent_user_id":"U019RA3V6SU"},{"client_msg_id":"f3f555a9-0386-49a7-936f-2dc0ee70e577","type":"message","text":"welcome to floating point :slightly_smiling_face: assuming you meant double in c++, then still\n```#include &lt;cstdio&gt;\n\nint main() {\n    printf(\"%.20f\", 19.92);\n    printf(\"%.20f\", 0.02);\n    printf(\"%.20f\", 19.92 - 0.02);\n}```\ngives\n```19.92000000000000170530\n0.02000000000000000042\n19.90000000000000213163```","user":"U012XER8K4M","ts":"1617050750.474000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Hs6c","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"welcome to floating point "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":" assuming you meant double in c++, then still\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"#include <cstdio>\n\nint main() {\n    printf(\"%.20f\", 19.92);\n    printf(\"%.20f\", 0.02);\n    printf(\"%.20f\", 19.92 - 0.02);\n}"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"gives\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"19.92000000000000170530\n0.02000000000000000042\n19.90000000000000213163"}]}]}],"thread_ts":"1617050017.470200","parent_user_id":"U019RA3V6SU"},{"client_msg_id":"7c4e766a-7c58-483d-bf42-b92d7d889b05","type":"message","text":"```julia&gt; 19.92f0 - 0.02f0             \n19.9f0                              \n                                    \njulia&gt; 19.92 - 0.02                 \n19.900000000000002                  \n                                    \njulia&gt; typeof(19.92), typeof(0.02f0)\n(Float64, Float32)                  ```","user":"UH24GRBLL","ts":"1617050776.474200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6EUBD","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> 19.92f0 - 0.02f0             \n19.9f0                              \n                                    \njulia> 19.92 - 0.02                 \n19.900000000000002                  \n                                    \njulia> typeof(19.92), typeof(0.02f0)\n(Float64, Float32)                  "}]}]}],"thread_ts":"1617050017.470200","parent_user_id":"U019RA3V6SU"},{"type":"message","subtype":"thread_broadcast","text":"Thanks all! So to summarise, float behaviour is the same, it's just how I print floats in C++ :nerd_face:","user":"U019RA3V6SU","ts":"1617051047.477200","thread_ts":"1617050017.470200","root":{"client_msg_id":"0C303A49-A30A-4AF0-AE37-68D994F8670A","type":"message","text":"Hi. I am trying to Port C++ program to Julia, but facing some difficulties with float type accuracy. In c++ double float type operation 19.92-0.02 results in 19.9. In Julia Float64 same operation results in 19.900000000000002. what's the best way in Julia to align it to C++ float behavior?","user":"U019RA3V6SU","ts":"1617050017.470200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"m=nQ7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi. I am trying to Port C++ program to Julia, but facing some difficulties with float type accuracy. In c++ double float type operation 19.92-0.02 results in 19.9. In Julia Float64 same operation results in 19.900000000000002. what's the best way in Julia to align it to C++ float behavior?"}]}]}],"thread_ts":"1617050017.470200","reply_count":13,"reply_users_count":5,"latest_reply":"1617052884.488600","reply_users":["U0179G7FG4F","U012XER8K4M","UH24GRBLL","U019RA3V6SU","USU9FRPEU"],"is_locked":false,"subscribed":false},"blocks":[{"type":"rich_text","block_id":"iPGw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks all! So to summarise, float behaviour is the same, it's just how I print floats in C++ "},{"type":"emoji","name":"nerd_face"}]}]}],"client_msg_id":"9681AE55-D32C-4A49-8C71-0B1F18250EEF"},{"client_msg_id":"41966565-a142-475d-b473-f3adc50e9dfe","type":"message","text":"well","user":"UH24GRBLL","ts":"1617051072.477500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CXZj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well"}]}]}],"thread_ts":"1617050017.470200","parent_user_id":"U019RA3V6SU"},{"client_msg_id":"7a0cf708-16c5-4c93-a54a-e33c7a9942e2","type":"message","text":"it's just that `float` in C++ means \"32 bit floating point\"","user":"UH24GRBLL","ts":"1617051083.477900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NwC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's just that "},{"type":"text","text":"float","style":{"code":true}},{"type":"text","text":" in C++ means \"32 bit floating point\""}]}]}],"thread_ts":"1617050017.470200","parent_user_id":"U019RA3V6SU"},{"client_msg_id":"e83cb5a2-c0a0-4417-b18d-b1c9c03fa52f","type":"message","text":"ah, I missed that part in your original query, my bad","user":"UH24GRBLL","ts":"1617051116.478100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3Mz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah, I missed that part in your original query, my bad"}]}]}],"thread_ts":"1617050017.470200","parent_user_id":"U019RA3V6SU"},{"client_msg_id":"b0ebeca0-48b4-47f9-95fe-a68950654b47","type":"message","text":"julia by default prints as many digits as necessary to uniquely identify each floating point number such that it uniquely parses","user":"UH24GRBLL","ts":"1617051198.478300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qwb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"julia by default prints as many digits as necessary to uniquely identify each floating point number such that it uniquely parses"}]}]}],"thread_ts":"1617050017.470200","parent_user_id":"U019RA3V6SU"},{"client_msg_id":"bb18e9f1-45c4-456e-8bc3-8c0febc5d3a2","type":"message","text":"if you want specific printing, you can use formatting strings from the `Printf` stdlib","user":"UH24GRBLL","ts":"1617051221.478500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kvdQr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you want specific printing, you can use formatting strings from the "},{"type":"text","text":"Printf","style":{"code":true}},{"type":"text","text":" stdlib"}]}]}],"thread_ts":"1617050017.470200","parent_user_id":"U019RA3V6SU"},{"client_msg_id":"0c6feb0a-df26-4e26-9a63-79207e7e03aa","type":"message","text":"For example:\n```julia&gt; using Printf\n\njulia&gt; @printf(\"%.20f\", 19.92)\n19.92000000000000170530\njulia&gt; @printf(\"%.20f\", 0.02)\n0.02000000000000000042\njulia&gt; @printf(\"%.20f\", 19.92 - 0.02)\n19.90000000000000213163```\nwhich replicates exactly what <@U012XER8K4M> did in C++","user":"USU9FRPEU","ts":"1617051291.479000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"baO6Y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For example:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using Printf\n\njulia> @printf(\"%.20f\", 19.92)\n19.92000000000000170530\njulia> @printf(\"%.20f\", 0.02)\n0.02000000000000000042\njulia> @printf(\"%.20f\", 19.92 - 0.02)\n19.90000000000000213163"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"which replicates exactly what "},{"type":"user","user_id":"U012XER8K4M"},{"type":"text","text":" did in C++"}]}]}],"thread_ts":"1617050017.470200","parent_user_id":"U019RA3V6SU"},{"client_msg_id":"39AC53C5-D737-4987-81BF-089F6D68F296","type":"message","text":"Thanks everyone! I am porting C++  code for simulating electrochemical cyclic voltammetry response using finite difference method (simple textbook example code), but was observing gradual drift in results comparing to c++ output. Initially suspected that this could be due to float behaviour, but now thinking this must be due to some error in ported code logic. Will review tomorrow.","user":"U019RA3V6SU","ts":"1617052884.488600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wuyhz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks everyone! I am porting C++  code for simulating electrochemical cyclic voltammetry response using finite difference method (simple textbook example code), but was observing gradual drift in results comparing to c++ output. Initially suspected that this could be due to float behaviour, but now thinking this must be due to some error in ported code logic. Will review tomorrow."}]}]}],"thread_ts":"1617050017.470200","parent_user_id":"U019RA3V6SU"}]