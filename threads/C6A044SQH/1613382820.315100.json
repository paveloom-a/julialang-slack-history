[{"client_msg_id":"a75eb852-a47f-4267-af99-51f455da953e","type":"message","text":"Is it possible to generalize such function to arbitrary tuple size? I couldn't find relevant information in docs.\n```function from_vec(::Type{MyType{Tuple{T1, T2}}}, x) where {T1, T2}\n\tMyType((f(T1, x), f(T2, x)))\nend```","user":"UGTUKUHLN","ts":"1613382820.315100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oeE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is it possible to generalize such function to arbitrary tuple size? I couldn't find relevant information in docs.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function from_vec(::Type{MyType{Tuple{T1, T2}}}, x) where {T1, T2}\n\tMyType((f(T1, x), f(T2, x)))\nend"}]}]}],"thread_ts":"1613382820.315100","reply_count":24,"reply_users_count":6,"latest_reply":"1613394822.336700","reply_users":["B01J9QZ4SP8","U7HAYKY9X","UGTUKUHLN","U6N6VQE30","U68QW0PUZ","U6BJ9E351"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1613382822.315200","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1613382820.315100","parent_user_id":"UGTUKUHLN","reactions":[{"name":"bridge","users":["UGTUKUHLN"],"count":1}]},{"client_msg_id":"24d590e3-b49c-48e6-a2ff-9fe7dad090fa","type":"message","text":"Check NTuple","user":"U7HAYKY9X","ts":"1613382849.315400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"96v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Check NTuple"}]}]}],"thread_ts":"1613382820.315100","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"f9e980e4-cec8-4b7b-8e77-f40d185f1e1b","type":"message","text":"NTuple only works for same types within tuple, right?","user":"UGTUKUHLN","ts":"1613382873.315600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sHR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"NTuple only works for same types within tuple, right?"}]}]}],"thread_ts":"1613382820.315100","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"ec4dd9e9-6c74-476d-bb77-d7115b5f68ac","type":"message","text":"Vararg","user":"U6N6VQE30","ts":"1613382878.315800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KMr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Vararg"}]}]}],"thread_ts":"1613382820.315100","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"6543b884-6130-42cb-8844-6563a6c05efa","type":"message","text":"<@U6N6VQE30> I tried playing with Vararg, but cannot understand its usage here","user":"UGTUKUHLN","ts":"1613382915.316200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Yh9","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U6N6VQE30"},{"type":"text","text":" I tried playing with Vararg, but cannot understand its usage here"}]}]}],"thread_ts":"1613382820.315100","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"f90b801d-551b-4db0-a7b1-86971b4c1c51","type":"message","text":"I can put `Tuple{Vararg{Any, N}}` into the signature, but then I somehow need to access types of tuple elements within the function","user":"UGTUKUHLN","ts":"1613383188.317800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hD6da","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I can put "},{"type":"text","text":"Tuple{Vararg{Any, N}}","style":{"code":true}},{"type":"text","text":" into the signature, but then I somehow need to access types of tuple elements within the function"}]}]}],"thread_ts":"1613382820.315100","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"e8e64382-1ad0-4d5e-a710-6d7bf9cc8859","type":"message","text":"Oh, sorry, you only have the type, not an instance. Maybe you can do\n\n```from_vec(::Type{MyType{T}}, x) where {T&lt;:Tuple} =\n  MyType(map(S -&gt; S(x), T.parameters))```","user":"U6N6VQE30","ts":"1613383509.319600","team":"T68168MUP","edited":{"user":"U6N6VQE30","ts":"1613383581.000000"},"blocks":[{"type":"rich_text","block_id":"2Zu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh, sorry, you only have the type, not an instance. Maybe you can do\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"from_vec(::Type{MyType{T}}, x) where {T<:Tuple} =\n  MyType(map(S -> S(x), T.parameters))"}]}]}],"thread_ts":"1613382820.315100","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"d763fb17-fe5d-40de-a095-6741ac870593","type":"message","text":"This gives `MyType{Vector{Any}}`. Changing to\n```from_vec(::Type{MyType{T}}, x) where {T&lt;:Tuple} = MyType(Tuple(map(S -&gt; S(x), T.parameters)))```\nreturns the correct type, but is not stable.","user":"UGTUKUHLN","ts":"1613383935.320800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"u13","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This gives "},{"type":"text","text":"MyType{Vector{Any}}","style":{"code":true}},{"type":"text","text":". Changing to\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"from_vec(::Type{MyType{T}}, x) where {T<:Tuple} = MyType(Tuple(map(S -> S(x), T.parameters)))"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"returns the correct type, but is not stable."}]}]}],"thread_ts":"1613382820.315100","parent_user_id":"UGTUKUHLN"},{"type":"message","subtype":"bot_message","text":"Success, it has been cross posted <https://discourse.julialang.org/t/55305| to Discourse>. Keep and eye out on Discourse for responses and please add an answer there once you are satisfied with the solution so others can benefit as well. Happy debugging!","ts":"1613384022.321300","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1613382820.315100","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"205822b5-e848-4ae7-9e4e-4f4a10ee38f7","type":"message","text":"Presumably, you do not intend to use this with \"arbitrary\" tuple size.  If you are expecting to need this with more than 5ish parameters (and probably more than three for most situations) -- there is almost certainly a better approach.  So defining each case is not much of a bother:\n```function from_vec(::Type{MyType{Tuple{T1}}}, x) where {T1}\n\tMyType((f(T1, x),))\nend\nfunction from_vec(::Type{MyType{Tuple{T1, T2}}}, x) where {T1, T2}\n\tMyType((f(T1, x), f(T2, x)))\nend\nfunction from_vec(::Type{MyType{Tuple{T1, T2, T3}}}, x) where {T1, T2, T3}\n\tMyType((f(T1, x), f(T2, x), f(T3, x)))\nend\n# ...```","user":"U68QW0PUZ","ts":"1613385263.322300","team":"T68168MUP","edited":{"user":"U68QW0PUZ","ts":"1613385351.000000"},"blocks":[{"type":"rich_text","block_id":"ylRh4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Presumably, you do not intend to use this with \"arbitrary\" tuple size.  If you are expecting to need this with more than 5ish parameters (and probably more than three for most situations) -- there is almost certainly a better approach.  So defining each case is not much of a bother:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function from_vec(::Type{MyType{Tuple{T1}}}, x) where {T1}\n\tMyType((f(T1, x),))\nend\nfunction from_vec(::Type{MyType{Tuple{T1, T2}}}, x) where {T1, T2}\n\tMyType((f(T1, x), f(T2, x)))\nend\nfunction from_vec(::Type{MyType{Tuple{T1, T2, T3}}}, x) where {T1, T2, T3}\n\tMyType((f(T1, x), f(T2, x), f(T3, x)))\nend\n# ..."}]}]}],"thread_ts":"1613382820.315100","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"df10c5de-3ded-4e0c-bf48-3cea4677924a","type":"message","text":"You can always write a generated function :upside_down_face:","user":"U6N6VQE30","ts":"1613385537.322800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jlvP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can always write a generated function "},{"type":"emoji","name":"upside_down_face"}]}]}],"thread_ts":"1613382820.315100","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"4b3b9bc0-af83-432c-9748-c1bfcc73c05c","type":"message","text":"<@U68QW0PUZ> indeed, by \"arbitrary\" I just meant \"not hardcoded\", and the limit of 5-6 is completely fine. Currently I have it implemented similar to your approach. However, the actual function is somewhat more complicated, and with this ~5x duplication it's easy to forget something when modifying in the future.","user":"UGTUKUHLN","ts":"1613385783.323000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"a=8s5","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U68QW0PUZ"},{"type":"text","text":" indeed, by \"arbitrary\" I just meant \"not hardcoded\", and the limit of 5-6 is completely fine. Currently I have it implemented similar to your approach. However, the actual function is somewhat more complicated, and with this ~5x duplication it's easy to forget something when modifying in the future."}]}]}],"thread_ts":"1613382820.315100","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"752dd32c-3500-46d0-b8e6-791d8d30599e","type":"message","text":"<@U6N6VQE30> well, maybe it's time to read about them :) I saw that many discourage using generated functions because basically everything is possible without.","user":"UGTUKUHLN","ts":"1613385862.323200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RAjF","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U6N6VQE30"},{"type":"text","text":" well, maybe it's time to read about them :) I saw that many discourage using generated functions because basically everything is possible without."}]}]}],"thread_ts":"1613382820.315100","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"e26c14cb-0151-453f-858f-8b6db4d10764","type":"message","text":"I've added a possible way with `Base.tuple_type_head/tail` on discourse <https://discourse.julialang.org/t/is-it-possible-to-generalize-such-function-to-arbitrary-tuple-size-i-couldnt-fin/55305/2>. This recursive approach in general infers better than using `T.parameters`","user":"U6BJ9E351","ts":"1613385958.323600","team":"T68168MUP","edited":{"user":"U6BJ9E351","ts":"1613385964.000000"},"blocks":[{"type":"rich_text","block_id":"3f6gr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I've added a possible way with "},{"type":"text","text":"Base.tuple_type_head/tail","style":{"code":true}},{"type":"text","text":" on discourse "},{"type":"link","url":"https://discourse.julialang.org/t/is-it-possible-to-generalize-such-function-to-arbitrary-tuple-size-i-couldnt-fin/55305/2"},{"type":"text","text":". This recursive approach in general infers better than using "},{"type":"text","text":"T.parameters","style":{"code":true}}]}]}],"thread_ts":"1613382820.315100","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"ca84c9af-3c54-463b-837d-ba42a6b1fa05","type":"message","text":"```julia&gt; @generated function from_vec(::Type{T}, x) where {T&lt;:Tuple}\n         :(tuple($([:($S(x)) for S in T.parameters]...)))\n       end```","user":"U6N6VQE30","ts":"1613386118.324000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QpVSw","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @generated function from_vec(::Type{T}, x) where {T<:Tuple}\n         :(tuple($([:($S(x)) for S in T.parameters]...)))\n       end"}]}]}],"thread_ts":"1613382820.315100","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"204770e3-7ffe-480a-b305-7b976ba34d00","type":"message","text":"<@U6BJ9E351> cool! I hoped for something similar: I'm familiar with head/tail recursion for tuple _values_, and just couldn't find if it's possible to split tuple _types_ like this.","user":"UGTUKUHLN","ts":"1613386138.324200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q3W3j","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U6BJ9E351"},{"type":"text","text":" cool! I hoped for something similar: I'm familiar with head/tail recursion for tuple "},{"type":"text","text":"values","style":{"italic":true}},{"type":"text","text":", and just couldn't find if it's possible to split tuple "},{"type":"text","text":"types","style":{"italic":true}},{"type":"text","text":" like this."}]}]}],"thread_ts":"1613382820.315100","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"39c34914-34d3-4def-94ae-bab7a74764c0","type":"message","text":"<@U6N6VQE30> so, @generated functions basically allow to write the map-like code you suggested first, but make it type-stable? _When it \"intrinsically\" stable, of course_","user":"UGTUKUHLN","ts":"1613386316.324600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7fD","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U6N6VQE30"},{"type":"text","text":" so, @generated functions basically allow to write the map-like code you suggested first, but make it type-stable? "},{"type":"text","text":"When it \"intrinsically\" stable, of course","style":{"italic":true}}]}]}],"thread_ts":"1613382820.315100","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"cb3c3c74-cf52-401c-a635-cd245d337408","type":"message","text":"You basically execute the type-unstable loop over types at compile time, and generate a function body that you would otherwise write by hand","user":"U6N6VQE30","ts":"1613386485.324900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9fZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You basically execute the type-unstable loop over types at compile time, and generate a function body that you would otherwise write by hand"}]}]}],"thread_ts":"1613382820.315100","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"5cdd5f98-9ea8-4620-9a01-28ee769460af","type":"message","text":"it's easiest to see when you remove `@generated`:\n\n```julia&gt; function from_vec(::Type{T}, x) where {T&lt;:Tuple}\n         :(tuple($([:($S(x)) for S in T.parameters]...)))\n       end\nfrom_vec (generic function with 1 method)\n\njulia&gt; from_vec(Tuple{Float64,Int,Float32}, 1)\n:(tuple((Float64)(x), (Int64)(x), (Float32)(x)))```","user":"U6N6VQE30","ts":"1613386543.325100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vFRTg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's easiest to see when you remove "},{"type":"text","text":"@generated","style":{"code":true}},{"type":"text","text":":\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function from_vec(::Type{T}, x) where {T<:Tuple}\n         :(tuple($([:($S(x)) for S in T.parameters]...)))\n       end\nfrom_vec (generic function with 1 method)\n\njulia> from_vec(Tuple{Float64,Int,Float32}, 1)\n:(tuple((Float64)(x), (Int64)(x), (Float32)(x)))"}]}]}],"thread_ts":"1613382820.315100","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"794e50c4-c373-4b4b-b88b-79ee28facc24","type":"message","text":"Is `T.parameters` field documented somewhere? Cannot find on website.","user":"UGTUKUHLN","ts":"1613386612.325300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"H+qJ1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is "},{"type":"text","text":"T.parameters","style":{"code":true}},{"type":"text","text":" field documented somewhere? Cannot find on website."}]}]}],"thread_ts":"1613382820.315100","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"b123203d-5265-4faa-a7e9-8cdf329742b1","type":"message","text":"It is not an exported field.  It gives the parameter values of a parameterized type.","user":"U68QW0PUZ","ts":"1613387120.325600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"V2b","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It is not an exported field.  It gives the parameter values of a parameterized type."}]}]}],"thread_ts":"1613382820.315100","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"783d3414-601e-4e0c-9347-10a89cabc4b1","type":"message","text":"base uses `fieldtype(T, i)`, maybe that's better","user":"U6N6VQE30","ts":"1613387380.325800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7E1W","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"base uses "},{"type":"text","text":"fieldtype(T, i)","style":{"code":true}},{"type":"text","text":", maybe that's better"}]}]}],"thread_ts":"1613382820.315100","parent_user_id":"UGTUKUHLN","reactions":[{"name":"+1::skin-tone-3","users":["U68QW0PUZ"],"count":1}]},{"client_msg_id":"f9486599-b8e9-43ad-a938-2d34108185fc","type":"message","text":"Thanks, I managed to write my function using this @generated approach! Looks pretty clean and powerful for such cases when one needs type-stability.","user":"UGTUKUHLN","ts":"1613387446.326100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O8UAQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks, I managed to write my function using this @generated approach! Looks pretty clean and powerful for such cases when one needs type-stability."}]}]}],"thread_ts":"1613382820.315100","parent_user_id":"UGTUKUHLN"},{"type":"message","subtype":"bot_message","text":"Hey <@UGTUKUHLN>, if you were able to find an answer here on Slack, please cross post it to Discourse via the link above. Thank you! ","ts":"1613394822.336700","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1613382820.315100","parent_user_id":"UGTUKUHLN"}]