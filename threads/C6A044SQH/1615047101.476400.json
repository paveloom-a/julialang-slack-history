[{"client_msg_id":"1fc63207-c8f0-4a16-b4d5-1b9cdb99599f","type":"message","text":"I'm looking at some nice AVX2 instructions, and I'm wondering if there is a path to use this in Julia:\n<https://stackoverflow.com/questions/66347928/simd-unpack-12-bit-fields-to-16-bit>","user":"USU9FRPEU","ts":"1615047101.476400","team":"T68168MUP","attachments":[{"service_name":"Stack Overflow","title":"SIMD unpack 12-bit fields to 16-bit","title_link":"https://stackoverflow.com/questions/66347928/simd-unpack-12-bit-fields-to-16-bit","text":"I need to unpack two 16-bit values from each 24 bits of input. (3 bytes -&gt; 4 bytes). I already did it the naïve way but I'm not happy with the performance. For example, InBuffer is __m128i: valu...","fallback":"Stack Overflow: SIMD unpack 12-bit fields to 16-bit","thumb_url":"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded","from_url":"https://stackoverflow.com/questions/66347928/simd-unpack-12-bit-fields-to-16-bit","thumb_width":316,"thumb_height":316,"service_icon":"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon.png?v=c78bd457575a","id":1,"original_url":"https://stackoverflow.com/questions/66347928/simd-unpack-12-bit-fields-to-16-bit"}],"blocks":[{"type":"rich_text","block_id":"d+U","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm looking at some nice AVX2 instructions, and I'm wondering if there is a path to use this in Julia:\n"},{"type":"link","url":"https://stackoverflow.com/questions/66347928/simd-unpack-12-bit-fields-to-16-bit"}]}]}],"thread_ts":"1615047101.476400","reply_count":5,"reply_users_count":3,"latest_reply":"1615050757.478300","reply_users":["B01J9QZ4SP8","USU9FRPEU","U7HAYKY9X"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1615047103.476500","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1615047101.476400","parent_user_id":"USU9FRPEU"},{"client_msg_id":"eebcdcfe-21a1-43d0-b236-97d06aaa1a29","type":"message","text":"I'm considering SIMD.jl, <@U67D54KS8>’s <http://kristofferc.github.io/post/intrinsics/|Intrinsic Blog post>, and `Core.Intrinsics.llvmcall`","user":"USU9FRPEU","ts":"1615047181.476900","team":"T68168MUP","attachments":[{"title":"SIMD and SIMD-intrinsics in Julia | Kristoffer Carlsson","title_link":"http://kristofferc.github.io/post/intrinsics/","text":"Software engineer","fallback":"SIMD and SIMD-intrinsics in Julia | Kristoffer Carlsson","from_url":"http://kristofferc.github.io/post/intrinsics/","service_icon":"http://kristofferc.github.io/img/apple-touch-icon.png","service_name":"kristofferc.github.io","id":1,"original_url":"http://kristofferc.github.io/post/intrinsics/"}],"blocks":[{"type":"rich_text","block_id":"awCK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm considering SIMD.jl, "},{"type":"user","user_id":"U67D54KS8"},{"type":"text","text":"’s "},{"type":"link","url":"http://kristofferc.github.io/post/intrinsics/","text":"Intrinsic Blog post"},{"type":"text","text":", and "},{"type":"text","text":"Core.Intrinsics.llvmcall","style":{"code":true}}]}]}],"thread_ts":"1615047101.476400","parent_user_id":"USU9FRPEU"},{"client_msg_id":"3d22b6d3-f123-4dde-b174-93fb0bc1e47d","type":"message","text":"Check my package ScanByte - it uses the byte shuffling instruction extensively, and it also has a section for how to check if the users computer has AVX2","user":"U7HAYKY9X","ts":"1615050530.477800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"z043","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Check my package ScanByte - it uses the byte shuffling instruction extensively, and it also has a section for how to check if the users computer has AVX2"}]}]}],"thread_ts":"1615047101.476400","parent_user_id":"USU9FRPEU","reactions":[{"name":"+1","users":["USU9FRPEU"],"count":1}]},{"client_msg_id":"1bc6b46e-8a42-4d4b-885f-a714e4e2ce24","type":"message","text":"But it's not great - SIMD.jl is way more stable and IIRC, it only uses instructions that are directly supported by LLVM. My package parses some LLVM output to check which instructions are available, which seems brittle.","user":"U7HAYKY9X","ts":"1615050610.478100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"i5V5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But it's not great - SIMD.jl is way more stable and IIRC, it only uses instructions that are directly supported by LLVM. My package parses some LLVM output to check which instructions are available, which seems brittle."}]}]}],"thread_ts":"1615047101.476400","parent_user_id":"USU9FRPEU"},{"client_msg_id":"11e4fbbd-14b0-4ac0-9635-7ccb5176b97e","type":"message","text":"I just about have the solution with SIMD.jl. i just needed to recognize that the blend Intel instrinsic is also a `shufflevector` operation","user":"USU9FRPEU","ts":"1615050757.478300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XZe3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I just about have the solution with SIMD.jl. i just needed to recognize that the blend Intel instrinsic is also a "},{"type":"text","text":"shufflevector","style":{"code":true}},{"type":"text","text":" operation"}]}]}],"thread_ts":"1615047101.476400","parent_user_id":"USU9FRPEU"}]