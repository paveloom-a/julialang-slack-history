[{"client_msg_id":"9deabcc0-f581-4e07-a9f6-6858b8d16987","type":"message","text":"Hey, I have the following code: \n```        v0 = v1 + k .* v2```\nwith each `vi`  of type `Vector{nf_elem}` and `k`  of type `nf_elem` . It seems to allocate a lot, why would that be, and how to make it not allocate, knowing that all elements here are already allocated? (I think we can replace `nf_elem` (from Hecke) by something else for the purposes of this question)","user":"U01MG0TN079","ts":"1617268942.183300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dfH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hey, I have the following code: \n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"        v0 = v1 + k .* v2"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"with each "},{"type":"text","text":"vi","style":{"code":true}},{"type":"text","text":"  of type "},{"type":"text","text":"Vector{nf_elem}","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"k","style":{"code":true}},{"type":"text","text":"  of type "},{"type":"text","text":"nf_elem","style":{"code":true}},{"type":"text","text":" . It seems to allocate a lot, why would that be, and how to make it not allocate, knowing that all elements here are already allocated? (I think we can replace "},{"type":"text","text":"nf_elem","style":{"code":true}},{"type":"text","text":" (from Hecke) by something else for the purposes of this question)"}]}]}],"thread_ts":"1617268942.183300","reply_count":26,"reply_users_count":3,"latest_reply":"1617273426.189800","reply_users":["U01MG0TN079","UCZ7VBGUD","U85R3JJ8L"],"is_locked":false,"subscribed":false},{"client_msg_id":"8e1c35f0-905d-4595-aae4-98a54dfb9299","type":"message","text":"when trying out different combinations of `.+` , `.*` , `*` , and/or wrapping everything in a comprehension, I get wildly different results","user":"U01MG0TN079","ts":"1617269070.183500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vMq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"when trying out different combinations of "},{"type":"text","text":".+","style":{"code":true}},{"type":"text","text":" , "},{"type":"text","text":".*","style":{"code":true}},{"type":"text","text":" , "},{"type":"text","text":"*","style":{"code":true}},{"type":"text","text":" , and/or wrapping everything in a comprehension, I get wildly different results"}]}]}],"thread_ts":"1617268942.183300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"E92BDF4C-5A95-40C3-B33B-6FB761C9F6DC","type":"message","text":"As the blog post says, more dots! <https://julialang.org/blog/2017/01/moredots/|https://julialang.org/blog/2017/01/moredots/>","user":"UCZ7VBGUD","ts":"1617269092.184100","team":"T68168MUP","attachments":[{"title":"More Dots: Syntactic Loop Fusion in Julia","title_link":"https://julialang.org/blog/2017/01/moredots/","text":"More Dots: Syntactic Loop Fusion in Julia | After a lengthy design process (<https://github.com/JuliaLang/julia/issues/8450>) and preliminary foundations in Julia 0.5 (/blog/2016-10-11-julia-0.5-highlights#vectorized_function_calls), Julia 0.6 includes new facilities for writing code in the","fallback":"More Dots: Syntactic Loop Fusion in Julia","image_url":"https://julialang.org/assets/images/julia-open-graph.png","from_url":"https://julialang.org/blog/2017/01/moredots/","image_width":500,"image_height":250,"image_bytes":742374,"service_name":"julialang.org","id":1,"original_url":"https://julialang.org/blog/2017/01/moredots/"}],"blocks":[{"type":"rich_text","block_id":"khi0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"As the blog post says, more dots! "},{"type":"link","url":"https://julialang.org/blog/2017/01/moredots/","text":"https://julialang.org/blog/2017/01/moredots/"}]}]}],"thread_ts":"1617268942.183300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"d481e828-5f2a-40ba-95ec-0d500c2f106d","type":"message","text":"All right, more dots. thanks!","user":"U01MG0TN079","ts":"1617269452.184400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"If8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"All right, more dots. thanks!"}]}]}],"thread_ts":"1617268942.183300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"420f7c06-ff46-4938-af80-50697f5203c8","type":"message","text":"btw the blog post is worth a read, but the short version is in\n```        v0 = v1 + k .* v2```\nfirst `k .* v2` is calculated which allocates an array for the result, then that result is added to `v1` , which allocates another array to hold that result, and then the variable `v0` is assigned to point to that last array. In\n```        v0 .= v1 .+ k .* v2```\nthe “dot fusion” discussed in the blog post means that the above is syntax for something like\n```for i in eachindex(v0)\n    v0[i] = v1[i] + k * v2[i]\nend```\nwhich doesn’t allocate any arrays.","user":"UCZ7VBGUD","ts":"1617269630.184800","team":"T68168MUP","edited":{"user":"UCZ7VBGUD","ts":"1617269654.000000"},"blocks":[{"type":"rich_text","block_id":"D9Sa3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"btw the blog post is worth a read, but the short version is in\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"        v0 = v1 + k .* v2"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"first "},{"type":"text","text":"k .* v2","style":{"code":true}},{"type":"text","text":" is calculated which allocates an array for the result, then that result is added to "},{"type":"text","text":"v1","style":{"code":true}},{"type":"text","text":" , which allocates another array to hold that result, and then the variable "},{"type":"text","text":"v0","style":{"code":true}},{"type":"text","text":" is assigned to point to that last array. In\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"        v0 .= v1 .+ k .* v2"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"the “dot fusion” discussed in the blog post means that the above is syntax for something like\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"for i in eachindex(v0)\n    v0[i] = v1[i] + k * v2[i]\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"which doesn’t allocate any arrays."}]}]}],"thread_ts":"1617268942.183300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"2f69c6ba-48dc-4d6d-bb1a-4d710df7ddec","type":"message","text":"Addition and multiplication of the elements themselves allocates","user":"U85R3JJ8L","ts":"1617269961.185100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VQs5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Addition and multiplication of the elements themselves allocates"}]}]}],"thread_ts":"1617268942.183300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"87343620-d1f8-4427-9fe6-63fd08727f97","type":"message","text":"I was just going to ask you about it!","user":"U01MG0TN079","ts":"1617270482.185300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j+4e","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I was just going to ask you about it!"}]}]}],"thread_ts":"1617268942.183300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"f57364c0-d00e-4b68-9ea6-2550cc2a8733","type":"message","text":"```julia&gt; v1 = K.([1,2]); v2 = K.([3,a]); v3 = K([4,5]); coeff = a\nsqrt(5)\n\njulia&gt; @time v1 = v2 .+ a .* v3\n  0.128840 seconds (200.04 k allocations: 12.162 MiB, 99.04% compilation time)\n2-element Vector{nf_elem}:\n 4*sqrt(5) + 28\n 5*sqrt(5) + 25\n\njulia&gt; ```","user":"U01MG0TN079","ts":"1617270636.185500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jPSs","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> v1 = K.([1,2]); v2 = K.([3,a]); v3 = K([4,5]); coeff = a\nsqrt(5)\n\njulia> @time v1 = v2 .+ a .* v3\n  0.128840 seconds (200.04 k allocations: 12.162 MiB, 99.04% compilation time)\n2-element Vector{nf_elem}:\n 4*sqrt(5) + 28\n 5*sqrt(5) + 25\n\njulia> "}]}]}],"thread_ts":"1617268942.183300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"5424671b-347a-4470-b666-7b4654605b65","type":"message","text":"I guess I can't do much here?","user":"U01MG0TN079","ts":"1617270643.185700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xHO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess I can't do much here?"}]}]}],"thread_ts":"1617268942.183300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"9f7d5b96-488f-44c8-9b43-26d811076a83","type":"message","text":"Write a loop and use `add!`, `mul!` (see <https://nemocas.github.io/AbstractAlgebra.jl/latest/rings/#Unsafe-operators>)","user":"U85R3JJ8L","ts":"1617270758.185900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ExzQ4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Write a loop and use "},{"type":"text","text":"add!","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"mul!","style":{"code":true}},{"type":"text","text":" (see "},{"type":"link","url":"https://nemocas.github.io/AbstractAlgebra.jl/latest/rings/#Unsafe-operators"},{"type":"text","text":")"}]}]}],"thread_ts":"1617268942.183300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"69c9fa0d-6bd3-42a6-9265-891dc166d7f6","type":"message","text":"(P.S.: Your timings are 99% compilation time)","user":"U85R3JJ8L","ts":"1617270849.186100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dwPM0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(P.S.: Your timings are 99% compilation time)"}]}]}],"thread_ts":"1617268942.183300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"b221cb0b-42e9-4797-a215-06b224641a50","type":"message","text":"are the allocs also dominated by compilation there?","user":"U01MG0TN079","ts":"1617271182.186300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s8YkW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"are the allocs also dominated by compilation there?"}]}]}],"thread_ts":"1617268942.183300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"167cee08-34f4-4732-a9df-eb6c8fd9b75a","type":"message","text":"Hm? You get so many allocations because your timings including compilation. Run again to see the real number of allocations.","user":"U85R3JJ8L","ts":"1617271518.186700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xgQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hm? You get so many allocations because your timings including compilation. Run again to see the real number of allocations."}]}]}],"thread_ts":"1617268942.183300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"aa275912-efbf-4857-9941-704a1b9efcc2","type":"message","text":"OK, that's what I was asking: I wasn't sure the 98% time spent on compilation also meant that allocations where dominated by what happens at compilation: I hoped the allocation numbers where cleaned from compile related allocs","user":"U01MG0TN079","ts":"1617271645.186900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZkNs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"OK, that's what I was asking: I wasn't sure the 98% time spent on compilation also meant that allocations where dominated by what happens at compilation: I hoped the allocation numbers where cleaned from compile related allocs"}]}]}],"thread_ts":"1617268942.183300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"fd03a618-10fc-4909-8209-27e3377b8cac","type":"message","text":"Ah, yes, both the time and allocations include compilations","user":"U85R3JJ8L","ts":"1617271681.187200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fT+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, yes, both the time and allocations include compilations"}]}]}],"thread_ts":"1617268942.183300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"968c9578-e153-452a-822d-2117aa52734f","type":"message","text":"```function u_plus_k_v(to,u,k,v)\n    @assert length(to) == length(u)\n    @assert length(to) == length(v)\n    @inbounds for i in 1:length(to)\n        mul!(to[i],k,v[i])\n        addeq!(to[i],u[i])\n    end\n    @info \"$to and $u + $k * $v\"\n    @assert to == u .+ k .* v\nend```","user":"U01MG0TN079","ts":"1617272231.187500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JId","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function u_plus_k_v(to,u,k,v)\n    @assert length(to) == length(u)\n    @assert length(to) == length(v)\n    @inbounds for i in 1:length(to)\n        mul!(to[i],k,v[i])\n        addeq!(to[i],u[i])\n    end\n    @info \"$to and $u + $k * $v\"\n    @assert to == u .+ k .* v\nend"}]}]}],"thread_ts":"1617268942.183300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"f08203fa-d49b-49a1-9057-da3daace87e4","type":"message","text":"Am I stupid? the assert fails sometimes","user":"U01MG0TN079","ts":"1617272244.187700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7HnD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Am I stupid? the assert fails sometimes"}]}]}],"thread_ts":"1617268942.183300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"7765f1cc-7f2d-4444-8ba2-79c8ea3eef89","type":"message","text":"I mean the last one","user":"U01MG0TN079","ts":"1617272326.187900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8QMt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean the last one"}]}]}],"thread_ts":"1617268942.183300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"efd24f56-0267-4ecc-8765-11f638b20291","type":"message","text":"It will fail if `to[1] === to[2]` for example","user":"U85R3JJ8L","ts":"1617272861.188100","team":"T68168MUP","edited":{"user":"U85R3JJ8L","ts":"1617272878.000000"},"blocks":[{"type":"rich_text","block_id":"FtJS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It will fail if "},{"type":"text","text":"to[1] === to[2]","style":{"code":true}},{"type":"text","text":" for example"}]}]}],"thread_ts":"1617268942.183300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"ef1dc994-a23b-464c-933d-131ccf6f8145","type":"message","text":"So, I should ensure `to`  is a nicely initialized vector then","user":"U01MG0TN079","ts":"1617272996.188400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bKXl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So, I should ensure "},{"type":"text","text":"to","style":{"code":true}},{"type":"text","text":"  is a nicely initialized vector then"}]}]}],"thread_ts":"1617268942.183300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"1718c541-def1-4d13-9be9-ac07705cebd9","type":"message","text":"is there a way to do that with nf_elem? only preallocate `to`  ?","user":"U01MG0TN079","ts":"1617273027.188600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Mjgn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is there a way to do that with nf_elem? only preallocate "},{"type":"text","text":"to","style":{"code":true}},{"type":"text","text":"  ?"}]}]}],"thread_ts":"1617268942.183300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"72bd125a-a61f-4b48-b269-1c37b4b8ea88","type":"message","text":"`deepcopy(v::Vector{nf_elem})` should give a vector without aliasing between the elements","user":"U85R3JJ8L","ts":"1617273179.188800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xrFV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"deepcopy(v::Vector{nf_elem})","style":{"code":true}},{"type":"text","text":" should give a vector without aliasing between the elements"}]}]}],"thread_ts":"1617268942.183300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"9c5af49d-2083-409f-995e-eef5d19432e0","type":"message","text":"Otherwise `[ zero(K) for i in 1:length(u)]` gives also the right thing","user":"U85R3JJ8L","ts":"1617273206.189000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"r4GGI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Otherwise "},{"type":"text","text":"[ zero(K) for i in 1:length(u)]","style":{"code":true}},{"type":"text","text":" gives also the right thing"}]}]}],"thread_ts":"1617268942.183300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"a18d7a3a-b810-42f4-9057-fea00ca3c2a2","type":"message","text":"`deepcopy` made it work it seems, thank you","user":"U01MG0TN079","ts":"1617273365.189200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jxc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"deepcopy","style":{"code":true}},{"type":"text","text":" made it work it seems, thank you"}]}]}],"thread_ts":"1617268942.183300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"d8f0ab7d-764d-4958-98e8-0234c0bb5a38","type":"message","text":"I hate to have to think about aliasing","user":"U01MG0TN079","ts":"1617273371.189400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ELR5f","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I hate to have to think about aliasing"}]}]}],"thread_ts":"1617268942.183300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"7ced74fa-2140-4af7-8260-33b1bb63c569","type":"message","text":"me too","user":"U85R3JJ8L","ts":"1617273425.189600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"odju7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"me too"}]}]}],"thread_ts":"1617268942.183300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"c40885a1-9eef-4d00-be60-bb79f9d0f382","type":"message","text":"Good, I divided allocations by two!","user":"U01MG0TN079","ts":"1617273426.189800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x5k","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Good, I divided allocations by two!"}]}]}],"thread_ts":"1617268942.183300","parent_user_id":"U01MG0TN079","reactions":[{"name":"+1","users":["U85R3JJ8L"],"count":1}]}]