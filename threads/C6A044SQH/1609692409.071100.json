[{"client_msg_id":"fa7ef337-fe0f-40eb-81dd-dad5690cb92a","type":"message","text":"is there a package that allows specifying extra axes, such as to tile (repeat) an array without allocations-\n```frame = randn(100, 100)\ncube = repeat(frame, 10, 1, 1) # output is (10, 100, 100), ten frames stacked\ncube_please_dont_allocate = # ??? something like @tileview frame[1:10, :, :]```","user":"UN97XTLCV","ts":"1609692409.071100","team":"T68168MUP","edited":{"user":"UN97XTLCV","ts":"1609692583.000000"},"blocks":[{"type":"rich_text","block_id":"6pv84","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is there a package that allows specifying extra axes, such as to tile (repeat) an array without allocations-\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"frame = randn(100, 100)\ncube = repeat(frame, 10, 1, 1) # output is (10, 100, 100), ten frames stacked\ncube_please_dont_allocate = # ??? something like @tileview frame[1:10, :, :]"}]}]}],"thread_ts":"1609692409.071100","reply_count":8,"reply_users_count":2,"latest_reply":"1609693981.074500","reply_users":["UD0NS8PDF","UN97XTLCV"],"subscribed":false},{"client_msg_id":"f3428b20-a979-4ba3-8273-ec5280b0ad59","type":"message","text":"LazyArrays does things like this, like broadcasting without allocating","user":"UD0NS8PDF","ts":"1609692650.071400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kHn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"LazyArrays does things like this, like broadcasting without allocating"}]}]}],"thread_ts":"1609692409.071100","parent_user_id":"UN97XTLCV"},{"client_msg_id":"c9362e90-337a-410f-9e80-e56fb77a25f8","type":"message","text":"Or perhaps:\n```julia&gt; using LazyStack\n\njulia&gt; stack(fill(frame, 10))\n100×100×10 stack(::Vector{Matrix{Float64}}) with eltype Float64:\n[:, :, 1] =\n -0.970932   -1.43115     -0.867529    0.0109865  …   1.43298    -1.20743      0.357922\n -0.20412    -0.630758    -2.68133     0.53558       -0.112687   -1.25977     -1.62172\n...```","user":"UD0NS8PDF","ts":"1609692782.071600","team":"T68168MUP","edited":{"user":"UD0NS8PDF","ts":"1609692803.000000"},"blocks":[{"type":"rich_text","block_id":"QgoKl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Or perhaps:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using LazyStack\n\njulia> stack(fill(frame, 10))\n100×100×10 stack(::Vector{Matrix{Float64}}) with eltype Float64:\n[:, :, 1] =\n -0.970932   -1.43115     -0.867529    0.0109865  …   1.43298    -1.20743      0.357922\n -0.20412    -0.630758    -2.68133     0.53558       -0.112687   -1.25977     -1.62172\n..."}]}]}],"thread_ts":"1609692409.071100","parent_user_id":"UN97XTLCV"},{"client_msg_id":"3334f1f5-8eeb-4c72-ade2-56fd5c46bfe6","type":"message","text":"I’m not sure they do exactly what I need (e.g. LazyStack example has the wrong dimension, i could permute I guess). I might just make a simple type inside my package but I wanted to see if anything like “TiledArrays.jl” existed!","user":"UN97XTLCV","ts":"1609693189.072300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lB=k","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’m not sure they do exactly what I need (e.g. LazyStack example has the wrong dimension, i could permute I guess). I might just make a simple type inside my package but I wanted to see if anything like “TiledArrays.jl” existed!"}]}]}],"thread_ts":"1609692409.071100","parent_user_id":"UN97XTLCV"},{"client_msg_id":"cde927de-f322-4179-bf66-fd2fa8af51d5","type":"message","text":"You just want dimensions in a different order, or some other kind of tiling?","user":"UD0NS8PDF","ts":"1609693251.072500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Hd1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You just want dimensions in a different order, or some other kind of tiling?"}]}]}],"thread_ts":"1609692409.071100","parent_user_id":"UN97XTLCV"},{"client_msg_id":"86eb9d13-35f1-4994-9efa-ebc3dd3662ec","type":"message","text":"The readme lists other packages some of which have options, I think JuliennedArrays takes dims… otherwise PermutedDimsArray is your friend.","user":"UD0NS8PDF","ts":"1609693318.072700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gLmw5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The readme lists other packages some of which have options, I think JuliennedArrays takes dims… otherwise PermutedDimsArray is your friend."}]}]}],"thread_ts":"1609692409.071100","parent_user_id":"UN97XTLCV"},{"client_msg_id":"7a11ac1c-4dbe-4ec7-bbde-3b48598ef60d","type":"message","text":"Although as you say it’s also simple to make one that does exactly what you want.","user":"UD0NS8PDF","ts":"1609693350.072900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AvDz+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Although as you say it’s also simple to make one that does exactly what you want."}]}]}],"thread_ts":"1609692409.071100","parent_user_id":"UN97XTLCV"},{"client_msg_id":"0b810b17-9a15-4bb0-8b77-6253771392d0","type":"message","text":"if I were to write it myself it would look just like this-\n```tiled = TiledArray(10, frame)\nfunction getindex(t::TiledArray, idxs...)\n    i, j, k = idxs\n    i in t.tilerange || error() # i in 1:10\n    return t.parent[j, k]\nend```\nessentially it ignores the dimension i’ve inserted on the left","user":"UN97XTLCV","ts":"1609693447.073300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RDN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if I were to write it myself it would look just like this-\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"tiled = TiledArray(10, frame)\nfunction getindex(t::TiledArray, idxs...)\n    i, j, k = idxs\n    i in t.tilerange || error() # i in 1:10\n    return t.parent[j, k]\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"essentially it ignores the dimension i’ve inserted on the left"}]}]}],"thread_ts":"1609692409.071100","parent_user_id":"UN97XTLCV"},{"client_msg_id":"4369595d-28c7-4233-9cfe-05d1b8481750","type":"message","text":"Yes. I think you could hook even more onto Base things, something like\n```@inbounds function getindex(t::TiledArray{N}, idxs::Vararg{&lt;:Integer,N}) where N\n    @boundscheck checkbounds(t, idxs...)\n    return @inbounds t.parent[Base.tail(idxs)...]\nend```\nshould make slicing &amp; CartesianIndices and all that work too.","user":"UD0NS8PDF","ts":"1609693981.074500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MW4T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes. I think you could hook even more onto Base things, something like\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@inbounds function getindex(t::TiledArray{N}, idxs::Vararg{<:Integer,N}) where N\n    @boundscheck checkbounds(t, idxs...)\n    return @inbounds t.parent[Base.tail(idxs)...]\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"should make slicing & CartesianIndices and all that work too."}]}]}],"thread_ts":"1609692409.071100","parent_user_id":"UN97XTLCV"}]