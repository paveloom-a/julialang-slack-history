[{"client_msg_id":"ddb43652-e418-4311-ac95-3aea5161063a","type":"message","text":"Say I have a type `Tuple{SVector{1000;Int},Int}` and an object `x=(vec,a)`  of this type and construct `y=(vec,a+1)` , I assume since `SVector` have known sizes, they, `x`  and `y`  won't share `vec` , right?","user":"U01MG0TN079","ts":"1613988093.120300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"awnA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Say I have a type "},{"type":"text","text":"Tuple{SVector{1000;Int},Int}","style":{"code":true}},{"type":"text","text":" and an object "},{"type":"text","text":"x=(vec,a)","style":{"code":true}},{"type":"text","text":"  of this type and construct "},{"type":"text","text":"y=(vec,a+1)","style":{"code":true}},{"type":"text","text":" , I assume since "},{"type":"text","text":"SVector","style":{"code":true}},{"type":"text","text":" have known sizes, they, "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":"  and "},{"type":"text","text":"y","style":{"code":true}},{"type":"text","text":"  won't share "},{"type":"text","text":"vec","style":{"code":true}},{"type":"text","text":" , right?"}]}]}],"thread_ts":"1613988093.120300","reply_count":9,"reply_users_count":3,"latest_reply":"1613990312.122600","reply_users":["B01J9QZ4SP8","UM30MT6RF","U01MG0TN079"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1613988095.120400","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1613988093.120300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"ce00fd7b-888f-43d8-a32e-3b425f9f63b2","type":"message","text":"Since `vec` is immutable, it is completely irrelevant whether `vec` is shared, that's simply an implementation detail. Semantically, there is no way to distinguish `vec` being shared or not.","user":"UM30MT6RF","ts":"1613988264.120600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3Y0L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Since "},{"type":"text","text":"vec","style":{"code":true}},{"type":"text","text":" is immutable, it is completely irrelevant whether "},{"type":"text","text":"vec","style":{"code":true}},{"type":"text","text":" is shared, that's simply an implementation detail. Semantically, there is no way to distinguish "},{"type":"text","text":"vec","style":{"code":true}},{"type":"text","text":" being shared or not."}]}]}],"thread_ts":"1613988093.120300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"e578f04f-9230-4ebb-bc13-c3b3942a0476","type":"message","text":"The question was related to memory usage","user":"U01MG0TN079","ts":"1613989017.121000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nEI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The question was related to memory usage"}]}]}],"thread_ts":"1613988093.120300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"449bf1fb-cc69-4fa1-a6d8-820377c17a4e","type":"message","text":"I mean, if the vectors are huge, and I have lots of them","user":"U01MG0TN079","ts":"1613989028.121200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W+7Xs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean, if the vectors are huge, and I have lots of them"}]}]}],"thread_ts":"1613988093.120300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"c33249eb-07f1-49da-92ad-3ca446b9c922","type":"message","text":"You generally want to avoid large `SVector`s, since this will cause excessive compilation and they often won't be able to be stack allocated anymore. Therefore I wouldn't be surprised if memory usage were a lot larger than you might have expected here.","user":"UM30MT6RF","ts":"1613989172.121600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"72of","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You generally want to avoid large `SVector`s, since this will cause excessive compilation and they often won't be able to be stack allocated anymore. Therefore I wouldn't be surprised if memory usage were a lot larger than you might have expected here."}]}]}],"thread_ts":"1613988093.120300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"51180473-485f-428e-9ea0-fb4b61f933cc","type":"message","text":"mmh, but up to size 20 should work without problem right?","user":"U01MG0TN079","ts":"1613989507.122000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oXz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"mmh, but up to size 20 should work without problem right?"}]}]}],"thread_ts":"1613988093.120300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"de2893dc-3bf7-40fb-9dd4-d98aa3c55260","type":"message","text":"Yeah, that should be fine","user":"UM30MT6RF","ts":"1613989527.122200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dseG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, that should be fine"}]}]}],"thread_ts":"1613988093.120300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"35ce9d35-4df7-4a1a-b66f-678d681e3cf9","type":"message","text":"The readme (<https://github.com/JuliaArrays/StaticArrays.jl#speed>) mentions 100 elements as a rule of thumb, although this might be a bit higher nowadays, since Julia's compiler is constantly improving. There's still a compile time tradeoff here though","user":"UM30MT6RF","ts":"1613989744.122400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vEoO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The readme ("},{"type":"link","url":"https://github.com/JuliaArrays/StaticArrays.jl#speed"},{"type":"text","text":") mentions 100 elements as a rule of thumb, although this might be a bit higher nowadays, since Julia's compiler is constantly improving. There's still a compile time tradeoff here though"}]}]}],"thread_ts":"1613988093.120300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"ebb4b10d-43ce-4731-9610-9aa579689cba","type":"message","text":"alright, thanks! I have a high memory use that I can't really figure out, and I thought a profusion of staticvectors might be the reason","user":"U01MG0TN079","ts":"1613990312.122600","team":"T68168MUP","edited":{"user":"U01MG0TN079","ts":"1613990350.000000"},"blocks":[{"type":"rich_text","block_id":"h8FE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"alright, thanks! I have a high memory use that I can't really figure out, and I thought a profusion of staticvectors might be the reason"}]}]}],"thread_ts":"1613988093.120300","parent_user_id":"U01MG0TN079"}]