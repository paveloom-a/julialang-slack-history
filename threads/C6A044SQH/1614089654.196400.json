[{"client_msg_id":"57d26734-700c-468c-9f34-2e120fa719e5","type":"message","text":"if I have a DataFrame and want to get `unique` columns but treat each column as a separate entity, what is the best way to do it?\nMATLAB has a convenience argument `unique(A(:,1:2),'rows')` (yuk!) ... but I can't find an equivalent way to do it in Julia","user":"U013V2CFZAN","ts":"1614089654.196400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Zw/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if I have a DataFrame and want to get "},{"type":"text","text":"unique","style":{"code":true}},{"type":"text","text":" columns but treat each column as a separate entity, what is the best way to do it?\nMATLAB has a convenience argument "},{"type":"text","text":"unique(A(:,1:2),'rows')","style":{"code":true}},{"type":"text","text":" (yuk!) ... but I can't find an equivalent way to do it in Julia"}]}]}],"thread_ts":"1614089654.196400","reply_count":8,"reply_users_count":4,"latest_reply":"1614093313.202600","reply_users":["B01J9QZ4SP8","U0179G7FG4F","U013V2CFZAN","UBF9YRB6H"],"subscribed":false,"reactions":[{"name":"bridge","users":["U013V2CFZAN"],"count":1}]},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1614089657.196500","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1614089654.196400","parent_user_id":"U013V2CFZAN"},{"type":"message","subtype":"bot_message","text":"Success, it has been cross posted <https://discourse.julialang.org/t/55852| to Discourse>. Keep and eye out on Discourse for responses and please add an answer there once you are satisfied with the solution so others can benefit as well. Happy debugging!","ts":"1614089673.196800","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1614089654.196400","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"48f61df8-b7c5-45c7-930f-5b525fc8fcf7","type":"message","text":"does u`nique(eachcol(A))` work?","user":"U0179G7FG4F","ts":"1614089779.197000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"F5dI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"does u"},{"type":"text","text":"nique(eachcol(A))","style":{"code":true}},{"type":"text","text":" work?"}]}]}],"thread_ts":"1614089654.196400","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"05bb2264-7a7c-4ab9-bba4-6f954c1e4d5a","type":"message","text":"well, that returns the unique values per column for sure, but it's not a `DataFrame` anymore","user":"U013V2CFZAN","ts":"1614089887.197200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+wv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well, that returns the unique values per column for sure, but it's not a "},{"type":"text","text":"DataFrame","style":{"code":true}},{"type":"text","text":" anymore"}]}]}],"thread_ts":"1614089654.196400","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"a79b54f4-c13b-4299-84a6-4f6691cadac5","type":"message","text":"`DataFrames.jl`  overloads unique and such that `unique(df, [:col1, :col2])` works out of the box, but finds unique to both columns","user":"U013V2CFZAN","ts":"1614090164.197400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2mlO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"DataFrames.jl","style":{"code":true}},{"type":"text","text":"  overloads unique and such that "},{"type":"text","text":"unique(df, [:col1, :col2])","style":{"code":true}},{"type":"text","text":" works out of the box, but finds unique to both columns"}]}]}],"thread_ts":"1614089654.196400","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"d9660d85-ac83-4588-8797-eca0b90d669e","type":"message","text":"`unique` in DataFrames works by row. You could do\n\n```julia&gt; using DataFrames\n\njulia&gt; df = DataFrame(a = [1, 2], b = [3, 4], c = [1, 2]);\n\njulia&gt; unique_cols = unique(i -&gt; i[2], pairs(eachcol(df)))\n2-element Array{Pair{Symbol,AbstractArray{T,1} where T},1}:\n :a =&gt; [1, 2]\n :b =&gt; [3, 4]\n\njulia&gt; DataFrame(unique_cols)\n2×2 DataFrame\n Row │ a      b     \n     │ Int64  Int64 \n─────┼──────────────\n   1 │     1      3\n   2 │     2      4```\n`unique` has a version which applies a function to each element of the iterator and finds unique inputs for after the function has been applied.\n\n`pairs(eachcol(df))` is an iterator of `colname =&gt; vector` pairs.\n\nYou apply the function `i -&gt; i[2]` to each of these `colname =&gt; vector` pairs because you only want to compare the vectors. Obviously each column has a unique name.\n\nyou are left with a vector of pairs. The `DataFrame` constructor can work with a vector of `colname =&gt; vector` pairs. And you are done","user":"UBF9YRB6H","ts":"1614091069.199200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3bP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"unique","style":{"code":true}},{"type":"text","text":" in DataFrames works by row. You could do\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using DataFrames\n\njulia> df = DataFrame(a = [1, 2], b = [3, 4], c = [1, 2]);\n\njulia> unique_cols = unique(i -> i[2], pairs(eachcol(df)))\n2-element Array{Pair{Symbol,AbstractArray{T,1} where T},1}:\n :a => [1, 2]\n :b => [3, 4]\n\njulia> DataFrame(unique_cols)\n2×2 DataFrame\n Row │ a      b     \n     │ Int64  Int64 \n─────┼──────────────\n   1 │     1      3\n   2 │     2      4"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n"},{"type":"text","text":"unique","style":{"code":true}},{"type":"text","text":" has a version which applies a function to each element of the iterator and finds unique inputs for after the function has been applied.\n\n"},{"type":"text","text":"pairs(eachcol(df))","style":{"code":true}},{"type":"text","text":" is an iterator of "},{"type":"text","text":"colname => vector","style":{"code":true}},{"type":"text","text":" pairs.\n\nYou apply the function "},{"type":"text","text":"i -> i[2]","style":{"code":true}},{"type":"text","text":" to each of these "},{"type":"text","text":"colname => vector","style":{"code":true}},{"type":"text","text":" pairs because you only want to compare the vectors. Obviously each column has a unique name.\n\nyou are left with a vector of pairs. The "},{"type":"text","text":"DataFrame","style":{"code":true}},{"type":"text","text":" constructor can work with a vector of "},{"type":"text","text":"colname => vector","style":{"code":true}},{"type":"text","text":" pairs. And you are done"}]}]}],"thread_ts":"1614089654.196400","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"2ab765a8-65ff-4a78-af24-5ce524d244fe","type":"message","text":"oh yes! this seams to work as expected!","user":"U013V2CFZAN","ts":"1614093270.202400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oSJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh yes! this seams to work as expected!"}]}]}],"thread_ts":"1614089654.196400","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"48591b3c-8444-43c8-b3ca-52a142f5feb4","type":"message","text":"thanks!","user":"U013V2CFZAN","ts":"1614093313.202600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"r22","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thanks!"}]}]}],"thread_ts":"1614089654.196400","parent_user_id":"U013V2CFZAN"}]