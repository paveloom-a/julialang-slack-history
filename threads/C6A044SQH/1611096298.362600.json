[{"client_msg_id":"f695bcb0-579d-43f8-b078-c0bf39e6e95a","type":"message","text":"What magic does `sum` have going on behind the scenes that makes it over 100x faster than a for loop?\n```julia&gt; a = rand(0.0:1.0, 1, 100_000_000)\n1×100000000 Array{Float64,2}:\n 1.0  1.0  1.0  1.0  0.0  0.0  1.0  0.0  0.0  0.0  1.0  …  0.0  0.0  1.0  1.0  0.0  1.0  0.0  1.0  0.0  0.0\n\njulia&gt; @time sum(a)\n  0.062152 seconds (1 allocation: 16 bytes)\n4.9998764e7\n\njulia&gt; @time for v in a\n       acc += v\n       end\n 10.548050 seconds (400.00 M allocations: 7.451 GiB, 5.47% gc time)```\n","user":"U01J4FNA52A","ts":"1611096298.362600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ad8q1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What magic does "},{"type":"text","text":"sum","style":{"code":true}},{"type":"text","text":" have going on behind the scenes that makes it over 100x faster than a for loop?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> a = rand(0.0:1.0, 1, 100_000_000)\n1×100000000 Array{Float64,2}:\n 1.0  1.0  1.0  1.0  0.0  0.0  1.0  0.0  0.0  0.0  1.0  …  0.0  0.0  1.0  1.0  0.0  1.0  0.0  1.0  0.0  0.0\n\njulia> @time sum(a)\n  0.062152 seconds (1 allocation: 16 bytes)\n4.9998764e7\n\njulia> @time for v in a\n       acc += v\n       end\n 10.548050 seconds (400.00 M allocations: 7.451 GiB, 5.47% gc time)"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1611096298.362600","reply_count":20,"reply_users_count":5,"latest_reply":"1611097416.370000","reply_users":["U0179G7FG4F","U01FAHWCMFF","U6N6VQE30","U01J4FNA52A","UPKUR1KHB"],"subscribed":false},{"client_msg_id":"35df67d5-312e-467f-98a6-10a16ab23ace","type":"message","text":"your second benchmark is in the global scope writing\n```function mysum(x)\n    acc=0\n    for v in a\n        acc += v\n    end\n    acc\nend```\nshould give similar results","user":"U0179G7FG4F","ts":"1611096405.362700","team":"T68168MUP","edited":{"user":"U0179G7FG4F","ts":"1611096462.000000"},"blocks":[{"type":"rich_text","block_id":"5Rc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"your second benchmark is in the global scope writing\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function mysum(x)\n    acc=0\n    for v in a\n        acc += v\n    end\n    acc\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"should give similar results"}]}]}],"thread_ts":"1611096298.362600","parent_user_id":"U01J4FNA52A","reactions":[{"name":"+1","users":["U01FAHWCMFF","UBXR3RFNH"],"count":2}]},{"client_msg_id":"84c9d6ee-0138-49e2-b2ba-050cfab5e377","type":"message","text":"When in doubt when it comes to comparing performance look at allocations.","user":"U01FAHWCMFF","ts":"1611096464.363300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qk=rX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"When in doubt when it comes to comparing performance look at allocations."}]}]}],"thread_ts":"1611096298.362600","parent_user_id":"U01J4FNA52A"},{"client_msg_id":"091423c8-8b44-41f4-ac52-e5edec6dc16e","type":"message","text":"And the next piece of magic is that it enables vectorization by default iirc","user":"U6N6VQE30","ts":"1611096708.364100","team":"T68168MUP","edited":{"user":"U6N6VQE30","ts":"1611096715.000000"},"blocks":[{"type":"rich_text","block_id":"aBS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And the next piece of magic is that it enables vectorization by default iirc"}]}]}],"thread_ts":"1611096298.362600","parent_user_id":"U01J4FNA52A","reactions":[{"name":"100","users":["U01J4FNA52A"],"count":1}]},{"client_msg_id":"90afeb4d-2a76-45d1-ba38-e4be44ccd730","type":"message","text":"Why does the global scope matter <@U0179G7FG4F> and is there an easy way to put `acc` in the global scope but still get good performance?","user":"U01J4FNA52A","ts":"1611096760.364600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C5L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Why does the global scope matter "},{"type":"user","user_id":"U0179G7FG4F"},{"type":"text","text":" and is there an easy way to put "},{"type":"text","text":"acc","style":{"code":true}},{"type":"text","text":" in the global scope but still get good performance?"}]}]}],"thread_ts":"1611096298.362600","parent_user_id":"U01J4FNA52A"},{"client_msg_id":"216b4994-e1d2-4113-87e4-caf0a44fe441","type":"message","text":"the problem is that in the global scope anything can change types at any time. Most of Julia's performance is based around the concept of \"type stability\" which is the idea that within functions it is easy to check that a variable's type never changes.","user":"U0179G7FG4F","ts":"1611096899.365100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lRHd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the problem is that in the global scope anything can change types at any time. Most of Julia's performance is based around the concept of \"type stability\" which is the idea that within functions it is easy to check that a variable's type never changes."}]}]}],"thread_ts":"1611096298.362600","parent_user_id":"U01J4FNA52A"},{"client_msg_id":"c665e640-ad2f-497a-b43b-6713fcec1df9","type":"message","text":"Btw, oscar's code should do acc = zero(eltype(x))","user":"U6N6VQE30","ts":"1611096902.365300","team":"T68168MUP","edited":{"user":"U6N6VQE30","ts":"1611096917.000000"},"blocks":[{"type":"rich_text","block_id":"Nus","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Btw, oscar's code should do acc = zero(eltype(x))"}]}]}],"thread_ts":"1611096298.362600","parent_user_id":"U01J4FNA52A"},{"client_msg_id":"ce6b8336-c78a-4e26-b0e7-adb0f952cdc7","type":"message","text":"technichally that would be slightly better, but I was going for the easiest to read for someone new to Julia","user":"U0179G7FG4F","ts":"1611096961.365600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qRE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"technichally that would be slightly better, but I was going for the easiest to read for someone new to Julia"}]}]}],"thread_ts":"1611096298.362600","parent_user_id":"U01J4FNA52A"},{"client_msg_id":"fff52e19-91d8-4f93-83a7-95cfac710136","type":"message","text":"or, 0.0 then :p","user":"U6N6VQE30","ts":"1611096976.365800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VQBTN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or, 0.0 then :p"}]}]}],"thread_ts":"1611096298.362600","parent_user_id":"U01J4FNA52A","reactions":[{"name":"+1","users":["U0179G7FG4F"],"count":1}]},{"client_msg_id":"1094f75e-ea8e-4175-848b-4972e732cee9","type":"message","text":"I understand, is there a way to tell Julia `acc`s type won't change?","user":"U01J4FNA52A","ts":"1611096998.366100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"o28","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I understand, is there a way to tell Julia "},{"type":"text","text":"acc","style":{"code":true}},{"type":"text","text":"s type won't change?"}]}]}],"thread_ts":"1611096298.362600","parent_user_id":"U01J4FNA52A"},{"client_msg_id":"15b142a0-dd0d-4fda-ab25-453bd815fc1d","type":"message","text":"you can get almost all of the benefit if you just use write `acc=mysum(x)`.","user":"U0179G7FG4F","ts":"1611097055.366500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Pgq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can get almost all of the benefit if you just use write "},{"type":"text","text":"acc=mysum(x)","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1611096298.362600","parent_user_id":"U01J4FNA52A"},{"client_msg_id":"96cbe11c-d2e1-4a49-beb1-b043662e059a","type":"message","text":"Ok, let me rephrase my problem","user":"U01J4FNA52A","ts":"1611097112.366700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8vup","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok, let me rephrase my problem"}]}]}],"thread_ts":"1611096298.362600","parent_user_id":"U01J4FNA52A"},{"client_msg_id":"b8301615-9bc9-4653-9d2d-f986ca09ca94","type":"message","text":"I'm using Julia's C API to call a Julia function on every row of a table","user":"U01J4FNA52A","ts":"1611097154.367100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XDha7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm using Julia's C API to call a Julia function on every row of a table"}]}]}],"thread_ts":"1611096298.362600","parent_user_id":"U01J4FNA52A"},{"client_msg_id":"7539ee7b-baa3-4369-863c-ef653005dbee","type":"message","text":"My program's input is:\n```sum = 0\nfunction scan(ts::Int64, close::Float32)\n  global sum += ts\nend```\nbut it could be anything really","user":"U01J4FNA52A","ts":"1611097189.367300","team":"T68168MUP","edited":{"user":"U01J4FNA52A","ts":"1611097237.000000"},"blocks":[{"type":"rich_text","block_id":"okQn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My program's input is:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"sum = 0\nfunction scan(ts::Int64, close::Float32)\n  global sum += ts\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"but it could be anything really"}]}]}],"thread_ts":"1611096298.362600","parent_user_id":"U01J4FNA52A"},{"client_msg_id":"f2b79745-6e43-48ca-b498-fab921c8cad9","type":"message","text":"<@U6N6VQE30> is exactly right, if you replace your `for` loop with a `@simd for` then you should see identical performance to built-in `sum`","user":"UPKUR1KHB","ts":"1611097199.367500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xLC","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U6N6VQE30"},{"type":"text","text":" is exactly right, if you replace your "},{"type":"text","text":"for","style":{"code":true}},{"type":"text","text":" loop with a "},{"type":"text","text":"@simd for","style":{"code":true}},{"type":"text","text":" then you should see identical performance to built-in "},{"type":"text","text":"sum","style":{"code":true}}]}]}],"thread_ts":"1611096298.362600","parent_user_id":"U01J4FNA52A"},{"client_msg_id":"a0f10626-a6f8-45b7-ae55-91d58009561b","type":"message","text":"Julia is currently missing the ability to put manual type declarations on globals. It really should exist but currently doesn't. (if it did, the syntax would be `acc::Float64`","user":"U0179G7FG4F","ts":"1611097263.367800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LQZ+v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Julia is currently missing the ability to put manual type declarations on globals. It really should exist but currently doesn't. (if it did, the syntax would be "},{"type":"text","text":"acc::Float64","style":{"code":true}}]}]}],"thread_ts":"1611096298.362600","parent_user_id":"U01J4FNA52A"},{"client_msg_id":"eb3e00a4-8f88-4aa3-bc8b-1c09885ac14b","type":"message","text":"Ah, okay. Then to run my `scan` faster I need to just use the accumulator as the first parameter and let the user define that as well -- thanks!","user":"U01J4FNA52A","ts":"1611097324.368300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6oOof","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, okay. Then to run my "},{"type":"text","text":"scan","style":{"code":true}},{"type":"text","text":" faster I need to just use the accumulator as the first parameter and let the user define that as well -- thanks!"}]}]}],"thread_ts":"1611096298.362600","parent_user_id":"U01J4FNA52A","reactions":[{"name":"+1","users":["U0179G7FG4F"],"count":1}]},{"client_msg_id":"20af3e58-6819-4f45-9f36-ea72e4669354","type":"message","text":"Thanks <@UPKUR1KHB>, <@U6N6VQE30>, and <@U0179G7FG4F>, you guys have a great community going on here!","user":"U01J4FNA52A","ts":"1611097393.369200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mmSX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks "},{"type":"user","user_id":"UPKUR1KHB"},{"type":"text","text":", "},{"type":"user","user_id":"U6N6VQE30"},{"type":"text","text":", and "},{"type":"user","user_id":"U0179G7FG4F"},{"type":"text","text":", you guys have a great community going on here!"}]}]}],"thread_ts":"1611096298.362600","parent_user_id":"U01J4FNA52A"},{"client_msg_id":"619ea2f6-0215-45d5-818a-d0e8fe079c60","type":"message","text":"yep! my understanding is that Julia does type deduction at the level of function calls, so if you have code you want to be fast, you should put it inside of a function (that doesn't reference external things)","user":"UPKUR1KHB","ts":"1611097410.369400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9xmgd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yep! my understanding is that Julia does type deduction at the level of function calls, so if you have code you want to be fast, you should put it inside of a function (that doesn't reference external things)"}]}]}],"thread_ts":"1611096298.362600","parent_user_id":"U01J4FNA52A","reactions":[{"name":"100","users":["UH24GRBLL"],"count":1}]},{"client_msg_id":"eb9a48ee-61cf-4e3c-8eb9-0450fe1a404b","type":"message","text":"we do our best :slightly_smiling_face:","user":"U0179G7FG4F","ts":"1611097412.369600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tUm/7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we do our best "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1611096298.362600","parent_user_id":"U01J4FNA52A"},{"client_msg_id":"69a87aad-96a6-4e89-b801-af49f135c2ea","type":"message","text":"no problem, glad we could help!","user":"UPKUR1KHB","ts":"1611097416.370000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"udK=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no problem, glad we could help!"}]}]}],"thread_ts":"1611096298.362600","parent_user_id":"U01J4FNA52A"}]