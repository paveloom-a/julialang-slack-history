[{"client_msg_id":"ee8a0162-fe67-4bec-b74a-4790f6acd5d0","type":"message","text":"This line almost does what I want:\n```@btime train_df = CSV.read(\"./data/train.csv\", DataFrame, types=types)```\ni.e. it prints `14.624 s (1372 allocations: 5.36 GiB)` and returns `101,230,332 rows × 10 columns` . *However*, it doesn’t seem to define train_df!\n```digitsep(nrow(train_df))\nUndefVarError: train_df not defined```\nAny way to get it all? I want time, allocations, and the line working as it usually would.","user":"U01CQTKB86N","ts":"1608648489.252900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zplX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This line almost does what I want:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@btime train_df = CSV.read(\"./data/train.csv\", DataFrame, types=types)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"i.e. it prints "},{"type":"text","text":"14.624 s (1372 allocations: 5.36 GiB)","style":{"code":true}},{"type":"text","text":" and returns "},{"type":"text","text":"101,230,332 rows × 10 columns","style":{"code":true}},{"type":"text","text":" . "},{"type":"text","text":"However","style":{"bold":true}},{"type":"text","text":", it doesn’t seem to define train_df!\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"digitsep(nrow(train_df))\nUndefVarError: train_df not defined"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Any way to get it all? I want time, allocations, and the line working as it usually would."}]}]}],"thread_ts":"1608648489.252900","reply_count":2,"reply_users_count":2,"latest_reply":"1608649405.253900","reply_users":["U017YGFQTE3","U01CQTKB86N"],"subscribed":false},{"client_msg_id":"7f603a7c-c767-4dda-86ef-ffc940fb43d4","type":"message","text":"Just use `@time` instead of `@btime`. Note that `@time` will include compilation time on the first run of the function, so its not intended for benchmarking.","user":"U017YGFQTE3","ts":"1608648892.253300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HOrc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Just use "},{"type":"text","text":"@time","style":{"code":true}},{"type":"text","text":" instead of "},{"type":"text","text":"@btime","style":{"code":true}},{"type":"text","text":". Note that "},{"type":"text","text":"@time","style":{"code":true}},{"type":"text","text":" will include compilation time on the first run of the function, so its not intended for benchmarking."}]}]}],"thread_ts":"1608648489.252900","parent_user_id":"U01CQTKB86N"},{"client_msg_id":"6b127066-0887-4967-8692-68f535cbaeac","type":"message","text":"Right, it seems more appropriate for the purpose I’m using it. Interestingly either of these lines work:\n```train_df = @btime CSV.read(\"./data/train.csv\", DataFrame, types=types)\n\n@time train_df = CSV.read(\"./data/train.csv\", DataFrame, types=types)```\nThere’s some difference in the macros apparently.","user":"U01CQTKB86N","ts":"1608649405.253900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zDZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Right, it seems more appropriate for the purpose I’m using it. Interestingly either of these lines work:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"train_df = @btime CSV.read(\"./data/train.csv\", DataFrame, types=types)\n\n@time train_df = CSV.read(\"./data/train.csv\", DataFrame, types=types)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"There’s some difference in the macros apparently."}]}]}],"thread_ts":"1608648489.252900","parent_user_id":"U01CQTKB86N"}]