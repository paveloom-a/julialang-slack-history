[{"client_msg_id":"ce4fc08c-64e3-4e4c-a814-812dcaecb57d","type":"message","text":"How do apply the *same dispatch pattern to multiple methods*? In this example I am avoiding having to define methods for `f`  and `g` individually by awkwardly sub-typing `Function` . This leads to method overwrite warnings when I put this into my module.\n```struct Integrand &lt;: Function end\n\nconst f = Integrand()\nfunction f( x::T ) where T&lt;:Number\n\treturn x^2 - x\nend\n\nconst g = Integrand() \nfunction g( x::T ) where T&lt;:Number\n\treturn - log(x) + sin(x)\nend\n\n# this method applies to both f and g\nfunction (integrand::Integrand)( X::AbstractVector; dx=0.01 )\n\treturn sum( x -&gt; integrand(x)*dx, X )\nend```\nWhat is the recommended way to do this?","user":"UMAJCM1DF","ts":"1607941658.488200","team":"T68168MUP","edited":{"user":"UMAJCM1DF","ts":"1607942153.000000"},"blocks":[{"type":"rich_text","block_id":"T8xC0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How do apply the "},{"type":"text","text":"same dispatch pattern to multiple methods","style":{"bold":true}},{"type":"text","text":"? In this example I am avoiding having to define methods for "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":"  and "},{"type":"text","text":"g","style":{"code":true}},{"type":"text","text":" individually by awkwardly sub-typing "},{"type":"text","text":"Function","style":{"code":true}},{"type":"text","text":" . This leads to method overwrite warnings when I put this into my module.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct Integrand <: Function end\n\nconst f = Integrand()\nfunction f( x::T ) where T<:Number\n\treturn x^2 - x\nend\n\nconst g = Integrand() \nfunction g( x::T ) where T<:Number\n\treturn - log(x) + sin(x)\nend\n\n# this method applies to both f and g\nfunction (integrand::Integrand)( X::AbstractVector; dx=0.01 )\n\treturn sum( x -> integrand(x)*dx, X )\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"What is the recommended way to do this?"}]}]}],"thread_ts":"1607941658.488200","reply_count":34,"reply_users_count":3,"latest_reply":"1607957645.007300","reply_users":["UH24GRBLL","UMAJCM1DF","UTHKW0GSH"],"subscribed":false},{"client_msg_id":"2cf183b6-ed03-4747-bc8a-e69c11e46716","type":"message","text":"if the types of `f` and `g` are the same, there's no way to distinguish them in dispatch, no matter the subtyping.","user":"UH24GRBLL","ts":"1607941821.488500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ylBHq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if the types of "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"g","style":{"code":true}},{"type":"text","text":" are the same, there's no way to distinguish them in dispatch, no matter the subtyping."}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"a9ccd7f1-2e4a-4b29-af81-849c54ed34f9","type":"message","text":"so in principle `g` and `f` are not the same","user":"UMAJCM1DF","ts":"1607942106.488900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6bGRS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so in principle "},{"type":"text","text":"g","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" are not the same"}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"8018e985-c385-4795-811c-46298fbef8ef","type":"message","text":"they could be different functions of `x::Number`","user":"UMAJCM1DF","ts":"1607942129.489100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TMAHf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"they could be different functions of "},{"type":"text","text":"x::Number","style":{"code":true}}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"0ab89625-a80b-42d6-a93a-0cf19d9a242e","type":"message","text":"so what I asking is","user":"UMAJCM1DF","ts":"1607943163.489800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EI6q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so what I asking is"}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"32fc38d4-03c2-4877-8d5e-a030f0a27be8","type":"message","text":"is this\n```function (integrand::Integrand)( X::AbstractVector; dx=0.01 )\n\treturn sum( x -&gt; integrand(x)*dx, X )\nend```\na good replacement for this\n```function f( X::AbstractVector; dx=0.01 )\n\treturn sum( x -&gt; f(x)*dx, X )\nend\n\nfunction g( X::AbstractVector; dx=0.01 )\n\treturn sum( x -&gt; g(x)*dx, X )\nend```","user":"UMAJCM1DF","ts":"1607943211.490000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sXul","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is this\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function (integrand::Integrand)( X::AbstractVector; dx=0.01 )\n\treturn sum( x -> integrand(x)*dx, X )\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"a good replacement for this\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function f( X::AbstractVector; dx=0.01 )\n\treturn sum( x -> f(x)*dx, X )\nend\n\nfunction g( X::AbstractVector; dx=0.01 )\n\treturn sum( x -> g(x)*dx, X )\nend"}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"91d2712e-112f-43ff-9118-330b6c07c315","type":"message","text":"`g` and `f` are different instances, but they are the same _type_","user":"UH24GRBLL","ts":"1607943620.490300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Zwd1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"g","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" are different instances, but they are the same "},{"type":"text","text":"type","style":{"italic":true}}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"8e4797b5-1aa7-48b5-b897-89aca08f295b","type":"message","text":"you can't dispatch on different instances.","user":"UH24GRBLL","ts":"1607943628.490500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GuMEM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can't dispatch on different instances."}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"912c9cdb-ddcf-4dd8-8370-7967d06038cd","type":"message","text":"the two examples are equivalent, except that in the second one you're overwriting the already existing definition","user":"UH24GRBLL","ts":"1607943917.490700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qmHu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the two examples are equivalent, except that in the second one you're overwriting the already existing definition"}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"fc958fb8-520d-4780-a729-ea386661ff4e","type":"message","text":"what are you actually trying to accomplish? why not just pass the function as a variable into integrand()?\n```function integrand(f::Function, X::AbstractVector; dx=0.01)```","user":"UTHKW0GSH","ts":"1607946904.493200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3JRJc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what are you actually trying to accomplish? why not just pass the function as a variable into integrand()?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function integrand(f::Function, X::AbstractVector; dx=0.01)"}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"7ff2fcb1-0841-4174-b4f2-6e28806ebbf5","type":"message","text":"(not specialising on the `Function` argument is better here btw)","user":"UH24GRBLL","ts":"1607947103.493400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QQs01","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(not specialising on the "},{"type":"text","text":"Function","style":{"code":true}},{"type":"text","text":" argument is better here btw)"}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"15ae6c24-7dbb-4455-86d4-ee978487e0ef","type":"message","text":"I guess I was trying to use calls like this `g(X::AbstractVector)` where `g(x) = x^2` rather than `integrand(x-&gt;x^2, X)`","user":"UMAJCM1DF","ts":"1607947112.493600","team":"T68168MUP","edited":{"user":"UMAJCM1DF","ts":"1607947122.000000"},"blocks":[{"type":"rich_text","block_id":"rfRqz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess I was trying to use calls like this "},{"type":"text","text":"g(X::AbstractVector)","style":{"code":true}},{"type":"text","text":" where "},{"type":"text","text":"g(x) = x^2","style":{"code":true}},{"type":"text","text":" rather than "},{"type":"text","text":"integrand(x->x^2, X)","style":{"code":true}}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"a9f5dd77-7b7c-4932-820f-bcf270b9c8cb","type":"message","text":"but <@UTHKW0GSH> solution works for me too","user":"UMAJCM1DF","ts":"1607947151.493900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gmuP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but "},{"type":"user","user_id":"UTHKW0GSH"},{"type":"text","text":" solution works for me too"}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"25f7c636-c564-45d7-b2ff-ff0715d23376","type":"message","text":"you can still pass `g` around like: `integrand(g, X)`","user":"UTHKW0GSH","ts":"1607947211.494700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Jczd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can still pass "},{"type":"text","text":"g","style":{"code":true}},{"type":"text","text":" around like: "},{"type":"text","text":"integrand(g, X)","style":{"code":true}}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"b706a55f-60f8-4ff0-bc41-591acba5ae88","type":"message","text":"yes that makes sense","user":"UMAJCM1DF","ts":"1607947254.494900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sgxOT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes that makes sense"}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"9db23fde-52b6-4e39-80a6-2f9c202bcf41","type":"message","text":"thanks! It's taking me a while to get the hang of dispatch :sweat_smile:","user":"UMAJCM1DF","ts":"1607947283.495100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"M=ML","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thanks! It's taking me a while to get the hang of dispatch "},{"type":"emoji","name":"sweat_smile"}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"9eda2405-7b9e-44a4-8b0e-eba34041e189","type":"message","text":"ok, cool. you just need to realize functions are first-class citizens I guess","user":"UTHKW0GSH","ts":"1607947305.495300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KLp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ok, cool. you just need to realize functions are first-class citizens I guess"}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"f55aa246-17ed-4e34-887e-62c947bbba82","type":"message","text":"what do you mean by first class?","user":"UMAJCM1DF","ts":"1607947324.495500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8lI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what do you mean by first class?"}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"0ec4501f-68a8-4e78-be8d-894f4de8e462","type":"message","text":"like, no different than other types","user":"UTHKW0GSH","ts":"1607947335.495700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ivao","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"like, no different than other types"}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"53725370-d5e2-48c8-9c0c-2fcca98f8b23","type":"message","text":"g is just a type of Function in your example","user":"UTHKW0GSH","ts":"1607947354.495900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cfW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"g is just a type of Function in your example"}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"f904f3e2-1611-48d9-8934-098d8bf78d24","type":"message","text":"ahh yes","user":"UMAJCM1DF","ts":"1607947364.496100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QrV5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ahh yes"}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"36cc3163-a126-471e-8344-fdf5ddccbccb","type":"message","text":"are all methods of type `Function` ?","user":"UMAJCM1DF","ts":"1607947443.496700","team":"T68168MUP","edited":{"user":"UMAJCM1DF","ts":"1607947451.000000"},"blocks":[{"type":"rich_text","block_id":"5bgn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"are all methods of type "},{"type":"text","text":"Function","style":{"code":true}},{"type":"text","text":" ?"}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"9b07e37f-cc04-4dad-bfda-dd32570da28b","type":"message","text":"In my brain I feel like the default method definition is this\n```function something( args... ) &lt;: Function\n\treturn ...\nend```","user":"UMAJCM1DF","ts":"1607947555.497000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kdAd/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In my brain I feel like the default method definition is this\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function something( args... ) <: Function\n\treturn ...\nend"}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"d44e159f-473c-4f67-b2bb-bca092fcd048","type":"message","text":"and I want to organise my methods in sub-types\n```function something( args... ) &lt;: Gradient\n\treturn ...\nend\n\nfunction something( args... ) &lt;: Integrand\n\treturn ...\nend```","user":"UMAJCM1DF","ts":"1607947609.497200","team":"T68168MUP","edited":{"user":"UMAJCM1DF","ts":"1607947909.000000"},"blocks":[{"type":"rich_text","block_id":"NzO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and I want to organise my methods in sub-types\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function something( args... ) <: Gradient\n\treturn ...\nend\n\nfunction something( args... ) <: Integrand\n\treturn ...\nend"}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"07d75fa2-944c-40cf-80f7-ebee38a213b6","type":"message","text":"but I guess I shouldn't be thinking like that in Julia","user":"UMAJCM1DF","ts":"1607947624.497400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"54Vf3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but I guess I shouldn't be thinking like that in Julia"}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"a8673900-779a-438a-ac70-501fbaf931c2","type":"message","text":"but if this were allowed I can then reference a method and its signature as one name. suppose I want to define `integrand(f::Function ...)`  but want to produce the method not defined error if `f` is not R-&gt;R","user":"UMAJCM1DF","ts":"1607947808.497700","team":"T68168MUP","edited":{"user":"UMAJCM1DF","ts":"1607947998.000000"},"blocks":[{"type":"rich_text","block_id":"C77Z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but if this were allowed I can then reference a method and its signature as one name. suppose I want to define "},{"type":"text","text":"integrand(f::Function ...)","style":{"code":true}},{"type":"text","text":"  but want to produce the method not defined error if "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" is not R->R"}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"b83924a1-70d3-4d66-987d-b0f525328c9e","type":"message","text":"then I would define `integrand(f::Integrand ...)`","user":"UMAJCM1DF","ts":"1607947864.498000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gGRRL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"then I would define "},{"type":"text","text":"integrand(f::Integrand ...)","style":{"code":true}}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"9f509f56-0651-4ecf-bfb3-67a98bdd02b6","type":"message","text":"not everything that supports the call syntax (`f(arg1, arg2, ...)`)  is `&lt;: Function`, no","user":"UH24GRBLL","ts":"1607949210.001400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0aRG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not everything that supports the call syntax ("},{"type":"text","text":"f(arg1, arg2, ...)","style":{"code":true}},{"type":"text","text":")  is "},{"type":"text","text":"<: Function","style":{"code":true}},{"type":"text","text":", no"}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"37549ec6-aa4a-4bd9-89fa-cde6cca508e6","type":"message","text":"you can definitely organise your code as subtypes of `Gradient` and `Integrand`, just be aware that dispatch only sees their _type_, not different instances of that same type.","user":"UH24GRBLL","ts":"1607949270.001600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h7p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can definitely organise your code as subtypes of "},{"type":"text","text":"Gradient","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"Integrand","style":{"code":true}},{"type":"text","text":", just be aware that dispatch only sees their "},{"type":"text","text":"type","style":{"italic":true}},{"type":"text","text":", not different instances of that same type."}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"af83a96a-99ef-4928-865d-9dfe9421988d","type":"message","text":"for instance:\n\n```strunct Example\n  field::Int\nend\n\n(z::Example)() = z.field\n\nx = Example(1)\ny = Example(2)\n\nx() # returns 1\ny() # returns 2```","user":"UH24GRBLL","ts":"1607949330.001800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tDx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"for instance:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"strunct Example\n  field::Int\nend\n\n(z::Example)() = z.field\n\nx = Example(1)\ny = Example(2)\n\nx() # returns 1\ny() # returns 2"}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"0063aa82-b6ad-4527-b162-f02fcea67a3f","type":"message","text":"in this example, all instances of `Example` can be used as callables, since `Example` has a method with 0 arguments defined for instances of it.","user":"UH24GRBLL","ts":"1607949377.002000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fB2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in this example, all instances of "},{"type":"text","text":"Example","style":{"code":true}},{"type":"text","text":" can be used as callables, since "},{"type":"text","text":"Example","style":{"code":true}},{"type":"text","text":" has a method with 0 arguments defined for instances of it."}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"1b9da8c2-bb7a-45ea-87ac-0709a305892a","type":"message","text":"in the same sense, if you define `foo(x) = x+2`, `foo` is an instance of `Function` (since `foo isa Function` returns `true`), but that's not a requirement for it to be callable. The only requirement for instances of a type to be callable is to have methods defined for that type.","user":"UH24GRBLL","ts":"1607949498.002200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7tDU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in the same sense, if you define "},{"type":"text","text":"foo(x) = x+2","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"foo","style":{"code":true}},{"type":"text","text":" is an instance of "},{"type":"text","text":"Function","style":{"code":true}},{"type":"text","text":" (since "},{"type":"text","text":"foo isa Function","style":{"code":true}},{"type":"text","text":" returns "},{"type":"text","text":"true","style":{"code":true}},{"type":"text","text":"), but that's not a requirement for it to be callable. The only requirement for instances of a type to be callable is to have methods defined for that type."}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"422fff00-9a05-4316-9a23-cfe87ac2917a","type":"message","text":"(note though that `typeof(foo) != Function`)","user":"UH24GRBLL","ts":"1607949516.002400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OxR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(note though that "},{"type":"text","text":"typeof(foo) != Function","style":{"code":true}},{"type":"text","text":")"}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"69eec391-6e9c-44cb-a393-dbb2691083db","type":"message","text":"&gt; method not defined error if f is not R-&gt;R\nwhile possible to enforce via reflection, it's not advisable to do so (julia isn't haskell), as the return type and the argument types are _not_ part of the type of a function. Moreover, the result of inspecting those things via reflection may depend on type inference and type stability, so it's not a very stable strategy to try to enforce.","user":"UH24GRBLL","ts":"1607949624.002600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uoUly","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"method not defined error if f is not R->R"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nwhile possible to enforce via reflection, it's not advisable to do so (julia isn't haskell), as the return type and the argument types are "},{"type":"text","text":"not","style":{"italic":true}},{"type":"text","text":" part of the type of a function. Moreover, the result of inspecting those things via reflection may depend on type inference and type stability, so it's not a very stable strategy to try to enforce."}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"},{"client_msg_id":"7953ea46-f9a8-4974-a5a9-4d2a39df7a66","type":"message","text":"this way very useful thank you!","user":"UMAJCM1DF","ts":"1607957645.007300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZWj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this way very useful thank you!"}]}]}],"thread_ts":"1607941658.488200","parent_user_id":"UMAJCM1DF"}]