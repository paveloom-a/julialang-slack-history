[{"client_msg_id":"07ed829d-6b7f-4650-9da3-aed405c2fabf","type":"message","text":"is there a universal empty initializer (~empty constructor) for mutable data types in Base? Something like`Base.zero(Int)`, but for vectors (or generally, for arbitrary mutable types)?","user":"UDLBKS4RE","ts":"1609869350.308700","team":"T68168MUP","edited":{"user":"UDLBKS4RE","ts":"1609869528.000000"},"blocks":[{"type":"rich_text","block_id":"TOH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is there a universal empty initializer (~empty constructor) for mutable data types in Base? Something like"},{"type":"text","text":"Base.zero(Int)","style":{"code":true}},{"type":"text","text":", but for vectors (or generally, for arbitrary mutable types)?"}]}]}],"thread_ts":"1609869350.308700","reply_count":7,"reply_users_count":3,"latest_reply":"1609881350.332200","reply_users":["UH24GRBLL","UDLBKS4RE","U8D9768Q6"],"subscribed":false},{"client_msg_id":"061fb747-2a17-4e85-83c6-31dea6d06584","type":"message","text":"not for arbitrary mutable structs, no","user":"UH24GRBLL","ts":"1609869669.308900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"P48jC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not for arbitrary mutable structs, no"}]}]}],"thread_ts":"1609869350.308700","parent_user_id":"UDLBKS4RE"},{"client_msg_id":"3af48821-abb1-4a91-b779-ba47e45cb55f","type":"message","text":"ok, thanks.","user":"UDLBKS4RE","ts":"1609869920.309100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AkT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ok, thanks."}]}]}],"thread_ts":"1609869350.308700","parent_user_id":"UDLBKS4RE"},{"client_msg_id":"ac9566b9-a816-45d4-9f25-e46937f89d5f","type":"message","text":"if you want to have an empty vector of a specific type `T` though, `T[]` will do","user":"UH24GRBLL","ts":"1609869938.309300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fjC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you want to have an empty vector of a specific type "},{"type":"text","text":"T","style":{"code":true}},{"type":"text","text":" though, "},{"type":"text","text":"T[]","style":{"code":true}},{"type":"text","text":" will do"}]}]}],"thread_ts":"1609869350.308700","parent_user_id":"UDLBKS4RE"},{"client_msg_id":"2d055b77-3621-40fa-a342-61a05b15f434","type":"message","text":"yea, but I was specifically looking for non-vector types. Closest I could find is `Base.empty(v)`, but that only takes an instantiated type as input. I'll just define something myself.","user":"UDLBKS4RE","ts":"1609873772.310000","team":"T68168MUP","edited":{"user":"UDLBKS4RE","ts":"1609873806.000000"},"blocks":[{"type":"rich_text","block_id":"wqCN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yea, but I was specifically looking for non-vector types. Closest I could find is "},{"type":"text","text":"Base.empty(v)","style":{"code":true}},{"type":"text","text":", but that only takes an instantiated type as input. I'll just define something myself."}]}]}],"thread_ts":"1609869350.308700","parent_user_id":"UDLBKS4RE"},{"client_msg_id":"d6eec1d3-dd4d-440c-9bed-b0267de091bf","type":"message","text":"Well, there is one method to do this, but it's not one the Jedi would tell you about.","user":"U8D9768Q6","ts":"1609880556.330600","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1609880562.000000"},"blocks":[{"type":"rich_text","block_id":"cuI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well, there is one method to do this, but it's not one the Jedi would tell you about."}]}]}],"thread_ts":"1609869350.308700","parent_user_id":"UDLBKS4RE"},{"client_msg_id":"93514955-b155-45a6-9549-db00dec00298","type":"message","text":"```julia&gt; @generated function __new__(T, args...)\n           quote\n               Base.@_inline_meta\n               $(Expr(:new, :T, [:(args[$i]) for i = 1:length(args)]...))\n           end\n       end\n__new__ (generic function with 1 method)\n\njulia&gt; mutable struct Foo\n           a::Int\n           b::Float64\n       end\n\njulia&gt; __new__(Foo)\nFoo(0, 0.0)```","user":"U8D9768Q6","ts":"1609880625.330900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mQKy","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @generated function __new__(T, args...)\n           quote\n               Base.@_inline_meta\n               $(Expr(:new, :T, [:(args[$i]) for i = 1:length(args)]...))\n           end\n       end\n__new__ (generic function with 1 method)\n\njulia> mutable struct Foo\n           a::Int\n           b::Float64\n       end\n\njulia> __new__(Foo)\nFoo(0, 0.0)"}]}]}],"thread_ts":"1609869350.308700","parent_user_id":"UDLBKS4RE"},{"client_msg_id":"b9294534-dffa-4da8-b872-6b6d70bad4f1","type":"message","text":"Note: it's totally up the compiler whether or not the value returned here is junk or zeros.","user":"U8D9768Q6","ts":"1609881350.332200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5y/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Note: it's totally up the compiler whether or not the value returned here is junk or zeros."}]}]}],"thread_ts":"1609869350.308700","parent_user_id":"UDLBKS4RE"}]