[{"client_msg_id":"cc9cd7f0-0622-4dd7-91b8-3c515d743cbe","type":"message","text":"Hello everyone,\nI'm trying to write a function that returns an array with all paths from root to leaves in a binary tree, where each path is an array of symbols.\nThe tree struct is defined like this:\n```abstract type Node end\n\nstruct Branch_Node &lt;: Node\n    left::Node\n    right::Node\nend\n\nstruct Leaf_Node &lt;: Node\nend```\nSo for this tree\n```tree = Branch_Node(Branch_Node(Branch_Node(Leaf_Node(), Leaf_Node()), Leaf_Node()),Branch_Node(Leaf_Node(), Leaf_Node()))```\nI want the function to return\n```[[:left, :left, :left], [:left, :left, :right], [:left, :right], [:right, :left], [:right, :right]]```\nI can write a function that returns a nested array like this:\n```function get_path_to_leaf(node::Leaf_Node)\n    return\nend\nfunction get_path_to_leaf(node::Branch_Node)\n    return [[:left, get_path_to_leaf(node.left)], [:right, get_path_to_leaf(node.right)]]\nend```\nBut I can't figure out how to unfold the paths into flat arrays. I though something like this:\n```function get_path_to_leaf(node::Leaf_Node)\n    return []\nend\n\nfunction get_path_to_leaf(node::Branch_Node)\n    return [[append!([:left], i) for i in get_path_to_leaf(node.left)], [append!([:right], i) for i in get_path_to_leaf(node.right)]]\nend```\nwould do it, but I get the following error \"ERROR: MethodError: Cannot `convert` an object of type Array{Symbol,1} to an object of type Symbol\"\nand I'm having no luck debugging it. Sorry for the wall of text, can anyone help?","user":"U01RKJECJE8","ts":"1615897793.015400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Yme","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hello everyone,\nI'm trying to write a function that returns an array with all paths from root to leaves in a binary tree, where each path is an array of symbols.\nThe tree struct is defined like this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"abstract type Node end\n\nstruct Branch_Node <: Node\n    left::Node\n    right::Node\nend\n\nstruct Leaf_Node <: Node\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"So for this tree\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"tree = Branch_Node(Branch_Node(Branch_Node(Leaf_Node(), Leaf_Node()), Leaf_Node()),Branch_Node(Leaf_Node(), Leaf_Node()))"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I want the function to return\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"[[:left, :left, :left], [:left, :left, :right], [:left, :right], [:right, :left], [:right, :right]]"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I can write a function that returns a nested array like this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function get_path_to_leaf(node::Leaf_Node)\n    return\nend\nfunction get_path_to_leaf(node::Branch_Node)\n    return [[:left, get_path_to_leaf(node.left)], [:right, get_path_to_leaf(node.right)]]\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"But I can't figure out how to unfold the paths into flat arrays. I though something like this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function get_path_to_leaf(node::Leaf_Node)\n    return []\nend\n\nfunction get_path_to_leaf(node::Branch_Node)\n    return [[append!([:left], i) for i in get_path_to_leaf(node.left)], [append!([:right], i) for i in get_path_to_leaf(node.right)]]\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"would do it, but I get the following error \"ERROR: MethodError: Cannot `convert` an object of type Array{Symbol,1} to an object of type Symbol\"\nand I'm having no luck debugging it. Sorry for the wall of text, can anyone help?"}]}]}],"thread_ts":"1615897793.015400","reply_count":2,"reply_users_count":1,"latest_reply":"1615897827.015800","reply_users":["B01J9QZ4SP8"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1615897795.015500","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1615897793.015400","parent_user_id":"U01RKJECJE8","reactions":[{"name":"bridge","users":["U01RKJECJE8"],"count":1}]},{"type":"message","subtype":"bot_message","text":"Success, it has been cross posted <https://discourse.julialang.org/t/57296| to Discourse>. Keep and eye out on Discourse for responses and please add an answer there once you are satisfied with the solution so others can benefit as well. Happy debugging!","ts":"1615897827.015800","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1615897793.015400","parent_user_id":"U01RKJECJE8"}]