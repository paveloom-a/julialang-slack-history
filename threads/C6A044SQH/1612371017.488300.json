[{"client_msg_id":"ab470ad6-5b43-4a67-a0b9-1d00e1e9313e","type":"message","text":"What do I need to do to a struct to use it in a boolean context?\n```julia&gt; struct Foo\n       bool::Bool\n       end\n\njulia&gt; if Foo(true)\n       println(\"How do I make this work?\")\n       end\nERROR: TypeError: non-boolean (Foo) used in boolean context\nStacktrace:\n [1] top-level scope```","user":"UDSG73JTH","ts":"1612371017.488300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zLc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What do I need to do to a struct to use it in a boolean context?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> struct Foo\n       bool::Bool\n       end\n\njulia> if Foo(true)\n       println(\"How do I make this work?\")\n       end\nERROR: TypeError: non-boolean (Foo) used in boolean context\nStacktrace:\n [1] top-level scope"}]}]}],"thread_ts":"1612371017.488300","reply_count":26,"reply_users_count":5,"latest_reply":"1612375375.003200","reply_users":["B01J9QZ4SP8","U6740K1SP","UDSG73JTH","U01HD5VFXJM","UH24GRBLL"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1612371019.488400","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1612371017.488300","parent_user_id":"UDSG73JTH","reactions":[{"name":"bridge","users":["UDSG73JTH"],"count":1}]},{"type":"message","subtype":"bot_message","text":"Success, it has been cross posted <https://discourse.julialang.org/t/what-do-i-need-to-do-to-a-struct-to-use-it-in-a-boolean-context-julia-gt-stru/54545|to Discourse>. Keep and eye out on Discourse for responses and please add an answer there once you are satisfied with the solution so others can benefit as well. Happy debugging!","ts":"1612371042.488700","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1612371017.488300","parent_user_id":"UDSG73JTH"},{"client_msg_id":"27d4ce70-fa01-457e-859a-e3216cc6840c","type":"message","text":"you can’t","user":"U6740K1SP","ts":"1612371146.488900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1DwqD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can’t"}]}]}],"thread_ts":"1612371017.488300","parent_user_id":"UDSG73JTH"},{"client_msg_id":"1e8a67ae-2d5f-4b9d-9dcd-7d72ea841d46","type":"message","text":"Oh","user":"UDSG73JTH","ts":"1612371192.489100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hGw9B","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh"}]}]}],"thread_ts":"1612371017.488300","parent_user_id":"UDSG73JTH"},{"client_msg_id":"7ec5bd36-cc9b-422a-9bfd-2a14ef6a402f","type":"message","text":"Foo(true) creates a copy of Foo, which isn't a Boolean. :slightly_smiling_face: Is this what you are trying to do? That is, you're looking to pattern match?\n\n```x = Foo(true)\nif x.bool\n    println(\"works!\")\nend```","user":"U01HD5VFXJM","ts":"1612371206.489300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6V2Tz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Foo(true) creates a copy of Foo, which isn't a Boolean. "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":" Is this what you are trying to do? That is, you're looking to pattern match?\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"x = Foo(true)\nif x.bool\n    println(\"works!\")\nend"}]}]}],"thread_ts":"1612371017.488300","parent_user_id":"UDSG73JTH"},{"client_msg_id":"8e01128e-b8c4-4f11-9ebb-c99cb62d47a4","type":"message","text":"there's no copying going on here, only an instance of `Foo`. `Foo` are not boolean, thus they're not available in a boolean context.","user":"UH24GRBLL","ts":"1612371377.489500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"04I","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there's no copying going on here, only an instance of "},{"type":"text","text":"Foo","style":{"code":true}},{"type":"text","text":". "},{"type":"text","text":"Foo","style":{"code":true}},{"type":"text","text":" are not boolean, thus they're not available in a boolean context."}]}]}],"thread_ts":"1612371017.488300","parent_user_id":"UDSG73JTH"},{"client_msg_id":"5e3c15e4-077a-4035-81ff-074a54d8fdae","type":"message","text":"Sorry, \"a copy\" was just an imprecise word for \"an instance\".","user":"U01HD5VFXJM","ts":"1612371465.489700","team":"T68168MUP","edited":{"user":"U01HD5VFXJM","ts":"1612371547.000000"},"blocks":[{"type":"rich_text","block_id":"FuWq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sorry, \"a copy\" was just an imprecise word for \"an instance\"."}]}]}],"thread_ts":"1612371017.488300","parent_user_id":"UDSG73JTH"},{"client_msg_id":"1fa710ff-c41b-4754-a303-a3b764a21c8e","type":"message","text":"I'm working on an existing code-base that has wrapped a large system that has a c-specification. The spec mentions Boolean all the time, but what it means is an 32 bit integer (signed? unsigned? don't know)  (because that's what the wrapped c expects). So the julia codebase has `Bool`  where it really wants `Cint` for wrapping purposes, but it uses the `Bool` s in `if` statements etc. I wanted a quick way to swap out the `Bool` with a struct containing a `Cint` (or even just a `Cint` and no struct)  that behaves like a boolean.","user":"UDSG73JTH","ts":"1612371588.490100","team":"T68168MUP","edited":{"user":"UDSG73JTH","ts":"1612372004.000000"},"blocks":[{"type":"rich_text","block_id":"w1/B","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm working on an existing code-base that has wrapped a large system that has a c-specification. The spec mentions Boolean all the time, but what it means is an 32 bit integer (signed? unsigned? don't know)  (because that's what the wrapped c expects). So the julia codebase has "},{"type":"text","text":"Bool","style":{"code":true}},{"type":"text","text":"  where it really wants "},{"type":"text","text":"Cint","style":{"code":true}},{"type":"text","text":" for wrapping purposes, but it uses the "},{"type":"text","text":"Bool","style":{"code":true}},{"type":"text","text":" s in "},{"type":"text","text":"if","style":{"code":true}},{"type":"text","text":" statements etc. I wanted a quick way to swap out the "},{"type":"text","text":"Bool","style":{"code":true}},{"type":"text","text":" with a struct containing a "},{"type":"text","text":"Cint","style":{"code":true}},{"type":"text","text":" (or even just a "},{"type":"text","text":"Cint","style":{"code":true}},{"type":"text","text":" and no struct)  that behaves like a boolean."}]}]}],"thread_ts":"1612371017.488300","parent_user_id":"UDSG73JTH","reactions":[{"name":"+1","users":["U01HD5VFXJM"],"count":1}]},{"client_msg_id":"48aca203-3235-44cf-886f-68ae1670f3bf","type":"message","text":"In short; the wrapped c code expects 32 bits but is interested only in the first 1. The Julia code, mistakenly, has lots of Bools and uses them as such. Unfortunately, the wrapped c code segfaults because of the size difference.","user":"UDSG73JTH","ts":"1612371664.490400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JikM7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In short; the wrapped c code expects 32 bits but is interested only in the first 1. The Julia code, mistakenly, has lots of Bools and uses them as such. Unfortunately, the wrapped c code segfaults because of the size difference."}]}]}],"thread_ts":"1612371017.488300","parent_user_id":"UDSG73JTH"},{"client_msg_id":"f49209c8-5903-4c88-9afb-e9c5fdb5e82c","type":"message","text":"I suppose I'll just fix the existing julia code then. It'd leave a smell fixing it with a Boolean-behaving struct anyway.","user":"UDSG73JTH","ts":"1612371755.490600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sfa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I suppose I'll just fix the existing julia code then. It'd leave a smell fixing it with a Boolean-behaving struct anyway."}]}]}],"thread_ts":"1612371017.488300","parent_user_id":"UDSG73JTH"},{"client_msg_id":"107b4df3-6aa4-4f02-8721-0d6c4ca5a1ee","type":"message","text":"```julia&gt; Bool(1)\ntrue\n\njulia&gt; Bool(0)\nfalse\n\njulia&gt; Bool(5)\nERROR: InexactError: Bool(5)\nStacktrace:\n [1] Bool(x::Int64)\n   @ Base ./float.jl:106\n [2] top-level scope\n   @ REPL[5]:1```","user":"UH24GRBLL","ts":"1612372028.492900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lqsj","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Bool(1)\ntrue\n\njulia> Bool(0)\nfalse\n\njulia> Bool(5)\nERROR: InexactError: Bool(5)\nStacktrace:\n [1] Bool(x::Int64)\n   @ Base ./float.jl:106\n [2] top-level scope\n   @ REPL[5]:1"}]}]}],"thread_ts":"1612371017.488300","parent_user_id":"UDSG73JTH"},{"client_msg_id":"03811c2a-7495-4be8-a1ed-2f1cb5379858","type":"message","text":"I think this could be of help","user":"UH24GRBLL","ts":"1612372046.493400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c2q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think this could be of help"}]}]}],"thread_ts":"1612371017.488300","parent_user_id":"UDSG73JTH"},{"client_msg_id":"55f71990-796b-40a5-b851-094f0a95cdc3","type":"message","text":"Can I make it 32 bits long?","user":"UDSG73JTH","ts":"1612372073.494000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"coG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can I make it 32 bits long?"}]}]}],"thread_ts":"1612371017.488300","parent_user_id":"UDSG73JTH"},{"client_msg_id":"7b70084e-2508-4dfc-83d5-56cbc5a1594d","type":"message","text":"```julia&gt; Cint(false)\n0\n\njulia&gt; Cint(true)\n1\n\njulia&gt; sizeof(Cint)\n4```","user":"UH24GRBLL","ts":"1612372116.495000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W=8","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Cint(false)\n0\n\njulia> Cint(true)\n1\n\njulia> sizeof(Cint)\n4"}]}]}],"thread_ts":"1612371017.488300","parent_user_id":"UDSG73JTH"},{"client_msg_id":"d8a42dca-c6b3-4acc-9405-010b2250f2d9","type":"message","text":"you only have to translate at the ccall boundaries","user":"UH24GRBLL","ts":"1612372134.495500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LKnap","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you only have to translate at the ccall boundaries"}]}]}],"thread_ts":"1612371017.488300","parent_user_id":"UDSG73JTH"},{"client_msg_id":"b97170c6-c5fd-4938-af5a-18244176a190","type":"message","text":"and iirc the ccall interface already does that for you","user":"UH24GRBLL","ts":"1612372146.495900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"z8W","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and iirc the ccall interface already does that for you"}]}]}],"thread_ts":"1612371017.488300","parent_user_id":"UDSG73JTH","reactions":[{"name":"raised_hands","users":["UDSG73JTH"],"count":1}]},{"client_msg_id":"491dab7a-6888-4ddf-b249-2bbdc8bbb06b","type":"message","text":"Yeah, You could say it returns a `Bool` and just define that conversion","user":"U6740K1SP","ts":"1612372167.496500","team":"T68168MUP","edited":{"user":"U6740K1SP","ts":"1612372203.000000"},"blocks":[{"type":"rich_text","block_id":"Ar+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, You could say it returns a "},{"type":"text","text":"Bool","style":{"code":true}},{"type":"text","text":" and just define that conversion"}]}]}],"thread_ts":"1612371017.488300","parent_user_id":"UDSG73JTH","reactions":[{"name":"point_up_2","users":["UH24GRBLL"],"count":1}]},{"client_msg_id":"42930c7e-2859-4606-a1a9-509b712ddc59","type":"message","text":"I don't even think the cconvert is needed, it should just work, no?","user":"UH24GRBLL","ts":"1612372217.497500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8fqxU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't even think the cconvert is needed, it should just work, no?"}]}]}],"thread_ts":"1612371017.488300","parent_user_id":"UDSG73JTH"},{"client_msg_id":"df89075a-f07b-4193-93ae-d527cf53234c","type":"message","text":"Yeah, probably — it’s been a while since I’ve done ccall stuff","user":"U6740K1SP","ts":"1612372243.497700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7=P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, probably — it’s been a while since I’ve done ccall stuff"}]}]}],"thread_ts":"1612371017.488300","parent_user_id":"UDSG73JTH"},{"client_msg_id":"6bdc10e8-2dd1-4657-8e45-2335070c7182","type":"message","text":"hence my edit :stuck_out_tongue:","user":"U6740K1SP","ts":"1612372253.498000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"na1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hence my edit "},{"type":"emoji","name":"stuck_out_tongue"}]}]}],"thread_ts":"1612371017.488300","parent_user_id":"UDSG73JTH"},{"client_msg_id":"44abd269-e8d1-4bc6-8dfe-f6ca42b5b9f7","type":"message","text":"It's going in the right direction. The ccall isnt `...Ref{CInt}...` it's `...Ref{TypeWithBoolsThatShouldBeInts}...`` .","user":"UDSG73JTH","ts":"1612372328.498500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2xG0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's going in the right direction. The ccall isnt "},{"type":"text","text":"...Ref{CInt}...","style":{"code":true}},{"type":"text","text":" it's "},{"type":"text","text":"...Ref{TypeWithBoolsThatShouldBeInts}...`","style":{"code":true}},{"type":"text","text":" ."}]}]}],"thread_ts":"1612371017.488300","parent_user_id":"UDSG73JTH"},{"client_msg_id":"52463f43-837a-4bc4-b9b7-03f17cfd16c7","type":"message","text":"Thanks for the help all. Not ignoring... kids calling ...","user":"UDSG73JTH","ts":"1612372427.499000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Cw/c","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks for the help all. Not ignoring... kids calling ..."}]}]}],"thread_ts":"1612371017.488300","parent_user_id":"UDSG73JTH"},{"client_msg_id":"db66d6bd-d515-4eb1-8eb9-0102c4d73504","type":"message","text":"yeah, in that case I think you'll need the conversion - probably to a tuple with the correct types and pass that","user":"UH24GRBLL","ts":"1612372485.499400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qYG1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, in that case I think you'll need the conversion - probably to a tuple with the correct types and pass that"}]}]}],"thread_ts":"1612371017.488300","parent_user_id":"UDSG73JTH","reactions":[{"name":"+1","users":["UDSG73JTH"],"count":1}]},{"client_msg_id":"cd16437a-c327-4f67-aa0c-76db271474cd","type":"message","text":"Will the convert respect mutation inside the wrapped c library?","user":"UDSG73JTH","ts":"1612374217.002700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"S+8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Will the convert respect mutation inside the wrapped c library?"}]}]}],"thread_ts":"1612371017.488300","parent_user_id":"UDSG73JTH"},{"client_msg_id":"0ee0c207-089e-47d3-938b-f60513a2de40","type":"message","text":"that depends on the exact mapping and what the C code is doing exactly","user":"UH24GRBLL","ts":"1612375093.003000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c8T4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that depends on the exact mapping and what the C code is doing exactly"}]}]}],"thread_ts":"1612371017.488300","parent_user_id":"UDSG73JTH"},{"client_msg_id":"bf1abe26-d90c-4881-8e09-030649dfe42a","type":"message","text":"there's also the option of having the actual C interface struct properly sized (e.g. UInt32) and take care of it all with accessor functions that already do the Bool conversion for you","user":"UH24GRBLL","ts":"1612375375.003200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hAPf=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there's also the option of having the actual C interface struct properly sized (e.g. UInt32) and take care of it all with accessor functions that already do the Bool conversion for you"}]}]}],"thread_ts":"1612371017.488300","parent_user_id":"UDSG73JTH"}]