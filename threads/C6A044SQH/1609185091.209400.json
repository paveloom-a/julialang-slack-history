[{"client_msg_id":"02c01c54-0c3e-4a48-b6ac-defb5eef231e","type":"message","text":"Is there any good equivalent to java's interfaces? I'm trying to create a generic skip list, and I want to make sure that the elements are comparable. I know that method_exists() works, but I'm not sure how I can make the type of a struct a type that contains the method. i.e is there something like &lt;V extends comparable&gt; from java in julia?","user":"U01H848FS7Q","ts":"1609185091.209400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iuMb7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there any good equivalent to java's interfaces? I'm trying to create a generic skip list, and I want to make sure that the elements are comparable. I know that method_exists() works, but I'm not sure how I can make the type of a struct a type that contains the method. i.e is there something like <V extends comparable> from java in julia?"}]}]}],"thread_ts":"1609185091.209400","reply_count":4,"reply_users_count":3,"latest_reply":"1609223011.244600","reply_users":["U0179G7FG4F","U01H848FS7Q","USU9FRPEU"],"subscribed":false},{"client_msg_id":"ab1b1a82-b771-4494-95e6-1aec17569ef3","type":"message","text":"Currently the only answer is to assume it works. If it doesn't there will be an error saying that there is no definition. (that said, in the case of `==`, this should never be the case. There is a fallback defined in base that uses pointer comparison).","user":"U0179G7FG4F","ts":"1609185322.209500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jGCvu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Currently the only answer is to assume it works. If it doesn't there will be an error saying that there is no definition. (that said, in the case of "},{"type":"text","text":"==","style":{"code":true}},{"type":"text","text":", this should never be the case. There is a fallback defined in base that uses pointer comparison)."}]}]}],"thread_ts":"1609185091.209400","parent_user_id":"U01H848FS7Q"},{"client_msg_id":"97740dbd-67e9-4b5f-849c-889a96d7acca","type":"message","text":"Okay I see thanks","user":"U01H848FS7Q","ts":"1609185379.209700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"22vD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Okay I see thanks"}]}]}],"thread_ts":"1609185091.209400","parent_user_id":"U01H848FS7Q"},{"client_msg_id":"93d2bd32-f9b8-4633-814b-ddd93d77e7f0","type":"message","text":"<https://github.com/tk3369/BinaryTraits.jl|Binary Traits>","user":"USU9FRPEU","ts":"1609222768.244400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZpkJ","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/tk3369/BinaryTraits.jl","text":"Binary Traits"}]}]}],"thread_ts":"1609185091.209400","parent_user_id":"U01H848FS7Q"},{"client_msg_id":"9298e5f0-0947-44a9-b201-84ab6ccdf97f","type":"message","text":"Basically, if you want to know if a type has certain functions, define several boolean methods that return that answer of whether a type has that function. Then dispatch on that boolean value by boxing it in a type.","user":"USU9FRPEU","ts":"1609223011.244600","team":"T68168MUP","edited":{"user":"USU9FRPEU","ts":"1609223022.000000"},"blocks":[{"type":"rich_text","block_id":"d+r","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Basically, if you want to know if a type has certain functions, define several boolean methods that return that answer of whether a type has that function. Then dispatch on that boolean value by boxing it in a type."}]}]}],"thread_ts":"1609185091.209400","parent_user_id":"U01H848FS7Q"}]