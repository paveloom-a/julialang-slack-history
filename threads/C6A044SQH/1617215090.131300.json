[{"client_msg_id":"67dbe6b3-a5b6-4bb9-ab63-3bd136e78cfe","type":"message","text":"A question regarding `mutable` : I have a custom type `BlockMatrix` , which basically holds 4 matrices to represent a 2x2 block matrix. If I define it to be a non-mutable struct, my code exectues around two times faster than when I allow it to be mutable. Allocations etc stay exactly the same. My question is why?\n\nI want to be able to cache the Schur complement `S22 = A22 - A21*(A11\\A12)`  to avoid re-computing it over and over again. But otherwise I would like to keep everything else immutable for performance. What would be a good way of achieving this?","user":"U01L0RJC6FM","ts":"1617215090.131300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"H88n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"A question regarding "},{"type":"text","text":"mutable","style":{"code":true}},{"type":"text","text":" : I have a custom type "},{"type":"text","text":"BlockMatrix","style":{"code":true}},{"type":"text","text":" , which basically holds 4 matrices to represent a 2x2 block matrix. If I define it to be a non-mutable struct, my code exectues around two times faster than when I allow it to be mutable. Allocations etc stay exactly the same. My question is why?\n\nI want to be able to cache the Schur complement "},{"type":"text","text":"S22 = A22 - A21*(A11\\A12)","style":{"code":true}},{"type":"text","text":"  to avoid re-computing it over and over again. But otherwise I would like to keep everything else immutable for performance. What would be a good way of achieving this?"}]}]}],"thread_ts":"1617215090.131300","reply_count":42,"reply_users_count":2,"latest_reply":"1617219161.146100","reply_users":["UDB26738Q","U01L0RJC6FM"],"is_locked":false,"subscribed":false},{"client_msg_id":"1fd6c793-e142-48eb-bbf4-f4344bb08e5e","type":"message","text":"1. immutable struct are more efficient because they can be stack-allocated more easily\n2. you can still mutate fields of immutable structs","user":"UDB26738Q","ts":"1617215155.131400","team":"T68168MUP","edited":{"user":"UDB26738Q","ts":"1617215196.000000"},"blocks":[{"type":"rich_text","block_id":"YfO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"1. immutable struct are more efficient because they can be stack-allocated more easily\n2. you can still mutate fields of immutable structs"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"0fa9ce14-05e8-4f59-abe1-4fa41f1fbedd","type":"message","text":"really? Here\n```struct BlockMatrix{T, T11 &lt;: AbstractMatrix{T}, T12 &lt;: AbstractMatrix{T}, T21 &lt;: AbstractMatrix{T}, T22 &lt;: AbstractMatrix{T}} &lt;: AbstractMatrix{T}\n  A11::T11\n  A12::T12\n  A21::T21\n  A22::T22\n\n  # inner constructor checks for consistency among dimensions\n  function BlockMatrix(A11::AbstractMatrix{T}, A12::AbstractMatrix{T}, A21::AbstractMatrix{T}, A22::AbstractMatrix{T}) where T\n    size(A11, 1) == size(A12, 1) || throw(DimensionMismatch(\"first dimension of A11 and A12 do not match. Expected $(size(A11, 1)), got $(size(A12, 1))\"))\n    size(A11, 2) == size(A21, 2) || throw(DimensionMismatch(\"second dimension of A11 and A12 do not match. Expected $(size(A11, 2)), got $(size(A21, 2))\"))\n    size(A22, 1) == size(A21, 1) || throw(DimensionMismatch(\"first dimension of A22 and A21 do not match. Expected $(size(A22, 1)), got $(size(A21, 1))\"))\n    size(A22, 2) == size(A12, 2) || throw(DimensionMismatch(\"second dimension of A22 and A12 do not match. Expected $(size(A22, 2)), got $(size(A12, 2))\"))\n    new{T, typeof(A11), typeof(A12), typeof(A21), typeof(A22)}(A11, A12, A21, A22)\n  end\nend\n\nA = BlockMatrix(randn(100,100), randn(100,200), randn(200,100), randn(200,200))\nA.A11 = randn(100,100)```\nthis fives me an error","user":"U01L0RJC6FM","ts":"1617217538.136200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9z5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"really? Here\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct BlockMatrix{T, T11 <: AbstractMatrix{T}, T12 <: AbstractMatrix{T}, T21 <: AbstractMatrix{T}, T22 <: AbstractMatrix{T}} <: AbstractMatrix{T}\n  A11::T11\n  A12::T12\n  A21::T21\n  A22::T22\n\n  # inner constructor checks for consistency among dimensions\n  function BlockMatrix(A11::AbstractMatrix{T}, A12::AbstractMatrix{T}, A21::AbstractMatrix{T}, A22::AbstractMatrix{T}) where T\n    size(A11, 1) == size(A12, 1) || throw(DimensionMismatch(\"first dimension of A11 and A12 do not match. Expected $(size(A11, 1)), got $(size(A12, 1))\"))\n    size(A11, 2) == size(A21, 2) || throw(DimensionMismatch(\"second dimension of A11 and A12 do not match. Expected $(size(A11, 2)), got $(size(A21, 2))\"))\n    size(A22, 1) == size(A21, 1) || throw(DimensionMismatch(\"first dimension of A22 and A21 do not match. Expected $(size(A22, 1)), got $(size(A21, 1))\"))\n    size(A22, 2) == size(A12, 2) || throw(DimensionMismatch(\"second dimension of A22 and A12 do not match. Expected $(size(A22, 2)), got $(size(A12, 2))\"))\n    new{T, typeof(A11), typeof(A12), typeof(A21), typeof(A22)}(A11, A12, A21, A22)\n  end\nend\n\nA = BlockMatrix(randn(100,100), randn(100,200), randn(200,100), randn(200,200))\nA.A11 = randn(100,100)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"this fives me an error"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"05a16a0d-68f7-4f33-85b3-df6e420ca270","type":"message","text":"because you are not mutating","user":"UDB26738Q","ts":"1617217609.136600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0aJRm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"because you are not mutating"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"d64977c7-4755-450d-9eab-1c2d2212bdb8","type":"message","text":"```julia&gt; A.A11 .= randn(100,100)\n100×100 Matrix{Float64}:\n  1.00968    -0.824987   -0.672428   -0.209466   …   0.665435     1.04087    -0.909561     0.661946\n -1.55436     1.27814     0.355801   -2.34013       -1.56122     -1.35066    -1.19271     -1.21697\n  1.74562    -0.904107    1.02839     0.914251       1.27307      0.362126    1.05474      0.803205\n  0.566044    0.35018     0.519268   -0.362893       0.386797     0.788164   -1.48867      0.828491\n  1.1803     -1.72552    -0.443239   -1.40584       -0.798822    -0.892746   -0.808278    -0.30085\n -0.402811   -0.0458537   0.29373     0.888424   …  -0.0864076   -0.094156   -0.19584     -0.546923\n  0.572773    0.549585   -0.340936    0.299991      -0.902006     0.438909   -0.164471     1.08717\n -0.455113   -0.333888    3.2866      0.821143       0.201106    -0.895053   -1.18506      0.820855\n -0.50814    -1.21901    -1.12111     0.651123      -0.167783    -0.190227   -0.0577606   -1.63118\n  0.0917562   1.43409     0.18172     1.49452        1.20469      1.55408     1.19264     -0.338192\n -0.557459    0.461155    1.25836     0.185935   …   0.841742    -1.00122    -0.00575198  -0.612068\n  0.375296   -1.48963    -1.24201     1.0392        -0.180763    -2.03154    -0.510516    -0.295732\n  1.6872     -0.307215   -0.873265    1.35682        0.00601207   1.18897    -0.43679     -0.0953721\n -2.30092    -1.06518     0.127037   -1.77376        0.541281     0.299068   -0.913182     0.686406\n -0.0355724   1.19314     0.923661   -1.80452        0.224059     0.273876    0.670953     1.55802\n  ⋮                                              ⋱                                        \n -0.18688     1.62338    -0.448772   -1.33728    …  -0.285296    -1.41312     2.27165      0.365035\n -0.460441   -0.18178    -1.03662    -0.825501       1.82787     -2.20319    -0.690852     0.7997\n -0.672455   -0.853286   -0.238877    0.262321       1.28923     -0.210839   -1.1385      -0.0890767\n -0.494542    0.467774    1.35909    -0.0419347      1.61856      0.580987   -0.537145    -0.644325\n -0.250761   -0.76077     1.45056    -0.533245      -1.99462      2.21053    -1.39365      0.190861\n -2.99285     1.64819     1.52226     1.56755    …   1.30598     -0.508705    0.176616    -0.408536\n  1.28596     2.36339     0.507364   -0.831202       1.33889      0.143239    1.54307      1.21562\n -1.05518     1.37098     2.33816    -0.644921      -0.634318     0.306387   -0.921909     0.136558\n -1.34482     0.122218    0.606934    0.0221828     -1.26779     -0.367997   -0.478323     0.89442\n -0.44622    -0.770243    0.761841    0.488944       2.99908     -0.538932    1.23151      0.579629\n -1.42866    -0.102366   -1.24313     0.917633   …   0.0599012    1.35304    -1.71676      2.97701\n  2.29519     0.350485    0.0329258  -1.27887       -0.111427     0.310635   -0.609061     1.02108\n -0.355021    1.02729     0.0643587   0.310569      -0.311599     1.7257     -0.237372     0.157098\n -0.579994   -0.519215   -0.130233    1.57748        1.67771     -2.05564     1.55592     -0.686499\n -1.896       0.205813    1.3863     -0.442864      -0.710938     0.0759636   0.421821     0.206832```","user":"UDB26738Q","ts":"1617217648.136800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0FaIw","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> A.A11 .= randn(100,100)\n100×100 Matrix{Float64}:\n  1.00968    -0.824987   -0.672428   -0.209466   …   0.665435     1.04087    -0.909561     0.661946\n -1.55436     1.27814     0.355801   -2.34013       -1.56122     -1.35066    -1.19271     -1.21697\n  1.74562    -0.904107    1.02839     0.914251       1.27307      0.362126    1.05474      0.803205\n  0.566044    0.35018     0.519268   -0.362893       0.386797     0.788164   -1.48867      0.828491\n  1.1803     -1.72552    -0.443239   -1.40584       -0.798822    -0.892746   -0.808278    -0.30085\n -0.402811   -0.0458537   0.29373     0.888424   …  -0.0864076   -0.094156   -0.19584     -0.546923\n  0.572773    0.549585   -0.340936    0.299991      -0.902006     0.438909   -0.164471     1.08717\n -0.455113   -0.333888    3.2866      0.821143       0.201106    -0.895053   -1.18506      0.820855\n -0.50814    -1.21901    -1.12111     0.651123      -0.167783    -0.190227   -0.0577606   -1.63118\n  0.0917562   1.43409     0.18172     1.49452        1.20469      1.55408     1.19264     -0.338192\n -0.557459    0.461155    1.25836     0.185935   …   0.841742    -1.00122    -0.00575198  -0.612068\n  0.375296   -1.48963    -1.24201     1.0392        -0.180763    -2.03154    -0.510516    -0.295732\n  1.6872     -0.307215   -0.873265    1.35682        0.00601207   1.18897    -0.43679     -0.0953721\n -2.30092    -1.06518     0.127037   -1.77376        0.541281     0.299068   -0.913182     0.686406\n -0.0355724   1.19314     0.923661   -1.80452        0.224059     0.273876    0.670953     1.55802\n  ⋮                                              ⋱                                        \n -0.18688     1.62338    -0.448772   -1.33728    …  -0.285296    -1.41312     2.27165      0.365035\n -0.460441   -0.18178    -1.03662    -0.825501       1.82787     -2.20319    -0.690852     0.7997\n -0.672455   -0.853286   -0.238877    0.262321       1.28923     -0.210839   -1.1385      -0.0890767\n -0.494542    0.467774    1.35909    -0.0419347      1.61856      0.580987   -0.537145    -0.644325\n -0.250761   -0.76077     1.45056    -0.533245      -1.99462      2.21053    -1.39365      0.190861\n -2.99285     1.64819     1.52226     1.56755    …   1.30598     -0.508705    0.176616    -0.408536\n  1.28596     2.36339     0.507364   -0.831202       1.33889      0.143239    1.54307      1.21562\n -1.05518     1.37098     2.33816    -0.644921      -0.634318     0.306387   -0.921909     0.136558\n -1.34482     0.122218    0.606934    0.0221828     -1.26779     -0.367997   -0.478323     0.89442\n -0.44622    -0.770243    0.761841    0.488944       2.99908     -0.538932    1.23151      0.579629\n -1.42866    -0.102366   -1.24313     0.917633   …   0.0599012    1.35304    -1.71676      2.97701\n  2.29519     0.350485    0.0329258  -1.27887       -0.111427     0.310635   -0.609061     1.02108\n -0.355021    1.02729     0.0643587   0.310569      -0.311599     1.7257     -0.237372     0.157098\n -0.579994   -0.519215   -0.130233    1.57748        1.67771     -2.05564     1.55592     -0.686499\n -1.896       0.205813    1.3863     -0.442864      -0.710938     0.0759636   0.421821     0.206832"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"74c772f3-34da-469c-8958-28f489875144","type":"message","text":"hmm it seems I don't understand what mutation is","user":"U01L0RJC6FM","ts":"1617217649.137000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZAX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmm it seems I don't understand what mutation is"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"979f30ab-ae4f-474e-82b4-f442f68e97b5","type":"message","text":"aha","user":"U01L0RJC6FM","ts":"1617217678.137200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ENodH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"aha"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"5cf86604-eb60-4262-95b4-16fe9ee88597","type":"message","text":"`identifier = value` _always_ rebinds the identifier to the new `value`, it doesn't mutate the memory pointed to by the identifier","user":"UDB26738Q","ts":"1617217689.137400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/Sz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"identifier = value","style":{"code":true}},{"type":"text","text":" "},{"type":"text","text":"always","style":{"italic":true}},{"type":"text","text":" rebinds the identifier to the new "},{"type":"text","text":"value","style":{"code":true}},{"type":"text","text":", it doesn't mutate the memory pointed to by the identifier"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"a7823bfb-02c6-44f5-8c78-6b57eddfba5b","type":"message","text":"but that only works if I have a dense submatrix right?","user":"U01L0RJC6FM","ts":"1617217701.137600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hdVS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but that only works if I have a dense submatrix right?"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"6830aeba-5149-4ae0-8b9b-de3549410513","type":"message","text":"in my case I often have some custom matrix types.. like a low-rank matrix","user":"U01L0RJC6FM","ts":"1617217721.137800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TE1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in my case I often have some custom matrix types.. like a low-rank matrix"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"635ab44a-5d95-404c-a770-b3bf100197db","type":"message","text":"it works as long as you can _mutate_ the fields without doing `A.A11 = something`, because that's assignment, not mutation.  assignment does _*not*_ mutate","user":"UDB26738Q","ts":"1617217755.138000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Vs6t","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it works as long as you can "},{"type":"text","text":"mutate","style":{"italic":true}},{"type":"text","text":" the fields without doing "},{"type":"text","text":"A.A11 = something","style":{"code":true}},{"type":"text","text":", because that's assignment, not mutation.  assignment does "},{"type":"text","text":"not","style":{"bold":true,"italic":true}},{"type":"text","text":" mutate"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"bc0d1357-d5a1-4655-9dee-dd98cea7ae21","type":"message","text":"ok thanks, that makes sense","user":"U01L0RJC6FM","ts":"1617217776.138200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+ZS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ok thanks, that makes sense"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"22eefea5-858f-4831-b741-49b2afe36d36","type":"message","text":"so let me reformulate my original question","user":"U01L0RJC6FM","ts":"1617217785.138400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"l1L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so let me reformulate my original question"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"549f2ea6-806a-467b-9474-cdaac2c4cca0","type":"message","text":"how could I achieve that if I have some matrix type that is difficult to mutate..","user":"U01L0RJC6FM","ts":"1617217812.138600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Yetiu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"how could I achieve that if I have some matrix type that is difficult to mutate.."}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"eb28828c-106d-4224-9338-4b02c773be8f","type":"message","text":"so for instance I don't know up front if my Schur complement is going to be a dense matrix or sparse or something else","user":"U01L0RJC6FM","ts":"1617217840.138800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Dq+m","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so for instance I don't know up front if my Schur complement is going to be a dense matrix or sparse or something else"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"1366c6a8-b54b-4733-ab89-8b36b5922ad0","type":"message","text":"so you don't know the type of one of the fields?","user":"UDB26738Q","ts":"1617217920.139600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1Z7H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so you don't know the type of one of the fields?"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"c2964126-4f21-4f80-9c2e-0ab5ef573fbd","type":"message","text":"exactly","user":"U01L0RJC6FM","ts":"1617217933.139800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qc/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"exactly"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"e0d503d1-eddb-4e1c-9ef6-3351e077970c","type":"message","text":"maybe I do but even then mutating is not possibnle","user":"U01L0RJC6FM","ts":"1617217945.140000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ssV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"maybe I do but even then mutating is not possibnle"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"f1ed77d8-a3ef-42ef-994c-cb1a4fa1e83a","type":"message","text":"think of a low-rank matrix","user":"U01L0RJC6FM","ts":"1617217951.140200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qkWV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"think of a low-rank matrix"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"f1a711b2-3cf2-4818-a5a6-90de85d434c3","type":"message","text":"since the type of those fields are parameters of the type, that can't possibly work","user":"UDB26738Q","ts":"1617217960.140400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sbche","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"since the type of those fields are parameters of the type, that can't possibly work"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"a5c2373d-e043-436e-802e-385f056cd0b3","type":"message","text":"if I do not know the rank up front I do not know the memory required to store `U*V'`","user":"U01L0RJC6FM","ts":"1617217988.140600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SIO0u","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if I do not know the rank up front I do not know the memory required to store "},{"type":"text","text":"U*V'","style":{"code":true}}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"48ccc0de-83a5-4b41-9124-5dac9dcb91a3","type":"message","text":"uh, ok","user":"UDB26738Q","ts":"1617218004.140800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RcX3m","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"uh, ok"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"6ae6fa16-54ce-4aad-b47c-343e4528e00b","type":"message","text":"then no, it looks like you really need a mutable struct","user":"UDB26738Q","ts":"1617218023.141000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gs6aR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"then no, it looks like you really need a mutable struct"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"d2e5aca3-6c43-4b27-abf3-c416e8eb2381","type":"message","text":"aha, but I could have like a temporary field S22 to store it and that could have the type any no?","user":"U01L0RJC6FM","ts":"1617218030.141200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gNhm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"aha, but I could have like a temporary field S22 to store it and that could have the type any no?"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"94ca9f9d-2974-4692-b3af-295c02e3c4e3","type":"message","text":"immutable struct are more efficient exactly because they're more \"well defined\" upfront :slightly_smiling_face:","user":"UDB26738Q","ts":"1617218049.141400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Powx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"immutable struct are more efficient exactly because they're more \"well defined\" upfront "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"f2c894b9-1337-4bd8-b7f5-bb93667b4f28","type":"message","text":"I see... if you were to write a code where you cache this Schur complement that is related to this object.. how would you do it?","user":"U01L0RJC6FM","ts":"1617218097.141800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mvM7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see... if you were to write a code where you cache this Schur complement that is related to this object.. how would you do it?"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"02ff46fa-5e56-4f2b-a1ed-7e2338bdb24d","type":"message","text":"it seems stupid to slow down performance by double just becvause I want to cache this object","user":"U01L0RJC6FM","ts":"1617218119.142000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EwL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it seems stupid to slow down performance by double just becvause I want to cache this object"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"d7314607-0aaf-4bc2-bbd2-2f2a6ca72a07","type":"message","text":"I think there is a trade-off here: if you want to save calculations you want to cache an object of unknown size, but to efficiently store it you need its size.  not sure you can do both, not super easily at least","user":"UDB26738Q","ts":"1617218238.142600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+a79","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think there is a trade-off here: if you want to save calculations you want to cache an object of unknown size, but to efficiently store it you need its size.  not sure you can do both, not super easily at least"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"8d2994a8-1195-4db8-9472-d8754d0f9a6d","type":"message","text":"oh ok.. hmm thanks. I was basically wondering this... it seems it could be nice to be able to specify mutability field by field","user":"U01L0RJC6FM","ts":"1617218289.142800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"drb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh ok.. hmm thanks. I was basically wondering this... it seems it could be nice to be able to specify mutability field by field"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"ac6b982b-ec5f-4d65-91ce-8c776e6eb12c","type":"message","text":"you can wrap it in a mutable field","user":"UDB26738Q","ts":"1617218351.143000","team":"T68168MUP","edited":{"user":"UDB26738Q","ts":"1617218357.000000"},"blocks":[{"type":"rich_text","block_id":"nud","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can wrap it in a mutable field"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"072837de-ff02-4353-9f78-4d9a2de01dd8","type":"message","text":"```julia&gt; mutable struct MutableContainer\n           A\n       end\n\njulia&gt; struct Foo\n           x::Matrix{Float64}\n           MC::MutableContainer\n       end\n\njulia&gt; foo = Foo(rand(2, 2), MutableContainer(rand(2, 2)))\nFoo([0.6271976066010347 0.5376839138580192; 0.2388362819022145 0.41286336485766295], MutableContainer([0.008871572891110846 0.46066998750865573; 0.22950995615602832 0.25825607632142455]))\n\njulia&gt; foo.MC.A = rand(3, 3)\n3×3 Matrix{Float64}:\n 0.387627  0.0783521  0.702621\n 0.832987  0.423422   0.220655\n 0.12735   0.186503   0.998612\n\njulia&gt; <http://foo.MC|foo.MC>\nMutableContainer([0.3876265523194333 0.07835213518613804 0.7026214689283292; 0.8329868204457835 0.42342233818666664 0.22065456520413163; 0.12734973318345366 0.18650298067879945 0.998612281926986])```","user":"UDB26738Q","ts":"1617218536.143700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DHF","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> mutable struct MutableContainer\n           A\n       end\n\njulia> struct Foo\n           x::Matrix{Float64}\n           MC::MutableContainer\n       end\n\njulia> foo = Foo(rand(2, 2), MutableContainer(rand(2, 2)))\nFoo([0.6271976066010347 0.5376839138580192; 0.2388362819022145 0.41286336485766295], MutableContainer([0.008871572891110846 0.46066998750865573; 0.22950995615602832 0.25825607632142455]))\n\njulia> foo.MC.A = rand(3, 3)\n3×3 Matrix{Float64}:\n 0.387627  0.0783521  0.702621\n 0.832987  0.423422   0.220655\n 0.12735   0.186503   0.998612\n\njulia> foo.MC\nMutableContainer([0.3876265523194333 0.07835213518613804 0.7026214689283292; 0.8329868204457835 0.42342233818666664 0.22065456520413163; 0.12734973318345366 0.18650298067879945 0.998612281926986])"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"5f5faf28-15e9-4faf-a712-b437266a79a2","type":"message","text":"ah nice!","user":"U01L0RJC6FM","ts":"1617218628.143900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DdDqP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah nice!"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"dd60cb58-6dfe-4b82-b21b-49e5b41aa98a","type":"message","text":"this is what I need... I just make a containe that holds the block matrix and the Schur complement","user":"U01L0RJC6FM","ts":"1617218651.144100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"63ykD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this is what I need... I just make a containe that holds the block matrix and the Schur complement"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"d6725862-8ecb-42db-9f1c-51aa52edd0f3","type":"message","text":":nesting_dolls:","user":"UDB26738Q","ts":"1617218673.144300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3dGX","elements":[{"type":"rich_text_section","elements":[{"type":"emoji","name":"nesting_dolls"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"ad08a03d-61ae-464c-9ff3-f01880438826","type":"message","text":"hehe the Matroska is appropriate :slightly_smiling_face:","user":"U01L0RJC6FM","ts":"1617218688.144500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"de4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hehe the Matroska is appropriate "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"9871c5c6-1b9a-42a3-a5f4-a2d6b22ffc29","type":"message","text":"perhaps this could be an interesting package","user":"UDB26738Q","ts":"1617218743.144700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZUU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"perhaps this could be an interesting package"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"a073c957-04d8-48bb-a80e-d38dbf170788","type":"message","text":"a package which does the wrapping with a mutable container for you transparently","user":"UDB26738Q","ts":"1617218789.144900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zvv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"a package which does the wrapping with a mutable container for you transparently"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"7cfb4c4c-460e-4cdb-8587-2487276294c2","type":"message","text":"but look at the performance","user":"UDB26738Q","ts":"1617218795.145100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OY1MA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but look at the performance"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"2aa96cf3-f695-4436-8d33-fc0e313c7660","type":"message","text":"it may not be much better than having the whole struct mutable anyway","user":"UDB26738Q","ts":"1617218810.145300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UOktC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it may not be much better than having the whole struct mutable anyway"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"2030a064-b925-456a-8023-9273f15b73ae","type":"message","text":"I think so.. sometimes I feel Julia is a bit clumsy due to it's avoidance of pointers","user":"U01L0RJC6FM","ts":"1617219032.145500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"X33p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think so.. sometimes I feel Julia is a bit clumsy due to it's avoidance of pointers"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"a027ae26-d60f-4150-90df-4d711a54b06a","type":"message","text":"well, no way around it i guess.. if you want pointers use C","user":"U01L0RJC6FM","ts":"1617219044.145700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0z6u","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well, no way around it i guess.. if you want pointers use C"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"d174507c-0ccc-469b-b6af-276f576351e4","type":"message","text":"you can also use pointers if you want, but pointers don't really have \"structure\"","user":"UDB26738Q","ts":"1617219092.145900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ATrJm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can also use pointers if you want, but pointers don't really have \"structure\""}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"7ad0dc79-2ae3-4331-910b-8396c1270b4c","type":"message","text":"no thats true","user":"U01L0RJC6FM","ts":"1617219161.146100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GYtI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no thats true"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"}]