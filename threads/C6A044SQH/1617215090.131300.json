[{"client_msg_id":"67dbe6b3-a5b6-4bb9-ab63-3bd136e78cfe","type":"message","text":"A question regarding `mutable` : I have a custom type `BlockMatrix` , which basically holds 4 matrices to represent a 2x2 block matrix. If I define it to be a non-mutable struct, my code exectues around two times faster than when I allow it to be mutable. Allocations etc stay exactly the same. My question is why?\n\nI want to be able to cache the Schur complement `S22 = A22 - A21*(A11\\A12)`  to avoid re-computing it over and over again. But otherwise I would like to keep everything else immutable for performance. What would be a good way of achieving this?","user":"U01L0RJC6FM","ts":"1617215090.131300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"H88n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"A question regarding "},{"type":"text","text":"mutable","style":{"code":true}},{"type":"text","text":" : I have a custom type "},{"type":"text","text":"BlockMatrix","style":{"code":true}},{"type":"text","text":" , which basically holds 4 matrices to represent a 2x2 block matrix. If I define it to be a non-mutable struct, my code exectues around two times faster than when I allow it to be mutable. Allocations etc stay exactly the same. My question is why?\n\nI want to be able to cache the Schur complement "},{"type":"text","text":"S22 = A22 - A21*(A11\\A12)","style":{"code":true}},{"type":"text","text":"  to avoid re-computing it over and over again. But otherwise I would like to keep everything else immutable for performance. What would be a good way of achieving this?"}]}]}],"thread_ts":"1617215090.131300","reply_count":1,"reply_users_count":1,"latest_reply":"1617215155.131400","reply_users":["UDB26738Q"],"is_locked":false,"subscribed":false},{"client_msg_id":"1fd6c793-e142-48eb-bbf4-f4344bb08e5e","type":"message","text":"1. immutable struct are more efficient because they can be stack-allocated more easily\n2. you can still mutate fields of immutable structs","user":"UDB26738Q","ts":"1617215155.131400","team":"T68168MUP","edited":{"user":"UDB26738Q","ts":"1617215196.000000"},"blocks":[{"type":"rich_text","block_id":"YfO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"1. immutable struct are more efficient because they can be stack-allocated more easily\n2. you can still mutate fields of immutable structs"}]}]}],"thread_ts":"1617215090.131300","parent_user_id":"U01L0RJC6FM"}]