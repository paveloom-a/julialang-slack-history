[{"client_msg_id":"b4dfaa15-6a5e-4123-9ef9-2dc27e6e434c","type":"message","text":"does anybody know why performance for broadcasting getindex is an order of magnitude slower than first?\n```julia&gt; typeof(data)\nArray{Tuple{Int64,String},1}\n\njulia&gt; length(data)\n1000\n\njulia&gt; @benchmark first.(data)\nBenchmarkTools.Trial:\n  memory estimate:  8.00 KiB\n  allocs estimate:  4\n  --------------\n  minimum time:     880.952 ns (0.00% GC)\n  median time:      1.205 μs (0.00% GC)\n  mean time:        1.336 μs (9.94% GC)\n  maximum time:     47.986 μs (93.33% GC)\n  --------------\n  samples:          10000\n  evals/sample:     21\n\njulia&gt; @benchmark getindex.(data,1)\nBenchmarkTools.Trial:\n  memory estimate:  39.36 KiB\n  allocs estimate:  1006\n  --------------\n  minimum time:     17.299 μs (0.00% GC)\n  median time:      18.000 μs (0.00% GC)\n  mean time:        19.646 μs (3.50% GC)\n  maximum time:     1.082 ms (97.40% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1```","user":"UMWFZF5DW","ts":"1608300016.424800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ukKsS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"does anybody know why performance for broadcasting getindex is an order of magnitude slower than first?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> typeof(data)\nArray{Tuple{Int64,String},1}\n\njulia> length(data)\n1000\n\njulia> @benchmark first.(data)\nBenchmarkTools.Trial:\n  memory estimate:  8.00 KiB\n  allocs estimate:  4\n  --------------\n  minimum time:     880.952 ns (0.00% GC)\n  median time:      1.205 μs (0.00% GC)\n  mean time:        1.336 μs (9.94% GC)\n  maximum time:     47.986 μs (93.33% GC)\n  --------------\n  samples:          10000\n  evals/sample:     21\n\njulia> @benchmark getindex.(data,1)\nBenchmarkTools.Trial:\n  memory estimate:  39.36 KiB\n  allocs estimate:  1006\n  --------------\n  minimum time:     17.299 μs (0.00% GC)\n  median time:      18.000 μs (0.00% GC)\n  mean time:        19.646 μs (3.50% GC)\n  maximum time:     1.082 ms (97.40% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1"}]}]}],"thread_ts":"1608300016.424800","reply_count":8,"reply_users_count":3,"latest_reply":"1608731610.347700","reply_users":["U0179G7FG4F","UMWFZF5DW","UH8A351DJ"],"subscribed":false},{"client_msg_id":"0d772de1-6165-4378-84d7-94cc9865e801","type":"message","text":"Type instability","user":"U0179G7FG4F","ts":"1608300243.425300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QTu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Type instability"}]}]}],"thread_ts":"1608300016.424800","parent_user_id":"UMWFZF5DW"},{"client_msg_id":"c38c90be-43aa-48f6-baa6-ff72cc322190","type":"message","text":"but why does first not have that same problem","user":"UMWFZF5DW","ts":"1608310715.457000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d/jbe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but why does first not have that same problem"}]}]}],"thread_ts":"1608300016.424800","parent_user_id":"UMWFZF5DW"},{"client_msg_id":"f2139beb-81c4-4670-8198-5274a30aebd7","type":"message","text":"or using getindex with map or comprehension","user":"UMWFZF5DW","ts":"1608310812.457800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PhSFb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or using getindex with map or comprehension"}]}]}],"thread_ts":"1608300016.424800","parent_user_id":"UMWFZF5DW"},{"client_msg_id":"f9fc5fe4-b0b4-42fa-8933-3fddb0a15ee5","type":"message","text":"The problem with `getindex` is that the implimentation is `@eval getindex(@nospecialize(t::Tuple), i::Int) = getfield(t, i, $(Expr(:boundscheck)))`. I'm not fully sure why the `@nospecialize` is there. Presumably not having it blows up compile times in some cases.","user":"U0179G7FG4F","ts":"1608311014.460200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h=Q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The problem with "},{"type":"text","text":"getindex","style":{"code":true}},{"type":"text","text":" is that the implimentation is "},{"type":"text","text":"@eval getindex(@nospecialize(t::Tuple), i::Int) = getfield(t, i, $(Expr(:boundscheck)))","style":{"code":true}},{"type":"text","text":". I'm not fully sure why the "},{"type":"text","text":"@nospecialize","style":{"code":true}},{"type":"text","text":" is there. Presumably not having it blows up compile times in some cases."}]}]}],"thread_ts":"1608300016.424800","parent_user_id":"UMWFZF5DW"},{"client_msg_id":"5b347b94-b61e-45dc-a420-e345f0b645b3","type":"message","text":"because every tuple that has different content/length is a different type? so might not want to specialize on that","user":"UH8A351DJ","ts":"1608323695.481300","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1608323700.000000"},"blocks":[{"type":"rich_text","block_id":"7fKF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"because every tuple that has different content/length is a different type? so might not want to specialize on that"}]}]}],"thread_ts":"1608300016.424800","parent_user_id":"UMWFZF5DW","reactions":[{"name":"+1","users":["U0179G7FG4F"],"count":1}]},{"client_msg_id":"0a317790-c3f8-40e5-823e-1fe2eee863ae","type":"message","text":"I still don't get why we don't have lazy specialization. I. e. inline&amp;specialize but don't store that specialization. That would be good for very short functions because re-specializing doesn't cost much compared to the performance loss of the inference barrier","user":"UMWFZF5DW","ts":"1608343696.492200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dTkI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I still don't get why we don't have lazy specialization. I. e. inline&specialize but don't store that specialization. That would be good for very short functions because re-specializing doesn't cost much compared to the performance loss of the inference barrier"}]}]}],"thread_ts":"1608300016.424800","parent_user_id":"UMWFZF5DW"},{"client_msg_id":"e76b3018-4bc0-4922-801e-cc29b34f609b","type":"message","text":"what is lazy specialization?","user":"UH8A351DJ","ts":"1608344050.492500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eDk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what is lazy specialization?"}]}]}],"thread_ts":"1608300016.424800","parent_user_id":"UMWFZF5DW"},{"client_msg_id":"ed9a7bfc-b298-4a31-b067-929e0a7777f4","type":"message","text":"I. e. inline&amp;specialize but don't store that specialization","user":"UMWFZF5DW","ts":"1608731610.347700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d/P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I. e. inline&specialize but don't store that specialization"}]}]}],"thread_ts":"1608300016.424800","parent_user_id":"UMWFZF5DW"}]