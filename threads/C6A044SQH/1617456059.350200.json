[{"type":"message","text":"","user":"U01L0RJC6FM","ts":"1617456059.350200","team":"T68168MUP","attachments":[{"fallback":"[April 3rd, 2021 3:20 PM] bonevbs: follow-up question on a question i posted earlier:\n\nI believe that I have a type stability issue with the following function:\n```function _assemble_blocks(A::AbstractMatrix{T}, S1::AbstractMatrix{T}, S2::AbstractMatrix{T}, int1::Vector{Int}, int2::Vector{Int}, bnd1::Vector{Int}, bnd2::Vector{Int}; args...) where T\n  ni1 = length(int1); nb1 = length(bnd1)\n  ni2 = length(int2); nb2 = length(bnd2)\n  Aii = BlockMatrix(S1[1:ni1, 1:ni1], A[int1, int2], A[int2, int1], S2[1:ni2, 1:ni2])\n  Aib = BlockMatrix(S1[1:ni1, ni1+1:ni1+nb1], A[int1, bnd2], A[int2, bnd1], S2[1:ni2, ni2+1:ni2+nb2])\n  Abi = BlockMatrix(S1[ni1+1:ni1+nb1, 1:ni1], A[bnd1, int2], A[bnd2, int1], S2[ni2+1:ni2+nb2, 1:ni2])\n  Abb = BlockMatrix(S1[ni1+1:ni1+nb1, ni1+1:ni1+nb1], A[bnd1, bnd2], A[bnd2, bnd1], S2[ni2+1:ni2+nb2, ni2+1:ni2+nb2])\n  return Aii, Aib, Abi, Abb\nend```\n`@code_warntype`  complains that the return type is `Ntuple{4,Any}`  and I believe that this is where all my trouble originates. The members of the tuple are all `BlockMatrix{T,T11,T12,T21,T22}`  types with same `T`  but different `T11`  etc. however they're all `AbstractArray` . Am I understanding it right that at the end when this ufnction gets called\n```Aii, Aib, Abi, Abb = _assemble_blocks(...)```\ntype-inference stops working as `Aii`  is of type `Any` ? If so, what would be a better way of writing `_assemble_blocks` ? Should I define the return-type?","ts":"1617456027.350000","author_id":"U01L0RJC6FM","author_subname":"Boris Bonev","channel_id":"C6A044SQH","channel_name":"helpdesk","is_msg_unfurl":true,"is_reply_unfurl":true,"text":"follow-up question on a question i posted earlier:\n\nI believe that I have a type stability issue with the following function:\n```function _assemble_blocks(A::AbstractMatrix{T}, S1::AbstractMatrix{T}, S2::AbstractMatrix{T}, int1::Vector{Int}, int2::Vector{Int}, bnd1::Vector{Int}, bnd2::Vector{Int}; args...) where T\n  ni1 = length(int1); nb1 = length(bnd1)\n  ni2 = length(int2); nb2 = length(bnd2)\n  Aii = BlockMatrix(S1[1:ni1, 1:ni1], A[int1, int2], A[int2, int1], S2[1:ni2, 1:ni2])\n  Aib = BlockMatrix(S1[1:ni1, ni1+1:ni1+nb1], A[int1, bnd2], A[int2, bnd1], S2[1:ni2, ni2+1:ni2+nb2])\n  Abi = BlockMatrix(S1[ni1+1:ni1+nb1, 1:ni1], A[bnd1, int2], A[bnd2, int1], S2[ni2+1:ni2+nb2, 1:ni2])\n  Abb = BlockMatrix(S1[ni1+1:ni1+nb1, ni1+1:ni1+nb1], A[bnd1, bnd2], A[bnd2, bnd1], S2[ni2+1:ni2+nb2, ni2+1:ni2+nb2])\n  return Aii, Aib, Abi, Abb\nend```\n`@code_warntype`  complains that the return type is `Ntuple{4,Any}`  and I believe that this is where all my trouble originates. The members of the tuple are all `BlockMatrix{T,T11,T12,T21,T22}`  types with same `T`  but different `T11`  etc. however they're all `AbstractArray` . Am I understanding it right that at the end when this ufnction gets called\n```Aii, Aib, Abi, Abb = _assemble_blocks(...)```\ntype-inference stops working as `Aii`  is of type `Any` ? If so, what would be a better way of writing `_assemble_blocks` ? Should I define the return-type?","author_name":"Boris Bonev","author_link":"https://julialang.slack.com/team/U01L0RJC6FM","author_icon":"https://secure.gravatar.com/avatar/53605d00fe178b7a09a5b0fa81c4cefc.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0000-48.png","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https://julialang.slack.com/archives/C6A044SQH/p1617456027350000?thread_ts=1617445891343600&cid=C6A044SQH","is_share":true,"footer":"From a thread in #helpdesk"}],"thread_ts":"1617456059.350200","reply_count":4,"reply_users_count":3,"latest_reply":"1617469056.371700","reply_users":["U01PLQWQXPV","UH24GRBLL","U01L0RJC6FM"],"is_locked":false,"subscribed":false},{"client_msg_id":"f3f6c479-4c6b-4850-b4e0-9bd061d4234c","type":"message","text":"Julia does not have arrow types. Annotating the return type would only guarantee some type conversion when returning.\n\nIt would be extremely helpful for us and for you if you could write a minimal working (or broken :upside_down_face:) example. At the moment there is way too much noise for people who are not acquainted with your code to get down to the problem","user":"U01PLQWQXPV","ts":"1617457551.350600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HQpKm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Julia does not have arrow types. Annotating the return type would only guarantee some type conversion when returning.\n\nIt would be extremely helpful for us and for you if you could write a minimal working (or broken "},{"type":"emoji","name":"upside_down_face"},{"type":"text","text":") example. At the moment there is way too much noise for people who are not acquainted with your code to get down to the problem"}]}]}],"thread_ts":"1617456059.350200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"c9aa177a-7037-42ab-b431-3bae575cf032","type":"message","text":"Could be that the constructor for your `BlockMatrix` type is unstable?","user":"UH24GRBLL","ts":"1617462843.352000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vzcCu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Could be that the constructor for your "},{"type":"text","text":"BlockMatrix","style":{"code":true}},{"type":"text","text":" type is unstable?"}]}]}],"thread_ts":"1617456059.350200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"d231b452-3c35-4d69-a3c3-33f37ec7394f","type":"message","text":"oh i just saw that the thread here doesn't get appended to the other type :slightly_smiling_face: the MWE in the previous question seems to be working now","user":"U01L0RJC6FM","ts":"1617468994.371500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O7u","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh i just saw that the thread here doesn't get appended to the other type "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":" the MWE in the previous question seems to be working now"}]}]}],"thread_ts":"1617456059.350200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"9acbdb05-810c-4530-8736-32852f754a59","type":"message","text":"<@UH24GRBLL> yes, I do have some type-instability further down.. in fact I will try to resolve that tonight.. hopefully yielding more performant code by tomorrow :grin::muscle:","user":"U01L0RJC6FM","ts":"1617469056.371700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ENj2","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH24GRBLL"},{"type":"text","text":" yes, I do have some type-instability further down.. in fact I will try to resolve that tonight.. hopefully yielding more performant code by tomorrow "},{"type":"emoji","name":"grin"},{"type":"emoji","name":"muscle"}]}]}],"thread_ts":"1617456059.350200","parent_user_id":"U01L0RJC6FM"}]