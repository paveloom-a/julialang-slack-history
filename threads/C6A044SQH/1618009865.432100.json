[{"client_msg_id":"2950d197-3861-45ef-8de1-6ad2661203c8","type":"message","text":"I’m curious if anyone is aware or uses a particular pattern for “module-specific” dispatching; i.e. dispatching to a method overloaded by a particular module. The pattern I’m thinking about is something like:\n```module InterfacePkg\n\nfunction foo end\n\n# generic fallback definition; pass `nothing` for module\nfoo(::Type{T}) where {T} = foo(nothing, T)\n\n# fallback if module hasn't overloaded\nfoo(mod, ::Type{T}) where {T} = nothing\n\nend # InterfacePkg\n\nmodule ImplPkg\n\nusing InterfacePkg\n\nstruct ImplStruct end\n\nInterfacePkg.foo(::???, ::Type{ImplStruct}) = \"ImplStruct\"\n\nend # ImplPkg```\nMy question is what to use for the `mod` and `???` arguments. `Val`? Some `abstract type` w/ overloading modules defining their own subtype? There isn’t a more obvious/builtin way to “dispatch” on modules, is there?","user":"U681ELA87","ts":"1618009865.432100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DLZu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’m curious if anyone is aware or uses a particular pattern for “module-specific” dispatching; i.e. dispatching to a method overloaded by a particular module. The pattern I’m thinking about is something like:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"module InterfacePkg\n\nfunction foo end\n\n# generic fallback definition; pass `nothing` for module\nfoo(::Type{T}) where {T} = foo(nothing, T)\n\n# fallback if module hasn't overloaded\nfoo(mod, ::Type{T}) where {T} = nothing\n\nend # InterfacePkg\n\nmodule ImplPkg\n\nusing InterfacePkg\n\nstruct ImplStruct end\n\nInterfacePkg.foo(::???, ::Type{ImplStruct}) = \"ImplStruct\"\n\nend # ImplPkg"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"My question is what to use for the "},{"type":"text","text":"mod","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"???","style":{"code":true}},{"type":"text","text":" arguments. "},{"type":"text","text":"Val","style":{"code":true}},{"type":"text","text":"? Some "},{"type":"text","text":"abstract type","style":{"code":true}},{"type":"text","text":" w/ overloading modules defining their own subtype? There isn’t a more obvious/builtin way to “dispatch” on modules, is there?"}]}]}],"thread_ts":"1618009865.432100","reply_count":6,"reply_users_count":4,"latest_reply":"1618067022.456900","reply_users":["UH24GRBLL","U68QW0PUZ","UM30MT6RF","U681ELA87"],"is_locked":false,"subscribed":false},{"client_msg_id":"e5079f95-1190-4c8c-813c-019488681b64","type":"message","text":"since `ImplStruct` is defined in `ImplPkg`, what's the additional advantage of having `???`?","user":"UH24GRBLL","ts":"1618035752.448500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MLety","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"since "},{"type":"text","text":"ImplStruct","style":{"code":true}},{"type":"text","text":" is defined in "},{"type":"text","text":"ImplPkg","style":{"code":true}},{"type":"text","text":", what's the additional advantage of having "},{"type":"text","text":"???","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1618009865.432100","parent_user_id":"U681ELA87"},{"client_msg_id":"30da6091-d898-4cf0-891c-45c12335b297","type":"message","text":"maybe wrap something that rather than using  `invoke(fn, ...)` uses a fully qualified `invoke(module.fn, ...)`","user":"U68QW0PUZ","ts":"1618035800.448900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YjW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"maybe wrap something that rather than using  "},{"type":"text","text":"invoke(fn, ...)","style":{"code":true}},{"type":"text","text":" uses a fully qualified "},{"type":"text","text":"invoke(module.fn, ...)","style":{"code":true}}]}]}],"thread_ts":"1618009865.432100","parent_user_id":"U681ELA87"},{"client_msg_id":"a309050e-1866-4749-bf6e-2594a06477d1","type":"message","text":"You can't use `Val` here, since modules are mutable. One option might be to dispatch on `Val{hash(module)}` though","user":"UM30MT6RF","ts":"1618047506.449300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Rbb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can't use "},{"type":"text","text":"Val","style":{"code":true}},{"type":"text","text":" here, since modules are mutable. One option might be to dispatch on "},{"type":"text","text":"Val{hash(module)}","style":{"code":true}},{"type":"text","text":" though"}]}]}],"thread_ts":"1618009865.432100","parent_user_id":"U681ELA87"},{"client_msg_id":"667e727c-ea1e-4776-a335-929d263ae792","type":"message","text":"Yeah, I was thinking about Val on the module name as a Symbol","user":"U681ELA87","ts":"1618066766.456500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"712n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, I was thinking about Val on the module name as a Symbol"}]}]}],"thread_ts":"1618009865.432100","parent_user_id":"U681ELA87"},{"client_msg_id":"1ca95b9c-7546-4ad5-ad48-98d743cd54ee","type":"message","text":"The name might not be unique, so I would be a bit careful about only using the name, but it depends on what you want to achieve of course.","user":"UM30MT6RF","ts":"1618066907.456700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NFTM/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The name might not be unique, so I would be a bit careful about only using the name, but it depends on what you want to achieve of course."}]}]}],"thread_ts":"1618009865.432100","parent_user_id":"U681ELA87"},{"client_msg_id":"b5c342d7-4548-4e54-a061-27b0978a77e3","type":"message","text":"Yeah, that's true. I guess I've been thinking the \"module\" here would actually correspond to a registered package, so assumed unique.","user":"U681ELA87","ts":"1618067022.456900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7iGY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, that's true. I guess I've been thinking the \"module\" here would actually correspond to a registered package, so assumed unique."}]}]}],"thread_ts":"1618009865.432100","parent_user_id":"U681ELA87"}]