[{"client_msg_id":"a8134a4d-650c-49fb-ae12-8b8b7c6db378","type":"message","text":"I'm trying to make a very hot function type stable, but it iterates over a heterogenous tuple. Is this one of the few times to use generated functions?","user":"UL4JREGCV","ts":"1617214422.125000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"N7M3a","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm trying to make a very hot function type stable, but it iterates over a heterogenous tuple. Is this one of the few times to use generated functions?"}]}]}],"thread_ts":"1617214422.125000","reply_count":23,"reply_users_count":3,"latest_reply":"1617216303.135300","reply_users":["UL4JREGCV","UH24GRBLL","UM30MT6RF"],"is_locked":false,"subscribed":false},{"client_msg_id":"126d4eb1-9f8a-4989-aa8c-58ee55667d8a","type":"message","text":"Code:\n```function make_ln_prior(priors)\n    function ln_prior(params)\n        lp = zero(first(params))\n        for i in eachindex(params)\n            pd = priors[i]\n            param = params[i]\n            lp += logpdf(pd, param)\n        end\n        return lp \n    end\n    return ln_prior\nend```","user":"UL4JREGCV","ts":"1617214430.125300","team":"T68168MUP","edited":{"user":"UL4JREGCV","ts":"1617214757.000000"},"blocks":[{"type":"rich_text","block_id":"XfE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Code:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function make_ln_prior(priors)\n    function ln_prior(params)\n        lp = zero(first(params))\n        for i in eachindex(params)\n            pd = priors[i]\n            param = params[i]\n            lp += logpdf(pd, param)\n        end\n        return lp \n    end\n    return ln_prior\nend"}]}]}],"thread_ts":"1617214422.125000","parent_user_id":"UL4JREGCV"},{"client_msg_id":"d1ae4331-6576-475c-9da7-f9402847952e","type":"message","text":"Where priors is a named tuple of Distributions and params is a tuple of Floats","user":"UL4JREGCV","ts":"1617214463.125600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Wix","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Where priors is a named tuple of Distributions and params is a tuple of Floats"}]}]}],"thread_ts":"1617214422.125000","parent_user_id":"UL4JREGCV"},{"client_msg_id":"e534e3d8-69f1-4c67-bb63-5f570838e020","type":"message","text":"I first looked into Unrolled.jl but it only allows me to unroll a loop over an argument to the function","user":"UL4JREGCV","ts":"1617214574.126600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gakx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I first looked into Unrolled.jl but it only allows me to unroll a loop over an argument to the function"}]}]}],"thread_ts":"1617214422.125000","parent_user_id":"UL4JREGCV"},{"client_msg_id":"247bbb29-90c7-42bd-9f47-45b86f2f5866","type":"message","text":"any particular reason you create an anonymous function and not just make `ln_prior` take two arguments?","user":"UH24GRBLL","ts":"1617214932.128000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tEQg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"any particular reason you create an anonymous function and not just make "},{"type":"text","text":"ln_prior","style":{"code":true}},{"type":"text","text":" take two arguments?"}]}]}],"thread_ts":"1617214422.125000","parent_user_id":"UL4JREGCV"},{"client_msg_id":"d79279c3-0dff-460b-9644-e5545d698759","type":"message","text":"ln_prior is called by an MCMC sampler with a tuple of parameter values","user":"UL4JREGCV","ts":"1617214959.128700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TpCfA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ln_prior is called by an MCMC sampler with a tuple of parameter values"}]}]}],"thread_ts":"1617214422.125000","parent_user_id":"UL4JREGCV"},{"client_msg_id":"4a02ba0e-7dc6-4eaa-bf3c-dbd80a3d7b72","type":"message","text":"So that part I can't easily change","user":"UL4JREGCV","ts":"1617214971.129100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"S/v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So that part I can't easily change"}]}]}],"thread_ts":"1617214422.125000","parent_user_id":"UL4JREGCV"},{"client_msg_id":"e541af75-83df-4a93-9e5f-fb1d5be0a5c3","type":"message","text":"I solved my own problem by unrolling it manually, but this is ugly and limits the number of variables I can pass to the function\n```function make_ln_prior(p1, p2=nothing, p3=nothing, p4=nothing, p5=nothing, p6=nothing, p7=nothing, p8=nothing, p9=nothing)\n    function ln_prior(params)\n        lp = zero(first(params))\n        lp += logpdf(p1, params[1])\n        if !isnothing(p2)\n            lp += logpdf(p2, params[2])\n        end\n        if !isnothing(p3)\n            lp += logpdf(p3, params[3])\n        end\n        if !isnothing(p4)\n            lp += logpdf(p4, params[4])\n        end\n        if !isnothing(p5)\n            lp += logpdf(p5, params[5])\n        end\n        if !isnothing(p6)\n            lp += logpdf(p6, params[6])\n        end\n        if !isnothing(p7)\n            lp += logpdf(p7, params[7])\n        end\n        if !isnothing(p8)\n            lp += logpdf(p8, params[8])\n        end\n        if !isnothing(p9)\n            lp += logpdf(p9, params[9])\n        end\n        return lp\n    end\n    return ln_prior\nend```","user":"UL4JREGCV","ts":"1617215209.131700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ldTdh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I solved my own problem by unrolling it manually, but this is ugly and limits the number of variables I can pass to the function\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function make_ln_prior(p1, p2=nothing, p3=nothing, p4=nothing, p5=nothing, p6=nothing, p7=nothing, p8=nothing, p9=nothing)\n    function ln_prior(params)\n        lp = zero(first(params))\n        lp += logpdf(p1, params[1])\n        if !isnothing(p2)\n            lp += logpdf(p2, params[2])\n        end\n        if !isnothing(p3)\n            lp += logpdf(p3, params[3])\n        end\n        if !isnothing(p4)\n            lp += logpdf(p4, params[4])\n        end\n        if !isnothing(p5)\n            lp += logpdf(p5, params[5])\n        end\n        if !isnothing(p6)\n            lp += logpdf(p6, params[6])\n        end\n        if !isnothing(p7)\n            lp += logpdf(p7, params[7])\n        end\n        if !isnothing(p8)\n            lp += logpdf(p8, params[8])\n        end\n        if !isnothing(p9)\n            lp += logpdf(p9, params[9])\n        end\n        return lp\n    end\n    return ln_prior\nend"}]}]}],"thread_ts":"1617214422.125000","parent_user_id":"UL4JREGCV"},{"client_msg_id":"925528b4-f215-4df7-8031-918b0d31ff9d","type":"message","text":"well the problem is that the element types of tuples are part of the type of that tuple","user":"UH24GRBLL","ts":"1617215239.131900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x5U","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well the problem is that the element types of tuples are part of the type of that tuple"}]}]}],"thread_ts":"1617214422.125000","parent_user_id":"UL4JREGCV"},{"client_msg_id":"19ae9dd7-d47b-475c-ad74-26d203c46f41","type":"message","text":"Indeed","user":"UL4JREGCV","ts":"1617215291.132300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LK1E4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Indeed"}]}]}],"thread_ts":"1617214422.125000","parent_user_id":"UL4JREGCV"},{"client_msg_id":"89cf74c3-bca7-430a-8fad-46734e2d1765","type":"message","text":"if `ln_prior` captures `priors`, it can't ever be type stable because at compile time the type of `priors` turns opaque, since it gets boxed","user":"UH24GRBLL","ts":"1617215292.132500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pN3R","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if "},{"type":"text","text":"ln_prior","style":{"code":true}},{"type":"text","text":" captures "},{"type":"text","text":"priors","style":{"code":true}},{"type":"text","text":", it can't ever be type stable because at compile time the type of "},{"type":"text","text":"priors","style":{"code":true}},{"type":"text","text":" turns opaque, since it gets boxed"}]}]}],"thread_ts":"1617214422.125000","parent_user_id":"UL4JREGCV"},{"client_msg_id":"29357cb1-d1cf-4778-835e-d73996e29779","type":"message","text":"you could explicitly wrap `priors` in a `Ref` though, I think","user":"UH24GRBLL","ts":"1617215309.132700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YG8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you could explicitly wrap "},{"type":"text","text":"priors","style":{"code":true}},{"type":"text","text":" in a "},{"type":"text","text":"Ref","style":{"code":true}},{"type":"text","text":" though, I think"}]}]}],"thread_ts":"1617214422.125000","parent_user_id":"UL4JREGCV"},{"client_msg_id":"e4cbd48f-30f1-4c83-96db-141970bae12c","type":"message","text":"e.g.\n\n```function make_ln_prior(priors)\n    p_ref = Ref(priors)    \n    function ln_prior(params)\n        lp = zero(first(params))\n        for i in eachindex(params)\n            pd = p_ref[][i]\n            param = params[i]\n            lp += logpdf(pd, param)\n        end\n        return lp \n    end\n    return ln_prior\nend```\nmay be better","user":"UH24GRBLL","ts":"1617215351.132900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"03P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"e.g.\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function make_ln_prior(priors)\n    p_ref = Ref(priors)    \n    function ln_prior(params)\n        lp = zero(first(params))\n        for i in eachindex(params)\n            pd = p_ref[][i]\n            param = params[i]\n            lp += logpdf(pd, param)\n        end\n        return lp \n    end\n    return ln_prior\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nmay be better"}]}]}],"thread_ts":"1617214422.125000","parent_user_id":"UL4JREGCV"},{"client_msg_id":"9f972526-c134-48ce-af70-3ee98cde65d3","type":"message","text":"I'm not sure that's the case. Sometimes closures don't make the outer value get boxed.","user":"UL4JREGCV","ts":"1617215361.133200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=Kj9K","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not sure that's the case. Sometimes closures don't make the outer value get boxed."}]}]}],"thread_ts":"1617214422.125000","parent_user_id":"UL4JREGCV"},{"client_msg_id":"5133b68f-2e21-43fc-b67d-70990a055930","type":"message","text":"Recursive implementations generally work quite well with heterogeneous tuples. `foldl` should as well, if that works for you","user":"UM30MT6RF","ts":"1617215369.133400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Gud","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Recursive implementations generally work quite well with heterogeneous tuples. "},{"type":"text","text":"foldl","style":{"code":true}},{"type":"text","text":" should as well, if that works for you"}]}]}],"thread_ts":"1617214422.125000","parent_user_id":"UL4JREGCV"},{"client_msg_id":"3dc81701-88a7-4293-ae3a-724a55327e22","type":"message","text":"Interesting, thanks","user":"UL4JREGCV","ts":"1617215431.133600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xiXrT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Interesting, thanks"}]}]}],"thread_ts":"1617214422.125000","parent_user_id":"UL4JREGCV"},{"client_msg_id":"8b9713fe-460c-48e5-8a2f-bd9d016e0443","type":"message","text":"I'm having a hard time seeing how I can use foldl here. Could you point me in the right direction?","user":"UL4JREGCV","ts":"1617215547.133800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"le5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm having a hard time seeing how I can use foldl here. Could you point me in the right direction?"}]}]}],"thread_ts":"1617214422.125000","parent_user_id":"UL4JREGCV"},{"client_msg_id":"c01e6dc5-8508-4462-a623-c1cf408351cd","type":"message","text":"Neat, the foldl version is type stable. My version is 20x slower than the manually unrolled version but still a handy thing to know.","user":"UL4JREGCV","ts":"1617215781.134000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OGU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Neat, the foldl version is type stable. My version is 20x slower than the manually unrolled version but still a handy thing to know."}]}]}],"thread_ts":"1617214422.125000","parent_user_id":"UL4JREGCV"},{"client_msg_id":"824a5b6f-fe3e-4441-aace-e6caec536a1d","type":"message","text":"This is also a case where you should prefer `x === nothing` over `isnothing(x)`, unless you are already using 1.7","user":"UM30MT6RF","ts":"1617215929.134300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UbuvT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is also a case where you should prefer "},{"type":"text","text":"x === nothing","style":{"code":true}},{"type":"text","text":" over "},{"type":"text","text":"isnothing(x)","style":{"code":true}},{"type":"text","text":", unless you are already using 1.7"}]}]}],"thread_ts":"1617214422.125000","parent_user_id":"UL4JREGCV"},{"client_msg_id":"35fad63e-8e3c-4e43-8d06-bcbeeb2127ec","type":"message","text":"Surprisingly isnothing and !== nothing benchmarked the same for me in this case.","user":"UL4JREGCV","ts":"1617216081.134500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MM/5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Surprisingly isnothing and !== nothing benchmarked the same for me in this case."}]}]}],"thread_ts":"1617214422.125000","parent_user_id":"UL4JREGCV"},{"client_msg_id":"9be70a13-ab30-4a31-b65b-fb6ab74185d8","type":"message","text":"Not sure why that would be the case.","user":"UL4JREGCV","ts":"1617216093.134700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VFH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not sure why that would be the case."}]}]}],"thread_ts":"1617214422.125000","parent_user_id":"UL4JREGCV"},{"client_msg_id":"ef39e6d0-e6df-4ef4-bc7e-c6cf95120140","type":"message","text":"Thanks for the tip though","user":"UL4JREGCV","ts":"1617216096.134900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NQI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks for the tip though"}]}]}],"thread_ts":"1617214422.125000","parent_user_id":"UL4JREGCV"},{"client_msg_id":"2139ae26-c03b-4fc7-9d3c-7a90623f13d7","type":"message","text":"Ah, sorry, if the type can be completely statically inferred, it won't matter, only if it's inferred to a small union.","user":"UM30MT6RF","ts":"1617216274.135100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KPkq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, sorry, if the type can be completely statically inferred, it won't matter, only if it's inferred to a small union."}]}]}],"thread_ts":"1617214422.125000","parent_user_id":"UL4JREGCV"},{"client_msg_id":"c9ce86a7-96b3-46d5-bdbf-26aafe25e4fc","type":"message","text":"I see","user":"UL4JREGCV","ts":"1617216303.135300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xF1R","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see"}]}]}],"thread_ts":"1617214422.125000","parent_user_id":"UL4JREGCV"}]