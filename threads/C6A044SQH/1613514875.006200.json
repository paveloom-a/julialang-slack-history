[{"client_msg_id":"a3988d2b-f436-4ae2-998b-05379b0b5b41","type":"message","text":"Is there a way to know from julia for what target architecture it is currently generating code?","user":"U6N6VQE30","ts":"1613514875.006200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W=ZJf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a way to know from julia for what target architecture it is currently generating code?"}]}]}],"thread_ts":"1613514875.006200","reply_count":6,"reply_users_count":4,"latest_reply":"1613557469.036300","reply_users":["B01J9QZ4SP8","U01GRS159T8","U68QW0PUZ","U6N6VQE30"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1613514877.006300","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1613514875.006200","parent_user_id":"U6N6VQE30"},{"client_msg_id":"2858bd1e-a27f-4204-ac90-2c07def9551b","type":"message","text":"Sys.ARCH ?","user":"U01GRS159T8","ts":"1613517318.008000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bNbr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sys.ARCH ?"}]}]}],"thread_ts":"1613514875.006200","parent_user_id":"U6N6VQE30"},{"client_msg_id":"6af724ed-dde8-4246-b453-6c18d8024eda","type":"message","text":"there's other stuff in Sys that maybe you want","user":"U01GRS159T8","ts":"1613517327.008200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TP+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there's other stuff in Sys that maybe you want"}]}]}],"thread_ts":"1613514875.006200","parent_user_id":"U6N6VQE30"},{"client_msg_id":"311d914f-77f6-4eeb-9515-8c2c4b40ea58","type":"message","text":"```CpuId.jl is helpful.\n# on my laptop\nCpuId.cpuvendor() == :Intel\nCpuId.cpubrand() == \"Intel(R) Xeon(R) E-2176M  CPU @ 2.70GHz\"\nCpuId.cpuarchitecture() == :Kabylake```\n","user":"U68QW0PUZ","ts":"1613519709.008400","team":"T68168MUP","edited":{"user":"U68QW0PUZ","ts":"1613519794.000000"},"blocks":[{"type":"rich_text","block_id":"4Xx","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"CpuId.jl is helpful.\n# on my laptop\nCpuId.cpuvendor() == :Intel\nCpuId.cpubrand() == \"Intel(R) Xeon(R) E-2176M  CPU @ 2.70GHz\"\nCpuId.cpuarchitecture() == :Kabylake"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1613514875.006200","parent_user_id":"U6N6VQE30"},{"client_msg_id":"16739522-67d3-4456-bf81-041b77c8d501","type":"message","text":"Thanks, I was aware of those, but my question is not how to detect the host arch but rather what julia generates code for. E.g.:\n\n```$ julia -Cx86_64 -e 'using InteractiveUtils; @code_native debuginfo=:none muladd(1.0, 2.0, 3.0)'\n\t.text\n\tmulsd\t%xmm1, %xmm0\n\taddsd\t%xmm2, %xmm0\n\tretq\n\tnopl\t(%rax)\n$ julia -Cskylake -e 'using InteractiveUtils; @code_native debuginfo=:none muladd(1.0, 2.0, 3.0)'\n\t.text\n\tvfmadd213sd\t%xmm2, %xmm1, %xmm0 # xmm0 = (xmm1 * xmm0) + xmm2\n\tretq\n\tnopw\t%cs:(%rax,%rax)```\ncan happen on the same cpu, but julia sets a different cpu target","user":"U6N6VQE30","ts":"1613553178.035700","team":"T68168MUP","edited":{"user":"U6N6VQE30","ts":"1613553246.000000"},"blocks":[{"type":"rich_text","block_id":"TxE9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks, I was aware of those, but my question is not how to detect the host arch but rather what julia generates code for. E.g.:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"$ julia -Cx86_64 -e 'using InteractiveUtils; @code_native debuginfo=:none muladd(1.0, 2.0, 3.0)'\n\t.text\n\tmulsd\t%xmm1, %xmm0\n\taddsd\t%xmm2, %xmm0\n\tretq\n\tnopl\t(%rax)\n$ julia -Cskylake -e 'using InteractiveUtils; @code_native debuginfo=:none muladd(1.0, 2.0, 3.0)'\n\t.text\n\tvfmadd213sd\t%xmm2, %xmm1, %xmm0 # xmm0 = (xmm1 * xmm0) + xmm2\n\tretq\n\tnopw\t%cs:(%rax,%rax)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"can happen on the same cpu, but julia sets a different cpu target"}]}]}],"thread_ts":"1613514875.006200","parent_user_id":"U6N6VQE30"},{"client_msg_id":"1de59a94-d2b9-4189-a3db-34dda915a7a1","type":"message","text":"```function find_cpu_target()\n  str = string( Base.JLOptions() )\n  start = findfirst(\"cpu_target = \\\"\", str).stop+1\n  stop = findfirst(\"\\\",\", str[start:end]).stop+start-3\n  cpu_target = str[start:stop]\n  return cpu_target\nend```","user":"U68QW0PUZ","ts":"1613557469.036300","team":"T68168MUP","edited":{"user":"U68QW0PUZ","ts":"1613560006.000000"},"blocks":[{"type":"rich_text","block_id":"Gab","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function find_cpu_target()\n  str = string( Base.JLOptions() )\n  start = findfirst(\"cpu_target = \\\"\", str).stop+1\n  stop = findfirst(\"\\\",\", str[start:end]).stop+start-3\n  cpu_target = str[start:stop]\n  return cpu_target\nend"}]}]}],"thread_ts":"1613514875.006200","parent_user_id":"U6N6VQE30"}]