[{"client_msg_id":"1f5b5608-f194-4f5d-b323-482ef4bb87cd","type":"message","text":"I consistently frustrated that we don't have a `map` that returns a named tuple of vectors when named tuples are returned from the anonymous function. I feel like all I ever want to do is return a named tuple of vectors. I am constantly doing `map(f, 1:N) |&gt; Tables.columntable`, which feels very wasteful. Am I missing something? Is this not something others do all the time?","user":"UBF9YRB6H","ts":"1617812494.168300","team":"T68168MUP","edited":{"user":"UBF9YRB6H","ts":"1617812515.000000"},"blocks":[{"type":"rich_text","block_id":"IW1Lo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I consistently frustrated that we don't have a "},{"type":"text","text":"map","style":{"code":true}},{"type":"text","text":" that returns a named tuple of vectors when named tuples are returned from the anonymous function. I feel like all I ever want to do is return a named tuple of vectors. I am constantly doing "},{"type":"text","text":"map(f, 1:N) |> Tables.columntable","style":{"code":true}},{"type":"text","text":", which feels very wasteful. Am I missing something? Is this not something others do all the time?"}]}]}],"thread_ts":"1617812494.168300","reply_count":10,"reply_users_count":2,"latest_reply":"1617813245.172100","reply_users":["UCZ7VBGUD","UBF9YRB6H"],"is_locked":false,"subscribed":false},{"client_msg_id":"38db32da-e160-4c7b-b602-62e5a87a6114","type":"message","text":"do you mean like DataFrames’ AsTable, but for generic tables?","user":"UCZ7VBGUD","ts":"1617812628.169100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"14XR9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"do you mean like DataFrames’ AsTable, but for generic tables?"}]}]}],"thread_ts":"1617812494.168300","parent_user_id":"UBF9YRB6H"},{"client_msg_id":"cd966183-8de4-480c-b164-485642a2d3cd","type":"message","text":"I do wish we had an `unzip` in Base and which automatically did these conversions for `NamedTuples` as well.\n\nBut I feel like I shouldn't need these conversion methods at all. I feel like we should just have a function that returns tuples of vectors from the get-go.","user":"UBF9YRB6H","ts":"1617812739.169400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KeT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I do wish we had an "},{"type":"text","text":"unzip","style":{"code":true}},{"type":"text","text":" in Base and which automatically did these conversions for "},{"type":"text","text":"NamedTuples","style":{"code":true}},{"type":"text","text":" as well.\n\nBut I feel like I shouldn't need these conversion methods at all. I feel like we should just have a function that returns tuples of vectors from the get-go."}]}]}],"thread_ts":"1617812494.168300","parent_user_id":"UBF9YRB6H"},{"client_msg_id":"ac38f5d3-9e12-4cab-8dcd-5f301fbf277e","type":"message","text":"I don’t really understand precisely what you mean though, that’s what I’m asking","user":"UCZ7VBGUD","ts":"1617812781.169800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yJb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don’t really understand precisely what you mean though, that’s what I’m asking"}]}]}],"thread_ts":"1617812494.168300","parent_user_id":"UBF9YRB6H"},{"client_msg_id":"74ae5a26-a61a-4520-a633-beb3b185a882","type":"message","text":"like something like this but not needing DataFrames?\n```julia&gt; df = DataFrame(:input =&gt; rand(100))\n100×1 DataFrame\n Row │ input\n     │ Float64\n─────┼───────────\n   1 │ 0.987125\n   2 │ 0.59006\n   3 │ 0.229429\n   4 │ 0.445453\n  ⋮  │     ⋮\n  97 │ 0.102851\n  98 │ 0.0648203\n  99 │ 0.0868498\n 100 │ 0.153636\n  92 rows omitted\n\njulia&gt; select(df, :input =&gt; ByRow(i -&gt; (; square = i^2, double = 2*i)) =&gt; AsTable)\n100×2 DataFrame\n Row │ square      double\n     │ Float64     Float64\n─────┼──────────────────────\n   1 │ 0.974417    1.97425\n   2 │ 0.348171    1.18012\n   3 │ 0.0526378   0.458859\n   4 │ 0.198428    0.890905\n  ⋮  │     ⋮          ⋮\n  97 │ 0.0105784   0.205703\n  98 │ 0.00420167  0.129641\n  99 │ 0.00754289  0.1737\n 100 │ 0.023604    0.307272\n             92 rows omitted```\nor something else entirely?","user":"UCZ7VBGUD","ts":"1617812800.170200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FNDj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"like something like this but not needing DataFrames?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> df = DataFrame(:input => rand(100))\n100×1 DataFrame\n Row │ input\n     │ Float64\n─────┼───────────\n   1 │ 0.987125\n   2 │ 0.59006\n   3 │ 0.229429\n   4 │ 0.445453\n  ⋮  │     ⋮\n  97 │ 0.102851\n  98 │ 0.0648203\n  99 │ 0.0868498\n 100 │ 0.153636\n  92 rows omitted\n\njulia> select(df, :input => ByRow(i -> (; square = i^2, double = 2*i)) => AsTable)\n100×2 DataFrame\n Row │ square      double\n     │ Float64     Float64\n─────┼──────────────────────\n   1 │ 0.974417    1.97425\n   2 │ 0.348171    1.18012\n   3 │ 0.0526378   0.458859\n   4 │ 0.198428    0.890905\n  ⋮  │     ⋮          ⋮\n  97 │ 0.0105784   0.205703\n  98 │ 0.00420167  0.129641\n  99 │ 0.00754289  0.1737\n 100 │ 0.023604    0.307272\n             92 rows omitted"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"or something else entirely?"}]}]}],"thread_ts":"1617812494.168300","parent_user_id":"UBF9YRB6H"},{"client_msg_id":"ce4ac80b-66b1-438b-8578-d9028b4a61bc","type":"message","text":"yeah that's exactly it. But I feel like this should be feasible with named tuples only, nothing with dataframes","user":"UBF9YRB6H","ts":"1617812878.170600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sGi/q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah that's exactly it. But I feel like this should be feasible with named tuples only, nothing with dataframes"}]}]}],"thread_ts":"1617812494.168300","parent_user_id":"UBF9YRB6H","reactions":[{"name":"+1","users":["UCZ7VBGUD"],"count":1}]},{"client_msg_id":"cd09f5e4-d742-4143-afa6-abaa534b5355","type":"message","text":"You can do it with Tables.jl, which is a bit lighter at least:\n```julia&gt; using Tables\n\njulia&gt; input = rand(100);\n\njulia&gt; f = i -&gt; (; square = i^2, double = 2*i)\n#7 (generic function with 1 method)\n\njulia&gt; Tables.columntable(f.(input))\n(square = [0.3225216349773423, 0.75930589125304, 4.5156737350932095e-5, 0.38511979054957896, 0.5337879602398774, 0.1529811777250155, 0.9935712984702602, 0.5250112405789106, 0.15396748801851173, 0.09123119425334228  …  0.49745065371932706, 0.9223388966238312, 0.0007563040335504789, 0.016026907368966555, 0.16253566582137652, 0.14923850927580035, 0.025687420963949364, 0.8503829390199725, 0.6058952739634159, 0.12429714402115932], double = [1.1358197655919575, 1.7427631982034049, 0.013439752579706532, 1.2411604095354942, 1.4612158776031383, 0.7822561670578647, 1.9935609330745425, 1.449153188008653, 0.7847738222405529, 0.6040900404851657  …  1.410603634929851, 1.9207695297706397, 0.05500196482128539, 0.25319484488406596, 0.8063142459894319, 0.772628006936845, 0.3205459153628345, 1.844324200372562, 1.5567855009132323, 0.705116001863975])```\n","user":"UCZ7VBGUD","ts":"1617813039.171100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8n7H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can do it with Tables.jl, which is a bit lighter at least:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using Tables\n\njulia> input = rand(100);\n\njulia> f = i -> (; square = i^2, double = 2*i)\n#7 (generic function with 1 method)\n\njulia> Tables.columntable(f.(input))\n(square = [0.3225216349773423, 0.75930589125304, 4.5156737350932095e-5, 0.38511979054957896, 0.5337879602398774, 0.1529811777250155, 0.9935712984702602, 0.5250112405789106, 0.15396748801851173, 0.09123119425334228  …  0.49745065371932706, 0.9223388966238312, 0.0007563040335504789, 0.016026907368966555, 0.16253566582137652, 0.14923850927580035, 0.025687420963949364, 0.8503829390199725, 0.6058952739634159, 0.12429714402115932], double = [1.1358197655919575, 1.7427631982034049, 0.013439752579706532, 1.2411604095354942, 1.4612158776031383, 0.7822561670578647, 1.9935609330745425, 1.449153188008653, 0.7847738222405529, 0.6040900404851657  …  1.410603634929851, 1.9207695297706397, 0.05500196482128539, 0.25319484488406596, 0.8063142459894319, 0.772628006936845, 0.3205459153628345, 1.844324200372562, 1.5567855009132323, 0.705116001863975])"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1617812494.168300","parent_user_id":"UBF9YRB6H"},{"client_msg_id":"72f464ae-266d-4be4-a779-f383786be8f2","type":"message","text":"yeah. that's what I currently do. But isn't that extra-allocating? Since first you have to allocate a vector of named tuples, then you switch over to a named tuple of vectors.","user":"UBF9YRB6H","ts":"1617813076.171300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9sniN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah. that's what I currently do. But isn't that extra-allocating? Since first you have to allocate a vector of named tuples, then you switch over to a named tuple of vectors."}]}]}],"thread_ts":"1617812494.168300","parent_user_id":"UBF9YRB6H"},{"client_msg_id":"c37d025b-a773-4bab-b0c1-061a12c2729a","type":"message","text":"yeah, true. If you do just `Tables.columns` then the outer wrapper is lazy so it doesn’t allocate, but you don’t get an actual vector of named tuples out (but the column table acts like one)","user":"UCZ7VBGUD","ts":"1617813125.171700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mGkt6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, true. If you do just "},{"type":"text","text":"Tables.columns","style":{"code":true}},{"type":"text","text":" then the outer wrapper is lazy so it doesn’t allocate, but you don’t get an actual vector of named tuples out (but the column table acts like one)"}]}]}],"thread_ts":"1617812494.168300","parent_user_id":"UBF9YRB6H"},{"client_msg_id":"026be0c3-a51d-463a-959c-6905602e6c37","type":"message","text":"actually, I think this should do it: `Tables.columntable(f(i) for i in input)`","user":"UCZ7VBGUD","ts":"1617813175.171900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KFl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"actually, I think this should do it: "},{"type":"text","text":"Tables.columntable(f(i) for i in input)","style":{"code":true}}]}]}],"thread_ts":"1617812494.168300","parent_user_id":"UBF9YRB6H"},{"client_msg_id":"b6bb632d-05f9-4aa9-8ad0-a324b686a58a","type":"message","text":"That might be more performant. i will have to double check.","user":"UBF9YRB6H","ts":"1617813245.172100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xGNfe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That might be more performant. i will have to double check."}]}]}],"thread_ts":"1617812494.168300","parent_user_id":"UBF9YRB6H"}]