[{"client_msg_id":"82ec0768-8ccb-4b8e-927b-7a68d4dc49e3","type":"message","text":"How could one create a macro to automatically generate getters and setters for any struct. Something like this:\n```julia&gt; macro generate_getters(StructName)\n       return quote\n       get_x(instance::$StructName) = instance.x\n       set_x!(instance::$StructName, new_value) = instance.x = new_value\n       get_y(instace::$StructName) = instance.y\n       set_y!(instance::$StructName, new_value) = instance.y = new_value\n       end\n       end\n@generate_getters (macro with 1 method)```\nBut without harcoding the fieldnames inside this macro.\nAlso, I am facing another problem with the current macro..\n```julia&gt; mutable struct MyPoint{T}\n       x::T\n       y::T\n       end\n\njulia&gt; p = MyPoint(1.0f0, 2.0f0)\nMyPoint{Float32}(1.0f0, 2.0f0)\n\njulia&gt; get_x(p)\nERROR: UndefVarError: get_x not defined\nStacktrace:\n [1] top-level scope at REPL[4]:1 ```\nThis probably has something to do with macro hygiene but I don't know anymore about it :sweat_smile:","user":"U0190AJCYK0","ts":"1616092564.110100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aI5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How could one create a macro to automatically generate getters and setters for any struct. Something like this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> macro generate_getters(StructName)\n       return quote\n       get_x(instance::$StructName) = instance.x\n       set_x!(instance::$StructName, new_value) = instance.x = new_value\n       get_y(instace::$StructName) = instance.y\n       set_y!(instance::$StructName, new_value) = instance.y = new_value\n       end\n       end\n@generate_getters (macro with 1 method)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"But without harcoding the fieldnames inside this macro.\nAlso, I am facing another problem with the current macro..\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> mutable struct MyPoint{T}\n       x::T\n       y::T\n       end\n\njulia> p = MyPoint(1.0f0, 2.0f0)\nMyPoint{Float32}(1.0f0, 2.0f0)\n\njulia> get_x(p)\nERROR: UndefVarError: get_x not defined\nStacktrace:\n [1] top-level scope at REPL[4]:1 "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"This probably has something to do with macro hygiene but I don't know anymore about it "},{"type":"emoji","name":"sweat_smile"}]}]}],"thread_ts":"1616092564.110100","reply_count":9,"reply_users_count":3,"latest_reply":"1616134697.145500","reply_users":["B01J9QZ4SP8","U680THK2S","U0190AJCYK0"],"is_locked":false,"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1616092567.110200","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1616092564.110100","parent_user_id":"U0190AJCYK0"},{"client_msg_id":"36f6852b-e93b-4693-bb96-be3962ceeece","type":"message","text":"```macro generate_getters(type)\n    T = getfield(__module__, type)::DataType\n    defs = Expr(:block)\n    for field in fieldnames(T)\n        get = Symbol(:get_, field)\n        set = Symbol(:set_, field, :!)\n        qn = QuoteNode(field)\n        push!(defs.args, :($(esc(get))(instance::$type) = getfield(instance, $qn)))\n        push!(defs.args, :($(esc(set))(instance::$type, x) = setfield!(instance, $qn, x)))\n    end\n    return defs\nend```\nshould work","user":"U680THK2S","ts":"1616093645.110600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W46","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"macro generate_getters(type)\n    T = getfield(__module__, type)::DataType\n    defs = Expr(:block)\n    for field in fieldnames(T)\n        get = Symbol(:get_, field)\n        set = Symbol(:set_, field, :!)\n        qn = QuoteNode(field)\n        push!(defs.args, :($(esc(get))(instance::$type) = getfield(instance, $qn)))\n        push!(defs.args, :($(esc(set))(instance::$type, x) = setfield!(instance, $qn, x)))\n    end\n    return defs\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"should work"}]}]}],"thread_ts":"1616092564.110100","parent_user_id":"U0190AJCYK0"},{"client_msg_id":"c4f4a77f-4e9c-4962-a527-3456d887d85c","type":"message","text":"Thanks.. I tried this, but am getting the following...\n```julia&gt; macro generate_getters(type)\n           T = getfield(__module__, type)::DataType\n           defs = Expr(:block)\n           for field in fieldnames(T)\n               get = Symbol(:get_, field)\n               set = Symbol(:set_, field, :!)\n               qn = QuoteNode(field)\n               push!(defs.args, :($(esc(get))(instance::$type) = getfield(instance, $qn)))\n               push!(defs.args, :($(esc(set))(instance::$type, x) = setfield!(instance, $qn, x)))\n           end\n           return defs\n       end\n@generate_getters (macro with 1 method)\n\njulia&gt; mutable struct MyPoint{T}\n       x::T\n       y::T\n       end\n\njulia&gt; p = MyPoint(1.0f0, 2.0f0)\nMyPoint{Float32}(1.0f0, 2.0f0)\n\njulia&gt; get_x(p)\nERROR: UndefVarError: get_x not defined\nStacktrace:\n [1] top-level scope at REPL[4]:1\n\njulia&gt;```\nthe input argument name to the macro is `type`, which is also a keyword. I tried changing that as well and got the same result.","user":"U0190AJCYK0","ts":"1616094364.111000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3TNed","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks.. I tried this, but am getting the following...\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> macro generate_getters(type)\n           T = getfield(__module__, type)::DataType\n           defs = Expr(:block)\n           for field in fieldnames(T)\n               get = Symbol(:get_, field)\n               set = Symbol(:set_, field, :!)\n               qn = QuoteNode(field)\n               push!(defs.args, :($(esc(get))(instance::$type) = getfield(instance, $qn)))\n               push!(defs.args, :($(esc(set))(instance::$type, x) = setfield!(instance, $qn, x)))\n           end\n           return defs\n       end\n@generate_getters (macro with 1 method)\n\njulia> mutable struct MyPoint{T}\n       x::T\n       y::T\n       end\n\njulia> p = MyPoint(1.0f0, 2.0f0)\nMyPoint{Float32}(1.0f0, 2.0f0)\n\njulia> get_x(p)\nERROR: UndefVarError: get_x not defined\nStacktrace:\n [1] top-level scope at REPL[4]:1\n\njulia>"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"the input argument name to the macro is "},{"type":"text","text":"type","style":{"code":true}},{"type":"text","text":", which is also a keyword. I tried changing that as well and got the same result."}]}]}],"thread_ts":"1616092564.110100","parent_user_id":"U0190AJCYK0"},{"client_msg_id":"819a000d-bf06-47b5-8105-1b81d37fe336","type":"message","text":"&gt; which is also a keyword\nNot since Julia 0.7","user":"U680THK2S","ts":"1616094906.111200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jVT","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"which is also a keyword"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Not since Julia 0.7"}]}]}],"thread_ts":"1616092564.110100","parent_user_id":"U0190AJCYK0"},{"client_msg_id":"3b60f89f-d864-4409-ae6f-324a67354944","type":"message","text":"Ah, the type assertion was off, this works now for me:\n```julia&gt; macro generate_getters(type)\n           T = getfield(__module__, type)::Union{Type,DataType}\n           defs = Expr(:block)\n           for field in fieldnames(T)\n               get = Symbol(:get_, field)\n               set = Symbol(:set_, field, :!)\n               qn = QuoteNode(field)\n               push!(defs.args, :($(esc(get))(instance::$type) = getfield(instance, $qn)))\n               push!(defs.args, :($(esc(set))(instance::$type, x) = setfield!(instance, $qn, x)))\n           end\n           return defs\n       end\n@generate_getters (macro with 1 method)\n\njulia&gt; @generate_getters MyPoint\nset_y! (generic function with 2 methods)\n\njulia&gt; get_x(MyPoint(1, 2))\n1```","user":"U680THK2S","ts":"1616095038.111400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YjPt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, the type assertion was off, this works now for me:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> macro generate_getters(type)\n           T = getfield(__module__, type)::Union{Type,DataType}\n           defs = Expr(:block)\n           for field in fieldnames(T)\n               get = Symbol(:get_, field)\n               set = Symbol(:set_, field, :!)\n               qn = QuoteNode(field)\n               push!(defs.args, :($(esc(get))(instance::$type) = getfield(instance, $qn)))\n               push!(defs.args, :($(esc(set))(instance::$type, x) = setfield!(instance, $qn, x)))\n           end\n           return defs\n       end\n@generate_getters (macro with 1 method)\n\njulia> @generate_getters MyPoint\nset_y! (generic function with 2 methods)\n\njulia> get_x(MyPoint(1, 2))\n1"}]}]}],"thread_ts":"1616092564.110100","parent_user_id":"U0190AJCYK0"},{"client_msg_id":"9499e1c3-2110-455c-b56e-a44984080f4b","type":"message","text":"&gt; Not since Julia 0.7\nOh, okay. I thought it was a keyword because it was highlighted by `OhMyREPL` :sweat_smile:\nI get an error when I put it inside my package...\n```julia&gt; module MyPackage\n       macro generate_getters(type)\n                  T = getfield(__module__, type)::Union{Type,DataType}\n                  defs = Expr(:block)\n                  for field in fieldnames(T)\n                      get = Symbol(:get_, field)\n                      set = Symbol(:set_, field, :!)\n                      qn = QuoteNode(field)\n                      push!(defs.args, :($(esc(get))(instance::$type) = getfield(instance, $qn)))\n                      push!(defs.args, :($(esc(set))(instance::$type, x) = setfield!(instance, $qn, x)))\n                  end\n                  return defs\n              end\n       mutable struct MyStruct{T}\n           x::T\n           y::T\n       end\n       end\nMain.MyPackage\n\njulia&gt; p = MyPackage.MyStruct(1.0f0, 2.0f0)\nMain.MyPackage.MyStruct{Float32}(1.0f0, 2.0f0)\n\njulia&gt; MyPackage.get_x(p)\nERROR: UndefVarError: get_x not defined\nStacktrace:\n [1] getproperty(::Module, ::Symbol) at ./Base.jl:26\n [2] top-level scope at REPL[3]:1\n\njulia&gt; get_x(p)\nERROR: UndefVarError: get_x not defined\nStacktrace:\n [1] top-level scope at REPL[4]:1\n\njulia&gt; ```","user":"U0190AJCYK0","ts":"1616095749.111600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9VRVr","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"Not since Julia 0.7"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Oh, okay. I thought it was a keyword because it was highlighted by "},{"type":"text","text":"OhMyREPL","style":{"code":true}},{"type":"text","text":" "},{"type":"emoji","name":"sweat_smile"},{"type":"text","text":"\nI get an error when I put it inside my package...\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> module MyPackage\n       macro generate_getters(type)\n                  T = getfield(__module__, type)::Union{Type,DataType}\n                  defs = Expr(:block)\n                  for field in fieldnames(T)\n                      get = Symbol(:get_, field)\n                      set = Symbol(:set_, field, :!)\n                      qn = QuoteNode(field)\n                      push!(defs.args, :($(esc(get))(instance::$type) = getfield(instance, $qn)))\n                      push!(defs.args, :($(esc(set))(instance::$type, x) = setfield!(instance, $qn, x)))\n                  end\n                  return defs\n              end\n       mutable struct MyStruct{T}\n           x::T\n           y::T\n       end\n       end\nMain.MyPackage\n\njulia> p = MyPackage.MyStruct(1.0f0, 2.0f0)\nMain.MyPackage.MyStruct{Float32}(1.0f0, 2.0f0)\n\njulia> MyPackage.get_x(p)\nERROR: UndefVarError: get_x not defined\nStacktrace:\n [1] getproperty(::Module, ::Symbol) at ./Base.jl:26\n [2] top-level scope at REPL[3]:1\n\njulia> get_x(p)\nERROR: UndefVarError: get_x not defined\nStacktrace:\n [1] top-level scope at REPL[4]:1\n\njulia> "}]}]}],"thread_ts":"1616092564.110100","parent_user_id":"U0190AJCYK0"},{"client_msg_id":"2fa868e7-a4fb-45d0-ba3c-853a9ae789e6","type":"message","text":"You have to run the macro inside of your package","user":"U680THK2S","ts":"1616096883.118900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TO4Ff","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You have to run the macro inside of your package"}]}]}],"thread_ts":"1616092564.110100","parent_user_id":"U0190AJCYK0"},{"client_msg_id":"44180bef-8818-40c3-8f24-18f184f81d98","type":"message","text":"i.e., after the definition of `MyStruct`, add `@generate_getters MyStruct`","user":"U680THK2S","ts":"1616096905.119100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Zy=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i.e., after the definition of "},{"type":"text","text":"MyStruct","style":{"code":true}},{"type":"text","text":", add "},{"type":"text","text":"@generate_getters MyStruct","style":{"code":true}}]}]}],"thread_ts":"1616092564.110100","parent_user_id":"U0190AJCYK0"},{"client_msg_id":"35659949-91fc-468c-9d46-f6887d3d269e","type":"message","text":"Ah, got it. It works now. Thanks you for your help! :smile:","user":"U0190AJCYK0","ts":"1616134697.145500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"N/Ow","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, got it. It works now. Thanks you for your help! "},{"type":"emoji","name":"smile"}]}]}],"thread_ts":"1616092564.110100","parent_user_id":"U0190AJCYK0"}]