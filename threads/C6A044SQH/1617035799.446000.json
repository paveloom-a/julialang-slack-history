[{"client_msg_id":"8f61d540-7b2a-4b84-832d-2dbb350b2ae6","type":"message","text":"hi everyone! I am currently using my self-defined method to create block-diagonal matrices on the fly:\n```blkdiagm(A::Matrix, B::Matrix) = [A zeros(size(A,1), size(B,2)); zeros(size(B,1), size(A,2)) B]\nblkdiagm(A::Matrix... ) = blkdiagm(A[1], blkdiagm(A[2:end]...))```\nthe issue, is that this definition seems to become a bottleneck with larger problems and I am not quite sure - it seems to be the concatanation. (In most cases I only use the 2-argument one).\n\nSo I guess the best option is to instead do\n```C = zeros(m1+m2, n1+n2)\nC[1:m1,1:n1] .= A\nC[m1+1:end,n1+1:end] .= B```\nis there a better way? any suggestions?","user":"U01L0RJC6FM","ts":"1617035799.446000","team":"T68168MUP","edited":{"user":"U01L0RJC6FM","ts":"1617035815.000000"},"blocks":[{"type":"rich_text","block_id":"X=b2e","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hi everyone! I am currently using my self-defined method to create block-diagonal matrices on the fly:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"blkdiagm(A::Matrix, B::Matrix) = [A zeros(size(A,1), size(B,2)); zeros(size(B,1), size(A,2)) B]\nblkdiagm(A::Matrix... ) = blkdiagm(A[1], blkdiagm(A[2:end]...))"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"the issue, is that this definition seems to become a bottleneck with larger problems and I am not quite sure - it seems to be the concatanation. (In most cases I only use the 2-argument one).\n\nSo I guess the best option is to instead do\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"C = zeros(m1+m2, n1+n2)\nC[1:m1,1:n1] .= A\nC[m1+1:end,n1+1:end] .= B"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"is there a better way? any suggestions?"}]}]}],"thread_ts":"1617035799.446000","reply_count":22,"reply_users_count":3,"latest_reply":"1617043291.460100","reply_users":["U01HD5VFXJM","UH24GRBLL","U01L0RJC6FM"],"is_locked":false,"subscribed":false},{"client_msg_id":"8888b101-5006-4f91-84a3-d2f138560c23","type":"message","text":"`cat(A, B, dims = (1, 2))` ?","user":"U01HD5VFXJM","ts":"1617036834.447900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g43","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"cat(A, B, dims = (1, 2))","style":{"code":true}},{"type":"text","text":" ?"}]}]}],"thread_ts":"1617035799.446000","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"70546b49-8290-43c2-81d0-e4e08f22e5b9","type":"message","text":"I think there were some packages that provided block diagonal matrix structs so you don't need to store all those zeros","user":"UH24GRBLL","ts":"1617036922.448900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"G78O/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think there were some packages that provided block diagonal matrix structs so you don't need to store all those zeros"}]}]}],"thread_ts":"1617035799.446000","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"232f94b5-681f-4258-909a-e5ece72ed942","type":"message","text":"I just discovered `cat` . That outperforms my current routine!","user":"U01L0RJC6FM","ts":"1617037463.450400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HLZK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I just discovered "},{"type":"text","text":"cat","style":{"code":true}},{"type":"text","text":" . That outperforms my current routine!"}]}]}],"thread_ts":"1617035799.446000","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"11d6c156-0d99-460b-85f0-cd8cda27bc65","type":"message","text":"<@UH24GRBLL> yes, I am aware - though I would like to keep dependencies to a minimum","user":"U01L0RJC6FM","ts":"1617037491.450600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Lji","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH24GRBLL"},{"type":"text","text":" yes, I am aware - though I would like to keep dependencies to a minimum"}]}]}],"thread_ts":"1617035799.446000","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"5317e2d4-8a5b-483f-9432-a78d0973815b","type":"message","text":"`cat` is probably faster because it presumably only allocates once instead of thrice","user":"UH24GRBLL","ts":"1617037544.450800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"z3g","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"cat","style":{"code":true}},{"type":"text","text":" is probably faster because it presumably only allocates once instead of thrice"}]}]}],"thread_ts":"1617035799.446000","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"7d1149d0-392b-4127-89f0-b021ee28aa18","type":"message","text":"If the overhead is fine with you :man-shrugging: I think you'll find that some dependencies can greatly improve runtime, simply because of the special structure and thus fewer elements that have to be iterated over","user":"UH24GRBLL","ts":"1617037597.451000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"geA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If the overhead is fine with you "},{"type":"emoji","name":"man-shrugging"},{"type":"text","text":" I think you'll find that some dependencies can greatly improve runtime, simply because of the special structure and thus fewer elements that have to be iterated over"}]}]}],"thread_ts":"1617035799.446000","parent_user_id":"U01L0RJC6FM","reactions":[{"name":"point_up","users":["U67G3QRJM"],"count":1}]},{"client_msg_id":"0799d207-caa7-47f6-9b03-6edbbde65785","type":"message","text":"I see, I remember seeing that the blockmatrices that i looked at were mostly for sparse matrices only","user":"U01L0RJC6FM","ts":"1617040416.452500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gR7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see, I remember seeing that the blockmatrices that i looked at were mostly for sparse matrices only"}]}]}],"thread_ts":"1617035799.446000","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"467c3d85-0d1a-424e-b823-f934d464e33f","type":"message","text":"well your block diagonal matrix can be considered sparse as well, right?","user":"UH24GRBLL","ts":"1617040492.452700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UT2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well your block diagonal matrix can be considered sparse as well, right?"}]}]}],"thread_ts":"1617035799.446000","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"8b2bfa2c-78c8-4612-a3d8-7d6ad0f4fcef","type":"message","text":"at least half of it seems to be zeros","user":"UH24GRBLL","ts":"1617040507.452900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"awn6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"at least half of it seems to be zeros"}]}]}],"thread_ts":"1617035799.446000","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"0272a1c1-5496-4ade-865a-af720890df5b","type":"message","text":"true but I have to push it into a struct which only takes dense matrices","user":"U01L0RJC6FM","ts":"1617042912.457500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fun","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"true but I have to push it into a struct which only takes dense matrices"}]}]}],"thread_ts":"1617035799.446000","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"5893e112-84f8-40cb-98c3-229f885e4d76","type":"message","text":"is it really typed `Array`, not `AbstractArray`? That's a shame then","user":"UH24GRBLL","ts":"1617042976.457700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0OlbQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is it really typed "},{"type":"text","text":"Array","style":{"code":true}},{"type":"text","text":", not "},{"type":"text","text":"AbstractArray","style":{"code":true}},{"type":"text","text":"? That's a shame then"}]}]}],"thread_ts":"1617035799.446000","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"fbb4efde-7d9a-4a31-80f4-a24625fab2d3","type":"message","text":"yes, well it's my own type and I dont want to change the entire library at this point in time","user":"U01L0RJC6FM","ts":"1617043045.457900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h//","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, well it's my own type and I dont want to change the entire library at this point in time"}]}]}],"thread_ts":"1617035799.446000","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"631e35ab-02a0-4a80-be62-95cb7adb4da2","type":"message","text":"but for performance reasons i kept it `Array` at the moment","user":"U01L0RJC6FM","ts":"1617043068.458100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mXhCV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but for performance reasons i kept it "},{"type":"text","text":"Array","style":{"code":true}},{"type":"text","text":" at the moment"}]}]}],"thread_ts":"1617035799.446000","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"efd83664-6d83-4aef-91ef-79fd7555ae3c","type":"message","text":"I see","user":"UH24GRBLL","ts":"1617043107.458300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pIA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see"}]}]}],"thread_ts":"1617035799.446000","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"b6f5d33a-4ec3-4bfa-812d-05233314d510","type":"message","text":"not sure it was the smartest choice...","user":"U01L0RJC6FM","ts":"1617043125.458500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TXEB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not sure it was the smartest choice..."}]}]}],"thread_ts":"1617035799.446000","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"5a066977-4b4f-4a1a-b6dd-b7e55e1b54a4","type":"message","text":"well, typically you'd give your struct a type parameter `T &lt;: AbstractArray` and use `T` for your fields","user":"UH24GRBLL","ts":"1617043179.458700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kP4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well, typically you'd give your struct a type parameter "},{"type":"text","text":"T <: AbstractArray","style":{"code":true}},{"type":"text","text":" and use "},{"type":"text","text":"T","style":{"code":true}},{"type":"text","text":" for your fields"}]}]}],"thread_ts":"1617035799.446000","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"91635161-1094-4d35-ab79-a9a58871377c","type":"message","text":"but basically imagine a hierarchical struct where each of the members can cointain an array","user":"U01L0RJC6FM","ts":"1617043191.458900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uduq=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but basically imagine a hierarchical struct where each of the members can cointain an array"}]}]}],"thread_ts":"1617035799.446000","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"0bc1a430-9520-4e6e-a090-b0926c52fbe1","type":"message","text":"that way you're still concretely typed everywhere, keep your performance and still stay generic","user":"UH24GRBLL","ts":"1617043206.459100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AzR8F","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that way you're still concretely typed everywhere, keep your performance and still stay generic"}]}]}],"thread_ts":"1617035799.446000","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"b2e7e432-83d3-4f66-b81f-b8f46e76ce27","type":"message","text":"here, have a look here","user":"U01L0RJC6FM","ts":"1617043228.459300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bFVF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"here, have a look here"}]}]}],"thread_ts":"1617035799.446000","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"9eaf9bd2-96fb-4815-b525-6284603af8f9","type":"message","text":"<https://github.com/bonevbs/HssMatrices.jl/blob/main/src/hssmatrix.jl>","user":"U01L0RJC6FM","ts":"1617043229.459500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SX+","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/bonevbs/HssMatrices.jl/blob/main/src/hssmatrix.jl"}]}]}],"thread_ts":"1617035799.446000","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"b3fb2b5f-a0a9-4296-9be9-816142951195","type":"message","text":"so basically having each of the member arrays be abstract array would make the types also extremely unreadable","user":"U01L0RJC6FM","ts":"1617043257.459900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xAR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so basically having each of the member arrays be abstract array would make the types also extremely unreadable"}]}]}],"thread_ts":"1617035799.446000","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"75e53bdd-a36e-47fc-bad5-7a795d826a81","type":"message","text":"and I apply qr factorizations, rank-revealing qr, LQ decomp.. etc. which are not always available for genereic arrays","user":"U01L0RJC6FM","ts":"1617043291.460100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wwm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and I apply qr factorizations, rank-revealing qr, LQ decomp.. etc. which are not always available for genereic arrays"}]}]}],"thread_ts":"1617035799.446000","parent_user_id":"U01L0RJC6FM"}]