[{"client_msg_id":"13308f0c-125a-4cff-be61-a953d6973f1a","type":"message","text":"What is the difference between interpolation and not in this macro?\n```macro dna_str(seq, flag)\n    if flag == \"s\"\n        return LongDNASeq(remove_newlines(seq))\n    elseif flag == \"d\"\n        return quote\n            LongDNASeq($(remove_newlines(seq)))\n        end\n    end\n    error(\"Invalid DNA flag: '$(flag)'\")\nend```\n","user":"U7HAYKY9X","ts":"1615458251.329900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+HMZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What is the difference between interpolation and not in this macro?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"macro dna_str(seq, flag)\n    if flag == \"s\"\n        return LongDNASeq(remove_newlines(seq))\n    elseif flag == \"d\"\n        return quote\n            LongDNASeq($(remove_newlines(seq)))\n        end\n    end\n    error(\"Invalid DNA flag: '$(flag)'\")\nend"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1615458251.329900","reply_count":7,"reply_users_count":3,"latest_reply":"1615458679.331200","reply_users":["B01J9QZ4SP8","UH24GRBLL","U7HAYKY9X"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1615458252.330000","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1615458251.329900","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"7fdf69e2-84e6-4602-bb45-1b8818677c76","type":"message","text":"the `\"s\"` branch runs during macro expansion time, while the `\"d\"` branch returns an expression that runs with the code calling the macro","user":"UH24GRBLL","ts":"1615458435.330200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"F1J8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the "},{"type":"text","text":"\"s\"","style":{"code":true}},{"type":"text","text":" branch runs during macro expansion time, while the "},{"type":"text","text":"\"d\"","style":{"code":true}},{"type":"text","text":" branch returns an expression that runs with the code calling the macro"}]}]}],"thread_ts":"1615458251.329900","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"7965358f-15d9-4465-a9f8-b3578d829ddd","type":"message","text":"the difference is basically this: <https://docs.julialang.org/en/v1/manual/metaprogramming/#Hold-up:-why-macros>?","user":"UH24GRBLL","ts":"1615458603.330400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Qm0T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the difference is basically this: "},{"type":"link","url":"https://docs.julialang.org/en/v1/manual/metaprogramming/#Hold-up:-why-macros"},{"type":"text","text":"?"}]}]}],"thread_ts":"1615458251.329900","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"d503e602-a7fe-4158-ad4d-22ea5b8efa18","type":"message","text":"Aha, I see. So the \"s\" returns a precomputed constant object, whereas the \"d\" branch re-computes it every time. That's pretty cool.\n```julia&gt; f() = dna\"TAG\"s\nf (generic function with 2 methods)\n\njulia&gt; g() = dna\"TAG\"d\ng (generic function with 1 method)\n\njulia&gt; @code_native f()\n\t.section\t__TEXT,__text,regular,pure_instructions\n; ┌ @ REPL[24]:1 within `f'\n\tmovabsq\t$5841366736, %rax               ## imm = 0x15C2C2ED0\n\tretq\n\tnopl\t(%rax,%rax)\n; └\n\njulia&gt; @code_native g()\n\t.section\t__TEXT,__text,regular,pure_instructions\n; ┌ @ REPL[25]:1 within `g'\n\tsubq\t$24, %rsp\n\tmovabsq\t$5844175440, %rax               ## imm = 0x15C570A50\n; │┌ @ stringliterals.jl:17 within `macro expansion'\n; ││┌ @ constructors.jl:31 within `LongSequence'\n\tmovq\t%rax, 8(%rsp)\n\tmovabsq\t$5897765832, %rax               ## imm = 0x15F88C3C8\n\tmovq\t%rax, 16(%rsp)\n\tmovabsq\t$LongSequence, %rax\n\tmovabsq\t$5899201328, %rdi               ## imm = 0x15F9EAB30\n\tleaq\t8(%rsp), %rsi\n\tmovl\t$2, %edx\n\tcallq\t*%rax\n; │└└\n\taddq\t$24, %rsp\n\tretq\n\tnopw\t(%rax,%rax)```\n","user":"U7HAYKY9X","ts":"1615458616.330600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/dzh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Aha, I see. So the \"s\" returns a precomputed constant object, whereas the \"d\" branch re-computes it every time. That's pretty cool.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> f() = dna\"TAG\"s\nf (generic function with 2 methods)\n\njulia> g() = dna\"TAG\"d\ng (generic function with 1 method)\n\njulia> @code_native f()\n\t.section\t__TEXT,__text,regular,pure_instructions\n; ┌ @ REPL[24]:1 within `f'\n\tmovabsq\t$5841366736, %rax               ## imm = 0x15C2C2ED0\n\tretq\n\tnopl\t(%rax,%rax)\n; └\n\njulia> @code_native g()\n\t.section\t__TEXT,__text,regular,pure_instructions\n; ┌ @ REPL[25]:1 within `g'\n\tsubq\t$24, %rsp\n\tmovabsq\t$5844175440, %rax               ## imm = 0x15C570A50\n; │┌ @ stringliterals.jl:17 within `macro expansion'\n; ││┌ @ constructors.jl:31 within `LongSequence'\n\tmovq\t%rax, 8(%rsp)\n\tmovabsq\t$5897765832, %rax               ## imm = 0x15F88C3C8\n\tmovq\t%rax, 16(%rsp)\n\tmovabsq\t$LongSequence, %rax\n\tmovabsq\t$5899201328, %rdi               ## imm = 0x15F9EAB30\n\tleaq\t8(%rsp), %rsi\n\tmovl\t$2, %edx\n\tcallq\t*%rax\n; │└└\n\taddq\t$24, %rsp\n\tretq\n\tnopw\t(%rax,%rax)"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1615458251.329900","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"1efe3498-c78e-4f4e-a2b9-5ba2dac5c2df","type":"message","text":"well, not sure that's the conclusion I'd take here :sweat_smile:","user":"UH24GRBLL","ts":"1615458675.330800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OwevY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well, not sure that's the conclusion I'd take here "},{"type":"emoji","name":"sweat_smile"}]}]}],"thread_ts":"1615458251.329900","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"22dba063-131e-4378-9646-4e78c445400c","type":"message","text":"Thanks! (turns out this was documented :sweat_smile: )","user":"U7HAYKY9X","ts":"1615458675.331000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BxM=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks! (turns out this was documented "},{"type":"emoji","name":"sweat_smile"},{"type":"text","text":" )"}]}]}],"thread_ts":"1615458251.329900","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"253a81c7-9d4d-4d43-9a28-2b0d9ab49ce6","type":"message","text":"<https://biojulia.net/BioSequences.jl/stable/construction/#Long-sequence-literals-1>","user":"U7HAYKY9X","ts":"1615458679.331200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XZQCj","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://biojulia.net/BioSequences.jl/stable/construction/#Long-sequence-literals-1"}]}]}],"thread_ts":"1615458251.329900","parent_user_id":"U7HAYKY9X"}]