[{"client_msg_id":"e5851c0a-bcd6-4d89-8d66-45cdd2374fac","type":"message","text":"I came across a weird compile behaviour that I don't understand. Given the function:\n```@inline function num_unique(group_str::AbstractString)\n    return group_str |&gt; Set |&gt; length\nend```\nI have defined a super function (with two variants and their output and lowered code). Variant 1:\n```function sum_unique(group_strs::Vector{&lt;:AbstractString})\n    # clump groups to one line before adding to set (removes the need for union)\n    f = x -&gt; replace(x, \"\\n\" =&gt; \"\")\n    return group_strs .|&gt; f .|&gt; num_unique |&gt; sum\nend```\nOutput of variant 1:\n```sum_unique(group_strs) = 6703```\nLowered code of variant 1:\n```@code_lowered sum_unique([\"abaz\\nasd\", \"ashds\\ndshgs\"])\nCodeInfo(\n1 ─      #23 = %new(Main.:(var\"#23#24\"))\n│        f = #23\n│   %3 = Base.broadcasted(Main.:|&gt;, group_strs, f)\n│   %4 = Base.broadcasted(Main.:|&gt;, %3, Main.num_unique)\n│   %5 = Base.materialize(%4)\n│   %6 = %5 |&gt; Main.sum\n└──      return %6\n)```\nNow the okay-looking (to me) variant 2:\n```function sum_unique(group_strs::Vector{&lt;:AbstractString})\n    # clump groups to one line before adding to set (removes the need for union)\n    return group_strs .|&gt; x -&gt; replace(x, \"\\n\" =&gt; \"\") .|&gt; num_unique |&gt; sum\nend```\nOutput of variant 2:\n```sum_unique(group_strs) = [3, 16, 22, 22, ...] # sum(output array) = 6703```\nLowered code of variant 2:\n```@code_lowered sum_unique2([\"abaz\\nasd\", \"ashds\\ndshgs\"])\nCodeInfo(\n1 ─      #27 = %new(Main.:(var\"#27#28\"))\n│   %2 = #27\n│   %3 = Base.broadcasted(Main.:|&gt;, group_strs, %2)\n│   %4 = Base.materialize(%3)\n└──      return %4 # doesn't even call sum and just exits!\n)```\nI am not sure why this is happening. What is wrong with chaining after an anonymous function?","user":"U01BX0V74Q2","ts":"1607992899.130500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=bCE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I came across a weird compile behaviour that I don't understand. Given the function:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@inline function num_unique(group_str::AbstractString)\n    return group_str |> Set |> length\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I have defined a super function (with two variants and their output and lowered code). Variant 1:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function sum_unique(group_strs::Vector{<:AbstractString})\n    # clump groups to one line before adding to set (removes the need for union)\n    f = x -> replace(x, \"\\n\" => \"\")\n    return group_strs .|> f .|> num_unique |> sum\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Output of variant 1:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"sum_unique(group_strs) = 6703"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Lowered code of variant 1:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@code_lowered sum_unique([\"abaz\\nasd\", \"ashds\\ndshgs\"])\nCodeInfo(\n1 ─      #23 = %new(Main.:(var\"#23#24\"))\n│        f = #23\n│   %3 = Base.broadcasted(Main.:|>, group_strs, f)\n│   %4 = Base.broadcasted(Main.:|>, %3, Main.num_unique)\n│   %5 = Base.materialize(%4)\n│   %6 = %5 |> Main.sum\n└──      return %6\n)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Now the okay-looking (to me) variant 2:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function sum_unique(group_strs::Vector{<:AbstractString})\n    # clump groups to one line before adding to set (removes the need for union)\n    return group_strs .|> x -> replace(x, \"\\n\" => \"\") .|> num_unique |> sum\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Output of variant 2:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"sum_unique(group_strs) = [3, 16, 22, 22, ...] # sum(output array) = 6703"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Lowered code of variant 2:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@code_lowered sum_unique2([\"abaz\\nasd\", \"ashds\\ndshgs\"])\nCodeInfo(\n1 ─      #27 = %new(Main.:(var\"#27#28\"))\n│   %2 = #27\n│   %3 = Base.broadcasted(Main.:|>, group_strs, %2)\n│   %4 = Base.materialize(%3)\n└──      return %4 # doesn't even call sum and just exits!\n)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I am not sure why this is happening. What is wrong with chaining after an anonymous function?"}]}]}],"thread_ts":"1607992899.130500","reply_count":17,"reply_users_count":3,"latest_reply":"1607997427.135700","reply_users":["U012XER8K4M","U01BX0V74Q2","UDB26738Q"],"subscribed":false},{"client_msg_id":"0e27e0d0-b87f-4279-94dd-9357595d0edf","type":"message","text":"hm, i wonder it it has something to do with mixing broadcasting when chaining","user":"U012XER8K4M","ts":"1607993921.130800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"az3ZT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hm, i wonder it it has something to do with mixing broadcasting when chaining"}]}]}],"thread_ts":"1607992899.130500","parent_user_id":"U01BX0V74Q2"},{"client_msg_id":"76763fe2-0512-4617-ba11-5a4e66241c52","type":"message","text":"```return (group_strs .|&gt; f .|&gt; num_unique) |&gt; sum```\nworks correctly i think","user":"U012XER8K4M","ts":"1607993942.131000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DgFb","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"return (group_strs .|> f .|> num_unique) |> sum"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"works correctly i think"}]}]}],"thread_ts":"1607992899.130500","parent_user_id":"U01BX0V74Q2"},{"client_msg_id":"bd785d9c-076e-421a-a0e1-50449f4c5330","type":"message","text":"Yes it does, I had initially made it work like that","user":"U01BX0V74Q2","ts":"1607994058.131200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R1N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes it does, I had initially made it work like that"}]}]}],"thread_ts":"1607992899.130500","parent_user_id":"U01BX0V74Q2"},{"client_msg_id":"f3398d21-69bb-4a86-92ae-f804eb331acf","type":"message","text":"```function sum_unique(group_strs::Vector{&lt;:AbstractString})\n    # clump groups to one line before adding to set (removes the need for union)\n    return group_strs .|&gt; (x -&gt; replace(x, \"\\n\" =&gt; \"\")) .|&gt; num_unique |&gt; sum\nend```","user":"U012XER8K4M","ts":"1607994157.131400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yh0X","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function sum_unique(group_strs::Vector{<:AbstractString})\n    # clump groups to one line before adding to set (removes the need for union)\n    return group_strs .|> (x -> replace(x, \"\\n\" => \"\")) .|> num_unique |> sum\nend"}]}]}],"thread_ts":"1607992899.130500","parent_user_id":"U01BX0V74Q2"},{"client_msg_id":"1222a299-85ff-4130-a93a-178909b144b8","type":"message","text":"Also, yeah, I feel this is a bug/issue with compiling these commands. For example if I move the anonymous function into num_unique() where there is single input chaining and no broadcasting, it works.\n\n```@inline function num_unique(group_str::AbstractString)\n    # clump groups to one line before adding to set (removes the need for union)\n    return group_str |&gt; x -&gt; replace(x, \"\\n\" =&gt; \"\") |&gt; Set |&gt; length\nend```","user":"U01BX0V74Q2","ts":"1607994160.131600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qJX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, yeah, I feel this is a bug/issue with compiling these commands. For example if I move the anonymous function into num_unique() where there is single input chaining and no broadcasting, it works.\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@inline function num_unique(group_str::AbstractString)\n    # clump groups to one line before adding to set (removes the need for union)\n    return group_str |> x -> replace(x, \"\\n\" => \"\") |> Set |> length\nend"}]}]}],"thread_ts":"1607992899.130500","parent_user_id":"U01BX0V74Q2"},{"client_msg_id":"1080ec91-6472-45b7-bee2-7884b223bb54","type":"message","text":"also seems to work","user":"U012XER8K4M","ts":"1607994162.131800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2oklR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"also seems to work"}]}]}],"thread_ts":"1607992899.130500","parent_user_id":"U01BX0V74Q2"},{"client_msg_id":"76ddda8b-1b77-4dd2-b437-60c549a1a4d4","type":"message","text":"Interesting too yeah","user":"U01BX0V74Q2","ts":"1607994210.132000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+QY9T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Interesting too yeah"}]}]}],"thread_ts":"1607992899.130500","parent_user_id":"U01BX0V74Q2"},{"client_msg_id":"7eb0f2a4-85d3-4a86-bd3a-1288bd443170","type":"message","text":"What is the binding order of `|&gt;` vs `-&gt;`?","user":"U012XER8K4M","ts":"1607994229.132200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bXL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What is the binding order of "},{"type":"text","text":"|>","style":{"code":true}},{"type":"text","text":" vs "},{"type":"text","text":"->","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1607992899.130500","parent_user_id":"U01BX0V74Q2"},{"client_msg_id":"0b0c748e-9d00-4a0b-bf27-057151daacb6","type":"message","text":"hm, yeah my new guess is that you are implicitly getting\n```function sum_unique(group_strs::Vector{&lt;:AbstractString})\n   return group_strs .|&gt; (x -&gt; replace(x, \"\\n\" =&gt; \"\") .|&gt; num_unique |&gt; sum)\nend```\n","user":"U012XER8K4M","ts":"1607994296.132400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"q90","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hm, yeah my new guess is that you are implicitly getting\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function sum_unique(group_strs::Vector{<:AbstractString})\n   return group_strs .|> (x -> replace(x, \"\\n\" => \"\") .|> num_unique |> sum)\nend"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1607992899.130500","parent_user_id":"U01BX0V74Q2"},{"client_msg_id":"7b2bc2cc-4c99-4aad-a7df-a565dd8717b0","type":"message","text":"Hmm, we can verify that. Let me check","user":"U01BX0V74Q2","ts":"1607994353.132600","team":"T68168MUP","edited":{"user":"U01BX0V74Q2","ts":"1607994368.000000"},"blocks":[{"type":"rich_text","block_id":"WYyO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmm, we can verify that. Let me check"}]}]}],"thread_ts":"1607992899.130500","parent_user_id":"U01BX0V74Q2"},{"client_msg_id":"2e8f0888-f312-4765-92b3-47087acb1814","type":"message","text":"Yes, you are right! Here's the lowered code\n```@code_lowered sum_unique([\"abaz\\nasd\", \"ashds\\ndshgs\"])\nCodeInfo(\n1 ─      #11 = %new(Main.:(var\"#11#12\"))\n│   %2 = #11\n│   %3 = Base.broadcasted(Main.:|&gt;, group_strs, %2)\n│   %4 = Base.materialize(%3)\n└──      return %4\n)```","user":"U01BX0V74Q2","ts":"1607994422.132900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OWq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, you are right! Here's the lowered code\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@code_lowered sum_unique([\"abaz\\nasd\", \"ashds\\ndshgs\"])\nCodeInfo(\n1 ─      #11 = %new(Main.:(var\"#11#12\"))\n│   %2 = #11\n│   %3 = Base.broadcasted(Main.:|>, group_strs, %2)\n│   %4 = Base.materialize(%3)\n└──      return %4\n)"}]}]}],"thread_ts":"1607992899.130500","parent_user_id":"U01BX0V74Q2"},{"client_msg_id":"e2c55ff1-440f-4dad-b1ae-f0f984ceb4ad","type":"message","text":"so that \"sum\" was hidden inside that anonymous function","user":"U012XER8K4M","ts":"1607994463.133100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nC1zX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so that \"sum\" was hidden inside that anonymous function"}]}]}],"thread_ts":"1607992899.130500","parent_user_id":"U01BX0V74Q2"},{"client_msg_id":"c90004cd-0118-4096-9481-41aa5f4d2226","type":"message","text":"Yes, and that is why sum of a scalar was the scalar itself and I was getting a vector as output no matter what","user":"U01BX0V74Q2","ts":"1607994578.133300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"94h","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, and that is why sum of a scalar was the scalar itself and I was getting a vector as output no matter what"}]}]}],"thread_ts":"1607992899.130500","parent_user_id":"U01BX0V74Q2"},{"client_msg_id":"94b43460-efab-4d59-8b4c-8b5e06e52aa4","type":"message","text":"I don't understand why you talk about compilation and show `@code_lowered`. Lowering happens before compilation","user":"UDB26738Q","ts":"1607996665.134300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+amK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't understand why you talk about compilation and show "},{"type":"text","text":"@code_lowered","style":{"code":true}},{"type":"text","text":". Lowering happens before compilation"}]}]}],"thread_ts":"1607992899.130500","parent_user_id":"U01BX0V74Q2"},{"client_msg_id":"30833640-7764-4e85-9a83-964b5c0cf256","type":"message","text":"To be honest, I don't understand what's the problem","user":"UDB26738Q","ts":"1607996693.135200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hAwdk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"To be honest, I don't understand what's the problem"}]}]}],"thread_ts":"1607992899.130500","parent_user_id":"U01BX0V74Q2"},{"client_msg_id":"b0115a81-8efa-4ce3-973c-a888bee3141c","type":"message","text":"Ah, I mistook them to be the same (or at least the Julia version of compilation before it is sent off to a proper compiler). Essentially, the problem is that an anonymous function while in the middle of broadcasting and chaining seems to be inferred/grouped improperly.","user":"U01BX0V74Q2","ts":"1607997274.135500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qBbSb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, I mistook them to be the same (or at least the Julia version of compilation before it is sent off to a proper compiler). Essentially, the problem is that an anonymous function while in the middle of broadcasting and chaining seems to be inferred/grouped improperly."}]}]}],"thread_ts":"1607992899.130500","parent_user_id":"U01BX0V74Q2"},{"client_msg_id":"3a74d671-2237-41d5-9e02-60746870efb6","type":"message","text":"This is what Julia thinks it is:\n```function sum_unique(group_strs::Vector{&lt;:AbstractString})\n   return group_strs .|&gt; (x -&gt; replace(x, \"\\n\" =&gt; \"\") .|&gt; num_unique |&gt; sum)\nend```\nbut in fact, it is should be this:\n```function sum_unique(group_strs::Vector{&lt;:AbstractString})\n   return group_strs .|&gt; (x -&gt; replace(x, \"\\n\" =&gt; \"\")) .|&gt; num_unique |&gt; sum\nend```\nor just\n```function sum_unique(group_strs::Vector{&lt;:AbstractString})\n   return group_strs .|&gt; x -&gt; replace(x, \"\\n\" =&gt; \"\") .|&gt; num_unique |&gt; sum\nend```\n(but the code right above doesn't transform to lower code like the one above it does -- the one with parenthesis around the anonymous function)","user":"U01BX0V74Q2","ts":"1607997427.135700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s4OK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is what Julia thinks it is:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function sum_unique(group_strs::Vector{<:AbstractString})\n   return group_strs .|> (x -> replace(x, \"\\n\" => \"\") .|> num_unique |> sum)\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"but in fact, it is should be this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function sum_unique(group_strs::Vector{<:AbstractString})\n   return group_strs .|> (x -> replace(x, \"\\n\" => \"\")) .|> num_unique |> sum\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"or just\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function sum_unique(group_strs::Vector{<:AbstractString})\n   return group_strs .|> x -> replace(x, \"\\n\" => \"\") .|> num_unique |> sum\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"(but the code right above doesn't transform to lower code like the one above it does -- the one with parenthesis around the anonymous function)"}]}]}],"thread_ts":"1607992899.130500","parent_user_id":"U01BX0V74Q2"}]