[{"client_msg_id":"db982d5b-c2c9-409b-a6bd-51f8ebbea5a2","type":"message","text":"How do I get `M` from `M{T}`?","user":"UC4QQPG4A","ts":"1613733244.201500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ec/pt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How do I get "},{"type":"text","text":"M","style":{"code":true}},{"type":"text","text":" from "},{"type":"text","text":"M{T}","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1613733244.201500","reply_count":35,"reply_users_count":6,"latest_reply":"1613754692.223200","reply_users":["B01J9QZ4SP8","U7HAYKY9X","UH24GRBLL","UC4QQPG4A","U66SR8JHX","U8D9768Q6"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1613733245.201600","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"ba7aa46f-745e-4876-bc47-64fa83e6697c","type":"message","text":"`Base.typename(x).wrapper`","user":"U7HAYKY9X","ts":"1613733786.201800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Soy8g","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Base.typename(x).wrapper","style":{"code":true}}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"560a78c7-7c0a-4c9e-92e1-16692ad7655d","type":"message","text":"Why do you need this?","user":"UH24GRBLL","ts":"1613734112.202500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UgE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Why do you need this?"}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"f3852fe8-090d-40e5-a4b8-396973d32e7a","type":"message","text":"Where is something like this asked that it comes up this often","user":"UH24GRBLL","ts":"1613734126.202700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"69l","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Where is something like this asked that it comes up this often"}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"99ed6c67-f4a6-4060-904e-cb8f5efd80fb","type":"message","text":"<@U7HAYKY9X> do you have this answer bound to some keyboard macro by now? :D","user":"UH24GRBLL","ts":"1613734184.202900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UYkyQ","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U7HAYKY9X"},{"type":"text","text":" do you have this answer bound to some keyboard macro by now? :D"}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"fc5d4eb4-4b70-4661-9b1d-0238d35af5fc","type":"message","text":"That's a good idea :P would save me some keystrokes","user":"U7HAYKY9X","ts":"1613734204.203100","team":"T68168MUP","edited":{"user":"U7HAYKY9X","ts":"1613734215.000000"},"blocks":[{"type":"rich_text","block_id":"YjAQ9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's a good idea :P would save me some keystrokes"}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"9a28a2e9-71bf-4bb8-b739-d1d2ac181baa","type":"message","text":"<@UH24GRBLL> Asked the same thing the last time it came up, here are some responses:\n<https://julialang.slack.com/archives/C6A044SQH/p1613558384038200>","user":"U7HAYKY9X","ts":"1613734286.203700","team":"T68168MUP","attachments":[{"from_url":"https://julialang.slack.com/archives/C6A044SQH/p1613558384038200","fallback":"[February 17th, 2021 2:39 AM] brian.groenke: Does anyone know how to take a parametric type, e.g. `Array{Float64,1}` and get its `UnionAll`, i.e. drop the type parameters? So basically define a function `f(::Type{A}) where {A} = ...` which produces the `UnionAll` of `A`? (in the case of `Array{Float64,1}` this would be `Array` )","ts":"1613558384.038200","author_id":"U01H36BUDJB","author_subname":"Brian Groenke","channel_id":"C6A044SQH","channel_name":"helpdesk","is_msg_unfurl":true,"is_thread_root_unfurl":true,"text":"Does anyone know how to take a parametric type, e.g. `Array{Float64,1}` and get its `UnionAll`, i.e. drop the type parameters? So basically define a function `f(::Type{A}) where {A} = ...` which produces the `UnionAll` of `A`? (in the case of `Array{Float64,1}` this would be `Array` )","author_name":"Brian Groenke","author_link":"https://julialang.slack.com/team/U01H36BUDJB","author_icon":"https://avatars.slack-edge.com/2020-12-23/1581226862695_a0d0bcef3ad7c064bb2e_48.jpg","mrkdwn_in":["text"],"id":1,"original_url":"https://julialang.slack.com/archives/C6A044SQH/p1613558384038200","footer":"Thread in #helpdesk"}],"blocks":[{"type":"rich_text","block_id":"aYd2","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH24GRBLL"},{"type":"text","text":" Asked the same thing the last time it came up, here are some responses:\n"},{"type":"link","url":"https://julialang.slack.com/archives/C6A044SQH/p1613558384038200"}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"1a249640-eb18-4901-bc43-3a009c52cc96","type":"message","text":"what's wrong with `typejoin`?","user":"UH24GRBLL","ts":"1613734444.204000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qXeRM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what's wrong with "},{"type":"text","text":"typejoin","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"94a0f490-fe01-4018-9c6b-01d88dae7549","type":"message","text":"This smells like a XY problem","user":"UH24GRBLL","ts":"1613734464.204200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"t6ksA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This smells like a XY problem"}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"27475ba6-ea91-42d7-8e77-a8942f78fc3c","type":"message","text":"Cheap constructors; <https://github.com/FluxML/Optimisers.jl/blob/0c076d2ea61233837024bc7cef356847b31ad3c7/src/rules.jl#L518>\n\nBut now if you want to construct it back, you need the UnionAll, rather than the parameterised type, which type inference (very handily) produces","user":"UC4QQPG4A","ts":"1613734506.204400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Zc7J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Cheap constructors; "},{"type":"link","url":"https://github.com/FluxML/Optimisers.jl/blob/0c076d2ea61233837024bc7cef356847b31ad3c7/src/rules.jl#L518"},{"type":"text","text":"\n\nBut now if you want to construct it back, you need the UnionAll, rather than the parameterised type, which type inference (very handily) produces"}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A","reactions":[{"name":"+1","users":["U8D9768Q6"],"count":1}]},{"client_msg_id":"134051b4-6a25-4d52-9e8c-e10834793d02","type":"message","text":"I'm not sure I understand how that link relates to your original question, sorry","user":"UH24GRBLL","ts":"1613734857.204600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QenY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not sure I understand how that link relates to your original question, sorry"}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"d715f848-6e0e-41be-a54b-44d1047ea7aa","type":"message","text":"So, you generate these constructors that can take in an instance of their type in, and produce a new instance with some fields modified. Sort of like a simpler version of Setfield.jl","user":"UC4QQPG4A","ts":"1613734956.204800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UwmH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So, you generate these constructors that can take in an instance of their type in, and produce a new instance with some fields modified. Sort of like a simpler version of Setfield.jl"}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A","reactions":[{"name":"+1","users":["U8D9768Q6"],"count":1}]},{"client_msg_id":"5396c8c8-c3dd-4635-b605-ace80c9d2e04","type":"message","text":"right, but in that example you already have the name of the constructor in `Opt`","user":"UH24GRBLL","ts":"1613735102.205000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LT=z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"right, but in that example you already have the name of the constructor in "},{"type":"text","text":"Opt","style":{"code":true}}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"e054e322-4dbd-41a9-b064-46145c9bb4c3","type":"message","text":"I don't get how you jump from that Flux example to `M{T}`","user":"UH24GRBLL","ts":"1613735295.205200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ps5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't get how you jump from that Flux example to "},{"type":"text","text":"M{T}","style":{"code":true}}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"e4d17f79-1fdc-4a4a-a511-00fdea21f8c9","type":"message","text":"Check this\n```function f(s::MyCompositeType{O}, args...) where O # O is the optimiser\n  O(s.opt, eta = neweta)\nend```\nHere `O` would be a paramteric type, for which the constructor does not exist. Apologies, I should have been clearer about the requirements","user":"UC4QQPG4A","ts":"1613735630.205400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pbu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Check this\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function f(s::MyCompositeType{O}, args...) where O # O is the optimiser\n  O(s.opt, eta = neweta)\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Here "},{"type":"text","text":"O","style":{"code":true}},{"type":"text","text":" would be a paramteric type, for which the constructor does not exist. Apologies, I should have been clearer about the requirements"}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"7d2a22f3-f3a7-4d79-9f82-7e35d7c7d2a9","type":"message","text":"I'd define `O(a::A, b::B, c::C, ...) = O{A,B,C,...}(a,b,c, ...)` for the types","user":"UH24GRBLL","ts":"1613736033.205600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Awu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'd define "},{"type":"text","text":"O(a::A, b::B, c::C, ...) = O{A,B,C,...}(a,b,c, ...)","style":{"code":true}},{"type":"text","text":" for the types"}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"ce21beab-9e54-4a3d-a318-133c50c0fefb","type":"message","text":"that way I don't mix up anything, since each type may have a different order for the type parameters","user":"UH24GRBLL","ts":"1613736043.205800","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1613736054.000000"},"blocks":[{"type":"rich_text","block_id":"dXz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that way I don't mix up anything, since each type may have a different order for the type parameters"}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"ac9e3b64-89bc-4c37-9217-dd23ed534f32","type":"message","text":"Not sure what you mean by \"for which the constructor does not exist\"","user":"UH24GRBLL","ts":"1613736087.206100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eg9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not sure what you mean by \"for which the constructor does not exist\""}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"46e04657-55f6-42db-a876-9aa91e49c7a3","type":"message","text":"The functions defined by the line i linked to earlier produce `ADAM(::ADAM{T}, …)`, whereas example that I posted here calls `ADAM{Float32}(::ADAM{Float32}, …)`  which does not exist.\n\nYou’re basically recommending that I have type constructors defined as well. It would be nice for type stability to ensure `f(::T)::T` as well, I suppose.","user":"UC4QQPG4A","ts":"1613736420.206300","team":"T68168MUP","edited":{"user":"UC4QQPG4A","ts":"1613736682.000000"},"blocks":[{"type":"rich_text","block_id":"Ha31G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The functions defined by the line i linked to earlier produce "},{"type":"text","text":"ADAM(::ADAM{T}, …)","style":{"code":true}},{"type":"text","text":", whereas example that I posted here calls "},{"type":"text","text":"ADAM{Float32}(::ADAM{Float32}, …)","style":{"code":true}},{"type":"text","text":"  which does not exist.\n\nYou’re basically recommending that I have type constructors defined as well. It would be nice for type stability to ensure "},{"type":"text","text":"f(::T)::T","style":{"code":true}},{"type":"text","text":" as well, I suppose."}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"b76350f0-3629-46ff-b480-58cd223d4b29","type":"message","text":"if you use positional keywords, you'll be type stable..?","user":"UH24GRBLL","ts":"1613736600.206500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IUUjr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you use positional keywords, you'll be type stable..?"}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"a442c4ea-5bab-48f5-affe-41116e86ddb4","type":"message","text":"Yes, having type constructors for the types you want to use is what I'm saying, I think","user":"UH24GRBLL","ts":"1613736626.206700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OfGd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, having type constructors for the types you want to use is what I'm saying, I think"}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"bf0f7188-c6c4-4189-942e-e7d874332264","type":"message","text":"as far as I can tell, e.g. Adam is already defined like that anyway..?","user":"UH24GRBLL","ts":"1613736904.207000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sHHUb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"as far as I can tell, e.g. Adam is already defined like that anyway..?"}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"5578153a-921e-422a-b689-6f484cbda92e","type":"message","text":"I still feel like I'm missing something here","user":"UH24GRBLL","ts":"1613737064.207200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hXjrH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I still feel like I'm missing something here"}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"0d83c789-7890-4ea6-a7c3-52617ce11177","type":"message","text":"Aaah I see - you have `O == ADAM{Float32}`","user":"UH24GRBLL","ts":"1613737120.207400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=lBy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Aaah I see - you have "},{"type":"text","text":"O == ADAM{Float32}","style":{"code":true}}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"4807dbe5-2ebd-4b4c-9e5c-fe6d2ddd7ded","type":"message","text":"If you have `ADAM(η = 1f-3, β = (9f-1, 9.99f-1), ϵ = eps(typeof(η))) = ADAM{typeof(η)}(η, β, ϵ)`, you could define `(o::ADAM)(::ADAM, η = 1f-3, β = (9f-1, 9.99f-1), ϵ = eps(typeof(η))) = ADAM(η, β, ϵ)`. That'd allow you to keep the other functor method as well as have the convenience constructor type stable as well, I think","user":"UH24GRBLL","ts":"1613737435.207600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Mj0xE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you have "},{"type":"text","text":"ADAM(η = 1f-3, β = (9f-1, 9.99f-1), ϵ = eps(typeof(η))) = ADAM{typeof(η)}(η, β, ϵ)","style":{"code":true}},{"type":"text","text":", you could define "},{"type":"text","text":"(o::ADAM)(::ADAM, η = 1f-3, β = (9f-1, 9.99f-1), ϵ = eps(typeof(η))) = ADAM(η, β, ϵ)","style":{"code":true}},{"type":"text","text":". That'd allow you to keep the other functor method as well as have the convenience constructor type stable as well, I think"}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"d80c3345-3c6f-4ed7-a21e-524afb57d35d","type":"message","text":"you'll have to define it for each optimizer, but I don't think that's a problem if it helps stability","user":"UH24GRBLL","ts":"1613737465.207800","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1613737482.000000"},"blocks":[{"type":"rich_text","block_id":"Z7Ta","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you'll have to define it for each optimizer, but I don't think that's a problem if it helps stability"}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"80a4e375-25ea-49a2-8d07-a284e8b67d57","type":"message","text":"the instability comes from the fact that the convenice `@eval` uses keyword arguments, which don't participate in dispatch and thus are inherently type unstable","user":"UH24GRBLL","ts":"1613737518.208100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7vDF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the instability comes from the fact that the convenice "},{"type":"text","text":"@eval","style":{"code":true}},{"type":"text","text":" uses keyword arguments, which don't participate in dispatch and thus are inherently type unstable"}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"41a03bd5-78b7-4e96-ada0-eb0faa439c27","type":"message","text":"hmm, the `(o::ADAM)(...)` Syntax already exists for something else (we want to reserve it anyway), and I don't want to change its current meaning which is to apply the optimisation step.","user":"UC4QQPG4A","ts":"1613739404.213600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iKBB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmm, the "},{"type":"text","text":"(o::ADAM)(...)","style":{"code":true}},{"type":"text","text":" Syntax already exists for something else (we want to reserve it anyway), and I don't want to change its current meaning which is to apply the optimisation step."}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"9a745f6a-3391-459d-8e07-efe8d3da676b","type":"message","text":"yes, that's why I passed `::ADAM` as the first argument, as that's not taken yet","user":"UH24GRBLL","ts":"1613739704.213800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jgH5O","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, that's why I passed "},{"type":"text","text":"::ADAM","style":{"code":true}},{"type":"text","text":" as the first argument, as that's not taken yet"}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"9244ada0-a6f4-43bd-b7b9-954f460b2384","type":"message","text":"you could make it mean to convert an optimizer of type `O` to an optimizer of type `P`, which would be passed as the first parameter, if you'd like","user":"UH24GRBLL","ts":"1613739773.214000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xvEQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you could make it mean to convert an optimizer of type "},{"type":"text","text":"O","style":{"code":true}},{"type":"text","text":" to an optimizer of type "},{"type":"text","text":"P","style":{"code":true}},{"type":"text","text":", which would be passed as the first parameter, if you'd like"}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"5d5c04c1-7bc8-4a88-bffc-4ab6872b77df","type":"message","text":"if that's meaningful, anyway","user":"UH24GRBLL","ts":"1613739781.214200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6j5qU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if that's meaningful, anyway"}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"08fbcf53-d5cc-4a39-8b7a-de98d05e2cab","type":"message","text":"Perhaps, but that's a bit awkward since they do very different things","user":"UC4QQPG4A","ts":"1613746610.218100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jHdqS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Perhaps, but that's a bit awkward since they do very different things"}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"006f16ef-f5b4-47ce-8849-8ac950f79ac1","type":"message","text":"One thing that is probably not that bad if there are not too many types is to write a function along the lines of `constructor(::M) where {M &lt;: AbstractM} = M # or an appropriate type`","user":"U66SR8JHX","ts":"1613750674.220700","team":"T68168MUP","edited":{"user":"U66SR8JHX","ts":"1613754890.000000"},"blocks":[{"type":"rich_text","block_id":"uamYe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"One thing that is probably not that bad if there are not too many types is to write a function along the lines of "},{"type":"text","text":"constructor(::M) where {M <: AbstractM} = M # or an appropriate type","style":{"code":true}}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"0341f6ea-5653-4784-8790-bf492bc87738","type":"message","text":"It's really not hard to find situations where you want the UnionAll, not the fully parameterized type","user":"U8D9768Q6","ts":"1613754275.222300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"beXQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's really not hard to find situations where you want the UnionAll, not the fully parameterized type"}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"},{"client_msg_id":"2d3d8ba4-5828-4190-8658-eeb88dd09f8c","type":"message","text":"E.g. if you have\n```abstract type AbstractComplex{T} &lt;: Number end```\nand you say want to define `sin` for these things and fallback on `Complex`\n```function sin(x::AbstractComplex)\n    typeof(x)(sin(Complex(x))\nend```\nbut this won't work if say `x::AbstractComplex{T}`. You want the unparameterized type of x.","user":"U8D9768Q6","ts":"1613754692.223200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fCVs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"E.g. if you have\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"abstract type AbstractComplex{T} <: Number end"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"and you say want to define "},{"type":"text","text":"sin","style":{"code":true}},{"type":"text","text":" for these things and fallback on "},{"type":"text","text":"Complex","style":{"code":true}},{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function sin(x::AbstractComplex)\n    typeof(x)(sin(Complex(x))\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"but this won't work if say "},{"type":"text","text":"x::AbstractComplex{T}","style":{"code":true}},{"type":"text","text":". You want the unparameterized type of x."}]}]}],"thread_ts":"1613733244.201500","parent_user_id":"UC4QQPG4A"}]