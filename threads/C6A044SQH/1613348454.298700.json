[{"client_msg_id":"3c9ba639-f0aa-49b1-970c-f568630b8a54","type":"message","text":"Shouldn't this work in Julia 1.6:\n\n```mylist = [\"a\", \"b\", \"c\"]\nfindfirst([\"a\"], mylist)```\nInstead, I get an error like this:\n\n```ERROR: MethodError: no method matching findfirst(::Vector{String}, ::Vector{String})\nClosest candidates are:\n  findfirst(::Function, ::Union{AbstractString, AbstractArray}) at array.jl:1906\n  findfirst(::Function, ::Any) at array.jl:1898\n  findfirst(::AbstractArray) at array.jl:1824\n  ...\nStacktrace:\n [1] top-level scope\n   @ REPL[22]:1```\n","user":"US64J0NPQ","ts":"1613348454.298700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HK4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Shouldn't this work in Julia 1.6:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"mylist = [\"a\", \"b\", \"c\"]\nfindfirst([\"a\"], mylist)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nInstead, I get an error like this:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"ERROR: MethodError: no method matching findfirst(::Vector{String}, ::Vector{String})\nClosest candidates are:\n  findfirst(::Function, ::Union{AbstractString, AbstractArray}) at array.jl:1906\n  findfirst(::Function, ::Any) at array.jl:1898\n  findfirst(::AbstractArray) at array.jl:1824\n  ...\nStacktrace:\n [1] top-level scope\n   @ REPL[22]:1"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1613348454.298700","reply_count":17,"reply_users_count":4,"latest_reply":"1613354364.302800","reply_users":["B01J9QZ4SP8","US64J0NPQ","UD0NS8PDF","UH8A351DJ"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1613348457.298800","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1613348454.298700","parent_user_id":"US64J0NPQ"},{"client_msg_id":"de12a93a-621c-4cf8-b11d-c723186fd0c8","type":"message","text":"This works: `findall(x -&gt; x == \"a\", mylist)` But I was under the impression the other syntax works in Julia 1.6. :upside_down_face:","user":"US64J0NPQ","ts":"1613348595.299000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pxgs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This works: "},{"type":"text","text":"findall(x -> x == \"a\", mylist)","style":{"code":true}},{"type":"text","text":" But I was under the impression the other syntax works in Julia 1.6. "},{"type":"emoji","name":"upside_down_face"}]}]}],"thread_ts":"1613348454.298700","parent_user_id":"US64J0NPQ"},{"client_msg_id":"8f618435-8e1f-4392-aa67-e8fa053782cc","type":"message","text":"You might be thinking of `findfirst(==(\"a\"), mylist)`, not exactly sure when it started working.","user":"UD0NS8PDF","ts":"1613348994.299200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GGJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You might be thinking of "},{"type":"text","text":"findfirst(==(\"a\"), mylist)","style":{"code":true}},{"type":"text","text":", not exactly sure when it started working."}]}]}],"thread_ts":"1613348454.298700","parent_user_id":"US64J0NPQ"},{"client_msg_id":"02d93962-c349-42cd-80dd-9748915b3362","type":"message","text":"it only works for UInt8 and 16:\n```julia&gt; findfirst([UInt8(3)], UInt8.([7,3,9]))\n2:2```\n(I PRed this so I kind of remember, and everyone agrees this should be generalized as soon as possible","user":"UH8A351DJ","ts":"1613350227.299400","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1613350260.000000"},"blocks":[{"type":"rich_text","block_id":"IUS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it only works for UInt8 and 16:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> findfirst([UInt8(3)], UInt8.([7,3,9]))\n2:2"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"(I PRed this so I kind of remember, and everyone agrees this should be generalized as soon as possible"}]}]}],"thread_ts":"1613348454.298700","parent_user_id":"US64J0NPQ","reactions":[{"name":"today-i-learned","users":["UD0NS8PDF","U6QGE7S86","U01HD5VFXJM"],"count":3}]},{"client_msg_id":"97633ca2-5f2e-437f-9671-b631d1623d17","type":"message","text":"(a problem of a complete generalization is that we will have to choose between `find(::Elem, ::Array)` or `find(::SubArray, ::Array)`","user":"UH8A351DJ","ts":"1613350352.299700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ld=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(a problem of a complete generalization is that we will have to choose between "},{"type":"text","text":"find(::Elem, ::Array)","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"find(::SubArray, ::Array)","style":{"code":true}}]}]}],"thread_ts":"1613348454.298700","parent_user_id":"US64J0NPQ"},{"client_msg_id":"5d82d338-102d-4809-a7f1-b6931c84a601","type":"message","text":"most likely we will not allow `find(::Elem, ::Array)` since that is rare and writing `==(x)` is not too bad","user":"UH8A351DJ","ts":"1613350437.299900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bwl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"most likely we will not allow "},{"type":"text","text":"find(::Elem, ::Array)","style":{"code":true}},{"type":"text","text":" since that is rare and writing "},{"type":"text","text":"==(x)","style":{"code":true}},{"type":"text","text":" is not too bad"}]}]}],"thread_ts":"1613348454.298700","parent_user_id":"US64J0NPQ"},{"client_msg_id":"7d9d9b61-a6ae-45c0-85af-1ba24f59fe99","type":"message","text":"What’s the logic of this, I never saw it… related to `findfirst('a', \"cab\")`?","user":"UD0NS8PDF","ts":"1613350920.300200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1rC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What’s the logic of this, I never saw it… related to "},{"type":"text","text":"findfirst('a', \"cab\")","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1613348454.298700","parent_user_id":"US64J0NPQ"},{"client_msg_id":"536c290d-bdd9-405c-942f-de300e10f1a9","type":"message","text":"we don't think of String as Vector of Chars","user":"UH8A351DJ","ts":"1613350950.300400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zeUN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we don't think of String as Vector of Chars"}]}]}],"thread_ts":"1613348454.298700","parent_user_id":"US64J0NPQ"},{"client_msg_id":"00a92e05-c714-4555-a150-b8bd62b318cf","type":"message","text":"because you can't have String of String the way you have vector of vector, you don't run into ambiguity for strings","user":"UH8A351DJ","ts":"1613350979.300600","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1613351011.000000"},"blocks":[{"type":"rich_text","block_id":"0DK5s","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"because you can't have String of String the way you have vector of vector, you don't run into ambiguity for strings"}]}]}],"thread_ts":"1613348454.298700","parent_user_id":"US64J0NPQ"},{"client_msg_id":"069baf5e-8dd5-4dd2-80b1-194d9fde3472","type":"message","text":"But what is the logic? Why is a vector appearing like a callable? Why is it returning a range of indices, not one?","user":"UD0NS8PDF","ts":"1613351036.300900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PUzd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But what is the logic? Why is a vector appearing like a callable? Why is it returning a range of indices, not one?"}]}]}],"thread_ts":"1613348454.298700","parent_user_id":"US64J0NPQ"},{"client_msg_id":"92bec4f2-9b90-42ba-b354-3fc0bb06254c","type":"message","text":"Oh, help says `findfirst([0x52, 0x62], [0x40, 0x52, 0x62, 0x63]) == 2:3` which explains a bit. But why UInt8, what’s it for?","user":"UD0NS8PDF","ts":"1613351142.301200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9ZYv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh, help says "},{"type":"text","text":"findfirst([0x52, 0x62], [0x40, 0x52, 0x62, 0x63]) == 2:3","style":{"code":true}},{"type":"text","text":" which explains a bit. But why UInt8, what’s it for?"}]}]}],"thread_ts":"1613348454.298700","parent_user_id":"US64J0NPQ"},{"client_msg_id":"94335466-660b-4ecb-88cc-a8ea37787d51","type":"message","text":"UInt limitation is simply due to the fact that we're reusing the underlying algorithms for string search and just relaxing the methods to include UInt8,16.","user":"UH8A351DJ","ts":"1613351251.301400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ttc7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"UInt limitation is simply due to the fact that we're reusing the underlying algorithms for string search and just relaxing the methods to include UInt8,16."}]}]}],"thread_ts":"1613348454.298700","parent_user_id":"US64J0NPQ"},{"client_msg_id":"3088940f-20f0-48fd-97a0-c000d42ed49d","type":"message","text":"Ah this makes sense - but that is curious. I have never seen that syntax before of `==(x)` - what does it translate to?","user":"US64J0NPQ","ts":"1613353652.301600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LudN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah this makes sense - but that is curious. I have never seen that syntax before of "},{"type":"text","text":"==(x)","style":{"code":true}},{"type":"text","text":" - what does it translate to?"}]}]}],"thread_ts":"1613348454.298700","parent_user_id":"US64J0NPQ"},{"client_msg_id":"52a20819-a72d-41c5-92a3-596f443d2c80","type":"message","text":"`y -&gt; y==x` , it's partially applied / curried syntax sugar. created with `Base.Fix2` or `Base.Fix1` depending on which is used more commonly","user":"UH8A351DJ","ts":"1613353712.301800","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1613353755.000000"},"blocks":[{"type":"rich_text","block_id":"82lC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"y -> y==x","style":{"code":true}},{"type":"text","text":" , it's partially applied / curried syntax sugar. created with "},{"type":"text","text":"Base.Fix2","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"Base.Fix1","style":{"code":true}},{"type":"text","text":" depending on which is used more commonly"}]}]}],"thread_ts":"1613348454.298700","parent_user_id":"US64J0NPQ"},{"client_msg_id":"0009ae49-de0e-4e8c-bbc7-c0f1627fec53","type":"message","text":"Ah ok - just a sort of short hand. I hadn't seen that style of writing anonymous functions before. I think that syntax is fair. Thanks for the explanation Jerry!","user":"US64J0NPQ","ts":"1613353887.302300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SLDRM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah ok - just a sort of short hand. I hadn't seen that style of writing anonymous functions before. I think that syntax is fair. Thanks for the explanation Jerry!"}]}]}],"thread_ts":"1613348454.298700","parent_user_id":"US64J0NPQ"},{"client_msg_id":"e6aca67d-98ad-4eac-8d36-3b18db66cfc1","type":"message","text":"Also, thanks as well Michael. :slightly_smiling_face: Much appreciated!","user":"US64J0NPQ","ts":"1613353910.302500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iPkcb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, thanks as well Michael. "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":" Much appreciated!"}]}]}],"thread_ts":"1613348454.298700","parent_user_id":"US64J0NPQ"},{"client_msg_id":"2135c39b-3941-44d1-a94d-2abe6667e9b4","type":"message","text":"Threw the answer on Discourse - thanks guys. :slightly_smiling_face:","user":"US64J0NPQ","ts":"1613354364.302800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PlM0R","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Threw the answer on Discourse - thanks guys. "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1613348454.298700","parent_user_id":"US64J0NPQ"}]