[{"client_msg_id":"184e13dd-8eb6-416a-896d-5f5452cff886","type":"message","text":"Is this a ri8 way 2 define a new type?:\n`mutable struct Node{T}`\n    `loc::Union{Vector{T}, Matrix{T}}`\n    `axis::Vector{Int}`\n    `children::NamedTuple{`\n        `(:left, :right),` \n        `Tuple{`\n            `Union{Nothing, Vector{T}, Vector{Vector{T}}, Matrix{T}, Node{T}, SubArray{Vector{T}, 1, Vector{Vector{T}}, Tuple{UnitRange{Int64}}, true}},` \n            `Union{Nothing, Vector{T}, Vector{Vector{T}}, Matrix{T}, Node{T}, SubArray{Vector{T}, 1, Vector{Vector{T}}, Tuple{UnitRange{Int64}}, true}}`\n        `}`\n    `}`\n    `box::NamedTuple{`\n        `(:min, :max),` \n        `Tuple{Vector{T}, Vector{T}}`\n    `}`\n`end`\nif not, then wht is a good way to go about this?:thinking_face:","user":"U012FUYRNQH","ts":"1617413460.313300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0Qu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is this a ri8 way 2 define a new type?:\n"},{"type":"text","text":"mutable struct Node{T}","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"    loc::Union{Vector{T}, Matrix{T}}","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"    axis::Vector{Int}","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"    children::NamedTuple{","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"        (:left, :right), ","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"        Tuple{","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"            Union{Nothing, Vector{T}, Vector{Vector{T}}, Matrix{T}, Node{T}, SubArray{Vector{T}, 1, Vector{Vector{T}}, Tuple{UnitRange{Int64}}, true}}, ","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"            Union{Nothing, Vector{T}, Vector{Vector{T}}, Matrix{T}, Node{T}, SubArray{Vector{T}, 1, Vector{Vector{T}}, Tuple{UnitRange{Int64}}, true}}","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"        }","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"    }","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"    box::NamedTuple{","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"        (:min, :max), ","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"        Tuple{Vector{T}, Vector{T}}","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"    }","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"end","style":{"code":true}},{"type":"text","text":"\nif not, then wht is a good way to go about this?"},{"type":"emoji","name":"thinking_face"}]}]}],"thread_ts":"1617413460.313300","reply_count":10,"reply_users_count":2,"latest_reply":"1617420235.320000","reply_users":["U011V2YN59N","U012FUYRNQH"],"is_locked":false,"subscribed":false},{"client_msg_id":"0086aef7-b8f3-4934-bbe9-af4323baa023","type":"message","text":"what sort of type are you trying to define?","user":"U011V2YN59N","ts":"1617414758.315100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vpm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what sort of type are you trying to define?"}]}]}],"thread_ts":"1617413460.313300","parent_user_id":"U012FUYRNQH"},{"client_msg_id":"5601ca97-909e-47e5-8aa4-e3f31e377aa0","type":"message","text":"in general you don't need to write out full types like that, you can create another two type parameters to take the place of the `NamedTuple{...}`","user":"U011V2YN59N","ts":"1617414824.315300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7vKMo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in general you don't need to write out full types like that, you can create another two type parameters to take the place of the "},{"type":"text","text":"NamedTuple{...}","style":{"code":true}}]}]}],"thread_ts":"1617413460.313300","parent_user_id":"U012FUYRNQH","reactions":[{"name":"point_up","users":["U67G3QRJM"],"count":1}]},{"client_msg_id":"7a849ab2-372e-492a-b0a0-0314b343369f","type":"message","text":"&gt;  what sort of type are you trying to define?\nJust a kdtree node :smile:","user":"U012FUYRNQH","ts":"1617418922.318000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Lkfi","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":" what sort of type are you trying to define?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Just a kdtree node "},{"type":"emoji","name":"smile"}]}]}],"thread_ts":"1617413460.313300","parent_user_id":"U012FUYRNQH"},{"client_msg_id":"95bb24aa-8e02-48c8-bd4b-15ed39a4b368","type":"message","text":"&gt; you can create another two type parameters to take the place of the`NamedTuple{...}`\nu mean like this?\n`mutable struct Box{T}`\n    `min::Vector{T}` \n      `max::Vector{T}`\n`end`\n&amp; using `box::Box{T}` in `Node{T}` type?","user":"U012FUYRNQH","ts":"1617419338.318400","team":"T68168MUP","edited":{"user":"U012FUYRNQH","ts":"1617419392.000000"},"blocks":[{"type":"rich_text","block_id":"5WmZ","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"you can create another two type parameters to take the place of the"},{"type":"text","text":"NamedTuple{...}","style":{"code":true}}]},{"type":"rich_text_section","elements":[{"type":"text","text":"u mean like this?\n"},{"type":"text","text":"mutable struct Box{T}","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"    min::Vector{T} ","style":{"code":true}},{"type":"text","text":"\n      "},{"type":"text","text":"max::Vector{T}","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"end","style":{"code":true}},{"type":"text","text":"\n& using "},{"type":"text","text":"box::Box{T}","style":{"code":true}},{"type":"text","text":" in "},{"type":"text","text":"Node{T}","style":{"code":true}},{"type":"text","text":" type?"}]}]}],"thread_ts":"1617413460.313300","parent_user_id":"U012FUYRNQH"},{"client_msg_id":"2e3066d2-a403-4f3e-977d-3fe4112241bd","type":"message","text":"Also, i have this feeling that parameters that use `Union` doesn't feel elegant :thinking_face: &amp; might reduce performance during runtime. Should I worry about using `Union`s while defining types in julia?","user":"U012FUYRNQH","ts":"1617419812.318700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jkUAM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, i have this feeling that parameters that use "},{"type":"text","text":"Union","style":{"code":true}},{"type":"text","text":" doesn't feel elegant "},{"type":"emoji","name":"thinking_face"},{"type":"text","text":" & might reduce performance during runtime. Should I worry about using "},{"type":"text","text":"Union","style":{"code":true}},{"type":"text","text":"s while defining types in julia?"}]}]}],"thread_ts":"1617413460.313300","parent_user_id":"U012FUYRNQH"},{"client_msg_id":"94ca0da4-b50d-4bc6-add0-4ce531177b6d","type":"message","text":"no, I mean like this\n```mutable struct Node{T,TChild,TBox}\n    loc::Union{Vector{T}, Matrix{T}}\n    axis::Vector{Int}\n    children::TChild\n    box::TBox\nend```\n","user":"U011V2YN59N","ts":"1617419851.318900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WmrA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no, I mean like this\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"mutable struct Node{T,TChild,TBox}\n    loc::Union{Vector{T}, Matrix{T}}\n    axis::Vector{Int}\n    children::TChild\n    box::TBox\nend"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1617413460.313300","parent_user_id":"U012FUYRNQH"},{"client_msg_id":"687ff31c-bbcf-4ed6-a39a-de82c28852f9","type":"message","text":"Unions are generally optimized well during runtime.","user":"U011V2YN59N","ts":"1617419854.319100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jSn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Unions are generally optimized well during runtime."}]}]}],"thread_ts":"1617413460.313300","parent_user_id":"U012FUYRNQH","reactions":[{"name":"+1","users":["U012FUYRNQH"],"count":1}]},{"client_msg_id":"6b5f4435-6522-4c46-ab2c-263409af2721","type":"message","text":"actually, you do not need to specify types for `loc` or `axis` either, you can do the same thing I did here","user":"U011V2YN59N","ts":"1617419924.319300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CmkM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"actually, you do not need to specify types for "},{"type":"text","text":"loc","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"axis","style":{"code":true}},{"type":"text","text":" either, you can do the same thing I did here"}]}]}],"thread_ts":"1617413460.313300","parent_user_id":"U012FUYRNQH"},{"client_msg_id":"21c74dbb-271d-4e74-98d3-234170c722a2","type":"message","text":"```mutable struct Node{TLoc,TAxis,TChild,TBox}\n    loc::TLoc\n    axis::TAxis\n    children::TChild\n    box::TBox\nend```\n","user":"U011V2YN59N","ts":"1617419948.319600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eB==","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"mutable struct Node{TLoc,TAxis,TChild,TBox}\n    loc::TLoc\n    axis::TAxis\n    children::TChild\n    box::TBox\nend"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1617413460.313300","parent_user_id":"U012FUYRNQH","reactions":[{"name":"star-struck","users":["U012FUYRNQH"],"count":1}]},{"client_msg_id":"228d383e-5ac9-4dd7-a42d-febd75118625","type":"message","text":"WHOAH!:exploding_head: I didn't know i could do that. that's great. it's fast, flexible &amp; readable...","user":"U012FUYRNQH","ts":"1617420235.320000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Xir","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"WHOAH!"},{"type":"emoji","name":"exploding_head"},{"type":"text","text":" I didn't know i could do that. that's great. it's fast, flexible & readable..."}]}]}],"thread_ts":"1617413460.313300","parent_user_id":"U012FUYRNQH","reactions":[{"name":"+1","users":["U011V2YN59N"],"count":1}]}]