[{"client_msg_id":"184e13dd-8eb6-416a-896d-5f5452cff886","type":"message","text":"Is this a ri8 way 2 define a new type?:\n`mutable struct Node{T}`\n    `loc::Union{Vector{T}, Matrix{T}}`\n    `axis::Vector{Int}`\n    `children::NamedTuple{`\n        `(:left, :right),` \n        `Tuple{`\n            `Union{Nothing, Vector{T}, Vector{Vector{T}}, Matrix{T}, Node{T}, SubArray{Vector{T}, 1, Vector{Vector{T}}, Tuple{UnitRange{Int64}}, true}},` \n            `Union{Nothing, Vector{T}, Vector{Vector{T}}, Matrix{T}, Node{T}, SubArray{Vector{T}, 1, Vector{Vector{T}}, Tuple{UnitRange{Int64}}, true}}`\n        `}`\n    `}`\n    `box::NamedTuple{`\n        `(:min, :max),` \n        `Tuple{Vector{T}, Vector{T}}`\n    `}`\n`end`\nif not, then wht is a good way to go about this?:thinking_face:","user":"U012FUYRNQH","ts":"1617413460.313300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0Qu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is this a ri8 way 2 define a new type?:\n"},{"type":"text","text":"mutable struct Node{T}","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"    loc::Union{Vector{T}, Matrix{T}}","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"    axis::Vector{Int}","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"    children::NamedTuple{","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"        (:left, :right), ","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"        Tuple{","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"            Union{Nothing, Vector{T}, Vector{Vector{T}}, Matrix{T}, Node{T}, SubArray{Vector{T}, 1, Vector{Vector{T}}, Tuple{UnitRange{Int64}}, true}}, ","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"            Union{Nothing, Vector{T}, Vector{Vector{T}}, Matrix{T}, Node{T}, SubArray{Vector{T}, 1, Vector{Vector{T}}, Tuple{UnitRange{Int64}}, true}}","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"        }","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"    }","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"    box::NamedTuple{","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"        (:min, :max), ","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"        Tuple{Vector{T}, Vector{T}}","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"    }","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"end","style":{"code":true}},{"type":"text","text":"\nif not, then wht is a good way to go about this?"},{"type":"emoji","name":"thinking_face"}]}]}],"thread_ts":"1617413460.313300","reply_count":2,"reply_users_count":1,"latest_reply":"1617414824.315300","reply_users":["U011V2YN59N"],"is_locked":false,"subscribed":false},{"client_msg_id":"0086aef7-b8f3-4934-bbe9-af4323baa023","type":"message","text":"what sort of type are you trying to define?","user":"U011V2YN59N","ts":"1617414758.315100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vpm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what sort of type are you trying to define?"}]}]}],"thread_ts":"1617413460.313300","parent_user_id":"U012FUYRNQH"},{"client_msg_id":"5601ca97-909e-47e5-8aa4-e3f31e377aa0","type":"message","text":"in general you don't need to write out full types like that, you can create another two type parameters to take the place of the `NamedTuple{...}`","user":"U011V2YN59N","ts":"1617414824.315300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7vKMo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in general you don't need to write out full types like that, you can create another two type parameters to take the place of the "},{"type":"text","text":"NamedTuple{...}","style":{"code":true}}]}]}],"thread_ts":"1617413460.313300","parent_user_id":"U012FUYRNQH"}]