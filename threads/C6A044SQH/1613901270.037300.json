[{"client_msg_id":"d45c2428-bec8-4f4f-9155-d81e828a208a","type":"message","text":"So, when working on some julia code, is it standard/good/usual to start with zero type information, in a kind of pythonic way, and once the code looks stable enough, start to help the compiler and yourself by typehinting everything?","user":"U01MG0TN079","ts":"1613901270.037300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SN7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So, when working on some julia code, is it standard/good/usual to start with zero type information, in a kind of pythonic way, and once the code looks stable enough, start to help the compiler and yourself by typehinting everything?"}]}]}],"thread_ts":"1613901270.037300","reply_count":15,"reply_users_count":3,"latest_reply":"1613902391.041500","reply_users":["B01J9QZ4SP8","U7HAYKY9X","U01MG0TN079"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1613901272.037400","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1613901270.037300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"50ca7cd7-5204-415a-93b4-ad9d749201fb","type":"message","text":"Lots of disagreement about this. You should always use type annotations for type fields, and for containers, but other than that, some people say you should use as little typing as possible. I prefer using more types, unless it's for libraries that require a flexible API","user":"U7HAYKY9X","ts":"1613901421.038300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VjP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Lots of disagreement about this. You should always use type annotations for type fields, and for containers, but other than that, some people say you should use as little typing as possible. I prefer using more types, unless it's for libraries that require a flexible API"}]}]}],"thread_ts":"1613901270.037300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"1d7f4131-8484-4a42-9159-d88eda4f2a72","type":"message","text":"&gt; You should always use type annotations for type fields, and for containers,\nDo you even mean, when prototyping? why is that?","user":"U01MG0TN079","ts":"1613901677.038500","team":"T68168MUP","edited":{"user":"U01MG0TN079","ts":"1613901702.000000"},"blocks":[{"type":"rich_text","block_id":"VHA4U","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"You should always use type annotations for type fields, and for containers,"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Do you even mean, when prototyping? why is that?"}]}]}],"thread_ts":"1613901270.037300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"9e7ec2cf-df25-4b8b-8d10-679254b250c6","type":"message","text":"Well, if you want performance. If Python-like performance is fine, then you don't need that, either. I always just do it reflexively, even when prototyping.","user":"U7HAYKY9X","ts":"1613901778.038800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d35U","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well, if you want performance. If Python-like performance is fine, then you don't need that, either. I always just do it reflexively, even when prototyping."}]}]}],"thread_ts":"1613901270.037300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"337a8b7d-cdcf-4e29-8946-2ff4c63f3189","type":"message","text":"OK, that makes sense!","user":"U01MG0TN079","ts":"1613901844.039000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PbrbQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"OK, that makes sense!"}]}]}],"thread_ts":"1613901270.037300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"f9f78741-08b3-48cd-871d-aec78f52eb84","type":"message","text":"The reason is that to create fast code, Julia needs to know all types at compile time. Function specialization takes care of the input types, and type inference takes care of all resulting types. But if you have a data type that can contain other data of unknown types (like a struct without type annotations, or an array of `Any` ), then the compiler cannot infer what types you \"pull out\" of that data type, and so type inference falls to the ground","user":"U7HAYKY9X","ts":"1613901870.039200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MHakI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The reason is that to create fast code, Julia needs to know all types at compile time. Function specialization takes care of the input types, and type inference takes care of all resulting types. But if you have a data type that can contain other data of unknown types (like a struct without type annotations, or an array of "},{"type":"text","text":"Any","style":{"code":true}},{"type":"text","text":" ), then the compiler cannot infer what types you \"pull out\" of that data type, and so type inference falls to the ground"}]}]}],"thread_ts":"1613901270.037300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"b432ed13-a46f-4cad-abec-680989965888","type":"message","text":"I'm partial to having fully defined types as much as possible, so happy to know that it's not  un-julian","user":"U01MG0TN079","ts":"1613901883.039400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Z=7=s","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm partial to having fully defined types as much as possible, so happy to know that it's not  un-julian"}]}]}],"thread_ts":"1613901270.037300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"1e09c589-c807-4b04-b5c4-052bb7486688","type":"message","text":"oh, so when you wrote «and for containers», that was meant as e.g. when constructing arrays","user":"U01MG0TN079","ts":"1613901955.039600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9kU87","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh, so when you wrote «and for containers», that was meant as e.g. when constructing arrays"}]}]}],"thread_ts":"1613901270.037300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"b52db7b2-a5b4-43ba-b9ca-0afbd9bc3ce4","type":"message","text":"Yep - arrays, sets, `Ref` s, dicts, anything like that","user":"U7HAYKY9X","ts":"1613901989.039800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iWw/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yep - arrays, sets, "},{"type":"text","text":"Ref","style":{"code":true}},{"type":"text","text":" s, dicts, anything like that"}]}]}],"thread_ts":"1613901270.037300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"5aa6e59a-9c89-4a53-a81f-f275a127daf8","type":"message","text":"Any iterable object, too","user":"U7HAYKY9X","ts":"1613902003.040000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ayh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Any iterable object, too"}]}]}],"thread_ts":"1613901270.037300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"1a89860f-4173-4daa-99ee-9da433447452","type":"message","text":"But, say, if I do something like `[x+2 for x in fib(36)]`  and `fib`  is a function whose output I know to be `Int` , the compiler is clever enough to type the result as `Vector{Int}` , or not?","user":"U01MG0TN079","ts":"1613902077.040200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jGmx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But, say, if I do something like "},{"type":"text","text":"[x+2 for x in fib(36)]","style":{"code":true}},{"type":"text","text":"  and "},{"type":"text","text":"fib","style":{"code":true}},{"type":"text","text":"  is a function whose output I know to be "},{"type":"text","text":"Int","style":{"code":true}},{"type":"text","text":" , the compiler is clever enough to type the result as "},{"type":"text","text":"Vector{Int}","style":{"code":true}},{"type":"text","text":" , or not?"}]}]}],"thread_ts":"1613901270.037300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"c01bedb9-92a8-47de-8905-e1d40c8a33db","type":"message","text":"mmh, well, I can just test it, actually","user":"U01MG0TN079","ts":"1613902144.040500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"P6Qr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"mmh, well, I can just test it, actually"}]}]}],"thread_ts":"1613901270.037300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"be71075f-f986-4429-9a0e-c413c674d0d4","type":"message","text":"and it seems to do","user":"U01MG0TN079","ts":"1613902178.040700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RPv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and it seems to do"}]}]}],"thread_ts":"1613901270.037300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"cf1de627-cfe0-45aa-ba4e-aae4ab537e83","type":"message","text":"Yep, exactly :)","user":"U7HAYKY9X","ts":"1613902319.040900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OV6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yep, exactly :)"}]}]}],"thread_ts":"1613901270.037300","parent_user_id":"U01MG0TN079"},{"client_msg_id":"6e7662d5-d399-4761-9b79-84d20a53f822","type":"message","text":"Good, thanks!","user":"U01MG0TN079","ts":"1613902391.041500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0gfn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Good, thanks!"}]}]}],"thread_ts":"1613901270.037300","parent_user_id":"U01MG0TN079"}]