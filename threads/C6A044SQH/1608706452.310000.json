[{"client_msg_id":"8d8290d7-cd3b-453f-a3a7-c5a72f7f3d4b","type":"message","text":"Okay, I have another question (<https://julialang.slack.com/archives/C6A044SQH/p1608115213258100|I asked one the other day>) about `reduce` instead of splatting.  I have been playing around with AOC, day 14 pt 2,  and for some reason the following code snippets are not the same:\n```julia&gt; [t for t in Base.Iterators.product(Base.Iterators.repeated(['0', '1'], length(findfloating(\"00000000000000000000000000000001X0XX\")))...)]\n2×2×2 Array{Tuple{Char,Char,Char},3}:\n[:, :, 1] =\n ('0', '0', '0')  ('0', '1', '0')\n ('1', '0', '0')  ('1', '1', '0')\n\n[:, :, 2] =\n ('0', '0', '1')  ('0', '1', '1')\n ('1', '0', '1')  ('1', '1', '1')\n\n[t for t in reduce(Base.Iterators.product, Base.Iterators.repeated(['0', '1'], length(findfloating(\"00000000000000000000000000000001X0XX\"))))]\n2×2×2 Array{Tuple{Tuple{Char,Char},Char},3}:\n[:, :, 1] =\n (('0', '0'), '0')  (('0', '1'), '0')\n (('1', '0'), '0')  (('1', '1'), '0')\n\n[:, :, 2] =\n (('0', '0'), '1')  (('0', '1'), '1')\n (('1', '0'), '1')  (('1', '1'), '1')```\nThe second solution saves around 300 ns.  Obviously I really want to use `reduce` but I don’t want to have to flatten it (because flattening it I might as well use splatting).  Does anyone know a solution to this, or is splatting the tuples the best thing to do?…","user":"U014LRLJXRP","ts":"1608706452.310000","team":"T68168MUP","edited":{"user":"U014LRLJXRP","ts":"1608707790.000000"},"attachments":[{"from_url":"https://julialang.slack.com/archives/C6A044SQH/p1608115213258100","fallback":"[December 16th, 2020 2:40 AM] jakewilliami: Is there a more efficient way of “splatting” the contents of a vector into a functions arguments, than with splatting itself (`func(A...)`)?","ts":"1608115213.258100","author_id":"U014LRLJXRP","author_subname":"Jake Ireland","channel_id":"C6A044SQH","channel_name":"helpdesk","is_msg_unfurl":true,"is_thread_root_unfurl":true,"text":"Is there a more efficient way of “splatting” the contents of a vector into a functions arguments, than with splatting itself (`func(A...)`)?","author_name":"Jake Ireland","author_link":"https://julialang.slack.com/team/U014LRLJXRP","author_icon":"https://avatars.slack-edge.com/2020-09-15/1376539862513_b5a26134a823f3143905_48.jpg","mrkdwn_in":["text"],"id":1,"original_url":"https://julialang.slack.com/archives/C6A044SQH/p1608115213258100","footer":"Thread in #helpdesk"}],"blocks":[{"type":"rich_text","block_id":"GpN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Okay, I have another question ("},{"type":"link","url":"https://julialang.slack.com/archives/C6A044SQH/p1608115213258100","text":"I asked one the other day"},{"type":"text","text":") about "},{"type":"text","text":"reduce","style":{"code":true}},{"type":"text","text":" instead of splatting.  I have been playing around with AOC, day 14 pt 2,  and for some reason the following code snippets are not the same:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> [t for t in Base.Iterators.product(Base.Iterators.repeated(['0', '1'], length(findfloating(\"00000000000000000000000000000001X0XX\")))...)]\n2×2×2 Array{Tuple{Char,Char,Char},3}:\n[:, :, 1] =\n ('0', '0', '0')  ('0', '1', '0')\n ('1', '0', '0')  ('1', '1', '0')\n\n[:, :, 2] =\n ('0', '0', '1')  ('0', '1', '1')\n ('1', '0', '1')  ('1', '1', '1')\n\n[t for t in reduce(Base.Iterators.product, Base.Iterators.repeated(['0', '1'], length(findfloating(\"00000000000000000000000000000001X0XX\"))))]\n2×2×2 Array{Tuple{Tuple{Char,Char},Char},3}:\n[:, :, 1] =\n (('0', '0'), '0')  (('0', '1'), '0')\n (('1', '0'), '0')  (('1', '1'), '0')\n\n[:, :, 2] =\n (('0', '0'), '1')  (('0', '1'), '1')\n (('1', '0'), '1')  (('1', '1'), '1')"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"The second solution saves around 300 ns.  Obviously I really want to use "},{"type":"text","text":"reduce","style":{"code":true}},{"type":"text","text":" but I don’t want to have to flatten it (because flattening it I might as well use splatting).  Does anyone know a solution to this, or is splatting the tuples the best thing to do?…"}]}]}],"thread_ts":"1608706452.310000","reply_count":1,"reply_users_count":1,"latest_reply":"1608708120.310400","reply_users":["UH8A351DJ"],"subscribed":false},{"client_msg_id":"d55b7d28-974e-4fd9-83dd-5594e5320b11","type":"message","text":"&gt; because flattening it I might as well use splatting\nwhat makes you think so? `Iterators.flatten` is lazy","user":"UH8A351DJ","ts":"1608708120.310400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"v/N","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"because flattening it I might as well use splatting"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"what makes you think so? "},{"type":"text","text":"Iterators.flatten","style":{"code":true}},{"type":"text","text":" is lazy"}]}]}],"thread_ts":"1608706452.310000","parent_user_id":"U014LRLJXRP"}]