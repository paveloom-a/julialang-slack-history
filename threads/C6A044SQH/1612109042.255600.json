[{"client_msg_id":"ad747a6d-8f31-445c-b5e1-fffcafe8242f","type":"message","text":"Where can I learn more about `Type{}`? The manual section on <https://docs.julialang.org/en/v1/manual/types/#man-singleton-types|singleton types> is pretty brief. It links to sections on parametric methods and conversions, which explain how to use `::Type{}` but not _what_ `Type` is or the \"type hierarchy of types\".\n\nFor example, I'd like to understand how this is possible:\n```julia&gt; Int isa Type{Int64}\ntrue\n\njulia&gt; Type{Int64} in supertypes(typeof(Int))\nfalse```","user":"U73ACR3TQ","ts":"1612109042.255600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lU94w","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Where can I learn more about "},{"type":"text","text":"Type{}","style":{"code":true}},{"type":"text","text":"? The manual section on "},{"type":"link","url":"https://docs.julialang.org/en/v1/manual/types/#man-singleton-types","text":"singleton types"},{"type":"text","text":" is pretty brief. It links to sections on parametric methods and conversions, which explain how to use "},{"type":"text","text":"::Type{}","style":{"code":true}},{"type":"text","text":" but not "},{"type":"text","text":"what ","style":{"italic":true}},{"type":"text","text":"Type","style":{"code":true}},{"type":"text","text":" is or the \"type hierarchy of types\".\n\nFor example, I'd like to understand how this is possible:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Int isa Type{Int64}\ntrue\n\njulia> Type{Int64} in supertypes(typeof(Int))\nfalse"}]}]}],"thread_ts":"1612109042.255600","reply_count":27,"reply_users_count":5,"latest_reply":"1612370036.484500","reply_users":["B01J9QZ4SP8","UH8A351DJ","U8D9768Q6","U73ACR3TQ","U01K2JB9GPJ"],"subscribed":false,"reactions":[{"name":"bridge","users":["U73ACR3TQ"],"count":1}]},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1612109044.255700","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1612109042.255600","parent_user_id":"U73ACR3TQ"},{"type":"message","subtype":"bot_message","text":"Success, it has been cross posted <https://discourse.julialang.org/t/where-can-i-learn-more-about-type-the-manual-section-on-https-docs-julialan|to Discourse>. Keep and eye out on Discourse for responses and please add an answer there once you are satisfied with the solution so others can benefit as well. Happy debugging!","ts":"1612109057.256000","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1612109042.255600","parent_user_id":"U73ACR3TQ"},{"client_msg_id":"f7c97322-867b-4514-8332-2a31daa1c0de","type":"message","text":"`supertype(Type{X})` (for any X) is `Any`","user":"UH8A351DJ","ts":"1612109269.256400","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1612109453.000000"},"blocks":[{"type":"rich_text","block_id":"qbrYa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"supertype(Type{X})","style":{"code":true}},{"type":"text","text":" (for any X) is "},{"type":"text","text":"Any","style":{"code":true}}]}]}],"thread_ts":"1612109042.255600","parent_user_id":"U73ACR3TQ"},{"client_msg_id":"14177a19-3777-4d7e-815a-c7e58c57c174","type":"message","text":"`f(a::Type{X})` is used to \"match\" when `a===X`, not when `a` is an instance of `X`","user":"UH8A351DJ","ts":"1612109355.256600","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1612109482.000000"},"blocks":[{"type":"rich_text","block_id":"ANf9e","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"f(a::Type{X})","style":{"code":true}},{"type":"text","text":" is used to \"match\" when "},{"type":"text","text":"a===X","style":{"code":true}},{"type":"text","text":", not when "},{"type":"text","text":"a","style":{"code":true}},{"type":"text","text":" is an instance of "},{"type":"text","text":"X","style":{"code":true}}]}]}],"thread_ts":"1612109042.255600","parent_user_id":"U73ACR3TQ"},{"client_msg_id":"ac040a81-4c43-464a-8269-8a858c3d3fc9","type":"message","text":"`Type` is basically a hack implemented directly in C. The reason it exists is because types in julia have type `DataType`, and are actually pretty heavyweight objects","user":"U8D9768Q6","ts":"1612114927.261400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eQ4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Type","style":{"code":true}},{"type":"text","text":" is basically a hack implemented directly in C. The reason it exists is because types in julia have type "},{"type":"text","text":"DataType","style":{"code":true}},{"type":"text","text":", and are actually pretty heavyweight objects"}]}]}],"thread_ts":"1612109042.255600","parent_user_id":"U73ACR3TQ"},{"client_msg_id":"7d2a029f-049c-4a37-a030-1b7c3fe8d1f2","type":"message","text":"But, you often want to dispatch on the exact type something is, rather than `DataType`, so there's basically a hack to dispatch on value with `Type`.","user":"U8D9768Q6","ts":"1612114984.261600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CBA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But, you often want to dispatch on the exact type something is, rather than "},{"type":"text","text":"DataType","style":{"code":true}},{"type":"text","text":", so there's basically a hack to dispatch on value with "},{"type":"text","text":"Type","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1612109042.255600","parent_user_id":"U73ACR3TQ"},{"client_msg_id":"f6e6ab83-1d67-4662-ad9e-45f8387890fe","type":"message","text":"The way you should think of it is that\n```Int isa DataType\nDataType(T) &lt;: Type{T}```\nThis isn't something you could do yourself with julia's type system, but it's quite useful.","user":"U8D9768Q6","ts":"1612115424.261800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SDuu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The way you should think of it is that\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Int isa DataType\nDataType(T) <: Type{T}"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"This isn't something you could do yourself with julia's type system, but it's quite useful."}]}]}],"thread_ts":"1612109042.255600","parent_user_id":"U73ACR3TQ"},{"client_msg_id":"4374cadb-9e14-4ee5-bd35-36e8c1fc1884","type":"message","text":"So `Type{T}` is sort of like `Val{T}`?","user":"U73ACR3TQ","ts":"1612126852.285800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sIJkt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So "},{"type":"text","text":"Type{T}","style":{"code":true}},{"type":"text","text":" is sort of like "},{"type":"text","text":"Val{T}","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1612109042.255600","parent_user_id":"U73ACR3TQ"},{"client_msg_id":"ab271880-ced8-4a3a-aad6-6603bb9be5b4","type":"message","text":"I think one other thing I'm confused about is why `::Type{}` is needed in function _names_, not just arguments. E.g. float.jl line 71:\n```(::Type{T})(x::Float16) where {T&lt;:Integer} = T(Float32(x))```","user":"U73ACR3TQ","ts":"1612126893.286000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"13v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think one other thing I'm confused about is why "},{"type":"text","text":"::Type{}","style":{"code":true}},{"type":"text","text":" is needed in function "},{"type":"text","text":"names","style":{"italic":true}},{"type":"text","text":", not just arguments. E.g. float.jl line 71:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"(::Type{T})(x::Float16) where {T<:Integer} = T(Float32(x))"}]}]}],"thread_ts":"1612109042.255600","parent_user_id":"U73ACR3TQ"},{"client_msg_id":"28c08696-a145-4854-bd38-93fcbf6161cc","type":"message","text":"this is defining, for example, `Int32(x::Float16) = Int32(Float32(x)`","user":"UH8A351DJ","ts":"1612126971.286600","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1612127009.000000"},"blocks":[{"type":"rich_text","block_id":"xg5A3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this is defining, for example, "},{"type":"text","text":"Int32(x::Float16) = Int32(Float32(x)","style":{"code":true}}]}]}],"thread_ts":"1612109042.255600","parent_user_id":"U73ACR3TQ"},{"client_msg_id":"0c0e1a77-e685-4d1f-aacf-ceea3bf3b1cc","type":"message","text":"but for any `T&lt;:Integer`","user":"UH8A351DJ","ts":"1612126993.286800","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1612127000.000000"},"blocks":[{"type":"rich_text","block_id":"+Cot","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but for any "},{"type":"text","text":"T<:Integer","style":{"code":true}}]}]}],"thread_ts":"1612109042.255600","parent_user_id":"U73ACR3TQ"},{"client_msg_id":"661b4175-5137-4bc9-811e-2de21bf0ae5b","type":"message","text":"There's this nice paper explaining the julia subtyping mechanism <https://dl.acm.org/doi/pdf/10.1145/3276483>","user":"U01K2JB9GPJ","ts":"1612127158.288500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/t7o/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There's this nice paper explaining the julia subtyping mechanism "},{"type":"link","url":"https://dl.acm.org/doi/pdf/10.1145/3276483"}]}]}],"thread_ts":"1612109042.255600","parent_user_id":"U73ACR3TQ"},{"client_msg_id":"53c56deb-0526-488e-88db-d556ef4b0306","type":"message","text":"Quoting from the paper: Subtyping the `Type` construct is more subtle than expected. Recall that for each type or plain-bit value `a`, the singleton type `Type{a}` is an abstract type whose only instance is the object `a`. Subtyping two Type{`a`} is analogous to check invariance of constructors, as done by rule Type_Type. But there are additional cases to be considered. `Type{a}` is subtype of the type of a (e.g. `Type{1} &lt;: Int`), as enforced by the rule Type_left. Conversely, `Type{t}` has subtypes only if t is a type variable, and the only subtypes are kinds; the recursive check updates correctly the constraints for t.","user":"U01K2JB9GPJ","ts":"1612127234.288700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"T9y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Quoting from the paper: Subtyping the "},{"type":"text","text":"Type","style":{"code":true}},{"type":"text","text":" construct is more subtle than expected. Recall that for each type or plain-bit value "},{"type":"text","text":"a","style":{"code":true}},{"type":"text","text":", the singleton type "},{"type":"text","text":"Type{a}","style":{"code":true}},{"type":"text","text":" is an abstract type whose only instance is the object "},{"type":"text","text":"a","style":{"code":true}},{"type":"text","text":". Subtyping two Type{"},{"type":"text","text":"a","style":{"code":true}},{"type":"text","text":"} is analogous to check invariance of constructors, as done by rule Type_Type. But there are additional cases to be considered. "},{"type":"text","text":"Type{a}","style":{"code":true}},{"type":"text","text":" is subtype of the type of a (e.g. "},{"type":"text","text":"Type{1} <: Int","style":{"code":true}},{"type":"text","text":"), as enforced by the rule Type_left. Conversely, "},{"type":"text","text":"Type{t}","style":{"code":true}},{"type":"text","text":" has subtypes only if t is a type variable, and the only subtypes are kinds; the recursive check updates correctly the constraints for t."}]}]}],"thread_ts":"1612109042.255600","parent_user_id":"U73ACR3TQ"},{"client_msg_id":"468e2e7d-b5dd-4c89-8a2c-a9e44283bf66","type":"message","text":"&gt; So `Type{T}` is sort of like `Val{T}`?\nYes and no. It's as if you could always interchange `1` with `Val{1}()`. If `Val` worked like `Type`,  you would have the property that\n```1 isa Val{1}\n2 isa Val{2}\n...```\nwhich is not possible in julia.","user":"U8D9768Q6","ts":"1612127886.289500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Xxj","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"So "},{"type":"text","text":"Type{T}","style":{"code":true}},{"type":"text","text":" is sort of like "},{"type":"text","text":"Val{T}","style":{"code":true}},{"type":"text","text":"?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Yes and no. It's as if you could always interchange "},{"type":"text","text":"1","style":{"code":true}},{"type":"text","text":" with "},{"type":"text","text":"Val{1}()","style":{"code":true}},{"type":"text","text":". If "},{"type":"text","text":"Val","style":{"code":true}},{"type":"text","text":" worked like "},{"type":"text","text":"Type","style":{"code":true}},{"type":"text","text":",  you would have the property that\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"1 isa Val{1}\n2 isa Val{2}\n..."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"which is not possible in julia."}]}]}],"thread_ts":"1612109042.255600","parent_user_id":"U73ACR3TQ","reactions":[{"name":"heavy_check_mark","users":["UH8A351DJ","U73ACR3TQ"],"count":2}]},{"client_msg_id":"99ce7134-3b6f-4289-8ba7-91d3d471080c","type":"message","text":"I don't know if its just me <@U01K2JB9GPJ>, but that paragraph is actually very misleading and unclear to me when I read it.","user":"U8D9768Q6","ts":"1612128374.290500","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1612128391.000000"},"blocks":[{"type":"rich_text","block_id":"1GsM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't know if its just me "},{"type":"user","user_id":"U01K2JB9GPJ"},{"type":"text","text":", but that paragraph is actually very misleading and unclear to me when I read it."}]}]}],"thread_ts":"1612109042.255600","parent_user_id":"U73ACR3TQ"},{"client_msg_id":"16059251-bd3c-4f2d-b1e5-78d0cd4a6a28","type":"message","text":"<@UH8A351DJ> can you clarify\n&gt; this is defining, for example, `Int32(x::Float16) = Int32(Float32(x)` (edited)\nwhy wouldn't the call be `(T)(x::Float16) where {T&lt;:Integer} = T(Float32(x))`\nIn other words, the function defined is called as e.g. `Int32(x)` not `Type{Int32}(x)`, so why is it defined with `::Type`?\nThanks!","user":"U73ACR3TQ","ts":"1612137495.317000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6qK2e","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH8A351DJ"},{"type":"text","text":" can you clarify\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"this is defining, for example, "},{"type":"text","text":"Int32(x::Float16) = Int32(Float32(x)","style":{"code":true}},{"type":"text","text":" (edited)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"why wouldn't the call be "},{"type":"text","text":"(T)(x::Float16) where {T<:Integer} = T(Float32(x))","style":{"code":true}},{"type":"text","text":"\nIn other words, the function defined is called as e.g. "},{"type":"text","text":"Int32(x)","style":{"code":true}},{"type":"text","text":" not "},{"type":"text","text":"Type{Int32}(x)","style":{"code":true}},{"type":"text","text":", so why is it defined with "},{"type":"text","text":"::Type","style":{"code":true}},{"type":"text","text":"?\nThanks!"}]}]}],"thread_ts":"1612109042.255600","parent_user_id":"U73ACR3TQ"},{"client_msg_id":"b187dc16-7b13-4030-9ada-31edcf01529b","type":"message","text":"because `Int32::Type{Int32}` .\n\nalso, you cannot do the thing your proposed because that defines a function whose name is `T`","user":"UH8A351DJ","ts":"1612137593.317400","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1612137633.000000"},"blocks":[{"type":"rich_text","block_id":"3ixbP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"because "},{"type":"text","text":"Int32::Type{Int32}","style":{"code":true}},{"type":"text","text":" .\n\nalso, you cannot do the thing your proposed because that defines a function whose name is "},{"type":"text","text":"T","style":{"code":true}}]}]}],"thread_ts":"1612109042.255600","parent_user_id":"U73ACR3TQ","reactions":[{"name":"heavy_check_mark","users":["U8D9768Q6"],"count":1}]},{"client_msg_id":"d6085e62-dc30-4f8f-b3d1-7ed6f16b8971","type":"message","text":"Dispatch happens on *types*, not values.","user":"U8D9768Q6","ts":"1612137894.319300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"teh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Dispatch happens on "},{"type":"text","text":"types","style":{"bold":true}},{"type":"text","text":", not values."}]}]}],"thread_ts":"1612109042.255600","parent_user_id":"U73ACR3TQ"},{"client_msg_id":"27129b6f-9a3a-4807-b0e0-2ba134b7789f","type":"message","text":"When you write\n```f(x) = x + 1```\nin julia, that's actually a shortform for something kinda like\n```julia&gt; struct var\"typeof(f)\" &lt;: Function end\n\njulia&gt; const f = var\"typeof(f)\"()\n(::var\"typeof(f)\") (generic function with 0 methods)\n\njulia&gt; (::typeof(f))(x) = x + 1\n\njulia&gt; f(1)\n2```","user":"U8D9768Q6","ts":"1612138070.319500","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1612138324.000000"},"blocks":[{"type":"rich_text","block_id":"Z63=S","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"When you write\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"f(x) = x + 1"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"in julia, that's actually a shortform for something kinda like\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> struct var\"typeof(f)\" <: Function end\n\njulia> const f = var\"typeof(f)\"()\n(::var\"typeof(f)\") (generic function with 0 methods)\n\njulia> (::typeof(f))(x) = x + 1\n\njulia> f(1)\n2"}]}]}],"thread_ts":"1612109042.255600","parent_user_id":"U73ACR3TQ"},{"client_msg_id":"bf9dc29a-4df3-4f15-aafb-1aca3f20e6fc","type":"message","text":"That's really interesting <@U8D9768Q6>, thanks. I will meditate. I guess I had fumbled towards the idea that `Type{T}` is the type used for dispatch when you pass `T` as a function argument. Which seems to be true. But also for calling functions--your example suggests calling one function vs another can also be thought as dispatch on the function type?\n\nI have read the manual [many times...some parts of it stick...] so of course I knew you could define outer constructors like so:\n```julia&gt; struct S\n       x::Int\n       end\n\njulia&gt; S(a,b) = S(a+b)```\nBut I did not realize this would work just the same...\n```julia&gt; (::Type{S})(a,b) = S(a+b)```","user":"U73ACR3TQ","ts":"1612142056.322200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"laj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's really interesting "},{"type":"user","user_id":"U8D9768Q6"},{"type":"text","text":", thanks. I will meditate. I guess I had fumbled towards the idea that "},{"type":"text","text":"Type{T}","style":{"code":true}},{"type":"text","text":" is the type used for dispatch when you pass "},{"type":"text","text":"T","style":{"code":true}},{"type":"text","text":" as a function argument. Which seems to be true. But also for calling functions--your example suggests calling one function vs another can also be thought as dispatch on the function type?\n\nI have read the manual [many times...some parts of it stick...] so of course I knew you could define outer constructors like so:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> struct S\n       x::Int\n       end\n\njulia> S(a,b) = S(a+b)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"But I did not realize this would work just the same...\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> (::Type{S})(a,b) = S(a+b)"}]}]}],"thread_ts":"1612109042.255600","parent_user_id":"U73ACR3TQ"},{"client_msg_id":"21f31f3f-3012-4460-bbbc-47a9e5cacdac","type":"message","text":"Which I feel _should_ tell me why this doesn't work, though I'm still struggling:\n```julia&gt; @eval ($S)(a,b) = ($S)(a+b)\nERROR: syntax: invalid function name \"Main.S\"```\n","user":"U73ACR3TQ","ts":"1612142202.322400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VVZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Which I feel "},{"type":"text","text":"should ","style":{"italic":true}},{"type":"text","text":"tell me why this doesn't work, though I'm still struggling:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @eval ($S)(a,b) = ($S)(a+b)\nERROR: syntax: invalid function name \"Main.S\""}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1612109042.255600","parent_user_id":"U73ACR3TQ"},{"client_msg_id":"EA87867F-F1FE-47C1-91BD-77ACBDFA2AB2","type":"message","text":"That error is just because you’re interpolating in names in a way julia doesn’t like. ","user":"U8D9768Q6","ts":"1612142828.323200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Z72","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That error is just because you’re interpolating in names in a way julia doesn’t like. "}]}]}],"thread_ts":"1612109042.255600","parent_user_id":"U73ACR3TQ"},{"client_msg_id":"033686B3-1462-478F-884E-FC4FC373AB65","type":"message","text":"It’s unrelated, just a parser quirk. ","user":"U8D9768Q6","ts":"1612142843.323700","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1612152646.000000"},"blocks":[{"type":"rich_text","block_id":"Cmv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It’s unrelated, just a parser quirk. "}]}]}],"thread_ts":"1612109042.255600","parent_user_id":"U73ACR3TQ"},{"client_msg_id":"8215f8a7-e826-46d2-9b6e-c04203e61e0b","type":"message","text":":man-facepalming: :pray:","user":"U73ACR3TQ","ts":"1612152543.326000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Zeg","elements":[{"type":"rich_text_section","elements":[{"type":"emoji","name":"man-facepalming"},{"type":"text","text":" "},{"type":"emoji","name":"pray"}]}]}],"thread_ts":"1612109042.255600","parent_user_id":"U73ACR3TQ"},{"client_msg_id":"0149b097-df01-4441-b7f2-34cab90dfe6c","type":"message","text":"<@U8D9768Q6> Why is it misleading? I have followed that paper for learning more about the subtyping system. I found it very clear. Maybe I am missing something","user":"U01K2JB9GPJ","ts":"1612292711.434400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JJf3","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U8D9768Q6"},{"type":"text","text":" Why is it misleading? I have followed that paper for learning more about the subtyping system. I found it very clear. Maybe I am missing something"}]}]}],"thread_ts":"1612109042.255600","parent_user_id":"U73ACR3TQ"},{"client_msg_id":"a84dcd3a-2ae3-4eea-a85d-f0cada1d2b6f","type":"message","text":"It uses kinda hard to follow language and also says some things that are just untrue.\n\nIt calls `Type{a}` a singleton type, but it's not a singleton.\n```julia&gt; Base.issingletontype(Type{Int})\nfalse```\nIt's an abstract type.\n\nIt also says\n&gt; `Type{a}` is subtype of the type of a (e.g. `Type{1} &lt;: Int`), as enforced by the rule Type_left.\nThis is also untrue.\n```julia&gt; Type{1} &lt;: Int\nfalse```","user":"U8D9768Q6","ts":"1612293566.434600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7AA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It uses kinda hard to follow language and also says some things that are just untrue.\n\nIt calls "},{"type":"text","text":"Type{a}","style":{"code":true}},{"type":"text","text":" a singleton type, but it's not a singleton.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Base.issingletontype(Type{Int})\nfalse"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"It's an abstract type.\n\nIt also says\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"Type{a}","style":{"code":true}},{"type":"text","text":" is subtype of the type of a (e.g. "},{"type":"text","text":"Type{1} <: Int","style":{"code":true}},{"type":"text","text":"), as enforced by the rule Type_left."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"This is also untrue.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Type{1} <: Int\nfalse"}]}]}],"thread_ts":"1612109042.255600","parent_user_id":"U73ACR3TQ","reactions":[{"name":"+1","users":["UH8A351DJ"],"count":1}]},{"client_msg_id":"3524887a-64c8-4bc4-bb81-c3742e360d38","type":"message","text":"I will let Benjamin (one of the authors) know! I had a chat with him last month.","user":"U01K2JB9GPJ","ts":"1612370036.484500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FPPd5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I will let Benjamin (one of the authors) know! I had a chat with him last month."}]}]}],"thread_ts":"1612109042.255600","parent_user_id":"U73ACR3TQ"}]