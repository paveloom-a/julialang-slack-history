[{"client_msg_id":"c2646d3b-ab12-4be6-80a0-15936c29815d","type":"message","text":"Question about JLD2: I was surprised by this behavior:\n```using JLD2\n\n@save \"test.jld2\" v = [2,4,6]\n\nglobal jldfile = jldopen(\"test.jld2\", \"r\")\n\nfunction f(perm)\n    v = jldfile[\"v\"]\n    return permute!(v, perm)\nend\n\nf([1,2,3]) # [2,4,6]  &lt;-- expected\nf([3,2,1]) # [6,4,2]  &lt;-- expected\nf([1,2,3]) # [6,4,2]  &lt;-- surprise: actually changed `jldfile[\"v\"]`.```\nIt seems that if I open a .jld file (`jldfile` above), I'm not so much holding a reference to data in the jld-file that I can then \"request\" from, I'm really holding the actual data, so if I request a bit of the data in `jldfile`, I literally get that data - not a copy of it - and if I then modify it, any subsequent request for the same data-field in `jldfile` would give me back a modified version.\nCan someone explain why this is working this way? I was kind of caught off guard by this (I guess because I had thought it would be a copy on every new \"request\").","user":"UCE6XE42Z","ts":"1613418542.380600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mpfp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Question about JLD2: I was surprised by this behavior:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using JLD2\n\n@save \"test.jld2\" v = [2,4,6]\n\nglobal jldfile = jldopen(\"test.jld2\", \"r\")\n\nfunction f(perm)\n    v = jldfile[\"v\"]\n    return permute!(v, perm)\nend\n\nf([1,2,3]) # [2,4,6]  <-- expected\nf([3,2,1]) # [6,4,2]  <-- expected\nf([1,2,3]) # [6,4,2]  <-- surprise: actually changed `jldfile[\"v\"]`."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"It seems that if I open a .jld file ("},{"type":"text","text":"jldfile","style":{"code":true}},{"type":"text","text":" above), I'm not so much holding a reference to data in the jld-file that I can then \"request\" from, I'm really holding the actual data, so if I request a bit of the data in "},{"type":"text","text":"jldfile","style":{"code":true}},{"type":"text","text":", I literally get that data - not a copy of it - and if I then modify it, any subsequent request for the same data-field in "},{"type":"text","text":"jldfile","style":{"code":true}},{"type":"text","text":" would give me back a modified version.\nCan someone explain why this is working this way? I was kind of caught off guard by this (I guess because I had thought it would be a copy on every new \"request\")."}]}]}],"thread_ts":"1613418542.380600","reply_count":18,"reply_users_count":3,"latest_reply":"1613420046.388100","reply_users":["B01J9QZ4SP8","UH8A351DJ","UCE6XE42Z"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1613418544.380700","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1613418542.380600","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"e9a1e51f-9e07-46bb-9f2d-b69666e3339c","type":"message","text":"this shouldn't be too surprising since `jldfile` is still the same variable. Imagine instead it is a `Dict` and your `f()` always access the same global `Dict`, would it still surprise you that the `perm!` changed `Dict[\"v\"]` in-place?","user":"UH8A351DJ","ts":"1613419043.380900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MJ/6E","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this shouldn't be too surprising since "},{"type":"text","text":"jldfile","style":{"code":true}},{"type":"text","text":" is still the same variable. Imagine instead it is a "},{"type":"text","text":"Dict","style":{"code":true}},{"type":"text","text":" and your "},{"type":"text","text":"f()","style":{"code":true}},{"type":"text","text":" always access the same global "},{"type":"text","text":"Dict","style":{"code":true}},{"type":"text","text":", would it still surprise you that the "},{"type":"text","text":"perm!","style":{"code":true}},{"type":"text","text":" changed "},{"type":"text","text":"Dict[\"v\"]","style":{"code":true}},{"type":"text","text":" in-place?"}]}]}],"thread_ts":"1613418542.380600","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"2e1216fa-b01f-4c04-b33a-3388dbf3d548","type":"message","text":"No, sure, if it were Dict; I was just under the impression that it wasn't a Dict?","user":"UCE6XE42Z","ts":"1613419150.381100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"udEl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No, sure, if it were Dict; I was just under the impression that it wasn't a Dict?"}]}]}],"thread_ts":"1613418542.380600","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"8f130406-da0d-41ca-bbf0-5e434b60e4e5","type":"message","text":"the global variable `jldfile`  is just \"a copy\" of the content of `test2.jld2`","user":"UH8A351DJ","ts":"1613419160.381300","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1613419166.000000"},"blocks":[{"type":"rich_text","block_id":"tjgLi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the global variable "},{"type":"text","text":"jldfile","style":{"code":true}},{"type":"text","text":"  is just \"a copy\" of the content of "},{"type":"text","text":"test2.jld2","style":{"code":true}}]}]}],"thread_ts":"1613418542.380600","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"549a9491-96b7-4b1f-8706-40d1466a1814","type":"message","text":"But, it's not really a copy, is it? Like, it's lazy for instance?","user":"UCE6XE42Z","ts":"1613419185.381600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oON","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But, it's not really a copy, is it? Like, it's lazy for instance?"}]}]}],"thread_ts":"1613418542.380600","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"15e06d88-83e7-4855-8126-26957d4286d0","type":"message","text":"E.g., if I open a 1TB file, it doesn't just load all that up?","user":"UCE6XE42Z","ts":"1613419207.381800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KzKxS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"E.g., if I open a 1TB file, it doesn't just load all that up?"}]}]}],"thread_ts":"1613418542.380600","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"ec452d8d-858a-49c2-ae09-3054d13b3393","type":"message","text":"I don't know if it is lazy, even if it is, you can still modify an entry of it right? think of it as cached after the first read","user":"UH8A351DJ","ts":"1613419268.382100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s3X","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't know if it is lazy, even if it is, you can still modify an entry of it right? think of it as cached after the first read"}]}]}],"thread_ts":"1613418542.380600","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"a26b98d8-1a95-4e75-81b8-d963e4a7a12c","type":"message","text":"I just seems kind of weird for it to \"hold onto it\" after a request. Like, if I have a `jldfile` with 1000s of fields, then I happen to read them all in some local scope (even though `jldfile` is global), that will all stay around in memory?","user":"UCE6XE42Z","ts":"1613419272.382400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"l4NYS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I just seems kind of weird for it to \"hold onto it\" after a request. Like, if I have a "},{"type":"text","text":"jldfile","style":{"code":true}},{"type":"text","text":" with 1000s of fields, then I happen to read them all in some local scope (even though "},{"type":"text","text":"jldfile","style":{"code":true}},{"type":"text","text":" is global), that will all stay around in memory?"}]}]}],"thread_ts":"1613418542.380600","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"03265972-0b30-4aae-b021-fa0d6ceb91d0","type":"message","text":"Yeah, I guess cached after the first read is the right description. Hmm. I guess that's just not very nice for my application.","user":"UCE6XE42Z","ts":"1613419323.382800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"09ptD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, I guess cached after the first read is the right description. Hmm. I guess that's just not very nice for my application."}]}]}],"thread_ts":"1613418542.380600","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"b72bfc6f-62d8-4b32-8b76-60c9712753db","type":"message","text":"just `v = copy(....)` , no big deal, treat it like a Dict","user":"UH8A351DJ","ts":"1613419342.383300","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1613419348.000000"},"blocks":[{"type":"rich_text","block_id":"MI7T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"just "},{"type":"text","text":"v = copy(....)","style":{"code":true}},{"type":"text","text":" , no big deal, treat it like a Dict"}]}]}],"thread_ts":"1613418542.380600","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"9f257961-9ec2-43f5-ab4c-9f8790250ccf","type":"message","text":"Yeah, I will.","user":"UCE6XE42Z","ts":"1613419348.383600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+yU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, I will."}]}]}],"thread_ts":"1613418542.380600","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"ee79ace8-9bbf-4df5-9bfc-b72d7a863db8","type":"message","text":"I'm not sure about the laziness or not of JLD2 unfortunately","user":"UH8A351DJ","ts":"1613419368.384100","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1613419374.000000"},"blocks":[{"type":"rich_text","block_id":"K=dH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not sure about the laziness or not of JLD2 unfortunately"}]}]}],"thread_ts":"1613418542.380600","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"a20a8032-c3be-42cf-a2f8-fbd5b521fc1a","type":"message","text":"I think it should be; that's a big part of the appeal of HDF5-like structures, i.e. that it behaves almost like a filesystem-like-format that you can query.","user":"UCE6XE42Z","ts":"1613419643.385400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RaqA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think it should be; that's a big part of the appeal of HDF5-like structures, i.e. that it behaves almost like a filesystem-like-format that you can query."}]}]}],"thread_ts":"1613418542.380600","parent_user_id":"UCE6XE42Z","reactions":[{"name":"+1","users":["UH8A351DJ"],"count":1}]},{"client_msg_id":"5ca75f3d-68fb-4ac2-9b60-9320b13c164a","type":"message","text":"I think I will open an issue about this anyway. The documentation of JLD2 writes that `jldfile[\"v\"]` is literally equivalent to `read(jldfile, \"v\")` - and the `read`-wording doesn't give any hint that this would somehow be cached on first read.","user":"UCE6XE42Z","ts":"1613419708.386200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bFi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think I will open an issue about this anyway. The documentation of JLD2 writes that "},{"type":"text","text":"jldfile[\"v\"]","style":{"code":true}},{"type":"text","text":" is literally equivalent to "},{"type":"text","text":"read(jldfile, \"v\")","style":{"code":true}},{"type":"text","text":" - and the "},{"type":"text","text":"read","style":{"code":true}},{"type":"text","text":"-wording doesn't give any hint that this would somehow be cached on first read."}]}]}],"thread_ts":"1613418542.380600","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"8e038501-a45b-4bc2-aca5-d21e962b55d1","type":"message","text":"I guess it can error when you attempt to do `setindex`","user":"UH8A351DJ","ts":"1613419716.386400","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1613419721.000000"},"blocks":[{"type":"rich_text","block_id":"3Ie6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess it can error when you attempt to do "},{"type":"text","text":"setindex","style":{"code":true}}]}]}],"thread_ts":"1613418542.380600","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"670ba810-b83d-4eca-b15d-80f6f36c8e07","type":"message","text":"Hmm, not sure; it's literally giving back whatever type you are loading, so there's no obvious \"strings attached\" back to the jldfile (except, I guess, that it's holding a pointer to the loaded data somewhere).","user":"UCE6XE42Z","ts":"1613419783.386900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d2enQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmm, not sure; it's literally giving back whatever type you are loading, so there's no obvious \"strings attached\" back to the jldfile (except, I guess, that it's holding a pointer to the loaded data somewhere)."}]}]}],"thread_ts":"1613418542.380600","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"8a6493f3-78c0-4bf1-a763-7f4ba8ce05af","type":"message","text":"then I guess always make a copy when `getindex` is another way, which is not nice because then you can't NOT copy","user":"UH8A351DJ","ts":"1613420019.387800","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1613420031.000000"},"blocks":[{"type":"rich_text","block_id":"Cw9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"then I guess always make a copy when "},{"type":"text","text":"getindex","style":{"code":true}},{"type":"text","text":" is another way, which is not nice because then you can't NOT copy"}]}]}],"thread_ts":"1613418542.380600","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"0c79ab76-0fad-4724-8576-613bb15925e8","type":"message","text":"hence the current design probably","user":"UH8A351DJ","ts":"1613420046.388100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qnw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hence the current design probably"}]}]}],"thread_ts":"1613418542.380600","parent_user_id":"UCE6XE42Z"}]