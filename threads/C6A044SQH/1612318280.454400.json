[{"client_msg_id":"0387096c-79d1-4042-b5e1-18cc6d53c8cc","type":"message","text":"This is my millionth question on this topic but I'd like to get this right. Is there any difference between evaling about 2000 structs into existence and assigning them to constants vs just generating a file that contains all the definitions manually. I like the generated file because I can document things better, but I end up with ~8000 lines split amongst several files","user":"U017D4RFTFC","ts":"1612318280.454400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Mx+A","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is my millionth question on this topic but I'd like to get this right. Is there any difference between evaling about 2000 structs into existence and assigning them to constants vs just generating a file that contains all the definitions manually. I like the generated file because I can document things better, but I end up with ~8000 lines split amongst several files"}]}]}],"thread_ts":"1612318280.454400","reply_count":28,"reply_users_count":3,"latest_reply":"1612320482.461800","reply_users":["B01J9QZ4SP8","UH8A351DJ","U017D4RFTFC"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1612318281.454500","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC"},{"client_msg_id":"2b396524-ef5f-466e-b057-7e85c83ac212","type":"message","text":"there's no difference. `eval` is literally \"evaluating\" the string as if they are written down as source code somewhere","user":"UH8A351DJ","ts":"1612318361.454700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JbY=p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there's no difference. "},{"type":"text","text":"eval","style":{"code":true}},{"type":"text","text":" is literally \"evaluating\" the string as if they are written down as source code somewhere"}]}]}],"thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC","reactions":[{"name":"+1","users":["U017D4RFTFC"],"count":1}]},{"client_msg_id":"4ab67a23-3d9b-4fdc-ade8-f56a8988e0fd","type":"message","text":"but it sounds very unusual to explicitly need 2000 different structs, maybe you can also explain the usage here if you want?","user":"UH8A351DJ","ts":"1612318439.455000","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1612318478.000000"},"blocks":[{"type":"rich_text","block_id":"7TY=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but it sounds very unusual to explicitly need 2000 different structs, maybe you can also explain the usage here if you want?"}]}]}],"thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC"},{"client_msg_id":"c3cca940-7363-42ea-8bdb-dd04cdc61462","type":"message","text":"They're just wrappers over constants from a C api. I need to dispatch on them","user":"U017D4RFTFC","ts":"1612318497.455400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZiU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"They're just wrappers over constants from a C api. I need to dispatch on them"}]}]}],"thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC"},{"client_msg_id":"f0bb4a83-0837-4bee-98fd-4768abfedc66","type":"message","text":"`struct &lt;unaryop&gt; &lt;: Abstract_Unaryop\n    p::Ptr{Cvoid}\nend`","user":"U017D4RFTFC","ts":"1612318615.455600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NvuW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"struct <unaryop> <: Abstract_Unaryop\n","style":{"code":true}},{"type":"text","text":"    p::Ptr{Cvoid}\n","style":{"code":true}},{"type":"text","text":"end","style":{"code":true}}]}]}],"thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC"},{"client_msg_id":"723138bb-669d-4a07-8fb4-b0277946d1e8","type":"message","text":"I see, in this case I don't think having dedicated files is too bad. It helps others to search for the corresponding struct definition.\n\nDoes the C library have 2000 structs defined explicitly as well?","user":"UH8A351DJ","ts":"1612318627.455800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2wSko","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see, in this case I don't think having dedicated files is too bad. It helps others to search for the corresponding struct definition.\n\nDoes the C library have 2000 structs defined explicitly as well?"}]}]}],"thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC"},{"client_msg_id":"398da594-71d8-4e7e-9941-852544946f59","type":"message","text":"There's an example above. That unaryop could be a number of different unary op built-ins. These are exported structs which are used in a function like `apply`","user":"U017D4RFTFC","ts":"1612318699.456000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"F7cXW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There's an example above. That unaryop could be a number of different unary op built-ins. These are exported structs which are used in a function like "},{"type":"text","text":"apply","style":{"code":true}}]}]}],"thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC"},{"client_msg_id":"6b8bc3ce-3ecc-4fb8-a28f-1e0bc8a73592","type":"message","text":"In the C api they are all the same type unaryop. But I need to dispatch on them so I make that abstract","user":"U017D4RFTFC","ts":"1612318752.456200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bhn7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In the C api they are all the same type unaryop. But I need to dispatch on them so I make that abstract"}]}]}],"thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC"},{"client_msg_id":"6b920a88-5eda-4103-80bd-f91756065b09","type":"message","text":"And I've further parameterized each struct since they apply to several primitive types each","user":"U017D4RFTFC","ts":"1612318856.456400","team":"T68168MUP","edited":{"user":"U017D4RFTFC","ts":"1612318864.000000"},"blocks":[{"type":"rich_text","block_id":"LUv=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And I've further parameterized each struct since they apply to several primitive types each"}]}]}],"thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC"},{"client_msg_id":"96269b53-5b65-48c1-adaf-94e83acca431","type":"message","text":"if the C doesn't distinguish them, why do you want to dispatch on different unary operators?","user":"UH8A351DJ","ts":"1612318887.456700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7UvW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if the C doesn't distinguish them, why do you want to dispatch on different unary operators?"}]}]}],"thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC"},{"client_msg_id":"3696ae8c-bb0c-4820-b703-1553ec68c659","type":"message","text":"ChainRules","user":"U017D4RFTFC","ts":"1612318910.456900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Nco","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ChainRules"}]}]}],"thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC"},{"client_msg_id":"c778d34f-2911-463d-abbe-4e5810ca66f7","type":"message","text":"So I can provide different rules for apply(x, NEG) vs apply(x IDENTITY)","user":"U017D4RFTFC","ts":"1612318976.457100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oZ8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So I can provide different rules for apply(x, NEG) vs apply(x IDENTITY)"}]}]}],"thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC"},{"client_msg_id":"08b80dfd-a5ed-4e24-84ac-697eb1e18126","type":"message","text":"then you might want to make an abstract `AbstractUnaryOp` and then make each `op &lt;:` then just dispatch on `typeof(op)` . `op` is the callable (function) here","user":"UH8A351DJ","ts":"1612318980.457300","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1612319008.000000"},"blocks":[{"type":"rich_text","block_id":"DLD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"then you might want to make an abstract "},{"type":"text","text":"AbstractUnaryOp","style":{"code":true}},{"type":"text","text":" and then make each "},{"type":"text","text":"op <:","style":{"code":true}},{"type":"text","text":" then just dispatch on "},{"type":"text","text":"typeof(op)","style":{"code":true}},{"type":"text","text":" . "},{"type":"text","text":"op","style":{"code":true}},{"type":"text","text":" is the callable (function) here"}]}]}],"thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC"},{"client_msg_id":"52939b1c-6cee-42c9-a41d-d58b1dbff205","type":"message","text":"op isn't directly callable though. Its an argument to a function. They're structs","user":"U017D4RFTFC","ts":"1612319102.457600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jPB=J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"op isn't directly callable though. Its an argument to a function. They're structs"}]}]}],"thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC"},{"client_msg_id":"b01be62e-f607-4ea2-9dd0-afe4d7b34bc9","type":"message","text":"Here's a concrete example:","user":"U017D4RFTFC","ts":"1612319235.457800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6QQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Here's a concrete example:"}]}]}],"thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC"},{"type":"message","text":"","files":[{"id":"F01LSKNQ85Q","created":1612319337,"timestamp":1612319337,"name":"image.png","title":"image.png","mimetype":"image/png","filetype":"png","pretty_type":"PNG","user":"UH8A351DJ","editable":false,"size":53859,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01LSKNQ85Q/image.png","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01LSKNQ85Q/download/image.png","thumb_64":"https://files.slack.com/files-tmb/T68168MUP-F01LSKNQ85Q-41dbd6e0fa/image_64.png","thumb_80":"https://files.slack.com/files-tmb/T68168MUP-F01LSKNQ85Q-41dbd6e0fa/image_80.png","thumb_360":"https://files.slack.com/files-tmb/T68168MUP-F01LSKNQ85Q-41dbd6e0fa/image_360.png","thumb_360_w":360,"thumb_360_h":334,"thumb_480":"https://files.slack.com/files-tmb/T68168MUP-F01LSKNQ85Q-41dbd6e0fa/image_480.png","thumb_480_w":480,"thumb_480_h":445,"thumb_160":"https://files.slack.com/files-tmb/T68168MUP-F01LSKNQ85Q-41dbd6e0fa/image_160.png","original_w":491,"original_h":455,"thumb_tiny":"AwAsADCpz7U2l49DQMdxQAYPXilUnoMfjScehpB9CaAFII44pKD9MUUAO/4FSD60uV7/AMqTI/yKADP+0aB164pcr/kUmRj/AOtQAE++aSl+X3pDjtmgB271Boz7HFBPy5puT60AOLA9QaTIA70maKAFyvofzoOOwNJRQB//2Q==","permalink":"https://julialang.slack.com/files/UH8A351DJ/F01LSKNQ85Q/image.png","permalink_public":"https://slack-files.com/T68168MUP-F01LSKNQ85Q-843eaa3974","is_starred":false,"has_rich_preview":false}],"upload":false,"user":"UH8A351DJ","display_as_bot":false,"ts":"1612319339.458000","thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC"},{"client_msg_id":"dd1d7934-a7ba-4758-bb0e-06567060c575","type":"message","text":"I was thinking something like this. as for your `apply()` dispatch, you can do:\n```julia&gt; (::Type{T})(x) where T &lt;: AbOp = T()(x)\n\n\njulia&gt; apply(x, y::Type{T}) where T&lt;: AbOp = y(x)\n\njulia&gt; apply(3, Mysin)\n0.1411200080598672```","user":"UH8A351DJ","ts":"1612319645.459600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"E1Tgm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I was thinking something like this. as for your "},{"type":"text","text":"apply()","style":{"code":true}},{"type":"text","text":" dispatch, you can do:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> (::Type{T})(x) where T <: AbOp = T()(x)\n\n\njulia> apply(x, y::Type{T}) where T<: AbOp = y(x)\n\njulia> apply(3, Mysin)\n0.1411200080598672"}]}]}],"thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC"},{"client_msg_id":"f5e6a2ac-6cbf-4c76-8697-42200ed9caef","type":"message","text":"`mutable struct _ADD{T} &lt;: Abstract_BinaryOp`\n     `p::Ptr{Cvoid}\nend\n_ADD() = _ADD(C_NULL)`\n`const ADD_INT64 = _ADD{Int64}`\n\nAnd then I cglobal that to assign the pointer.\n\nThis could be used as `apply(x, y ADD_INT64)` which is as ccall","user":"U017D4RFTFC","ts":"1612319650.459800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JRw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"mutable struct _ADD{T} <: Abstract_BinaryOp\n","style":{"code":true}},{"type":"text","text":" "},{"type":"text","text":"    p::Ptr{Cvoid}\n","style":{"code":true}},{"type":"text","text":"end\n","style":{"code":true}},{"type":"text","text":"_ADD() = _ADD(C_NULL)","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"const ADD_INT64 = _ADD{Int64}\n","style":{"code":true}},{"type":"text","text":"\nAnd then I cglobal that to assign the pointer.\n\nThis could be used as "},{"type":"text","text":"apply(x, y ADD_INT64)","style":{"code":true}},{"type":"text","text":" which is as ccall"}]}]}],"thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC"},{"client_msg_id":"0bc2fde6-e238-4dde-832d-9d39e28ef0b3","type":"message","text":"There would be one constant for most primitive types available in C. And many _&lt;OP&gt;s","user":"U017D4RFTFC","ts":"1612319696.460000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"V+q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There would be one constant for most primitive types available in C. And many _<OP>s"}]}]}],"thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC"},{"client_msg_id":"2a1e59ad-b826-42f8-abed-a534be7f5870","type":"message","text":"I later run through an array of those constants and do `ADD_INT64.p = unsafe_load(cglobal(&lt;correct args here&gt;)`","user":"U017D4RFTFC","ts":"1612319819.460200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"erv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I later run through an array of those constants and do "},{"type":"text","text":"ADD_INT64.p = unsafe_load(cglobal(<correct args here>)","style":{"code":true}}]}]}],"thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC"},{"client_msg_id":"b991fec3-e249-4447-bdd4-abad458c08c5","type":"message","text":"I guess you can do it in any ways you like","user":"UH8A351DJ","ts":"1612319849.460400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Sop","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess you can do it in any ways you like"}]}]}],"thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC"},{"client_msg_id":"fc9df170-43e6-4fcc-b90b-b9202bfb67b4","type":"message","text":"In your example how do I assign a pointer to that empty struct.\n\nAlso there's many more functions than apply that take these as input that's why I didn't think to use functors. Sorry that was missing context","user":"U017D4RFTFC","ts":"1612319935.460600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"APOeQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In your example how do I assign a pointer to that empty struct.\n\nAlso there's many more functions than apply that take these as input that's why I didn't think to use functors. Sorry that was missing context"}]}]}],"thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC"},{"client_msg_id":"7bf32240-68e5-4924-a413-cf355dfd57ec","type":"message","text":"is the point of pointer for global state in C library? or just for the sake of operation","user":"UH8A351DJ","ts":"1612319995.460800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"o2wA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is the point of pointer for global state in C library? or just for the sake of operation"}]}]}],"thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC"},{"client_msg_id":"0eef65bd-a454-4970-af1a-5411dd656fae","type":"message","text":"because my initial impression is that your `op`s are all just singleton types where the only instance is the corresponding operation in C","user":"UH8A351DJ","ts":"1612320032.461000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GNcU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"because my initial impression is that your "},{"type":"text","text":"op","style":{"code":true}},{"type":"text","text":"s are all just singleton types where the only instance is the corresponding operation in C"}]}]}],"thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC"},{"client_msg_id":"5983c172-028c-4105-955d-177166a5e18e","type":"message","text":"No they're declared as `UnaryOp NEG_INT64, NEG_INT32, IDENTITY_INT32` etc. `apply` or other functions are C functions which take pointers to these structs","user":"U017D4RFTFC","ts":"1612320309.461200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HjEE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No they're declared as "},{"type":"text","text":"UnaryOp NEG_INT64, NEG_INT32, IDENTITY_INT32 ","style":{"code":true}},{"type":"text","text":"etc. "},{"type":"text","text":"apply ","style":{"code":true}},{"type":"text","text":"or other functions are C functions which take pointers to these structs"}]}]}],"thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC"},{"client_msg_id":"c890a2d3-9272-448f-99aa-364ed1a7b48b","type":"message","text":"They aren't singletons, they're just predefined UnaryOps or BinaryOps. You could also create your own.","user":"U017D4RFTFC","ts":"1612320341.461400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3gD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"They aren't singletons, they're just predefined UnaryOps or BinaryOps. You could also create your own."}]}]}],"thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC"},{"client_msg_id":"a4bbf4c9-2002-42e0-aece-80a7c3194fb2","type":"message","text":"Sorry I'm not great explaining this :sweat_smile:","user":"U017D4RFTFC","ts":"1612320402.461600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3kM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sorry I'm not great explaining this "},{"type":"emoji","name":"sweat_smile"}]}]}],"thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC"},{"client_msg_id":"4387ad38-69b8-4b16-b544-d9cd1a490b62","type":"message","text":"it's okay, carry on the good work!","user":"UH8A351DJ","ts":"1612320482.461800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UeAAz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's okay, carry on the good work!"}]}]}],"thread_ts":"1612318280.454400","parent_user_id":"U017D4RFTFC","reactions":[{"name":"heart","users":["U017D4RFTFC"],"count":1}]}]