[{"client_msg_id":"d305a31a-4bb7-42cc-8671-7a8dc840abdb","type":"message","text":"Is there a difference between `T::Type` and `::Type{T} ... where T` in a method signature?","user":"U01HD5VFXJM","ts":"1614045063.170500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UY3RR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a difference between "},{"type":"text","text":"T::Type","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"::Type{T} ... where T","style":{"code":true}},{"type":"text","text":" in a method signature?"}]}]}],"thread_ts":"1614045063.170500","reply_count":8,"reply_users_count":5,"latest_reply":"1614061240.177500","reply_users":["B01J9QZ4SP8","U8D9768Q6","USU9FRPEU","U01HD5VFXJM","U7HAYKY9X"],"subscribed":false,"reactions":[{"name":"bridge","users":["U01HD5VFXJM"],"count":1}]},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1614045065.170600","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1614045063.170500","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"9F2FBDBF-7642-471E-9BCC-CE9AA0F96668","type":"message","text":"Yes. This is one of the few circumstances where putting concrete types in a method signature has performance implications. The second form you showed will specialize on the type, but the first won’t ","user":"U8D9768Q6","ts":"1614047758.173500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qSW0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes. This is one of the few circumstances where putting concrete types in a method signature has performance implications. The second form you showed will specialize on the type, but the first won’t "}]}]}],"thread_ts":"1614045063.170500","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"dea48375-77e3-4b5a-a66b-0d2b9bb81172","type":"message","text":"No specialization:\n```julia&gt; f(T::Type) = T\nf (generic function with 1 method)\n\njulia&gt; methods(f).ms[1].specializations\nsvec()\n\njulia&gt; f(Int64)\nInt64\n\njulia&gt; methods(f).ms[1].specializations\nsvec(#undef, #undef, #undef, #undef, #undef, #undef, #undef, MethodInstance for f(::Type{T} where T))\n\njulia&gt; f(Float64)\nFloat64\n\njulia&gt; methods(f).ms[1].specializations\nsvec(#undef, #undef, #undef, #undef, #undef, #undef, #undef, MethodInstance for f(::Type{T} where T))```","user":"USU9FRPEU","ts":"1614048119.173800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6liX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No specialization:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> f(T::Type) = T\nf (generic function with 1 method)\n\njulia> methods(f).ms[1].specializations\nsvec()\n\njulia> f(Int64)\nInt64\n\njulia> methods(f).ms[1].specializations\nsvec(#undef, #undef, #undef, #undef, #undef, #undef, #undef, MethodInstance for f(::Type{T} where T))\n\njulia> f(Float64)\nFloat64\n\njulia> methods(f).ms[1].specializations\nsvec(#undef, #undef, #undef, #undef, #undef, #undef, #undef, MethodInstance for f(::Type{T} where T))"}]}]}],"thread_ts":"1614045063.170500","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"033a8814-0910-49b3-8a17-0befcd3aedf5","type":"message","text":"Specialization:\n```julia&gt; g(::Type{T}) where T = T\ng (generic function with 1 method)\n\njulia&gt; methods(g).ms[1].specializations\nsvec()\n\njulia&gt; g(Int64)\nInt64\n\njulia&gt; methods(g).ms[1].specializations\nsvec(MethodInstance for g(::Type{Int64}), #undef, #undef, #undef, #undef, #undef, #undef, #undef)\n\njulia&gt; g(Float64)\nFloat64\n\njulia&gt; methods(g).ms[1].specializations\nsvec(MethodInstance for g(::Type{Int64}), MethodInstance for g(::Type{Float64}), #undef, #undef, #undef, #undef, #undef, #undef)```\n","user":"USU9FRPEU","ts":"1614048151.174000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"q93AV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Specialization:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> g(::Type{T}) where T = T\ng (generic function with 1 method)\n\njulia> methods(g).ms[1].specializations\nsvec()\n\njulia> g(Int64)\nInt64\n\njulia> methods(g).ms[1].specializations\nsvec(MethodInstance for g(::Type{Int64}), #undef, #undef, #undef, #undef, #undef, #undef, #undef)\n\njulia> g(Float64)\nFloat64\n\njulia> methods(g).ms[1].specializations\nsvec(MethodInstance for g(::Type{Int64}), MethodInstance for g(::Type{Float64}), #undef, #undef, #undef, #undef, #undef, #undef)"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1614045063.170500","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"07c89b33-5f14-41c1-b55b-db0d4dc4f889","type":"message","text":"Ah okay. So the former may mean less compilation time but a potentially slower general-purpose method, while the latter would have optimized methods for each type but each new type would have to be compiled fresh?","user":"U01HD5VFXJM","ts":"1614054973.176600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sSaW9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah okay. So the former may mean less compilation time but a potentially slower general-purpose method, while the latter would have optimized methods for each type but each new type would have to be compiled fresh?"}]}]}],"thread_ts":"1614045063.170500","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"0bfbdd5d-8a88-455d-8ef1-2b0d0b043464","type":"message","text":"And so doing `::Type{T}` is probably a bad idea if it's just passing through, because this forces specialization?","user":"U01HD5VFXJM","ts":"1614055800.176800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XJW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And so doing "},{"type":"text","text":"::Type{T}","style":{"code":true}},{"type":"text","text":" is probably a bad idea if it's just passing through, because this forces specialization?"}]}]}],"thread_ts":"1614045063.170500","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"b2092a5b-3c0b-4312-b7fc-822834e16c55","type":"message","text":"Precisely. The distinction is only important in certain cases where specialization were empirically seen to cause no real benefit, and thus disabled by defaullt <https://docs.julialang.org/en/v1/manual/performance-tips/#Be-aware-of-when-Julia-avoids-specializing|https://docs.julialang.org/en/v1/manual/performance-tips/#Be-aware-of-when-Julia-avoids-specializing>","user":"U7HAYKY9X","ts":"1614059956.177200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+1HD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Precisely. The distinction is only important in certain cases where specialization were empirically seen to cause no real benefit, and thus disabled by defaullt "},{"type":"link","url":"https://docs.julialang.org/en/v1/manual/performance-tips/#Be-aware-of-when-Julia-avoids-specializing","text":"https://docs.julialang.org/en/v1/manual/performance-tips/#Be-aware-of-when-Julia-avoids-specializing"}]}]}],"thread_ts":"1614045063.170500","parent_user_id":"U01HD5VFXJM"},{"type":"message","subtype":"bot_message","text":"Success, it has been cross posted <https://discourse.julialang.org/t/55825| to Discourse>. Keep and eye out on Discourse for responses and please add an answer there once you are satisfied with the solution so others can benefit as well. Happy debugging!","ts":"1614061240.177500","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1614045063.170500","parent_user_id":"U01HD5VFXJM"}]