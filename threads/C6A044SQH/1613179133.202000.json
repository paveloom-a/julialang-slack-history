[{"client_msg_id":"ccf6c0af-ba3e-45de-8b24-411a1fac70ac","type":"message","text":"I've got an abstract type that multiple concrete subtypes inherit from. I'd like to make a common constructor for everything that inherits from the abstract type, but can't do it because constructors are set based on the name of the subtype. What's the cleanest way to do this?","user":"U015EGHQZP0","ts":"1613179133.202000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZLztc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I've got an abstract type that multiple concrete subtypes inherit from. I'd like to make a common constructor for everything that inherits from the abstract type, but can't do it because constructors are set based on the name of the subtype. What's the cleanest way to do this?"}]}]}],"thread_ts":"1613179133.202000","reply_count":2,"reply_users_count":2,"latest_reply":"1613182239.202300","reply_users":["B01J9QZ4SP8","U019K6Q9N15"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1613179135.202100","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1613179133.202000","parent_user_id":"U015EGHQZP0"},{"client_msg_id":"1a36ba63-203b-4586-a793-ec74e78b2485","type":"message","text":"You could write a function like\n```function my_constructor(\n  ::Type{T},\n  input_args::InputArgs\n)::T where {T &lt;: MyAbstractType}\n  ...\nend```","user":"U019K6Q9N15","ts":"1613182239.202300","team":"T68168MUP","edited":{"user":"U019K6Q9N15","ts":"1613182277.000000"},"blocks":[{"type":"rich_text","block_id":"1NY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You could write a function like\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function my_constructor(\n  ::Type{T},\n  input_args::InputArgs\n)::T where {T <: MyAbstractType}\n  ...\nend"}]}]}],"thread_ts":"1613179133.202000","parent_user_id":"U015EGHQZP0"}]