[{"client_msg_id":"3bb05c03-e4d8-4578-a4d0-ace52007d63e","type":"message","text":"```using MetaGraphs, LightGraphs\n\n# SimpleGraph with one cycle\nelist = [(1,2),(2,3),(3,4),(4,1),(1,5)]\nex = SimpleDiGraph(Edge.(elist))\n\nex_cyclebasis = cycle_basis(ex)```","user":"U018FJVBXPD","ts":"1611665799.381400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yd9","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using MetaGraphs, LightGraphs\n\n# SimpleGraph with one cycle\nelist = [(1,2),(2,3),(3,4),(4,1),(1,5)]\nex = SimpleDiGraph(Edge.(elist))\n\nex_cyclebasis = cycle_basis(ex)"}]}]}],"thread_ts":"1611665799.381400","reply_count":3,"reply_users_count":1,"latest_reply":"1611669184.383200","reply_users":["U018FJVBXPD"],"subscribed":false},{"client_msg_id":"a6b8347d-22c9-4e0d-900a-b7332afeeeda","type":"message","text":"This doesn't work on my end, it seems to be causing an infinite loop.","user":"U018FJVBXPD","ts":"1611665866.381500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HCgdh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This doesn't work on my end, it seems to be causing an infinite loop."}]}]}],"thread_ts":"1611665799.381400","parent_user_id":"U018FJVBXPD"},{"client_msg_id":"9a0a25f4-84b9-46df-b4cf-a1e5ebfa0b39","type":"message","text":"I think I sorta found the answer in Networkx:\n\n```In [1]: import networkx as nx\n\nIn [7]: G = nx.DiGraph()\n\nIn [3]: elist = [(1,2),(2,3),(3,4),(4,1),(1,5)]\n\nIn [8]: G.add_edges_from(elist)\n\nIn [9]: nx.cycle_basis(G)\n---------------------------------------------------------------------------\nNetworkXNotImplemented                    Traceback (most recent call last)\n&lt;ipython-input-9-a2738105ea00&gt; in &lt;module&gt;\n----&gt; 1 nx.cycle_basis(G)\n\n&lt;decorator-gen-377&gt; in cycle_basis(G, root)\n\n~\\anaconda3\\lib\\site-packages\\networkx\\utils\\decorators.py in _not_implemented_for(not_implement_for_func, *args, **kwargs)\n     74         if match:\n     75             msg = f\"not implemented for {' '.join(graph_types)} type\"\n---&gt; 76             raise nx.NetworkXNotImplemented(msg)\n     77         else:\n     78             return not_implement_for_func(*args, **kwargs)\n\nNetworkXNotImplemented: not implemented for directed type```","user":"U018FJVBXPD","ts":"1611669113.383000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oJS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think I sorta found the answer in Networkx:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"In [1]: import networkx as nx\n\nIn [7]: G = nx.DiGraph()\n\nIn [3]: elist = [(1,2),(2,3),(3,4),(4,1),(1,5)]\n\nIn [8]: G.add_edges_from(elist)\n\nIn [9]: nx.cycle_basis(G)\n---------------------------------------------------------------------------\nNetworkXNotImplemented                    Traceback (most recent call last)\n<ipython-input-9-a2738105ea00> in <module>\n----> 1 nx.cycle_basis(G)\n\n<decorator-gen-377> in cycle_basis(G, root)\n\n~\\anaconda3\\lib\\site-packages\\networkx\\utils\\decorators.py in _not_implemented_for(not_implement_for_func, *args, **kwargs)\n     74         if match:\n     75             msg = f\"not implemented for {' '.join(graph_types)} type\"\n---> 76             raise nx.NetworkXNotImplemented(msg)\n     77         else:\n     78             return not_implement_for_func(*args, **kwargs)\n\nNetworkXNotImplemented: not implemented for directed type"}]}]}],"thread_ts":"1611665799.381400","parent_user_id":"U018FJVBXPD"},{"client_msg_id":"544dac24-ce91-4542-a9c8-e1fbf867a096","type":"message","text":"Since, `# Code in this file inspired by NetworkX.`","user":"U018FJVBXPD","ts":"1611669184.383200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+lI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Since, "},{"type":"text","text":"# Code in this file inspired by NetworkX.","style":{"code":true}}]}]}],"thread_ts":"1611665799.381400","parent_user_id":"U018FJVBXPD"}]