[{"client_msg_id":"c8bbff8d-701c-4852-8314-ed50c4922388","type":"message","text":"Is there a similar iterable way to skip `Inf` or `NaN` as there is `skipmissing` ? I'd like to apply this to basic math reduction (like `sum` or `mean` ) to skip over these values and I havent found anything in the docs supporting this behavior. Although I recognize I can do something like `foo[.!isnan.(foo)]`","user":"UM4TSHKF1","ts":"1615263587.136200","team":"T68168MUP","edited":{"user":"UM4TSHKF1","ts":"1615263698.000000"},"blocks":[{"type":"rich_text","block_id":"S5MY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a similar iterable way to skip "},{"type":"text","text":"Inf","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"NaN","style":{"code":true}},{"type":"text","text":" as there is "},{"type":"text","text":"skipmissing","style":{"code":true}},{"type":"text","text":" ? I'd like to apply this to basic math reduction (like "},{"type":"text","text":"sum","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"mean","style":{"code":true}},{"type":"text","text":" ) to skip over these values and I havent found anything in the docs supporting this behavior. Although I recognize I can do something like "},{"type":"text","text":"foo[.!isnan.(foo)]","style":{"code":true}}]}]}],"thread_ts":"1615263587.136200","reply_count":16,"reply_users_count":5,"latest_reply":"1615267229.144100","reply_users":["B01J9QZ4SP8","UH8A351DJ","U680THK2S","UM4TSHKF1","UGU761DU2"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1615263589.136300","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1615263587.136200","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"10e4118d-8d22-46b0-bb9a-c622265e7c82","type":"message","text":"`NaNMath.jl` deals with nan stuff","user":"UH8A351DJ","ts":"1615263679.136500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/Iqzl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"NaNMath.jl","style":{"code":true}},{"type":"text","text":" deals with nan stuff"}]}]}],"thread_ts":"1615263587.136200","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"e1907356-b62e-4eff-bf83-fb997f21334e","type":"message","text":"in your case, you want:\n```filter(isfinite, foo)```","user":"UH8A351DJ","ts":"1615263750.136800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gpP7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in your case, you want:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"filter(isfinite, foo)"}]}]}],"thread_ts":"1615263587.136200","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"81fceab2-914d-41cc-b439-81a3e61dd3d0","type":"message","text":"`skipmissing(x)` is basically `Iterators.filter(!ismissing, x)`, so you can apply the same for any other value, e.g. `isnan` or `isinf`","user":"U680THK2S","ts":"1615263774.137000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LaY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"skipmissing(x)","style":{"code":true}},{"type":"text","text":" is basically "},{"type":"text","text":"Iterators.filter(!ismissing, x)","style":{"code":true}},{"type":"text","text":", so you can apply the same for any other value, e.g. "},{"type":"text","text":"isnan","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"isinf","style":{"code":true}}]}]}],"thread_ts":"1615263587.136200","parent_user_id":"UM4TSHKF1","reactions":[{"name":"100","users":["UGU761DU2"],"count":1}]},{"client_msg_id":"519a9449-d985-4151-bd7c-56488479d1ed","type":"message","text":"`Iterators.filter` is lazy while `filter` is eager","user":"U680THK2S","ts":"1615263809.137200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4srjl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Iterators.filter","style":{"code":true}},{"type":"text","text":" is lazy while "},{"type":"text","text":"filter","style":{"code":true}},{"type":"text","text":" is eager"}]}]}],"thread_ts":"1615263587.136200","parent_user_id":"UM4TSHKF1","reactions":[{"name":"heavy_check_mark","users":["UH8A351DJ","UM4TSHKF1"],"count":2},{"name":"today-i-learned","users":["UGU761DU2"],"count":1}]},{"client_msg_id":"552d7232-6169-4d99-9126-69bdae1274e1","type":"message","text":"Brilliant and so simple, thanks! Is there a way to combine filters?","user":"UM4TSHKF1","ts":"1615263860.137600","team":"T68168MUP","edited":{"user":"UM4TSHKF1","ts":"1615263866.000000"},"blocks":[{"type":"rich_text","block_id":"0eB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Brilliant and so simple, thanks! Is there a way to combine filters?"}]}]}],"thread_ts":"1615263587.136200","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"d818d215-c2c7-4086-b0e9-44133dc7747c","type":"message","text":"(btw in case it wasn't clear, `isfinite` is julia built-in","user":"UH8A351DJ","ts":"1615263930.137900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"msBn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(btw in case it wasn't clear, "},{"type":"text","text":"isfinite","style":{"code":true}},{"type":"text","text":" is julia built-in"}]}]}],"thread_ts":"1615263587.136200","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"08efdd66-f956-4fd5-b1de-acfffc49ab7b","type":"message","text":"they combine naturally:\n\n```Iterators.filter(isfinite, skipmissing(foo))```\nyou can add more layers/ Not sure about performance implication","user":"UH8A351DJ","ts":"1615264010.138100","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1615264040.000000"},"blocks":[{"type":"rich_text","block_id":"dIZ/I","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"they combine naturally:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Iterators.filter(isfinite, skipmissing(foo))"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"you can add more layers/ Not sure about performance implication"}]}]}],"thread_ts":"1615263587.136200","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"bfabadcd-e193-43d8-bb16-9f224b67e648","type":"message","text":"This is so cool, thanks <@U680THK2S> and <@UH8A351DJ> !","user":"UM4TSHKF1","ts":"1615264221.138500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ott","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is so cool, thanks "},{"type":"user","user_id":"U680THK2S"},{"type":"text","text":" and "},{"type":"user","user_id":"UH8A351DJ"},{"type":"text","text":" !"}]}]}],"thread_ts":"1615263587.136200","parent_user_id":"UM4TSHKF1","reactions":[{"name":"+1","users":["U680THK2S"],"count":1}]},{"client_msg_id":"af173d92-9960-451c-9957-b959752c0170","type":"message","text":"You could probably also combine with i.e.\n```Iterators.filter(x -&gt; isfinite(x) &amp; !ismissing(x), foo)```\nnot sure how that compares performance-wise in general to nesting but presumably means at least one less allocation?","user":"UGU761DU2","ts":"1615264785.139000","team":"T68168MUP","edited":{"user":"UGU761DU2","ts":"1615265471.000000"},"blocks":[{"type":"rich_text","block_id":"d6w","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You could probably also combine with i.e.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Iterators.filter(x -> isfinite(x) & !ismissing(x), foo)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"not sure how that compares performance-wise in general to nesting but presumably means at least one less allocation?"}]}]}],"thread_ts":"1615263587.136200","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"809635b9-babd-4bd7-81aa-0b63cb53f186","type":"message","text":"<@UGU761DU2> thanks, I was wondering if an anonymous function was fair game. Performance-wise, it seems a little faster, thanks!","user":"UM4TSHKF1","ts":"1615264933.140400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5UX3","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UGU761DU2"},{"type":"text","text":" thanks, I was wondering if an anonymous function was fair game. Performance-wise, it seems a little faster, thanks!"}]}]}],"thread_ts":"1615263587.136200","parent_user_id":"UM4TSHKF1","reactions":[{"name":"+1","users":["UGU761DU2"],"count":1}]},{"client_msg_id":"868cfa3d-11e5-4606-85cd-89983870b4db","type":"message","text":"```julia&gt; b = fill([1,2,3, NaN, 4, Inf, -Inf, 5], 100000) |&gt; Base.Iterators.flatten |&gt; collect ;\n\njulia&gt; @benchmark mean(skipinfnan(b))\nBenchmarkTools.Trial: \n  memory estimate:  32 bytes\n  allocs estimate:  2       \n  --------------\n  minimum time:     4.354 ms (0.00% GC)\n  median time:      4.465 ms (0.00% GC)\n  mean time:        4.477 ms (0.00% GC)\n  maximum time:     15.228 ms (0.00% GC)\n  --------------\n  samples:          1117\n  evals/sample:     1\n\njulia&gt; @benchmark mean(skipinfnan2(b))  # the anonymous function\nBenchmarkTools.Trial: \n  memory estimate:  32 bytes\n  allocs estimate:  2\n  --------------\n  minimum time:     628.700 μs (0.00% GC)\n  median time:      649.900 μs (0.00% GC)\n  mean time:        654.850 μs (0.00% GC)\n  maximum time:     1.183 ms (0.00% GC)```","user":"UM4TSHKF1","ts":"1615265071.142100","team":"T68168MUP","edited":{"user":"UM4TSHKF1","ts":"1615265129.000000"},"blocks":[{"type":"rich_text","block_id":"C=nV2","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> b = fill([1,2,3, NaN, 4, Inf, -Inf, 5], 100000) |> Base.Iterators.flatten |> collect ;\n\njulia> @benchmark mean(skipinfnan(b))\nBenchmarkTools.Trial: \n  memory estimate:  32 bytes\n  allocs estimate:  2       \n  --------------\n  minimum time:     4.354 ms (0.00% GC)\n  median time:      4.465 ms (0.00% GC)\n  mean time:        4.477 ms (0.00% GC)\n  maximum time:     15.228 ms (0.00% GC)\n  --------------\n  samples:          1117\n  evals/sample:     1\n\njulia> @benchmark mean(skipinfnan2(b))  # the anonymous function\nBenchmarkTools.Trial: \n  memory estimate:  32 bytes\n  allocs estimate:  2\n  --------------\n  minimum time:     628.700 μs (0.00% GC)\n  median time:      649.900 μs (0.00% GC)\n  mean time:        654.850 μs (0.00% GC)\n  maximum time:     1.183 ms (0.00% GC)"}]}]}],"thread_ts":"1615263587.136200","parent_user_id":"UM4TSHKF1","reactions":[{"name":"sonic","users":["UGU761DU2","U0179G7FG4F"],"count":2}]},{"client_msg_id":"84620794-3f06-4b1b-80f7-342e2646f266","type":"message","text":"May not matter in this case (and you may already know this), but FWIW just because it took me a while to figure out, you may also try “interpolating” in any global variables with `$` (e.g. `$b`) when using `@benchmark` in global scope just to make sure you’re not also timing the global variable overhead","user":"UGU761DU2","ts":"1615265421.142800","team":"T68168MUP","edited":{"user":"UGU761DU2","ts":"1615265458.000000"},"blocks":[{"type":"rich_text","block_id":"I6f/h","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"May not matter in this case (and you may already know this), but FWIW just because it took me a while to figure out, you may also try “interpolating” in any global variables with "},{"type":"text","text":"$","style":{"code":true}},{"type":"text","text":" (e.g. "},{"type":"text","text":"$b","style":{"code":true}},{"type":"text","text":") when using "},{"type":"text","text":"@benchmark","style":{"code":true}},{"type":"text","text":" in global scope just to make sure you’re not also timing the global variable overhead"}]}]}],"thread_ts":"1615263587.136200","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"69d437fa-6bda-45ac-b7c8-90862a303049","type":"message","text":"<@UGU761DU2> good call, thanks for the reminder. Thankfully no shocking difference\n```julia&gt; @benchmark mean(skipinfnan2($b))  # anonymous function\nBenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     653.199 μs (0.00% GC)\n  median time:      662.200 μs (0.00% GC)\n  mean time:        684.142 μs (0.00% GC)\n  maximum time:     1.577 ms (0.00% GC)\n  --------------\n  samples:          7298\n  evals/sample:     1\n\njulia&gt; @benchmark mean(skipinf(skipnan($b)))\nBenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     4.487 ms (0.00% GC)\n  median time:      4.551 ms (0.00% GC)\n  mean time:        4.626 ms (0.00% GC)\n  maximum time:     16.762 ms (0.00% GC)\n  --------------\n  samples:          1081\n  evals/sample:     1```","user":"UM4TSHKF1","ts":"1615265586.143200","team":"T68168MUP","edited":{"user":"UM4TSHKF1","ts":"1615265815.000000"},"blocks":[{"type":"rich_text","block_id":"SPl","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UGU761DU2"},{"type":"text","text":" good call, thanks for the reminder. Thankfully no shocking difference\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @benchmark mean(skipinfnan2($b))  # anonymous function\nBenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     653.199 μs (0.00% GC)\n  median time:      662.200 μs (0.00% GC)\n  mean time:        684.142 μs (0.00% GC)\n  maximum time:     1.577 ms (0.00% GC)\n  --------------\n  samples:          7298\n  evals/sample:     1\n\njulia> @benchmark mean(skipinf(skipnan($b)))\nBenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     4.487 ms (0.00% GC)\n  median time:      4.551 ms (0.00% GC)\n  mean time:        4.626 ms (0.00% GC)\n  maximum time:     16.762 ms (0.00% GC)\n  --------------\n  samples:          1081\n  evals/sample:     1"}]}]}],"thread_ts":"1615263587.136200","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"9ba801d4-0448-45e2-85c0-2737f58dc81f","type":"message","text":"Although... by themselves (outside of calling the result in `mean`), the performance seems identical:\n```julia&gt; @benchmark skipinf(skipnan($b))\nBenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     1.399 ns (0.00% GC)\n  median time:      1.500 ns (0.00% GC)\n  mean time:        1.537 ns (0.00% GC)\n  maximum time:     48.300 ns (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1000\n\njulia&gt; @benchmark skipinfnan2($b)\nBenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     1.199 ns (0.00% GC)\n  median time:      1.201 ns (0.00% GC)\n  mean time:        1.278 ns (0.00% GC)\n  maximum time:     41.600 ns (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1000```","user":"UM4TSHKF1","ts":"1615265734.143500","team":"T68168MUP","edited":{"user":"UM4TSHKF1","ts":"1615265748.000000"},"blocks":[{"type":"rich_text","block_id":"dxX1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Although... by themselves (outside of calling the result in "},{"type":"text","text":"mean","style":{"code":true}},{"type":"text","text":"), the performance seems identical:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @benchmark skipinf(skipnan($b))\nBenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     1.399 ns (0.00% GC)\n  median time:      1.500 ns (0.00% GC)\n  mean time:        1.537 ns (0.00% GC)\n  maximum time:     48.300 ns (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1000\n\njulia> @benchmark skipinfnan2($b)\nBenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     1.199 ns (0.00% GC)\n  median time:      1.201 ns (0.00% GC)\n  mean time:        1.278 ns (0.00% GC)\n  maximum time:     41.600 ns (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1000"}]}]}],"thread_ts":"1615263587.136200","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"2c4e0129-1824-4f8f-8075-3ccc7a9b0e30","type":"message","text":"Oh, puzzled me for a minute! That’s because the `Iterators.filter` by itself returns a lazy iterator that doesn’t actually calculate anything until it has to -- hence the 1.4ns (~2-4 clock cycles?) times","user":"UGU761DU2","ts":"1615267229.144100","team":"T68168MUP","edited":{"user":"UGU761DU2","ts":"1615267274.000000"},"blocks":[{"type":"rich_text","block_id":"0/EoE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh, puzzled me for a minute! That’s because the "},{"type":"text","text":"Iterators.filter","style":{"code":true}},{"type":"text","text":" by itself returns a lazy iterator that doesn’t actually calculate anything until it has to -- hence the 1.4ns (~2-4 clock cycles?) times"}]}]}],"thread_ts":"1615263587.136200","parent_user_id":"UM4TSHKF1"}]