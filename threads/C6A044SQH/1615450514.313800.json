[{"client_msg_id":"f29423ce-74d6-4a75-bdfd-efb667b3a22f","type":"message","text":"Is it possible to dispatch on the abstract type of an object? I'm thinking of a scenario where you have a base method for all of type AbstractT, and a concrete method for T. Something like:\n\n```function dostuff(t::AbstractT)\n    # common manipulations\nend\n\nfunction dostuff(t::T)\n    # specific manipulations\n    dostuff(base(T))\nend```","user":"U01HD5VFXJM","ts":"1615450514.313800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aol","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is it possible to dispatch on the abstract type of an object? I'm thinking of a scenario where you have a base method for all of type AbstractT, and a concrete method for T. Something like:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function dostuff(t::AbstractT)\n    # common manipulations\nend\n\nfunction dostuff(t::T)\n    # specific manipulations\n    dostuff(base(T))\nend"}]}]}],"thread_ts":"1615450514.313800","reply_count":25,"reply_users_count":5,"latest_reply":"1615451951.318900","reply_users":["B01J9QZ4SP8","UH24GRBLL","U01HD5VFXJM","U6QPTG69E","U01M655G9AR"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1615450517.313900","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1615450514.313800","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"29abadb6-1b54-441d-b1e2-90750aaba6a4","type":"message","text":"the tricky thing is that there may be more than one applicable abstract type","user":"UH24GRBLL","ts":"1615450591.314100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3Qq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the tricky thing is that there may be more than one applicable abstract type"}]}]}],"thread_ts":"1615450514.313800","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"92f45b00-df9e-4697-b260-1b7651404cd3","type":"message","text":"e.g.\n```julia&gt; 1 isa Int               \ntrue                           \n                               \njulia&gt; 1 isa Integer           \ntrue                           \n                               \njulia&gt; 1 isa Number            \ntrue                           \n                               \njulia&gt; Int &lt;: Integer &lt;: Number\ntrue                           ```","user":"UH24GRBLL","ts":"1615450617.314300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8sRF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"e.g.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> 1 isa Int               \ntrue                           \n                               \njulia> 1 isa Integer           \ntrue                           \n                               \njulia> 1 isa Number            \ntrue                           \n                               \njulia> Int <: Integer <: Number\ntrue                           "}]}]}],"thread_ts":"1615450514.313800","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"f80bb1f4-6aa7-4514-a0ee-705233607b62","type":"message","text":"Gotcha. Or a way to tell Julia to treat an argument as a particular abstract type?","user":"U01HD5VFXJM","ts":"1615450641.314500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8Mxz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Gotcha. Or a way to tell Julia to treat an argument as a particular abstract type?"}]}]}],"thread_ts":"1615450514.313800","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"a3bc0a62-a3ef-4d77-bdda-ffbb8bfd5bd8","type":"message","text":"dispatch will always pick the most specific method","user":"UH24GRBLL","ts":"1615450653.314700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GiRh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"dispatch will always pick the most specific method"}]}]}],"thread_ts":"1615450514.313800","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"351fb052-3229-4533-87ad-8d88dcd17049","type":"message","text":"you can use `invoke` to select the method","user":"U6QPTG69E","ts":"1615450663.314900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"l3+d","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can use "},{"type":"text","text":"invoke","style":{"code":true}},{"type":"text","text":" to select the method"}]}]}],"thread_ts":"1615450514.313800","parent_user_id":"U01HD5VFXJM","reactions":[{"name":"point_up","users":["UN45LV5K6"],"count":1}]},{"client_msg_id":"880e33a8-2b9f-4928-b894-ce8ef673fcfd","type":"message","text":"It reads to me like you're trying to keep yourself from repeating code - in which case, why keep the same function name?","user":"UH24GRBLL","ts":"1615450686.315100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fkqE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It reads to me like you're trying to keep yourself from repeating code - in which case, why keep the same function name?"}]}]}],"thread_ts":"1615450514.313800","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"2be8bc31-78e5-4082-b568-a35b4e46f89c","type":"message","text":"I'm building a model with a default value, and specialized cases have a conditionally different value.","user":"U01HD5VFXJM","ts":"1615450735.315300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"K=Ij","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm building a model with a default value, and specialized cases have a conditionally different value."}]}]}],"thread_ts":"1615450514.313800","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"fc21378c-61fa-48a9-9824-31a54a3a4f8f","type":"message","text":"Just seemed like a natural way to express that","user":"U01HD5VFXJM","ts":"1615450785.315500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cGeo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Just seemed like a natural way to express that"}]}]}],"thread_ts":"1615450514.313800","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"62a5ff0a-da6c-4760-bb0d-262b97050d78","type":"message","text":"is that value known/possible to compute during construction of the object?","user":"UH24GRBLL","ts":"1615450831.315700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7LYW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is that value known/possible to compute during construction of the object?"}]}]}],"thread_ts":"1615450514.313800","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"7a0565ab-fe19-44d8-af1e-675c21aedff7","type":"message","text":"Yeah. I'm sure there's another way to architect it, was hoping to use dispatch to just plug it in.","user":"U01HD5VFXJM","ts":"1615450905.315900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"b0q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah. I'm sure there's another way to architect it, was hoping to use dispatch to just plug it in."}]}]}],"thread_ts":"1615450514.313800","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"18651334-a68f-45b1-bba5-8681ddfd03e6","type":"message","text":"well, constructors can also take default values","user":"UH24GRBLL","ts":"1615450944.316100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fF=6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well, constructors can also take default values"}]}]}],"thread_ts":"1615450514.313800","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"9b3fd436-8b45-476a-b32f-f287e9056ca7","type":"message","text":"e.g.\n\n```struct A\n  fieldA\n  fieldB\n  A(a=3,b=4) = new(a,b)\nend\n\nA(5,6).fieldA == 5 # true```","user":"UH24GRBLL","ts":"1615451008.316300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ddv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"e.g.\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct A\n  fieldA\n  fieldB\n  A(a=3,b=4) = new(a,b)\nend\n\nA(5,6).fieldA == 5 # true"}]}]}],"thread_ts":"1615450514.313800","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"b9bb6aac-8398-4ce4-b2e9-acf70775a6b5","type":"message","text":"the way I'd do it is by having a function that computes that special value and call that in the constructor of your types","user":"UH24GRBLL","ts":"1615451054.316500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8X/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the way I'd do it is by having a function that computes that special value and call that in the constructor of your types"}]}]}],"thread_ts":"1615450514.313800","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"544f7e77-75a4-46ad-b475-ad1de3e9ebe2","type":"message","text":"why not\n```_helper(t::AbstractT) = ...\ndostuff(t::AbstractT) = _helper(t)\nfunction dostuff(t::T)\n    #specific stuff\n    _helper(t)\nend```","user":"U01M655G9AR","ts":"1615451065.316700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4ebG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"why not\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"_helper(t::AbstractT) = ...\ndostuff(t::AbstractT) = _helper(t)\nfunction dostuff(t::T)\n    #specific stuff\n    _helper(t)\nend"}]}]}],"thread_ts":"1615450514.313800","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"c2734a96-a82a-4504-9d1e-79674ff061b6","type":"message","text":"dispatch is for distinguishing methods depending on the type of the object passed in - using it to emulate inheritance feels iffy to me :)","user":"UH24GRBLL","ts":"1615451142.316900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QyB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"dispatch is for distinguishing methods depending on the type of the object passed in - using it to emulate inheritance feels iffy to me :)"}]}]}],"thread_ts":"1615450514.313800","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"52a86372-ceb8-489f-ad7d-74864cc459d3","type":"message","text":"still, the approach with `invoke` will work, though it may not result in the clean solution you hoped for","user":"UH24GRBLL","ts":"1615451194.317100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bWX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"still, the approach with "},{"type":"text","text":"invoke","style":{"code":true}},{"type":"text","text":" will work, though it may not result in the clean solution you hoped for"}]}]}],"thread_ts":"1615450514.313800","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"a0ea94f9-3f10-4221-8aff-7f41f4412b55","type":"message","text":"it's definitely possible I'm missing something here, so if you have additional context to share, there may be a better solution","user":"UH24GRBLL","ts":"1615451298.317300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sC9u","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's definitely possible I'm missing something here, so if you have additional context to share, there may be a better solution"}]}]}],"thread_ts":"1615450514.313800","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"bce1025c-5dae-46fd-a34e-cde084b391d8","type":"message","text":"I was mostly curious; it's not super important as I'm just playing around with it. It's a simulation and I have two types of agents. The update method calls a function to get a value based on the type of agent. One always has the default value and the other sometimes has a different value based on the state of the agent, but should fall back to the value the other one has.","user":"U01HD5VFXJM","ts":"1615451525.317500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/r92","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I was mostly curious; it's not super important as I'm just playing around with it. It's a simulation and I have two types of agents. The update method calls a function to get a value based on the type of agent. One always has the default value and the other sometimes has a different value based on the state of the agent, but should fall back to the value the other one has."}]}]}],"thread_ts":"1615450514.313800","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"6260bf8f-3bc9-499f-97c3-1e02c76d1ab3","type":"message","text":"Clearly I could just use another common function and get similar behavior. :slightly_smiling_face: Just would have been neat if it worked.","user":"U01HD5VFXJM","ts":"1615451721.317700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ayc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Clearly I could just use another common function and get similar behavior. "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":" Just would have been neat if it worked."}]}]}],"thread_ts":"1615450514.313800","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"3e133514-6f38-4993-89d5-aca717a7c56c","type":"message","text":"yeah, using something like `calculate_default_value(::AbstractThing)` and just conditionally returning that for one type but directly calling it for the other would be the way to go","user":"UH24GRBLL","ts":"1615451771.317900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dY5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, using something like "},{"type":"text","text":"calculate_default_value(::AbstractThing)","style":{"code":true}},{"type":"text","text":" and just conditionally returning that for one type but directly calling it for the other would be the way to go"}]}]}],"thread_ts":"1615450514.313800","parent_user_id":"U01HD5VFXJM","reactions":[{"name":"+1","users":["U01HD5VFXJM"],"count":1}]},{"client_msg_id":"2007362e-1ea3-4c3f-b96d-62a0cb0c5e03","type":"message","text":"Thanks!","user":"U01HD5VFXJM","ts":"1615451789.318200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wnEUP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks!"}]}]}],"thread_ts":"1615450514.313800","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"6b28a439-daa7-498c-a43d-05c8a13dad3d","type":"message","text":"```calculate_default(t) = 5\ndostuff(t::AbstractT) = calculate_default(t)\ndostuff(t::T2) = rand() &lt; 0.5 ? calculate_default(t) : t.a * t.b```\nwould be the \"pattern\"","user":"UH24GRBLL","ts":"1615451838.318400","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1615451891.000000"},"blocks":[{"type":"rich_text","block_id":"pHTT","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"calculate_default(t) = 5\ndostuff(t::AbstractT) = calculate_default(t)\ndostuff(t::T2) = rand() < 0.5 ? calculate_default(t) : t.a * t.b"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"would be the \"pattern\""}]}]}],"thread_ts":"1615450514.313800","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"0db10b67-7919-4538-aba8-7bb8c0683b24","type":"message","text":"seems similar to what I proposed above :slightly_smiling_face:","user":"U01M655G9AR","ts":"1615451899.318700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ja3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"seems similar to what I proposed above "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1615450514.313800","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"301cd638-0608-4b78-afc2-a79ec9288195","type":"message","text":"yep, it's also what I meant by\n\n&gt; the way I'd do it is by having a function that computes that special value and call that in the constructor of your types","user":"UH24GRBLL","ts":"1615451951.318900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"G6rBA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yep, it's also what I meant by\n\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"the way I'd do it is by having a function that computes that special value and call that in the constructor of your types"}]}]}],"thread_ts":"1615450514.313800","parent_user_id":"U01HD5VFXJM","reactions":[{"name":"thumbsup_all","users":["U01M655G9AR"],"count":1}]}]