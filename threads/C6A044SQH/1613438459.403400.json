[{"client_msg_id":"c6187d29-085e-49a8-a936-818436830740","type":"message","text":"by two's compliment, shouldn't the following be `-1`:?\n```julia&gt; parse(Int, \"1111\"; base=2)\n15```","user":"UH8A351DJ","ts":"1613438459.403400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/3di","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"by two's compliment, shouldn't the following be "},{"type":"text","text":"-1","style":{"code":true}},{"type":"text","text":":?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> parse(Int, \"1111\"; base=2)\n15"}]}]}],"thread_ts":"1613438459.403400","reply_count":32,"reply_users_count":4,"latest_reply":"1613445374.411300","reply_users":["B01J9QZ4SP8","UH8A351DJ","U0179G7FG4F","U01FKQQ7J0J"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1613438460.403500","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"85e63186-320c-4204-bd2d-07c85d7557f3","type":"message","text":"in fact, the general \"issue\" is that `bitstring` cannot be parsed back into the original value","user":"UH8A351DJ","ts":"1613438508.403700","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1613438547.000000"},"blocks":[{"type":"rich_text","block_id":"la8SH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in fact, the general \"issue\" is that "},{"type":"text","text":"bitstring","style":{"code":true}},{"type":"text","text":" cannot be parsed back into the original value"}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"6d01b75b-26c5-44ec-b3ba-6f84d345ced9","type":"message","text":"no. `bitstring(-1)=\"1111111111111111111111111111111111111111111111111111111111111111\"`","user":"U0179G7FG4F","ts":"1613440978.404200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YBw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no. "},{"type":"text","text":"bitstring(-1)=\"1111111111111111111111111111111111111111111111111111111111111111\"","style":{"code":true}}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"904ea2e8-bf55-4dbe-b5d5-1c193753cb47","type":"message","text":"`Int` is either 32 or 64 bits, so `\"1111\"` should always be 15, but even with a \"full width\" string of ones `parse` throws rather than returning -1 for `Signed` integer types:\n```julia&gt; parse(Int8, \"1\"^8, base=2)\nERROR: OverflowError: overflow parsing \"11111111\"\n\njulia&gt; parse(UInt8, \"1\"^8, base=2)\n0xff```","user":"U01FKQQ7J0J","ts":"1613440986.404400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Tf=U","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Int","style":{"code":true}},{"type":"text","text":" is either 32 or 64 bits, so "},{"type":"text","text":"\"1111\"","style":{"code":true}},{"type":"text","text":" should always be 15, but even with a \"full width\" string of ones "},{"type":"text","text":"parse","style":{"code":true}},{"type":"text","text":" throws rather than returning -1 for "},{"type":"text","text":"Signed","style":{"code":true}},{"type":"text","text":" integer types:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> parse(Int8, \"1\"^8, base=2)\nERROR: OverflowError: overflow parsing \"11111111\"\n\njulia> parse(UInt8, \"1\"^8, base=2)\n0xff"}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"4b05cfc1-c5d3-43ab-81f7-d1dee6920e4b","type":"message","text":"If you had an `Int4`, then this would work","user":"U0179G7FG4F","ts":"1613441021.404600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"S8r","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you had an "},{"type":"text","text":"Int4","style":{"code":true}},{"type":"text","text":", then this would work"}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"cc73307b-d4ae-4d8f-a87e-72cb36c61877","type":"message","text":"The round trip doesn't work:\n```julia&gt; parse(Int64, bitstring(Int64(-1)), base=2)\nERROR: OverflowError: overflow parsing \"1111111111111111111111111111111111111111111111111111111111111111\"```","user":"U01FKQQ7J0J","ts":"1613441375.404800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2YFmm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The round trip doesn't work:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> parse(Int64, bitstring(Int64(-1)), base=2)\nERROR: OverflowError: overflow parsing \"1111111111111111111111111111111111111111111111111111111111111111\""}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"7f599dc2-e094-4972-9bb7-01138c52b63b","type":"message","text":"ah, that's not great","user":"U0179G7FG4F","ts":"1613441393.405000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hr6c","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah, that's not great"}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"0c2309a6-8d3c-4354-8eca-0e9585788662","type":"message","text":"(that was on 1.5.3)","user":"U01FKQQ7J0J","ts":"1613441459.405200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1zd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(that was on 1.5.3)"}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"6239b10a-58ef-443e-aaff-b4694123c22b","type":"message","text":"well, `Int4` is just I don't want to spam you with a lot of 1","user":"UH8A351DJ","ts":"1613441822.405400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2tKc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well, "},{"type":"text","text":"Int4","style":{"code":true}},{"type":"text","text":" is just I don't want to spam you with a lot of 1"}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"2b424896-d04f-4ac6-b60a-85f683341505","type":"message","text":"but the idea is general, do you see the point?","user":"UH8A351DJ","ts":"1613441829.405600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"V7r0z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but the idea is general, do you see the point?"}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"a9743491-2e10-4fce-930e-2516aca84347","type":"message","text":"two's compliment should be that no matter how many bits there are, the leading one should be negative. It doesn't work on any number of bits, I know we only have built-in 8,16,32,64, but those don't work either","user":"UH8A351DJ","ts":"1613441877.405800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1/mRW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"two's compliment should be that no matter how many bits there are, the leading one should be negative. It doesn't work on any number of bits, I know we only have built-in 8,16,32,64, but those don't work either"}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"fab17d19-4d8e-4265-9112-cce769daf6e2","type":"message","text":"Imo, parsing `n` `1`s in an `Intn` should be `Intn(-1)`, but otherwise, our behavior is correct","user":"U0179G7FG4F","ts":"1613441962.406000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KSyi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Imo, parsing "},{"type":"text","text":"n","style":{"code":true}},{"type":"text","text":" "},{"type":"text","text":"1","style":{"code":true}},{"type":"text","text":"s in an "},{"type":"text","text":"Intn","style":{"code":true}},{"type":"text","text":" should be "},{"type":"text","text":"Intn(-1)","style":{"code":true}},{"type":"text","text":", but otherwise, our behavior is correct"}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"f00aa2d2-2e7c-402b-bfbc-460aa7bb961d","type":"message","text":"no, our behavior doesn't allow round trip for any signed Integer with leading 1:\n```julia&gt; bitstring(Int8(-101))\n\"10011011\"\n\njulia&gt; parse(Int8, \"10011011\"; base=2)\nERROR: OverflowError: overflow parsing \"10011011\"```","user":"UH8A351DJ","ts":"1613442214.406200","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1613442260.000000"},"blocks":[{"type":"rich_text","block_id":"KvL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no, our behavior doesn't allow round trip for any signed Integer with leading 1:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> bitstring(Int8(-101))\n\"10011011\"\n\njulia> parse(Int8, \"10011011\"; base=2)\nERROR: OverflowError: overflow parsing \"10011011\""}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"bc1a8912-2c4c-4822-98de-ec4b09acfa5c","type":"message","text":"I'm okay with \"this is intentional\", but I also want to know if there's a way to parse with actual two's compliment","user":"UH8A351DJ","ts":"1613442294.406500","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1613442304.000000"},"blocks":[{"type":"rich_text","block_id":"wJR+X","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm okay with \"this is intentional\", but I also want to know if there's a way to parse with actual two's compliment"}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"63222e89-7fbb-40df-9387-d3f4a48c65d7","type":"message","text":"Having `parse(Int, \"1\", base=2)` return `-1` would be weird.","user":"U01FKQQ7J0J","ts":"1613442311.406800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9X/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Having "},{"type":"text","text":"parse(Int, \"1\", base=2)","style":{"code":true}},{"type":"text","text":" return "},{"type":"text","text":"-1","style":{"code":true}},{"type":"text","text":" would be weird."}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"a4a06a4c-6d3a-48b4-b11c-a2a82bea9585","type":"message","text":"But I think we all agree that the round trip should work","user":"U01FKQQ7J0J","ts":"1613442342.407000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oP1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But I think we all agree that the round trip should work"}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"9d13813f-3c31-49ce-8de0-44d5ddba3150","type":"message","text":"right. The key is that this is only a problem when parsing an `n` length `String` into a `n` bit `Integer`","user":"U0179G7FG4F","ts":"1613442346.407200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QVLed","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"right. The key is that this is only a problem when parsing an "},{"type":"text","text":"n","style":{"code":true}},{"type":"text","text":" length "},{"type":"text","text":"String","style":{"code":true}},{"type":"text","text":" into a "},{"type":"text","text":"n","style":{"code":true}},{"type":"text","text":" bit "},{"type":"text","text":"Integer","style":{"code":true}}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"72b266b4-4ed8-44d6-a766-014d39f58bc4","type":"message","text":"why would you parse `n` length string into anything more than `n` bit?","user":"UH8A351DJ","ts":"1613442380.407400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L60vz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"why would you parse "},{"type":"text","text":"n","style":{"code":true}},{"type":"text","text":" length string into anything more than "},{"type":"text","text":"n","style":{"code":true}},{"type":"text","text":" bit?"}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"75d91e8c-4d1f-4b2d-af0c-66885590bbc8","type":"message","text":"yeah, I think it's worth to have some parse (maybe a keyword argument) where round trip works","user":"UH8A351DJ","ts":"1613442403.407600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Vun","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, I think it's worth to have some parse (maybe a keyword argument) where round trip works"}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"e8684f6d-de60-4a0a-ae10-093cb9babe2f","type":"message","text":"it's the less case that you were arguing above (ie `parse(Int8, \"1111\")` should still be `15`)","user":"U0179G7FG4F","ts":"1613442428.407800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QybPD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's the less case that you were arguing above (ie "},{"type":"text","text":"parse(Int8, \"1111\")","style":{"code":true}},{"type":"text","text":" should still be "},{"type":"text","text":"15","style":{"code":true}},{"type":"text","text":")"}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"f3702f2b-db44-4837-8f22-b4e74f72c03c","type":"message","text":"I'm arguing we should have a parse that does two's compliment in general. Two's compliment doesn't care how many bits you have","user":"UH8A351DJ","ts":"1613442462.408000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qoNiw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm arguing we should have a parse that does two's compliment in general. Two's compliment doesn't care how many bits you have"}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"4f0355ff-23d2-4c14-a5c3-8429c8ee5adb","type":"message","text":"just `parse(Int8, \"11110000\")`","user":"U0179G7FG4F","ts":"1613442468.408200","team":"T68168MUP","edited":{"user":"U0179G7FG4F","ts":"1613442473.000000"},"blocks":[{"type":"rich_text","block_id":"P9m","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"just "},{"type":"text","text":"parse(Int8, \"11110000\")","style":{"code":true}}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"c6ba0574-8dc0-4e88-a544-13384c56308e","type":"message","text":"what do you mean by that?","user":"UH8A351DJ","ts":"1613442493.408500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7Nc13","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what do you mean by that?"}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"e3ac0e65-c576-41ba-b3bf-884324941e58","type":"message","text":"I think the problem is that when we think about parsing base=2, we're really parsing un-signed bits","user":"UH8A351DJ","ts":"1613442694.408700","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1613442699.000000"},"blocks":[{"type":"rich_text","block_id":"u6aWi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think the problem is that when we think about parsing base=2, we're really parsing un-signed bits"}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"58972c9a-2305-4123-b0cd-831063ff1766","type":"message","text":"that's not actually the problem, `parse(UInt8, \"11111111\")` is also broken","user":"U0179G7FG4F","ts":"1613442743.409000","team":"T68168MUP","edited":{"user":"U0179G7FG4F","ts":"1613442780.000000"},"blocks":[{"type":"rich_text","block_id":"U1PU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's not actually the problem, "},{"type":"text","text":"parse(UInt8, \"11111111\")","style":{"code":true}},{"type":"text","text":" is also broken"}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"e3183027-aad5-4729-9575-2e2d36f53a00","type":"message","text":"something is real weird","user":"U0179G7FG4F","ts":"1613442749.409200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"I07","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"something is real weird"}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"e587c9b0-2937-4685-a92a-9e1c5f24c53e","type":"message","text":"One can \"sign extend\" a two's complement number to a larger number of bits by filling the extra bits with `1`s, but assuming that an arbitrary length `N` bit string that starts with `1` implies sign extension to any number of bits `&gt;N` is a convention that would require every bit string for positive values to have a leading `0`.","user":"U01FKQQ7J0J","ts":"1613442862.409700","team":"T68168MUP","edited":{"user":"U01FKQQ7J0J","ts":"1613442970.000000"},"blocks":[{"type":"rich_text","block_id":"U1y4s","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"One can \"sign extend\" a two's complement number to a larger number of bits by filling the extra bits with "},{"type":"text","text":"1","style":{"code":true}},{"type":"text","text":"s, but assuming that an arbitrary length "},{"type":"text","text":"N","style":{"code":true}},{"type":"text","text":" bit string that starts with "},{"type":"text","text":"1","style":{"code":true}},{"type":"text","text":" implies sign extension to any number of bits "},{"type":"text","text":">N","style":{"code":true}},{"type":"text","text":" is a convention that would require every bit string for positive values to have a leading `0`."}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"bdf1c912-edf4-4caa-8e87-13f3f2459b0f","type":"message","text":"the \"acceptable\" way is to replace the most significant bit (if it's a `1`), with `-`","user":"UH8A351DJ","ts":"1613442988.410000","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1613442989.000000"},"blocks":[{"type":"rich_text","block_id":"QIy4O","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the \"acceptable\" way is to replace the most significant bit (if it's a "},{"type":"text","text":"1","style":{"code":true}},{"type":"text","text":"), with "},{"type":"text","text":"-","style":{"code":true}}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"e63143d6-dafe-49c4-a6ae-2e4cb17d7991","type":"message","text":"Part of the challenge is that `parse` works with any base.  I'm not sure that the `parse`/`bitstring` round trip is really valid.  For any bases other than 2 or 16 (or 2^N?) one would never expect `parse` to return a negative value for a string without a leading `-`.  Maybe what is really needed is a `parsebitstring` function?  Does this exist already?  How does one get back to Float64 from `bitstring(1.0)`?","user":"U01FKQQ7J0J","ts":"1613444260.410300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xP+v7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Part of the challenge is that "},{"type":"text","text":"parse","style":{"code":true}},{"type":"text","text":" works with any base.  I'm not sure that the "},{"type":"text","text":"parse","style":{"code":true}},{"type":"text","text":"/"},{"type":"text","text":"bitstring","style":{"code":true}},{"type":"text","text":" round trip is really valid.  For any bases other than 2 or 16 (or 2^N?) one would never expect "},{"type":"text","text":"parse","style":{"code":true}},{"type":"text","text":" to return a negative value for a string without a leading "},{"type":"text","text":"-","style":{"code":true}},{"type":"text","text":".  Maybe what is really needed is a "},{"type":"text","text":"parsebitstring","style":{"code":true}},{"type":"text","text":" function?  Does this exist already?  How does one get back to Float64 from "},{"type":"text","text":"bitstring(1.0)","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"},{"client_msg_id":"7759f89b-f8fb-4fb1-b1dc-29126b910409","type":"message","text":"`parse(Float64, bitstring(1.0))*0+1.0` :wink:","user":"U0179G7FG4F","ts":"1613444415.410500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wRaHM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"parse(Float64, bitstring(1.0))*0+1.0","style":{"code":true}},{"type":"text","text":" "},{"type":"emoji","name":"wink"}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ","reactions":[{"name":"stuck_out_tongue_winking_eye","users":["U01FKQQ7J0J"],"count":1}]},{"client_msg_id":"7d570b69-0fad-47f1-bc46-7a5ab10892f0","type":"message","text":"I guess this works...\n```reinterpret(Float64, parse(UInt64, bitstring(1.0), base=2))```","user":"U01FKQQ7J0J","ts":"1613444514.410800","team":"T68168MUP","edited":{"user":"U01FKQQ7J0J","ts":"1613444532.000000"},"blocks":[{"type":"rich_text","block_id":"BgS8j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess this works...\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"reinterpret(Float64, parse(UInt64, bitstring(1.0), base=2))"}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ","reactions":[{"name":"thumbsup_all","users":["U0179G7FG4F"],"count":1}]},{"client_msg_id":"ac7040d8-aa9c-4aed-9425-539f09cf627d","type":"message","text":"Here's a first draft of `parsebitstring`:\n```parsebitstring(::Type{T}, s::AbstractString) where T &lt;: Integer = reinterpret(T, parse(unsigned(T), s, base=2))```","user":"U01FKQQ7J0J","ts":"1613445374.411300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wrhH4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Here's a first draft of "},{"type":"text","text":"parsebitstring","style":{"code":true}},{"type":"text","text":":\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"parsebitstring(::Type{T}, s::AbstractString) where T <: Integer = reinterpret(T, parse(unsigned(T), s, base=2))"}]}]}],"thread_ts":"1613438459.403400","parent_user_id":"UH8A351DJ"}]