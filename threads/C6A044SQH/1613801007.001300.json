[{"client_msg_id":"97fc9254-129e-4bf1-bbf5-814e8dd51077","type":"message","text":"I keep getting the following:","user":"U6QGE7S86","ts":"1613801007.001300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O3TY/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I keep getting the following:"}]}]}],"thread_ts":"1613801007.001300","reply_count":2,"reply_users_count":2,"latest_reply":"1613801037.001600","reply_users":["B01J9QZ4SP8","U6QGE7S86"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1613801009.001400","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1613801007.001300","parent_user_id":"U6QGE7S86"},{"client_msg_id":"9f2f3fbc-d403-48c3-8c6f-e552c698f6f9","type":"message","text":"```julia&gt; function mysum(A)\n           acc = zero(eltype(A))\n           for i in eachindex(A)\n               mark_start()\njulia&gt; using MCAnalyzer\n\njulia&gt; function f(y::Float64)\n           x = 0.0\n           for i=1:100\n               mark_start()\njulia&gt; MCAnalyzer.analyzer[] = MCAnalyzer.llvm_mca\nllvm_mca (generic function with 1 method)\n\njulia&gt; analyze(mysum, Tuple{Vector{Float64}})\nERROR: MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var\"#hook_emit_function#45\"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(CompilerJob of function mysum(Vector{Float64}) for GPUCompiler.NativeCompilerTarget, Core.MethodInstance[MethodInstance for mysum(::Vector{Float64})], #undef)), emitted_function=GPUCompiler.var\"#hook_emitted_function#46\"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(CompilerJob of function mysum(Vector{Float64}) for GPUCompiler.NativeCompilerTarget, Core.MethodInstance[MethodInstance for mysum(::Vector{Float64})], #undef)), gnu_pubnames=false, debug_info_kind=2)\nClosest candidates are:\n  Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:1023 got unsupported keyword arguments \"static_alloc\", \"emit_function\", \"emitted_function\"\nStacktrace:\n  [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var\"#hook_emit_function#45\"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var\"#hook_emitted_function#46\"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)\n    @ Base ./error.jl:157\n  [2] compile_method_instance(job::GPUCompiler.CompilerJob, method_instance::Core.MethodInstance, world::UInt64)\n    @ GPUCompiler ~/.julia/packages/GPUCompiler/uTpNx/src/irgen.jl:119\n  [3] macro expansion\n    @ ~/.julia/packages/TimerOutputs/ZmKD7/src/TimerOutput.jl:206 [inlined]\n  [4] irgen(job::GPUCompiler.CompilerJob, method_instance::Core.MethodInstance, world::UInt64)\n    @ GPUCompiler ~/.julia/packages/GPUCompiler/uTpNx/src/irgen.jl:334\n  [5] macro expansion\n    @ ~/.julia/packages/GPUCompiler/uTpNx/src/driver.jl:94 [inlined]\n  [6] macro expansion\n    @ ~/.julia/packages/TimerOutputs/ZmKD7/src/TimerOutput.jl:206 [inlined]\n  [7] codegen(output::Symbol, job::GPUCompiler.CompilerJob; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)\n    @ GPUCompiler ~/.julia/packages/GPUCompiler/uTpNx/src/driver.jl:93\n  [8] compile(target::Symbol, job::GPUCompiler.CompilerJob; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)\n    @ GPUCompiler ~/.julia/packages/GPUCompiler/uTpNx/src/driver.jl:39\n  [9] compile\n    @ ~/.julia/packages/GPUCompiler/uTpNx/src/driver.jl:35 [inlined]\n [10] analyze(func::Any, tt::Any, march::Symbol; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n    @ MCAnalyzer ~/.julia/packages/MCAnalyzer/pwu7s/src/MCAnalyzer.jl:102\n [11] analyze\n    @ ~/.julia/packages/MCAnalyzer/pwu7s/src/MCAnalyzer.jl:101 [inlined]\n [12] top-level scope\n    @ REPL[11]:1```","user":"U6QGE7S86","ts":"1613801037.001600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4A0w3","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function mysum(A)\n           acc = zero(eltype(A))\n           for i in eachindex(A)\n               mark_start()\njulia> using MCAnalyzer\n\njulia> function f(y::Float64)\n           x = 0.0\n           for i=1:100\n               mark_start()\njulia> MCAnalyzer.analyzer[] = MCAnalyzer.llvm_mca\nllvm_mca (generic function with 1 method)\n\njulia> analyze(mysum, Tuple{Vector{Float64}})\nERROR: MethodError: no method matching Base.CodegenParams(; track_allocations=false, code_coverage=false, static_alloc=false, prefer_specsig=true, emit_function=GPUCompiler.var\"#hook_emit_function#45\"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(CompilerJob of function mysum(Vector{Float64}) for GPUCompiler.NativeCompilerTarget, Core.MethodInstance[MethodInstance for mysum(::Vector{Float64})], #undef)), emitted_function=GPUCompiler.var\"#hook_emitted_function#46\"{GPUCompiler.MethodCompileTracer}(GPUCompiler.MethodCompileTracer(CompilerJob of function mysum(Vector{Float64}) for GPUCompiler.NativeCompilerTarget, Core.MethodInstance[MethodInstance for mysum(::Vector{Float64})], #undef)), gnu_pubnames=false, debug_info_kind=2)\nClosest candidates are:\n  Base.CodegenParams(; track_allocations, code_coverage, prefer_specsig, gnu_pubnames, debug_info_kind, lookup, generic_context) at reflection.jl:1023 got unsupported keyword arguments \"static_alloc\", \"emit_function\", \"emitted_function\"\nStacktrace:\n  [1] kwerr(kw::NamedTuple{(:track_allocations, :code_coverage, :static_alloc, :prefer_specsig, :emit_function, :emitted_function, :gnu_pubnames, :debug_info_kind), Tuple{Bool, Bool, Bool, Bool, GPUCompiler.var\"#hook_emit_function#45\"{GPUCompiler.MethodCompileTracer}, GPUCompiler.var\"#hook_emitted_function#46\"{GPUCompiler.MethodCompileTracer}, Bool, Int32}}, args::Type)\n    @ Base ./error.jl:157\n  [2] compile_method_instance(job::GPUCompiler.CompilerJob, method_instance::Core.MethodInstance, world::UInt64)\n    @ GPUCompiler ~/.julia/packages/GPUCompiler/uTpNx/src/irgen.jl:119\n  [3] macro expansion\n    @ ~/.julia/packages/TimerOutputs/ZmKD7/src/TimerOutput.jl:206 [inlined]\n  [4] irgen(job::GPUCompiler.CompilerJob, method_instance::Core.MethodInstance, world::UInt64)\n    @ GPUCompiler ~/.julia/packages/GPUCompiler/uTpNx/src/irgen.jl:334\n  [5] macro expansion\n    @ ~/.julia/packages/GPUCompiler/uTpNx/src/driver.jl:94 [inlined]\n  [6] macro expansion\n    @ ~/.julia/packages/TimerOutputs/ZmKD7/src/TimerOutput.jl:206 [inlined]\n  [7] codegen(output::Symbol, job::GPUCompiler.CompilerJob; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)\n    @ GPUCompiler ~/.julia/packages/GPUCompiler/uTpNx/src/driver.jl:93\n  [8] compile(target::Symbol, job::GPUCompiler.CompilerJob; libraries::Bool, deferred_codegen::Bool, optimize::Bool, strip::Bool, validate::Bool, only_entry::Bool)\n    @ GPUCompiler ~/.julia/packages/GPUCompiler/uTpNx/src/driver.jl:39\n  [9] compile\n    @ ~/.julia/packages/GPUCompiler/uTpNx/src/driver.jl:35 [inlined]\n [10] analyze(func::Any, tt::Any, march::Symbol; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n    @ MCAnalyzer ~/.julia/packages/MCAnalyzer/pwu7s/src/MCAnalyzer.jl:102\n [11] analyze\n    @ ~/.julia/packages/MCAnalyzer/pwu7s/src/MCAnalyzer.jl:101 [inlined]\n [12] top-level scope\n    @ REPL[11]:1"}]}]}],"thread_ts":"1613801007.001300","parent_user_id":"U6QGE7S86"}]