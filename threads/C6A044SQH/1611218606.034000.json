[{"client_msg_id":"219d3cd0-da7f-4811-b062-b7428ed70eef","type":"message","text":"Hi,\n\nMaybe I am overthinking it but I am looking for a solution to the following issue. I have a parametric type\n\n```struct A{Teigvals, Teigvec}\n     eig::Vector{NamedTuple{(:eigenvals, :eigenvec, :step), Tuple{Teigvals, Teigvec, Int64}}}\nend```\nbut I would like to allow for `A.eig` to be nothing. Hence, either A.eig=nothing or it has the above type. I guess I have to write 2 parametric types","user":"U7GQE9JP9","ts":"1611218606.034000","team":"T68168MUP","edited":{"user":"U7GQE9JP9","ts":"1611218784.000000"},"blocks":[{"type":"rich_text","block_id":"Gk4az","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi,\n\nMaybe I am overthinking it but I am looking for a solution to the following issue. I have a parametric type\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct A{Teigvals, Teigvec}\n     eig::Vector{NamedTuple{(:eigenvals, :eigenvec, :step), Tuple{Teigvals, Teigvec, Int64}}}\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"but I would like to allow for "},{"type":"text","text":"A.eig","style":{"code":true}},{"type":"text","text":" to be nothing. Hence, either A.eig=nothing or it has the above type. I guess I have to write 2 parametric types"}]}]}],"thread_ts":"1611218606.034000","reply_count":3,"reply_users_count":2,"latest_reply":"1611221027.045700","reply_users":["UD0NS8PDF","U7GQE9JP9"],"subscribed":false},{"client_msg_id":"866e4579-95cc-4692-a6ea-dcb336aafbc3","type":"message","text":"I think the usual thing would be to parameterise more broadly on the container. If you need the eltype accessible, then you could do something like this (untested):\n```julia&gt; struct A2{T,ET}\n            eig::ET\n            A2(::Nothing) = new{Nothing,Nothing}(nothing)\n            A2(x::NamedTuple) = new{eltype(x.eigenvals), typeof(x)}(x)\n       end```","user":"UD0NS8PDF","ts":"1611219608.039600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AX8P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think the usual thing would be to parameterise more broadly on the container. If you need the eltype accessible, then you could do something like this (untested):\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> struct A2{T,ET}\n            eig::ET\n            A2(::Nothing) = new{Nothing,Nothing}(nothing)\n            A2(x::NamedTuple) = new{eltype(x.eigenvals), typeof(x)}(x)\n       end"}]}]}],"thread_ts":"1611218606.034000","parent_user_id":"U7GQE9JP9"},{"client_msg_id":"92e2c455-9b9b-430b-a2e6-d620da1652ad","type":"message","text":"Ah, interesting","user":"U7GQE9JP9","ts":"1611221016.045500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DyVm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, interesting"}]}]}],"thread_ts":"1611218606.034000","parent_user_id":"U7GQE9JP9"},{"client_msg_id":"8bae94e2-d652-4059-9ded-fefd095ca658","type":"message","text":"I like that","user":"U7GQE9JP9","ts":"1611221027.045700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nivE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I like that"}]}]}],"thread_ts":"1611218606.034000","parent_user_id":"U7GQE9JP9"}]