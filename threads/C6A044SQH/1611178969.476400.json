[{"client_msg_id":"44d65597-fc2b-43a1-bdff-a44a45eda817","type":"message","text":"Hi,\n\nI am styling my Julia figures for my PhD thesis and I want them to be vector graphics and to adopt the font of my document. (So far, I used to be lazy with gr() and png or pdf outputs via savefig.) Now, I tried from here: <https://docs.juliaplots.org/latest/output/>\n\nI tried the tex output from pgfplotsx but it did not work. So I thought I could produce a svg output via savefig and use `inkscape -D -z --file=image.svg --export-pdf=image.pdf --export-latex`  (which works well for any svg produced in inkscape). There is no errors but the export does not recognize the legend and axis labels as text in the output svg from gr(), i.e., the text does not adapt to the latex document.\n\nI tested all the backends listed for svg output in the docs above:\nsvg\t- gr, inspectdr, pgfplotsx, plotly, plotlyjs, pyplot\n\nMost backends did the same thing as gr() that the text was not recognized after the inkscape export. The only one that worked was plotlyjs() but the legend positioning was a bit buggy. Good news is that it can be repositioned in latex in the pdf_tex though :-).\n\nSo, I found a way, but I just wanted to know if anyone knows a better way (since I have a lot of figures)? I did not check the source or docs in more detail so far because I haven't touched Julia code since October and have no clue about svg etc. anyway. I was hoping someone might know here.\n\nI will most probably hand in this weekend (preliminary version) but would be nice to know anyway for the final version latest.\nI am in robot mode between parallel processing and confusion (just as a warning).\n\nLia","user":"UPXF24DQV","ts":"1611178969.476400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hMff5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi,\n\nI am styling my Julia figures for my PhD thesis and I want them to be vector graphics and to adopt the font of my document. (So far, I used to be lazy with gr() and png or pdf outputs via savefig.) Now, I tried from here: "},{"type":"link","url":"https://docs.juliaplots.org/latest/output/"},{"type":"text","text":"\n\nI tried the tex output from pgfplotsx but it did not work. So I thought I could produce a svg output via savefig and use "},{"type":"text","text":"inkscape -D -z --file=image.svg --export-pdf=image.pdf --export-latex","style":{"code":true}},{"type":"text","text":"  (which works well for any svg produced in inkscape). There is no errors but the export does not recognize the legend and axis labels as text in the output svg from gr(), i.e., the text does not adapt to the latex document.\n\nI tested all the backends listed for svg output in the docs above:\nsvg\t- gr, inspectdr, pgfplotsx, plotly, plotlyjs, pyplot\n\nMost backends did the same thing as gr() that the text was not recognized after the inkscape export. The only one that worked was plotlyjs() but the legend positioning was a bit buggy. Good news is that it can be repositioned in latex in the pdf_tex though :-).\n\nSo, I found a way, but I just wanted to know if anyone knows a better way (since I have a lot of figures)? I did not check the source or docs in more detail so far because I haven't touched Julia code since October and have no clue about svg etc. anyway. I was hoping someone might know here.\n\nI will most probably hand in this weekend (preliminary version) but would be nice to know anyway for the final version latest.\nI am in robot mode between parallel processing and confusion (just as a warning).\n\nLia"}]}]}],"thread_ts":"1611178969.476400","reply_count":4,"reply_users_count":2,"latest_reply":"1611184474.482200","reply_users":["UD0NS8PDF","U8HHPBKQR"],"subscribed":false},{"client_msg_id":"2de61ac4-3978-4841-be75-04deac2dc1e5","type":"message","text":"The solution is to put your figures in a sans-serif font and the text in serif, and claim you wanted the contrast :slightly_smiling_face:","user":"UD0NS8PDF","ts":"1611180585.480500","team":"T68168MUP","edited":{"user":"UD0NS8PDF","ts":"1611182115.000000"},"blocks":[{"type":"rich_text","block_id":"cwnRo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The solution is to put your figures in a sans-serif font and the text in serif, and claim you wanted the contrast "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1611178969.476400","parent_user_id":"UPXF24DQV"},{"client_msg_id":"eea81c8b-85c3-42d6-8b9d-dd8e5b764dcb","type":"message","text":"use pgfplotsx with a custom header to use your font","user":"U8HHPBKQR","ts":"1611184318.481800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=VD5D","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"use pgfplotsx with a custom header to use your font"}]}]}],"thread_ts":"1611178969.476400","parent_user_id":"UPXF24DQV"},{"client_msg_id":"281e2d6f-5aa6-4dcb-b0be-f931ed8c8e65","type":"message","text":"push!(Plots.PGFPlotsX.CUSTOM_PREAMBLE, raw\"\\your_font_info_goes_here\")","user":"U8HHPBKQR","ts":"1611184441.482000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vhll","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"push!(Plots.PGFPlotsX.CUSTOM_PREAMBLE, raw\"\\your_font_info_goes_here\")"}]}]}],"thread_ts":"1611178969.476400","parent_user_id":"UPXF24DQV"},{"client_msg_id":"2595170d-2e68-42ed-9654-8e673dc689ff","type":"message","text":"and use xelatex to compile","user":"U8HHPBKQR","ts":"1611184474.482200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"17UV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and use xelatex to compile"}]}]}],"thread_ts":"1611178969.476400","parent_user_id":"UPXF24DQV"}]