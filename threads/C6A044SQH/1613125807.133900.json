[{"client_msg_id":"8ea94a8b-1b05-463b-a4cf-68f00f40a796","type":"message","text":"Hi, Julia deals with *Nothing* *type* in such way that an object initialized with *nothing* does/returns nothing, in other words, the *Assignment operator =* can deal with *Nothing type*. That feature and the Nothing type evaluation isnothing() are useful to develop algorithm. In order to fully take advantage of Nothing type could you consider *extended Nothing type to other operators*? For examples:\n1/ a = 1 + nothing should return 1\n2/ a=nothing\n    a[:,:] or view() should do nothing\nAm I the one how need that feature?\nBest.","user":"U01NM5B42AU","ts":"1613125807.133900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lIB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi, Julia deals with "},{"type":"text","text":"Nothing","style":{"bold":true}},{"type":"text","text":" "},{"type":"text","text":"type","style":{"bold":true}},{"type":"text","text":" in such way that an object initialized with "},{"type":"text","text":"nothing","style":{"bold":true}},{"type":"text","text":" does/returns nothing, in other words, the "},{"type":"text","text":"Assignment operator =","style":{"bold":true}},{"type":"text","text":" can deal with "},{"type":"text","text":"Nothing type","style":{"bold":true}},{"type":"text","text":". That feature and the Nothing type evaluation isnothing() are useful to develop algorithm. In order to fully take advantage of Nothing type could you consider "},{"type":"text","text":"extended Nothing type to other operators","style":{"bold":true}},{"type":"text","text":"? For examples:\n1/ a = 1 + nothing should return 1\n2/ a=nothing\n    a[:,:] or view() should do nothing\nAm I the one how need that feature?\nBest."}]}]}],"thread_ts":"1613125807.133900","reply_count":9,"reply_users_count":5,"latest_reply":"1613127108.135900","reply_users":["B01J9QZ4SP8","U01NM5B42AU","UH8A351DJ","UB197FRCL","UPSSPPBFV"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1613125809.134000","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1613125807.133900","parent_user_id":"U01NM5B42AU"},{"client_msg_id":"f2833cdf-72db-43af-9f54-6646eb5994aa","type":"message","text":":bridge:","user":"U01NM5B42AU","ts":"1613125862.134200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2wS5t","elements":[{"type":"rich_text_section","elements":[{"type":"emoji","name":"bridge"}]}]}],"thread_ts":"1613125807.133900","parent_user_id":"U01NM5B42AU"},{"client_msg_id":"3ecc8a84-aa52-402c-bdd7-c73ad0742196","type":"message","text":"nothing is not 0 (the identity of addition operator)\n\nin float number world, NaN have some of the behavior you may want","user":"UH8A351DJ","ts":"1613126471.134400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MiRI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"nothing is not 0 (the identity of addition operator)\n\nin float number world, NaN have some of the behavior you may want"}]}]}],"thread_ts":"1613125807.133900","parent_user_id":"U01NM5B42AU"},{"client_msg_id":"c757db08-109d-4335-9702-572e5a5fcde7","type":"message","text":"missing also have some behavior you want)","user":"UH8A351DJ","ts":"1613126533.134600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Z36Z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"missing also have some behavior you want)"}]}]}],"thread_ts":"1613125807.133900","parent_user_id":"U01NM5B42AU"},{"client_msg_id":"a8e60633-2aba-4d26-b085-1855bd5a4878","type":"message","text":"`a = 1 + NaN` will not give `1`  nor will `a[:] .= NaN` do nothing though, same with `missing`. But I agree with the 1st sentence:\n&gt; `nothing` is not `0` (the identity of addition operator)","user":"UB197FRCL","ts":"1613126704.134800","team":"T68168MUP","edited":{"user":"UB197FRCL","ts":"1613126720.000000"},"blocks":[{"type":"rich_text","block_id":"ePf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"a = 1 + NaN","style":{"code":true}},{"type":"text","text":" will not give "},{"type":"text","text":"1","style":{"code":true}},{"type":"text","text":"  nor will "},{"type":"text","text":"a[:] .= NaN","style":{"code":true}},{"type":"text","text":" do nothing though, same with "},{"type":"text","text":"missing","style":{"code":true}},{"type":"text","text":". But I agree with the 1st sentence:\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"nothing","style":{"code":true}},{"type":"text","text":" is not "},{"type":"text","text":"0","style":{"code":true}},{"type":"text","text":" (the identity of addition operator)"}]}]}],"thread_ts":"1613125807.133900","parent_user_id":"U01NM5B42AU"},{"client_msg_id":"d59f06cf-d7e5-4815-9426-dc7484541e73","type":"message","text":"<@U01NM5B42AU> You're supposed to add the bridge emoticon as a _reaction_ to your original post, not as a message in the thread.","user":"UPSSPPBFV","ts":"1613126722.135100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5RHi","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01NM5B42AU"},{"type":"text","text":" You're supposed to add the bridge emoticon as a "},{"type":"text","text":"reaction","style":{"italic":true}},{"type":"text","text":" to your original post, not as a message in the thread."}]}]}],"thread_ts":"1613125807.133900","parent_user_id":"U01NM5B42AU"},{"client_msg_id":"e43dc49a-3e4d-4911-bf17-921f1b7f488d","type":"message","text":"And I agree with everyone else. `nothing` is not 0 and should not behave like it. Neither is `NaN` nor `missing`. They all have specific semantics and there are very good reasons why they behave the way they do.","user":"UPSSPPBFV","ts":"1613126795.135300","team":"T68168MUP","edited":{"user":"UPSSPPBFV","ts":"1613126808.000000"},"blocks":[{"type":"rich_text","block_id":"iDKd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And I agree with everyone else. "},{"type":"text","text":"nothing","style":{"code":true}},{"type":"text","text":" is not 0 and should not behave like it. Neither is "},{"type":"text","text":"NaN","style":{"code":true}},{"type":"text","text":" nor "},{"type":"text","text":"missing","style":{"code":true}},{"type":"text","text":". They all have specific semantics and there are very good reasons why they behave the way they do."}]}]}],"thread_ts":"1613125807.133900","parent_user_id":"U01NM5B42AU"},{"client_msg_id":"87c57419-991c-45ed-ac5e-59e4647a51ec","type":"message","text":"You could probably create your own singleton type that behaves like you want though\n```julia&gt; struct DoNothing end\n\njulia&gt; const donothing = DoNothing()\nDoNothing()\n\njulia&gt; Base.:+(x, ::DoNothing) = x\n\njulia&gt; a = 1 + donothing\n1```","user":"UB197FRCL","ts":"1613127009.135600","team":"T68168MUP","edited":{"user":"UB197FRCL","ts":"1613127016.000000"},"blocks":[{"type":"rich_text","block_id":"WDPX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You could probably create your own singleton type that behaves like you want though\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> struct DoNothing end\n\njulia> const donothing = DoNothing()\nDoNothing()\n\njulia> Base.:+(x, ::DoNothing) = x\n\njulia> a = 1 + donothing\n1"}]}]}],"thread_ts":"1613125807.133900","parent_user_id":"U01NM5B42AU"},{"client_msg_id":"46168ec2-a18e-4115-a8b3-4a20ae7c437d","type":"message","text":"But that would be a lot of work for something you might not actually need? I guess maybe this is a case of <https://en.wikipedia.org/wiki/XY_problem|XY problem>?","user":"UB197FRCL","ts":"1613127108.135900","team":"T68168MUP","attachments":[{"title":"XY problem","title_link":"https://en.wikipedia.org/wiki/XY_problem","from_url":"https://en.wikipedia.org/wiki/XY_problem","author_name":"Wikipedia","author_link":"https://en.wikipedia.org/","text":"The XY problem is a communication problem encountered in help desk and similar situations in which the person asking for help obscures the real issue, X, because instead of asking directly about issue X, they ask how to solve a secondary issue, Y, which they believe will allow them to resolve issue X. \nHowever, resolving issue Y often does not resolve issue X, or is a poor way to resolve it, and the obscuring of the real issue and the introduction of the potentially strange secondary issue can lead to the person trying to help having unnecessary difficulties in communication and/or offering poor solutions.\nThe XY problem is commonly encountered in technical support or customer service environments where the end user has attempted to solve the problem on their own, and misunderstands the real nature of the problem, believing that their real problem X has already been solved, except for some small detail Y in their solution. The inability of the support personnel to resolve their real problem or to understand the nature of their inquiry may cause the end user to become frustrated. The situation can make itself clear if the end user asks about some seemingly inane detail which is disconnected from any useful end goal. The solution for the support personnel is to ask probing questions as to why the information is needed, in order to identify the root problem and redirect the end user away from an unproductive path of inquiry.","fallback":"wikipedia: XY problem","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png","id":1,"original_url":"https://en.wikipedia.org/wiki/XY_problem"}],"blocks":[{"type":"rich_text","block_id":"ZiPKu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But that would be a lot of work for something you might not actually need? I guess maybe this is a case of "},{"type":"link","url":"https://en.wikipedia.org/wiki/XY_problem","text":"XY problem"},{"type":"text","text":"?"}]}]}],"thread_ts":"1613125807.133900","parent_user_id":"U01NM5B42AU"}]