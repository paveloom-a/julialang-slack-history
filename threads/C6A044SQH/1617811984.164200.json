[{"client_msg_id":"8f11f0e9-9a45-48f2-b198-65fd41ce36d9","type":"message","text":"just `Vector{Number}`","user":"U6BNE7LTZ","ts":"1617811984.164200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ukn/V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"just "},{"type":"text","text":"Vector{Number}","style":{"code":true}}]}]}],"thread_ts":"1617811984.164200","reply_count":4,"reply_users_count":2,"latest_reply":"1617812807.170400","reply_users":["U01SVRHQNCX","U6BNE7LTZ"],"is_locked":false,"subscribed":false},{"client_msg_id":"d6ea4ef3-9e07-4be3-bcda-d4ca7b579260","type":"message","text":"hmm. so I have my abstract type, and then have a bunch of different structs that are subtypes of that abstract type. are you saying it is impossible to a vector that contains different subtypes that has the type `Vector{AbstractTypeFoo}`? i.e i want to have a covariant type","user":"U01SVRHQNCX","ts":"1617812455.167000","team":"T68168MUP","edited":{"user":"U01SVRHQNCX","ts":"1617812483.000000"},"blocks":[{"type":"rich_text","block_id":"FeW4T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmm. so I have my abstract type, and then have a bunch of different structs that are subtypes of that abstract type. are you saying it is impossible to a vector that contains different subtypes that has the type "},{"type":"text","text":"Vector{AbstractTypeFoo}","style":{"code":true}},{"type":"text","text":"? i.e i want to have a covariant type"}]}]}],"thread_ts":"1617811984.164200","parent_user_id":"U6BNE7LTZ"},{"client_msg_id":"3a1edeaa-283d-4ef9-9766-11dc79038e48","type":"message","text":"so the important thing is that you can only instantiate concrete types","user":"U6BNE7LTZ","ts":"1617812754.169600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sFte","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so the important thing is that you can only instantiate concrete types"}]}]}],"thread_ts":"1617811984.164200","parent_user_id":"U6BNE7LTZ"},{"client_msg_id":"431ce7e4-0487-4943-b1cc-4c03db3c83b5","type":"message","text":"`Vector{&lt;:Foo}` isn't a concrete type, it's the collection of all `Vector`s with an element type that's a subtype of `Foo`","user":"U6BNE7LTZ","ts":"1617812787.170000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ti/z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Vector{<:Foo}","style":{"code":true}},{"type":"text","text":" isn't a concrete type, it's the collection of all `Vector`s with an element type that's a subtype of "},{"type":"text","text":"Foo","style":{"code":true}}]}]}],"thread_ts":"1617811984.164200","parent_user_id":"U6BNE7LTZ"},{"client_msg_id":"7df7164b-a1ba-422f-a242-6f947b54be36","type":"message","text":"but a `Vector{Foo}` can hold elements of every subtype of `Foo`","user":"U6BNE7LTZ","ts":"1617812807.170400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QDjJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but a "},{"type":"text","text":"Vector{Foo}","style":{"code":true}},{"type":"text","text":" can hold elements of every subtype of "},{"type":"text","text":"Foo","style":{"code":true}}]}]}],"thread_ts":"1617811984.164200","parent_user_id":"U6BNE7LTZ"}]