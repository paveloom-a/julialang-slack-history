[{"client_msg_id":"3e8b7f70-e60d-49d4-ad8b-6f3ebb8b8403","type":"message","text":"How would you define a set of functions that take a common object but \"read\" it in different formats, so far I have the following:\n\n```struct Doc; end\n\nfunction read_string(doc::Doc)::String; ... end\n\nfunction read_xml(doc::Doc)::EzXML.Document; ... end```\nHowever it seem like I could simplify by specifying a second argument that is a type, like `::String` or `::EzXML.Document` similar to how `read` works, for example:\n\n```read(doc, String) # Reads the contents as a string\n\nread(doc, EzXML.Document) # Reads contents as an EzXML.Document```\nHaving a bit of trouble figuring out the correct declaration and implementation of such function, the second argument would be a \"type\" would that mean that I have to internally in the function implementation do some sort of type switch on the 2nd argument?\n\nI tried the following but julia seems unable to resolve the functions when calling them:\n\n```f(a, ::String) = println(\"String!\", a)\nf(a, ::Int) = println(\"Int!\", a)```\noutput:\n\n```f(10, Int64)\nERROR: MethodError: no method matching f(::Int64, ::Type{Int64})\nClosest candidates are:\n  f(::Any) at REPL[4]:1\n  f(::Any, ::String) at REPL[15]:1\n  f(::Any, ::Int64) at REPL[21]:1\nStacktrace:\n [1] top-level scope at REPL[22]:1```\nI'm also investigating the <https://github.com/JuliaLang/julia/blob/f9720dc2ebd6cd9e3086365f281e62506444ef37/base/io.jl#L154|read> implementation but _it seems_ like its a built-in of sorts.\n\nThanks in advance!","user":"U01QETXBR4J","ts":"1617161543.064800","team":"T68168MUP","edited":{"user":"U01QETXBR4J","ts":"1617162009.000000"},"blocks":[{"type":"rich_text","block_id":"vOUlV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How would you define a set of functions that take a common object but \"read\" it in different formats, so far I have the following:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct Doc; end\n\nfunction read_string(doc::Doc)::String; ... end\n\nfunction read_xml(doc::Doc)::EzXML.Document; ... end"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nHowever it seem like I could simplify by specifying a second argument that is a type, like "},{"type":"text","text":"::String","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"::EzXML.Document","style":{"code":true}},{"type":"text","text":" similar to how "},{"type":"text","text":"read","style":{"code":true}},{"type":"text","text":" works, for example:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"read(doc, String) # Reads the contents as a string\n\nread(doc, EzXML.Document) # Reads contents as an EzXML.Document"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nHaving a bit of trouble figuring out the correct declaration and implementation of such function, the second argument would be a \"type\" would that mean that I have to internally in the function implementation do some sort of type switch on the 2nd argument?\n\nI tried the following but julia seems unable to resolve the functions when calling them:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"f(a, ::String) = println(\"String!\", a)\nf(a, ::Int) = println(\"Int!\", a)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"output:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"f(10, Int64)\nERROR: MethodError: no method matching f(::Int64, ::Type{Int64})\nClosest candidates are:\n  f(::Any) at REPL[4]:1\n  f(::Any, ::String) at REPL[15]:1\n  f(::Any, ::Int64) at REPL[21]:1\nStacktrace:\n [1] top-level scope at REPL[22]:1"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nI'm also investigating the "},{"type":"link","url":"https://github.com/JuliaLang/julia/blob/f9720dc2ebd6cd9e3086365f281e62506444ef37/base/io.jl#L154","text":"read"},{"type":"text","text":" implementation but "},{"type":"text","text":"it seems","style":{"italic":true}},{"type":"text","text":" like its a built-in of sorts.\n\nThanks in advance!"}]}]}],"thread_ts":"1617161543.064800","reply_count":14,"reply_users_count":2,"latest_reply":"1617163735.070800","reply_users":["U01HD5VFXJM","U01QETXBR4J"],"is_locked":false,"subscribed":false},{"client_msg_id":"ad6f0dd3-c608-44ca-8482-09c50d55a419","type":"message","text":"Try this:\n```f(a, ::Type{String}) = println(\"String!\", a)\n\nf(a, ::Type{Int}) = println(\"Int!\", a)```","user":"U01HD5VFXJM","ts":"1617162073.065200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6yJ+j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Try this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"f(a, ::Type{String}) = println(\"String!\", a)\n\nf(a, ::Type{Int}) = println(\"Int!\", a)"}]}]}],"thread_ts":"1617161543.064800","parent_user_id":"U01QETXBR4J","reactions":[{"name":"thumbsup_all","users":["U01QETXBR4J"],"count":1}]},{"client_msg_id":"f98d22fb-d8ce-49bb-a969-eb9d63ae1ec1","type":"message","text":"(The error message actually hints that those are what you need to define!) :slightly_smiling_face:","user":"U01HD5VFXJM","ts":"1617162115.065400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9bcvd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(The error message actually hints that those are what you need to define!) "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1617161543.064800","parent_user_id":"U01QETXBR4J"},{"client_msg_id":"29d999d7-e0f9-43fb-9543-92ca15dde62b","type":"message","text":"Thank you for the reply! dang, so close, getting used to interpreting the errors.\n\nInterestingly, if I call it like this `f(10, 0)` it does find the implementation, which makes sense given the `::Int` vs `::Type{Int}` error message","user":"U01QETXBR4J","ts":"1617162333.065700","team":"T68168MUP","edited":{"user":"U01QETXBR4J","ts":"1617162350.000000"},"blocks":[{"type":"rich_text","block_id":"bJd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thank you for the reply! dang, so close, getting used to interpreting the errors.\n\nInterestingly, if I call it like this "},{"type":"text","text":"f(10, 0)","style":{"code":true}},{"type":"text","text":" it does find the implementation, which makes sense given the "},{"type":"text","text":"::Int","style":{"code":true}},{"type":"text","text":" vs "},{"type":"text","text":"::Type{Int}","style":{"code":true}},{"type":"text","text":" error message"}]}]}],"thread_ts":"1617161543.064800","parent_user_id":"U01QETXBR4J"},{"client_msg_id":"a587a131-e155-40a2-85dd-dbb860e2dd60","type":"message","text":"Right! `::String` is just saying it is dispatching on a string, but discards the value because you didn't give it an argument name.\n\nIt takes a bit to get used to, I'm fairly new myself.","user":"U01HD5VFXJM","ts":"1617162456.066100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yp3E","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Right! "},{"type":"text","text":"::String","style":{"code":true}},{"type":"text","text":" is just saying it is dispatching on a string, but discards the value because you didn't give it an argument name.\n\nIt takes a bit to get used to, I'm fairly new myself."}]}]}],"thread_ts":"1617161543.064800","parent_user_id":"U01QETXBR4J","reactions":[{"name":"100","users":["U01QETXBR4J"],"count":1}]},{"client_msg_id":"7f82d779-da77-4594-a21b-2697db402e3c","type":"message","text":"Sorry to piggyback on this but would it be possible to do something similar using symbols?, for example:\n\n```f(a, ::Symbol{:x}) = println(\"X!, a)\nf(a, ::Symbol{:y}) = println(\"Y!, a)```","user":"U01QETXBR4J","ts":"1617162504.066300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZereY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sorry to piggyback on this but would it be possible to do something similar using symbols?, for example:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"f(a, ::Symbol{:x}) = println(\"X!, a)\nf(a, ::Symbol{:y}) = println(\"Y!, a)"}]}]}],"thread_ts":"1617161543.064800","parent_user_id":"U01QETXBR4J"},{"client_msg_id":"45dde16d-e986-4980-be13-74e067403bd0","type":"message","text":"(also yes to you're previous message!)","user":"U01QETXBR4J","ts":"1617162516.066500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"B0CY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(also yes to you're previous message!)"}]}]}],"thread_ts":"1617161543.064800","parent_user_id":"U01QETXBR4J"},{"client_msg_id":"35e21e13-950f-4877-8874-a166edcc803b","type":"message","text":"Hmm... Sort of. If `x` is a distinct type from `y` (like a function), you can do something like this.\n```f(a, ::typeof(x)) = a + 1\nf(a, ::typeof(y)) = a + 2```\n","user":"U01HD5VFXJM","ts":"1617163049.068200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5FWAJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmm... Sort of. If "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" is a distinct type from "},{"type":"text","text":"y","style":{"code":true}},{"type":"text","text":" (like a function), you can do something like this.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"f(a, ::typeof(x)) = a + 1\nf(a, ::typeof(y)) = a + 2"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1617161543.064800","parent_user_id":"U01QETXBR4J","reactions":[{"name":"thumbsup_all","users":["U01QETXBR4J"],"count":1}]},{"client_msg_id":"7a14bb58-032c-4cae-89dd-2855f82933c4","type":"message","text":"`reinterpret` uses this.","user":"U01HD5VFXJM","ts":"1617163100.068400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Bgo0o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"reinterpret","style":{"code":true}},{"type":"text","text":" uses this."}]}]}],"thread_ts":"1617161543.064800","parent_user_id":"U01QETXBR4J"},{"client_msg_id":"29ea2611-12dc-49f4-b872-d175b1a5cd12","type":"message","text":"But it's not the symbol per se.","user":"U01HD5VFXJM","ts":"1617163127.068600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lx/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But it's not the symbol per se."}]}]}],"thread_ts":"1617161543.064800","parent_user_id":"U01QETXBR4J"},{"client_msg_id":"9d95774a-7278-42c0-b262-c6d32f2dff19","type":"message","text":"You can use `Val{}` to dispatch on values","user":"U01HD5VFXJM","ts":"1617163201.068800","team":"T68168MUP","edited":{"user":"U01HD5VFXJM","ts":"1617163212.000000"},"blocks":[{"type":"rich_text","block_id":"5Of","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can use "},{"type":"text","text":"Val{}","style":{"code":true}},{"type":"text","text":" to dispatch on values"}]}]}],"thread_ts":"1617161543.064800","parent_user_id":"U01QETXBR4J","reactions":[{"name":"today-i-learned","users":["U0138UTB7A4"],"count":1}]},{"client_msg_id":"6cb4768a-9fd0-4a4f-b4be-821393f166a2","type":"message","text":"Thank you!","user":"U01QETXBR4J","ts":"1617163228.069100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LxI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thank you!"}]}]}],"thread_ts":"1617161543.064800","parent_user_id":"U01QETXBR4J"},{"client_msg_id":"21f3e9b9-ec9d-4397-88de-a302c612505e","type":"message","text":"The only trick with `::Val{:x}` is that you'd have to call it with `Val(:x)`","user":"U01HD5VFXJM","ts":"1617163302.069500","team":"T68168MUP","edited":{"user":"U01HD5VFXJM","ts":"1617163329.000000"},"blocks":[{"type":"rich_text","block_id":"TCsqT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The only trick with "},{"type":"text","text":"::Val{:x}","style":{"code":true}},{"type":"text","text":" is that you'd have to call it with "},{"type":"text","text":"Val(:x)","style":{"code":true}}]}]}],"thread_ts":"1617161543.064800","parent_user_id":"U01QETXBR4J"},{"client_msg_id":"7fd0259a-b60c-4f5e-9c8e-0250b64a9729","type":"message","text":"Yeah, not as ergonomic as I'd like to, I guess an alternative could be abstract types:\n\n```abstract type X end\n\nf(a, ::Type{X}) = println(\"X\", a)\n\nf(42, X)```\n","user":"U01QETXBR4J","ts":"1617163669.070600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Aqy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, not as ergonomic as I'd like to, I guess an alternative could be abstract types:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"abstract type X end\n\nf(a, ::Type{X}) = println(\"X\", a)\n\nf(42, X)"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1617161543.064800","parent_user_id":"U01QETXBR4J"},{"client_msg_id":"27c0e8e9-3c00-44b9-aff3-fd8d364f095a","type":"message","text":"We'll see if one triumphs the other as I write more code. But I learned a lot thank you!","user":"U01QETXBR4J","ts":"1617163735.070800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5zy7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We'll see if one triumphs the other as I write more code. But I learned a lot thank you!"}]}]}],"thread_ts":"1617161543.064800","parent_user_id":"U01QETXBR4J"}]