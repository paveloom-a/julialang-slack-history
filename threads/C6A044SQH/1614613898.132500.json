[{"client_msg_id":"f2e516f2-b771-4f10-bfd6-9ff0dffc7339","type":"message","text":"Hi all! Is there a good way to store instances of structs of type defined by a package/the user? For example, I want to keep the results from a regression that was run from the `FixedEffectModels.jl` package (the results are of type `FixedEffectModel`) and reuse them in another Julia script. I tried with `JLD.jl` and the `save`/`load` commands without much success (saving seems to work, loading does not)...","user":"U01PWULG2JU","ts":"1614613898.132500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Xf2r","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi all! Is there a good way to store instances of structs of type defined by a package/the user? For example, I want to keep the results from a regression that was run from the "},{"type":"text","text":"FixedEffectModels.jl","style":{"code":true}},{"type":"text","text":" package (the results are of type "},{"type":"text","text":"FixedEffectModel","style":{"code":true}},{"type":"text","text":") and reuse them in another Julia script. I tried with "},{"type":"text","text":"JLD.jl","style":{"code":true}},{"type":"text","text":" and the "},{"type":"text","text":"save","style":{"code":true}},{"type":"text","text":"/"},{"type":"text","text":"load","style":{"code":true}},{"type":"text","text":" commands without much success (saving seems to work, loading does not)..."}]}]}],"thread_ts":"1614613898.132500","reply_count":4,"reply_users_count":3,"latest_reply":"1614624508.137800","reply_users":["B01J9QZ4SP8","U01PWULG2JU","U019K6Q9N15"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1614613900.132600","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1614613898.132500","parent_user_id":"U01PWULG2JU"},{"client_msg_id":"0487a201-e73d-404f-a77c-37394bcca5e3","type":"message","text":"Admittedly the issues I am having with `JLD` are specific to storing `FixedEffectModel` type variables. I can always extract the variables I need then store them but was wondering if there is a better way.","user":"U01PWULG2JU","ts":"1614615635.132900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"q4ODh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Admittedly the issues I am having with "},{"type":"text","text":"JLD","style":{"code":true}},{"type":"text","text":" are specific to storing "},{"type":"text","text":"FixedEffectModel","style":{"code":true}},{"type":"text","text":" type variables. I can always extract the variables I need then store them but was wondering if there is a better way."}]}]}],"thread_ts":"1614613898.132500","parent_user_id":"U01PWULG2JU"},{"client_msg_id":"1dc0f166-a245-4dc1-8006-a22fec633942","type":"message","text":"Hmmm, I think `JLD.jl` has been deprecated in favor of `JLD2.jl` .  Another option, if your structs are simple and don't contain things like refs or lambdas, is just to use `Base.serialize` and `Base.deserialize` .","user":"U019K6Q9N15","ts":"1614623977.137300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"n=JL5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmmm, I think "},{"type":"text","text":"JLD.jl","style":{"code":true}},{"type":"text","text":" has been deprecated in favor of "},{"type":"text","text":"JLD2.jl","style":{"code":true}},{"type":"text","text":" .  Another option, if your structs are simple and don't contain things like refs or lambdas, is just to use "},{"type":"text","text":"Base.serialize","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"Base.deserialize","style":{"code":true}},{"type":"text","text":" ."}]}]}],"thread_ts":"1614613898.132500","parent_user_id":"U01PWULG2JU","reactions":[{"name":"thumbsup_all","users":["U01PWULG2JU"],"count":1}]},{"client_msg_id":"8f07f2fa-48ad-4821-a5cc-05224aea1265","type":"message","text":"For reference, here is the definition for a `FixedEffectModel`\n```\nstruct FixedEffectModel &lt;: RegressionModel\n    coef::Vector{Float64}   # Vector of coefficients\n    vcov::Matrix{Float64}   # Covariance matrix\n    vcov_type::CovarianceEstimator\n    nclusters::Union{NamedTuple, Nothing}\n\n    esample::BitVector      # Is the row of the original dataframe part of the estimation sample?\n    residuals::Union{AbstractVector, Nothing}\n    fe::DataFrame\n\n    coefnames::Vector       # Name of coefficients\n    yname::Union{String, Symbol} # Name of dependent variable\n    formula::FormulaTerm        # Original formula\n    formula_predict::FormulaTerm\n    contrasts::Dict\n\n    nobs::Int64             # Number of observations\n    dof_residual::Int64      # nobs - degrees of freedoms\n\n    rss::Float64            # Sum of squared residuals\n    tss::Float64            # Total sum of squares\n    r2::Float64             # R squared\n    adjr2::Float64          # R squared adjusted\n\n    F::Float64              # F statistics\n    p::Float64              # p value for the F statistics\n\n    # for FE\n    iterations::Union{Int, Nothing}         # Number of iterations\n    converged::Union{Bool, Nothing}         # Has the demeaning algorithm converged?\n    r2_within::Union{Float64, Nothing}      # within r2 (with fixed effect\n\n    # for IV\n    F_kp::Union{Float64, Nothing}           # First Stage F statistics KP\n    p_kp::Union{Float64, Nothing}           # First Stage p value KP\nend ```","user":"U019K6Q9N15","ts":"1614624508.137800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"feE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For reference, here is the definition for a "},{"type":"text","text":"FixedEffectModel","style":{"code":true}},{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"\nstruct FixedEffectModel <: RegressionModel\n    coef::Vector{Float64}   # Vector of coefficients\n    vcov::Matrix{Float64}   # Covariance matrix\n    vcov_type::CovarianceEstimator\n    nclusters::Union{NamedTuple, Nothing}\n\n    esample::BitVector      # Is the row of the original dataframe part of the estimation sample?\n    residuals::Union{AbstractVector, Nothing}\n    fe::DataFrame\n\n    coefnames::Vector       # Name of coefficients\n    yname::Union{String, Symbol} # Name of dependent variable\n    formula::FormulaTerm        # Original formula\n    formula_predict::FormulaTerm\n    contrasts::Dict\n\n    nobs::Int64             # Number of observations\n    dof_residual::Int64      # nobs - degrees of freedoms\n\n    rss::Float64            # Sum of squared residuals\n    tss::Float64            # Total sum of squares\n    r2::Float64             # R squared\n    adjr2::Float64          # R squared adjusted\n\n    F::Float64              # F statistics\n    p::Float64              # p value for the F statistics\n\n    # for FE\n    iterations::Union{Int, Nothing}         # Number of iterations\n    converged::Union{Bool, Nothing}         # Has the demeaning algorithm converged?\n    r2_within::Union{Float64, Nothing}      # within r2 (with fixed effect\n\n    # for IV\n    F_kp::Union{Float64, Nothing}           # First Stage F statistics KP\n    p_kp::Union{Float64, Nothing}           # First Stage p value KP\nend "}]}]}],"thread_ts":"1614613898.132500","parent_user_id":"U01PWULG2JU"}]