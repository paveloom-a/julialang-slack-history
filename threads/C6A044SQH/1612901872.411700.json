[{"client_msg_id":"c9e919f3-e342-4dc4-bed6-88aa6a080ac4","type":"message","text":"I am wondering whether I misunderstood something about Abstract types in Julia. Should I avoid them in function definitions such as `function do_something(A::AbstractMatrix{T}) where T`  or is there no issue here ? How would that affect performance? I was wondering as I am trying to implement some memory-efficient algorithms and it seems to me that using `AbstractMatrix` doesn't let the compiler specialize the code enough to be efficient. Or does the compiler actually generate an instance for each derived type?","user":"U01L0RJC6FM","ts":"1612901872.411700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+SEI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am wondering whether I misunderstood something about Abstract types in Julia. Should I avoid them in function definitions such as "},{"type":"text","text":"function do_something(A::AbstractMatrix{T}) where T","style":{"code":true}},{"type":"text","text":"  or is there no issue here ? How would that affect performance? I was wondering as I am trying to implement some memory-efficient algorithms and it seems to me that using "},{"type":"text","text":"AbstractMatrix","style":{"code":true}},{"type":"text","text":" doesn't let the compiler specialize the code enough to be efficient. Or does the compiler actually generate an instance for each derived type?"}]}]}],"thread_ts":"1612901872.411700","reply_count":9,"reply_users_count":4,"latest_reply":"1612903310.414100","reply_users":["B01J9QZ4SP8","U019K6Q9N15","U0179G7FG4F","UH24GRBLL"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1612901874.411800","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1612901872.411700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"9b7211a7-d940-4a33-8b8e-3826acda1ae3","type":"message","text":"The compiler will generate a specialized method for each derived type that it can determine will reach the method when you run the app. That way it doesn't waste time doing it for types that will never touch the codepaths.","user":"U019K6Q9N15","ts":"1612902421.412000","team":"T68168MUP","edited":{"user":"U019K6Q9N15","ts":"1612902525.000000"},"blocks":[{"type":"rich_text","block_id":"eaS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The compiler will generate a specialized method for each derived type that it can determine will reach the method when you run the app. That way it doesn't waste time doing it for types that will never touch the codepaths."}]}]}],"thread_ts":"1612901872.411700","parent_user_id":"U01L0RJC6FM","reactions":[{"name":"thumbsup_all","users":["U0179G7FG4F"],"count":1}]},{"client_msg_id":"259bb61c-b77f-49c7-b5ed-af8161826d53","type":"message","text":"note that you could just write `A::AbstractMatrix` which would have exactly the same performance","user":"U0179G7FG4F","ts":"1612902532.412600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0lM=b","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"note that you could just write "},{"type":"text","text":"A::AbstractMatrix","style":{"code":true}},{"type":"text","text":" which would have exactly the same performance"}]}]}],"thread_ts":"1612901872.411700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"e2a979bb-07f9-487e-bf84-0a359decf1f0","type":"message","text":"if you suspect the code to be slow, I suggest checking `@code_warntype` and if that's all good (nothing red) check allocations (slices create copies). Note also iteration order on matrices (column major)","user":"UH24GRBLL","ts":"1612902610.412800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oabEH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you suspect the code to be slow, I suggest checking "},{"type":"text","text":"@code_warntype","style":{"code":true}},{"type":"text","text":" and if that's all good (nothing red) check allocations (slices create copies). Note also iteration order on matrices (column major)"}]}]}],"thread_ts":"1612901872.411700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"410491e0-dca2-424b-bc9f-1818a6449b24","type":"message","text":"Would it make sense to add a version of `@code_warntype` that onlyoutputs lines with Unions?","user":"U0179G7FG4F","ts":"1612902717.413200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4Ae","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Would it make sense to add a version of "},{"type":"text","text":"@code_warntype","style":{"code":true}},{"type":"text","text":" that onlyoutputs lines with Unions?"}]}]}],"thread_ts":"1612901872.411700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"b4863216-829a-4658-8ab6-115afb088833","type":"message","text":"I often avoid using it unless I suspect problems because it spams output even when nothing is wrong","user":"U0179G7FG4F","ts":"1612902748.413400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3Rx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I often avoid using it unless I suspect problems because it spams output even when nothing is wrong"}]}]}],"thread_ts":"1612901872.411700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"3ac4d802-d796-4d71-844a-01af21d09b3c","type":"message","text":"lowered code doesn't necessarily correspond neatly to source code though","user":"UH24GRBLL","ts":"1612903245.413600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mPM3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"lowered code doesn't necessarily correspond neatly to source code though"}]}]}],"thread_ts":"1612901872.411700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"45778405-40a5-4388-8725-dada2a66ab5f","type":"message","text":"so only printing those lines may leave out context that tells you where the union actually comes from","user":"UH24GRBLL","ts":"1612903262.413800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XjsE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so only printing those lines may leave out context that tells you where the union actually comes from"}]}]}],"thread_ts":"1612901872.411700","parent_user_id":"U01L0RJC6FM","reactions":[{"name":"thumbsup_all","users":["U0179G7FG4F"],"count":1}]},{"client_msg_id":"c6c7ee89-4375-48fd-a808-cf437ab93d6e","type":"message","text":"all in all, if it's blue it's ok, yellow is usually fine if you iterate over things and red has to be investigated","user":"UH24GRBLL","ts":"1612903310.414100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FHQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"all in all, if it's blue it's ok, yellow is usually fine if you iterate over things and red has to be investigated"}]}]}],"thread_ts":"1612901872.411700","parent_user_id":"U01L0RJC6FM"}]