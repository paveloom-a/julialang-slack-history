[{"client_msg_id":"5dc97f33-c423-46d0-9ed7-0445108a3071","type":"message","text":"Is `foobar` supposed to work here?\n```TupType(::Type{T}) where {T} = Tuple{&lt;:T,&lt;:T,&lt;:T}\n\nstruct Foo end\n\nbar(t::TupType(Foo)) = 1\nbaz(t::Tuple{&lt;:T,&lt;:T,&lt;:T}) where {T} = 1\nfoobar(t::TupType(F)) where {F} = 1 # yields MethodError```","user":"UEN48T0BT","ts":"1609691920.069400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8cX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is "},{"type":"text","text":"foobar","style":{"code":true}},{"type":"text","text":" supposed to work here?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"TupType(::Type{T}) where {T} = Tuple{<:T,<:T,<:T}\n\nstruct Foo end\n\nbar(t::TupType(Foo)) = 1\nbaz(t::Tuple{<:T,<:T,<:T}) where {T} = 1\nfoobar(t::TupType(F)) where {F} = 1 # yields MethodError"}]}]}],"thread_ts":"1609691920.069400","reply_count":12,"reply_users_count":3,"latest_reply":"1609702557.096800","reply_users":["U7HAYKY9X","UM30MT6RF","UEN48T0BT"],"subscribed":false},{"client_msg_id":"09a24e6b-71b1-4b4b-b951-50b30f8956c3","type":"message","text":"Not supposed to work, no. Not sure what you want to do. Perhaps `foobar(t::TupType(F where F)) = 1` ?","user":"U7HAYKY9X","ts":"1609693004.071900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ycEk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not supposed to work, no. Not sure what you want to do. Perhaps "},{"type":"text","text":"foobar(t::TupType(F where F)) = 1","style":{"code":true}},{"type":"text","text":" ?"}]}]}],"thread_ts":"1609691920.069400","parent_user_id":"UEN48T0BT"},{"client_msg_id":"20a5c9c2-30b2-4799-9ae8-b87177b7970d","type":"message","text":"Also, I don't think you ever need Unionall-tuples:\n```julia&gt; (1, 2.0) isa Tuple{Number, Number}\ntrue```","user":"U7HAYKY9X","ts":"1609693098.072100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0AIoL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, I don't think you ever need Unionall-tuples:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> (1, 2.0) isa Tuple{Number, Number}\ntrue"}]}]}],"thread_ts":"1609691920.069400","parent_user_id":"UEN48T0BT","reactions":[{"name":"point_up","users":["UM30MT6RF"],"count":1}]},{"client_msg_id":"cb7ad7d0-4b77-428a-84d9-a6712cb02fb6","type":"message","text":"You probably want to do something simpler, like\n```bar(::NTuple{3, Foo}) = 1```\n","user":"U7HAYKY9X","ts":"1609693405.073100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Eu1X4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You probably want to do something simpler, like\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"bar(::NTuple{3, Foo}) = 1"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1609691920.069400","parent_user_id":"UEN48T0BT"},{"client_msg_id":"32128f86-6617-4072-aedd-a630d759d42d","type":"message","text":"If you don't restrict `TupType` to only `Type`, this should work, i.e.\n```TupType(T) = Tuple{T,T,T}```","user":"UM30MT6RF","ts":"1609693523.073600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZYg/g","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you don't restrict "},{"type":"text","text":"TupType","style":{"code":true}},{"type":"text","text":" to only "},{"type":"text","text":"Type","style":{"code":true}},{"type":"text","text":", this should work, i.e.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"TupType(T) = Tuple{T,T,T}"}]}]}],"thread_ts":"1609691920.069400","parent_user_id":"UEN48T0BT"},{"client_msg_id":"72a2767e-4915-4d3b-be5e-29ae0a54bc3f","type":"message","text":"I wanted the same behavior as `baz(t::Tuple{&lt;:T,&lt;:T,&lt;:T}) where {T} = 1`, which works. Using `bar(::NTuple{3, Foo}) = 1` is more restrictive, since `T` could be an abstract type","user":"UEN48T0BT","ts":"1609698081.081700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HurN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I wanted the same behavior as "},{"type":"text","text":"baz(t::Tuple{<:T,<:T,<:T}) where {T} = 1","style":{"code":true}},{"type":"text","text":", which works. Using "},{"type":"text","text":"bar(::NTuple{3, Foo}) = 1","style":{"code":true}},{"type":"text","text":" is more restrictive, since "},{"type":"text","text":"T","style":{"code":true}},{"type":"text","text":" could be an abstract type"}]}]}],"thread_ts":"1609691920.069400","parent_user_id":"UEN48T0BT"},{"client_msg_id":"586045fa-2d57-43ba-bcf7-b1a6ad03f2db","type":"message","text":"`TupType(T) = Tuple{T,T,T}` works, thanks!","user":"UEN48T0BT","ts":"1609698090.081900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"N/BVG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"TupType(T) = Tuple{T,T,T}","style":{"code":true}},{"type":"text","text":" works, thanks!"}]}]}],"thread_ts":"1609691920.069400","parent_user_id":"UEN48T0BT"},{"client_msg_id":"a8912b55-db73-4049-9acd-7ddc67574f88","type":"message","text":"&gt; I wanted the same behavior as baz(t::Tuple{&lt;:T,&lt;:T,&lt;:T}) where {T} = 1, which works. Using bar(::NTuple{3, Foo}) = 1 is more restrictive, since T could be an abstract type\n&gt; \nWhy not `bar(::NTuple{3}) = 1` or equivalently `bar(::NTuple{3, T}) where {T} = 1`?","user":"UM30MT6RF","ts":"1609699213.086300","team":"T68168MUP","edited":{"user":"UM30MT6RF","ts":"1609699277.000000"},"blocks":[{"type":"rich_text","block_id":"P=V","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"I wanted the same behavior as baz(t::Tuple{<:T,<:T,<:T}) where {T} = 1, which works. Using bar(::NTuple{3, Foo}) = 1 is more restrictive, since T could be an abstract type\n"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Why not "},{"type":"text","text":"bar(::NTuple{3}) = 1","style":{"code":true}},{"type":"text","text":" or equivalently "},{"type":"text","text":"bar(::NTuple{3, T}) where {T} = 1","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1609691920.069400","parent_user_id":"UEN48T0BT"},{"client_msg_id":"95932d9f-38ab-4f11-979b-1402bd825f08","type":"message","text":"But you can't ever instantiate an abstractly typed tuple, so I'm not sure why it matters. E.g. (1, 1.0) won't match the signature even if it's a subtype of Tuple{Number, Number}","user":"U7HAYKY9X","ts":"1609701053.088300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ImK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But you can't ever instantiate an abstractly typed tuple, so I'm not sure why it matters. E.g. (1, 1.0) won't match the signature even if it's a subtype of Tuple{Number, Number}"}]}]}],"thread_ts":"1609691920.069400","parent_user_id":"UEN48T0BT"},{"client_msg_id":"3d4c653e-cf6f-43ab-8278-bcb49dad0974","type":"message","text":"This is kind of the case that I wanted to catch:\n```abstract type AbstractFoo end\nstruct FooA &lt;: AbstractFoo end\nstruct FooB &lt;: AbstractFoo end\nstruct Bar{T} end\n\nTupType(T) = Tuple{&lt;:T,&lt;:T,&lt;:T}\nfun_works(t::TupType(F)) where {F} = 1\nfun_fails(t::NTuple{N,T}) where {N,T&lt;:Bar} = 1\n\nt = (Bar{FooA}(),Bar{FooB}(),Bar{FooA}())\nfun_works(t)\nfun_fails(t)```","user":"UEN48T0BT","ts":"1609701376.091700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JjysM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is kind of the case that I wanted to catch:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"abstract type AbstractFoo end\nstruct FooA <: AbstractFoo end\nstruct FooB <: AbstractFoo end\nstruct Bar{T} end\n\nTupType(T) = Tuple{<:T,<:T,<:T}\nfun_works(t::TupType(F)) where {F} = 1\nfun_fails(t::NTuple{N,T}) where {N,T<:Bar} = 1\n\nt = (Bar{FooA}(),Bar{FooB}(),Bar{FooA}())\nfun_works(t)\nfun_fails(t)"}]}]}],"thread_ts":"1609691920.069400","parent_user_id":"UEN48T0BT"},{"client_msg_id":"0c76d8e1-0b97-4082-994a-f4021b742161","type":"message","text":"Since not all elements of `t` are the same type, you want `NTuple{N,Bar} where {N}` instead of `NTuple{N,T} where {N,T&lt;:Bar}`","user":"UM30MT6RF","ts":"1609701677.091900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0ESG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Since not all elements of "},{"type":"text","text":"t ","style":{"code":true}},{"type":"text","text":"are the same type, you want "},{"type":"text","text":"NTuple{N,Bar} where {N}","style":{"code":true}},{"type":"text","text":" instead of "},{"type":"text","text":"NTuple{N,T} where {N,T<:Bar}","style":{"code":true}}]}]}],"thread_ts":"1609691920.069400","parent_user_id":"UEN48T0BT"},{"client_msg_id":"d06a55f9-4d3b-4cd9-bb2b-77203207a888","type":"message","text":"Ahhh, nice, thanks! I see, so this is like `NTuple{N,Bar{T} where {T}}`.","user":"UEN48T0BT","ts":"1609702270.096400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kN12H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ahhh, nice, thanks! I see, so this is like "},{"type":"text","text":"NTuple{N,Bar{T} where {T}}","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1609691920.069400","parent_user_id":"UEN48T0BT"},{"client_msg_id":"b11ffab4-9e43-435a-afe1-dcf1912e2d9a","type":"message","text":"Yes, exactly","user":"UM30MT6RF","ts":"1609702557.096800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JL01","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, exactly"}]}]}],"thread_ts":"1609691920.069400","parent_user_id":"UEN48T0BT"}]