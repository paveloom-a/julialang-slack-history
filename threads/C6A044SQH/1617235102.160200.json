[{"client_msg_id":"4249800e-c7e1-485e-a69f-b11b6b939029","type":"message","text":"Hi, I have a struct `MyStryct(A11, A12, A21, A22)`that holds multiple `AbstractMatrix`  types. In particular, I often need it to store some subpart of a large, sparse matrix. The tricky part is, that there is also a permutation, so in fact what I need is my container to hold `A[idx,idx]` . While analyzing my code with `@profview` , I observe that a lot of time is spent on constructing `MyStruct(A[idx,idx], ...)`  which calls  `SparseArrays.getindex`  and `SparseArrays_getindex_I_sorted` , which in turn calls `zeros` for some reason.\n\nI though that I could circumvent all of this by using `@view` , but the code slows down considerably when I do this. Am I missing something here? Any advice on how to improve it?","user":"U01L0RJC6FM","ts":"1617235102.160200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"S/r","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi, I have a struct "},{"type":"text","text":"MyStryct(A11, A12, A21, A22)","style":{"code":true}},{"type":"text","text":"that holds multiple "},{"type":"text","text":"AbstractMatrix","style":{"code":true}},{"type":"text","text":"  types. In particular, I often need it to store some subpart of a large, sparse matrix. The tricky part is, that there is also a permutation, so in fact what I need is my container to hold "},{"type":"text","text":"A[idx,idx]","style":{"code":true}},{"type":"text","text":" . While analyzing my code with "},{"type":"text","text":"@profview","style":{"code":true}},{"type":"text","text":" , I observe that a lot of time is spent on constructing "},{"type":"text","text":"MyStruct(A[idx,idx], ...)","style":{"code":true}},{"type":"text","text":"  which calls  "},{"type":"text","text":"SparseArrays.getindex","style":{"code":true}},{"type":"text","text":"  and "},{"type":"text","text":"SparseArrays_getindex_I_sorted","style":{"code":true}},{"type":"text","text":" , which in turn calls "},{"type":"text","text":"zeros","style":{"code":true}},{"type":"text","text":" for some reason.\n\nI though that I could circumvent all of this by using "},{"type":"text","text":"@view","style":{"code":true}},{"type":"text","text":" , but the code slows down considerably when I do this. Am I missing something here? Any advice on how to improve it?"}]}]}],"thread_ts":"1617235102.160200","reply_count":5,"reply_users_count":2,"latest_reply":"1617280064.190800","reply_users":["U011LUQ182G","U01L0RJC6FM"],"is_locked":false,"subscribed":false},{"client_msg_id":"abbd555a-00f2-4bc5-8172-1bbf3ed31b99","type":"message","text":"is `idx` an index array, and can you post an MWE?","user":"U011LUQ182G","ts":"1617235536.160500","team":"T68168MUP","edited":{"user":"U011LUQ182G","ts":"1617235648.000000"},"blocks":[{"type":"rich_text","block_id":"mmqS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is "},{"type":"text","text":"idx","style":{"code":true}},{"type":"text","text":" an index array, and can you post an MWE?"}]}]}],"thread_ts":"1617235102.160200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"f4ea692c-f6af-47de-a870-300b146a6c37","type":"message","text":"Hi Jesse, yes it's an index array","user":"U01L0RJC6FM","ts":"1617267394.180300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jxngJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi Jesse, yes it's an index array"}]}]}],"thread_ts":"1617235102.160200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"db0d7ecc-5ad1-4b03-af8c-c8e0dad90447","type":"message","text":"hmm difficult, it's quite the complex code - it's a multifrontal solver basically that operates on subsections of the original matrix A","user":"U01L0RJC6FM","ts":"1617267451.180500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hudre","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmm difficult, it's quite the complex code - it's a multifrontal solver basically that operates on subsections of the original matrix A"}]}]}],"thread_ts":"1617235102.160200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"93ed2002-a3a9-4637-b46e-57555b853ffa","type":"message","text":"basivally I have something like this:","user":"U01L0RJC6FM","ts":"1617280059.190600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"i+Uy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"basivally I have something like this:"}]}]}],"thread_ts":"1617235102.160200","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"2028953c-53c8-4a56-bddf-6275e3861f9d","type":"message","text":"```function _assemble_blocks(A::AbstractMatrix{T}, S1::AbstractMatrix{T}, S2::AbstractMatrix{T}, int1::Vector{Int}, int2::Vector{Int}, bnd1::Vector{Int}, bnd2::Vector{Int}; args...) where T\n  ni1 = length(int1); nb1 = length(bnd1)\n  ni2 = length(int2); nb2 = length(bnd2)\n  Aii = BlockMatrix(S1[1:ni1, 1:ni1], A[int1, int2], A[int2, int1], S2[1:ni2, 1:ni2]) #introduce views maybe\n  Aib = BlockMatrix(S1[1:ni1, ni1+1:ni1+nb1], A[int1, bnd2], A[int2, bnd1], S2[1:ni2, ni2+1:ni2+nb2])\n  Abi = BlockMatrix(S1[ni1+1:ni1+nb1, 1:ni1], A[bnd1, int2], A[bnd2, int1], S2[ni2+1:ni2+nb2, 1:ni2])\n  Abb = BlockMatrix(S1[ni1+1:ni1+nb1, ni1+1:ni1+nb1], A[bnd1, bnd2], A[bnd2, bnd1], S2[ni2+1:ni2+nb2, ni2+1:ni2+nb2])\n  return Aii, Aib, Abi, Abb\nend```","user":"U01L0RJC6FM","ts":"1617280064.190800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gqUi","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function _assemble_blocks(A::AbstractMatrix{T}, S1::AbstractMatrix{T}, S2::AbstractMatrix{T}, int1::Vector{Int}, int2::Vector{Int}, bnd1::Vector{Int}, bnd2::Vector{Int}; args...) where T\n  ni1 = length(int1); nb1 = length(bnd1)\n  ni2 = length(int2); nb2 = length(bnd2)\n  Aii = BlockMatrix(S1[1:ni1, 1:ni1], A[int1, int2], A[int2, int1], S2[1:ni2, 1:ni2]) #introduce views maybe\n  Aib = BlockMatrix(S1[1:ni1, ni1+1:ni1+nb1], A[int1, bnd2], A[int2, bnd1], S2[1:ni2, ni2+1:ni2+nb2])\n  Abi = BlockMatrix(S1[ni1+1:ni1+nb1, 1:ni1], A[bnd1, int2], A[bnd2, int1], S2[ni2+1:ni2+nb2, 1:ni2])\n  Abb = BlockMatrix(S1[ni1+1:ni1+nb1, ni1+1:ni1+nb1], A[bnd1, bnd2], A[bnd2, bnd1], S2[ni2+1:ni2+nb2, ni2+1:ni2+nb2])\n  return Aii, Aib, Abi, Abb\nend"}]}]}],"thread_ts":"1617235102.160200","parent_user_id":"U01L0RJC6FM"}]