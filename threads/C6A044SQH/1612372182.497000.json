[{"client_msg_id":"90c8c78b-78e7-4026-893b-39957c15a963","type":"message","text":"Sometimes, I have a pattern like this:\n```struct MyType{N}\n   a::NTuple{N, Int}\n   b::Bool\nend```\nwhere I will want to usually set  `b = false` . To supplement the default constructors with both `MyType{N}(a::NTuple{N,Int})` and `MyType(a::NTuple{N,Int})` do I really need to define both? I.e. do I need both\n```MyType{N}(a::NTuple{N,Int}) where N = MyType{N}(a, false)\nMyType(a::NTuple{N,Int} where N     = MyType{N}(a, false)```\nThis gets a little tedious, especially if there are multiple default fields.\nI know there is e.g. Parameters.jl to define default struct values, but I was hoping for a neat solution that doesn't rely on keyword constructors.","user":"UCE6XE42Z","ts":"1612372182.497000","team":"T68168MUP","edited":{"user":"UCE6XE42Z","ts":"1612372388.000000"},"blocks":[{"type":"rich_text","block_id":"IJY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sometimes, I have a pattern like this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct MyType{N}\n   a::NTuple{N, Int}\n   b::Bool\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"where I will want to usually set  "},{"type":"text","text":"b = false","style":{"code":true}},{"type":"text","text":" . To supplement the default constructors with both "},{"type":"text","text":"MyType{N}(a::NTuple{N,Int})","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"MyType(a::NTuple{N,Int})","style":{"code":true}},{"type":"text","text":" do I really need to define both? I.e. do I need both\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"MyType{N}(a::NTuple{N,Int}) where N = MyType{N}(a, false)\nMyType(a::NTuple{N,Int} where N     = MyType{N}(a, false)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"This gets a little tedious, especially if there are multiple default fields.\nI know there is e.g. Parameters.jl to define default struct values, but I was hoping for a neat solution that doesn't rely on keyword constructors."}]}]}],"thread_ts":"1612372182.497000","reply_count":6,"reply_users_count":3,"latest_reply":"1612379801.003700","reply_users":["B01J9QZ4SP8","UDB26738Q","UCE6XE42Z"],"subscribed":false,"reactions":[{"name":"bridge","users":["UCE6XE42Z"],"count":1}]},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1612372184.497100","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1612372182.497000","parent_user_id":"UCE6XE42Z"},{"type":"message","subtype":"bot_message","text":"Success, it has been cross posted <https://discourse.julialang.org/t/sometimes-i-have-a-pattern-like-this-struct-mytype-n-where-n-a-ntuple-n/54548|to Discourse>. Keep and eye out on Discourse for responses and please add an answer there once you are satisfied with the solution so others can benefit as well. Happy debugging!","ts":"1612372300.498300","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1612372182.497000","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"d108c52f-b20e-4b8f-88ad-1c71eec51c23","type":"message","text":"```julia&gt; struct MyType{N} \n          a::NTuple{N, Int}\n          b::Bool\n       end\n\njulia&gt; MyType(a::NTuple{N,Int}) where N = MyType{N}(a, false)\nMyType\n\njulia&gt; MyType((1,2,3))\nMyType{3}((1, 2, 3), false)```","user":"UDB26738Q","ts":"1612372335.498700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Zk0","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> struct MyType{N} \n          a::NTuple{N, Int}\n          b::Bool\n       end\n\njulia> MyType(a::NTuple{N,Int}) where N = MyType{N}(a, false)\nMyType\n\njulia> MyType((1,2,3))\nMyType{3}((1, 2, 3), false)"}]}]}],"thread_ts":"1612372182.497000","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"978a2da1-7bcc-4611-8c98-2b4ee07aa73b","type":"message","text":"Sure, but I think that's just the same as what I wrote above, but only a portion of it? The problem with that is that it only creates one of the default constructors, e.g., `MyType{3}((1, 2, 3))` will not work.","user":"UCE6XE42Z","ts":"1612372479.499200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RcXb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sure, but I think that's just the same as what I wrote above, but only a portion of it? The problem with that is that it only creates one of the default constructors, e.g., "},{"type":"text","text":"MyType{3}((1, 2, 3))","style":{"code":true}},{"type":"text","text":" will not work."}]}]}],"thread_ts":"1612372182.497000","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"9d51c872-a5a8-46c0-8b84-5ac9a6fc3d7b","type":"message","text":"I didn't get you want to call `MyType{3}((1, 2, 3))` (which looks kind of redundant)","user":"UDB26738Q","ts":"1612373502.002100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MvF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I didn't get you want to call "},{"type":"text","text":"MyType{3}((1, 2, 3))","style":{"code":true}},{"type":"text","text":" (which looks kind of redundant)"}]}]}],"thread_ts":"1612372182.497000","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"57c2ceee-e687-424e-bec8-aede4d673cbd","type":"message","text":"Sometimes it is nice to be able to call it via `MyType{3}` e.g. if one is doing it programmatically (say if we have a function `f(x::MyType)` which returns a value the same type as `x` ; then we can do `typeof(x)(a)` which will go via the `MyType{N}(a)` constructor).","user":"UCE6XE42Z","ts":"1612379801.003700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Deh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sometimes it is nice to be able to call it via "},{"type":"text","text":"MyType{3}","style":{"code":true}},{"type":"text","text":" e.g. if one is doing it programmatically (say if we have a function "},{"type":"text","text":"f(x::MyType)","style":{"code":true}},{"type":"text","text":" which returns a value the same type as "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" ; then we can do "},{"type":"text","text":"typeof(x)(a)","style":{"code":true}},{"type":"text","text":" which will go via the "},{"type":"text","text":"MyType{N}(a)","style":{"code":true}},{"type":"text","text":" constructor)."}]}]}],"thread_ts":"1612372182.497000","parent_user_id":"UCE6XE42Z"}]