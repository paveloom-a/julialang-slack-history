[{"client_msg_id":"7e5e6188-a15d-43c4-a2fa-1c0a936e87aa","type":"message","text":"hi guys! I have a stupid issue: I’m trying to filter a matrix (MNIST dataset), and discard any letters other than 1, 2. I’ve written a function that does that, but it returns an arrays of arrays, that I’m then struggling to convert back into a matrix (I’ve looked up a couple of examples, but none of them seem to work in this specific case, maybe I’m messing up something?), so MLJ.jl to accept it (I’m trying to use a logistic classifier - which I know is not ideal, but I’ve got this as a task).\nDoes anyone have any idea how I could move forward? Are there any best practices to filter on a matrix on a single dimension?\n\nThank you :slightly_smiling_face:\n```using Pkg\nPkg.add([\"MLDatasets\", \"MLJ\", \"Images\", \"ImageShow\", \"MLJLinearModels\", \"CategoricalArrays\"])\nusing MLDatasets, MLJ, Images, ImageShow, MLJLinearModels, CategoricalArrays\nLogistic = @load LogisticClassifier pkg=MLJLinearModels\n\ntrain_x, train_y = MNIST.traindata()\ntest_x,  test_y  = MNIST.testdata()\n\ntrain_x = reshape(train_x, (28*28, size(train_x)[3]))\ntest_x = reshape(test_x, (28*28, size(test_x)[3]))\n\n\nfunction filter_dataset(x, y, predicate::Function)\n    filtered_x = []\n    filtered_y = []\n    for (index, label) in enumerate(y)\n        if predicate(label)\n            push!(filtered_x, x[:, index])\n            push!(filtered_y, label)\n        end\n    end\n    return filtered_x, filtered_y\nend\n\ntrain_x, train_y = filter_dataset(train_x, train_y, label -&gt; label == 1 || label == 2)\ntest_x, test_y = filter_dataset(test_x, test_y, label -&gt; label == 1 || label == 2)\n\ntrain_x = permutedims(reshape(hcat(train_x...), (length(train_x[1]), length(train_x)))) #trying to convect it into a matrix, but failing...\n\nlogistic_model = Logistic()\nlogistic = machine(logistic_model, scitype(train_x), CategoricalArray(train_y))\n# this throws an error on incompatible data - I'm passing in an array of arrays, instead of a matrix\n\nfit!(logistic, verbosity=2)\n\nscitype(train_x)\n\n# IRIS example dataset - this works well\niris_X, iris_y = @load_iris\niris_X\niris_y\nlogistic = machine(logistic_model, iris_X, iris_y)\nfit!(logistic, verbosity=2)```","user":"U01N351DMT9","ts":"1616846824.291100","team":"T68168MUP","edited":{"user":"U01N351DMT9","ts":"1616846849.000000"},"blocks":[{"type":"rich_text","block_id":"boAe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hi guys! I have a stupid issue: I’m trying to filter a matrix (MNIST dataset), and discard any letters other than 1, 2. I’ve written a function that does that, but it returns an arrays of arrays, that I’m then struggling to convert back into a matrix (I’ve looked up a couple of examples, but none of them seem to work in this specific case, maybe I’m messing up something?), so MLJ.jl to accept it (I’m trying to use a logistic classifier - which I know is not ideal, but I’ve got this as a task).\nDoes anyone have any idea how I could move forward? Are there any best practices to filter on a matrix on a single dimension?\n\nThank you "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using Pkg\nPkg.add([\"MLDatasets\", \"MLJ\", \"Images\", \"ImageShow\", \"MLJLinearModels\", \"CategoricalArrays\"])\nusing MLDatasets, MLJ, Images, ImageShow, MLJLinearModels, CategoricalArrays\nLogistic = @load LogisticClassifier pkg=MLJLinearModels\n\ntrain_x, train_y = MNIST.traindata()\ntest_x,  test_y  = MNIST.testdata()\n\ntrain_x = reshape(train_x, (28*28, size(train_x)[3]))\ntest_x = reshape(test_x, (28*28, size(test_x)[3]))\n\n\nfunction filter_dataset(x, y, predicate::Function)\n    filtered_x = []\n    filtered_y = []\n    for (index, label) in enumerate(y)\n        if predicate(label)\n            push!(filtered_x, x[:, index])\n            push!(filtered_y, label)\n        end\n    end\n    return filtered_x, filtered_y\nend\n\ntrain_x, train_y = filter_dataset(train_x, train_y, label -> label == 1 || label == 2)\ntest_x, test_y = filter_dataset(test_x, test_y, label -> label == 1 || label == 2)\n\ntrain_x = permutedims(reshape(hcat(train_x...), (length(train_x[1]), length(train_x)))) #trying to convect it into a matrix, but failing...\n\nlogistic_model = Logistic()\nlogistic = machine(logistic_model, scitype(train_x), CategoricalArray(train_y))\n# this throws an error on incompatible data - I'm passing in an array of arrays, instead of a matrix\n\nfit!(logistic, verbosity=2)\n\nscitype(train_x)\n\n# IRIS example dataset - this works well\niris_X, iris_y = @load_iris\niris_X\niris_y\nlogistic = machine(logistic_model, iris_X, iris_y)\nfit!(logistic, verbosity=2)"}]}]}],"thread_ts":"1616846824.291100","reply_count":6,"reply_users_count":2,"latest_reply":"1616847715.292800","reply_users":["U012XER8K4M","U01N351DMT9"],"is_locked":false,"subscribed":false},{"client_msg_id":"92e93a01-9e7a-4401-9ba0-24b76bb8434d","type":"message","text":"Well, in what way is it failing?","user":"U012XER8K4M","ts":"1616847185.291800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KYVo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well, in what way is it failing?"}]}]}],"thread_ts":"1616846824.291100","parent_user_id":"U01N351DMT9"},{"client_msg_id":"f6e56714-b4ae-4950-b5db-3480fe538ac7","type":"message","text":"It’s complaining that it needs a Matrix instead of an array of arrays - which I’m already tring to do with `train_x = permutedims(reshape(hcat(train_x...), (length(train_x[1]), length(train_x))))`","user":"U01N351DMT9","ts":"1616847326.292000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fwnj9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It’s complaining that it needs a Matrix instead of an array of arrays - which I’m already tring to do with "},{"type":"text","text":"train_x = permutedims(reshape(hcat(train_x...), (length(train_x[1]), length(train_x))))","style":{"code":true}}]}]}],"thread_ts":"1616846824.291100","parent_user_id":"U01N351DMT9"},{"client_msg_id":"1e8b0d31-a36c-45bc-a134-e9e02bb0b661","type":"message","text":"What is the `typeof(test_x)` after that line?","user":"U012XER8K4M","ts":"1616847431.292200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0CyH2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What is the "},{"type":"text","text":"typeof(test_x)","style":{"code":true}},{"type":"text","text":" after that line?"}]}]}],"thread_ts":"1616846824.291100","parent_user_id":"U01N351DMT9"},{"client_msg_id":"47800f25-04c1-4eb7-98ae-ed84408f0363","type":"message","text":"<https://nextjournal.com/mnist-logistic-regression/1?version=latest>","user":"U01N351DMT9","ts":"1616847662.292400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"J9H","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://nextjournal.com/mnist-logistic-regression/1?version=latest"}]}]}],"thread_ts":"1616846824.291100","parent_user_id":"U01N351DMT9"},{"client_msg_id":"8e4cde85-d2be-41cc-9a83-71d075a64deb","type":"message","text":"one minute :slightly_smiling_face:","user":"U01N351DMT9","ts":"1616847677.292600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"m3lMb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"one minute "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1616846824.291100","parent_user_id":"U01N351DMT9"},{"client_msg_id":"560dc96b-5fed-4fa8-be86-eac6dcd3299c","type":"message","text":"I just need to re-run it now","user":"U01N351DMT9","ts":"1616847715.292800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pHKw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I just need to re-run it now"}]}]}],"thread_ts":"1616846824.291100","parent_user_id":"U01N351DMT9"}]