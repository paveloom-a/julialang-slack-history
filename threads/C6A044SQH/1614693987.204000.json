[{"client_msg_id":"5b25bce4-7b38-476f-af17-c88eb32f2911","type":"message","text":"Can anyone think of a clever way to override `setproperty!` (or something) to allow the syntax `nt.a = 1`  when `nt` is a `NamedTuple` and `a` is length-1 array? i.e. it should be equivalent to `nt.a[1] = 1` . Would be a nice convenience syntax in my case. I suppose a macro would also be possible...","user":"U01H36BUDJB","ts":"1614693987.204000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KYS9l","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can anyone think of a clever way to override "},{"type":"text","text":"setproperty!","style":{"code":true}},{"type":"text","text":" (or something) to allow the syntax "},{"type":"text","text":"nt.a = 1","style":{"code":true}},{"type":"text","text":"  when "},{"type":"text","text":"nt","style":{"code":true}},{"type":"text","text":" is a "},{"type":"text","text":"NamedTuple","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"a","style":{"code":true}},{"type":"text","text":" is length-1 array? i.e. it should be equivalent to "},{"type":"text","text":"nt.a[1] = 1","style":{"code":true}},{"type":"text","text":" . Would be a nice convenience syntax in my case. I suppose a macro would also be possible..."}]}]}],"thread_ts":"1614693987.204000","reply_count":8,"reply_users_count":3,"latest_reply":"1614698161.205700","reply_users":["B01J9QZ4SP8","U7HAYKY9X","U01H36BUDJB"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1614693989.204100","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1614693987.204000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"de1ca8ce-2739-47b6-911b-e5722f4907a1","type":"message","text":"It's probably not a good idea to override `getproperty` for Base types :/","user":"U7HAYKY9X","ts":"1614695990.204500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BAkF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's probably not a good idea to override "},{"type":"text","text":"getproperty","style":{"code":true}},{"type":"text","text":" for Base types :/"}]}]}],"thread_ts":"1614693987.204000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"f14a07f9-8b14-4659-8541-317b1e96ff6a","type":"message","text":"I figured that would be the answer :sweat_smile:","user":"U01H36BUDJB","ts":"1614696506.204700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mAfIn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I figured that would be the answer "},{"type":"emoji","name":"sweat_smile"}]}]}],"thread_ts":"1614693987.204000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"d9ce985d-054d-4579-b1e8-2c7d7cc29801","type":"message","text":"I guess a macro could do the trick too, but I'm not sure what's being gained at that point.","user":"U01H36BUDJB","ts":"1614696528.204900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"b=VOc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess a macro could do the trick too, but I'm not sure what's being gained at that point."}]}]}],"thread_ts":"1614693987.204000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"7f1879e2-69ad-4083-a8a8-e8b1b86acc8d","type":"message","text":"You know you can have 0-dimensional arrays, and `RefValue` if you want a handy one-element mutable container","user":"U7HAYKY9X","ts":"1614696676.205100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FPGv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You know you can have 0-dimensional arrays, and "},{"type":"text","text":"RefValue","style":{"code":true}},{"type":"text","text":" if you want a handy one-element mutable container"}]}]}],"thread_ts":"1614693987.204000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"59d94b08-fa39-4663-91ec-cd576d32850f","type":"message","text":"Can you give an example?","user":"U01H36BUDJB","ts":"1614697612.205300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8/MT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can you give an example?"}]}]}],"thread_ts":"1614693987.204000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"11fd7f54-e416-42a7-abc4-55dc38d6e573","type":"message","text":"```using Base: RefValue\nstruct Foo\n    x::Int\n    my_mutable_field::RefValue{Int}\nend```","user":"U7HAYKY9X","ts":"1614698125.205500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9wt5","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using Base: RefValue\nstruct Foo\n    x::Int\n    my_mutable_field::RefValue{Int}\nend"}]}]}],"thread_ts":"1614693987.204000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"06dd896b-3ded-4442-a46a-9f654954655a","type":"message","text":"```julia&gt; x = Foo(1, Ref(12))\nFoo(1, RefValue{Int64}(12))\n\njulia&gt; x.my_mutable_field[] = 19\n19\n\njulia&gt; x\nFoo(1, RefValue{Int64}(19))```\nThis way, you can have single mutable fields in otherwise immutable structs","user":"U7HAYKY9X","ts":"1614698161.205700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+eGHD","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> x = Foo(1, Ref(12))\nFoo(1, RefValue{Int64}(12))\n\njulia> x.my_mutable_field[] = 19\n19\n\njulia> x\nFoo(1, RefValue{Int64}(19))"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"This way, you can have single mutable fields in otherwise immutable structs"}]}]}],"thread_ts":"1614693987.204000","parent_user_id":"U01H36BUDJB"}]