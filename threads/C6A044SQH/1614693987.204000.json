[{"client_msg_id":"5b25bce4-7b38-476f-af17-c88eb32f2911","type":"message","text":"Can anyone think of a clever way to override `setproperty!` (or something) to allow the syntax `nt.a = 1`  when `nt` is a `NamedTuple` and `a` is length-1 array? i.e. it should be equivalent to `nt.a[1] = 1` . Would be a nice convenience syntax in my case. I suppose a macro would also be possible...","user":"U01H36BUDJB","ts":"1614693987.204000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KYS9l","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can anyone think of a clever way to override "},{"type":"text","text":"setproperty!","style":{"code":true}},{"type":"text","text":" (or something) to allow the syntax "},{"type":"text","text":"nt.a = 1","style":{"code":true}},{"type":"text","text":"  when "},{"type":"text","text":"nt","style":{"code":true}},{"type":"text","text":" is a "},{"type":"text","text":"NamedTuple","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"a","style":{"code":true}},{"type":"text","text":" is length-1 array? i.e. it should be equivalent to "},{"type":"text","text":"nt.a[1] = 1","style":{"code":true}},{"type":"text","text":" . Would be a nice convenience syntax in my case. I suppose a macro would also be possible..."}]}]}],"thread_ts":"1614693987.204000","reply_count":15,"reply_users_count":4,"latest_reply":"1614701744.217100","reply_users":["B01J9QZ4SP8","U7HAYKY9X","U01H36BUDJB","U01PLQWQXPV"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1614693989.204100","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1614693987.204000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"de1ca8ce-2739-47b6-911b-e5722f4907a1","type":"message","text":"It's probably not a good idea to override `getproperty` for Base types :/","user":"U7HAYKY9X","ts":"1614695990.204500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BAkF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's probably not a good idea to override "},{"type":"text","text":"getproperty","style":{"code":true}},{"type":"text","text":" for Base types :/"}]}]}],"thread_ts":"1614693987.204000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"f14a07f9-8b14-4659-8541-317b1e96ff6a","type":"message","text":"I figured that would be the answer :sweat_smile:","user":"U01H36BUDJB","ts":"1614696506.204700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mAfIn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I figured that would be the answer "},{"type":"emoji","name":"sweat_smile"}]}]}],"thread_ts":"1614693987.204000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"d9ce985d-054d-4579-b1e8-2c7d7cc29801","type":"message","text":"I guess a macro could do the trick too, but I'm not sure what's being gained at that point.","user":"U01H36BUDJB","ts":"1614696528.204900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"b=VOc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess a macro could do the trick too, but I'm not sure what's being gained at that point."}]}]}],"thread_ts":"1614693987.204000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"7f1879e2-69ad-4083-a8a8-e8b1b86acc8d","type":"message","text":"You know you can have 0-dimensional arrays, and `RefValue` if you want a handy one-element mutable container","user":"U7HAYKY9X","ts":"1614696676.205100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FPGv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You know you can have 0-dimensional arrays, and "},{"type":"text","text":"RefValue","style":{"code":true}},{"type":"text","text":" if you want a handy one-element mutable container"}]}]}],"thread_ts":"1614693987.204000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"59d94b08-fa39-4663-91ec-cd576d32850f","type":"message","text":"Can you give an example?","user":"U01H36BUDJB","ts":"1614697612.205300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8/MT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can you give an example?"}]}]}],"thread_ts":"1614693987.204000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"11fd7f54-e416-42a7-abc4-55dc38d6e573","type":"message","text":"```using Base: RefValue\nstruct Foo\n    x::Int\n    my_mutable_field::RefValue{Int}\nend```","user":"U7HAYKY9X","ts":"1614698125.205500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9wt5","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using Base: RefValue\nstruct Foo\n    x::Int\n    my_mutable_field::RefValue{Int}\nend"}]}]}],"thread_ts":"1614693987.204000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"06dd896b-3ded-4442-a46a-9f654954655a","type":"message","text":"```julia&gt; x = Foo(1, Ref(12))\nFoo(1, RefValue{Int64}(12))\n\njulia&gt; x.my_mutable_field[] = 19\n19\n\njulia&gt; x\nFoo(1, RefValue{Int64}(19))```\nThis way, you can have single mutable fields in otherwise immutable structs","user":"U7HAYKY9X","ts":"1614698161.205700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+eGHD","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> x = Foo(1, Ref(12))\nFoo(1, RefValue{Int64}(12))\n\njulia> x.my_mutable_field[] = 19\n19\n\njulia> x\nFoo(1, RefValue{Int64}(19))"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"This way, you can have single mutable fields in otherwise immutable structs"}]}]}],"thread_ts":"1614693987.204000","parent_user_id":"U01H36BUDJB","reactions":[{"name":"+1","users":["U01H36BUDJB"],"count":1}]},{"client_msg_id":"97d57e66-54d3-4a17-83e8-7be2aeaa89c0","type":"message","text":"Look into\n<https://github.com/jw3126/Setfield.jl>\n\nIt's specifically designed for \"mutating\" immutable structures, with maximum safety","user":"U01PLQWQXPV","ts":"1614698944.207600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0Xc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Look into\n"},{"type":"link","url":"https://github.com/jw3126/Setfield.jl"},{"type":"text","text":"\n\nIt's specifically designed for \"mutating\" immutable structures, with maximum safety"}]}]}],"thread_ts":"1614693987.204000","parent_user_id":"U01H36BUDJB","reactions":[{"name":"+1","users":["U01H36BUDJB"],"count":1}]},{"client_msg_id":"4d0d4e41-6ca7-4879-b9e4-c64821b6eaf2","type":"message","text":"<@U01PLQWQXPV> From my quick and dirty tests it appears to be non-allocating (not surprising, it's operating on immutables), but in general, what are the performance implications if you have large nested tuples or structs?","user":"U01H36BUDJB","ts":"1614700915.216000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6=Y","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01PLQWQXPV"},{"type":"text","text":" From my quick and dirty tests it appears to be non-allocating (not surprising, it's operating on immutables), but in general, what are the performance implications if you have large nested tuples or structs?"}]}]}],"thread_ts":"1614693987.204000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"f8eaf84e-779d-47e4-b6ed-4cf4421f2dac","type":"message","text":"I think there should be very little performance penalty.\n\nIf the fields of the immutable are mutable types, like Arrays, they won't be duplicated on the new \"mutated\" immutable, they will be alias of the old ones.\n\nExample\n```a = rand(100)\nnt = (a=a, b=0.0)\n@set nt.b = 1.0\n\n@assert nt.a === a```","user":"U01PLQWQXPV","ts":"1614701161.216200","team":"T68168MUP","edited":{"user":"U01PLQWQXPV","ts":"1614701193.000000"},"blocks":[{"type":"rich_text","block_id":"Aypn5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think there should be very little performance penalty.\n\nIf the fields of the immutable are mutable types, like Arrays, they won't be duplicated on the new \"mutated\" immutable, they will be alias of the old ones.\n\nExample\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"a = rand(100)\nnt = (a=a, b=0.0)\n@set nt.b = 1.0\n\n@assert nt.a === a"}]}]}],"thread_ts":"1614693987.204000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"daafc78d-05f1-426f-a770-d884504a2d1e","type":"message","text":"Unless you are dealing with a weird immutable with hundreds+ of fields are constantly mutating them, I wouldn't worry about performance at all","user":"U01PLQWQXPV","ts":"1614701239.216500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x6/Xv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Unless you are dealing with a weird immutable with hundreds+ of fields are constantly mutating them, I wouldn't worry about performance at all"}]}]}],"thread_ts":"1614693987.204000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"1bbb48c1-225a-4432-859e-c6ab77ff2ea9","type":"message","text":"But with so much mutation maybe one shouldn't work with immutables :smile:","user":"U01PLQWQXPV","ts":"1614701273.216700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zSpOH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But with so much mutation maybe one shouldn't work with immutables "},{"type":"emoji","name":"smile"}]}]}],"thread_ts":"1614693987.204000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"32de3cd3-0b84-42ec-bbec-b722aac73f28","type":"message","text":"My main concern was with the mutable fields, so that sounds good :+1:","user":"U01H36BUDJB","ts":"1614701730.216900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0Umnp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My main concern was with the mutable fields, so that sounds good "},{"type":"emoji","name":"+1"}]}]}],"thread_ts":"1614693987.204000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"c84109b5-3576-4e8b-b5bf-7b144b784cfa","type":"message","text":"or more correctly, fields of large mutables*","user":"U01H36BUDJB","ts":"1614701744.217100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Rj3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or more correctly, fields of large mutables*"}]}]}],"thread_ts":"1614693987.204000","parent_user_id":"U01H36BUDJB"}]