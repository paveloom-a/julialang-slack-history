[{"client_msg_id":"5aa2b728-1e67-4c5f-b194-623620350eef","type":"message","text":"I'm having some problems understanding this behavior of `unsafe_copyto!`:\n```julia&gt; mutable struct Foo\n       a::Int64\n       b::Int64\n       end\n\njulia&gt; f1=Foo(1,2)\nFoo(1, 2)\n\njulia&gt; f2=Foo(0,0)\nFoo(0, 0)\n\njulia&gt; pf1=Ptr{Foo}(pointer_from_objref(f1))\nPtr{Foo} @0x00007f834a134410\n\njulia&gt; pf2=Ptr{Foo}(pointer_from_objref(f2))\nPtr{Foo} @0x00007f8349ebe190\n\njulia&gt; unsafe_copyto!(pf2, pf1, 1)\nPtr{Foo} @0x00007f8349ebe190\n\njulia&gt; f2\nFoo(1, 0)```\nI am expecting f2 to be the same as f1 after the `unsafe_copyto!`, but only one of the fields is copied.  It looks like `unsafe_copyto!` ends up calling `memmove` to copy `n * aligned_size(T)` bytes.  I then discovered that `aligned_size(Foo)` returns 8 rather than 16.  Looking into `aligned_size(T)` it seems that if `T` is not \"allocatedinline\" then its \"aligned size\" is that of a pointer, which kinda fits the comment for `aligned_size` (\"amount of total space taken by T when stored in a container\").  It feels like `aligned_size` is really computing \"inline size\".\n\nIs this really how `unsafe_copyto!` is supposed to work?  FWIW, my motivation for this is to take a pointer to a C data structure and do an in-place version of `unsafe_load` by loading into an existing object instead of allocating a new one each time (i.e. I'm trying to use `unsafe_copyto!` to create an `unsafe_load!` function).  If `unsafe_copyto!` is not the right way to do this, what is?","user":"U01FKQQ7J0J","ts":"1615529779.437300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RfVcL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm having some problems understanding this behavior of "},{"type":"text","text":"unsafe_copyto!","style":{"code":true}},{"type":"text","text":":\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> mutable struct Foo\n       a::Int64\n       b::Int64\n       end\n\njulia> f1=Foo(1,2)\nFoo(1, 2)\n\njulia> f2=Foo(0,0)\nFoo(0, 0)\n\njulia> pf1=Ptr{Foo}(pointer_from_objref(f1))\nPtr{Foo} @0x00007f834a134410\n\njulia> pf2=Ptr{Foo}(pointer_from_objref(f2))\nPtr{Foo} @0x00007f8349ebe190\n\njulia> unsafe_copyto!(pf2, pf1, 1)\nPtr{Foo} @0x00007f8349ebe190\n\njulia> f2\nFoo(1, 0)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I am expecting f2 to be the same as f1 after the "},{"type":"text","text":"unsafe_copyto!","style":{"code":true}},{"type":"text","text":", but only one of the fields is copied.  It looks like "},{"type":"text","text":"unsafe_copyto!","style":{"code":true}},{"type":"text","text":" ends up calling "},{"type":"text","text":"memmove","style":{"code":true}},{"type":"text","text":" to copy "},{"type":"text","text":"n * aligned_size(T)","style":{"code":true}},{"type":"text","text":" bytes.  I then discovered that "},{"type":"text","text":"aligned_size(Foo)","style":{"code":true}},{"type":"text","text":" returns 8 rather than 16.  Looking into "},{"type":"text","text":"aligned_size(T)","style":{"code":true}},{"type":"text","text":" it seems that if "},{"type":"text","text":"T","style":{"code":true}},{"type":"text","text":" is not \"allocatedinline\" then its \"aligned size\" is that of a pointer, which kinda fits the comment for "},{"type":"text","text":"aligned_size","style":{"code":true}},{"type":"text","text":" (\"amount of total space taken by T when stored in a container\").  It feels like "},{"type":"text","text":"aligned_size","style":{"code":true}},{"type":"text","text":" is really computing \"inline size\".\n\nIs this really how "},{"type":"text","text":"unsafe_copyto!","style":{"code":true}},{"type":"text","text":" is supposed to work?  FWIW, my motivation for this is to take a pointer to a C data structure and do an in-place version of "},{"type":"text","text":"unsafe_load","style":{"code":true}},{"type":"text","text":" by loading into an existing object instead of allocating a new one each time (i.e. I'm trying to use "},{"type":"text","text":"unsafe_copyto!","style":{"code":true}},{"type":"text","text":" to create an "},{"type":"text","text":"unsafe_load!","style":{"code":true}},{"type":"text","text":" function).  If "},{"type":"text","text":"unsafe_copyto!","style":{"code":true}},{"type":"text","text":" is not the right way to do this, what is?"}]}]}],"thread_ts":"1615529779.437300","reply_count":88,"reply_users_count":3,"latest_reply":"1615543407.461100","reply_users":["B01J9QZ4SP8","UH24GRBLL","U01FKQQ7J0J"],"subscribed":false,"reactions":[{"name":"bridge","users":["U01FKQQ7J0J"],"count":1}]},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1615529784.437400","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"type":"message","subtype":"bot_message","text":"Success, it has been cross posted <https://discourse.julialang.org/t/56999| to Discourse>. Keep and eye out on Discourse for responses and please add an answer there once you are satisfied with the solution so others can benefit as well. Happy debugging!","ts":"1615529856.437700","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"03a18b53-69f3-4a99-82f3-2edcdf5ae66b","type":"message","text":"what do you mean by \"allocating a new one each time\"?","user":"UH24GRBLL","ts":"1615532955.438000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Km9T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what do you mean by \"allocating a new one each time\"?"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"2173d1ec-1438-4dca-b8cd-201e51351db3","type":"message","text":"what do you want to do with the memory? who is supposed to free it? who will access it (julia/C)?","user":"UH24GRBLL","ts":"1615533687.438300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yWbe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what do you want to do with the memory? who is supposed to free it? who will access it (julia/C)?"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"b254d626-bbf1-4b8d-abc0-e57b71e6c99f","type":"message","text":"I'm calling a library function that takes a pointer to a pointer and sets the pointed-to-pointer to point to a data structure that lives in memory that the library manages.  I call this function many times.  I could use `unsafe_load`to copy the contents of the data structure pointed to by the pointer into a (presumably) newly allocated Julia struct that I wrote that matches the memory layout  of the library data structure, but that allocates a new instance of my struct on each call.  I don't need to all of these instances to persist as separate instances.  I would prefer to reuse one instance over and over ~so that each call to the Julia method wrapping the library function~.  I would like to pass a preallocated instance of my struct to the Julia method and have the method fill it in with the values from the data structure pointed to by the pointer supplied by the library function.","user":"U01FKQQ7J0J","ts":"1615536932.441900","team":"T68168MUP","edited":{"user":"U01FKQQ7J0J","ts":"1615537297.000000"},"blocks":[{"type":"rich_text","block_id":"R75","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm calling a library function that takes a pointer to a pointer and sets the pointed-to-pointer to point to a data structure that lives in memory that the library manages.  I call this function many times.  I could use "},{"type":"text","text":"unsafe_load","style":{"code":true}},{"type":"text","text":"to copy the contents of the data structure pointed to by the pointer into a (presumably) newly allocated Julia struct that I wrote that matches the memory layout  of the library data structure, but that allocates a new instance of my struct on each call.  I don't need to all of these instances to persist as separate instances.  I would prefer to reuse one instance over and over "},{"type":"text","text":"so that each call to the Julia method wrapping the library function","style":{"strike":true}},{"type":"text","text":".  I would like to pass a preallocated instance of my struct to the Julia method and have the method fill it in with the values from the data structure pointed to by the pointer supplied by the library function."}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"6d43d479-582b-462f-aa14-762d5fb7fb8c","type":"message","text":"&gt; lives in memory that the library manages.\nThen why are you trying to make the GC aware of the memory?","user":"UH24GRBLL","ts":"1615537565.442200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gFz","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"lives in memory that the library manages."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nThen why are you trying to make the GC aware of the memory?"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"ae1ed89d-a876-4382-a74a-f806237de53b","type":"message","text":"What you're describing would result in both julia and C saying \"no, I manage this\"","user":"UH24GRBLL","ts":"1615537588.442400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"72/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What you're describing would result in both julia and C saying \"no, I manage this\""}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"74cb5dbd-20a0-4c67-9e7d-b23899796a08","type":"message","text":"If C allocates &amp; manages the memory, just define the struct according to the equivalences (<https://docs.julialang.org/en/v1/manual/calling-c-and-fortran-code/#mapping-c-types-to-julia>) and let `ccall` give you the memory in a way julia understands to be handled by C","user":"UH24GRBLL","ts":"1615537718.442600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VXTh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If C allocates & manages the memory, just define the struct according to the equivalences ("},{"type":"link","url":"https://docs.julialang.org/en/v1/manual/calling-c-and-fortran-code/#mapping-c-types-to-julia"},{"type":"text","text":") and let "},{"type":"text","text":"ccall","style":{"code":true}},{"type":"text","text":" give you the memory in a way julia understands to be handled by C"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"5ef3cede-7bc3-4ecb-91ae-441573f1c399","type":"message","text":"I want to copy the contents from library-managed memory to Julia-managed memory.","user":"U01FKQQ7J0J","ts":"1615537805.442800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Z5e","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I want to copy the contents from library-managed memory to Julia-managed memory."}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"b66b3de7-8846-4cc9-bbc8-81e29c6fcf23","type":"message","text":"Ok","user":"UH24GRBLL","ts":"1615538109.443000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5TBWA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"b28a8ed9-85d7-4eea-933e-14f9e99313f9","type":"message","text":"to answer your question: yes, this is how `unsafe_copyto!` is supposed to work","user":"UH24GRBLL","ts":"1615538124.443200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Cu/P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"to answer your question: yes, this is how "},{"type":"text","text":"unsafe_copyto!","style":{"code":true}},{"type":"text","text":" is supposed to work"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"7568d0ed-33d0-4f90-ac4b-243bd84b8ee5","type":"message","text":"what you're looking for is probably this:\n\n```julia&gt; unsafe_copyto!(Ptr{UInt8}(pf2), Ptr{UInt8}(pf1), sizeof(Foo))\nPtr{UInt8} @0x00007f1708a7ce50                                      \n                                                                    \njulia&gt; f2                                                           \nFoo(1, 2)                                                           ```","user":"UH24GRBLL","ts":"1615538210.443400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"I=T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what you're looking for is probably this:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> unsafe_copyto!(Ptr{UInt8}(pf2), Ptr{UInt8}(pf1), sizeof(Foo))\nPtr{UInt8} @0x00007f1708a7ce50                                      \n                                                                    \njulia> f2                                                           \nFoo(1, 2)                                                           "}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"7c64d37f-ff38-4956-a59b-9834974267ac","type":"message","text":"note that this may not work as expected if there are pointers in `Foo` and you wish to copy their contents as well","user":"UH24GRBLL","ts":"1615538249.443600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"spY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"note that this may not work as expected if there are pointers in "},{"type":"text","text":"Foo","style":{"code":true}},{"type":"text","text":" and you wish to copy their contents as well"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"515ae407-e0c9-4472-ac4a-94b712310f41","type":"message","text":"It's only ints of various sizes","user":"U01FKQQ7J0J","ts":"1615538271.443800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+/2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's only ints of various sizes"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"74d51098-6733-4872-9cd4-25a5a7e9c40c","type":"message","text":"May I ask why you want to copy the memory provided by the library in the first place?","user":"UH24GRBLL","ts":"1615538271.444000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"172","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"May I ask why you want to copy the memory provided by the library in the first place?"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"790bda1c-f7bb-4739-90d5-9868de248d42","type":"message","text":"If performance is the reason, not copying seems preferrable","user":"UH24GRBLL","ts":"1615538413.444200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MMHD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If performance is the reason, not copying seems preferrable"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"71943f50-a5db-477d-84cd-d1ac3eb9970b","type":"message","text":"I agree that having some structure that I could \"re-aim\" to different memory locations would be ideal, but there's not an `unsafe_wrap!` so that would allocate a new Array every call.","user":"U01FKQQ7J0J","ts":"1615538505.444500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3Kr2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I agree that having some structure that I could \"re-aim\" to different memory locations would be ideal, but there's not an "},{"type":"text","text":"unsafe_wrap!","style":{"code":true}},{"type":"text","text":" so that would allocate a new Array every call."}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"4d9f666a-21f8-4ac1-8482-3b958cfcba00","type":"message","text":"I think using `sizeof(Foo)` is too big.\n```ulia&gt; unsafe_copyto!(pf2, pf1, 2)\nPtr{Foo} @0x00007fbe18d41a10\n\njulia&gt; f2\nFoo(1, 2)```","user":"U01FKQQ7J0J","ts":"1615538594.444700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qQsv8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think using "},{"type":"text","text":"sizeof(Foo)","style":{"code":true}},{"type":"text","text":" is too big.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"ulia> unsafe_copyto!(pf2, pf1, 2)\nPtr{Foo} @0x00007fbe18d41a10\n\njulia> f2\nFoo(1, 2)"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"c74199d3-44eb-45d5-acce-36407b84d2ff","type":"message","text":"why would it be?","user":"UH24GRBLL","ts":"1615538614.444900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"t//","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"why would it be?"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"493cc0aa-f22b-459c-baba-d81a6198c920","type":"message","text":"ah, yes","user":"UH24GRBLL","ts":"1615538630.445100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oKZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah, yes"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"83deeaec-4b6e-447d-b89a-b52f2ded5ca3","type":"message","text":"it should be `sizeof(Foo)÷8`","user":"UH24GRBLL","ts":"1615538648.445300","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1615538671.000000"},"blocks":[{"type":"rich_text","block_id":"sAv8g","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it should be "},{"type":"text","text":"sizeof(Foo)÷8","style":{"code":true}}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"53b868cc-8996-4990-9c41-c24bcd149761","type":"message","text":"`n` ends up getting multipled by the size of a pointer (8 in my case)","user":"U01FKQQ7J0J","ts":"1615538673.445600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L4OdI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"n","style":{"code":true}},{"type":"text","text":" ends up getting multipled by the size of a pointer (8 in my case)"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"4a45f845-18bd-49ed-8ea8-735ed4ef1903","type":"message","text":"maybe `sizeof(Foo)÷sizeof(Ptr)`","user":"U01FKQQ7J0J","ts":"1615538719.445800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EoOw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"maybe "},{"type":"text","text":"sizeof(Foo)÷sizeof(Ptr)","style":{"code":true}}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"bdf6a5ae-5ccc-42be-8943-1655f6af8bd3","type":"message","text":"I've converted to `Ptr{UInt8}` for `unsafe_copyto!`, so `sizeof(Foo)÷8` would be appropriate","user":"UH24GRBLL","ts":"1615538722.446000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+Pohd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I've converted to "},{"type":"text","text":"Ptr{UInt8}","style":{"code":true}},{"type":"text","text":" for "},{"type":"text","text":"unsafe_copyto!","style":{"code":true}},{"type":"text","text":", so "},{"type":"text","text":"sizeof(Foo)÷8","style":{"code":true}},{"type":"text","text":" would be appropriate"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"9ee9f2e8-030f-418b-9753-2cc893b2905f","type":"message","text":"it makes sense to do everything in byte sized chunks since that's what `unsafe_copyto!` thinks in as well","user":"UH24GRBLL","ts":"1615538761.446200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UVrVP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it makes sense to do everything in byte sized chunks since that's what "},{"type":"text","text":"unsafe_copyto!","style":{"code":true}},{"type":"text","text":" thinks in as well"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"9c4c418c-84eb-4289-b786-cab2e2377f33","type":"message","text":"as you noticed yourself, the size `unsafe_copyto!` thinks in is not dependent on `Ptr`, but on the `T` of `Prt{T}` - if that is aligned differently than `Ptr`, you'd get offsets","user":"UH24GRBLL","ts":"1615538917.446400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KHtj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"as you noticed yourself, the size "},{"type":"text","text":"unsafe_copyto!","style":{"code":true}},{"type":"text","text":" thinks in is not dependent on "},{"type":"text","text":"Ptr","style":{"code":true}},{"type":"text","text":", but on the "},{"type":"text","text":"T","style":{"code":true}},{"type":"text","text":" of "},{"type":"text","text":"Prt{T}","style":{"code":true}},{"type":"text","text":" - if that is aligned differently than "},{"type":"text","text":"Ptr","style":{"code":true}},{"type":"text","text":", you'd get offsets"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"9fbe26d5-9146-4937-afb1-30a36fb670bb","type":"message","text":"Yeah, I think the problem/situation is that if `!isbitsunion(T) &amp;&amp; !allocatedinline(T)` then `unsafe_copyto!` works (somewhat unexpectedly, IMHO) in units of `sizeof(Ptr{Cvoid})` rather than `sizeof(T)`","user":"U01FKQQ7J0J","ts":"1615539318.446600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oDi8J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, I think the problem/situation is that if "},{"type":"text","text":"!isbitsunion(T) && !allocatedinline(T)","style":{"code":true}},{"type":"text","text":" then "},{"type":"text","text":"unsafe_copyto!","style":{"code":true}},{"type":"text","text":" works (somewhat unexpectedly, IMHO) in units of "},{"type":"text","text":"sizeof(Ptr{Cvoid})","style":{"code":true}},{"type":"text","text":" rather than "},{"type":"text","text":"sizeof(T)","style":{"code":true}}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"382354df-f3e9-45d5-bccd-737341a7e622","type":"message","text":"Your idea of converting to `Ptr{UInt8}` and using `sizeof(Foo)` does the trick\n```julia&gt; pf1=Ptr{UInt8}(pointer_from_objref(f1))\nPtr{UInt8} @0x00007fbe18cc0590\n\njulia&gt; pf2=Ptr{UInt8}(pointer_from_objref(f2))\nPtr{UInt8} @0x00007fbe18d41a10\n\njulia&gt; unsafe_copyto!(pf2, pf1, sizeof(Foo))\nPtr{UInt8} @0x00007fbe18d41a10\n\njulia&gt; f2\nFoo(1, 2)```\nThanks!","user":"U01FKQQ7J0J","ts":"1615539510.446800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hycn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Your idea of converting to "},{"type":"text","text":"Ptr{UInt8}","style":{"code":true}},{"type":"text","text":" and using `sizeof(Foo)` does the trick\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> pf1=Ptr{UInt8}(pointer_from_objref(f1))\nPtr{UInt8} @0x00007fbe18cc0590\n\njulia> pf2=Ptr{UInt8}(pointer_from_objref(f2))\nPtr{UInt8} @0x00007fbe18d41a10\n\njulia> unsafe_copyto!(pf2, pf1, sizeof(Foo))\nPtr{UInt8} @0x00007fbe18d41a10\n\njulia> f2\nFoo(1, 2)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks!"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"aae8e6e9-277a-40ac-94cc-21388b88306c","type":"message","text":"still, I'd recommend not copying the memory in the first place - presumably, the library sets values in the background (since you made your struct mutable, I assume)","user":"UH24GRBLL","ts":"1615540105.447000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"48Gw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"still, I'd recommend not copying the memory in the first place - presumably, the library sets values in the background (since you made your struct mutable, I assume)"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"1c321728-00a0-4350-8472-e6e856f4fb82","type":"message","text":"From the documentation of `unsafe_copyto!` I agree with you, please file an issue so we can either straighten out the documentation or fix the behaviour.","user":"UH24GRBLL","ts":"1615540146.447200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5=V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"From the documentation of "},{"type":"text","text":"unsafe_copyto!","style":{"code":true}},{"type":"text","text":" I agree with you, please file an issue so we can either straighten out the documentation or fix the behaviour."}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J","reactions":[{"name":"+1","users":["U01FKQQ7J0J"],"count":1}]},{"client_msg_id":"ee3676eb-cc0e-4252-a2c9-a459bf3eada4","type":"message","text":"I'd love to not copy the memory, but how to do that without ~copying~allocating?  I think allocating is worse than copying as it's a small structure and likely in cache.","user":"U01FKQQ7J0J","ts":"1615540354.447400","team":"T68168MUP","edited":{"user":"U01FKQQ7J0J","ts":"1615540396.000000"},"blocks":[{"type":"rich_text","block_id":"yE171","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'd love to not copy the memory, but how to do that without "},{"type":"text","text":"copying","style":{"strike":true}},{"type":"text","text":"allocating?  I think allocating is worse than copying as it's a small structure and likely in cache."}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"f67be8e8-38ba-443b-909c-56014bea87f5","type":"message","text":"You can always have a `::Ptr{Foo}` in your main struct","user":"UH24GRBLL","ts":"1615540401.447800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"001","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can always have a "},{"type":"text","text":"::Ptr{Foo}","style":{"code":true}},{"type":"text","text":" in your main struct"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"26f93dce-1c28-419a-ba5a-53ea5fd4c271","type":"message","text":"and then pass a `Ptr` to that to your library","user":"UH24GRBLL","ts":"1615540409.448000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YVFm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and then pass a "},{"type":"text","text":"Ptr","style":{"code":true}},{"type":"text","text":" to that to your library"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"d5d71ab8-c3aa-44c6-acea-6888ba799248","type":"message","text":"you'll have to make sure though that the `Foo` is finalized by the library when the main struct is GC'd","user":"UH24GRBLL","ts":"1615540487.448200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AhKCX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you'll have to make sure though that the "},{"type":"text","text":"Foo","style":{"code":true}},{"type":"text","text":" is finalized by the library when the main struct is GC'd"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"d22b4b36-531c-409c-83cc-65bebf93b390","type":"message","text":"Sure, but what about dereferencing to access the fields?  Make functions that deference individual fields on the fly?","user":"U01FKQQ7J0J","ts":"1615540514.448400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6MOS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sure, but what about dereferencing to access the fields?  Make functions that deference individual fields on the fly?"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"8d4f8b10-7077-403b-b310-7e55f70e9d67","type":"message","text":"Unfortunately, it's not an opaque structure","user":"U01FKQQ7J0J","ts":"1615540603.448600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"X5y7e","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Unfortunately, it's not an opaque structure"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"type":"message","subtype":"bot_message","text":"Hey <@U01FKQQ7J0J>, if you were able to find an answer here on Slack, please cross post it to Discourse via the link above. Thank you! ","ts":"1615540658.448800","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"a0f9bc0a-32c1-43d7-b9c1-73428679f492","type":"message","text":"what do you mean? does the size/number of fields of the data change?","user":"UH24GRBLL","ts":"1615540744.449000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"14V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what do you mean? does the size/number of fields of the data change?"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"ae49dfa1-ee82-4d77-b8d9-5f83faedae5a","type":"message","text":"No, the size/layout of the structure is fixed.  If I have a `Ptr{Foo}`, how do I get to the underlying `a` and `b` fields?  I guess `unsafe_load` of an `isbits` type won't allocate, so I could write \"accessor\" methods for each field (they are all isbits) that call `unsafe_load`","user":"U01FKQQ7J0J","ts":"1615540973.449200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=ST/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No, the size/layout of the structure is fixed.  If I have a "},{"type":"text","text":"Ptr{Foo}","style":{"code":true}},{"type":"text","text":", how do I get to the underlying "},{"type":"text","text":"a","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"b","style":{"code":true}},{"type":"text","text":" fields?  I guess "},{"type":"text","text":"unsafe_load","style":{"code":true}},{"type":"text","text":" of an "},{"type":"text","text":"isbits","style":{"code":true}},{"type":"text","text":" type won't allocate, so I could write \"accessor\" methods for each field (they are all isbits) that call "},{"type":"text","text":"unsafe_load","style":{"code":true}}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"5a50d4b6-e91e-4482-9782-54b970a1b796","type":"message","text":"ah, I understand","user":"UH24GRBLL","ts":"1615541063.449400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PLY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah, I understand"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"463a6d8c-a46c-4cc8-b551-dddb3f499df6","type":"message","text":"yes, that's an option","user":"UH24GRBLL","ts":"1615541105.449600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"r4bJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, that's an option"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"66168db7-0696-4d34-b8a7-6f3774d43488","type":"message","text":"by the way, as far as I can tell, the allocation happens mostly because you declared the struct as `mutable`","user":"UH24GRBLL","ts":"1615541156.449800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NlCP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"by the way, as far as I can tell, the allocation happens mostly because you declared the struct as "},{"type":"text","text":"mutable","style":{"code":true}}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"3e711a87-4280-4eb5-b94c-cd56eaee75b3","type":"message","text":"I think it has to be mutable to use it with `Ptr`","user":"U01FKQQ7J0J","ts":"1615541183.450000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ETs4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think it has to be mutable to use it with "},{"type":"text","text":"Ptr","style":{"code":true}}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"4114636f-9678-4b7a-911f-7a93db26448e","type":"message","text":"not that I know of","user":"UH24GRBLL","ts":"1615541290.450200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VddLs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not that I know of"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"c4e01c7e-c4e2-466e-a69c-91a56b52fcd2","type":"message","text":"Yeah, I was mistaken! I can use immutable structs with `Ptr`.","user":"U01FKQQ7J0J","ts":"1615541319.450400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h9AA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, I was mistaken! I can use immutable structs with "},{"type":"text","text":"Ptr","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"f3e242dd-b773-4372-b9e6-392e0918a58a","type":"message","text":"They can't be used with `pointer_from_objref`. I had misremembered and/or hadn't fully appreciated the distinction.","user":"U01FKQQ7J0J","ts":"1615541434.450600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ke3BQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"They can't be used with "},{"type":"text","text":"pointer_from_objref","style":{"code":true}},{"type":"text","text":". I had misremembered and/or hadn't fully appreciated the distinction."}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"e5761827-b19d-416f-ae53-753360997c10","type":"message","text":"yes","user":"UH24GRBLL","ts":"1615541446.450800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gVg9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"a6b3fc6d-bf25-4d16-991b-b0902a0848b9","type":"message","text":"reason being that immutable stuff may live on the stack, from which no pointers may be taken","user":"UH24GRBLL","ts":"1615541492.451000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O8o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"reason being that immutable stuff may live on the stack, from which no pointers may be taken"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"fd09480e-b863-41fc-ba92-ed4a0559b958","type":"message","text":"shouldn't be an issue if the memory is managed by C anyway though","user":"UH24GRBLL","ts":"1615541513.451200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TJl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"shouldn't be an issue if the memory is managed by C anyway though"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"3549346f-ff5d-47a3-8aa2-3be69d2ba9bb","type":"message","text":"do you plan to mutate `Foo`?","user":"UH24GRBLL","ts":"1615541525.451400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qtSyZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"do you plan to mutate "},{"type":"text","text":"Foo","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"25d9741c-a66b-4914-b88d-3c506fb8e767","type":"message","text":"No","user":"U01FKQQ7J0J","ts":"1615541533.451600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L4Zk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"31da90a1-1c41-4931-b388-d81f2370360a","type":"message","text":"But even with immutable structs, where does the immutable struct come from that `unsafe_load` returns?","user":"U01FKQQ7J0J","ts":"1615541605.451800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wOeJv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But even with immutable structs, where does the immutable struct come from that `unsafe_load` returns?"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"c4420ba3-8272-40dc-bab0-9ce927d64016","type":"message","text":"hm, I think I was mistaken","user":"UH24GRBLL","ts":"1615541786.452100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7qY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hm, I think I was mistaken"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"41a9af10-fec5-4bf2-9208-46256d015377","type":"message","text":"or was I? I think I'd need some C code to actually test this out","user":"UH24GRBLL","ts":"1615541805.452300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XDG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or was I? I think I'd need some C code to actually test this out"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"05cf5967-3c1f-4146-bd72-b35fac8a0a54","type":"message","text":"It looks like it allocates:\n```julia&gt; struct Fubar\n       a::UInt64\n       b::UInt64\n       end\n\njulia&gt; pf1=Ptr{Fubar}(pointer_from_objref(f1))\nPtr{Fubar} @0x00007fbe18cc0590\n\njulia&gt; unsafe_load(pf1)\nFubar(0x0000000000000001, 0x0000000000000002)\n\njulia&gt; @time unsafe_load(pf1)\n  0.000002 seconds (1 allocation: 32 bytes)\nFubar(0x0000000000000001, 0x0000000000000002)```","user":"U01FKQQ7J0J","ts":"1615541934.452500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nHX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It looks like it allocates:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> struct Fubar\n       a::UInt64\n       b::UInt64\n       end\n\njulia> pf1=Ptr{Fubar}(pointer_from_objref(f1))\nPtr{Fubar} @0x00007fbe18cc0590\n\njulia> unsafe_load(pf1)\nFubar(0x0000000000000001, 0x0000000000000002)\n\njulia> @time unsafe_load(pf1)\n  0.000002 seconds (1 allocation: 32 bytes)\nFubar(0x0000000000000001, 0x0000000000000002)"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"d0510761-c336-48f7-a038-bebe113496db","type":"message","text":"you can also check `@allocated`","user":"UH24GRBLL","ts":"1615542214.452700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GpPM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can also check "},{"type":"text","text":"@allocated","style":{"code":true}}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"c9d48eaf-5da0-40bd-b403-089e2920a2c0","type":"message","text":"```julia&gt; @allocated unsafe_load(pf1)\n32```","user":"U01FKQQ7J0J","ts":"1615542258.452900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Tgd","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @allocated unsafe_load(pf1)\n32"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"913967a4-a0ac-4d13-af09-229bf2f53879","type":"message","text":"which version are you on?","user":"UH24GRBLL","ts":"1615542264.453100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UH6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which version are you on?"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"3aec7b87-8075-45c0-9e9d-10319f512521","type":"message","text":"1.5.3","user":"U01FKQQ7J0J","ts":"1615542268.453300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GWz9s","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"1.5.3"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"519f9bd3-b682-4756-b54e-cf902e39950b","type":"message","text":"ah","user":"UH24GRBLL","ts":"1615542274.453500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QUF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"278e52ef-d737-4026-9057-caf6a6397ae4","type":"message","text":"```julia&gt; pf1 = pointer_from_objref(f1)                          \nERROR: pointer_from_objref cannot be used on immutable objects```","user":"UH24GRBLL","ts":"1615542280.453700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hpd","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> pf1 = pointer_from_objref(f1)                          \nERROR: pointer_from_objref cannot be used on immutable objects"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"5563cdb0-c9cf-41bf-a897-a3dc1fc92779","type":"message","text":"on 1.6","user":"UH24GRBLL","ts":"1615542282.453900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w4uBH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"on 1.6"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"3159ce0a-7f74-413d-ae82-b2c1addf4241","type":"message","text":"as it should be :)","user":"UH24GRBLL","ts":"1615542286.454100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"e2HN7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"as it should be :)"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"579e162f-8744-4c45-afee-97d907bcacf7","type":"message","text":"that's why I mentioned that I'd need C code to test this properly","user":"UH24GRBLL","ts":"1615542302.454300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ll/Nx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's why I mentioned that I'd need C code to test this properly"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"b986f317-17ed-4a4b-a165-1fcdc8de612c","type":"message","text":"`f1` is a `Foo`","user":"U01FKQQ7J0J","ts":"1615542319.454500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PDop","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"f1","style":{"code":true}},{"type":"text","text":" is a "},{"type":"text","text":"Foo","style":{"code":true}}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"da69b616-6ae7-4442-ba87-80edbadbcb18","type":"message","text":"I think it may work, but it would be very dangerous territory","user":"UH24GRBLL","ts":"1615542345.454700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Uela","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think it may work, but it would be very dangerous territory"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"8b430da3-9e03-4bd9-82fb-66b4759ef8d3","type":"message","text":"so keeping it mutable would probably be best","user":"UH24GRBLL","ts":"1615542354.454900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ye3N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so keeping it mutable would probably be best"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"11cd2079-11f5-4ae4-b8c0-ec73f502c51b","type":"message","text":"I used `pf1=Ptr{Fubar}(rpointer_from_objref(f1::Foo))`","user":"U01FKQQ7J0J","ts":"1615542406.455100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uvuK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I used "},{"type":"text","text":"pf1=Ptr{Fubar}(rpointer_from_objref(f1::Foo))","style":{"code":true}}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"d8afc416-3485-46d5-b0d5-f6f0457ec3ba","type":"message","text":"yeah","user":"UH24GRBLL","ts":"1615542461.455300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Oxl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"5d928e75-0034-4fba-b163-d148244ea946","type":"message","text":"in any case, `unsafe_load(convert(Ptr{UInt64}, pf1), 1)` should work in the context of your program","user":"UH24GRBLL","ts":"1615542486.455500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AXD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in any case, "},{"type":"text","text":"unsafe_load(convert(Ptr{UInt64}, pf1), 1)","style":{"code":true}},{"type":"text","text":" should work in the context of your program"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"7c58a57c-aaa3-4e4b-81b7-06654f8b128e","type":"message","text":"the allocation may also come from the fact the `pf1` is a non-const global variable here","user":"UH24GRBLL","ts":"1615542503.455700","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1615542512.000000"},"blocks":[{"type":"rich_text","block_id":"U=pHe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the allocation may also come from the fact the "},{"type":"text","text":"pf1","style":{"code":true}},{"type":"text","text":" is a non-const global variable here"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"63fec382-e9fc-4904-bcb6-248b48593156","type":"message","text":"```julia&gt; const pf = Ptr{Fubar}(pointer_from_objref(f1))\nPtr{Fubar} @0x00007fa26e6a0950                       \n                                                     \njulia&gt; @allocated unsafe_load(pf)                    \n0                                                    ```","user":"UH24GRBLL","ts":"1615542593.456000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"i83","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> const pf = Ptr{Fubar}(pointer_from_objref(f1))\nPtr{Fubar} @0x00007fa26e6a0950                       \n                                                     \njulia> @allocated unsafe_load(pf)                    \n0                                                    "}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"648723b6-3bd4-4854-a28a-5e450b64af56","type":"message","text":"I was going to say: I think `unsafe_load(p::Ptr{T})`  has to allocate when `T&lt;:DataType`","user":"U01FKQQ7J0J","ts":"1615542646.456200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/6ma","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I was going to say: I think "},{"type":"text","text":"unsafe_load(p::Ptr{T})","style":{"code":true}},{"type":"text","text":"  has to allocate when "},{"type":"text","text":"T<:DataType","style":{"code":true}}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"a8f5dd70-ef48-4409-8472-9b1ee97ca14f","type":"message","text":"nah","user":"UH24GRBLL","ts":"1615542661.456400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FaE4A","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"nah"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"2431301c-2977-4089-a74d-1e9b782db07f","type":"message","text":"```julia&gt; f1                                 \nFoo(1, 2)                                 \n                                          \njulia&gt; const pf2 = pointer_from_objref(f1)\nPtr{Nothing} @0x00007fa26e6a0950          \n                                          \njulia&gt; @allocated unsafe_load(pf2)        \n0                                         ```","user":"UH24GRBLL","ts":"1615542664.456600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"m7F7","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> f1                                 \nFoo(1, 2)                                 \n                                          \njulia> const pf2 = pointer_from_objref(f1)\nPtr{Nothing} @0x00007fa26e6a0950          \n                                          \njulia> @allocated unsafe_load(pf2)        \n0                                         "}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"46b033a4-5883-4190-bd36-3689ff319cff","type":"message","text":"But you aren't assigning the return value to anything so maybe it's not even getting called?","user":"U01FKQQ7J0J","ts":"1615542668.456800","team":"T68168MUP","edited":{"user":"U01FKQQ7J0J","ts":"1615542740.000000"},"blocks":[{"type":"rich_text","block_id":"ZT57","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But you aren't assigning the return value to anything so maybe it's not even getting called?"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"48accf2a-2ee5-43fa-ae91-bc6a0bfbf8e8","type":"message","text":"And `pf2` is `Ptr{Nothing}`","user":"U01FKQQ7J0J","ts":"1615542864.457600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c1sEY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And "},{"type":"text","text":"pf2","style":{"code":true}},{"type":"text","text":" is "},{"type":"text","text":"Ptr{Nothing}","style":{"code":true}}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"b71d5452-1900-40f8-86e2-7b36e9e1ed22","type":"message","text":"yeah, just noticed that","user":"UH24GRBLL","ts":"1615542878.458100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GJwDE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, just noticed that"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"2511e14e-2f78-4c32-906d-e161a42e0d70","type":"message","text":"you're right","user":"UH24GRBLL","ts":"1615542882.458400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xpTyz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you're right"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"8ad50073-45dc-4483-a965-14f2c3931824","type":"message","text":"```julia&gt; const pf3 = Ptr{Foo}(pointer_from_objref(f1))\nPtr{Foo} @0x00007fa26e6a0950                        \n                                                    \njulia&gt; @allocated x = unsafe_load(pf3)              \n32                                                  \n                                                    \njulia&gt; x === f1                                     \nfalse                                               ```","user":"UH24GRBLL","ts":"1615542884.458600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+UE","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> const pf3 = Ptr{Foo}(pointer_from_objref(f1))\nPtr{Foo} @0x00007fa26e6a0950                        \n                                                    \njulia> @allocated x = unsafe_load(pf3)              \n32                                                  \n                                                    \njulia> x === f1                                     \nfalse                                               "}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"9116afb5-7e64-4833-a8d5-b71e1548d72f","type":"message","text":"```julia&gt; @allocated x = unsafe_pointer_to_objref(pf3)\n0                                                  \n                                                   \njulia&gt; x                                           \nFoo(1, 2)                                          ```","user":"UH24GRBLL","ts":"1615542945.459100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kig0n","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @allocated x = unsafe_pointer_to_objref(pf3)\n0                                                  \n                                                   \njulia> x                                           \nFoo(1, 2)                                          "}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"5e7c9a19-572e-4a2d-bdc7-754513879fdb","type":"message","text":"I think that's what you wanted :)","user":"UH24GRBLL","ts":"1615542952.459300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Hi4W","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think that's what you wanted :)"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"5fac4ccf-d5f1-41f0-9045-f70d95dfc130","type":"message","text":"ah, no - that assumes the pointer is julia-heap","user":"UH24GRBLL","ts":"1615542980.459500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Tgz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah, no - that assumes the pointer is julia-heap"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"d843d51d-430e-450c-b0df-e58892327ccc","type":"message","text":"yeah, no way around `unsafe_load(convert(Ptr{UInt64}, pf1), 1)` then","user":"UH24GRBLL","ts":"1615543005.459700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8ri65","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, no way around "},{"type":"text","text":"unsafe_load(convert(Ptr{UInt64}, pf1), 1)","style":{"code":true}},{"type":"text","text":" then"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"06ebf0ae-66bc-4919-a72a-a6230f3ac442","type":"message","text":"and `unsafe_load(convert(Ptr{UInt64}, pf1)+sizeof(UInt64), 1)`, of course","user":"UH24GRBLL","ts":"1615543023.459900","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1615543047.000000"},"blocks":[{"type":"rich_text","block_id":"R=rD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and "},{"type":"text","text":"unsafe_load(convert(Ptr{UInt64}, pf1)+sizeof(UInt64), 1)","style":{"code":true}},{"type":"text","text":", of course"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"fbb41d72-f53c-488e-81dd-9a37aa9fe2c1","type":"message","text":"Thanks for all your help/ideas/diagnostics insights!  I learned a lot!!!  :til:","user":"U01FKQQ7J0J","ts":"1615543108.460200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cEx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks for all your help/ideas/diagnostics insights!  I learned a lot!!!  "},{"type":"emoji","name":"til"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"0c414432-9df0-48e8-ad3e-b3e03a038b29","type":"message","text":"you're welcome! :)","user":"UH24GRBLL","ts":"1615543390.460900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"clOC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you're welcome! :)"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"44c93fed-f485-4e61-90b0-78aee9a44aa3","type":"message","text":"I'll have to go now, but please open an issue about the `unsafe_copyto!` behaviour","user":"UH24GRBLL","ts":"1615543407.461100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lgYw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'll have to go now, but please open an issue about the "},{"type":"text","text":"unsafe_copyto!","style":{"code":true}},{"type":"text","text":" behaviour"}]}]}],"thread_ts":"1615529779.437300","parent_user_id":"U01FKQQ7J0J"}]