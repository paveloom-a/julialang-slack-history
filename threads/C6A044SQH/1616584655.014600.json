[{"client_msg_id":"bbe7cad3-6eaa-4a6a-9aaf-fddc50432478","type":"message","text":"Reducing memory allocations.\n\nI need to apply a relatively slow function `f` to the elements of a vector `x`, in which consecutive repeated elements are common. My solution is a function `map2`:\n```function map2(f::Function, x::AbstractVector)\n    res1 = f(x[1])\n    res = similar(x, typeof(res1))\n    res[1] = res1\n    for i in 2:length(x)\n        if x[i] == x[i - 1]\n            res[i] = res[i - 1]\n                else\n            res[i] = f(x[i])\n        end\n    end\n    return(res)\nend```\nRecently, I've been looking at reducing memory usage. So I ran the code with the track-allocations option set, following instructions in the <https://docs.julialang.org/en/v1/manual/profile/#Memory-allocation-analysis|manual>. On exit, this is what I see in the .mem file that's generated:\n```        - function map2(f::Function, x::AbstractVector)\n     6496     res1 = f(x[1])\n 24087392     res = similar(x, typeof(res1))\n   163232     res[1] = res1\n564798080     for i in 2:length(x)\n1950277488         if x[i] == x[i - 1]\n933153120             res[i] = res[i - 1]\n        -         else\n2825548264             res[i] = f(x[i])\n        -         end\n        -     end\n     3008     return(res)\n        - end```\nI struggle to make sense of this:\n• 0.5 GB allocated on the `for i in 2:length(x)` line??\n• 2GB at `if x[i] == x[i - 1]`??\nFacts and thoughts:\n1. In practice `x` is always of type `Vector{Float64}`\n2. I need to check that the various functions `f` that get passed to `map2` are all type stable.\n3. `map2` is getting called inside threads. Not sure if that might be muddying the waters. So I will try switching threads off.\n4. Might the `--track-allocation=user` option be generating erroneous results? Is it thought to be fully reliable?\n5. I need to do smaller-scale tests to investigate further.\nBut in the meantime does anyone have some insights?","user":"UQNDMRP35","ts":"1616584655.014600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1Lr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Reducing memory allocations.\n\nI need to apply a relatively slow function "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" to the elements of a vector "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":", in which consecutive repeated elements are common. My solution is a function "},{"type":"text","text":"map2","style":{"code":true}},{"type":"text","text":":\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function map2(f::Function, x::AbstractVector)\n    res1 = f(x[1])\n    res = similar(x, typeof(res1))\n    res[1] = res1\n    for i in 2:length(x)\n        if x[i] == x[i - 1]\n            res[i] = res[i - 1]\n                else\n            res[i] = f(x[i])\n        end\n    end\n    return(res)\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nRecently, I've been looking at reducing memory usage. So I ran the code with the track-allocations option set, following instructions in the "},{"type":"link","url":"https://docs.julialang.org/en/v1/manual/profile/#Memory-allocation-analysis","text":"manual"},{"type":"text","text":". On exit, this is what I see in the .mem file that's generated:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"        - function map2(f::Function, x::AbstractVector)\n     6496     res1 = f(x[1])\n 24087392     res = similar(x, typeof(res1))\n   163232     res[1] = res1\n564798080     for i in 2:length(x)\n1950277488         if x[i] == x[i - 1]\n933153120             res[i] = res[i - 1]\n        -         else\n2825548264             res[i] = f(x[i])\n        -         end\n        -     end\n     3008     return(res)\n        - end"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nI struggle to make sense of this:\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"0.5 GB allocated on the "},{"type":"text","text":"for i in 2:length(x)","style":{"code":true}},{"type":"text","text":" line??"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"2GB at "},{"type":"text","text":"if x[i] == x[i - 1]","style":{"code":true}},{"type":"text","text":"??"}]}],"style":"bullet","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"\nFacts and thoughts:\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In practice "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" is always of type "},{"type":"text","text":"Vector{Float64}","style":{"code":true}}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I need to check that the various functions "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" that get passed to "},{"type":"text","text":"map2","style":{"code":true}},{"type":"text","text":" are all type stable."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"map2","style":{"code":true}},{"type":"text","text":" is getting called inside threads. Not sure if that might be muddying the waters. So I will try switching threads off."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Might the "},{"type":"text","text":"--track-allocation=user","style":{"code":true}},{"type":"text","text":" option be generating erroneous results? Is it thought to be fully reliable?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I need to do smaller-scale tests to investigate further."}]}],"style":"ordered","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"\nBut in the meantime does anyone have some insights?"}]}]}],"thread_ts":"1616584655.014600","reply_count":4,"reply_users_count":2,"latest_reply":"1616585275.015300","reply_users":["UH24GRBLL","UQNDMRP35"],"is_locked":false,"subscribed":false},{"client_msg_id":"e25e95d5-ca1a-4f4f-bd33-d151e3e581ba","type":"message","text":"how did you run the profiling? if you ran it in a loop, those numbers will correspond to all iterations","user":"UH24GRBLL","ts":"1616584723.014700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZS5Nq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"how did you run the profiling? if you ran it in a loop, those numbers will correspond to all iterations"}]}]}],"thread_ts":"1616584655.014600","parent_user_id":"UQNDMRP35"},{"client_msg_id":"907a279a-a641-4dcc-b0fb-ab75d04966f2","type":"message","text":"is `f` type stable?","user":"UH24GRBLL","ts":"1616584737.014900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QEK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" type stable?"}]}]}],"thread_ts":"1616584655.014600","parent_user_id":"UQNDMRP35"},{"client_msg_id":"9782e9d9-ad39-4bd0-9864-f1ab11d70cf7","type":"message","text":"what does e.g. `@benchmark` from BenchmarkTools.jl say about allocations?","user":"UH24GRBLL","ts":"1616585154.015100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"I9z8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what does e.g. "},{"type":"text","text":"@benchmark","style":{"code":true}},{"type":"text","text":" from BenchmarkTools.jl say about allocations?"}]}]}],"thread_ts":"1616584655.014600","parent_user_id":"UQNDMRP35"},{"client_msg_id":"b744ca35-3169-4c50-a986-cf0082394474","type":"message","text":"Yes, certainly called in loops, so what surprises me is not the absolute size of the allocations but that some of the lines involve any allocation at all. Why would the line if `x[i] == x[i - 1]` allocate? `x` is `Vector{Float64}.` I think it's true to say that the various `f`s are type stable, but I do need to double-check that.","user":"UQNDMRP35","ts":"1616585275.015300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fpO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, certainly called in loops, so what surprises me is not the absolute size of the allocations but that some of the lines involve any allocation at all. Why would the line if "},{"type":"text","text":"x[i] == x[i - 1]","style":{"code":true}},{"type":"text","text":" allocate? "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" is "},{"type":"text","text":"Vector{Float64}.","style":{"code":true}},{"type":"text","text":" I think it's true to say that the various "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":"s are type stable, but I do need to double-check that."}]}]}],"thread_ts":"1616584655.014600","parent_user_id":"UQNDMRP35"}]