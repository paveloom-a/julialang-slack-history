[{"client_msg_id":"bbe7cad3-6eaa-4a6a-9aaf-fddc50432478","type":"message","text":"Reducing memory allocations.\n\nI need to apply a relatively slow function `f` to the elements of a vector `x`, in which consecutive repeated elements are common. My solution is a function `map2`:\n```function map2(f::Function, x::AbstractVector)\n    res1 = f(x[1])\n    res = similar(x, typeof(res1))\n    res[1] = res1\n    for i in 2:length(x)\n        if x[i] == x[i - 1]\n            res[i] = res[i - 1]\n                else\n            res[i] = f(x[i])\n        end\n    end\n    return(res)\nend```\nRecently, I've been looking at reducing memory usage. So I ran the code with the track-allocations option set, following instructions in the <https://docs.julialang.org/en/v1/manual/profile/#Memory-allocation-analysis|manual>. On exit, this is what I see in the .mem file that's generated:\n```        - function map2(f::Function, x::AbstractVector)\n     6496     res1 = f(x[1])\n 24087392     res = similar(x, typeof(res1))\n   163232     res[1] = res1\n564798080     for i in 2:length(x)\n1950277488         if x[i] == x[i - 1]\n933153120             res[i] = res[i - 1]\n        -         else\n2825548264             res[i] = f(x[i])\n        -         end\n        -     end\n     3008     return(res)\n        - end```\nI struggle to make sense of this:\n• 0.5 GB allocated on the `for i in 2:length(x)` line??\n• 2GB at `if x[i] == x[i - 1]`??\nFacts and thoughts:\n1. In practice `x` is always of type `Vector{Float64}`\n2. I need to check that the various functions `f` that get passed to `map2` are all type stable.\n3. `map2` is getting called inside threads. Not sure if that might be muddying the waters. So I will try switching threads off.\n4. Might the `--track-allocation=user` option be generating erroneous results? Is it thought to be fully reliable?\n5. I need to do smaller-scale tests to investigate further.\nBut in the meantime does anyone have some insights?","user":"UQNDMRP35","ts":"1616584655.014600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1Lr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Reducing memory allocations.\n\nI need to apply a relatively slow function "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" to the elements of a vector "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":", in which consecutive repeated elements are common. My solution is a function "},{"type":"text","text":"map2","style":{"code":true}},{"type":"text","text":":\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function map2(f::Function, x::AbstractVector)\n    res1 = f(x[1])\n    res = similar(x, typeof(res1))\n    res[1] = res1\n    for i in 2:length(x)\n        if x[i] == x[i - 1]\n            res[i] = res[i - 1]\n                else\n            res[i] = f(x[i])\n        end\n    end\n    return(res)\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nRecently, I've been looking at reducing memory usage. So I ran the code with the track-allocations option set, following instructions in the "},{"type":"link","url":"https://docs.julialang.org/en/v1/manual/profile/#Memory-allocation-analysis","text":"manual"},{"type":"text","text":". On exit, this is what I see in the .mem file that's generated:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"        - function map2(f::Function, x::AbstractVector)\n     6496     res1 = f(x[1])\n 24087392     res = similar(x, typeof(res1))\n   163232     res[1] = res1\n564798080     for i in 2:length(x)\n1950277488         if x[i] == x[i - 1]\n933153120             res[i] = res[i - 1]\n        -         else\n2825548264             res[i] = f(x[i])\n        -         end\n        -     end\n     3008     return(res)\n        - end"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nI struggle to make sense of this:\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"0.5 GB allocated on the "},{"type":"text","text":"for i in 2:length(x)","style":{"code":true}},{"type":"text","text":" line??"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"2GB at "},{"type":"text","text":"if x[i] == x[i - 1]","style":{"code":true}},{"type":"text","text":"??"}]}],"style":"bullet","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"\nFacts and thoughts:\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In practice "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" is always of type "},{"type":"text","text":"Vector{Float64}","style":{"code":true}}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I need to check that the various functions "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" that get passed to "},{"type":"text","text":"map2","style":{"code":true}},{"type":"text","text":" are all type stable."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"map2","style":{"code":true}},{"type":"text","text":" is getting called inside threads. Not sure if that might be muddying the waters. So I will try switching threads off."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Might the "},{"type":"text","text":"--track-allocation=user","style":{"code":true}},{"type":"text","text":" option be generating erroneous results? Is it thought to be fully reliable?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I need to do smaller-scale tests to investigate further."}]}],"style":"ordered","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"\nBut in the meantime does anyone have some insights?"}]}]}],"thread_ts":"1616584655.014600","reply_count":22,"reply_users_count":3,"latest_reply":"1616592324.034800","reply_users":["UH24GRBLL","UQNDMRP35","U7K185TUN"],"is_locked":false,"subscribed":false},{"client_msg_id":"e25e95d5-ca1a-4f4f-bd33-d151e3e581ba","type":"message","text":"how did you run the profiling? if you ran it in a loop, those numbers will correspond to all iterations","user":"UH24GRBLL","ts":"1616584723.014700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZS5Nq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"how did you run the profiling? if you ran it in a loop, those numbers will correspond to all iterations"}]}]}],"thread_ts":"1616584655.014600","parent_user_id":"UQNDMRP35"},{"client_msg_id":"907a279a-a641-4dcc-b0fb-ab75d04966f2","type":"message","text":"is `f` type stable?","user":"UH24GRBLL","ts":"1616584737.014900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QEK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" type stable?"}]}]}],"thread_ts":"1616584655.014600","parent_user_id":"UQNDMRP35"},{"client_msg_id":"9782e9d9-ad39-4bd0-9864-f1ab11d70cf7","type":"message","text":"what does e.g. `@benchmark` from BenchmarkTools.jl say about allocations?","user":"UH24GRBLL","ts":"1616585154.015100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"I9z8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what does e.g. "},{"type":"text","text":"@benchmark","style":{"code":true}},{"type":"text","text":" from BenchmarkTools.jl say about allocations?"}]}]}],"thread_ts":"1616584655.014600","parent_user_id":"UQNDMRP35"},{"client_msg_id":"b744ca35-3169-4c50-a986-cf0082394474","type":"message","text":"Yes, certainly called in loops, so what surprises me is not the absolute size of the allocations but that some of the lines involve any allocation at all. Why would the line if `x[i] == x[i - 1]` allocate? `x` is `Vector{Float64}.` I think it's true to say that the various `f`s are type stable, but I do need to double-check that.","user":"UQNDMRP35","ts":"1616585275.015300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fpO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, certainly called in loops, so what surprises me is not the absolute size of the allocations but that some of the lines involve any allocation at all. Why would the line if "},{"type":"text","text":"x[i] == x[i - 1]","style":{"code":true}},{"type":"text","text":" allocate? "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" is "},{"type":"text","text":"Vector{Float64}.","style":{"code":true}},{"type":"text","text":" I think it's true to say that the various "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":"s are type stable, but I do need to double-check that."}]}]}],"thread_ts":"1616584655.014600","parent_user_id":"UQNDMRP35"},{"client_msg_id":"90565557-6724-47b2-bd71-1bcd06e62b5b","type":"message","text":"I will bash on with smaller tests, using `@benchmark` and so on. Is `--track-allocation` believed to be reliable do you know?","user":"UQNDMRP35","ts":"1616585569.015500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ypo0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I will bash on with smaller tests, using "},{"type":"text","text":"@benchmark","style":{"code":true}},{"type":"text","text":" and so on. Is "},{"type":"text","text":"--track-allocation","style":{"code":true}},{"type":"text","text":" believed to be reliable do you know?"}]}]}],"thread_ts":"1616584655.014600","parent_user_id":"UQNDMRP35"},{"client_msg_id":"fcad777b-fb0c-462e-9e93-d22cd7cabcab","type":"message","text":"I'm not sure whether it's reliable in the sense of sometimes overshooting. It definitely isn't reliable in general though. See my post from here:\n<https://discourse.julialang.org/t/track-memory-allocation-not-working-correctly/57543>\n\nI have used TimerOutputs.jl for this. Regarding some more profiling you might be interested in: <https://opensourc.es/blog/benchmarking-and-profiling-julia-code/>\nI would try to run it outside the loop and compare benchmarktools allocation with the `--track-allocation` and use profiling with Profile &amp; PProf to check \"running time\" in those sections","user":"U7K185TUN","ts":"1616586403.016400","team":"T68168MUP","attachments":[{"service_name":"JuliaLang","title":"Track memory allocation not working correctly","title_link":"https://discourse.julialang.org/t/track-memory-allocation-not-working-correctly/57543","fallback":"JuliaLang: Track memory allocation not working correctly","thumb_url":"https://aws1.discourse-cdn.com/business5/uploads/julialang/original/2X/1/12829a7ba92b924d4ce81099cbf99785bee9b405.png","fields":[{"title":"Reading time","value":"1 mins :clock2:","short":true},{"title":"Likes","value":"8 :heart:","short":true}],"ts":1616164177,"from_url":"https://discourse.julialang.org/t/track-memory-allocation-not-working-correctly/57543","thumb_width":408,"thumb_height":263,"service_icon":"https://aws1.discourse-cdn.com/business5/uploads/julialang/optimized/2X/6/6ca888e296f59ca2a599807f7d5edd489e3d1829_2_180x180.png","id":1,"original_url":"https://discourse.julialang.org/t/track-memory-allocation-not-working-correctly/57543"},{"title":"Benchmarking and Profiling Julia Code","title_link":"https://opensourc.es/blog/benchmarking-and-profiling-julia-code/","text":"How to benchmark and profile your code to find spots that aren't as fast as expected?","fallback":"Benchmarking and Profiling Julia Code","thumb_url":"https://opensourc.es/assets/blog/2021-03-21-benchmarking-and-profiling-julia-code/images/cover.jpeg","ts":1616310000,"from_url":"https://opensourc.es/blog/benchmarking-and-profiling-julia-code/","thumb_width":1600,"thumb_height":1066,"service_icon":"https://opensourc.es/assets/favicon.png","service_name":"opensourc.es","id":2,"original_url":"https://opensourc.es/blog/benchmarking-and-profiling-julia-code/"}],"blocks":[{"type":"rich_text","block_id":"eRAg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not sure whether it's reliable in the sense of sometimes overshooting. It definitely isn't reliable in general though. See my post from here:\n"},{"type":"link","url":"https://discourse.julialang.org/t/track-memory-allocation-not-working-correctly/57543"},{"type":"text","text":"\n\nI have used TimerOutputs.jl for this. Regarding some more profiling you might be interested in: "},{"type":"link","url":"https://opensourc.es/blog/benchmarking-and-profiling-julia-code/"},{"type":"text","text":"\nI would try to run it outside the loop and compare benchmarktools allocation with the "},{"type":"text","text":"--track-allocation","style":{"code":true}},{"type":"text","text":" and use profiling with Profile & PProf to check \"running time\" in those sections"}]}]}],"thread_ts":"1616584655.014600","parent_user_id":"UQNDMRP35"},{"client_msg_id":"6caa1224-ab97-4ae8-a7ca-dc5abce4f909","type":"message","text":"Thanks for those links. I will have a read...","user":"UQNDMRP35","ts":"1616586684.016800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UTqy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks for those links. I will have a read..."}]}]}],"thread_ts":"1616584655.014600","parent_user_id":"UQNDMRP35"},{"client_msg_id":"16d2a21e-4daa-4f46-aeb7-f389f983fa6d","type":"message","text":"it should be reliable, but without showing us how you got those numbers, it's kind of hard to tell why you got them. It may just be that because of the way you called the function, the actual execution during profiling was full of dynamic dispatches, which incur a lot of overhead.","user":"UH24GRBLL","ts":"1616586728.017000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XPKQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it should be reliable, but without showing us how you got those numbers, it's kind of hard to tell why you got them. It may just be that because of the way you called the function, the actual execution during profiling was full of dynamic dispatches, which incur a lot of overhead."}]}]}],"thread_ts":"1616584655.014600","parent_user_id":"UQNDMRP35"},{"client_msg_id":"191d9a94-804a-4aee-97bc-89b07da671b2","type":"message","text":"for example, if for some reason `x` was type unstable because of the way it was constructed and thus `res` had an `Any` eltype, you'd incur a lot of dynamic checks everywhere","user":"UH24GRBLL","ts":"1616586809.017200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"P+Qz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"for example, if for some reason "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" was type unstable because of the way it was constructed and thus "},{"type":"text","text":"res","style":{"code":true}},{"type":"text","text":" had an "},{"type":"text","text":"Any","style":{"code":true}},{"type":"text","text":" eltype, you'd incur a lot of dynamic checks everywhere"}]}]}],"thread_ts":"1616584655.014600","parent_user_id":"UQNDMRP35","reactions":[{"name":"point_up","users":["U7K185TUN"],"count":1}]},{"client_msg_id":"d80edd8b-f678-458f-9ade-7ad275df27a3","type":"message","text":"OK, I've got lots to think about. I might even try an assert statement that the `eltype` of `x` is not `Any`, and see if that gets hit...","user":"UQNDMRP35","ts":"1616587232.017700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Z0z=w","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"OK, I've got lots to think about. I might even try an assert statement that the "},{"type":"text","text":"eltype ","style":{"code":true}},{"type":"text","text":"of "},{"type":"text","text":"x ","style":{"code":true}},{"type":"text","text":"is not "},{"type":"text","text":"Any","style":{"code":true}},{"type":"text","text":", and see if that gets hit..."}]}]}],"thread_ts":"1616584655.014600","parent_user_id":"UQNDMRP35"},{"client_msg_id":"b1873dfb-16dc-4d37-92c9-1b6806c64cac","type":"message","text":"What happens if you put: `x::Vector{Float64}` in the definition?","user":"U7K185TUN","ts":"1616587306.017900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CX2j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What happens if you put: "},{"type":"text","text":"x::Vector{Float64}","style":{"code":true}},{"type":"text","text":" in the definition?"}]}]}],"thread_ts":"1616584655.014600","parent_user_id":"UQNDMRP35"},{"client_msg_id":"f8174095-9c74-4770-bd80-737134177bc8","type":"message","text":"Unfortunately the code breaks. That's because `x` is generally of type `Vector{Float64}` but `map2` also gets called within the objective function of a solver, in which case it's being passed `Dual` numbers (ForwardDiff is involved I think). But of course I could have two `map2` methods declared for different types of x.","user":"UQNDMRP35","ts":"1616587612.018100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=NTlJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Unfortunately the code breaks. That's because "},{"type":"text","text":"x ","style":{"code":true}},{"type":"text","text":"is generally of type "},{"type":"text","text":"Vector{Float64}","style":{"code":true}},{"type":"text","text":" but "},{"type":"text","text":"map2 ","style":{"code":true}},{"type":"text","text":"also gets called within the objective function of a solver, in which case it's being passed "},{"type":"text","text":"Dual ","style":{"code":true}},{"type":"text","text":"numbers (ForwardDiff is involved I think). But of course I could have two "},{"type":"text","text":"map2 ","style":{"code":true}},{"type":"text","text":"methods declared for different types of x."}]}]}],"thread_ts":"1616584655.014600","parent_user_id":"UQNDMRP35"},{"client_msg_id":"5ac60e12-c1f2-4291-98fe-5611bbd4bcc8","type":"message","text":"if you'd be willing to show us the profiling code, we may be able to tell you why it shows you what it shows","user":"UH24GRBLL","ts":"1616587850.021400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"u+X","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you'd be willing to show us the profiling code, we may be able to tell you why it shows you what it shows"}]}]}],"thread_ts":"1616584655.014600","parent_user_id":"UQNDMRP35"},{"client_msg_id":"e9aa3c39-845a-43aa-8059-6aa69be85f90","type":"message","text":"without that, all of our suggestions are going to be guesses at best and unhelpful at worst","user":"UH24GRBLL","ts":"1616587877.021700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tT/4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"without that, all of our suggestions are going to be guesses at best and unhelpful at worst"}]}]}],"thread_ts":"1616584655.014600","parent_user_id":"UQNDMRP35"},{"client_msg_id":"19ee3efa-1776-4859-9e4a-c0faf409d0c3","type":"message","text":"For the time being I've got some ideas to explore, prompted by some of your remarks (thanks!). The reason I'm trying to reduce memory usage is that I hope that that will lead to faster code. For example on one test, code takes 10 seconds to run, but `@allocated` tells me that 22GB of memory is allocated. I'm not certain, but I imagine that allocating that much memory would take an appreciable proportion of the run time, so reducing allocation seems like something worth trying...","user":"UQNDMRP35","ts":"1616591467.031300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=ZTD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For the time being I've got some ideas to explore, prompted by some of your remarks (thanks!). The reason I'm trying to reduce memory usage is that I hope that that will lead to faster code. For example on one test, code takes 10 seconds to run, but "},{"type":"text","text":"@allocated","style":{"code":true}},{"type":"text","text":" tells me that 22GB of memory is allocated. I'm not certain, but I imagine that allocating that much memory would take an appreciable proportion of the run time, so reducing allocation seems like something worth trying..."}]}]}],"thread_ts":"1616584655.014600","parent_user_id":"UQNDMRP35"},{"client_msg_id":"62f61861-1de7-4051-8efa-d6ecafa76cca","type":"message","text":"you're correct","user":"UH24GRBLL","ts":"1616591926.033200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8yBbW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you're correct"}]}]}],"thread_ts":"1616584655.014600","parent_user_id":"UQNDMRP35"},{"client_msg_id":"eb698ae0-58a7-43c1-8cb9-2b06202d68b0","type":"message","text":"if you check with eg `@benchmark` from BenchmarkTools.jl, it'll tell you how much time was spent doing GC","user":"UH24GRBLL","ts":"1616591963.033400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FfoM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you check with eg "},{"type":"text","text":"@benchmark","style":{"code":true}},{"type":"text","text":" from BenchmarkTools.jl, it'll tell you how much time was spent doing GC"}]}]}],"thread_ts":"1616584655.014600","parent_user_id":"UQNDMRP35"},{"client_msg_id":"b61d3f27-8ddf-4621-8f70-98e761fa21bb","type":"message","text":"32% seems to be the answer:\n```BenchmarkTools.Trial: \n  memory estimate:  21.10 GiB\n  allocs estimate:  30784137\n  --------------\n  minimum time:     9.733 s (32.36% GC)\n  median time:      9.733 s (32.36% GC)\n  mean time:        9.733 s (32.36% GC)\n  maximum time:     9.733 s (32.36% GC)\n  --------------\n  samples:          1\n  evals/sample:     1```\nBut that raises a further question, GC is (I think) time spent releasing memory previously allocated, but if i avoid allocating in the first time then I have a double time saving don't I? No time spent allocating, and no time spent releasing?","user":"UQNDMRP35","ts":"1616592215.033800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YhtN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"32% seems to be the answer:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"BenchmarkTools.Trial: \n  memory estimate:  21.10 GiB\n  allocs estimate:  30784137\n  --------------\n  minimum time:     9.733 s (32.36% GC)\n  median time:      9.733 s (32.36% GC)\n  mean time:        9.733 s (32.36% GC)\n  maximum time:     9.733 s (32.36% GC)\n  --------------\n  samples:          1\n  evals/sample:     1"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"But that raises a further question, GC is (I think) time spent releasing memory previously allocated, but if i avoid allocating in the first time then I have a double time saving don't I? No time spent allocating, and no time spent releasing?"}]}]}],"thread_ts":"1616584655.014600","parent_user_id":"UQNDMRP35"},{"client_msg_id":"2b4c4730-7734-485f-9641-3937f1192cee","type":"message","text":"in the first _place_","user":"UQNDMRP35","ts":"1616592236.034200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7uCr/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in the first "},{"type":"text","text":"place","style":{"italic":true}}]}]}],"thread_ts":"1616584655.014600","parent_user_id":"UQNDMRP35"},{"client_msg_id":"f0c2102d-79a5-4084-9669-abea7cfc8e16","type":"message","text":"precisely","user":"UH24GRBLL","ts":"1616592247.034400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"q8=z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"precisely"}]}]}],"thread_ts":"1616584655.014600","parent_user_id":"UQNDMRP35"},{"client_msg_id":"15d9fc93-3840-48b8-8ab8-d7bf32426de3","type":"message","text":"you have about 30 million allocations - that's a lot","user":"UH24GRBLL","ts":"1616592283.034600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ri=D","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you have about 30 million allocations - that's a lot"}]}]}],"thread_ts":"1616584655.014600","parent_user_id":"UQNDMRP35"},{"client_msg_id":"feeed821-feba-43c0-a886-38b6a382d0b8","type":"message","text":"maybe it's time to confess that this code is code ported from R, so not 100% Julian...","user":"UQNDMRP35","ts":"1616592324.034800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vN/5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"maybe it's time to confess that this code is code ported from R, so not 100% Julian..."}]}]}],"thread_ts":"1616584655.014600","parent_user_id":"UQNDMRP35"}]