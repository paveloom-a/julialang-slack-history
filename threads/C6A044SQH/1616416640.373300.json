[{"client_msg_id":"f9e68d24-e318-4a6a-ad89-beb66f962aca","type":"message","text":"Is it possible to promote general AbstractMatrices to a common type?","user":"U6G4M02N4","ts":"1616416640.373300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"X12","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is it possible to promote general AbstractMatrices to a common type?"}]}]}],"thread_ts":"1616416640.373300","reply_count":19,"reply_users_count":3,"latest_reply":"1616418984.377700","reply_users":["U01C3624SGJ","U6G4M02N4","U7HAYKY9X"],"subscribed":false},{"client_msg_id":"3b65fbec-5fa2-4ebf-9231-91d548f469a4","type":"message","text":"What were you expecting to happen, maybe promote isnt the best way.","user":"U01C3624SGJ","ts":"1616416790.373600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=99f","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What were you expecting to happen, maybe promote isnt the best way."}]}]}],"thread_ts":"1616416640.373300","parent_user_id":"U6G4M02N4"},{"client_msg_id":"ad19acd2-2822-4673-8567-0dc91b1a15ee","type":"message","text":"I'm writing a struct of the form\n```struct QuadPencil{T,M&lt;:AbstractMatrix{T}}\n    A0::M\n    A1::M\n    A2::M\nend```","user":"U6G4M02N4","ts":"1616416846.373800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KWOt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm writing a struct of the form\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct QuadPencil{T,M<:AbstractMatrix{T}}\n    A0::M\n    A1::M\n    A2::M\nend"}]}]}],"thread_ts":"1616416640.373300","parent_user_id":"U6G4M02N4"},{"client_msg_id":"37f54dfa-f340-48cb-95c9-b6909f8d7c12","type":"message","text":"and I want it to accept as wide a range of AbstractMatrices as possible, and have them all converted to a common wider type if necessary","user":"U6G4M02N4","ts":"1616416892.374000","team":"T68168MUP","edited":{"user":"U6G4M02N4","ts":"1616416897.000000"},"blocks":[{"type":"rich_text","block_id":"rcr4W","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and I want it to accept as wide a range of AbstractMatrices as possible, and have them all converted to a common wider type if necessary"}]}]}],"thread_ts":"1616416640.373300","parent_user_id":"U6G4M02N4"},{"client_msg_id":"b78da04c-09e9-4abd-85cf-5c9831eebb52","type":"message","text":"(in particular `Adjoint{T,M}` should be copied to an `M` type)","user":"U6G4M02N4","ts":"1616416948.374400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6FBTw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(in particular "},{"type":"text","text":"Adjoint{T,M}","style":{"code":true}},{"type":"text","text":" should be copied to an "},{"type":"text","text":"M","style":{"code":true}},{"type":"text","text":" type)"}]}]}],"thread_ts":"1616416640.373300","parent_user_id":"U6G4M02N4"},{"client_msg_id":"fbe12e80-cb24-4bda-8fc2-86ca49f2cc11","type":"message","text":"I would have thought this is a common issue in base, so I'm surprised it is not straightforward. Maybe I was being naive","user":"U6G4M02N4","ts":"1616416987.374600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bDH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I would have thought this is a common issue in base, so I'm surprised it is not straightforward. Maybe I was being naive"}]}]}],"thread_ts":"1616416640.373300","parent_user_id":"U6G4M02N4"},{"client_msg_id":"7c9eac4a-8a2e-469e-8b69-8c91bdb60bc2","type":"message","text":"You could create a constructor like\n```function QuadPencil(a,b,c) \nreturn QuadPencil(Matrix(a), Matrix(b), Matrix(c)\nend```\n","user":"U01C3624SGJ","ts":"1616417238.374800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tPYR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You could create a constructor like\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function QuadPencil(a,b,c) \nreturn QuadPencil(Matrix(a), Matrix(b), Matrix(c)\nend"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1616416640.373300","parent_user_id":"U6G4M02N4"},{"client_msg_id":"f27b9f37-ae22-41fc-ae3d-952aacb54745","type":"message","text":"yeah, well, I want to keep the code as composable as possible (e.g. with SparseArrays, GPU arrays, etc), so I don't want to force `Matrix` types","user":"U6G4M02N4","ts":"1616417297.375000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4J04w","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, well, I want to keep the code as composable as possible (e.g. with SparseArrays, GPU arrays, etc), so I don't want to force "},{"type":"text","text":"Matrix","style":{"code":true}},{"type":"text","text":" types"}]}]}],"thread_ts":"1616416640.373300","parent_user_id":"U6G4M02N4"},{"client_msg_id":"53c1e3a8-36fd-40e2-a1d2-50786164569c","type":"message","text":"Pretty sure you're looking for `convert` , not promote","user":"U7HAYKY9X","ts":"1616417357.375200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZAnQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Pretty sure you're looking for "},{"type":"text","text":"convert","style":{"code":true}},{"type":"text","text":" , not promote"}]}]}],"thread_ts":"1616416640.373300","parent_user_id":"U6G4M02N4"},{"client_msg_id":"5fa39ea4-e352-44ff-944b-77f711d2a8b8","type":"message","text":"```julia&gt; a = rand(3,3); b = rand(3,3); convert(typeof(a), b')\n3×3 Matrix{Float64}:\n 0.134126  0.336891  0.380422\n 0.65354   0.200677  0.121385\n 0.941141  0.411543  0.378205```","user":"U7HAYKY9X","ts":"1616417361.375400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"joC","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> a = rand(3,3); b = rand(3,3); convert(typeof(a), b')\n3×3 Matrix{Float64}:\n 0.134126  0.336891  0.380422\n 0.65354   0.200677  0.121385\n 0.941141  0.411543  0.378205"}]}]}],"thread_ts":"1616416640.373300","parent_user_id":"U6G4M02N4"},{"client_msg_id":"a3a252b1-c38a-46f8-9a2f-3d4c8dab9d5b","type":"message","text":"what if I want to convert to the wider type amongst three matrices?","user":"U6G4M02N4","ts":"1616417385.375600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Fdqa4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what if I want to convert to the wider type amongst three matrices?"}]}]}],"thread_ts":"1616416640.373300","parent_user_id":"U6G4M02N4"},{"client_msg_id":"76c591db-8ac5-41dd-b569-c35deb0bb4ce","type":"message","text":"It's just that how do you choose what is the wider type, i'm not sure if there is a heuristic for this for matrices","user":"U01C3624SGJ","ts":"1616417404.375800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=6M87","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's just that how do you choose what is the wider type, i'm not sure if there is a heuristic for this for matrices"}]}]}],"thread_ts":"1616416640.373300","parent_user_id":"U6G4M02N4","reactions":[{"name":"point_up","users":["U7HAYKY9X"],"count":1}]},{"client_msg_id":"48b46420-5437-4d28-82cc-92c269a5f12b","type":"message","text":"I'm beginning to realize this, yes...","user":"U6G4M02N4","ts":"1616417425.376100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yoZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm beginning to realize this, yes..."}]}]}],"thread_ts":"1616416640.373300","parent_user_id":"U6G4M02N4"},{"client_msg_id":"f1c46b8d-c5b7-49dd-9c6a-9c99e5c11961","type":"message","text":"If you know what kinds of matrices you want you could try to write new promotion rules like described here <https://docs.julialang.org/en/v1/manual/conversion-and-promotion/#Promotion>","user":"U01C3624SGJ","ts":"1616417520.376300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ese","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you know what kinds of matrices you want you could try to write new promotion rules like described here "},{"type":"link","url":"https://docs.julialang.org/en/v1/manual/conversion-and-promotion/#Promotion"}]}]}],"thread_ts":"1616416640.373300","parent_user_id":"U6G4M02N4"},{"client_msg_id":"75ac179f-68af-472e-8f7f-4b586cee17f7","type":"message","text":"yep, but I would be doing piracy, because I don't own them... I think I just need to force the user to make all matrices of the same type (or wrapped in adjoint and most)","user":"U6G4M02N4","ts":"1616417592.376500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GZU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yep, but I would be doing piracy, because I don't own them... I think I just need to force the user to make all matrices of the same type (or wrapped in adjoint and most)"}]}]}],"thread_ts":"1616416640.373300","parent_user_id":"U6G4M02N4"},{"client_msg_id":"a3446112-bc19-4dd9-8a89-ce40f9803dc6","type":"message","text":"I guess this is good enough\n```struct QuadPencil{T,M&lt;:AbstractMatrix{T}}\n    A0::M\n    A1::M\n    A2::M\nend\n\nfunction quadpencil(A0, A1, A2)\n    ptype = promote_type(eltype(A0), eltype(A1), eltype(A2))\n    A0´ = unwrap_adjoint(A0, ptype)\n    A1´ = unwrap_adjoint(A1, ptype)\n    A2´ = unwrap_adjoint(A2, ptype)\n    return QuadPencil(A0´, A1´, A2´)\nend\n\nunwrap_adjoint(A::Adjoint, ::Type{T}) where {T} = copy!(similar(A, T, size(A)), A)\nunwrap_adjoint(A::AbstractMatrix{T´}, ::Type{T}) where {T´,T} = copy!(similar(A, T, size(A)), A)\nunwrap_adjoint(A::AbstractMatrix{T}, ::Type{T}) where {T} = A```","user":"U6G4M02N4","ts":"1616418264.376700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SseVe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess this is good enough\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct QuadPencil{T,M<:AbstractMatrix{T}}\n    A0::M\n    A1::M\n    A2::M\nend\n\nfunction quadpencil(A0, A1, A2)\n    ptype = promote_type(eltype(A0), eltype(A1), eltype(A2))\n    A0´ = unwrap_adjoint(A0, ptype)\n    A1´ = unwrap_adjoint(A1, ptype)\n    A2´ = unwrap_adjoint(A2, ptype)\n    return QuadPencil(A0´, A1´, A2´)\nend\n\nunwrap_adjoint(A::Adjoint, ::Type{T}) where {T} = copy!(similar(A, T, size(A)), A)\nunwrap_adjoint(A::AbstractMatrix{T´}, ::Type{T}) where {T´,T} = copy!(similar(A, T, size(A)), A)\nunwrap_adjoint(A::AbstractMatrix{T}, ::Type{T}) where {T} = A"}]}]}],"thread_ts":"1616416640.373300","parent_user_id":"U6G4M02N4"},{"client_msg_id":"c4d19592-f6f7-4d0c-a9be-55e30622e043","type":"message","text":"If you define the promote_rule methods inside the constructor dont you limit their scope avoiding type piracy?","user":"U01C3624SGJ","ts":"1616418672.376900","team":"T68168MUP","edited":{"user":"U01C3624SGJ","ts":"1616418688.000000"},"blocks":[{"type":"rich_text","block_id":"JZSh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you define the promote_rule methods inside the constructor dont you limit their scope avoiding type piracy?"}]}]}],"thread_ts":"1616416640.373300","parent_user_id":"U6G4M02N4"},{"client_msg_id":"7d378fb5-0037-4880-bf9f-1fb4fa49c92a","type":"message","text":"Oh, that's cool, never thought of that","user":"U6G4M02N4","ts":"1616418708.377200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qCBqU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh, that's cool, never thought of that"}]}]}],"thread_ts":"1616416640.373300","parent_user_id":"U6G4M02N4"},{"client_msg_id":"7af0d3eb-f1a0-413f-b9d6-bb87868a8123","type":"message","text":"is that approach to piracy common/recommended?","user":"U6G4M02N4","ts":"1616418728.377500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6aIro","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is that approach to piracy common/recommended?"}]}]}],"thread_ts":"1616416640.373300","parent_user_id":"U6G4M02N4"},{"client_msg_id":"84d81f7b-13a5-4aa0-95bd-adbe2d12665e","type":"message","text":"I'm not sure, the problem with type piracy is that you never know what breaks outside of your module/scope and this might avoid issues but someone with more experience might comment.","user":"U01C3624SGJ","ts":"1616418984.377700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BaF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not sure, the problem with type piracy is that you never know what breaks outside of your module/scope and this might avoid issues but someone with more experience might comment."}]}]}],"thread_ts":"1616416640.373300","parent_user_id":"U6G4M02N4","reactions":[{"name":"+1","users":["U6G4M02N4"],"count":1}]}]