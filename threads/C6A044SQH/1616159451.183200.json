[{"client_msg_id":"c76606f0-b4bf-4bb3-81a9-d6f0ec77cb0e","type":"message","text":"Is there a way to give a Unitful units to an array instead than to each element individually? In my use case I load the data from file (both the numeric values and the unit) so the unit isn't known at compile time. I'm a bit worried about performance since using the usual Unitful way will result in non-inferrable element type of the whole array. On the other hand I really just want to use the unit once when plotting, so for that part performance is not critical.","user":"U017LQ3A59U","ts":"1616159451.183200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CX4V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a way to give a Unitful units to an array instead than to each element individually? In my use case I load the data from file (both the numeric values and the unit) so the unit isn't known at compile time. I'm a bit worried about performance since using the usual Unitful way will result in non-inferrable element type of the whole array. On the other hand I really just want to use the unit once when plotting, so for that part performance is not critical."}]}]}],"thread_ts":"1616159451.183200","reply_count":7,"reply_users_count":3,"latest_reply":"1616160874.189800","reply_users":["B01J9QZ4SP8","UH8A351DJ","U017LQ3A59U"],"is_locked":false,"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1616159452.183300","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1616159451.183200","parent_user_id":"U017LQ3A59U"},{"client_msg_id":"260e6209-1e6f-4918-ab8c-4625c44bff08","type":"message","text":"&gt; usual Unitful way will result in non-inferrable element type of the whole array\nexample?\n\nThe unit is encoded in the T of `Array{T}` too so it's not too inefficient","user":"UH8A351DJ","ts":"1616159817.184500","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1616159825.000000"},"blocks":[{"type":"rich_text","block_id":"LkWA6","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"usual Unitful way will result in non-inferrable element type of the whole array"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"example?\n\nThe unit is encoded in the T of "},{"type":"text","text":"Array{T}","style":{"code":true}},{"type":"text","text":" too so it's not too inefficient"}]}]}],"thread_ts":"1616159451.183200","parent_user_id":"U017LQ3A59U"},{"client_msg_id":"4ed6743a-0b94-43a3-9fd5-3c3369007f4e","type":"message","text":"```using Unitful\n\nfunction load_data()\n    unit = \"m\"  # loaded from file\n    data = rand(5)  # loaded from file\n    \n    return data * uparse(unit)\nend```\nAnd then\n```julia&gt; @code_warntype load_data()\nVariables\n  #self#::Core.Compiler.Const(load_data, false)\n  unit::String\n  data::Array{Float64,1}\n\nBody::Any\n1 ‚îÄ      (unit = \"m\")\n‚îÇ        (data = Main.rand(5))\n‚îÇ   %3 = data::Array{Float64,1}\n‚îÇ   %4 = Main.uparse(unit::Core.Compiler.Const(\"m\", false))::Any\n‚îÇ   %5 = (%3 * %4)::Any\n‚îî‚îÄ‚îÄ      return %5```","user":"U017LQ3A59U","ts":"1616160168.187600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QOs+W","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using Unitful\n\nfunction load_data()\n    unit = \"m\"  # loaded from file\n    data = rand(5)  # loaded from file\n    \n    return data * uparse(unit)\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"And then\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @code_warntype load_data()\nVariables\n  #self#::Core.Compiler.Const(load_data, false)\n  unit::String\n  data::Array{Float64,1}\n\nBody::Any\n1 ‚îÄ      (unit = \"m\")\n‚îÇ        (data = Main.rand(5))\n‚îÇ   %3 = data::Array{Float64,1}\n‚îÇ   %4 = Main.uparse(unit::Core.Compiler.Const(\"m\", false))::Any\n‚îÇ   %5 = (%3 * %4)::Any\n‚îî‚îÄ‚îÄ      return %5"}]}]}],"thread_ts":"1616159451.183200","parent_user_id":"U017LQ3A59U"},{"client_msg_id":"3c3e2533-3739-4fc8-8fd7-c52150101554","type":"message","text":"loading data from file is intrinsically not tyoe stable unless you can specify the type ahead of the time. I won't worry about type stability of loading data, you just do it once","user":"UH8A351DJ","ts":"1616160442.188300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LKZ0/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"loading data from file is intrinsically not tyoe stable unless you can specify the type ahead of the time. I won't worry about type stability of loading data, you just do it once"}]}]}],"thread_ts":"1616159451.183200","parent_user_id":"U017LQ3A59U"},{"client_msg_id":"669f8f2b-68fb-406d-85cf-dbea76d7d7ff","type":"message","text":"```julia&gt; function load_data(unit)\n           data = rand(5)  # loaded from file\n           return data * unit\n       end\nload_data (generic function with 2 methods)\n\njulia&gt; @code_typed load_data(u\"m\")\nCodeInfo(\n1 ‚îÄ %1 = invoke Random.rand(Random.Float64::Type{Float64}, (5,)::Tuple{Int64})::Vector{Float64}\n‚îÇ   %2 = invoke Unitful.broadcast(Unitful.:*::typeof(*), %1::Vector{Float64}, _2::Unitful.FreeUnits{(m,), ùêã, nothing})::Vector{Quantity{Float64, ùêã, Unitful.FreeUnits{(m,), ùêã, nothing}}}\n‚îî‚îÄ‚îÄ      return %2\n) =&gt; Vector{Quantity{Float64, ùêã, Unitful.FreeUnits{(m,), ùêã, nothing}}}```","user":"UH8A351DJ","ts":"1616160500.188500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tSY4/","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function load_data(unit)\n           data = rand(5)  # loaded from file\n           return data * unit\n       end\nload_data (generic function with 2 methods)\n\njulia> @code_typed load_data(u\"m\")\nCodeInfo(\n1 ‚îÄ %1 = invoke Random.rand(Random.Float64::Type{Float64}, (5,)::Tuple{Int64})::Vector{Float64}\n‚îÇ   %2 = invoke Unitful.broadcast(Unitful.:*::typeof(*), %1::Vector{Float64}, _2::Unitful.FreeUnits{(m,), ùêã, nothing})::Vector{Quantity{Float64, ùêã, Unitful.FreeUnits{(m,), ùêã, nothing}}}\n‚îî‚îÄ‚îÄ      return %2\n) => Vector{Quantity{Float64, ùêã, Unitful.FreeUnits{(m,), ùêã, nothing}}}"}]}]}],"thread_ts":"1616159451.183200","parent_user_id":"U017LQ3A59U"},{"client_msg_id":"c29ba468-7bd7-4962-86cb-f19e313bfe3b","type":"message","text":"this is type stable, you just need to isolate the string parsing (which is unstable by construction) and the later steps","user":"UH8A351DJ","ts":"1616160507.188700","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1616160541.000000"},"blocks":[{"type":"rich_text","block_id":"uC2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this is type stable, you just need to isolate the string parsing (which is unstable by construction) and the later steps"}]}]}],"thread_ts":"1616159451.183200","parent_user_id":"U017LQ3A59U"},{"client_msg_id":"ad7dacf1-5783-4803-8c84-adf4c91d592a","type":"message","text":"&gt; loading data from file is intrinsically not tyoe stable\nThat a very good point. My code looked well typed before I included the units only because I was cheating and I knew everything would be Float32","user":"U017LQ3A59U","ts":"1616160874.189800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gz5","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"loading data from file is intrinsically not tyoe stable"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"That a very good point. My code looked well typed before I included the units only because I was cheating and I knew everything would be Float32"}]}]}],"thread_ts":"1616159451.183200","parent_user_id":"U017LQ3A59U"}]