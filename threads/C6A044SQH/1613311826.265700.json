[{"client_msg_id":"3d9adf67-6027-437a-af9e-894f262326bc","type":"message","text":"I have seen many libraries implement interior constructors with an underscore prefixed, i.e. `global function _LowRankMatrix{T}`. Is there a particular reason for that?","user":"U01L0RJC6FM","ts":"1613311826.265700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"D+zpd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have seen many libraries implement interior constructors with an underscore prefixed, i.e. "},{"type":"text","text":"global function _LowRankMatrix{T}","style":{"code":true}},{"type":"text","text":". Is there a particular reason for that?"}]}]}],"thread_ts":"1613311826.265700","reply_count":5,"reply_users_count":4,"latest_reply":"1613312995.271700","reply_users":["B01J9QZ4SP8","U7HAYKY9X","U01L0RJC6FM","UM30MT6RF"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1613311828.265900","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1613311826.265700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"d9055c22-561e-4918-9881-3557c650b9eb","type":"message","text":"Nope. In some languages, a leading underscore signifies it's an internal function. Some people think Julia's mechanism of export is not good enough to signify this, do they use a leading underscore","user":"U7HAYKY9X","ts":"1613312387.269300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"A39J3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Nope. In some languages, a leading underscore signifies it's an internal function. Some people think Julia's mechanism of export is not good enough to signify this, do they use a leading underscore"}]}]}],"thread_ts":"1613311826.265700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"b5b7e120-a806-4587-a989-c06d24cc6bef","type":"message","text":"thanks! follow-up question: is there a reason why internal constructors should not be accessible from outside?","user":"U01L0RJC6FM","ts":"1613312609.270700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ztY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thanks! follow-up question: is there a reason why internal constructors should not be accessible from outside?"}]}]}],"thread_ts":"1613311826.265700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"9085a533-c7f7-446a-8df3-5804f510154e","type":"message","text":"If you write functions that are hard to use correctly without messing up stuff, or that you want to be able to change between versions, then it's better to mark it as \"not for use unless you know what your'e doing\"","user":"U7HAYKY9X","ts":"1613312754.271500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3nO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you write functions that are hard to use correctly without messing up stuff, or that you want to be able to change between versions, then it's better to mark it as \"not for use unless you know what your'e doing\""}]}]}],"thread_ts":"1613311826.265700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"5fa89477-5beb-4c79-be8f-1f8a48a45d0c","type":"message","text":"A common reason is that it is sometimes useful to have possibly expensive checks or normalization in the default constructor of a type, but you may still want to circumvent those in certain situations. One example is `Rational` in base, which normalizes fractions such as `2//4` directly in its constructor, but you can use `Base.unsafe_rational` to skip this if you know the fraction is already in normalized form.","user":"UM30MT6RF","ts":"1613312995.271700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uP7j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"A common reason is that it is sometimes useful to have possibly expensive checks or normalization in the default constructor of a type, but you may still want to circumvent those in certain situations. One example is "},{"type":"text","text":"Rational","style":{"code":true}},{"type":"text","text":" in base, which normalizes fractions such as "},{"type":"text","text":"2//4","style":{"code":true}},{"type":"text","text":" directly in its constructor, but you can use "},{"type":"text","text":"Base.unsafe_rational","style":{"code":true}},{"type":"text","text":" to skip this if you know the fraction is already in normalized form."}]}]}],"thread_ts":"1613311826.265700","parent_user_id":"U01L0RJC6FM"}]