[{"client_msg_id":"e93be349-40aa-44be-b43e-6cccf27bcdf7","type":"message","text":"What's the recommended way to build a large string across many calls? Given that Strings are immutable, I assume that standard concatenation using `*` will be inefficient.","user":"UEJBYC45U","ts":"1617626683.468300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"181","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What's the recommended way to build a large string across many calls? Given that Strings are immutable, I assume that standard concatenation using "},{"type":"text","text":"*","style":{"code":true}},{"type":"text","text":" will be inefficient."}]}]}],"thread_ts":"1617626683.468300","reply_count":9,"reply_users_count":3,"latest_reply":"1617632288.472600","reply_users":["U01HD5VFXJM","UM30MT6RF","U0138UTB7A4"],"is_locked":false,"subscribed":false,"reactions":[{"name":"today-i-learned","users":["U0138UTB7A4"],"count":1}]},{"client_msg_id":"38ced6a4-dab0-4e0f-9c98-895f06669b61","type":"message","text":"It depends a bit. If it's occuring in a single line x = a * b * c, that is done all in one. But if you're doing a loop or something, yeah it's inefficient.","user":"U01HD5VFXJM","ts":"1617627688.468900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ynNe/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It depends a bit. If it's occuring in a single line x = a * b * c, that is done all in one. But if you're doing a loop or something, yeah it's inefficient."}]}]}],"thread_ts":"1617626683.468300","parent_user_id":"UEJBYC45U"},{"client_msg_id":"519c6266-c319-4ddd-8ca2-d71ad1d51044","type":"message","text":"(sorry, missed the many calls bit)","user":"U01HD5VFXJM","ts":"1617627751.469100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Xu7Nk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(sorry, missed the many calls bit)"}]}]}],"thread_ts":"1617626683.468300","parent_user_id":"UEJBYC45U"},{"client_msg_id":"f3418d00-c49e-48ea-b485-19a08a34b293","type":"message","text":"I don't know if there's a preferred way, but there's a StringBuilders.jl package I found searching JuliaHub <https://juliahub.com/ui/Packages?q=string> <https://github.com/davidanthoff/StringBuilders.jl>","user":"U01HD5VFXJM","ts":"1617627860.469300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PsYU2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't know if there's a preferred way, but there's a StringBuilders.jl package I found searching JuliaHub "},{"type":"link","url":"https://juliahub.com/ui/Packages?q=string"},{"type":"text","text":" "},{"type":"link","url":"https://github.com/davidanthoff/StringBuilders.jl"}]}]}],"thread_ts":"1617626683.468300","parent_user_id":"UEJBYC45U","reactions":[{"name":"thankyou","users":["UEJBYC45U"],"count":1}]},{"client_msg_id":"672b5e1a-7bc3-4549-b90c-5b7651291b1d","type":"message","text":"I suppose writing to an IOBuffer is how one would do it otherwise.","user":"U01HD5VFXJM","ts":"1617627942.469500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6K3W","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I suppose writing to an IOBuffer is how one would do it otherwise."}]}]}],"thread_ts":"1617626683.468300","parent_user_id":"UEJBYC45U"},{"client_msg_id":"77ca5d50-10b6-41c3-9fff-13b9f12773b3","type":"message","text":"`print` to an `IOBuffer` and then use `String(take!(buf))` once you are done writing to it","user":"UM30MT6RF","ts":"1617627962.469700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MuW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"print","style":{"code":true}},{"type":"text","text":" to an "},{"type":"text","text":"IOBuffer","style":{"code":true}},{"type":"text","text":" and then use "},{"type":"text","text":"String(take!(buf))","style":{"code":true}},{"type":"text","text":" once you are done writing to it"}]}]}],"thread_ts":"1617626683.468300","parent_user_id":"UEJBYC45U","reactions":[{"name":"+1","users":["U01HD5VFXJM","U01C15GH58B"],"count":2},{"name":"thankyou","users":["UEJBYC45U"],"count":1},{"name":"today-i-learned","users":["U0138UTB7A4"],"count":1}]},{"client_msg_id":"cb389798-ca85-470a-b0ba-1cd5719cdc4b","type":"message","text":"TIL that string concat using `*` is slow! For anyone else following along, here's some simple benchmarks I did: On my machine, for N=100000 loop iterations, `*=` gives a 3.6s, `IOBuffer` gives a speedy 19.7 ms  (for N=100, only 19.0 us and 17.3 us)\n\n```@btime let\n    myStr = \"\"\n    for i in 1:N\n        myStr *= \"_$i\"\n    end\n    nothing\nend\n\n@btime let\n    io = IOBuffer()\n    for i in 1:N\n        print(io, \"_$i\")\n    end\n    myStr = String(take!(io));\n    nothing\nend```","user":"U0138UTB7A4","ts":"1617631722.471600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/fuvh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"TIL that string concat using "},{"type":"text","text":"*","style":{"code":true}},{"type":"text","text":" is slow! For anyone else following along, here's some simple benchmarks I did: On my machine, for N=100000 loop iterations, "},{"type":"text","text":"*=","style":{"code":true}},{"type":"text","text":" gives a 3.6s, "},{"type":"text","text":"IOBuffer","style":{"code":true}},{"type":"text","text":" gives a speedy 19.7 ms  (for N=100, only "},{"type":"text","text":"19.0 us","style":{"unlink":true}},{"type":"text","text":" and 17.3 us)\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@btime let\n    myStr = \"\"\n    for i in 1:N\n        myStr *= \"_$i\"\n    end\n    nothing\nend\n\n@btime let\n    io = IOBuffer()\n    for i in 1:N\n        print(io, \"_$i\")\n    end\n    myStr = String(take!(io));\n    nothing\nend"}]}]}],"thread_ts":"1617626683.468300","parent_user_id":"UEJBYC45U"},{"client_msg_id":"e2564f1c-c22f-440b-82b6-f15fb6204ca1","type":"message","text":"`print(io, \"_\", i)` should be slightly faster still, since it avoids allocating an intermediate string.","user":"UM30MT6RF","ts":"1617631855.471800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"k+uSe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"print(io, \"_\", i)","style":{"code":true}},{"type":"text","text":" should be slightly faster still, since it avoids allocating an intermediate string."}]}]}],"thread_ts":"1617626683.468300","parent_user_id":"UEJBYC45U","reactions":[{"name":"open_mouth","users":["U0138UTB7A4"],"count":1},{"name":"thankyou","users":["U0138UTB7A4"],"count":1}]},{"client_msg_id":"446de34a-5f04-4c71-89f0-a5a972a78cd4","type":"message","text":"Wow! TIL some more! It was actually even faster than I thought it would be. Here it is below.\nN = 100000\n3500 ms for `*=`\n19.2 ms for `print(io, \"_$i\")`,\n14.0 ms for `print(io, \"_\", i)`","user":"U0138UTB7A4","ts":"1617632134.472100","team":"T68168MUP","edited":{"user":"U0138UTB7A4","ts":"1617632154.000000"},"blocks":[{"type":"rich_text","block_id":"Uerf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Wow! TIL some more! It was actually even faster than I thought it would be. Here it is below.\nN = 100000\n3500 ms for "},{"type":"text","text":"*=","style":{"code":true}},{"type":"text","text":"\n19.2 ms for "},{"type":"text","text":"print(io, \"_$i\")","style":{"code":true}},{"type":"text","text":",\n14.0 ms for "},{"type":"text","text":"print(io, \"_\", i)","style":{"code":true}}]}]}],"thread_ts":"1617626683.468300","parent_user_id":"UEJBYC45U","reactions":[{"name":"+1","users":["UM30MT6RF"],"count":1}]},{"client_msg_id":"c3e30276-e888-4ca9-af92-dc6e97cf0676","type":"message","text":"```N = 100000\n  3.462 s (699489 allocations: 26.99 GiB) [using *= ]\n  19.193 ms (599508 allocations: 26.93 MiB) [using print(io, \"_$i\") ]\n  14.016 ms (399508 allocations: 14.73 MiB) [using print(io, \"_\", i)]```\n","user":"U0138UTB7A4","ts":"1617632288.472600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lki","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"N = 100000\n  3.462 s (699489 allocations: 26.99 GiB) [using *= ]\n  19.193 ms (599508 allocations: 26.93 MiB) [using print(io, \"_$i\") ]\n  14.016 ms (399508 allocations: 14.73 MiB) [using print(io, \"_\", i)]"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1617626683.468300","parent_user_id":"UEJBYC45U"}]