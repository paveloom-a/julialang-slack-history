[{"client_msg_id":"d6ca36a9-a598-44b4-8be0-a0b29ef2e152","type":"message","text":"is there a way to pass `#undef` to `new` ? I have fields which I would like to keep `#undef` ..","user":"U01L0RJC6FM","ts":"1617523067.397700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sigC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is there a way to pass "},{"type":"text","text":"#undef","style":{"code":true}},{"type":"text","text":" to "},{"type":"text","text":"new","style":{"code":true}},{"type":"text","text":" ? I have fields which I would like to keep "},{"type":"text","text":"#undef","style":{"code":true}},{"type":"text","text":" .."}]}]}],"thread_ts":"1617523067.397700","reply_count":14,"reply_users_count":2,"latest_reply":"1617524499.400600","reply_users":["U010LT79LKX","U01L0RJC6FM"],"is_locked":false,"subscribed":false},{"client_msg_id":"6195b016-59fb-49bf-9979-1213a1c1e58d","type":"message","text":"what does your struct look like?","user":"U010LT79LKX","ts":"1617523627.397800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"963","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what does your struct look like?"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"f03cb791-91d7-49ca-a986-fa85d735820f","type":"message","text":"```mutable struct HssMatrix{T&lt;:Number}\n  # toggles for the type of node\n  leafnode::Bool\n  rootnode::Bool\n\n  # fields for leaf nodes\n  D ::Matrix{T}\n  U ::Matrix{T}\n  V ::Matrix{T}\n\n  # fields for branch nodes\n  A11 ::HssMatrix{T}\n  A22 ::HssMatrix{T}\n  B12 ::Matrix{T}\n  B21 ::Matrix{T}\n\n  sz1 ::Tuple{Int, Int}\n  sz2 ::Tuple{Int, Int}\n\n  R1 ::Matrix{T}\n  W1 ::Matrix{T}\n  R2 ::Matrix{T}\n  W2 ::Matrix{T}\n\n  # internal constructors for leaf nodes\n  function HssMatrix(D::Matrix{T}) where T\n    m, n = size(D)\n    new{T}(true, true, D)\n  end\n  function HssMatrix(D::AbstractMatrix{T}, U::AbstractMatrix{T}, V::AbstractMatrix{T}) where T\n    if size(D,1) != size(U,1) throw(ArgumentError(\"D and U must have same number of rows\")) end\n    if size(D,2) != size(V,1) throw(ArgumentError(\"D and V must have same number of columns\")) end\n    new{T}(true, false, D, U, V)\n  end\n  # internal constructors for branch nodes\n  function HssMatrix(A11::HssMatrix{T}, A22::HssMatrix{T}, B12::AbstractMatrix{T}, B21::AbstractMatrix{T}) where T\n    #kr1, kw1 = gensize(A11); kr2, kw2 = gensize(A22)\n    new{T}(false, true, undef, undef, undef, A11, A22, B12, B21, size(A11), size(A22))\n  end\n  function HssMatrix(A11::HssMatrix{T}, A22::HssMatrix{T}, B12::AbstractMatrix{T}, B21::AbstractMatrix{T}, \n    R1::AbstractMatrix{T}, W1::AbstractMatrix{T}, R2::AbstractMatrix{T}, W2::AbstractMatrix{T}) where T\n    if size(R1,2) != size(R2,2) throw(DimensionMismatch(\"R1 and R2 must have same number of columns\")) end\n    if size(W1,2) != size(W2,2) throw(DimensionMismatch(\"W1 and W2 must have same number of rows\")) end\n    #kr1, kw1 = gensize(A11); kr2, kw2 = gensize(A22)\n    new{T}(false, false, undef, undef, undef, A11, A22, B12, B21, size(A11), size(A22), R1, W1, R2, W2)\n  end\nend```","user":"U01L0RJC6FM","ts":"1617523696.398000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SWkh","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"mutable struct HssMatrix{T<:Number}\n  # toggles for the type of node\n  leafnode::Bool\n  rootnode::Bool\n\n  # fields for leaf nodes\n  D ::Matrix{T}\n  U ::Matrix{T}\n  V ::Matrix{T}\n\n  # fields for branch nodes\n  A11 ::HssMatrix{T}\n  A22 ::HssMatrix{T}\n  B12 ::Matrix{T}\n  B21 ::Matrix{T}\n\n  sz1 ::Tuple{Int, Int}\n  sz2 ::Tuple{Int, Int}\n\n  R1 ::Matrix{T}\n  W1 ::Matrix{T}\n  R2 ::Matrix{T}\n  W2 ::Matrix{T}\n\n  # internal constructors for leaf nodes\n  function HssMatrix(D::Matrix{T}) where T\n    m, n = size(D)\n    new{T}(true, true, D)\n  end\n  function HssMatrix(D::AbstractMatrix{T}, U::AbstractMatrix{T}, V::AbstractMatrix{T}) where T\n    if size(D,1) != size(U,1) throw(ArgumentError(\"D and U must have same number of rows\")) end\n    if size(D,2) != size(V,1) throw(ArgumentError(\"D and V must have same number of columns\")) end\n    new{T}(true, false, D, U, V)\n  end\n  # internal constructors for branch nodes\n  function HssMatrix(A11::HssMatrix{T}, A22::HssMatrix{T}, B12::AbstractMatrix{T}, B21::AbstractMatrix{T}) where T\n    #kr1, kw1 = gensize(A11); kr2, kw2 = gensize(A22)\n    new{T}(false, true, undef, undef, undef, A11, A22, B12, B21, size(A11), size(A22))\n  end\n  function HssMatrix(A11::HssMatrix{T}, A22::HssMatrix{T}, B12::AbstractMatrix{T}, B21::AbstractMatrix{T}, \n    R1::AbstractMatrix{T}, W1::AbstractMatrix{T}, R2::AbstractMatrix{T}, W2::AbstractMatrix{T}) where T\n    if size(R1,2) != size(R2,2) throw(DimensionMismatch(\"R1 and R2 must have same number of columns\")) end\n    if size(W1,2) != size(W2,2) throw(DimensionMismatch(\"W1 and W2 must have same number of rows\")) end\n    #kr1, kw1 = gensize(A11); kr2, kw2 = gensize(A22)\n    new{T}(false, false, undef, undef, undef, A11, A22, B12, B21, size(A11), size(A22), R1, W1, R2, W2)\n  end\nend"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"8c054ea9-3bfa-4f87-936e-3942f0c6709b","type":"message","text":"basically I only either use the leaf-portion of the struct or the branch portion","user":"U01L0RJC6FM","ts":"1617523725.398200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nsF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"basically I only either use the leaf-portion of the struct or the branch portion"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"049b18a9-78fc-4698-b474-a56a288ab628","type":"message","text":"<https://docs.julialang.org/en/v1/manual/missing/>","user":"U010LT79LKX","ts":"1617523945.398600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=wm","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://docs.julialang.org/en/v1/manual/missing/"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"ceed8511-5b89-477c-a96e-7489c87cc02e","type":"message","text":"maybe this is what you are looking for?","user":"U010LT79LKX","ts":"1617523951.398800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hen","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"maybe this is what you are looking for?"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"7e74a783-6874-4d9c-b153-8eb781a7b158","type":"message","text":"not really, i am basically representing a binary tree that has to store different data if we are at a leaf node","user":"U01L0RJC6FM","ts":"1617524037.399000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"i5R30","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not really, i am basically representing a binary tree that has to store different data if we are at a leaf node"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"8fcb7d21-ad1f-49b4-9a17-cfa6f122ea0e","type":"message","text":"i had a much nicer data structure that split it into two types but that required the use of a Union type field which led to type-instabilities","user":"U01L0RJC6FM","ts":"1617524078.399200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mlrh8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i had a much nicer data structure that split it into two types but that required the use of a Union type field which led to type-instabilities"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"aaf36dbf-71bd-4377-9522-0e16762ca2ad","type":"message","text":"if all you want to do is give default values, then I would do it using `@with_kw` macro in Parameters.jl","user":"U010LT79LKX","ts":"1617524155.399400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"meGxa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if all you want to do is give default values, then I would do it using "},{"type":"text","text":"@with_kw ","style":{"code":true}},{"type":"text","text":"macro in Parameters.jl"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"1fdc2808-3725-4886-b70f-3f3f3be82d44","type":"message","text":"give everything default undef values, then you don't have to write so many constructors","user":"U010LT79LKX","ts":"1617524187.399600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9R9Ws","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"give everything default undef values, then you don't have to write so many constructors"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"33d352be-d227-4802-9b1c-ea33434f1bc0","type":"message","text":"but honestly speaking you should use the union type and try to solve the type instability","user":"U010LT79LKX","ts":"1617524252.399800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R6mI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but honestly speaking you should use the union type and try to solve the type instability"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"45669efb-2f45-4c30-a1e6-2593de7104f0","type":"message","text":"because this struct seems too big and doing too many things for its own good","user":"U010LT79LKX","ts":"1617524267.400000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x7i","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"because this struct seems too big and doing too many things for its own good"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"3cda42d4-68f4-432a-b86f-ae38981c92e0","type":"message","text":"yeah i feel the same but how? it's a recursive type so i dont see how one could achieve that","user":"U01L0RJC6FM","ts":"1617524448.400200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yq0KF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah i feel the same but how? it's a recursive type so i dont see how one could achieve that"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"0975eb07-7590-4213-86d3-6f9acdf6adee","type":"message","text":"<https://github.com/bonevbs/HssMatrices.jl/blob/main/src/hssmatrix.jl>","user":"U01L0RJC6FM","ts":"1617524479.400400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pgb","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/bonevbs/HssMatrices.jl/blob/main/src/hssmatrix.jl"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"a326466a-4cb5-4e42-9a3b-b800244b1148","type":"message","text":"this is the current definition and getproperty will always result in a type-instability","user":"U01L0RJC6FM","ts":"1617524499.400600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KL0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this is the current definition and getproperty will always result in a type-instability"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"}]