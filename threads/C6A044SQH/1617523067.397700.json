[{"client_msg_id":"d6ca36a9-a598-44b4-8be0-a0b29ef2e152","type":"message","text":"is there a way to pass `#undef` to `new` ? I have fields which I would like to keep `#undef` ..","user":"U01L0RJC6FM","ts":"1617523067.397700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sigC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is there a way to pass "},{"type":"text","text":"#undef","style":{"code":true}},{"type":"text","text":" to "},{"type":"text","text":"new","style":{"code":true}},{"type":"text","text":" ? I have fields which I would like to keep "},{"type":"text","text":"#undef","style":{"code":true}},{"type":"text","text":" .."}]}]}],"thread_ts":"1617523067.397700","reply_count":38,"reply_users_count":5,"latest_reply":"1617531454.409400","reply_users":["U010LT79LKX","U01L0RJC6FM","U01PLQWQXPV","U01M655G9AR","UH24GRBLL"],"is_locked":false,"subscribed":false},{"client_msg_id":"6195b016-59fb-49bf-9979-1213a1c1e58d","type":"message","text":"what does your struct look like?","user":"U010LT79LKX","ts":"1617523627.397800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"963","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what does your struct look like?"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"f03cb791-91d7-49ca-a986-fa85d735820f","type":"message","text":"```mutable struct HssMatrix{T&lt;:Number}\n  # toggles for the type of node\n  leafnode::Bool\n  rootnode::Bool\n\n  # fields for leaf nodes\n  D ::Matrix{T}\n  U ::Matrix{T}\n  V ::Matrix{T}\n\n  # fields for branch nodes\n  A11 ::HssMatrix{T}\n  A22 ::HssMatrix{T}\n  B12 ::Matrix{T}\n  B21 ::Matrix{T}\n\n  sz1 ::Tuple{Int, Int}\n  sz2 ::Tuple{Int, Int}\n\n  R1 ::Matrix{T}\n  W1 ::Matrix{T}\n  R2 ::Matrix{T}\n  W2 ::Matrix{T}\n\n  # internal constructors for leaf nodes\n  function HssMatrix(D::Matrix{T}) where T\n    m, n = size(D)\n    new{T}(true, true, D)\n  end\n  function HssMatrix(D::AbstractMatrix{T}, U::AbstractMatrix{T}, V::AbstractMatrix{T}) where T\n    if size(D,1) != size(U,1) throw(ArgumentError(\"D and U must have same number of rows\")) end\n    if size(D,2) != size(V,1) throw(ArgumentError(\"D and V must have same number of columns\")) end\n    new{T}(true, false, D, U, V)\n  end\n  # internal constructors for branch nodes\n  function HssMatrix(A11::HssMatrix{T}, A22::HssMatrix{T}, B12::AbstractMatrix{T}, B21::AbstractMatrix{T}) where T\n    #kr1, kw1 = gensize(A11); kr2, kw2 = gensize(A22)\n    new{T}(false, true, undef, undef, undef, A11, A22, B12, B21, size(A11), size(A22))\n  end\n  function HssMatrix(A11::HssMatrix{T}, A22::HssMatrix{T}, B12::AbstractMatrix{T}, B21::AbstractMatrix{T}, \n    R1::AbstractMatrix{T}, W1::AbstractMatrix{T}, R2::AbstractMatrix{T}, W2::AbstractMatrix{T}) where T\n    if size(R1,2) != size(R2,2) throw(DimensionMismatch(\"R1 and R2 must have same number of columns\")) end\n    if size(W1,2) != size(W2,2) throw(DimensionMismatch(\"W1 and W2 must have same number of rows\")) end\n    #kr1, kw1 = gensize(A11); kr2, kw2 = gensize(A22)\n    new{T}(false, false, undef, undef, undef, A11, A22, B12, B21, size(A11), size(A22), R1, W1, R2, W2)\n  end\nend```","user":"U01L0RJC6FM","ts":"1617523696.398000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SWkh","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"mutable struct HssMatrix{T<:Number}\n  # toggles for the type of node\n  leafnode::Bool\n  rootnode::Bool\n\n  # fields for leaf nodes\n  D ::Matrix{T}\n  U ::Matrix{T}\n  V ::Matrix{T}\n\n  # fields for branch nodes\n  A11 ::HssMatrix{T}\n  A22 ::HssMatrix{T}\n  B12 ::Matrix{T}\n  B21 ::Matrix{T}\n\n  sz1 ::Tuple{Int, Int}\n  sz2 ::Tuple{Int, Int}\n\n  R1 ::Matrix{T}\n  W1 ::Matrix{T}\n  R2 ::Matrix{T}\n  W2 ::Matrix{T}\n\n  # internal constructors for leaf nodes\n  function HssMatrix(D::Matrix{T}) where T\n    m, n = size(D)\n    new{T}(true, true, D)\n  end\n  function HssMatrix(D::AbstractMatrix{T}, U::AbstractMatrix{T}, V::AbstractMatrix{T}) where T\n    if size(D,1) != size(U,1) throw(ArgumentError(\"D and U must have same number of rows\")) end\n    if size(D,2) != size(V,1) throw(ArgumentError(\"D and V must have same number of columns\")) end\n    new{T}(true, false, D, U, V)\n  end\n  # internal constructors for branch nodes\n  function HssMatrix(A11::HssMatrix{T}, A22::HssMatrix{T}, B12::AbstractMatrix{T}, B21::AbstractMatrix{T}) where T\n    #kr1, kw1 = gensize(A11); kr2, kw2 = gensize(A22)\n    new{T}(false, true, undef, undef, undef, A11, A22, B12, B21, size(A11), size(A22))\n  end\n  function HssMatrix(A11::HssMatrix{T}, A22::HssMatrix{T}, B12::AbstractMatrix{T}, B21::AbstractMatrix{T}, \n    R1::AbstractMatrix{T}, W1::AbstractMatrix{T}, R2::AbstractMatrix{T}, W2::AbstractMatrix{T}) where T\n    if size(R1,2) != size(R2,2) throw(DimensionMismatch(\"R1 and R2 must have same number of columns\")) end\n    if size(W1,2) != size(W2,2) throw(DimensionMismatch(\"W1 and W2 must have same number of rows\")) end\n    #kr1, kw1 = gensize(A11); kr2, kw2 = gensize(A22)\n    new{T}(false, false, undef, undef, undef, A11, A22, B12, B21, size(A11), size(A22), R1, W1, R2, W2)\n  end\nend"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"8c054ea9-3bfa-4f87-936e-3942f0c6709b","type":"message","text":"basically I only either use the leaf-portion of the struct or the branch portion","user":"U01L0RJC6FM","ts":"1617523725.398200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nsF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"basically I only either use the leaf-portion of the struct or the branch portion"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"049b18a9-78fc-4698-b474-a56a288ab628","type":"message","text":"<https://docs.julialang.org/en/v1/manual/missing/>","user":"U010LT79LKX","ts":"1617523945.398600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=wm","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://docs.julialang.org/en/v1/manual/missing/"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"ceed8511-5b89-477c-a96e-7489c87cc02e","type":"message","text":"maybe this is what you are looking for?","user":"U010LT79LKX","ts":"1617523951.398800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hen","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"maybe this is what you are looking for?"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"7e74a783-6874-4d9c-b153-8eb781a7b158","type":"message","text":"not really, i am basically representing a binary tree that has to store different data if we are at a leaf node","user":"U01L0RJC6FM","ts":"1617524037.399000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"i5R30","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not really, i am basically representing a binary tree that has to store different data if we are at a leaf node"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"8fcb7d21-ad1f-49b4-9a17-cfa6f122ea0e","type":"message","text":"i had a much nicer data structure that split it into two types but that required the use of a Union type field which led to type-instabilities","user":"U01L0RJC6FM","ts":"1617524078.399200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mlrh8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i had a much nicer data structure that split it into two types but that required the use of a Union type field which led to type-instabilities"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"aaf36dbf-71bd-4377-9522-0e16762ca2ad","type":"message","text":"if all you want to do is give default values, then I would do it using `@with_kw` macro in Parameters.jl","user":"U010LT79LKX","ts":"1617524155.399400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"meGxa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if all you want to do is give default values, then I would do it using "},{"type":"text","text":"@with_kw ","style":{"code":true}},{"type":"text","text":"macro in Parameters.jl"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"1fdc2808-3725-4886-b70f-3f3f3be82d44","type":"message","text":"give everything default undef values, then you don't have to write so many constructors","user":"U010LT79LKX","ts":"1617524187.399600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9R9Ws","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"give everything default undef values, then you don't have to write so many constructors"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"33d352be-d227-4802-9b1c-ea33434f1bc0","type":"message","text":"but honestly speaking you should use the union type and try to solve the type instability","user":"U010LT79LKX","ts":"1617524252.399800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R6mI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but honestly speaking you should use the union type and try to solve the type instability"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"45669efb-2f45-4c30-a1e6-2593de7104f0","type":"message","text":"because this struct seems too big and doing too many things for its own good","user":"U010LT79LKX","ts":"1617524267.400000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x7i","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"because this struct seems too big and doing too many things for its own good"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"3cda42d4-68f4-432a-b86f-ae38981c92e0","type":"message","text":"yeah i feel the same but how? it's a recursive type so i dont see how one could achieve that","user":"U01L0RJC6FM","ts":"1617524448.400200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yq0KF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah i feel the same but how? it's a recursive type so i dont see how one could achieve that"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"0975eb07-7590-4213-86d3-6f9acdf6adee","type":"message","text":"<https://github.com/bonevbs/HssMatrices.jl/blob/main/src/hssmatrix.jl>","user":"U01L0RJC6FM","ts":"1617524479.400400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pgb","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/bonevbs/HssMatrices.jl/blob/main/src/hssmatrix.jl"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"a326466a-4cb5-4e42-9a3b-b800244b1148","type":"message","text":"this is the current definition and getproperty will always result in a type-instability","user":"U01L0RJC6FM","ts":"1617524499.400600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KL0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this is the current definition and getproperty will always result in a type-instability"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"3a87dae5-1fa5-4dc0-a029-93ea3f00dbff","type":"message","text":"What about a minimal Tree structure such as\n\n```mutable struct TreeNode{T}\n  data::T\n  left::Union{Nothing, TreeNode{T}}\n  right::Union{Nothing, TreeNode{T}}\nend\n\nTreeNode(d::T) where T = TreeNode{T}(d, nothing, nothing)```\nIt seems that `@code_warntype`  is slightly more forgiving with this definition","user":"U01PLQWQXPV","ts":"1617527653.402900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vxS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What about a minimal Tree structure such as\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"mutable struct TreeNode{T}\n  data::T\n  left::Union{Nothing, TreeNode{T}}\n  right::Union{Nothing, TreeNode{T}}\nend\n\nTreeNode(d::T) where T = TreeNode{T}(d, nothing, nothing)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nIt seems that "},{"type":"text","text":"@code_warntype","style":{"code":true}},{"type":"text","text":"  is slightly more forgiving with this definition"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"3ecf1d95-1831-444b-99cc-b9e6541a1267","type":"message","text":"The problem is that this would break any dispatch you may have on Leaf / Node types","user":"U01PLQWQXPV","ts":"1617527839.403100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"y5x","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The problem is that this would break any dispatch you may have on Leaf / Node types"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"424c60c1-2e6c-44d1-9e55-12d5f00e1e89","type":"message","text":"hmm i don't quite understand how that would improve things?","user":"U01L0RJC6FM","ts":"1617527889.403300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/OW8s","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmm i don't quite understand how that would improve things?"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"83b2421c-5e6b-4a23-a782-c55bff3b3863","type":"message","text":"I mean I still have a union-type for the children right?","user":"U01L0RJC6FM","ts":"1617527908.403500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LyM/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean I still have a union-type for the children right?"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"68d3797f-279b-4b32-a2f5-058847af9a9f","type":"message","text":"<@U01L0RJC6FM> To answer your initial question, you can pass fewer arguments to `new` in an inner constructor, the remaining fields will be uninitialized.","user":"U01M655G9AR","ts":"1617527968.403700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p=yu","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01L0RJC6FM"},{"type":"text","text":" To answer your initial question, you can pass fewer arguments to "},{"type":"text","text":"new","style":{"code":true}},{"type":"text","text":" in an inner constructor, the remaining fields will be uninitialized."}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"93c39227-9f3e-452c-9830-2033756b4cac","type":"message","text":"<@U01M655G9AR> I should have clarified a bit better... what if I want to keep some of the first fields `#undef` and define some of the later fields?","user":"U01L0RJC6FM","ts":"1617528024.403900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AdMsr","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01M655G9AR"},{"type":"text","text":" I should have clarified a bit better... what if I want to keep some of the first fields "},{"type":"text","text":"#undef","style":{"code":true}},{"type":"text","text":" and define some of the later fields?"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"cc544c2d-4c27-41c7-ba8e-92741370f53c","type":"message","text":"it seems `new`  and then set the fields manually is the only option","user":"U01L0RJC6FM","ts":"1617528050.404100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"K2Pkv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it seems "},{"type":"text","text":"new","style":{"code":true}},{"type":"text","text":"  and then set the fields manually is the only option"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"6a710cee-5249-4eb5-8050-349fb4de3b88","type":"message","text":"What's wrong about that? You define them in the constructor.","user":"U01M655G9AR","ts":"1617528203.404300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Dv8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What's wrong about that? You define them in the constructor."}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"96ec0184-2cc4-4fc3-aae8-5975cf1219a0","type":"message","text":"i guess it's fine.. I was wondering whether I was missing out on some nicer syntax :sweat_smile:","user":"U01L0RJC6FM","ts":"1617528257.404600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rUqyv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i guess it's fine.. I was wondering whether I was missing out on some nicer syntax "},{"type":"emoji","name":"sweat_smile"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"a9e28e34-8b33-4428-982b-3cb1ca600313","type":"message","text":"<@U01L0RJC6FM> Certainly. For a minute I thought Julia might have an easier time inferring since `@code_warntype` returns a yellow warning with Union{Nothing} types but it seems it's just a trick to have the user focus on what are considered \"more important type instabilities\".","user":"U01PLQWQXPV","ts":"1617528314.404800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yJ2","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01L0RJC6FM"},{"type":"text","text":" Certainly. For a minute I thought Julia might have an easier time inferring since "},{"type":"text","text":"@code_warntype","style":{"code":true}},{"type":"text","text":" returns a yellow warning with Union{Nothing} types but it seems it's just a trick to have the user focus on what are considered \"more important type instabilities\"."}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"ec847761-18b1-4ff3-b6e1-8c9b309bd168","type":"message","text":"<@U01PLQWQXPV> yeah i am not even sure if I do this re-write with the datastructure as described will actually yield the performance benefit I need. Union-splitting is unfortunately not very well-documented","user":"U01L0RJC6FM","ts":"1617528396.405000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5E1H","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01PLQWQXPV"},{"type":"text","text":" yeah i am not even sure if I do this re-write with the datastructure as described will actually yield the performance benefit I need. Union-splitting is unfortunately not very well-documented"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"86b629a0-e6ed-44f8-af78-27ff209b7ade","type":"message","text":"<@U01L0RJC6FM>, forgetting about this type instability with your `TreeNodes` , couldn't you possibly simply use function barriers to tackle specialization in your core / performant sensitive functions?\n<https://docs.julialang.org/en/v1/manual/performance-tips/#kernel-functions>","user":"U01PLQWQXPV","ts":"1617528895.405600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KpZ8","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01L0RJC6FM"},{"type":"text","text":", forgetting about this type instability with your "},{"type":"text","text":"TreeNodes","style":{"code":true}},{"type":"text","text":" , couldn't you possibly simply use function barriers to tackle specialization in your core / performant sensitive functions?\n"},{"type":"link","url":"https://docs.julialang.org/en/v1/manual/performance-tips/#kernel-functions"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"d05f35fd-47a3-4a99-bf48-c0576d3ee9d1","type":"message","text":"yeah, this is also what I was thinking. Unfortunately, I ran into a situation that I do not know how to resolve.","user":"U01L0RJC6FM","ts":"1617529003.405800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ngx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, this is also what I was thinking. Unfortunately, I ran into a situation that I do not know how to resolve."}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"b78b574d-0ee4-4c67-ba16-dc1d53ba109e","type":"message","text":"basically, the problem I have is that I am calling a constructor `BlockMatrix(A11,A12,A21,A22)` , which is of type `Blockmatrix{T, T11&lt;:AbstractMatrix, T12&lt;:AbstractMatrix...}`","user":"U01L0RJC6FM","ts":"1617529083.406100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"n24","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"basically, the problem I have is that I am calling a constructor "},{"type":"text","text":"BlockMatrix(A11,A12,A21,A22)","style":{"code":true}},{"type":"text","text":" , which is of type "},{"type":"text","text":"Blockmatrix{T, T11<:AbstractMatrix, T12<:AbstractMatrix...}","style":{"code":true}}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"068b7bc2-2e6e-4562-a358-5810bb1f6e5c","type":"message","text":"if I pass the union-type `HssMatrix{T} = Union{HssLeaf{T}, HssNode{T}}` , it seems that type-inference just gives up on the block-matrix type","user":"U01L0RJC6FM","ts":"1617529135.406300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tKv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if I pass the union-type "},{"type":"text","text":"HssMatrix{T} = Union{HssLeaf{T}, HssNode{T}}","style":{"code":true}},{"type":"text","text":" , it seems that type-inference just gives up on the block-matrix type"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"367c309e-7bb2-46f1-80ca-17df6c346a3b","type":"message","text":"i have a situation where I need to compute many blockmatrices and perform arithmetic on the fly which I currently do with generated functions.. so it seems that this should be fast","user":"U01L0RJC6FM","ts":"1617529197.406600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0E=L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i have a situation where I need to compute many blockmatrices and perform arithmetic on the fly which I currently do with generated functions.. so it seems that this should be fast"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"61477b1a-e258-49bc-a424-29e88a0464da","type":"message","text":"the core problem is that how an instance of your struct behaves depends on which values are set, making it impossible to distinguish which it will be based on the type alone","user":"UH24GRBLL","ts":"1617530316.407500","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1617530481.000000"},"blocks":[{"type":"rich_text","block_id":"+Nj3/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the core problem is that how an instance of your struct behaves depends on which values are set, making it impossible to distinguish which it will be based on the type alone"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"f83e1ae9-4df5-468f-a810-e1639140ffa8","type":"message","text":"you could add a new type parameter indicating whether it's a leaf or a node and use that to steer dispatch","user":"UH24GRBLL","ts":"1617530338.407700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6c6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you could add a new type parameter indicating whether it's a leaf or a node and use that to steer dispatch"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"934c3729-65e2-4fe1-8273-08b05371b93e","type":"message","text":"but I'd take the easier way out and make both a Leaf and a Node type that subtype an abstract BlockMatrix type. You can still have the `BlockMatrix` function name as the main API entry point, but use those internal types for its true representation","user":"UH24GRBLL","ts":"1617530428.407900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ItZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but I'd take the easier way out and make both a Leaf and a Node type that subtype an abstract BlockMatrix type. You can still have the "},{"type":"text","text":"BlockMatrix","style":{"code":true}},{"type":"text","text":" function name as the main API entry point, but use those internal types for its true representation"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"33ef68b6-e763-4c99-a8cf-969179a6c06c","type":"message","text":"that way, people can still dispatch on your type (they just have to dispatch based on your abstract type) and you can disentangle the type instability","user":"UH24GRBLL","ts":"1617530471.408100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"faa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that way, people can still dispatch on your type (they just have to dispatch based on your abstract type) and you can disentangle the type instability"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"812df849-b39b-4e5c-a39d-3676450697ce","type":"message","text":"thanks <@UH24GRBLL> for your input.. i think there is a lot of information here. I am trying to understand what you just told me","user":"U01L0RJC6FM","ts":"1617531149.408600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QeR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thanks "},{"type":"user","user_id":"UH24GRBLL"},{"type":"text","text":" for your input.. i think there is a lot of information here. I am trying to understand what you just told me"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"c781e189-32d4-41fe-89d2-17eb73764bfd","type":"message","text":"are you referring to the type as described earlier in this thread?","user":"U01L0RJC6FM","ts":"1617531205.408800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ta9V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"are you referring to the type as described earlier in this thread?"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"552cf5c2-c204-48ad-aa0c-2d8b057e3578","type":"message","text":"i think your two first messages did.. I am basically trying to decide between the type as described above and this one (which I prefer, but has the type-stability issue):\n\n```mutable struct HssLeaf{T&lt;:Number} &lt;: AbstractMatrix{T}\n  D ::Matrix{T}\n  U ::Matrix{T}\n  V ::Matrix{T}\n\n  # constructors...\nend\n\n# definition of branch nodes\nmutable struct HssNode{T&lt;:Number} &lt;: AbstractMatrix{T}\n  A11 ::Union{HssNode{T}, HssLeaf{T}}\n  A22 ::Union{HssNode{T}, HssLeaf{T}}\n  B12 ::Matrix{T}\n  B21 ::Matrix{T}\n\n  sz1 ::Tuple{Int, Int}\n  sz2 ::Tuple{Int, Int}\n\n  R1 ::Matrix{T}\n  W1 ::Matrix{T}\n  R2 ::Matrix{T}\n  W2 ::Matrix{T}\n\n  # constructors...\nend```","user":"U01L0RJC6FM","ts":"1617531385.409000","team":"T68168MUP","edited":{"user":"U01L0RJC6FM","ts":"1617531410.000000"},"blocks":[{"type":"rich_text","block_id":"FAf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i think your two first messages did.. I am basically trying to decide between the type as described above and this one (which I prefer, but has the type-stability issue):\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"mutable struct HssLeaf{T<:Number} <: AbstractMatrix{T}\n  D ::Matrix{T}\n  U ::Matrix{T}\n  V ::Matrix{T}\n\n  # constructors...\nend\n\n# definition of branch nodes\nmutable struct HssNode{T<:Number} <: AbstractMatrix{T}\n  A11 ::Union{HssNode{T}, HssLeaf{T}}\n  A22 ::Union{HssNode{T}, HssLeaf{T}}\n  B12 ::Matrix{T}\n  B21 ::Matrix{T}\n\n  sz1 ::Tuple{Int, Int}\n  sz2 ::Tuple{Int, Int}\n\n  R1 ::Matrix{T}\n  W1 ::Matrix{T}\n  R2 ::Matrix{T}\n  W2 ::Matrix{T}\n\n  # constructors...\nend"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"c09e7b43-a836-4957-91cb-07b78b62d025","type":"message","text":"I am a bit ashamed for hijacking the forum like this.. at this point quite a few here are probably familiar with my problem :sweat_smile:","user":"U01L0RJC6FM","ts":"1617531454.409400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MY9M","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am a bit ashamed for hijacking the forum like this.. at this point quite a few here are probably familiar with my problem "},{"type":"emoji","name":"sweat_smile"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"}]