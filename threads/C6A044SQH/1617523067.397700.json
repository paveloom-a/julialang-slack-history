[{"client_msg_id":"d6ca36a9-a598-44b4-8be0-a0b29ef2e152","type":"message","text":"is there a way to pass `#undef` to `new` ? I have fields which I would like to keep `#undef` ..","user":"U01L0RJC6FM","ts":"1617523067.397700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sigC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is there a way to pass "},{"type":"text","text":"#undef","style":{"code":true}},{"type":"text","text":" to "},{"type":"text","text":"new","style":{"code":true}},{"type":"text","text":" ? I have fields which I would like to keep "},{"type":"text","text":"#undef","style":{"code":true}},{"type":"text","text":" .."}]}]}],"thread_ts":"1617523067.397700","reply_count":93,"reply_users_count":5,"latest_reply":"1617538762.421500","reply_users":["U010LT79LKX","U01L0RJC6FM","U01PLQWQXPV","U01M655G9AR","UH24GRBLL"],"is_locked":false,"subscribed":false},{"client_msg_id":"6195b016-59fb-49bf-9979-1213a1c1e58d","type":"message","text":"what does your struct look like?","user":"U010LT79LKX","ts":"1617523627.397800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"963","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what does your struct look like?"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"f03cb791-91d7-49ca-a986-fa85d735820f","type":"message","text":"```mutable struct HssMatrix{T&lt;:Number}\n  # toggles for the type of node\n  leafnode::Bool\n  rootnode::Bool\n\n  # fields for leaf nodes\n  D ::Matrix{T}\n  U ::Matrix{T}\n  V ::Matrix{T}\n\n  # fields for branch nodes\n  A11 ::HssMatrix{T}\n  A22 ::HssMatrix{T}\n  B12 ::Matrix{T}\n  B21 ::Matrix{T}\n\n  sz1 ::Tuple{Int, Int}\n  sz2 ::Tuple{Int, Int}\n\n  R1 ::Matrix{T}\n  W1 ::Matrix{T}\n  R2 ::Matrix{T}\n  W2 ::Matrix{T}\n\n  # internal constructors for leaf nodes\n  function HssMatrix(D::Matrix{T}) where T\n    m, n = size(D)\n    new{T}(true, true, D)\n  end\n  function HssMatrix(D::AbstractMatrix{T}, U::AbstractMatrix{T}, V::AbstractMatrix{T}) where T\n    if size(D,1) != size(U,1) throw(ArgumentError(\"D and U must have same number of rows\")) end\n    if size(D,2) != size(V,1) throw(ArgumentError(\"D and V must have same number of columns\")) end\n    new{T}(true, false, D, U, V)\n  end\n  # internal constructors for branch nodes\n  function HssMatrix(A11::HssMatrix{T}, A22::HssMatrix{T}, B12::AbstractMatrix{T}, B21::AbstractMatrix{T}) where T\n    #kr1, kw1 = gensize(A11); kr2, kw2 = gensize(A22)\n    new{T}(false, true, undef, undef, undef, A11, A22, B12, B21, size(A11), size(A22))\n  end\n  function HssMatrix(A11::HssMatrix{T}, A22::HssMatrix{T}, B12::AbstractMatrix{T}, B21::AbstractMatrix{T}, \n    R1::AbstractMatrix{T}, W1::AbstractMatrix{T}, R2::AbstractMatrix{T}, W2::AbstractMatrix{T}) where T\n    if size(R1,2) != size(R2,2) throw(DimensionMismatch(\"R1 and R2 must have same number of columns\")) end\n    if size(W1,2) != size(W2,2) throw(DimensionMismatch(\"W1 and W2 must have same number of rows\")) end\n    #kr1, kw1 = gensize(A11); kr2, kw2 = gensize(A22)\n    new{T}(false, false, undef, undef, undef, A11, A22, B12, B21, size(A11), size(A22), R1, W1, R2, W2)\n  end\nend```","user":"U01L0RJC6FM","ts":"1617523696.398000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SWkh","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"mutable struct HssMatrix{T<:Number}\n  # toggles for the type of node\n  leafnode::Bool\n  rootnode::Bool\n\n  # fields for leaf nodes\n  D ::Matrix{T}\n  U ::Matrix{T}\n  V ::Matrix{T}\n\n  # fields for branch nodes\n  A11 ::HssMatrix{T}\n  A22 ::HssMatrix{T}\n  B12 ::Matrix{T}\n  B21 ::Matrix{T}\n\n  sz1 ::Tuple{Int, Int}\n  sz2 ::Tuple{Int, Int}\n\n  R1 ::Matrix{T}\n  W1 ::Matrix{T}\n  R2 ::Matrix{T}\n  W2 ::Matrix{T}\n\n  # internal constructors for leaf nodes\n  function HssMatrix(D::Matrix{T}) where T\n    m, n = size(D)\n    new{T}(true, true, D)\n  end\n  function HssMatrix(D::AbstractMatrix{T}, U::AbstractMatrix{T}, V::AbstractMatrix{T}) where T\n    if size(D,1) != size(U,1) throw(ArgumentError(\"D and U must have same number of rows\")) end\n    if size(D,2) != size(V,1) throw(ArgumentError(\"D and V must have same number of columns\")) end\n    new{T}(true, false, D, U, V)\n  end\n  # internal constructors for branch nodes\n  function HssMatrix(A11::HssMatrix{T}, A22::HssMatrix{T}, B12::AbstractMatrix{T}, B21::AbstractMatrix{T}) where T\n    #kr1, kw1 = gensize(A11); kr2, kw2 = gensize(A22)\n    new{T}(false, true, undef, undef, undef, A11, A22, B12, B21, size(A11), size(A22))\n  end\n  function HssMatrix(A11::HssMatrix{T}, A22::HssMatrix{T}, B12::AbstractMatrix{T}, B21::AbstractMatrix{T}, \n    R1::AbstractMatrix{T}, W1::AbstractMatrix{T}, R2::AbstractMatrix{T}, W2::AbstractMatrix{T}) where T\n    if size(R1,2) != size(R2,2) throw(DimensionMismatch(\"R1 and R2 must have same number of columns\")) end\n    if size(W1,2) != size(W2,2) throw(DimensionMismatch(\"W1 and W2 must have same number of rows\")) end\n    #kr1, kw1 = gensize(A11); kr2, kw2 = gensize(A22)\n    new{T}(false, false, undef, undef, undef, A11, A22, B12, B21, size(A11), size(A22), R1, W1, R2, W2)\n  end\nend"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"8c054ea9-3bfa-4f87-936e-3942f0c6709b","type":"message","text":"basically I only either use the leaf-portion of the struct or the branch portion","user":"U01L0RJC6FM","ts":"1617523725.398200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nsF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"basically I only either use the leaf-portion of the struct or the branch portion"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"049b18a9-78fc-4698-b474-a56a288ab628","type":"message","text":"<https://docs.julialang.org/en/v1/manual/missing/>","user":"U010LT79LKX","ts":"1617523945.398600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=wm","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://docs.julialang.org/en/v1/manual/missing/"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"ceed8511-5b89-477c-a96e-7489c87cc02e","type":"message","text":"maybe this is what you are looking for?","user":"U010LT79LKX","ts":"1617523951.398800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hen","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"maybe this is what you are looking for?"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"7e74a783-6874-4d9c-b153-8eb781a7b158","type":"message","text":"not really, i am basically representing a binary tree that has to store different data if we are at a leaf node","user":"U01L0RJC6FM","ts":"1617524037.399000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"i5R30","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not really, i am basically representing a binary tree that has to store different data if we are at a leaf node"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"8fcb7d21-ad1f-49b4-9a17-cfa6f122ea0e","type":"message","text":"i had a much nicer data structure that split it into two types but that required the use of a Union type field which led to type-instabilities","user":"U01L0RJC6FM","ts":"1617524078.399200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mlrh8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i had a much nicer data structure that split it into two types but that required the use of a Union type field which led to type-instabilities"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"aaf36dbf-71bd-4377-9522-0e16762ca2ad","type":"message","text":"if all you want to do is give default values, then I would do it using `@with_kw` macro in Parameters.jl","user":"U010LT79LKX","ts":"1617524155.399400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"meGxa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if all you want to do is give default values, then I would do it using "},{"type":"text","text":"@with_kw ","style":{"code":true}},{"type":"text","text":"macro in Parameters.jl"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"1fdc2808-3725-4886-b70f-3f3f3be82d44","type":"message","text":"give everything default undef values, then you don't have to write so many constructors","user":"U010LT79LKX","ts":"1617524187.399600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9R9Ws","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"give everything default undef values, then you don't have to write so many constructors"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"33d352be-d227-4802-9b1c-ea33434f1bc0","type":"message","text":"but honestly speaking you should use the union type and try to solve the type instability","user":"U010LT79LKX","ts":"1617524252.399800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R6mI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but honestly speaking you should use the union type and try to solve the type instability"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"45669efb-2f45-4c30-a1e6-2593de7104f0","type":"message","text":"because this struct seems too big and doing too many things for its own good","user":"U010LT79LKX","ts":"1617524267.400000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x7i","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"because this struct seems too big and doing too many things for its own good"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"3cda42d4-68f4-432a-b86f-ae38981c92e0","type":"message","text":"yeah i feel the same but how? it's a recursive type so i dont see how one could achieve that","user":"U01L0RJC6FM","ts":"1617524448.400200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yq0KF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah i feel the same but how? it's a recursive type so i dont see how one could achieve that"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"0975eb07-7590-4213-86d3-6f9acdf6adee","type":"message","text":"<https://github.com/bonevbs/HssMatrices.jl/blob/main/src/hssmatrix.jl>","user":"U01L0RJC6FM","ts":"1617524479.400400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pgb","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/bonevbs/HssMatrices.jl/blob/main/src/hssmatrix.jl"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"a326466a-4cb5-4e42-9a3b-b800244b1148","type":"message","text":"this is the current definition and getproperty will always result in a type-instability","user":"U01L0RJC6FM","ts":"1617524499.400600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KL0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this is the current definition and getproperty will always result in a type-instability"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"3a87dae5-1fa5-4dc0-a029-93ea3f00dbff","type":"message","text":"What about a minimal Tree structure such as\n\n```mutable struct TreeNode{T}\n  data::T\n  left::Union{Nothing, TreeNode{T}}\n  right::Union{Nothing, TreeNode{T}}\nend\n\nTreeNode(d::T) where T = TreeNode{T}(d, nothing, nothing)```\nIt seems that `@code_warntype`  is slightly more forgiving with this definition","user":"U01PLQWQXPV","ts":"1617527653.402900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vxS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What about a minimal Tree structure such as\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"mutable struct TreeNode{T}\n  data::T\n  left::Union{Nothing, TreeNode{T}}\n  right::Union{Nothing, TreeNode{T}}\nend\n\nTreeNode(d::T) where T = TreeNode{T}(d, nothing, nothing)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nIt seems that "},{"type":"text","text":"@code_warntype","style":{"code":true}},{"type":"text","text":"  is slightly more forgiving with this definition"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"3ecf1d95-1831-444b-99cc-b9e6541a1267","type":"message","text":"The problem is that this would break any dispatch you may have on Leaf / Node types","user":"U01PLQWQXPV","ts":"1617527839.403100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"y5x","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The problem is that this would break any dispatch you may have on Leaf / Node types"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"424c60c1-2e6c-44d1-9e55-12d5f00e1e89","type":"message","text":"hmm i don't quite understand how that would improve things?","user":"U01L0RJC6FM","ts":"1617527889.403300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/OW8s","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmm i don't quite understand how that would improve things?"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"83b2421c-5e6b-4a23-a782-c55bff3b3863","type":"message","text":"I mean I still have a union-type for the children right?","user":"U01L0RJC6FM","ts":"1617527908.403500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LyM/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean I still have a union-type for the children right?"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"68d3797f-279b-4b32-a2f5-058847af9a9f","type":"message","text":"<@U01L0RJC6FM> To answer your initial question, you can pass fewer arguments to `new` in an inner constructor, the remaining fields will be uninitialized.","user":"U01M655G9AR","ts":"1617527968.403700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p=yu","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01L0RJC6FM"},{"type":"text","text":" To answer your initial question, you can pass fewer arguments to "},{"type":"text","text":"new","style":{"code":true}},{"type":"text","text":" in an inner constructor, the remaining fields will be uninitialized."}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"93c39227-9f3e-452c-9830-2033756b4cac","type":"message","text":"<@U01M655G9AR> I should have clarified a bit better... what if I want to keep some of the first fields `#undef` and define some of the later fields?","user":"U01L0RJC6FM","ts":"1617528024.403900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AdMsr","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01M655G9AR"},{"type":"text","text":" I should have clarified a bit better... what if I want to keep some of the first fields "},{"type":"text","text":"#undef","style":{"code":true}},{"type":"text","text":" and define some of the later fields?"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"cc544c2d-4c27-41c7-ba8e-92741370f53c","type":"message","text":"it seems `new`  and then set the fields manually is the only option","user":"U01L0RJC6FM","ts":"1617528050.404100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"K2Pkv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it seems "},{"type":"text","text":"new","style":{"code":true}},{"type":"text","text":"  and then set the fields manually is the only option"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"6a710cee-5249-4eb5-8050-349fb4de3b88","type":"message","text":"What's wrong about that? You define them in the constructor.","user":"U01M655G9AR","ts":"1617528203.404300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Dv8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What's wrong about that? You define them in the constructor."}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"96ec0184-2cc4-4fc3-aae8-5975cf1219a0","type":"message","text":"i guess it's fine.. I was wondering whether I was missing out on some nicer syntax :sweat_smile:","user":"U01L0RJC6FM","ts":"1617528257.404600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rUqyv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i guess it's fine.. I was wondering whether I was missing out on some nicer syntax "},{"type":"emoji","name":"sweat_smile"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"a9e28e34-8b33-4428-982b-3cb1ca600313","type":"message","text":"<@U01L0RJC6FM> Certainly. For a minute I thought Julia might have an easier time inferring since `@code_warntype` returns a yellow warning with Union{Nothing} types but it seems it's just a trick to have the user focus on what are considered \"more important type instabilities\".","user":"U01PLQWQXPV","ts":"1617528314.404800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yJ2","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01L0RJC6FM"},{"type":"text","text":" Certainly. For a minute I thought Julia might have an easier time inferring since "},{"type":"text","text":"@code_warntype","style":{"code":true}},{"type":"text","text":" returns a yellow warning with Union{Nothing} types but it seems it's just a trick to have the user focus on what are considered \"more important type instabilities\"."}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"ec847761-18b1-4ff3-b6e1-8c9b309bd168","type":"message","text":"<@U01PLQWQXPV> yeah i am not even sure if I do this re-write with the datastructure as described will actually yield the performance benefit I need. Union-splitting is unfortunately not very well-documented","user":"U01L0RJC6FM","ts":"1617528396.405000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5E1H","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01PLQWQXPV"},{"type":"text","text":" yeah i am not even sure if I do this re-write with the datastructure as described will actually yield the performance benefit I need. Union-splitting is unfortunately not very well-documented"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"86b629a0-e6ed-44f8-af78-27ff209b7ade","type":"message","text":"<@U01L0RJC6FM>, forgetting about this type instability with your `TreeNodes` , couldn't you possibly simply use function barriers to tackle specialization in your core / performant sensitive functions?\n<https://docs.julialang.org/en/v1/manual/performance-tips/#kernel-functions>","user":"U01PLQWQXPV","ts":"1617528895.405600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KpZ8","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01L0RJC6FM"},{"type":"text","text":", forgetting about this type instability with your "},{"type":"text","text":"TreeNodes","style":{"code":true}},{"type":"text","text":" , couldn't you possibly simply use function barriers to tackle specialization in your core / performant sensitive functions?\n"},{"type":"link","url":"https://docs.julialang.org/en/v1/manual/performance-tips/#kernel-functions"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"d05f35fd-47a3-4a99-bf48-c0576d3ee9d1","type":"message","text":"yeah, this is also what I was thinking. Unfortunately, I ran into a situation that I do not know how to resolve.","user":"U01L0RJC6FM","ts":"1617529003.405800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ngx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, this is also what I was thinking. Unfortunately, I ran into a situation that I do not know how to resolve."}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"b78b574d-0ee4-4c67-ba16-dc1d53ba109e","type":"message","text":"basically, the problem I have is that I am calling a constructor `BlockMatrix(A11,A12,A21,A22)` , which is of type `Blockmatrix{T, T11&lt;:AbstractMatrix, T12&lt;:AbstractMatrix...}`","user":"U01L0RJC6FM","ts":"1617529083.406100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"n24","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"basically, the problem I have is that I am calling a constructor "},{"type":"text","text":"BlockMatrix(A11,A12,A21,A22)","style":{"code":true}},{"type":"text","text":" , which is of type "},{"type":"text","text":"Blockmatrix{T, T11<:AbstractMatrix, T12<:AbstractMatrix...}","style":{"code":true}}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"068b7bc2-2e6e-4562-a358-5810bb1f6e5c","type":"message","text":"if I pass the union-type `HssMatrix{T} = Union{HssLeaf{T}, HssNode{T}}` , it seems that type-inference just gives up on the block-matrix type","user":"U01L0RJC6FM","ts":"1617529135.406300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tKv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if I pass the union-type "},{"type":"text","text":"HssMatrix{T} = Union{HssLeaf{T}, HssNode{T}}","style":{"code":true}},{"type":"text","text":" , it seems that type-inference just gives up on the block-matrix type"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"367c309e-7bb2-46f1-80ca-17df6c346a3b","type":"message","text":"i have a situation where I need to compute many blockmatrices and perform arithmetic on the fly which I currently do with generated functions.. so it seems that this should be fast","user":"U01L0RJC6FM","ts":"1617529197.406600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0E=L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i have a situation where I need to compute many blockmatrices and perform arithmetic on the fly which I currently do with generated functions.. so it seems that this should be fast"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"61477b1a-e258-49bc-a424-29e88a0464da","type":"message","text":"the core problem is that how an instance of your struct behaves depends on which values are set, making it impossible to distinguish which it will be based on the type alone","user":"UH24GRBLL","ts":"1617530316.407500","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1617530481.000000"},"blocks":[{"type":"rich_text","block_id":"+Nj3/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the core problem is that how an instance of your struct behaves depends on which values are set, making it impossible to distinguish which it will be based on the type alone"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"f83e1ae9-4df5-468f-a810-e1639140ffa8","type":"message","text":"you could add a new type parameter indicating whether it's a leaf or a node and use that to steer dispatch","user":"UH24GRBLL","ts":"1617530338.407700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6c6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you could add a new type parameter indicating whether it's a leaf or a node and use that to steer dispatch"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"934c3729-65e2-4fe1-8273-08b05371b93e","type":"message","text":"but I'd take the easier way out and make both a Leaf and a Node type that subtype an abstract BlockMatrix type. You can still have the `BlockMatrix` function name as the main API entry point, but use those internal types for its true representation","user":"UH24GRBLL","ts":"1617530428.407900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ItZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but I'd take the easier way out and make both a Leaf and a Node type that subtype an abstract BlockMatrix type. You can still have the "},{"type":"text","text":"BlockMatrix","style":{"code":true}},{"type":"text","text":" function name as the main API entry point, but use those internal types for its true representation"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"33ef68b6-e763-4c99-a8cf-969179a6c06c","type":"message","text":"that way, people can still dispatch on your type (they just have to dispatch based on your abstract type) and you can disentangle the type instability","user":"UH24GRBLL","ts":"1617530471.408100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"faa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that way, people can still dispatch on your type (they just have to dispatch based on your abstract type) and you can disentangle the type instability"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"812df849-b39b-4e5c-a39d-3676450697ce","type":"message","text":"thanks <@UH24GRBLL> for your input.. i think there is a lot of information here. I am trying to understand what you just told me","user":"U01L0RJC6FM","ts":"1617531149.408600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QeR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thanks "},{"type":"user","user_id":"UH24GRBLL"},{"type":"text","text":" for your input.. i think there is a lot of information here. I am trying to understand what you just told me"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"c781e189-32d4-41fe-89d2-17eb73764bfd","type":"message","text":"are you referring to the type as described earlier in this thread?","user":"U01L0RJC6FM","ts":"1617531205.408800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ta9V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"are you referring to the type as described earlier in this thread?"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"552cf5c2-c204-48ad-aa0c-2d8b057e3578","type":"message","text":"i think your two first messages did.. I am basically trying to decide between the type as described above and this one (which I prefer, but has the type-stability issue):\n\n```mutable struct HssLeaf{T&lt;:Number} &lt;: AbstractMatrix{T}\n  D ::Matrix{T}\n  U ::Matrix{T}\n  V ::Matrix{T}\n\n  # constructors...\nend\n\n# definition of branch nodes\nmutable struct HssNode{T&lt;:Number} &lt;: AbstractMatrix{T}\n  A11 ::Union{HssNode{T}, HssLeaf{T}}\n  A22 ::Union{HssNode{T}, HssLeaf{T}}\n  B12 ::Matrix{T}\n  B21 ::Matrix{T}\n\n  sz1 ::Tuple{Int, Int}\n  sz2 ::Tuple{Int, Int}\n\n  R1 ::Matrix{T}\n  W1 ::Matrix{T}\n  R2 ::Matrix{T}\n  W2 ::Matrix{T}\n\n  # constructors...\nend```","user":"U01L0RJC6FM","ts":"1617531385.409000","team":"T68168MUP","edited":{"user":"U01L0RJC6FM","ts":"1617531410.000000"},"blocks":[{"type":"rich_text","block_id":"FAf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i think your two first messages did.. I am basically trying to decide between the type as described above and this one (which I prefer, but has the type-stability issue):\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"mutable struct HssLeaf{T<:Number} <: AbstractMatrix{T}\n  D ::Matrix{T}\n  U ::Matrix{T}\n  V ::Matrix{T}\n\n  # constructors...\nend\n\n# definition of branch nodes\nmutable struct HssNode{T<:Number} <: AbstractMatrix{T}\n  A11 ::Union{HssNode{T}, HssLeaf{T}}\n  A22 ::Union{HssNode{T}, HssLeaf{T}}\n  B12 ::Matrix{T}\n  B21 ::Matrix{T}\n\n  sz1 ::Tuple{Int, Int}\n  sz2 ::Tuple{Int, Int}\n\n  R1 ::Matrix{T}\n  W1 ::Matrix{T}\n  R2 ::Matrix{T}\n  W2 ::Matrix{T}\n\n  # constructors...\nend"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"c09e7b43-a836-4957-91cb-07b78b62d025","type":"message","text":"I am a bit ashamed for hijacking the forum like this.. at this point quite a few here are probably familiar with my problem :sweat_smile:","user":"U01L0RJC6FM","ts":"1617531454.409400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MY9M","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am a bit ashamed for hijacking the forum like this.. at this point quite a few here are probably familiar with my problem "},{"type":"emoji","name":"sweat_smile"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"6013ed16-21ae-40c2-aeb4-58d6a2535bcb","type":"message","text":"<@U01L0RJC6FM> But as long as your BlockMatrices instances end up with concrete parametric dependencies, such as `BlockMatrix{T, HssLeaf{T}, HssNode{T}, ....}` , a function barrier should properly dispatch your Blocks","user":"U01PLQWQXPV","ts":"1617531730.409600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rgbk","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01L0RJC6FM"},{"type":"text","text":" But as long as your BlockMatrices instances end up with concrete parametric dependencies, such as "},{"type":"text","text":"BlockMatrix{T, HssLeaf{T}, HssNode{T}, ....}","style":{"code":true}},{"type":"text","text":" , a function barrier should properly dispatch your Blocks"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"0a0075d4-63b0-4aa9-8a7f-34ef59726c9f","type":"message","text":"Meaning... even though you'd still have a type instability in the method that dynamically creates a bunch of different concrete BlockMatrix types, you'd still later trigger proper specialisation when using these instances with other methods. Given that you have 4 blocks, the cardinality of BlockMatrix{T} would be 4 * |HssLeaf, HssNode, Matrix| ~ 12. (At least it's considerably smaller in comparison with the exponential using parametric tree nodes :smile:)","user":"U01PLQWQXPV","ts":"1617532209.409800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R8L0q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Meaning... even though you'd still have a type instability in the method that dynamically creates a bunch of different concrete BlockMatrix types, you'd still later trigger proper specialisation when using these instances with other methods. Given that you have 4 blocks, the cardinality of BlockMatrix{T} would be 4 * |HssLeaf, HssNode, Matrix| ~ 12. (At least it's considerably smaller in comparison with the exponential using parametric tree nodes "},{"type":"emoji","name":"smile"},{"type":"text","text":")"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"582a0100-fc38-483c-ade9-cb19088757cb","type":"message","text":"hmm, i see.. i am thankful for any proposal that is not rewriting the entire library :grin:","user":"U01L0RJC6FM","ts":"1617532856.410000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"A4AJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmm, i see.. i am thankful for any proposal that is not rewriting the entire library "},{"type":"emoji","name":"grin"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"2c3c44db-cc67-4421-a90a-05073bbac871","type":"message","text":"what you're missing as a common supertype different from AbstractMatrix","user":"UH24GRBLL","ts":"1617532945.410200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bpLa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what you're missing as a common supertype different from AbstractMatrix"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"08da1fc5-9e1a-401f-9492-a3ad33c8b690","type":"message","text":"i am not quite sure how to do it though... what i understand is that having a function `Aii, Aib, Abi, Abb = assemble_blocks(...)`  could be bad if i am using `getproperty(::HssMatrix)`","user":"U01L0RJC6FM","ts":"1617532959.410400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"k=Gg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i am not quite sure how to do it though... what i understand is that having a function "},{"type":"text","text":"Aii, Aib, Abi, Abb = assemble_blocks(...)","style":{"code":true}},{"type":"text","text":"  could be bad if i am using "},{"type":"text","text":"getproperty(::HssMatrix)","style":{"code":true}}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"0ab0ad6d-5009-4e6f-9d4e-a0214338cd53","type":"message","text":"<@UH24GRBLL> what I currently have is `const HssMatrix{T} = Union{HssLeaf{T}, HssNode{T}}`","user":"U01L0RJC6FM","ts":"1617532986.410600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Lo9S","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH24GRBLL"},{"type":"text","text":" what I currently have is "},{"type":"text","text":"const HssMatrix{T} = Union{HssLeaf{T}, HssNode{T}}","style":{"code":true}}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"15275913-cad0-45c4-ad71-fe2ebc71a266","type":"message","text":"yes and in this case that is bad, as far as I can tell","user":"UH24GRBLL","ts":"1617533010.410800","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1617533022.000000"},"blocks":[{"type":"rich_text","block_id":"1c8M","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes and in this case that is bad, as far as I can tell"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"bd7df8b9-005c-43fd-b2b3-a3c3126474e9","type":"message","text":"better to have `abstract type HssMatrix{T} &lt;: AbstractMatrix{T} end` ?","user":"U01L0RJC6FM","ts":"1617533057.411100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JuW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"better to have "},{"type":"text","text":"abstract type HssMatrix{T} <: AbstractMatrix{T} end","style":{"code":true}},{"type":"text","text":" ?"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"47afb77b-672f-4bb0-aeb0-643b20127c7a","type":"message","text":"what I understood is that this would inhibit union splitting but perhaps i misunderstood... lemme try this quickly","user":"U01L0RJC6FM","ts":"1617533094.411300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"i7Q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what I understood is that this would inhibit union splitting but perhaps i misunderstood... lemme try this quickly"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"a3e28c7d-a779-4bbe-8050-b0d0067a9e0d","type":"message","text":"if there's no union there's no need for splitting a union","user":"UH24GRBLL","ts":"1617533109.411500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6uPJS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if there's no union there's no need for splitting a union"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"43ceeb33-7393-4d3b-bfd1-8ea898c4a70c","type":"message","text":"oh i am not sure i understood... in the above definition `A11`  and `A22`  are of union types","user":"U01L0RJC6FM","ts":"1617533261.411700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1LfB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh i am not sure i understood... in the above definition "},{"type":"text","text":"A11","style":{"code":true}},{"type":"text","text":"  and "},{"type":"text","text":"A22","style":{"code":true}},{"type":"text","text":"  are of union types"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"58484fdd-7cf2-4c8a-b56b-6063db96e24a","type":"message","text":"should I instead make this abstract type and make `A11`  abstract types?","user":"U01L0RJC6FM","ts":"1617533398.411900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Rvv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"should I instead make this abstract type and make "},{"type":"text","text":"A11","style":{"code":true}},{"type":"text","text":"  abstract types?"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"d11284b9-93d1-443f-b692-f98c8d6e2869","type":"message","text":"I don't want to encode the entire tree-structure in the type declaration of `HssNode`","user":"U01L0RJC6FM","ts":"1617533400.412100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Yr/B","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't want to encode the entire tree-structure in the type declaration of "},{"type":"text","text":"HssNode","style":{"code":true}}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"a736e8d5-c9fd-4a12-a1be-19b3479c106e","type":"message","text":"at that point, making it abstract is fine","user":"UH24GRBLL","ts":"1617533518.412300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tgsS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"at that point, making it abstract is fine"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"e2b2f709-6a90-4ac9-b411-05e922f1c150","type":"message","text":"as long as you pass the result into another function (thereby creating a function barrier, which allows it to be dispatched based on the concrete type)","user":"UH24GRBLL","ts":"1617533541.412500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"y2Po","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"as long as you pass the result into another function (thereby creating a function barrier, which allows it to be dispatched based on the concrete type)"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"f9bae6bf-3f7c-4b14-b47d-024b2e99aef8","type":"message","text":"that should at least get rid of `::Any`","user":"UH24GRBLL","ts":"1617533568.412700","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1617533570.000000"},"blocks":[{"type":"rich_text","block_id":"lioe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that should at least get rid of "},{"type":"text","text":"::Any","style":{"code":true}}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"c61d9471-29e1-4f63-a580-2ce08fe4c277","type":"message","text":"just to clarify.. the route I am going now is this:\n```abstract type HssMatrix{T} &lt;: AbstractMatrix{T} end\n\nmutable struct HssLeaf{T&lt;:Number} &lt;: HssMatrix{T}\n  D ::Matrix{T}\n  U ::Matrix{T}\n  V ::Matrix{T}\n\n  ...\nend\n\n# definition of branch nodes\nmutable struct HssNode{T&lt;:Number} &lt;: HssMatrix{T}\n  A11 ::HssMatrix{T}\n  A22 ::HssMatrix{T}\n  B12 ::Matrix{T}\n  B21 ::Matrix{T}\n\n  sz1 ::Tuple{Int, Int}\n  sz2 ::Tuple{Int, Int}\n\n  R1 ::Matrix{T}\n  W1 ::Matrix{T}\n  R2 ::Matrix{T}\n  W2 ::Matrix{T}\n\n  ...\nend```","user":"U01L0RJC6FM","ts":"1617533774.413000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"24e6F","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"just to clarify.. the route I am going now is this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"abstract type HssMatrix{T} <: AbstractMatrix{T} end\n\nmutable struct HssLeaf{T<:Number} <: HssMatrix{T}\n  D ::Matrix{T}\n  U ::Matrix{T}\n  V ::Matrix{T}\n\n  ...\nend\n\n# definition of branch nodes\nmutable struct HssNode{T<:Number} <: HssMatrix{T}\n  A11 ::HssMatrix{T}\n  A22 ::HssMatrix{T}\n  B12 ::Matrix{T}\n  B21 ::Matrix{T}\n\n  sz1 ::Tuple{Int, Int}\n  sz2 ::Tuple{Int, Int}\n\n  R1 ::Matrix{T}\n  W1 ::Matrix{T}\n  R2 ::Matrix{T}\n  W2 ::Matrix{T}\n\n  ...\nend"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"e61db942-962e-44e4-ac62-c1b7b0e950c5","type":"message","text":"this is what you meant right?","user":"U01L0RJC6FM","ts":"1617533782.413200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nE7fJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this is what you meant right?"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"219fa756-6563-436e-9ab5-d5d49e00d92a","type":"message","text":"essentially, yes","user":"UH24GRBLL","ts":"1617533798.413400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"S+Q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"essentially, yes"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"fc87f919-c3fe-493c-bfc8-1f232779e8c7","type":"message","text":"I'd give them more type parameters to not limit R/W to `Matrix`, but yes","user":"UH24GRBLL","ts":"1617533830.413600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Z1Ko","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'd give them more type parameters to not limit R/W to "},{"type":"text","text":"Matrix","style":{"code":true}},{"type":"text","text":", but yes"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"4b91fc3b-37dc-4eec-ab6e-4a83a7b1f4f2","type":"message","text":"(job for the future and all that though)","user":"UH24GRBLL","ts":"1617533855.413800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cMYg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(job for the future and all that though)"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"2b8e6a53-98a7-4c5e-b51f-f9067a43c5d2","type":"message","text":"yes i guess. although i know that R/W should be fairly small","user":"U01L0RJC6FM","ts":"1617533876.414000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qKko0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes i guess. although i know that R/W should be fairly small"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"020c87e4-eac0-4779-8cf6-b102cda55208","type":"message","text":"so probably going the Matrix way is the most efficient","user":"U01L0RJC6FM","ts":"1617533890.414200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q3J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so probably going the Matrix way is the most efficient"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"b4da7e9e-a756-46a0-83df-e1291ac15092","type":"message","text":"just for understanding though.. could you explain to me why the abstract type is better than the small union for A11 and A22?","user":"U01L0RJC6FM","ts":"1617533920.414400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qNSxZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"just for understanding though.. could you explain to me why the abstract type is better than the small union for A11 and A22?"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"f87711f5-d49a-4f9f-afc3-45fa5681aee9","type":"message","text":"it's not about efficiency, but about allowing something like a `CuMatrix` to work as well","user":"UH24GRBLL","ts":"1617533930.414600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=9ql","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's not about efficiency, but about allowing something like a "},{"type":"text","text":"CuMatrix","style":{"code":true}},{"type":"text","text":" to work as well"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"0d01105c-11ca-4b3a-8c1f-8d2881ace644","type":"message","text":"oh i see","user":"U01L0RJC6FM","ts":"1617533940.414800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cHrXJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh i see"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"fb674743-182c-4916-af12-235cae813b01","type":"message","text":"because the compiler will probably be able to at least say that the result will be `HssMatrix` instead of jumping directly to `Any`","user":"UH24GRBLL","ts":"1617533989.415000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"G8X","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"because the compiler will probably be able to at least say that the result will be "},{"type":"text","text":"HssMatrix","style":{"code":true}},{"type":"text","text":" instead of jumping directly to "},{"type":"text","text":"Any","style":{"code":true}}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"cb553d8e-13e9-48c8-804d-e01b0204cc09","type":"message","text":"i mean looking at getproperty I still see a type-instability (unsurprisingly)","user":"U01L0RJC6FM","ts":"1617533994.415200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"i46","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i mean looking at getproperty I still see a type-instability (unsurprisingly)"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"72ad000d-6f66-42b9-9eb4-adf9cc642b2a","type":"message","text":"```julia&gt; @code_warntype hssA.S1\nVariables\n  #self#::Core.Const(getproperty)\n  x::HssNode{Float64}\n  f::Symbol\n\nBody::Any\n1 ─ %1 = Base.getfield(x, f)::Any\n└──      return %1```","user":"U01L0RJC6FM","ts":"1617534012.415400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Fcsv","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @code_warntype hssA.S1\nVariables\n  #self#::Core.Const(getproperty)\n  x::HssNode{Float64}\n  f::Symbol\n\nBody::Any\n1 ─ %1 = Base.getfield(x, f)::Any\n└──      return %1"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"a8664699-cdfb-4ca0-b701-392edf962856","type":"message","text":"that's a red herring - note that `f` is a generic symbol","user":"UH24GRBLL","ts":"1617534041.415600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RPRfi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's a red herring - note that "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" is a generic symbol"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"945e8922-e1fa-4a44-9124-abdebcd1cecc","type":"message","text":"it can't know _which_ field you're trying to access","user":"UH24GRBLL","ts":"1617534055.415800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6cgIY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it can't know "},{"type":"text","text":"which","style":{"italic":true}},{"type":"text","text":" field you're trying to access"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"4d74534c-ce61-49be-8c18-c4018993e5e5","type":"message","text":"oh i see","user":"U01L0RJC6FM","ts":"1617534094.416000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Mczx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh i see"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"a03fb9e0-9789-4147-8a0d-0307bb5c4add","type":"message","text":"if you use that in a function, `S1` will be a constant and as such it will be constant propagated into getfield","user":"UH24GRBLL","ts":"1617534122.416200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0JCyb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you use that in a function, "},{"type":"text","text":"S1","style":{"code":true}},{"type":"text","text":" will be a constant and as such it will be constant propagated into getfield"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"87be2bfc-0483-4173-8d48-535996eb2d1b","type":"message","text":"ok, let me report back on that.. i have implemented it and running speedtests :crossed_fingers:","user":"U01L0RJC6FM","ts":"1617534202.416400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"e5QL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ok, let me report back on that.. i have implemented it and running speedtests "},{"type":"emoji","name":"crossed_fingers"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"4133b7ad-0bbd-4978-b8b3-94161dd746bf","type":"message","text":"hmm it still fails on me - but i think we are closer to the solution","user":"U01L0RJC6FM","ts":"1617537067.417000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MyRgF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmm it still fails on me - but i think we are closer to the solution"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"4b048387-4338-4c59-bbc4-aef8e23de5a8","type":"message","text":"this is the output of `@code_warntype` :\n```│   %74 = Base.getproperty(S1, :A22)::HssMatrix{Float64}\n│   %75 = Base.getindex(A, bnd1, bnd2)::SparseMatrixCSC{Float64, Int64}\n│   %76 = Base.getindex(A, bnd2, bnd1)::SparseMatrixCSC{Float64, Int64}\n│   %77 = Base.getproperty(S2, :A22)::HssMatrix{Float64}\n│         (Abb = Main.BlockMatrix(%74, %75, %76, %77))\n│   %79 = Core.tuple(Aii, Aib, Abi, Abb)::Tuple{BlockMatrix{Float64, _A, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, _B} where {_A&lt;:AbstractMatrix{Float64}, _B&lt;:AbstractMatrix{Float64}}, BlockMatrix{Float64, LowRankMatrix{Float64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, LowRankMatrix{Float64}}, BlockMatrix{Float64, LowRankMatrix{Float64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, LowRankMatrix{Float64}}, BlockMatrix{Float64, _A, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, _B} where {_A&lt;:AbstractMatrix{Float64}, _B&lt;:AbstractMatrix{Float64}}}\n└──       return %79```","user":"U01L0RJC6FM","ts":"1617537095.417200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qTEga","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this is the output of "},{"type":"text","text":"@code_warntype","style":{"code":true}},{"type":"text","text":" :\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"│   %74 = Base.getproperty(S1, :A22)::HssMatrix{Float64}\n│   %75 = Base.getindex(A, bnd1, bnd2)::SparseMatrixCSC{Float64, Int64}\n│   %76 = Base.getindex(A, bnd2, bnd1)::SparseMatrixCSC{Float64, Int64}\n│   %77 = Base.getproperty(S2, :A22)::HssMatrix{Float64}\n│         (Abb = Main.BlockMatrix(%74, %75, %76, %77))\n│   %79 = Core.tuple(Aii, Aib, Abi, Abb)::Tuple{BlockMatrix{Float64, _A, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, _B} where {_A<:AbstractMatrix{Float64}, _B<:AbstractMatrix{Float64}}, BlockMatrix{Float64, LowRankMatrix{Float64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, LowRankMatrix{Float64}}, BlockMatrix{Float64, LowRankMatrix{Float64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, LowRankMatrix{Float64}}, BlockMatrix{Float64, _A, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, _B} where {_A<:AbstractMatrix{Float64}, _B<:AbstractMatrix{Float64}}}\n└──       return %79"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"7032097a-bf3b-4358-8781-3a1077b5e44b","type":"message","text":"that's much better than `NTuple{4,Any}`","user":"UH24GRBLL","ts":"1617537169.417400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vn1Y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's much better than "},{"type":"text","text":"NTuple{4,Any}","style":{"code":true}}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"0990943c-5cc9-4213-b483-ddadcfc34bee","type":"message","text":"where I have something like this:\n```function _assemble_blocks(A::S, S1::HssMatrix{T}, S2::HssMatrix{T}, int1::Vector{Int}, int2::Vector{Int}, bnd1::Vector{Int}, bnd2::Vector{Int}) where {T, S&lt;:AbstractMatrix{T}}\n\n  # form the blocks\n  Aii = BlockMatrix(S1.A11, A[int1, int2], A[int2, int1], S2.A11)\n  ...\n  return Aii, Aib, Abi, Abb\nend```","user":"U01L0RJC6FM","ts":"1617537176.417600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LNxpi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"where I have something like this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function _assemble_blocks(A::S, S1::HssMatrix{T}, S2::HssMatrix{T}, int1::Vector{Int}, int2::Vector{Int}, bnd1::Vector{Int}, bnd2::Vector{Int}) where {T, S<:AbstractMatrix{T}}\n\n  # form the blocks\n  Aii = BlockMatrix(S1.A11, A[int1, int2], A[int2, int1], S2.A11)\n  ...\n  return Aii, Aib, Abi, Abb\nend"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"d07cf5a4-2fe7-4b73-9e60-9965897cff69","type":"message","text":"yes, true but I think I want to have `BlockMatrix{::HssMatrix{Float64}, ::...}`","user":"U01L0RJC6FM","ts":"1617537262.417800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dj8Fl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, true but I think I want to have "},{"type":"text","text":"BlockMatrix{::HssMatrix{Float64}, ::...}","style":{"code":true}}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"74f1923f-0daa-4505-8084-d48ef1930e99","type":"message","text":"at least no performance benefits so far..","user":"U01L0RJC6FM","ts":"1617537298.418000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"P=x","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"at least no performance benefits so far.."}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"a5a2e6d3-bfce-41c4-b61a-63c8dc52788d","type":"message","text":"what does the function for `BlockMatrix` look like?","user":"UH24GRBLL","ts":"1617537313.418200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w6XH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what does the function for "},{"type":"text","text":"BlockMatrix","style":{"code":true}},{"type":"text","text":" look like?"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"6e1ba26f-46fa-4444-b3af-1bf605c24382","type":"message","text":"i think what I need is the rest of the code to know that it gets a HssMatrix","user":"U01L0RJC6FM","ts":"1617537330.418500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"A4GgJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i think what I need is the rest of the code to know that it gets a HssMatrix"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"4c21c0bf-00a9-4356-8ce0-cf766340f013","type":"message","text":"```struct BlockMatrix{T, T11 &lt;: AbstractMatrix{T}, T12 &lt;: AbstractMatrix{T}, T21 &lt;: AbstractMatrix{T}, T22 &lt;: AbstractMatrix{T}} &lt;: AbstractMatrix{T}\n  A11::T11\n  A12::T12\n  A21::T21\n  A22::T22\n\n  # inner constructor checks for consistency among dimensions\n  function BlockMatrix(A11::AbstractMatrix{T}, A12::AbstractMatrix{T}, A21::AbstractMatrix{T}, A22::AbstractMatrix{T}) where T\n    size(A11, 1) == size(A12, 1) || throw(DimensionMismatch(\"first dimension of A11 and A12 do not match. Expected $(size(A11, 1)), got $(size(A12, 1))\"))\n    size(A11, 2) == size(A21, 2) || throw(DimensionMismatch(\"second dimension of A11 and A12 do not match. Expected $(size(A11, 2)), got $(size(A21, 2))\"))\n    size(A22, 1) == size(A21, 1) || throw(DimensionMismatch(\"first dimension of A22 and A21 do not match. Expected $(size(A22, 1)), got $(size(A21, 1))\"))\n    size(A22, 2) == size(A12, 2) || throw(DimensionMismatch(\"second dimension of A22 and A12 do not match. Expected $(size(A22, 2)), got $(size(A12, 2))\"))\n    new{T, typeof(A11), typeof(A12), typeof(A21), typeof(A22)}(A11, A12, A21, A22)\n  end\nend```","user":"U01L0RJC6FM","ts":"1617537342.418700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AKHx7","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct BlockMatrix{T, T11 <: AbstractMatrix{T}, T12 <: AbstractMatrix{T}, T21 <: AbstractMatrix{T}, T22 <: AbstractMatrix{T}} <: AbstractMatrix{T}\n  A11::T11\n  A12::T12\n  A21::T21\n  A22::T22\n\n  # inner constructor checks for consistency among dimensions\n  function BlockMatrix(A11::AbstractMatrix{T}, A12::AbstractMatrix{T}, A21::AbstractMatrix{T}, A22::AbstractMatrix{T}) where T\n    size(A11, 1) == size(A12, 1) || throw(DimensionMismatch(\"first dimension of A11 and A12 do not match. Expected $(size(A11, 1)), got $(size(A12, 1))\"))\n    size(A11, 2) == size(A21, 2) || throw(DimensionMismatch(\"second dimension of A11 and A12 do not match. Expected $(size(A11, 2)), got $(size(A21, 2))\"))\n    size(A22, 1) == size(A21, 1) || throw(DimensionMismatch(\"first dimension of A22 and A21 do not match. Expected $(size(A22, 1)), got $(size(A21, 1))\"))\n    size(A22, 2) == size(A12, 2) || throw(DimensionMismatch(\"second dimension of A22 and A12 do not match. Expected $(size(A22, 2)), got $(size(A12, 2))\"))\n    new{T, typeof(A11), typeof(A12), typeof(A21), typeof(A22)}(A11, A12, A21, A22)\n  end\nend"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"b57d8878-cbb8-4974-a35f-209505ed1b34","type":"message","text":"I don't think you need those `::AbstractMatrix{T}` there","user":"UH24GRBLL","ts":"1617537510.418900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"m6=Cp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't think you need those "},{"type":"text","text":"::AbstractMatrix{T}","style":{"code":true}},{"type":"text","text":" there"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"c93e941d-5e2f-42ba-a644-345de205b625","type":"message","text":"in the function head","user":"UH24GRBLL","ts":"1617537519.419100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rJK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in the function head"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"d975b139-626e-4196-8a57-c9828f7c19d0","type":"message","text":"is that type stable?","user":"UH24GRBLL","ts":"1617537544.419300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ts=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is that type stable?"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"d4c915e7-a318-4b1e-8e0d-a05c6d26a457","type":"message","text":"unfortunately no","user":"U01L0RJC6FM","ts":"1617537642.419500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xME","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"unfortunately no"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"9c5f5d5d-cf54-4a57-901f-599e08d1d445","type":"message","text":"```│         (Abi = Main.BlockMatrix(%69, %70, %71, %72))\n│   %74 = Base.getproperty(S1, :A22)::HssMatrix{Float64}\n│   %75 = Base.getindex(A, bnd1, bnd2)::SparseMatrixCSC{Float64, Int64}\n│   %76 = Base.getindex(A, bnd2, bnd1)::SparseMatrixCSC{Float64, Int64}\n│   %77 = Base.getproperty(S2, :A22)::HssMatrix{Float64}\n│         (Abb = Main.BlockMatrix(%74, %75, %76, %77))\n│   %79 = Core.tuple(Aii, Aib, Abi, Abb)::Tuple{BlockMatrix{T, _B, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, _C} where {T, _B&lt;:AbstractMatrix{T}, _C&lt;:AbstractMatrix{T}}, BlockMatrix{_A, LowRankMatrix{Float64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, LowRankMatrix{Float64}} where _A, BlockMatrix{_A, LowRankMatrix{Float64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, LowRankMatrix{Float64}} where _A, BlockMatrix{T, _B, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, _C} where {T, _B&lt;:AbstractMatrix{T}, _C&lt;:AbstractMatrix{T}}}```","user":"U01L0RJC6FM","ts":"1617537645.419700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3FM","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"│         (Abi = Main.BlockMatrix(%69, %70, %71, %72))\n│   %74 = Base.getproperty(S1, :A22)::HssMatrix{Float64}\n│   %75 = Base.getindex(A, bnd1, bnd2)::SparseMatrixCSC{Float64, Int64}\n│   %76 = Base.getindex(A, bnd2, bnd1)::SparseMatrixCSC{Float64, Int64}\n│   %77 = Base.getproperty(S2, :A22)::HssMatrix{Float64}\n│         (Abb = Main.BlockMatrix(%74, %75, %76, %77))\n│   %79 = Core.tuple(Aii, Aib, Abi, Abb)::Tuple{BlockMatrix{T, _B, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, _C} where {T, _B<:AbstractMatrix{T}, _C<:AbstractMatrix{T}}, BlockMatrix{_A, LowRankMatrix{Float64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, LowRankMatrix{Float64}} where _A, BlockMatrix{_A, LowRankMatrix{Float64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, LowRankMatrix{Float64}} where _A, BlockMatrix{T, _B, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, _C} where {T, _B<:AbstractMatrix{T}, _C<:AbstractMatrix{T}}}"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"fd63c2bf-1e07-4d47-aab5-73ce28f65f6e","type":"message","text":"let me know if you want a MWE","user":"U01L0RJC6FM","ts":"1617537721.419900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R1HXy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"let me know if you want a MWE"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"5386e2c1-afb3-4866-9bb9-b91c475eecda","type":"message","text":"well that's the remaining core of your problem then","user":"UH24GRBLL","ts":"1617537872.420200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6Wut","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well that's the remaining core of your problem then"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"e9a744a2-7bd3-41dc-a49f-ef8eebe53ac1","type":"message","text":"the getindex call are stable now, but `BlockMatrix` itself doesn't seem to be stable","user":"UH24GRBLL","ts":"1617537946.420400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZkF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the getindex call are stable now, but "},{"type":"text","text":"BlockMatrix","style":{"code":true}},{"type":"text","text":" itself doesn't seem to be stable"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"64f8ae8b-74a3-408e-a7c1-cfa6e2434bd6","type":"message","text":"I should perhaps note that the getproperty lines highlight HssMatrix{Float64} in red because it is an abstract type","user":"U01L0RJC6FM","ts":"1617538072.420600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ncXUw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I should perhaps note that the getproperty lines highlight HssMatrix{Float64} in red because it is an abstract type"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"58c76156-6775-4079-a413-55ed4b70e959","type":"message","text":"but what i do not understand is why it becomes AbstractMatrix once it gets moved into BlockMatrix","user":"U01L0RJC6FM","ts":"1617538103.420800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QKp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but what i do not understand is why it becomes AbstractMatrix once it gets moved into BlockMatrix"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"1d88b8d0-34a9-4ece-a48d-3d862c13ca7b","type":"message","text":"<https://docs.julialang.org/en/v1/manual/performance-tips/#Type-declarations>","user":"UH24GRBLL","ts":"1617538740.421300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Fu+2z","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://docs.julialang.org/en/v1/manual/performance-tips/#Type-declarations"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"6e094bb8-3759-43c4-aad4-8be758e9e16e","type":"message","text":"if you don't want to specify the type as a type parameter, you'll have to live with that unfortunately","user":"UH24GRBLL","ts":"1617538762.421500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ajyu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you don't want to specify the type as a type parameter, you'll have to live with that unfortunately"}]}]}],"thread_ts":"1617523067.397700","parent_user_id":"U01L0RJC6FM"}]