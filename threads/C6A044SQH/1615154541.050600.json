[{"client_msg_id":"b8caef3d-7bba-4151-9959-b079d65fa1d0","type":"message","text":"Hi! I am trying to write a generic version of a function that takes a parametric type and constructs that type with a _different_ parameter. In more detail, my type hierarchy is roughly:\n```abstract type MySupertype{T} end\n\nstruct MyType1{T} &lt;: MySupertype{T}\n    field::T\nend\n\nstruct MyType2{T} &lt;: MySupertype{T}\n    field::T\nend```\nI realize the notation here doesn't work, but I want to do something like:\n```function my_fn(x::MT{T}) where MT{T} &lt;: MySupertype{T} where T\n    return ForwardDiff.gradient(p -&gt; MT(p...).field, [x.field])\nend```\nIs this possible, or do I need to write a different version of the function for the two possible values of `MT`? Thanks so much!","user":"U01L7RLFN2J","ts":"1615154541.050600","team":"T68168MUP","edited":{"user":"U01L7RLFN2J","ts":"1615157481.000000"},"blocks":[{"type":"rich_text","block_id":"olFHD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi! I am trying to write a generic version of a function that takes a parametric type and constructs that type with a "},{"type":"text","text":"different","style":{"italic":true}},{"type":"text","text":" parameter. In more detail, my type hierarchy is roughly:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"abstract type MySupertype{T} end\n\nstruct MyType1{T} <: MySupertype{T}\n    field::T\nend\n\nstruct MyType2{T} <: MySupertype{T}\n    field::T\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I realize the notation here doesn't work, but I want to do something like:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function my_fn(x::MT{T}) where MT{T} <: MySupertype{T} where T\n    return ForwardDiff.gradient(p -> MT(p...).field, [x.field])\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Is this possible, or do I need to write a different version of the function for the two possible values of "},{"type":"text","text":"MT","style":{"code":true}},{"type":"text","text":"? Thanks so much!"}]}]}],"thread_ts":"1615154541.050600","reply_count":11,"reply_users_count":4,"latest_reply":"1615157746.054700","reply_users":["B01J9QZ4SP8","UH24GRBLL","U7K185TUN","U01L7RLFN2J"],"subscribed":false,"reactions":[{"name":"bridge","users":["U01L7RLFN2J"],"count":1}]},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1615154542.050700","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1615154541.050600","parent_user_id":"U01L7RLFN2J"},{"type":"message","subtype":"bot_message","text":"Success, it has been cross posted <https://discourse.julialang.org/t/56700| to Discourse>. Keep and eye out on Discourse for responses and please add an answer there once you are satisfied with the solution so others can benefit as well. Happy debugging!","ts":"1615154940.051200","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1615154541.050600","parent_user_id":"U01L7RLFN2J"},{"client_msg_id":"41506432-28e5-4859-99ab-a8c7c62fad07","type":"message","text":"I'm not sure I understand where the different parameter is coming from?","user":"UH24GRBLL","ts":"1615155029.051400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"K//x","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not sure I understand where the different parameter is coming from?"}]}]}],"thread_ts":"1615154541.050600","parent_user_id":"U01L7RLFN2J"},{"client_msg_id":"47151b8e-5d05-4cde-bf34-05d2051ed480","type":"message","text":"Currently can't try it out but doesn't `where {T,MT&lt;:MySuperType{T}}`","user":"U7K185TUN","ts":"1615155037.051600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9fEqe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Currently can't try it out but doesn't "},{"type":"text","text":"where {T,MT<:MySuperType{T}}","style":{"code":true}}]}]}],"thread_ts":"1615154541.050600","parent_user_id":"U01L7RLFN2J"},{"client_msg_id":"7909151d-18b3-442f-b43e-e87682f17bde","type":"message","text":"yes","user":"UH24GRBLL","ts":"1615155060.051800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bF0m","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes"}]}]}],"thread_ts":"1615154541.050600","parent_user_id":"U01L7RLFN2J"},{"client_msg_id":"ae016b39-467f-4d84-a23f-6f07517de5bc","type":"message","text":"this reads like you're trying to restrict types to be put into `my_fn` though, which isn't really what the type annotations are for in julia","user":"UH24GRBLL","ts":"1615155115.052000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"91f","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this reads like you're trying to restrict types to be put into "},{"type":"text","text":"my_fn","style":{"code":true}},{"type":"text","text":" though, which isn't really what the type annotations are for in julia"}]}]}],"thread_ts":"1615154541.050600","parent_user_id":"U01L7RLFN2J"},{"client_msg_id":"879d22ff-c661-4d00-8163-975436b83d3c","type":"message","text":"The different parameter comes from `ForwardDiff`, which passes an argument of type `Dual` to the `MT` constructor. So unfortunately `where {T,MT&lt;:MySuperType{T}}` won't work since the elements of `p` are not of type `T`","user":"U01L7RLFN2J","ts":"1615156312.053400","team":"T68168MUP","edited":{"user":"U01L7RLFN2J","ts":"1615156435.000000"},"blocks":[{"type":"rich_text","block_id":"Uc4J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The different parameter comes from "},{"type":"text","text":"ForwardDiff","style":{"code":true}},{"type":"text","text":", which passes an argument of type "},{"type":"text","text":"Dual","style":{"code":true}},{"type":"text","text":" to the "},{"type":"text","text":"MT","style":{"code":true}},{"type":"text","text":" constructor. So unfortunately "},{"type":"text","text":"where {T,MT<:MySuperType{T}}","style":{"code":true}},{"type":"text","text":" won't work since the elements of "},{"type":"text","text":"p","style":{"code":true}},{"type":"text","text":" are not of type "},{"type":"text","text":"T","style":{"code":true}}]}]}],"thread_ts":"1615154541.050600","parent_user_id":"U01L7RLFN2J"},{"client_msg_id":"5682f995-a363-43dc-bfbc-1644884022ae","type":"message","text":"oh if that's all you need, `function f(x::MT{T}) where {T, MT &lt;: MySupertype}` should be plenty","user":"UH24GRBLL","ts":"1615157110.053900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cf27z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh if that's all you need, "},{"type":"text","text":"function f(x::MT{T}) where {T, MT <: MySupertype}","style":{"code":true}},{"type":"text","text":" should be plenty"}]}]}],"thread_ts":"1615154541.050600","parent_user_id":"U01L7RLFN2J"},{"client_msg_id":"2fa402e1-58fb-4a94-bb68-3bde78527509","type":"message","text":"but then again, why restrict it to `&lt;: MySupertype` in the first place?","user":"UH24GRBLL","ts":"1615157150.054100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HZ4M","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but then again, why restrict it to "},{"type":"text","text":"<: MySupertype","style":{"code":true}},{"type":"text","text":" in the first place?"}]}]}],"thread_ts":"1615154541.050600","parent_user_id":"U01L7RLFN2J"},{"client_msg_id":"3c5e3f24-8665-45d0-ae7f-a9ed9c019940","type":"message","text":"also, `MT !== MT{Int}`, so using the former in the function is fine","user":"UH24GRBLL","ts":"1615157172.054300","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1615157188.000000"},"blocks":[{"type":"rich_text","block_id":"ZOgx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"also, "},{"type":"text","text":"MT !== MT{Int}","style":{"code":true}},{"type":"text","text":", so using the former in the function is fine"}]}]}],"thread_ts":"1615154541.050600","parent_user_id":"U01L7RLFN2J"},{"client_msg_id":"240ef559-e3eb-4313-9405-473b4e7038f4","type":"message","text":"That gives my the error `LoadError: TypeError: in Type{...} expression, expected UnionAll, got a value of type TypeVar`.\n\nFair question, I guess that's not strictly necessary. In my actual use case there will be other errors if `MT` isn't of type `MySupertype`","user":"U01L7RLFN2J","ts":"1615157746.054700","team":"T68168MUP","edited":{"user":"U01L7RLFN2J","ts":"1615157752.000000"},"blocks":[{"type":"rich_text","block_id":"Ggd=T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That gives my the error "},{"type":"text","text":"LoadError: TypeError: in Type{...} expression, expected UnionAll, got a value of type TypeVar","style":{"code":true}},{"type":"text","text":".\n\nFair question, I guess that's not strictly necessary. In my actual use case there will be other errors if "},{"type":"text","text":"MT","style":{"code":true}},{"type":"text","text":" isn't of type "},{"type":"text","text":"MySupertype","style":{"code":true}}]}]}],"thread_ts":"1615154541.050600","parent_user_id":"U01L7RLFN2J"}]