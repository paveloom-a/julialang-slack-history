[{"client_msg_id":"1a600fca-5dc4-4f2b-880f-16596057ac97","type":"message","text":"Can anybody help me with understanding `Transducers`? I'm trying to use `collect((1:3,2:4)|&gt;Zip|&gt;MapSplat(==))` to get `[0,0,0]` (i.e. I want to do an element wise binary operation on 2 iterators). However I get a really long error message that I don't really understand. Any ideas?","user":"U0179G7FG4F","ts":"1609552455.001900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Au9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can anybody help me with understanding "},{"type":"text","text":"Transducers","style":{"code":true}},{"type":"text","text":"? I'm trying to use "},{"type":"text","text":"collect((1:3,2:4)|>Zip|>MapSplat(==))","style":{"code":true}},{"type":"text","text":" to get "},{"type":"text","text":"[0,0,0]","style":{"code":true}},{"type":"text","text":" (i.e. I want to do an element wise binary operation on 2 iterators). However I get a really long error message that I don't really understand. Any ideas?"}]}]}],"thread_ts":"1609552455.001900","reply_count":20,"reply_users_count":4,"latest_reply":"1609656153.065900","reply_users":["U014LRLJXRP","U0179G7FG4F","UC7AF7NSU","UH24GRBLL"],"subscribed":false},{"client_msg_id":"5563399f-b14d-4dba-80d2-a66b0f50fe34","type":"message","text":"I might not be much help, but can you show what you want to do without piping?  It looks like `Zip` shouldn’t take in `(1:3, 2:4)`, but isn’t that what you’re doing with the pipes?  (Sorry, pipes are unintuitive to me).","user":"U014LRLJXRP","ts":"1609554101.004800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nO4Sw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I might not be much help, but can you show what you want to do without piping?  It looks like "},{"type":"text","text":"Zip","style":{"code":true}},{"type":"text","text":" shouldn’t take in "},{"type":"text","text":"(1:3, 2:4)","style":{"code":true}},{"type":"text","text":", but isn’t that what you’re doing with the pipes?  (Sorry, pipes are unintuitive to me)."}]}]}],"thread_ts":"1609552455.001900","parent_user_id":"U0179G7FG4F"},{"client_msg_id":"d97fe841-3851-4269-b43b-b50cb2e41b09","type":"message","text":"The working version of what I'm trying to do is `collect(MapSplat(==),zip(1:3,2:4))`. The part that I can't find a way of doing is replacing `zip` with a transducer","user":"U0179G7FG4F","ts":"1609554476.005000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"m==R5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The working version of what I'm trying to do is "},{"type":"text","text":"collect(MapSplat(==),zip(1:3,2:4))","style":{"code":true}},{"type":"text","text":". The part that I can't find a way of doing is replacing "},{"type":"text","text":"zip","style":{"code":true}},{"type":"text","text":" with a transducer"}]}]}],"thread_ts":"1609552455.001900","parent_user_id":"U0179G7FG4F"},{"client_msg_id":"61fb776d-e28d-4201-817a-1dd8ec807d5c","type":"message","text":"Ohh, I see.  Why does `zip` need to be placed with a transducer?  (Sorry, I haven’t used `Transducers` before!) :slightly_smiling_face:","user":"U014LRLJXRP","ts":"1609554648.005200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QG40a","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ohh, I see.  Why does "},{"type":"text","text":"zip","style":{"code":true}},{"type":"text","text":" need to be placed with a transducer?  (Sorry, I haven’t used "},{"type":"text","text":"Transducers","style":{"code":true}},{"type":"text","text":" before!) "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1609552455.001900","parent_user_id":"U0179G7FG4F"},{"client_msg_id":"8a61b92d-c2a3-4b95-ad2d-f19f7a335fb5","type":"message","text":"`zip` has a fairly significant overhead that leads to defining `mapreduce(f, op, A...) = zip(A...) |&gt; MapSplat(op) |&gt; foldxl(f)` to be slow.","user":"U0179G7FG4F","ts":"1609555210.005400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"y3YSD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"zip","style":{"code":true}},{"type":"text","text":" has a fairly significant overhead that leads to defining "},{"type":"text","text":"mapreduce(f, op, A...) = zip(A...) |> MapSplat(op) |> foldxl(f)","style":{"code":true}},{"type":"text","text":" to be slow."}]}]}],"thread_ts":"1609552455.001900","parent_user_id":"U0179G7FG4F","reactions":[{"name":"open_mouth","users":["U014LRLJXRP"],"count":1},{"name":"+1","users":["U014LRLJXRP"],"count":1}]},{"client_msg_id":"91db0787-c525-4d1a-8e89-6649aca46f08","type":"message","text":"<@UC7AF7NSU> any ideas?","user":"U0179G7FG4F","ts":"1609559425.006000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"a=BV","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UC7AF7NSU"},{"type":"text","text":" any ideas?"}]}]}],"thread_ts":"1609552455.001900","parent_user_id":"U0179G7FG4F"},{"client_msg_id":"d2f1b9f4-17ae-47ee-be29-6830819a55ca","type":"message","text":"Yeah, `collect(MapSplat(==),zip(1:3,2:4))` is the way to go. Another equivalent syntax is `collect(zip(1:3,2:4)|&gt;MapSplat(==))`. Transducers etc. have dedicated supports for `zip` so you are not \"missing\" anything by just using `zip` from `Base`.\n\n(BTW, using `Zip` for name for this was a bad idea. I'm going to rename this to `TeeZip`: <https://github.com/JuliaFolds/Transducers.jl/issues/40> Just mentioning this since I think it's reasonable to miss-use this API)","user":"UC7AF7NSU","ts":"1609559910.006200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3sYKT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, "},{"type":"text","text":"collect(MapSplat(==),zip(1:3,2:4))","style":{"code":true}},{"type":"text","text":" is the way to go. Another equivalent syntax is "},{"type":"text","text":"collect(zip(1:3,2:4)|>MapSplat(==))","style":{"code":true}},{"type":"text","text":". Transducers etc. have dedicated supports for "},{"type":"text","text":"zip","style":{"code":true}},{"type":"text","text":" so you are not \"missing\" anything by just using "},{"type":"text","text":"zip","style":{"code":true}},{"type":"text","text":" from "},{"type":"text","text":"Base","style":{"code":true}},{"type":"text","text":".\n\n(BTW, using "},{"type":"text","text":"Zip","style":{"code":true}},{"type":"text","text":" for name for this was a bad idea. I'm going to rename this to "},{"type":"text","text":"TeeZip","style":{"code":true}},{"type":"text","text":": "},{"type":"link","url":"https://github.com/JuliaFolds/Transducers.jl/issues/40"},{"type":"text","text":" Just mentioning this since I think it's reasonable to miss-use this API)"}]}]}],"thread_ts":"1609552455.001900","parent_user_id":"U0179G7FG4F"},{"client_msg_id":"33baf5a7-6c39-4018-ae10-86773b3f28e8","type":"message","text":"`zip` does not fit into \"iterator transformation vs transducers\" dualism because it's not really an iterator transformation (...which is a complicated way to say that there is nothing I can do at the API level)","user":"UC7AF7NSU","ts":"1609560182.006400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NRK2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"zip","style":{"code":true}},{"type":"text","text":" does not fit into \"iterator transformation vs transducers\" dualism because it's not really an iterator transformation (...which is a complicated way to say that there is nothing I can do at the API level)"}]}]}],"thread_ts":"1609552455.001900","parent_user_id":"U0179G7FG4F"},{"client_msg_id":"f8a6a382-a942-4c8e-8218-ed36a5190a25","type":"message","text":"anyway, let me know if you see performance overheads of `zip` with Transducers.jl (MWE would be great)","user":"UC7AF7NSU","ts":"1609560252.006600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zKTFh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"anyway, let me know if you see performance overheads of "},{"type":"text","text":"zip","style":{"code":true}},{"type":"text","text":" with Transducers.jl (MWE would be great)"}]}]}],"thread_ts":"1609552455.001900","parent_user_id":"U0179G7FG4F"},{"client_msg_id":"8b5d9c17-c57b-4799-8bf4-5eb74421720e","type":"message","text":"that's unfortunate. In that case zip needs to be sped way up. The above mapreduce is 35x slower than the for loop","user":"U0179G7FG4F","ts":"1609560274.006800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aSu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's unfortunate. In that case zip needs to be sped way up. The above mapreduce is 35x slower than the for loop"}]}]}],"thread_ts":"1609552455.001900","parent_user_id":"U0179G7FG4F","reactions":[{"name":"open_mouth","users":["U014LRLJXRP"],"count":1}]},{"client_msg_id":"414d975c-93ba-4b0a-81ff-df277a4370a2","type":"message","text":"mwe is\n```x = randn(10240); y = similar(x)\nfunction f2(x, y)\n               total=0\n               @inbounds for i in 1:length(x)\n                       total += x[i]==y[i]\n               end\n               return total\n               end\n@btime f2(x,y)\n@btime @inbounds mapreduce(==,+,x, y)```\n","user":"U0179G7FG4F","ts":"1609560410.007100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qtE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"mwe is\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"x = randn(10240); y = similar(x)\nfunction f2(x, y)\n               total=0\n               @inbounds for i in 1:length(x)\n                       total += x[i]==y[i]\n               end\n               return total\n               end\n@btime f2(x,y)\n@btime @inbounds mapreduce(==,+,x, y)"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1609552455.001900","parent_user_id":"U0179G7FG4F"},{"client_msg_id":"aea4af87-514c-43a8-b572-e2f44f9b51be","type":"message","text":"are you sure that `zip` is the bottle neck here?","user":"UH24GRBLL","ts":"1609576574.009500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Lqc7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"are you sure that "},{"type":"text","text":"zip","style":{"code":true}},{"type":"text","text":" is the bottle neck here?"}]}]}],"thread_ts":"1609552455.001900","parent_user_id":"U0179G7FG4F"},{"client_msg_id":"6e452c51-f603-465b-b0af-d50f34fb8e98","type":"message","text":"I thought it was decided that the intermediaries created by `mapreduce` without a `dims` argument are the problem :thinking_face:","user":"UH24GRBLL","ts":"1609576597.009700","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1609576610.000000"},"blocks":[{"type":"rich_text","block_id":"Wg=c","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I thought it was decided that the intermediaries created by "},{"type":"text","text":"mapreduce","style":{"code":true}},{"type":"text","text":" without a "},{"type":"text","text":"dims","style":{"code":true}},{"type":"text","text":" argument are the problem "},{"type":"emoji","name":"thinking_face"}]}]}],"thread_ts":"1609552455.001900","parent_user_id":"U0179G7FG4F"},{"client_msg_id":"dbe8895c-7c62-4bfe-b32f-4de6639562e9","type":"message","text":"if you're referencing the issue in some other slack thread, that is","user":"UH24GRBLL","ts":"1609576628.010000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ggs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you're referencing the issue in some other slack thread, that is"}]}]}],"thread_ts":"1609552455.001900","parent_user_id":"U0179G7FG4F"},{"client_msg_id":"0f252127-bb13-42d2-bbb1-f948ae9f927e","type":"message","text":"this is after defining `mapreduce(f, op, A...) = @inbounds foldxt(f, MapSplat(op), zip(A...), simd=true)`","user":"U0179G7FG4F","ts":"1609607673.038400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MBCK0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this is after defining "},{"type":"text","text":"mapreduce(f, op, A...) = @inbounds foldxt(f, MapSplat(op), zip(A...), simd=true)","style":{"code":true}}]}]}],"thread_ts":"1609552455.001900","parent_user_id":"U0179G7FG4F"},{"client_msg_id":"bc73af4e-a6d7-4df0-a310-0d7a23f9ce02","type":"message","text":"Your manual version is very compiler-friendly because it hard-codes initial value. If I include the `init` in the transducer version, it's somewhat close to the manual version:\n\n```using Transducers\nusing BenchmarkTools\n\nx = randn(10240);\ny = similar(x);\nfunction f2(x, y)\n    total = 0\n    @inbounds for i in 1:length(x)\n        total += x[i] == y[i]\n    end\n    return total\nend\n\nf3(x, y) = foldxl(+, MapSplat(==), zip(x, y); simd = true)\nf4(x, y) = foldxl(+, MapSplat(==), zip(x, y); init = 0, simd = true)\n\n@btime f2(x, y)\n@btime f3(x, y)\n@btime f4(x, y)```\nprints\n\n```  2.694 μs (0 allocations: 0 bytes)\n  44.666 μs (2 allocations: 48 bytes)\n  3.325 μs (2 allocations: 48 bytes)```\nThe transducer version still is ~20% slower and I need to look into it for exactly why. (But hey, if you throw more threads, processes, or GPUs, you can easily beat the manual sequential loop :smile:)","user":"UC7AF7NSU","ts":"1609634731.055300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XXw4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Your manual version is very compiler-friendly because it hard-codes initial value. If I include the "},{"type":"text","text":"init","style":{"code":true}},{"type":"text","text":" in the transducer version, it's somewhat close to the manual version:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using Transducers\nusing BenchmarkTools\n\nx = randn(10240);\ny = similar(x);\nfunction f2(x, y)\n    total = 0\n    @inbounds for i in 1:length(x)\n        total += x[i] == y[i]\n    end\n    return total\nend\n\nf3(x, y) = foldxl(+, MapSplat(==), zip(x, y); simd = true)\nf4(x, y) = foldxl(+, MapSplat(==), zip(x, y); init = 0, simd = true)\n\n@btime f2(x, y)\n@btime f3(x, y)\n@btime f4(x, y)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nprints\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"  2.694 μs (0 allocations: 0 bytes)\n  44.666 μs (2 allocations: 48 bytes)\n  3.325 μs (2 allocations: 48 bytes)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nThe transducer version still is ~20% slower and I need to look into it for exactly why. (But hey, if you throw more threads, processes, or GPUs, you can easily beat the manual sequential loop "},{"type":"emoji","name":"smile"},{"type":"text","text":")"}]}]}],"thread_ts":"1609552455.001900","parent_user_id":"U0179G7FG4F"},{"client_msg_id":"45596700-69e0-4a3f-b35d-d01d83e646da","type":"message","text":"why does specifying the `init` make so much difference? I would think that the `foldxl` would figure out that `0` was the initial value for `+` very cheaply.","user":"U0179G7FG4F","ts":"1609634928.055500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dywI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"why does specifying the "},{"type":"text","text":"init","style":{"code":true}},{"type":"text","text":" make so much difference? I would think that the "},{"type":"text","text":"foldxl","style":{"code":true}},{"type":"text","text":" would figure out that "},{"type":"text","text":"0","style":{"code":true}},{"type":"text","text":" was the initial value for "},{"type":"text","text":"+","style":{"code":true}},{"type":"text","text":" very cheaply."}]}]}],"thread_ts":"1609552455.001900","parent_user_id":"U0179G7FG4F"},{"client_msg_id":"afc82a33-8274-4ac5-a2db-77331c1e0134","type":"message","text":"Thanks for taking the time to look at this by the way!","user":"U0179G7FG4F","ts":"1609634967.056100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rtt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks for taking the time to look at this by the way!"}]}]}],"thread_ts":"1609552455.001900","parent_user_id":"U0179G7FG4F","reactions":[{"name":"+1","users":["UC7AF7NSU"],"count":1}]},{"client_msg_id":"ec4319cb-1c82-4366-a1da-33bf8623743d","type":"message","text":"Yes, one of the Transducers' main aims is to handle the initial value nicely.  But doing this very generally with a good performance is actually a _really_ hard problem.  (Note that you can't alway use `0` because the element type of the input can be `UInt8` or `Vector`). Of course, things like this can be fixable case-by-case basis. I'll track this in <https://github.com/JuliaFolds/Transducers.jl/issues/437>","user":"UC7AF7NSU","ts":"1609636445.057800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ychfq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, one of the Transducers' main aims is to handle the initial value nicely.  But doing this very generally with a good performance is actually a "},{"type":"text","text":"really","style":{"italic":true}},{"type":"text","text":" hard problem.  (Note that you can't alway use "},{"type":"text","text":"0","style":{"code":true}},{"type":"text","text":" because the element type of the input can be "},{"type":"text","text":"UInt8","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"Vector","style":{"code":true}},{"type":"text","text":"). Of course, things like this can be fixable case-by-case basis. I'll track this in "},{"type":"link","url":"https://github.com/JuliaFolds/Transducers.jl/issues/437"}]}]}],"thread_ts":"1609552455.001900","parent_user_id":"U0179G7FG4F"},{"client_msg_id":"03224ab4-db20-45c4-83e7-403877f67043","type":"message","text":"what's the advantage of using the `InitialValues.jl` way rather than the way used in `Base.reduce` of having `reduce_first(op,x)=x` and reducing starting with the second element?","user":"U0179G7FG4F","ts":"1609649454.065500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EJw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what's the advantage of using the "},{"type":"text","text":"InitialValues.jl","style":{"code":true}},{"type":"text","text":" way rather than the way used in "},{"type":"text","text":"Base.reduce","style":{"code":true}},{"type":"text","text":" of having "},{"type":"text","text":"reduce_first(op,x)=x","style":{"code":true}},{"type":"text","text":" and reducing starting with the second element?"}]}]}],"thread_ts":"1609552455.001900","parent_user_id":"U0179G7FG4F"},{"client_msg_id":"2a4517ab-ca70-4ce7-b8d1-886510502363","type":"message","text":"It's more-or-less the same idea. But I find InitialValues.jl formulation nicer to work with. Also, `Base` now uses a simpler version of InitialValues.jl approach internally anyway (because of my PR).","user":"UC7AF7NSU","ts":"1609656153.065900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZcSV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's more-or-less the same idea. But I find InitialValues.jl formulation nicer to work with. Also, "},{"type":"text","text":"Base","style":{"code":true}},{"type":"text","text":" now uses a simpler version of InitialValues.jl approach internally anyway (because of my PR)."}]}]}],"thread_ts":"1609552455.001900","parent_user_id":"U0179G7FG4F"}]