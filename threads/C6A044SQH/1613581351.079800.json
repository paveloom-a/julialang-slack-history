[{"client_msg_id":"89a99e4b-d3f7-4e46-91b2-1e8e78bff61b","type":"message","text":"Consider this struct\n```struct PlotData_t1\n    W::Array{Float64, 1}\n    Z::Array{Float64, 1}\n    Y::Array{Float64, 1}\n    V::Array{Float64, 1}\n    U::Array{Float64, 1}\n    PlotData_t1(n) = new([zeros(Float64, n) for i = 1:5]...)\nend```\nIs it possible I can replace the `5` in the generator by the number of fields in the struct?","user":"U6Z8377N2","ts":"1613581351.079800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"S24","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Consider this struct\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct PlotData_t1\n    W::Array{Float64, 1}\n    Z::Array{Float64, 1}\n    Y::Array{Float64, 1}\n    V::Array{Float64, 1}\n    U::Array{Float64, 1}\n    PlotData_t1(n) = new([zeros(Float64, n) for i = 1:5]...)\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Is it possible I can replace the "},{"type":"text","text":"5","style":{"code":true}},{"type":"text","text":" in the generator by the number of fields in the struct?"}]}]}],"thread_ts":"1613581351.079800","reply_count":14,"reply_users_count":4,"latest_reply":"1613582645.083500","reply_users":["B01J9QZ4SP8","U6Z8377N2","U7HAYKY9X","UH24GRBLL"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1613581353.079900","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1613581351.079800","parent_user_id":"U6Z8377N2"},{"client_msg_id":"b65bf583-0f02-4b2d-9238-d355c7720e13","type":"message","text":"I am basically trying to create a constructor that allocates a zero vector of length `n` for all the fields","user":"U6Z8377N2","ts":"1613581395.080200","team":"T68168MUP","edited":{"user":"U6Z8377N2","ts":"1613581421.000000"},"blocks":[{"type":"rich_text","block_id":"gns","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am basically trying to create a constructor that allocates a zero vector of length "},{"type":"text","text":"n","style":{"code":true}},{"type":"text","text":" for all the fields"}]}]}],"thread_ts":"1613581351.079800","parent_user_id":"U6Z8377N2"},{"client_msg_id":"53141699-6808-4a11-903c-f5ec0aed1625","type":"message","text":"You can probably solve this with metaprogramming, but why not make an outer constructor? Do you need the constructor to be an inner constructor?","user":"U7HAYKY9X","ts":"1613581430.080500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=4=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can probably solve this with metaprogramming, but why not make an outer constructor? Do you need the constructor to be an inner constructor?"}]}]}],"thread_ts":"1613581351.079800","parent_user_id":"U6Z8377N2"},{"client_msg_id":"29b9922d-8b85-4a60-a8e0-94e5152a337f","type":"message","text":"E.g. you could do\n```PlotData_t1(n) = PlotData_t1([zeros(Float64, n) for i in 1:fieldcount(PlotData_t1)])```","user":"U7HAYKY9X","ts":"1613581511.080700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FUS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"E.g. you could do\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"PlotData_t1(n) = PlotData_t1([zeros(Float64, n) for i in 1:fieldcount(PlotData_t1)])"}]}]}],"thread_ts":"1613581351.079800","parent_user_id":"U6Z8377N2"},{"client_msg_id":"d06783e4-02ee-4280-ba43-b8b520f28a8e","type":"message","text":"Oh yeah, that's what I was looking for.","user":"U6Z8377N2","ts":"1613581736.080900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uRe=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh yeah, that's what I was looking for."}]}]}],"thread_ts":"1613581351.079800","parent_user_id":"U6Z8377N2"},{"client_msg_id":"d2575048-e3a2-4507-a5cc-258b670a3334","type":"message","text":"Can metaprogramming be used to generate structs on the fly?","user":"U6Z8377N2","ts":"1613581747.081100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4NZk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can metaprogramming be used to generate structs on the fly?"}]}]}],"thread_ts":"1613581351.079800","parent_user_id":"U6Z8377N2"},{"client_msg_id":"dffe9721-5cb0-4c27-b357-3c44d109211e","type":"message","text":"Yep! But metaprogramming is usually not the best solution. It doesn't lead to clean code","user":"U7HAYKY9X","ts":"1613581828.081300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bVJWV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yep! But metaprogramming is usually not the best solution. It doesn't lead to clean code"}]}]}],"thread_ts":"1613581351.079800","parent_user_id":"U6Z8377N2"},{"client_msg_id":"caf48c5b-65ef-49a2-9cd0-2551e0a34b18","type":"message","text":"It's more like an escape hatch that lets you do questionable things that can't be done without metaprogramming.","user":"U7HAYKY9X","ts":"1613581856.081500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UaAHI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's more like an escape hatch that lets you do questionable things that can't be done without metaprogramming."}]}]}],"thread_ts":"1613581351.079800","parent_user_id":"U6Z8377N2"},{"client_msg_id":"7810a4af-1d1e-456e-9d33-cbab647795ad","type":"message","text":"hmm, so say I have three variables. `W, Z, Y`... in my struct I have to manually type out\n```struct PlotData_t1\n    # cumulative incidence\n    W_avg::Array{Float64, 1}\n    W_lo::Array{Float64, 1}\n    W_hi::Array{Float64, 1}\n    # \n    Z_avg::Array{Float64, 1}\n    Z_lo::Array{Float64, 1}\n    Z_hi::Array{Float64, 1}\n\n    Y_avg::Array{Float64, 1}\n    Y_lo::Array{Float64, 1}\n    Y_hi::Array{Float64, 1}\nend```\nwhich is a bit cumbersome, seems like metaprogramming will actually make things easier? I am not sure. I have never worked with macros","user":"U6Z8377N2","ts":"1613581892.081700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PA9bo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmm, so say I have three variables. "},{"type":"text","text":"W, Z, Y","style":{"code":true}},{"type":"text","text":"... in my struct I have to manually type out\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct PlotData_t1\n    # cumulative incidence\n    W_avg::Array{Float64, 1}\n    W_lo::Array{Float64, 1}\n    W_hi::Array{Float64, 1}\n    # \n    Z_avg::Array{Float64, 1}\n    Z_lo::Array{Float64, 1}\n    Z_hi::Array{Float64, 1}\n\n    Y_avg::Array{Float64, 1}\n    Y_lo::Array{Float64, 1}\n    Y_hi::Array{Float64, 1}\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"which is a bit cumbersome, seems like metaprogramming will actually make things easier? I am not sure. I have never worked with macros"}]}]}],"thread_ts":"1613581351.079800","parent_user_id":"U6Z8377N2"},{"client_msg_id":"c952229b-2631-4364-be79-27c841a68c9b","type":"message","text":"It could! But maybe instead, you should just have it be\n```struct PlotData_t1\n    W::NTuple{3, Vector{Float64}}\n    Z::NTuple{3, Vector{Float64}}\n    Y::NTuple{3, Vector{Float64}}\nend```","user":"U7HAYKY9X","ts":"1613581980.081900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RW0Px","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It could! But maybe instead, you should just have it be\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct PlotData_t1\n    W::NTuple{3, Vector{Float64}}\n    Z::NTuple{3, Vector{Float64}}\n    Y::NTuple{3, Vector{Float64}}\nend"}]}]}],"thread_ts":"1613581351.079800","parent_user_id":"U6Z8377N2"},{"client_msg_id":"a9ddd776-c10f-438a-956a-2dab70f2797a","type":"message","text":"Yeah, that seems cleaner. I'll have to index in when accessing the subfields. I wonder whats better in terms of performance. Can it be possible that my way, however cumbersome, may lead to better performance","user":"U6Z8377N2","ts":"1613582168.082300","team":"T68168MUP","edited":{"user":"U6Z8377N2","ts":"1613582222.000000"},"blocks":[{"type":"rich_text","block_id":"z35sP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, that seems cleaner. I'll have to index in when accessing the subfields. I wonder whats better in terms of performance. Can it be possible that my way, however cumbersome, may lead to better performance"}]}]}],"thread_ts":"1613581351.079800","parent_user_id":"U6Z8377N2"},{"client_msg_id":"e3108f45-cd24-4615-96a0-bc0bdad9d46d","type":"message","text":"Probably not. Small tuples are maximally efficient, as long as the index is a compiletime constant","user":"U7HAYKY9X","ts":"1613582269.082700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1zLd5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Probably not. Small tuples are maximally efficient, as long as the index is a compiletime constant"}]}]}],"thread_ts":"1613581351.079800","parent_user_id":"U6Z8377N2"},{"client_msg_id":"2bf33bb6-1185-478f-afcc-a9d90b25897a","type":"message","text":"&gt; Can metaprogramming be used to generate structs on the fly?\nGenerating them on the fly would also mean compiling methods for them on the fly :)","user":"UH24GRBLL","ts":"1613582440.082900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zN1U","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"Can metaprogramming be used to generate structs on the fly?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nGenerating them on the fly would also mean compiling methods for them on the fly :)"}]}]}],"thread_ts":"1613581351.079800","parent_user_id":"U6Z8377N2"},{"client_msg_id":"7095bd67-0078-4eb4-b6a1-1b06e3b288f5","type":"message","text":"So as long as I am doing `mTuple[1]` and not `n = calc_index(); mTuple[n]` it should be fast right?","user":"U6Z8377N2","ts":"1613582645.083500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WNgY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So as long as I am doing "},{"type":"text","text":"mTuple[1]","style":{"code":true}},{"type":"text","text":" and not "},{"type":"text","text":"n = calc_index(); mTuple[n]","style":{"code":true}},{"type":"text","text":" it should be fast right?"}]}]}],"thread_ts":"1613581351.079800","parent_user_id":"U6Z8377N2","reactions":[{"name":"100","users":["U7HAYKY9X"],"count":1}]}]