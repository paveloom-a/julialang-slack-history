[{"client_msg_id":"b7576ace-7279-4b0f-9b08-041c9cdd267f","type":"message","text":"One can use `merge(+, dict1, dict2)` and the like to combine dictionary entries by their keys, values, but is there a way to do that for averages? I tried these three methods and none of them worked, i.e.\n```dict1 = Dict(\"red\" =&gt; 13, \"blue\" =&gt; 22)\ndict2 = Dict(\"red\" =&gt; 2, \"blue\" =&gt; 111)\n\nmerge(mean, dict1, dict2)\nmerge(x- &gt; mean(x), dict1, dict2)\nmerge(x -&gt; sum(x)/length(x), dict1, dict2)```\nI was curious of there's a performant way of doing this using merge, version a `get!()` based method I have now","user":"UM4TSHKF1","ts":"1611012456.287600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wRG/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"One can use "},{"type":"text","text":"merge(+, dict1, dict2)","style":{"code":true}},{"type":"text","text":" and the like to combine dictionary entries by their keys, values, but is there a way to do that for averages? I tried these three methods and none of them worked, i.e.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"dict1 = Dict(\"red\" => 13, \"blue\" => 22)\ndict2 = Dict(\"red\" => 2, \"blue\" => 111)\n\nmerge(mean, dict1, dict2)\nmerge(x- > mean(x), dict1, dict2)\nmerge(x -> sum(x)/length(x), dict1, dict2)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I was curious of there's a performant way of doing this using merge, version a "},{"type":"text","text":"get!()","style":{"code":true}},{"type":"text","text":" based method I have now"}]}]}],"thread_ts":"1611012456.287600","reply_count":19,"reply_users_count":5,"latest_reply":"1611073567.334400","reply_users":["UH8A351DJ","UM4TSHKF1","U0179G7FG4F","U017JTQFNEQ","UGTUKUHLN"],"subscribed":false},{"client_msg_id":"5bdb706f-6e37-45b3-95cf-5e899c25a1d1","type":"message","text":"`+` is a binary operator, `mean` is not","user":"UH8A351DJ","ts":"1611012590.287700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YkJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"+","style":{"code":true}},{"type":"text","text":" is a binary operator, "},{"type":"text","text":"mean","style":{"code":true}},{"type":"text","text":" is not"}]}]}],"thread_ts":"1611012456.287600","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"91b14098-5628-4aae-a7ba-dd5f2adc8128","type":"message","text":"`my_mean(x,y) = (x+y)/2` is a candidate","user":"UH8A351DJ","ts":"1611012630.287900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4Ir","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"my_mean(x,y) = (x+y)/2","style":{"code":true}},{"type":"text","text":" is a candidate"}]}]}],"thread_ts":"1611012456.287600","parent_user_id":"UM4TSHKF1","reactions":[{"name":"heavy_check_mark","users":["UM4TSHKF1","U017JTQFNEQ"],"count":2}]},{"client_msg_id":"ba53491b-ff9d-486d-93e6-7183bd526326","type":"message","text":"Ah, brilliant, thanks! would this be accurate for a bunch of dicts? like this?\n```merge(my_mean, vec_of_dicts...)```\n","user":"UM4TSHKF1","ts":"1611012802.288100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Stz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, brilliant, thanks! would this be accurate for a bunch of dicts? like this?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"merge(my_mean, vec_of_dicts...)"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1611012456.287600","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"2a1c7060-21b8-44ca-abdc-12212e4af3b2","type":"message","text":"I do not know, this will depend on if `merge` implements `varargs`","user":"UH8A351DJ","ts":"1611012933.288300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cfd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I do not know, this will depend on if "},{"type":"text","text":"merge","style":{"code":true}},{"type":"text","text":" implements "},{"type":"text","text":"varargs","style":{"code":true}}]}]}],"thread_ts":"1611012456.287600","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"99a9a3e4-b7ff-49c3-9a65-912cdfe33586","type":"message","text":"I guess it _seems_ to?\n```julia&gt; merge(my_mean , alleles...)\nDict{Int16,Float64} with 16 entries:\n  121 =&gt; 0.00658662\n  143 =&gt; 0.136492\n  133 =&gt; 0.221268\n  135 =&gt; 0.185722\n  147 =&gt; 6.72271e-6\n  131 =&gt; 0.0156281\n  129 =&gt; 0.00956422\n  119 =&gt; 0.003125\n  123 =&gt; 0.0452286\n  145 =&gt; 0.00409077\n  149 =&gt; 0.00289649\n  139 =&gt; 0.0874344\n  127 =&gt; 0.003125\n  117 =&gt; 0.003125\n  137 =&gt; 0.130722\n  141 =&gt; 0.144985```","user":"UM4TSHKF1","ts":"1611012989.288500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cw2b","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess it "},{"type":"text","text":"seems","style":{"italic":true}},{"type":"text","text":" to?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> merge(my_mean , alleles...)\nDict{Int16,Float64} with 16 entries:\n  121 => 0.00658662\n  143 => 0.136492\n  133 => 0.221268\n  135 => 0.185722\n  147 => 6.72271e-6\n  131 => 0.0156281\n  129 => 0.00956422\n  119 => 0.003125\n  123 => 0.0452286\n  145 => 0.00409077\n  149 => 0.00289649\n  139 => 0.0874344\n  127 => 0.003125\n  117 => 0.003125\n  137 => 0.130722\n  141 => 0.144985"}]}]}],"thread_ts":"1611012456.287600","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"1bdc4fdb-f87b-4e8b-9135-2f290014654d","type":"message","text":"I'll need to check the accuracy and such. Thanks!","user":"UM4TSHKF1","ts":"1611013006.288700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QFp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'll need to check the accuracy and such. Thanks!"}]}]}],"thread_ts":"1611012456.287600","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"85b9c0a9-7b93-4b60-a215-cb5c3e56662e","type":"message","text":"note the anonomous function version works here too. `merge((x,y) -&gt; (x+y)/2, alleles...)`","user":"U0179G7FG4F","ts":"1611013516.288900","team":"T68168MUP","edited":{"user":"U0179G7FG4F","ts":"1611013524.000000"},"blocks":[{"type":"rich_text","block_id":"VyXL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"note the anonomous function version works here too. "},{"type":"text","text":"merge((x,y) -> (x+y)/2, alleles...)","style":{"code":true}}]}]}],"thread_ts":"1611012456.287600","parent_user_id":"UM4TSHKF1","reactions":[{"name":"heavy_check_mark","users":["UM4TSHKF1"],"count":1}]},{"client_msg_id":"e8314ff8-07d5-457b-ab63-b28202869eb6","type":"message","text":"Which would be more performant for thousands of iterations, a named function or an anonymous function?","user":"UM4TSHKF1","ts":"1611023085.290700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CIv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Which would be more performant for thousands of iterations, a named function or an anonymous function?"}]}]}],"thread_ts":"1611012456.287600","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"013e708d-249c-4c80-bc94-1ba66b18bbb7","type":"message","text":"they should be exactly the same","user":"U0179G7FG4F","ts":"1611023099.291000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tOUhc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"they should be exactly the same"}]}]}],"thread_ts":"1611012456.287600","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"e6ab960b-167a-4258-977a-e3aeffa11ad4","type":"message","text":"Oh fantastic, thank you <@U0179G7FG4F> :slightly_smiling_face:","user":"UM4TSHKF1","ts":"1611023127.291300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6Z63","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh fantastic, thank you "},{"type":"user","user_id":"U0179G7FG4F"},{"type":"text","text":" "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1611012456.287600","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"4e204531-fd4d-4b28-99b1-2a5ff29daa2f","type":"message","text":"this is only works if you have just two items of each key\n```(a + b + c)/3 ≠ ((a+b)/2 + c)/2```","user":"U017JTQFNEQ","ts":"1611027890.295700","team":"T68168MUP","edited":{"user":"U017JTQFNEQ","ts":"1611027911.000000"},"blocks":[{"type":"rich_text","block_id":"d=Cd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this is only works if you have just two items of each key\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"(a + b + c)/3 ≠ ((a+b)/2 + c)/2"}]}]}],"thread_ts":"1611012456.287600","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"390b3956-3a7b-4166-b01f-9e8061f4bc16","type":"message","text":"```julia&gt; my_mean(a,b) = (a+b)/2\nmy_mean (generic function with 1 method)\n\njulia&gt; reduce(my_mean, 1:10)\n9.001953125```","user":"U017JTQFNEQ","ts":"1611027925.296000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"npCgt","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> my_mean(a,b) = (a+b)/2\nmy_mean (generic function with 1 method)\n\njulia> reduce(my_mean, 1:10)\n9.001953125"}]}]}],"thread_ts":"1611012456.287600","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"48090b26-ec6b-468c-bf8f-42683d14e3ea","type":"message","text":"yeah, I came across this issue when I compared the results vs my original implementation.","user":"UM4TSHKF1","ts":"1611030506.296400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7WX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, I came across this issue when I compared the results vs my original implementation."}]}]}],"thread_ts":"1611012456.287600","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"bc500f08-1b93-4085-b2ac-4df17426c833","type":"message","text":"if you have a large number of small dictionaries instead of small number of large dictionaries, you might want to re-organize your data","user":"UH8A351DJ","ts":"1611030634.296600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2EhZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you have a large number of small dictionaries instead of small number of large dictionaries, you might want to re-organize your data"}]}]}],"thread_ts":"1611012456.287600","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"620a0d98-53d0-402d-af02-d1da14433458","type":"message","text":"One work around is to take the sum and the count and then divide them.","user":"U017JTQFNEQ","ts":"1611030656.296800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GCw7q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"One work around is to take the sum and the count and then divide them."}]}]}],"thread_ts":"1611012456.287600","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"0cd7d5e5-7418-4fff-980f-882cbd8dfc9d","type":"message","text":"or make your array of dictionaries into a DataFrame","user":"U017JTQFNEQ","ts":"1611030696.297000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"McD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or make your array of dictionaries into a DataFrame"}]}]}],"thread_ts":"1611012456.287600","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"ee74dbb2-73fd-4686-8c1d-a6f123c7845f","type":"message","text":"This `my_mean` function is actually present in `Statistics` and called `middle` :slightly_smiling_face:","user":"UGTUKUHLN","ts":"1611069895.329800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nRU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This "},{"type":"text","text":"my_mean","style":{"code":true}},{"type":"text","text":" function is actually present in "},{"type":"text","text":"Statistics","style":{"code":true}},{"type":"text","text":" and called "},{"type":"text","text":"middle","style":{"code":true}},{"type":"text","text":" "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1611012456.287600","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"eaf87da4-93aa-4cfc-b699-08d68cb371fd","type":"message","text":"kind of a strange function:\n```julia&gt; middle(1:10) ≠ reduce(middle,1:10)\ntrue```","user":"U017JTQFNEQ","ts":"1611070728.330900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kWjA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"kind of a strange function:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> middle(1:10) ≠ reduce(middle,1:10)\ntrue"}]}]}],"thread_ts":"1611012456.287600","parent_user_id":"UM4TSHKF1"},{"client_msg_id":"e8445bf5-be0f-4049-aad5-7f399b4cf7f8","type":"message","text":"awesome, thanks for the suggestions","user":"UM4TSHKF1","ts":"1611073567.334400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"U9X","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"awesome, thanks for the suggestions"}]}]}],"thread_ts":"1611012456.287600","parent_user_id":"UM4TSHKF1"}]