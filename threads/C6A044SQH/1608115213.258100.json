[{"client_msg_id":"a4e74cf5-fc1b-4763-b307-a2dc5cd89cf6","type":"message","text":"Is there a more efficient way of “splatting” the contents of a vector into a functions arguments, than with splatting itself (`func(A...)`)?","user":"U014LRLJXRP","ts":"1608115213.258100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+xl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a more efficient way of “splatting” the contents of a vector into a functions arguments, than with splatting itself ("},{"type":"text","text":"func(A...)","style":{"code":true}},{"type":"text","text":")?"}]}]}],"thread_ts":"1608115213.258100","reply_count":11,"reply_users_count":4,"latest_reply":"1608159431.323300","reply_users":["UAUPJLBQX","U014LRLJXRP","U01GMP3HF9C","UGU761DU2"],"subscribed":false},{"client_msg_id":"ae4db24d-19cc-42bd-9445-66c608fe84ec","type":"message","text":"If you know how how long the vector is at compile time, you could extract the elements into a tuple before splatting.","user":"UAUPJLBQX","ts":"1608115443.258200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qOa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you know how how long the vector is at compile time, you could extract the elements into a tuple before splatting."}]}]}],"thread_ts":"1608115213.258100","parent_user_id":"U014LRLJXRP"},{"client_msg_id":"2c41f795-c572-44a2-9854-56327ed0338e","type":"message","text":"But a tuple is still not the same as each individual element, no?","user":"U014LRLJXRP","ts":"1608115894.259800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UwX7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But a tuple is still not the same as each individual element, no?"}]}]}],"thread_ts":"1608115213.258100","parent_user_id":"U014LRLJXRP"},{"client_msg_id":"7eddb261-5256-4b4c-98ea-3222e6f7866b","type":"message","text":"maybe we could give a better answer if we knew the use case?","user":"U01GMP3HF9C","ts":"1608116829.266500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Zd7U3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"maybe we could give a better answer if we knew the use case?"}]}]}],"thread_ts":"1608115213.258100","parent_user_id":"U014LRLJXRP"},{"client_msg_id":"89916589-c695-4af4-9cc6-a1c730bc6680","type":"message","text":"No specific use case, necessarily.  An example is this: Say I have an array like\n```A = rand(Int8, 100);```\nand I wanted to find the maximum value in this array.  Pretending that `maximum` doesn’t exist, one way to do this would be to splat the array into `max`:\n```max(A...)```\nHowever, I know that splatting is not great for performance.  I was wondering if there was a better way to splat a vector into the arguments of a function in general","user":"U014LRLJXRP","ts":"1608117190.269000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pLk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No specific use case, necessarily.  An example is this: Say I have an array like\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"A = rand(Int8, 100);"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"and I wanted to find the maximum value in this array.  Pretending that "},{"type":"text","text":"maximum","style":{"code":true}},{"type":"text","text":" doesn’t exist, one way to do this would be to splat the array into "},{"type":"text","text":"max","style":{"code":true}},{"type":"text","text":":\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"max(A...)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"However, I know that splatting is not great for performance.  I was wondering if there was a better way to splat a vector into the arguments of a function in general"}]}]}],"thread_ts":"1608115213.258100","parent_user_id":"U014LRLJXRP"},{"client_msg_id":"5e7fc836-e6d2-4046-ac6e-b9830da4a507","type":"message","text":"&gt;  But a tuple is still not the same as each individual element, no?\nI said before splatting (the tuple). Meaning, make a tuple. Then splat the tuple.\nIf the tuple's size is known at compile time, that will yield better performance.\n\nI'd really discourage anything like that `max` example. Use `maximum(A)` or `reduce(max, A)` as a more general example instead.\nThere are a lot of convenient functions for operating on / iterating over contains. I'd use one of these instead.","user":"UAUPJLBQX","ts":"1608118326.273600","team":"T68168MUP","edited":{"user":"UAUPJLBQX","ts":"1608118381.000000"},"blocks":[{"type":"rich_text","block_id":"YeK","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":" But a tuple is still not the same as each individual element, no?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nI said before splatting (the tuple). Meaning, make a tuple. Then splat the tuple.\nIf the tuple's size is known at compile time, that will yield better performance.\n\nI'd really discourage anything like that "},{"type":"text","text":"max","style":{"code":true}},{"type":"text","text":" example. Use "},{"type":"text","text":"maximum(A)","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"reduce(max, A)","style":{"code":true}},{"type":"text","text":" as a more general example instead.\nThere are a lot of convenient functions for operating on / iterating over contains. I'd use one of these instead."}]}]}],"thread_ts":"1608115213.258100","parent_user_id":"U014LRLJXRP","reactions":[{"name":"point_up","users":["U011LUQ182G","UGU761DU2"],"count":2}]},{"client_msg_id":"c71a6189-c9bd-4ea4-8795-30a297688190","type":"message","text":"<@UAUPJLBQX> `reduce` is what I was looking for it seems, thank you","user":"U014LRLJXRP","ts":"1608125867.274300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ENq8","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UAUPJLBQX"},{"type":"text","text":" "},{"type":"text","text":"reduce","style":{"code":true}},{"type":"text","text":" is what I was looking for it seems, thank you"}]}]}],"thread_ts":"1608115213.258100","parent_user_id":"U014LRLJXRP"},{"client_msg_id":"d70a7428-b1de-4f24-89a8-878254ec114e","type":"message","text":"&gt; If the tuple’s size is known at compile time, that will yield better performance.\nThat’s very interesting, I didn’t know this.","user":"U014LRLJXRP","ts":"1608126063.274500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4oE","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"If the tuple’s size is known at compile time, that will yield better performance."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"That’s very interesting, I didn’t know this."}]}]}],"thread_ts":"1608115213.258100","parent_user_id":"U014LRLJXRP"},{"client_msg_id":"af9de55d-eae5-4361-932c-fb6e0348d885","type":"message","text":"There’s some decent discussion of the performance of splatting here: <https://julialang.zulipchat.com/#narrow/stream/225542-helpdesk/topic/when.20is.20splatting.20bad.3F>\n\nIn particular: as <@U8D9768Q6> mentioned there,\n&gt; Generally, splatting is bad when the compiler can’t know the type of or number of elements of the thing being splatted ahead of time.\nSo splatting tuples is generally OK, but splatting vectors can be very slow\n\nThere are also a lot of use cases (like finding the maximum) where splatting is just not a good approach; _best case_ scenario it creates a lot of work for the compiler with no benefit over `maximum` or `reduce`.","user":"UGU761DU2","ts":"1608146798.312600","team":"T68168MUP","edited":{"user":"UGU761DU2","ts":"1608146964.000000"},"blocks":[{"type":"rich_text","block_id":"+T2JE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There’s some decent discussion of the performance of splatting here: "},{"type":"link","url":"https://julialang.zulipchat.com/#narrow/stream/225542-helpdesk/topic/when.20is.20splatting.20bad.3F"},{"type":"text","text":"\n\nIn particular: as "},{"type":"user","user_id":"U8D9768Q6"},{"type":"text","text":" mentioned there,\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"Generally, splatting is bad when the compiler can’t know the type of or number of elements of the thing being splatted ahead of time."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"So splatting tuples is generally OK, but splatting vectors can be very slow\n\nThere are also a lot of use cases (like finding the maximum) where splatting is just not a good approach; "},{"type":"text","text":"best case","style":{"italic":true}},{"type":"text","text":" scenario it creates a lot of work for the compiler with no benefit over "},{"type":"text","text":"maximum","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"reduce","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1608115213.258100","parent_user_id":"U014LRLJXRP","reactions":[{"name":"heart","users":["U8D9768Q6","UAUPJLBQX"],"count":2},{"name":"open_mouth","users":["U014LRLJXRP"],"count":1},{"name":"+1","users":["U014LRLJXRP"],"count":1}]},{"client_msg_id":"ccbefba7-5a7b-45d3-a6ed-eb7c0611a4a3","type":"message","text":"And if you like `reduce`, you’ll love LoopVectorization.jl’s `vreduce`!","user":"UGU761DU2","ts":"1608147024.313400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pkt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And if you like "},{"type":"text","text":"reduce","style":{"code":true}},{"type":"text","text":", you’ll love LoopVectorization.jl’s "},{"type":"text","text":"vreduce","style":{"code":true}},{"type":"text","text":"!"}]}]}],"thread_ts":"1608115213.258100","parent_user_id":"U014LRLJXRP","reactions":[{"name":"+1","users":["U8D9768Q6","UAUPJLBQX","U014LRLJXRP"],"count":3}]},{"client_msg_id":"e0309219-b951-458a-9f5b-c083a8eac997","type":"message","text":"<@UGU761DU2> Thanks for the link to the thread!  And thank you for showing me LoopVectorisation.  I will use `reduce` for now (it seems like the best alternative to splatting), but I will certainly have a play around with `vreduce`!","user":"U014LRLJXRP","ts":"1608159327.323000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eIf","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UGU761DU2"},{"type":"text","text":" Thanks for the link to the thread!  And thank you for showing me LoopVectorisation.  I will use "},{"type":"text","text":"reduce","style":{"code":true}},{"type":"text","text":" for now (it seems like the best alternative to splatting), but I will certainly have a play around with "},{"type":"text","text":"vreduce","style":{"code":true}},{"type":"text","text":"!"}]}]}],"thread_ts":"1608115213.258100","parent_user_id":"U014LRLJXRP","reactions":[{"name":"+1","users":["UGU761DU2"],"count":1}]},{"client_msg_id":"5db87f01-c45a-418e-b35a-461a4d9cd538","type":"message","text":"P.S., my specific use-case was taking a vector of `Mod`s from `Mods.jl` and splatting them into `Mods.CRT`, but it seems that `reduce` does the same thing! :slightly_smiling_face:","user":"U014LRLJXRP","ts":"1608159431.323300","team":"T68168MUP","edited":{"user":"U014LRLJXRP","ts":"1608159440.000000"},"blocks":[{"type":"rich_text","block_id":"usAN5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"P.S., my specific use-case was taking a vector of "},{"type":"text","text":"Mod","style":{"code":true}},{"type":"text","text":"s from "},{"type":"text","text":"Mods.jl","style":{"code":true}},{"type":"text","text":" and splatting them into "},{"type":"text","text":"Mods.CRT","style":{"code":true}},{"type":"text","text":", but it seems that "},{"type":"text","text":"reduce","style":{"code":true}},{"type":"text","text":" does the same thing! "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1608115213.258100","parent_user_id":"U014LRLJXRP","reactions":[{"name":"100","users":["UGU761DU2"],"count":1}]}]