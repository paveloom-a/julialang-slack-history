[{"client_msg_id":"3eabd8c4-38df-4490-bbf6-cef61f8a4487","type":"message","text":"1. I’m trying to figure out what testing etc libraries I should be using for julia, especially for property-based testing. I’m aware of SafeTestSets.jl, TestSetExtensions.jl, ReferenceTests.jl, UnitTestDesign.jl, RandomizedPropertyTest.jl Are there any other libraries I should look into?\n2. Is the main way to program with contracts in Julia to use ‘traits’? ","user":"US8V7JSKB","ts":"1614795113.282400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9Z7I","elements":[{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’m trying to figure out what testing etc libraries I should be using for julia, especially for property-based testing. I’m aware of SafeTestSets.jl, TestSetExtensions.jl, ReferenceTests.jl, UnitTestDesign.jl, RandomizedPropertyTest.jl Are there any other libraries I should look into?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Is the main way to program with contracts in Julia to use ‘traits’? "}]}],"style":"ordered","indent":0}]}],"thread_ts":"1614795113.282400","reply_count":10,"reply_users_count":3,"latest_reply":"1614795869.285000","reply_users":["B01J9QZ4SP8","UH24GRBLL","U019K6Q9N15"],"subscribed":false,"reactions":[{"name":"bridge","users":["US8V7JSKB"],"count":1}]},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1614795116.282500","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1614795113.282400","parent_user_id":"US8V7JSKB"},{"type":"message","subtype":"bot_message","text":"Success, it has been cross posted <https://discourse.julialang.org/t/56429| to Discourse>. Keep and eye out on Discourse for responses and please add an answer there once you are satisfied with the solution so others can benefit as well. Happy debugging!","ts":"1614795134.282900","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1614795113.282400","parent_user_id":"US8V7JSKB"},{"client_msg_id":"93f23de8-0525-4283-ae40-91de175a8b8d","type":"message","text":"I'm not aware of any package explicitly for property based testing (though I've worked on a prototype I'm not happy with)","user":"UH24GRBLL","ts":"1614795277.283100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BHMn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not aware of any package explicitly for property based testing (though I've worked on a prototype I'm not happy with)"}]}]}],"thread_ts":"1614795113.282400","parent_user_id":"US8V7JSKB"},{"client_msg_id":"93195c9a-c693-44d0-9df9-f7f2f80e162d","type":"message","text":"In julia, traits are mostly used to encode extra information that's not part of the type, to change or control dispatch more finely grained","user":"UH24GRBLL","ts":"1614795352.283300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"P3z/T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In julia, traits are mostly used to encode extra information that's not part of the type, to change or control dispatch more finely grained"}]}]}],"thread_ts":"1614795113.282400","parent_user_id":"US8V7JSKB"},{"client_msg_id":"b8440196-9338-45e1-bfcf-7e162d87153c","type":"message","text":"most of the time, regular dispatch and duck typing is enough though","user":"UH24GRBLL","ts":"1614795376.283500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NN6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"most of the time, regular dispatch and duck typing is enough though"}]}]}],"thread_ts":"1614795113.282400","parent_user_id":"US8V7JSKB"},{"client_msg_id":"71c177de-8259-4caf-bee5-3c92535e9253","type":"message","text":"I could've sworn I read something by :invenia: about strategies for testing interfaces...","user":"U019K6Q9N15","ts":"1614795667.283900","team":"T68168MUP","edited":{"user":"U019K6Q9N15","ts":"1614795692.000000"},"blocks":[{"type":"rich_text","block_id":"F3q13","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I could've sworn I read something by "},{"type":"emoji","name":"invenia"},{"type":"text","text":" about strategies for testing interfaces..."}]}]}],"thread_ts":"1614795113.282400","parent_user_id":"US8V7JSKB"},{"client_msg_id":"6011ca7e-0731-406e-9488-a94666887dfe","type":"message","text":"Oh <https://invenia.github.io/blog/2020/11/06/interfacetesting/|here's> something","user":"U019K6Q9N15","ts":"1614795675.284100","team":"T68168MUP","attachments":[{"service_name":"Invenia Blog","title":"Development with Interface Packages","title_link":"https://invenia.github.io/blog/2020/11/06/interfacetesting/","text":"Over the last two years, our Julia codebase has grown in size and complexity, and is now the centerpiece of both our operations and research. This implies that we need to routinely replace parts of the system like puzzle pieces, and carefully test if the results lead to improvements along various dimensions of performance. However, those pieces are not designed to work in isolation, and thus cannot be tested in a vacuum. They also tend to be quite large and complex, and therefore often need to be independent packages, which need to “fit” together in precise ways determined by the rest of the system. This is where interfaces come in handy: they are tools for isolating and precisely testing specific pieces of a large system.","fallback":"Invenia Blog: Development with Interface Packages","thumb_url":"https://invenia.github.io/blog/public/InveniaLogo.png","ts":1604620800,"from_url":"https://invenia.github.io/blog/2020/11/06/interfacetesting/","thumb_width":231,"thumb_height":224,"service_icon":"https://invenia.github.io/blog/public/favicon.png","id":1,"original_url":"https://invenia.github.io/blog/2020/11/06/interfacetesting/"}],"blocks":[{"type":"rich_text","block_id":"Mad","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh "},{"type":"link","url":"https://invenia.github.io/blog/2020/11/06/interfacetesting/","text":"here's"},{"type":"text","text":" something"}]}]}],"thread_ts":"1614795113.282400","parent_user_id":"US8V7JSKB"},{"client_msg_id":"1ec6dd8d-fc9a-4952-9299-c98094739381","type":"message","text":"Oh, huh, sorry I didn't fully read your post-- this doesn't really answer what you were asking about.","user":"U019K6Q9N15","ts":"1614795791.284600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+mZI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh, huh, sorry I didn't fully read your post-- this doesn't really answer what you were asking about."}]}]}],"thread_ts":"1614795113.282400","parent_user_id":"US8V7JSKB"},{"client_msg_id":"f1119ecb-df30-499a-b8ce-d3af95b85471","type":"message","text":"there's bits and pieces, but no property based testing","user":"UH24GRBLL","ts":"1614795809.284800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NLFx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there's bits and pieces, but no property based testing"}]}]}],"thread_ts":"1614795113.282400","parent_user_id":"US8V7JSKB"},{"client_msg_id":"5781a9a1-2c7e-43c5-9724-aa299d20d1d8","type":"message","text":"it's a small missing hole that I'd like to see filled some day..","user":"UH24GRBLL","ts":"1614795869.285000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Cnz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's a small missing hole that I'd like to see filled some day.."}]}]}],"thread_ts":"1614795113.282400","parent_user_id":"US8V7JSKB"}]