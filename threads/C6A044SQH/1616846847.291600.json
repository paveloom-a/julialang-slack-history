[{"client_msg_id":"80392a6e-f7a6-4834-abf2-6d898143986a","type":"message","text":"How do I decide which arguments should be positional and what should be keyword when writing a function? For example I'm writing a function that takes an existing plot, a function, and a stepsize to construct a grid. Should the stepsize be positional or keyword?","user":"U01C2E6TYEM","ts":"1616846847.291600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gKWE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How do I decide which arguments should be positional and what should be keyword when writing a function? For example I'm writing a function that takes an existing plot, a function, and a stepsize to construct a grid. Should the stepsize be positional or keyword?"}]}]}],"thread_ts":"1616846847.291600","reply_count":6,"reply_users_count":3,"latest_reply":"1616854347.301600","reply_users":["U68QW0PUZ","U01C2E6TYEM","UCZ7VBGUD"],"is_locked":false,"subscribed":false},{"client_msg_id":"97ca1d36-c061-40a0-bb51-a4bd440ff7ad","type":"message","text":"The best answers are somewhat context dependant.\nKeyword args are passed with their key `fn(x, y; stepsize)` so good candidates for keyword args are parameters that benefit from having the key be explict.  Compare that example with `fn(x, y, stepsize)` which may look like this in use `fn(3,5,5)` and what that means is not at all obvious.  In the example, `x` and `y` are always expected and know to be, say, coordinates.  Often, keyword args will have a default value, so the user is not required to supply key values all the time: `fn(x, y; stepsize=5)` which is useful either as `fn(3, 5; stepsize=10)` or as `fn(3, 5)` .\n\nPositional args may also have a default value, although I find that it is clearer to keep defaults for keyword args unless the function naturally defaults one of its args, perhaps `complexnum(realpart, imagpart=0)` is reasonable.   Args that modify algorithmic action, like `stepsize` `abstol` `reltol` for absolute and relative tolerance, are almost always keyword args with defaults.","user":"U68QW0PUZ","ts":"1616848573.294300","team":"T68168MUP","edited":{"user":"U68QW0PUZ","ts":"1616848686.000000"},"blocks":[{"type":"rich_text","block_id":"KQYe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The best answers are somewhat context dependant.\nKeyword args are passed with their key "},{"type":"text","text":"fn(x, y; stepsize)","style":{"code":true}},{"type":"text","text":" so good candidates for keyword args are parameters that benefit from having the key be explict.  Compare that example with "},{"type":"text","text":"fn(x, y, stepsize)","style":{"code":true}},{"type":"text","text":" which may look like this in use "},{"type":"text","text":"fn(3,5,5)","style":{"code":true}},{"type":"text","text":" and what that means is not at all obvious.  In the example, "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"y","style":{"code":true}},{"type":"text","text":" are always expected and know to be, say, coordinates.  Often, keyword args will have a default value, so the user is not required to supply key values all the time: "},{"type":"text","text":"fn(x, y; stepsize=5)","style":{"code":true}},{"type":"text","text":" which is useful either as "},{"type":"text","text":"fn(3, 5; stepsize=10)","style":{"code":true}},{"type":"text","text":" or as "},{"type":"text","text":"fn(3, 5)","style":{"code":true}},{"type":"text","text":" .\n\nPositional args may also have a default value, although I find that it is clearer to keep defaults for keyword args unless the function naturally defaults one of its args, perhaps "},{"type":"text","text":"complexnum(realpart, imagpart=0)","style":{"code":true}},{"type":"text","text":" is reasonable.   Args that modify algorithmic action, like "},{"type":"text","text":"stepsize","style":{"code":true}},{"type":"text","text":" "},{"type":"text","text":"abstol","style":{"code":true}},{"type":"text","text":" "},{"type":"text","text":"reltol","style":{"code":true}},{"type":"text","text":" for absolute and relative tolerance, are almost always keyword args with defaults."}]}]}],"thread_ts":"1616846847.291600","parent_user_id":"U01C2E6TYEM","reactions":[{"name":"+1","users":["U01C2E6TYEM","U01SFUPBJ9E","UCZ7VBGUD"],"count":3}]},{"client_msg_id":"c599cf63-0451-4e9a-b98e-81832cb18642","type":"message","text":"Thanks for the clarification, it's not something I've really had to think about before, especially because Julia makes the clear distinction between the two but I couldn't find anyone talking about which to use online.","user":"U01C2E6TYEM","ts":"1616849403.294900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Tj=S","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks for the clarification, it's not something I've really had to think about before, especially because Julia makes the clear distinction between the two but I couldn't find anyone talking about which to use online."}]}]}],"thread_ts":"1616846847.291600","parent_user_id":"U01C2E6TYEM"},{"client_msg_id":"aadb221e-6c07-4911-b833-7993f563bced","type":"message","text":"You had a very good question. I had not seen it asked before.  Do you mind if I copy this to Discourse or Zulip (here it will vanish eventually)","user":"U68QW0PUZ","ts":"1616850200.295100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lb8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You had a very good question. I had not seen it asked before.  Do you mind if I copy this to Discourse or Zulip (here it will vanish eventually)"}]}]}],"thread_ts":"1616846847.291600","parent_user_id":"U01C2E6TYEM"},{"client_msg_id":"d2540e18-7303-4913-952d-fc092df581b8","type":"message","text":"Of course, go ahead","user":"U01C2E6TYEM","ts":"1616851640.295800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nG7R","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Of course, go ahead"}]}]}],"thread_ts":"1616846847.291600","parent_user_id":"U01C2E6TYEM"},{"client_msg_id":"88ECB76B-8381-4555-A9FC-1BF8C305F8AB","type":"message","text":"One thing to keep in mind is that keyword arguments don’t participate in dispatch, meaning if you write `f(x; y=1)=...`  and then `f(x; z=1)=...`  then the second definition will overwrite the first one! This can catch people out if they aren’t aware so it’s good to keep in mind.\n\nI think partly for this reason keyword arguments are better for things like settings/configuration rather than the “main” inputs to the function, since you can’t add a separate method to deal with different types.","user":"UCZ7VBGUD","ts":"1616853721.301200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CyFm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"One thing to keep in mind is that keyword arguments don’t participate in dispatch, meaning if you write "},{"type":"text","text":"f(x; y=1)=... ","style":{"code":true}},{"type":"text","text":" and then "},{"type":"text","text":"f(x; z=1)=... ","style":{"code":true}},{"type":"text","text":" then the second definition will overwrite the first one! This can catch people out if they aren’t aware so it’s good to keep in mind.\n"},{"type":"text","text":"\nI think partly for this reason keyword arguments are better for things like settings/configuration rather than the “main” inputs to the function, since you can’t add a separate method to deal with different types."}]}]}],"thread_ts":"1616846847.291600","parent_user_id":"U01C2E6TYEM","reactions":[{"name":"+1","users":["U01C2E6TYEM"],"count":1}]},{"client_msg_id":"3e348678-4cbb-41a5-8d2a-53407d100845","type":"message","text":"That would certainly have caught me out if you hadn't told me, thanks.","user":"U01C2E6TYEM","ts":"1616854347.301600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R8F","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That would certainly have caught me out if you hadn't told me, thanks."}]}]}],"thread_ts":"1616846847.291600","parent_user_id":"U01C2E6TYEM"}]