[{"client_msg_id":"c741f6e5-f55e-4de3-9c1e-b4b6e7f140f8","type":"message","text":"I have a function which creates an array of polynomials using `DynamicPolynomials`\n`\n```function get_H()\n    @polyvar h[1:3]\n    H = [h[1] h[2]; h[2] h[3]]\n    return H\nend```\nAccording to `@code_warntype` this is type-unstable\n`\n```julia&gt; @code_warntype get_H()\nVariables\n  #self#::Core.Compiler.Const(get_H, false)\n  h::Array{PolyVar{true},1}\n  b::Array{PolyVar{true},1}\n  H::Any\n\nBody::Any\n1 ─       ()\n│   %2  = (1:3)::Core.Compiler.Const(1:3, false)\n│         (h = DynamicPolynomials.polyarrayvar(PolyVar{true}, \"h\", %2))\n│   %4  = (1:2)::Core.Compiler.Const(1:2, false)\n│         (b = DynamicPolynomials.polyarrayvar(PolyVar{true}, \"b\", %4))\n│         Core.tuple(h, b)\n│   %7  = Core.apply_type(Main.PolyVar, true)::Core.Compiler.Const(PolyVar{true}, false)\n│   %8  = Core.tuple(2, 2)::Core.Compiler.Const((2, 2), false)\n│   %9  = Base.getindex(h, 1)::PolyVar{true}\n│   %10 = Base.getindex(h, 2)::PolyVar{true}\n│   %11 = Base.getindex(h, 2)::PolyVar{true}\n│   %12 = Base.getindex(h, 3)::PolyVar{true}\n│         (H = Base.typed_hvcat(%7, %8, %9, %10, %11, %12))\n└──       return H```\nshould I be worried about this from a performance perspective and how could I fix this? I tried `H=PolyVar{true}[h[1] h[2];h[2] h[3]]` but it seems to be still type unstable","user":"U012RPHRSP3","ts":"1611306876.124200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lsuv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have a function which creates an array of polynomials using "},{"type":"text","text":"DynamicPolynomials","style":{"code":true}},{"type":"text","text":"\n`\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function get_H()\n    @polyvar h[1:3]\n    H = [h[1] h[2]; h[2] h[3]]\n    return H\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"According to "},{"type":"text","text":"@code_warntype","style":{"code":true}},{"type":"text","text":" this is type-unstable\n`\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @code_warntype get_H()\nVariables\n  #self#::Core.Compiler.Const(get_H, false)\n  h::Array{PolyVar{true},1}\n  b::Array{PolyVar{true},1}\n  H::Any\n\nBody::Any\n1 ─       ()\n│   %2  = (1:3)::Core.Compiler.Const(1:3, false)\n│         (h = DynamicPolynomials.polyarrayvar(PolyVar{true}, \"h\", %2))\n│   %4  = (1:2)::Core.Compiler.Const(1:2, false)\n│         (b = DynamicPolynomials.polyarrayvar(PolyVar{true}, \"b\", %4))\n│         Core.tuple(h, b)\n│   %7  = Core.apply_type(Main.PolyVar, true)::Core.Compiler.Const(PolyVar{true}, false)\n│   %8  = Core.tuple(2, 2)::Core.Compiler.Const((2, 2), false)\n│   %9  = Base.getindex(h, 1)::PolyVar{true}\n│   %10 = Base.getindex(h, 2)::PolyVar{true}\n│   %11 = Base.getindex(h, 2)::PolyVar{true}\n│   %12 = Base.getindex(h, 3)::PolyVar{true}\n│         (H = Base.typed_hvcat(%7, %8, %9, %10, %11, %12))\n└──       return H"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"should I be worried about this from a performance perspective and how could I fix this? I tried "},{"type":"text","text":"H=PolyVar{true}[h[1] h[2];h[2] h[3]]","style":{"code":true}},{"type":"text","text":" but it seems to be still type unstable"}]}]}],"thread_ts":"1611306876.124200","reply_count":2,"reply_users_count":2,"latest_reply":"1611317833.128700","reply_users":["UBWLSPU1E","U012RPHRSP3"],"subscribed":false},{"client_msg_id":"25641dea-1c72-4108-b5f0-adca080d7b81","type":"message","text":"Not familiar with DynamicPolynomials, but the problem here seems to be the call to vcat (the `;` syntax for constructing the matrix). Not sure why though. If you manually assign the indices, like so:\n```function get_H()\n    @polyvar h[1:3]\n    H = Matrix{PolyVar{true}}(undef, 2, 2)\n    H[1,1] = h[1]\n    H[1,2] = h[2]\n    H[2,1] = h[2]\n    H[2,2] = h[3]\n    H\nend```\nit's type-stable. In terms of performance I roughly get a 2x speed-up. Whether you should be worried about it depends on how time-critical that function is in your code.","user":"UBWLSPU1E","ts":"1611311220.126600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/iU4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not familiar with DynamicPolynomials, but the problem here seems to be the call to vcat (the "},{"type":"text","text":";","style":{"code":true}},{"type":"text","text":" syntax for constructing the matrix). Not sure why though. If you manually assign the indices, like so:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function get_H()\n    @polyvar h[1:3]\n    H = Matrix{PolyVar{true}}(undef, 2, 2)\n    H[1,1] = h[1]\n    H[1,2] = h[2]\n    H[2,1] = h[2]\n    H[2,2] = h[3]\n    H\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"it's type-stable. In terms of performance I roughly get a 2x speed-up. Whether you should be worried about it depends on how time-critical that function is in your code."}]}]}],"thread_ts":"1611306876.124200","parent_user_id":"U012RPHRSP3"},{"client_msg_id":"a5b0152b-432c-430b-91f0-8541d9598879","type":"message","text":"That works thank you! I got a 6x speed-up, so pretty cool","user":"U012RPHRSP3","ts":"1611317833.128700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QWK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That works thank you! I got a 6x speed-up, so pretty cool"}]}]}],"thread_ts":"1611306876.124200","parent_user_id":"U012RPHRSP3"}]