[{"client_msg_id":"e973a0fd-7c11-42ad-a6ac-93cad0d52b34","type":"message","text":"I made a recursive function to extract a value from a JSON given the key for that value:\n```function extract(json, key)\n    req = []\n\n    for (k, v) in pairs(json)\n        if k == key\n            println(\"FOUND $key == $k\")\n            println(\"value: $v\")\n            println(\"type: $(typeof(v))\")\n            push!(req, v)\n        elseif typeof(v) &lt;: AbstractDict\n            extract(v, key)\n        end\n    end\n    req\nend```\nI tested this function with the following `Dict`: `Dict(:a =&gt; Dict(:b =&gt; \"wrong\"), :Src =&gt; \"GOLD\")`\nWith the expected result: It returns an `Array{Any, 1}` with the value `\"GOLD\"`\n\nHowever, when I try it with the real use case in mind it doesn’t return anything. The real use case is that I get two JSON payloads from an HTTP request and read them using `JSON3.read()` . I then put those two JSONs in a dict. The resulting type of the Dict is: `Dict{Symbol,JSON3.Object{Array{UInt8,1},Array{UInt64,1}}}` .\nThe print statements run when it finds the key but for some reason it doesn’t push the value (`v`) to the `req` List and so it returns nothing. The same thing happens if I substitute the `push!()` with a `return v` instead. Nothing is returned.\n\nAny ideas?","user":"U014URPKZNU","ts":"1614625897.144400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+klm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I made a recursive function to extract a value from a JSON given the key for that value:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function extract(json, key)\n    req = []\n\n    for (k, v) in pairs(json)\n        if k == key\n            println(\"FOUND $key == $k\")\n            println(\"value: $v\")\n            println(\"type: $(typeof(v))\")\n            push!(req, v)\n        elseif typeof(v) <: AbstractDict\n            extract(v, key)\n        end\n    end\n    req\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I tested this function with the following "},{"type":"text","text":"Dict","style":{"code":true}},{"type":"text","text":": "},{"type":"text","text":"Dict(:a => Dict(:b => \"wrong\"), :Src => \"GOLD\")","style":{"code":true}},{"type":"text","text":"\nWith the expected result: It returns an "},{"type":"text","text":"Array{Any, 1}","style":{"code":true}},{"type":"text","text":" with the value "},{"type":"text","text":"\"GOLD\"","style":{"code":true}},{"type":"text","text":"\n\nHowever, when I try it with the real use case in mind it doesn’t return anything. The real use case is that I get two JSON payloads from an HTTP request and read them using "},{"type":"text","text":"JSON3.read()","style":{"code":true}},{"type":"text","text":" . I then put those two JSONs in a dict. The resulting type of the Dict is: "},{"type":"text","text":"Dict{Symbol,JSON3.Object{Array{UInt8,1},Array{UInt64,1}}}","style":{"code":true}},{"type":"text","text":" .\nThe print statements run when it finds the key but for some reason it doesn’t push the value ("},{"type":"text","text":"v","style":{"code":true}},{"type":"text","text":") to the "},{"type":"text","text":"req","style":{"code":true}},{"type":"text","text":" List and so it returns nothing. The same thing happens if I substitute the "},{"type":"text","text":"push!()","style":{"code":true}},{"type":"text","text":" with a "},{"type":"text","text":"return v","style":{"code":true}},{"type":"text","text":" instead. Nothing is returned.\n\nAny ideas?"}]}]}],"thread_ts":"1614625897.144400","reply_count":14,"reply_users_count":3,"latest_reply":"1614630059.158900","reply_users":["B01J9QZ4SP8","U019K6Q9N15","U014URPKZNU"],"subscribed":false,"reactions":[{"name":"bridge","users":["U014URPKZNU"],"count":1}]},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1614625899.144500","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1614625897.144400","parent_user_id":"U014URPKZNU"},{"type":"message","subtype":"bot_message","text":"Success, it has been cross posted <https://discourse.julialang.org/t/56278| to Discourse>. Keep and eye out on Discourse for responses and please add an answer there once you are satisfied with the solution so others can benefit as well. Happy debugging!","ts":"1614626212.145000","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1614625897.144400","parent_user_id":"U014URPKZNU"},{"client_msg_id":"5f1742dc-b243-4186-93d9-8a892f89fc65","type":"message","text":"In the second branch of the `if ... else` , you don't push to the `req`?","user":"U019K6Q9N15","ts":"1614626276.145400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=6MJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In the second branch of the "},{"type":"text","text":"if ... else","style":{"code":true}},{"type":"text","text":" , you don't push to the "},{"type":"text","text":"req","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1614625897.144400","parent_user_id":"U014URPKZNU"},{"client_msg_id":"f4a2d11c-e8b4-4531-bf05-87020ba5e756","type":"message","text":"The second branch: `elseif typeof(v) &lt;: AbstractDict` checks to see if the value at that key is a nested JSON. If it is it calls the function again with that value to go down that nested JSON.","user":"U014URPKZNU","ts":"1614626396.145600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Io4/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The second branch: "},{"type":"text","text":"elseif typeof(v) <: AbstractDict","style":{"code":true}},{"type":"text","text":" checks to see if the value at that key is a nested JSON. If it is it calls the function again with that value to go down that nested JSON."}]}]}],"thread_ts":"1614625897.144400","parent_user_id":"U014URPKZNU"},{"client_msg_id":"e19470ba-3864-45a0-8093-8c162d474bf3","type":"message","text":"`extract(v, key)`\nshould be\n```push!(req, extract(v, key))```\nEDIT:\nMaybe not precisely so, but that branch doesn't _do_ anything.\n\nLike, as you descend into the recursion, the `req` variable is re-instantiated each time as an empty list, so it can only ever hold values from a single level of the json tree.","user":"U019K6Q9N15","ts":"1614626529.146100","team":"T68168MUP","edited":{"user":"U019K6Q9N15","ts":"1614626707.000000"},"blocks":[{"type":"rich_text","block_id":"SLDV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"extract(v, key)","style":{"code":true}},{"type":"text","text":"\nshould be\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"push!(req, extract(v, key))"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"EDIT:\nMaybe not precisely so, but that branch doesn't "},{"type":"text","text":"do","style":{"italic":true}},{"type":"text","text":" anything.\n\nLike, as you descend into the recursion, the "},{"type":"text","text":"req","style":{"code":true}},{"type":"text","text":" variable is re-instantiated each time as an empty list, so it can only ever hold values from a single level of the json tree."}]}]}],"thread_ts":"1614625897.144400","parent_user_id":"U014URPKZNU"},{"client_msg_id":"a6df7190-164c-44f6-8d03-917fb0eff37b","type":"message","text":"You want to return a single value, right?\nI wouldn't create this list and return it-- I would do the following:\n```function extract(json, key)\n  for (k, v) in pairs(json)\n    if k == key\n      return v\n    end\n    if typeof(v) &lt;: AbstractDict\n      return extract(v, k)\n    end\n  end\n  return nothing\nend```","user":"U019K6Q9N15","ts":"1614626845.146600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"i=sc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You want to return a single value, right?\nI wouldn't create this list and return it-- I would do the following:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function extract(json, key)\n  for (k, v) in pairs(json)\n    if k == key\n      return v\n    end\n    if typeof(v) <: AbstractDict\n      return extract(v, k)\n    end\n  end\n  return nothing\nend"}]}]}],"thread_ts":"1614625897.144400","parent_user_id":"U014URPKZNU"},{"client_msg_id":"f2560912-31a1-46d2-aba4-d646f80f6093","type":"message","text":"Right, the weird thing is that I tried that already: returning the value instead of pushing it to the array. Works for the simple `Dict` case but not for the `JSON3` case. The first branch that is supposed to return the value is accessed (I can tell by the prints) but the value isn’t returned.","user":"U014URPKZNU","ts":"1614627041.146800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/Xqc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Right, the weird thing is that I tried that already: returning the value instead of pushing it to the array. Works for the simple "},{"type":"text","text":"Dict","style":{"code":true}},{"type":"text","text":" case but not for the "},{"type":"text","text":"JSON3","style":{"code":true}},{"type":"text","text":" case. The first branch that is supposed to return the value is accessed (I can tell by the prints) but the value isn’t returned."}]}]}],"thread_ts":"1614625897.144400","parent_user_id":"U014URPKZNU"},{"client_msg_id":"9ede1b2e-5f45-4f64-8b14-c891cf0fd247","type":"message","text":"Have you tested `JSON3.Object &lt;: AbstractDict` ? I don't know that that is true off the top of my head.","user":"U019K6Q9N15","ts":"1614627322.147000","team":"T68168MUP","edited":{"user":"U019K6Q9N15","ts":"1614627345.000000"},"blocks":[{"type":"rich_text","block_id":"70k4+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Have you tested "},{"type":"text","text":"JSON3.Object <: AbstractDict","style":{"code":true}},{"type":"text","text":" ? I don't know that that is true off the top of my head."}]}]}],"thread_ts":"1614625897.144400","parent_user_id":"U014URPKZNU"},{"client_msg_id":"7b8c5158-4cb4-4183-aa21-2188f9d00ab7","type":"message","text":"yeah, that holds true. The recursive call is working. It makes it to the key that I want which is nested a couple of levels in, enters the first branch, prints the stuff but doesn’t return the value","user":"U014URPKZNU","ts":"1614627432.147500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+M2ND","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, that holds true. The recursive call is working. It makes it to the key that I want which is nested a couple of levels in, enters the first branch, prints the stuff but doesn’t return the value"}]}]}],"thread_ts":"1614625897.144400","parent_user_id":"U014URPKZNU"},{"client_msg_id":"c826e33a-621c-4d1f-a542-15380334c993","type":"message","text":"Oh my bad","user":"U019K6Q9N15","ts":"1614627445.147700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IJpSr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh my bad"}]}]}],"thread_ts":"1614625897.144400","parent_user_id":"U014URPKZNU"},{"client_msg_id":"b3304c8c-8e44-4b31-a788-4a688079f224","type":"message","text":"it is","user":"U019K6Q9N15","ts":"1614627447.147900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eMo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it is"}]}]}],"thread_ts":"1614625897.144400","parent_user_id":"U014URPKZNU"},{"client_msg_id":"4c42d430-cb67-4467-a0a7-eb063c95a7c2","type":"message","text":"Ok, I managed to solve it with the original `push!(req, v)` scenario","user":"U014URPKZNU","ts":"1614629993.158300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CPh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok, I managed to solve it with the original "},{"type":"text","text":"push!(req, v)","style":{"code":true}},{"type":"text","text":" scenario"}]}]}],"thread_ts":"1614625897.144400","parent_user_id":"U014URPKZNU"},{"client_msg_id":"562e1453-522c-4c96-9a9b-4b534c03ab10","type":"message","text":"```function extract_json(json, key)\n    req = []\n    function extract(json, key)\n        for (k, v) in pairs(Dict(json))\n            if k == key\n                push!(req, v)\n            elseif typeof(v) &lt;: AbstractDict\n                extract(v, key)\n            end\n        end\n    end\n    extract(json, key)\n    req\nend```","user":"U014URPKZNU","ts":"1614629995.158500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"r1RIW","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function extract_json(json, key)\n    req = []\n    function extract(json, key)\n        for (k, v) in pairs(Dict(json))\n            if k == key\n                push!(req, v)\n            elseif typeof(v) <: AbstractDict\n                extract(v, key)\n            end\n        end\n    end\n    extract(json, key)\n    req\nend"}]}]}],"thread_ts":"1614625897.144400","parent_user_id":"U014URPKZNU"},{"client_msg_id":"c230d945-3c04-4c77-b8cf-90f87da038a7","type":"message","text":"I get why the first version of pushing to the list didn’t work. As you said, every new call will begin with an empty list. But I don’t get why simply returning the value didn’t work","user":"U014URPKZNU","ts":"1614630059.158900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XbXx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I get why the first version of pushing to the list didn’t work. As you said, every new call will begin with an empty list. But I don’t get why simply returning the value didn’t work"}]}]}],"thread_ts":"1614625897.144400","parent_user_id":"U014URPKZNU","reactions":[{"name":"shrug","users":["U019K6Q9N15"],"count":1}]}]