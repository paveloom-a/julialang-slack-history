[{"client_msg_id":"3f369d8d-4af4-45d2-8e7f-c7088405eb1d","type":"message","text":"Trying to understand what LoopVectorization does/doesn’t like.\n\nIf I broadcast-add elements of tuples\n```function bcast_add(x::NTuple{N,T},y::NTuple{N,T}) where {N,T}\n    @avx for i = 1:length(first(x))\n        x_i = getindex.(x,i) .+ getindex.(y,i)\n        setindex!.(x,x_i,i)\n    end\nend```\nusing `@avx` gives an `Expression not recognized` error which disappears if I remove `getindex.(...)` or `setindex.(...)`. Are these operations not supported?","user":"U011LUQ182G","ts":"1612281702.414200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Bhrj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Trying to understand what LoopVectorization does/doesn’t like.\n\nIf I broadcast-add elements of tuples\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function bcast_add(x::NTuple{N,T},y::NTuple{N,T}) where {N,T}\n    @avx for i = 1:length(first(x))\n        x_i = getindex.(x,i) .+ getindex.(y,i)\n        setindex!.(x,x_i,i)\n    end\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"using "},{"type":"text","text":"@avx","style":{"code":true}},{"type":"text","text":" gives an "},{"type":"text","text":"Expression not recognized","style":{"code":true}},{"type":"text","text":" error which disappears if I remove "},{"type":"text","text":"getindex.(...)","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"setindex.(...)","style":{"code":true}},{"type":"text","text":". Are these operations not supported?"}]}]}],"thread_ts":"1612281702.414200","reply_count":15,"reply_users_count":6,"latest_reply":"1612287159.420100","reply_users":["B01J9QZ4SP8","U8D9768Q6","U011LUQ182G","UD0NS8PDF","UGU761DU2","UAUPJLBQX"],"subscribed":false,"reactions":[{"name":"bridge","users":["U011LUQ182G"],"count":1}]},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1612281704.414400","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1612281702.414200","parent_user_id":"U011LUQ182G"},{"client_msg_id":"926bfe62-d7b7-4a02-9ae7-2d2e724db7e9","type":"message","text":"That's correct, `@avx` doesn't know how to deal with broadcasting, though this would be a conceivable feature to add. Perhaps open an issue in LoopVectorization.jl?","user":"U8D9768Q6","ts":"1612282187.415000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"k2B","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's correct, "},{"type":"text","text":"@avx","style":{"code":true}},{"type":"text","text":" doesn't know how to deal with broadcasting, though this would be a conceivable feature to add. Perhaps open an issue in LoopVectorization.jl?"}]}]}],"thread_ts":"1612281702.414200","parent_user_id":"U011LUQ182G","reactions":[{"name":"+1","users":["U011LUQ182G","U011V2YN59N"],"count":2}]},{"client_msg_id":"e9a608e7-c650-43ca-91de-2e9686548b8a","type":"message","text":"will do!","user":"U011LUQ182G","ts":"1612282216.415200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sgJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"will do!"}]}]}],"thread_ts":"1612281702.414200","parent_user_id":"U011LUQ182G"},{"type":"message","subtype":"bot_message","text":"Success, it has been cross posted <https://discourse.julialang.org/t/trying-to-understand-what-loopvectorization-does-doesn-t-like-if-i-broadcast-add/54468|to Discourse>. Keep and eye out on Discourse for responses and please add an answer there once you are satisfied with the solution so others can benefit as well. Happy debugging!","ts":"1612282660.415700","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1612281702.414200","parent_user_id":"U011LUQ182G","reactions":[{"name":"heart","users":["UGR3910CQ"],"count":1}]},{"client_msg_id":"09f8575e-c482-41a9-9a25-dd442f451579","type":"message","text":"I think this is too weird for it, broadcasting getindex over tuples (of arrays, I presume?). It needs to see the arrays. Something like this will work though:\n```function bcast_add_avx!(x::NTuple{N,T},y::NTuple{N,T}) where {N,T}\n    for n in 1:N\n        x_n, y_n = x[n], y[n]\n        @avx for i = 1:length(first(x))\n            x_n_i = x_n[i] + y_n[i]\n            setindex!(x_n, x_n_i, i)\n        end\n    end\nend```","user":"UD0NS8PDF","ts":"1612284331.416300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zmRnF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think this is too weird for it, broadcasting getindex over tuples (of arrays, I presume?). It needs to see the arrays. Something like this will work though:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function bcast_add_avx!(x::NTuple{N,T},y::NTuple{N,T}) where {N,T}\n    for n in 1:N\n        x_n, y_n = x[n], y[n]\n        @avx for i = 1:length(first(x))\n            x_n_i = x_n[i] + y_n[i]\n            setindex!(x_n, x_n_i, i)\n        end\n    end\nend"}]}]}],"thread_ts":"1612281702.414200","parent_user_id":"U011LUQ182G"},{"client_msg_id":"f6f936b7-607a-4a07-ba05-81b1d4701df7","type":"message","text":"Hm, this sounds a bit trickier - I have something like a call to `kernel(getindex.(x,i))` inside the innermost loop.\n\nMaybe I can use `zip` to access, but it sounds like I’d have to manually unroll things to replace `setindex!`","user":"U011LUQ182G","ts":"1612285670.416500","team":"T68168MUP","edited":{"user":"U011LUQ182G","ts":"1612286072.000000"},"blocks":[{"type":"rich_text","block_id":"3aj5z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hm, this sounds a bit trickier - I have something like a call to "},{"type":"text","text":"kernel(getindex.(x,i))","style":{"code":true}},{"type":"text","text":" inside the innermost loop.\n\nMaybe I can use "},{"type":"text","text":"zip","style":{"code":true}},{"type":"text","text":" to access, but it sounds like I’d have to manually unroll things to replace "},{"type":"text","text":"setindex!","style":{"code":true}}]}]}],"thread_ts":"1612281702.414200","parent_user_id":"U011LUQ182G"},{"client_msg_id":"93fa06bf-0473-4526-a1b8-eb13257f100d","type":"message","text":"I could be wrong but don’t think any kind of two-deep indexing is going to work. Can N be anything?","user":"UD0NS8PDF","ts":"1612286160.417200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WFJw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I could be wrong but don’t think any kind of two-deep indexing is going to work. Can N be anything?"}]}]}],"thread_ts":"1612281702.414200","parent_user_id":"U011LUQ182G"},{"client_msg_id":"26a872b3-b680-4347-8f6f-8373fd3f4716","type":"message","text":"Lest folks think `@avx` can’t deal with broadcasting _period_, it’s worth noting that you can also apply avx to a fused broadcast instead of a loop, with e.g. `@avx @. some broadcast expression`","user":"UGU761DU2","ts":"1612286208.417400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hDg+l","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Lest folks think "},{"type":"text","text":"@avx","style":{"code":true}},{"type":"text","text":" can’t deal with broadcasting "},{"type":"text","text":"period","style":{"italic":true}},{"type":"text","text":", it’s worth noting that you can also apply avx to a fused broadcast instead of a loop, with e.g. "},{"type":"text","text":"@avx @. some broadcast expression","style":{"code":true}}]}]}],"thread_ts":"1612281702.414200","parent_user_id":"U011LUQ182G","reactions":[{"name":"+1","users":["U011LUQ182G","UD0NS8PDF"],"count":2}]},{"client_msg_id":"c9c86382-26aa-4034-9c75-a2ada68df616","type":"message","text":"<@UD0NS8PDF> `N` is usually an integer `&lt; 10` or so","user":"U011LUQ182G","ts":"1612286299.418000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xvPSy","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UD0NS8PDF"},{"type":"text","text":" "},{"type":"text","text":"N","style":{"code":true}},{"type":"text","text":" is usually an integer "},{"type":"text","text":"< 10","style":{"code":true}},{"type":"text","text":" or so"}]}]}],"thread_ts":"1612281702.414200","parent_user_id":"U011LUQ182G"},{"client_msg_id":"1ce395f0-fcc9-4694-9581-aad127d9e27d","type":"message","text":"Yes, sorry I was a bit unclear. IT just can't handle that inside a loop body.","user":"U8D9768Q6","ts":"1612286338.418200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TKqy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, sorry I was a bit unclear. IT just can't handle that inside a loop body."}]}]}],"thread_ts":"1612281702.414200","parent_user_id":"U011LUQ182G"},{"client_msg_id":"195c959a-e83b-4d4b-8787-751aab2e594f","type":"message","text":"I think things like `x[n][i]` also won’t work, it needs to know what arrays it’s dealing with. You could generate code though, for each `N` build the unrolled expression with all N loops visible. Either just a loop `for N in 1:10 @eval fun!(x::NTuple{$N,T}, y::...)` or a generated function.","user":"UD0NS8PDF","ts":"1612286588.418400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sJt+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think things like "},{"type":"text","text":"x[n][i]","style":{"code":true}},{"type":"text","text":" also won’t work, it needs to know what arrays it’s dealing with. You could generate code though, for each "},{"type":"text","text":"N","style":{"code":true}},{"type":"text","text":" build the unrolled expression with all N loops visible. Either just a loop "},{"type":"text","text":"for N in 1:10 @eval fun!(x::NTuple{$N,T}, y::...)","style":{"code":true}},{"type":"text","text":" or a generated function."}]}]}],"thread_ts":"1612281702.414200","parent_user_id":"U011LUQ182G","reactions":[{"name":"+1","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"dd61720c-96ad-4717-8b6b-f67281e8ddb7","type":"message","text":"thanks <@UD0NS8PDF>! <@UAUPJLBQX> gave a similar reply on the Github issue I opened earlier","user":"U011LUQ182G","ts":"1612286775.418700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hYiBT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thanks "},{"type":"user","user_id":"UD0NS8PDF"},{"type":"text","text":"! "},{"type":"user","user_id":"UAUPJLBQX"},{"type":"text","text":" gave a similar reply on the Github issue I opened earlier"}]}]}],"thread_ts":"1612281702.414200","parent_user_id":"U011LUQ182G"},{"client_msg_id":"b64ce448-03ca-4acd-abd9-48aa39c51b25","type":"message","text":"This works:\n```using LoopVectorization, Base.Cartesian\n@generated function foo!(x::Tuple{Vararg{Array,N}}) where {N}\n    quote\n        @nextract $N x x\n        @avx for i = 1:length(first(x))\n            @nexprs $N n -&gt; x_n[i] = exp(x_n[i])\n        end\n    end\nend\n\nusing Random\nx = (rand(100), randn(100), randexp(100))\nfoo!(x)\nx```","user":"UAUPJLBQX","ts":"1612286902.418900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"v07","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This works:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using LoopVectorization, Base.Cartesian\n@generated function foo!(x::Tuple{Vararg{Array,N}}) where {N}\n    quote\n        @nextract $N x x\n        @avx for i = 1:length(first(x))\n            @nexprs $N n -> x_n[i] = exp(x_n[i])\n        end\n    end\nend\n\nusing Random\nx = (rand(100), randn(100), randexp(100))\nfoo!(x)\nx"}]}]}],"thread_ts":"1612281702.414200","parent_user_id":"U011LUQ182G","reactions":[{"name":"+1","users":["U011LUQ182G","UD0NS8PDF","UGU761DU2"],"count":3}]},{"client_msg_id":"774c4157-a957-4b65-b2f9-a439abf06a2e","type":"message","text":"Tim Holy actually made the PR to add support for CartesianIndexing: <https://github.com/chriselrod/LoopVectorization.jl/pull/66>\nAdding support for broadcasting tuples would be similar, if anyone wants to take a stab at it. :wink:\nOtherwise, `Base.Cartesian` macros are the easiest way for now to write code that needs this sort of thing.","user":"UAUPJLBQX","ts":"1612287063.419600","team":"T68168MUP","edited":{"user":"UAUPJLBQX","ts":"1612287148.000000"},"blocks":[{"type":"rich_text","block_id":"k3q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Tim Holy actually made the PR to add support for CartesianIndexing: "},{"type":"link","url":"https://github.com/chriselrod/LoopVectorization.jl/pull/66"},{"type":"text","text":"\nAdding support for broadcasting tuples would be similar, if anyone wants to take a stab at it. "},{"type":"emoji","name":"wink"},{"type":"text","text":"\nOtherwise, "},{"type":"text","text":"Base.Cartesian","style":{"code":true}},{"type":"text","text":" macros are the easiest way for now to write code that needs this sort of thing."}]}]}],"thread_ts":"1612281702.414200","parent_user_id":"U011LUQ182G","reactions":[{"name":"+1","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"9362bfcb-7611-443f-a39d-77bd6889cb60","type":"message","text":"x-posting these responses to discourse. Thanks for the detailed responses!","user":"U011LUQ182G","ts":"1612287159.420100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vZjyJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"x-posting these responses to discourse. Thanks for the detailed responses!"}]}]}],"thread_ts":"1612281702.414200","parent_user_id":"U011LUQ182G","reactions":[{"name":"+1","users":["UAUPJLBQX"],"count":1}]}]