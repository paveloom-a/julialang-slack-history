[{"client_msg_id":"8afedce9-98fc-4ba1-95d2-4fda7678bd2c","type":"message","text":"A question regarding structs - I have this hierarchical data structure which is somewhat like a binary tree. In my current implementation (see below) I use indicators rootnode and leafnode to indicate where the tree ends. In this case A11, A22 usually remain uninitialized and are #undef objects. I want to have the option of not having to specify certain fields of my data structures as they only make sense in a certain context (if it is a leafnode for instance). What is the best way to do that?\n```mutable struct HssMatrix{T&lt;:Number} &lt;: AbstractMatrix{T}\n  # 2x2 recursive block structure for branchnodes\n  A11       ::HssMatrix{T}\n  A22       ::HssMatrix{T}\n  B12       ::Matrix{T}\n  B21       ::Matrix{T}\n\n  # indicators whether we are at the root- or leafnode\n  rootnode  ::Bool\n  leafnode  ::Bool\n\n  # dimensions of its children\n  m1        ::Integer\n  n1        ::Integer\n  m2        ::Integer\n  n2        ::Integer\n\n  # translation operators if we are at a branchnode\n  R1        ::Matrix{T}\n  R2        ::Matrix{T}\n  W1        ::Matrix{T}\n  W2        ::Matrix{T}\n\n  # at the leaf level we store the diagonal block and generators directly\n  U         ::Matrix{T}\n  V         ::Matrix{T}\n  D         ::Matrix{T}\n\n  # inner constructor\n  HssMatrix{T}() where T = new{T}()\n  HssMatrix() = HssMatrix{Float64}()\nend```","user":"U01L0RJC6FM","ts":"1611743574.414500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WIq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"A question regarding structs - I have this hierarchical data structure which is somewhat like a binary tree. In my current implementation (see below) I use indicators rootnode and leafnode to indicate where the tree ends. In this case A11, A22 usually remain uninitialized and are #undef objects. I want to have the option of not having to specify certain fields of my data structures as they only make sense in a certain context (if it is a leafnode for instance). What is the best way to do that?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"mutable struct HssMatrix{T<:Number} <: AbstractMatrix{T}\n  # 2x2 recursive block structure for branchnodes\n  A11       ::HssMatrix{T}\n  A22       ::HssMatrix{T}\n  B12       ::Matrix{T}\n  B21       ::Matrix{T}\n\n  # indicators whether we are at the root- or leafnode\n  rootnode  ::Bool\n  leafnode  ::Bool\n\n  # dimensions of its children\n  m1        ::Integer\n  n1        ::Integer\n  m2        ::Integer\n  n2        ::Integer\n\n  # translation operators if we are at a branchnode\n  R1        ::Matrix{T}\n  R2        ::Matrix{T}\n  W1        ::Matrix{T}\n  W2        ::Matrix{T}\n\n  # at the leaf level we store the diagonal block and generators directly\n  U         ::Matrix{T}\n  V         ::Matrix{T}\n  D         ::Matrix{T}\n\n  # inner constructor\n  HssMatrix{T}() where T = new{T}()\n  HssMatrix() = HssMatrix{Float64}()\nend"}]}]}],"thread_ts":"1611743574.414500","reply_count":7,"reply_users_count":2,"latest_reply":"1611769027.435900","reply_users":["U7HAYKY9X","U01L0RJC6FM"],"subscribed":false},{"client_msg_id":"56d4a05d-81d4-454c-bf53-d793934ea200","type":"message","text":"It's much better to have them as `Union{T, Nothing}` , and then have constructors that decide if they should be nothing orT","user":"U7HAYKY9X","ts":"1611748710.421900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XIl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's much better to have them as "},{"type":"text","text":"Union{T, Nothing}","style":{"code":true}},{"type":"text","text":" , and then have constructors that decide if they should be nothing orT"}]}]}],"thread_ts":"1611743574.414500","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"14dcdef4-8e60-4e91-8cd3-357c0db2279f","type":"message","text":"thank you! Is there a difference between `Matrix{Union{T, Nothing}}` and `Union{Matrix{T},Nothing}` ?","user":"U01L0RJC6FM","ts":"1611753303.427200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QVuQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thank you! Is there a difference between "},{"type":"text","text":"Matrix{Union{T, Nothing}}","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"Union{Matrix{T},Nothing}","style":{"code":true}},{"type":"text","text":" ?"}]}]}],"thread_ts":"1611743574.414500","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"f960df17-c5cc-4e63-97e0-422562ef2a77","type":"message","text":"Yes, you want the latter. The former is a matrix where each element can be nothing, but you want a field which is either nothing or a matrix","user":"U7HAYKY9X","ts":"1611754629.429700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"K5GK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, you want the latter. The former is a matrix where each element can be nothing, but you want a field which is either nothing or a matrix"}]}]}],"thread_ts":"1611743574.414500","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"963d5436-336b-4497-beb4-3a13b854e460","type":"message","text":"Also, each of those fields that are duplicated (like R1 and R2), could instead just be called `R` and contains an `NTuple{2, Matrix{T}}` , right?","user":"U7HAYKY9X","ts":"1611754667.430300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"m0l","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, each of those fields that are duplicated (like R1 and R2), could instead just be called "},{"type":"text","text":"R","style":{"code":true}},{"type":"text","text":" and contains an "},{"type":"text","text":"NTuple{2, Matrix{T}}","style":{"code":true}},{"type":"text","text":" , right?"}]}]}],"thread_ts":"1611743574.414500","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"a263d11e-9ff3-4df2-8932-963c4c68abcd","type":"message","text":"yes, you're right! I keep it like this for readability. Changing it to Tuples would be a matter of style preference right?","user":"U01L0RJC6FM","ts":"1611755081.430700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"szR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, you're right! I keep it like this for readability. Changing it to Tuples would be a matter of style preference right?"}]}]}],"thread_ts":"1611743574.414500","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"27749593-06cc-44e6-8a37-1d5bd850cab1","type":"message","text":"btw.. changing the data structure to be able to contain Nothing has drastically increased the number of allocations for some operations. Isn't that an issue?","user":"U01L0RJC6FM","ts":"1611756272.431200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IwJz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"btw.. changing the data structure to be able to contain Nothing has drastically increased the number of allocations for some operations. Isn't that an issue?"}]}]}],"thread_ts":"1611743574.414500","parent_user_id":"U01L0RJC6FM"},{"client_msg_id":"b29d29c8-a7d6-4f0d-8ac4-281fb8c4440a","type":"message","text":"Yeah, that's an issue. You'll have to mitigate that by providing some hints to the compiler. One way would be to have a method similar to:\n`getmatrix(x::HssMatrix)::Matrix = x.A` , and then only access the matrix through that method. Then the compiler knows for certain the result is a matrix, and not `nothing`","user":"U7HAYKY9X","ts":"1611769027.435900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IZa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, that's an issue. You'll have to mitigate that by providing some hints to the compiler. One way would be to have a method similar to:\n"},{"type":"text","text":"getmatrix(x::HssMatrix)::Matrix = x.A","style":{"code":true}},{"type":"text","text":" , and then only access the matrix through that method. Then the compiler knows for certain the result is a matrix, and not "},{"type":"text","text":"nothing","style":{"code":true}}]}]}],"thread_ts":"1611743574.414500","parent_user_id":"U01L0RJC6FM"}]