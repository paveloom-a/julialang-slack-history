[{"client_msg_id":"404e6a02-71e8-406f-ab99-8b7ba36c661f","type":"message","text":"compare to this:\n```julia&gt; a = [@SVector rand(rand(3:8)) for _ = 1:10^3];\n\njulia&gt; @btime sum.($a)\n  115.129 μs (1493 allocations: 31.31 KiB)```","user":"UH8A351DJ","ts":"1607904608.428900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BG33i","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"compare to this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> a = [@SVector rand(rand(3:8)) for _ = 1:10^3];\n\njulia> @btime sum.($a)\n  115.129 μs (1493 allocations: 31.31 KiB)"}]}]}],"thread_ts":"1607904608.428900","reply_count":21,"reply_users_count":3,"latest_reply":"1607977775.100600","reply_users":["U0179G7FG4F","UH8A351DJ","UH24GRBLL"],"subscribed":false},{"client_msg_id":"fcfad6c7-f146-4df6-84f3-86f510cdedd4","type":"message","text":"I think the problem is that since the `StaticArray` version has an array of differently typed elements, `getindex` is type unstable.","user":"U0179G7FG4F","ts":"1607905099.429400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YUHNZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think the problem is that since the "},{"type":"text","text":"StaticArray","style":{"code":true}},{"type":"text","text":" version has an array of differently typed elements, "},{"type":"text","text":"getindex","style":{"code":true}},{"type":"text","text":" is type unstable."}]}]}],"thread_ts":"1607904608.428900","parent_user_id":"UH8A351DJ","reactions":[{"name":"thinking_face","users":["UH8A351DJ","UGU761DU2"],"count":2}]},{"client_msg_id":"f99cf143-3d9e-4c14-85ac-e35bc4a208a4","type":"message","text":"<@U0179G7FG4F> thx, irl I'm having a different problem, I have a struct that has a long vector and another vector to track where is the starting point (jagged array).\n\nthis line seems to be giving me a lot of allocation, any clue what's the correct way of doing this?:\n```Base.getindex(a::JaggedArrayF, i::Int64) = @views a.content[a.offsets[i]:(a.offsets[i+1]-1)]```","user":"UH8A351DJ","ts":"1607926222.442300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"06b","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U0179G7FG4F"},{"type":"text","text":" thx, irl I'm having a different problem, I have a struct that has a long vector and another vector to track where is the starting point (jagged array).\n\nthis line seems to be giving me a lot of allocation, any clue what's the correct way of doing this?:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Base.getindex(a::JaggedArrayF, i::Int64) = @views a.content[a.offsets[i]:(a.offsets[i+1]-1)]"}]}]}],"thread_ts":"1607904608.428900","parent_user_id":"UH8A351DJ"},{"client_msg_id":"c4174e5d-eb05-4d4d-8f3f-d7a43fd544d3","type":"message","text":"a MWE is:\n```struct JaggedArrayF &lt;: AbstractArray{Float64, 1}\n    content::Array{Float64}\n    offsets::Array{Int64}\nend\nBase.size(a::JaggedArrayF) = (length(a.offsets)-1,)\nBase.getindex(a::JaggedArrayF, i::Int64) = @views a.content[a.offsets[i]:(a.offsets[i+1]-1)]\n\nfunction make_jagged(a)\n    counts = vcat(a...)\n    offsets = [1; (1 .+ cumsum(length.(a)))]\n    JaggedArrayF(counts,offsets)\nend```\nthen run something like:\n```a = [rand(Float64,rand(3:8) for _ in 1:50000];\nja = make_jagged(a)```","user":"UH8A351DJ","ts":"1607926231.442500","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1607926580.000000"},"blocks":[{"type":"rich_text","block_id":"eBl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"a MWE is:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct JaggedArrayF <: AbstractArray{Float64, 1}\n    content::Array{Float64}\n    offsets::Array{Int64}\nend\nBase.size(a::JaggedArrayF) = (length(a.offsets)-1,)\nBase.getindex(a::JaggedArrayF, i::Int64) = @views a.content[a.offsets[i]:(a.offsets[i+1]-1)]\n\nfunction make_jagged(a)\n    counts = vcat(a...)\n    offsets = [1; (1 .+ cumsum(length.(a)))]\n    JaggedArrayF(counts,offsets)\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"then run something like:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"a = [rand(Float64,rand(3:8) for _ in 1:50000];\nja = make_jagged(a)"}]}]}],"thread_ts":"1607904608.428900","parent_user_id":"UH8A351DJ"},{"client_msg_id":"ce84a3b1-6bcd-4084-a155-988b02e95894","type":"message","text":"and do something like `sum.(ja)` will have a lot of allocation","user":"UH8A351DJ","ts":"1607926569.442900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Uyf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and do something like "},{"type":"text","text":"sum.(ja)","style":{"code":true}},{"type":"text","text":" will have a lot of allocation"}]}]}],"thread_ts":"1607904608.428900","parent_user_id":"UH8A351DJ"},{"client_msg_id":"17b06fcc-f1a2-4823-86dc-16f9ad80eaa5","type":"message","text":"`Array{Float64}` is not concrete","user":"UH24GRBLL","ts":"1607928752.443200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/jnG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Array{Float64}","style":{"code":true}},{"type":"text","text":" is not concrete"}]}]}],"thread_ts":"1607904608.428900","parent_user_id":"UH8A351DJ"},{"client_msg_id":"ac97274b-3976-4c8f-84bb-2aad3b827c83","type":"message","text":"you probably want `Vector{Float64}` instead?","user":"UH24GRBLL","ts":"1607928773.443400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IvG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you probably want "},{"type":"text","text":"Vector{Float64}","style":{"code":true}},{"type":"text","text":" instead?"}]}]}],"thread_ts":"1607904608.428900","parent_user_id":"UH8A351DJ"},{"client_msg_id":"0ff8276c-523d-4013-ac3a-dafb5b578df8","type":"message","text":"or maybe a type parameter or two for the content types","user":"UH24GRBLL","ts":"1607928937.443600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ier","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or maybe a type parameter or two for the content types"}]}]}],"thread_ts":"1607904608.428900","parent_user_id":"UH8A351DJ"},{"client_msg_id":"dab35fb3-e51b-4dee-b6d0-d05fc98d6f85","type":"message","text":"<@UH24GRBLL> that seems to be the issue, even though the actual `ja` has concrete field types, it looks like compiler gave up early on due to the `struct` definition having non-concrete types","user":"UH8A351DJ","ts":"1607976963.084800","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1607976987.000000"},"blocks":[{"type":"rich_text","block_id":"X9W9","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH24GRBLL"},{"type":"text","text":" that seems to be the issue, even though the actual "},{"type":"text","text":"ja","style":{"code":true}},{"type":"text","text":" has concrete field types, it looks like compiler gave up early on due to the "},{"type":"text","text":"struct","style":{"code":true}},{"type":"text","text":" definition having non-concrete types"}]}]}],"thread_ts":"1607904608.428900","parent_user_id":"UH8A351DJ"},{"client_msg_id":"79bcb9e1-cc38-46d2-9c61-9adeaf357c3b","type":"message","text":"it's not giving up early, it's just that you've specified them to be non-concrete and it can't just get rid of that","user":"UH24GRBLL","ts":"1607977531.093200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jr/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's not giving up early, it's just that you've specified them to be non-concrete and it can't just get rid of that"}]}]}],"thread_ts":"1607904608.428900","parent_user_id":"UH8A351DJ"},{"client_msg_id":"a38babec-a792-455a-bd29-49e218d1cad2","type":"message","text":"right but if you inspect the type of `ja.content`, it is concrete","user":"UH8A351DJ","ts":"1607977574.094500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NgLOr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"right but if you inspect the type of "},{"type":"text","text":"ja.content","style":{"code":true}},{"type":"text","text":", it is concrete"}]}]}],"thread_ts":"1607904608.428900","parent_user_id":"UH8A351DJ"},{"client_msg_id":"f22cc5b7-48c2-48f1-8d7b-eab7d104d200","type":"message","text":"you've told it \"don't assume any dimensionality and don't specialise based on that\" since you've omitted the type parameter","user":"UH24GRBLL","ts":"1607977577.094800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oB0L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you've told it \"don't assume any dimensionality and don't specialise based on that\" since you've omitted the type parameter"}]}]}],"thread_ts":"1607904608.428900","parent_user_id":"UH8A351DJ"},{"client_msg_id":"2122dfd0-8246-4596-8263-a786e620bc66","type":"message","text":"at runtime, all types are concrete","user":"UH24GRBLL","ts":"1607977581.095100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PzEBC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"at runtime, all types are concrete"}]}]}],"thread_ts":"1607904608.428900","parent_user_id":"UH8A351DJ"},{"client_msg_id":"2a52f53b-1981-48be-8c77-d8bef9f83ab4","type":"message","text":"it's just that it has to insert a lookup there","user":"UH24GRBLL","ts":"1607977597.095800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=b1R","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's just that it has to insert a lookup there"}]}]}],"thread_ts":"1607904608.428900","parent_user_id":"UH8A351DJ"},{"client_msg_id":"a2f61e01-0b7a-488e-aba8-6296049d5c7c","type":"message","text":"which probably is the thing that leads to it not knowing the size right away","user":"UH24GRBLL","ts":"1607977616.096400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8KCrv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which probably is the thing that leads to it not knowing the size right away"}]}]}],"thread_ts":"1607904608.428900","parent_user_id":"UH8A351DJ"},{"client_msg_id":"c3fe51eb-8fb2-4ba9-8f16-bd22c1e0e074","type":"message","text":"I see, that makes sense","user":"UH8A351DJ","ts":"1607977640.097400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cRyW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see, that makes sense"}]}]}],"thread_ts":"1607904608.428900","parent_user_id":"UH8A351DJ"},{"client_msg_id":"6ac8c926-da56-4862-b560-1ebf78409375","type":"message","text":"I bet if you introduce a function barrier in  `getindex`, you wouldn't get the performance and allocation penalties","user":"UH24GRBLL","ts":"1607977642.097600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x+F","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I bet if you introduce a function barrier in  "},{"type":"text","text":"getindex","style":{"code":true}},{"type":"text","text":", you wouldn't get the performance and allocation penalties"}]}]}],"thread_ts":"1607904608.428900","parent_user_id":"UH8A351DJ"},{"client_msg_id":"e55d8bfd-d73c-4777-be68-4f675db415b7","type":"message","text":"because it can insert the lookup in `getindex` and can specialise the function barrier","user":"UH24GRBLL","ts":"1607977661.098100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AIhA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"because it can insert the lookup in "},{"type":"text","text":"getindex","style":{"code":true}},{"type":"text","text":" and can specialise the function barrier"}]}]}],"thread_ts":"1607904608.428900","parent_user_id":"UH8A351DJ"},{"client_msg_id":"c7664511-80e4-4b72-ab23-0ef7c8377522","type":"message","text":"(and that maybe resolves it all)","user":"UH24GRBLL","ts":"1607977670.098600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZqOwM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(and that maybe resolves it all)"}]}]}],"thread_ts":"1607904608.428900","parent_user_id":"UH8A351DJ"},{"client_msg_id":"3a11f9c9-d7aa-44d7-927a-7b3749c4f478","type":"message","text":"someone asked me this playing with Julia, I told them to fix by making the struct fields definition parametric (Vector{T}), which solved the problem but I wanted to know why","user":"UH8A351DJ","ts":"1607977674.098900","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1607977707.000000"},"blocks":[{"type":"rich_text","block_id":"RQ3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"someone asked me this playing with Julia, I told them to fix by making the struct fields definition parametric (Vector{T}), which solved the problem but I wanted to know why"}]}]}],"thread_ts":"1607904608.428900","parent_user_id":"UH8A351DJ"},{"client_msg_id":"6373caf7-700b-402b-a3ca-c5932b50eeb8","type":"message","text":"yeah, that'd fix it because that's equivalent to `Array{T,1}`","user":"UH24GRBLL","ts":"1607977766.100400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Kwr4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, that'd fix it because that's equivalent to "},{"type":"text","text":"Array{T,1}","style":{"code":true}}]}]}],"thread_ts":"1607904608.428900","parent_user_id":"UH8A351DJ"},{"client_msg_id":"119df6f8-9a72-4d9b-8815-752bdb72006c","type":"message","text":"since `Vector` is just an alias to that and thus `Vector{Float64}` is concrete","user":"UH24GRBLL","ts":"1607977775.100600","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1607978034.000000"},"blocks":[{"type":"rich_text","block_id":"1jHR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"since "},{"type":"text","text":"Vector","style":{"code":true}},{"type":"text","text":" is just an alias to that and thus "},{"type":"text","text":"Vector{Float64}","style":{"code":true}},{"type":"text","text":" is concrete"}]}]}],"thread_ts":"1607904608.428900","parent_user_id":"UH8A351DJ"}]