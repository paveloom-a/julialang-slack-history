[{"client_msg_id":"07ca5a29-e593-4e6f-884b-04a15508b4a3","type":"message","text":"how do I write a function to accept this type of object to include any unit type?\n```MyStruct{Quantity{Measurements.Measurement{Float64},ùêì,Unitful.FreeUnits{(ms,),ùêì,nothing}}}(1039.4 ¬± 6.2 ms)```","user":"UCUALSTV3","ts":"1609452533.450200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DVs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"how do I write a function to accept this type of object to include any unit type?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"MyStruct{Quantity{Measurements.Measurement{Float64},ùêì,Unitful.FreeUnits{(ms,),ùêì,nothing}}}(1039.4 ¬± 6.2 ms)"}]}]}],"thread_ts":"1609452533.450200","reply_count":14,"reply_users_count":4,"latest_reply":"1609526528.486300","reply_users":["U0179G7FG4F","UCUALSTV3","U012XER8K4M","UB197FRCL"],"subscribed":false},{"client_msg_id":"f9cf62cb-545d-4159-b5bd-2a7b6a67ff0f","type":"message","text":"is there a reason to type the arguments to the function at all?","user":"U0179G7FG4F","ts":"1609452582.450300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yb3T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is there a reason to type the arguments to the function at all?"}]}]}],"thread_ts":"1609452533.450200","parent_user_id":"UCUALSTV3"},{"client_msg_id":"2b098450-818e-4a5c-9bae-9dc12032992f","type":"message","text":"I am trying to make a function I have written accept this type as an input and it requires a little different handling because i have to do stuff like `v.val.val` to get the number stored in it to do thigns with it.","user":"UCUALSTV3","ts":"1609452656.450500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eC3nL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am trying to make a function I have written accept this type as an input and it requires a little different handling because i have to do stuff like "},{"type":"text","text":"v.val.val","style":{"code":true}},{"type":"text","text":" to get the number stored in it to do thigns with it."}]}]}],"thread_ts":"1609452533.450200","parent_user_id":"UCUALSTV3"},{"client_msg_id":"1df61d1a-75c2-42c9-9a1f-7e1e65059217","type":"message","text":"```function fast_bin(v::Union{Float64, Quantity}, bin_size::Union{Float64, Quantity})\n    bin = Int64(floor(abs(v) / bin_size) + 1)\n    # bin = Int64(floor(abs(v) / bin_size) + 1)\n    edge = bin * bin_size\n    if edge &lt; v\n        # left bin\n        bin += 2\n        if v &gt; 0unit(v)\n            return Bin(bin)\n        else\n            return Bin(-bin)\n        end\n    else\n        bin += 1\n        if v &gt; 0unit(v)\n            return Bin(bin)\n        else\n            return Bin(-bin)\n        end\n    end\nend```","user":"UCUALSTV3","ts":"1609452750.450700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"miu","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function fast_bin(v::Union{Float64, Quantity}, bin_size::Union{Float64, Quantity})\n    bin = Int64(floor(abs(v) / bin_size) + 1)\n    # bin = Int64(floor(abs(v) / bin_size) + 1)\n    edge = bin * bin_size\n    if edge < v\n        # left bin\n        bin += 2\n        if v > 0unit(v)\n            return Bin(bin)\n        else\n            return Bin(-bin)\n        end\n    else\n        bin += 1\n        if v > 0unit(v)\n            return Bin(bin)\n        else\n            return Bin(-bin)\n        end\n    end\nend"}]}]}],"thread_ts":"1609452533.450200","parent_user_id":"UCUALSTV3"},{"client_msg_id":"4ab1685e-219a-4fdc-a46e-81d44f4aaf5e","type":"message","text":"thats my function.. and the struct is\n```struct MyStruct{T}\n    val::T\nend```","user":"UCUALSTV3","ts":"1609452785.450900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IpKO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thats my function.. and the struct is\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct MyStruct{T}\n    val::T\nend"}]}]}],"thread_ts":"1609452533.450200","parent_user_id":"UCUALSTV3"},{"client_msg_id":"0480cf96-9fe3-4850-812a-9fa0e19aa56c","type":"message","text":"Oscars point is that you don't need to specify anything for the function arguments","user":"U012XER8K4M","ts":"1609454583.460400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BMZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oscars point is that you don't need to specify anything for the function arguments"}]}]}],"thread_ts":"1609452533.450200","parent_user_id":"UCUALSTV3"},{"client_msg_id":"8cff430a-af20-492f-910e-9239fe7fbc5e","type":"message","text":"hm, but, well, that function just doesn't work for a Quantity. You need another level of abstractions for that","user":"U012XER8K4M","ts":"1609454613.461400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SuQm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hm, but, well, that function just doesn't work for a Quantity. You need another level of abstractions for that"}]}]}],"thread_ts":"1609452533.450200","parent_user_id":"UCUALSTV3"},{"client_msg_id":"da237f26-7a36-4477-9fc4-143b2645d95e","type":"message","text":"e.g.\n```extract_some_value(v::Float64) = v\nextract_some_value(v::Quantity) = v.val\n\nfunction fast_bin(v, bin_size)\n    bin = Int64(floor(abs(extract_some_value(v)) / extract_some_value(bin_size)) + 1)\n    ...```\n","user":"U012XER8K4M","ts":"1609454709.464100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"soPt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"e.g.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"extract_some_value(v::Float64) = v\nextract_some_value(v::Quantity) = v.val\n\nfunction fast_bin(v, bin_size)\n    bin = Int64(floor(abs(extract_some_value(v)) / extract_some_value(bin_size)) + 1)\n    ..."}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1609452533.450200","parent_user_id":"UCUALSTV3"},{"client_msg_id":"9ff9b5f5-ad43-4707-9ba0-8a03c3371960","type":"message","text":"or you can also just make fast_bin just work with numbers and feed it `fast_bin(v.val)`","user":"U012XER8K4M","ts":"1609454735.464800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Aoi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or you can also just make fast_bin just work with numbers and feed it "},{"type":"text","text":"fast_bin(v.val)","style":{"code":true}}]}]}],"thread_ts":"1609452533.450200","parent_user_id":"UCUALSTV3"},{"client_msg_id":"ecbdc5ea-e609-4d4c-a78e-238a114a8752","type":"message","text":"so what I am trying to do is take a value, that has units attached to it. and store it in the `MyStruct` type. I then use my `fast_bin` function to bin the data into a uniform bin given a bin size. I then recreate the `MyStruct` object with the binned value.. which instead of being a `Int64` corresponding to the bin number. I have it have the mean value of the bin with `Measurement` error of `bin_size / 2` .  In theory I should be able to take this measurment value and just return the same thing.. no real reason I need to do this.. but I'm trying to learn as much about Julia as I can with this little project I've got going and this seems like something I should be able to do..","user":"UCUALSTV3","ts":"1609457861.469500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"u9la2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so what I am trying to do is take a value, that has units attached to it. and store it in the "},{"type":"text","text":"MyStruct","style":{"code":true}},{"type":"text","text":" type. I then use my "},{"type":"text","text":"fast_bin","style":{"code":true}},{"type":"text","text":" function to bin the data into a uniform bin given a bin size. I then recreate the "},{"type":"text","text":"MyStruct","style":{"code":true}},{"type":"text","text":" object with the binned value.. which instead of being a "},{"type":"text","text":"Int64","style":{"code":true}},{"type":"text","text":" corresponding to the bin number. I have it have the mean value of the bin with "},{"type":"text","text":"Measurement","style":{"code":true}},{"type":"text","text":" error of "},{"type":"text","text":"bin_size / 2","style":{"code":true}},{"type":"text","text":" .  In theory I should be able to take this measurment value and just return the same thing.. no real reason I need to do this.. but I'm trying to learn as much about Julia as I can with this little project I've got going and this seems like something I should be able to do.."}]}]}],"thread_ts":"1609452533.450200","parent_user_id":"UCUALSTV3"},{"client_msg_id":"36a1567c-7c22-42ca-a304-ca818bff40bd","type":"message","text":"What about\n```fast_bin(v, bin_size) = Bin(Int(fld(v, bin_size)))```\n?","user":"UB197FRCL","ts":"1609460918.469800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4npiE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What about\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"fast_bin(v, bin_size) = Bin(Int(fld(v, bin_size)))"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"?"}]}]}],"thread_ts":"1609452533.450200","parent_user_id":"UCUALSTV3"},{"client_msg_id":"3a3763ef-0b9d-458c-bb34-a463527d4363","type":"message","text":"Well, without going in to the specific problem, if you want to write a generic function `fast_bin` (or anything else) that could take your custom type, then you should probably abstract away the specific steps of that algorithm, and implement the necessary sub-functions for your type. This is what automatic differentiation does with the basic operations.\nE.g. I would implement `abs(v::MyStruct)= ....`  then, you can interchangibly use `MyStruct` objects in all the places where you needs `abs`.","user":"U012XER8K4M","ts":"1609462925.470500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"l0Z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well, without going in to the specific problem, if you want to write a generic function "},{"type":"text","text":"fast_bin","style":{"code":true}},{"type":"text","text":" (or anything else) that could take your custom type, then you should probably abstract away the specific steps of that algorithm, and implement the necessary sub-functions for your type. This is what automatic differentiation does with the basic operations.\nE.g. I would implement "},{"type":"text","text":"abs(v::MyStruct)= ....","style":{"code":true}},{"type":"text","text":"  then, you can interchangibly use "},{"type":"text","text":"MyStruct","style":{"code":true}},{"type":"text","text":" objects in all the places where you needs "},{"type":"text","text":"abs","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1609452533.450200","parent_user_id":"UCUALSTV3","reactions":[{"name":"point_up","users":["UB197FRCL"],"count":1}]},{"client_msg_id":"39e3028e-390a-4a92-a9d5-4f0202a4aeb6","type":"message","text":"FWIW, `fld` already works with Unitful","user":"UB197FRCL","ts":"1609463218.470800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XosKO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"FWIW, "},{"type":"text","text":"fld","style":{"code":true}},{"type":"text","text":" already works with Unitful"}]}]}],"thread_ts":"1609452533.450200","parent_user_id":"UCUALSTV3","reactions":[{"name":"thankyou","users":["UCUALSTV3"],"count":1}]},{"client_msg_id":"11b77b55-e212-4a7c-9148-49bc97254db2","type":"message","text":"Yes, i should add: don't make a `MyStruct` if you don't need to, and don't write new functions if it already exists :slightly_smiling_face: . The best code is the one you don't have to write","user":"U012XER8K4M","ts":"1609463310.471000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Y=db2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, i should add: don't make a "},{"type":"text","text":"MyStruct","style":{"code":true}},{"type":"text","text":" if you don't need to, and don't write new functions if it already exists "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":" . The best code is the one you don't have to write"}]}]}],"thread_ts":"1609452533.450200","parent_user_id":"UCUALSTV3"},{"client_msg_id":"026fe034-e05a-46ed-b5c8-0c9b583afe1b","type":"message","text":"didn't even know `fld` was a thing.. awsome thanks guys!","user":"UCUALSTV3","ts":"1609526528.486300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9pjH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"didn't even know "},{"type":"text","text":"fld","style":{"code":true}},{"type":"text","text":" was a thing.. awsome thanks guys!"}]}]}],"thread_ts":"1609452533.450200","parent_user_id":"UCUALSTV3"}]