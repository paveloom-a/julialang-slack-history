[{"client_msg_id":"83f10d9a-7651-4cdd-aa17-77e32ec1c146","type":"message","text":"Whats the scope of a variable declared inside a `@generated` function? I’ve used something similar to this minimal example to cache the results of a more complicated calculation:\n```@generated function f(i::Int)\n    cache = [cos(idx) for idx in 1:10]\n    :($cache[i])\nend```\nIt works and is much faster than redoing the calculation. But in which scope does the `cache`  actually live?","user":"U01BYANF42K","ts":"1615452823.322700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d4k","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Whats the scope of a variable declared inside a "},{"type":"text","text":"@generated","style":{"code":true}},{"type":"text","text":" function? I’ve used something similar to this minimal example to cache the results of a more complicated calculation:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@generated function f(i::Int)\n    cache = [cos(idx) for idx in 1:10]\n    :($cache[i])\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"It works and is much faster than redoing the calculation. But in which scope does the "},{"type":"text","text":"cache","style":{"code":true}},{"type":"text","text":"  actually live?"}]}]}],"thread_ts":"1615452823.322700","reply_count":13,"reply_users_count":4,"latest_reply":"1615456171.325300","reply_users":["B01J9QZ4SP8","UM30MT6RF","U01BYANF42K","U7HAYKY9X"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1615452825.322800","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1615452823.322700","parent_user_id":"U01BYANF42K"},{"client_msg_id":"6eb1d3fd-19f5-4647-8940-c3a21868f838","type":"message","text":"`cache` is spliced directly into the AST, so there's not really a scope as such outside the body generating the expression. It's more like literal values such as `3` or `\"foobar\"`.","user":"UM30MT6RF","ts":"1615452956.323100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nb5g","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"cache","style":{"code":true}},{"type":"text","text":" is spliced directly into the AST, so there's not really a scope as such outside the body generating the expression. It's more like literal values such as "},{"type":"text","text":"3","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"\"foobar\"","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1615452823.322700","parent_user_id":"U01BYANF42K"},{"client_msg_id":"5836e538-a55d-40bd-b748-ae215807421d","type":"message","text":"so the compiler would see the function as\n```function f(i::Int)\n    [0.540, -0.41,...][i]\nend```\nHowever, this does not allocate on function call. So the compiler can somehow optimize away this array literal?","user":"U01BYANF42K","ts":"1615453577.323300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9yEx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so the compiler would see the function as\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function f(i::Int)\n    [0.540, -0.41,...][i]\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"However, this does not allocate on function call. So the compiler can somehow optimize away this array literal?"}]}]}],"thread_ts":"1615452823.322700","parent_user_id":"U01BYANF42K"},{"client_msg_id":"c7f0076e-7efb-4a2c-81a2-62d268fcb659","type":"message","text":"Yes, it can do that.","user":"U7HAYKY9X","ts":"1615453794.323500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jv6Mf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, it can do that."}]}]}],"thread_ts":"1615452823.322700","parent_user_id":"U01BYANF42K"},{"client_msg_id":"614980d7-52f7-4d6a-94c8-e1c673a87fc3","type":"message","text":"Hm if i define a function with an array literal like this it does allocate… so the AST seems to be a bit different. Is it possible to get the Expr object created by the generated function?","user":"U01BYANF42K","ts":"1615454064.323700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2d/a9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hm if i define a function with an array literal like this it does allocate… so the AST seems to be a bit different. Is it possible to get the Expr object created by the generated function?"}]}]}],"thread_ts":"1615452823.322700","parent_user_id":"U01BYANF42K"},{"client_msg_id":"071d7c47-e42f-4133-9706-15e26fd3bdd4","type":"message","text":"No, the array is allocated inside the generated function, so the allocation only happens once, when the generated function is compiled","user":"UM30MT6RF","ts":"1615454523.323900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"a4l5a","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No, the array is allocated inside the generated function, so the allocation only happens once, when the generated function is compiled"}]}]}],"thread_ts":"1615452823.322700","parent_user_id":"U01BYANF42K"},{"client_msg_id":"c0d31565-942a-4425-959a-539a7e44bdff","type":"message","text":"&gt; Is it possible to get the Expr object created by the generated function?\nYou can ask for the lowered code with `@code_lowered`","user":"UM30MT6RF","ts":"1615454589.324100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uwW","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"Is it possible to get the Expr object created by the generated function?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nYou can ask for the lowered code with "},{"type":"text","text":"@code_lowered","style":{"code":true}}]}]}],"thread_ts":"1615452823.322700","parent_user_id":"U01BYANF42K"},{"client_msg_id":"9cee1034-ffc1-47f8-b44b-b53a34609db8","type":"message","text":"You can use `which(f, Tuple{Int}).generator.gen(typeof(f), Int)` to retrieve the actual expression, but that is very much relying on the internal implementation details of generated functions","user":"UM30MT6RF","ts":"1615454947.324300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JlJs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can use "},{"type":"text","text":"which(f, Tuple{Int}).generator.gen(typeof(f), Int)","style":{"code":true}},{"type":"text","text":" to retrieve the actual expression, but that is very much relying on the internal implementation details of generated functions"}]}]}],"thread_ts":"1615452823.322700","parent_user_id":"U01BYANF42K"},{"client_msg_id":"f33e1880-399c-457b-8784-c6386a063485","type":"message","text":"Okay thanks already for the great answers, it is always nice to understand why the code is is working :smile:\n\nThis is a bit offtopic now but i’ve looked at the functions\n```@generated function f(i)\n    cache = collect(1:3)\n    :($cache[i])\nend\n\nfunction g(i)\n    ([1,2,3])[i]\nend\n\n@btime f(1) #  2 ns with 0 allocation\n@btime g(1) # 25 ns with 1 allocation```\nWhy can’t the compiler allocate the array during compilation for `g` as with `f`? The way I’ve thought about this is that a generated function will just spit out some source code for a function definition which will be JIT compiled like every other function.","user":"U01BYANF42K","ts":"1615455611.324500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JyPNl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Okay thanks already for the great answers, it is always nice to understand why the code is is working "},{"type":"emoji","name":"smile"},{"type":"text","text":"\n\nThis is a bit offtopic now but i’ve looked at the functions\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@generated function f(i)\n    cache = collect(1:3)\n    :($cache[i])\nend\n\nfunction g(i)\n    ([1,2,3])[i]\nend\n\n@btime f(1) #  2 ns with 0 allocation\n@btime g(1) # 25 ns with 1 allocation"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Why can’t the compiler allocate the array during compilation for "},{"type":"text","text":"g","style":{"code":true}},{"type":"text","text":" as with "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":"? The way I’ve thought about this is that a generated function will just spit out some source code for a function definition which will be JIT compiled like every other function."}]}]}],"thread_ts":"1615452823.322700","parent_user_id":"U01BYANF42K"},{"client_msg_id":"5da803ef-57e9-41dc-bd84-35c54fe0d354","type":"message","text":"```julia&gt; which(f, Tuple{Int}).generator.gen(typeof(f), Int)\nquote\n    #= REPL[3]:1 =#\n    ([1, 2, 3])[i]\nend```\nis the same while the lowered code\n```%1 = Base.getindex([1, 2, 3], i)\nreturn %1```\nvs\n```%1 = Base.vect(1, 2, 3)\n%2 = Base.getindex(%1, i)\nreturn %2```\nis different…","user":"U01BYANF42K","ts":"1615455784.324700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s+S","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> which(f, Tuple{Int}).generator.gen(typeof(f), Int)\nquote\n    #= REPL[3]:1 =#\n    ([1, 2, 3])[i]\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"is the same while the lowered code\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"%1 = Base.getindex([1, 2, 3], i)\nreturn %1"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"vs\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"%1 = Base.vect(1, 2, 3)\n%2 = Base.getindex(%1, i)\nreturn %2"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"is different…"}]}]}],"thread_ts":"1615452823.322700","parent_user_id":"U01BYANF42K"},{"client_msg_id":"fecc3c8c-f39c-454d-a7c5-8984bd36a772","type":"message","text":"Yes, but `g` is actually materializing an array in the function body. The comparable thing to `f` would be something like:\n```julia&gt; @eval function g(i)\n           $([1,2,3])[i]\n       end\ng (generic function with 1 method)\n\njulia&gt; @allocated g(1)\n0```","user":"UM30MT6RF","ts":"1615455789.324900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2Ac","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, but "},{"type":"text","text":"g","style":{"code":true}},{"type":"text","text":" is actually materializing an array in the function body. The comparable thing to "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" would be something like:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @eval function g(i)\n           $([1,2,3])[i]\n       end\ng (generic function with 1 method)\n\njulia> @allocated g(1)\n0"}]}]}],"thread_ts":"1615452823.322700","parent_user_id":"U01BYANF42K"},{"client_msg_id":"c2242398-a90f-490b-8af1-dde3ba5ac90b","type":"message","text":"The way it is shown in the REPL is a bit misleading here, but `:([1, 2, 3][i]) != :($[1, 2, 3][i])`","user":"UM30MT6RF","ts":"1615455885.325100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KRRAm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The way it is shown in the REPL is a bit misleading here, but "},{"type":"text","text":":([1, 2, 3][i]) != :($[1, 2, 3][i])","style":{"code":true}}]}]}],"thread_ts":"1615452823.322700","parent_user_id":"U01BYANF42K"},{"client_msg_id":"7f3543f1-d3e9-48b6-ab2a-e0bd6044005d","type":"message","text":"Okay makes sense. Thanks a lot for the insights! :)","user":"U01BYANF42K","ts":"1615456171.325300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"boqsn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Okay makes sense. Thanks a lot for the insights! :)"}]}]}],"thread_ts":"1615452823.322700","parent_user_id":"U01BYANF42K"}]