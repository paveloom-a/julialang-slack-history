[{"client_msg_id":"ec5154ab-7f1c-4d7c-b877-2e1d45b1e007","type":"message","text":"Hi there - very basic Julia modules question, so apologies to bother you with it here - but googling this yields a ton of old threads on stack exchange with either deprecated information or dead links to parts of the Julia docs that have apparently been removed/deleted. So I'm posting it here in the hopes that someone can help me out.\n\nLet's suppose I have some file in this kind of directory structure that I'd like to run:\n```super_folder/sub_folder/subsub_folder/subsubsub_folder/my_file.jl```\nand I'd like to use functions from a custom module within that file, where the `.jl` file for the module itself is stored in a higher up directory, relative to my original `my_file.jl`\nfor instance,\n```super_folder/ModuleStuff.jl```\nHow do I specify the `include()` statement for the module, at the top of `my_file.jl`\n\nBefore, when `my_file.jl` wasn't too \"deep\", relative to `ModuleStuff.jl` 's location, I was using statements like\n```include(\"../ModuleStuff.jl\")```\nto account for `my_file.jl`  being a few folders deeper in the file hierarchy than `ModuleStuff` , but unfortunately the `.` notation only works in these include statements for at maximum *two* levels of hierarchy. With the current structure I laid out above^, you'd have to use four dots (`include(\"..../ModuleStuff.jl\")`) to get into the folder with `ModuleStuff.jl` and that doesn't work apparently.\n\nI assume the answer has something to do with pushing `ModuleStuff.jl` to my `LOAD_PATH` variable, but unfortunately I can't find any recent information on the best way to do that, and whether that's even the best solution for my problem. There are a ton of answers online that suggest to statements like\n```push!( LOAD_PATH, \"/path_to_module\" )```\nbut it's unclear to me _where_ exactly to execute that code. Is that supposed to be at the top of `my_file.jl`? Or do I just have to run it once in some instance of the REPL and my LOAD_PATH variable will now permanently have the paths to my custom modules in it?","user":"U01LQUWMHEH","ts":"1618080053.488000","team":"T68168MUP","edited":{"user":"U01LQUWMHEH","ts":"1618080566.000000"},"blocks":[{"type":"rich_text","block_id":"t4y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi there - very basic Julia modules question, so apologies to bother you with it here - but googling this yields a ton of old threads on stack exchange with either deprecated information or dead links to parts of the Julia docs that have apparently been removed/deleted. So I'm posting it here in the hopes that someone can help me out.\n\nLet's suppose I have some file in this kind of directory structure that I'd like to run:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"super_folder/sub_folder/subsub_folder/subsubsub_folder/my_file.jl"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nand I'd like to use functions from a custom module within that file, where the "},{"type":"text","text":".jl","style":{"code":true}},{"type":"text","text":" file for the module itself is stored in a higher up directory, relative to my original "},{"type":"text","text":"my_file.jl","style":{"code":true}},{"type":"text","text":"\nfor instance,\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"super_folder/ModuleStuff.jl"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nHow do I specify the "},{"type":"text","text":"include()","style":{"code":true}},{"type":"text","text":" statement for the module, at the top of "},{"type":"text","text":"my_file.jl","style":{"code":true}},{"type":"text","text":"\n\nBefore, when "},{"type":"text","text":"my_file.jl","style":{"code":true}},{"type":"text","text":" wasn't too \"deep\", relative to "},{"type":"text","text":"ModuleStuff.jl","style":{"code":true}},{"type":"text","text":" 's location, I was using statements like\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"include(\"../ModuleStuff.jl\")"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"to account for "},{"type":"text","text":"my_file.jl","style":{"code":true}},{"type":"text","text":"  being a few folders deeper in the file hierarchy than "},{"type":"text","text":"ModuleStuff","style":{"code":true}},{"type":"text","text":" , but unfortunately the "},{"type":"text","text":".","style":{"code":true}},{"type":"text","text":" notation only works in these include statements for at maximum "},{"type":"text","text":"two","style":{"bold":true}},{"type":"text","text":" levels of hierarchy. With the current structure I laid out above^, you'd have to use four dots ("},{"type":"text","text":"include(\"..../ModuleStuff.jl\")","style":{"code":true}},{"type":"text","text":") to get into the folder with "},{"type":"text","text":"ModuleStuff.jl","style":{"code":true}},{"type":"text","text":" and that doesn't work apparently.\n\nI assume the answer has something to do with pushing "},{"type":"text","text":"ModuleStuff.jl","style":{"code":true}},{"type":"text","text":" to my "},{"type":"text","text":"LOAD_PATH","style":{"code":true}},{"type":"text","text":" variable, but unfortunately I can't find any recent information on the best way to do that, and whether that's even the best solution for my problem. There are a ton of answers online that suggest to statements like\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"push!( LOAD_PATH, \"/path_to_module\" )"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"but it's unclear to me "},{"type":"text","text":"where","style":{"italic":true}},{"type":"text","text":" exactly to execute that code. Is that supposed to be at the top of "},{"type":"text","text":"my_file.jl","style":{"code":true}},{"type":"text","text":"? Or do I just have to run it once in some instance of the REPL and my LOAD_PATH variable will now permanently have the paths to my custom modules in it?"}]}]}],"thread_ts":"1618080053.488000","reply_count":5,"reply_users_count":2,"latest_reply":"1618167718.035200","reply_users":["USU9FRPEU","U01LQUWMHEH"],"is_locked":false,"subscribed":false},{"client_msg_id":"d3c3a19a-22ff-4202-99de-c174bea28f7d","type":"message","text":"Use `dirname` :  <https://docs.julialang.org/en/v1/base/file/#Base.Filesystem.dirname>","user":"USU9FRPEU","ts":"1618142236.018000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dSJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Use "},{"type":"text","text":"dirname","style":{"code":true}},{"type":"text","text":" :  "},{"type":"link","url":"https://docs.julialang.org/en/v1/base/file/#Base.Filesystem.dirname"}]}]}],"thread_ts":"1618080053.488000","parent_user_id":"U01LQUWMHEH"},{"client_msg_id":"320cfdcb-3808-450a-af35-ffd55fca5b4d","type":"message","text":"`include(\"../../../../ModuleStuff.jl\")` that should also work, but is not OS agnostic.","user":"USU9FRPEU","ts":"1618142297.018200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zSz+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"include(\"../../../../ModuleStuff.jl\")","style":{"code":true}},{"type":"text","text":" that should also work, but is not OS agnostic."}]}]}],"thread_ts":"1618080053.488000","parent_user_id":"U01LQUWMHEH"},{"client_msg_id":"364e5b7f-1c05-40e5-ae29-580f0738bd0e","type":"message","text":"You may also be interested in <https://docs.julialang.org/en/v1/base/file/#Base.Filesystem.joinpath>","user":"USU9FRPEU","ts":"1618142336.018400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"T7Ej","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You may also be interested in "},{"type":"link","url":"https://docs.julialang.org/en/v1/base/file/#Base.Filesystem.joinpath"}]}]}],"thread_ts":"1618080053.488000","parent_user_id":"U01LQUWMHEH"},{"client_msg_id":"53f4d9ee-9371-4df2-bebc-4033c57b81e2","type":"message","text":"You could mess with `LOAD_PATH` , but that's not really the canonical way to do things. It would probably be best to add a Project.toml, declare dependencies between the modules, add them to your environment's package registry for each module.\n\n<https://pkgdocs.julialang.org/v1/toml-files/>","user":"USU9FRPEU","ts":"1618142711.018600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Udj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You could mess with "},{"type":"text","text":"LOAD_PATH","style":{"code":true}},{"type":"text","text":" , but that's not really the canonical way to do things. It would probably be best to add a Project.toml, declare dependencies between the modules, add them to your environment's package registry for each module.\n\n"},{"type":"link","url":"https://pkgdocs.julialang.org/v1/toml-files/"}]}]}],"thread_ts":"1618080053.488000","parent_user_id":"U01LQUWMHEH"},{"client_msg_id":"4e5053b4-361f-4527-8f17-bbe00851650e","type":"message","text":"Thanks!!! I really appreciate it :) I ended up just pushing them all to my load path with absolute path names, but I'll look into this for next time, this seems way cleaner","user":"U01LQUWMHEH","ts":"1618167718.035200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KCH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks!!! I really appreciate it :) I ended up just pushing them all to my load path with absolute path names, but I'll look into this for next time, this seems way cleaner"}]}]}],"thread_ts":"1618080053.488000","parent_user_id":"U01LQUWMHEH"}]