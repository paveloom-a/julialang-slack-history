[{"client_msg_id":"092dc3e7-39c3-4b5b-82a5-217928ab6fc7","type":"message","text":"Hi there!\nI am trying to convert `Int` to `BitVector`. So far, I was able to do through `digits!`, but I still have to convert a `Vector{Bool}` to a `BitVector`. Which is probably suboptimal.\n```BitVector(digits(Bool, 10; base = 2))```\nAny clue on how to make it better ? (maybe I missed something in the doc)","user":"U01FR2HFJ7M","ts":"1608969653.041700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QW3J2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi there!\nI am trying to convert "},{"type":"text","text":"Int","style":{"code":true}},{"type":"text","text":" to "},{"type":"text","text":"BitVector","style":{"code":true}},{"type":"text","text":". So far, I was able to do through "},{"type":"text","text":"digits!","style":{"code":true}},{"type":"text","text":", but I still have to convert a "},{"type":"text","text":"Vector{Bool}","style":{"code":true}},{"type":"text","text":" to a "},{"type":"text","text":"BitVector","style":{"code":true}},{"type":"text","text":". Which is probably suboptimal.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"BitVector(digits(Bool, 10; base = 2))"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Any clue on how to make it better ? (maybe I missed something in the doc)"}]}]}],"thread_ts":"1608969653.041700","reply_count":7,"reply_users_count":3,"latest_reply":"1609120370.137000","reply_users":["UH8A351DJ","U01FR2HFJ7M","U7HAYKY9X"],"subscribed":false},{"client_msg_id":"0ffe5aa0-137f-476d-b338-1bb9ce059361","type":"message","text":"is Vector{Bool} slower than BitVector in your later application?","user":"UH8A351DJ","ts":"1608969775.041800","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1608969788.000000"},"blocks":[{"type":"rich_text","block_id":"WBsD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is Vector{Bool} slower than BitVector in your later application?"}]}]}],"thread_ts":"1608969653.041700","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"272da57a-fd14-491a-85b7-8b3a438a1acc","type":"message","text":"Hmmm, that is a good question. I will use as input in another package, so I should probably do some tests. They use BitVector in some examples in that package, that is so far the main reason. I can settle on later anyway.","user":"U01FR2HFJ7M","ts":"1608971670.042100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ab2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmmm, that is a good question. I will use as input in another package, so I should probably do some tests. They use BitVector in some examples in that package, that is so far the main reason. I can settle on later anyway."}]}]}],"thread_ts":"1608969653.041700","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"5ee2ab3e-3911-4e76-b9a3-933a15939f37","type":"message","text":"thanks :slightly_smiling_face:","user":"U01FR2HFJ7M","ts":"1608971676.042300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Jmw=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thanks "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1608969653.041700","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"4deb2485-2a0c-4002-8530-3de2e44ba5e8","type":"message","text":"the main appealing seems to be storage efficiency but not also has trade offs:\n&gt;  Note\n&gt; Due to its packed storage format, concurrent access to the elements of a BitArray where at least one of them is a write is not thread safe.","user":"UH8A351DJ","ts":"1608971818.042500","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1608971824.000000"},"blocks":[{"type":"rich_text","block_id":"uum","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the main appealing seems to be storage efficiency but not also has trade offs:\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":" Note\nDue to its packed storage format, concurrent access to the elements of a BitArray where at least one of them is a write is not thread safe."}]}]}],"thread_ts":"1608969653.041700","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"ceb7bf82-e795-46f1-a8e5-5b5988b88b68","type":"message","text":"Hello and happy Christmas! To most efficiently convert and Int to a bitvector, you could do this:\n```julia&gt; function as_bitvector(n::Int)\n           v = BitVector(undef, 8*sizeof(n))\n           @inbounds v.chunks[1] = reinterpret(UInt, n)\n           v\n       end```\nI think that is maximally efficient, but it relies on the mamory layout of the bitvector, which is not a stable API. You could also do this: `BitVector([isodd(n &gt;&gt; ((i-1) &amp; 63)) for i in 1:8*sizeof(Int)])` . That is probably fast enough in most use cases","user":"U7HAYKY9X","ts":"1608981353.042800","team":"T68168MUP","edited":{"user":"U7HAYKY9X","ts":"1608981377.000000"},"blocks":[{"type":"rich_text","block_id":"3LP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hello and happy Christmas! To most efficiently convert and Int to a bitvector, you could do this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function as_bitvector(n::Int)\n           v = BitVector(undef, 8*sizeof(n))\n           @inbounds v.chunks[1] = reinterpret(UInt, n)\n           v\n       end"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I think that is maximally efficient, but it relies on the mamory layout of the bitvector, which is not a stable API. You could also do this: "},{"type":"text","text":"BitVector([isodd(n >> ((i-1) & 63)) for i in 1:8*sizeof(Int)])","style":{"code":true}},{"type":"text","text":" . That is probably fast enough in most use cases"}]}]}],"thread_ts":"1608969653.041700","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"3edd8e49-23a1-4284-8c7c-2b03d84d5bcc","type":"message","text":"Here's one which is both stable API and very fast:\n```function as_bitvector(n::Int)\n           v = falses(8*sizeof(n))\n           i = 0\n           @inbounds while !iszero(n)\n               tz = trailing_zeros(n)\n               i += (tz + 1)\n               v[i] = true\n               n &gt;&gt;&gt;= (tz + 1)\n           end\n           v\n       end```","user":"U7HAYKY9X","ts":"1608982084.043100","team":"T68168MUP","edited":{"user":"U7HAYKY9X","ts":"1608982245.000000"},"blocks":[{"type":"rich_text","block_id":"kxZir","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Here's one which is both stable API and very fast:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function as_bitvector(n::Int)\n           v = falses(8*sizeof(n))\n           i = 0\n           @inbounds while !iszero(n)\n               tz = trailing_zeros(n)\n               i += (tz + 1)\n               v[i] = true\n               n >>>= (tz + 1)\n           end\n           v\n       end"}]}]}],"thread_ts":"1608969653.041700","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"dc221265-922c-4b59-8748-0f9ff18049d0","type":"message","text":"thank you <@U7HAYKY9X>","user":"U01FR2HFJ7M","ts":"1609120370.137000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/Fr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thank you "},{"type":"user","user_id":"U7HAYKY9X"}]}]}],"thread_ts":"1608969653.041700","parent_user_id":"U01FR2HFJ7M"}]