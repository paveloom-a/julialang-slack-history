[{"client_msg_id":"be55650d-145f-4c2e-80a8-e80d1e85edf8","type":"message","text":"I have a general question about Julia's multithreading; specifically about defaults. Should it be easier to limit the number of threads used by a Julia program in common cases?\nBackground: We're developing a code that's intended to be run on a cluster, with many jobs running simultaneously on each node. To make the best use of the resources, it's important that every Julia job uses only a single thread, and that there is one job per CPU core on each node. To achieve this, we tried using the `julia -t1` option, but that's not enough. In our code, it was also necessary to do\n```using LinearAlgebra\nusing FFTW\nBLAS.set_num_threads(1)\nFFTW.set_num_threads(1)```\nIt took us a while to figure out that these libraries will default to using multiple threads. I'm wondering if it would make a sense if there were a convention for libraries to \"automatically\" pick up the `-t1`  option to Julia? The motivation is, obviously, to avoid simultaneous Julia processes from slowing each other down.","user":"U01AJEDK7V1","ts":"1613425502.400100","team":"T68168MUP","edited":{"user":"U01AJEDK7V1","ts":"1613426159.000000"},"blocks":[{"type":"rich_text","block_id":"0fpoP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have a general question about Julia's multithreading; specifically about defaults. Should it be easier to limit the number of threads used by a Julia program in common cases?\nBackground: We're developing a code that's intended to be run on a cluster, with many jobs running simultaneously on each node. To make the best use of the resources, it's important that every Julia job uses only a single thread, and that there is one job per CPU core on each node. To achieve this, we tried using the "},{"type":"text","text":"julia -t1","style":{"code":true}},{"type":"text","text":" option, but that's not enough. In our code, it was also necessary to do\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using LinearAlgebra\nusing FFTW\nBLAS.set_num_threads(1)\nFFTW.set_num_threads(1)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"It took us a while to figure out that these libraries will default to using multiple threads. I'm wondering if it would make a sense if there were a convention for libraries to \"automatically\" pick up the "},{"type":"text","text":"-t1","style":{"code":true}},{"type":"text","text":"  option to Julia? The motivation is, obviously, to avoid simultaneous Julia processes from slowing each other down."}]}]}],"thread_ts":"1613425502.400100","reply_count":8,"reply_users_count":4,"latest_reply":"1613426012.402200","reply_users":["B01J9QZ4SP8","U0179G7FG4F","UH8A351DJ","U01AJEDK7V1"],"subscribed":false,"reactions":[{"name":"thumbsup_all","users":["U0179G7FG4F"],"count":1}]},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1613425504.400200","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1613425502.400100","parent_user_id":"U01AJEDK7V1"},{"client_msg_id":"353d21c9-de91-4caf-b401-ce54babf3528","type":"message","text":"Yeah. This should be easier.","user":"U0179G7FG4F","ts":"1613425677.400500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qYt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah. This should be easier."}]}]}],"thread_ts":"1613425502.400100","parent_user_id":"U01AJEDK7V1"},{"client_msg_id":"14448466-b329-43b6-a8ff-df43e33687ee","type":"message","text":"julia cannot limit what external process does. This is the same for everybody. maybe the OS can put a limit on the user-basis","user":"UH8A351DJ","ts":"1613425698.400700","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1613425723.000000"},"blocks":[{"type":"rich_text","block_id":"B1J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"julia cannot limit what external process does. This is the same for everybody. maybe the OS can put a limit on the user-basis"}]}]}],"thread_ts":"1613425502.400100","parent_user_id":"U01AJEDK7V1"},{"client_msg_id":"20d8cd82-cb38-40e7-b5b0-1cf658d330f3","type":"message","text":"the library convention also doesn't make sense because each external library have no way to check what other external library is doing. (can BLAS know how much CPU FFTW is using?)","user":"UH8A351DJ","ts":"1613425781.401000","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1613425805.000000"},"blocks":[{"type":"rich_text","block_id":"vHU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the library convention also doesn't make sense because each external library have no way to check what other external library is doing. (can BLAS know how much CPU FFTW is using?)"}]}]}],"thread_ts":"1613425502.400100","parent_user_id":"U01AJEDK7V1"},{"client_msg_id":"b6914ebd-9aa6-48cf-a931-606e079ac13f","type":"message","text":"The concrete suggestion is that when I pass `-t1` to Julia, it would set a global variable in `Base`, and LinearAlgebra and FFTW could use that as the default when initializing their `set_num_threads()` option.","user":"U01AJEDK7V1","ts":"1613425862.401300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Y8m","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The concrete suggestion is that when I pass `-t1` to Julia, it would set a global variable in `Base`, and LinearAlgebra and FFTW could use that as the default when initializing their `set_num_threads()` option."}]}]}],"thread_ts":"1613425502.400100","parent_user_id":"U01AJEDK7V1"},{"client_msg_id":"8ace8f90-fdf9-4deb-8fb8-587d82aca80f","type":"message","text":"Julia 1.6 will have, for example, `-t auto` . If that is selected, then LinearAlgebra and FFTW could initialize to using a thread for each available core.  This seems the easiest way to give the user more control in the common cases.","user":"U01AJEDK7V1","ts":"1613425938.401500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nWv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Julia 1.6 will have, for example, "},{"type":"text","text":"-t auto","style":{"code":true}},{"type":"text","text":" . If that is selected, then LinearAlgebra and FFTW could initialize to using a thread for each available core.  This seems the easiest way to give the user more control in the common cases."}]}]}],"thread_ts":"1613425502.400100","parent_user_id":"U01AJEDK7V1"},{"client_msg_id":"8d50ef0f-eb17-4545-8519-a28af990ffd7","type":"message","text":"that helps but still in no means can put an upper bound on how much CPU your `julia script.jl` use even if all wrapper libraries try their best","user":"UH8A351DJ","ts":"1613425939.401700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"e5=Qa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that helps but still in no means can put an upper bound on how much CPU your "},{"type":"text","text":"julia script.jl","style":{"code":true}},{"type":"text","text":" use even if all wrapper libraries try their best"}]}]}],"thread_ts":"1613425502.400100","parent_user_id":"U01AJEDK7V1"},{"client_msg_id":"1515329c-dbac-408a-bd45-370c7309fd2f","type":"message","text":"Right","user":"U01AJEDK7V1","ts":"1613426012.402200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CjxR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Right"}]}]}],"thread_ts":"1613425502.400100","parent_user_id":"U01AJEDK7V1"}]