[{"client_msg_id":"b70a43c3-e973-45f8-94f2-8a3b38b0d81b","type":"message","text":"I have a use-case where I have lists of predefined \"special\" points: usually, these points are ordinary vectors of floats, but occasionally, they depend on some external variables via some simple algebraic expression, e.g. `[0.0, a*b/c, 0.5]` (with external variables `a`, `b` and `c`). I'm wondering how best to represent such \"sometimes-fixed-sometimes-variable\" points in Julia?\n\nNaively, I was thinking of something like\n```struct VariablePoint\n    cnst::Vector{Float64}\n    expr::Expr\n    is_cnst_or_expr::Bool\nend```\nand then defining an overload on `VariablePoint` for input parameters that goes either to `cnst` or `eval(expr)` depending on `is_cnst_or_expr`. That feels wrong though because it needs `eval`.","user":"UCE6XE42Z","ts":"1612894078.392400","team":"T68168MUP","edited":{"user":"UCE6XE42Z","ts":"1612894133.000000"},"blocks":[{"type":"rich_text","block_id":"Bhxy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have a use-case where I have lists of predefined \"special\" points: usually, these points are ordinary vectors of floats, but occasionally, they depend on some external variables via some simple algebraic expression, e.g. "},{"type":"text","text":"[0.0, a*b/c, 0.5]","style":{"code":true}},{"type":"text","text":" (with external variables "},{"type":"text","text":"a","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"b","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"c","style":{"code":true}},{"type":"text","text":"). I'm wondering how best to represent such \"sometimes-fixed-sometimes-variable\" points in Julia?\n\nNaively, I was thinking of something like\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct VariablePoint\n    cnst::Vector{Float64}\n    expr::Expr\n    is_cnst_or_expr::Bool\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"and then defining an overload on "},{"type":"text","text":"VariablePoint","style":{"code":true}},{"type":"text","text":" for input parameters that goes either to "},{"type":"text","text":"cnst","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"eval(expr)","style":{"code":true}},{"type":"text","text":" depending on "},{"type":"text","text":"is_cnst_or_expr","style":{"code":true}},{"type":"text","text":". That feels wrong though because it needs "},{"type":"text","text":"eval","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1612894078.392400","reply_count":6,"reply_users_count":4,"latest_reply":"1612904294.414500","reply_users":["B01J9QZ4SP8","U017LQ3A59U","UCE6XE42Z","UDD5Z7FLZ"],"subscribed":false,"reactions":[{"name":"bridge","users":["UCE6XE42Z"],"count":1}]},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1612894079.392500","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1612894078.392400","parent_user_id":"UCE6XE42Z"},{"type":"message","subtype":"bot_message","text":"Success, it has been cross posted <https://discourse.julialang.org/t/54949| to Discourse>. Keep and eye out on Discourse for responses and please add an answer there once you are satisfied with the solution so others can benefit as well. Happy debugging!","ts":"1612894538.393300","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1612894078.392400","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"afb950dc-a25f-4bf6-bd55-2c384c9b2afe","type":"message","text":"You can define\n```struct VariablePoint\n    getters::Vector{Function}\nend```\nwith a constructor that wrap constants in constant functions\n```VariablePoint(args) = VariablePoint(functionify.(args))\nfunctionify(f::Function) = f\nfunctionify(x) = (() -&gt; x)```\nIt probably need some more thoughts about the number of argument of the functions and how to pass them around, but it seems reasonnable to me to have all variable things as functions","user":"U017LQ3A59U","ts":"1612895445.394800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ATl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can define\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct VariablePoint\n    getters::Vector{Function}\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"with a constructor that wrap constants in constant functions\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"VariablePoint(args) = VariablePoint(functionify.(args))\nfunctionify(f::Function) = f\nfunctionify(x) = (() -> x)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"It probably need some more thoughts about the number of argument of the functions and how to pass them around, but it seems reasonnable to me to have all variable things as functions"}]}]}],"thread_ts":"1612894078.392400","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"2ec0d68f-9b5f-496e-bc11-177fccdc6664","type":"message","text":"Hmm, yeah, that's an interesting option..!","user":"UCE6XE42Z","ts":"1612895790.395000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DKXH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmm, yeah, that's an interesting option..!"}]}]}],"thread_ts":"1612894078.392400","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"0c6bf228-2e95-4d56-9a07-07b9736def31","type":"message","text":"I am not convinced a big union isn't the way to go. The level of indirection would already cause trouble with specialising, and a big union can be neater.","user":"UDD5Z7FLZ","ts":"1612895990.395200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sg9LT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am not convinced a big union isn't the way to go. The level of indirection would already cause trouble with specialising, and a big union can be neater."}]}]}],"thread_ts":"1612894078.392400","parent_user_id":"UCE6XE42Z"},{"client_msg_id":"b7148bcb-0aa1-46f6-a8dd-f2007158784b","type":"message","text":"This is also a good point, yeah.","user":"UCE6XE42Z","ts":"1612904294.414500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5JvF5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is also a good point, yeah."}]}]}],"thread_ts":"1612894078.392400","parent_user_id":"UCE6XE42Z"}]