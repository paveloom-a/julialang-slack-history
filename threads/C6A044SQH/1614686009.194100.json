[{"client_msg_id":"0276eb34-afe3-41e3-946c-ba7cca413789","type":"message","text":"Is there a style guide for setting up a workspace? I.e. I have a bunch of files with various functions separated logically, and I want to combine the various files. Right now I have one file with a module, that just includes each in sequence, however in each file there is no module specified. I saw <https://discourse.julialang.org/t/best-way-to-structure-julia-code/26591/17> but that's only one piece of it. A c++ project I'd expect `include/`, `src/` and `tst/` for instance, with the same subfolder structure. Is there a julian style folder structure? I'd like to fix good habits in the jump from single file to multiple file julia work.\n\nShould each file have a module? Is there a standard folder structure? Do you place unit test files alongside the source file or in the test directory?\n\nI'd like to avoid reinventing the wheel on this, as I am sure there's some terrible choices I might make accidentally. It seems like placing them wherever, and `include(\"XXX.jl\"); using .XXX` is the approach, where `XXX` is a file local module. Or is this a naive approach? This isn't for a big widely shared project, just personal, but I don't want to get into bad habits.","user":"U01CLS9TSQ1","ts":"1614686009.194100","team":"T68168MUP","attachments":[{"service_name":"JuliaLang","title":"Best way to structure Julia code","title_link":"https://discourse.julialang.org/t/best-way-to-structure-julia-code/26591/17","text":"Thanks. I misinterpreted your initial post as meaning that this option would no longer be available. Apart from the vscode issue, this does work indeed.","fallback":"JuliaLang: Best way to structure Julia code","thumb_url":"https://aws1.discourse-cdn.com/business5/uploads/julialang/original/2X/1/12829a7ba92b924d4ce81099cbf99785bee9b405.png","ts":1564578031,"from_url":"https://discourse.julialang.org/t/best-way-to-structure-julia-code/26591/17","thumb_width":408,"thumb_height":263,"service_icon":"https://aws1.discourse-cdn.com/business5/uploads/julialang/optimized/2X/6/6ca888e296f59ca2a599807f7d5edd489e3d1829_2_180x180.png","id":1,"original_url":"https://discourse.julialang.org/t/best-way-to-structure-julia-code/26591/17"}],"blocks":[{"type":"rich_text","block_id":"/Pbcq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a style guide for setting up a workspace? I.e. I have a bunch of files with various functions separated logically, and I want to combine the various files. Right now I have one file with a module, that just includes each in sequence, however in each file there is no module specified. I saw "},{"type":"link","url":"https://discourse.julialang.org/t/best-way-to-structure-julia-code/26591/17"},{"type":"text","text":" but that's only one piece of it. A c++ project I'd expect "},{"type":"text","text":"include/","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"src/","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"tst/","style":{"code":true}},{"type":"text","text":" for instance, with the same subfolder structure. Is there a julian style folder structure? I'd like to fix good habits in the jump from single file to multiple file julia work.\n\nShould each file have a module? Is there a standard folder structure? Do you place unit test files alongside the source file or in the test directory?\n\nI'd like to avoid reinventing the wheel on this, as I am sure there's some terrible choices I might make accidentally. It seems like placing them wherever, and "},{"type":"text","text":"include(\"XXX.jl\"); using .XXX","style":{"code":true}},{"type":"text","text":" is the approach, where "},{"type":"text","text":"XXX","style":{"code":true}},{"type":"text","text":" is a file local module. Or is this a naive approach? This isn't for a big widely shared project, just personal, but I don't want to get into bad habits."}]}]}],"thread_ts":"1614686009.194100","reply_count":7,"reply_users_count":2,"latest_reply":"1614759377.249500","reply_users":["B01J9QZ4SP8","UH24GRBLL"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1614686011.194200","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1614686009.194100","parent_user_id":"U01CLS9TSQ1"},{"client_msg_id":"cf0f3d33-5c5d-4843-b861-d476277d6561","type":"message","text":"<https://juliahub.com/ui/Packages/PkgTemplates/IGiQL/0.7.15>","user":"UH24GRBLL","ts":"1614759041.248500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"H1lX","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://juliahub.com/ui/Packages/PkgTemplates/IGiQL/0.7.15"}]}]}],"thread_ts":"1614686009.194100","parent_user_id":"U01CLS9TSQ1"},{"client_msg_id":"bff0b646-9c3c-4f7b-9d2c-90276a99526b","type":"message","text":"the general \"philosophy\" is to have one top level module for your package (e.g. Package A with A/src/A.jl, containing `module A ... end`), where you include various subfiles","user":"UH24GRBLL","ts":"1614759130.248700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GOLV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the general \"philosophy\" is to have one top level module for your package (e.g. Package A with A/src/A.jl, containing "},{"type":"text","text":"module A ... end","style":{"code":true}},{"type":"text","text":"), where you include various subfiles"}]}]}],"thread_ts":"1614686009.194100","parent_user_id":"U01CLS9TSQ1"},{"client_msg_id":"f2bf15e8-0f15-48ab-88ad-e4fa804998e7","type":"message","text":"those subfiles are usually structure by what interacts with each other/shares a concept","user":"UH24GRBLL","ts":"1614759153.248900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x1i/o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"those subfiles are usually structure by what interacts with each other/shares a concept"}]}]}],"thread_ts":"1614686009.194100","parent_user_id":"U01CLS9TSQ1"},{"client_msg_id":"9e6f2c03-24b7-4ae7-88c3-ffc840b708a2","type":"message","text":"it's not necessary for each file to have a new module, no","user":"UH24GRBLL","ts":"1614759204.249100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xPt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's not necessary for each file to have a new module, no"}]}]}],"thread_ts":"1614686009.194100","parent_user_id":"U01CLS9TSQ1"},{"client_msg_id":"fa836b34-b993-4ef0-b104-f0ba2b709750","type":"message","text":"unit tests are placed in `A/test/runtests.jl`, which is what gets run when you do `]test A`. You can of course split your unit tests into logical units/files again","user":"UH24GRBLL","ts":"1614759254.249300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Fsge4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"unit tests are placed in "},{"type":"text","text":"A/test/runtests.jl","style":{"code":true}},{"type":"text","text":", which is what gets run when you do "},{"type":"text","text":"]test A","style":{"code":true}},{"type":"text","text":". You can of course split your unit tests into logical units/files again"}]}]}],"thread_ts":"1614686009.194100","parent_user_id":"U01CLS9TSQ1"},{"client_msg_id":"258653ed-ae3d-4130-81d8-b8e05a30854e","type":"message","text":"also <https://julialang.github.io/Pkg.jl/v1/creating-packages/#Generating-files-for-a-package>","user":"UH24GRBLL","ts":"1614759377.249500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xJXh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"also "},{"type":"link","url":"https://julialang.github.io/Pkg.jl/v1/creating-packages/#Generating-files-for-a-package"}]}]}],"thread_ts":"1614686009.194100","parent_user_id":"U01CLS9TSQ1"}]