[{"client_msg_id":"5ee3016a-5459-48c1-b1b2-40ed412606f5","type":"message","text":"Another question, I see const are not implemented for local variables (<https://github.com/JuliaLang/julia/issues/5148>). What do I do, if I want to assign number to letter, and perhaps look up that number using dictionary for fetching it quickly. Do I need to put this as global variable, so function is not computing Dict(..) hashes each time it is called? Can I have it somehow inside function for clean code but ask Julia not to recompute it, as it's a constant used only inside that function?","user":"UE0Q72VV0","ts":"1609325064.346300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Lct","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Another question, I see const are not implemented for local variables ("},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/5148"},{"type":"text","text":"). What do I do, if I want to assign number to letter, and perhaps look up that number using dictionary for fetching it quickly. Do I need to put this as global variable, so function is not computing Dict(..) hashes each time it is called? Can I have it somehow inside function for clean code but ask Julia not to recompute it, as it's a constant used only inside that function?"}]}]}],"thread_ts":"1609325064.346300","reply_count":4,"reply_users_count":2,"latest_reply":"1609325548.348000","reply_users":["U7HAYKY9X","UE0Q72VV0"],"subscribed":false},{"client_msg_id":"2dee4689-b8aa-4ccd-bce4-85089e679d44","type":"message","text":"You can't define constants in functions. It sounds like the best approach is to make a global const Dict (or perhaps an array), then have a function that looks up in that dict.","user":"U7HAYKY9X","ts":"1609325238.347000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OSDM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can't define constants in functions. It sounds like the best approach is to make a global const Dict (or perhaps an array), then have a function that looks up in that dict."}]}]}],"thread_ts":"1609325064.346300","parent_user_id":"UE0Q72VV0"},{"client_msg_id":"bc882fbf-cad3-4f13-869e-13e546f3352c","type":"message","text":"If you show exactly what you want, I can help :)","user":"U7HAYKY9X","ts":"1609325257.347200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sXQ7q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you show exactly what you want, I can help :)"}]}]}],"thread_ts":"1609325064.346300","parent_user_id":"UE0Q72VV0"},{"client_msg_id":"7484337b-00b5-4a58-9392-afc4727155cb","type":"message","text":"```function symbol_number(symbol)\n    if symbol == 'A'\n        return 0\n    elseif symbol == 'T'\n        return 1\n    elseif symbol == 'G'\n        return 2\n    elseif symbol == 'C'\n        return 3\n    end\n    return nothing\nend```\nI changed my mind, as ugly as it is, might be faster than Dict :slightly_smiling_face: But thanks! :slightly_smiling_face:","user":"UE0Q72VV0","ts":"1609325400.347400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/R7B","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function symbol_number(symbol)\n    if symbol == 'A'\n        return 0\n    elseif symbol == 'T'\n        return 1\n    elseif symbol == 'G'\n        return 2\n    elseif symbol == 'C'\n        return 3\n    end\n    return nothing\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I changed my mind, as ugly as it is, might be faster than Dict "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":" But thanks! "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1609325064.346300","parent_user_id":"UE0Q72VV0"},{"client_msg_id":"03defdfc-6ad7-4ac3-9870-7ffbeda1decb","type":"message","text":"What BioJulia does here is to create a const `Vector{UInt8}` . It then reinterprets the incoming string as raw bytes, and does a lookup in the vector. Invalid bytes are represented by a sentinel value in the array.","user":"U7HAYKY9X","ts":"1609325548.348000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mNn2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What BioJulia does here is to create a const "},{"type":"text","text":"Vector{UInt8}","style":{"code":true}},{"type":"text","text":" . It then reinterprets the incoming string as raw bytes, and does a lookup in the vector. Invalid bytes are represented by a sentinel value in the array."}]}]}],"thread_ts":"1609325064.346300","parent_user_id":"UE0Q72VV0"}]