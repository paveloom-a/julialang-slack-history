[{"client_msg_id":"59e2079b-c6ee-492e-8f2f-e8ae186dbda5","type":"message","text":"Is there a good guide anywhere for how exactly the `where T`-type syntax works (I’m particularly interested at the moment in the context of defining functions on parametric types, including abstract ones) and when/how I need to use it? I feel like my mental model for this is weak and I tend to just try things combinatorially until the code seems to be doing what I want. :laughing: I’ve read through the “Types” section of the manual but haven’t managed to find it there. I found a couple examples of its use in the “Methods” (e.g. <https://docs.julialang.org/en/v1/manual/methods/#Parametrically-constrained-Varargs-methods|here>) section but also no explanation of how it actually works.","user":"UN8HY6PS9","ts":"1617985348.398300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h94nk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a good guide anywhere for how exactly the "},{"type":"text","text":"where T","style":{"code":true}},{"type":"text","text":"-type syntax works (I’m particularly interested at the moment in the context of defining functions on parametric types, including abstract ones) and when/how I need to use it? I feel like my mental model for this is weak and I tend to just try things combinatorially until the code seems to be doing what I want. "},{"type":"emoji","name":"laughing"},{"type":"text","text":" I’ve read through the “Types” section of the manual but haven’t managed to find it there. I found a couple examples of its use in the “Methods” (e.g. "},{"type":"link","url":"https://docs.julialang.org/en/v1/manual/methods/#Parametrically-constrained-Varargs-methods","text":"here"},{"type":"text","text":") section but also no explanation of how it actually works."}]}]}],"thread_ts":"1617985348.398300","reply_count":4,"reply_users_count":2,"latest_reply":"1617985596.399400","reply_users":["UDB26738Q","UN8HY6PS9"],"is_locked":false,"subscribed":false},{"client_msg_id":"98b55928-69dc-4f96-aaed-795b60f867e9","type":"message","text":"I think this is a nice explanation: <https://www.youtube.com/watch?v=Z2LtJUe1q8c>  think of types as the set of values they can hold, `where` lets you iterate over different sets","user":"UDB26738Q","ts":"1617985466.398700","team":"T68168MUP","attachments":[{"service_name":"YouTube","service_url":"https://www.youtube.com/","title":"JuliaCon 2017 | The State of the Type System | Jeff Bezanson","title_link":"https://www.youtube.com/watch?v=Z2LtJUe1q8c","author_name":"The Julia Programming Language","author_link":"https://www.youtube.com/user/JuliaLanguage","thumb_url":"https://i.ytimg.com/vi/Z2LtJUe1q8c/hqdefault.jpg","thumb_width":480,"thumb_height":360,"fallback":"YouTube Video: JuliaCon 2017 | The State of the Type System | Jeff Bezanson","video_html":"<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/Z2LtJUe1q8c?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","video_html_width":400,"video_html_height":225,"from_url":"https://www.youtube.com/watch?v=Z2LtJUe1q8c","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png","id":1,"original_url":"https://www.youtube.com/watch?v=Z2LtJUe1q8c"}],"blocks":[{"type":"rich_text","block_id":"3PDT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think this is a nice explanation: "},{"type":"link","url":"https://www.youtube.com/watch?v=Z2LtJUe1q8c"},{"type":"text","text":"  think of types as the set of values they can hold, "},{"type":"text","text":"where","style":{"code":true}},{"type":"text","text":" lets you iterate over different sets"}]}]}],"thread_ts":"1617985348.398300","parent_user_id":"UN8HY6PS9"},{"client_msg_id":"a03bd715-e6c0-4927-a867-672da9d908f4","type":"message","text":"`Vector{T} where {T&lt;:Real}` is the set of all vectors whose parameter is  a subtype of `Real`","user":"UDB26738Q","ts":"1617985519.399000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SnaG=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Vector{T} where {T<:Real}","style":{"code":true}},{"type":"text","text":" is the set of all vectors whose parameter is  a subtype of "},{"type":"text","text":"Real","style":{"code":true}}]}]}],"thread_ts":"1617985348.398300","parent_user_id":"UN8HY6PS9"},{"client_msg_id":"5efda7d0-9ba7-4dcc-acf9-9ec94c176af9","type":"message","text":"if it’s just something like `where T` is that equivalent to `where {T&lt;:Any}` then?","user":"UN8HY6PS9","ts":"1617985579.399200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qWhzT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if it’s just something like "},{"type":"text","text":"where T","style":{"code":true}},{"type":"text","text":" is that equivalent to "},{"type":"text","text":"where {T<:Any}","style":{"code":true}},{"type":"text","text":" then?"}]}]}],"thread_ts":"1617985348.398300","parent_user_id":"UN8HY6PS9"},{"client_msg_id":"4e15aefb-72c8-4a00-86c0-b5ae962dfad1","type":"message","text":"(also, thanks! will be watching that talk over lunch :slightly_smiling_face: )","user":"UN8HY6PS9","ts":"1617985596.399400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bZpJg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(also, thanks! will be watching that talk over lunch "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":" )"}]}]}],"thread_ts":"1617985348.398300","parent_user_id":"UN8HY6PS9"}]