[{"client_msg_id":"41e044e0-c358-4fef-a4ef-9c4f8b504ead","type":"message","text":"Hi guys an optimization question. I have some custom struct that stores blockmatrices, somewhat like this:\n```struct BlockMatrix{T, T11 &lt;: AbstractMatrix{T}, T12 &lt;: AbstractMatrix{T}, T21 &lt;: AbstractMatrix{T}, T22 &lt;: AbstractMatrix{T}} &lt;: AbstractMatrix{T}\n  A11::T11\n  A12::T12\n  A21::T21\n  A22::T22\n\n  # inner constructor checks for consistency among dimensions\n  function BlockMatrix(A11::AbstractMatrix{T}, A12::AbstractMatrix{T}, A21::AbstractMatrix{T}, A22::AbstractMatrix{T}) where T\n    size(A11, 1) == size(A12, 1) || throw(DimensionMismatch(\"first dimension of A11 and A12 do not match. Expected $(size(A11, 1)), got $(size(A12, 1))\"))\n    size(A11, 2) == size(A21, 2) || throw(DimensionMismatch(\"second dimension of A11 and A12 do not match. Expected $(size(A11, 2)), got $(size(A21, 2))\"))\n    size(A22, 1) == size(A21, 1) || throw(DimensionMismatch(\"first dimension of A22 and A21 do not match. Expected $(size(A22, 1)), got $(size(A21, 1))\"))\n    size(A22, 2) == size(A12, 2) || throw(DimensionMismatch(\"second dimension of A22 and A12 do not match. Expected $(size(A22, 2)), got $(size(A12, 2))\"))\n    new{T, typeof(A11), typeof(A12), typeof(A21), typeof(A22)}(A11, A12, A21, A22)\n  end\nend```\nI have written some functions alongside it, among them `mul!(C, A, B, αr, β)`  as suggested in the documentation:\n```function mul!(C::AbstractMatrix, A::AbstractMatrix, B::BlockMatrix, α::Number, β::Number)\n  size(A,2) == size(B,1) ||  throw(DimensionMismatch(\"First dimension of B does not match second dimension of A. Expected $(size(A, 2)), got $(size(B, 1))\"))\n  size(C) == (size(A,1), size(B,2)) ||  throw(DimensionMismatch(\"Dimensions of C don't match up with A and B.\"))\n  m1, n1 = size(B.A11);\n  mul!(@view(C[:, 1:n1]), @view(A[:, 1:m1]), B.A11, α, β)\n  mul!(@view(C[:, 1:n1]), @view(A[:, m1+1:end]), B.A21, α, 1.)\n  mul!(@view(C[:, n1+1:end]), @view(A[:, 1:m1]), B.A12, α, β)\n  mul!(@view(C[:, n1+1:end]), @view(A[:, m1+1:end]), B.A22, α, 1.)\n  return C\nend```\nIn my code, which performs very poorly, running code coverage reaveals that most of the allocations happen with the multiplication. However, `@code_warntype`  indicates that it is fine, as everything in there is blue. I had assumed it had to do with the `AbstractMatrix` types but apparently it isn't. Does anyone here have ideas. Does this code look fine to you? Thanks!","user":"U01L0RJC6FM","ts":"1615334616.257100","team":"T68168MUP","edited":{"user":"U01L0RJC6FM","ts":"1615334707.000000"},"blocks":[{"type":"rich_text","block_id":"a=4F","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi guys an optimization question. I have some custom struct that stores blockmatrices, somewhat like this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct BlockMatrix{T, T11 <: AbstractMatrix{T}, T12 <: AbstractMatrix{T}, T21 <: AbstractMatrix{T}, T22 <: AbstractMatrix{T}} <: AbstractMatrix{T}\n  A11::T11\n  A12::T12\n  A21::T21\n  A22::T22\n\n  # inner constructor checks for consistency among dimensions\n  function BlockMatrix(A11::AbstractMatrix{T}, A12::AbstractMatrix{T}, A21::AbstractMatrix{T}, A22::AbstractMatrix{T}) where T\n    size(A11, 1) == size(A12, 1) || throw(DimensionMismatch(\"first dimension of A11 and A12 do not match. Expected $(size(A11, 1)), got $(size(A12, 1))\"))\n    size(A11, 2) == size(A21, 2) || throw(DimensionMismatch(\"second dimension of A11 and A12 do not match. Expected $(size(A11, 2)), got $(size(A21, 2))\"))\n    size(A22, 1) == size(A21, 1) || throw(DimensionMismatch(\"first dimension of A22 and A21 do not match. Expected $(size(A22, 1)), got $(size(A21, 1))\"))\n    size(A22, 2) == size(A12, 2) || throw(DimensionMismatch(\"second dimension of A22 and A12 do not match. Expected $(size(A22, 2)), got $(size(A12, 2))\"))\n    new{T, typeof(A11), typeof(A12), typeof(A21), typeof(A22)}(A11, A12, A21, A22)\n  end\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nI have written some functions alongside it, among them "},{"type":"text","text":"mul!(C, A, B, αr, β)","style":{"code":true}},{"type":"text","text":"  as suggested in the documentation:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function mul!(C::AbstractMatrix, A::AbstractMatrix, B::BlockMatrix, α::Number, β::Number)\n  size(A,2) == size(B,1) ||  throw(DimensionMismatch(\"First dimension of B does not match second dimension of A. Expected $(size(A, 2)), got $(size(B, 1))\"))\n  size(C) == (size(A,1), size(B,2)) ||  throw(DimensionMismatch(\"Dimensions of C don't match up with A and B.\"))\n  m1, n1 = size(B.A11);\n  mul!(@view(C[:, 1:n1]), @view(A[:, 1:m1]), B.A11, α, β)\n  mul!(@view(C[:, 1:n1]), @view(A[:, m1+1:end]), B.A21, α, 1.)\n  mul!(@view(C[:, n1+1:end]), @view(A[:, 1:m1]), B.A12, α, β)\n  mul!(@view(C[:, n1+1:end]), @view(A[:, m1+1:end]), B.A22, α, 1.)\n  return C\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"In my code, which performs very poorly, running code coverage reaveals that most of the allocations happen with the multiplication. However, "},{"type":"text","text":"@code_warntype","style":{"code":true}},{"type":"text","text":"  indicates that it is fine, as everything in there is blue. I had assumed it had to do with the "},{"type":"text","text":"AbstractMatrix","style":{"code":true}},{"type":"text","text":" types but apparently it isn't. Does anyone here have ideas. Does this code look fine to you? Thanks!"}]}]}],"thread_ts":"1615334616.257100","reply_count":1,"reply_users_count":1,"latest_reply":"1615334618.257200","reply_users":["B01J9QZ4SP8"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1615334618.257200","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1615334616.257100","parent_user_id":"U01L0RJC6FM"}]