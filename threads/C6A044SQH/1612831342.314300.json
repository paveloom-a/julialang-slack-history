[{"client_msg_id":"c64845af-163f-4ea2-9ca8-c0a54d9c24ac","type":"message","text":"Hey guys, I need to extract the base name of a struct and get it as a string (or symbol, or whatever).\n\nThing is that when called from another package, I get the module too. I would like to find a way to strip it.\n\nExample:\n\n```julia&gt; module A\n       struct B end\n       end\nMain.A\n\njulia&gt; string(A.B)\n\"Main.A.B\"\n\n# How to get \"B\"? (without resorting to string manipulation, in my real implementation I'm passing a type to JSON and I need the type to be the concrete name, without modules prefixed)```","user":"U014F58NBDY","ts":"1612831342.314300","team":"T68168MUP","edited":{"user":"U014F58NBDY","ts":"1612831482.000000"},"blocks":[{"type":"rich_text","block_id":"=CXeM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hey guys, I need to extract the base name of a struct and get it as a string (or symbol, or whatever).\n\nThing is that when called from another package, I get the module too. I would like to find a way to strip it.\n\nExample:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> module A\n       struct B end\n       end\nMain.A\n\njulia> string(A.B)\n\"Main.A.B\"\n\n# How to get \"B\"? (without resorting to string manipulation, in my real implementation I'm passing a type to JSON and I need the type to be the concrete name, without modules prefixed)"}]}]}],"thread_ts":"1612831342.314300","reply_count":16,"reply_users_count":3,"latest_reply":"1612832110.322200","reply_users":["B01J9QZ4SP8","UH8A351DJ","U014F58NBDY"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1612831343.314400","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1612831342.314300","parent_user_id":"U014F58NBDY"},{"client_msg_id":"5f66b481-0dc5-49e1-a192-c2bef684d582","type":"message","text":"why do you need to pass the type info as a string/symbol?","user":"UH8A351DJ","ts":"1612831499.315700","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1612831503.000000"},"blocks":[{"type":"rich_text","block_id":"WATW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"why do you need to pass the type info as a string/symbol?"}]}]}],"thread_ts":"1612831342.314300","parent_user_id":"U014F58NBDY"},{"client_msg_id":"169317d2-02e0-465e-b3b1-806b78d1b7a2","type":"message","text":"it's better not to hack a meta data in your json and just use a storage format that can remember type (more or less), such as Arrow or JLD2","user":"UH8A351DJ","ts":"1612831549.316700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4YS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's better not to hack a meta data in your json and just use a storage format that can remember type (more or less), such as Arrow or JLD2"}]}]}],"thread_ts":"1612831342.314300","parent_user_id":"U014F58NBDY"},{"client_msg_id":"74af29e7-5ea0-4a8f-a34e-4ca17b2dacd0","type":"message","text":"I'm building an event processing package, that can serialize events (for many things, potentially passing over the network, etc).\n\nThe actual function where it poses a problem is here:\n```function lower(e::E) where {E &lt;: Event}\n    \n    data = Dict()\n    \n    for prop in propertynames(e)\n        data[prop] = getfield(e, prop)\n    end \n\n    Dict(:event=&gt;E, :data=&gt;data)\nend```","user":"U014F58NBDY","ts":"1612831600.317400","team":"T68168MUP","edited":{"user":"U014F58NBDY","ts":"1612831611.000000"},"blocks":[{"type":"rich_text","block_id":"ycnf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm building an event processing package, that can serialize events (for many things, potentially passing over the network, etc).\n\nThe actual function where it poses a problem is here:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function lower(e::E) where {E <: Event}\n    \n    data = Dict()\n    \n    for prop in propertynames(e)\n        data[prop] = getfield(e, prop)\n    end \n\n    Dict(:event=>E, :data=>data)\nend"}]}]}],"thread_ts":"1612831342.314300","parent_user_id":"U014F58NBDY"},{"client_msg_id":"7aac5470-318f-4dc3-8974-ea134a45eb5f","type":"message","text":"here the problem is that I get something like\n```{\\\"event\\\":\\\"MyOtherPackage.SomeModule.ActualEventName\\\",\\\"data\\\":{}}```","user":"U014F58NBDY","ts":"1612831694.318400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"z5jb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"here the problem is that I get something like\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"{\\\"event\\\":\\\"MyOtherPackage.SomeModule.ActualEventName\\\",\\\"data\\\":{}}"}]}]}],"thread_ts":"1612831342.314300","parent_user_id":"U014F58NBDY"},{"client_msg_id":"b3d096ec-2e0d-40c1-bf24-6c3c75992319","type":"message","text":"and the receiving end doesn't speak Julia?","user":"UH8A351DJ","ts":"1612831701.318600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"U=X","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and the receiving end doesn't speak Julia?"}]}]}],"thread_ts":"1612831342.314300","parent_user_id":"U014F58NBDY"},{"client_msg_id":"3a8de2d0-b203-48b3-b2d1-c07182976653","type":"message","text":"it may or it may not.","user":"U014F58NBDY","ts":"1612831734.318800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Khmn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it may or it may not."}]}]}],"thread_ts":"1612831342.314300","parent_user_id":"U014F58NBDY"},{"client_msg_id":"188bc93a-5bce-4bbc-a6c1-5bbc168a7643","type":"message","text":"in my use case (the reason I'm building the package), it's not, the client is written in C++","user":"U014F58NBDY","ts":"1612831762.319000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"F/T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in my use case (the reason I'm building the package), it's not, the client is written in C++"}]}]}],"thread_ts":"1612831342.314300","parent_user_id":"U014F58NBDY"},{"client_msg_id":"04eb8254-d654-49c1-84ba-0ca409491229","type":"message","text":"So I prefer to use the type names directly instead of resorting to type IDs, etc","user":"U014F58NBDY","ts":"1612831794.319400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OwqT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So I prefer to use the type names directly instead of resorting to type IDs, etc"}]}]}],"thread_ts":"1612831342.314300","parent_user_id":"U014F58NBDY"},{"client_msg_id":"4dda5afa-dcab-47d8-ad51-eb998870887f","type":"message","text":"then maybe you want to use MsgPack on both sides?","user":"UH8A351DJ","ts":"1612831817.319800","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1612831820.000000"},"blocks":[{"type":"rich_text","block_id":"=56","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"then maybe you want to use MsgPack on both sides?"}]}]}],"thread_ts":"1612831342.314300","parent_user_id":"U014F58NBDY"},{"client_msg_id":"47b74b51-8aff-47f7-8500-7150b29c8a9c","type":"message","text":"instead of re-inventing a network protocol using JSON strings that does serialization of data","user":"UH8A351DJ","ts":"1612831846.320100","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1612831883.000000"},"blocks":[{"type":"rich_text","block_id":"L9GR5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"instead of re-inventing a network protocol using JSON strings that does serialization of data"}]}]}],"thread_ts":"1612831342.314300","parent_user_id":"U014F58NBDY"},{"client_msg_id":"b145a043-4492-4bca-9883-d5e6fb834a4e","type":"message","text":"I mean I'm not reinventing the wheel, I'm just using JSON. I don't need the increased performance of MsgPack, and that's the only advantage it provides (from the readme)","user":"U014F58NBDY","ts":"1612831984.321000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wAnd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean I'm not reinventing the wheel, I'm just using JSON. I don't need the increased performance of MsgPack, and that's the only advantage it provides (from the readme)"}]}]}],"thread_ts":"1612831342.314300","parent_user_id":"U014F58NBDY"},{"client_msg_id":"64b0e2cf-1a72-4f7e-b995-9f2a23784977","type":"message","text":"ok, you're looking for `nameof` function","user":"UH8A351DJ","ts":"1612832036.321400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rA9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ok, you're looking for "},{"type":"text","text":"nameof","style":{"code":true}},{"type":"text","text":" function"}]}]}],"thread_ts":"1612831342.314300","parent_user_id":"U014F58NBDY"},{"client_msg_id":"824e44d2-f67b-450a-9723-249bb42618c9","type":"message","text":"(I didn't know this one when the conversation started","user":"UH8A351DJ","ts":"1612832049.321600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xwh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(I didn't know this one when the conversation started"}]}]}],"thread_ts":"1612831342.314300","parent_user_id":"U014F58NBDY"},{"client_msg_id":"c8a36204-81e2-40fd-a256-f16cc78081fc","type":"message","text":"Ah! There you go, thanks! I was finding some similar functions on the discourse (`getname` for a starter), but it seems like they don't exist anymore. I hadn't seen nameof though, and that's exactly it","user":"U014F58NBDY","ts":"1612832107.322000","team":"T68168MUP","edited":{"user":"U014F58NBDY","ts":"1612832130.000000"},"blocks":[{"type":"rich_text","block_id":"TMWI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah! There you go, thanks! I was finding some similar functions on the discourse ("},{"type":"text","text":"getname","style":{"code":true}},{"type":"text","text":" for a starter), but it seems like they don't exist anymore. I hadn't seen nameof though, and that's exactly it"}]}]}],"thread_ts":"1612831342.314300","parent_user_id":"U014F58NBDY"},{"client_msg_id":"89a37080-0c13-4eb5-b16d-5130232403ef","type":"message","text":"thank you very much!","user":"U014F58NBDY","ts":"1612832110.322200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ysd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thank you very much!"}]}]}],"thread_ts":"1612831342.314300","parent_user_id":"U014F58NBDY"}]