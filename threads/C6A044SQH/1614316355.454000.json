[{"client_msg_id":"ae821bbd-ab80-4a5a-bbf8-5a55806ae686","type":"message","text":"Has anyone ever hit a _practical_ limit as to the depth to which Julia/LLVM perform inlining of functions? I have posted a similar question on <https://discourse.julialang.org/t/what-is-the-maximum-inlining-depth-in-practice/55929|Discourse> but to no avail, so I wanted to try my luck here.","user":"UTKCH2WFL","ts":"1614316355.454000","team":"T68168MUP","attachments":[{"service_name":"JuliaLang","title":"What is the maximum inlining depth in practice?","title_link":"https://discourse.julialang.org/t/what-is-the-maximum-inlining-depth-in-practice/55929","text":"Out of professional curiosity: What is the maximum depth for inlining function calls in Julia in practice? My programming intuition says that there must exist a practical limit regarding how deeply nested functions may be before they are not inlined anymore. Is this a fixed (possibly configurable) number? Or does it depend on some compiler heuristics? And if yes, what are the limits in practice that people have experienced? I am asking since Julia favors many small functions and weâ€™ve tried to...","fallback":"JuliaLang: What is the maximum inlining depth in practice?","thumb_url":"https://aws1.discourse-cdn.com/business5/uploads/julialang/original/2X/1/12829a7ba92b924d4ce81099cbf99785bee9b405.png","fields":[{"title":"Reading time","value":"1 mins :clock2:","short":true},{"title":"Likes","value":"1 :heart:","short":true}],"ts":1614170418,"from_url":"https://discourse.julialang.org/t/what-is-the-maximum-inlining-depth-in-practice/55929","thumb_width":408,"thumb_height":263,"service_icon":"https://aws1.discourse-cdn.com/business5/uploads/julialang/optimized/2X/6/6ca888e296f59ca2a599807f7d5edd489e3d1829_2_180x180.png","id":1,"original_url":"https://discourse.julialang.org/t/what-is-the-maximum-inlining-depth-in-practice/55929"}],"blocks":[{"type":"rich_text","block_id":"bVed7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Has anyone ever hit a "},{"type":"text","text":"practical","style":{"italic":true}},{"type":"text","text":" limit as to the depth to which Julia/LLVM perform inlining of functions? I have posted a similar question on "},{"type":"link","url":"https://discourse.julialang.org/t/what-is-the-maximum-inlining-depth-in-practice/55929","text":"Discourse"},{"type":"text","text":" but to no avail, so I wanted to try my luck here."}]}]}],"thread_ts":"1614316355.454000","reply_count":11,"reply_users_count":3,"latest_reply":"1614324804.461300","reply_users":["B01J9QZ4SP8","U7HAYKY9X","UTKCH2WFL"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1614316357.454100","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1614316355.454000","parent_user_id":"UTKCH2WFL"},{"client_msg_id":"5d9a2050-fe63-4689-a890-2897b8481b1a","type":"message","text":"I haven't seen it. The call chains involving mapreduce in Base gets to about ten layers, I think that's the highest I've seen.\nBut I don't see why it couldn't keep doing it indefinitely. Why would it ever bottom out? If there's a stack overflow error in LLVM?","user":"U7HAYKY9X","ts":"1614320062.454400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DY9Zm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I haven't seen it. The call chains involving mapreduce in Base gets to about ten layers, I think that's the highest I've seen.\nBut I don't see why it couldn't keep doing it indefinitely. Why would it ever bottom out? If there's a stack overflow error in LLVM?"}]}]}],"thread_ts":"1614316355.454000","parent_user_id":"UTKCH2WFL"},{"client_msg_id":"625e2166-6b07-49e3-abec-5c28c24f545b","type":"message","text":"OK, but ten layers is already quite a number and it's good to know that the heuristics for inlining don't seem to have an artificial limit. Does the inlining even consider its depth? That is, is it an iterative procedure that reruns the inlining checks until nothing gets unlined anymore, starting from the lowest level (I assume)? Or does it work completely differently?","user":"UTKCH2WFL","ts":"1614323428.459400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"01y5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"OK, but ten layers is already quite a number and it's good to know that the heuristics for inlining don't seem to have an artificial limit. Does the inlining even consider its depth? That is, is it an iterative procedure that reruns the inlining checks until nothing gets unlined anymore, starting from the lowest level (I assume)? Or does it work completely differently?"}]}]}],"thread_ts":"1614316355.454000","parent_user_id":"UTKCH2WFL"},{"client_msg_id":"3bd68451-39d2-4cfe-b344-c11dd1f0fd92","type":"message","text":"Also, is there a document that explains how the inlining procedures work in Julia?","user":"UTKCH2WFL","ts":"1614323468.459600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"holu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, is there a document that explains how the inlining procedures work in Julia?"}]}]}],"thread_ts":"1614316355.454000","parent_user_id":"UTKCH2WFL"},{"client_msg_id":"39c9f218-a474-43ac-8686-21ef93a677c0","type":"message","text":"Thanks for your answer, by the way, this is already very good to know!","user":"UTKCH2WFL","ts":"1614323494.459800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eQa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks for your answer, by the way, this is already very good to know!"}]}]}],"thread_ts":"1614316355.454000","parent_user_id":"UTKCH2WFL"},{"client_msg_id":"0e43aeb3-9eec-4c59-9122-16e2310b424a","type":"message","text":"I don't know how it works in detail, sorry :/ But I would imagine it's recursive, such that any function only looks at the total size of its direct callers","user":"U7HAYKY9X","ts":"1614323805.460000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pego9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't know how it works in detail, sorry :/ But I would imagine it's recursive, such that any function only looks at the total size of its direct callers"}]}]}],"thread_ts":"1614316355.454000","parent_user_id":"UTKCH2WFL"},{"client_msg_id":"f4b59aaa-6c36-40ba-877b-7eed37ca3a40","type":"message","text":"`sum` is 13 layers deep, that definitely inlines","user":"U7HAYKY9X","ts":"1614324045.460200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8C=o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"sum","style":{"code":true}},{"type":"text","text":" is 13 layers deep, that definitely inlines"}]}]}],"thread_ts":"1614316355.454000","parent_user_id":"UTKCH2WFL"},{"client_msg_id":"39ddf237-27e3-4479-adcd-710932ab8058","type":"message","text":":flushed:","user":"UTKCH2WFL","ts":"1614324335.460400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RoKX","elements":[{"type":"rich_text_section","elements":[{"type":"emoji","name":"flushed"}]}]}],"thread_ts":"1614316355.454000","parent_user_id":"UTKCH2WFL"},{"client_msg_id":"b5279336-9152-4a7e-bf89-0f11a410bab0","type":"message","text":"~Hm, I tried to programatically generate nested functions. Turns out Julia/LLVM does give up at the 38th layer~\nEdit: Nevermind, that was a programming error. I works at least 65 layers deep, then I gave up","user":"U7HAYKY9X","ts":"1614324410.460600","team":"T68168MUP","edited":{"user":"U7HAYKY9X","ts":"1614324749.000000"},"blocks":[{"type":"rich_text","block_id":"x2Yz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hm, I tried to programatically generate nested functions. Turns out Julia/LLVM does give up at the 38th layer","style":{"strike":true}},{"type":"text","text":"\nEdit: Nevermind, that was a programming error. I works at least 65 layers deep, then I gave up"}]}]}],"thread_ts":"1614316355.454000","parent_user_id":"UTKCH2WFL"},{"client_msg_id":"11e46fb7-e772-4694-bd68-95f9e7d5920c","type":"message","text":"Hah! Good to know that there is at least no practical limit in terms of depth","user":"UTKCH2WFL","ts":"1614324794.461100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2Rhe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hah! Good to know that there is at least no practical limit in terms of depth"}]}]}],"thread_ts":"1614316355.454000","parent_user_id":"UTKCH2WFL"},{"client_msg_id":"471b19d6-0b63-40ec-90f8-393f1040314d","type":"message","text":"65 is crazy!","user":"UTKCH2WFL","ts":"1614324804.461300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PbXml","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"65 is crazy!"}]}]}],"thread_ts":"1614316355.454000","parent_user_id":"UTKCH2WFL"}]