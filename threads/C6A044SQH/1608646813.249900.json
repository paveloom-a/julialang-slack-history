[{"client_msg_id":"696f3fe7-7f4f-49f3-bc55-1c6dcadf9d0c","type":"message","text":"The `@which` and `@edit` macro are super nice to find and edit methods. Is there something similar for types, in particular structs? I.e. given a type, find out where it was created ? Related: is there a function which \"prints the definition of a struct\" (i.e. shows all members and their types) ?","user":"U012FH66MFW","ts":"1608646813.249900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BBo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The "},{"type":"text","text":"@which","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"@edit","style":{"code":true}},{"type":"text","text":" macro are super nice to find and edit methods. Is there something similar for types, in particular structs? I.e. given a type, find out where it was created ? Related: is there a function which \"prints the definition of a struct\" (i.e. shows all members and their types) ?"}]}]}],"thread_ts":"1608646813.249900","reply_count":15,"reply_users_count":4,"latest_reply":"1608656487.274400","reply_users":["U7THT3TM3","UDB26738Q","U012FH66MFW","U6QGE7S86"],"subscribed":false,"reactions":[{"name":"+1","users":["U7THT3TM3"],"count":1}]},{"client_msg_id":"5E9E3BE0-78A4-4354-A5E8-486FBB88F566","type":"message","text":"I would really like the \"given a type, find out where it was created\" feature","user":"U7THT3TM3","ts":"1608647036.250400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"q7YL0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I would really like the \"given a type, find out where it was created\" feature"}]}]}],"thread_ts":"1608646813.249900","parent_user_id":"U012FH66MFW","reactions":[{"name":"100","users":["U7HAYKY9X"],"count":1}]},{"client_msg_id":"89411f69-e39e-4e41-a92b-acddc4f46afb","type":"message","text":"if the type doesn't have a docstring, `?TypeName` should show it","user":"UDB26738Q","ts":"1608647073.250700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tqeqS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if the type doesn't have a docstring, "},{"type":"text","text":"?TypeName","style":{"code":true}},{"type":"text","text":" should show it"}]}]}],"thread_ts":"1608646813.249900","parent_user_id":"U012FH66MFW"},{"client_msg_id":"f69bd355-d237-4046-a883-f957c20d371a","type":"message","text":"submitted <https://github.com/JuliaLang/julia/issues/38966>","user":"U012FH66MFW","ts":"1608650591.256000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"a9S","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"submitted "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/38966"}]}]}],"thread_ts":"1608646813.249900","parent_user_id":"U012FH66MFW"},{"client_msg_id":"a6f75ba4-6992-4470-9475-260c5dd7ef77","type":"message","text":"thanks for the feedback. Good to know I didn't overlook something obvious :slightly_smiling_face:","user":"U012FH66MFW","ts":"1608650605.256200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Kl3IC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thanks for the feedback. Good to know I didn't overlook something obvious "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1608646813.249900","parent_user_id":"U012FH66MFW"},{"client_msg_id":"ff82d32a-00ef-42fc-ab53-89fbaf94c77e","type":"message","text":"I still also wonder if there is something that \"prints a description of a struct type\", as in, prints all the fields and their types. Surely deriving this information must be possible. It seems so obvious that I'd kinda expect that somebody wrote a function for doing this in some package or so :slightly_smiling_face:","user":"U012FH66MFW","ts":"1608650655.256400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/pzn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I still also wonder if there is something that \"prints a description of a struct type\", as in, prints all the fields and their types. Surely deriving this information must be possible. It seems so obvious that I'd kinda expect that somebody wrote a function for doing this in some package or so "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1608646813.249900","parent_user_id":"U012FH66MFW"},{"client_msg_id":"D4DF7AC7-4DA9-4D7C-9128-B3EBBCEAD8DB","type":"message","text":"That part is easy to write yourself","user":"U7THT3TM3","ts":"1608650805.257400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+4jt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That part is easy to write yourself"}]}]}],"thread_ts":"1608646813.249900","parent_user_id":"U012FH66MFW"},{"client_msg_id":"095B9316-C396-473F-9179-934373CB83F1","type":"message","text":"Just use `fieldnames` and `fieldtypes`","user":"U7THT3TM3","ts":"1608650814.257800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"b+I","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Just use "},{"type":"text","text":"fieldnames","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"fieldtypes","style":{"code":true}}]}]}],"thread_ts":"1608646813.249900","parent_user_id":"U012FH66MFW"},{"client_msg_id":"3C77DCCE-66F6-4DAC-833E-FA2BCDDF73E2","type":"message","text":"And loop","user":"U7THT3TM3","ts":"1608650819.258100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DgM=i","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And loop"}]}]}],"thread_ts":"1608646813.249900","parent_user_id":"U012FH66MFW"},{"client_msg_id":"FE8737DC-CF58-440C-A589-A67DCA8B3AE5","type":"message","text":"for n in 1:length(fieldnames(T))\nprint(fieldnames[i])\nprint(\"::\")\nprintln(fieldtypes[i])\nend","user":"U7THT3TM3","ts":"1608650874.259600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sxgD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"for n in 1:length(fieldnames(T))\nprint(fieldnames[i])\nprint(\"::\")\nprintln(fieldtypes[i])\nend"}]}]}],"thread_ts":"1608646813.249900","parent_user_id":"U012FH66MFW"},{"client_msg_id":"7E95D356-ED9A-4431-98A2-76BAD72B5DDE","type":"message","text":"Actually never mind it is so much easier!","user":"U7THT3TM3","ts":"1608651057.260500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dLTiD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Actually never mind it is so much easier!"}]}]}],"thread_ts":"1608646813.249900","parent_user_id":"U012FH66MFW"},{"client_msg_id":"AC0A2F9D-3668-40D4-B942-3DCC50847528","type":"message","text":"`dump(T)`","user":"U7THT3TM3","ts":"1608651069.260800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8QaD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"dump(T)","style":{"code":true}}]}]}],"thread_ts":"1608646813.249900","parent_user_id":"U012FH66MFW","reactions":[{"name":"point_up","users":["U67G3QRJM"],"count":1}]},{"client_msg_id":"F79ABA3E-D1DD-47F9-916D-030FBF6015F1","type":"message","text":"e.g\n\nstruct Foo\na\nb::Int\nc\nend\n\n","user":"U7THT3TM3","ts":"1608651085.261400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L=Ff","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"e.g\n"},{"type":"text","text":"\n"},{"type":"text","text":"struct Foo\na\nb::Int\nc\nend\n"},{"type":"text","text":"\n"}]}]}],"thread_ts":"1608646813.249900","parent_user_id":"U012FH66MFW"},{"client_msg_id":"117CA60A-A7AD-45A3-AE17-E85A00052E42","type":"message","text":"`dump(Foo)` will print all the field names and their types","user":"U7THT3TM3","ts":"1608651098.262000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j=8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"dump(Foo)","style":{"code":true}},{"type":"text","text":" will print all the field names and their types"}]}]}],"thread_ts":"1608646813.249900","parent_user_id":"U012FH66MFW"},{"client_msg_id":"b9e812d1-5f25-4fff-8b6b-66b71a756e67","type":"message","text":"awesome, that's what I was looking for!","user":"U012FH66MFW","ts":"1608651203.262300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mOB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"awesome, that's what I was looking for!"}]}]}],"thread_ts":"1608646813.249900","parent_user_id":"U012FH66MFW"},{"client_msg_id":"835e5d33-7902-49fd-b0a1-7961ba0c347d","type":"message","text":"Maybe not \"where it was created\" but `methodswith(Foo)` is useful as well.","user":"U6QGE7S86","ts":"1608656487.274400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zFTwU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe not \"where it was created\" but "},{"type":"text","text":"methodswith(Foo)","style":{"code":true}},{"type":"text","text":" is useful as well."}]}]}],"thread_ts":"1608646813.249900","parent_user_id":"U012FH66MFW"}]