[{"client_msg_id":"f38c647c-7272-46a7-9227-dfc7217b65b4","type":"message","text":"I'm pretty new to Julia and today I'm really struggling with multiplication. I'm noticing that there's a difference between scalars, 1-d arrays, and 2-d arrays when using the multiplication operator (very different from Matlab). I keep having issues with multiplying the wrong types of objects together even though it is a mathematically correct statement. For example, I want to do x^Ty, where x and y are column vectors with n elements, which I would think would be accomplished by x'*y, but Julia throws an error because x is Array{Float64,2} while y is Array{Float64,1} and suggests that I do element-wise multiplication instead. Is there a way to make y Array{Float64,2}? Any good resources to read so I can sort out my issue of multiplying the wrong objects and how to convert between Float64, Array{Float64,1}, and Array{Float64,2}? Coming from a Matlab background I don't care if I have a scalar, 1-d array with one element, or a 2-d array with one element because the multiplication operator works all the same, so keeping track of the object type is not something I'm used to doing.","user":"U01M3EUHL20","ts":"1614124992.246500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hZn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm pretty new to Julia and today I'm really struggling with multiplication. I'm noticing that there's a difference between scalars, 1-d arrays, and 2-d arrays when using the multiplication operator (very different from Matlab). I keep having issues with multiplying the wrong types of objects together even though it is a mathematically correct statement. For example, I want to do x^Ty, where x and y are column vectors with n elements, which I would think would be accomplished by x'*y, but Julia throws an error because x is Array{Float64,2} while y is Array{Float64,1} and suggests that I do element-wise multiplication instead. Is there a way to make y Array{Float64,2}? Any good resources to read so I can sort out my issue of multiplying the wrong objects and how to convert between Float64, Array{Float64,1}, and Array{Float64,2}? Coming from a Matlab background I don't care if I have a scalar, 1-d array with one element, or a 2-d array with one element because the multiplication operator works all the same, so keeping track of the object type is not something I'm used to doing."}]}]}],"thread_ts":"1614124992.246500","reply_count":7,"reply_users_count":5,"latest_reply":"1614126514.248000","reply_users":["B01J9QZ4SP8","U9MD78Z9N","UDB26738Q","UH8A351DJ","U01M3EUHL20"],"subscribed":false},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1614124993.246600","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1614124992.246500","parent_user_id":"U01M3EUHL20"},{"type":"message","text":"There is a really good talk on this called \"taking vector transpose seriously\" on youtube. I recommend watching that as it helped me, it also constrasted stuff with MatLab","user":"U9MD78Z9N","ts":"1614125066.246800","team":"T68168MUP","thread_ts":"1614124992.246500","parent_user_id":"U01M3EUHL20"},{"client_msg_id":"6d7b2d20-4b21-4206-b802-4fdaed046b40","type":"message","text":"can you please provide a concrete example of what you tried?\n```julia&gt; x = rand(3)\n3-element Vector{Float64}:\n 0.331899283068698\n 0.7316759668560349\n 0.8992248287925988\n\njulia&gt; y = rand(3)\n3-element Vector{Float64}:\n 0.042707054222515195\n 0.8882982299927427\n 0.7654895569839029\n\njulia&gt; x' * y\n1.3524681227862456```","user":"UDB26738Q","ts":"1614125110.247000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jrB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"can you please provide a concrete example of what you tried?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> x = rand(3)\n3-element Vector{Float64}:\n 0.331899283068698\n 0.7316759668560349\n 0.8992248287925988\n\njulia> y = rand(3)\n3-element Vector{Float64}:\n 0.042707054222515195\n 0.8882982299927427\n 0.7654895569839029\n\njulia> x' * y\n1.3524681227862456"}]}]}],"thread_ts":"1614124992.246500","parent_user_id":"U01M3EUHL20"},{"client_msg_id":"9bc37a7e-011e-4ee1-9ccc-07c7d09ef095","type":"message","text":"I think OP had something like this:\n```julia&gt; b = reshape(a, 3,1)\n3×1 Matrix{Float64}:\n 0.0957598823007022\n 0.3664695156484836\n 0.2167466247738168\n\njulia&gt; a\n3-element Vector{Float64}:\n 0.0957598823007022\n 0.3664695156484836\n 0.2167466247738168\n\njulia&gt; b' * a\n1-element Vector{Float64}:\n 0.19044896030872022```\nbut it still kinda works. You can make sure a vector is a vector (and not a Nx1 matrix by using `vec`):\n```julia&gt; vec(b)' * a\n0.19044896030872022```","user":"UH8A351DJ","ts":"1614125336.247200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BJ=1L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think OP had something like this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> b = reshape(a, 3,1)\n3×1 Matrix{Float64}:\n 0.0957598823007022\n 0.3664695156484836\n 0.2167466247738168\n\njulia> a\n3-element Vector{Float64}:\n 0.0957598823007022\n 0.3664695156484836\n 0.2167466247738168\n\njulia> b' * a\n1-element Vector{Float64}:\n 0.19044896030872022"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"but it still kinda works. You can make sure a vector is a vector (and not a Nx1 matrix by using "},{"type":"text","text":"vec","style":{"code":true}},{"type":"text","text":"):\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> vec(b)' * a\n0.19044896030872022"}]}]}],"thread_ts":"1614124992.246500","parent_user_id":"U01M3EUHL20"},{"client_msg_id":"39411f3f-7c31-4725-b418-8cc3c87ece18","type":"message","text":"```function f1(x)\n    return exp.(-x).*tan.(x)\nend\nfunction df1(x)\n    return -exp.(-x).*tan.(x) + exp.(-x).*sec.(x).^2\nend\nx0 = [-pi/2 + pi*rand()]\nx1 = rand(MvNormal(vec(x0),vec(sqrt(h).*ones(1,1))))\nError = norm(f0 + h.*df1(x0)*x1 - f1(x0+h.*x1),2)\nMethodError: no method matching *(::Array{Float64,1}, ::Array{Float64,1})\nClosest candidates are:\n  *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:538\n  *(!Matched::ChainRulesCore.One, ::Any) at C:\\Users\\super\\.julia\\packages\\ChainRulesCore\\eBwSt\\src\\differential_arithmetic.jl:98\n  *(!Matched::ChainRulesCore.Zero, ::Any) at C:\\Users\\super\\.julia\\packages\\ChainRulesCore\\eBwSt\\src\\differential_arithmetic.jl:68\n  ...\n\nStacktrace:\n [1] top-level scope at In[487]:9\n [2] include_string(::Function, ::Module, ::String, ::String) at .\\loading.jl:1091```\n","user":"U01M3EUHL20","ts":"1614126359.247600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"D5cPm","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function f1(x)\n    return exp.(-x).*tan.(x)\nend\nfunction df1(x)\n    return -exp.(-x).*tan.(x) + exp.(-x).*sec.(x).^2\nend\nx0 = [-pi/2 + pi*rand()]\nx1 = rand(MvNormal(vec(x0),vec(sqrt(h).*ones(1,1))))\nError = norm(f0 + h.*df1(x0)*x1 - f1(x0+h.*x1),2)\nMethodError: no method matching *(::Array{Float64,1}, ::Array{Float64,1})\nClosest candidates are:\n  *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:538\n  *(!Matched::ChainRulesCore.One, ::Any) at C:\\Users\\super\\.julia\\packages\\ChainRulesCore\\eBwSt\\src\\differential_arithmetic.jl:98\n  *(!Matched::ChainRulesCore.Zero, ::Any) at C:\\Users\\super\\.julia\\packages\\ChainRulesCore\\eBwSt\\src\\differential_arithmetic.jl:68\n  ...\n\nStacktrace:\n [1] top-level scope at In[487]:9\n [2] include_string(::Function, ::Module, ::String, ::String) at .\\loading.jl:1091"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1614124992.246500","parent_user_id":"U01M3EUHL20"},{"client_msg_id":"9eeb7ac9-0b1d-45ff-8764-b0a9457b677d","type":"message","text":"Here's one example.","user":"U01M3EUHL20","ts":"1614126373.247800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DZBn=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Here's one example."}]}]}],"thread_ts":"1614124992.246500","parent_user_id":"U01M3EUHL20"},{"client_msg_id":"eab3866c-7c00-4e03-b36f-08680946d07c","type":"message","text":"well, multiplication between two vector is not commonly defined. You either have element-wise multiplication, or a dot product and you need to show which one you want. (by either doing `.*` or `dot()` or the `a' * b`we just looked at)","user":"UH8A351DJ","ts":"1614126514.248000","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1614126556.000000"},"blocks":[{"type":"rich_text","block_id":"nK4y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well, multiplication between two vector is not commonly defined. You either have element-wise multiplication, or a dot product and you need to show which one you want. (by either doing "},{"type":"text","text":".*","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"dot()","style":{"code":true}},{"type":"text","text":" or the "},{"type":"text","text":"a' * b","style":{"code":true}},{"type":"text","text":"we just looked at)"}]}]}],"thread_ts":"1614124992.246500","parent_user_id":"U01M3EUHL20"}]