[{"client_msg_id":"d3cb2f7c-d045-454b-94b6-999f6a4d0f47","type":"message","text":"Hi all, a small question from a beginner.\n\nI have a number of similar composite types, one of the fields of  which is an array (see MWE below), and a simple function `project!` which I want to operate iteratively on prealoocated arrays. The function uses the array from my composite type (in the example below it's a pointwise multiplicative factor, but it might be different for the other types, that's why I wrapped the arrays in a new type).\n\nI hoped that as I have everything preallocated, application of `project!` would require 0 allocations, but as seen in the example below it's not like that. For  large size of arrays and large number of iterations, it seems to be not efficient.\n\nIf checked with profiler, it’s clear that the array from my structure is materialized every time I call `project!` (because of `getfield` command, I guess).\n\nIs there any way to avoid this? Or, in general, do I do something wrong?\n```struct ConstrainedByAmplitude &lt;: AmplitudeConstrainedSet\n    amp::Array{T} where T &lt;: Real \nend\n\nfunction project!(xp, x, feasset::ConstrainedByAmplitude)\n    xp .= feasset.amp .* _unit_amp.(x)\nend\n\n@inline function _unit_amp(z)\n    abs(z)≈0 ? 1 : z/abs(z)\nend```\n```julia&gt; ttt = ConstrainedByAmplitude(rand(512, 512));\njulia&gt; x0 = one(ttt.amp);\njulia&gt; x1 = similar(x0);\n\njulia&gt; @btime project!($x1, $x0, $ttt)\n  195.700 μs (4 allocations: 96 bytes)```\nI tried to avoid this by “precalculating” functions for the particular implementations of my types, like below, but it didn’t help.\n```function _actualise_projection(set)\n    function actualised(xp,x)\n        project!(xp,x,set)\n    end\n    return actualised\nend```","user":"U01BDDL8J3Y","ts":"1612713475.233700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ehYev","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi all, a small question from a beginner.\n\nI have a number of similar composite types, one of the fields of  which is an array (see MWE below), and a simple function "},{"type":"text","text":"project!","style":{"code":true}},{"type":"text","text":" which I want to operate iteratively on prealoocated arrays. The function uses the array from my composite type (in the example below it's a pointwise multiplicative factor, but it might be different for the other types, that's why I wrapped the arrays in a new type).\n\nI hoped that as I have everything preallocated, application of "},{"type":"text","text":"project!","style":{"code":true}},{"type":"text","text":" would require 0 allocations, but as seen in the example below it's not like that. For  large size of arrays and large number of iterations, it seems to be not efficient.\n\nIf checked with profiler, it’s clear that the array from my structure is materialized every time I call "},{"type":"text","text":"project!","style":{"code":true}},{"type":"text","text":" (because of "},{"type":"text","text":"getfield","style":{"code":true}},{"type":"text","text":" command, I guess).\n\nIs there any way to avoid this? Or, in general, do I do something wrong?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct ConstrainedByAmplitude <: AmplitudeConstrainedSet\n    amp::Array{T} where T <: Real \nend\n\nfunction project!(xp, x, feasset::ConstrainedByAmplitude)\n    xp .= feasset.amp .* _unit_amp.(x)\nend\n\n@inline function _unit_amp(z)\n    abs(z)≈0 ? 1 : z/abs(z)\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> ttt = ConstrainedByAmplitude(rand(512, 512));\njulia> x0 = one(ttt.amp);\njulia> x1 = similar(x0);\n\njulia> @btime project!($x1, $x0, $ttt)\n  195.700 μs (4 allocations: 96 bytes)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nI tried to avoid this by “precalculating” functions for the particular implementations of my types, like below, but it didn’t help.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function _actualise_projection(set)\n    function actualised(xp,x)\n        project!(xp,x,set)\n    end\n    return actualised\nend"}]}]}],"thread_ts":"1612713475.233700","reply_count":10,"reply_users_count":3,"latest_reply":"1612714970.237700","reply_users":["B01J9QZ4SP8","UH24GRBLL","U01BDDL8J3Y"],"subscribed":false,"reactions":[{"name":"bridge","users":["U01BDDL8J3Y"],"count":1}]},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1612713477.233800","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"8d2b723d-90c1-42a5-968f-3d656c47ffad","type":"message","text":"the problem lies in `amp::Array{T} where T &lt;: Real`","user":"UH24GRBLL","ts":"1612713582.234000","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1612713585.000000"},"blocks":[{"type":"rich_text","block_id":"rlxaS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the problem lies in "},{"type":"text","text":"amp::Array{T} where T <: Real","style":{"code":true}}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"5fa1ef01-457f-427d-b817-e22c34c24305","type":"message","text":"that's a UnionAll, and so the type of `amp` is not defined by just being an instance of `ConstranedByAmplitude`","user":"UH24GRBLL","ts":"1612713625.234300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Vpb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's a UnionAll, and so the type of "},{"type":"text","text":"amp","style":{"code":true}},{"type":"text","text":" is not defined by just being an instance of "},{"type":"text","text":"ConstranedByAmplitude","style":{"code":true}}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"862fd88d-d1c3-487f-b5e3-32a61ecac6e5","type":"message","text":"to solve this, make `ConstrainedByAmplitude` have a type parameter, restrict the eltype there and pass it through to the type definition of `amp`","user":"UH24GRBLL","ts":"1612713667.234500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AjCBC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"to solve this, make "},{"type":"text","text":"ConstrainedByAmplitude","style":{"code":true}},{"type":"text","text":" have a type parameter, restrict the eltype there and pass it through to the type definition of "},{"type":"text","text":"amp","style":{"code":true}}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y","reactions":[{"name":"+1","users":["U01BDDL8J3Y"],"count":1}]},{"type":"message","subtype":"bot_message","text":"Success, it has been cross posted <https://discourse.julialang.org/t/54802| to Discourse>. Keep and eye out on Discourse for responses and please add an answer there once you are satisfied with the solution so others can benefit as well. Happy debugging!","ts":"1612713679.234800","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"8cef24ff-bd8e-49f7-95cf-4d84706f93cd","type":"message","text":"Thanks, I'll try","user":"U01BDDL8J3Y","ts":"1612713789.235600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MsT02","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks, I'll try"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"bf0718d6-6dc6-4d4b-8d92-79105c533cac","type":"message","text":"I've just tried as follows:\n```struct CA{T}&lt;: AmplitudeConstrainedSet where T&lt;:Real\n           amp::Array{T} \nend\n\nfunction p!(xp, x, feasset::CA)\n           xp .= feasset.amp .* _unit_amp.(x)\nend```\nAnd I still have 4 allocations instead of 0\n```julia&gt; ttt = CA{Float64}(rand(512, 512));\n\njulia&gt; @btime p!($x1, $x0, $ttt)\n  198.900 μs (4 allocations: 96 bytes)```","user":"U01BDDL8J3Y","ts":"1612714522.237100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"u6U","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I've just tried as follows:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct CA{T}<: AmplitudeConstrainedSet where T<:Real\n           amp::Array{T} \nend\n\nfunction p!(xp, x, feasset::CA)\n           xp .= feasset.amp .* _unit_amp.(x)\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"And I still have 4 allocations instead of 0\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> ttt = CA{Float64}(rand(512, 512));\n\njulia> @btime p!($x1, $x0, $ttt)\n  198.900 μs (4 allocations: 96 bytes)"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"9ebece9c-5ff4-49c1-a11f-bed41a76d7c6","type":"message","text":"`_unit_amp` is type unstable - if the condition is `true`, you return an `Int`","user":"UH24GRBLL","ts":"1612714916.237300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"U6dGS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"_unit_amp","style":{"code":true}},{"type":"text","text":" is type unstable - if the condition is "},{"type":"text","text":"true","style":{"code":true}},{"type":"text","text":", you return an "},{"type":"text","text":"Int","style":{"code":true}}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"cbddcd31-a0f8-44aa-9b7f-56113d563396","type":"message","text":"`abs(z) ≈ 0.0 ? 1.0 : z/abs(z)`","user":"UH24GRBLL","ts":"1612714945.237500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kP4kx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"abs(z) ≈ 0.0 ? 1.0 : z/abs(z)","style":{"code":true}}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"dd747119-6a5c-49b0-81cc-45692b44bc2c","type":"message","text":"or `z ≈ zero(z) ? one(z) : z/abs(z)`","user":"UH24GRBLL","ts":"1612714970.237700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5pKHz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or "},{"type":"text","text":"z ≈ zero(z) ? one(z) : z/abs(z)","style":{"code":true}}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"}]