[{"client_msg_id":"d3cb2f7c-d045-454b-94b6-999f6a4d0f47","type":"message","text":"Hi all, a small question from a beginner.\n\nI have a number of similar composite types, one of the fields of  which is an array (see MWE below), and a simple function `project!` which I want to operate iteratively on prealoocated arrays. The function uses the array from my composite type (in the example below it's a pointwise multiplicative factor, but it might be different for the other types, that's why I wrapped the arrays in a new type).\n\nI hoped that as I have everything preallocated, application of `project!` would require 0 allocations, but as seen in the example below it's not like that. For  large size of arrays and large number of iterations, it seems to be not efficient.\n\nIf checked with profiler, it’s clear that the array from my structure is materialized every time I call `project!` (because of `getfield` command, I guess).\n\nIs there any way to avoid this? Or, in general, do I do something wrong?\n```struct ConstrainedByAmplitude &lt;: AmplitudeConstrainedSet\n    amp::Array{T} where T &lt;: Real \nend\n\nfunction project!(xp, x, feasset::ConstrainedByAmplitude)\n    xp .= feasset.amp .* _unit_amp.(x)\nend\n\n@inline function _unit_amp(z)\n    abs(z)≈0 ? 1 : z/abs(z)\nend```\n```julia&gt; ttt = ConstrainedByAmplitude(rand(512, 512));\njulia&gt; x0 = one(ttt.amp);\njulia&gt; x1 = similar(x0);\n\njulia&gt; @btime project!($x1, $x0, $ttt)\n  195.700 μs (4 allocations: 96 bytes)```\nI tried to avoid this by “precalculating” functions for the particular implementations of my types, like below, but it didn’t help.\n```function _actualise_projection(set)\n    function actualised(xp,x)\n        project!(xp,x,set)\n    end\n    return actualised\nend```","user":"U01BDDL8J3Y","ts":"1612713475.233700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ehYev","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi all, a small question from a beginner.\n\nI have a number of similar composite types, one of the fields of  which is an array (see MWE below), and a simple function "},{"type":"text","text":"project!","style":{"code":true}},{"type":"text","text":" which I want to operate iteratively on prealoocated arrays. The function uses the array from my composite type (in the example below it's a pointwise multiplicative factor, but it might be different for the other types, that's why I wrapped the arrays in a new type).\n\nI hoped that as I have everything preallocated, application of "},{"type":"text","text":"project!","style":{"code":true}},{"type":"text","text":" would require 0 allocations, but as seen in the example below it's not like that. For  large size of arrays and large number of iterations, it seems to be not efficient.\n\nIf checked with profiler, it’s clear that the array from my structure is materialized every time I call "},{"type":"text","text":"project!","style":{"code":true}},{"type":"text","text":" (because of "},{"type":"text","text":"getfield","style":{"code":true}},{"type":"text","text":" command, I guess).\n\nIs there any way to avoid this? Or, in general, do I do something wrong?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct ConstrainedByAmplitude <: AmplitudeConstrainedSet\n    amp::Array{T} where T <: Real \nend\n\nfunction project!(xp, x, feasset::ConstrainedByAmplitude)\n    xp .= feasset.amp .* _unit_amp.(x)\nend\n\n@inline function _unit_amp(z)\n    abs(z)≈0 ? 1 : z/abs(z)\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> ttt = ConstrainedByAmplitude(rand(512, 512));\njulia> x0 = one(ttt.amp);\njulia> x1 = similar(x0);\n\njulia> @btime project!($x1, $x0, $ttt)\n  195.700 μs (4 allocations: 96 bytes)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nI tried to avoid this by “precalculating” functions for the particular implementations of my types, like below, but it didn’t help.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function _actualise_projection(set)\n    function actualised(xp,x)\n        project!(xp,x,set)\n    end\n    return actualised\nend"}]}]}],"thread_ts":"1612713475.233700","reply_count":41,"reply_users_count":3,"latest_reply":"1612727926.251600","reply_users":["B01J9QZ4SP8","UH24GRBLL","U01BDDL8J3Y"],"subscribed":false,"reactions":[{"name":"bridge","users":["U01BDDL8J3Y"],"count":1}]},{"type":"message","subtype":"bot_message","text":"Can we cross post this publicly to <https://discourse.julialang.org|Discourse> for further visibility? React with :bridge: on the message above to approve. <https://github.com/JuliaCommunity/SlackBridge/blob/main/README.md#faq|More info here>","ts":"1612713477.233800","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"8d2b723d-90c1-42a5-968f-3d656c47ffad","type":"message","text":"the problem lies in `amp::Array{T} where T &lt;: Real`","user":"UH24GRBLL","ts":"1612713582.234000","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1612713585.000000"},"blocks":[{"type":"rich_text","block_id":"rlxaS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the problem lies in "},{"type":"text","text":"amp::Array{T} where T <: Real","style":{"code":true}}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"5fa1ef01-457f-427d-b817-e22c34c24305","type":"message","text":"that's a UnionAll, and so the type of `amp` is not defined by just being an instance of `ConstranedByAmplitude`","user":"UH24GRBLL","ts":"1612713625.234300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Vpb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's a UnionAll, and so the type of "},{"type":"text","text":"amp","style":{"code":true}},{"type":"text","text":" is not defined by just being an instance of "},{"type":"text","text":"ConstranedByAmplitude","style":{"code":true}}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"862fd88d-d1c3-487f-b5e3-32a61ecac6e5","type":"message","text":"to solve this, make `ConstrainedByAmplitude` have a type parameter, restrict the eltype there and pass it through to the type definition of `amp`","user":"UH24GRBLL","ts":"1612713667.234500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AjCBC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"to solve this, make "},{"type":"text","text":"ConstrainedByAmplitude","style":{"code":true}},{"type":"text","text":" have a type parameter, restrict the eltype there and pass it through to the type definition of "},{"type":"text","text":"amp","style":{"code":true}}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y","reactions":[{"name":"+1","users":["U01BDDL8J3Y"],"count":1}]},{"type":"message","subtype":"bot_message","text":"Success, it has been cross posted <https://discourse.julialang.org/t/54802| to Discourse>. Keep and eye out on Discourse for responses and please add an answer there once you are satisfied with the solution so others can benefit as well. Happy debugging!","ts":"1612713679.234800","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"8cef24ff-bd8e-49f7-95cf-4d84706f93cd","type":"message","text":"Thanks, I'll try","user":"U01BDDL8J3Y","ts":"1612713789.235600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MsT02","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks, I'll try"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"bf0718d6-6dc6-4d4b-8d92-79105c533cac","type":"message","text":"I've just tried as follows:\n```struct CA{T}&lt;: AmplitudeConstrainedSet where T&lt;:Real\n           amp::Array{T} \nend\n\nfunction p!(xp, x, feasset::CA)\n           xp .= feasset.amp .* _unit_amp.(x)\nend```\nAnd I still have 4 allocations instead of 0\n```julia&gt; ttt = CA{Float64}(rand(512, 512));\n\njulia&gt; @btime p!($x1, $x0, $ttt)\n  198.900 μs (4 allocations: 96 bytes)```","user":"U01BDDL8J3Y","ts":"1612714522.237100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"u6U","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I've just tried as follows:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct CA{T}<: AmplitudeConstrainedSet where T<:Real\n           amp::Array{T} \nend\n\nfunction p!(xp, x, feasset::CA)\n           xp .= feasset.amp .* _unit_amp.(x)\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"And I still have 4 allocations instead of 0\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> ttt = CA{Float64}(rand(512, 512));\n\njulia> @btime p!($x1, $x0, $ttt)\n  198.900 μs (4 allocations: 96 bytes)"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"9ebece9c-5ff4-49c1-a11f-bed41a76d7c6","type":"message","text":"`_unit_amp` is type unstable - if the condition is `true`, you return an `Int`","user":"UH24GRBLL","ts":"1612714916.237300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"U6dGS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"_unit_amp","style":{"code":true}},{"type":"text","text":" is type unstable - if the condition is "},{"type":"text","text":"true","style":{"code":true}},{"type":"text","text":", you return an "},{"type":"text","text":"Int","style":{"code":true}}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"cbddcd31-a0f8-44aa-9b7f-56113d563396","type":"message","text":"`abs(z) ≈ 0.0 ? 1.0 : z/abs(z)`","user":"UH24GRBLL","ts":"1612714945.237500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kP4kx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"abs(z) ≈ 0.0 ? 1.0 : z/abs(z)","style":{"code":true}}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"dd747119-6a5c-49b0-81cc-45692b44bc2c","type":"message","text":"or `z ≈ zero(z) ? one(z) : z/abs(z)`","user":"UH24GRBLL","ts":"1612714970.237700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5pKHz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or "},{"type":"text","text":"z ≈ zero(z) ? one(z) : z/abs(z)","style":{"code":true}}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y","reactions":[{"name":"+1","users":["U01BDDL8J3Y"],"count":1}]},{"client_msg_id":"4107baa1-182d-42b3-af69-1cd46d09f660","type":"message","text":"you can investigate these kinds of issues with `@code_warntype`","user":"UH24GRBLL","ts":"1612715159.237900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qYuSV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can investigate these kinds of issues with "},{"type":"text","text":"@code_warntype","style":{"code":true}}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y","reactions":[{"name":"+1","users":["U01BDDL8J3Y"],"count":1}]},{"client_msg_id":"07a689c2-76db-4b0e-b191-4ea5034f9802","type":"message","text":"usually allocations happen because of slices (none here) or type instabilities (probably the case here)","user":"UH24GRBLL","ts":"1612715182.238100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DUHg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"usually allocations happen because of slices (none here) or type instabilities (probably the case here)"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"5fc1a46a-cd41-4cb1-bdc5-00cb5520bde5","type":"message","text":"also, what's `x1`?","user":"UH24GRBLL","ts":"1612715214.238300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q+zsR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"also, what's "},{"type":"text","text":"x1","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"e342d551-8a28-434e-b97a-8dad9f949970","type":"message","text":"OK, a minimalistic example:\n\n```julia&gt; struct CB\n        amp::Array{Float64}\n       end\n\njulia&gt; ttt = CB(rand(512, 512));\n\njulia&gt; function p!(xp, x, feasset::CB)\n           xp .= feasset.amp .* x\n       end\n\njulia&gt; x0 = one(ttt.amp);\n\njulia&gt;  x1 = similar(x0);\n\njulia&gt; @btime p!($x1, $x0, $ttt);\n  114.000 μs (2 allocations: 64 bytes)```","user":"U01BDDL8J3Y","ts":"1612715444.238500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"07T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"OK, a minimalistic example:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> struct CB\n        amp::Array{Float64}\n       end\n\njulia> ttt = CB(rand(512, 512));\n\njulia> function p!(xp, x, feasset::CB)\n           xp .= feasset.amp .* x\n       end\n\njulia> x0 = one(ttt.amp);\n\njulia>  x1 = similar(x0);\n\njulia> @btime p!($x1, $x0, $ttt);\n  114.000 μs (2 allocations: 64 bytes)"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"3ac41a3b-3b0d-4010-9963-4fe694cd825f","type":"message","text":"If I do the same just with an array, (and not an array as field from a structure), I've got 0 allocations.","user":"U01BDDL8J3Y","ts":"1612715524.238700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x2r","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If I do the same just with an array, (and not an array as field from a structure), I've got 0 allocations."}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"1918357f-ee47-4a2a-8170-f05ee53994c7","type":"message","text":"What I've read, is that `getfield` materializes the array (similar to slice): <https://stackoverflow.com/questions/55653932/broadcast-operator-over-field-of-an-array-of-structures-julia>","user":"U01BDDL8J3Y","ts":"1612715609.238900","team":"T68168MUP","attachments":[{"service_name":"Stack Overflow","title":"Broadcast operator over field of an array of structures (Julia)","title_link":"https://stackoverflow.com/questions/55653932/broadcast-operator-over-field-of-an-array-of-structures-julia","text":"I have an array instantiated structures (of the same type). I would like to change the value of a certain field of these structures. For performance reasons I would like to avoid using a for loop. ...","fallback":"Stack Overflow: Broadcast operator over field of an array of structures (Julia)","thumb_url":"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded","from_url":"https://stackoverflow.com/questions/55653932/broadcast-operator-over-field-of-an-array-of-structures-julia","thumb_width":316,"thumb_height":316,"service_icon":"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon.png?v=c78bd457575a","id":1,"original_url":"https://stackoverflow.com/questions/55653932/broadcast-operator-over-field-of-an-array-of-structures-julia"}],"blocks":[{"type":"rich_text","block_id":"YiE5T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What I've read, is that "},{"type":"text","text":"getfield","style":{"code":true}},{"type":"text","text":" materializes the array (similar to slice): "},{"type":"link","url":"https://stackoverflow.com/questions/55653932/broadcast-operator-over-field-of-an-array-of-structures-julia"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"3f5f2d81-8884-4b93-98d4-9b92c8b2c9e0","type":"message","text":"that's a good point","user":"UH24GRBLL","ts":"1612722598.245900","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1612722604.000000"},"blocks":[{"type":"rich_text","block_id":"jxxL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's a good point"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"f41cefba-8c06-4f49-aaa0-e2c7a32a66a2","type":"message","text":"still, that only explains one of the remaining allocations - and also doesn't explain the size! 64 bytes is just much less than the size of that array","user":"UH24GRBLL","ts":"1612722649.246200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IEVs/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"still, that only explains one of the remaining allocations - and also doesn't explain the size! 64 bytes is just much less than the size of that array"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"55f2528a-86e5-47dc-8f59-7c5c2d747fac","type":"message","text":"I was afk for a while, let me think of something","user":"UH24GRBLL","ts":"1612722662.246400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GJUDK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I was afk for a while, let me think of something"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"82a18190-a7a7-4ea5-92c3-e91d4ba1de3d","type":"message","text":"Ah, no - I forgot :man-facepalming:","user":"UH24GRBLL","ts":"1612722683.246600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wYlZo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, no - I forgot "},{"type":"emoji","name":"man-facepalming"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"4b6c9bae-ab52-4cdd-b493-f8e38a651fdc","type":"message","text":"`Array{Float64}` is an abstract type - the dimensions are missing! `Array{Float64,1}` would be a concrete type (or `Vector{Float64}`, which is an alias to the former)","user":"UH24GRBLL","ts":"1612722725.246800","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1612722727.000000"},"blocks":[{"type":"rich_text","block_id":"9C5l8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Array{Float64}","style":{"code":true}},{"type":"text","text":" is an abstract type - the dimensions are missing! "},{"type":"text","text":"Array{Float64,1}","style":{"code":true}},{"type":"text","text":" would be a concrete type (or "},{"type":"text","text":"Vector{Float64}","style":{"code":true}},{"type":"text","text":", which is an alias to the former)"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y","reactions":[{"name":"+1","users":["U01BDDL8J3Y"],"count":1}]},{"client_msg_id":"11cbf776-4200-41e4-b4cb-54e8b673e313","type":"message","text":"it should not allocate with that <@U01BDDL8J3Y>","user":"UH24GRBLL","ts":"1612722745.247100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7/nvs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it should not allocate with that "},{"type":"user","user_id":"U01BDDL8J3Y"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"type":"message","subtype":"bot_message","text":"Hey <@U01BDDL8J3Y>, if you were able to find an answer here on Slack, please cross post it to Discourse via the link above. Thank you! ","ts":"1612724484.247300","username":"HelpDeskBot","bot_id":"B01J9QZ4SP8","thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"78f57211-b8d6-4962-abe3-88dbb1c8101b","type":"message","text":"I feel like there were answers here that vanished from this thread Oo","user":"UH24GRBLL","ts":"1612725229.247600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=gf5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I feel like there were answers here that vanished from this thread Oo"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y","reactions":[{"name":"question","users":["U01BDDL8J3Y"],"count":1}]},{"client_msg_id":"a8608f17-5521-42be-99ab-5b61a625fc6f","type":"message","text":"Yes! Thanks a lot, <@UH24GRBLL>, that was it!!!!\n\n0 allocations below. I'll do this now as parameters for the type.\n```julia&gt; struct CB2\n        amp::Array{Float64,2}\n       end\n\njulia&gt; ttt = CB2(rand(512, 512));\n\njulia&gt; function p!(xp, x, feasset::CB2)\n           xp .= feasset.amp .* x\n       end\np! (generic function with 3 methods)\n\njulia&gt; x0 = one(ttt.amp);\n\njulia&gt; x1=similar(x0);\n\njulia&gt; @btime p!($x1, $x0, $ttt);\n  114.900 μs (0 allocations: 0 bytes)```","user":"U01BDDL8J3Y","ts":"1612725705.247800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pTSRN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes! Thanks a lot, "},{"type":"user","user_id":"UH24GRBLL"},{"type":"text","text":", that was it!!!!\n\n0 allocations below. I'll do this now as parameters for the type.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> struct CB2\n        amp::Array{Float64,2}\n       end\n\njulia> ttt = CB2(rand(512, 512));\n\njulia> function p!(xp, x, feasset::CB2)\n           xp .= feasset.amp .* x\n       end\np! (generic function with 3 methods)\n\njulia> x0 = one(ttt.amp);\n\njulia> x1=similar(x0);\n\njulia> @btime p!($x1, $x0, $ttt);\n  114.900 μs (0 allocations: 0 bytes)"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"451f4d93-b586-4ffe-880e-a9cbc5bbc697","type":"message","text":"Yes - depending on if you want to stay flexible with the dimensions, you may have to use 2 type parameters","user":"UH24GRBLL","ts":"1612725933.248100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZrfdU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes - depending on if you want to stay flexible with the dimensions, you may have to use 2 type parameters"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"3502f34c-3b8a-4906-bce6-e213bf2060d6","type":"message","text":"I feel like we had a bunch more conversation before I asked what `x1` was and I can't see that anymore :thinking_face:","user":"UH24GRBLL","ts":"1612725974.248300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yLqXm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I feel like we had a bunch more conversation before I asked what "},{"type":"text","text":"x1","style":{"code":true}},{"type":"text","text":" was and I can't see that anymore "},{"type":"emoji","name":"thinking_face"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"5a167402-9ead-4d12-b1ba-60a58f7b20bf","type":"message","text":"I see all 27 (now 28) replies (desktop Slack)","user":"U01BDDL8J3Y","ts":"1612726183.248600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NHUZ/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see all 27 (now 28) replies (desktop Slack)"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"e668671e-fdd0-40cd-bd71-3b408a3a1d3f","type":"message","text":"huh, I've reloaded slack and now they're back","user":"UH24GRBLL","ts":"1612727135.249000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+I1HE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"huh, I've reloaded slack and now they're back"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"671ef080-d9c4-4581-8483-8b2b972b1c42","type":"message","text":"buggy software ¯\\_(ツ)_/¯","user":"UH24GRBLL","ts":"1612727142.249200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nF2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"buggy software ¯\\_(ツ)_/¯"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"570094b2-bcfb-491c-b3b9-62527c5058fa","type":"message","text":"in any case, glad I could help you!","user":"UH24GRBLL","ts":"1612727161.249400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sOl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in any case, glad I could help you!"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"8a11355b-8b23-4283-937e-937f220e713b","type":"message","text":"oh, you probably want your constructor to look like `CB(a::AbstractArray{T,N} = new{T,N}(a)` - that way you don't have to specify the dimensionality in your other code and it'll be inferred from the input array","user":"UH24GRBLL","ts":"1612727224.249600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aZqpZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh, you probably want your constructor to look like "},{"type":"text","text":"CB(a::AbstractArray{T,N} = new{T,N}(a)","style":{"code":true}},{"type":"text","text":" - that way you don't have to specify the dimensionality in your other code and it'll be inferred from the input array"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"d1312213-d930-4bb1-8b0c-44517b0a4a89","type":"message","text":"Thanks again. And definitely this constructor would be my next question :slightly_smiling_face:\n\nAt the moment I thought only about this:\n```struct ConstrainedByAmplitude{T,N} &lt;: AmplitudeConstrainedSet where {T &lt;: Real, N}\n    amp::Array{T,N}  #todo nongegative\nend```\nbut haven't checked it yet (don't want to steal weekend evening from my family)","user":"U01BDDL8J3Y","ts":"1612727706.249800","team":"T68168MUP","edited":{"user":"U01BDDL8J3Y","ts":"1612727754.000000"},"blocks":[{"type":"rich_text","block_id":"59iPX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks again. And definitely this constructor would be my next question "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":"\n\nAt the moment I thought only about this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct ConstrainedByAmplitude{T,N} <: AmplitudeConstrainedSet where {T <: Real, N}\n    amp::Array{T,N}  #todo nongegative\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"but haven't checked it yet (don't want to steal weekend evening from my family)"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"c637cada-b6a1-4fec-a32c-114417b45532","type":"message","text":"the `N`, you mean?","user":"UH24GRBLL","ts":"1612727724.250000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZC=Ee","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the "},{"type":"text","text":"N","style":{"code":true}},{"type":"text","text":", you mean?"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"1df544bc-dae6-4791-a553-40092232478c","type":"message","text":"```julia&gt; Array{Int,-1}(undef, 10)\nERROR: MethodError: no method matching Array{Int64, -1}(::UndefInitializer, ::Int64)```","user":"UH24GRBLL","ts":"1612727746.250300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"V9y+j","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Array{Int,-1}(undef, 10)\nERROR: MethodError: no method matching Array{Int64, -1}(::UndefInitializer, ::Int64)"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"7b0d5ffc-1023-472d-be60-03afe6561a3d","type":"message","text":"you don't have to worry about that","user":"UH24GRBLL","ts":"1612727756.250600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DuvC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you don't have to worry about that"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"f45ad23d-ab23-4749-886d-66d38e57551c","type":"message","text":"Nonnegative is related to Real nonegative","user":"U01BDDL8J3Y","ts":"1612727792.250800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BsXom","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Nonnegative is related to Real nonegative"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"0cbcbda5-7d13-4dd8-ab56-4e88476406eb","type":"message","text":"it should define the abs value","user":"U01BDDL8J3Y","ts":"1612727812.251000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2qB2i","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it should define the abs value"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"17e33ab5-94c3-40a6-8f31-9793f1700542","type":"message","text":"ah, I see","user":"UH24GRBLL","ts":"1612727832.251200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2zegS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah, I see"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"05a9a190-d625-476a-8ade-61dc1c429d90","type":"message","text":"yeah, you can check that in the constructor as well\n\n```function CB(...)\n  # do your checks here and throw e.g. ArgumentError \n new(..)\nend```","user":"UH24GRBLL","ts":"1612727866.251400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9wMz3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, you can check that in the constructor as well\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function CB(...)\n  # do your checks here and throw e.g. ArgumentError \n new(..)\nend"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"},{"client_msg_id":"b412c901-e561-4619-b03d-fc2be6e4cf22","type":"message","text":"Super! Very helpful -- maybe the best helpdesk in my life :slightly_smiling_face:","user":"U01BDDL8J3Y","ts":"1612727926.251600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W8h","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Super! Very helpful -- maybe the best helpdesk in my life "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1612713475.233700","parent_user_id":"U01BDDL8J3Y"}]