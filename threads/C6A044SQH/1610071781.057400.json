[{"client_msg_id":"1616C401-6919-47E5-B040-D9A643928F8C","type":"message","text":"So it turns out I’ve been misunderstanding what “type instability” actually is.  I thought that adding specific types to function parameters reduce type instability (e.g. `myfunc(input::Vector{Int})` rather than `myfunc(input)`).\n\nCan someone break down to me what type instability is and how to avoid it, and perhaps explain what I am thinking of? ^^","user":"U014LRLJXRP","ts":"1610071781.057400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eRM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So it turns out I’ve been misunderstanding what “type instability” actually is.  I thought that adding specific types to function parameters reduce type instability (e.g. "},{"type":"text","text":"myfunc(input::Vector{Int})","style":{"code":true}},{"type":"text","text":" rather than "},{"type":"text","text":"myfunc(input)","style":{"code":true}},{"type":"text","text":").\n"},{"type":"text","text":"\n"},{"type":"text","text":"Can someone break down to me what type instability is and how to avoid it, and perhaps explain what I am thinking of? ^^"}]}]}],"thread_ts":"1610071781.057400","reply_count":25,"reply_users_count":5,"latest_reply":"1610158373.137000","reply_users":["UDB26738Q","U0179G7FG4F","U014LRLJXRP","U8D9768Q6","UV98QAPFW"],"subscribed":false},{"client_msg_id":"967051f9-f66a-42ce-8eb1-51ec74b6df89","type":"message","text":"I think there are two slightly different definitions of type-stability:\n• The type of the return value can be inferred exclusively on the type of the arguments, their values are irrelevant\n• No variable changes its type ","user":"UDB26738Q","ts":"1610072153.058000","team":"T68168MUP","edited":{"user":"UDB26738Q","ts":"1610072269.000000"},"blocks":[{"type":"rich_text","block_id":"KwOX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think there are two slightly different definitions of type-stability:\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The type of the return value can be inferred exclusively on the type of the arguments, their values are irrelevant"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"No variable changes its type "}]}],"style":"bullet","indent":0,"offset":0}]}],"thread_ts":"1610071781.057400","parent_user_id":"U014LRLJXRP"},{"client_msg_id":"8de7fa76-e140-4dd2-b8d3-0baf67725360","type":"message","text":"I think the second point would be more clearly stated as\nno variable changes it's type","user":"U0179G7FG4F","ts":"1610072225.059200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4OZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think the second point would be more clearly stated as\nno variable changes it's type"}]}]}],"thread_ts":"1610071781.057400","parent_user_id":"U014LRLJXRP","reactions":[{"name":"+1","users":["UDB26738Q"],"count":1}]},{"client_msg_id":"a2bd5132-0b76-4af5-a4ce-63eb98ea9d0a","type":"message","text":"Changed for clarity","user":"UDB26738Q","ts":"1610072286.060000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6XBbn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Changed for clarity"}]}]}],"thread_ts":"1610071781.057400","parent_user_id":"U014LRLJXRP"},{"client_msg_id":"286D01D3-F2F1-42C2-9FD3-2A67764BF56B","type":"message","text":"<@UDB26738Q> <@U0179G7FG4F> oh—that makes so much sense!  Thank you both.\n\nAny caveats with not specifying the type of the input?","user":"U014LRLJXRP","ts":"1610072355.061000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RaY","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UDB26738Q"},{"type":"text","text":" "},{"type":"user","user_id":"U0179G7FG4F"},{"type":"text","text":" oh—that makes so much sense!  Thank you both.\n\n"},{"type":"text","text":"Any caveats with not specifying the type of the input?"}]}]}],"thread_ts":"1610071781.057400","parent_user_id":"U014LRLJXRP"},{"client_msg_id":"b2cbc50e-f7aa-4800-86da-de79fbc67fd1","type":"message","text":"Generally speaking, having a strict type annotation in the signature of the method won't help type-stability, those types are important only to select the method, the dispatch","user":"UDB26738Q","ts":"1610072386.061200","team":"T68168MUP","edited":{"user":"UDB26738Q","ts":"1610072568.000000"},"blocks":[{"type":"rich_text","block_id":"924","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Generally speaking, having a strict type annotation in the signature of the method won't help type-stability, those types are important only to select the method, the dispatch"}]}]}],"thread_ts":"1610071781.057400","parent_user_id":"U014LRLJXRP","reactions":[{"name":"+1","users":["U014LRLJXRP"],"count":1}]},{"client_msg_id":"66F00ED3-53B1-4242-8CF6-F5099C710328","type":"message","text":"I see, okay.  Thanks so much guys :)","user":"U014LRLJXRP","ts":"1610072444.061800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4oS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see, okay.  Thanks so much guys :)"}]}]}],"thread_ts":"1610071781.057400","parent_user_id":"U014LRLJXRP"},{"client_msg_id":"a92ac48b-eb7f-4cb8-81f3-909a851c1d50","type":"message","text":"there are 2 but they are minor. For arguments of type `Function` and `Vararg` there is a difference between `function f(g)` and `function f(g&lt;:Function)`","user":"U0179G7FG4F","ts":"1610072470.062000","team":"T68168MUP","edited":{"user":"U0179G7FG4F","ts":"1610072479.000000"},"blocks":[{"type":"rich_text","block_id":"zEh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there are 2 but they are minor. For arguments of type "},{"type":"text","text":"Function","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"Vararg","style":{"code":true}},{"type":"text","text":" there is a difference between "},{"type":"text","text":"function f(g)","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"function f(g<:Function)","style":{"code":true}}]}]}],"thread_ts":"1610071781.057400","parent_user_id":"U014LRLJXRP","reactions":[{"name":"+1","users":["U014LRLJXRP"],"count":1}]},{"client_msg_id":"33CD1CB9-B7F1-4EB9-B6D8-A2BBFD3D9161","type":"message","text":"Why is that, can you explain?\n\nAlso, is it best to specify the type of the argument if you know if the function *won’t* work for any input? ","user":"U014LRLJXRP","ts":"1610072823.064300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c0zol","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Why is that, can you explain?\n"},{"type":"text","text":"\n"},{"type":"text","text":"Also, is it best to specify the type of the argument if you know if the function *won’t* work for any input? "}]}]}],"thread_ts":"1610071781.057400","parent_user_id":"U014LRLJXRP"},{"client_msg_id":"F20DD8FC-B4F5-4F64-B18B-370EFD27D614","type":"message","text":"And regarding the second point.  Is this a bad function?\n```julia\nfunction changesecond(s::AbstractString, c::Char)\n    s = collect(s)\n    s[2] = c\n    return join(s)\nend\n```","user":"U014LRLJXRP","ts":"1610073418.070500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pFPF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And regarding the second point.  Is this a bad function?\n```julia\n"},{"type":"text","text":"function changesecond(s::AbstractString, c::Char)\n    s = collect(s)\n    s[2] = c\n    return join(s)\nend\n"},{"type":"text","text":"```"}]}]}],"thread_ts":"1610071781.057400","parent_user_id":"U014LRLJXRP"},{"client_msg_id":"86994828-9913-43FC-AB0C-065B6F8093C8","type":"message","text":"(Sorry about formatting, on mobile) ","user":"U014LRLJXRP","ts":"1610073524.071000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Lbp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(Sorry about formatting, on mobile) "}]}]}],"thread_ts":"1610071781.057400","parent_user_id":"U014LRLJXRP"},{"client_msg_id":"8fc8e6e5-aa8b-4166-8038-e89a018ca8b8","type":"message","text":"explanation is in the performance tips <https://docs.julialang.org/en/v1/manual/performance-tips/#Be-aware-of-when-Julia-avoids-specializing>\nFor your second question, there are definitely cases where you should specialize for clarity. If you write a function that uses bit manipulation on `Float64` for example, you should probably restrict the type since you can be pretty sure that nothing else will work. specializations such as `f(v::AbstractVector{T})` can help with clarity, but I would not generally recommend fully specializing based on what you know works. It often prevents otherwise valid use-cases.","user":"U0179G7FG4F","ts":"1610073578.071200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QD2K","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"explanation is in the performance tips "},{"type":"link","url":"https://docs.julialang.org/en/v1/manual/performance-tips/#Be-aware-of-when-Julia-avoids-specializing"},{"type":"text","text":"\nFor your second question, there are definitely cases where you should specialize for clarity. If you write a function that uses bit manipulation on "},{"type":"text","text":"Float64","style":{"code":true}},{"type":"text","text":" for example, you should probably restrict the type since you can be pretty sure that nothing else will work. specializations such as "},{"type":"text","text":"f(v::AbstractVector{T})","style":{"code":true}},{"type":"text","text":" can help with clarity, but I would not generally recommend fully specializing based on what you know works. It often prevents otherwise valid use-cases."}]}]}],"thread_ts":"1610071781.057400","parent_user_id":"U014LRLJXRP","reactions":[{"name":"+1","users":["U014LRLJXRP"],"count":1}]},{"client_msg_id":"23341974-D5C7-472A-A2EC-499FF1C99EBF","type":"message","text":"Okay, that’s really good to know :sweat_smile: ","user":"U014LRLJXRP","ts":"1610073694.072500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"D39Sn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Okay, that’s really good to know "},{"type":"emoji","name":"sweat_smile"},{"type":"text","text":" "}]}]}],"thread_ts":"1610071781.057400","parent_user_id":"U014LRLJXRP"},{"client_msg_id":"6b544147-8557-4bb4-a8de-0745230e1e6f","type":"message","text":"`changesecond` looks fine (though it won't be especially efficient `collect` will be `O(n)`","user":"U0179G7FG4F","ts":"1610073720.072700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ln/mF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"changesecond","style":{"code":true}},{"type":"text","text":" looks fine (though it won't be especially efficient "},{"type":"text","text":"collect","style":{"code":true}},{"type":"text","text":" will be "},{"type":"text","text":"O(n)","style":{"code":true}}]}]}],"thread_ts":"1610071781.057400","parent_user_id":"U014LRLJXRP"},{"client_msg_id":"0AF8A8E0-E75C-45BA-8E07-0B655F153EA8","type":"message","text":"But in `changesecond` I change `s` from a string to an array; doesn’t that breach the second point? ^","user":"U014LRLJXRP","ts":"1610073850.074700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g2OzR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But in "},{"type":"text","text":"changesecond","style":{"code":true}},{"type":"text","text":" I change "},{"type":"text","text":"s","style":{"code":true}},{"type":"text","text":" from a string to an array; doesn’t that breach the second point? ^"}]}]}],"thread_ts":"1610071781.057400","parent_user_id":"U014LRLJXRP"},{"client_msg_id":"2222557d-c479-4193-997e-480de3733dea","type":"message","text":"I think that point is mistaken. Julia has no trouble keeping track of variable rebindings.","user":"U8D9768Q6","ts":"1610075220.075900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SdLtW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think that point is mistaken. Julia has no trouble keeping track of variable rebindings."}]}]}],"thread_ts":"1610071781.057400","parent_user_id":"U014LRLJXRP"},{"client_msg_id":"81c68662-3c65-479d-9d44-a57c2c341326","type":"message","text":"Type stability is just having programs where the types are knowable at compile time.","user":"U8D9768Q6","ts":"1610075274.076100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"a7q9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Type stability is just having programs where the types are knowable at compile time."}]}]}],"thread_ts":"1610071781.057400","parent_user_id":"U014LRLJXRP"},{"client_msg_id":"a1dd651e-e81a-454d-ba40-29d519faeae4","type":"message","text":"it's not that it has trouble, but it does lead to some inefficiencies. Currently Julia uses 1 slot per name, so if a variable changes type, the slot will be of a union type","user":"U0179G7FG4F","ts":"1610075347.076300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XwqwN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's not that it has trouble, but it does lead to some inefficiencies. Currently Julia uses 1 slot per name, so if a variable changes type, the slot will be of a union type"}]}]}],"thread_ts":"1610071781.057400","parent_user_id":"U014LRLJXRP"},{"client_msg_id":"08e0aaa4-95c7-43c6-81ec-8bf11054e2b4","type":"message","text":"Maybe I'm not understanding your correctly, but that does not seem to be the case:\n```julia&gt; function foo(x::Int)\n           x = x / 2\n           x = \"hi\" * string(x)\n           x\n       end\nfoo (generic function with 1 method)\n\njulia&gt; code_typed(foo, (Int,))\n1-element Vector{Any}:\n CodeInfo(\n1 ─ %1 = Base.sitofp(Float64, x@_2)::Float64\n│   %2 = Base.div_float(%1, 2.0)::Float64\n│   %3 = invoke Main.string(%2::Float64)::String\n│   %4 = invoke Base.string(\"hi\"::String, %3::String)::String\n└──      return %4\n) =&gt; String```\nThere's no unions in here from what I can see, Oscar.","user":"U8D9768Q6","ts":"1610075532.077200","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1610076102.000000"},"blocks":[{"type":"rich_text","block_id":"0HT5d","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe I'm not understanding your correctly, but that does not seem to be the case:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function foo(x::Int)\n           x = x / 2\n           x = \"hi\" * string(x)\n           x\n       end\nfoo (generic function with 1 method)\n\njulia> code_typed(foo, (Int,))\n1-element Vector{Any}:\n CodeInfo(\n1 ─ %1 = Base.sitofp(Float64, x@_2)::Float64\n│   %2 = Base.div_float(%1, 2.0)::Float64\n│   %3 = invoke Main.string(%2::Float64)::String\n│   %4 = invoke Base.string(\"hi\"::String, %3::String)::String\n└──      return %4\n) => String"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"There's no unions in here from what I can see, Oscar."}]}]}],"thread_ts":"1610071781.057400","parent_user_id":"U014LRLJXRP"},{"client_msg_id":"30C0E9B3-09E5-42C3-B1F8-7F512CCC041F","type":"message","text":"Oh, that’s interesting <@U0179G7FG4F>.  Good to know.  \n\n<@U8D9768Q6> how do I know if I type is “knowable” at compile time?","user":"U014LRLJXRP","ts":"1610075540.077700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xtFB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh, that’s interesting "},{"type":"user","user_id":"U0179G7FG4F"},{"type":"text","text":".  Good to know.  \n"},{"type":"text","text":"\n"},{"type":"user","user_id":"U8D9768Q6"},{"type":"text","text":" how do I know if I type is “knowable” at compile time?"}]}]}],"thread_ts":"1610071781.057400","parent_user_id":"U014LRLJXRP"},{"client_msg_id":"e4724136-cf9e-4225-a379-9e9ff11d2ec5","type":"message","text":"It's mostly just a question of \"do the exact returned types depend on the values?\"","user":"U8D9768Q6","ts":"1610075603.078000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mXH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's mostly just a question of \"do the exact returned types depend on the values?\""}]}]}],"thread_ts":"1610071781.057400","parent_user_id":"U014LRLJXRP"},{"client_msg_id":"6def57be-c96c-4b2c-aa8f-071fe662ff0a","type":"message","text":"For instance, this function\n```julia&gt; function bar(x)\n           if x &gt; 10\n               x = x / 2\n           end\n           x + 1\n       end```\nis type stable for `Float64` inputs because it will always return a `Float64` . However, what if you give it an `Int` input?","user":"U8D9768Q6","ts":"1610075703.078200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g8UW1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For instance, this function\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function bar(x)\n           if x > 10\n               x = x / 2\n           end\n           x + 1\n       end"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"is type stable for "},{"type":"text","text":"Float64","style":{"code":true}},{"type":"text","text":" inputs because it will always return a "},{"type":"text","text":"Float64","style":{"code":true}},{"type":"text","text":" . However, what if you give it an "},{"type":"text","text":"Int","style":{"code":true}},{"type":"text","text":" input?"}]}]}],"thread_ts":"1610071781.057400","parent_user_id":"U014LRLJXRP"},{"client_msg_id":"b5c3eeea-443f-411d-9ce8-e03d86aeb4be","type":"message","text":"```julia&gt; typeof(bar(11))\nFloat64\n\njulia&gt; typeof(bar(10))\nInt64```\nSee how the output types depend on the input values? This is a (small) type instability.","user":"U8D9768Q6","ts":"1610075740.078400","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1610075942.000000"},"blocks":[{"type":"rich_text","block_id":"azc","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> typeof(bar(11))\nFloat64\n\njulia> typeof(bar(10))\nInt64"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"See how the output types depend on the input values? This is a (small) type instability."}]}]}],"thread_ts":"1610071781.057400","parent_user_id":"U014LRLJXRP"},{"client_msg_id":"49df11c3-a70f-48fe-8c42-89be69658fa3","type":"message","text":"I found this article really helpful regarding type instability [1]\n\nThough, it seems a bit old and some things are outdated.\n\n[1] <https://ucidatascienceinitiative.github.io/IntroToJulia/Html/WhyJulia|https://ucidatascienceinitiative.github.io/IntroToJulia/Html/WhyJulia>","user":"UV98QAPFW","ts":"1610076485.078900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Wgtbu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I found this article really helpful regarding type instability [1]\n\nThough, it seems a bit old and some things are outdated.\n\n[1] "},{"type":"link","url":"https://ucidatascienceinitiative.github.io/IntroToJulia/Html/WhyJulia","text":"https://ucidatascienceinitiative.github.io/IntroToJulia/Html/WhyJulia"}]}]}],"thread_ts":"1610071781.057400","parent_user_id":"U014LRLJXRP","reactions":[{"name":"+1","users":["U014LRLJXRP"],"count":1}]},{"client_msg_id":"f7dc0eae-4840-4b4d-b2e7-0ab31a3bd868","type":"message","text":"<@U8D9768Q6>\n```julia&gt; using BenchmarkTools\n\njulia&gt; v = rand(1_000_000);\n\njulia&gt; function f(v)\n           total = 0\n           for x in v\n               total += x\n           end\n           return nothing\n       end\nf (generic function with 1 method)\n\njulia&gt; function g(v)\n           total = 0.0\n           for x in v\n               total += x\n           end\n           return nothing\n       end\ng (generic function with 1 method)\n\njulia&gt; @code_warntype f(v)\nVariables\n  #self#::Core.Const(f)\n  v::Vector{Float64}\n  @_3::Union{Nothing, Tuple{Float64, Int64}}\n  total::Union{Float64, Int64}\n  x::Float64\n\nBody::Nothing\n1 ─       (total = 0)\n│   %2  = v::Vector{Float64}\n│         (@_3 = Base.iterate(%2))\n│   %4  = (@_3 === nothing)::Bool\n│   %5  = Base.not_int(%4)::Bool\n└──       goto #4 if not %5\n2 ┄ %7  = @_3::Tuple{Float64, Int64}::Tuple{Float64, Int64}\n│         (x = Core.getfield(%7, 1))\n│   %9  = Core.getfield(%7, 2)::Int64\n│         (total = total + x)\n│         (@_3 = Base.iterate(%2, %9))\n│   %12 = (@_3 === nothing)::Bool\n│   %13 = Base.not_int(%12)::Bool\n└──       goto #4 if not %13\n3 ─       goto #2\n4 ┄       return Main.nothing\n\njulia&gt; @code_warntype g(v)\nVariables\n  #self#::Core.Const(g)\n  v::Vector{Float64}\n  @_3::Union{Nothing, Tuple{Float64, Int64}}\n  total::Float64\n  x::Float64\n\nBody::Nothing\n1 ─       (total = 0.0)\n│   %2  = v::Vector{Float64}\n│         (@_3 = Base.iterate(%2))\n│   %4  = (@_3 === nothing)::Bool\n│   %5  = Base.not_int(%4)::Bool\n└──       goto #4 if not %5\n2 ┄ %7  = @_3::Tuple{Float64, Int64}::Tuple{Float64, Int64}\n│         (x = Core.getfield(%7, 1))\n│   %9  = Core.getfield(%7, 2)::Int64\n│         (total = total + x)\n│         (@_3 = Base.iterate(%2, %9))\n│   %12 = (@_3 === nothing)::Bool\n│   %13 = Base.not_int(%12)::Bool\n└──       goto #4 if not %13\n3 ─       goto #2\n4 ┄       return Main.nothing\n\njulia&gt; @btime f($v)\n  541.797 μs (0 allocations: 0 bytes)\n\njulia&gt; @btime g($v)\n  1.372 ns (0 allocations: 0 bytes)```","user":"UDB26738Q","ts":"1610103174.086500","team":"T68168MUP","edited":{"user":"UDB26738Q","ts":"1610105760.000000"},"blocks":[{"type":"rich_text","block_id":"F6m","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U8D9768Q6"},{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using BenchmarkTools\n\njulia> v = rand(1_000_000);\n\njulia> function f(v)\n           total = 0\n           for x in v\n               total += x\n           end\n           return nothing\n       end\nf (generic function with 1 method)\n\njulia> function g(v)\n           total = 0.0\n           for x in v\n               total += x\n           end\n           return nothing\n       end\ng (generic function with 1 method)\n\njulia> @code_warntype f(v)\nVariables\n  #self#::Core.Const(f)\n  v::Vector{Float64}\n  @_3::Union{Nothing, Tuple{Float64, Int64}}\n  total::Union{Float64, Int64}\n  x::Float64\n\nBody::Nothing\n1 ─       (total = 0)\n│   %2  = v::Vector{Float64}\n│         (@_3 = Base.iterate(%2))\n│   %4  = (@_3 === nothing)::Bool\n│   %5  = Base.not_int(%4)::Bool\n└──       goto #4 if not %5\n2 ┄ %7  = @_3::Tuple{Float64, Int64}::Tuple{Float64, Int64}\n│         (x = Core.getfield(%7, 1))\n│   %9  = Core.getfield(%7, 2)::Int64\n│         (total = total + x)\n│         (@_3 = Base.iterate(%2, %9))\n│   %12 = (@_3 === nothing)::Bool\n│   %13 = Base.not_int(%12)::Bool\n└──       goto #4 if not %13\n3 ─       goto #2\n4 ┄       return Main.nothing\n\njulia> @code_warntype g(v)\nVariables\n  #self#::Core.Const(g)\n  v::Vector{Float64}\n  @_3::Union{Nothing, Tuple{Float64, Int64}}\n  total::Float64\n  x::Float64\n\nBody::Nothing\n1 ─       (total = 0.0)\n│   %2  = v::Vector{Float64}\n│         (@_3 = Base.iterate(%2))\n│   %4  = (@_3 === nothing)::Bool\n│   %5  = Base.not_int(%4)::Bool\n└──       goto #4 if not %5\n2 ┄ %7  = @_3::Tuple{Float64, Int64}::Tuple{Float64, Int64}\n│         (x = Core.getfield(%7, 1))\n│   %9  = Core.getfield(%7, 2)::Int64\n│         (total = total + x)\n│         (@_3 = Base.iterate(%2, %9))\n│   %12 = (@_3 === nothing)::Bool\n│   %13 = Base.not_int(%12)::Bool\n└──       goto #4 if not %13\n3 ─       goto #2\n4 ┄       return Main.nothing\n\njulia> @btime f($v)\n  541.797 μs (0 allocations: 0 bytes)\n\njulia> @btime g($v)\n  1.372 ns (0 allocations: 0 bytes)"}]}]}],"thread_ts":"1610071781.057400","parent_user_id":"U014LRLJXRP"},{"client_msg_id":"94096b82-abf2-46cc-9b0d-19468d97d545","type":"message","text":"Ah yes, if looping is involved I totally agree. I was just talking about re-assignment, and I see now Oscar was talking about slot re-use","user":"U8D9768Q6","ts":"1610158373.137000","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1610158398.000000"},"blocks":[{"type":"rich_text","block_id":"Cczu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah yes, if looping is involved I totally agree. I was just talking about re-assignment, and I see now Oscar was talking about slot re-use"}]}]}],"thread_ts":"1610071781.057400","parent_user_id":"U014LRLJXRP"}]