[{"client_msg_id":"d70836d1-93b6-4345-bb74-2759988c9167","type":"message","text":"Is there any way to do this?\n```abstract type A end\nabstract type B end\nstruct C &lt;: Union{A,B} end\nERROR: invalid subtyping in definition of C```\nC is an A and a B. Does Julia let me write that?","user":"U01537M2E9W","ts":"1616179820.224100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gyk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there any way to do this?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"abstract type A end\nabstract type B end\nstruct C <: Union{A,B} end\nERROR: invalid subtyping in definition of C"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"C is an A and a B. Does Julia let me write that?"}]}]}],"thread_ts":"1616179820.224100","reply_count":10,"reply_users_count":4,"latest_reply":"1616180684.226400","reply_users":["UM30MT6RF","U01537M2E9W","UH8A351DJ","U8D9768Q6"],"subscribed":false},{"client_msg_id":"4ca07312-0747-4624-a987-c7be5dbeef6e","type":"message","text":"No, only abstract types can be subtyped","user":"UM30MT6RF","ts":"1616179855.224200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PGjix","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No, only abstract types can be subtyped"}]}]}],"thread_ts":"1616179820.224100","parent_user_id":"U01537M2E9W"},{"client_msg_id":"d05ca1c4-f6d8-48a8-b512-f94e036459dc","type":"message","text":"Sure, but is there a way to create an \"abstract union\" type?","user":"U01537M2E9W","ts":"1616179883.224400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UNjb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sure, but is there a way to create an \"abstract union\" type?"}]}]}],"thread_ts":"1616179820.224100","parent_user_id":"U01537M2E9W"},{"client_msg_id":"3046531d-beb8-4cf8-b15c-1aeccc28d7d2","type":"message","text":"no, you can't be a subtype of two different super types","user":"UH8A351DJ","ts":"1616179907.224800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4T+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no, you can't be a subtype of two different super types"}]}]}],"thread_ts":"1616179820.224100","parent_user_id":"U01537M2E9W"},{"client_msg_id":"598f02ac-bccd-4e0b-8c67-86d1537e1a34","type":"message","text":"Traits (kinda)","user":"U8D9768Q6","ts":"1616179909.225000","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1616179921.000000"},"blocks":[{"type":"rich_text","block_id":"p/tR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Traits (kinda)"}]}]}],"thread_ts":"1616179820.224100","parent_user_id":"U01537M2E9W","reactions":[{"name":"heavy_check_mark","users":["UH8A351DJ"],"count":1}]},{"client_msg_id":"d3fea70c-ac69-4438-add3-bca364ae4dc7","type":"message","text":"You can make `A` and `B` inherit from another abstract type, if that's what you are asking for","user":"UM30MT6RF","ts":"1616179920.225300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"t=hD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can make "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"B","style":{"code":true}},{"type":"text","text":" inherit from another abstract type, if that's what you are asking for"}]}]}],"thread_ts":"1616179820.224100","parent_user_id":"U01537M2E9W"},{"client_msg_id":"5a194af2-ae88-4d55-94c5-e61c5f2ef63a","type":"message","text":"I know I can make `A` inherit from `B`, I guess traits is the only answer...","user":"U01537M2E9W","ts":"1616179947.225600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lriqI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I know I can make "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" inherit from "},{"type":"text","text":"B","style":{"code":true}},{"type":"text","text":", I guess traits is the only answer..."}]}]}],"thread_ts":"1616179820.224100","parent_user_id":"U01537M2E9W"},{"client_msg_id":"b6b595b7-9f90-47e5-a877-cabfe540db4c","type":"message","text":"This is the 5th issue ever filed on the julia github page: <https://github.com/JuliaLang/julia/issues/5>","user":"U8D9768Q6","ts":"1616180056.225800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0r6V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is the 5th issue ever filed on the julia github page: "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/5"}]}]}],"thread_ts":"1616179820.224100","parent_user_id":"U01537M2E9W"},{"client_msg_id":"866c2bec-d398-4b97-984a-9789e01e8748","type":"message","text":"Actually, in my case, I don't think traits is the answer and I need to make `B` inherit from `A` in this case because I use `A` to dispatch to another implementation of `isequals` and I don't think traits can do that because I don't own the `isequals` function.","user":"U01537M2E9W","ts":"1616180493.226000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hyH9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Actually, in my case, I don't think traits is the answer and I need to make "},{"type":"text","text":"B","style":{"code":true}},{"type":"text","text":" inherit from "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" in this case because I use "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" to dispatch to another implementation of "},{"type":"text","text":"isequals","style":{"code":true}},{"type":"text","text":" and I don't think traits can do that because I don't own the "},{"type":"text","text":"isequals","style":{"code":true}},{"type":"text","text":" function."}]}]}],"thread_ts":"1616179820.224100","parent_user_id":"U01537M2E9W"},{"client_msg_id":"ee7e9d54-6f42-4b1e-8d22-b411b229dcd7","type":"message","text":"Yes, the current way traits are used requires everyone to cooperate and sprinkle trait dispatchers everywhere.\n\nUsing traits in julia is like trying to use multiple dispatch in Python.","user":"U8D9768Q6","ts":"1616180642.226200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2UB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, the current way traits are used requires everyone to cooperate and sprinkle trait dispatchers everywhere.\n\nUsing traits in julia is like trying to use multiple dispatch in Python."}]}]}],"thread_ts":"1616179820.224100","parent_user_id":"U01537M2E9W"},{"client_msg_id":"6da828ca-df90-49e7-ad22-00adfcd5fa10","type":"message","text":"Hence why that issue is still open","user":"U8D9768Q6","ts":"1616180684.226400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vNgF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hence why that issue is still open"}]}]}],"thread_ts":"1616179820.224100","parent_user_id":"U01537M2E9W"}]