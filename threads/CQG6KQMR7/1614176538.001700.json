[{"client_msg_id":"0b46dd67-b190-473f-bd63-a5440b99b740","type":"message","text":"slackhole question: I recall people discussing the latest solutions for better reproducibility of python environments - what was the consensus? Currently trying to run a piece of code a colleague sent me, and have been down the `conda remove` `conda install` rabbit hole for about an hour now...","user":"U7JQGPGCQ","ts":"1614176538.001700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RgK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"slackhole question: I recall people discussing the latest solutions for better reproducibility of python environments - what was the consensus? Currently trying to run a piece of code a colleague sent me, and have been down the "},{"type":"text","text":"conda remove","style":{"code":true}},{"type":"text","text":" "},{"type":"text","text":"conda install","style":{"code":true}},{"type":"text","text":" rabbit hole for about an hour now..."}]}]}],"thread_ts":"1614176538.001700","reply_count":14,"reply_users_count":3,"latest_reply":"1614202380.004600","reply_users":["UPSSPPBFV","U7JQGPGCQ","U8JP5B9T2"],"subscribed":false},{"client_msg_id":"9efac45a-18e0-4519-b946-7d680019aa4d","type":"message","text":"Is it a general question, or about Python to use with PyCall?","user":"UPSSPPBFV","ts":"1614176687.001800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OMtoL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is it a general question, or about Python to use with PyCall?"}]}]}],"thread_ts":"1614176538.001700","parent_user_id":"U7JQGPGCQ"},{"client_msg_id":"d7b656c4-d868-410e-9739-dc0d515ef99c","type":"message","text":"If generic, I personally use `pyenv` or `asdf` for Python version management, and `poetry` for package management and virtual environment management. It seems to work fine. For reproducibility, Poetry's `pyproject.toml` is pretty much the same as `Pkg`'s `Project.toml`, and its `poetry.lock` corresponds in usage to `Manifest.toml`. Also, Poetry has project generation capacities that are similar to `] generate` and works well with Python's build system.","user":"UPSSPPBFV","ts":"1614176885.002000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OXmch","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If generic, I personally use "},{"type":"text","text":"pyenv","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"asdf","style":{"code":true}},{"type":"text","text":" for Python version management, and "},{"type":"text","text":"poetry","style":{"code":true}},{"type":"text","text":" for package management and virtual environment management. It seems to work fine. For reproducibility, Poetry's "},{"type":"text","text":"pyproject.toml","style":{"code":true}},{"type":"text","text":" is pretty much the same as "},{"type":"text","text":"Pkg","style":{"code":true}},{"type":"text","text":"'s "},{"type":"text","text":"Project.toml","style":{"code":true}},{"type":"text","text":", and its "},{"type":"text","text":"poetry.lock","style":{"code":true}},{"type":"text","text":" corresponds in usage to "},{"type":"text","text":"Manifest.toml","style":{"code":true}},{"type":"text","text":". Also, Poetry has project generation capacities that are similar to "},{"type":"text","text":"] generate","style":{"code":true}},{"type":"text","text":" and works well with Python's build system."}]}]}],"thread_ts":"1614176538.001700","parent_user_id":"U7JQGPGCQ"},{"client_msg_id":"6c325d6b-5fdf-4763-9801-4d2de63ef439","type":"message","text":"If you need to send your project to someone who doesn't use `poetry`, it's also good at producing platform-independent and pip-compatible `requirements.txt` files, which work better than plain pip's `requirements.txt` or even conda's `environment.yml`.","user":"UPSSPPBFV","ts":"1614176992.002200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wPZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you need to send your project to someone who doesn't use "},{"type":"text","text":"poetry","style":{"code":true}},{"type":"text","text":", it's also good at producing platform-independent and pip-compatible "},{"type":"text","text":"requirements.txt","style":{"code":true}},{"type":"text","text":" files, which work better than plain pip's "},{"type":"text","text":"requirements.txt","style":{"code":true}},{"type":"text","text":" or even conda's "},{"type":"text","text":"environment.yml","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1614176538.001700","parent_user_id":"U7JQGPGCQ"},{"client_msg_id":"8fd9dfd5-9fe4-4fa6-ae6a-61824acfb90b","type":"message","text":"Also, `poetry` dependency resolution algorithm is very good. Better than plain `pip`'s or even `pipenv`'s.","user":"UPSSPPBFV","ts":"1614177113.002400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iKvP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, "},{"type":"text","text":"poetry","style":{"code":true}},{"type":"text","text":" dependency resolution algorithm is very good. Better than plain "},{"type":"text","text":"pip","style":{"code":true}},{"type":"text","text":"'s or even "},{"type":"text","text":"pipenv","style":{"code":true}},{"type":"text","text":"'s."}]}]}],"thread_ts":"1614176538.001700","parent_user_id":"U7JQGPGCQ"},{"client_msg_id":"3e55bf66-dd0c-4bc4-8219-81a841483e27","type":"message","text":"Not sure if there's a consensus at the moment though. Other people still seem to prefer `pipenv` to `poetry` (`pipenv` used to be my preference too, but it's too slow and buggy for my taste).  Others prefer `conda` still. Even others are happy with plain `pip`.","user":"UPSSPPBFV","ts":"1614177165.002600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hH8+0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not sure if there's a consensus at the moment though. Other people still seem to prefer "},{"type":"text","text":"pipenv","style":{"code":true}},{"type":"text","text":" to "},{"type":"text","text":"poetry","style":{"code":true}},{"type":"text","text":" ("},{"type":"text","text":"pipenv","style":{"code":true}},{"type":"text","text":" used to be my preference too, but it's too slow and buggy for my taste).  Others prefer "},{"type":"text","text":"conda","style":{"code":true}},{"type":"text","text":" still. Even others are happy with plain "},{"type":"text","text":"pip","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1614176538.001700","parent_user_id":"U7JQGPGCQ"},{"client_msg_id":"b76b52c6-5989-4592-8856-dba0a2835804","type":"message","text":"And by the way, the story around dependency management and virtual environments in Python is changing fast. The latest versions of Python have implemented some changes in `pip`, including a better dependency resolution algorithm (not sure how it stacks compared to `poetry`'s) and support for folder-local `site-packages/` folder, which allow for a more lightweight (for Python standards) way of handling environments.","user":"UPSSPPBFV","ts":"1614177352.002800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ldhjk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And by the way, the story around dependency management and virtual environments in Python is changing fast. The latest versions of Python have implemented some changes in "},{"type":"text","text":"pip","style":{"code":true}},{"type":"text","text":", including a better dependency resolution algorithm (not sure how it stacks compared to "},{"type":"text","text":"poetry","style":{"code":true}},{"type":"text","text":"'s) and support for folder-local "},{"type":"text","text":"site-packages/","style":{"code":true}},{"type":"text","text":" folder, which allow for a more lightweight (for Python standards) way of handling environments."}]}]}],"thread_ts":"1614176538.001700","parent_user_id":"U7JQGPGCQ"},{"client_msg_id":"a1a892c0-150c-4b60-9342-06d18d368469","type":"message","text":"So I guess there's just no consensus at the moment because things are moving fast, and people are waiting to see the story stabilise before making a strong commitment to one tool or another.","user":"UPSSPPBFV","ts":"1614177496.003000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VXP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So I guess there's just no consensus at the moment because things are moving fast, and people are waiting to see the story stabilise before making a strong commitment to one tool or another."}]}]}],"thread_ts":"1614176538.001700","parent_user_id":"U7JQGPGCQ","reactions":[{"name":"+1","users":["U7JQGPGCQ"],"count":1}]},{"client_msg_id":"f0033252-8b8b-48e8-8d13-768556ebdc2a","type":"message","text":"Nice, thanks - looks like I'll tell my team to start using poetry whenever they send me stuff","user":"U7JQGPGCQ","ts":"1614184257.003300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=kf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Nice, thanks - looks like I'll tell my team to start using poetry whenever they send me stuff"}]}]}],"thread_ts":"1614176538.001700","parent_user_id":"U7JQGPGCQ"},{"client_msg_id":"ba51fd3a-8f1f-415d-91bb-6c447f78c878","type":"message","text":"This is all very helpful - can poetry also deal with non-python dendencies? That's one thing `conda` has that can be pretty useful, though basically everything else about it drives me batty. There are also some python packagages I often need that are _only_ found in `conda` channels, not in pypi","user":"U8JP5B9T2","ts":"1614193708.003500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XC4t1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is all very helpful - can poetry also deal with non-python dendencies? That's one thing "},{"type":"text","text":"conda","style":{"code":true}},{"type":"text","text":" has that can be pretty useful, though basically everything else about it drives me batty. There are also some python packagages I often need that are "},{"type":"text","text":"only","style":{"italic":true}},{"type":"text","text":" found in "},{"type":"text","text":"conda","style":{"code":true}},{"type":"text","text":" channels, not in pypi"}]}]}],"thread_ts":"1614176538.001700","parent_user_id":"U7JQGPGCQ"},{"client_msg_id":"314b1cd5-c53e-4c97-8571-10c3ee2d67e8","type":"message","text":"Unfortunately, Poetry simply uses the pypi repositories. So it handles packages the same as pip. Binaries can be handled if packages are built as wheels. But that's the responsibility of the package maintainer.","user":"UPSSPPBFV","ts":"1614195867.003700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Tkid7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Unfortunately, Poetry simply uses the pypi repositories. So it handles packages the same as pip. Binaries can be handled if packages are built as wheels. But that's the responsibility of the package maintainer."}]}]}],"thread_ts":"1614176538.001700","parent_user_id":"U7JQGPGCQ"},{"client_msg_id":"ed437bf1-2e4f-4ccb-b2f6-200d3a9b2763","type":"message","text":"And indeed, there are packages that are only available via `conda`, just as there are packages that are only available via `pip`. It's a problem when an ecosystem gets split like that...","user":"UPSSPPBFV","ts":"1614196671.003900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/dgTG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And indeed, there are packages that are only available via "},{"type":"text","text":"conda","style":{"code":true}},{"type":"text","text":", just as there are packages that are only available via "},{"type":"text","text":"pip","style":{"code":true}},{"type":"text","text":". It's a problem when an ecosystem gets split like that..."}]}]}],"thread_ts":"1614176538.001700","parent_user_id":"U7JQGPGCQ"},{"client_msg_id":"015ac7fb-c9ff-4658-9b32-1dc83f83659a","type":"message","text":"At least with pip-only I can do `conda install pip` :smile:\n\nGod that ecosystem is annoying","user":"U8JP5B9T2","ts":"1614198201.004100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R3oGw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"At least with pip-only I can do "},{"type":"text","text":"conda install pip","style":{"code":true}},{"type":"text","text":" "},{"type":"emoji","name":"smile"},{"type":"text","text":"\n\nGod that ecosystem is annoying"}]}]}],"thread_ts":"1614176538.001700","parent_user_id":"U7JQGPGCQ"},{"client_msg_id":"3494d08b-f726-4d81-98a3-02a893d966db","type":"message","text":"True. Although you then get the joy that is getting pip packages and conda packages to play well together. I've stopped even trying :zany_face:. But yeah, that's what you get when a language gets developed without thinking in advance about package management... And people wonder why I don't like Python...","user":"UPSSPPBFV","ts":"1614198375.004300","team":"T68168MUP","edited":{"user":"UPSSPPBFV","ts":"1614198393.000000"},"blocks":[{"type":"rich_text","block_id":"vNXk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"True. Although you then get the joy that is getting pip packages and conda packages to play well together. I've stopped even trying "},{"type":"emoji","name":"zany_face"},{"type":"text","text":". But yeah, that's what you get when a language gets developed without thinking in advance about package management... And people wonder why I don't like Python..."}]}]}],"thread_ts":"1614176538.001700","parent_user_id":"U7JQGPGCQ"},{"client_msg_id":"aa102f5d-dda4-4e49-a8ea-f5c4491a52a2","type":"message","text":"If you don't know what good things are possible (eg julia), it's easy to compare conda to pip and think \"wow, so good. What else could you ask for?\"","user":"U8JP5B9T2","ts":"1614202380.004600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VfFpZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you don't know what good things are possible (eg julia), it's easy to compare conda to pip and think \"wow, so good. What else could you ask for?\""}]}]}],"thread_ts":"1614176538.001700","parent_user_id":"U7JQGPGCQ"}]