[{"client_msg_id":"0b46dd67-b190-473f-bd63-a5440b99b740","type":"message","text":"slackhole question: I recall people discussing the latest solutions for better reproducibility of python environments - what was the consensus? Currently trying to run a piece of code a colleague sent me, and have been down the `conda remove` `conda install` rabbit hole for about an hour now...","user":"U7JQGPGCQ","ts":"1614176538.001700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RgK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"slackhole question: I recall people discussing the latest solutions for better reproducibility of python environments - what was the consensus? Currently trying to run a piece of code a colleague sent me, and have been down the "},{"type":"text","text":"conda remove","style":{"code":true}},{"type":"text","text":" "},{"type":"text","text":"conda install","style":{"code":true}},{"type":"text","text":" rabbit hole for about an hour now..."}]}]}],"thread_ts":"1614176538.001700","reply_count":9,"reply_users_count":3,"latest_reply":"1614193708.003500","reply_users":["UPSSPPBFV","U7JQGPGCQ","U8JP5B9T2"],"subscribed":false},{"client_msg_id":"9efac45a-18e0-4519-b946-7d680019aa4d","type":"message","text":"Is it a general question, or about Python to use with PyCall?","user":"UPSSPPBFV","ts":"1614176687.001800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OMtoL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is it a general question, or about Python to use with PyCall?"}]}]}],"thread_ts":"1614176538.001700","parent_user_id":"U7JQGPGCQ"},{"client_msg_id":"d7b656c4-d868-410e-9739-dc0d515ef99c","type":"message","text":"If generic, I personally use `pyenv` or `asdf` for Python version management, and `poetry` for package management and virtual environment management. It seems to work fine. For reproducibility, Poetry's `pyproject.toml` is pretty much the same as `Pkg`'s `Project.toml`, and its `poetry.lock` corresponds in usage to `Manifest.toml`. Also, Poetry has project generation capacities that are similar to `] generate` and works well with Python's build system.","user":"UPSSPPBFV","ts":"1614176885.002000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OXmch","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If generic, I personally use "},{"type":"text","text":"pyenv","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"asdf","style":{"code":true}},{"type":"text","text":" for Python version management, and "},{"type":"text","text":"poetry","style":{"code":true}},{"type":"text","text":" for package management and virtual environment management. It seems to work fine. For reproducibility, Poetry's "},{"type":"text","text":"pyproject.toml","style":{"code":true}},{"type":"text","text":" is pretty much the same as "},{"type":"text","text":"Pkg","style":{"code":true}},{"type":"text","text":"'s "},{"type":"text","text":"Project.toml","style":{"code":true}},{"type":"text","text":", and its "},{"type":"text","text":"poetry.lock","style":{"code":true}},{"type":"text","text":" corresponds in usage to "},{"type":"text","text":"Manifest.toml","style":{"code":true}},{"type":"text","text":". Also, Poetry has project generation capacities that are similar to "},{"type":"text","text":"] generate","style":{"code":true}},{"type":"text","text":" and works well with Python's build system."}]}]}],"thread_ts":"1614176538.001700","parent_user_id":"U7JQGPGCQ"},{"client_msg_id":"6c325d6b-5fdf-4763-9801-4d2de63ef439","type":"message","text":"If you need to send your project to someone who doesn't use `poetry`, it's also good at producing platform-independent and pip-compatible `requirements.txt` files, which work better than plain pip's `requirements.txt` or even conda's `environment.yml`.","user":"UPSSPPBFV","ts":"1614176992.002200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wPZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you need to send your project to someone who doesn't use "},{"type":"text","text":"poetry","style":{"code":true}},{"type":"text","text":", it's also good at producing platform-independent and pip-compatible "},{"type":"text","text":"requirements.txt","style":{"code":true}},{"type":"text","text":" files, which work better than plain pip's "},{"type":"text","text":"requirements.txt","style":{"code":true}},{"type":"text","text":" or even conda's "},{"type":"text","text":"environment.yml","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1614176538.001700","parent_user_id":"U7JQGPGCQ"},{"client_msg_id":"8fd9dfd5-9fe4-4fa6-ae6a-61824acfb90b","type":"message","text":"Also, `poetry` dependency resolution algorithm is very good. Better than plain `pip`'s or even `pipenv`'s.","user":"UPSSPPBFV","ts":"1614177113.002400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iKvP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, "},{"type":"text","text":"poetry","style":{"code":true}},{"type":"text","text":" dependency resolution algorithm is very good. Better than plain "},{"type":"text","text":"pip","style":{"code":true}},{"type":"text","text":"'s or even "},{"type":"text","text":"pipenv","style":{"code":true}},{"type":"text","text":"'s."}]}]}],"thread_ts":"1614176538.001700","parent_user_id":"U7JQGPGCQ"},{"client_msg_id":"3e55bf66-dd0c-4bc4-8219-81a841483e27","type":"message","text":"Not sure if there's a consensus at the moment though. Other people still seem to prefer `pipenv` to `poetry` (`pipenv` used to be my preference too, but it's too slow and buggy for my taste).  Others prefer `conda` still. Even others are happy with plain `pip`.","user":"UPSSPPBFV","ts":"1614177165.002600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hH8+0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not sure if there's a consensus at the moment though. Other people still seem to prefer "},{"type":"text","text":"pipenv","style":{"code":true}},{"type":"text","text":" to "},{"type":"text","text":"poetry","style":{"code":true}},{"type":"text","text":" ("},{"type":"text","text":"pipenv","style":{"code":true}},{"type":"text","text":" used to be my preference too, but it's too slow and buggy for my taste).  Others prefer "},{"type":"text","text":"conda","style":{"code":true}},{"type":"text","text":" still. Even others are happy with plain "},{"type":"text","text":"pip","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1614176538.001700","parent_user_id":"U7JQGPGCQ"},{"client_msg_id":"b76b52c6-5989-4592-8856-dba0a2835804","type":"message","text":"And by the way, the story around dependency management and virtual environments in Python is changing fast. The latest versions of Python have implemented some changes in `pip`, including a better dependency resolution algorithm (not sure how it stacks compared to `poetry`'s) and support for folder-local `site-packages/` folder, which allow for a more lightweight (for Python standards) way of handling environments.","user":"UPSSPPBFV","ts":"1614177352.002800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ldhjk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And by the way, the story around dependency management and virtual environments in Python is changing fast. The latest versions of Python have implemented some changes in "},{"type":"text","text":"pip","style":{"code":true}},{"type":"text","text":", including a better dependency resolution algorithm (not sure how it stacks compared to "},{"type":"text","text":"poetry","style":{"code":true}},{"type":"text","text":"'s) and support for folder-local "},{"type":"text","text":"site-packages/","style":{"code":true}},{"type":"text","text":" folder, which allow for a more lightweight (for Python standards) way of handling environments."}]}]}],"thread_ts":"1614176538.001700","parent_user_id":"U7JQGPGCQ"},{"client_msg_id":"a1a892c0-150c-4b60-9342-06d18d368469","type":"message","text":"So I guess there's just no consensus at the moment because things are moving fast, and people are waiting to see the story stabilise before making a strong commitment to one tool or another.","user":"UPSSPPBFV","ts":"1614177496.003000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VXP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So I guess there's just no consensus at the moment because things are moving fast, and people are waiting to see the story stabilise before making a strong commitment to one tool or another."}]}]}],"thread_ts":"1614176538.001700","parent_user_id":"U7JQGPGCQ","reactions":[{"name":"+1","users":["U7JQGPGCQ"],"count":1}]},{"client_msg_id":"f0033252-8b8b-48e8-8d13-768556ebdc2a","type":"message","text":"Nice, thanks - looks like I'll tell my team to start using poetry whenever they send me stuff","user":"U7JQGPGCQ","ts":"1614184257.003300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=kf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Nice, thanks - looks like I'll tell my team to start using poetry whenever they send me stuff"}]}]}],"thread_ts":"1614176538.001700","parent_user_id":"U7JQGPGCQ"},{"client_msg_id":"ba51fd3a-8f1f-415d-91bb-6c447f78c878","type":"message","text":"This is all very helpful - can poetry also deal with non-python dendencies? That's one thing `conda` has that can be pretty useful, though basically everything else about it drives me batty. There are also some python packagages I often need that are _only_ found in `conda` channels, not in pypi","user":"U8JP5B9T2","ts":"1614193708.003500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XC4t1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is all very helpful - can poetry also deal with non-python dendencies? That's one thing "},{"type":"text","text":"conda","style":{"code":true}},{"type":"text","text":" has that can be pretty useful, though basically everything else about it drives me batty. There are also some python packagages I often need that are "},{"type":"text","text":"only","style":{"italic":true}},{"type":"text","text":" found in "},{"type":"text","text":"conda","style":{"code":true}},{"type":"text","text":" channels, not in pypi"}]}]}],"thread_ts":"1614176538.001700","parent_user_id":"U7JQGPGCQ"}]