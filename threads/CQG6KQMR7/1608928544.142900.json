[{"type":"message","text":"","user":"USU9FRPEU","ts":"1608928544.142900","team":"T68168MUP","attachments":[{"fallback":"[December 21st, 2020 8:17 PM] markkitt: Does anyone have an opinion if Julia's `range` ends up taking a distinct path from Python's `range`?\n\nPython current a has `range` defined as either `range(stop)` or `range(start, stop, [step])` where `stop` is not included in the resulting sequence. All arguments have to be integers in Python.\n\n```In [26]: [i for i in range(5)]\nOut[26]: [0, 1, 2, 3, 4]\n\nIn [27]: [i for i in range(1,5)]\nOut[27]: [1, 2, 3, 4]\n\nIn [28]: [i for i in range(1,5,3)]\nOut[28]: [1, 4]\n\nIn [29]: [i for i in range(1,5,4)]\nOut[29]: [1]\n\nIn [30]: [i for i in range(1,5,2)]\nOut[30]: [1, 3]```\nJulia's range current requires keywords to explicitly indicate, `stop`, `length` , or `step`. A proposed change is to adopt a 3-positional argument version of `range(start, stop, length)` which is inclusive of `stop`. These arguments can be any real value.\n\nWith some extrapolation:\n```julia&gt; range(stop) = 1:stop\nrange (generic function with 2 methods)\n\njulia&gt; range(start, stop) = start:stop\nrange (generic function with 2 methods)\n\njulia&gt; range(start, stop, length) = range(start, stop, length = length)\nrange (generic function with 3 methods)\n\njulia&gt; [i for i in range(5)]\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n\njulia&gt; [i for i in range(1,5)]\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n\njulia&gt; [i for i in range(1,5,3)]\n3-element Array{Float64,1}:\n 1.0\n 3.0\n 5.0\n\njulia&gt; [i for i in range(1,5,4)]\n4-element Array{Float64,1}:\n 1.0\n 2.3333333333333335\n 3.6666666666666665\n 5.0\n\njulia&gt; [i for i in range(1,5,2)]\n2-element Array{Float64,1}:\n 1.0\n 5.0```\n<https://github.com/JuliaLang/julia/issues/38750>","ts":"1608599871.032100","author_id":"USU9FRPEU","author_subname":"Mark Kittisopikul","channel_id":"C6EP6C14Z","channel_name":"pyjulia","is_msg_unfurl":true,"text":"Does anyone have an opinion if Julia's `range` ends up taking a distinct path from Python's `range`?\n\nPython current a has `range` defined as either `range(stop)` or `range(start, stop, [step])` where `stop` is not included in the resulting sequence. All arguments have to be integers in Python.\n\n```In [26]: [i for i in range(5)]\nOut[26]: [0, 1, 2, 3, 4]\n\nIn [27]: [i for i in range(1,5)]\nOut[27]: [1, 2, 3, 4]\n\nIn [28]: [i for i in range(1,5,3)]\nOut[28]: [1, 4]\n\nIn [29]: [i for i in range(1,5,4)]\nOut[29]: [1]\n\nIn [30]: [i for i in range(1,5,2)]\nOut[30]: [1, 3]```\nJulia's range current requires keywords to explicitly indicate, `stop`, `length` , or `step`. A proposed change is to adopt a 3-positional argument version of `range(start, stop, length)` which is inclusive of `stop`. These arguments can be any real value.\n\nWith some extrapolation:\n```julia&gt; range(stop) = 1:stop\nrange (generic function with 2 methods)\n\njulia&gt; range(start, stop) = start:stop\nrange (generic function with 2 methods)\n\njulia&gt; range(start, stop, length) = range(start, stop, length = length)\nrange (generic function with 3 methods)\n\njulia&gt; [i for i in range(5)]\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n\njulia&gt; [i for i in range(1,5)]\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n\njulia&gt; [i for i in range(1,5,3)]\n3-element Array{Float64,1}:\n 1.0\n 3.0\n 5.0\n\njulia&gt; [i for i in range(1,5,4)]\n4-element Array{Float64,1}:\n 1.0\n 2.3333333333333335\n 3.6666666666666665\n 5.0\n\njulia&gt; [i for i in range(1,5,2)]\n2-element Array{Float64,1}:\n 1.0\n 5.0```\n<https://github.com/JuliaLang/julia/issues/38750>","author_name":"Mark Kittisopikul","author_link":"https://julialang.slack.com/team/USU9FRPEU","author_icon":"https://avatars.slack-edge.com/2020-01-21/906110549521_7833cc5b4b6e7c66970e_48.jpg","mrkdwn_in":["text"],"color":"D0D0D0","from_url":"https://julialang.slack.com/archives/C6EP6C14Z/p1608599871032100","is_share":true,"footer":"Posted in #pyjulia"}],"thread_ts":"1608928544.142900","reply_count":10,"reply_users_count":4,"latest_reply":"1609056819.144800","reply_users":["U01CQTKB86N","USU9FRPEU","U8JP5B9T2","U67G3QRJM"],"subscribed":false},{"client_msg_id":"28e7f7c8-44cd-4245-a47d-58cf8d0deca9","type":"message","text":"I don’t really have an opinion on the syntax itself as long as you keep often used versions of it short and less often used versions clear.","user":"U01CQTKB86N","ts":"1608931132.143000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PDmWj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don’t really have an opinion on the syntax itself as long as you keep often used versions of it short and less often used versions clear."}]}]}],"thread_ts":"1608928544.142900","parent_user_id":"USU9FRPEU"},{"client_msg_id":"ddc1fed8-11f9-491f-a57d-2ed7efd6a0c2","type":"message","text":"I think clear is what I'm wondering about the most","user":"USU9FRPEU","ts":"1608933585.143200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EhG0O","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think clear is what I'm wondering about the most"}]}]}],"thread_ts":"1608928544.142900","parent_user_id":"USU9FRPEU"},{"client_msg_id":"78b55be9-f79e-4337-9cf9-ce74879fb5a6","type":"message","text":"`range( length, start =&gt; stop)`  That's my preferred syntax at the moment","user":"USU9FRPEU","ts":"1608933636.143400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O=h1f","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"range( length, start => stop)","style":{"code":true}},{"type":"text","text":"  That's my preferred syntax at the moment"}]}]}],"thread_ts":"1608928544.142900","parent_user_id":"USU9FRPEU"},{"client_msg_id":"d0a83c4b-56b2-46f4-812a-c846e39809a2","type":"message","text":"`range( start =&gt; stop , length )` also is compatible with that","user":"USU9FRPEU","ts":"1608933667.143600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5B/P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"range( start => stop , length )","style":{"code":true}},{"type":"text","text":" also is compatible with that"}]}]}],"thread_ts":"1608928544.142900","parent_user_id":"USU9FRPEU"},{"client_msg_id":"b083ae4a-b42d-4e1b-a9e2-c33dc4327b5e","type":"message","text":"`range(5)` I don't like. It took me a long time to get off of the python habit of doing eg. `for i in length(thing)`, but now that I have, it really seems better to be explicit.\n\nThen again, the `range()` call makes it explicit, so maybe it's ok","user":"U8JP5B9T2","ts":"1608952230.143800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SRBnR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"range(5)","style":{"code":true}},{"type":"text","text":" I don't like. It took me a long time to get off of the python habit of doing eg. "},{"type":"text","text":"for i in length(thing)","style":{"code":true}},{"type":"text","text":", but now that I have, it really seems better to be explicit.\n\nThen again, the "},{"type":"text","text":"range()","style":{"code":true}},{"type":"text","text":" call makes it explicit, so maybe it's ok"}]}]}],"thread_ts":"1608928544.142900","parent_user_id":"USU9FRPEU"},{"client_msg_id":"a09aedea-6f3b-4276-b84e-f5511ab4f5cd","type":"message","text":"I mostly just want `range` to make some sense. It is very difficult to use at the moment, and for many cases `start:step:stop` works pretty well. The one place it does not work smoothly is when you need to specify `length` . I would end up usually doing `start + (0:length-1)*step` or `step = (stop - start)/(length-1)`, and then `start:step:stop`","user":"USU9FRPEU","ts":"1608957129.144000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VQgfh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mostly just want "},{"type":"text","text":"range","style":{"code":true}},{"type":"text","text":" to make some sense. It is very difficult to use at the moment, and for many cases "},{"type":"text","text":"start:step:stop","style":{"code":true}},{"type":"text","text":" works pretty well. The one place it does not work smoothly is when you need to specify "},{"type":"text","text":"length","style":{"code":true}},{"type":"text","text":" . I would end up usually doing "},{"type":"text","text":"start + (0:length-1)*step","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"step = (stop - start)/(length-1)","style":{"code":true}},{"type":"text","text":", and then "},{"type":"text","text":"start:step:stop","style":{"code":true}}]}]}],"thread_ts":"1608928544.142900","parent_user_id":"USU9FRPEU"},{"client_msg_id":"848b4eb1-956e-4273-825d-f71e249a8ff9","type":"message","text":"I believe that I would especially dislike it if there’s something in Python and Julia that reads exactly the same, but means a different thing. Some things are ok, it can be assumed that everyone has got over the issue of arrays starting at index 1 instead of 0. So range by default starting from 1 in Julia instead of 0 in Python could be logical.","user":"U01CQTKB86N","ts":"1608977505.144200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"42C/8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I believe that I would especially dislike it if there’s something in Python and Julia that reads exactly the same, but means a different thing. Some things are ok, it can be assumed that everyone has got over the issue of arrays starting at index 1 instead of 0. So range by default starting from 1 in Julia instead of 0 in Python could be logical."}]}]}],"thread_ts":"1608928544.142900","parent_user_id":"USU9FRPEU"},{"client_msg_id":"a51cd755-7a54-4d81-a6f2-ba3ed5bb0914","type":"message","text":"<@USU9FRPEU> There's a length keyword argument for this?","user":"U67G3QRJM","ts":"1609009703.144400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OI23","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"USU9FRPEU"},{"type":"text","text":" There's a length keyword argument for this?"}]}]}],"thread_ts":"1608928544.142900","parent_user_id":"USU9FRPEU"},{"client_msg_id":"c1b9204a-7d93-4e1e-8b35-159ef0f8585b","type":"message","text":"Yes, I'm aware of the keyword argument, although trying to understand how to make this work from the current documentation is a bit harrowing I think.\n```julia&gt; range(0, 5; length = 3)\n0.0:2.5:5.0```\nThe proposal in <https://github.com/JuliaLang/julia/issues/38750> is to create a 3rd positional argument for `length`.\n\nThe 3 positional argument `range`  would then be the first fully positional argument version of `range` that Julia has. Currently, two positional arguments does not work.\n```julia&gt; range(1, 5)\nERROR: ArgumentError: At least one of `length` or `step` must be specified\nStacktrace:\n [1] _range2(::Int64, ::Nothing, ::Int64, ::Nothing) at .\\range.jl:97\n [2] range(::Int64, ::Int64; length::Nothing, step::Nothing) at .\\range.jl:94\n [3] range(::Int64, ::Int64) at .\\range.jl:94\n [4] top-level scope at REPL[6]:1```\n","user":"USU9FRPEU","ts":"1609056685.144600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EcF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, I'm aware of the keyword argument, although trying to understand how to make this work from the current documentation is a bit harrowing I think.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> range(0, 5; length = 3)\n0.0:2.5:5.0"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"The proposal in "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/38750"},{"type":"text","text":" is to create a 3rd positional argument for "},{"type":"text","text":"length","style":{"code":true}},{"type":"text","text":".\n\nThe 3 positional argument "},{"type":"text","text":"range","style":{"code":true}},{"type":"text","text":"  would then be the first fully positional argument version of "},{"type":"text","text":"range","style":{"code":true}},{"type":"text","text":" that Julia has. Currently, two positional arguments does not work.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> range(1, 5)\nERROR: ArgumentError: At least one of `length` or `step` must be specified\nStacktrace:\n [1] _range2(::Int64, ::Nothing, ::Int64, ::Nothing) at .\\range.jl:97\n [2] range(::Int64, ::Int64; length::Nothing, step::Nothing) at .\\range.jl:94\n [3] range(::Int64, ::Int64) at .\\range.jl:94\n [4] top-level scope at REPL[6]:1"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1608928544.142900","parent_user_id":"USU9FRPEU"},{"client_msg_id":"de99080d-ef34-4e45-8c21-a630a40b2411","type":"message","text":"I'm thinking ahead here, but if we accept a three positional argument `range(start, stop, length)` are there further implications for two and one argument versions of `range` in the future?","user":"USU9FRPEU","ts":"1609056819.144800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FaM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm thinking ahead here, but if we accept a three positional argument "},{"type":"text","text":"range(start, stop, length)","style":{"code":true}},{"type":"text","text":" are there further implications for two and one argument versions of "},{"type":"text","text":"range","style":{"code":true}},{"type":"text","text":" in the future?"}]}]}],"thread_ts":"1608928544.142900","parent_user_id":"USU9FRPEU"}]