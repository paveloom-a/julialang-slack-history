[{"client_msg_id":"b77a4196-3d6a-4f08-b224-2c61dd149329","type":"message","text":"Is anyone here familiar with Nix/Guix? I'm trying to better understand the difference in approaches taking by Nix/Guix and BinaryBuilder, especially in the context of (1) patching binaries and (2) the handling of machine-specific libs like libGL.","user":"ULR33SMHB","ts":"1616779363.073400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9ywfV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is anyone here familiar with Nix/Guix? I'm trying to better understand the difference in approaches taking by Nix/Guix and BinaryBuilder, especially in the context of (1) patching binaries and (2) the handling of machine-specific libs like libGL."}]}]}],"thread_ts":"1616779363.073400","reply_count":29,"reply_users_count":4,"latest_reply":"1616896085.093700","reply_users":["U6A936746","ULR33SMHB","UDB26738Q","U677R5Q5A"],"is_locked":false,"subscribed":false},{"client_msg_id":"ce8d55e8-2500-4793-8374-87dfc0f9dacf","type":"message","text":"<@U677R5Q5A>","user":"U6A936746","ts":"1616779819.073700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wZdRA","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U677R5Q5A"}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB"},{"client_msg_id":"93a925fe-a172-40a0-a44d-6da381ae0172","type":"message","text":"So far I've gathered (possibly incorrectly) that:\n\n1) Nix loads all libraries from /nix/store, while binaries built with BinaryBuilder load most, but not all, libraries from ~/julia/artifacts. Looking at dllist() for GLFW, for example, it loads \"libdl.so.2, libpthread.so.0, libc.so.6, ld-linux-x86-64.so.2, librt.so.1, libm.so.6, libXxf86vm.so.1\" from /lib.\n2) Nix patches RUNPATH and hardcoded dlopen calls to point to libraries under /nix/store. BinaryBuilder patches\nRUNPATH to $ORIGIN (unsure what it does for hardcoded dlopen calls).\n3) Nix uses a custom ld that excludes /etc/ld.so.cache and the default search paths. BinaryBuilder doesn't (and so can fallback to system libraries that aren't shipped as artifacts).\n4) BinaryBuilder ships libGL through Libglvnd_jll rather than relying on the system's libGL/drivers.\n\nWhatever black magic y'all have put into BinaryBuilder seems to just work. Especially when it comes to graphical packages that depend on libGL. I'm hoping to learn what that black magic is and how it differs from what Nix/Nixpkgs does so that I can try and emulate it over there.","user":"ULR33SMHB","ts":"1616786689.076600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"stby","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So far I've gathered (possibly incorrectly) that:\n\n1) Nix loads all libraries from /nix/store, while binaries built with BinaryBuilder load most, but not all, libraries from ~/julia/artifacts. Looking at dllist() for GLFW, for example, it loads \"libdl.so.2, libpthread.so.0, libc.so.6, ld-linux-x86-64.so.2, librt.so.1, libm.so.6, libXxf86vm.so.1\" from /lib.\n2) Nix patches RUNPATH and hardcoded dlopen calls to point to libraries under /nix/store. BinaryBuilder patches\nRUNPATH to $ORIGIN (unsure what it does for hardcoded dlopen calls).\n3) Nix uses a custom ld that excludes /etc/ld.so.cache and the default search paths. BinaryBuilder doesn't (and so can fallback to system libraries that aren't shipped as artifacts).\n4) BinaryBuilder ships libGL through Libglvnd_jll rather than relying on the system's libGL/drivers.\n\nWhatever black magic y'all have put into BinaryBuilder seems to just work. Especially when it comes to graphical packages that depend on libGL. I'm hoping to learn what that black magic is and how it differs from what Nix/Nixpkgs does so that I can try and emulate it over there."}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB"},{"client_msg_id":"b0278f05-7d96-414a-ae6e-6bd4aacb4777","type":"message","text":"I know Pontus is actively working on that for NixOS, so can probably share his tricks","user":"UDB26738Q","ts":"1616786847.076800","team":"T68168MUP","edited":{"user":"UDB26738Q","ts":"1616786871.000000"},"blocks":[{"type":"rich_text","block_id":"fYu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I know Pontus is actively working on that for NixOS, so can probably share his tricks"}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB"},{"client_msg_id":"3bfde80d-1277-4e12-9ba6-276e89698b45","type":"message","text":"my understanding is that running executables is the main issue, but libraries mostly work out-of-the-box","user":"UDB26738Q","ts":"1616786923.077100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uW1RV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"my understanding is that running executables is the main issue, but libraries mostly work out-of-the-box"}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB"},{"client_msg_id":"62d89dc9-f45e-4d2f-a59f-14f194b87895","type":"message","text":"The story for NixOS is a bit better: they patch their glvnd to look under '/run/opengl-driver/lib' and then install machine-specific libGL + deps into their. On non-NixOS/FHS systems that directory doesn't exist, so anything that depends on libGL fails on e.g. Ubuntu. There's ad-hoc attempt to address this (<https://github.com/guibou/nixGL>) by wrapping executables in a script that tries to detect the system's driver versions and install them in a place Nix's patched loader looks, but it's a bit fragile and doesn't work everywhere.","user":"ULR33SMHB","ts":"1616787411.077300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"STF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The story for NixOS is a bit better: they patch their glvnd to look under '/run/opengl-driver/lib' and then install machine-specific libGL + deps into their. On non-NixOS/FHS systems that directory doesn't exist, so anything that depends on libGL fails on e.g. Ubuntu. There's ad-hoc attempt to address this ("},{"type":"link","url":"https://github.com/guibou/nixGL"},{"type":"text","text":") by wrapping executables in a script that tries to detect the system's driver versions and install them in a place Nix's patched loader looks, but it's a bit fragile and doesn't work everywhere."}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB"},{"client_msg_id":"f72a7e57-127d-4cc1-8546-a9f1abfb82a0","type":"message","text":"<@UDB26738Q> are you familiar with how BinaryBuilder/Libglvnd handles (4) above for systems that may require some very specific versions of libGL/CUDA (like the Nvidia Jetson platform)? Does it use system libraries at all?","user":"ULR33SMHB","ts":"1616787497.077500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2aSH","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UDB26738Q"},{"type":"text","text":" are you familiar with how BinaryBuilder/Libglvnd handles (4) above for systems that may require some very specific versions of libGL/CUDA (like the Nvidia Jetson platform)? Does it use system libraries at all?"}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB"},{"client_msg_id":"fe35965a-2466-4546-aca8-e3c8e6ca5c5c","type":"message","text":"I built libglvnd, so I guess I should say I'm familiar: <https://github.com/JuliaPackaging/Yggdrasil/blob/master/L/Libglvnd/build_tarballs.jl> :sweat_smile:","user":"UDB26738Q","ts":"1616787565.077700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zoFOx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I built libglvnd, so I guess I should say I'm familiar: "},{"type":"link","url":"https://github.com/JuliaPackaging/Yggdrasil/blob/master/L/Libglvnd/build_tarballs.jl"},{"type":"text","text":" "},{"type":"emoji","name":"sweat_smile"}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB"},{"client_msg_id":"ffe1e696-73cb-4ca5-9b6b-950823b4322d","type":"message","text":"but we don't use any system library, as far as I know","user":"UDB26738Q","ts":"1616787589.077900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vBl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but we don't use any system library, as far as I know"}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB"},{"client_msg_id":"eaff569f-88bc-4832-a8d0-432db3c2e4f0","type":"message","text":"Ahh that's right. I remember you building that awhile ago when you were trying to help me package that weird mujoco binary.","user":"ULR33SMHB","ts":"1616787617.078100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Cw+g","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ahh that's right. I remember you building that awhile ago when you were trying to help me package that weird mujoco binary."}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB","reactions":[{"name":"+1","users":["UDB26738Q"],"count":1}]},{"client_msg_id":"3f2b0f2b-28b5-408d-b96d-d6d73992e03e","type":"message","text":"I think I have a Jetson somewhere. I'm curious to see if Libglvnd works on that platform.","user":"ULR33SMHB","ts":"1616787647.078400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gC7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think I have a Jetson somewhere. I'm curious to see if Libglvnd works on that platform."}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB"},{"client_msg_id":"51265d4c-8479-48c1-a794-f739afacece8","type":"message","text":"I think you are correct in all that you state <@ULR33SMHB> – although you seem to be more familiar with the loading mechanism than myself. From my own experience, libraries from BinaryBuilder “just works” on NixOS, but executable binaries do not and needs a light touch up from patchelf to work. My plan since autumn has been to construct a patch for Pkg that does this automatically, but being a tenured academic and recent father makes time scarce. I have notes somewhere from discussions with a few core Julia devs that I could share if you want to take a stab at this. My goal is to have a Julia-Nix fork that has a set of minimal patches to make Julia Nix compatible but that are not suitable to upstream: <https://sr.ht/~ninjin/julia-nix/>","user":"U677R5Q5A","ts":"1616816629.084200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"U6ZJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think you are correct in all that you state "},{"type":"user","user_id":"ULR33SMHB"},{"type":"text","text":" – although you seem to be more familiar with the loading mechanism than myself. From my own experience, libraries from BinaryBuilder “just works” on NixOS, but executable binaries do not and needs a light touch up from patchelf to work. My plan since autumn has been to construct a patch for Pkg that does this automatically, but being a tenured academic and recent father makes time scarce. I have notes somewhere from discussions with a few core Julia devs that I could share if you want to take a stab at this. My goal is to have a Julia-Nix fork that has a set of minimal patches to make Julia Nix compatible but that are not suitable to upstream: "},{"type":"link","url":"https://sr.ht/~ninjin/julia-nix/"}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB"},{"client_msg_id":"028921b7-2a66-45cf-9771-ecad2044edd7","type":"message","text":"Created <#C01SM0JR1J7|nix> since we are now a handful of people chatting along about these things in various places.","user":"U677R5Q5A","ts":"1616817776.084400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Pm/0X","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Created "},{"type":"channel","channel_id":"C01SM0JR1J7"},{"type":"text","text":" since we are now a handful of people chatting along about these things in various places."}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB"},{"client_msg_id":"b5be0a40-f4ba-4595-8048-64a22f424243","type":"message","text":"Thanks for the reply <@U677R5Q5A>. I'd love to take a look at those notes and, if it's within my ability, take a stab at it. It seems that there's quite a bit of overlap between Pkg and Nix (usage of patchelf, /nix/store being addressed via input hashes vs ~/julia/compiled being addressed by content hashes, with nix adding support for a content addressable in the next release, BinaryBuilder vs Nix etc.), so it would be nice to share the lessons learned between the two projects.","user":"ULR33SMHB","ts":"1616894541.089800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OSZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks for the reply "},{"type":"user","user_id":"U677R5Q5A"},{"type":"text","text":". I'd love to take a look at those notes and, if it's within my ability, take a stab at it. It seems that there's quite a bit of overlap between Pkg and Nix (usage of patchelf, /nix/store being addressed via input hashes vs ~/julia/compiled being addressed by content hashes, with nix adding support for a content addressable in the next release, BinaryBuilder vs Nix etc.), so it would be nice to share the lessons learned between the two projects."}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB"},{"client_msg_id":"ff6ba347-5243-407d-aa66-cedf06772b6e","type":"message","text":"Concerning your Julia fork, have you seen <https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/compilers/julia/1.5.nix>? There seems to be some overlap there.","user":"ULR33SMHB","ts":"1616894645.090000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0oV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Concerning your Julia fork, have you seen "},{"type":"link","url":"https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/compilers/julia/1.5.nix"},{"type":"text","text":"? There seems to be some overlap there."}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB"},{"client_msg_id":"4a93c73e-03e0-405b-b1a1-a5608f36a049","type":"message","text":"Ah looking at your commit log it seems you're already aware :slightly_smiling_face:","user":"ULR33SMHB","ts":"1616894660.090200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"t28uE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah looking at your commit log it seems you're already aware "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB"},{"client_msg_id":"128b5e8a-82ed-4c1f-b507-bd2cbbd878ae","type":"message","text":"Haha, yes, I am aware. That file is the one I am cleaning up. =)","user":"U677R5Q5A","ts":"1616894871.090400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jJLLj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Haha, yes, I am aware. That file is the one I am cleaning up. =)"}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB"},{"client_msg_id":"b8e5720a-44a7-48e6-8733-948be5018264","type":"message","text":"I think the BinaryBuilder devs will be the best to consult with regarding their approach. In fact, I am not entirely sure how they manage to compile staticly and dump things into `$HOME/.julia`. What I love is the fact that it just works even on NixOS, apart from having to set the interpreter for executable binaries.","user":"U677R5Q5A","ts":"1616895024.090600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VJlLe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think the BinaryBuilder devs will be the best to consult with regarding their approach. In fact, I am not entirely sure how they manage to compile staticly and dump things into "},{"type":"text","text":"$HOME/.julia","style":{"code":true}},{"type":"text","text":". What I love is the fact that it just works even on NixOS, apart from having to set the interpreter for executable binaries."}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB"},{"client_msg_id":"a45019eb-f9bb-44ce-bf3b-0ae1b4a4c6b8","type":"message","text":"Let me go and see if I can find that discussion, I may need a link to it from another dev as it is far gone into the Slack history.","user":"U677R5Q5A","ts":"1616895090.090800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w3Qp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Let me go and see if I can find that discussion, I may need a link to it from another dev as it is far gone into the Slack history."}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB"},{"client_msg_id":"18d2d888-9a91-4331-8b6f-505b911de931","type":"message","text":"<https://julialang.slack.com/archives/CBF3Z1D7V/p1602656492191600?thread_ts=1602646185.191500&amp;cid=CBF3Z1D7V|https://julialang.slack.com/archives/CBF3Z1D7V/p1602656492191600?thread_ts=1602646185.191500&amp;cid=CBF3Z1D7V>","user":"UDB26738Q","ts":"1616895151.091000","team":"T68168MUP","attachments":[{"from_url":"https://julialang.slack.com/archives/CBF3Z1D7V/p1602656492191600?thread_ts=1602646185.191500&amp;cid=CBF3Z1D7V","fallback":"[October 13th, 2020 11:21 PM] mose: Part of the idea of artifacts is to have them immutable, for consistency.\n\nWhat's the problem with NixOS?","ts":"1602656492.191600","author_id":"UDB26738Q","author_subname":"Mosè Giordano","channel_id":"CBF3Z1D7V","channel_name":"pkg-dev","is_msg_unfurl":true,"is_reply_unfurl":true,"text":"Part of the idea of artifacts is to have them immutable, for consistency.\n\nWhat's the problem with NixOS?","author_name":"Mosè Giordano","author_link":"https://julialang.slack.com/team/UDB26738Q","author_icon":"https://secure.gravatar.com/avatar/b1b9938790729d96af6f168d8ce0f917.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-48.png","mrkdwn_in":["text"],"id":1,"original_url":"https://julialang.slack.com/archives/CBF3Z1D7V/p1602656492191600?thread_ts=1602646185.191500&amp;cid=CBF3Z1D7V","footer":"From a thread in #pkg-dev"}],"blocks":[{"type":"rich_text","block_id":"wbkQD","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://julialang.slack.com/archives/CBF3Z1D7V/p1602656492191600?thread_ts=1602646185.191500&cid=CBF3Z1D7V","text":"https://julialang.slack.com/archives/CBF3Z1D7V/p1602656492191600?thread_ts=1602646185.191500&cid=CBF3Z1D7V"}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB","reactions":[{"name":"hearts","users":["U677R5Q5A","ULR33SMHB"],"count":2}]},{"client_msg_id":"dc830407-1fb1-4884-8f58-b4a9a148ce72","type":"message","text":"Yeah it seems like there are some funky things going on in that default.nix. Would you mind explaining the mtime patch? My understanding is it's only required during the build process since the builder sets the mtime to 1 (for reproducibility), specifically for running the tests. But is that not baked into the sysimg and hence no actual precompilation is performed?","user":"ULR33SMHB","ts":"1616895238.091400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3dfQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah it seems like there are some funky things going on in that default.nix. Would you mind explaining the mtime patch? My understanding is it's only required during the build process since the builder sets the mtime to 1 (for reproducibility), specifically for running the tests. But is that not baked into the sysimg and hence no actual precompilation is performed?"}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB"},{"client_msg_id":"0e11d510-39d9-461e-9bd0-868543f89422","type":"message","text":"I actually have that patch marked as “confirm that this is actually needed”.","user":"U677R5Q5A","ts":"1616895453.091700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d3MD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I actually have that patch marked as “confirm that this is actually needed”."}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB"},{"client_msg_id":"76489d9a-2167-43c1-b146-69e23d15b2f9","type":"message","text":"Awesome.","user":"ULR33SMHB","ts":"1616895465.091900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"u/U","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Awesome."}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB"},{"client_msg_id":"9dd3f168-caa3-408d-bd94-eaffa54982e9","type":"message","text":"Concerning this line in your Julia derivation:\n```# Lacks a string table, so we are unable to patch it.\n    rm $out/lib/julia/libccalltest.so.debug```\nI ran across the same thing: <https://github.com/NixOS/nixpkgs/issues/91946#issuecomment-773572068>\n\nI theoretically fixed (see my 2nd comment) it but that whole autopatchelf script is a bit of a mess. It being written in Bash certainly doesn't help its readability.","user":"ULR33SMHB","ts":"1616895491.092100","team":"T68168MUP","edited":{"user":"ULR33SMHB","ts":"1616895600.000000"},"blocks":[{"type":"rich_text","block_id":"YXa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Concerning this line in your Julia derivation:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"# Lacks a string table, so we are unable to patch it.\n    rm $out/lib/julia/libccalltest.so.debug"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I ran across the same thing: "},{"type":"link","url":"https://github.com/NixOS/nixpkgs/issues/91946#issuecomment-773572068"},{"type":"text","text":"\n\nI theoretically fixed (see my 2nd comment) it but that whole autopatchelf script is a bit of a mess. It being written in Bash certainly doesn't help its readability."}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB"},{"client_msg_id":"4d66adc4-a216-46d8-82f6-f1acfa90ea34","type":"message","text":"My guess was the same as yours actually, but the state of the Nix expressions are really bloody dire and a ton of cruft and hacks that either is bad practice or unnecessary.","user":"U677R5Q5A","ts":"1616895521.092400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/YNC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My guess was the same as yours actually, but the state of the Nix expressions are really bloody dire and a ton of cruft and hacks that either is bad practice or unnecessary."}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB"},{"client_msg_id":"3da5a0e2-ee53-4519-9806-478f633aabcd","type":"message","text":"Not sure if I mentioned it somewhere, but the reason I abandoned the `julia-bin` idea was the need to patch the sysimg.","user":"U677R5Q5A","ts":"1616895615.092900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1bQu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not sure if I mentioned it somewhere, but the reason I abandoned the "},{"type":"text","text":"julia-bin","style":{"code":true}},{"type":"text","text":" idea was the need to patch the sysimg."}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB"},{"client_msg_id":"2753a3c1-8299-4b6b-8b88-adffe34708db","type":"message","text":"But you can currently see in <#C01SM0JR1J7|nix> the amount of failures I end up with for 1.6.0 and half of those are Nixpkgs interacting with BinaryBuilder. ;P","user":"U677R5Q5A","ts":"1616895676.093100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jPU7O","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But you can currently see in "},{"type":"channel","channel_id":"C01SM0JR1J7"},{"type":"text","text":" the amount of failures I end up with for 1.6.0 and half of those are Nixpkgs interacting with BinaryBuilder. ;P"}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB"},{"client_msg_id":"c7b7fd59-f958-45b7-b4d9-0bc69e883266","type":"message","text":"Back in about an hour, need to clean my daughters room and guard her for a bit.","user":"U677R5Q5A","ts":"1616895707.093300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wcXg4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Back in about an hour, need to clean my daughters room and guard her for a bit."}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB"},{"client_msg_id":"a155ae5d-db56-4bc1-8086-06a93994e335","type":"message","text":"No worries. I actually wrote my own `julia-bin` derivation:\n```{ stdenvNoCC, tree, glibc, stdenv, fetchurl, version, autoPatchelfHook, url, sha256, binName ? \"julia\"}:\n\nstdenv.mkDerivation {\n  inherit version;\n  pname = \"julia-bin\";\n  \n  src = fetchurl { inherit url sha256; };\n  \n  nativeBuildInputs = [\n    autoPatchelfHook\n  ];\n\n  # Breaks libgit2 and possible other things\n  dontStrip = true;\n\n  buildInputs = [ \n    glibc\n  ];\n\n  dontConfigure = true;\n  dontBuild = true;\n\n  # TODO this doesn't allow multiple julia versions to be installed side-by-side\n  installPhase = ''\n    mkdir -p $out\n    cp -r . $out\n  '';\n}```\nWhich I've been using for months without issue (although I never ran `Base.runtests()`, doing that now actually). What issues did you run into?","user":"ULR33SMHB","ts":"1616895850.093500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jZ0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No worries. I actually wrote my own "},{"type":"text","text":"julia-bin","style":{"code":true}},{"type":"text","text":" derivation:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"{ stdenvNoCC, tree, glibc, stdenv, fetchurl, version, autoPatchelfHook, url, sha256, binName ? \"julia\"}:\n\nstdenv.mkDerivation {\n  inherit version;\n  pname = \"julia-bin\";\n  \n  src = fetchurl { inherit url sha256; };\n  \n  nativeBuildInputs = [\n    autoPatchelfHook\n  ];\n\n  # Breaks libgit2 and possible other things\n  dontStrip = true;\n\n  buildInputs = [ \n    glibc\n  ];\n\n  dontConfigure = true;\n  dontBuild = true;\n\n  # TODO this doesn't allow multiple julia versions to be installed side-by-side\n  installPhase = ''\n    mkdir -p $out\n    cp -r . $out\n  '';\n}"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nWhich I've been using for months without issue (although I never ran "},{"type":"text","text":"Base.runtests()","style":{"code":true}},{"type":"text","text":", doing that now actually). What issues did you run into?"}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB"},{"client_msg_id":"ccc36390-105a-4f8f-94d3-a49080d4fbc8","type":"message","text":"Ah but I'm actually using Ubuntu as my distro so unsure how that would fair on NixOS","user":"ULR33SMHB","ts":"1616896085.093700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fHAAv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah but I'm actually using Ubuntu as my distro so unsure how that would fair on NixOS"}]}]}],"thread_ts":"1616779363.073400","parent_user_id":"ULR33SMHB"}]