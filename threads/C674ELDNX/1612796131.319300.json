[{"client_msg_id":"b2dc25f9-6129-4947-a837-dcaa8d105fc3","type":"message","text":"People of BinaryBuilder...\nI'm confused with one thing...\nMusl C and glib C....\nIf both compile for the same architecture.... example x86_64 linux\nWouldn't the binary created by both musl C and glib C, run in that architecture\nThey're just different libc implementations, not compilers.....\n\nWhy compile with both musl C and glibc?","user":"U01AJUF2GEP","ts":"1612796131.319300","team":"T68168MUP","edited":{"user":"U01AJUF2GEP","ts":"1612796644.000000"},"blocks":[{"type":"rich_text","block_id":"I1rbi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"People of BinaryBuilder...\nI'm confused with one thing...\nMusl C and glib C....\nIf both compile for the same architecture.... example x86_64 linux\nWouldn't the binary created by both musl C and glib C, run in that architecture\nThey're just different libc implementations, not compilers.....\n\nWhy compile with both musl C and glibc?"}]}]}],"thread_ts":"1612796131.319300","reply_count":16,"reply_users_count":4,"latest_reply":"1612806078.323600","reply_users":["UDB26738Q","U01AJUF2GEP","UH24GRBLL","U66GD0880"],"subscribed":false},{"client_msg_id":"a8b3b6b3-a1d5-4894-ad18-31165e1496ac","type":"message","text":"&gt; Why compile with both musl C and glibc in the first place?\nbecause they're different and some users may want to run Julia in musl-based systems","user":"UDB26738Q","ts":"1612796220.319800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ret","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"Why compile with both musl C and glibc in the first place?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nbecause they're different and some users may want to run Julia in musl-based systems"}]}]}],"thread_ts":"1612796131.319300","parent_user_id":"U01AJUF2GEP"},{"client_msg_id":"0b06db5e-0d1f-4247-97c4-0d594aa69a67","type":"message","text":"Hmmm...\nWe just need the binary to run on that architecture right?\nIf we use glibc implementation to create the binary for a specific platform, or just use muslc to build for that platform, wouldn't the binary made by either, just work on that platform?\nWhy use muslc and glibc at the same time?","user":"U01AJUF2GEP","ts":"1612796364.320000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+u8wb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmmm...\nWe just need the binary to run on that architecture right?\nIf we use glibc implementation to create the binary for a specific platform, or just use muslc to build for that platform, wouldn't the binary made by either, just work on that platform?\nWhy use muslc and glibc at the same time?"}]}]}],"thread_ts":"1612796131.319300","parent_user_id":"U01AJUF2GEP"},{"client_msg_id":"9cea3c76-1494-45f7-97a8-7d226ac214b2","type":"message","text":"I mean, binary itself is something on a machine level right?","user":"U01AJUF2GEP","ts":"1612796548.320200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VDLDH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean, binary itself is something on a machine level right?"}]}]}],"thread_ts":"1612796131.319300","parent_user_id":"U01AJUF2GEP"},{"type":"message","subtype":"thread_broadcast","text":"Assume I'm using\nglibc to compile for a platform W, it outputs a binary called gw\nmusl to compile for a platform W, it outputs a binary called mw\nIf `./gw` and `./mw`, both work on W, isn't one of gw or mw enough? Why do we need to build both of them....? What are the consequences of using ./gw on aarch64 Alpine Linux?","user":"U01AJUF2GEP","ts":"1612797050.321000","thread_ts":"1612796131.319300","root":{"client_msg_id":"b2dc25f9-6129-4947-a837-dcaa8d105fc3","type":"message","text":"People of BinaryBuilder...\nI'm confused with one thing...\nMusl C and glib C....\nIf both compile for the same architecture.... example x86_64 linux\nWouldn't the binary created by both musl C and glib C, run in that architecture\nThey're just different libc implementations, not compilers.....\n\nWhy compile with both musl C and glibc?","user":"U01AJUF2GEP","ts":"1612796131.319300","team":"T68168MUP","edited":{"user":"U01AJUF2GEP","ts":"1612796644.000000"},"blocks":[{"type":"rich_text","block_id":"I1rbi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"People of BinaryBuilder...\nI'm confused with one thing...\nMusl C and glib C....\nIf both compile for the same architecture.... example x86_64 linux\nWouldn't the binary created by both musl C and glib C, run in that architecture\nThey're just different libc implementations, not compilers.....\n\nWhy compile with both musl C and glibc?"}]}]}],"thread_ts":"1612796131.319300","reply_count":16,"reply_users_count":4,"latest_reply":"1612806078.323600","reply_users":["UDB26738Q","U01AJUF2GEP","UH24GRBLL","U66GD0880"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"yfw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Assume I'm using\nglibc to compile for a platform W, it outputs a binary called gw\nmusl to compile for a platform W, it outputs a binary called mw\nIf "},{"type":"text","text":"./gw","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"./mw","style":{"code":true}},{"type":"text","text":", both work on W, isn't one of gw or mw enough? Why do we need to build both of them....? What are the consequences of using ./gw on aarch64 Alpine Linux?"}]}]}],"client_msg_id":"e63e60c3-c0c0-455d-9888-573a8dd5595f","edited":{"user":"U01AJUF2GEP","ts":"1612797138.000000"}},{"client_msg_id":"73db91bc-4061-4033-860a-ae447133016b","type":"message","text":"they may dynamically link to libc or musl","user":"UH24GRBLL","ts":"1612797207.321400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZM8bw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"they may dynamically link to libc or musl"}]}]}],"thread_ts":"1612796131.319300","parent_user_id":"U01AJUF2GEP"},{"client_msg_id":"a8fea26c-a280-4a60-9891-66ed2c0f6f71","type":"message","text":"since alpine doesn't have libc (as it's musl based) `gw` may crash if it tries to interact with musl and encounters a discrepancy to libc","user":"UH24GRBLL","ts":"1612797257.321600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kNeD3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"since alpine doesn't have libc (as it's musl based) "},{"type":"text","text":"gw","style":{"code":true}},{"type":"text","text":" may crash if it tries to interact with musl and encounters a discrepancy to libc"}]}]}],"thread_ts":"1612796131.319300","parent_user_id":"U01AJUF2GEP"},{"client_msg_id":"1f11e93e-f059-4291-a7d0-505440ab60a7","type":"message","text":"&gt; if it tries to interact with musl\nAny examples/cases?","user":"U01AJUF2GEP","ts":"1612797319.321800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4E9","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"if it tries to interact with musl"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Any examples/cases?"}]}]}],"thread_ts":"1612796131.319300","parent_user_id":"U01AJUF2GEP"},{"client_msg_id":"62acf920-7063-4ff4-b6ad-40bf368c0924","type":"message","text":"Isn't the binary itself something on a machine level?","user":"U01AJUF2GEP","ts":"1612797426.322000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bQ11","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Isn't the binary itself something on a machine level?"}]}]}],"thread_ts":"1612796131.319300","parent_user_id":"U01AJUF2GEP"},{"client_msg_id":"f9701aa7-5ba3-4ae1-a2fd-2b844a9bde5d","type":"message","text":"if it were statically compiled and without dynamic dependencies it would work, but as I said, if it _does_ link dynamically it can break","user":"UH24GRBLL","ts":"1612797535.322200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bnE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if it were statically compiled and without dynamic dependencies it would work, but as I said, if it "},{"type":"text","text":"does","style":{"italic":true}},{"type":"text","text":" link dynamically it can break"}]}]}],"thread_ts":"1612796131.319300","parent_user_id":"U01AJUF2GEP"},{"client_msg_id":"3c75ad88-5bf1-4a0b-8cf5-7187e05c69d2","type":"message","text":"you're free to try though","user":"UH24GRBLL","ts":"1612797546.322400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZVTEh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you're free to try though"}]}]}],"thread_ts":"1612796131.319300","parent_user_id":"U01AJUF2GEP"},{"client_msg_id":"0edf9034-5037-440e-8c11-2c35412c826f","type":"message","text":"I think I'll have to read on what dynamic dependencies are....\n<@UH24GRBLL> Thanks a lot!","user":"U01AJUF2GEP","ts":"1612797612.322600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Llq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think I'll have to read on what dynamic dependencies are....\n"},{"type":"user","user_id":"UH24GRBLL"},{"type":"text","text":" Thanks a lot!"}]}]}],"thread_ts":"1612796131.319300","parent_user_id":"U01AJUF2GEP"},{"client_msg_id":"4a69e25d-a515-49f7-a35d-9d2927c86431","type":"message","text":"Most executables are dynamic, in that they rely on code that already exists on the system.  They load dynamic libraries for many things, and the fundamental protocol that these libraries use to communicate relies upon them using the same libc.  The libc does things like loads other libraries, sets up function pointers so that you can call functions in other libraries, etc…","user":"U66GD0880","ts":"1612803998.322800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/bY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Most executables are dynamic, in that they rely on code that already exists on the system.  They load dynamic libraries for many things, and the fundamental protocol that these libraries use to communicate relies upon them using the same libc.  The libc does things like loads other libraries, sets up function pointers so that you can call functions in other libraries, etc…"}]}]}],"thread_ts":"1612796131.319300","parent_user_id":"U01AJUF2GEP"},{"client_msg_id":"16ed36e2-1f8d-434b-8584-564030f2cf0a","type":"message","text":"If you build a purely static binary that has _no_ dependencies, does not use any code outside of itself, etc… then yes, you can run it on any machine that has the right processor.  But there are very, very few executables that you will ever find that are built this way, because (a) it’s a little bit restrictive, (b) it can become very wasteful in large applications since each executable will contain _all_ the code, copied into itself.  There is no way to factor code out into a separate library and link it into all the other libraries, since that’s dynamic linking, and (c) it’s not the default way that compilers like to create things.","user":"U66GD0880","ts":"1612804136.323000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DTh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you build a purely static binary that has "},{"type":"text","text":"no","style":{"italic":true}},{"type":"text","text":" dependencies, does not use any code outside of itself, etc… then yes, you can run it on any machine that has the right processor.  But there are very, very few executables that you will ever find that are built this way, because (a) it’s a little bit restrictive, (b) it can become very wasteful in large applications since each executable will contain "},{"type":"text","text":"all","style":{"italic":true}},{"type":"text","text":" the code, copied into itself.  There is no way to factor code out into a separate library and link it into all the other libraries, since that’s dynamic linking, and (c) it’s not the default way that compilers like to create things."}]}]}],"thread_ts":"1612796131.319300","parent_user_id":"U01AJUF2GEP"},{"client_msg_id":"78857ce8-5fb2-4538-b630-8b71ef9063f4","type":"message","text":"Examples of things that are built this way are the `sandbox` executable that we use in BinaryBuilder (because we want it to run anywhere without any dependencies) and also most programs created by the `go` compiler (they have decided to eat the size tradeoff in exchange for having binaries that completely dodge all the problems with dynamic linking)","user":"U66GD0880","ts":"1612804243.323200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LgT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Examples of things that are built this way are the "},{"type":"text","text":"sandbox","style":{"code":true}},{"type":"text","text":" executable that we use in BinaryBuilder (because we want it to run anywhere without any dependencies) and also most programs created by the "},{"type":"text","text":"go","style":{"code":true}},{"type":"text","text":" compiler (they have decided to eat the size tradeoff in exchange for having binaries that completely dodge all the problems with dynamic linking)"}]}]}],"thread_ts":"1612796131.319300","parent_user_id":"U01AJUF2GEP"},{"client_msg_id":"856ffffa-2d4d-42f7-8d05-a83371a011a5","type":"message","text":"go actually added go shared objects for other go programs","user":"UH24GRBLL","ts":"1612804515.323400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s1O","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"go actually added go shared objects for other go programs"}]}]}],"thread_ts":"1612796131.319300","parent_user_id":"U01AJUF2GEP"},{"client_msg_id":"edcc443c-c8fe-4d2d-967a-6eb547308a92","type":"message","text":"That’s right; but it’s not the default thing you get.","user":"U66GD0880","ts":"1612806078.323600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YkA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That’s right; but it’s not the default thing you get."}]}]}],"thread_ts":"1612796131.319300","parent_user_id":"U01AJUF2GEP"}]