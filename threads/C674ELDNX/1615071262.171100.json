[{"client_msg_id":"e45de954-23e7-4018-a310-60313fcfd40c","type":"message","text":"Do we do architecture specific binaries yet? I notice that AMD has its own versions of fftw, blis, flame etc. and I wonder if we should be specializing by microarchitecture.","user":"U67461GUB","ts":"1615071262.171100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OIH+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Do we do architecture specific binaries yet? I notice that AMD has its own versions of fftw, blis, flame etc. and I wonder if we should be specializing by microarchitecture."}]}]}],"thread_ts":"1615071262.171100","reply_count":24,"reply_users_count":3,"latest_reply":"1615076392.178300","reply_users":["UDB26738Q","U67461GUB","U66GD0880"],"subscribed":false},{"client_msg_id":"6438a08c-0e7a-4dc0-9b7a-26b395e1a7a3","type":"message","text":"we have support for different microatchitectures (ISAs), but not really different CPU families","user":"UDB26738Q","ts":"1615071352.171300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hAPo/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we have support for different microatchitectures (ISAs), but not really different CPU families"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"b038faf7-e3bc-46c1-bad5-90f02459a7dd","type":"message","text":"like x86_64 AMD vs x86_64 Intel","user":"UDB26738Q","ts":"1615071368.171500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iT/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"like x86_64 AMD vs x86_64 Intel"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"c8a267a1-2055-4ad0-a0ad-873a297e5e72","type":"message","text":"Can we not treat amd epyc a differnt microarchitecture effectively?","user":"U67461GUB","ts":"1615071382.171700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+4E","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can we not treat amd epyc a differnt microarchitecture effectively?"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"457213cf-9965-43c5-978e-adfb4d25d126","type":"message","text":"Or is it that for a given ISA, whether AMD or Intel, we can safely use the same binaries and hope thye are as fast as can be.","user":"U67461GUB","ts":"1615071426.171900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=M8gb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Or is it that for a given ISA, whether AMD or Intel, we can safely use the same binaries and hope thye are as fast as can be."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"515a3851-c0b7-4cc1-a0b7-929002c92d93","type":"message","text":"What you are saying is that we can’t automatically pick an intel vs. amd blas based on processor type. The user can always pick MKL.jl or AMDBLAS.jl (for example).","user":"U67461GUB","ts":"1615071475.172100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hyA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What you are saying is that we can’t automatically pick an intel vs. amd blas based on processor type. The user can always pick MKL.jl or AMDBLAS.jl (for example)."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"4f8e4e2d-89b0-467e-bc2d-f9e8dd72ba08","type":"message","text":"these are the ISAs we use at the moment: <https://github.com/JuliaLang/julia/blob/5fab42ac868f70d1edc6fe85b65a2df6442722b7/base/cpuid.jl#L34-L43>","user":"UDB26738Q","ts":"1615071513.172300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qxuS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"these are the ISAs we use at the moment: "},{"type":"link","url":"https://github.com/JuliaLang/julia/blob/5fab42ac868f70d1edc6fe85b65a2df6442722b7/base/cpuid.jl#L34-L43"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"92131c04-ca82-450c-b5b8-c24ca59656f5","type":"message","text":"we'd need AMD-specific and Intel-specific features to distinguish the CPU","user":"UDB26738Q","ts":"1615071553.172500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cCUw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we'd need AMD-specific and Intel-specific features to distinguish the CPU"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"b8b8a46a-81da-4d81-b292-be5a310afb19","type":"message","text":"Are these possible to detect? Or do you literally have to just look at the processor string?","user":"U67461GUB","ts":"1615071702.172700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Aso","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Are these possible to detect? Or do you literally have to just look at the processor string?"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"c5bfa327-14cf-4dd0-bec7-173c241afe76","type":"message","text":"frankly I don't know if these features are easy to detect, so looking at the CPU model might be necessary, but it isn't what we do","user":"UDB26738Q","ts":"1615071767.172900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nWW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"frankly I don't know if these features are easy to detect, so looking at the CPU model might be necessary, but it isn't what we do"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"bfc8da6b-747b-4fec-88e2-be715bbed8b1","type":"message","text":"thanks. i’ll explore if speedups are real. now to find some AMDs to login to.","user":"U67461GUB","ts":"1615072072.173100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"T78","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thanks. i’ll explore if speedups are real. now to find some AMDs to login to."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"99540068-7f70-491c-8c5a-dcf7dfcc900b","type":"message","text":"We’ve got all the `amdci` machines","user":"U66GD0880","ts":"1615073298.173900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GwH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We’ve got all the "},{"type":"text","text":"amdci","style":{"code":true}},{"type":"text","text":" machines"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"72e033d5-8646-42d2-afdf-c3a87ea33545","type":"message","text":"on amdci7:\n```julia&gt; using Base.BinaryPlatforms.CPUID\n\njulia&gt; x86_64 = BinaryPlatforms.CPUID.ISAs_by_family[\"x86_64\"]\n7-element Vector{Pair{String, Base.BinaryPlatforms.CPUID.ISA}}:\n         \"x86_64\" =&gt; Base.BinaryPlatforms.CPUID.ISA(Set{UInt32}())\n          \"core2\" =&gt; Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000000, 0x00000009]))\n        \"nehalem\" =&gt; Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000000, 0x00000014, 0x00000009, 0x00000017, 0x00000013]))\n    \"sandybridge\" =&gt; Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000000, 0x00000001, 0x00000014, 0x00000019, 0x00000009, 0x0000001c, 0x00000017, 0x00000013]))\n        \"haswell\" =&gt; Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000040, 0x0000001d, 0x00000014, 0x00000019, 0x00000048, 0x0000000c, 0x0000001e, 0x0000001c, 0x00000017, 0x00000013, 0x00000016, 0x00000000, 0x00000001, 0x00000043, 0x00000045, 0x00000009]))\n        \"skylake\" =&gt; Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000014, 0x00000048, 0x0000000c, 0x0000001e, 0x0000001c, 0x00000017, 0x00000013, 0x00000016, 0x00000000, 0x00000001  …  0x00000053, 0x00000009, 0x00000052, 0x000000e3, 0x00000040, 0x0000001d, 0x00000019, 0x000000e1, 0x000000a8, 0x00000057]))\n \"skylake_avx512\" =&gt; Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000014, 0x00000051, 0x00000048, 0x0000000c, 0x0000001e, 0x0000001c, 0x00000017, 0x00000013, 0x00000016, 0x00000000  …  0x00000040, 0x0000001d, 0x0000005f, 0x00000019, 0x0000005e, 0x000000e1, 0x000000a8, 0x00000058, 0x00000057, 0x00000064]))\n\njulia&gt; x86_64[findlast(&lt;=(CPUID.cpu_isa()), last.(x86_64))]\n\"skylake\" =&gt; Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000014, 0x00000048, 0x0000000c, 0x0000001e, 0x0000001c, 0x00000017, 0x00000013, 0x00000016, 0x00000000, 0x00000001  …  0x00000053, 0x00000009, 0x00000052, 0x000000e3, 0x00000040, 0x0000001d, 0x00000019, 0x000000e1, 0x000000a8, 0x00000057]))```\nso this is currently detected as skylake, without avx512","user":"UDB26738Q","ts":"1615075253.175600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"y3NaC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"on amdci7:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using Base.BinaryPlatforms.CPUID\n\njulia> x86_64 = BinaryPlatforms.CPUID.ISAs_by_family[\"x86_64\"]\n7-element Vector{Pair{String, Base.BinaryPlatforms.CPUID.ISA}}:\n         \"x86_64\" => Base.BinaryPlatforms.CPUID.ISA(Set{UInt32}())\n          \"core2\" => Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000000, 0x00000009]))\n        \"nehalem\" => Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000000, 0x00000014, 0x00000009, 0x00000017, 0x00000013]))\n    \"sandybridge\" => Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000000, 0x00000001, 0x00000014, 0x00000019, 0x00000009, 0x0000001c, 0x00000017, 0x00000013]))\n        \"haswell\" => Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000040, 0x0000001d, 0x00000014, 0x00000019, 0x00000048, 0x0000000c, 0x0000001e, 0x0000001c, 0x00000017, 0x00000013, 0x00000016, 0x00000000, 0x00000001, 0x00000043, 0x00000045, 0x00000009]))\n        \"skylake\" => Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000014, 0x00000048, 0x0000000c, 0x0000001e, 0x0000001c, 0x00000017, 0x00000013, 0x00000016, 0x00000000, 0x00000001  …  0x00000053, 0x00000009, 0x00000052, 0x000000e3, 0x00000040, 0x0000001d, 0x00000019, 0x000000e1, 0x000000a8, 0x00000057]))\n \"skylake_avx512\" => Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000014, 0x00000051, 0x00000048, 0x0000000c, 0x0000001e, 0x0000001c, 0x00000017, 0x00000013, 0x00000016, 0x00000000  …  0x00000040, 0x0000001d, 0x0000005f, 0x00000019, 0x0000005e, 0x000000e1, 0x000000a8, 0x00000058, 0x00000057, 0x00000064]))\n\njulia> x86_64[findlast(<=(CPUID.cpu_isa()), last.(x86_64))]\n\"skylake\" => Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000014, 0x00000048, 0x0000000c, 0x0000001e, 0x0000001c, 0x00000017, 0x00000013, 0x00000016, 0x00000000, 0x00000001  …  0x00000053, 0x00000009, 0x00000052, 0x000000e3, 0x00000040, 0x0000001d, 0x00000019, 0x000000e1, 0x000000a8, 0x00000057]))"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"so this is currently detected as skylake, without avx512"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"153b9546-682e-4253-a1c0-af64116c248d","type":"message","text":"looking to the extensions in <https://en.wikichip.org/wiki/amd/microarchitectures/zen_2>, I don't think any is really AMD-specific?","user":"UDB26738Q","ts":"1615075381.175800","team":"T68168MUP","edited":{"user":"UDB26738Q","ts":"1615075386.000000"},"blocks":[{"type":"rich_text","block_id":"yTL6y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"looking to the extensions in "},{"type":"link","url":"https://en.wikichip.org/wiki/amd/microarchitectures/zen_2"},{"type":"text","text":", I don't think any is really AMD-specific?"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"49eb028c-eb8f-4283-b114-9b8cf868cb39","type":"message","text":"AFAIK most of the software that tries to optimize this low-level will look at the actual CPU name","user":"U66GD0880","ts":"1615075437.176200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"M9sh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"AFAIK most of the software that tries to optimize this low-level will look at the actual CPU name"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"9461c79a-1530-4118-8fe0-cd394eaf91c4","type":"message","text":"IMO we shouldn’t get into that game; it’s too niche","user":"U66GD0880","ts":"1615075451.176400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LpCtC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"IMO we shouldn’t get into that game; it’s too niche"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"f688ee96-1ea1-4175-9be3-634939908ac2","type":"message","text":"but if a package really wants to do it, it can do it with <https://github.com/JuliaLang/Pkg.jl/pull/2024>","user":"U66GD0880","ts":"1615075480.176600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GR6J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but if a package really wants to do it, it can do it with "},{"type":"link","url":"https://github.com/JuliaLang/Pkg.jl/pull/2024"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"fefe35e1-72ea-4753-899a-568cd5d69096","type":"message","text":"you would build artifacts with platform tags like `cputype=amdzen2`, then you would register a little piece of code in your package to look up the CPU type and select the right artifact","user":"U66GD0880","ts":"1615075516.176800","team":"T68168MUP","edited":{"user":"U66GD0880","ts":"1615075522.000000"},"blocks":[{"type":"rich_text","block_id":"xlQh4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you would build artifacts with platform tags like "},{"type":"text","text":"cputype=amdzen2","style":{"code":true}},{"type":"text","text":", then you would register a little piece of code in your package to look up the CPU type and select the right artifact"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"96b3817f-4a0e-4ee0-8554-7ed74058503b","type":"message","text":"here’s the docs on what you need to do on the package side:","user":"U66GD0880","ts":"1615075599.177100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qHf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"here’s the docs on what you need to do on the package side:"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"344962a8-f4de-44c0-ae7f-8e15bfbff75e","type":"message","text":"<https://julialang.github.io/Pkg.jl/dev/artifacts/#Extending-Platform-Selection>","user":"U66GD0880","ts":"1615075599.177300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c62","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://julialang.github.io/Pkg.jl/dev/artifacts/#Extending-Platform-Selection"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"c009da5a-8565-4415-b50b-76af1826ded9","type":"message","text":"so we have the capability, but it’s not at all smooth","user":"U66GD0880","ts":"1615075614.177500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7ReR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so we have the capability, but it’s not at all smooth"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"f3b4322c-75b8-4e5b-a8da-619b10e60e56","type":"message","text":"e.g. you’d want this to be in a JLL, but we don’t have a pipeline for these code snippets to be included in JLLs yet.","user":"U66GD0880","ts":"1615075631.177700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O3H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"e.g. you’d want this to be in a JLL, but we don’t have a pipeline for these code snippets to be included in JLLs yet."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"c6e7d54b-efb5-4c4b-9e0f-45354a533238","type":"message","text":"The only place where you need this level is BLAS and FFT.","user":"U67461GUB","ts":"1615076315.177900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IHWSp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The only place where you need this level is BLAS and FFT."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"0de16e53-1ea6-4e60-ac6c-0717571cf4a3","type":"message","text":"Do we do microarch specific builds on any packages? Where can I look to learn how it works? Do we do it yet for say, FFTW?","user":"U67461GUB","ts":"1615076344.178100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3Tv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Do we do microarch specific builds on any packages? Where can I look to learn how it works? Do we do it yet for say, FFTW?"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"3d5bca87-bd8b-4c92-9522-19b35e7fdd39","type":"message","text":"FWIW, I just wanted to understand for now - I think users can just pick MKL or AMDBLAS on their own.","user":"U67461GUB","ts":"1615076392.178300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xQTe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"FWIW, I just wanted to understand for now - I think users can just pick MKL or AMDBLAS on their own."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"}]