[{"client_msg_id":"e45de954-23e7-4018-a310-60313fcfd40c","type":"message","text":"Do we do architecture specific binaries yet? I notice that AMD has its own versions of fftw, blis, flame etc. and I wonder if we should be specializing by microarchitecture.","user":"U67461GUB","ts":"1615071262.171100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OIH+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Do we do architecture specific binaries yet? I notice that AMD has its own versions of fftw, blis, flame etc. and I wonder if we should be specializing by microarchitecture."}]}]}],"thread_ts":"1615071262.171100","reply_count":84,"reply_users_count":3,"latest_reply":"1615160159.194700","reply_users":["UDB26738Q","U67461GUB","U66GD0880"],"subscribed":false},{"client_msg_id":"6438a08c-0e7a-4dc0-9b7a-26b395e1a7a3","type":"message","text":"we have support for different microatchitectures (ISAs), but not really different CPU families","user":"UDB26738Q","ts":"1615071352.171300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hAPo/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we have support for different microatchitectures (ISAs), but not really different CPU families"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"b038faf7-e3bc-46c1-bad5-90f02459a7dd","type":"message","text":"like x86_64 AMD vs x86_64 Intel","user":"UDB26738Q","ts":"1615071368.171500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iT/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"like x86_64 AMD vs x86_64 Intel"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"c8a267a1-2055-4ad0-a0ad-873a297e5e72","type":"message","text":"Can we not treat amd epyc a differnt microarchitecture effectively?","user":"U67461GUB","ts":"1615071382.171700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+4E","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can we not treat amd epyc a differnt microarchitecture effectively?"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"457213cf-9965-43c5-978e-adfb4d25d126","type":"message","text":"Or is it that for a given ISA, whether AMD or Intel, we can safely use the same binaries and hope thye are as fast as can be.","user":"U67461GUB","ts":"1615071426.171900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=M8gb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Or is it that for a given ISA, whether AMD or Intel, we can safely use the same binaries and hope thye are as fast as can be."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"515a3851-c0b7-4cc1-a0b7-929002c92d93","type":"message","text":"What you are saying is that we can’t automatically pick an intel vs. amd blas based on processor type. The user can always pick MKL.jl or AMDBLAS.jl (for example).","user":"U67461GUB","ts":"1615071475.172100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hyA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What you are saying is that we can’t automatically pick an intel vs. amd blas based on processor type. The user can always pick MKL.jl or AMDBLAS.jl (for example)."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"4f8e4e2d-89b0-467e-bc2d-f9e8dd72ba08","type":"message","text":"these are the ISAs we use at the moment: <https://github.com/JuliaLang/julia/blob/5fab42ac868f70d1edc6fe85b65a2df6442722b7/base/cpuid.jl#L34-L43>","user":"UDB26738Q","ts":"1615071513.172300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qxuS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"these are the ISAs we use at the moment: "},{"type":"link","url":"https://github.com/JuliaLang/julia/blob/5fab42ac868f70d1edc6fe85b65a2df6442722b7/base/cpuid.jl#L34-L43"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"92131c04-ca82-450c-b5b8-c24ca59656f5","type":"message","text":"we'd need AMD-specific and Intel-specific features to distinguish the CPU","user":"UDB26738Q","ts":"1615071553.172500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cCUw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we'd need AMD-specific and Intel-specific features to distinguish the CPU"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"b8b8a46a-81da-4d81-b292-be5a310afb19","type":"message","text":"Are these possible to detect? Or do you literally have to just look at the processor string?","user":"U67461GUB","ts":"1615071702.172700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Aso","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Are these possible to detect? Or do you literally have to just look at the processor string?"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"c5bfa327-14cf-4dd0-bec7-173c241afe76","type":"message","text":"frankly I don't know if these features are easy to detect, so looking at the CPU model might be necessary, but it isn't what we do","user":"UDB26738Q","ts":"1615071767.172900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nWW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"frankly I don't know if these features are easy to detect, so looking at the CPU model might be necessary, but it isn't what we do"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"bfc8da6b-747b-4fec-88e2-be715bbed8b1","type":"message","text":"thanks. i’ll explore if speedups are real. now to find some AMDs to login to.","user":"U67461GUB","ts":"1615072072.173100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"T78","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thanks. i’ll explore if speedups are real. now to find some AMDs to login to."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"99540068-7f70-491c-8c5a-dcf7dfcc900b","type":"message","text":"We’ve got all the `amdci` machines","user":"U66GD0880","ts":"1615073298.173900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GwH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We’ve got all the "},{"type":"text","text":"amdci","style":{"code":true}},{"type":"text","text":" machines"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"72e033d5-8646-42d2-afdf-c3a87ea33545","type":"message","text":"on amdci7:\n```julia&gt; using Base.BinaryPlatforms.CPUID\n\njulia&gt; x86_64 = BinaryPlatforms.CPUID.ISAs_by_family[\"x86_64\"]\n7-element Vector{Pair{String, Base.BinaryPlatforms.CPUID.ISA}}:\n         \"x86_64\" =&gt; Base.BinaryPlatforms.CPUID.ISA(Set{UInt32}())\n          \"core2\" =&gt; Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000000, 0x00000009]))\n        \"nehalem\" =&gt; Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000000, 0x00000014, 0x00000009, 0x00000017, 0x00000013]))\n    \"sandybridge\" =&gt; Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000000, 0x00000001, 0x00000014, 0x00000019, 0x00000009, 0x0000001c, 0x00000017, 0x00000013]))\n        \"haswell\" =&gt; Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000040, 0x0000001d, 0x00000014, 0x00000019, 0x00000048, 0x0000000c, 0x0000001e, 0x0000001c, 0x00000017, 0x00000013, 0x00000016, 0x00000000, 0x00000001, 0x00000043, 0x00000045, 0x00000009]))\n        \"skylake\" =&gt; Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000014, 0x00000048, 0x0000000c, 0x0000001e, 0x0000001c, 0x00000017, 0x00000013, 0x00000016, 0x00000000, 0x00000001  …  0x00000053, 0x00000009, 0x00000052, 0x000000e3, 0x00000040, 0x0000001d, 0x00000019, 0x000000e1, 0x000000a8, 0x00000057]))\n \"skylake_avx512\" =&gt; Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000014, 0x00000051, 0x00000048, 0x0000000c, 0x0000001e, 0x0000001c, 0x00000017, 0x00000013, 0x00000016, 0x00000000  …  0x00000040, 0x0000001d, 0x0000005f, 0x00000019, 0x0000005e, 0x000000e1, 0x000000a8, 0x00000058, 0x00000057, 0x00000064]))\n\njulia&gt; x86_64[findlast(&lt;=(CPUID.cpu_isa()), last.(x86_64))]\n\"skylake\" =&gt; Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000014, 0x00000048, 0x0000000c, 0x0000001e, 0x0000001c, 0x00000017, 0x00000013, 0x00000016, 0x00000000, 0x00000001  …  0x00000053, 0x00000009, 0x00000052, 0x000000e3, 0x00000040, 0x0000001d, 0x00000019, 0x000000e1, 0x000000a8, 0x00000057]))```\nso this is currently detected as skylake, without avx512","user":"UDB26738Q","ts":"1615075253.175600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"y3NaC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"on amdci7:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using Base.BinaryPlatforms.CPUID\n\njulia> x86_64 = BinaryPlatforms.CPUID.ISAs_by_family[\"x86_64\"]\n7-element Vector{Pair{String, Base.BinaryPlatforms.CPUID.ISA}}:\n         \"x86_64\" => Base.BinaryPlatforms.CPUID.ISA(Set{UInt32}())\n          \"core2\" => Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000000, 0x00000009]))\n        \"nehalem\" => Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000000, 0x00000014, 0x00000009, 0x00000017, 0x00000013]))\n    \"sandybridge\" => Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000000, 0x00000001, 0x00000014, 0x00000019, 0x00000009, 0x0000001c, 0x00000017, 0x00000013]))\n        \"haswell\" => Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000040, 0x0000001d, 0x00000014, 0x00000019, 0x00000048, 0x0000000c, 0x0000001e, 0x0000001c, 0x00000017, 0x00000013, 0x00000016, 0x00000000, 0x00000001, 0x00000043, 0x00000045, 0x00000009]))\n        \"skylake\" => Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000014, 0x00000048, 0x0000000c, 0x0000001e, 0x0000001c, 0x00000017, 0x00000013, 0x00000016, 0x00000000, 0x00000001  …  0x00000053, 0x00000009, 0x00000052, 0x000000e3, 0x00000040, 0x0000001d, 0x00000019, 0x000000e1, 0x000000a8, 0x00000057]))\n \"skylake_avx512\" => Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000014, 0x00000051, 0x00000048, 0x0000000c, 0x0000001e, 0x0000001c, 0x00000017, 0x00000013, 0x00000016, 0x00000000  …  0x00000040, 0x0000001d, 0x0000005f, 0x00000019, 0x0000005e, 0x000000e1, 0x000000a8, 0x00000058, 0x00000057, 0x00000064]))\n\njulia> x86_64[findlast(<=(CPUID.cpu_isa()), last.(x86_64))]\n\"skylake\" => Base.BinaryPlatforms.CPUID.ISA(Set(UInt32[0x00000014, 0x00000048, 0x0000000c, 0x0000001e, 0x0000001c, 0x00000017, 0x00000013, 0x00000016, 0x00000000, 0x00000001  …  0x00000053, 0x00000009, 0x00000052, 0x000000e3, 0x00000040, 0x0000001d, 0x00000019, 0x000000e1, 0x000000a8, 0x00000057]))"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"so this is currently detected as skylake, without avx512"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"153b9546-682e-4253-a1c0-af64116c248d","type":"message","text":"looking to the extensions in <https://en.wikichip.org/wiki/amd/microarchitectures/zen_2>, I don't think any is really AMD-specific?","user":"UDB26738Q","ts":"1615075381.175800","team":"T68168MUP","edited":{"user":"UDB26738Q","ts":"1615075386.000000"},"blocks":[{"type":"rich_text","block_id":"yTL6y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"looking to the extensions in "},{"type":"link","url":"https://en.wikichip.org/wiki/amd/microarchitectures/zen_2"},{"type":"text","text":", I don't think any is really AMD-specific?"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"49eb028c-eb8f-4283-b114-9b8cf868cb39","type":"message","text":"AFAIK most of the software that tries to optimize this low-level will look at the actual CPU name","user":"U66GD0880","ts":"1615075437.176200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"M9sh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"AFAIK most of the software that tries to optimize this low-level will look at the actual CPU name"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"9461c79a-1530-4118-8fe0-cd394eaf91c4","type":"message","text":"IMO we shouldn’t get into that game; it’s too niche","user":"U66GD0880","ts":"1615075451.176400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LpCtC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"IMO we shouldn’t get into that game; it’s too niche"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"f688ee96-1ea1-4175-9be3-634939908ac2","type":"message","text":"but if a package really wants to do it, it can do it with <https://github.com/JuliaLang/Pkg.jl/pull/2024>","user":"U66GD0880","ts":"1615075480.176600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GR6J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but if a package really wants to do it, it can do it with "},{"type":"link","url":"https://github.com/JuliaLang/Pkg.jl/pull/2024"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"fefe35e1-72ea-4753-899a-568cd5d69096","type":"message","text":"you would build artifacts with platform tags like `cputype=amdzen2`, then you would register a little piece of code in your package to look up the CPU type and select the right artifact","user":"U66GD0880","ts":"1615075516.176800","team":"T68168MUP","edited":{"user":"U66GD0880","ts":"1615075522.000000"},"blocks":[{"type":"rich_text","block_id":"xlQh4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you would build artifacts with platform tags like "},{"type":"text","text":"cputype=amdzen2","style":{"code":true}},{"type":"text","text":", then you would register a little piece of code in your package to look up the CPU type and select the right artifact"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"96b3817f-4a0e-4ee0-8554-7ed74058503b","type":"message","text":"here’s the docs on what you need to do on the package side:","user":"U66GD0880","ts":"1615075599.177100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qHf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"here’s the docs on what you need to do on the package side:"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"344962a8-f4de-44c0-ae7f-8e15bfbff75e","type":"message","text":"<https://julialang.github.io/Pkg.jl/dev/artifacts/#Extending-Platform-Selection>","user":"U66GD0880","ts":"1615075599.177300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c62","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://julialang.github.io/Pkg.jl/dev/artifacts/#Extending-Platform-Selection"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"c009da5a-8565-4415-b50b-76af1826ded9","type":"message","text":"so we have the capability, but it’s not at all smooth","user":"U66GD0880","ts":"1615075614.177500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7ReR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so we have the capability, but it’s not at all smooth"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"f3b4322c-75b8-4e5b-a8da-619b10e60e56","type":"message","text":"e.g. you’d want this to be in a JLL, but we don’t have a pipeline for these code snippets to be included in JLLs yet.","user":"U66GD0880","ts":"1615075631.177700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O3H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"e.g. you’d want this to be in a JLL, but we don’t have a pipeline for these code snippets to be included in JLLs yet."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"c6e7d54b-efb5-4c4b-9e0f-45354a533238","type":"message","text":"The only place where you need this level is BLAS and FFT.","user":"U67461GUB","ts":"1615076315.177900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IHWSp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The only place where you need this level is BLAS and FFT."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"0de16e53-1ea6-4e60-ac6c-0717571cf4a3","type":"message","text":"Do we do microarch specific builds on any packages? Where can I look to learn how it works? Do we do it yet for say, FFTW?","user":"U67461GUB","ts":"1615076344.178100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3Tv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Do we do microarch specific builds on any packages? Where can I look to learn how it works? Do we do it yet for say, FFTW?"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"3d5bca87-bd8b-4c92-9522-19b35e7fdd39","type":"message","text":"FWIW, I just wanted to understand for now - I think users can just pick MKL or AMDBLAS on their own.","user":"U67461GUB","ts":"1615076392.178300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xQTe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"FWIW, I just wanted to understand for now - I think users can just pick MKL or AMDBLAS on their own."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"1fb44b5f-7589-41c6-ad67-6c05bd6fecf1","type":"message","text":"How do I find out what exactly `lock_microarchitecture` does?","user":"U67461GUB","ts":"1615079392.178500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Lvnu7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How do I find out what exactly "},{"type":"text","text":"lock_microarchitecture","style":{"code":true}},{"type":"text","text":" does?"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"35a4b0ed-0e89-4c11-90b7-64b0676fb462","type":"message","text":"it isn't documented, but it allows you to pass `-march=...` to the compiler","user":"UDB26738Q","ts":"1615079635.178700","team":"T68168MUP","edited":{"user":"UDB26738Q","ts":"1615079640.000000"},"blocks":[{"type":"rich_text","block_id":"t1n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it isn't documented, but it allows you to pass "},{"type":"text","text":"-march=...","style":{"code":true}},{"type":"text","text":" to the compiler"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"30798e89-2726-4c35-bfa5-47c1331b3a15","type":"message","text":"Does it build different binaries for different architectures?","user":"U67461GUB","ts":"1615123176.179100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qEo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does it build different binaries for different architectures?"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"dda9e48f-f2ff-4b4e-9235-cc8b32f79fa1","type":"message","text":"Yes, it does","user":"UDB26738Q","ts":"1615123543.179300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LSqP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, it does"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"1e4fab73-deab-49ac-9890-00791f3862b2","type":"message","text":"This a proof-of-concept we did last year: <https://github.com/giordano/Darknet_jll.jl/releases/tag/Darknet-v2020.6.5%2B2|https://github.com/giordano/Darknet_jll.jl/releases/tag/Darknet-v2020.6.5%2B2>","user":"UDB26738Q","ts":"1615123614.179500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EB+6u","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This a proof-of-concept we did last year: "},{"type":"link","url":"https://github.com/giordano/Darknet_jll.jl/releases/tag/Darknet-v2020.6.5%2B2","text":"https://github.com/giordano/Darknet_jll.jl/releases/tag/Darknet-v2020.6.5%2B2"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"20872199-ed0e-475d-944f-6c60169067db","type":"message","text":"No, wait, sorry, I was confused by your question","user":"UDB26738Q","ts":"1615123665.179700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ehIO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No, wait, sorry, I was confused by your question"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"d90c3906-183b-4f55-a533-48ac4b52a7bc","type":"message","text":"Simply using `lock_microarchitectures=false` allows you to pass `-march=...` but nothing more","user":"UDB26738Q","ts":"1615123722.179900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"11yZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Simply using "},{"type":"text","text":"lock_microarchitectures=false","style":{"code":true}},{"type":"text","text":" allows you to pass "},{"type":"text","text":"-march=...","style":{"code":true}},{"type":"text","text":" but nothing more"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"de693e57-8be0-4fd6-8458-7c45e1700f3e","type":"message","text":"What I've shown above is the result of a build which uses `expand_microarchitectures`","user":"UDB26738Q","ts":"1615123765.180100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DlJs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What I've shown above is the result of a build which uses "},{"type":"text","text":"expand_microarchitectures","style":{"code":true}}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"8455d505-a7db-4c4e-ba8c-86a498b7597f","type":"message","text":"thanks that explains it.","user":"U67461GUB","ts":"1615123902.180300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VHg3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thanks that explains it."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"59748f06-7ad4-4f12-8ade-abc1a72c2177","type":"message","text":"should we try to use it for FFTW?","user":"U67461GUB","ts":"1615123921.180500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PtC6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"should we try to use it for FFTW?"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"50428bfc-18aa-4619-8794-fad938eb135b","type":"message","text":"As in - is this feature ready to use?","user":"U67461GUB","ts":"1615123951.180700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"J/nP6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"As in - is this feature ready to use?"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"66d2e33e-81bc-4609-88fa-00b5045404b4","type":"message","text":"FFTW uses cpuid as far as I know, so this isn't really needed","user":"UDB26738Q","ts":"1615123951.180900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aU/fV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"FFTW uses cpuid as far as I know, so this isn't really needed"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"9072e715-2ce3-4b8f-987d-68a5ccd4f780","type":"message","text":"But doesn’t it have all these things like enabling AVX-512 - so that if you have the right CPU you can get more performance?","user":"U67461GUB","ts":"1615123996.181100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"i908A","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But doesn’t it have all these things like enabling AVX-512 - so that if you have the right CPU you can get more performance?"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"07924cb6-a01e-4b41-a209-87efabec7507","type":"message","text":"And if you run the AVX 512 binaries on a CPU that doesn’t support it, it won’t work?","user":"U67461GUB","ts":"1615124031.181300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R2cP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And if you run the AVX 512 binaries on a CPU that doesn’t support it, it won’t work?"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"d776eeef-7d3e-49ff-aa78-3b24599bfdf1","type":"message","text":"That's correct","user":"UDB26738Q","ts":"1615124043.181500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LLvDJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's correct"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"50b8cd7d-9394-4d1e-9af1-89315f7d286d","type":"message","text":"I thought this microarchitecture stuff would help us build those kinds of libraries.","user":"U67461GUB","ts":"1615124070.181700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tJgF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I thought this microarchitecture stuff would help us build those kinds of libraries."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"fdcc2eb1-76a0-4a24-ad2c-17e0b9370e92","type":"message","text":"GMP also has similar things, IIRC.","user":"U67461GUB","ts":"1615124080.181900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x404M","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"GMP also has similar things, IIRC."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"88b30a47-a119-4a7e-a1c0-62c8e2452aff","type":"message","text":"We can try to do a test build, but definitely not to be published in JuliaBinaryWrappers at the moment, so not in Yggdrasil","user":"UDB26738Q","ts":"1615124116.182100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nLI4V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We can try to do a test build, but definitely not to be published in JuliaBinaryWrappers at the moment, so not in Yggdrasil"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB","reactions":[{"name":"+1","users":["U67461GUB"],"count":1}]},{"client_msg_id":"240aa331-5758-48cd-b94d-187edeab5561","type":"message","text":"Is there a mechanism to pass `--enable-avx512` to configure on that builds that are for those CPUs and ignore it elsewhere? I suppose we’ll have to do such things manually. Wouldn’t mind trying it out.","user":"U67461GUB","ts":"1615124212.182400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JKe3z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a mechanism to pass "},{"type":"text","text":"--enable-avx512","style":{"code":true}},{"type":"text","text":" to configure on that builds that are for those CPUs and ignore it elsewhere? I suppose we’ll have to do such things manually. Wouldn’t mind trying it out."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"9108aa36-37ed-4abf-ac55-b45332cd375d","type":"message","text":"In a sense, you can simply add the skylakeavx512 platform","user":"UDB26738Q","ts":"1615124292.182600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"m5fT0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In a sense, you can simply add the skylakeavx512 platform"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"4b3dd998-54ed-4788-88d6-2f32eebce1a0","type":"message","text":"Does the Darknet example show me how to try this sort of thing?","user":"U67461GUB","ts":"1615124424.182800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"giAsG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does the Darknet example show me how to try this sort of thing?"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"43a171f2-7496-4ffc-88bd-8222d27d9e92","type":"message","text":"Maybe the autoconf script will detect we have avx512 and auto-enable it.","user":"U67461GUB","ts":"1615124459.183000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zCJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe the autoconf script will detect we have avx512 and auto-enable it."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"2413eddb-3380-471b-8b13-ae5c2b26284c","type":"message","text":"What I did there was to use <https://docs.binarybuilder.org/dev/reference/#BinaryBuilderBase.expand_microarchitectures-Tuple{Vector{var%22#s1000%22}%20where%20var%22#s1000%22%3C:AbstractPlatform}|https://docs.binarybuilder.org/dev/reference/#BinaryBuilderBase.expand_microarchitectures-Tuple{Vector{var%22#s1000%22}%20where%20var%22#s1000%22%3C:AbstractPlatform}>","user":"UDB26738Q","ts":"1615124699.183200","team":"T68168MUP","edited":{"user":"UDB26738Q","ts":"1615124762.000000"},"blocks":[{"type":"rich_text","block_id":"/65tl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What I did there was to use "},{"type":"link","url":"https://docs.binarybuilder.org/dev/reference/#BinaryBuilderBase.expand_microarchitectures-Tuple{Vector{var%22#s1000%22}%20where%20var%22#s1000%22%3C:AbstractPlatform}","text":"https://docs.binarybuilder.org/dev/reference/#BinaryBuilderBase.expand_microarchitectures-Tuple{Vector{var%22#s1000%22}%20where%20var%22#s1000%22%3C:AbstractPlatform}"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"1bc1be64-25ce-422f-b38b-25718820037a","type":"message","text":"But expanding the microarchitectures generates a loooong list of platforms :sweat_smile:","user":"UDB26738Q","ts":"1615124797.183600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C3ea","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But expanding the microarchitectures generates a loooong list of platforms "},{"type":"emoji","name":"sweat_smile"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"2120ab01-97f7-405d-882a-baebfa48eeb9","type":"message","text":"This stuff should be working fine on the BinaryBuilder side, but we never fully tested it because we needed Pkg functionalities that Elliot added only recently in the pull request he linked above","user":"UDB26738Q","ts":"1615124919.183800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OFNM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This stuff should be working fine on the BinaryBuilder side, but we never fully tested it because we needed Pkg functionalities that Elliot added only recently in the pull request he linked above"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"4ab8da76-0947-45a7-b6af-7700cc313a29","type":"message","text":"And if expanding gfortran and cxx, it will be insane, right? can one opt into which architectures to generate? Usually most libraries only have 2-3 specializations.","user":"U67461GUB","ts":"1615125381.184000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1AZa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And if expanding gfortran and cxx, it will be insane, right? can one opt into which architectures to generate? Usually most libraries only have 2-3 specializations."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"b147283e-14e3-41b3-9cbe-28fb0317fcc3","type":"message","text":"In total you'd get more than 200 platforms","user":"UDB26738Q","ts":"1615125450.184200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8JGr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In total you'd get more than 200 platforms"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"7945ca0d-9fda-448b-89be-c9f41a7feed6","type":"message","text":"I think in general it's hard to predict whether it's worth to build a library for, say, avx512","user":"UDB26738Q","ts":"1615125519.184400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0ZEx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think in general it's hard to predict whether it's worth to build a library for, say, avx512"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"c1098bb8-54c6-4ff3-88c4-6864a389549c","type":"message","text":"That’s a bit nuts -but I suppose only for a handfull of libraries.","user":"U67461GUB","ts":"1615125520.184600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5NZh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That’s a bit nuts -but I suppose only for a handfull of libraries."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"9dc9bd98-32c5-4400-832e-64e2a6bea2ee","type":"message","text":"I would only want to enable it where upstream has special support - or if we know that the compiler somehow can do a great job.","user":"U67461GUB","ts":"1615125555.184800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CfB/g","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I would only want to enable it where upstream has special support - or if we know that the compiler somehow can do a great job."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"5c70b3c8-85bf-4395-ab6a-ead4ebab51f2","type":"message","text":"There are very few libraries which need to expand both cxxstring and libgfortran (and a few days ago we realised one of them didn't really need to expand libgfortran version)","user":"UDB26738Q","ts":"1615125591.185000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+Hr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There are very few libraries which need to expand both cxxstring and libgfortran (and a few days ago we realised one of them didn't really need to expand libgfortran version)"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB","reactions":[{"name":"+1","users":["U67461GUB"],"count":1}]},{"client_msg_id":"5553e959-51c1-4e4e-bdf2-12aeccd481ae","type":"message","text":"Yeah, you should hope the compiler can do some hard optimisation when allowed to use avx512 extension","user":"UDB26738Q","ts":"1615125666.185300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"59o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, you should hope the compiler can do some hard optimisation when allowed to use avx512 extension"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"28344d87-f9eb-47d9-b888-c0a48cdfa4d9","type":"message","text":"One thing we're missing is an audit pass to check whether we're actually using instructions for the requested extension","user":"UDB26738Q","ts":"1615125711.185500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Zxq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"One thing we're missing is an audit pass to check whether we're actually using instructions for the requested extension"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"1fc66cf6-b5c6-4ac1-90a8-7e16c4c07421","type":"message","text":"So that, for example, if the library built for avx512 doesn't have any avx512 instructions we get a warning","user":"UDB26738Q","ts":"1615125751.185700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0hhz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So that, for example, if the library built for avx512 doesn't have any avx512 instructions we get a warning"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"e47701c1-d480-4473-8f41-b060947e125d","type":"message","text":"But there is also the issue that our instructions checks aren't 100% reliable: <https://github.com/JuliaPackaging/BinaryBuilder.jl/issues/833|https://github.com/JuliaPackaging/BinaryBuilder.jl/issues/833>","user":"UDB26738Q","ts":"1615125871.185900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"D4vL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But there is also the issue that our instructions checks aren't 100% reliable: "},{"type":"link","url":"https://github.com/JuliaPackaging/BinaryBuilder.jl/issues/833","text":"https://github.com/JuliaPackaging/BinaryBuilder.jl/issues/833"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"d6dde268-4845-457a-80f8-6b65ab994a0e","type":"message","text":"Libraries often use immintrin.h and handcode leveraging these instructions. That’s the ones we want to enable.","user":"U67461GUB","ts":"1615125932.186100","team":"T68168MUP","edited":{"user":"U67461GUB","ts":"1615125940.000000"},"blocks":[{"type":"rich_text","block_id":"=S3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Libraries often use immintrin.h and handcode leveraging these instructions. That’s the ones we want to enable."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"b1a229da-270e-45d5-b805-598efb24bdcc","type":"message","text":"For example: <https://github.com/FFTW/fftw3/tree/master/rdft/simd>","user":"U67461GUB","ts":"1615126009.186400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UYa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For example: "},{"type":"link","url":"https://github.com/FFTW/fftw3/tree/master/rdft/simd"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"6b49c089-4792-4051-9151-dcba0a30e818","type":"message","text":"And <https://github.com/FFTW/fftw3/tree/master/simd-support>","user":"U67461GUB","ts":"1615126047.186600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pm3wG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And "},{"type":"link","url":"https://github.com/FFTW/fftw3/tree/master/simd-support"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"e3346da6-1e4d-4837-b8b3-a91890c70215","type":"message","text":"But they use cpuid","user":"UDB26738Q","ts":"1615126081.186800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ei2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But they use cpuid"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"a7caf46f-6851-4d50-8234-413bca296288","type":"message","text":"I noticed that they do, but I still think some of them are makefile options.","user":"U67461GUB","ts":"1615126262.187000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mXv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I noticed that they do, but I still think some of them are makefile options."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"616b2adf-8f44-4d71-8c02-059d52d5761a","type":"message","text":"will need to check - maybe things have changed recently.","user":"U67461GUB","ts":"1615126277.187200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kw4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"will need to check - maybe things have changed recently."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"a57cc049-6a98-4ab4-bfcb-123fd0dfcf2d","type":"message","text":"But is this a case then where we can expand the microarches?","user":"U67461GUB","ts":"1615126303.187400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"r6JG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But is this a case then where we can expand the microarches?"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"90ece60d-2962-4bfc-85b9-a5d2470b9f75","type":"message","text":"If it's the case some avx512 code paths are enabled only at compile time and not at runtime using cpuid, then yes","user":"UDB26738Q","ts":"1615126705.187600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9bq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If it's the case some avx512 code paths are enabled only at compile time and not at runtime using cpuid, then yes"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"219e1b51-d669-4f6a-b68f-dcb4dc26e199","type":"message","text":"Basically, the microarchitectures stuff is the compile-time equivalent of cpuid. If cpuid is already in use, our work is useless, but if it isn't we overcome a limitation of the upstream library (like darknet)","user":"UDB26738Q","ts":"1615126793.187800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aHW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Basically, the microarchitectures stuff is the compile-time equivalent of cpuid. If cpuid is already in use, our work is useless, but if it isn't we overcome a limitation of the upstream library (like darknet)"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"1b1ad470-0ef8-48fa-b86b-fe8daa6e7ad2","type":"message","text":"I think it’s actually backwards Viral; this `expand_microarchitectures` stuff is really only needed for stuff that _doesn’t_ have special support","user":"U66GD0880","ts":"1615146630.188100","team":"T68168MUP","edited":{"user":"U66GD0880","ts":"1615146640.000000"},"blocks":[{"type":"rich_text","block_id":"hZu+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think it’s actually backwards Viral; this "},{"type":"text","text":"expand_microarchitectures","style":{"code":true}},{"type":"text","text":" stuff is really only needed for stuff that "},{"type":"text","text":"doesn’t","style":{"italic":true}},{"type":"text","text":" have special support"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"42031a8b-c7d0-41aa-b897-b034a3471d4f","type":"message","text":"many pieces of software that already know this is important, e.g. OpenBLAS, use `cpuid()` internally to dispatch between different specialized implementations.","user":"U66GD0880","ts":"1615146673.188400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SIH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"many pieces of software that already know this is important, e.g. OpenBLAS, use "},{"type":"text","text":"cpuid()","style":{"code":true}},{"type":"text","text":" internally to dispatch between different specialized implementations."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"0fda2da0-b7dc-4c9f-abe4-39a52f12ab52","type":"message","text":"The only benefit that this system will provide for something like OpenBLAS is smaller download sizes, as we could build a bunch of smaller libraries, instead of one big library","user":"U66GD0880","ts":"1615146708.188600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L7WS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The only benefit that this system will provide for something like OpenBLAS is smaller download sizes, as we could build a bunch of smaller libraries, instead of one big library"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"cfd26538-74d6-4d88-ae94-4d9f1ca71725","type":"message","text":"Of course, that comes at the cost of not being able to relocate your binaries to another system easily; you’d need to re-instantiate on a different system instead of just copying over like you can with OpenBLAS right now.","user":"U66GD0880","ts":"1615146746.188800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ayg7Z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Of course, that comes at the cost of not being able to relocate your binaries to another system easily; you’d need to re-instantiate on a different system instead of just copying over like you can with OpenBLAS right now."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"2ae82eef-0316-48f8-b0eb-aee51b8f9989","type":"message","text":"The best case for this kind of feature is for a package that is written without the `cpuid()` tricks, but conditionally allows the use of `AVX`/`AVX2` etc…, and maybe also has good autovectorization opportunities, etc….","user":"U66GD0880","ts":"1615146886.189000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LzMlf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The best case for this kind of feature is for a package that is written without the "},{"type":"text","text":"cpuid()","style":{"code":true}},{"type":"text","text":" tricks, but conditionally allows the use of "},{"type":"text","text":"AVX","style":{"code":true}},{"type":"text","text":"/"},{"type":"text","text":"AVX2","style":{"code":true}},{"type":"text","text":" etc…, and maybe also has good autovectorization opportunities, etc…."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"a2374126-a440-4d92-9a93-5ab365eb1455","type":"message","text":"Which is the case for darknet","user":"UDB26738Q","ts":"1615148680.189200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WwTYU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Which is the case for darknet"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"371662b3-0779-473c-8f3a-d2e07f80e377","type":"message","text":"Ah got it. Is it possible to check whether our FFTW binaries have all the relevant AVX instructions in them? Right we could do this for openblas, but since it it ships with Julia - that is not an option. So I guess maybe I should look at GMP - if it has opportunities and does not use cpuid.","user":"U67461GUB","ts":"1615158672.192600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ve/p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah got it. Is it possible to check whether our FFTW binaries have all the relevant AVX instructions in them? Right we could do this for openblas, but since it it ships with Julia - that is not an option. So I guess maybe I should look at GMP - if it has opportunities and does not use cpuid."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"e36ee9c0-2f4f-448b-adef-72418bc1a021","type":"message","text":"I just built FFTW locally, audit says:\n```┌ Warning: libfftw3.so.3.6.9 contains a `cpuid` instruction; refusing to analyze for minimum instruction set, as it may dynamically select the proper instruction set internally.  Would have chosen avx2, instead choosing x86_64.\n└ @ BinaryBuilder.Auditor ~/.julia/dev/BinaryBuilder/src/auditor/instruction_set.jl:156```\nI'd also note that we have <https://github.com/JuliaPackaging/Yggdrasil/blob/3f10bbe05b755803d42e069ead8c63c703d1272f/F/FFTW/build_tarballs.jl#L34-L37>, Steven Johnson commented those lines, so I'd assume he knew what he was doing","user":"UDB26738Q","ts":"1615159357.192900","team":"T68168MUP","edited":{"user":"UDB26738Q","ts":"1615159366.000000"},"blocks":[{"type":"rich_text","block_id":"bJa4M","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I just built FFTW locally, audit says:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"┌ Warning: libfftw3.so.3.6.9 contains a `cpuid` instruction; refusing to analyze for minimum instruction set, as it may dynamically select the proper instruction set internally.  Would have chosen avx2, instead choosing x86_64.\n└ @ BinaryBuilder.Auditor ~/.julia/dev/BinaryBuilder/src/auditor/instruction_set.jl:156"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I'd also note that we have "},{"type":"link","url":"https://github.com/JuliaPackaging/Yggdrasil/blob/3f10bbe05b755803d42e069ead8c63c703d1272f/F/FFTW/build_tarballs.jl#L34-L37"},{"type":"text","text":", Steven Johnson commented those lines, so I'd assume he knew what he was doing"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"4a63be93-01d9-41ee-b38a-becafa23a053","type":"message","text":"if I enable avx512 I get:\n```┌ Warning: libfftw3.so.3.6.9 contains a `cpuid` instruction; refusing to analyze for minimum instruction set, as it may dynamically select the proper instruction set internally.  Would have chosen avx512, instead choosing x86_64.\n└ @ BinaryBuilder.Auditor ~/.julia/dev/BinaryBuilder/src/auditor/instruction_set.jl:156```","user":"UDB26738Q","ts":"1615159705.193200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"n7nS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if I enable avx512 I get:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"┌ Warning: libfftw3.so.3.6.9 contains a `cpuid` instruction; refusing to analyze for minimum instruction set, as it may dynamically select the proper instruction set internally.  Would have chosen avx512, instead choosing x86_64.\n└ @ BinaryBuilder.Auditor ~/.julia/dev/BinaryBuilder/src/auditor/instruction_set.jl:156"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"9122b38b-ec8d-4809-b0fc-a14c88243d05","type":"message","text":"so, no need to expand the microarchitectures for FFTW, it's able to detect the available features at runtime via cpuid.  we just get a fatter library","user":"UDB26738Q","ts":"1615159772.193400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0S1u","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so, no need to expand the microarchitectures for FFTW, it's able to detect the available features at runtime via cpuid.  we just get a fatter library"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB","reactions":[{"name":"+1","users":["U67461GUB"],"count":1}]},{"client_msg_id":"423a2942-32bd-4070-a17e-a9d0a4ae3d35","type":"message","text":"but support fro AVX512 is still marked as experimental: <http://www.fftw.org/release-notes.html>","user":"UDB26738Q","ts":"1615159811.193700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7Ty","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but support fro AVX512 is still marked as experimental: "},{"type":"link","url":"http://www.fftw.org/release-notes.html"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"49c5ff1a-5331-49c3-908f-722289cd3d9b","type":"message","text":"&gt; Note that avx512 support is still experimental because the FFTW authors have no avx512 hardware available for testing. \nsomeone should provide a newer machine to Steven Johnson :sweat_smile:","user":"UDB26738Q","ts":"1615159842.193900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0al","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"Note that avx512 support is still experimental because the FFTW authors have no avx512 hardware available for testing. "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nsomeone should provide a newer machine to Steven Johnson "},{"type":"emoji","name":"sweat_smile"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"df0e59d0-aa76-4ba0-81e6-8405b97eb87d","type":"message","text":":joy:","user":"U67461GUB","ts":"1615159860.194100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Mnj","elements":[{"type":"rich_text_section","elements":[{"type":"emoji","name":"joy"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"101f98b7-f6d7-46bc-badd-3db57ad2aee6","type":"message","text":"Thanks this all helps understand the state of the whole microarchitecture thing.","user":"U67461GUB","ts":"1615159888.194300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YUN2C","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks this all helps understand the state of the whole microarchitecture thing."}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"5de6205c-b213-4609-a713-cf8156d7b230","type":"message","text":"it's cool that we have support for multiple architectures, but it's kind of niche because of cpuid","user":"UDB26738Q","ts":"1615159942.194500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"X+p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's cool that we have support for multiple architectures, but it's kind of niche because of cpuid"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB"},{"client_msg_id":"a18cf9bf-962b-4801-8c6f-eae4bf507378","type":"message","text":"Valentin pointed out that now glibc has native support for having different libraries optimised for different specific microarchitectures, and it's able to load the right one at runtime.  this is pretty much what we can do all on the julia side with this microarchitectures, just not limited to glibc, but any operating system","user":"UDB26738Q","ts":"1615160159.194700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VMlr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Valentin pointed out that now glibc has native support for having different libraries optimised for different specific microarchitectures, and it's able to load the right one at runtime.  this is pretty much what we can do all on the julia side with this microarchitectures, just not limited to glibc, but any operating system"}]}]}],"thread_ts":"1615071262.171100","parent_user_id":"U67461GUB","reactions":[{"name":"+1","users":["U66GD0880","U67461GUB"],"count":2}]}]