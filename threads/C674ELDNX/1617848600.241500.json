[{"client_msg_id":"14ef8b9c-a17f-4709-b20c-9bc57a8e4e7c","type":"message","text":"There is a C++ package <https://github.com/cellml/libcellml/> I vaguely know about CxxWrap and have little knowledge of BinaryBuilder. I am wondering how easy it'd be to have a package that mimics this API and updates when the other one releases. Is this done with CxxWrap or creating artifacts (of which I hear much and know little). I don't want to maintain it that much. Is this possible?","user":"UM8JUNJG7","ts":"1617848600.241500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PSD6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There is a C++ package "},{"type":"link","url":"https://github.com/cellml/libcellml/"},{"type":"text","text":" I vaguely know about CxxWrap and have little knowledge of BinaryBuilder. I am wondering how easy it'd be to have a package that mimics this API and updates when the other one releases. Is this done with CxxWrap or creating artifacts (of which I hear much and know little). I don't want to maintain it that much. Is this possible?"}]}]}],"thread_ts":"1617848600.241500","reply_count":4,"reply_users_count":2,"latest_reply":"1618155529.303900","reply_users":["U017D4RFTFC","UM8JUNJG7"],"is_locked":false,"subscribed":false},{"client_msg_id":"61f981af-d253-4dfd-9b90-c550c02c3329","type":"message","text":"BinaryBuilder does just that, it'll build binaries/libraries for the required platforms and put them in a libcellml_jll.jl package. The actual wrapping/calling of the library is done in a separate package, like libcellml.jl, you can try autogenerating a wrapper (with a little leg work) with CxxWrap, or create it yourself with ccall (if it exposes a C api? Can't recall if you can use plain ccall with C++ headers).","user":"U017D4RFTFC","ts":"1617853483.241600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"azn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"BinaryBuilder does just that, it'll build binaries/libraries for the required platforms and put them in a libcellml_jll.jl package. The actual wrapping/calling of the library is done in a separate package, like libcellml.jl, you can try autogenerating a wrapper (with a little leg work) with CxxWrap, or create it yourself with ccall (if it exposes a C api? Can't recall if you can use plain ccall with C++ headers)."}]}]}],"thread_ts":"1617848600.241500","parent_user_id":"UM8JUNJG7"},{"client_msg_id":"2446c9c3-b8e7-4617-82fe-339c65b41af4","type":"message","text":"Updates of both the jll binary package and your Julia package can't really be done automagically. Although for many packages the jll can be updated by just updating the BinaryBuilder script to the new version number and files.","user":"U017D4RFTFC","ts":"1617853568.241900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mmp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Updates of both the jll binary package and your Julia package can't really be done automagically. Although for many packages the jll can be updated by just updating the BinaryBuilder script to the new version number and files."}]}]}],"thread_ts":"1617848600.241500","parent_user_id":"UM8JUNJG7"},{"client_msg_id":"286ef005-eac9-43cc-8e75-65f79cc58cb0","type":"message","text":"So in short, BinaryBuilder provides libcellml to users with Julia's package manager, CxxWrap or CXX maybe let you make calls to libcellml","user":"U017D4RFTFC","ts":"1617853968.242100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Zlq0+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So in short, BinaryBuilder provides libcellml to users with Julia's package manager, CxxWrap or CXX maybe let you make calls to libcellml"}]}]}],"thread_ts":"1617848600.241500","parent_user_id":"UM8JUNJG7"},{"client_msg_id":"340c383c-e54f-4f6c-9311-be0c6e1c8254","type":"message","text":"thanks","user":"UM8JUNJG7","ts":"1618155529.303900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"det","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thanks"}]}]}],"thread_ts":"1617848600.241500","parent_user_id":"UM8JUNJG7"}]