[{"client_msg_id":"cee90923-1773-468f-af2a-f67921b28daf","type":"message","text":":grapes::grapes:::grapes::\n`mean` doesn’t support missing values when using the `dims` argument.\n`sum` does, but it doesn’t work with `skipmissing`\nDoing broadcasted ops on skipmissing’ed matrixes gives back vectors (`e.g. `skipmissing(mymatrix).^2` )","user":"U6A936746","ts":"1615992820.009500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"maBl","elements":[{"type":"rich_text_section","elements":[{"type":"emoji","name":"grapes"},{"type":"emoji","name":"grapes"},{"type":"text","text":":"},{"type":"emoji","name":"grapes"},{"type":"text","text":":\n"},{"type":"text","text":"mean","style":{"code":true}},{"type":"text","text":" doesn’t support missing values when using the "},{"type":"text","text":"dims","style":{"code":true}},{"type":"text","text":" argument.\n"},{"type":"text","text":"sum","style":{"code":true}},{"type":"text","text":" does, but it doesn’t work with "},{"type":"text","text":"skipmissing","style":{"code":true}},{"type":"text","text":"\nDoing broadcasted ops on skipmissing’ed matrixes gives back vectors (`e.g. "},{"type":"text","text":"skipmissing(mymatrix).^2","style":{"code":true}},{"type":"text","text":" )"}]}]}],"thread_ts":"1615992820.009500","reply_count":7,"reply_users_count":2,"latest_reply":"1615994008.011200","reply_users":["U6A936746","UM30MT6RF"],"subscribed":false,"reactions":[{"name":"+1","users":["U73KENNG4","UH8A351DJ"],"count":2}]},{"client_msg_id":"14ea1818-f814-4a61-96c6-1d4898222d37","type":"message","text":"(I will open an issue about this later today)","user":"U6A936746","ts":"1615992875.009800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"08AK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(I will open an issue about this later today)"}]}]}],"thread_ts":"1615992820.009500","parent_user_id":"U6A936746"},{"client_msg_id":"d1c6a988-9c22-4435-b711-5043afe7bea7","type":"message","text":"I don't think there's much to do about the last one, since `skipmissing(mymatrix)` can't be represented as a matrix in general.","user":"UM30MT6RF","ts":"1615993318.010200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w7d","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't think there's much to do about the last one, since "},{"type":"text","text":"skipmissing(mymatrix)","style":{"code":true}},{"type":"text","text":" can't be represented as a matrix in general."}]}]}],"thread_ts":"1615992820.009500","parent_user_id":"U6A936746"},{"client_msg_id":"2808a6b4-9223-4af7-a81e-2685f6e0a45f","type":"message","text":"While it can’t, I am entirely sure it  has  to be.\nSince it is a lazy type.\ncan’t `skipmissing(mymatrix).^2` return the same as `skipmissing(mymatrix.^2)` ?\nNo, those can’t alway  always be commuted. they can in the case of `x.^2`,\nBut I guess not `ismissing.(skipmissing(mymatrix))`  (that should make a matrix of all missings or falses, where  as pushing it inside is a matrix of trues and falses.)\n\nI think to make it generalise over both those case we can:\n maintain a mask array from its original state, apply the operation to the inner matrix, then use that mask array to reinsert the missings, and then rewrap in `skipmissing`?\nSuch that it looks like we still skipped operating on elements that were missing.","user":"U6A936746","ts":"1615993789.010400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zb+j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"While it can’t, I am entirely sure it  has  to be.\nSince it is a lazy type.\ncan’t "},{"type":"text","text":"skipmissing(mymatrix).^2","style":{"code":true}},{"type":"text","text":" return the same as "},{"type":"text","text":"skipmissing(mymatrix.^2)","style":{"code":true}},{"type":"text","text":" ?\nNo, those can’t alway  always be commuted. they can in the case of "},{"type":"text","text":"x.^2","style":{"code":true}},{"type":"text","text":",\nBut I guess not "},{"type":"text","text":"ismissing.(skipmissing(mymatrix))","style":{"code":true}},{"type":"text","text":"  (that should make a matrix of all missings or falses, where  as pushing it inside is a matrix of trues and falses.)\n\nI think to make it generalise over both those case we can:\n maintain a mask array from its original state, apply the operation to the inner matrix, then use that mask array to reinsert the missings, and then rewrap in "},{"type":"text","text":"skipmissing","style":{"code":true}},{"type":"text","text":"?\nSuch that it looks like we still skipped operating on elements that were missing."}]}]}],"thread_ts":"1615992820.009500","parent_user_id":"U6A936746"},{"client_msg_id":"0bf35d42-8f30-4580-84f5-290160928939","type":"message","text":"If the function has side-effects or is very expensive, we don't want to apply it to the missing entries though","user":"UM30MT6RF","ts":"1615993907.010600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QrU6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If the function has side-effects or is very expensive, we don't want to apply it to the missing entries though"}]}]}],"thread_ts":"1615992820.009500","parent_user_id":"U6A936746"},{"client_msg_id":"2b3881a3-a8f7-4aad-ad46-b254e2b24ff2","type":"message","text":"Can we use the mask to determine that?\nI think we can","user":"U6A936746","ts":"1615993948.010800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XGR5j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can we use the mask to determine that?\nI think we can"}]}]}],"thread_ts":"1615992820.009500","parent_user_id":"U6A936746"},{"client_msg_id":"dc3843a9-c621-485f-8fc0-e68df49e8e3f","type":"message","text":"This needs some thought to see if it generalizes to cases where the broadcase is not equivelement to `map`","user":"U6A936746","ts":"1615994004.011000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KS3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This needs some thought to see if it generalizes to cases where the broadcase is not equivelement to "},{"type":"text","text":"map","style":{"code":true}}]}]}],"thread_ts":"1615992820.009500","parent_user_id":"U6A936746"},{"client_msg_id":"716639f6-cc77-47b1-827e-ebda709fbda9","type":"message","text":"Maybe, but I still don't really understand the benefits","user":"UM30MT6RF","ts":"1615994008.011200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PnC8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe, but I still don't really understand the benefits"}]}]}],"thread_ts":"1615992820.009500","parent_user_id":"U6A936746"}]