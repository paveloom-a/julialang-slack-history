[{"client_msg_id":"64c17b29-2def-49be-9bd4-cf4b67618135","type":"message","text":"`any` is `false` for empty collections and `all` is `true` for empty collections","user":"U680THK2S","ts":"1612216243.205400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7VGEr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"any","style":{"code":true}},{"type":"text","text":" is "},{"type":"text","text":"false","style":{"code":true}},{"type":"text","text":" for empty collections and "},{"type":"text","text":"all","style":{"code":true}},{"type":"text","text":" is "},{"type":"text","text":"true","style":{"code":true}},{"type":"text","text":" for empty collections"}]}]}],"thread_ts":"1612216243.205400","reply_count":16,"reply_users_count":7,"latest_reply":"1612372352.241600","reply_users":["U7JQGPGCQ","U8D9768Q6","U019K6Q9N15","U6795JH6H","UH8A351DJ","U8T0YV7QC","U69J94HT9"],"subscribed":false,"reactions":[{"name":"lightbulb","users":["U7JQGPGCQ","U6795JH6H"],"count":2},{"name":"today-i-learned","users":["U7JQGPGCQ","U6795JH6H"],"count":2},{"name":"philosoraptor","users":["UDB26738Q","UDXST8ARK","U66M57AN4","U6C5KSWAC","UEN48T0BT","U6795JH6H","U8T0YV7QC","ULMSM9MAL"],"count":8},{"name":"+1","users":["U6A936746","U6795JH6H","U6740K1SP","UH8A351DJ","U6NFPDBV1"],"count":5}]},{"client_msg_id":"e9fe635f-8152-457d-b5ec-ff6213477d34","type":"message","text":"I vaguely feel like I've seen this before","user":"U7JQGPGCQ","ts":"1612216347.205800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ovR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I vaguely feel like I've seen this before"}]}]}],"thread_ts":"1612216243.205400","parent_user_id":"U680THK2S"},{"client_msg_id":"8cc79e38-bada-4a6d-8c7c-f279014e13b1","type":"message","text":"Maybe the reasoning is a bit clearer if you think in terms of `sum` versus `prod` first. Summing an empty collection should give one the additive identity element, `0`, whereas taking the product of an empty collection should give the multiplicative identity element, `1`.","user":"U8D9768Q6","ts":"1612216999.206400","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1612217146.000000"},"blocks":[{"type":"rich_text","block_id":"ekBzm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe the reasoning is a bit clearer if you think in terms of "},{"type":"text","text":"sum","style":{"code":true}},{"type":"text","text":" versus "},{"type":"text","text":"prod","style":{"code":true}},{"type":"text","text":" first. Summing an empty collection should give one the additive identity element, "},{"type":"text","text":"0","style":{"code":true}},{"type":"text","text":", whereas taking the product of an empty collection should give the multiplicative identity element, "},{"type":"text","text":"1","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1612216243.205400","parent_user_id":"U680THK2S"},{"client_msg_id":"3a88820f-bfc8-43b7-b166-2ef4204592a8","type":"message","text":"Can you see how / why we might make an analogy here to boolean arithmetic in `any` and `all`?","user":"U8D9768Q6","ts":"1612217058.206600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"21n27","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can you see how / why we might make an analogy here to boolean arithmetic in "},{"type":"text","text":"any","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"all","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1612216243.205400","parent_user_id":"U680THK2S"},{"client_msg_id":"5ff03aa0-be06-4a6b-bb79-e659d8f75164","type":"message","text":"This is definitely good enough to make an \"Eselsbruecke\" (I know you always appreciate a good German turn of phrase :slightly_smiling_face: ), although I'm not sure I'm convinced that `any == +` and `all == *`, which I think is what you're saying?","user":"U7JQGPGCQ","ts":"1612217163.207200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VPd1E","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is definitely good enough to make an \"Eselsbruecke\" (I know you always appreciate a good German turn of phrase "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":" ), although I'm not sure I'm convinced that "},{"type":"text","text":"any == +","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"all == *","style":{"code":true}},{"type":"text","text":", which I think is what you're saying?"}]}]}],"thread_ts":"1612216243.205400","parent_user_id":"U680THK2S"},{"client_msg_id":"0e4332bf-c862-49d0-8677-63c3907c9032","type":"message","text":"So, if you study addition and multiplication on integers modulo 2, you'll find that `a * b` corresponds to `a &amp; b`, whereas `a + b` corresponds do `xor(a, b)`. I didn't think very hard and conflated `or` with `xor` above, so what I said is not as clean as I thought it was","user":"U8D9768Q6","ts":"1612217990.207500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ynZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So, if you study addition and multiplication on integers modulo 2, you'll find that "},{"type":"text","text":"a * b","style":{"code":true}},{"type":"text","text":" corresponds to "},{"type":"text","text":"a & b","style":{"code":true}},{"type":"text","text":", whereas "},{"type":"text","text":"a + b","style":{"code":true}},{"type":"text","text":" corresponds do "},{"type":"text","text":"xor(a, b)","style":{"code":true}},{"type":"text","text":". I didn't think very hard and conflated "},{"type":"text","text":"or","style":{"code":true}},{"type":"text","text":" with "},{"type":"text","text":"xor","style":{"code":true}},{"type":"text","text":" above, so what I said is not as clean as I thought it was"}]}]}],"thread_ts":"1612216243.205400","parent_user_id":"U680THK2S"},{"client_msg_id":"1bb3e3d0-6164-4a26-8310-6c083888fbda","type":"message","text":"But we can still define `or` as\n```or(x, y)  = xor(xor(x, y), and(x, y))\nand(x, y) = mod(x*y, 2)\nxor(x, y) = mod(x + y, 2)```\nso I think if one stares at this, plus thinking of `any(v)` as `reduce(or, v)`, then I think it feels intuitively right that the identity element of `or` is the same identity element as `+`.","user":"U8D9768Q6","ts":"1612218535.207700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QlCGN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But we can still define "},{"type":"text","text":"or","style":{"code":true}},{"type":"text","text":" as\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"or(x, y)  = xor(xor(x, y), and(x, y))\nand(x, y) = mod(x*y, 2)\nxor(x, y) = mod(x + y, 2)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"so I think if one stares at this, plus thinking of "},{"type":"text","text":"any(v)","style":{"code":true}},{"type":"text","text":" as "},{"type":"text","text":"reduce(or, v)","style":{"code":true}},{"type":"text","text":", then I think it feels intuitively right that the identity element of "},{"type":"text","text":"or","style":{"code":true}},{"type":"text","text":" is the same identity element as "},{"type":"text","text":"+","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1612216243.205400","parent_user_id":"U680THK2S","reactions":[{"name":"100","users":["U01HD5VFXJM","U6QGE7S86","U0179G7FG4F"],"count":3}]},{"client_msg_id":"073a8430-e99e-4770-acdb-66587ac4e0f7","type":"message","text":"Ah yes actually any is 1 if we sum a number of booleans and any of them is 1 (so it's addition, capped at 1), while for all it's only 1 if there are no zeros, like for a product. It does make sense when thinking about it that way!","user":"U7JQGPGCQ","ts":"1612218654.207900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OPDT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah yes actually any is 1 if we sum a number of booleans and any of them is 1 (so it's addition, capped at 1), while for all it's only 1 if there are no zeros, like for a product. It does make sense when thinking about it that way!"}]}]}],"thread_ts":"1612216243.205400","parent_user_id":"U680THK2S","reactions":[{"name":"heavy_check_mark","users":["U8D9768Q6","U6QGE7S86"],"count":2}]},{"client_msg_id":"f7ff0313-7222-475c-b611-93fd231004af","type":"message","text":"I'm digging <@U8D9768Q6>’s exploration, there.","user":"U019K6Q9N15","ts":"1612221437.209100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RTV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm digging "},{"type":"user","user_id":"U8D9768Q6"},{"type":"text","text":"’s exploration, there."}]}]}],"thread_ts":"1612216243.205400","parent_user_id":"U680THK2S"},{"client_msg_id":"1e8fb00b-568f-42c6-ac8e-736c97c5fd54","type":"message","text":"it’s also true if you think about the logical definitions","user":"U6795JH6H","ts":"1612222634.210000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sgHJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it’s also true if you think about the logical definitions"}]}]}],"thread_ts":"1612216243.205400","parent_user_id":"U680THK2S"},{"client_msg_id":"8f21fdef-9a80-461d-8110-28b63465a396","type":"message","text":"“for all” means that for every item the predicate is true, which is true if there are no items","user":"U6795JH6H","ts":"1612222660.210200","team":"T68168MUP","edited":{"user":"U6795JH6H","ts":"1612222704.000000"},"blocks":[{"type":"rich_text","block_id":"=suMa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"“for all” means that for every item the predicate is true, which is true if there are no items"}]}]}],"thread_ts":"1612216243.205400","parent_user_id":"U680THK2S","reactions":[{"name":"heavy_check_mark","users":["U680THK2S","U0179G7FG4F","U7THT3TM3","UH8A351DJ","U6QGE7S86","U8T0YV7QC"],"count":6}]},{"client_msg_id":"3d1c8ab8-fdf9-49b1-ad29-d73f64ac57d7","type":"message","text":"“any” means that there exists an item for which the predicate is true, which is false if there are no items","user":"U6795JH6H","ts":"1612222686.210500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EE6X","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"“any” means that there exists an item for which the predicate is true, which is false if there are no items"}]}]}],"thread_ts":"1612216243.205400","parent_user_id":"U680THK2S","reactions":[{"name":"heavy_check_mark","users":["U7THT3TM3","U680THK2S","U6A936746","URN898S15","UH8A351DJ","U6QGE7S86","U8T0YV7QC"],"count":7}]},{"client_msg_id":"fb025b54-8b6a-4ba9-b1a8-88dc3b4c9923","type":"message","text":"extra reading:\n<https://en.wikipedia.org/wiki/Vacuous_truth>","user":"UH8A351DJ","ts":"1612233146.215100","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1612282318.000000"},"blocks":[{"type":"rich_text","block_id":"U+n4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"extra reading:\n"},{"type":"link","url":"https://en.wikipedia.org/wiki/Vacuous_truth"}]}]}],"thread_ts":"1612216243.205400","parent_user_id":"U680THK2S","reactions":[{"name":"+1","users":["U7JQGPGCQ"],"count":1}]},{"client_msg_id":"ef933e8c-30df-4bc5-b39a-e5ed86bd77d9","type":"message","text":"Thanks all, I secretly knew I'd get a better explanation in <#C67TK21LJ|gripes> than in <#C6A044SQH|helpdesk> (this is the conceptual-issue corollary to the theorem that the best performance help can be had by implementing an algorithm badly in Julia, then griping that Python/R/COBOL are faster) :slightly_smiling_face:","user":"U7JQGPGCQ","ts":"1612255621.215600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6hAyy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks all, I secretly knew I'd get a better explanation in "},{"type":"channel","channel_id":"C67TK21LJ"},{"type":"text","text":" than in "},{"type":"channel","channel_id":"C6A044SQH"},{"type":"text","text":" (this is the conceptual-issue corollary to the theorem that the best performance help can be had by implementing an algorithm badly in Julia, then griping that Python/R/COBOL are faster) "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1612216243.205400","parent_user_id":"U680THK2S","reactions":[{"name":"point_up","users":["UB7JS9CHF","U6795JH6H","U8T0YV7QC"],"count":3},{"name":"joy","users":["UB7JS9CHF","U6795JH6H","U8T0YV7QC","U8D9768Q6","UH8A351DJ"],"count":5},{"name":"heavy_check_mark","users":["U6795JH6H","U8D9768Q6"],"count":2}]},{"client_msg_id":"C67B46A0-735C-4E29-8B05-8E62FF9ACFFD","type":"message","text":"Another option is to throw an `EmptyCollectionError`? Probably hurts performance...","user":"U8T0YV7QC","ts":"1612280947.218700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zJGN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Another option is to throw an "},{"type":"text","text":"EmptyCollectionError","style":{"code":true}},{"type":"text","text":"? Probably hurts performance..."}]}]}],"thread_ts":"1612216243.205400","parent_user_id":"U680THK2S"},{"client_msg_id":"0405c304-a9a9-41e1-a02f-4b97c048449f","type":"message","text":"also generality. even though it’s a little unintuitive, this is the indisputably correct behavior","user":"U6795JH6H","ts":"1612283058.219700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3a=n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"also generality. even though it’s a little unintuitive, this is the indisputably correct behavior"}]}]}],"thread_ts":"1612216243.205400","parent_user_id":"U680THK2S","reactions":[{"name":"point_up","users":["UH8A351DJ","U680THK2S"],"count":2}]},{"client_msg_id":"a867dac5-fefb-4cef-8cda-e3b62c1d0f37","type":"message","text":"The `any` one is intuitive for me but the `all` isn't, so it's helpful for me to think of this equivalence:\n\n```all(f, collection) == !any(!f, collection)```","user":"U69J94HT9","ts":"1612372352.241600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ffz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The "},{"type":"text","text":"any","style":{"code":true}},{"type":"text","text":" one is intuitive for me but the "},{"type":"text","text":"all","style":{"code":true}},{"type":"text","text":" isn't, so it's helpful for me to think of this equivalence:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"all(f, collection) == !any(!f, collection)"}]}]}],"thread_ts":"1612216243.205400","parent_user_id":"U680THK2S","reactions":[{"name":"point_up","users":["U6795JH6H"],"count":1},{"name":"+1","users":["U8D9768Q6"],"count":1}]}]