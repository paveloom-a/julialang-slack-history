[{"client_msg_id":"9cfb5d78-d90f-4286-84d4-e2df7f3376da","type":"message","text":"```ERROR: MethodError: no method matching Array{Float64, 1}(::Vector{Float64})```\nWhen the literal `1` is a `Int64` on a 32bit julia version.\nThis happens when reconstructing type signatures from JLD2 files\n<https://github.com/JuliaIO/JLD2.jl/issues/281>","user":"U9769MVA7","ts":"1614155176.054000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XuqLj","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"ERROR: MethodError: no method matching Array{Float64, 1}(::Vector{Float64})"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"When the literal "},{"type":"text","text":"1","style":{"code":true}},{"type":"text","text":" is a "},{"type":"text","text":"Int64","style":{"code":true}},{"type":"text","text":" on a 32bit julia version.\nThis happens when reconstructing type signatures from JLD2 files\n"},{"type":"link","url":"https://github.com/JuliaIO/JLD2.jl/issues/281"}]}]}],"thread_ts":"1614155176.054000","reply_count":10,"reply_users_count":2,"latest_reply":"1614159370.056600","reply_users":["U9769MVA7","U6A936746"],"subscribed":false},{"client_msg_id":"081190e6-1c2d-4b1b-8a36-abefd4fdc137","type":"message","text":"The other way round is just the same\n```julia&gt; Array{Float64, Int32(1)}(rand(3)) \nERROR: MethodError: no method matching Array{Float64,1}(::Array{Float64,1})```\n","user":"U9769MVA7","ts":"1614155245.054100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HY/kK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The other way round is just the same\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Array{Float64, Int32(1)}(rand(3)) \nERROR: MethodError: no method matching Array{Float64,1}(::Array{Float64,1})"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1614155176.054000","parent_user_id":"U9769MVA7"},{"client_msg_id":"04574b8f-0d93-4af3-92ba-fe84314370ec","type":"message","text":"In a way, this makes sense, but it would a strong case of DWIM to just automatically convert any `Int`  type parameter to the system precision, no?","user":"U9769MVA7","ts":"1614155346.054300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nbBDd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In a way, this makes sense, but it would a strong case of DWIM to just automatically convert any "},{"type":"text","text":"Int","style":{"code":true}},{"type":"text","text":"  type parameter to the system precision, no?"}]}]}],"thread_ts":"1614155176.054000","parent_user_id":"U9769MVA7"},{"client_msg_id":"17e0c700-aa3e-4405-bc10-51fec928e8eb","type":"message","text":"I had to fix this is BSON.jl ages back.","user":"U6A936746","ts":"1614155782.054500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C8a","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I had to fix this is BSON.jl ages back."}]}]}],"thread_ts":"1614155176.054000","parent_user_id":"U9769MVA7"},{"client_msg_id":"c3a4bc4e-5a97-4e03-a8d7-4cf7e7936baa","type":"message","text":"What solution did you decide on?","user":"U9769MVA7","ts":"1614156002.054700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QpTA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What solution did you decide on?"}]}]}],"thread_ts":"1614155176.054000","parent_user_id":"U9769MVA7"},{"client_msg_id":"57de67bd-0423-48a3-9133-7157515356a5","type":"message","text":"`params = [p isa Union{Int64,Int32} ? Int(p) : p for p in params]`\nCall something like this on the type parameters prior to type instantiation?","user":"U9769MVA7","ts":"1614156041.054900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kQc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"params = [p isa Union{Int64,Int32} ? Int(p) : p for p in params]","style":{"code":true}},{"type":"text","text":"\nCall something like this on the type parameters prior to type instantiation?"}]}]}],"thread_ts":"1614155176.054000","parent_user_id":"U9769MVA7"},{"client_msg_id":"78c04d81-bd70-4789-ad3a-6ce97e8ea7c5","type":"message","text":"I don't recall, but here is the PR\n<https://github.com/JuliaIO/BSON.jl/pull/42|https://github.com/JuliaIO/BSON.jl/pull/42>","user":"U6A936746","ts":"1614156557.055100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VMop","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't recall, but here is the PR\n"},{"type":"link","url":"https://github.com/JuliaIO/BSON.jl/pull/42","text":"https://github.com/JuliaIO/BSON.jl/pull/42"}]}]}],"thread_ts":"1614155176.054000","parent_user_id":"U9769MVA7","reactions":[{"name":"heart","users":["U9769MVA7"],"count":1}]},{"client_msg_id":"c3f86854-7f55-4393-8b6d-fb47eac59e50","type":"message","text":"Thanks, that's essentially the same as above","user":"U9769MVA7","ts":"1614158520.055800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aiB5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks, that's essentially the same as above"}]}]}],"thread_ts":"1614155176.054000","parent_user_id":"U9769MVA7","reactions":[{"name":"+1","users":["U6A936746"],"count":1},{"name":"heavy_check_mark","users":["U6A936746"],"count":1}]},{"client_msg_id":"4ec7b957-6785-4710-9dd6-6e60245e32c1","type":"message","text":"Problem with this is that if you did have an intentionally `Int32` or `Int64` type param then this would mangle it.\n\nSeems unlikely in practice","user":"U6A936746","ts":"1614159072.056200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qloF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Problem with this is that if you did have an intentionally `Int32` or "},{"type":"text","text":"Int64 ","style":{"code":true}},{"type":"text","text":"type param then this would mangle it.\n\nSeems unlikely in practice"}]}]}],"thread_ts":"1614155176.054000","parent_user_id":"U9769MVA7"},{"client_msg_id":"bd951094-5e6e-4c30-a351-01939c82c818","type":"message","text":"Yes, that's what I was wondering, but yes, that's not too likely","user":"U9769MVA7","ts":"1614159213.056400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sL5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, that's what I was wondering, but yes, that's not too likely"}]}]}],"thread_ts":"1614155176.054000","parent_user_id":"U9769MVA7"},{"client_msg_id":"d1549971-d613-4dd0-8762-c08f40ac5a93","type":"message","text":"I kind of wish Julia integer literals were always the smallest type  Int32 or greater that could hold them (that's how some literals are Int128 works already )\nI don't think it's worth it to by default to distinguish them to never be smaller than the system word size.\nInt32 performs completely fine on a 64 bit system AFAIK.","user":"U6A936746","ts":"1614159370.056600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1Udro","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I kind of wish Julia integer literals were always the smallest type  Int32 or greater that could hold them (that's how some literals are Int128 works already )\nI don't think it's worth it to by default to distinguish them to never be smaller than the system word size.\nInt32 performs completely fine on a 64 bit system AFAIK."}]}]}],"thread_ts":"1614155176.054000","parent_user_id":"U9769MVA7"}]