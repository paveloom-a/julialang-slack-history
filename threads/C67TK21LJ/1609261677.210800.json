[{"client_msg_id":"d1fc0844-11e6-4a93-b2b0-532c122f70c5","type":"message","text":"It is too bad we never worked out a convention for naming constructors that “take ownership” of there inputs and may mutate them or otherwise render them unusuable.\nLIke `Base.String(::Vector)` . DataFrames tried out `DataFrame!` but people didn’t like it (fair enough).","user":"U6A936746","ts":"1609261677.210800","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1609261682.000000"},"blocks":[{"type":"rich_text","block_id":"Ly/4+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It is too bad we never worked out a convention for naming constructors that “take ownership” of there inputs and may mutate them or otherwise render them unusuable.\nLIke "},{"type":"text","text":"Base.String(::Vector)","style":{"code":true}},{"type":"text","text":" . DataFrames tried out "},{"type":"text","text":"DataFrame!","style":{"code":true}},{"type":"text","text":" but people didn’t like it (fair enough)."}]}]}],"thread_ts":"1609261677.210800","reply_count":20,"reply_users_count":6,"latest_reply":"1609297834.226100","reply_users":["U7HAYKY9X","U6A936746","U8JAMQGQY","U7THT3TM3","U6795JH6H","U67431ELR"],"subscribed":false},{"client_msg_id":"a64c173d-4104-42c0-bda8-6b2d83b6513a","type":"message","text":"What was wrong with `DataFrame!` ? I kind of like `String!` , and just thought it was kept as `String` for backwards compatibility","user":"U7HAYKY9X","ts":"1609261834.211000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mLhf/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What was wrong with "},{"type":"text","text":"DataFrame!","style":{"code":true}},{"type":"text","text":" ? I kind of like "},{"type":"text","text":"String!","style":{"code":true}},{"type":"text","text":" , and just thought it was kept as "},{"type":"text","text":"String","style":{"code":true}},{"type":"text","text":" for backwards compatibility"}]}]}],"thread_ts":"1609261677.210800","parent_user_id":"U6A936746"},{"client_msg_id":"5318bff9-3dfa-4cdb-ac06-c290210352b6","type":"message","text":"idk, i just know it is gone now.\n<@U8JAMQGQY> ?","user":"U6A936746","ts":"1609262287.211200","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1609262292.000000"},"blocks":[{"type":"rich_text","block_id":"DDe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"idk, i just know it is gone now.\n"},{"type":"user","user_id":"U8JAMQGQY"},{"type":"text","text":" ?"}]}]}],"thread_ts":"1609261677.210800","parent_user_id":"U6A936746"},{"client_msg_id":"0963ef09-ceb8-4fb6-977a-c13a7d981c0d","type":"message","text":"`String!` is also a bit different from `DataFrame!` since it actually does mutate the original string, as well as taking ownership of it.\nI feel like taking ownership of it means “we may or may not mutate this, you should not access its value anymore”.\nAnd `String(::Vector)` has that, and a special trick up it’s sleave of emptying the `Vector` so  as to enforce it","user":"U6A936746","ts":"1609262402.211500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"k+a","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"String!","style":{"code":true}},{"type":"text","text":" is also a bit different from "},{"type":"text","text":"DataFrame!","style":{"code":true}},{"type":"text","text":" since it actually does mutate the original string, as well as taking ownership of it.\nI feel like taking ownership of it means “we may or may not mutate this, you should not access its value anymore”.\nAnd "},{"type":"text","text":"String(::Vector)","style":{"code":true}},{"type":"text","text":" has that, and a special trick up it’s sleave of emptying the "},{"type":"text","text":"Vector","style":{"code":true}},{"type":"text","text":" so  as to enforce it"}]}]}],"thread_ts":"1609261677.210800","parent_user_id":"U6A936746"},{"client_msg_id":"b9d6c458-322b-4581-bad1-765fab28196f","type":"message","text":"`DataFrame!` was removed due to many requests  and confusion. Since the CSV.jl updates its main use case was gone. Use `copycols=false` kwarg instead.","user":"U8JAMQGQY","ts":"1609262577.211700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6aXu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"DataFrame!","style":{"code":true}},{"type":"text","text":" was removed due to many requests  and confusion. Since the CSV.jl updates its main use case was gone. Use "},{"type":"text","text":"copycols=false","style":{"code":true}},{"type":"text","text":" kwarg instead."}]}]}],"thread_ts":"1609261677.210800","parent_user_id":"U6A936746","reactions":[{"name":"+1","users":["U7HAYKY9X","U6A936746","U7THT3TM3","UDXST8ARK"],"count":4}]},{"client_msg_id":"7e46474d-b351-434e-bdab-b6289ae7f533","type":"message","text":"I guess you're right that \"Mutate this thing and hand it back\" is differently conceptually from \"Take ownership of this thing\".","user":"U7HAYKY9X","ts":"1609262792.212100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9lkgZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess you're right that \"Mutate this thing and hand it back\" is differently conceptually from \"Take ownership of this thing\"."}]}]}],"thread_ts":"1609261677.210800","parent_user_id":"U6A936746"},{"client_msg_id":"a1bf39b5-6e5a-4442-9d0e-689d7485a9db","type":"message","text":"In Julia 2.0, I would like to change `String(::Vector)` to `String!(::Vector)`","user":"U7THT3TM3","ts":"1609264628.212300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5yKvp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In Julia 2.0, I would like to change "},{"type":"text","text":"String(::Vector)","style":{"code":true}},{"type":"text","text":" to "},{"type":"text","text":"String!(::Vector)","style":{"code":true}}]}]}],"thread_ts":"1609261677.210800","parent_user_id":"U6A936746"},{"client_msg_id":"97a9231b-b54f-42e3-9a38-a753b1a22bb6","type":"message","text":"Can we do better than that somehow? To capture more generally the idea about ownership, rather than (just) mutation?","user":"U6A936746","ts":"1609265148.212600","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1609265172.000000"},"blocks":[{"type":"rich_text","block_id":"jROH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can we do better than that somehow? To capture more generally the idea about ownership, rather than (just) mutation?"}]}]}],"thread_ts":"1609261677.210800","parent_user_id":"U6A936746"},{"client_msg_id":"9db374cc-d03e-487a-8ab3-86326e0dfd98","type":"message","text":"Maybe `!!` instead of `!`?","user":"U7THT3TM3","ts":"1609265740.212900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ggPW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe "},{"type":"text","text":"!!","style":{"code":true}},{"type":"text","text":" instead of "},{"type":"text","text":"!","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1609261677.210800","parent_user_id":"U6A936746","reactions":[{"name":"bangbang","users":["U6C5KSWAC","U68P09RFZ"],"count":2}]},{"client_msg_id":"5e376d1b-c79a-46cb-a872-7653300ac831","type":"message","text":"That convention might already be taken though","user":"U7THT3TM3","ts":"1609265747.213100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pG2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That convention might already be taken though"}]}]}],"thread_ts":"1609261677.210800","parent_user_id":"U6A936746"},{"client_msg_id":"4059cd06-713e-4faf-869a-dfa80f73d045","type":"message","text":"That’s already taken to mean: _“May or may not mutate, but will return the right answer”_\nwhich is pretty handy","user":"U6A936746","ts":"1609266043.213400","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1609266055.000000"},"blocks":[{"type":"rich_text","block_id":"6xQ72","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That’s already taken to mean: "},{"type":"text","text":"“May or may not mutate, but will return the right answer”","style":{"italic":true}},{"type":"text","text":"\nwhich is pretty handy"}]}]}],"thread_ts":"1609261677.210800","parent_user_id":"U6A936746"},{"client_msg_id":"7E47FF52-F4BE-4230-A60B-433100BB308A","type":"message","text":"I think that Jeff objected to the fact that it doesn’t create a `String!` object","user":"U6795JH6H","ts":"1609267522.214800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9/tK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think that Jeff objected to the fact that it doesn’t create a "},{"type":"text","text":"String!","style":{"code":true}},{"type":"text","text":" object"}]}]}],"thread_ts":"1609261677.210800","parent_user_id":"U6A936746"},{"client_msg_id":"2485ABD8-39B7-4A73-9B44-63976E158D75","type":"message","text":"It's a fair point","user":"U7THT3TM3","ts":"1609267996.215300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7Ah","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's a fair point"}]}]}],"thread_ts":"1609261677.210800","parent_user_id":"U6A936746"},{"client_msg_id":"85981ba5-dbb8-411a-8748-b1a8cbca53a9","type":"message","text":"I think the opposite is the case.\nI would complain if anyone named a type  `Foo!` , unless all its constructors mutated the inputs, which seems unreasonable and unlikely.","user":"U6A936746","ts":"1609268737.215500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bYh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think the opposite is the case.\nI would complain if anyone named a type  "},{"type":"text","text":"Foo!","style":{"code":true}},{"type":"text","text":" , unless all its constructors mutated the inputs, which seems unreasonable and unlikely."}]}]}],"thread_ts":"1609261677.210800","parent_user_id":"U6A936746"},{"client_msg_id":"998077BF-3030-4EC1-BD08-CD886F997F23","type":"message","text":"Maybe in Julia 2.0, we just shouldn't have the `String!(::Vector) -&gt; String` constructor.\n\nInstead, if you want to create a string from a vector of bytes, you have to use `string!(::Vector) -&gt; String`. ","user":"U7THT3TM3","ts":"1609268869.216900","team":"T68168MUP","edited":{"user":"U7THT3TM3","ts":"1609268910.000000"},"blocks":[{"type":"rich_text","block_id":"MmOk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe in Julia 2.0, we just shouldn't have the "},{"type":"text","text":"String!(::Vector","style":{"code":true}},{"type":"text","text":") -> String","style":{"code":true}},{"type":"text","text":" constructor.\n\nInstead, if you want to create a string from a vector of bytes, you have to use "},{"type":"text","text":"string!(::Vector)","style":{"code":true}},{"type":"text","text":" -> String","style":{"code":true}},{"type":"text","text":". "}]}]}],"thread_ts":"1609261677.210800","parent_user_id":"U6A936746"},{"client_msg_id":"8D2B75A9-0B6A-457D-8558-C73B07E10FB2","type":"message","text":"I think that addresses Jeff's objection, while still having `!` at the end of methods that mutate their input","user":"U7THT3TM3","ts":"1609268963.218300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Vr=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think that addresses Jeff's objection, while still having "},{"type":"text","text":"!","style":{"code":true}},{"type":"text","text":" at the end of methods that mutate their input"}]}]}],"thread_ts":"1609261677.210800","parent_user_id":"U6A936746"},{"client_msg_id":"771fb258-8db2-4f86-8b9c-5b5057e15bd9","type":"message","text":"could be, but that would be different from the current `string(::Vector)` in a confusing way.\nOTOH the current `string` function maybe would be renamed by then (Its not especially lovely having `string(args…) = sprint(print, args…)`  )","user":"U6A936746","ts":"1609269067.218500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Aoi0t","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"could be, but that would be different from the current "},{"type":"text","text":"string(::Vector)","style":{"code":true}},{"type":"text","text":" in a confusing way.\nOTOH the current "},{"type":"text","text":"string","style":{"code":true}},{"type":"text","text":" function maybe would be renamed by then (Its not especially lovely having "},{"type":"text","text":"string(args…) = sprint(print, args…)","style":{"code":true}},{"type":"text","text":"  )"}]}]}],"thread_ts":"1609261677.210800","parent_user_id":"U6A936746"},{"client_msg_id":"3FEFC534-AA2A-4589-9402-05F8396ACE2F","type":"message","text":"`construct_string!(::Vector)`, maybe?","user":"U7THT3TM3","ts":"1609269529.219400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OCGlv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"construct_string!(::Vector)","style":{"code":true}},{"type":"text","text":", maybe?"}]}]}],"thread_ts":"1609261677.210800","parent_user_id":"U6A936746"},{"client_msg_id":"c7cb43bd-50e4-49c2-bccb-571127372a8b","type":"message","text":"IIRC the problem is that we really want people to use the string constructor that takes ownership as it's much faster and most of the time it's what you want. Having it be called `String` ensures that. If we called it `String!` instead, either we would also have `String` and people would use the slow one by default and later complain about performance, or we would only have `String!` and it would be weird.","user":"U67431ELR","ts":"1609279752.219700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Gd8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"IIRC the problem is that we really want people to use the string constructor that takes ownership as it's much faster and most of the time it's what you want. Having it be called "},{"type":"text","text":"String","style":{"code":true}},{"type":"text","text":" ensures that. If we called it "},{"type":"text","text":"String!","style":{"code":true}},{"type":"text","text":" instead, either we would also have "},{"type":"text","text":"String","style":{"code":true}},{"type":"text","text":" and people would use the slow one by default and later complain about performance, or we would only have "},{"type":"text","text":"String!","style":{"code":true}},{"type":"text","text":" and it would be weird."}]}]}],"thread_ts":"1609261677.210800","parent_user_id":"U6A936746"},{"client_msg_id":"dbc50787-19c6-4230-b856-3d09ab518598","type":"message","text":"I would prefer slow-but-safe defaults and opt-in unsafe/unexpected behaviour","user":"U7HAYKY9X","ts":"1609280694.219900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4mh3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I would prefer slow-but-safe defaults and opt-in unsafe/unexpected behaviour"}]}]}],"thread_ts":"1609261677.210800","parent_user_id":"U6A936746","reactions":[{"name":"point_up","users":["U6A936746","U6795JH6H"],"count":2}]},{"client_msg_id":"f5dcc571-78bb-481d-8672-f755b6f3d523","type":"message","text":"Idk if I agree. I think for certain things, it's fine for the fast/unsafe behavior to be the default. E.g. we default to unchecked integer arithmetic, because it's faster than both checked integer arithmetic and `BigInt`.","user":"U7THT3TM3","ts":"1609297834.226100","team":"T68168MUP","edited":{"user":"U7THT3TM3","ts":"1609297870.000000"},"blocks":[{"type":"rich_text","block_id":"iNUA6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Idk if I agree. I think for certain things, it's fine for the fast/unsafe behavior to be the default. E.g. we default to unchecked integer arithmetic, because it's faster than both checked integer arithmetic and "},{"type":"text","text":"BigInt","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1609261677.210800","parent_user_id":"U6A936746"}]