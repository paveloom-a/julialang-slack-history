[{"client_msg_id":"c79930f7-8038-4851-9edb-5ad803bac878","type":"message","text":"You could even combine the best of both worlds - e.g. ask for `return_type` and if it returns `Any` than use the value-based narrowing approach, otherwise use it.","user":"U66QZ3QF3","ts":"1614126132.040400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jZV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You could even combine the best of both worlds - e.g. ask for "},{"type":"text","text":"return_type","style":{"code":true}},{"type":"text","text":" and if it returns "},{"type":"text","text":"Any","style":{"code":true}},{"type":"text","text":" than use the value-based narrowing approach, otherwise use it."}]}]}],"thread_ts":"1614126132.040400","reply_count":6,"reply_users_count":2,"latest_reply":"1614130156.049100","reply_users":["UH8A351DJ","U66QZ3QF3"],"subscribed":false},{"type":"message","subtype":"thread_broadcast","text":"```julia&gt; a = Union{Real, Nothing, Missing}[1,2.0,π, missing]\n4-element Vector{Union{Missing, Nothing, Real}}:\n 1\n 2.0\n π = 3.1415926535897...\n  missing\n\njulia&gt; map!(sin, similar(a), a)\n4-element Vector{Union{Missing, Nothing, Real}}:\n 0.8414709848078965\n 0.9092974268256817\n 1.2246467991473532e-16\n  missing```\nmaybe this approach? Using the fact that `similar()` preserves type closely.","user":"UH8A351DJ","ts":"1614127190.042600","thread_ts":"1614126132.040400","root":{"client_msg_id":"c79930f7-8038-4851-9edb-5ad803bac878","type":"message","text":"You could even combine the best of both worlds - e.g. ask for `return_type` and if it returns `Any` than use the value-based narrowing approach, otherwise use it.","user":"U66QZ3QF3","ts":"1614126132.040400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jZV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You could even combine the best of both worlds - e.g. ask for "},{"type":"text","text":"return_type","style":{"code":true}},{"type":"text","text":" and if it returns "},{"type":"text","text":"Any","style":{"code":true}},{"type":"text","text":" than use the value-based narrowing approach, otherwise use it."}]}]}],"thread_ts":"1614126132.040400","reply_count":6,"reply_users_count":2,"latest_reply":"1614130156.049100","reply_users":["UH8A351DJ","U66QZ3QF3"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"PBBIP","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> a = Union{Real, Nothing, Missing}[1,2.0,π, missing]\n4-element Vector{Union{Missing, Nothing, Real}}:\n 1\n 2.0\n π = 3.1415926535897...\n  missing\n\njulia> map!(sin, similar(a), a)\n4-element Vector{Union{Missing, Nothing, Real}}:\n 0.8414709848078965\n 0.9092974268256817\n 1.2246467991473532e-16\n  missing"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"maybe this approach? Using the fact that "},{"type":"text","text":"similar()","style":{"code":true}},{"type":"text","text":" preserves type closely."}]}]}],"client_msg_id":"4e83bd39-eaba-4c6f-b473-e4a33a8d4947","edited":{"user":"UH8A351DJ","ts":"1614127212.000000"}},{"client_msg_id":"133834f0-5226-4e05-acc8-0da906ccd356","type":"message","text":"Yeah, in our case the type changes, though we can calculate the new type easily enough. Therewe we could use `similar(a, T)`  and `map!` but that's not much different to what `map` could do internally, and it's not so different to a typed comprehension since we are using `Array`  in this case.","user":"U66QZ3QF3","ts":"1614129137.044400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"peBP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, in our case the type changes, though we can calculate the new type easily enough. Therewe we could use "},{"type":"text","text":"similar(a, T)","style":{"code":true}},{"type":"text","text":"  and "},{"type":"text","text":"map!","style":{"code":true}},{"type":"text","text":" but that's not much different to what "},{"type":"text","text":"map","style":{"code":true}},{"type":"text","text":" could do internally, and it's not so different to a typed comprehension since we are using "},{"type":"text","text":"Array","style":{"code":true}},{"type":"text","text":"  in this case."}]}]}],"thread_ts":"1614126132.040400","parent_user_id":"U66QZ3QF3"},{"client_msg_id":"ab915069-c526-4edd-b43f-5a1961e5ee14","type":"message","text":"well, I thought you want to keep `T` not changed at all. If you want anything other than 1. narrowing or 2. not changing. Julia can't read your mind I guess.","user":"UH8A351DJ","ts":"1614129299.044600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Miu+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well, I thought you want to keep "},{"type":"text","text":"T","style":{"code":true}},{"type":"text","text":" not changed at all. If you want anything other than 1. narrowing or 2. not changing. Julia can't read your mind I guess."}]}]}],"thread_ts":"1614126132.040400","parent_user_id":"U66QZ3QF3"},{"client_msg_id":"c66e0e13-b30e-4f84-bc9f-5ec30a489ebd","type":"message","text":"There is the magical `Core.Compiler.return_type` for reading my mind :slightly_smiling_face:","user":"U66QZ3QF3","ts":"1614130000.048500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HkAr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There is the magical "},{"type":"text","text":"Core.Compiler.return_type","style":{"code":true}},{"type":"text","text":" for reading my mind "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1614126132.040400","parent_user_id":"U66QZ3QF3"},{"client_msg_id":"b002cdc9-66cb-468d-95e1-895f19b7fe34","type":"message","text":"It does get used, just sparingly.","user":"U66QZ3QF3","ts":"1614130013.048800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Gjf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It does get used, just sparingly."}]}]}],"thread_ts":"1614126132.040400","parent_user_id":"U66QZ3QF3"},{"client_msg_id":"3343120d-bf39-4987-b679-dd69afbda8b6","type":"message","text":"return_type just gives your the inferred return type. So the natural thing happen at `map` is to narrow/wide as needed (implementation details), or, keep the original type. If your desired type is \"in between\" (narrow some, but not other, keep some singleton type, or even add a few), it's reasonable compiler wouldn't guess that.","user":"UH8A351DJ","ts":"1614130156.049100","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1614130168.000000"},"blocks":[{"type":"rich_text","block_id":"fTS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"return_type just gives your the inferred return type. So the natural thing happen at "},{"type":"text","text":"map","style":{"code":true}},{"type":"text","text":" is to narrow/wide as needed (implementation details), or, keep the original type. If your desired type is \"in between\" (narrow some, but not other, keep some singleton type, or even add a few), it's reasonable compiler wouldn't guess that."}]}]}],"thread_ts":"1614126132.040400","parent_user_id":"U66QZ3QF3"}]