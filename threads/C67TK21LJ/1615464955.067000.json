[{"client_msg_id":"323498dc-8703-4a96-8559-c2fc4655d7e6","type":"message","text":"The existence of\n```function findfirst(testf::Function, A)\n    for (i, a) in pairs(A)\n        testf(a) &amp;&amp; return i\n    end\n    return nothing\nend```\nwhich means I can't make a method `findfirst(f, x::MyType)` without creating an ambiguity error.","user":"U7HAYKY9X","ts":"1615464955.067000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L2G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The existence of\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function findfirst(testf::Function, A)\n    for (i, a) in pairs(A)\n        testf(a) && return i\n    end\n    return nothing\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"which means I can't make a method "},{"type":"text","text":"findfirst(f, x::MyType)","style":{"code":true}},{"type":"text","text":" without creating an ambiguity error."}]}]}],"thread_ts":"1615464955.067000","reply_count":13,"reply_users_count":7,"latest_reply":"1615489760.071700","reply_users":["UPSSPPBFV","U7HAYKY9X","U67431ELR","U9AHT3YM7","U67D54KS8","U72B7LTMX","U8D9768Q6"],"subscribed":false},{"client_msg_id":"d5704075-df89-4ecd-a874-821e850a3e54","type":"message","text":"Can't you simply create a method `findfirst(f::Function, x::MyType)`?","user":"UPSSPPBFV","ts":"1615465707.067100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FOE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can't you simply create a method "},{"type":"text","text":"findfirst(f::Function, x::MyType)","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1615464955.067000","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"dcf6e0c3-649e-4b6e-b96a-979f8b2579c1","type":"message","text":"Sure, but then it won't work for callable things not a subtype of `Function`","user":"U7HAYKY9X","ts":"1615465904.067300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Z/pB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sure, but then it won't work for callable things not a subtype of "},{"type":"text","text":"Function","style":{"code":true}}]}]}],"thread_ts":"1615464955.067000","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"ab721544-d820-4672-96ba-c15c850841d8","type":"message","text":"Mmm... True","user":"UPSSPPBFV","ts":"1615465978.067500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d=x6i","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Mmm... True"}]}]}],"thread_ts":"1615464955.067000","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"2e9af69a-8541-4733-8288-4e78fc1802b8","type":"message","text":"What if you define both `findfirst(f::Function, x::MyType)` and `findfirst(f, x::MyType)`?","user":"U67431ELR","ts":"1615467672.067700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c8Y/5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What if you define both "},{"type":"text","text":"findfirst(f::Function, x::MyType)","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"findfirst(f, x::MyType)","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1615464955.067000","parent_user_id":"U7HAYKY9X","reactions":[{"name":"point_up","users":["U9AHT3YM7","U7HAYKY9X","U66QZ3QF3"],"count":3}]},{"client_msg_id":"352c013f-f317-4b99-8878-6067579c470f","type":"message","text":"The latter will still create am ambiguity error, right?","user":"U7HAYKY9X","ts":"1615467729.068000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IakUT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The latter will still create am ambiguity error, right?"}]}]}],"thread_ts":"1615464955.067000","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"72be25fa-2011-4e9a-ac0e-68f499435deb","type":"message","text":"Ah wait, no it wont! :)","user":"U7HAYKY9X","ts":"1615467736.068200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RZ31j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah wait, no it wont! :)"}]}]}],"thread_ts":"1615464955.067000","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"b2442ed2-bfba-4b8c-9a11-131a13ab5327","type":"message","text":"Thanks!","user":"U7HAYKY9X","ts":"1615467747.068500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KbI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks!"}]}]}],"thread_ts":"1615464955.067000","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"8b780beb-46f9-4de3-8b8e-3e1314285544","type":"message","text":"Pro tip: `findfirst(f::Function, x::MyType)` can just `invoke` `findfirst(f, x::MyType)`","user":"U9AHT3YM7","ts":"1615468095.068700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fX9yY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Pro tip: "},{"type":"text","text":"findfirst(f::Function, x::MyType)","style":{"code":true}},{"type":"text","text":" can just "},{"type":"text","text":"invoke","style":{"code":true}},{"type":"text","text":" "},{"type":"text","text":"findfirst(f, x::MyType)","style":{"code":true}}]}]}],"thread_ts":"1615464955.067000","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"3e7dfdd7-8171-45d3-a6ed-7c192c70187b","type":"message","text":"I even have a macro that makes such disambiguation methods: <https://github.com/JuliaManifolds/ManifoldsBase.jl/blob/master/src/bases.jl#L743-L769>","user":"U9AHT3YM7","ts":"1615468232.068900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0pjvO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I even have a macro that makes such disambiguation methods: "},{"type":"link","url":"https://github.com/JuliaManifolds/ManifoldsBase.jl/blob/master/src/bases.jl#L743-L769"}]}]}],"thread_ts":"1615464955.067000","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"2f512944-1da1-4294-a076-4027f5b0b478","type":"message","text":"It isn't a disaster to let someone pass in `x -&gt; g(x)` for callable `g` as well","user":"U67D54KS8","ts":"1615469231.069100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h0gmz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It isn't a disaster to let someone pass in "},{"type":"text","text":"x -> g(x)","style":{"code":true}},{"type":"text","text":" for callable "},{"type":"text","text":"g","style":{"code":true}},{"type":"text","text":" as well"}]}]}],"thread_ts":"1615464955.067000","parent_user_id":"U7HAYKY9X"},{"type":"message","subtype":"thread_broadcast","text":"Why does this method have an argument with `::Function` in the first place, though? In this case there's no other two-argument method for `findfirst` defined in `Base` that would be overwritten by just leaving off `::Function`.","user":"U72B7LTMX","ts":"1615487941.070700","thread_ts":"1615464955.067000","root":{"client_msg_id":"323498dc-8703-4a96-8559-c2fc4655d7e6","type":"message","text":"The existence of\n```function findfirst(testf::Function, A)\n    for (i, a) in pairs(A)\n        testf(a) &amp;&amp; return i\n    end\n    return nothing\nend```\nwhich means I can't make a method `findfirst(f, x::MyType)` without creating an ambiguity error.","user":"U7HAYKY9X","ts":"1615464955.067000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L2G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The existence of\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function findfirst(testf::Function, A)\n    for (i, a) in pairs(A)\n        testf(a) && return i\n    end\n    return nothing\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"which means I can't make a method "},{"type":"text","text":"findfirst(f, x::MyType)","style":{"code":true}},{"type":"text","text":" without creating an ambiguity error."}]}]}],"thread_ts":"1615464955.067000","reply_count":13,"reply_users_count":7,"latest_reply":"1615489760.071700","reply_users":["UPSSPPBFV","U7HAYKY9X","U67431ELR","U9AHT3YM7","U67D54KS8","U72B7LTMX","U8D9768Q6"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"e52","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Why does this method have an argument with "},{"type":"text","text":"::Function","style":{"code":true}},{"type":"text","text":" in the first place, though? In this case there's no other two-argument method for "},{"type":"text","text":"findfirst","style":{"code":true}},{"type":"text","text":" defined in "},{"type":"text","text":"Base","style":{"code":true}},{"type":"text","text":" that would be overwritten by just leaving off "},{"type":"text","text":"::Function","style":{"code":true}},{"type":"text","text":"."}]}]}],"client_msg_id":"62664e4d-2854-416f-a77f-2422d0333a9e","edited":{"user":"U72B7LTMX","ts":"1615487954.000000"}},{"client_msg_id":"1449c2ca-b924-4473-ba73-ac424f9660db","type":"message","text":"Yeah actually only `Function` is allowed as a first argument currently, so you don't even need to define `findfirst(f, x::MyType)` for your type to be consistent with Base. Not sure why we require `f::Function`. Probably nobody has complained about that.","user":"U67431ELR","ts":"1615489227.071100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ckJ+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah actually only "},{"type":"text","text":"Function","style":{"code":true}},{"type":"text","text":" is allowed as a first argument currently, so you don't even need to define "},{"type":"text","text":"findfirst(f, x::MyType)","style":{"code":true}},{"type":"text","text":" for your type to be consistent with Base. Not sure why we require "},{"type":"text","text":"f::Function","style":{"code":true}},{"type":"text","text":". Probably nobody has complained about that."}]}]}],"thread_ts":"1615464955.067000","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"834D4D2E-0B31-49B8-99B2-8F6784FF729D","type":"message","text":"A callable trait would be very nice","user":"U8D9768Q6","ts":"1615489760.071700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1LPwF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"A callable trait would be very nice"}]}]}],"thread_ts":"1615464955.067000","parent_user_id":"U7HAYKY9X"}]