[{"client_msg_id":"d042737e-75ea-4a52-99a3-874d761c5b0a","type":"message","text":":grapes:  container types don't propagate through `enumerate`\n```map((a=1,b=2)) do x; x; end |&gt; typeof #NamedTuple{(:a, :b),Tuple{Int64,Int64}}\nmap(enumerate((a=1,b=2))) do (i,x) ; x; end |&gt; typeof #Array{Int64,1}```","user":"UP95S4864","ts":"1616762029.154400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s0p","elements":[{"type":"rich_text_section","elements":[{"type":"emoji","name":"grapes"},{"type":"text","text":"  container types don't propagate through "},{"type":"text","text":"enumerate","style":{"code":true}},{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"map((a=1,b=2)) do x; x; end |> typeof #NamedTuple{(:a, :b),Tuple{Int64,Int64}}\nmap(enumerate((a=1,b=2))) do (i,x) ; x; end |> typeof #Array{Int64,1}"}]}]}],"thread_ts":"1616762029.154400","reply_count":2,"reply_users_count":2,"latest_reply":"1616763189.158700","reply_users":["UD0NS8PDF","UP95S4864"],"is_locked":false,"subscribed":false,"reactions":[{"name":"this_is_fine_parrot","users":["U0178LR5K7F"],"count":1}]},{"client_msg_id":"4D8D1C38-DEB9-40B5-BDB9-394FC0B8205D","type":"message","text":"There are issues about this, tldr is that `map(::Any, ::Any)` was probably a mistake, but can’t be removed in 1.x","user":"UD0NS8PDF","ts":"1616762880.158500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gKFa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There are issues about this, tldr is that "},{"type":"text","text":"map(::Any, ::Any)","style":{"code":true}},{"type":"text","text":" was probably a mistake, but can’t be removed in 1.x"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"12c3acea-422f-434d-927a-8cfb5ea99e14","type":"message","text":"Any suggestions on a type-stable way to get a counter in the inner function. Simply doing the following boxes `it` and adding a `let`  block in the function makes it stateless. My work around is to do `it=[0]` , which seem ridiculous\n```it = 0\nmap(X) do x\n  it+=1\n  ...\nend```","user":"UP95S4864","ts":"1616763189.158700","team":"T68168MUP","edited":{"user":"UP95S4864","ts":"1616763209.000000"},"blocks":[{"type":"rich_text","block_id":"aaqbD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Any suggestions on a type-stable way to get a counter in the inner function. Simply doing the following boxes "},{"type":"text","text":"it","style":{"code":true}},{"type":"text","text":" and adding a "},{"type":"text","text":"let","style":{"code":true}},{"type":"text","text":"  block in the function makes it stateless. My work around is to do "},{"type":"text","text":"it=[0]","style":{"code":true}},{"type":"text","text":" , which seem ridiculous\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"it = 0\nmap(X) do x\n  it+=1\n  ...\nend"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"}]