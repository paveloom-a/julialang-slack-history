[{"client_msg_id":"d042737e-75ea-4a52-99a3-874d761c5b0a","type":"message","text":":grapes:  container types don't propagate through `enumerate`\n```map((a=1,b=2)) do x; x; end |&gt; typeof #NamedTuple{(:a, :b),Tuple{Int64,Int64}}\nmap(enumerate((a=1,b=2))) do (i,x) ; x; end |&gt; typeof #Array{Int64,1}```","user":"UP95S4864","ts":"1616762029.154400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s0p","elements":[{"type":"rich_text_section","elements":[{"type":"emoji","name":"grapes"},{"type":"text","text":"  container types don't propagate through "},{"type":"text","text":"enumerate","style":{"code":true}},{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"map((a=1,b=2)) do x; x; end |> typeof #NamedTuple{(:a, :b),Tuple{Int64,Int64}}\nmap(enumerate((a=1,b=2))) do (i,x) ; x; end |> typeof #Array{Int64,1}"}]}]}],"thread_ts":"1616762029.154400","reply_count":33,"reply_users_count":3,"latest_reply":"1616769293.166300","reply_users":["UD0NS8PDF","UP95S4864","UH24GRBLL"],"is_locked":false,"subscribed":false,"reactions":[{"name":"this_is_fine_parrot","users":["U0178LR5K7F","U6BJXUZHR"],"count":2}]},{"client_msg_id":"4D8D1C38-DEB9-40B5-BDB9-394FC0B8205D","type":"message","text":"There are issues about this, tldr is that `map(::Any, ::Any)` was probably a mistake, but can’t be removed in 1.x","user":"UD0NS8PDF","ts":"1616762880.158500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gKFa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There are issues about this, tldr is that "},{"type":"text","text":"map(::Any, ::Any)","style":{"code":true}},{"type":"text","text":" was probably a mistake, but can’t be removed in 1.x"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"12c3acea-422f-434d-927a-8cfb5ea99e14","type":"message","text":"Any suggestions on a type-stable way to get a counter in the inner function. Simply doing the following boxes `it` and adding a `let`  block in the function makes it stateless. My work around is to do `it=[0]` , which seem ridiculous\n```it = 0\nmap(X) do x\n  it+=1\n  ...\nend```","user":"UP95S4864","ts":"1616763189.158700","team":"T68168MUP","edited":{"user":"UP95S4864","ts":"1616763209.000000"},"blocks":[{"type":"rich_text","block_id":"aaqbD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Any suggestions on a type-stable way to get a counter in the inner function. Simply doing the following boxes "},{"type":"text","text":"it","style":{"code":true}},{"type":"text","text":" and adding a "},{"type":"text","text":"let","style":{"code":true}},{"type":"text","text":"  block in the function makes it stateless. My work around is to do "},{"type":"text","text":"it=[0]","style":{"code":true}},{"type":"text","text":" , which seem ridiculous\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"it = 0\nmap(X) do x\n  it+=1\n  ...\nend"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"7139119d-08e0-4c53-b9d4-0f6cf727db21","type":"message","text":"is `X` indexable? if so, `map(eachindex(X)) do i` and so on","user":"UH24GRBLL","ts":"1616765526.159100","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1616765544.000000"},"blocks":[{"type":"rich_text","block_id":"/1p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is "},{"type":"text","text":"X","style":{"code":true}},{"type":"text","text":" indexable? if so, "},{"type":"text","text":"map(eachindex(X)) do i","style":{"code":true}},{"type":"text","text":" and so on"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"59b2b7d3-c92b-41aa-8442-e16433a72fbc","type":"message","text":"if not, I'm afraid you won't get around something like `i = Ref(0)` and then `i[] += 1` in the inner function","user":"UH24GRBLL","ts":"1616765592.159400","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1616765600.000000"},"blocks":[{"type":"rich_text","block_id":"uk0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if not, I'm afraid you won't get around something like "},{"type":"text","text":"i = Ref(0)","style":{"code":true}},{"type":"text","text":" and then "},{"type":"text","text":"i[] += 1","style":{"code":true}},{"type":"text","text":" in the inner function"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"b998a0b4-9623-404f-bb01-08dbc916d485","type":"message","text":"as long as you're not in global scope, I think your initial version should still be type stable anyway :thinking_face:","user":"UH24GRBLL","ts":"1616765656.159700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WVpv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"as long as you're not in global scope, I think your initial version should still be type stable anyway "},{"type":"emoji","name":"thinking_face"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"dff49053-4545-4bb5-883e-f20b2e8d43d2","type":"message","text":"```function f(X)\n    it = 0\n    map(X) do x\n        it+=1\n    end\nend\n@code_warntype f((a=0, b=0))```\n`it::Core.Box`","user":"UP95S4864","ts":"1616765797.159900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YKbb","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function f(X)\n    it = 0\n    map(X) do x\n        it+=1\n    end\nend\n@code_warntype f((a=0, b=0))"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"it::Core.Box","style":{"code":true}}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"ec1aac66-bc1f-482a-b596-dad54c442f88","type":"message","text":"you're not getting around some sort of box/single element ref/vector because `do` creates a new function","user":"UH24GRBLL","ts":"1616765976.160500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mSNn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you're not getting around some sort of box/single element ref/vector because "},{"type":"text","text":"do","style":{"code":true}},{"type":"text","text":" creates a new function"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"7d8903f1-6a3c-4c2c-be5c-4e3e103b1388","type":"message","text":"the variable `it` has to be captured in order to be referenced across function calls","user":"UH24GRBLL","ts":"1616765991.160700","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1616766031.000000"},"blocks":[{"type":"rich_text","block_id":"m/dw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the variable "},{"type":"text","text":"it","style":{"code":true}},{"type":"text","text":" has to be captured in order to be referenced across function calls"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"1f2fc3d0-9172-48e0-a958-eb20b8fc231e","type":"message","text":"you can either let the compiler do it or do it explicitly","user":"UH24GRBLL","ts":"1616766006.160900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QTreC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can either let the compiler do it or do it explicitly"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"ab259e2c-97f2-42ac-acdb-cc528665c60a","type":"message","text":"yeah, this is why I was hoping to use `enumerate`","user":"UP95S4864","ts":"1616766153.161200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jgKn8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, this is why I was hoping to use "},{"type":"text","text":"enumerate","style":{"code":true}}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"df801010-4950-4989-955c-b13be9f756aa","type":"message","text":"Essentially, I am trying to replicate `X[idxs].=vals`  in a non-mutating way that preserves the type of X","user":"UP95S4864","ts":"1616766306.161400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w3aUy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Essentially, I am trying to replicate "},{"type":"text","text":"X[idxs].=vals","style":{"code":true}},{"type":"text","text":"  in a non-mutating way that preserves the type of X"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"a02b4747-095a-4154-a840-ba3c51f2dc2c","type":"message","text":"fwiw, this is not a problem with map per se","user":"UH24GRBLL","ts":"1616766326.161600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"50zU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"fwiw, this is not a problem with map per se"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"a4eba974-6d98-4509-932a-726b178eebed","type":"message","text":"I think this is specific to NamedTuple","user":"UH24GRBLL","ts":"1616766363.161800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BBZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think this is specific to NamedTuple"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"e306339d-102f-41ac-91bb-aa1fc293fed1","type":"message","text":"e.g. iteration over NamedTuples don't return the key, but only the value","user":"UH24GRBLL","ts":"1616766392.162000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wZI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"e.g. iteration over NamedTuples don't return the key, but only the value"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"d366ce3b-df10-4907-916e-f9c087b5b62f","type":"message","text":"so you'd want to do `enumerate(pairs(X))`","user":"UH24GRBLL","ts":"1616766427.162200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HcqV3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so you'd want to do "},{"type":"text","text":"enumerate(pairs(X))","style":{"code":true}}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"e8d839b0-6d86-456d-88df-26ebfb0a18cd","type":"message","text":"I've tested the following and they all return the same type w/ `map`  and `Array` w/ `map(enumerate`: Tuple, NamedTupel, StaticArrays, ArrayPartion, ComponentArray","user":"UP95S4864","ts":"1616766461.162400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zg=CV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I've tested the following and they all return the same type w/ "},{"type":"text","text":"map","style":{"code":true}},{"type":"text","text":"  and "},{"type":"text","text":"Array","style":{"code":true}},{"type":"text","text":" w/ "},{"type":"text","text":"map(enumerate","style":{"code":true}},{"type":"text","text":": Tuple, NamedTupel, StaticArrays, ArrayPartion, ComponentArray"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"3465e939-2618-4097-9351-a503c95a1c18","type":"message","text":"Just to be clear, I want the output to maintain the type of `X` . This works fine for `NamedTuples`  when used directly with `map` . It break when `enumerate`  is introduced.","user":"UP95S4864","ts":"1616766652.162600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oXiQ9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Just to be clear, I want the output to maintain the type of "},{"type":"text","text":"X","style":{"code":true}},{"type":"text","text":" . This works fine for "},{"type":"text","text":"NamedTuples","style":{"code":true}},{"type":"text","text":"  when used directly with "},{"type":"text","text":"map","style":{"code":true}},{"type":"text","text":" . It break when "},{"type":"text","text":"enumerate","style":{"code":true}},{"type":"text","text":"  is introduced."}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"e08e9ab5-0d09-4a85-90ad-ff8a819cc1b5","type":"message","text":"you're aware that `X[idxs].=vals` can't work for everything, right?","user":"UH24GRBLL","ts":"1616766749.162800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L4X","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you're aware that "},{"type":"text","text":"X[idxs].=vals","style":{"code":true}},{"type":"text","text":" can't work for everything, right?"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"a1647021-cf9e-4ab5-9770-c0df560f7f4b","type":"message","text":"e.g. NamedTuples and Tuples don't have `setindex!`, by design","user":"UH24GRBLL","ts":"1616766759.163000","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1616766762.000000"},"blocks":[{"type":"rich_text","block_id":"0B9v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"e.g. NamedTuples and Tuples don't have "},{"type":"text","text":"setindex!","style":{"code":true}},{"type":"text","text":", by design"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"eaeca530-9da7-4605-b28a-56a5db2e45ab","type":"message","text":"yes, that's why I said I wanted to mimic that behavior in a non-mutating way","user":"UP95S4864","ts":"1616766783.163300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Nuy0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, that's why I said I wanted to mimic that behavior in a non-mutating way"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"a1350657-e09f-45e6-a6d3-a82ff9d78d95","type":"message","text":"I'm not sure I follow","user":"UH24GRBLL","ts":"1616766825.163500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AOIKT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not sure I follow"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"a340cde8-5133-4266-ab59-f10f8fdc3492","type":"message","text":"at least for NamedTuple and Tuple, you will have to return a new Tuple","user":"UH24GRBLL","ts":"1616766845.163700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x9C","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"at least for NamedTuple and Tuple, you will have to return a new Tuple"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"f9f48849-afb1-4449-aaa4-6afcea3777ce","type":"message","text":"I don't think you can make `X` point to a different Tuple with that syntax","user":"UH24GRBLL","ts":"1616766866.163900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FPJoN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't think you can make "},{"type":"text","text":"X","style":{"code":true}},{"type":"text","text":" point to a different Tuple with that syntax"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"60a693ec-589d-4bc8-b0e7-c35e4dccfae2","type":"message","text":"or with any syntax other than `X = new_Tuple`, for that matter","user":"UH24GRBLL","ts":"1616766883.164100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SJdb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or with any syntax other than "},{"type":"text","text":"X = new_Tuple","style":{"code":true}},{"type":"text","text":", for that matter"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"616c1086-8e62-4d53-8ca3-df9cbfb10d70","type":"message","text":"it's a name binding, nothing more","user":"UH24GRBLL","ts":"1616766894.164300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+7hl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's a name binding, nothing more"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"846ad8f3-f31c-4343-8df8-6af27303ba8a","type":"message","text":"Ugly, but hopefully gets the point across\n```function f(X, idx, val)\n    dest_it = 0\n    src_it = 1\n    map(X) do x\n        dest_it+=1\n        if dest_it-1 &lt;= length(idx) &amp;&amp; dest_it == idx[src_it]\n            v = val[src_it]\n            src_it+=1\n            return v\n        else\n            return x\n        end\n    end\nend\nX = (a=1,b=2,c=3,d=4,e=5)\nidx = [2, 3]\nval = (20,30)\nf(X, idx, val) #(a = 1, b = 20, c = 30, d = 4, e = 5)```","user":"UP95S4864","ts":"1616767576.164700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HUT2v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ugly, but hopefully gets the point across\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function f(X, idx, val)\n    dest_it = 0\n    src_it = 1\n    map(X) do x\n        dest_it+=1\n        if dest_it-1 <= length(idx) && dest_it == idx[src_it]\n            v = val[src_it]\n            src_it+=1\n            return v\n        else\n            return x\n        end\n    end\nend\nX = (a=1,b=2,c=3,d=4,e=5)\nidx = [2, 3]\nval = (20,30)\nf(X, idx, val) #(a = 1, b = 20, c = 30, d = 4, e = 5)"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"bca21c06-6d8c-4385-8bc4-5d8955c39be1","type":"message","text":"which produces something like `X[idxs].=vals`  w/o mutation","user":"UP95S4864","ts":"1616767632.164900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2Q7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which produces something like "},{"type":"text","text":"X[idxs].=vals","style":{"code":true}},{"type":"text","text":"  w/o mutation"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"d8e237ab-750d-42a3-bb58-5612623e2038","type":"message","text":"```julia&gt; x           \n(a = 0, b = 0)     \n                   \njulia&gt; (;x..., a=3)\n(a = 3, b = 0)     ```\nLike this?","user":"UH24GRBLL","ts":"1616767884.165100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DrJ","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> x           \n(a = 0, b = 0)     \n                   \njulia> (;x..., a=3)\n(a = 3, b = 0)     "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nLike this?"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"48610465-4bef-4b44-8558-f847a9374edb","type":"message","text":"I really wouldn't treat tuples and arrays the same, they are fundamentally different :man-shrugging:","user":"UH24GRBLL","ts":"1616767923.165300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"T0zL4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I really wouldn't treat tuples and arrays the same, they are fundamentally different "},{"type":"emoji","name":"man-shrugging"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"fa55cccc-af30-428a-8d30-80272bae9668","type":"message","text":"I just used NameTuples as an example that didn't require a dependency. My primary application are things like `SVector`  and `ComponentArrays` . I was looking for a general way w/o needing to dispatch on all possible option b/c the constructors all vary. Doing above works for all cases, but is ugly and leads to boxing. I just was surprised that when using `enumerate` this all breaks. It seems odd to me that the usage of `enumerate`  would/should change the resulting type.","user":"UP95S4864","ts":"1616768139.165500","team":"T68168MUP","edited":{"user":"UP95S4864","ts":"1616768179.000000"},"blocks":[{"type":"rich_text","block_id":"Yfk+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I just used NameTuples as an example that didn't require a dependency. My primary application are things like "},{"type":"text","text":"SVector","style":{"code":true}},{"type":"text","text":"  and "},{"type":"text","text":"ComponentArrays","style":{"code":true}},{"type":"text","text":" . I was looking for a general way w/o needing to dispatch on all possible option b/c the constructors all vary. Doing above works for all cases, but is ugly and leads to boxing. I just was surprised that when using "},{"type":"text","text":"enumerate","style":{"code":true}},{"type":"text","text":" this all breaks. It seems odd to me that the usage of "},{"type":"text","text":"enumerate","style":{"code":true}},{"type":"text","text":"  would/should change the resulting type."}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"59f62f84-fd3a-40b5-ab6d-0cc33dc1f55f","type":"message","text":"what you seem to want is copy-on-write semantics for all immutable containers","user":"UH24GRBLL","ts":"1616768663.165800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BI5o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what you seem to want is copy-on-write semantics for all immutable containers"}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"58097a11-af06-453b-a4e9-4c63ba42b275","type":"message","text":"Yeah, some explicit mechanism for copy-on-write for both immutable and mutable containers. Including mutable simplifies zygote support.","user":"UP95S4864","ts":"1616768944.166000","team":"T68168MUP","edited":{"user":"UP95S4864","ts":"1616768956.000000"},"blocks":[{"type":"rich_text","block_id":"Dykyc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, some explicit mechanism for copy-on-write for both immutable and mutable containers. Including mutable simplifies zygote support."}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"},{"client_msg_id":"2ed6e8cc-b660-4876-89d7-d0e3704b9516","type":"message","text":"However, the change of types by introducing `enumerate`  is really independent of my particular use case. I just cannot think of why one would expect `enumerate`  to produce a different type.","user":"UP95S4864","ts":"1616769293.166300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kIt1f","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"However, the change of types by introducing "},{"type":"text","text":"enumerate","style":{"code":true}},{"type":"text","text":"  is really independent of my particular use case. I just cannot think of why one would expect "},{"type":"text","text":"enumerate","style":{"code":true}},{"type":"text","text":"  to produce a different type."}]}]}],"thread_ts":"1616762029.154400","parent_user_id":"UP95S4864"}]