[{"client_msg_id":"26309047-f6bf-47fb-83b2-c4b11eb45492","type":"message","text":"my student is switching from Julia back to C++ :disappointed:","user":"U011LUQ182G","ts":"1617993522.310800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PO1p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"my student is switching from Julia back to C++ "},{"type":"emoji","name":"disappointed"}]}]}],"thread_ts":"1617993522.310800","reply_count":17,"reply_users_count":6,"latest_reply":"1618074506.322200","reply_users":["U687RKK0E","U011LUQ182G","UGXP1QV41","U6788D83U","U68QW0PUZ","UM30MT6RF"],"is_locked":false,"subscribed":false,"reactions":[{"name":"press-f-to-pay-respects","users":["U66M57AN4","ULDQSHD41","U0179G7FG4F","UEGRU91B2","UDB26738Q","U011LUQ182G","U6A936746","UBJUA1YAV","U67G3QRJM","UE4DPAS4W","U6C5KSWAC","U6788D83U","U6BJXUZHR","U6795JH6H","U9MED583T","UGU761DU2","UPUBAM63X","U677NAWV8","UB7JS9CHF","U011V2YN59N","UAREE2NMD","ULA52A5B5","UM30MT6RF","UDSU53PEG"],"count":24}]},{"client_msg_id":"67786b33-f95e-467b-85a6-abcc0e1d2e5b","type":"message","text":"Any interesting reason for it?","user":"U687RKK0E","ts":"1617993545.310900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SB5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Any interesting reason for it?"}]}]}],"thread_ts":"1617993522.310800","parent_user_id":"U011LUQ182G"},{"client_msg_id":"5246858c-1594-46c9-946c-13b9f85eb04e","type":"message","text":"Mostly personal preference, but they also felt edge cases like <https://github.com/JuliaLang/julia/issues/27988#issuecomment-772896802> made predicting code performance too confusing compared with C++ (comment is from me, but the issue arose from my student’s code).","user":"U011LUQ182G","ts":"1617993772.311300","team":"T68168MUP","edited":{"user":"U011LUQ182G","ts":"1618001483.000000"},"blocks":[{"type":"rich_text","block_id":"div6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Mostly personal preference, but they also felt edge cases like "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/27988#issuecomment-772896802"},{"type":"text","text":" made predicting code performance too confusing compared with C++ (comment is from me, but the issue arose from my student’s code)."}]}]}],"thread_ts":"1617993522.310800","parent_user_id":"U011LUQ182G"},{"client_msg_id":"c15632e9-614d-49cb-8477-4bd22805d205","type":"message","text":"They jokingly said they’d prefer to have to trick the C++ compiler they know rather than the Julia compiler they don’t know.","user":"U011LUQ182G","ts":"1617993909.311700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rUbb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"They jokingly said they’d prefer to have to trick the C++ compiler they know rather than the Julia compiler they don’t know."}]}]}],"thread_ts":"1617993522.310800","parent_user_id":"U011LUQ182G"},{"client_msg_id":"04a12ed1-b685-4223-af39-5319e55afabf","type":"message","text":"I started doing C again for linux drivers, after barely doing C for the past 8 years. (We are wrapping in Julia to access all the good math stuff). I feel as though the mental concepts from Julia translate well to C. I guess that is  part maturing as a programmer, since I'm not formally trained. But I feel as though the Julia -&gt; C transition is much easier than other languages. You can get exposure to low level stuff really easy in Julia.","user":"UGXP1QV41","ts":"1617997680.313600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"J2jK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I started doing C again for linux drivers, after barely doing C for the past 8 years. (We are wrapping in Julia to access all the good math stuff). I feel as though the mental concepts from Julia translate well to C. I guess that is  part maturing as a programmer, since I'm not formally trained. But I feel as though the Julia -> C transition is much easier than other languages. You can get exposure to low level stuff really easy in Julia."}]}]}],"thread_ts":"1617993522.310800","parent_user_id":"U011LUQ182G"},{"client_msg_id":"b9c2f474-6523-4ffc-8594-3ec33c002278","type":"message","text":"They can learn to trick Julia compiler, too :p","user":"U6788D83U","ts":"1617998759.314100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L+0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"They can learn to trick Julia compiler, too :p"}]}]}],"thread_ts":"1617993522.310800","parent_user_id":"U011LUQ182G","reactions":[{"name":"point_up","users":["U011LUQ182G","U6795JH6H","U9MED583T"],"count":3}]},{"client_msg_id":"b64cf40c-cceb-434b-8a66-d47c53352405","type":"message","text":"That’s what I responded with too :smile:","user":"U011LUQ182G","ts":"1617998871.314400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PSgnH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That’s what I responded with too "},{"type":"emoji","name":"smile"}]}]}],"thread_ts":"1617993522.310800","parent_user_id":"U011LUQ182G"},{"client_msg_id":"22033a8c-ab66-4ed2-ad1f-91af0d5444ce","type":"message","text":"I basically only use broadcasts in the REPL for interactive use or in cases where performance is not critical.","user":"U6788D83U","ts":"1617998886.314600","team":"T68168MUP","edited":{"user":"U6788D83U","ts":"1617998937.000000"},"blocks":[{"type":"rich_text","block_id":"39VNC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I basically only use broadcasts in the REPL for interactive use or in cases where performance is not critical."}]}]}],"thread_ts":"1617993522.310800","parent_user_id":"U011LUQ182G"},{"client_msg_id":"988a192e-3a78-421b-8fa0-d284149e1781","type":"message","text":"Yeah, I went overboard with broadcasting when I first learned about it. Maybe I led them down the wrong path with my own bad Julia habits :grimacing:.","user":"U011LUQ182G","ts":"1617999048.315100","team":"T68168MUP","edited":{"user":"U011LUQ182G","ts":"1617999059.000000"},"blocks":[{"type":"rich_text","block_id":"A+hNk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, I went overboard with broadcasting when I first learned about it. Maybe I led them down the wrong path with my own bad Julia habits "},{"type":"emoji","name":"grimacing"},{"type":"text","text":"."}]}]}],"thread_ts":"1617993522.310800","parent_user_id":"U011LUQ182G"},{"client_msg_id":"2de5f714-3b23-421a-b218-c2c5f493c919","type":"message","text":"I wonder why broadcasting didn’t use generated functions to guarantee compile time transformation.","user":"U6788D83U","ts":"1617999562.315400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Dvk8X","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I wonder why broadcasting didn’t use generated functions to guarantee compile time transformation."}]}]}],"thread_ts":"1617993522.310800","parent_user_id":"U011LUQ182G","reactions":[{"name":"+1","users":["UM8JUNJG7","U011V2YN59N"],"count":2}]},{"client_msg_id":"1c323ca4-3845-4ba8-abfc-d3f4729b1975","type":"message","text":"whatever that reason, it should not prevent someone who knows both sides of that street from using generated functions for that purpose now  in a PR  [although other responsibilities ...]","user":"U68QW0PUZ","ts":"1618017339.316700","team":"T68168MUP","edited":{"user":"U68QW0PUZ","ts":"1618017544.000000"},"blocks":[{"type":"rich_text","block_id":"uJS4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"whatever that reason, it should not prevent someone who knows both sides of that street from using generated functions for that purpose now  in a PR  [although other responsibilities ...]"}]}]}],"thread_ts":"1617993522.310800","parent_user_id":"U011LUQ182G"},{"client_msg_id":"9617d0ff-838e-466a-a303-3fbb22e0f96e","type":"message","text":"Generated functions are almost always worse than regular functions, if you can avoid them. They can lead to excessive compile times, because they basically force the compiler to specialize aggressively, even if that's not beneficial. You also need to worry about backedges yourself, so it's often non-trivial to ensure that everything still works correctly after someone overloads a generic function. Instead of extensively relying on generated functions, I think it would be much better to identify common situations where inference gives up and try to improve these cases in the compiler.","user":"UM30MT6RF","ts":"1618045136.317600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IeMk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Generated functions are almost always worse than regular functions, if you can avoid them. They can lead to excessive compile times, because they basically force the compiler to specialize aggressively, even if that's not beneficial. You also need to worry about backedges yourself, so it's often non-trivial to ensure that everything still works correctly after someone overloads a generic function. Instead of extensively relying on generated functions, I think it would be much better to identify common situations where inference gives up and try to improve these cases in the compiler."}]}]}],"thread_ts":"1617993522.310800","parent_user_id":"U011LUQ182G"},{"client_msg_id":"e28eb8df-0c54-4655-a3fb-5359336b0202","type":"message","text":"good to know .. what would be a good  case for their use in the wild?","user":"U68QW0PUZ","ts":"1618047458.317900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7awks","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"good to know .. what would be a good  case for their use in the wild?"}]}]}],"thread_ts":"1617993522.310800","parent_user_id":"U011LUQ182G"},{"client_msg_id":"0c682656-1bb0-4292-a19e-e84775619d98","type":"message","text":"Sometimes they are a necessary evil, where the compiler isn't yet smart enough to remove some type instability. They also enable source code transformations a la Cassette or Zygote","user":"UM30MT6RF","ts":"1618047725.318100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YKy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sometimes they are a necessary evil, where the compiler isn't yet smart enough to remove some type instability. They also enable source code transformations a la Cassette or Zygote"}]}]}],"thread_ts":"1617993522.310800","parent_user_id":"U011LUQ182G"},{"client_msg_id":"2E024227-7A94-490A-B5DA-13953B2FE61A","type":"message","text":"I am not sure if I agree with that argument. To avoid allocation, broadcasting already needs to always specialize, so why not use generated functions to force it. Also, there’s the “if @generated” syntax.","user":"U6788D83U","ts":"1618071658.321600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wy6P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am not sure if I agree with that argument. To avoid allocation, broadcasting already needs to always specialize, so why not use generated functions to force it. Also, there’s the “if @generated” syntax."}]}]}],"thread_ts":"1617993522.310800","parent_user_id":"U011LUQ182G"},{"client_msg_id":"71b6a573-9df4-49b6-9457-f4c95fd94631","type":"message","text":"There is still the problem of extensibility though, which is a big part of how broadcasting works. If someone adds a specialized `BroadcastStyle` or if a new method gets added to the function you are broadcasting, how do you ensure that the generated function is properly invalidated and recompiled? It is possible to manually add backedges to `CodeInfo`, but AFAIK there is not really a good way to do this if the generated function returns an expression. Broadcasting is also already one of the most complicated code in Base, this change would likely add additional complexity and a higher maintenance burden.","user":"UM30MT6RF","ts":"1618072356.321800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gXT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There is still the problem of extensibility though, which is a big part of how broadcasting works. If someone adds a specialized "},{"type":"text","text":"BroadcastStyle","style":{"code":true}},{"type":"text","text":" or if a new method gets added to the function you are broadcasting, how do you ensure that the generated function is properly invalidated and recompiled? It is possible to manually add backedges to "},{"type":"text","text":"CodeInfo","style":{"code":true}},{"type":"text","text":", but AFAIK there is not really a good way to do this if the generated function returns an expression. Broadcasting is also already one of the most complicated code in Base, this change would likely add additional complexity and a higher maintenance burden."}]}]}],"thread_ts":"1617993522.310800","parent_user_id":"U011LUQ182G"},{"client_msg_id":"3cce2dee-2a38-46d6-a745-30ac32fa8a52","type":"message","text":"Again, the inference is in `make_makeargs` and it’s not even a part of the public API.","user":"U6788D83U","ts":"1618074092.322000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"99Ozv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Again, the inference is in "},{"type":"text","text":"make_makeargs","style":{"code":true}},{"type":"text","text":" and it’s not even a part of the public API."}]}]}],"thread_ts":"1617993522.310800","parent_user_id":"U011LUQ182G"},{"client_msg_id":"095b03d2-bc6e-428f-857f-689b5946451b","type":"message","text":"Ah, sorry, I thought this was generally about making use of more generated functions for broadcasting. If it's just about one internal function, which won't infer otherwise, that's probably fine. It might still be good to open an issue to see whether this is something where inference could be improved to make a generated function unnecessary.","user":"UM30MT6RF","ts":"1618074506.322200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dRE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, sorry, I thought this was generally about making use of more generated functions for broadcasting. If it's just about one internal function, which won't infer otherwise, that's probably fine. It might still be good to open an issue to see whether this is something where inference could be improved to make a generated function unnecessary."}]}]}],"thread_ts":"1617993522.310800","parent_user_id":"U011LUQ182G"}]