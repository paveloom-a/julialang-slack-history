[{"type":"message","text":"x&lt;0 doesn't imply -1*x &gt; 0 for Signed Integers in Julia. Also bitrotate + mask away lowest bit and bitshifts behaves differently than multiplying by two. TIL","user":"U9MD78Z9N","ts":"1616031406.024500","team":"T68168MUP","thread_ts":"1616031406.024500","reply_count":15,"reply_users_count":6,"latest_reply":"1616071074.033200","reply_users":["USU9FRPEU","U9MD78Z9N","U01HD5VFXJM","U6795JH6H","U0179G7FG4F","UB7JS9CHF"],"subscribed":false},{"client_msg_id":"2c039d99-b403-4215-883b-d7f16541d4a2","type":"message","text":"Show us an example, please.","user":"USU9FRPEU","ts":"1616031468.024600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hwd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Show us an example, please."}]}]}],"thread_ts":"1616031406.024500","parent_user_id":"U9MD78Z9N"},{"type":"message","subtype":"thread_broadcast","text":"`typemin(Int) &lt; 0` but typemin(Int)*-1 == typemin(Int)`","user":"U9MD78Z9N","ts":"1616031579.024900","thread_ts":"1616031406.024500","root":{"type":"message","text":"x&lt;0 doesn't imply -1*x &gt; 0 for Signed Integers in Julia. Also bitrotate + mask away lowest bit and bitshifts behaves differently than multiplying by two. TIL","user":"U9MD78Z9N","ts":"1616031406.024500","team":"T68168MUP","thread_ts":"1616031406.024500","reply_count":15,"reply_users_count":6,"latest_reply":"1616071074.033200","reply_users":["USU9FRPEU","U9MD78Z9N","U01HD5VFXJM","U6795JH6H","U0179G7FG4F","UB7JS9CHF"],"subscribed":false}},{"type":"message","text":"Yes, i'm aware that thats just how we decided that integer types worn in general but i'm not certain it is more well behaved than having a +--Infinity like some generation of unumus instead of typemin(Int) as we have it now","user":"U9MD78Z9N","ts":"1616031875.025400","team":"T68168MUP","thread_ts":"1616031406.024500","parent_user_id":"U9MD78Z9N"},{"client_msg_id":"7db52adb-8196-4eb8-a83e-c2059a6ecdbb","type":"message","text":"When would that be an issue?","user":"U01HD5VFXJM","ts":"1616032127.025600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x55X","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"When would that be an issue?"}]}]}],"thread_ts":"1616031406.024500","parent_user_id":"U9MD78Z9N"},{"client_msg_id":"943d5065-e7ef-4ee0-a013-1ed45e915755","type":"message","text":"Oh this is fun:\n```julia&gt; 0 - typemin(Int) == typemin(Int)\ntrue\n\njulia&gt; typemin(Int) + typemin(Int)\n0\n\njulia&gt; typemin(Int) - 1 == typemax(Int)\ntrue```","user":"USU9FRPEU","ts":"1616032438.025800","team":"T68168MUP","edited":{"user":"USU9FRPEU","ts":"1616032626.000000"},"blocks":[{"type":"rich_text","block_id":"20D2v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh this is fun:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> 0 - typemin(Int) == typemin(Int)\ntrue\n\njulia> typemin(Int) + typemin(Int)\n0\n\njulia> typemin(Int) - 1 == typemax(Int)\ntrue"}]}]}],"thread_ts":"1616031406.024500","parent_user_id":"U9MD78Z9N"},{"client_msg_id":"7713d862-04c1-4358-b810-b69635a7afb0","type":"message","text":"In case anyone is wondering what is happening:\n```julia&gt; bitstring( -1 )\n\"1111111111111111111111111111111111111111111111111111111111111111\"\n\njulia&gt; bitstring( typemin(Int) )\n\"1000000000000000000000000000000000000000000000000000000000000000\"\n\njulia&gt; bitstring( typemax(Int) )\n\"0111111111111111111111111111111111111111111111111111111111111111\"```","user":"USU9FRPEU","ts":"1616032750.026100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+59","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In case anyone is wondering what is happening:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> bitstring( -1 )\n\"1111111111111111111111111111111111111111111111111111111111111111\"\n\njulia> bitstring( typemin(Int) )\n\"1000000000000000000000000000000000000000000000000000000000000000\"\n\njulia> bitstring( typemax(Int) )\n\"0111111111111111111111111111111111111111111111111111111111111111\""}]}]}],"thread_ts":"1616031406.024500","parent_user_id":"U9MD78Z9N"},{"client_msg_id":"18AD736A-A7A9-4075-81CD-254E828BB6CC","type":"message","text":"Those aren’t even the bad cases","user":"U6795JH6H","ts":"1616035238.026800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/2QJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Those aren’t even the bad cases"}]}]}],"thread_ts":"1616031406.024500","parent_user_id":"U9MD78Z9N"},{"client_msg_id":"3BD29EF9-7CB5-49BB-994B-893196E99093","type":"message","text":"It’s the fact that negating typemin doesn’t change it","user":"U6795JH6H","ts":"1616035261.027600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0UL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It’s the fact that negating typemin doesn’t change it"}]}]}],"thread_ts":"1616031406.024500","parent_user_id":"U9MD78Z9N"},{"client_msg_id":"DF78AB2B-5218-4A6D-8316-A0C046DB78CE","type":"message","text":"Agreed that it’s a bit troubling that this is how hardware integers work","user":"U6795JH6H","ts":"1616035286.028500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"o73=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Agreed that it’s a bit troubling that this is how hardware integers work"}]}]}],"thread_ts":"1616031406.024500","parent_user_id":"U9MD78Z9N"},{"type":"message","text":"It's not a complaint with the Julia Language. Anything else would cause more trouble in this universe. It's just a gripe with some decisions of CS made before i was born.","user":"U9MD78Z9N","ts":"1616038798.029100","team":"T68168MUP","thread_ts":"1616031406.024500","parent_user_id":"U9MD78Z9N","reactions":[{"name":"+1","users":["UGU761DU2"],"count":1}]},{"client_msg_id":"e0e6e2ab-146e-4761-9343-c3fe6e556fde","type":"message","text":"To me, at the machine level, a lot of things that make no sense to humans start to make sense if you try to work through most of the other ways it could be done. Most of the time!\n\nMaybe typemin(Int) could have been NaN in an alternate universe?\n```Base.checked_neg(typemin(Int)) #OverflowError```","user":"U01HD5VFXJM","ts":"1616038999.029300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"A1VT/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"To me, at the machine level, a lot of things that make no sense to humans start to make sense if you try to work through most of the other ways it could be done. Most of the time!\n\nMaybe typemin(Int) could have been NaN in an alternate universe?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Base.checked_neg(typemin(Int)) #OverflowError"}]}]}],"thread_ts":"1616031406.024500","parent_user_id":"U9MD78Z9N","reactions":[{"name":"+1","users":["U67G3QRJM"],"count":1}]},{"client_msg_id":"b6cd6294-2b2e-4fb9-af11-16fbb2172868","type":"message","text":"it would be really interesting to use `typemin(Int)` as a `Nan` value. It already breaks a lot of math assumptions, and I think it would probably not slow too much down if implimented in hardware","user":"U0179G7FG4F","ts":"1616043303.029500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"729Y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it would be really interesting to use "},{"type":"text","text":"typemin(Int)","style":{"code":true}},{"type":"text","text":" as a "},{"type":"text","text":"Nan","style":{"code":true}},{"type":"text","text":" value. It already breaks a lot of math assumptions, and I think it would probably not slow too much down if implimented in hardware"}]}]}],"thread_ts":"1616031406.024500","parent_user_id":"U9MD78Z9N"},{"type":"message","text":"It also would give over/underflow protections","user":"U9MD78Z9N","ts":"1616043364.029700","team":"T68168MUP","thread_ts":"1616031406.024500","parent_user_id":"U9MD78Z9N"},{"client_msg_id":"6b5f02a0-f052-4918-8015-7650e684d51f","type":"message","text":"An interesting trick, but you might as well add overflow checking if you are going to do that, and it would wreak havoc on interop with other languages.","user":"UB7JS9CHF","ts":"1616070937.033000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LFysJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"An interesting trick, but you might as well add overflow checking if you are going to do that, and it would wreak havoc on interop with other languages."}]}]}],"thread_ts":"1616031406.024500","parent_user_id":"U9MD78Z9N"},{"client_msg_id":"5909cee2-91c6-4333-afca-05911652d1c0","type":"message","text":"I do sometimes which that Julia had checked integers by default, and then a set of unchecked Integer types. It seems a bit strange that bounds checking is on by default, but integers can overflow, unlike Python and some other high level languages.","user":"UB7JS9CHF","ts":"1616071074.033200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q1iD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I do sometimes which that Julia had checked integers by default, and then a set of unchecked Integer types. It seems a bit strange that bounds checking is on by default, but integers can overflow, unlike Python and some other high level languages."}]}]}],"thread_ts":"1616031406.024500","parent_user_id":"U9MD78Z9N"}]