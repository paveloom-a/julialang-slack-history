[{"client_msg_id":"46d29fb8-9f07-442c-a43e-51ad96a6cd67","type":"message","text":"We should make it possible to overload what any thing like `+=` or `*=` does.\nLike i would like it if  ``x ∪= Set([1,2,3])`` would call `union!`","user":"U6A936746","ts":"1615549772.073600","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1615549793.000000"},"blocks":[{"type":"rich_text","block_id":"eSEH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We should make it possible to overload what any thing like "},{"type":"text","text":"+=","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"*=","style":{"code":true}},{"type":"text","text":" does.\nLike i would like it if  `"},{"type":"text","text":"x ∪= Set([1,2,3])","style":{"code":true}},{"type":"text","text":"` would call "},{"type":"text","text":"union!","style":{"code":true}}]}]}],"thread_ts":"1615549772.073600","reply_count":5,"reply_users_count":3,"latest_reply":"1615550424.074900","reply_users":["UM30MT6RF","U6A936746","U680T6770"],"subscribed":false,"reactions":[{"name":"100","users":["ULG5V164A"],"count":1}]},{"client_msg_id":"25dabf52-73be-4c66-8554-1f30c0784baa","type":"message","text":"I am not sure this is worth it. I think it would be confusing if `x=` would sometimes be mutating and sometimes not. The current behavior seems the most transparent to me.","user":"UM30MT6RF","ts":"1615550031.073900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wR3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am not sure this is worth it. I think it would be confusing if "},{"type":"text","text":"x=","style":{"code":true}},{"type":"text","text":" would sometimes be mutating and sometimes not. The current behavior seems the most transparent to me."}]}]}],"thread_ts":"1615549772.073600","parent_user_id":"U6A936746"},{"client_msg_id":"89611d8d-bd9d-4772-bf35-ac3d59ba2153","type":"message","text":"Well then i would like ```x ∪= Set([1,2,3])`  to call `x = x ∪ Set([1,2,3])`  then","user":"U6A936746","ts":"1615550071.074100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ONC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well then i would like ``"},{"type":"text","text":"x ∪= Set([1,2,3])","style":{"code":true}},{"type":"text","text":"  to call "},{"type":"text","text":"x = x ∪ Set([1,2,3])","style":{"code":true}},{"type":"text","text":"  then"}]}]}],"thread_ts":"1615549772.073600","parent_user_id":"U6A936746","reactions":[{"name":"+1","users":["U67G3QRJM","ULG5V164A"],"count":2}]},{"client_msg_id":"358acfd4-e755-4f53-a1a2-8bbdab0685ed","type":"message","text":"Yes, I think we should be able to just do this for all infix operators in the parser (well, `:`would be an exception)","user":"UM30MT6RF","ts":"1615550293.074300","team":"T68168MUP","edited":{"user":"UM30MT6RF","ts":"1615550303.000000"},"blocks":[{"type":"rich_text","block_id":"ruQ+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, I think we should be able to just do this for all infix operators in the parser (well, "},{"type":"text","text":":","style":{"code":true}},{"type":"text","text":"would be an exception)"}]}]}],"thread_ts":"1615549772.073600","parent_user_id":"U6A936746"},{"client_msg_id":"7771acfa-130f-4954-a5ef-00dffee28e6f","type":"message","text":"The latter would probably be accepted as an extension of the ones already defined in <https://github.com/JuliaLang/julia/blob/master/src/julia-parser.scm#L7>","user":"U680T6770","ts":"1615550390.074600","team":"T68168MUP","edited":{"user":"U680T6770","ts":"1615550403.000000"},"blocks":[{"type":"rich_text","block_id":"w/l","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The latter would probably be accepted as an extension of the ones already defined in "},{"type":"link","url":"https://github.com/JuliaLang/julia/blob/master/src/julia-parser.scm#L7"}]}]}],"thread_ts":"1615549772.073600","parent_user_id":"U6A936746"},{"client_msg_id":"83932a6f-ac5a-4eec-94dc-c2d40ea62a45","type":"message","text":"The first proposal has been discussed extensively.","user":"U680T6770","ts":"1615550424.074900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8OVhV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The first proposal has been discussed extensively."}]}]}],"thread_ts":"1615549772.073600","parent_user_id":"U6A936746"}]