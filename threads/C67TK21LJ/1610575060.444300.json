[{"client_msg_id":"3bb06994-ced8-49ad-84cb-5db1a542e4b5","type":"message","text":"Considering how fast Julia is, it's disappointing that it lacks a lot of functionality for eliding allocations: No reading each line into a buffer, no string splitting without allocations, `map` and `filter` is eager, AFAIK there is no mutable `AbstractString` , etc.","user":"U7HAYKY9X","ts":"1610575060.444300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"94wbe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Considering how fast Julia is, it's disappointing that it lacks a lot of functionality for eliding allocations: No reading each line into a buffer, no string splitting without allocations, "},{"type":"text","text":"map","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"filter","style":{"code":true}},{"type":"text","text":" is eager, AFAIK there is no mutable "},{"type":"text","text":"AbstractString","style":{"code":true}},{"type":"text","text":" , etc."}]}]}],"thread_ts":"1610575060.444300","reply_count":14,"reply_users_count":5,"latest_reply":"1610659503.003100","reply_users":["U680THK2S","U7HAYKY9X","U8JP5B9T2","UB7JS9CHF","U6A936746"],"subscribed":false},{"client_msg_id":"601dfd36-2788-4984-898d-be9e6237241c","type":"message","text":"`Iterators.filter` for lazy filtering, `filter!` for in-place, generators for lazy map, MutableStrings.jl for mutable `AbstractString`","user":"U680THK2S","ts":"1610575623.444400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cAyBO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Iterators.filter","style":{"code":true}},{"type":"text","text":" for lazy filtering, "},{"type":"text","text":"filter!","style":{"code":true}},{"type":"text","text":" for in-place, generators for lazy map, MutableStrings.jl for mutable "},{"type":"text","text":"AbstractString","style":{"code":true}}]}]}],"thread_ts":"1610575060.444300","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"7675e582-3985-41fd-a36c-6f0d869497a1","type":"message","text":"&gt; reading each line into a buffer\nNot entirely sure what you mean, but `eachline` returns a lazy iterator","user":"U680THK2S","ts":"1610575775.444600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LTxBs","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"reading each line into a buffer"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Not entirely sure what you mean, but "},{"type":"text","text":"eachline","style":{"code":true}},{"type":"text","text":" returns a lazy iterator"}]}]}],"thread_ts":"1610575060.444300","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"86d73956-9f04-4124-841b-06f4dd39f410","type":"message","text":"What I mean is that you have to allocate a new string for every line, instead of it iterating substrings, or being able to iterate each Line into a preallocated buffer","user":"U7HAYKY9X","ts":"1610576337.445000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5Pf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What I mean is that you have to allocate a new string for every line, instead of it iterating substrings, or being able to iterate each Line into a preallocated buffer"}]}]}],"thread_ts":"1610575060.444300","parent_user_id":"U7HAYKY9X","reactions":[{"name":"+1","users":["U6A936746"],"count":1}]},{"client_msg_id":"073bfff2-026f-41d9-abad-df05b993bca4","type":"message","text":"I'll check out MutableStrings though :)","user":"U7HAYKY9X","ts":"1610576359.445200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"he4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'll check out MutableStrings though :)"}]}]}],"thread_ts":"1610575060.444300","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"d929b3b2-8e40-4d39-80b9-f53f3bf8d0c6","type":"message","text":"(FWIW I've never used it, I just know it exists)","user":"U680THK2S","ts":"1610576378.445400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NAGp=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(FWIW I've never used it, I just know it exists)"}]}]}],"thread_ts":"1610575060.444300","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"6defda06-0ed8-4036-8132-9b07e2308242","type":"message","text":"Also <@UB7JS9CHF> has a whole org dedicated (as I understand) to making strings faster <https://github.com/JuliaString|https://github.com/JuliaString>","user":"U8JP5B9T2","ts":"1610591129.000100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TczL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also "},{"type":"user","user_id":"UB7JS9CHF"},{"type":"text","text":" has a whole org dedicated (as I understand) to making strings faster "},{"type":"link","url":"https://github.com/JuliaString","text":"https://github.com/JuliaString"}]}]}],"thread_ts":"1610575060.444300","parent_user_id":"U7HAYKY9X","reactions":[{"name":"relaxed","users":["UB7JS9CHF"],"count":1}]},{"client_msg_id":"650595b6-8c97-4383-bffc-a8e5cdbbc76a","type":"message","text":"Hm, MutableStrings seem very outdated - deprecated in favor of another, very outdated package :( I don't think there are any mutable ones in JuliaString. Maybe that'd be a good PR.","user":"U7HAYKY9X","ts":"1610606669.000600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W/u","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hm, MutableStrings seem very outdated - deprecated in favor of another, very outdated package :( I don't think there are any mutable ones in JuliaString. Maybe that'd be a good PR."}]}]}],"thread_ts":"1610575060.444300","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"986c9a01-5f7b-4853-9bf7-bd32078fe0c6","type":"message","text":"It really should be a package, not a PR, but could be based on the optimized string framework (`Str{…}`) in StrBase.jl etc.\nI’d be happy to include such a package, collaborate with someone on it, etc.","user":"UB7JS9CHF","ts":"1610613107.000800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2Pck","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It really should be a package, not a PR, but could be based on the optimized string framework (`Str{…}`) in StrBase.jl etc.\nI’d be happy to include such a package, collaborate with someone on it, etc."}]}]}],"thread_ts":"1610575060.444300","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"5cbf9fc9-5014-4900-b225-0926544bc0f3","type":"message","text":"(It doesn’t *have* to use the `Str` string types, it could just be a mutable form of String, but those are slower, are not validated, etc.)","user":"UB7JS9CHF","ts":"1610613158.001000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/Aiwj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(It doesn’t "},{"type":"text","text":"have","style":{"bold":true}},{"type":"text","text":" to use the "},{"type":"text","text":"Str","style":{"code":true}},{"type":"text","text":" string types, it could just be a mutable form of String, but those are slower, are not validated, etc.)"}]}]}],"thread_ts":"1610575060.444300","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"aaaaec7d-ab86-401c-80c9-692cad2bc770","type":"message","text":"probably worth remembering that allocations are incredibly fast relative to reading in from files.\nI suspect that is why we don’t have a resuably buffer for `eachline`","user":"U6A936746","ts":"1610639968.001600","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1610639989.000000"},"blocks":[{"type":"rich_text","block_id":"1YBGA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"probably worth remembering that allocations are incredibly fast relative to reading in from files.\nI suspect that is why we don’t have a resuably buffer for "},{"type":"text","text":"eachline","style":{"code":true}}]}]}],"thread_ts":"1610575060.444300","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"b3fdd0e8-3a1d-4dd1-bfaf-062f6ddfb5c7","type":"message","text":"Modern SSDs can read at gigabytes per second, you'd have to SIMD everything to keep up, even without allocations","user":"U7HAYKY9X","ts":"1610653097.002100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yoVVW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Modern SSDs can read at gigabytes per second, you'd have to SIMD everything to keep up, even without allocations"}]}]}],"thread_ts":"1610575060.444300","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"42b7ee7b-1013-4be8-a082-24e9f3357f44","type":"message","text":"Like kinda?\n\nI can allocate 4KB in 10^-7 seconds and 4GB in 10^-4 seconds\n```julia&gt; @btime Vector{Int8}(undef, 4096);\n  93.098 ns (1 allocation: 4.19 KiB)\njulia&gt; @btime Vector{Int8}(undef, 2^32);\n  96.659 μs (2 allocations: 4.00 GiB)```\nIn contrast:\nFastest SATA SSD are around 0.5 GB/s\n<https://www.techradar.com/uk/reviews/samsung-860-pro-review>\nFastest NVMe (i.e. PCI-E) SSD as are apparently around 3.5GB/s\n<https://www.techradar.com/uk/reviews/wd-black-nvme-ssd>\n\nAnd NVMe SSDs have come down a fair bit lately.\nI guess some people might not be IO bound.","user":"U6A936746","ts":"1610655893.002300","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1610655918.000000"},"blocks":[{"type":"rich_text","block_id":"pKAXJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Like kinda?\n\nI can allocate 4KB in 10^-7 seconds and 4GB in 10^-4 seconds\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @btime Vector{Int8}(undef, 4096);\n  93.098 ns (1 allocation: 4.19 KiB)\njulia> @btime Vector{Int8}(undef, 2^32);\n  96.659 μs (2 allocations: 4.00 GiB)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nIn contrast:\nFastest SATA SSD are around 0.5 GB/s\n"},{"type":"link","url":"https://www.techradar.com/uk/reviews/samsung-860-pro-review"},{"type":"text","text":"\nFastest NVMe (i.e. PCI-E) SSD as are apparently around 3.5GB/s\n"},{"type":"link","url":"https://www.techradar.com/uk/reviews/wd-black-nvme-ssd"},{"type":"text","text":"\n\nAnd NVMe SSDs have come down a fair bit lately.\nI guess some people might not be IO bound."}]}]}],"thread_ts":"1610575060.444300","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"a8b4e858-ea8c-481e-99ca-fdd2bcad2202","type":"message","text":"Most people are not IO bound. My mid-range laptop does random reads at 1.3 GiB/s. And you might be able to allocate a single vector at terabytes a second, but you can't allocate one line at a time from a file and keep up with the disk","user":"U7HAYKY9X","ts":"1610656529.002900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PW5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Most people are not IO bound. My mid-range laptop does random reads at 1.3 GiB/s. And you might be able to allocate a single vector at terabytes a second, but you can't allocate one line at a time from a file and keep up with the disk"}]}]}],"thread_ts":"1610575060.444300","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"78d767db-c47e-444b-a60f-8fee2f4c66e1","type":"message","text":"All depends on what you are doing. Systems dealing with large amounts of data will still overall generally be IO bound (just because of the economics, while SSDs and NVMe SSDs are very fast, they are still many times more expensive than large disk arrays.  The SSDs are used in front of the disk arrays as a cache, and that makes things overall much faster, but it’s not a panacea.","user":"UB7JS9CHF","ts":"1610659503.003100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/QBa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"All depends on what you are doing. Systems dealing with large amounts of data will still overall generally be IO bound (just because of the economics, while SSDs and NVMe SSDs are very fast, they are still many times more expensive than large disk arrays.  The SSDs are used in front of the disk arrays as a cache, and that makes things overall much faster, but it’s not a panacea."}]}]}],"thread_ts":"1610575060.444300","parent_user_id":"U7HAYKY9X"}]