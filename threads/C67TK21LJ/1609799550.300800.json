[{"client_msg_id":"a8e7b2c4-655e-497d-9954-778cb3ce8a7d","type":"message","text":"I don't get that sentiment. I see it often, but I don't understand what exactly they mean...\n• Do they mean that Julia's JIT + big runtime is unacceptable for phones, systems software and games, so there must only be scientific computing left?\n• Do they mean the ecosystem only have cool packages for science, so it's not worth learning?\n• Do they mean the compiler is built to only do science stuff? (How would that even work)","user":"U7HAYKY9X","ts":"1609799550.300800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HO7H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't get that sentiment. I see it often, but I don't understand what exactly they mean...\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Do they mean that Julia's JIT + big runtime is unacceptable for phones, systems software and games, so there must only be scientific computing left?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Do they mean the ecosystem only have cool packages for science, so it's not worth learning?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Do they mean the compiler is built to only do science stuff? (How would that even work)"}]}],"style":"bullet","indent":0}]}],"thread_ts":"1609799550.300800","reply_count":31,"reply_users_count":7,"latest_reply":"1609877255.331700","reply_users":["UDGT4PM41","U7HAYKY9X","U6NFPDBV1","U0179G7FG4F","UPUBAM63X","UAEJRV3KJ","U6A0PD8CR"],"subscribed":false},{"type":"message","subtype":"thread_broadcast","text":"I've heard fragments of all three.... along with the way code is organized (module system or misunderstanding MD)","user":"UDGT4PM41","ts":"1609799636.301100","thread_ts":"1609799550.300800","root":{"client_msg_id":"a8e7b2c4-655e-497d-9954-778cb3ce8a7d","type":"message","text":"I don't get that sentiment. I see it often, but I don't understand what exactly they mean...\n• Do they mean that Julia's JIT + big runtime is unacceptable for phones, systems software and games, so there must only be scientific computing left?\n• Do they mean the ecosystem only have cool packages for science, so it's not worth learning?\n• Do they mean the compiler is built to only do science stuff? (How would that even work)","user":"U7HAYKY9X","ts":"1609799550.300800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HO7H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't get that sentiment. I see it often, but I don't understand what exactly they mean...\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Do they mean that Julia's JIT + big runtime is unacceptable for phones, systems software and games, so there must only be scientific computing left?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Do they mean the ecosystem only have cool packages for science, so it's not worth learning?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Do they mean the compiler is built to only do science stuff? (How would that even work)"}]}],"style":"bullet","indent":0}]}],"thread_ts":"1609799550.300800","reply_count":31,"reply_users_count":7,"latest_reply":"1609877255.331700","reply_users":["UDGT4PM41","U7HAYKY9X","U6NFPDBV1","U0179G7FG4F","UPUBAM63X","UAEJRV3KJ","U6A0PD8CR"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"fMq69","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I've heard fragments of all three.... along with the way code is organized (module system or misunderstanding MD)"}]}]}],"client_msg_id":"63e53169-7011-4321-bfcb-930656db8460"},{"client_msg_id":"dcc38fdb-8a02-43ae-9cdf-764cbce04904","type":"message","text":"The first is somewhat correct - there's also web development, but I can't think of other good use cases given Julia's latency, unpredictability and memory usage.\nThe second is not quite true, but almost. The third, not so much though","user":"U7HAYKY9X","ts":"1609799788.301400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h9l","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The first is somewhat correct - there's also web development, but I can't think of other good use cases given Julia's latency, unpredictability and memory usage.\nThe second is not quite true, but almost. The third, not so much though"}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"9a5a8d93-d219-45b4-b894-2edb4e31dbd6","type":"message","text":"&gt; along with the way code is organized (module system or misunderstanding MD)\nWell, I don't think it's an uncommon opinion that our module system leaves something to be desired. At least that's how I feel, and I know a lot of people prefer more deterministic module organization the way Python, Rust, Elixir, and others do it","user":"U6NFPDBV1","ts":"1609799813.301600","team":"T68168MUP","edited":{"user":"U6NFPDBV1","ts":"1609799817.000000"},"blocks":[{"type":"rich_text","block_id":"nNq","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"along with the way code is organized (module system or misunderstanding MD)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Well, I don't think it's an uncommon opinion that our module system leaves something to be desired. At least that's how I feel, and I know a lot of people prefer more deterministic module organization the way Python, Rust, Elixir, and others do it"}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"d8819e8d-c271-433f-bec4-ec16bde92f9b","type":"message","text":"I think part of it is that Julia's string processing (especially unicode) is kind of clunky and un-intuitive.","user":"U0179G7FG4F","ts":"1609799815.301800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JgIT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think part of it is that Julia's string processing (especially unicode) is kind of clunky and un-intuitive."}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"7ae17d0a-2473-48a7-acad-143e651b1526","type":"message","text":"I understand why Julia chose UTF-8+byte indexing, but it is way harder to work with than python's choice of UTF-32 and indexing just works","user":"U0179G7FG4F","ts":"1609799932.302100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fAKP4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I understand why Julia chose UTF-8+byte indexing, but it is way harder to work with than python's choice of UTF-32 and indexing just works"}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"a6a3e3ca-4f67-41cc-8654-980fefa4e902","type":"message","text":"4x memory consumption for ASCII, though :grimacing: ... But a 32-bit string type should be really easy to make","user":"U7HAYKY9X","ts":"1609800063.302300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Unw1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"4x memory consumption for ASCII, though "},{"type":"emoji","name":"grimacing"},{"type":"text","text":" ... But a 32-bit string type should be really easy to make"}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"94f4c752-e928-402e-ac2d-0130e6b14771","type":"message","text":"yeah, I'm mostly with you, 32 bit string type is easy, and you could even make it easy to use (eg `g\"UTF-32 String\"`) but strings not behaving the way people expect is an issue that inevitably will mainly affect new users","user":"U0179G7FG4F","ts":"1609800187.302500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"euCr/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, I'm mostly with you, 32 bit string type is easy, and you could even make it easy to use (eg "},{"type":"text","text":"g\"UTF-32 String\"","style":{"code":true}},{"type":"text","text":") but strings not behaving the way people expect is an issue that inevitably will mainly affect new users"}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"066d81b1-0c0d-4fb1-b95a-5ca983850528","type":"message","text":"unpredictability in what sense <@U7HAYKY9X>","user":"UDGT4PM41","ts":"1609800275.302700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9WZx=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"unpredictability in what sense "},{"type":"user","user_id":"U7HAYKY9X"}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"c89441aa-9c32-495e-a96b-23e50707370c","type":"message","text":"If Julia only exported an arbitrary precision rational number by default no one in the hpc space would have used it and built the great ecosystem we have today","user":"U0179G7FG4F","ts":"1609800306.302900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sA8Za","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If Julia only exported an arbitrary precision rational number by default no one in the hpc space would have used it and built the great ecosystem we have today"}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"79f3535b-3bd2-454f-9cf0-d6f9f9d2cb25","type":"message","text":"<@UDGT4PM41> you never know when you hit a previously uncompiled path, or when GC kicks in, and having code run and pass tests is not a guarantee that inference worked out. In contrast, having inferred code suddenly not infer in a static language is a breaking change, so you don't get those regressions","user":"U7HAYKY9X","ts":"1609800373.303100","team":"T68168MUP","edited":{"user":"U7HAYKY9X","ts":"1609800441.000000"},"blocks":[{"type":"rich_text","block_id":"6dG","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UDGT4PM41"},{"type":"text","text":" you never know when you hit a previously uncompiled path, or when GC kicks in, and having code run and pass tests is not a guarantee that inference worked out. In contrast, having inferred code suddenly not infer in a static language is a breaking change, so you don't get those regressions"}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"ed98591e-a28e-4725-bb14-572fa7124e76","type":"message","text":"Yea,  I guess you can't rely on Julia to be fast everywhere, or have predictable latency, especially in larger codebases. I really hope we'll get better tooling for that at some point, with opt in restricted semantics.","user":"UDGT4PM41","ts":"1609800781.306000","team":"T68168MUP","edited":{"user":"UDGT4PM41","ts":"1609800812.000000"},"blocks":[{"type":"rich_text","block_id":"R1/N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yea,  I guess you can't rely on Julia to be fast everywhere, or have predictable latency, especially in larger codebases. I really hope we'll get better tooling for that at some point, with opt in restricted semantics."}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"2eefe040-6b23-4217-ba83-ce980e6643d1","type":"message","text":"<@UH1BLK14H> I wonder if that's in scope for jet.jl?","user":"UDGT4PM41","ts":"1609800896.306300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8q3ve","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH1BLK14H"},{"type":"text","text":" I wonder if that's in scope for jet.jl?"}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"c68d9703-e82c-41aa-8ed9-5db882c85c6f","type":"message","text":"it would be really interesting to make a cli option for Julia that errors whenever inference finds a union of non-singleton types","user":"U0179G7FG4F","ts":"1609801155.306500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+P6e","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it would be really interesting to make a cli option for Julia that errors whenever inference finds a union of non-singleton types"}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"53cd9fe5-19ba-4381-8c3a-c978336edbea","type":"message","text":"So Julia's Runtime takes what 250mb RAM? That's a lot. It wasn't super long ago that Consider an entire OS (Android) ran on a minimum of 512mb.\nJuxtapose against python(32?64mb?). The java runtime is 128mb. Less than matlab or mathematica though so thats good,","user":"UPUBAM63X","ts":"1609802797.306700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3FC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So Julia's Runtime takes what 250mb RAM? That's a lot. It wasn't super long ago that Consider an entire OS (Android) ran on a minimum of 512mb.\nJuxtapose against python(32?64mb?). The java runtime is 128mb. Less than matlab or mathematica though so thats good,"}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"c69f3efa-fc55-4279-b30f-733b0b5b85da","type":"message","text":"you can use Julia for other stuff, but, it's a dynamic language and it's runtime isn't mainstream. So if you want lean and mean - julia just isn't the right tool.","user":"UPUBAM63X","ts":"1609802873.306900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TUI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can use Julia for other stuff, but, it's a dynamic language and it's runtime isn't mainstream. So if you want lean and mean - julia just isn't the right tool."}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X","reactions":[{"name":"heavy_check_mark","users":["U6NFPDBV1","UKG4WF8PJ"],"count":2}]},{"client_msg_id":"7524214c-5d7e-4e0b-a98f-70df3c7d94bc","type":"message","text":"some embedded systems have like 2gb ram, and an OS takes up a big chunk of that, using another 250 just to get julia going is rough let alone getting Julia to do the stuff you want. I had to switch to C++ and C# for those kinds of projects :disappointed:","user":"UPUBAM63X","ts":"1609803021.307100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yFkd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"some embedded systems have like 2gb ram, and an OS takes up a big chunk of that, using another 250 just to get julia going is rough let alone getting Julia to do the stuff you want. I had to switch to C++ and C# for those kinds of projects "},{"type":"emoji","name":"disappointed"}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X","reactions":[{"name":"100","users":["U7HAYKY9X","U0179G7FG4F"],"count":2}]},{"client_msg_id":"011b276a-9f4e-4436-bde5-862e412bff8f","type":"message","text":"That's the julia compiler and runtime. this isn't an intrinsic issue with the language design and julian samaroo is working on making it slimmer so precompiled code (without eval and maybe minimal dynamic dispatch) can be used without the compiler. I think it was 15 mb last I checked","user":"UDGT4PM41","ts":"1609806508.307800","team":"T68168MUP","edited":{"user":"UDGT4PM41","ts":"1609806543.000000"},"blocks":[{"type":"rich_text","block_id":"bpR3/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's the julia compiler and runtime. this isn't an intrinsic issue with the language design and julian samaroo is working on making it slimmer so precompiled code (without eval and maybe minimal dynamic dispatch) can be used without the compiler. I think it was 15 mb last I checked"}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"731ba905-9f78-4b32-9199-f7042cb9acc7","type":"message","text":"Also, I feel like in general it's easier to make a dynamic language static than vice versa","user":"UDGT4PM41","ts":"1609806601.308100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sHzV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, I feel like in general it's easier to make a dynamic language static than vice versa"}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"23878ece-2822-4499-ab0a-3f98b8e6f4f6","type":"message","text":"making static dynamic should be really easy. Just write an interpreter","user":"U0179G7FG4F","ts":"1609806625.308300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"K+HX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"making static dynamic should be really easy. Just write an interpreter"}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"f392331a-bbaa-47c2-95aa-f3d46f58006f","type":"message","text":"you just don't get most of the benefits of being dynamic","user":"U0179G7FG4F","ts":"1609806640.308500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wXAB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you just don't get most of the benefits of being dynamic"}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"692443ea-8384-420c-86f0-5225bf353448","type":"message","text":"Yea but then you aren't really integrate with the host type system right?","user":"UDGT4PM41","ts":"1609806951.308700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rHXej","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yea but then you aren't really integrate with the host type system right?"}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"fa499a32-e69a-46f5-981c-2b2acecf9020","type":"message","text":"<@UDGT4PM41>. Is there a repo for those efforts?","user":"UAEJRV3KJ","ts":"1609846394.318600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O05L","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UDGT4PM41"},{"type":"text","text":". Is there a repo for those efforts?"}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"07ae0425-8f0a-4b81-b030-ee650c7b19ca","type":"message","text":"I'm eagerly awaiting Juliansamaroos work and hope it hits production level stability. But in the mean time - it doesn't exist yet.\n\nLike hypothetically haskell can outpace C - but in reality it doesn't. People in industry(people talking about phones, embedded systems, etc), aren't looking for \"potential\" unless that \"potential\" is useful or gives a competing edge. Writing a compiler for Julia to lessen it's runtime is a lot of work compared to something off the shelf with gaurantees, certifications, and specifications. Most people who are making these sorts of statements aren't saying them to bash julia at all or its potential. They are just saying - \"hey right now as I understand it - I can't use it, it's way too bloated or requires a specialized team and half a year with an uncertain ROI\".\n\nBasically its people being practical.","user":"UPUBAM63X","ts":"1609848869.318800","team":"T68168MUP","edited":{"user":"UPUBAM63X","ts":"1609849446.000000"},"blocks":[{"type":"rich_text","block_id":"xiLy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm eagerly awaiting Juliansamaroos work and hope it hits production level stability. But in the mean time - it doesn't exist yet.\n\nLike hypothetically haskell can outpace C - but in reality it doesn't. People in industry(people talking about phones, embedded systems, etc), aren't looking for \"potential\" unless that \"potential\" is useful or gives a competing edge. Writing a compiler for Julia to lessen it's runtime is a lot of work compared to something off the shelf with gaurantees, certifications, and specifications. Most people who are making these sorts of statements aren't saying them to bash julia at all or its potential. They are just saying - \"hey right now as I understand it - I can't use it, it's way too bloated or requires a specialized team and half a year with an uncertain ROI\".\n\nBasically its people being practical."}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"164fa69a-5cd7-4d37-b0e1-fc6d2a1e9bba","type":"message","text":"It doesn't require writing a compiler, the compiler already exists in the form of GPUcompiler.jl. It can already compile static julia code with no runtime dependency, that's what CUDA.jl does. It's about tweaking things to work better and separating out the runtime from the codegen. <@U6A0PD8CR> can give more info.\n\nI'm not claiming Julia bashing. I'm just saying that people aren't aware of its potential or upcoming work when they make those statements. If that's not enough, I understand.\n\nWhat I'm griping about is when the claims are purely facile, based on a superficial comparison to Matlab or sci/ml marketing.","user":"UDGT4PM41","ts":"1609849823.319600","team":"T68168MUP","edited":{"user":"UDGT4PM41","ts":"1609851455.000000"},"blocks":[{"type":"rich_text","block_id":"RCm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It doesn't require writing a compiler, the compiler already exists in the form of GPUcompiler.jl. It can already compile static julia code with no runtime dependency, that's what CUDA.jl does. It's about tweaking things to work better and separating out the runtime from the codegen. "},{"type":"user","user_id":"U6A0PD8CR"},{"type":"text","text":" can give more info.\n\nI'm not claiming Julia bashing. I'm just saying that people aren't aware of its potential or upcoming work when they make those statements. If that's not enough, I understand.\n\nWhat I'm griping about is when the claims are purely facile, based on a superficial comparison to Matlab or sci/ml marketing."}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X","reactions":[{"name":"+1","users":["U6A0PD8CR"],"count":1}]},{"client_msg_id":"5105be5b-04a8-4224-bff4-729a2db9dce2","type":"message","text":"<@UAEJRV3KJ> right now it's scattered across several repos but I think eventually it will be in package compiler","user":"UDGT4PM41","ts":"1609849872.320000","team":"T68168MUP","edited":{"user":"UDGT4PM41","ts":"1609849885.000000"},"blocks":[{"type":"rich_text","block_id":"8Mj","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UAEJRV3KJ"},{"type":"text","text":" right now it's scattered across several repos but I think eventually it will be in package compiler"}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"3e563cb8-2965-486d-8d9b-5928afcb3cfd","type":"message","text":"I have a branch where I'm separating out the runtime component from `libjulia`, which is considerably smaller than the codegen component (and won't link dynamically against LLVM). But the main difficulty will be getting most patterns of code to nicely compile under GPUCompiler. Right now, dynamic dispatch is explicitly disallowed, but a lot of real code relies on a little bit of dynamic dispatch, so that restriction needs to be lifted.","user":"U6A0PD8CR","ts":"1609860423.322800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"39x","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have a branch where I'm separating out the runtime component from "},{"type":"text","text":"libjulia","style":{"code":true}},{"type":"text","text":", which is considerably smaller than the codegen component (and won't link dynamically against LLVM). But the main difficulty will be getting most patterns of code to nicely compile under GPUCompiler. Right now, dynamic dispatch is explicitly disallowed, but a lot of real code relies on a little bit of dynamic dispatch, so that restriction needs to be lifted."}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"448da8cd-ff69-4d2a-93b9-46a4a34cc784","type":"message","text":"Also, most of Julia's bloat is in the sysimage, not in `libjulia` itself (although `libjulia` loads the sysimage at init time). What people really want is the ability to forego loading the sysimage, and instead re-JIT the required support code from Base/stdlibs into their own self-contained binary (which is what GPUCompiler already accomplishes quite well).","user":"U6A0PD8CR","ts":"1609860551.323000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4Aoyn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, most of Julia's bloat is in the sysimage, not in "},{"type":"text","text":"libjulia","style":{"code":true}},{"type":"text","text":" itself (although "},{"type":"text","text":"libjulia","style":{"code":true}},{"type":"text","text":" loads the sysimage at init time). What people really want is the ability to forego loading the sysimage, and instead re-JIT the required support code from Base/stdlibs into their own self-contained binary (which is what GPUCompiler already accomplishes quite well)."}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"65d55bc3-d144-46fd-9fb1-0d58edbf5441","type":"message","text":"Still, I have only so much time to work on this. If I were looking to deploy an application in the next 6 months that couldn't accept Julia's JIT overhead, I would write the low-level parts in C, and then use GPUCompiler to generate the numerical Julia pieces as a .o to be linked against.","user":"U6A0PD8CR","ts":"1609860721.323200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sU2LY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Still, I have only so much time to work on this. If I were looking to deploy an application in the next 6 months that couldn't accept Julia's JIT overhead, I would write the low-level parts in C, and then use GPUCompiler to generate the numerical Julia pieces as a .o to be linked against."}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"0b4ffe5a-1e26-4cc2-94ed-39828435687c","type":"message","text":"That's the sort of thing an adventurous user could learn to do in a ~week~ day or two of toying around.","user":"U6A0PD8CR","ts":"1609860772.323400","team":"T68168MUP","edited":{"user":"U6A0PD8CR","ts":"1609860794.000000"},"blocks":[{"type":"rich_text","block_id":"8/fkT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's the sort of thing an adventurous user could learn to do in a "},{"type":"text","text":"week","style":{"strike":true}},{"type":"text","text":" day or two of toying around."}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"319e242c-4cfb-4958-9a9d-3289b22355a1","type":"message","text":"<@UH8A351DJ>","user":"UDGT4PM41","ts":"1609877230.331500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0I9CZ","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH8A351DJ"}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"afa420e5-9ed5-4ecb-bbb0-1b4374719008","type":"message","text":"<@U013V2CFZAN>","user":"UDGT4PM41","ts":"1609877255.331700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ocYw","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U013V2CFZAN"}]}]}],"thread_ts":"1609799550.300800","parent_user_id":"U7HAYKY9X"}]