[{"client_msg_id":"3c64fab9-8243-4fec-b88c-215179763189","type":"message","text":":grapes: Packages with too many tests. Don't get me wrong, of course I'm a fan of good test coverage. It's just, if you have 25.000 tests to cover 1000 lines of code, maybe cut it down.","user":"U7HAYKY9X","ts":"1611909018.174800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MUgfi","elements":[{"type":"rich_text_section","elements":[{"type":"emoji","name":"grapes"},{"type":"text","text":" Packages with too many tests. Don't get me wrong, of course I'm a fan of good test coverage. It's just, if you have 25.000 tests to cover 1000 lines of code, maybe cut it down."}]}]}],"thread_ts":"1611909018.174800","reply_count":11,"reply_users_count":9,"latest_reply":"1611934026.179000","reply_users":["UPSSPPBFV","U73KENNG4","U7HAYKY9X","UDSU53PEG","U67431ELR","ULDQSHD41","UC81ESVH6","UB7JS9CHF","U9VG1AYSG"],"subscribed":false},{"client_msg_id":"c4eef3a9-fa23-4dc8-88c9-0ffecc41fb3a","type":"message","text":"Sounds like they're trying to test every edge case and their neighbour! They could probably make good use of something like <https://hypothesis.readthedocs.io/en/latest/|Hypothesis> or <https://hackage.haskell.org/package/QuickCheck|QuickCheck>. Is there anything like that available for Julia?","user":"UPSSPPBFV","ts":"1611914879.175100","team":"T68168MUP","attachments":[{"service_name":"Hackage","title":"QuickCheck: Automatic testing of Haskell programs","title_link":"https://hackage.haskell.org/package/QuickCheck","text":"Install via `cabal install QuickCheck`.        [rating:2.75/3(n=17)]","fallback":"Hackage: QuickCheck: Automatic testing of Haskell programs","from_url":"https://hackage.haskell.org/package/QuickCheck","service_icon":"https://hackage.haskell.org/static/favicon.png","id":1,"original_url":"https://hackage.haskell.org/package/QuickCheck"}],"blocks":[{"type":"rich_text","block_id":"Xpi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sounds like they're trying to test every edge case and their neighbour! They could probably make good use of something like "},{"type":"link","url":"https://hypothesis.readthedocs.io/en/latest/","text":"Hypothesis"},{"type":"text","text":" or "},{"type":"link","url":"https://hackage.haskell.org/package/QuickCheck","text":"QuickCheck"},{"type":"text","text":". Is there anything like that available for Julia?"}]}]}],"thread_ts":"1611909018.174800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"162649d7-fc57-412f-aa10-4795f676fa09","type":"message","text":"Sounds like automatically generated tests?","user":"U73KENNG4","ts":"1611916459.175400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Tyf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sounds like automatically generated tests?"}]}]}],"thread_ts":"1611909018.174800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"a377ff22-a96d-47ae-9014-bbdeca37f666","type":"message","text":"Tests in nested loops. Not always bad for e.g. looping over types to test, but it should be limited.","user":"U7HAYKY9X","ts":"1611916698.175600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/ZUh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Tests in nested loops. Not always bad for e.g. looping over types to test, but it should be limited."}]}]}],"thread_ts":"1611909018.174800","parent_user_id":"U7HAYKY9X","reactions":[{"name":"+1","users":["U73KENNG4","UKG4WF8PJ"],"count":2}]},{"client_msg_id":"96e0e789-86a2-4b0b-a006-12297907c2bc","type":"message","text":"Yeah, sounds like property-based testing would help here.","user":"UPSSPPBFV","ts":"1611916761.175900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"J5sfJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, sounds like property-based testing would help here."}]}]}],"thread_ts":"1611909018.174800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"a31131be-1640-44a7-ac53-4ede39dcf458","type":"message","text":"could use ML for testing also <https://hacks.mozilla.org/2020/07/testing-firefox-more-efficiently-with-machine-learning/>","user":"UDSU53PEG","ts":"1611917094.176100","team":"T68168MUP","edited":{"user":"UDSU53PEG","ts":"1611917127.000000"},"blocks":[{"type":"rich_text","block_id":"2Yy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"could use ML for testing also "},{"type":"link","url":"https://hacks.mozilla.org/2020/07/testing-firefox-more-efficiently-with-machine-learning/"}]}]}],"thread_ts":"1611909018.174800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"cdd3b460-7a5b-4a3a-a519-6b4644630823","type":"message","text":"Julia is so powerful that I often find it harder to write tests covering all cases than writing the actual implementation. Something that works with `Int` can also be extended to Boolean, complex numbers, big numbers, allow for missing values... But usually there are corner cases that fail unless you actually test them.","user":"U67431ELR","ts":"1611918975.176700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x9e","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Julia is so powerful that I often find it harder to write tests covering all cases than writing the actual implementation. Something that works with "},{"type":"text","text":"Int","style":{"code":true}},{"type":"text","text":" can also be extended to Boolean, complex numbers, big numbers, allow for missing values... But usually there are corner cases that fail unless you actually test them."}]}]}],"thread_ts":"1611909018.174800","parent_user_id":"U7HAYKY9X","reactions":[{"name":"100","users":["UM30MT6RF","U66M57AN4"],"count":2}]},{"client_msg_id":"c7bcedc1-c935-4f73-8d98-fa61bd312821","type":"message","text":"Or at the very least pull all excess tests out into a separate package and only include it in your `[Test]` section.","user":"ULDQSHD41","ts":"1611929315.177000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cvJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Or at the very least pull all excess tests out into a separate package and only include it in your "},{"type":"text","text":"[Test]","style":{"code":true}},{"type":"text","text":" section."}]}]}],"thread_ts":"1611909018.174800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"0835e4c4-5455-4cea-905a-b0ad47ced403","type":"message","text":"For property-based testing there is <https://git.sr.ht/~quf/RandomizedPropertyTest.jl|https://git.sr.ht/~quf/RandomizedPropertyTest.jl>","user":"UC81ESVH6","ts":"1611930373.177200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GBp6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For property-based testing there is "},{"type":"link","url":"https://git.sr.ht/~quf/RandomizedPropertyTest.jl","text":"https://git.sr.ht/~quf/RandomizedPropertyTest.jl"}]}]}],"thread_ts":"1611909018.174800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"9C978196-305E-41F1-AEBB-B0F9212870DA","type":"message","text":"Are there any packages in particular that you think are problematic?","user":"UB7JS9CHF","ts":"1611931022.178200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"z=a","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Are there any packages in particular that you think are problematic?"}]}]}],"thread_ts":"1611909018.174800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"492cf86b-6a8f-453a-b0e1-80f8207e41aa","type":"message","text":"this is another good argument for making it possible to run tests by section on command","user":"U9VG1AYSG","ts":"1611931416.178400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"de6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this is another good argument for making it possible to run tests by section on command"}]}]}],"thread_ts":"1611909018.174800","parent_user_id":"U7HAYKY9X","reactions":[{"name":"heavy_check_mark","users":["UB7JS9CHF","U6QGE7S86","U8T0YV7QC","U01724Q3PGW","UDXST8ARK","UH8A351DJ"],"count":6}]},{"client_msg_id":"d419752c-0cdb-487c-843a-f1330ed68f83","type":"message","text":"For the sort of thing I’ve done, it would definitely be nice to see tests that cover an abstract type, like `AbstractString` and `AbstractChar` placed in a separate packages (now that I just thought of that, I think I may go ahead and do just that, for `AbstractString`, `AbstractChar`, and `AbstractPattern` at the very least)\nUnit tests for a specific type would then consist mostly of calling the tests in that package with the given type.","user":"UB7JS9CHF","ts":"1611934026.179000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Aj0Pn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For the sort of thing I’ve done, it would definitely be nice to see tests that cover an abstract type, like "},{"type":"text","text":"AbstractString","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"AbstractChar","style":{"code":true}},{"type":"text","text":" placed in a separate packages (now that I just thought of that, I think I may go ahead and do just that, for "},{"type":"text","text":"AbstractString","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"AbstractChar","style":{"code":true}},{"type":"text","text":", and "},{"type":"text","text":"AbstractPattern","style":{"code":true}},{"type":"text","text":" at the very least)\nUnit tests for a specific type would then consist mostly of calling the tests in that package with the given type."}]}]}],"thread_ts":"1611909018.174800","parent_user_id":"U7HAYKY9X"}]