[{"client_msg_id":"0be344a8-3da1-4127-be2e-0b452c04e8b2","type":"message","text":"Not from me. Via hackernews\n\n<https://github.com/JuliaOptics/About>\n```This organization and its repositories have been abandoned.  The About section below is left intact.  The work was abandoned for the following reasons:\n\n* Julia does not offer significant acceleration over the numpy code of [prysm](<https://github.com/brandondube/prysm>) -- only about 20%\n* writing performant julia is significantly more difficult than writing performant numpy.  The base language emits unvectorized code which is slower than numpy, the `@avx` macro is unstable and often crashes the interpreter, the allocator is much slower than numpy or even matlab, and `.` and `!` are quasi-white space symbols that are far too important to the performance of an algorithm.  `@.` prefixes to a line are slower than hand placing the `.`, so that is not a solution\n* the language itself, as well as its tooling, is too immature, with poor documentation and many bugs or sharp edges\n* errors in Julia are severely cluttered by multiple line long type information which does not aid clarity```","user":"USU9FRPEU","ts":"1616432092.068900","team":"T68168MUP","edited":{"user":"USU9FRPEU","ts":"1616432226.000000"},"blocks":[{"type":"rich_text","block_id":"QeZw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not from me. Via hackernews\n\n"},{"type":"link","url":"https://github.com/JuliaOptics/About"},{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"This organization and its repositories have been abandoned.  The About section below is left intact.  The work was abandoned for the following reasons:\n\n* Julia does not offer significant acceleration over the numpy code of [prysm]("},{"type":"link","url":"https://github.com/brandondube/prysm"},{"type":"text","text":") -- only about 20%\n* writing performant julia is significantly more difficult than writing performant numpy.  The base language emits unvectorized code which is slower than numpy, the `@avx` macro is unstable and often crashes the interpreter, the allocator is much slower than numpy or even matlab, and `.` and `!` are quasi-white space symbols that are far too important to the performance of an algorithm.  `@.` prefixes to a line are slower than hand placing the `.`, so that is not a solution\n* the language itself, as well as its tooling, is too immature, with poor documentation and many bugs or sharp edges\n* errors in Julia are severely cluttered by multiple line long type information which does not aid clarity"}]}]}],"thread_ts":"1616432092.068900","reply_count":20,"reply_users_count":8,"latest_reply":"1616512433.104200","reply_users":["U7JQGPGCQ","USU9FRPEU","U67D54KS8","U6QGE7S86","UB7JS9CHF","UAUPJLBQX","UC7FP1MQV","U6740K1SP"],"subscribed":false},{"client_msg_id":"e920bbe4-89eb-4c16-937d-e0e9a4fd2dfe","type":"message","text":"That `@.` point is weird - how would manually typed dots perform differently from dots inserted by a macro?","user":"U7JQGPGCQ","ts":"1616432210.069500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/r56B","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That "},{"type":"text","text":"@.","style":{"code":true}},{"type":"text","text":" point is weird - how would manually typed dots perform differently from dots inserted by a macro?"}]}]}],"thread_ts":"1616432092.068900","parent_user_id":"USU9FRPEU"},{"client_msg_id":"5cc594a6-0d83-4753-ae31-4b1db21f1d75","type":"message","text":"<https://news.ycombinator.com/item?id=26540953>","user":"USU9FRPEU","ts":"1616432231.069800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"18sje","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://news.ycombinator.com/item?id=26540953"}]}]}],"thread_ts":"1616432092.068900","parent_user_id":"USU9FRPEU"},{"client_msg_id":"c6ab7912-3b96-4513-bc31-fae8cc74af27","type":"message","text":"&gt;  how would manually typed dots perform differently from dots inserted by a macro?\nI know about <https://github.com/JuliaLang/julia/issues/29120>","user":"U67D54KS8","ts":"1616432246.070000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ig/C/","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":" how would manually typed dots perform differently from dots inserted by a macro?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nI know about "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/29120"}]}]}],"thread_ts":"1616432092.068900","parent_user_id":"USU9FRPEU","reactions":[{"name":"today-i-learned","users":["U7JQGPGCQ","UGU761DU2","UKG4WF8PJ","U6795JH6H"],"count":4}]},{"client_msg_id":"cae3c2b0-1766-4ebd-96bc-081e72752503","type":"message","text":"Not sure it would make things slower though","user":"U67D54KS8","ts":"1616432305.070200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LISt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not sure it would make things slower though"}]}]}],"thread_ts":"1616432092.068900","parent_user_id":"USU9FRPEU"},{"client_msg_id":"4e7bb78c-d1fc-4d27-862e-1a706074826d","type":"message","text":"Oh, I didn't see <https://julialang.slack.com/archives/C67910KEH/p1616424972227800>","user":"USU9FRPEU","ts":"1616432469.070400","team":"T68168MUP","attachments":[{"from_url":"https://julialang.slack.com/archives/C67910KEH/p1616424972227800","fallback":"[March 22nd, 2021 7:56 AM] arikatzpro: Mentioned in the hn thread is  <https://github.com/JuliaOptics/About|https://github.com/JuliaOptics/About>\n&gt; Julia does not offer significant acceleration over the numpy code of prysm -- only about 20%\n&gt; writing performant julia is significantly more difficult than writing performant numpy. The base language emits unvectorized code which is slower than numpy, the @avx macro is unstable and often crashes the interpreter, the allocator is much slower than numpy or even...","ts":"1616424972.227800","author_id":"UDGT4PM41","author_subname":"Ari Katz","channel_id":"C67910KEH","channel_name":"general","is_msg_unfurl":true,"is_thread_root_unfurl":true,"text":"Mentioned in the hn thread is  <https://github.com/JuliaOptics/About|https://github.com/JuliaOptics/About>\n&gt; Julia does not offer significant acceleration over the numpy code of prysm -- only about 20%\n&gt; writing performant julia is significantly more difficult than writing performant numpy. The base language emits unvectorized code which is slower than numpy, the @avx macro is unstable and often crashes the interpreter, the allocator is much slower than numpy or even...","author_name":"Ari Katz","author_link":"https://julialang.slack.com/team/UDGT4PM41","author_icon":"https://secure.gravatar.com/avatar/a9e84ba6e7b9db667ae3371c11a07dfe.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-48.png","mrkdwn_in":["text"],"id":1,"original_url":"https://julialang.slack.com/archives/C67910KEH/p1616424972227800","footer":"Thread in #general"}],"blocks":[{"type":"rich_text","block_id":"dKn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh, I didn't see "},{"type":"link","url":"https://julialang.slack.com/archives/C67910KEH/p1616424972227800"}]}]}],"thread_ts":"1616432092.068900","parent_user_id":"USU9FRPEU"},{"client_msg_id":"779b09da-ba29-4e67-a2bf-60e3e53aafbe","type":"message","text":"FWIW an alternative algorithmic approach to many of those Orthogonal Polynomials they have to calculate them is to use generated functions to create the polynomials at compile time (because they don't change once you set certain parameters) and then have it pay off in the long run. That's assuming that you don't have to compile oodles of different generated functions, but the ApproxFun.jl people will likely be able to comment better.","user":"U6QGE7S86","ts":"1616432477.070700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xdT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"FWIW an alternative algorithmic approach to many of those Orthogonal Polynomials they have to calculate them is to use generated functions to create the polynomials at compile time (because they don't change once you set certain parameters) and then have it pay off in the long run. That's assuming that you don't have to compile oodles of different generated functions, but the ApproxFun.jl people will likely be able to comment better."}]}]}],"thread_ts":"1616432092.068900","parent_user_id":"USU9FRPEU","reactions":[{"name":"+1","users":["UGU761DU2","UKG4WF8PJ","U6795JH6H"],"count":3}]},{"client_msg_id":"a4225b78-ed58-47fd-86c5-24ca9047f6e4","type":"message","text":"If those functions are the bottleneck, having an optimized polynomial evaluation that is straight Fused Multiply Adds can be about 200x faster than having to do the recurrence division and all that, because your evaluation time is O(n), where n = order of the polynomial, and every line is an FMA.","user":"U6QGE7S86","ts":"1616432808.071200","team":"T68168MUP","edited":{"user":"U6QGE7S86","ts":"1616432858.000000"},"blocks":[{"type":"rich_text","block_id":"r4n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If those functions are the bottleneck, having an optimized polynomial evaluation that is straight Fused Multiply Adds can be about 200x faster than having to do the recurrence division and all that, because your evaluation time is O(n), where n = order of the polynomial, and every line is an FMA."}]}]}],"thread_ts":"1616432092.068900","parent_user_id":"USU9FRPEU"},{"client_msg_id":"d5924801-62b8-49ef-bec4-9343a00dfb0e","type":"message","text":"I can hardly wait to see what the result of this artless nerdswipe is - I’m expecting to see something much more than 20% faster than Python / Numpy before too long :slightly_smiling_face:","user":"UB7JS9CHF","ts":"1616462048.086200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TQHj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I can hardly wait to see what the result of this artless nerdswipe is - I’m expecting to see something much more than 20% faster than Python / Numpy before too long "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1616432092.068900","parent_user_id":"USU9FRPEU"},{"client_msg_id":"a5e89bf4-6268-45bf-a1f8-9e35f384b9b6","type":"message","text":"This person apparently spent a week on the Julia code, this past October, got 20% faster than his “prysm” project that had been worked on for at least 3 years, with almost 1200 commits, and yet complained that Julia was not good / fast enough.\nNote: here is an example of how great his Julia code was:\n```function kronecker(i,j)\n    return i==j ? 1 : 0\nend```","user":"UB7JS9CHF","ts":"1616463702.086400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gT/VX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This person apparently spent a week on the Julia code, this past October, got 20% faster than his “prysm” project that had been worked on for at least 3 years, with almost 1200 commits, and yet complained that Julia was not good / fast enough.\nNote: here is an example of how great his Julia code was:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function kronecker(i,j)\n    return i==j ? 1 : 0\nend"}]}]}],"thread_ts":"1616432092.068900","parent_user_id":"USU9FRPEU","reactions":[{"name":"point_up","users":["UCTJ1TGBV","U7WB5HSBH","UAUPJLBQX"],"count":3},{"name":"shrug","users":["U6740K1SP"],"count":1},{"name":"we-dont-do-that-here","users":["U6740K1SP"],"count":1}]},{"client_msg_id":"ef27a9db-7ec0-41d8-a12a-0c45ded45f92","type":"message","text":"I'm not happy to see `@avx` mentioned as a reason someone quit Julia. But, it shouldn't be less safe than `@inbounds` in terms of crashing Julia. Lots of issues on the repo, but I don't recall any about it causing a segfault.","user":"UAUPJLBQX","ts":"1616486716.087200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jxR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not happy to see "},{"type":"text","text":"@avx","style":{"code":true}},{"type":"text","text":" mentioned as a reason someone quit Julia. But, it shouldn't be less safe than "},{"type":"text","text":"@inbounds","style":{"code":true}},{"type":"text","text":" in terms of crashing Julia. Lots of issues on the repo, but I don't recall any about it causing a segfault."}]}]}],"thread_ts":"1616432092.068900","parent_user_id":"USU9FRPEU"},{"client_msg_id":"a77f4d17-fd01-4e05-b332-5f381bfb0108","type":"message","text":"But it sounds like they had a lot of things they should worry about first, like `kronecker`, or those polynomial optimizations mentioned by miguel.","user":"UAUPJLBQX","ts":"1616486810.087400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8oOi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But it sounds like they had a lot of things they should worry about first, like "},{"type":"text","text":"kronecker","style":{"code":true}},{"type":"text","text":", or those polynomial optimizations mentioned by miguel."}]}]}],"thread_ts":"1616432092.068900","parent_user_id":"USU9FRPEU"},{"client_msg_id":"2ef3d611-ba81-48f4-96d1-94d7636f9724","type":"message","text":"He spent a lot of that week moaning on here about julia iirc","user":"UC7FP1MQV","ts":"1616493029.087800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rVAlP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"He spent a lot of that week moaning on here about julia iirc"}]}]}],"thread_ts":"1616432092.068900","parent_user_id":"USU9FRPEU"},{"client_msg_id":"D07F3107-4B1D-474A-A9C1-A6F2AEBC1E09","type":"message","text":"My guess: he had hit a wall with the performance of his Python/Numpy code, didn’t want to deal with the typical Python approach of rewriting portions in C++, thought he could just translate it to Julia (without taking the time learn Julia that well), instead of rewriting it idiomatically, got frustrated, and decided to blame Julia for his own shortcomings.","user":"UB7JS9CHF","ts":"1616495252.093300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1d59b","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My guess: he had hit a wall with the performance of his Python/Numpy code, didn’t want to deal with the typical Python approach of rewriting portions in C++, thought he could just translate it to Julia (without taking the time learn Julia that well), instead of rewriting it idiomatically, got frustrated, and decided to blame Julia for his own shortcomings."}]}]}],"thread_ts":"1616432092.068900","parent_user_id":"USU9FRPEU","reactions":[{"name":"look_of_disapproval","users":["U6740K1SP"],"count":1}]},{"client_msg_id":"ea4f5721-caf0-48b4-a6c0-5dcdc375af7b","type":"message","text":"Hey gang, this thread is starting to have a tone that I don't think is a good influence on how this community should behave with disgruntled users.\n\nIf we have time to backseat drive their code, we sure have time to make a PR to their repo with tests and speed improvements.\n\nThe person is also known to hangout in this chat and it would not be kind to run into people just digging up your code and complaining about it's quality, whether we think it's justified or not.","user":"U6QGE7S86","ts":"1616509287.094000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"54g","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hey gang, this thread is starting to have a tone that I don't think is a good influence on how this community should behave with disgruntled users.\n\nIf we have time to backseat drive their code, we sure have time to make a PR to their repo with tests and speed improvements.\n\nThe person is also known to hangout in this chat and it would not be kind to run into people just digging up your code and complaining about it's quality, whether we think it's justified or not."}]}]}],"thread_ts":"1616432092.068900","parent_user_id":"USU9FRPEU","reactions":[{"name":"thumbsup_all","users":["U6740K1SP"],"count":1}]},{"client_msg_id":"A509A54A-FF17-4987-8AD5-C94F63C80BCD","type":"message","text":"I do feel that they took a very aggressive stance, with what they put for the About section of the JuliaOptics organization.\n\nIf they weren’t interested in pursuing writing code in Julia for optics, they could have transferred the GitHub org over to people who were.\n(And as we have seen, it’s an area even some at Microsoft are interested in)\n\n","user":"UB7JS9CHF","ts":"1616511278.103000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7oCE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I do feel that they took a very aggressive stance, with what they put for the About section of the JuliaOptics organization.\n"},{"type":"text","text":"\nIf they weren’t interested in pursuing writing code in Julia for optics, they could have transferred the GitHub org over to people who were.\n(And as we have seen, it’s an area even some at Microsoft are interested in)\n\n"}]}]}],"thread_ts":"1616432092.068900","parent_user_id":"USU9FRPEU"},{"client_msg_id":"affad2ad-9d54-4483-ace5-f956e0286982","type":"message","text":"that’s still a potential opportunity if they don’t get further ostracized and critiqued","user":"U6740K1SP","ts":"1616511383.103200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IiXb2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that’s still a potential opportunity if they don’t get further ostracized and critiqued"}]}]}],"thread_ts":"1616432092.068900","parent_user_id":"USU9FRPEU","reactions":[{"name":"100","users":["U6QGE7S86"],"count":1}]},{"client_msg_id":"e5606e24-d996-4443-a3e4-3bb8d31e8dee","type":"message","text":"this is precisely why I closed that discourse thread so quickly.  Without further input, we can only speculate and that often leads down dark paths like these.","user":"U6740K1SP","ts":"1616511455.103400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"19cL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this is precisely why I closed that discourse thread so quickly.  Without further input, we can only speculate and that often leads down dark paths like these."}]}]}],"thread_ts":"1616432092.068900","parent_user_id":"USU9FRPEU"},{"client_msg_id":"1d8a426d-ff6a-4220-91f3-2a6649421e3e","type":"message","text":"aspersions about shortcomings really aren’t cool","user":"U6740K1SP","ts":"1616511564.103600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Fvq3q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"aspersions about shortcomings really aren’t cool"}]}]}],"thread_ts":"1616432092.068900","parent_user_id":"USU9FRPEU"},{"client_msg_id":"3d2b312e-65a7-4f5c-954b-38a7d727d55e","type":"message","text":"As with many of these bag-o-gripes posts, I _really_ wish folks would come to us sooner with issues instead of just snowballing them","user":"U6740K1SP","ts":"1616512026.103800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"STRS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"As with many of these bag-o-gripes posts, I "},{"type":"text","text":"really","style":{"italic":true}},{"type":"text","text":" wish folks would come to us sooner with issues instead of just snowballing them"}]}]}],"thread_ts":"1616432092.068900","parent_user_id":"USU9FRPEU"},{"client_msg_id":"f6f7a947-50e2-4333-9875-8815832e99ec","type":"message","text":"Further, `kronecker` ain’t an issue at all — if that’s the language that’s familiar and convenient, why not? It generates exactly the same code as `Int(x==y)` , will inline, and won’t stymie simd.","user":"U6740K1SP","ts":"1616512433.104200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DNR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Further, "},{"type":"text","text":"kronecker","style":{"code":true}},{"type":"text","text":" ain’t an issue at all — if that’s the language that’s familiar and convenient, why not? It generates exactly the same code as "},{"type":"text","text":"Int(x==y)","style":{"code":true}},{"type":"text","text":" , will inline, and won’t stymie simd."}]}]}],"thread_ts":"1616432092.068900","parent_user_id":"USU9FRPEU"}]