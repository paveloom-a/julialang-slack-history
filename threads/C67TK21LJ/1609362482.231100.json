[{"client_msg_id":"83FD14DF-A9E5-42E6-912F-54B11DA29B25","type":"message","text":"Is this an actual problem for you in practice? Like, is the loop a performance hotspot? ","user":"U8D9768Q6","ts":"1609362482.231100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Kb1nG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is this an actual problem for you in practice? Like, is the loop a performance hotspot? "}]}]}],"thread_ts":"1609362482.231100","reply_count":66,"reply_users_count":6,"latest_reply":"1609534467.253700","reply_users":["U01FAHWCMFF","U8D9768Q6","UD0NS8PDF","U0179G7FG4F","UH24GRBLL","UAUPJLBQX"],"subscribed":false},{"client_msg_id":"a06f51bf-98af-4d01-914c-0e2969d73393","type":"message","text":"Yes","user":"U01FAHWCMFF","ts":"1609362516.231600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ehf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"9ba74bfa-26ab-46df-9a90-e3a243db0db8","type":"message","text":"3 nested for loops is vastly superior to 2 forloops + map for the final loop","user":"U01FAHWCMFF","ts":"1609362568.231800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tgY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"3 nested for loops is vastly superior to 2 forloops + map for the final loop"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"902bb810-8810-4e83-9dac-36b8799c32c2","type":"message","text":"For that, you may want to use Transducers.jl if you like maps and reductions. It's quite clever about optimizing nested maps and reductions and such.","user":"U8D9768Q6","ts":"1609362647.232000","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1609362741.000000"},"blocks":[{"type":"rich_text","block_id":"COh7y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For that, you may want to use Transducers.jl if you like maps and reductions. It's quite clever about optimizing nested maps and reductions and such."}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6","reactions":[{"name":"point_up","users":["UGU761DU2"],"count":1}]},{"client_msg_id":"8b27a99d-a9f8-4a59-800d-4a5873ff2e0e","type":"message","text":"tried it, still not faster. This library doesn't seem suitable for my usecase (mapping 2 arrays to a function; map(f, arr1, arr2))","user":"U01FAHWCMFF","ts":"1609364594.232700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NPcM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"tried it, still not faster. This library doesn't seem suitable for my usecase (mapping 2 arrays to a function; map(f, arr1, arr2))"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6","reactions":[{"name":"man-shrugging","users":["U8D9768Q6"],"count":1}]},{"client_msg_id":"555F4E1F-E9CF-40BA-8DF4-B4C71F6F8B55","type":"message","text":"Hard to help without any more information or an mwe","user":"U8D9768Q6","ts":"1609365865.233500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=3ld","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hard to help without any more information or an mwe"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"0F4E50D1-D904-4C44-88AE-E62DA9F4FCA9","type":"message","text":"But I recognize this is <#C67TK21LJ|gripes>, not <#C6A044SQH|helpdesk> so carry on I guess :stuck_out_tongue:","user":"U8D9768Q6","ts":"1609365896.234500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C6Ta","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But I recognize this is "},{"type":"channel","channel_id":"C67TK21LJ"},{"type":"text","text":", not "},{"type":"channel","channel_id":"C6A044SQH"},{"type":"text","text":" so carry on I guess "},{"type":"emoji","name":"stuck_out_tongue"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"c2afb46e-e4c0-4f5a-8e03-e2654a549d05","type":"message","text":"If anyone manages to get rid of the last forloop with mapping, without using `MappedArrays.jl`  or any library that doesn't come shipped with Julia (e.g. Statistics.jl is allowed, GLM.jl isnt), *with the same performance*, I will give you a $10 starbucks gift card. First person to do so wins. Have fun all :slightly_smiling_face:\n```function pairwise_analysis2(x::Array{Int16, 2})\n    m, n = size(x)\n    mean_matrix = Matrix{Float64}(undef, (n, n))\n    @views @inbounds for i = 1:n\n        for j = 1:n\n            total::Int16 = 0\n            for k = 1:m\n                total += x[k, i] == x[k, j]\n            end\n            mean_matrix[i, j] = total / m\n        end\n    end\n    return mean_matrix\nend\n\nX = Array{Int16}(rand(0:1, (1000, 1000)));\n@btime pairwise_analysis(X)```","user":"U01FAHWCMFF","ts":"1609366179.234900","team":"T68168MUP","edited":{"user":"U01FAHWCMFF","ts":"1609366493.000000"},"blocks":[{"type":"rich_text","block_id":"yRSjf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If anyone manages to get rid of the last forloop with mapping, without using "},{"type":"text","text":"MappedArrays.jl","style":{"code":true}},{"type":"text","text":"  or any library that doesn't come shipped with Julia (e.g. Statistics.jl is allowed, GLM.jl isnt),"},{"type":"text","text":" with the same performance","style":{"bold":true}},{"type":"text","text":", I will give you a $10 starbucks gift card. First person to do so wins. Have fun all "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function pairwise_analysis2(x::Array{Int16, 2})\n    m, n = size(x)\n    mean_matrix = Matrix{Float64}(undef, (n, n))\n    @views @inbounds for i = 1:n\n        for j = 1:n\n            total::Int16 = 0\n            for k = 1:m\n                total += x[k, i] == x[k, j]\n            end\n            mean_matrix[i, j] = total / m\n        end\n    end\n    return mean_matrix\nend\n\nX = Array{Int16}(rand(0:1, (1000, 1000)));\n@btime pairwise_analysis(X)"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"51fb690d-1925-468e-b355-e93487c9d46c","type":"message","text":"I can make it 3x quicker, but it may fbe disqualified…","user":"UD0NS8PDF","ts":"1609367599.235600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LXv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I can make it 3x quicker, but it may fbe disqualified…"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"bfdfc71e-10a0-4a1b-8ecd-350a5f738864","type":"message","text":"Honestly might as well post it because if no one beats this challange im just gonna give it to the fastest implementation regardless of methodology.\n\nId also love to learn more tricks from more experienced Julia users so its still worth sharing :grinning:\n\nJust make sure its not a gpu implementation cause i dont have one currently to replicate on my machine","user":"U01FAHWCMFF","ts":"1609367841.235800","team":"T68168MUP","edited":{"user":"U01FAHWCMFF","ts":"1609368000.000000"},"blocks":[{"type":"rich_text","block_id":"mFbs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Honestly might as well post it because if no one beats this challange im just gonna give it to the fastest implementation regardless of methodology.\n\nId also love to learn more tricks from more experienced Julia users so its still worth sharing "},{"type":"emoji","name":"grinning"},{"type":"text","text":"\n\nJust make sure its not a gpu implementation cause i dont have one currently to replicate on my machine"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"e4f104d2-aa5f-4b5c-90fd-4abab09e5373","type":"message","text":"`total = @inbounds @views mapreduce(==, +, x[:,i], x[:,j])` would work if we had a better mapreduce function","user":"U0179G7FG4F","ts":"1609368059.236200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"daq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"total = @inbounds @views mapreduce(==, +, x[:,i], x[:,j])","style":{"code":true}},{"type":"text","text":" would work if we had a better mapreduce function"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"6a2a876e-38cf-4e48-a98a-b0a371ab6077","type":"message","text":"unfortunately it currently takes 2.1 seconds and allocates 8 million times","user":"U0179G7FG4F","ts":"1609368093.236400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Gv9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"unfortunately it currently takes 2.1 seconds and allocates 8 million times"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"43829b5b-1e6e-4e09-951f-bb1aec6428ce","type":"message","text":"Thats true Oscar, i actually made a thread 1 month ago when i was confused as to why mapreduce sucks.\n\nYou made an issue on github relating to mapreduce, do you know what came of that issue?","user":"U01FAHWCMFF","ts":"1609368143.236600","team":"T68168MUP","edited":{"user":"U01FAHWCMFF","ts":"1609368165.000000"},"blocks":[{"type":"rich_text","block_id":"Rdb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thats true Oscar, i actually made a thread 1 month ago when i was confused as to why mapreduce sucks.\n\nYou made an issue on github relating to mapreduce, do you know what came of that issue?"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"2fd9d81c-0385-4784-b641-58b0a37bd960","type":"message","text":"multi-arg mapreduce has a really simple (placeholder?) implementation, it’s just map then reduce","user":"UD0NS8PDF","ts":"1609368173.236900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6Ia","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"multi-arg mapreduce has a really simple (placeholder?) implementation, it’s just map then reduce"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"3b0b8c1d-a3d1-40be-98a8-0fcdc570784e","type":"message","text":"My faster way is:\n```x1k = Array{Int16}(rand(0:1, (1000, 1000)));\n\n@btime pairwise_analysis($x1k);  #  66.533 ms (2 allocations: 7.63 MiB)\n\nusing LoopVectorization, Tullio\n\nfunction pairwise_tullio(x::Matrix)\n    @tullio out[i, j] := x[k, i] == x[k, j]  init=zero(eltype(x))\n    out ./ size(x,1)\nend\n\npairwise_tullio(x1k) ≈ pairwise_analysis(x1k) \n\n@btime pairwise_tullio($x1k); # 22.564 ms (54 allocations: 9.54 MiB)```","user":"UD0NS8PDF","ts":"1609368199.237100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"axua1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My faster way is:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"x1k = Array{Int16}(rand(0:1, (1000, 1000)));\n\n@btime pairwise_analysis($x1k);  #  66.533 ms (2 allocations: 7.63 MiB)\n\nusing LoopVectorization, Tullio\n\nfunction pairwise_tullio(x::Matrix)\n    @tullio out[i, j] := x[k, i] == x[k, j]  init=zero(eltype(x))\n    out ./ size(x,1)\nend\n\npairwise_tullio(x1k) ≈ pairwise_analysis(x1k) \n\n@btime pairwise_tullio($x1k); # 22.564 ms (54 allocations: 9.54 MiB)"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6","reactions":[{"name":"+1","users":["U01FAHWCMFF","U8D9768Q6","UAUPJLBQX","U6C5KSWAC"],"count":4}]},{"client_msg_id":"c9fa5854-89cb-4c10-921d-fd68d318f50c","type":"message","text":"How is a function with more allocations faster than the vanilla method? Are you forcing SIMD or something? Are those operations more efficient? Not too familiar with those libraries you used.\n\nI never thought the vanilla implementation could be beat so thats pretty cool to find that out, thank you :grinning:","user":"U01FAHWCMFF","ts":"1609368341.237300","team":"T68168MUP","edited":{"user":"U01FAHWCMFF","ts":"1609368407.000000"},"blocks":[{"type":"rich_text","block_id":"vso","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How is a function with more allocations faster than the vanilla method? Are you forcing SIMD or something? Are those operations more efficient? Not too familiar with those libraries you used.\n\nI never thought the vanilla implementation could be beat so thats pretty cool to find that out, thank you "},{"type":"emoji","name":"grinning"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"01d8ccd5-8163-49f7-939c-1ea4842c4530","type":"message","text":"the basic answer as to what happened with it was a bit of discussion, but no great solution. Looking at it again, I think I can make a PR that will help a lot. It will get rid of the allocations, but still be slower than it should be.","user":"U0179G7FG4F","ts":"1609368510.237600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yqd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the basic answer as to what happened with it was a bit of discussion, but no great solution. Looking at it again, I think I can make a PR that will help a lot. It will get rid of the allocations, but still be slower than it should be."}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"bbb231e1-a006-4ea5-8acb-92abe9faf256","type":"message","text":"Ah now I found the issue, and I remember that I did see this. Agree that even if `zip` isn’t quite optimal, it’s a step forward.","user":"UD0NS8PDF","ts":"1609368655.237900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"10+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah now I found the issue, and I remember that I did see this. Agree that even if "},{"type":"text","text":"zip","style":{"code":true}},{"type":"text","text":" isn’t quite optimal, it’s a step forward."}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"5375664d-fd77-4184-8a12-74eec6e8b265","type":"message","text":"I'm working on the PR with zip now","user":"U0179G7FG4F","ts":"1609368680.238100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FvqM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm working on the PR with zip now"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6","reactions":[{"name":"sonic","users":["UD0NS8PDF"],"count":1}]},{"client_msg_id":"176602cb-ed22-4709-9b6b-dc22ad84f5e9","type":"message","text":"ideally we could get a really good version, but that will have to wait for a better idea and more time","user":"U0179G7FG4F","ts":"1609368701.238400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s/P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ideally we could get a really good version, but that will have to wait for a better idea and more time"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"c7c90366-535f-419e-b6ad-a338b769acb0","type":"message","text":"Did you benchmark zip? How does it compare with map reduce?","user":"U01FAHWCMFF","ts":"1609368719.238600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZoMs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Did you benchmark zip? How does it compare with map reduce?"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"a345afec-0c54-4606-9f44-eee388460fef","type":"message","text":"In terms of speed and allocations","user":"U01FAHWCMFF","ts":"1609368727.238800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O2WD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In terms of speed and allocations"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"6df1cfe6-19a2-4abd-85ce-bb2c2021b2d0","type":"message","text":".5 seconds and only 2 allocations (7 MiB)","user":"U0179G7FG4F","ts":"1609368740.239000","team":"T68168MUP","edited":{"user":"U0179G7FG4F","ts":"1609368765.000000"},"blocks":[{"type":"rich_text","block_id":"QatQ7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":".5 seconds and only 2 allocations (7 MiB)"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"1d4f23fa-5448-4227-8609-4bbbe361cf08","type":"message","text":"so 4x better than our current approach, but 10x worse than a loop","user":"U0179G7FG4F","ts":"1609368787.239400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pg1J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so 4x better than our current approach, but 10x worse than a loop"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"4b5bb288-20c1-48fb-a613-e5087c4148d0","type":"message","text":"Re mine, generically LoopVec. is very smart at making SIMD work, and Tullio adds multi-threading and tiled memory access (and compact syntax, and type inference which fails here :disappointed: hence the `init=`). I think this is actually far from optimal here, if I turn off threading it takes twice as long, turn off tiling too and it’s back to the same time… so perhaps you can get another factor of 2?","user":"UD0NS8PDF","ts":"1609368859.239600","team":"T68168MUP","edited":{"user":"UD0NS8PDF","ts":"1609368927.000000"},"blocks":[{"type":"rich_text","block_id":"7XH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Re mine, generically LoopVec. is very smart at making SIMD work, and Tullio adds multi-threading and tiled memory access (and compact syntax, and type inference which fails here "},{"type":"emoji","name":"disappointed"},{"type":"text","text":" hence the "},{"type":"text","text":"init=","style":{"code":true}},{"type":"text","text":"). I think this is actually far from optimal here, if I turn off threading it takes twice as long, turn off tiling too and it’s back to the same time… so perhaps you can get another factor of 2?"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6","reactions":[{"name":"+1","users":["U8D9768Q6"],"count":1}]},{"client_msg_id":"15c2b2d1-9a83-460e-bf87-0ce607365498","type":"message","text":"(Some of the allocations are threading overhead)","user":"UD0NS8PDF","ts":"1609369066.240000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Wh/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(Some of the allocations are threading overhead)"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"5f577a50-09ff-4ed6-91a7-7aed843e9ac8","type":"message","text":"Wait so your implementation was not on a single thread?","user":"U01FAHWCMFF","ts":"1609369079.240200","team":"T68168MUP","edited":{"user":"U01FAHWCMFF","ts":"1609369090.000000"},"blocks":[{"type":"rich_text","block_id":"jC+DZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Wait so your implementation was not on a single thread?"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"34249e3d-4328-4ee5-9db7-ac96a1e22060","type":"message","text":"Because multitheading my triple forloop method gets me 20ms (4 core 8 threads)","user":"U01FAHWCMFF","ts":"1609369135.240500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"In3Y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Because multitheading my triple forloop method gets me 20ms (4 core 8 threads)"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"45fdf44e-52e9-42d8-88d7-3cc3ca0fa46b","type":"message","text":"PR created! <https://github.com/JuliaLang/julia/pull/39053>","user":"U0179G7FG4F","ts":"1609369237.240700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZGg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"PR created! "},{"type":"link","url":"https://github.com/JuliaLang/julia/pull/39053"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6","reactions":[{"name":"+1","users":["U01FAHWCMFF","UD0NS8PDF"],"count":2}]},{"client_msg_id":"ea7d692a-e5d5-4c64-af56-17122e6b024f","type":"message","text":"Thanks for acitvely contributing","user":"U01FAHWCMFF","ts":"1609369278.241000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=d+7k","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks for acitvely contributing"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"a20535bb-ead1-497f-96dc-6d1cfebb4467","type":"message","text":"Yes, mine multi-threads, timed on a 2-core laptop. 24 ms single threaded `threads=false`, or 11ms with two threads with larger tile size:\n```Tullio.TILE[] = 2048; \n@btime pairwise_cast($x1k) # 11.593 ms (54 allocations: 9.54 MiB) ```","user":"UD0NS8PDF","ts":"1609369286.241200","team":"T68168MUP","edited":{"user":"UD0NS8PDF","ts":"1609369586.000000"},"blocks":[{"type":"rich_text","block_id":"50mu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, mine multi-threads, timed on a 2-core laptop. 24 ms single threaded "},{"type":"text","text":"threads=false","style":{"code":true}},{"type":"text","text":", or 11ms with two threads with larger tile size:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Tullio.TILE[] = 2048; \n@btime pairwise_cast($x1k) # 11.593 ms (54 allocations: 9.54 MiB) "}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"5cc7bfcf-4cb4-41c9-b8de-c97573755d71","type":"message","text":"hopefully the PR will annoy someone into making this actually fast.","user":"U0179G7FG4F","ts":"1609369355.241400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eeg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hopefully the PR will annoy someone into making this actually fast."}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"33957458-d56e-419d-96a5-7a81897c0a43","type":"message","text":"Help says “Evaluates to the same as reduce(op, map(f, A); dims=dims, init=init), but is generally faster\n  because the intermediate array is avoided.” which is… aspirational? But `init=` kw. should be easy to pass in. `dims` not as easy…","user":"UD0NS8PDF","ts":"1609369622.241800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ffePv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Help says “Evaluates to the same as reduce(op, map(f, A); dims=dims, init=init), but is generally faster\n  because the intermediate array is avoided.” which is… aspirational? But "},{"type":"text","text":"init=","style":{"code":true}},{"type":"text","text":" kw. should be easy to pass in. "},{"type":"text","text":"dims","style":{"code":true}},{"type":"text","text":" not as easy…"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"da0d902f-fd10-4ba2-867b-ba5deda49fa7","type":"message","text":"If thats the case Michael then you managed to write code thats 4x faster than plain C, as this julia implementation runs just as fast as the C code i made originally.\nBut then again im not a C expert so im not sure if a tulio libary exists in C","user":"U01FAHWCMFF","ts":"1609369710.242000","team":"T68168MUP","edited":{"user":"U01FAHWCMFF","ts":"1609369828.000000"},"blocks":[{"type":"rich_text","block_id":"eAwR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If thats the case Michael then you managed to write code thats 4x faster than plain C, as this julia implementation runs just as fast as the C code i made originally.\nBut then again im not a C expert so im not sure if a tulio libary exists in C"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"073b7bb7-be89-464a-9c52-dfb42eadcb6d","type":"message","text":"different computer possibly","user":"U0179G7FG4F","ts":"1609369745.242200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VN3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"different computer possibly"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"fd935f44-26fb-4bac-a5fc-1bd796bef606","type":"message","text":"<@U01FAHWCMFF> the closest to a C library you get here is probably hand-writing your own assembly","user":"U0179G7FG4F","ts":"1609369960.242500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3dm","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01FAHWCMFF"},{"type":"text","text":" the closest to a C library you get here is probably hand-writing your own assembly"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"a9af2760-78f5-419f-b314-317f87b5c082","type":"message","text":"I think all the speed is coming from Chris’s LoopVectorization library here. He spends a lot of time looking at what assembly gets generated.","user":"UD0NS8PDF","ts":"1609370059.242700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hKM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think all the speed is coming from Chris’s LoopVectorization library here. He spends a lot of time looking at what assembly gets generated."}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6","reactions":[{"name":"+1","users":["U0179G7FG4F"],"count":1}]},{"client_msg_id":"332da011-d8e3-4331-971b-d844d513c10e","type":"message","text":"And thats where i draw my personal line. Assembly is too hard for a biology major like me :joy:","user":"U01FAHWCMFF","ts":"1609370066.242900","team":"T68168MUP","edited":{"user":"U01FAHWCMFF","ts":"1609370076.000000"},"blocks":[{"type":"rich_text","block_id":"99Ru","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And thats where i draw my personal line. Assembly is too hard for a biology major like me "},{"type":"emoji","name":"joy"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"c91fcb59-6082-42c9-af53-f0d81fddfdbd","type":"message","text":"My library is trying to apply all the same tricks which work for matrix multiplication on top of that, which you would have to do in C too, the naiive 3 loops story is not so fast. But for this problem, it seems to be mostly tripping over its own shoes, I’m not sure why… I guess some defaults did not think about Int16 very much!","user":"UD0NS8PDF","ts":"1609370222.243300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g+8dr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My library is trying to apply all the same tricks which work for matrix multiplication on top of that, which you would have to do in C too, the naiive 3 loops story is not so fast. But for this problem, it seems to be mostly tripping over its own shoes, I’m not sure why… I guess some defaults did not think about Int16 very much!"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"2e72e4b4-7b91-408a-b968-e65c024d0a98","type":"message","text":"Im pretty sure you will get the same results with int64, no? I mean they will be slower across the board but  the relative improvments will be the same..?","user":"U01FAHWCMFF","ts":"1609370651.243700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0Mk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Im pretty sure you will get the same results with int64, no? I mean they will be slower across the board but  the relative improvments will be the same..?"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"879bf105-6987-49d8-8bd4-da5bc260b636","type":"message","text":"I think SIMD-ish things can vary a lot in weird ways, different instructions exist or don’t for various sizes &amp; machines. On mine:\n```x32 = Int32.(x1k);\n@btime pairwise_analysis($x32);  # 138.984 ms (2 allocations: 7.63 MiB)\n@btime pairwise_tullio($x32);    #  20.020 ms (54 allocations: 11.45 MiB) # 2 threads\n@btime pairwise_tullio_1($x32);  #  41.756 ms (4 allocations: 11.44 MiB)\n\nx64 = Int64.(x1k);\n@btime pairwise_analysis($x64);  # 347.466 ms (2 allocations: 7.63 MiB)\n@btime pairwise_tullio($x64);    #  34.644 ms (54 allocations: 15.26 MiB)\n@btime pairwise_tullio_1($x64);  #  75.350 ms (4 allocations: 15.26 MiB)```","user":"UD0NS8PDF","ts":"1609370994.243900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q+uh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think SIMD-ish things can vary a lot in weird ways, different instructions exist or don’t for various sizes & machines. On mine:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"x32 = Int32.(x1k);\n@btime pairwise_analysis($x32);  # 138.984 ms (2 allocations: 7.63 MiB)\n@btime pairwise_tullio($x32);    #  20.020 ms (54 allocations: 11.45 MiB) # 2 threads\n@btime pairwise_tullio_1($x32);  #  41.756 ms (4 allocations: 11.44 MiB)\n\nx64 = Int64.(x1k);\n@btime pairwise_analysis($x64);  # 347.466 ms (2 allocations: 7.63 MiB)\n@btime pairwise_tullio($x64);    #  34.644 ms (54 allocations: 15.26 MiB)\n@btime pairwise_tullio_1($x64);  #  75.350 ms (4 allocations: 15.26 MiB)"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"898ae2de-3f79-429f-8e22-c557f00dd2bd","type":"message","text":"yeah. You need AVX-512 for most 64 bit int operations vectorized","user":"U0179G7FG4F","ts":"1609371327.244200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XXG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah. You need AVX-512 for most 64 bit int operations vectorized"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"92722050-9fa5-48bf-9e58-4e6fffc8a759","type":"message","text":"I guess with 256, the naiive guess is 4x for Int64, and 16x for Int16. But in fact I see a larger ratio for 64bit.","user":"UD0NS8PDF","ts":"1609371758.244700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=sbmf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess with 256, the naiive guess is 4x for Int64, and 16x for Int16. But in fact I see a larger ratio for 64bit."}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"98c4b940-d707-40f3-9268-d4743ce5959f","type":"message","text":"There might be even more packed ways to do things, since this is binary data.","user":"UD0NS8PDF","ts":"1609371773.244900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nIDyE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There might be even more packed ways to do things, since this is binary data."}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6","reactions":[{"name":"raised_hands","users":["U01FAHWCMFF"],"count":1}]},{"client_msg_id":"a6d0c75a-90c1-4146-95e8-3cc865a8fb33","type":"message","text":"the mapreduce should work if you use the `dims` keyword to avoid the intermediary","user":"UH24GRBLL","ts":"1609402907.246200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c87j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the mapreduce should work if you use the "},{"type":"text","text":"dims","style":{"code":true}},{"type":"text","text":" keyword to avoid the intermediary"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"326f37ca-74a2-4e91-b8be-07d235528aac","type":"message","text":"in any case, there's a really simple transform that can already give you 2x speedup, without touching the inner loop at all","user":"UH24GRBLL","ts":"1609402935.246400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sZXWC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in any case, there's a really simple transform that can already give you 2x speedup, without touching the inner loop at all"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"0b26dd50-3d53-46ce-8556-4e7a44601d3f","type":"message","text":"```julia&gt; function pairwise_analysis2(x::Array{Int16, 2})\n           m, n = size(x)\n           mean_matrix = Matrix{Float64}(undef, (n, n))\n           @views @inbounds for i = 1:n\n               for j = 1:i\n                   total::UInt16 = 0\n                   for k = 1:m\n                       total += x[k, i] == x[k, j]\n                   end\n                   mean_matrix[i, j] = total / m\n                   mean_matrix[j, i] = total / m\n               end\n           end\n           return mean_matrix\n       end\npairwise_analysis2 (generic function with 1 method)\n\njulia&gt; @benchmark pairwise_analysis2($X)\nBenchmarkTools.Trial:\n  memory estimate:  7.63 MiB\n  allocs estimate:  2\n  --------------\n  minimum time:     36.592 ms (0.00% GC)\n  median time:      38.066 ms (0.00% GC)\n  mean time:        39.100 ms (2.48% GC)\n  maximum time:     98.055 ms (61.01% GC)\n  --------------\n  samples:          128\n  evals/sample:     1\n\njulia&gt; @benchmark ground_truth($X)\nBenchmarkTools.Trial:\n  memory estimate:  7.63 MiB\n  allocs estimate:  2\n  --------------\n  minimum time:     81.212 ms (0.00% GC)\n  median time:      84.106 ms (0.00% GC)\n  mean time:        87.290 ms (2.37% GC)\n  maximum time:     149.570 ms (40.08% GC)\n  --------------\n  samples:          58\n  evals/sample:     1\n\njulia&gt; all(ground_truth(X) .== pairwise_analysis2(X))\ntrue```","user":"UH24GRBLL","ts":"1609402969.246600","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1609403013.000000"},"blocks":[{"type":"rich_text","block_id":"Q53Pc","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function pairwise_analysis2(x::Array{Int16, 2})\n           m, n = size(x)\n           mean_matrix = Matrix{Float64}(undef, (n, n))\n           @views @inbounds for i = 1:n\n               for j = 1:i\n                   total::UInt16 = 0\n                   for k = 1:m\n                       total += x[k, i] == x[k, j]\n                   end\n                   mean_matrix[i, j] = total / m\n                   mean_matrix[j, i] = total / m\n               end\n           end\n           return mean_matrix\n       end\npairwise_analysis2 (generic function with 1 method)\n\njulia> @benchmark pairwise_analysis2($X)\nBenchmarkTools.Trial:\n  memory estimate:  7.63 MiB\n  allocs estimate:  2\n  --------------\n  minimum time:     36.592 ms (0.00% GC)\n  median time:      38.066 ms (0.00% GC)\n  mean time:        39.100 ms (2.48% GC)\n  maximum time:     98.055 ms (61.01% GC)\n  --------------\n  samples:          128\n  evals/sample:     1\n\njulia> @benchmark ground_truth($X)\nBenchmarkTools.Trial:\n  memory estimate:  7.63 MiB\n  allocs estimate:  2\n  --------------\n  minimum time:     81.212 ms (0.00% GC)\n  median time:      84.106 ms (0.00% GC)\n  mean time:        87.290 ms (2.37% GC)\n  maximum time:     149.570 ms (40.08% GC)\n  --------------\n  samples:          58\n  evals/sample:     1\n\njulia> all(ground_truth(X) .== pairwise_analysis2(X))\ntrue"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6","reactions":[{"name":"+1","users":["U01FAHWCMFF"],"count":1}]},{"client_msg_id":"c5a7caa6-b765-4461-8845-bca8f5287559","type":"message","text":"not sure the approach with `Generator` works well, that's 10x slower than even the ground truth on my machine","user":"UH24GRBLL","ts":"1609403754.246900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qFBox","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not sure the approach with "},{"type":"text","text":"Generator","style":{"code":true}},{"type":"text","text":" works well, that's 10x slower than even the ground truth on my machine"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"443e6c4b-2c2d-4ce1-a6cd-25fd577a355b","type":"message","text":"I think it has to do with `@inbounds` not being propagated into the generator, but even if I force that, I only get ~118ms","user":"UH24GRBLL","ts":"1609403967.247500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BtXC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think it has to do with "},{"type":"text","text":"@inbounds","style":{"code":true}},{"type":"text","text":" not being propagated into the generator, but even if I force that, I only get ~118ms"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"eeaae3e9-3f0c-444a-901e-df6b7860b645","type":"message","text":"and if you don't mind bringing in `LinearAlgebra`, you can save some GC time by only writing the upper right of the matrix and wrapping the result in `Symmetric`:\n\n```julia&gt; using LinearAlgebra: Symmetric\n\njulia&gt; function pairwise_analysis2(x::Array{Int16, 2})\n           m, n = size(x)\n           mean_matrix = Matrix{Float64}(undef, (n, n))\n           for i = 1:n\n               iv = view(x, :, i)\n               @inbounds for j = 1:i\n                   jv = view(x, :, j)\n                   total::UInt16 = 0\n\n                   for k = 1:m\n                       total += iv[k] == jv[k]\n                   end\n\n                   mean_matrix[j, i] = total / m\n               end\n           end\n           return Symmetric(mean_matrix)\n       end\npairwise_analysis2 (generic function with 1 method)\n\njulia&gt; @benchmark pairwise_analysis2($X)\nBenchmarkTools.Trial:\n  memory estimate:  7.63 MiB\n  allocs estimate:  2\n  --------------\n  minimum time:     34.872 ms (0.00% GC)\n  median time:      36.205 ms (0.00% GC)\n  mean time:        36.346 ms (0.34% GC)\n  maximum time:     42.382 ms (0.00% GC)\n  --------------\n  samples:          138\n  evals/sample:     1```","user":"UH24GRBLL","ts":"1609404508.247700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lVv0h","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and if you don't mind bringing in "},{"type":"text","text":"LinearAlgebra","style":{"code":true}},{"type":"text","text":", you can save some GC time by only writing the upper right of the matrix and wrapping the result in "},{"type":"text","text":"Symmetric","style":{"code":true}},{"type":"text","text":":\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using LinearAlgebra: Symmetric\n\njulia> function pairwise_analysis2(x::Array{Int16, 2})\n           m, n = size(x)\n           mean_matrix = Matrix{Float64}(undef, (n, n))\n           for i = 1:n\n               iv = view(x, :, i)\n               @inbounds for j = 1:i\n                   jv = view(x, :, j)\n                   total::UInt16 = 0\n\n                   for k = 1:m\n                       total += iv[k] == jv[k]\n                   end\n\n                   mean_matrix[j, i] = total / m\n               end\n           end\n           return Symmetric(mean_matrix)\n       end\npairwise_analysis2 (generic function with 1 method)\n\njulia> @benchmark pairwise_analysis2($X)\nBenchmarkTools.Trial:\n  memory estimate:  7.63 MiB\n  allocs estimate:  2\n  --------------\n  minimum time:     34.872 ms (0.00% GC)\n  median time:      36.205 ms (0.00% GC)\n  mean time:        36.346 ms (0.34% GC)\n  maximum time:     42.382 ms (0.00% GC)\n  --------------\n  samples:          138\n  evals/sample:     1"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6","reactions":[{"name":"+1","users":["U01FAHWCMFF"],"count":1}]},{"client_msg_id":"307ead8c-94e0-41b6-b95d-e599d9560374","type":"message","text":"I also switched to iteration order in `mean_matrix`, to improve caching behaviour there. Doesn't help too much, but it does help a little (2ms off minimum)","user":"UH24GRBLL","ts":"1609404612.247900","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1609404622.000000"},"blocks":[{"type":"rich_text","block_id":"YKCy8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I also switched to iteration order in "},{"type":"text","text":"mean_matrix","style":{"code":true}},{"type":"text","text":", to improve caching behaviour there. Doesn't help too much, but it does help a little (2ms off minimum)"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"bf8675a5-bb37-45a7-98ed-58698901d833","type":"message","text":"Wow Valentin, it never crossed my mind to only compute the upper right triangle on this symmetric matrix. Thank you for this great trick.","user":"U01FAHWCMFF","ts":"1609427554.248400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uA+uW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Wow Valentin, it never crossed my mind to only compute the upper right triangle on this symmetric matrix. Thank you for this great trick."}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"4e0830e9-8928-4df2-8a8a-ea4011b45f43","type":"message","text":"On my desktop:\n```julia&gt; x1k = Array{Int16}(rand(0:1, (1000, 1000)));\n\njulia&gt; pairwise_tullio(x1k) ≈ pairwise_analysis(x1k)\ntrue\n\njulia&gt; @btime pairwise_analysis($x1k);\n  104.340 ms (2 allocations: 7.63 MiB)\n\njulia&gt; @btime pairwise_tullio($x1k);\n  2.247 ms (534 allocations: 9.56 MiB)\n\njulia&gt; x32 = Int32.(x1k);\n\njulia&gt; @btime pairwise_analysis($x32);\n  169.300 ms (2 allocations: 7.63 MiB)\n\njulia&gt; @btime pairwise_tullio($x32);\n  3.434 ms (534 allocations: 11.47 MiB)\n\njulia&gt; x64 = Int64.(x1k);\n\njulia&gt; @btime pairwise_analysis($x64);\n  330.165 ms (2 allocations: 7.63 MiB)\n\njulia&gt; @btime pairwise_tullio($x64);\n  5.594 ms (535 allocations: 15.28 MiB)```\nNote that the `pairwise_tullio` also has a division that takes up a significant fraction of the runtime, and doesn't change much in performance as we change from `Int16` to `Int64`:\n```julia&gt; @btime $x1k ./ size($x1k,1);\n  889.438 μs (2 allocations: 7.63 MiB)\n\njulia&gt; @btime $x32 ./ size($x1k,1);\n  882.954 μs (2 allocations: 7.63 MiB)\n\njulia&gt; @btime $x64 ./ size($x1k,1);\n  912.925 μs (2 allocations: 7.63 MiB) ```\nTaking this into account, I'm not too far off (on a computer with AVX512) from the 2x performance boost of smaller element types:\n```julia&gt; (3.434 - 0.882954) / (2.247 - 0.889438)\n1.8791377484048615\n\njulia&gt; (5.594 - 0.912925) / (3.434 - 0.882954)\n1.8349629916512675```","user":"UAUPJLBQX","ts":"1609496055.249100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"l1L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"On my desktop:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> x1k = Array{Int16}(rand(0:1, (1000, 1000)));\n\njulia> pairwise_tullio(x1k) ≈ pairwise_analysis(x1k)\ntrue\n\njulia> @btime pairwise_analysis($x1k);\n  104.340 ms (2 allocations: 7.63 MiB)\n\njulia> @btime pairwise_tullio($x1k);\n  2.247 ms (534 allocations: 9.56 MiB)\n\njulia> x32 = Int32.(x1k);\n\njulia> @btime pairwise_analysis($x32);\n  169.300 ms (2 allocations: 7.63 MiB)\n\njulia> @btime pairwise_tullio($x32);\n  3.434 ms (534 allocations: 11.47 MiB)\n\njulia> x64 = Int64.(x1k);\n\njulia> @btime pairwise_analysis($x64);\n  330.165 ms (2 allocations: 7.63 MiB)\n\njulia> @btime pairwise_tullio($x64);\n  5.594 ms (535 allocations: 15.28 MiB)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Note that the "},{"type":"text","text":"pairwise_tullio","style":{"code":true}},{"type":"text","text":" also has a division that takes up a significant fraction of the runtime, and doesn't change much in performance as we change from "},{"type":"text","text":"Int16","style":{"code":true}},{"type":"text","text":" to "},{"type":"text","text":"Int64","style":{"code":true}},{"type":"text","text":":\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @btime $x1k ./ size($x1k,1);\n  889.438 μs (2 allocations: 7.63 MiB)\n\njulia> @btime $x32 ./ size($x1k,1);\n  882.954 μs (2 allocations: 7.63 MiB)\n\njulia> @btime $x64 ./ size($x1k,1);\n  912.925 μs (2 allocations: 7.63 MiB) "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Taking this into account, I'm not too far off (on a computer with AVX512) from the 2x performance boost of smaller element types:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> (3.434 - 0.882954) / (2.247 - 0.889438)\n1.8791377484048615\n\njulia> (5.594 - 0.912925) / (3.434 - 0.882954)\n1.8349629916512675"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"ae7994df-cc66-4607-88f2-bb8a2e4e7dd0","type":"message","text":"Perhaps I should create an issue myself for the fact that LoopVectorization is currently pretty naive about picking the vector width.","user":"UAUPJLBQX","ts":"1609496161.249300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vcFf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Perhaps I should create an issue myself for the fact that LoopVectorization is currently pretty naive about picking the vector width."}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"3cdbfee2-4e7e-4ea9-b636-9d898b427af1","type":"message","text":"It doesn't consider that maybe some of the numbers don't need to be SIMD-ed.","user":"UAUPJLBQX","ts":"1609496196.249500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mTo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It doesn't consider that maybe some of the numbers don't need to be SIMD-ed."}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"e094689c-70a5-44f4-a4b9-2feeee0c3ff8","type":"message","text":"Because the reduction loop involves loading from `x[k,j]` and `x[[k,i]` , it'll pick `k` as the loop to SIMD.","user":"UAUPJLBQX","ts":"1609496272.249700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+DlBW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Because the reduction loop involves loading from "},{"type":"text","text":"x[k,j]","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"x[[k,i]","style":{"code":true}},{"type":"text","text":" , it'll pick "},{"type":"text","text":"k","style":{"code":true}},{"type":"text","text":" as the loop to SIMD."}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"b159ad76-1438-40ba-9785-3f2ffede45c9","type":"message","text":"and also make `k` the inner loop. Thus, to store into `mean_matrix[i,j]`, it has to reduce the vectors anyway.","user":"UAUPJLBQX","ts":"1609496319.249900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Zkqmh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and also make "},{"type":"text","text":"k","style":{"code":true}},{"type":"text","text":" the inner loop. Thus, to store into "},{"type":"text","text":"mean_matrix[i,j]","style":{"code":true}},{"type":"text","text":", it has to reduce the vectors anyway."}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"412b3d06-f7f9-419a-bd9c-08c9e2db3f64","type":"message","text":"Basically, as is, because `mean_matrix` is a `Float64` array, it'll do the reduction with `Float64`s. It should instead realize it doesn't have to, and that it could instead use `Int16` and larger vectors.","user":"UAUPJLBQX","ts":"1609496447.250100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"94ZXJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Basically, as is, because "},{"type":"text","text":"mean_matrix","style":{"code":true}},{"type":"text","text":" is a "},{"type":"text","text":"Float64","style":{"code":true}},{"type":"text","text":" array, it'll do the reduction with "},{"type":"text","text":"Float64","style":{"code":true}},{"type":"text","text":"s. It should instead realize it doesn't have to, and that it could instead use "},{"type":"text","text":"Int16","style":{"code":true}},{"type":"text","text":" and larger vectors."}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"1c332dc4-cbad-4726-83eb-bbd186ef9003","type":"message","text":"Just got to trying LoopVectorization and Tullio. Great job to the both of you for these amazing libraries.\n\nI tried loop vectorization @avx and got a considerable speedup 0.01 --&gt; 0.06, but tollio took me from 0.01 --&gt; 0.006.\n\nI thought tollio uses LoopVectorization for its speedup. How can it be faster?","user":"U01FAHWCMFF","ts":"1609523770.250600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hWX=n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Just got to trying LoopVectorization and Tullio. Great job to the both of you for these amazing libraries.\n\nI tried loop vectorization @avx and got a considerable speedup 0.01 --> 0.06, but tollio took me from 0.01 --> 0.006.\n\nI thought tollio uses LoopVectorization for its speedup. How can it be faster?"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"4fa318d4-0cfa-4dc3-9574-1555dd8f70ab","type":"message","text":"tullio is loopvectorization+threads and some extra higher level smarts","user":"U0179G7FG4F","ts":"1609523829.250800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0mi47","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"tullio is loopvectorization+threads and some extra higher level smarts"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"dd2c31eb-2be4-4d2e-a80b-48a037b5eda1","type":"message","text":"Ah makes since since Im running 12 threads.\n\nI think I might start using these libraries in my time-critical mapreduce code. Just got to get myself familiar with the syntax/style of Tullio now :slightly_smiling_face:\n\nAlso hopefully Julia can add some of these features (eg. avx support) to Base, because they are very impressive and useful","user":"U01FAHWCMFF","ts":"1609524036.251000","team":"T68168MUP","edited":{"user":"U01FAHWCMFF","ts":"1609524119.000000"},"blocks":[{"type":"rich_text","block_id":"6D9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah makes since since Im running 12 threads.\n\nI think I might start using these libraries in my time-critical mapreduce code. Just got to get myself familiar with the syntax/style of Tullio now "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":"\n\nAlso hopefully Julia can add some of these features (eg. avx support) to Base, because they are very impressive and useful"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"051ac76b-9047-4a6a-a3eb-953ce9a3ca46","type":"message","text":"yeah. LoopVectorization will probably make it's way into base eventually. The biggest reason it hasn't yet is that once it goes into base, improving it becomes much harder.","user":"U0179G7FG4F","ts":"1609524379.251400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j/MX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah. LoopVectorization will probably make it's way into base eventually. The biggest reason it hasn't yet is that once it goes into base, improving it becomes much harder."}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"563b7702-f6ca-46c5-8a7c-c3423944b36c","type":"message","text":"Hmm that makes since, if thats the case, <@UD0NS8PDF> wins the competition. Also +1 star to the LoopVectorization and Tullio repos.","user":"U01FAHWCMFF","ts":"1609524616.251600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tVLC9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmm that makes since, if thats the case, "},{"type":"user","user_id":"UD0NS8PDF"},{"type":"text","text":" wins the competition. Also +1 star to the LoopVectorization and Tullio repos."}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"E0604F8E-209C-4F90-A05F-B68DFC43F1E8","type":"message","text":"LoopVectorization and Tullio are some of my favourite julia packages. They’re insanely impressive. ","user":"U8D9768Q6","ts":"1609530084.253000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rX2u/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"LoopVectorization and Tullio are some of my favourite julia packages. They’re insanely impressive. "}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6","reactions":[{"name":"+1","users":["U01FAHWCMFF"],"count":1}]},{"client_msg_id":"00a20e4a-5a59-40b1-a92a-b0d92e275c5d","type":"message","text":"Is it safe to say that if `map` and `LoopVectorization.vmap` have the same performance that they’re both using SIMD?","user":"U01FAHWCMFF","ts":"1609533957.253300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xVA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is it safe to say that if "},{"type":"text","text":"map","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"LoopVectorization.vmap","style":{"code":true}},{"type":"text","text":" have the same performance that they’re both using SIMD?"}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"7fa89db2-b407-48a6-b062-04c6554fb116","type":"message","text":"`vmap` will sometimes just call `map,` if it doesn't know how to handle the argument types.","user":"UAUPJLBQX","ts":"1609534419.253500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"714L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"vmap","style":{"code":true}},{"type":"text","text":" will sometimes just call "},{"type":"text","text":"map,","style":{"code":true}},{"type":"text","text":" if it doesn't know how to handle the argument types."}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"},{"client_msg_id":"3a9f06f1-0f88-4d0e-acb1-cfd881f26e0f","type":"message","text":"But it's reasonably likely that they're both SIMD.","user":"UAUPJLBQX","ts":"1609534467.253700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zE0p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But it's reasonably likely that they're both SIMD."}]}]}],"thread_ts":"1609362482.231100","parent_user_id":"U8D9768Q6"}]