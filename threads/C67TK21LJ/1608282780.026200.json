[{"client_msg_id":"59ea86d6-5b12-4b78-a680-843f5eef069e","type":"message","text":"Minor gripe: Having to do `replace(replace(line, \"*\" =&gt; \"-\"), \"+\" =&gt; \"/\")` instead of `replace(line, \"*\" =&gt; \"-\", \"+\" =&gt; \"/\")`.","user":"ULGMQ3LCB","ts":"1608282780.026200","team":"T68168MUP","edited":{"user":"ULGMQ3LCB","ts":"1608282803.000000"},"blocks":[{"type":"rich_text","block_id":"cJZZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Minor gripe: Having to do "},{"type":"text","text":"replace(replace(line, \"*\" => \"-\"), \"+\" => \"/\")","style":{"code":true}},{"type":"text","text":" instead of "},{"type":"text","text":"replace(line, \"*\" => \"-\", \"+\" => \"/\")","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1608282780.026200","reply_count":55,"reply_users_count":9,"latest_reply":"1608572213.060900","reply_users":["ULGMQ3LCB","UH24GRBLL","U6BNE7LTZ","UCZ7VBGUD","UK1BNFHFV","UDD5Z7FLZ","U73KENNG4","UP0P065ME","US4A6G6B0"],"subscribed":false,"reactions":[{"name":"point_up","users":["UDXST8ARK","U881D0W2C","U67G3QRJM","U8T0YV7QC","U6795JH6H","U73KENNG4","U680THK2S","UP0P065ME","U6J06TCQ0","U89GY9W1J","U9V8ZQVEY"],"count":11}]},{"client_msg_id":"07408426-1b63-455a-9196-a67cb4a0221c","type":"message","text":"Is this something people would be open to a PR for?","user":"ULGMQ3LCB","ts":"1608282834.026400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Aais","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is this something people would be open to a PR for?"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB","reactions":[{"name":"+1","users":["U017J1FHTSA","U6BNE7LTZ","U6A936746","U881D0W2C"],"count":4}]},{"client_msg_id":"c8bb11a2-3449-4b79-a6f2-8083d8d99c9e","type":"message","text":"no","user":"UH24GRBLL","ts":"1608283555.027100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7FncU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"e8cc524e-3b9e-4e27-9db4-3dec4a637a41","type":"message","text":"reason being that it's not a generally well defined operation","user":"UH24GRBLL","ts":"1608283570.027400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JUgv4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"reason being that it's not a generally well defined operation"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"3ecc557c-19a1-4cbd-90e4-2ab24880ee70","type":"message","text":"there have been a few issues &amp; discourse threads about this behaviour","user":"UH24GRBLL","ts":"1608283584.027600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Eg2Wh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there have been a few issues & discourse threads about this behaviour"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"410f388f-4121-4fbc-915c-ace0f2cca1c1","type":"message","text":"How so? You can just define it as multiple `replace` calls","user":"U6BNE7LTZ","ts":"1608283609.028000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IJWRf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How so? You can just define it as multiple "},{"type":"text","text":"replace","style":{"code":true}},{"type":"text","text":" calls"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"af0c2be0-0c37-47a6-bf10-0f1c7502aa51","type":"message","text":"You get ambiguities with some replaces","user":"UH24GRBLL","ts":"1608283621.028200","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1608283628.000000"},"blocks":[{"type":"rich_text","block_id":"xsQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You get ambiguities with some replaces"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"0f51f40b-f61c-4ebe-81ca-08be95ab97ca","type":"message","text":"e.g. if it's order dependant","user":"UH24GRBLL","ts":"1608283643.028500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xo9n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"e.g. if it's order dependant"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"a2e91364-5b92-4902-81b8-ca3c54bb8321","type":"message","text":"yes of course, but you _specify_ the order in the call","user":"U6BNE7LTZ","ts":"1608283654.028700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=JL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes of course, but you "},{"type":"text","text":"specify","style":{"italic":true}},{"type":"text","text":" the order in the call"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB","reactions":[{"name":"+1","users":["U6CJRSR63"],"count":1}]},{"client_msg_id":"1ae71bd0-6882-4552-aaf6-251ae9827b1a","type":"message","text":"and we could also provide a fast method that only takes one pass over the input string where the user has to ensure the set of chars in all pairs is disjoint","user":"U6BNE7LTZ","ts":"1608283745.028900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d+Dpy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and we could also provide a fast method that only takes one pass over the input string where the user has to ensure the set of chars in all pairs is disjoint"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"5d7bfac3-f317-4ef8-9f7e-5ee91e606c57","type":"message","text":"there was a very long discourse discussion, let me hunt for it","user":"UH24GRBLL","ts":"1608283843.029100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OHDje","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there was a very long discourse discussion, let me hunt for it"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"6a35dab0-e686-41fa-9762-f8ab221e7800","type":"message","text":"<https://discourse.julialang.org/t/cannot-find-overloaded-method/48633>","user":"UH24GRBLL","ts":"1608283898.029300","team":"T68168MUP","attachments":[{"service_name":"JuliaLang","title":"Cannot find overloaded method","title_link":"https://discourse.julialang.org/t/cannot-find-overloaded-method/48633","text":"At least for interactive usage it is often convenient to have a replace method for strings that can perform multiple replacements at once. So I try do define it, but julia (1.5) doesn’t find the new method even though it gets shown in the MethodError: julia&gt; function Base.replace(str::AbstractString, old_new::Pair...) for o_n in old_new str = replace(str, o_n) end return str end julia&gt; replace(\"abc\", \"a\" =&gt; \"x\", \"b\" =&gt; \"y\") ERROR: MethodEr...","fallback":"JuliaLang: Cannot find overloaded method","thumb_url":"https://aws1.discourse-cdn.com/business5/uploads/julialang/original/2X/1/12829a7ba92b924d4ce81099cbf99785bee9b405.png","fields":[{"title":"Reading time","value":"6 mins :clock2:","short":true},{"title":"Likes","value":"25 :heart:","short":true}],"ts":1603118178,"from_url":"https://discourse.julialang.org/t/cannot-find-overloaded-method/48633","thumb_width":408,"thumb_height":263,"service_icon":"https://aws1.discourse-cdn.com/business5/uploads/julialang/optimized/2X/6/6ca888e296f59ca2a599807f7d5edd489e3d1829_2_180x180.png","id":1,"original_url":"https://discourse.julialang.org/t/cannot-find-overloaded-method/48633"}],"blocks":[{"type":"rich_text","block_id":"A5W","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://discourse.julialang.org/t/cannot-find-overloaded-method/48633"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"26d06e16-e11b-4bbf-9497-3101930718c4","type":"message","text":"and, before that <https://discourse.julialang.org/t/perform-multiple-replacements-on-a-string-in-a-single-pass/43247>","user":"UH24GRBLL","ts":"1608283951.029600","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1608283961.000000"},"attachments":[{"service_name":"JuliaLang","title":"Perform multiple replacements on a string in a single pass","title_link":"https://discourse.julialang.org/t/perform-multiple-replacements-on-a-string-in-a-single-pass/43247","text":"I have a couple of scripts which perform multiple replacements on the same string. It seems as though this can be sped up by searching for all potential matches. For example, something like julia&gt;replace(\"123\",[r\"1\" =&gt; s\"a\",r\"2\" =&gt; s\"b\"]) \"ab3\" To be clear, that isn’t real output. Or maybe something with an or logic. Note that putting a . after replace outputs an array with each individual substitution. ie julia&gt; replace.(\"123\",[r\"1\" =&gt; s\"a\",r\"2\" =&gt; s\"b\"]) 2-element Array{String,1}: \"a23\" \"...","fallback":"JuliaLang: Perform multiple replacements on a string in a single pass","thumb_url":"https://aws1.discourse-cdn.com/business5/uploads/julialang/original/2X/1/12829a7ba92b924d4ce81099cbf99785bee9b405.png","fields":[{"title":"Reading time","value":"2 mins :clock2:","short":true},{"title":"Likes","value":"8 :heart:","short":true}],"ts":1595002932,"from_url":"https://discourse.julialang.org/t/perform-multiple-replacements-on-a-string-in-a-single-pass/43247","thumb_width":408,"thumb_height":263,"service_icon":"https://aws1.discourse-cdn.com/business5/uploads/julialang/optimized/2X/6/6ca888e296f59ca2a599807f7d5edd489e3d1829_2_180x180.png","id":1,"original_url":"https://discourse.julialang.org/t/perform-multiple-replacements-on-a-string-in-a-single-pass/43247"}],"blocks":[{"type":"rich_text","block_id":"yJrtj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and, before that "},{"type":"link","url":"https://discourse.julialang.org/t/perform-multiple-replacements-on-a-string-in-a-single-pass/43247"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"1944f1eb-be88-4207-98ca-49e98f2ded3d","type":"message","text":"at the minimum, it's a controversial thing what to do","user":"UH24GRBLL","ts":"1608284014.030100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lOyy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"at the minimum, it's a controversial thing what to do"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"586e9b28-c85c-4401-980c-1b93509d4b7a","type":"message","text":"fair","user":"U6BNE7LTZ","ts":"1608284022.030300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ewrA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"fair"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"d720a993-034c-4a67-9eb0-bb8f72158c83","type":"message","text":"should it operate only on the input string? Should it operate on intermediates? In what order are patterns applied? What do you do when two patterns match at the same index?","user":"UH24GRBLL","ts":"1608284046.030500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q0mL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"should it operate only on the input string? Should it operate on intermediates? In what order are patterns applied? What do you do when two patterns match at the same index?"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"6a29cd19-357c-4725-801a-f3de395e6584","type":"message","text":"defining all of that leads to very complex rules for a (seemingly) simple function, which is avoided by not defining them and letting the user decide what they actually want","user":"UH24GRBLL","ts":"1608284082.030700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TLVFf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"defining all of that leads to very complex rules for a (seemingly) simple function, which is avoided by not defining them and letting the user decide what they actually want"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"a8d0bb65-c88d-41d9-86af-ef6ea373b3e9","type":"message","text":"documenting it as \"`replace(str, pairs...)` is equivalent to recursive calls to `replace(str, p)` for `p` in `pairs` (in the given order)\" would work for me","user":"U6BNE7LTZ","ts":"1608284117.030900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+K/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"documenting it as \""},{"type":"text","text":"replace(str, pairs...)","style":{"code":true}},{"type":"text","text":" is equivalent to recursive calls to "},{"type":"text","text":"replace(str, p)","style":{"code":true}},{"type":"text","text":" for "},{"type":"text","text":"p","style":{"code":true}},{"type":"text","text":" in "},{"type":"text","text":"pairs","style":{"code":true}},{"type":"text","text":" (in the given order)\" would work for me"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB","reactions":[{"name":"+1","users":["UDXST8ARK","U6A936746","U0179G7FG4F","ULGMQ3LCB","UM8JUNJG7","U6CJRSR63"],"count":6}]},{"client_msg_id":"206c99a0-65fb-45f2-b406-15a499b70b97","type":"message","text":"the problem is, almost all interpretations of what to do are useful in some circumstances, and exclude a lot of other valid cases that don't seem to be less important than the naive recursion","user":"UH24GRBLL","ts":"1608284149.031100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Dd8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the problem is, almost all interpretations of what to do are useful in some circumstances, and exclude a lot of other valid cases that don't seem to be less important than the naive recursion"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"c7dcd745-8e9a-4c54-998f-779e11fb5e60","type":"message","text":"so it's weird to me to give preference to the recursive call","user":"UH24GRBLL","ts":"1608284163.031300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eYbV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so it's weird to me to give preference to the recursive call"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"27324286-5196-403a-8f51-21e11453b38e","type":"message","text":"well we could randomly pick one :stuck_out_tongue:","user":"U6BNE7LTZ","ts":"1608284184.031500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4bSf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well we could randomly pick one "},{"type":"emoji","name":"stuck_out_tongue"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"a7aa5001-71c7-465b-b73f-bac148106415","type":"message","text":":p","user":"UH24GRBLL","ts":"1608284196.031700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+hK2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":":p"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"f4ac7d16-e081-4e85-a473-b80ae82053b3","type":"message","text":"and I still think there's a place for `replace_distinct(str, pairs...)`","user":"U6BNE7LTZ","ts":"1608284225.031900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zBj6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and I still think there's a place for "},{"type":"text","text":"replace_distinct(str, pairs...)","style":{"code":true}}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB","reactions":[{"name":"+1","users":["U6A936746","UCZ7VBGUD","U69KQT9DL"],"count":3}]},{"client_msg_id":"a900e743-af54-40d0-9423-19b0f44e9495","type":"message","text":"where it actually doesn't matter which implementation you pick","user":"U6BNE7LTZ","ts":"1608284248.032200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RWHZn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"where it actually doesn't matter which implementation you pick"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"c687c71c-bc9a-4110-8036-99a889db4518","type":"message","text":"I agree that there's a place for that, but I don't think it should be under the `replace` umbrella (or only with a keyword, but that strikes me as non-julian)","user":"UH24GRBLL","ts":"1608284262.032400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Iiu6l","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I agree that there's a place for that, but I don't think it should be under the "},{"type":"text","text":"replace","style":{"code":true}},{"type":"text","text":" umbrella (or only with a keyword, but that strikes me as non-julian)"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"5503D93D-3FBF-4EB8-B062-B0A11A91D53F","type":"message","text":"I’ve been using this `foldl` version from <https://github.com/JuliaLang/julia/issues/29849#issuecomment-449535743|https://github.com/JuliaLang/julia/issues/29849#issuecomment-449535743>; btw that issue has a lot of discussion on the topic. I think one of the most compelling arguments against doing subsequent replaces is the one by SG that says those semantics are inherently slow and if we get a fast version with different semantics then it would be breaking to switch to it.","user":"UCZ7VBGUD","ts":"1608286922.036700","team":"T68168MUP","edited":{"user":"UCZ7VBGUD","ts":"1608286933.000000"},"blocks":[{"type":"rich_text","block_id":"V0KV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’ve been using this "},{"type":"text","text":"foldl","style":{"code":true}},{"type":"text","text":" version from "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/29849#issuecomment-449535743","text":"https://github.com/JuliaLang/julia/issues/29849#issuecomment-449535743"},{"type":"text","text":"; btw that issue has a lot of discussion on the topic. I think one of the most compelling arguments against doing subsequent replaces is the one by SG that says those semantics are inherently slow and if we get a fast version with different semantics then it would be breaking to switch to it."}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"8EBF9B79-000B-4E73-AE86-FF4CD5C42155","type":"message","text":"There could at least be a replacement version for multiple character =&gt; string pairs or string =&gt; string pairs where it's checked first if the strings share characters and it errors in that case","user":"UK1BNFHFV","ts":"1608295788.039400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tt7X","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There could at least be a replacement version for multiple character => string pairs or string => string pairs where it's checked first if the strings share characters and it errors in that case"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"B484D282-37C6-424E-937B-985CAF837BE4","type":"message","text":"Then all replacements would be independent and I think that's also a very common case","user":"UK1BNFHFV","ts":"1608295828.040400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PtQRX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Then all replacements would be independent and I think that's also a very common case"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"2a02135c-6991-4780-918a-dbf9a98b065b","type":"message","text":"yep, that's the `replace_distinct` I mentioned above","user":"U6BNE7LTZ","ts":"1608295873.040600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oTW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yep, that's the "},{"type":"text","text":"replace_distinct","style":{"code":true}},{"type":"text","text":" I mentioned above"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"820799a7-921b-483e-9ed9-734d64eb396a","type":"message","text":"but in those cases you'd be forced to `try/catch`, since otherwise the compiler can't get rid of a possible error since it's not derivable from the types alone","user":"UH24GRBLL","ts":"1608296037.040800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cD6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but in those cases you'd be forced to "},{"type":"text","text":"try/catch","style":{"code":true}},{"type":"text","text":", since otherwise the compiler can't get rid of a possible error since it's not derivable from the types alone"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"c19452cc-b2f6-4338-bfb9-6dd8810c9a56","type":"message","text":"if that's under a different function, I'd be on board with that, but I'd rather not have to catch things on regular `replace` :/","user":"UH24GRBLL","ts":"1608296111.041000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vfJei","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if that's under a different function, I'd be on board with that, but I'd rather not have to catch things on regular "},{"type":"text","text":"replace","style":{"code":true}},{"type":"text","text":" :/"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"e8b0dada-e8f6-414d-a0f5-03150e5293b4","type":"message","text":"I don't really understand what you mean <@UH24GRBLL>, would the user of the function would need `try/catch` or the implementation? I don't really see why either would need it semantically unless they were possibly going to pass invalid replacements. Do you mean you'd need it as an optimization to get rid of the error path or something?","user":"UCZ7VBGUD","ts":"1608297868.041300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"b7mHX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't really understand what you mean "},{"type":"user","user_id":"UH24GRBLL"},{"type":"text","text":", would the user of the function would need "},{"type":"text","text":"try/catch","style":{"code":true}},{"type":"text","text":" or the implementation? I don't really see why either would need it semantically unless they were possibly going to pass invalid replacements. Do you mean you'd need it as an optimization to get rid of the error path or something?"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"7c269a84-90b3-4e93-9ac8-18ccc3fc12d0","type":"message","text":"yes, precisely","user":"UH24GRBLL","ts":"1608297929.041500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GAW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, precisely"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"853b06bc-61c7-42bd-a4d6-4acbafb10391","type":"message","text":"if fewer code is able to throw, more code can be optimized under the assumption that it'll work","user":"UH24GRBLL","ts":"1608297969.041700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Z=ek","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if fewer code is able to throw, more code can be optimized under the assumption that it'll work"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"081c7752-8b1a-48bd-8231-41a622212a05","type":"message","text":"as far as I know, `replace` currently won't throw at all","user":"UH24GRBLL","ts":"1608297990.041900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"97x0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"as far as I know, "},{"type":"text","text":"replace","style":{"code":true}},{"type":"text","text":" currently won't throw at all"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"8bd471da-9598-4e11-b1f7-4a4bc52868f9","type":"message","text":"hmm, one could have `try_replace_distinct` which returns nothing if it can't be done, then `replace_distinct` which checks the result of `try_replace_distinct` and throws if it's nothing, like `try_parse` . Not sure it's worth two new functions or not though :slightly_smiling_face:","user":"UCZ7VBGUD","ts":"1608298181.042100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"thUN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmm, one could have "},{"type":"text","text":"try_replace_distinct","style":{"code":true}},{"type":"text","text":" which returns nothing if it can't be done, then "},{"type":"text","text":"replace_distinct","style":{"code":true}},{"type":"text","text":" which checks the result of "},{"type":"text","text":"try_replace_distinct","style":{"code":true}},{"type":"text","text":" and throws if it's nothing, like "},{"type":"text","text":"try_parse","style":{"code":true}},{"type":"text","text":" . Not sure it's worth two new functions or not though "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"d0f20e6a-bb35-4c29-b836-c8dd403047e0","type":"message","text":"it's kind of the same concept as when a function returns `Union{T, Nothing}` - you either take care of the `nothing` and the compiler can assume the following code will not be `nothing` (and thus can potentially inline more) or you don't take care of it and the compiler has to insert that check","user":"UH24GRBLL","ts":"1608298183.042300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"F2Ynr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's kind of the same concept as when a function returns "},{"type":"text","text":"Union{T, Nothing}","style":{"code":true}},{"type":"text","text":" - you either take care of the "},{"type":"text","text":"nothing","style":{"code":true}},{"type":"text","text":" and the compiler can assume the following code will not be "},{"type":"text","text":"nothing","style":{"code":true}},{"type":"text","text":" (and thus can potentially inline more) or you don't take care of it and the compiler has to insert that check"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"683bda2f-1422-41e7-bae5-99ce510f3d91","type":"message","text":"(though the Union will probably be faster because of the small union optimization)","user":"UH24GRBLL","ts":"1608298206.042500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hfe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(though the Union will probably be faster because of the small union optimization)"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"4d789969-4cce-4bed-8ba4-93b19e96ff61","type":"message","text":"right, I'm in the same camp - I don't think it's worth two new functions for this :) especially since the desired behaviour can already be implemented by a user in just the way they want, _without_ resorting to communication via exceptions","user":"UH24GRBLL","ts":"1608298255.042700","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1608298256.000000"},"blocks":[{"type":"rich_text","block_id":"0Naf1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"right, I'm in the same camp - I don't think it's worth two new functions for this :) especially since the desired behaviour can already be implemented by a user in just the way they want, "},{"type":"text","text":"without","style":{"italic":true}},{"type":"text","text":" resorting to communication via exceptions"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"1ae2dc8e-3117-4361-9faf-ecbf5e5730d5","type":"message","text":"which is expensive, since you have to unroll the stack in case it throws","user":"UH24GRBLL","ts":"1608298282.043000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hYxu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which is expensive, since you have to unroll the stack in case it throws"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"745bd588-ae15-4f6d-9a11-e6e4ca14d65d","type":"message","text":"Just\n```S = [\"*\" =&gt; \"-\", \"+\" =&gt; \"/\"]\nTmp = replace(line, S[begin])\nfor i in S[begin+1, end]\n    replace!(Tmp, i)\nend```\nNice and neat","user":"UDD5Z7FLZ","ts":"1608299878.043400","team":"T68168MUP","edited":{"user":"UDD5Z7FLZ","ts":"1608299908.000000"},"blocks":[{"type":"rich_text","block_id":"q/hc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Just\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"S = [\"*\" => \"-\", \"+\" => \"/\"]\nTmp = replace(line, S[begin])\nfor i in S[begin+1, end]\n    replace!(Tmp, i)\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nNice and neat"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB","reactions":[{"name":"point_up","users":["UH24GRBLL","UEN48T0BT","ULGMQ3LCB"],"count":3},{"name":"-1","users":["U73KENNG4"],"count":1}]},{"client_msg_id":"4c89b72f-ac74-4d48-bc16-e1245203b7de","type":"message","text":"yes - perfectly communicates the intent :)","user":"UH24GRBLL","ts":"1608300506.043900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EvR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes - perfectly communicates the intent :)"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"829913f9-27ac-4e93-8d63-76c421a80af4","type":"message","text":"I don’t see the problem with defining this method on strings - it’s defined for arrays, right?\n```julia&gt; line = collect(\"2+2*3+2\");\n\njulia&gt; m = replace(line, '*' =&gt; '-', '+' =&gt; '/');\n\njulia&gt; String(m)\n\"2/2-3/2\"```","user":"U73KENNG4","ts":"1608312020.045900","team":"T68168MUP","edited":{"user":"U73KENNG4","ts":"1608312045.000000"},"blocks":[{"type":"rich_text","block_id":"W5Tih","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don’t see the problem with defining this method on strings - it’s defined for arrays, right?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> line = collect(\"2+2*3+2\");\n\njulia> m = replace(line, '*' => '-', '+' => '/');\n\njulia> String(m)\n\"2/2-3/2\""}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"7d673653-d637-413c-9890-e7bc35a3ea0b","type":"message","text":"I was _just_ going to mention the same thing.\n\nI think I get now that there are technical reasons for this not making the cut, but the cost is for user experience for the average user / prototyping code. (I wish there were better standard ways of discussing this tradeoff.)\n\nMy 2 cents for what they are worth.\n\nWhen I see `replace(A, r1 =&gt; s1, r2 =&gt; s2)` in someone's code, even if I know that `A` is a vector, I will experiment with `replace(S, r1 =&gt; s1, r2 =&gt; s2)` where `S` is a String, without reading the documentation, since that seems like it should _just_ work.","user":"ULGMQ3LCB","ts":"1608312942.046300","team":"T68168MUP","edited":{"user":"ULGMQ3LCB","ts":"1608312974.000000"},"blocks":[{"type":"rich_text","block_id":"PBYh3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I was "},{"type":"text","text":"just","style":{"italic":true}},{"type":"text","text":" going to mention the same thing.\n\nI think I get now that there are technical reasons for this not making the cut, but the cost is for user experience for the average user / prototyping code. (I wish there were better standard ways of discussing this tradeoff.)\n\nMy 2 cents for what they are worth.\n\nWhen I see "},{"type":"text","text":"replace(A, r1 => s1, r2 => s2)","style":{"code":true}},{"type":"text","text":" in someone's code, even if I know that "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" is a vector, I will experiment with "},{"type":"text","text":"replace(S, r1 => s1, r2 => s2)","style":{"code":true}},{"type":"text","text":" where "},{"type":"text","text":"S","style":{"code":true}},{"type":"text","text":" is a String, without reading the documentation, since that seems like it should "},{"type":"text","text":"just","style":{"italic":true}},{"type":"text","text":" work."}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB","reactions":[{"name":"+1","users":["U73KENNG4","U69KQT9DL"],"count":2}]},{"client_msg_id":"e2c5d92d-253b-4409-b9ab-a76a67ccff36","type":"message","text":"it is, but `replace` on arrays doesn't span multiple indices","user":"UH24GRBLL","ts":"1608312958.046500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3sm20","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it is, but "},{"type":"text","text":"replace","style":{"code":true}},{"type":"text","text":" on arrays doesn't span multiple indices"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"1fb96a18-df95-4607-9b62-05eb87c74b67","type":"message","text":"whereas `replace` on String can","user":"UH24GRBLL","ts":"1608312964.046700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x2a","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"whereas "},{"type":"text","text":"replace","style":{"code":true}},{"type":"text","text":" on String can"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB","reactions":[{"name":"this-is-true","users":["U6BNE7LTZ"],"count":1}]},{"client_msg_id":"33f0cf07-4106-4b4b-a277-aab4c5c53532","type":"message","text":"I guess it could be allowed for `Char =&gt; Char` pairs, and _only_  `Char =&gt; Char` pairs","user":"UH24GRBLL","ts":"1608313010.047100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"X+rw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess it could be allowed for "},{"type":"text","text":"Char => Char","style":{"code":true}},{"type":"text","text":" pairs, and "},{"type":"text","text":"only","style":{"italic":true}},{"type":"text","text":"  "},{"type":"text","text":"Char => Char","style":{"code":true}},{"type":"text","text":" pairs"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"8c531e29-94f1-46e7-ba0e-23179210137e","type":"message","text":"but that runs into the next \"why not for strings too\" question about inconsistency","user":"UH24GRBLL","ts":"1608313033.047300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qhki","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but that runs into the next \"why not for strings too\" question about inconsistency"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"ff4ebf98-193d-488e-879a-a8aecdc2f4f2","type":"message","text":"we've just moved the painpoint one layer forward","user":"UH24GRBLL","ts":"1608313046.047500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s/A","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we've just moved the painpoint one layer forward"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"7388b904-e944-4f7a-aa19-9e02f3857d18","type":"message","text":"I posted the same question in Zulip before <@ULGMQ3LCB> mentioned this thread. It's not necessarily a gripe, just curious what the rationale was - specifically I was curious about the `Char =&gt; Char` case, which seemed like a direct analog to replacement on an array.","user":"UP0P065ME","ts":"1608313659.048200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aSt3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I posted the same question in Zulip before "},{"type":"user","user_id":"ULGMQ3LCB"},{"type":"text","text":" mentioned this thread. It's not necessarily a gripe, just curious what the rationale was - specifically I was curious about the "},{"type":"text","text":"Char => Char","style":{"code":true}},{"type":"text","text":" case, which seemed like a direct analog to replacement on an array."}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"2b584209-96db-4eb2-bc09-ab41146c4d70","type":"message","text":"I keep trying to find some edge cases for this, but I think just the `Char =&gt; Char` case should be fine :thinking_face:","user":"UH24GRBLL","ts":"1608314062.048400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TT+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I keep trying to find some edge cases for this, but I think just the "},{"type":"text","text":"Char => Char","style":{"code":true}},{"type":"text","text":" case should be fine "},{"type":"emoji","name":"thinking_face"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"839b07c9-0cf1-4d45-b90b-a34cdc884a95","type":"message","text":"UTF-8 characters can't have other characters as a subset, right?","user":"UH24GRBLL","ts":"1608314077.048600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YH8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"UTF-8 characters can't have other characters as a subset, right?"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"F3C70971-9366-49ED-BC83-A97938B93461","type":"message","text":"Even char =&gt; string should be fine, you just jump to the next char after the inserted string","user":"UK1BNFHFV","ts":"1608316037.050000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"z95i","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Even char => string should be fine, you just jump to the next char after the inserted string"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"13469132-60B2-4985-AA05-D3F364A9F131","type":"message","text":"FWIW, there’s also `reduce(replace, rep_pairs, init=str)`. But yeah, it annoys me too to have to do this.","user":"US4A6G6B0","ts":"1608318934.053100","team":"T68168MUP","edited":{"user":"US4A6G6B0","ts":"1608319800.000000"},"blocks":[{"type":"rich_text","block_id":"TKq5I","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"FWIW, there’s also "},{"type":"text","text":"reduce(replace, ","style":{"code":true}},{"type":"text","text":"rep_","style":{"code":true}},{"type":"text","text":"pairs, init=str)","style":{"code":true}},{"type":"text","text":". But yeah, it annoys me too to have to do this."}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"55b62cac-22cb-4363-8916-7dfca664e3c6","type":"message","text":"I know there's a rationale behind all the different behaviors here, and I don't want to incite any wars over which behavior is \"right\", but I always feel it's a bit unintuitive when functions have internal state where arguments are sequentially applied. I think this is rightfully better handled by a reduce call.\n\nI took a pass at stateless version (though still _slightly_ position-sensitive when replacements exactly overlap, applying the first positional argument's replacement):\n\n``` function myreplace(x::AbstractString, old_new::Pair...)\n    # find all matches of \"old\" within x; Array of \"new\" =&gt; replacement range\n    locs = vcat([new .=&gt; findall(old, x) for (old, new) = old_new]...)\n\n    # sort replacement locations by start and length\n    locs = sort(locs, by = i -&gt; (i.second.start, -i.second.stop))\n\n    # reduce replacement locations, only applies replacement if the match\n    #   - is found in the original string \"x\"\n    #   - starts before any other overlapping matches\n    #   - is the longest of any other overlapping matches\n    str, n = reduce(locs; init = (\"\", 1)) do (str, n), (new, loc)\n        if loc.start &gt;= n\n            (str * x[n:loc.start-1] * new, loc.stop + 1)\n        else\n            (str, n)\n        end\n    end\n\n    return str * x[n:end]\nend```","user":"UP0P065ME","ts":"1608332262.054200","team":"T68168MUP","edited":{"user":"UP0P065ME","ts":"1608332355.000000"},"blocks":[{"type":"rich_text","block_id":"hfE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I know there's a rationale behind all the different behaviors here, and I don't want to incite any wars over which behavior is \"right\", but I always feel it's a bit unintuitive when functions have internal state where arguments are sequentially applied. I think this is rightfully better handled by a reduce call.\n\nI took a pass at stateless version (though still "},{"type":"text","text":"slightly","style":{"italic":true}},{"type":"text","text":" position-sensitive when replacements exactly overlap, applying the first positional argument's replacement):\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":" function myreplace(x::AbstractString, old_new::Pair...)\n    # find all matches of \"old\" within x; Array of \"new\" => replacement range\n    locs = vcat([new .=> findall(old, x) for (old, new) = old_new]...)\n\n    # sort replacement locations by start and length\n    locs = sort(locs, by = i -> (i.second.start, -i.second.stop))\n\n    # reduce replacement locations, only applies replacement if the match\n    #   - is found in the original string \"x\"\n    #   - starts before any other overlapping matches\n    #   - is the longest of any other overlapping matches\n    str, n = reduce(locs; init = (\"\", 1)) do (str, n), (new, loc)\n        if loc.start >= n\n            (str * x[n:loc.start-1] * new, loc.stop + 1)\n        else\n            (str, n)\n        end\n    end\n\n    return str * x[n:end]\nend"}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"},{"client_msg_id":"d39a9520-6395-4c6a-bc25-d762d96196a9","type":"message","text":"For what it's worth, I shared this code in the issue thread mentioned above (<https://github.com/JuliaLang/julia/issues/29849#issuecomment-449535743>) - might as well float it out there if it can help advance the discussion.","user":"UP0P065ME","ts":"1608572213.060900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C00","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For what it's worth, I shared this code in the issue thread mentioned above ("},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/29849#issuecomment-449535743"},{"type":"text","text":") - might as well float it out there if it can help advance the discussion."}]}]}],"thread_ts":"1608282780.026200","parent_user_id":"ULGMQ3LCB"}]