[{"client_msg_id":"c122e149-6978-41cf-8096-3cb93cfa062b","type":"message","text":"then `corr` should contain the values for `⟨A(t+τ)B(t)⟩`","user":"UBWLSPU1E","ts":"1617175665.019300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bC1d","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"then "},{"type":"text","text":"corr","style":{"code":true}},{"type":"text","text":" should contain the values for "},{"type":"text","text":"⟨A(t+τ)B(t)⟩","style":{"code":true}}]}]}],"thread_ts":"1617175665.019300","reply_count":2,"reply_users_count":1,"latest_reply":"1617242999.024500","reply_users":["U0158N77PFT"],"is_locked":false,"subscribed":false},{"type":"message","text":"Thank you for the feedback. I'm attempting to rewrite the attached in Julia. I have the exponential and Gaussian wavepackets created, but calculating the first-order coherences of the sources' has been illusive so far.\n\nI'll try computing  `ρ0`  from a standard time evolution and use the approach you suggested.\n\nThanks again.","files":[{"id":"F01T0KVUHFC","created":1617241015,"timestamp":1617241015,"name":"example-pulse-wise-two-photon-interference.pdf","title":"example-pulse-wise-two-photon-interference.pdf","mimetype":"application/pdf","filetype":"pdf","pretty_type":"PDF","user":"U0158N77PFT","editable":false,"size":541214,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01T0KVUHFC/example-pulse-wise-two-photon-interference.pdf","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01T0KVUHFC/download/example-pulse-wise-two-photon-interference.pdf","thumb_pdf":"https://files.slack.com/files-tmb/T68168MUP-F01T0KVUHFC-96d8cb0afc/example-pulse-wise-two-photon-interference_thumb_pdf.png","thumb_pdf_w":935,"thumb_pdf_h":1210,"permalink":"https://julialang.slack.com/files/U0158N77PFT/F01T0KVUHFC/example-pulse-wise-two-photon-interference.pdf","permalink_public":"https://slack-files.com/T68168MUP-F01T0KVUHFC-cd0115d03d","is_starred":false,"has_rich_preview":false}],"upload":false,"blocks":[{"type":"rich_text","block_id":"jmWZC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thank you for the feedback. I'm attempting to rewrite the attached in Julia. I have the exponential and Gaussian wavepackets created, but calculating the first-order coherences of the sources' has been illusive so far.\n\nI'll try computing  "},{"type":"text","text":"ρ0","style":{"code":true}},{"type":"text","text":"  from a standard time evolution and use the approach you suggested.\n\nThanks again."}]}]}],"user":"U0158N77PFT","display_as_bot":false,"ts":"1617241021.024100","thread_ts":"1617175665.019300","parent_user_id":"UBWLSPU1E"},{"type":"message","text":"```using QuantumOptics\nusing Plots\n# shared parameters\nγ = [1.0, 0.0]          # decay rate\ntlist = Vector(range(0.0, stop=13.0, length=300))\ntaulist = tlist\n\n# parameters for TLS with exponential shape wavepacket(short pulse)\ntp_e = 0.060                        # Gaussian pulse parameters\nOm_e = 19.40                        # driving strength\nt_offset_e = 0.405                  #\n\n\n# parameters for TLS with Gaussian sahpe wavepacket (long pulse)\ntp_G = 2.000                        # Gaussian pulse parameter\nOm_G = 0.702                        # driving strength\nt_offset_G = 5\n\n\n# initial state\nbasis = FockBasis(1)\nψ_0 = fockstate(basis, 0)\nρ_0 = ψ_0 ⊗ dagger(ψ_0)\n\n# operators\nsm = destroy(basis)\nsm_t = create(basis)\nn = number(basis)\n\n# Hamiltonian\nH_I = sm + sm_t\n\n\nfunction H_e(t, ρ)\n    pulse_shape_e = Om_e/2 * exp(-(t - t_offset_e)^2 / (2 * tp_e^2))\n    H = sm * pulse_shape_e + sm_t * pulse_shape_e\n    J = [sm, sm_t]\n    Jdagger = dagger.(J)\n    rates = γ\n    return H, J, Jdagger, rates\nend\n\nfunction H_G(t, ρ)\n    pulse_shape_G = Om_G/2 * exp(-(t - t_offset_G)^2 / (2 * tp_G^2))\n    H = sm * pulse_shape_G + sm_t * pulse_shape_G\n    J = [sm, sm_t]\n    Jdagger = dagger.(J)\n    rates = γ\n    return H, J, Jdagger, rates\nend\n\n# calculate emission flux\ntout1, pt_master1 = timeevolution.master_dynamic(tlist, ψ_0, H_e)\ntout2, pt_master2 = timeevolution.master_dynamic(tlist, ψ_0, H_G)\n\nn_e = real(expect(n,pt_master1))\nn_G = real(expect(n,pt_master2))\n\nplot(tlist, [n_e, n_G], label = [\"exponential wavepacket\" \"Gaussian wavepacket\"])```\n","files":[{"id":"F01SKU3UUKH","created":1617242994,"timestamp":1617242994,"name":"image.png","title":"image.png","mimetype":"image/png","filetype":"png","pretty_type":"PNG","user":"U0158N77PFT","editable":false,"size":34203,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01SKU3UUKH/image.png","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01SKU3UUKH/download/image.png","thumb_64":"https://files.slack.com/files-tmb/T68168MUP-F01SKU3UUKH-62662cf20f/image_64.png","thumb_80":"https://files.slack.com/files-tmb/T68168MUP-F01SKU3UUKH-62662cf20f/image_80.png","thumb_360":"https://files.slack.com/files-tmb/T68168MUP-F01SKU3UUKH-62662cf20f/image_360.png","thumb_360_w":360,"thumb_360_h":240,"thumb_480":"https://files.slack.com/files-tmb/T68168MUP-F01SKU3UUKH-62662cf20f/image_480.png","thumb_480_w":480,"thumb_480_h":320,"thumb_160":"https://files.slack.com/files-tmb/T68168MUP-F01SKU3UUKH-62662cf20f/image_160.png","original_w":632,"original_h":421,"thumb_tiny":"AwAfADC7Ai+RHlV+6O1SeWn9xfypkH+oj/3R/KpaAG+Wn9xfyoMaf3F/KnUUAR+Xzwi/lUN2gFpIdqg7ewq1UF7/AMekv+7QA63/ANRH/uipapxXkCxIC/IUA/Kaf9ug/wCen/jpoAs0VW+3Qf8APT/x00fboP8Anp/46aALNQXv/HpL/u037dB/z0/8dNRXN3DJbSKr5YjgYNAH/9k=","permalink":"https://julialang.slack.com/files/U0158N77PFT/F01SKU3UUKH/image.png","permalink_public":"https://slack-files.com/T68168MUP-F01SKU3UUKH-28dc41c531","is_starred":false,"has_rich_preview":false}],"upload":false,"blocks":[{"type":"rich_text","block_id":"hyP","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using QuantumOptics\nusing Plots\n# shared parameters\nγ = [1.0, 0.0]          # decay rate\ntlist = Vector(range(0.0, stop=13.0, length=300))\ntaulist = tlist\n\n# parameters for TLS with exponential shape wavepacket(short pulse)\ntp_e = 0.060                        # Gaussian pulse parameters\nOm_e = 19.40                        # driving strength\nt_offset_e = 0.405                  #\n\n\n# parameters for TLS with Gaussian sahpe wavepacket (long pulse)\ntp_G = 2.000                        # Gaussian pulse parameter\nOm_G = 0.702                        # driving strength\nt_offset_G = 5\n\n\n# initial state\nbasis = FockBasis(1)\nψ_0 = fockstate(basis, 0)\nρ_0 = ψ_0 ⊗ dagger(ψ_0)\n\n# operators\nsm = destroy(basis)\nsm_t = create(basis)\nn = number(basis)\n\n# Hamiltonian\nH_I = sm + sm_t\n\n\nfunction H_e(t, ρ)\n    pulse_shape_e = Om_e/2 * exp(-(t - t_offset_e)^2 / (2 * tp_e^2))\n    H = sm * pulse_shape_e + sm_t * pulse_shape_e\n    J = [sm, sm_t]\n    Jdagger = dagger.(J)\n    rates = γ\n    return H, J, Jdagger, rates\nend\n\nfunction H_G(t, ρ)\n    pulse_shape_G = Om_G/2 * exp(-(t - t_offset_G)^2 / (2 * tp_G^2))\n    H = sm * pulse_shape_G + sm_t * pulse_shape_G\n    J = [sm, sm_t]\n    Jdagger = dagger.(J)\n    rates = γ\n    return H, J, Jdagger, rates\nend\n\n# calculate emission flux\ntout1, pt_master1 = timeevolution.master_dynamic(tlist, ψ_0, H_e)\ntout2, pt_master2 = timeevolution.master_dynamic(tlist, ψ_0, H_G)\n\nn_e = real(expect(n,pt_master1))\nn_G = real(expect(n,pt_master2))\n\nplot(tlist, [n_e, n_G], label = [\"exponential wavepacket\" \"Gaussian wavepacket\"])"}]},{"type":"rich_text_section","elements":[]}]}],"user":"U0158N77PFT","display_as_bot":false,"ts":"1617242999.024500","thread_ts":"1617175665.019300","parent_user_id":"UBWLSPU1E"}]