[{"client_msg_id":"b519ca74-2c1d-4d93-87a7-e8a2f17c03c0","type":"message","text":"but we do have dependent types!","user":"U69L6CPJN","ts":"1609899521.087200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yVL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but we do have dependent types!"}]}]}],"thread_ts":"1609899521.087200","reply_count":18,"reply_users_count":4,"latest_reply":"1610133926.164500","reply_users":["U8D9768Q6","U69L6CPJN","U67G3QRJM","UF4N4QX71"],"subscribed":false},{"type":"message","subtype":"thread_broadcast","text":"Yes, but we no longer claim to have them because it upsets PL wheenies too much.","user":"U8D9768Q6","ts":"1609901727.087900","thread_ts":"1609899521.087200","root":{"client_msg_id":"b519ca74-2c1d-4d93-87a7-e8a2f17c03c0","type":"message","text":"but we do have dependent types!","user":"U69L6CPJN","ts":"1609899521.087200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yVL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but we do have dependent types!"}]}]}],"thread_ts":"1609899521.087200","reply_count":18,"reply_users_count":4,"latest_reply":"1610133926.164500","reply_users":["U8D9768Q6","U69L6CPJN","U67G3QRJM","UF4N4QX71"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"ZBv6r","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, but we no longer claim to have them because it upsets PL wheenies too much."}]}]}],"client_msg_id":"ed9aa3b7-b71e-45cc-8c11-a17a5ca9aded"},{"client_msg_id":"49ad9ce0-6b95-4613-af3d-ca58131412c9","type":"message","text":"If you haven't read it before, this is a great thread <https://github.com/JuliaLang/julia/issues/6113>","user":"U8D9768Q6","ts":"1609901826.088900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"okg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you haven't read it before, this is a great thread "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/6113"}]}]}],"thread_ts":"1609899521.087200","parent_user_id":"U69L6CPJN"},{"client_msg_id":"23b87059-958a-454d-a949-cef17ab75a3a","type":"message","text":"I have read it. The conclusion I came to is \"if Julia doesn't have dependent types, it can only be because your definition of type is so narrow that Julia doesn't have types at all\"","user":"U69L6CPJN","ts":"1609901954.089200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aRVSo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have read it. The conclusion I came to is \"if Julia doesn't have dependent types, it can only be because your definition of type is so narrow that Julia doesn't have types at all\""}]}]}],"thread_ts":"1609899521.087200","parent_user_id":"U69L6CPJN"},{"client_msg_id":"f54fe394-0969-47f2-95cf-b4bcb557145e","type":"message","text":"Can you give an example of dependent types in Julia?","user":"U67G3QRJM","ts":"1609999777.107000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C5I","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can you give an example of dependent types in Julia?"}]}]}],"thread_ts":"1609899521.087200","parent_user_id":"U69L6CPJN"},{"client_msg_id":"1A62158F-0320-47DA-B013-F8BC655C3876","type":"message","text":"`Array{Float64, 2}`","user":"U8D9768Q6","ts":"1609999809.107600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qgpwk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Array{Float64, 2}","style":{"code":true}}]}]}],"thread_ts":"1609899521.087200","parent_user_id":"U69L6CPJN"},{"client_msg_id":"F98DE0A9-8FC1-4C68-BCE2-7E5AB0102600","type":"message","text":"Or better yet, the prototypical example, `SVector{3, Float64}`","user":"U8D9768Q6","ts":"1609999850.108700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uZh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Or better yet, the prototypical example, "},{"type":"text","text":"SVector{3, Float64}","style":{"code":true}}]}]}],"thread_ts":"1609899521.087200","parent_user_id":"U69L6CPJN"},{"client_msg_id":"6ba9043e-0eea-40f0-a35a-08ec7e166057","type":"message","text":"OK, thanks","user":"U67G3QRJM","ts":"1609999873.108900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2V7l1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"OK, thanks"}]}]}],"thread_ts":"1609899521.087200","parent_user_id":"U69L6CPJN"},{"client_msg_id":"fdfc8bf6-09e0-499d-90ab-1357f7a81576","type":"message","text":"Here's a nice understandable example from StackOverflow: <https://stackoverflow.com/questions/9338709/what-is-dependent-typing>","user":"U8D9768Q6","ts":"1610002103.109100","team":"T68168MUP","attachments":[{"service_name":"Stack Overflow","title":"What is dependent typing?","title_link":"https://stackoverflow.com/questions/9338709/what-is-dependent-typing","text":"Can someone explain dependent typing to me? I have little experience in Haskell, Cayenne, Epigram, or other functional languages, so the simpler of terms you can use, the more I will appreciate it!","fallback":"Stack Overflow: What is dependent typing?","thumb_url":"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded","from_url":"https://stackoverflow.com/questions/9338709/what-is-dependent-typing","thumb_width":316,"thumb_height":316,"service_icon":"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon.png?v=c78bd457575a","id":1,"original_url":"https://stackoverflow.com/questions/9338709/what-is-dependent-typing"}],"blocks":[{"type":"rich_text","block_id":"F9R","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Here's a nice understandable example from StackOverflow: "},{"type":"link","url":"https://stackoverflow.com/questions/9338709/what-is-dependent-typing"}]}]}],"thread_ts":"1609899521.087200","parent_user_id":"U69L6CPJN"},{"client_msg_id":"97378348-0be0-4731-83f6-f9dfadf39eaa","type":"message","text":"And the corresponding julia code\n```julia&gt; struct BoundedInt{n} &lt;: Integer\n           i::Int\n           function BoundedInt{n}(i) where {n}\n               @assert i &lt;= n\n               new{n}(i)\n           end\n       end\n\njulia&gt; min(i::Int, j::Int)::BoundedInt{j} = i &lt; j ? i : j\nmin (generic function with 1 method)\n\njulia&gt; min(1, 2)\nBoundedInt{2}(1)\n\njulia&gt; min(3, 2)\nBoundedInt{2}(2)```","user":"U8D9768Q6","ts":"1610002116.109400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"msvx2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And the corresponding julia code\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> struct BoundedInt{n} <: Integer\n           i::Int\n           function BoundedInt{n}(i) where {n}\n               @assert i <= n\n               new{n}(i)\n           end\n       end\n\njulia> min(i::Int, j::Int)::BoundedInt{j} = i < j ? i : j\nmin (generic function with 1 method)\n\njulia> min(1, 2)\nBoundedInt{2}(1)\n\njulia> min(3, 2)\nBoundedInt{2}(2)"}]}]}],"thread_ts":"1609899521.087200","parent_user_id":"U69L6CPJN"},{"client_msg_id":"95f0c18b-d273-47b0-9300-a0189320b902","type":"message","text":"Although Julia is my favorite language, I have to say, \"No, we don't have dependent types.\"\n*EDIT*: it's an old issue and has been extensively discussed. I'd agree with the point that dependent typing eases some problems, and its seemingly counterpart in Julia(not not the same thing at all) addresses others.","user":"UF4N4QX71","ts":"1610090554.115800","team":"T68168MUP","edited":{"user":"UF4N4QX71","ts":"1610091051.000000"},"blocks":[{"type":"rich_text","block_id":"fsQi/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Although Julia is my favorite language, I have to say, \"No, we don't have dependent types.\"\n"},{"type":"text","text":"EDIT","style":{"bold":true}},{"type":"text","text":": it's an old issue and has been extensively discussed. I'd agree with the point that dependent typing eases some problems, and its seemingly counterpart in Julia(not not the same thing at all) addresses others."}]}]}],"thread_ts":"1609899521.087200","parent_user_id":"U69L6CPJN"},{"client_msg_id":"6E3884A8-3975-43A6-882D-6BC592CC80E2","type":"message","text":"What makes you say there are no dependant types in julia? Is the above not a textbook example of a dependant type?","user":"U8D9768Q6","ts":"1610091234.117100","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1610091264.000000"},"blocks":[{"type":"rich_text","block_id":"+ZN0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What makes you say there are no dependant types in julia? Is the above not a textbook example of a dependant type?"}]}]}],"thread_ts":"1609899521.087200","parent_user_id":"U69L6CPJN"},{"client_msg_id":"eee4f5fe-924c-4e3c-a333-0d30eff5de86","type":"message","text":"According to the first sentence of the wikipedia page for dependent types,\n&gt;  In <https://en.wikipedia.org/wiki/Computer_science|computer science> and <https://en.wikipedia.org/wiki/Logic|logic>, a *dependent type* is a type whose definition depends on a value.\nJulia definitely has dependent types. Ex. SVector and Array{T::Type,n::Int}.","user":"U69L6CPJN","ts":"1610118362.117400","team":"T68168MUP","edited":{"user":"U69L6CPJN","ts":"1610118369.000000"},"blocks":[{"type":"rich_text","block_id":"4m2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"According to the first sentence of the wikipedia page for dependent types,\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":" In "},{"type":"link","url":"https://en.wikipedia.org/wiki/Computer_science","text":"computer science"},{"type":"text","text":" and "},{"type":"link","url":"https://en.wikipedia.org/wiki/Logic","text":"logic"},{"type":"text","text":", a "},{"type":"text","text":"dependent type","style":{"bold":true}},{"type":"text","text":" is a type whose definition depends on a value."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Julia definitely has dependent types. Ex. SVector and Array{T::Type,n::Int}."}]}]}],"thread_ts":"1609899521.087200","parent_user_id":"U69L6CPJN"},{"client_msg_id":"CFD39A49-5519-467D-B899-45CE8D26D244","type":"message","text":"They are not “classic” types. They are still values. \n\nDynamic languages conventionally associate a tag value to any given value and make such associations consistent. *While we can also use the term type in a polymorphic way, a type in dependent types refers to a classic “type”, which is static.*\n\nThe reason why it is still not encouraged to mixing “dependent types” and something more of “dependent tags” is the discrepancy of their capabilities.","user":"UF4N4QX71","ts":"1610131385.134100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fNyD=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"They are not “classic” types. They are still values. \n\nDynamic languages conventionally associate a tag value to any given value and make such associations consistent. "},{"type":"text","text":"While we can also use the term type in a polymorphic way, a type in dependent types refers to a classic “type”, which is static.","style":{"bold":true}},{"type":"text","text":"\n"},{"type":"text","text":"\n"},{"type":"text","text":"The reason why it is still not encouraged to mixing “dependent types” and something more of “dependent tags” is the discrepancy of their capabilities."}]}]}],"thread_ts":"1609899521.087200","parent_user_id":"U69L6CPJN"},{"client_msg_id":"56633AC7-2552-4D91-A327-99EF58BB5B51","type":"message","text":"Current use of types/functors are already adhoc enough and continue misleading people other than serious researchers on related topics. This makes introducing useful concepts from minority fields harder, and keeping abusing might finally let humans gradually loss the existing fields and corresponding achievements. \n\nMy standpoint here is that I don’t want to see classic “dependent types” get mixed with their seemingly counterparts. I admit the latter is also useful, especially for optimizations, but I also respect what the former one is leveraged to address.","user":"UF4N4QX71","ts":"1610132399.149100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tsR23","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Current use of types/functors are already adhoc enough and continue misleading people other than serious researchers on related topics. This makes introducing useful concepts from minority fields harder, and keeping abusing might finally let humans gradually loss the existing fields and corresponding achievements. \n\nMy standpoint here is that I don’t want to see classic “dependent types” get mixed with their seemingly counterparts. I admit the latter is also useful, especially for optimizations, but I also respect what the former one is leveraged to address."}]}]}],"thread_ts":"1609899521.087200","parent_user_id":"U69L6CPJN"},{"client_msg_id":"7D9DA4C5-12B1-4182-80AF-E0842CDD165C","type":"message","text":"Many definitions from PL fields can be out-of-date partly because the development of this field is so rapid. The problematic terminologies contain too many commonly used ones such as “Functional Programming”, “Object-oriented Programming”, “LISP”, etc.\n\nFurther, when mathematicians define some term, they might not exactly refer to what you mean by that term. Instead, the both are sometimes coincidentally the same.","user":"UF4N4QX71","ts":"1610132829.156800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rlLb9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Many definitions from PL fields can be out-of-date partly because the development of this field is so rapid. The problematic terminologies contain too many commonly used ones such as “Functional Programming”, “Object-oriented Programming”, “LISP”, etc.\n\nFurther, when mathematicians define some term, they might not exactly refer to what you mean by that term. Instead, the both are sometimes coincidentally the same."}]}]}],"thread_ts":"1609899521.087200","parent_user_id":"U69L6CPJN"},{"client_msg_id":"92fdf85b-14b4-45f3-a0e0-216b69711957","type":"message","text":"I think this is consistence with my original statement that when people say \"julia doesn't have dependent types\" they are really saying \"julia doesn't have types\"","user":"U69L6CPJN","ts":"1610133497.157100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mNz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think this is consistence with my original statement that when people say \"julia doesn't have dependent types\" they are really saying \"julia doesn't have types\""}]}]}],"thread_ts":"1609899521.087200","parent_user_id":"U69L6CPJN","reactions":[{"name":"+1","users":["UF4N4QX71"],"count":1}]},{"client_msg_id":"96954cb3-1c68-47c7-b2c8-80369ec59b01","type":"message","text":"Yeah, I find this to be a pretty unconvincing objection.","user":"U8D9768Q6","ts":"1610133770.162200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lJlU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, I find this to be a pretty unconvincing objection."}]}]}],"thread_ts":"1609899521.087200","parent_user_id":"U69L6CPJN"},{"client_msg_id":"727F24B1-1E1A-4DE7-B69E-0216BE3615AD","type":"message","text":"I mean, the term “type” is already used ad-hoc, while “dependent type” is created with different use of “type”.","user":"UF4N4QX71","ts":"1610133926.164500","team":"T68168MUP","edited":{"user":"UF4N4QX71","ts":"1610133959.000000"},"blocks":[{"type":"rich_text","block_id":"SMjrn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean, the term “type” is already used ad-hoc, while “dependent type” is created with different use of “type”."}]}]}],"thread_ts":"1609899521.087200","parent_user_id":"U69L6CPJN"}]