[{"client_msg_id":"e75fcd10-bdb2-47e3-9981-2d887eef5175","type":"message","text":"```julia&gt; a = QuoteNode(:a)\n:(:a)\n\njulia&gt; :((b=2, $(a.value)=1))\n:((b = 2, a = 1))```","user":"U8D9768Q6","ts":"1615422617.012400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FTvc9","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> a = QuoteNode(:a)\n:(:a)\n\njulia> :((b=2, $(a.value)=1))\n:((b = 2, a = 1))"}]}]}],"thread_ts":"1615422617.012400","reply_count":16,"reply_users_count":3,"latest_reply":"1615453823.019400","reply_users":["U016RL8KEHX","U8D9768Q6","U68QW0PUZ"],"subscribed":false,"reactions":[{"name":"heart","users":["U016RL8KEHX"],"count":1},{"name":"thumbsup_all","users":["U016RL8KEHX"],"count":1}]},{"client_msg_id":"70a1da3d-6319-42a2-b099-1cf2589f7e4b","type":"message","text":"Ah, cool! Az first I wanted to check what QuoteNode is with @edit but the sourcecode didn’t really helped, but this is so cool! :slightly_smiling_face:","user":"U016RL8KEHX","ts":"1615422671.013100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VupRP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, cool! Az first I wanted to check what QuoteNode is with @edit but the sourcecode didn’t really helped, but this is so cool! "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1615422617.012400","parent_user_id":"U8D9768Q6"},{"client_msg_id":"77e17a9f-8db0-4019-b6ea-4ff527f55f62","type":"message","text":"Jepp! It works! :slightly_smiling_face: Cool now I can unwrap any stuct into NamedTuple. :slightly_smiling_face:","user":"U016RL8KEHX","ts":"1615422715.013500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/3Cv7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Jepp! It works! "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":" Cool now I can unwrap any stuct into NamedTuple. "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1615422617.012400","parent_user_id":"U8D9768Q6"},{"client_msg_id":"87f9f727-0483-4dcd-9d86-d972c80632d2","type":"message","text":"`dump` is a good tool for this:\n```julia&gt; dump(QuoteNode(:a))\nQuoteNode\n  value: Symbol a```","user":"U8D9768Q6","ts":"1615422730.013700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NKE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"dump","style":{"code":true}},{"type":"text","text":" is a good tool for this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> dump(QuoteNode(:a))\nQuoteNode\n  value: Symbol a"}]}]}],"thread_ts":"1615422617.012400","parent_user_id":"U8D9768Q6","reactions":[{"name":"white_check_mark","users":["U016RL8KEHX"],"count":1}]},{"client_msg_id":"a9f27c7f-e617-4ea9-b663-a97420ac0a32","type":"message","text":"Happy I could help","user":"U8D9768Q6","ts":"1615422753.013900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"veN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Happy I could help"}]}]}],"thread_ts":"1615422617.012400","parent_user_id":"U8D9768Q6","reactions":[{"name":"heart","users":["U016RL8KEHX"],"count":1}]},{"client_msg_id":"9bba217d-862b-4265-b5b9-dbbbed71cdea","type":"message","text":"Ho, dump could help! Wow! I knew abuot dump, but didn’t think it would help in these situations :heart: :slightly_smiling_face:","user":"U016RL8KEHX","ts":"1615422825.014100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vSps","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ho, dump could help! Wow! I knew abuot dump, but didn’t think it would help in these situations "},{"type":"emoji","name":"heart"},{"type":"text","text":" "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1615422617.012400","parent_user_id":"U8D9768Q6"},{"client_msg_id":"7831d0f7-9bad-43e6-a7aa-5a8bfed0eaba","type":"message","text":"this AST level strcut to namedtuple transformation is not an effective thing, but I needed to handle structs at the AST level :slightly_smiling_face:","user":"U016RL8KEHX","ts":"1615422854.014300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2IX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this AST level strcut to namedtuple transformation is not an effective thing, but I needed to handle structs at the AST level "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1615422617.012400","parent_user_id":"U8D9768Q6"},{"client_msg_id":"b0848501-c38d-4f6e-8190-673a6b99dede","type":"message","text":"and don’T need to be supereffective as for now, it is just an MVP I am creating :slightly_smiling_face:","user":"U016RL8KEHX","ts":"1615422870.014500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KeOL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and don’T need to be supereffective as for now, it is just an MVP I am creating "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1615422617.012400","parent_user_id":"U8D9768Q6"},{"client_msg_id":"f4a63c59-e2a6-4645-9bcd-2301358a47cf","type":"message","text":"I think a macro is the wrong level of abstraction for this. Instead, I'd use a generated function.\n```julia&gt; @generated function to_nt(x::T) where T\n           if isstructtype(T)\n               Expr(:tuple, :(T = $T), [:($n = to_nt(getfield(x, $(QuoteNode(n))))) for n in fieldnames(T)]...)\n           else\n               :(x)\n           end\n       end\nto_nt (generic function with 1 method)\n\njulia&gt; to_nt(1//2 + im//3)\n(T = Complex{Rational{Int64}}, re = (T = Rational{Int64}, num = 1, den = 2), im = (T = Rational{Int64}, num = 1, den = 3))```","user":"U8D9768Q6","ts":"1615423207.015000","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1615423641.000000"},"blocks":[{"type":"rich_text","block_id":"8a2s","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think a macro is the wrong level of abstraction for this. Instead, I'd use a generated function.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @generated function to_nt(x::T) where T\n           if isstructtype(T)\n               Expr(:tuple, :(T = $T), [:($n = to_nt(getfield(x, $(QuoteNode(n))))) for n in fieldnames(T)]...)\n           else\n               :(x)\n           end\n       end\nto_nt (generic function with 1 method)\n\njulia> to_nt(1//2 + im//3)\n(T = Complex{Rational{Int64}}, re = (T = Rational{Int64}, num = 1, den = 2), im = (T = Rational{Int64}, num = 1, den = 3))"}]}]}],"thread_ts":"1615422617.012400","parent_user_id":"U8D9768Q6"},{"client_msg_id":"b8b4d286-48e0-45a3-b0d8-744ba24acaa6","type":"message","text":"<@U8D9768Q6> is there a typo in your `to_nt` ?\n```@generated function to_nt(x::T) where T\n  if isstructtype(T)\n    Expr(:tuple, :(T = $T), \n         [:($n = to_nt(getfield(x, $(QuoteNode(n))))) \n           for n in fieldnames(T)]...)\n  else\n    :(x)\n  end\nend\n\nstruct Holiday\n  event::String\n  year::Int64\nend\n\nboxing_day = Holiday(\"Boxing Day\", 2021)\n#                                          should boxing_day be either of these\n# (T = Holiday, event = \"Boxing Day\", year = 2021)\n# (T = Holiday, event = (T = String, \"Boxing Day\"), year = (T = Int64, 2021))\n\njulia&gt; boxing_day_as_nt = to_nt(boxing_day)\n(T = Holiday, event = (T = String,), year = 2021)```\n``````","user":"U68QW0PUZ","ts":"1615444100.015900","team":"T68168MUP","edited":{"user":"U68QW0PUZ","ts":"1615445597.000000"},"blocks":[{"type":"rich_text","block_id":"9rE9","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U8D9768Q6"},{"type":"text","text":" is there a typo in your "},{"type":"text","text":"to_nt","style":{"code":true}},{"type":"text","text":" ?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@generated function to_nt(x::T) where T\n  if isstructtype(T)\n    Expr(:tuple, :(T = $T), \n         [:($n = to_nt(getfield(x, $(QuoteNode(n))))) \n           for n in fieldnames(T)]...)\n  else\n    :(x)\n  end\nend\n\nstruct Holiday\n  event::String\n  year::Int64\nend\n\nboxing_day = Holiday(\"Boxing Day\", 2021)\n#                                          should boxing_day be either of these\n# (T = Holiday, event = \"Boxing Day\", year = 2021)\n# (T = Holiday, event = (T = String, \"Boxing Day\"), year = (T = Int64, 2021))\n\njulia> boxing_day_as_nt = to_nt(boxing_day)\n(T = Holiday, event = (T = String,), year = 2021)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[]}]}],"thread_ts":"1615422617.012400","parent_user_id":"U8D9768Q6"},{"client_msg_id":"7AB9A35F-4B65-41CB-A6AC-1037989F2429","type":"message","text":"Oh interesting. I didn’t realize that `String` counted as a `structtype`. This code will also fail on Tuple and Arrays. ","user":"U8D9768Q6","ts":"1615448296.018200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yI3QT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh interesting. I didn’t realize that "},{"type":"text","text":"String","style":{"code":true}},{"type":"text","text":" counted as a "},{"type":"text","text":"structtype","style":{"code":true}},{"type":"text","text":". This code will also fail on Tuple and Arrays. "}]}]}],"thread_ts":"1615422617.012400","parent_user_id":"U8D9768Q6"},{"client_msg_id":"458a83ad-dab2-4ebe-b859-d97a131d8ace","type":"message","text":"We have a way to do this that carries itself more elegantly, right?","user":"U68QW0PUZ","ts":"1615450069.018400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KvT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We have a way to do this that carries itself more elegantly, right?"}]}]}],"thread_ts":"1615422617.012400","parent_user_id":"U8D9768Q6"},{"client_msg_id":"256765ff-0dbb-4a4b-8dec-ada94ea8e8db","type":"message","text":"You guys are crazy, wow! :slightly_smiling_face: Basically I am doing a XGrad like AST based AD library and having multiple possible ways to handle structs feels pretty insane. :blush:","user":"U016RL8KEHX","ts":"1615451260.018600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oQJPA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You guys are crazy, wow! "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":" Basically I am doing a XGrad like AST based AD library and having multiple possible ways to handle structs feels pretty insane. "},{"type":"emoji","name":"blush"}]}]}],"thread_ts":"1615422617.012400","parent_user_id":"U8D9768Q6"},{"client_msg_id":"2fbab495-2cf9-4a36-bb5b-7e4fa079f291","type":"message","text":"What I am afraid of is that, I preallocate fields in structs which are not used, and are too complex to preallocate, because sometimes structs are not really for autodiff-ing.","user":"U016RL8KEHX","ts":"1615453453.018800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2pzu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What I am afraid of is that, I preallocate fields in structs which are not used, and are too complex to preallocate, because sometimes structs are not really for autodiff-ing."}]}]}],"thread_ts":"1615422617.012400","parent_user_id":"U8D9768Q6"},{"client_msg_id":"e11f9c15-13d8-4b78-b139-1b2a32877e55","type":"message","text":"what? why would you be using a struct that has more fields than you actually use? Are these structs coming to you from another application?","user":"U68QW0PUZ","ts":"1615453529.019000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hyaK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what? why would you be using a struct that has more fields than you actually use? Are these structs coming to you from another application?"}]}]}],"thread_ts":"1615422617.012400","parent_user_id":"U8D9768Q6"},{"client_msg_id":"13268f8e-feca-4e4f-a5ed-e58076b6abc0","type":"message","text":"and .. how do you preallocate fields that are too complex to preallocate?","user":"U68QW0PUZ","ts":"1615453583.019200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sqtuq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and .. how do you preallocate fields that are too complex to preallocate?"}]}]}],"thread_ts":"1615422617.012400","parent_user_id":"U8D9768Q6"},{"client_msg_id":"25b218c9-2346-48f7-9a07-b56f2fe8771f","type":"message","text":"and .. unless these structs are huge and you run through millions of them, why worry?","user":"U68QW0PUZ","ts":"1615453823.019400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W0wTP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and .. unless these structs are huge and you run through millions of them, why worry?"}]}]}],"thread_ts":"1615422617.012400","parent_user_id":"U8D9768Q6"}]