[{"client_msg_id":"cbeae3a1-c8ec-457d-9e38-4fdb0fa3222f","type":"message","text":"What's the status of using directional statistics in Turing? In particular, I want to estimate a parameter in `SO(3)`, like a rotation matrix or a unit quaternion. I've tried\n<https://github.com/JuliaStats/Distributions.jl/blob/master/src/multivariate/vonmisesfisher.jl>\nbut no bijector was defined for that distribution. I've also read this thread\n<https://discourse.julialang.org/t/rfc-taking-directional-orientational-statistics-seriously/31951>\nbut didn't know what to make of it. I'm looking at <https://juliamanifolds.github.io/Manifolds.jl/latest/features/distributions.html> but can honestly say I have no idea if it's applicable to my example or not :flushed:","user":"UJ7DVTVQ8","ts":"1616848997.030900","team":"T68168MUP","attachments":[{"service_name":"JuliaLang","title":"[RFC] Taking directional/orientational statistics seriously","title_link":"https://discourse.julialang.org/t/rfc-taking-directional-orientational-statistics-seriously/31951","text":"To my knowledge, there are no Julia packages with good support for directional and orientational statistics. Directional statistics is used in biology (especially structural biology), crystallography, astronomy, and various other physics applications including geophysics. Distributions.jl implements VonMises for circular variables (angles) and VonMisesFisher for spherical variables (unit vectors), but that‚Äôs it. No orientational distributions are implemented. From the discussion on slack, it s...","fallback":"JuliaLang: [RFC] Taking directional/orientational statistics seriously","thumb_url":"https://aws1.discourse-cdn.com/business5/uploads/julialang/original/2X/1/12829a7ba92b924d4ce81099cbf99785bee9b405.png","fields":[{"title":"Reading time","value":"3 mins :clock2:","short":true},{"title":"Likes","value":"35 :heart:","short":true}],"ts":1575675866,"from_url":"https://discourse.julialang.org/t/rfc-taking-directional-orientational-statistics-seriously/31951","thumb_width":408,"thumb_height":263,"service_icon":"https://aws1.discourse-cdn.com/business5/uploads/julialang/optimized/2X/6/6ca888e296f59ca2a599807f7d5edd489e3d1829_2_180x180.png","id":1,"original_url":"https://discourse.julialang.org/t/rfc-taking-directional-orientational-statistics-seriously/31951"}],"blocks":[{"type":"rich_text","block_id":"gq6IJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What's the status of using directional statistics in Turing? In particular, I want to estimate a parameter in "},{"type":"text","text":"SO(3)","style":{"code":true}},{"type":"text","text":", like a rotation matrix or a unit quaternion. I've tried\n"},{"type":"link","url":"https://github.com/JuliaStats/Distributions.jl/blob/master/src/multivariate/vonmisesfisher.jl"},{"type":"text","text":"\nbut no bijector was defined for that distribution. I've also read this thread\n"},{"type":"link","url":"https://discourse.julialang.org/t/rfc-taking-directional-orientational-statistics-seriously/31951"},{"type":"text","text":"\nbut didn't know what to make of it. I'm looking at "},{"type":"link","url":"https://juliamanifolds.github.io/Manifolds.jl/latest/features/distributions.html"},{"type":"text","text":" but can honestly say I have no idea if it's applicable to my example or not "},{"type":"emoji","name":"flushed"}]}]}],"thread_ts":"1616848997.030900","reply_count":3,"reply_users_count":2,"latest_reply":"1616876990.031900","reply_users":["U85JBUGGP","UHDQQ4GN6"],"is_locked":false,"subscribed":false},{"client_msg_id":"d7bda83b-88a1-468f-8b4c-70ac35ee4d6f","type":"message","text":"Last I checked it was a special function blocking it because it won‚Äôt take in duals. See <https://discourse.julialang.org/t/stackoverflowerror-when-fitting-data-to-a-von-mises-distribution/45406>.","user":"U85JBUGGP","ts":"1616852077.031100","team":"T68168MUP","edited":{"user":"U85JBUGGP","ts":"1616852085.000000"},"attachments":[{"service_name":"JuliaLang","title":"StackOverflowError when fitting data to a von Mises distribution","title_link":"https://discourse.julialang.org/t/stackoverflowerror-when-fitting-data-to-a-von-mises-distribution/45406","text":"Hi everyone. I‚Äôm trying to use Turing.jl to fit data to a von Mises circular distribution, and I am having some ‚Äústack overflow‚Äù issues during the fitting. This is my (very simple) code (coin flip adaptation): using Turing using Distributions Œº = 0; Œ∫ = 517 vm = VonMises(Œº, Œ∫) data = rand(vm, 100) @model model(x) = begin Œº ~ Normal(0, 10) Œ∫ ~ Uniform(450, 550) N = length(x) for n in 1:N x[n] ~ VonMises(Œº, Œ∫) end end œµ = 0.05 œÑ = 10 iterations = 1000 chain = sam...","fallback":"JuliaLang: StackOverflowError when fitting data to a von Mises distribution","thumb_url":"https://aws1.discourse-cdn.com/business5/uploads/julialang/original/2X/1/12829a7ba92b924d4ce81099cbf99785bee9b405.png","fields":[{"title":"Reading time","value":"1 mins :clock2:","short":true},{"title":"Likes","value":"3 :heart:","short":true}],"ts":1598171181,"from_url":"https://discourse.julialang.org/t/stackoverflowerror-when-fitting-data-to-a-von-mises-distribution/45406","thumb_width":408,"thumb_height":263,"service_icon":"https://aws1.discourse-cdn.com/business5/uploads/julialang/optimized/2X/6/6ca888e296f59ca2a599807f7d5edd489e3d1829_2_180x180.png","id":1,"original_url":"https://discourse.julialang.org/t/stackoverflowerror-when-fitting-data-to-a-von-mises-distribution/45406"}],"blocks":[{"type":"rich_text","block_id":"fYL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Last I checked it was a special function blocking it because it won‚Äôt take in duals. See "},{"type":"link","url":"https://discourse.julialang.org/t/stackoverflowerror-when-fitting-data-to-a-von-mises-distribution/45406"},{"type":"text","text":"."}]}]}],"thread_ts":"1616848997.030900","parent_user_id":"UJ7DVTVQ8"},{"client_msg_id":"4c69d582-8552-41df-86cc-3834b36d1cbc","type":"message","text":"I haven't begun work on the proposal for Manifold statistics yet due to time constraints. And when I do, I might use MeasureTheory.jl for it instead of Distributions,jl. You can easily define a distribution on SO(3) or S^3 using the distribution types defined for Manifolds. But to use it in a PPL, more work is needed; the Manifolds types are a bit overkill here.\n\nIn particular, to define directional variables in Turing, one would need a map from the latent (unconstrained) space to parameter space. For the sphere in particular, every bijective map will have singularities that induce numerical instability; this is fine if you know your variables will never take on values near the singularity. An alternative is to use the trick Stan uses, where an unconstrained 4-vector is sampled and projected to the sphere via normalization, but this requires a non-bijective map (see <https://github.com/TuringLang/Bijectors.jl/issues/58> for ongoing discussion)\n\nThe quick-and-dirty way to do this now is something like this (untested):\n\n```Turing.@model function vMF_model(Œº, Œ∫, y)\n    x ~ MvNormal(4, 1)\n    q = x / norm(x)  # uniform base measure on ùïä¬≥\n    Turing.@addlogprob! logpdf_vMF(q, Œº, Œ∫) # vMF density wrt uniform measure on S¬≥\n    y ~ ... # some likelihood\nend\n\n# constant included for completeness\nlogpdf_vMF(x, Œº, Œ∫) = Distributions.vmflck(length(Œº), Œ∫) + Œ∫ * dot(Œº, x)```","user":"UHDQQ4GN6","ts":"1616876358.031700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yOqxN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I haven't begun work on the proposal for Manifold statistics yet due to time constraints. And when I do, I might use MeasureTheory.jl for it instead of Distributions,jl. You can easily define a distribution on SO(3) or S^3 using the distribution types defined for Manifolds. But to use it in a PPL, more work is needed; the Manifolds types are a bit overkill here.\n\nIn particular, to define directional variables in Turing, one would need a map from the latent (unconstrained) space to parameter space. For the sphere in particular, every bijective map will have singularities that induce numerical instability; this is fine if you know your variables will never take on values near the singularity. An alternative is to use the trick Stan uses, where an unconstrained 4-vector is sampled and projected to the sphere via normalization, but this requires a non-bijective map (see "},{"type":"link","url":"https://github.com/TuringLang/Bijectors.jl/issues/58"},{"type":"text","text":" for ongoing discussion)\n\nThe quick-and-dirty way to do this now is something like this (untested):\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Turing.@model function vMF_model(Œº, Œ∫, y)\n    x ~ MvNormal(4, 1)\n    q = x / norm(x)  # uniform base measure on ùïä¬≥\n    Turing.@addlogprob! logpdf_vMF(q, Œº, Œ∫) # vMF density wrt uniform measure on S¬≥\n    y ~ ... # some likelihood\nend\n\n# constant included for completeness\nlogpdf_vMF(x, Œº, Œ∫) = Distributions.vmflck(length(Œº), Œ∫) + Œ∫ * dot(Œº, x)"}]}]}],"thread_ts":"1616848997.030900","parent_user_id":"UJ7DVTVQ8"},{"client_msg_id":"d5d35f51-4af1-4ce1-9ca3-01e4ae89b926","type":"message","text":"Note that for a unit quaternion, where antipodal points correspond to the same rotation, you probably want an axial distribution, not a directional one. Also, because the posterior will be bimodal wrt the quaternion, expect diagnostics like rhat to fail. You can post-process the sampled quaternions to standardize them using Manifolds' projective space implementation (see <https://juliamanifolds.github.io/Manifolds.jl/stable/manifolds/projectivespace.html>), in which case the diagnostics should then work. Let me know if interested and I can give more details.","user":"UHDQQ4GN6","ts":"1616876990.031900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ge2fT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Note that for a unit quaternion, where antipodal points correspond to the same rotation, you probably want an axial distribution, not a directional one. Also, because the posterior will be bimodal wrt the quaternion, expect diagnostics like rhat to fail. You can post-process the sampled quaternions to standardize them using Manifolds' projective space implementation (see "},{"type":"link","url":"https://juliamanifolds.github.io/Manifolds.jl/stable/manifolds/projectivespace.html"},{"type":"text","text":"), in which case the diagnostics should then work. Let me know if interested and I can give more details."}]}]}],"thread_ts":"1616848997.030900","parent_user_id":"UJ7DVTVQ8"}]