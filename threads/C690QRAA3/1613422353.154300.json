[{"client_msg_id":"7cfaffd7-328b-4a29-a8cc-45699e2c12d7","type":"message","text":"Does anyone know what the following error means when getting a gradient for a simple Flux model on Julia 1.6?\n```ERROR: LoadError: MethodError: no method matching eval(::IRTools.Inner.Undefined, ::Symbol)\nClosest candidates are:\n  eval(::Module, ::Any) at boot.jl:360\nStacktrace:\n  [1] macro expansion\n    @ ~/.julia/packages/Zygote/Iz3wR/src/compiler/interface2.jl:0 [inlined]\n  [2] _pullback(::Zygote.Context, ::typeof(Core.eval), ::IRTools.Inner.Undefined, ::Symbol)\n    @ Zygote ~/.julia/packages/Zygote/Iz3wR/src/compiler/interface2.jl:9\n  [3] _pullback\n    @ ~/.julia/dev/Dagger/src/compute.jl:76 [inlined]\n  [4] _pullback(ctx::Zygote.Context, f::typeof(Dagger.get_type), args::String)\n    @ Zygote ~/.julia/packages/Zygote/Iz3wR/src/compiler/interface2.jl:0\n  [5] _pullback\n    @ ~/.julia/dev/Dagger/src/compute.jl:29 [inlined]\n  [6] _pullback\n    @ ./dict.jl:465 [inlined]\n  [7] _pullback(::Zygote.Context, ::typeof(get!), ::Dagger.var\"#89#91\", ::Dict{Symbol, Any}, ::Symbol)\n    @ Zygote ~/.julia/packages/Zygote/Iz3wR/src/compiler/interface2.jl:0\n  [8] _pullback\n    @ ~/.julia/dev/Dagger/src/compute.jl:28 [inlined]\n  [9] _pullback(::Zygote.Context, ::Dagger.var\"##compute#88\", ::Nothing, ::typeof(compute), ::Context, ::Thunk)\n    @ Zygote ~/.julia/packages/Zygote/Iz3wR/src/compiler/interface2.jl:0\n [10] _pullback\n    @ ~/.julia/dev/Dagger/src/compute.jl:28 [inlined]\n [11] _pullback(::Zygote.Context, ::Dagger.var\"#compute##kw\", ::NamedTuple{(:options,), Tuple{Nothing}}, ::typeof(compute), ::Context, ::Thunk)\n    @ Zygote ~/.julia/packages/Zygote/Iz3wR/src/compiler/interface2.jl:0\n [12] _pullback\n    @ ~/.julia/dev/Dagger/src/compute.jl:8 [inlined]\n [13] _pullback(::Zygote.Context, ::Dagger.var\"##collect#84\", ::Nothing, ::typeof(collect), ::Context, ::Thunk)\n    @ Zygote ~/.julia/packages/Zygote/Iz3wR/src/compiler/interface2.jl:0\n [14] _pullback\n    @ ~/.julia/dev/Dagger/src/compute.jl:8 [inlined]\n [15] _pullback(::Zygote.Context, ::Base.var\"#collect##kw\", ::NamedTuple{(:options,), Tuple{Nothing}}, ::typeof(collect), ::Context, ::Thunk)\n    @ Zygote ~/.julia/packages/Zygote/Iz3wR/src/compiler/interface2.jl:0\n [16] _pullback```","user":"U6A0PD8CR","ts":"1613422353.154300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YdA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does anyone know what the following error means when getting a gradient for a simple Flux model on Julia 1.6?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"ERROR: LoadError: MethodError: no method matching eval(::IRTools.Inner.Undefined, ::Symbol)\nClosest candidates are:\n  eval(::Module, ::Any) at boot.jl:360\nStacktrace:\n  [1] macro expansion\n    @ ~/.julia/packages/Zygote/Iz3wR/src/compiler/interface2.jl:0 [inlined]\n  [2] _pullback(::Zygote.Context, ::typeof(Core.eval), ::IRTools.Inner.Undefined, ::Symbol)\n    @ Zygote ~/.julia/packages/Zygote/Iz3wR/src/compiler/interface2.jl:9\n  [3] _pullback\n    @ ~/.julia/dev/Dagger/src/compute.jl:76 [inlined]\n  [4] _pullback(ctx::Zygote.Context, f::typeof(Dagger.get_type), args::String)\n    @ Zygote ~/.julia/packages/Zygote/Iz3wR/src/compiler/interface2.jl:0\n  [5] _pullback\n    @ ~/.julia/dev/Dagger/src/compute.jl:29 [inlined]\n  [6] _pullback\n    @ ./dict.jl:465 [inlined]\n  [7] _pullback(::Zygote.Context, ::typeof(get!), ::Dagger.var\"#89#91\", ::Dict{Symbol, Any}, ::Symbol)\n    @ Zygote ~/.julia/packages/Zygote/Iz3wR/src/compiler/interface2.jl:0\n  [8] _pullback\n    @ ~/.julia/dev/Dagger/src/compute.jl:28 [inlined]\n  [9] _pullback(::Zygote.Context, ::Dagger.var\"##compute#88\", ::Nothing, ::typeof(compute), ::Context, ::Thunk)\n    @ Zygote ~/.julia/packages/Zygote/Iz3wR/src/compiler/interface2.jl:0\n [10] _pullback\n    @ ~/.julia/dev/Dagger/src/compute.jl:28 [inlined]\n [11] _pullback(::Zygote.Context, ::Dagger.var\"#compute##kw\", ::NamedTuple{(:options,), Tuple{Nothing}}, ::typeof(compute), ::Context, ::Thunk)\n    @ Zygote ~/.julia/packages/Zygote/Iz3wR/src/compiler/interface2.jl:0\n [12] _pullback\n    @ ~/.julia/dev/Dagger/src/compute.jl:8 [inlined]\n [13] _pullback(::Zygote.Context, ::Dagger.var\"##collect#84\", ::Nothing, ::typeof(collect), ::Context, ::Thunk)\n    @ Zygote ~/.julia/packages/Zygote/Iz3wR/src/compiler/interface2.jl:0\n [14] _pullback\n    @ ~/.julia/dev/Dagger/src/compute.jl:8 [inlined]\n [15] _pullback(::Zygote.Context, ::Base.var\"#collect##kw\", ::NamedTuple{(:options,), Tuple{Nothing}}, ::typeof(collect), ::Context, ::Thunk)\n    @ Zygote ~/.julia/packages/Zygote/Iz3wR/src/compiler/interface2.jl:0\n [16] _pullback"}]}]}],"thread_ts":"1613422353.154300","reply_count":20,"reply_users_count":2,"latest_reply":"1613423819.158600","reply_users":["UM30MT6RF","U6A0PD8CR"],"subscribed":false},{"client_msg_id":"11f83fc1-e50c-433c-bb33-9a11dce63de1","type":"message","text":"So it did work on previous versions?","user":"UM30MT6RF","ts":"1613422734.154700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iyl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So it did work on previous versions?"}]}]}],"thread_ts":"1613422353.154300","parent_user_id":"U6A0PD8CR"},{"client_msg_id":"c6232e19-3129-45f7-b6a1-5cd8b1ef846c","type":"message","text":"I tried on IRTools 0.4.2 and Zygote 0.6.2/0.6.3, and none of them worked","user":"U6A0PD8CR","ts":"1613422763.154900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"l=WJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I tried on IRTools 0.4.2 and Zygote 0.6.2/0.6.3, and none of them worked"}]}]}],"thread_ts":"1613422353.154300","parent_user_id":"U6A0PD8CR"},{"client_msg_id":"b09f3d69-eebd-44f5-8882-6b20adb550e9","type":"message","text":"Is there a way to dump/debug emitted code easily?","user":"U6A0PD8CR","ts":"1613422773.155100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"I02","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a way to dump/debug emitted code easily?"}]}]}],"thread_ts":"1613422353.154300","parent_user_id":"U6A0PD8CR"},{"client_msg_id":"3a6e6784-1037-4351-9e3a-e53c48a0dfd1","type":"message","text":"Or should I just use `@code_lowered` et. al?","user":"U6A0PD8CR","ts":"1613422783.155300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5Jy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Or should I just use "},{"type":"text","text":"@code_lowered","style":{"code":true}},{"type":"text","text":" et. al?"}]}]}],"thread_ts":"1613422353.154300","parent_user_id":"U6A0PD8CR"},{"client_msg_id":"b6bef703-56c1-4150-b598-def6aea1e1b1","type":"message","text":"I usually use Cthulhu","user":"UM30MT6RF","ts":"1613422798.155500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RMA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I usually use Cthulhu"}]}]}],"thread_ts":"1613422353.154300","parent_user_id":"U6A0PD8CR"},{"client_msg_id":"57950377-3ff0-4540-90f4-f9ca340170f6","type":"message","text":"But did this work on Zygote 0.5?","user":"UM30MT6RF","ts":"1613422816.155700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rJhQc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But did this work on Zygote 0.5?"}]}]}],"thread_ts":"1613422353.154300","parent_user_id":"U6A0PD8CR"},{"client_msg_id":"84c251a3-0541-4f06-a47c-7f2fe8466b3d","type":"message","text":"I have no idea, does Zygote 0.5 work on Julia 1.6?","user":"U6A0PD8CR","ts":"1613422844.155900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"q+7Bm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have no idea, does Zygote 0.5 work on Julia 1.6?"}]}]}],"thread_ts":"1613422353.154300","parent_user_id":"U6A0PD8CR"},{"client_msg_id":"72d122f3-5ab7-4a9e-a1c6-8f6660155d45","type":"message","text":"I can test it and find out, but I'm trying to stay on Julia 1.6 if at all possible, since I'm using CUDA.jl master","user":"U6A0PD8CR","ts":"1613422871.156100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5LMO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I can test it and find out, but I'm trying to stay on Julia 1.6 if at all possible, since I'm using CUDA.jl master"}]}]}],"thread_ts":"1613422353.154300","parent_user_id":"U6A0PD8CR"},{"client_msg_id":"7c25ce8b-d77b-44db-9a9f-32248cc342ea","type":"message","text":"No, it does not, but doesn't matter that much. I just thought if it worked previously, that would narrow down the issue","user":"UM30MT6RF","ts":"1613422933.156300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GYsS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No, it does not, but doesn't matter that much. I just thought if it worked previously, that would narrow down the issue"}]}]}],"thread_ts":"1613422353.154300","parent_user_id":"U6A0PD8CR"},{"client_msg_id":"5d5845ef-2386-4a73-b75d-3e5efb7a3583","type":"message","text":"Yeah I have no idea. I'm trying to port someone's Flux model to use Dagger+CUDA for distributed training, but I'm not familiar with how the model itself works, and on what previous versions it did work.","user":"U6A0PD8CR","ts":"1613422992.156500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2RVB9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah I have no idea. I'm trying to port someone's Flux model to use Dagger+CUDA for distributed training, but I'm not familiar with how the model itself works, and on what previous versions it did work."}]}]}],"thread_ts":"1613422353.154300","parent_user_id":"U6A0PD8CR"},{"client_msg_id":"a26f07b8-bd5a-4cbc-ba7a-73d794839b0a","type":"message","text":"From a glance at the stacktrace it looks like it's trying to differentiate something inside Dagger. Perhaps you just need to wrap that part in `Zygote.ignore`","user":"UM30MT6RF","ts":"1613423018.156700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IQ1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"From a glance at the stacktrace it looks like it's trying to differentiate something inside Dagger. Perhaps you just need to wrap that part in "},{"type":"text","text":"Zygote.ignore","style":{"code":true}}]}]}],"thread_ts":"1613422353.154300","parent_user_id":"U6A0PD8CR"},{"client_msg_id":"1cf1a276-7b25-41fe-b49d-103b045d088a","type":"message","text":"Oh crap you're right","user":"U6A0PD8CR","ts":"1613423067.156900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ef77","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh crap you're right"}]}]}],"thread_ts":"1613422353.154300","parent_user_id":"U6A0PD8CR"},{"client_msg_id":"65736a20-fb39-4b54-985f-83333028df68","type":"message","text":"I forgot that Flux uses Zygote to diff through the whole loss function :sweat_smile:","user":"U6A0PD8CR","ts":"1613423090.157100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wWA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I forgot that Flux uses Zygote to diff through the whole loss function "},{"type":"emoji","name":"sweat_smile"}]}]}],"thread_ts":"1613422353.154300","parent_user_id":"U6A0PD8CR","reactions":[{"name":"grin","users":["UM30MT6RF"],"count":1}]},{"client_msg_id":"1b806bb2-3d6a-421b-ba7e-4628c76ee111","type":"message","text":"If it regressed on Zygote 0.6 specifically, it's not unlikely that this is due to Zygote not previously recursing into `getproperty`, but by default just assuming it's equivalent to `getfield`","user":"UM30MT6RF","ts":"1613423099.157300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KWvk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If it regressed on Zygote 0.6 specifically, it's not unlikely that this is due to Zygote not previously recursing into "},{"type":"text","text":"getproperty","style":{"code":true}},{"type":"text","text":", but by default just assuming it's equivalent to "},{"type":"text","text":"getfield","style":{"code":true}}]}]}],"thread_ts":"1613422353.154300","parent_user_id":"U6A0PD8CR"},{"client_msg_id":"c23c88ec-f99e-42c8-8c13-72db67824732","type":"message","text":"So I'm wrapping the actual model within Dagger so that I can distribute batch iterations, but I don't want to even attempt to diff through Dagger's scheduler. Is it possible to not diff just a part of the call chain?","user":"U6A0PD8CR","ts":"1613423290.157600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lTDbX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So I'm wrapping the actual model within Dagger so that I can distribute batch iterations, but I don't want to even attempt to diff through Dagger's scheduler. Is it possible to not diff just a part of the call chain?"}]}]}],"thread_ts":"1613422353.154300","parent_user_id":"U6A0PD8CR"},{"client_msg_id":"e47e4dd1-788f-4031-9bf1-3b083593fcf5","type":"message","text":"```m = mymodel()\nfunction loss(x, y)\n  res = Dagger.@par m(x)\n  mse(res, y)\nend```","user":"U6A0PD8CR","ts":"1613423382.157800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W9A","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"m = mymodel()\nfunction loss(x, y)\n  res = Dagger.@par m(x)\n  mse(res, y)\nend"}]}]}],"thread_ts":"1613422353.154300","parent_user_id":"U6A0PD8CR"},{"client_msg_id":"9c64eeea-a780-4e93-87d4-8a8ce03b34f1","type":"message","text":"I have something basically like that, where Dagger will wrap `m(x)`, do some magic and make it execute on a remote worker, and get back the result as `res`. I want to diff only the `m(x)` part of that line.","user":"U6A0PD8CR","ts":"1613423434.158000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"t+uH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have something basically like that, where Dagger will wrap "},{"type":"text","text":"m(x)","style":{"code":true}},{"type":"text","text":", do some magic and make it execute on a remote worker, and get back the result as "},{"type":"text","text":"res","style":{"code":true}},{"type":"text","text":". I want to diff only the "},{"type":"text","text":"m(x)","style":{"code":true}},{"type":"text","text":" part of that line."}]}]}],"thread_ts":"1613422353.154300","parent_user_id":"U6A0PD8CR"},{"client_msg_id":"be17edf6-f9d5-49bb-9cfa-c35544e2889b","type":"message","text":"TBH I don't know much about Dagger. The easiest way to prevent Zygote from differentiating something is to wrap the code that it should not diff through in\n```Zygote.ignore() do\n...\nend\n```\nbut in this case, the better way might be to define a custom adjoint for whatever function call `Dagger.@par` expands to.","user":"UM30MT6RF","ts":"1613423518.158200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kzpD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"TBH I don't know much about Dagger. The easiest way to prevent Zygote from differentiating something is to wrap the code that it should not diff through in\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Zygote.ignore() do\n...\nend\n"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"but in this case, the better way might be to define a custom adjoint for whatever function call "},{"type":"text","text":"Dagger.@par","style":{"code":true}},{"type":"text","text":" expands to."}]}]}],"thread_ts":"1613422353.154300","parent_user_id":"U6A0PD8CR"},{"client_msg_id":"3bdcaec7-13dd-4633-bd4b-4045549dde3c","type":"message","text":"Oh that makes sense. I can borrow the adjoint definition for `pmap` probably. Thanks!","user":"U6A0PD8CR","ts":"1613423747.158400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qVO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh that makes sense. I can borrow the adjoint definition for "},{"type":"text","text":"pmap","style":{"code":true}},{"type":"text","text":" probably. Thanks!"}]}]}],"thread_ts":"1613422353.154300","parent_user_id":"U6A0PD8CR"},{"client_msg_id":"d4345c85-6b6a-40c2-a690-eb56e6b4f1a3","type":"message","text":"Yeah, that sounds like a good idea. You're welcome!","user":"UM30MT6RF","ts":"1613423819.158600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"u+I7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, that sounds like a good idea. You're welcome!"}]}]}],"thread_ts":"1613422353.154300","parent_user_id":"U6A0PD8CR"}]