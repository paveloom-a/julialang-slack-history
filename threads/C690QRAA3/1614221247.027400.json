[{"client_msg_id":"cc266ff9-240c-4547-b696-0a0973936a96","type":"message","text":"<https://bartwronski.com/2021/02/15/bilinear-down-upsampling-pixel-grids-and-that-half-pixel-offset/>","user":"U67BJLYCS","ts":"1614221247.027400","team":"T68168MUP","attachments":[{"service_name":"Bart Wronski","service_url":"http://bartwronski.com","title":"Bilinear down/upsampling, aligning pixel grids, and that infamous GPU half pixel offset","title_link":"https://bartwronski.com/2021/02/15/bilinear-down-upsampling-pixel-grids-and-that-half-pixel-offset/","author_name":"bartwronski","author_link":"https://bartwronski.com/author/bartwronski/","thumb_url":"https://bartwronski.files.wordpress.com/2021/02/box_then_even_odd-6.gif?fit=200%2C150","thumb_width":150,"thumb_height":150,"text":"See this ugly pixel shift when upsampling a downsampled image? My post describes where it can come from and how to avoid those! \n\n\n\nIt&rsquo;s been more than two decades of me using bilinear texture filtering, a few months since I&rsquo;ve written about bilinear resampling, but only two days since I discovered a bug of mine related to it. &#128517; Similarly, just last week a colleague asked for a very fast implementation of bilinear on a CPU and it caused a series of questions &ldquo;which kind of bilinear?&rdquo;.\n\n\n\nSo I figured it&rsquo;s an opportunity for another short blog post &ndash; on bilinear filtering, but in context of down/upsampling. We will touch here on GPU half pixel offsets, aligning pixel grids, a bug / confusion in Tensorflow, deeper signal processing analysis of what&rsquo;s going on during bilinear operations, and analysis of the magic of the famous &ldquo;magic kernel&rdquo;.\n\n\n\nI highly recommend my previous post as a primer on the topic, as I&rsquo;ll use some of the tools and terminology from there, but it&rsquo;s not strictly required. Let&rsquo;s go!\n\n\n\nBilinear confusion\n\n\n\nThe term bilinear upsampling and downsampling is used a lot, but what does it mean?&nbsp;\n\n\n\nOne of the few ideas I&rsquo;d like to convey in this post is that bilinear upsampling / downsampling doesn&rsquo;t have a single meaning or a consensus around this term use. Which is kind of surprising for a bread and butter type of image processing operation that is used all the time!\n\n\n\nIt&rsquo;s also surprisingly hard to get it right even by image processing professionals, and a source of long standing bugs and confusion in top libraries (and I know of some actual production bugs caused by this Tensorflow inconsistency)!\n\n\n\nEdit: there&rsquo;s a blog post titled &ldquo;How Tensorflow&rsquo;s tf.image.resize stole 60 days of my life&rdquo; and it&rsquo;s describing same issue. I know of some of my colleagues that spent months on fixing it in Tensorflow 2 &ndash; imagine effort of fixing incorrect uses and &ldquo;fixing&rdquo; already trained models that were trained around this bug&hellip; \n\n\n\nImage credit/source: Oleksandr Savsunenko\n\n\n\nSome parts of it like phase shifting are so tricky that a famous blog post of &ldquo;magic kernel&rdquo; comes up every few years and again, experts re(read) it a few times to figure out what&rsquo;s going on there, while the author simply rediscovered the bilinear! (Important note: I don&rsquo;t want to pick on the author, far from it, as he is a super smart and knowledgeable person, and willingness to share insights is always respect worthy. &ldquo;Magic kernel&rdquo; is just an example of why it&rsquo;s so hard and confusing to talk about &ldquo;bilinear&rdquo;. I also respect how he amended and improved the post multiple times. But there is no &ldquo;magic kernel&rdquo;.)\n\n\n\nSo let&rsquo;s have a look at what&rsquo;s the problem. I will focus here exclusively on 2x up/downsampling and hope that some thought framework I propose and use here will be beneficial for you to also look at and analyze different (and non-integer factors).\n\n\n\nBecause of bilinear separability, I will again abuse the notation and call &ldquo;bilinear&rdquo; a filter when applied to 1D signals and generally a lot of my analysis will be in 1D.\n\n\n\nBilinear downsampling and upsampling\n\n\n\nWhat do we mean by bilinear upsampling?\n\n\n\nLet&rsquo;s start with the most simple explanation, without the nitty gritty: it is creating a larger resolution image where every sample is created from bilinear filtering of a smaller resolution image.\n\n\n\nFor the bilinear downsampling, things get a bit muddy. It is using a bilinear filter to prevent signal aliasing when decimating the input image &ndash; ugh, lots of technical terms. I will circle back to it, but first address the first common confusion.\n\n\n\nIs this box or bilinear downsampling? Two ways of addressing it\n\n\n\nWhen downsampling images by 2, we every often use terms box filter and bilinear filter interchangeably. And both can be correct. How so?\n\n\n\nLet&rsquo;s have a look at the following diagram:&nbsp;\n\n\n\n(Bi)linear vs box downsampling give us the same effective weights. Black dots represent pixel centers, upper row is the target/low resolution texture, and the bottom row the source, higher resolution one. Blue lines represents discretized weights of the kernel. \n\n\n\nWe can see that a 2 tap box filter is the same as a 2 tap bilinear filter. The reason for it is that in this case, both filters are centered between the pixels. After discretizing them (evaluating filter weights at sample points), there is no difference, as we no longer know what was the formula to generate them, and how the filter kernel looked outside of the evaluation points.\n\n\n\nThe most typical way of doing bilinear downsampling is the same as box downsampling. Using those two names for 2x downsampling interchangeably is both correct! (Side note: Things diverge when taking about more than 2x downsampling. This might be a good topic for another blog post.) For 1D signals it means averaging every two elements together, for 2D images averaging 4 elements to produce a single one.\n\n\n\nYou might have noticed something that I implicitly assumed there &ndash; pixel centers there were shifted by half a pixel, and the edges/corners were aligned.\n\n\n\nThere is &ldquo;another way&rdquo; of doing bilinear downsampling, like this:\n\n\n\nA second take on bilinear downsampling &ndash; this time with pixel centers (black dots) aligned. Again the source image / signal is on the bottom, target signal on the top.\n\n\n\nThis one definitely and clearly is also a linear tent, and it doesn&rsquo;t shift pixel centers. The resulting filter weights of [0.25 0.5 0.25] are also called a [1 2 1] filter, or the simplest case of a binomial filter, a very reasonable approximation to a Gaussian filter. (To understand why, see what happens to the binomial distribution as the trial count goes to infinity!). It&rsquo;s probably the filter I use the most in my work, but I digress. &#128578;\n\n\n\nWhy this second method is not used that much? This is by design and a reason for half texel shifts in GPU coordinates / samplers, and you might have noticed the problem &ndash; the last texel of high resolution array gets discarded. But let&rsquo;s not get ahead of ourselves, first we can have a look at the relationship with upsampling.\n\n\n\nTwo ways of bilinear upsampling &ndash; which one is &ldquo;proper&rdquo;?\n\n\n\nIf you were to design a bilinear upsampling algorithm, there are a few ways to address it.\n\n\n\nLet me start with a &ldquo;naive&rdquo; one that can have problems. We can take every original pixel, and between them just place averages of the other ones.\n\n\n\nNaive bilinear upsampling when pixel centers are aligned. Some pixels receive a copy of the source (green line), the other ones (alternating) a blend between two neighbors.\n\n\n\nIs it bilinear / tent? Yes, it&rsquo;s a tent filter on zero-inserted image (more on it later). It has an unusual property; some pixels get blurred, some pixels stay &ldquo;sharp&rdquo; (original copied).\n\n\n\nBut more importantly, if you do box/bilinear downsampling as described above, and then upsample an image, it will be shifted:\n\n\n\nUsing box downsampling, and then copy / interpolate upsampling shifts the image by half a pixel. This is a wrong way to do it! \n\n\n\nOr rather &ndash; it will not correct for the half pixel shift created by downsampling.\n\n\n\nIt will work however with downsampling using the second method. The second method interpolates every single output pixel; all are interpolated:\n\n\n\nWhen done properly, bilinear down/upsample doesn&rsquo;t shift the image.\n\n\n\nThis another way of doing bilinear upsampling that might first feel initially unintuitive: every pixel is 0.75 of one pixel, and 0.25 of another one, alternating &ldquo;to the left&rdquo; and &ldquo;to the right&rdquo;. This is exactly what a GPU does when you upsample a texture by 2x:\n\n\n\n\n\n\n\nThe…","fallback":"Bart Wronski Link: Bilinear down/upsampling, aligning pixel grids, and that infamous GPU half pixel&nbsp;offset","from_url":"https://bartwronski.com/2021/02/15/bilinear-down-upsampling-pixel-grids-and-that-half-pixel-offset/","service_icon":"https://s2.wp.com/i/webclip.png","id":1,"original_url":"https://bartwronski.com/2021/02/15/bilinear-down-upsampling-pixel-grids-and-that-half-pixel-offset/"}],"blocks":[{"type":"rich_text","block_id":"V2pej","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://bartwronski.com/2021/02/15/bilinear-down-upsampling-pixel-grids-and-that-half-pixel-offset/"}]}]}],"thread_ts":"1614221247.027400","reply_count":1,"reply_users_count":1,"latest_reply":"1614237379.027600","reply_users":["UBVE598BC"],"subscribed":false},{"client_msg_id":"8d243a47-1be1-4162-a75d-e433bad97a79","type":"message","text":"Having control of your imaging geometry conventions is super important. We had a project at work which was sloppy about it and the segmentation model they produced made predictions which were systematically two(!) pixels off without anybody having a clue why. It was easy enough to work around but it took a year to get it fully sorted out.","user":"UBVE598BC","ts":"1614237379.027600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AL3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Having control of your imaging geometry conventions is super important. We had a project at work which was sloppy about it and the segmentation model they produced made predictions which were systematically two(!) pixels off without anybody having a clue why. It was easy enough to work around but it took a year to get it fully sorted out."}]}]}],"thread_ts":"1614221247.027400","parent_user_id":"U67BJLYCS"}]