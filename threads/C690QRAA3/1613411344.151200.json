[{"client_msg_id":"e7003cd6-1fa6-4d31-a7b1-5aa70295b605","type":"message","text":"Hey folks, I was hoping someone might help resolve an ambiguity in some of the Flux and Zygote documentation. So in the `Zygote` docs it says that using implicit parameters works, but is not the recommended method. By implicit parameters, the docs seem to refer to notation like this with the zero argument anonymous function\n```grads = gradient(() -&gt; sum(linear(x)), Params([W, b]))```\n But the docs say `However, implicit parameters exist mainly for compatibility with Flux's current AD; it's recommended to use the other approaches unless you need this.`\nHowever, the `Flux` tutorial uses this type of implicit parameter approach in their 60 minute blitz--provided below. And I see this type of notation popping up everywhere, including the DiffEqFlux docs. So what is the right answer--meaning if the implicit parameter approach is not recommended then it seems to get used a lot ??\n\nHere is the example from the 60 minute blitz\n```using Flux: params\n\nW = randn(3, 5)\nb = zeros(3)\nx = rand(5)\n\ny(x) = sum(W * x .+ b)\n\ngrads = gradient(()-&gt;y(x), params([W, b]))\n\ngrads[W], grads[b]```\nMaybe I am missing something or worrying about something that is not a big deal. Just figured I would check.","user":"UDDSTBX19","ts":"1613411344.151200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2QK2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hey folks, I was hoping someone might help resolve an ambiguity in some of the Flux and Zygote documentation. So in the "},{"type":"text","text":"Zygote","style":{"code":true}},{"type":"text","text":" docs it says that using implicit parameters works, but is not the recommended method. By implicit parameters, the docs seem to refer to notation like this with the zero argument anonymous function\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"grads = gradient(() -> sum(linear(x)), Params([W, b]))"}]},{"type":"rich_text_section","elements":[{"type":"text","text":" But the docs say "},{"type":"text","text":"However, implicit parameters exist mainly for compatibility with Flux's current AD; it's recommended to use the other approaches unless you need this.","style":{"code":true}},{"type":"text","text":"\nHowever, the "},{"type":"text","text":"Flux","style":{"code":true}},{"type":"text","text":" tutorial uses this type of implicit parameter approach in their 60 minute blitz--provided below. And I see this type of notation popping up everywhere, including the DiffEqFlux docs. So what is the right answer--meaning if the implicit parameter approach is not recommended then it seems to get used a lot ??\n\nHere is the example from the 60 minute blitz\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using Flux: params\n\nW = randn(3, 5)\nb = zeros(3)\nx = rand(5)\n\ny(x) = sum(W * x .+ b)\n\ngrads = gradient(()->y(x), params([W, b]))\n\ngrads[W], grads[b]"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe I am missing something or worrying about something that is not a big deal. Just figured I would check."}]}]}],"thread_ts":"1613411344.151200","reply_count":4,"reply_users_count":2,"latest_reply":"1613412997.151900","reply_users":["UH9KWTTD3","UDDSTBX19"],"subscribed":false},{"client_msg_id":"3ae1de9d-0627-44bf-85fc-535baff61ac7","type":"message","text":"The short answer is that it isn’t a big deal. As you can probably tell from the tutorial and various other docs, we haven’t really made the transition completely to explicit parameters ubiquitously. There are variety of reasons for this. But for your use-case, I guess it depends on the context. If you are taking the gradient of a deep NN with respect to the weights, then it is probably easies to use the implicit. Most docs and tutorials still use this format, so things will carry over better. If you are taking the gradient of a smaller model or with respect to something other than the weights, it would be worth it to do the explicit version.","user":"UH9KWTTD3","ts":"1613412120.151300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gzpl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The short answer is that it isn’t a big deal. As you can probably tell from the tutorial and various other docs, we haven’t really made the transition completely to explicit parameters ubiquitously. There are variety of reasons for this. But for your use-case, I guess it depends on the context. If you are taking the gradient of a deep NN with respect to the weights, then it is probably easies to use the implicit. Most docs and tutorials still use this format, so things will carry over better. If you are taking the gradient of a smaller model or with respect to something other than the weights, it would be worth it to do the explicit version."}]}]}],"thread_ts":"1613411344.151200","parent_user_id":"UDDSTBX19"},{"client_msg_id":"9ea74380-43fd-435e-aaf9-5151a3769f9a","type":"message","text":"<@UH9KWTTD3> Oh thanks so much for the clarifications. I am still just trying to learn Flux, so little things like this probably throw off noobs more than more seasoned folks. But thanks for the clarification. That makes a lot more sense. I will try to keep both syntaxes in mind. Thanks again for your insights.","user":"UDDSTBX19","ts":"1613412331.151500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"djWA3","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH9KWTTD3"},{"type":"text","text":" Oh thanks so much for the clarifications. I am still just trying to learn Flux, so little things like this probably throw off noobs more than more seasoned folks. But thanks for the clarification. That makes a lot more sense. I will try to keep both syntaxes in mind. Thanks again for your insights."}]}]}],"thread_ts":"1613411344.151200","parent_user_id":"UDDSTBX19"},{"client_msg_id":"dd1cb99a-6227-49d9-a0fb-180a2d69ec62","type":"message","text":"No problem! Also, if you are manipulating the params/gradients extensively with some custom code, then explicit tends to be more flexible. Implicit can almost always be made to work, but it just won’t work with the first way you think of writing the code in my experience.","user":"UH9KWTTD3","ts":"1613412463.151700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VfHsN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No problem! Also, if you are manipulating the params/gradients extensively with some custom code, then explicit tends to be more flexible. Implicit can almost always be made to work, but it just won’t work with the first way you think of writing the code in my experience."}]}]}],"thread_ts":"1613411344.151200","parent_user_id":"UDDSTBX19"},{"client_msg_id":"c936bf95-0c22-44a4-91f9-8c302613b394","type":"message","text":"Oh yes. I will keep that in mind. I am working with some LSTMs so those are a bit more manual with respect to passing hidden states and all. Oh yes, and is there a difference between implicit and explicit with respect to \"inplace\" operations? I know some of the differential equations solvers use a lot of inplace operations for performance, but sometimes inplace operations can mess up the gradients. Is that just a general issue, or is the explicit better than the implicit for something like that.","user":"UDDSTBX19","ts":"1613412997.151900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6xd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh yes. I will keep that in mind. I am working with some LSTMs so those are a bit more manual with respect to passing hidden states and all. Oh yes, and is there a difference between implicit and explicit with respect to \"inplace\" operations? I know some of the differential equations solvers use a lot of inplace operations for performance, but sometimes inplace operations can mess up the gradients. Is that just a general issue, or is the explicit better than the implicit for something like that."}]}]}],"thread_ts":"1613411344.151200","parent_user_id":"UDDSTBX19"}]