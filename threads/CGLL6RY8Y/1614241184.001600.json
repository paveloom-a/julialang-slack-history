[{"client_msg_id":"4c095261-bd9d-4ea1-a2f8-1552de1a0dcf","type":"message","text":"What’s the current status of `in` to check whether a point is in a polygon? And does it work for Shapefile polygons yet? I’m not really sure it made it past the move to GeometryBasics. <@U66SGEWAC>","user":"U73KENNG4","ts":"1614241184.001600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ECp3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What’s the current status of "},{"type":"text","text":"in","style":{"code":true}},{"type":"text","text":" to check whether a point is in a polygon? And does it work for Shapefile polygons yet? I’m not really sure it made it past the move to GeometryBasics. "},{"type":"user","user_id":"U66SGEWAC"}]}]}],"thread_ts":"1614241184.001600","reply_count":7,"reply_users_count":3,"latest_reply":"1614256214.002900","reply_users":["U8D0QF5NZ","U73KENNG4","UA3UH56HL"],"subscribed":false},{"client_msg_id":"cdd23dd4-84cf-4d28-bdf3-38b487367d1e","type":"message","text":"Shapefile hasn't moved to GeometryBasics yet, so it still has it's own geometry types.","user":"U8D0QF5NZ","ts":"1614241445.001700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0A5j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Shapefile hasn't moved to GeometryBasics yet, so it still has it's own geometry types."}]}]}],"thread_ts":"1614241184.001600","parent_user_id":"U73KENNG4"},{"client_msg_id":"a7a32df0-3e1d-4fcd-b19f-35fea61eca18","type":"message","text":"Not sure if `in` works for point in polygon in GeometryBasics. Point in polygon exists here as well: <https://github.com/JuliaGeometry/PolygonOps.jl>","user":"U8D0QF5NZ","ts":"1614241563.001900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dka","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not sure if "},{"type":"text","text":"in","style":{"code":true}},{"type":"text","text":" works for point in polygon in GeometryBasics. Point in polygon exists here as well: "},{"type":"link","url":"https://github.com/JuliaGeometry/PolygonOps.jl"}]}]}],"thread_ts":"1614241184.001600","parent_user_id":"U73KENNG4"},{"client_msg_id":"6a21a57c-9425-45a1-9b1b-c19385a419ad","type":"message","text":"OK so any operation doing that on Shapefiles would need to rely on GEOS?","user":"U73KENNG4","ts":"1614241946.002100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"K6Qnr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"OK so any operation doing that on Shapefiles would need to rely on GEOS?"}]}]}],"thread_ts":"1614241184.001600","parent_user_id":"U73KENNG4"},{"client_msg_id":"b95e6766-b5a5-4298-a63a-bb50c478e739","type":"message","text":"Not necessarily. I'd probably use ArchGDAL/GeoDataFrames, but if you need to avoid the GDAL dependency, you could use Shapefiles.jl and convert the geometries to what is needed for PolygonOps / GeometryBasics.","user":"U8D0QF5NZ","ts":"1614252049.002300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eCm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not necessarily. I'd probably use ArchGDAL/GeoDataFrames, but if you need to avoid the GDAL dependency, you could use Shapefiles.jl and convert the geometries to what is needed for PolygonOps / GeometryBasics."}]}]}],"thread_ts":"1614241184.001600","parent_user_id":"U73KENNG4"},{"client_msg_id":"d580e234-e39d-43fb-a048-2d0a869bfb45","type":"message","text":"It seems that all operations implemented in PolygonOps.jl are already available in Meshes.jl. In particular, the area of the polygon implemented in PolygonOps.jl can be negative which is incorrect (only the signed area can be negative). It also doesn't take into account the presence of holes. Regarding the `in` operation we only have the method based on winding numbers in Meshes.jl currently so a PR with the other method is welcome. Moving forward it would be a good idea to deprecate PolygonOps.jl and rewrite Shapefiles.jl to use Meshes.jl","user":"UA3UH56HL","ts":"1614253113.002500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jpp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It seems that all operations implemented in PolygonOps.jl are already available in Meshes.jl. In particular, the area of the polygon implemented in PolygonOps.jl can be negative which is incorrect (only the signed area can be negative). It also doesn't take into account the presence of holes. Regarding the "},{"type":"text","text":"in","style":{"code":true}},{"type":"text","text":" operation we only have the method based on winding numbers in Meshes.jl currently so a PR with the other method is welcome. Moving forward it would be a good idea to deprecate PolygonOps.jl and rewrite Shapefiles.jl to use Meshes.jl"}]}]}],"thread_ts":"1614241184.001600","parent_user_id":"U73KENNG4"},{"client_msg_id":"452cd03a-6074-4f2d-a539-bcebcaf7723d","type":"message","text":"Good to know al of that is already in Meshes.jl. Are you open to adding the GeoInterface to Meshes as well? Would make interior easier.","user":"U8D0QF5NZ","ts":"1614255603.002700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EgC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Good to know al of that is already in Meshes.jl. Are you open to adding the GeoInterface to Meshes as well? Would make interior easier."}]}]}],"thread_ts":"1614241184.001600","parent_user_id":"U73KENNG4"},{"client_msg_id":"5d305910-4dc0-472b-9592-e6a2480de2a0","type":"message","text":"I think we should aim for a more general integration strategy. We would like to detach Meshes.jl from specific domains (GIS, FEM, Viz) so that we never fall into the trap of overconstraining the implementation of algorithms to 2D spaces for example. If we assume that Meshes.jl is a repository of geometry types with a bunch of computational geometry algorithms, we would like to have an additional layer on top of it to deal with specific needs found in GIS for example. Perhaps this strategy would require an effort to first identify a general interface (e.g. MeshInterface.jl) on top of which GeoInterface.jl could be refactored. That is a more ambitious plan that I think will take time to materialize. When you say that it would make the interior easier, I understand you wanted to say that it would make the transition easier, right?","user":"UA3UH56HL","ts":"1614256214.002900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6ugg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think we should aim for a more general integration strategy. We would like to detach Meshes.jl from specific domains (GIS, FEM, Viz) so that we never fall into the trap of overconstraining the implementation of algorithms to 2D spaces for example. If we assume that Meshes.jl is a repository of geometry types with a bunch of computational geometry algorithms, we would like to have an additional layer on top of it to deal with specific needs found in GIS for example. Perhaps this strategy would require an effort to first identify a general interface (e.g. MeshInterface.jl) on top of which GeoInterface.jl could be refactored. That is a more ambitious plan that I think will take time to materialize. When you say that it would make the interior easier, I understand you wanted to say that it would make the transition easier, right?"}]}]}],"thread_ts":"1614241184.001600","parent_user_id":"U73KENNG4"}]