[{"client_msg_id":"8c6aea9a-4880-42f0-a891-3762553cce66","type":"message","text":"For any element type that implements dot, mul!, div, it should be possible to express the existing sparse matrix implementations in terms of those functions, no? Would this incur a performance overhead?","user":"UGUAWEMMK","ts":"1612731006.099200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q8R","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For any element type that implements dot, mul!, div, it should be possible to express the existing sparse matrix implementations in terms of those functions, no? Would this incur a performance overhead?"}]}]}],"thread_ts":"1612731006.099200","reply_count":3,"reply_users_count":2,"latest_reply":"1612800106.110600","reply_users":["UCT7E536E","UGUAWEMMK"],"subscribed":false,"reactions":[{"name":"+1","users":["U01L934LHDH","U6A936746"],"count":2}]},{"client_msg_id":"42496C1D-8E7C-4D85-B393-69B6B7D2E6E7","type":"message","text":"There is a risk of method ambiguity with the generic 5-arg mul! (the generic function requires the last 2 arguments to be `::Number`).\nIf you plug in a custom `Tv` the compiler might not like it (it’s an edge case I encountered once).","user":"UCT7E536E","ts":"1612739932.102900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kTJzE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There is a risk of method ambiguity with the generic 5-arg mul! (the generic function requires the last 2 arguments to be "},{"type":"text","text":"::Number","style":{"code":true}},{"type":"text","text":").\nIf you plug in a custom "},{"type":"text","text":"Tv","style":{"code":true}},{"type":"text","text":" the compiler might not like it (it’s an edge case I encountered once)."}]}]}],"thread_ts":"1612731006.099200","parent_user_id":"UGUAWEMMK"},{"client_msg_id":"2be0ead2-692c-438f-9f72-635a0ef26629","type":"message","text":"So this custom TV would be a scalar type that does not support multiplication with a number?","user":"UGUAWEMMK","ts":"1612740865.103100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yS7n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So this custom TV would be a scalar type that does not support multiplication with a number?"}]}]}],"thread_ts":"1612731006.099200","parent_user_id":"UGUAWEMMK"},{"client_msg_id":"f77ac587-bda2-4cc4-b9b8-e9c37894dc81","type":"message","text":"(obviously this may or may not apply to you)\nI once played around with  `SparseCSC{Int, MyFloat}` matrices, where `MyFloat` was basically a thin wrapper over `Float64` . I wanted to count how many matrix-vector product my code was doing, so I wrote a version of 5-arg `mul!` for `SparseCSC{Int, MyFloat}` (which would basically increment a counter, then do the multiplication).\nAt first I got an ambiguity error because\n```mul!(::Vector{MyFloat}, ::SparseCSC{Int,MyFloat}, ::Vector{MyFloat}, ::MyFloat, ::MyFloat)```\nwas ambiguous (not 100% sure about the type of the last 2 args) w.r.t LinearAlgebra's generic `mul!`.\nThere was a quick fix, but I remember thinking that error should have happened at all.\n\nSo I can only imagine that, if you try plugging your own `Tv` type, you might run into something like this.","user":"UCT7E536E","ts":"1612800106.110600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"siGr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(obviously this may or may not apply to you)\nI once played around with  "},{"type":"text","text":"SparseCSC{Int, MyFloat}","style":{"code":true}},{"type":"text","text":" matrices, where "},{"type":"text","text":"MyFloat","style":{"code":true}},{"type":"text","text":" was basically a thin wrapper over "},{"type":"text","text":"Float64","style":{"code":true}},{"type":"text","text":" . I wanted to count how many matrix-vector product my code was doing, so I wrote a version of 5-arg "},{"type":"text","text":"mul!","style":{"code":true}},{"type":"text","text":" for "},{"type":"text","text":"SparseCSC{Int, MyFloat}","style":{"code":true}},{"type":"text","text":" (which would basically increment a counter, then do the multiplication).\nAt first I got an ambiguity error because\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"mul!(::Vector{MyFloat}, ::SparseCSC{Int,MyFloat}, ::Vector{MyFloat}, ::MyFloat, ::MyFloat)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"was ambiguous (not 100% sure about the type of the last 2 args) w.r.t LinearAlgebra's generic "},{"type":"text","text":"mul!","style":{"code":true}},{"type":"text","text":".\nThere was a quick fix, but I remember thinking that error should have happened at all.\n\nSo I can only imagine that, if you try plugging your own "},{"type":"text","text":"Tv","style":{"code":true}},{"type":"text","text":" type, you might run into something like this."}]}]}],"thread_ts":"1612731006.099200","parent_user_id":"UGUAWEMMK"}]