[{"client_msg_id":"07d29837-3dd4-4062-b278-134306e991aa","type":"message","text":"I find SIMDPirates is not compatible with Julia 1.6 and has been archived. Is there any replacements? I an trying to get MaBLAS (<https://github.com/YingboMa/MaBLAS.jl>) work on Julia 1.6.","user":"UCD4Z3NJZ","ts":"1613084989.121300","team":"T68168MUP","edited":{"user":"UCD4Z3NJZ","ts":"1613085015.000000"},"blocks":[{"type":"rich_text","block_id":"adAU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I find SIMDPirates is not compatible with Julia 1.6 and has been archived. Is there any replacements? I an trying to get MaBLAS ("},{"type":"link","url":"https://github.com/YingboMa/MaBLAS.jl"},{"type":"text","text":") work on Julia 1.6."}]}]}],"thread_ts":"1613084989.121300","reply_count":4,"reply_users_count":2,"latest_reply":"1613495717.140400","reply_users":["UCD4Z3NJZ","UDGT4PM41"],"subscribed":false},{"client_msg_id":"9c14cae9-1cb9-48d1-8d5b-f5b72bd98b79","type":"message","text":"<@U6788D83U>","user":"UCD4Z3NJZ","ts":"1613085036.121600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NQo","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U6788D83U"}]}]}],"thread_ts":"1613084989.121300","parent_user_id":"UCD4Z3NJZ"},{"client_msg_id":"cdd45036-dc1f-469c-8ba1-18c80c64f7a1","type":"message","text":"<https://github.com/JuliaLinearAlgebra/Octavian.jl|https://github.com/JuliaLinearAlgebra/Octavian.jl> I'd more actively developed","user":"UDGT4PM41","ts":"1613088160.122000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L0W6H","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLinearAlgebra/Octavian.jl","text":"https://github.com/JuliaLinearAlgebra/Octavian.jl"},{"type":"text","text":" I'd more actively developed"}]}]}],"thread_ts":"1613084989.121300","parent_user_id":"UCD4Z3NJZ","reactions":[{"name":"+1","users":["UCD4Z3NJZ"],"count":1}]},{"client_msg_id":"1b659092-90a8-49db-8319-b2d2530ef79b","type":"message","text":"Is*","user":"UDGT4PM41","ts":"1613088165.122200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Fq8D","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is*"}]}]}],"thread_ts":"1613084989.121300","parent_user_id":"UCD4Z3NJZ"},{"client_msg_id":"0457b8b1-6c4f-4c09-a4f9-36c15249c162","type":"message","text":"```julia&gt; using TropicalNumbers, Octavian\njulia&gt; A, B = randn(1000, 1000), randn(1000, 1000);\njulia&gt; A2, B2 = Tropical.(A), Tropical.(B);\njulia&gt; Octavian.matmul(A2, B2);\nERROR: MethodError: no method matching stridedpointer(::Matrix{TropicalF64})\nClosest candidates are:\n  stridedpointer(::Ptr{T}, ::StaticInt{C}, ::StaticInt{B}, ::Val{R}, ::X, ::O) where {T&lt;:Union{Bool, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, VectorizationBase.Bit}, C, B, R, N, X&lt;:Tuple{Vararg{Any, N}}, O&lt;:Tuple{Vararg{Any, N}}} at /home/leo/.julia/packages/VectorizationBase/bYkVf/src/strided_pointers/stridedpointers.jl:73\n  stridedpointer(::BitVector) at /home/leo/.julia/packages/VectorizationBase/bYkVf/src/strided_pointers/stridedpointers.jl:206\n  stridedpointer(::BitArray{N}) where N at /home/leo/.julia/packages/VectorizationBase/bYkVf/src/strided_pointers/stridedpointers.jl:207\n  ...\nStacktrace:\n [1] zstridedpointer\n   @ ~/.julia/packages/VectorizationBase/bYkVf/src/strided_pointers/stridedpointers.jl:95 [inlined]\n [2] _matmul!\n   @ ~/.julia/packages/Octavian/KUsJ4/src/matmul.jl:232 [inlined]\n [3] matmul(A::Matrix{TropicalF64}, B::Matrix{TropicalF64})\n   @ Octavian ~/.julia/packages/Octavian/KUsJ4/src/matmul.jl:191\n [4] top-level scope\n   @ ./timing.jl:206 [inlined]\n [5] top-level scope\n   @ ./REPL[19]:0```\nHi, <@U7THT3TM3> and <@UAUPJLBQX>. I wish to make a BLAS library for Tropcal algebra (a simple semi-ring algebra by replacing `+` with `max`, `*` with `+`) or more complicated algebra. So far the Octavian does not support this, wondering how difficult it may be. (FYI: tropical blas might be useful in solving combinatoric optimization problems: <https://arxiv.org/abs/2008.06888>)","user":"UCD4Z3NJZ","ts":"1613495717.140400","team":"T68168MUP","attachments":[{"service_name":"arXiv.org","title":"Tropical Tensor Network for Ground States of Spin Glasses","title_link":"https://arxiv.org/abs/2008.06888","text":"We present a unified exact tensor network approach to compute the ground state energy, identify the optimal configuration, and count the number of solutions for spin glasses. The method is based...","fallback":"arXiv.org: Tropical Tensor Network for Ground States of Spin Glasses","from_url":"https://arxiv.org/abs/2008.06888","service_icon":"https://static.arxiv.org/static/browse/0.3.2.6/images/icons/favicon.ico","id":1,"original_url":"https://arxiv.org/abs/2008.06888"}],"blocks":[{"type":"rich_text","block_id":"UEe","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using TropicalNumbers, Octavian\njulia> A, B = randn(1000, 1000), randn(1000, 1000);\njulia> A2, B2 = Tropical.(A), Tropical.(B);\njulia> Octavian.matmul(A2, B2);\nERROR: MethodError: no method matching stridedpointer(::Matrix{TropicalF64})\nClosest candidates are:\n  stridedpointer(::Ptr{T}, ::StaticInt{C}, ::StaticInt{B}, ::Val{R}, ::X, ::O) where {T<:Union{Bool, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, VectorizationBase.Bit}, C, B, R, N, X<:Tuple{Vararg{Any, N}}, O<:Tuple{Vararg{Any, N}}} at /home/leo/.julia/packages/VectorizationBase/bYkVf/src/strided_pointers/stridedpointers.jl:73\n  stridedpointer(::BitVector) at /home/leo/.julia/packages/VectorizationBase/bYkVf/src/strided_pointers/stridedpointers.jl:206\n  stridedpointer(::BitArray{N}) where N at /home/leo/.julia/packages/VectorizationBase/bYkVf/src/strided_pointers/stridedpointers.jl:207\n  ...\nStacktrace:\n [1] zstridedpointer\n   @ ~/.julia/packages/VectorizationBase/bYkVf/src/strided_pointers/stridedpointers.jl:95 [inlined]\n [2] _matmul!\n   @ ~/.julia/packages/Octavian/KUsJ4/src/matmul.jl:232 [inlined]\n [3] matmul(A::Matrix{TropicalF64}, B::Matrix{TropicalF64})\n   @ Octavian ~/.julia/packages/Octavian/KUsJ4/src/matmul.jl:191\n [4] top-level scope\n   @ ./timing.jl:206 [inlined]\n [5] top-level scope\n   @ ./REPL[19]:0"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Hi, "},{"type":"user","user_id":"U7THT3TM3"},{"type":"text","text":" and "},{"type":"user","user_id":"UAUPJLBQX"},{"type":"text","text":". I wish to make a BLAS library for Tropcal algebra (a simple semi-ring algebra by replacing "},{"type":"text","text":"+","style":{"code":true}},{"type":"text","text":" with "},{"type":"text","text":"max","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"*","style":{"code":true}},{"type":"text","text":" with "},{"type":"text","text":"+","style":{"code":true}},{"type":"text","text":") or more complicated algebra. So far the Octavian does not support this, wondering how difficult it may be. (FYI: tropical blas might be useful in solving combinatoric optimization problems: "},{"type":"link","url":"https://arxiv.org/abs/2008.06888"},{"type":"text","text":")"}]}]}],"thread_ts":"1613084989.121300","parent_user_id":"UCD4Z3NJZ"}]