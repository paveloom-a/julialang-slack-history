[{"client_msg_id":"d8286765-04bb-43a1-8f95-e24adbff2ca0","type":"message","text":"is there any reason the `tr` function in <https://github.com/JuliaLang/julia/blob/master/stdlib/LinearAlgebra/src/dense.jl#L332> couldn't be removed where it's at and replace what's in <https://github.com/JuliaLang/julia/blob/master/stdlib/LinearAlgebra/src/generic.jl#L1027> to make the generic case non-allocating? I only noticed because `tr` for a `Symmetric` dense matrix was falling back to the generic.jl method","user":"UDPLCA08H","ts":"1609184689.105000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lW7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is there any reason the "},{"type":"text","text":"tr","style":{"code":true}},{"type":"text","text":" function in "},{"type":"link","url":"https://github.com/JuliaLang/julia/blob/master/stdlib/LinearAlgebra/src/dense.jl#L332"},{"type":"text","text":" couldn't be removed where it's at and replace what's in "},{"type":"link","url":"https://github.com/JuliaLang/julia/blob/master/stdlib/LinearAlgebra/src/generic.jl#L1027"},{"type":"text","text":" to make the generic case non-allocating? I only noticed because "},{"type":"text","text":"tr","style":{"code":true}},{"type":"text","text":" for a "},{"type":"text","text":"Symmetric","style":{"code":true}},{"type":"text","text":" dense matrix was falling back to the generic.jl method"}]}]}],"thread_ts":"1609184689.105000","reply_count":2,"reply_users_count":2,"latest_reply":"1609185794.105300","reply_users":["UM30MT6RF","U680T6770"],"subscribed":false,"reactions":[{"name":"+1","users":["U01CMNAURHC","UKG4WF8PJ"],"count":2}]},{"client_msg_id":"2cf792c1-8e7b-40bf-b352-e74eec2ff396","type":"message","text":"Sounds reasonable to me. Although it might be even better to just replace `diag(A)` with `view(A, 1:size(A, 1)+1:length(A))`, since that should use the optimized pairwise sum instead of just a naive loop.","user":"UM30MT6RF","ts":"1609185576.105100","team":"T68168MUP","edited":{"user":"UM30MT6RF","ts":"1609186060.000000"},"blocks":[{"type":"rich_text","block_id":"2SHj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sounds reasonable to me. Although it might be even better to just replace "},{"type":"text","text":"diag(A)","style":{"code":true}},{"type":"text","text":" with "},{"type":"text","text":"view(A, 1:size(A, 1)+1:length(A))","style":{"code":true}},{"type":"text","text":", since that should use the optimized pairwise sum instead of just a naive loop."}]}]}],"thread_ts":"1609184689.105000","parent_user_id":"UDPLCA08H","reactions":[{"name":"+1","users":["UDPLCA08H","U01CMNAURHC","UKG4WF8PJ"],"count":3}]},{"client_msg_id":"3f134efc-4788-4dc7-89cc-849d3238e395","type":"message","text":"I suspect that it might be slower for some AbstractArrays though. Just a guess but I think it would slower for sparse and distributed arrays.","user":"U680T6770","ts":"1609185794.105300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"guEr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I suspect that it might be slower for some AbstractArrays though. Just a guess but I think it would slower for sparse and distributed arrays."}]}]}],"thread_ts":"1609184689.105000","parent_user_id":"UDPLCA08H","reactions":[{"name":"+1","users":["UDPLCA08H","U01CMNAURHC"],"count":2}]}]