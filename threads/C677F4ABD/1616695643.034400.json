[{"client_msg_id":"e1dc4409-e20a-4b49-a868-506115e9f63b","type":"message","text":"LoopVectorization should demote for SIMD\n```julia&gt; @btime @avxt $Afloat32 .+= 1.0;\n  5.955 μs (0 allocations: 0 bytes)\n\njulia&gt; @btime @avxt $Afloat32 .+= 1f0;\n  6.063 μs (0 allocations: 0 bytes)```\nBecause there is a source/destination vector of type `Float32`, that will trump the scalar `Float64` .","user":"UAUPJLBQX","ts":"1616695643.034400","team":"T68168MUP","edited":{"user":"UAUPJLBQX","ts":"1616695866.000000"},"blocks":[{"type":"rich_text","block_id":"/oe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"LoopVectorization should demote for SIMD\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @btime @avxt $Afloat32 .+= 1.0;\n  5.955 μs (0 allocations: 0 bytes)\n\njulia> @btime @avxt $Afloat32 .+= 1f0;\n  6.063 μs (0 allocations: 0 bytes)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Because there is a source/destination vector of type "},{"type":"text","text":"Float32","style":{"code":true}},{"type":"text","text":", that will trump the scalar "},{"type":"text","text":"Float64","style":{"code":true}},{"type":"text","text":" ."}]}]}],"thread_ts":"1616695643.034400","reply_count":55,"reply_users_count":3,"latest_reply":"1616780732.066800","reply_users":["U6QGE7S86","UAUPJLBQX","UAEJRV3KJ"],"is_locked":false,"subscribed":false},{"client_msg_id":"0907155f-73dc-45e6-a3b0-e1d5e8761bb9","type":"message","text":"uuuuh what machine was this on? :sweat_smile:","user":"U6QGE7S86","ts":"1616698400.042500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XBfYj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"uuuuh what machine was this on? "},{"type":"emoji","name":"sweat_smile"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"3eb986c8-cbe7-4ba7-87dc-2d083ce0effe","type":"message","text":"How do I know if my machine has AVX512?","user":"U6QGE7S86","ts":"1616698477.042700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wSrgA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How do I know if my machine has AVX512?"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"afa14517-ed46-4dff-b0d7-19d73b34272f","type":"message","text":"I'm not seeing any multithreading speedups either :confusedpuppy:","user":"U6QGE7S86","ts":"1616698501.042900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0mj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not seeing any multithreading speedups either "},{"type":"emoji","name":"confusedpuppy"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"4ff879ce-622f-40b5-8b59-4fcdb65e2d97","type":"message","text":"```julia&gt; versioninfo()\nJulia Version 1.7.0-DEV.707\nCommit d1d0646390* (2021-03-14 18:11 UTC)\nPlatform Info:\n  OS: Linux (x86_64-generic-linux)\n  CPU: Intel(R) Core(TM) i9-10980XE CPU @ 3.00GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-11.0.1 (ORCJIT, cascadelake)\nEnvironment:\n  JULIA_NUM_THREADS = 36```","user":"UAUPJLBQX","ts":"1616698532.043100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BOrgR","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> versioninfo()\nJulia Version 1.7.0-DEV.707\nCommit d1d0646390* (2021-03-14 18:11 UTC)\nPlatform Info:\n  OS: Linux (x86_64-generic-linux)\n  CPU: Intel(R) Core(TM) i9-10980XE CPU @ 3.00GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-11.0.1 (ORCJIT, cascadelake)\nEnvironment:\n  JULIA_NUM_THREADS = 36"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"974e4465-db11-4932-b2d9-aacc365ad7b4","type":"message","text":"OH","user":"U6QGE7S86","ts":"1616698548.043300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=zg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"OH"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"115c52b7-e542-4b2e-b342-bc2c5d523e27","type":"message","text":"36 threads.","user":"U6QGE7S86","ts":"1616698553.043500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cIV3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"36 threads."}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"a625566e-0bfb-46d8-83bb-d66de6dd62f3","type":"message","text":"```julia&gt; using VectorizationBase\n\njulia&gt; VectorizationBase.has_feature(Val(:x86_64_avx512f))\nTrue()```","user":"UAUPJLBQX","ts":"1616698560.043700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Zgua7","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using VectorizationBase\n\njulia> VectorizationBase.has_feature(Val(:x86_64_avx512f))\nTrue()"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"9eebb58e-e446-465c-9b58-763634ae41a7","type":"message","text":"```julia&gt; @btime @avx thread=4 $Afloat32 .+= 1f0;\n  97.759 μs (0 allocations: 0 bytes)\n\njulia&gt; @btime @avx thread=false $Afloat32 .+= 1f0;\n  121.804 μs (0 allocations: 0 bytes)```","user":"UAUPJLBQX","ts":"1616698601.043900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NiFW","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @btime @avx thread=4 $Afloat32 .+= 1f0;\n  97.759 μs (0 allocations: 0 bytes)\n\njulia> @btime @avx thread=false $Afloat32 .+= 1f0;\n  121.804 μs (0 allocations: 0 bytes)"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"4c854e6d-4c0a-4b1d-89e0-8e2d20cfbeff","type":"message","text":"Threading doesn't improve the performance too much.","user":"UAUPJLBQX","ts":"1616698612.044100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dX+dW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Threading doesn't improve the performance too much."}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"f45e9bb3-8855-4981-a000-648cbf6ade9c","type":"message","text":"```\njulia&gt; VectorizationBase.has_feature(Val(:x86_64_avx512f))\nFalse()```","user":"U6QGE7S86","ts":"1616698731.044300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d+GQ","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"\njulia> VectorizationBase.has_feature(Val(:x86_64_avx512f))\nFalse()"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"5e612c69-8a18-44c2-9009-e626f8ddc708","type":"message","text":"womp womp :confused:","user":"U6QGE7S86","ts":"1616698735.044500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yXWXv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"womp womp "},{"type":"emoji","name":"confused"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"f2bc9550-737b-4418-9757-6b0d2093a3c4","type":"message","text":"Do you mind if I post your code/comp specs in the PR?","user":"U6QGE7S86","ts":"1616698768.044700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RrB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Do you mind if I post your code/comp specs in the PR?"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"57d0bf2f-25ea-4800-b5d5-cc408a50e48b","type":"message","text":"Not at all, please do","user":"UAUPJLBQX","ts":"1616698793.044900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=zrf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not at all, please do"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX","reactions":[{"name":"+1::skin-tone-5","users":["U6QGE7S86"],"count":1}]},{"client_msg_id":"f0ecbd5d-2d4e-4779-a9d1-d7f83dca277b","type":"message","text":"Gotta give credit where it's due.","user":"U6QGE7S86","ts":"1616698794.045100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Citt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Gotta give credit where it's due."}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"10fbf2cd-6c09-4e24-9e53-97ace64a3526","type":"message","text":"```  CPU: Intel(R) Core(TM) i7-4710HQ CPU @ 2.50GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-11.0.1 (ORCJIT, haswell)```\nYeah, haswell was the first Intel CPU to support AVX2 and FMA","user":"UAUPJLBQX","ts":"1616698815.045400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fiqsx","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"  CPU: Intel(R) Core(TM) i7-4710HQ CPU @ 2.50GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-11.0.1 (ORCJIT, haswell)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, haswell was the first Intel CPU to support AVX2 and FMA"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"6616c62a-af96-4953-97a6-b63a55f44c9c","type":"message","text":"and yours is CascadaLake, which has AVX512?","user":"U6QGE7S86","ts":"1616699024.045600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DwN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and yours is CascadaLake, which has AVX512?"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"099adde5-7472-49d6-9da0-1aec1ddda019","type":"message","text":"Yes. Among servers/HEDT CPUs, Skylake-AVX512 and Cascadelake have AVX512.","user":"UAUPJLBQX","ts":"1616699149.045800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XH9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes. Among servers/HEDT CPUs, Skylake-AVX512 and Cascadelake have AVX512."}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"98b4dc68-b8dc-4202-82fd-bc62b87bb90d","type":"message","text":"Among laptops, Ice Lake and Tiger Lake do.","user":"UAUPJLBQX","ts":"1616699159.046000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zRxKr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Among laptops, Ice Lake and Tiger Lake do."}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"67458bba-6c49-4080-9807-f625ec0909ac","type":"message","text":"Ok ok","user":"U6QGE7S86","ts":"1616699164.046200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"G7X","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok ok"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"d139cfbf-029a-418f-b393-b3c3e8c9aabc","type":"message","text":"... Imm start looking for a new comp so Good to know :smile:","user":"U6QGE7S86","ts":"1616699176.046400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"J4K","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"... Imm start looking for a new comp so Good to know "},{"type":"emoji","name":"smile"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"f95cb551-eda0-4367-8bc3-d9325d633665","type":"message","text":"They came out late 2019 and late 2020, respectively.","user":"UAUPJLBQX","ts":"1616699196.046600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IN0/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"They came out late 2019 and late 2020, respectively."}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"2c52c74e-42d5-42b1-8085-225bff8fbbc9","type":"message","text":"I'm a huge fan of AVX512 because I like using/playing with SIMD all the time.\nNote though that the server CPUs tend to be a lot faster at AVX512-heavy code.","user":"UAUPJLBQX","ts":"1616699333.046900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DEvEa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm a huge fan of AVX512 because I like using/playing with SIMD all the time.\nNote though that the server CPUs tend to be a lot faster at AVX512-heavy code."}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"99943da5-15ba-4e7f-a612-caf207bd839c","type":"message","text":"I'll go try my laptop","user":"UAUPJLBQX","ts":"1616699346.047100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3gQq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'll go try my laptop"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"84dc13f7-b844-4f9a-8cd4-b4efe8311459","type":"message","text":"(of course this benchmark is mostly memory bound)","user":"UAUPJLBQX","ts":"1616699359.047300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7vf=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(of course this benchmark is mostly memory bound)"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"66c5d882-e3fc-435c-a059-1f0227bcff08","type":"message","text":"```julia&gt; A = [rand() for i in 1:1000, j in 1:1000];\n\njulia&gt; Afloat32 = [rand(Float32) for i in 1:1000, j in 1:1000];\n\njulia&gt; @btime do_add($A, 1000);\n  857.301 μs (0 allocations: 0 bytes)\n\njulia&gt; @btime do_add($Afloat32, 1000);\n  753.168 μs (0 allocations: 0 bytes)\n\njulia&gt; function do_add2!(A, n)\n            for j=1:n\n                for i=1:n\n                    A[i,j] += 1.0\n                end\n            end\n        end\ndo_add2! (generic function with 1 method)\n\njulia&gt; @btime do_add2!($A, 1000);\n  367.294 μs (0 allocations: 0 bytes)\n\njulia&gt; function do_add3!(A, n)\n            for j=1:n\n                for i=1:n\n                    @inbounds A[i,j] += 1.0\n                end\n            end\n        end\ndo_add3! (generic function with 1 method)\n\njulia&gt; @btime do_add3!($A, 1000);\n  171.273 μs (0 allocations: 0 bytes)\n\njulia&gt; function do_add4!(A)\n           n = size(A, 1)\n           for j = Base.OneTo(n)\n               for i = Base.OneTo(n)\n                   @inbounds A[i,j] += one(eltype(A))\n               end\n           end\n       end\ndo_add4! (generic function with 1 method)\n\njulia&gt; @btime do_add4!($A);\n  170.819 μs (0 allocations: 0 bytes)\n\njulia&gt; @btime do_add4!($Afloat32);\n  83.017 μs (0 allocations: 0 bytes)\n\njulia&gt; versioninfo()\nJulia Version 1.7.0-DEV.751\nCommit e2f5f26aec* (2021-03-25 05:52 UTC)\nPlatform Info:\n  OS: Linux (x86_64-linux-gnu)\n  CPU: 11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-11.0.1 (ORCJIT, tigerlake)\nEnvironment:\n  JULIA_NUM_THREADS = 8```","user":"UAUPJLBQX","ts":"1616699545.047500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rs4RB","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> A = [rand() for i in 1:1000, j in 1:1000];\n\njulia> Afloat32 = [rand(Float32) for i in 1:1000, j in 1:1000];\n\njulia> @btime do_add($A, 1000);\n  857.301 μs (0 allocations: 0 bytes)\n\njulia> @btime do_add($Afloat32, 1000);\n  753.168 μs (0 allocations: 0 bytes)\n\njulia> function do_add2!(A, n)\n            for j=1:n\n                for i=1:n\n                    A[i,j] += 1.0\n                end\n            end\n        end\ndo_add2! (generic function with 1 method)\n\njulia> @btime do_add2!($A, 1000);\n  367.294 μs (0 allocations: 0 bytes)\n\njulia> function do_add3!(A, n)\n            for j=1:n\n                for i=1:n\n                    @inbounds A[i,j] += 1.0\n                end\n            end\n        end\ndo_add3! (generic function with 1 method)\n\njulia> @btime do_add3!($A, 1000);\n  171.273 μs (0 allocations: 0 bytes)\n\njulia> function do_add4!(A)\n           n = size(A, 1)\n           for j = Base.OneTo(n)\n               for i = Base.OneTo(n)\n                   @inbounds A[i,j] += one(eltype(A))\n               end\n           end\n       end\ndo_add4! (generic function with 1 method)\n\njulia> @btime do_add4!($A);\n  170.819 μs (0 allocations: 0 bytes)\n\njulia> @btime do_add4!($Afloat32);\n  83.017 μs (0 allocations: 0 bytes)\n\njulia> versioninfo()\nJulia Version 1.7.0-DEV.751\nCommit e2f5f26aec* (2021-03-25 05:52 UTC)\nPlatform Info:\n  OS: Linux (x86_64-linux-gnu)\n  CPU: 11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-11.0.1 (ORCJIT, tigerlake)\nEnvironment:\n  JULIA_NUM_THREADS = 8"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"2c312f50-e0f4-4bc4-8bf3-f3a53febd7ed","type":"message","text":"```julia&gt; @btime @avxt @. $Afloat32 .+= 1f0;\n  81.359 μs (0 allocations: 0 bytes)```\n=/","user":"UAUPJLBQX","ts":"1616699645.047700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bNe","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @btime @avxt @. $Afloat32 .+= 1f0;\n  81.359 μs (0 allocations: 0 bytes)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"=/"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"d03deae3-ef3f-4fba-bd88-bc11176fdb35","type":"message","text":"I think it's a memory channel issue","user":"UAUPJLBQX","ts":"1616699656.047900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0u3tV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think it's a memory channel issue"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"e24207cb-f9b3-4469-a4d2-cd2b88239897","type":"message","text":"hmmm","user":"U6QGE7S86","ts":"1616699660.048100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RbUn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmmm"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"b3539eb8-11f5-4090-a8ac-a33948551714","type":"message","text":"That's odd.","user":"U6QGE7S86","ts":"1616699666.048300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pPi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's odd."}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"0ae55ed9-59e4-4e17-8208-c973258c21d2","type":"message","text":"(lol kinda surprised how much we can throw at a problem that just adds `1` to an array, but this is fun :D)","user":"U6QGE7S86","ts":"1616699687.048500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RQ7y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(lol kinda surprised how much we can throw at a problem that just adds "},{"type":"text","text":"1","style":{"code":true}},{"type":"text","text":" to an array, but this is fun :D)"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"acccdeb5-61fa-495f-b7ff-18697a2fc976","type":"message","text":"Two reasons multithreading can help memory bound tasks:\n1. Use more memory channels. I think this laptop only has 1\n2. More cache. Doesn't matter if the array is still too big for the caches so that it has to stream through","user":"UAUPJLBQX","ts":"1616699729.048700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0Fa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Two reasons multithreading can help memory bound tasks:\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Use more memory channels. I think this laptop only has 1"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"More cache. Doesn't matter if the array is still too big for the caches so that it has to stream through"}]}],"style":"ordered","indent":0}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"f0e89905-a1f4-473c-8924-4a847423dc86","type":"message","text":"But I thought point 2 should've helped, Tiger Lake has massive 1.25 MiB L2 caches","user":"UAUPJLBQX","ts":"1616699831.048900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vFfm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But I thought point 2 should've helped, Tiger Lake has massive 1.25 MiB L2 caches"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"b09ddcc8-c602-45fb-987b-25bbf149d5b2","type":"message","text":"```julia&gt; sizeof(Afloat32) / (VectorizationBase.cache_size(Val(2)) * VectorizationBase.num_cores())\n0.762939453125```","user":"UAUPJLBQX","ts":"1616699833.049100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uhau","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> sizeof(Afloat32) / (VectorizationBase.cache_size(Val(2)) * VectorizationBase.num_cores())\n0.762939453125"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"49830291-a85e-4f18-aa60-691f7c1d27c4","type":"message","text":"yeah that is big!","user":"U6QGE7S86","ts":"1616699853.049300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wVxZW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah that is big!"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"ee56e237-fc14-42d5-9603-d0f5f4688bba","type":"message","text":"and the L2 is per core right?","user":"U6QGE7S86","ts":"1616699860.049500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s7+W6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and the L2 is per core right?"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"d882cc11-6e02-460f-ab73-898efff1d885","type":"message","text":"Maybe among 32 cores it fits in L1?","user":"U6QGE7S86","ts":"1616699878.049700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yk+H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe among 32 cores it fits in L1?"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"ad7e2c7a-2eb3-429b-9967-2ddba798c4aa","type":"message","text":"Yeah, L2 is per core","user":"UAUPJLBQX","ts":"1616699933.049900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jY=hb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, L2 is per core"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"040548c2-1b1e-4b99-ad97-5b9038343091","type":"message","text":"the 10980xe is 18 core/36 threads, so only 18 L2 caches","user":"UAUPJLBQX","ts":"1616699949.050100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SuHp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the 10980xe is 18 core/36 threads, so only 18 L2 caches"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"0bcf43b1-3d6d-455d-97f9-186dd4e301e2","type":"message","text":"```julia&gt; using Hwloc\n\njulia&gt; topology_load()\nD0: L0 P0 Machine\n    D1: L0 P0 Package\n        D2: L0 P-1 L3Cache  Cache{size=12582912,depth=3,linesize=64,associativity=12,type=Unified}\n            D3: L0 P-1 L2Cache  Cache{size=1310720,depth=2,linesize=64,associativity=20,type=Unified}\n                D4: L0 P-1 L1Cache  Cache{size=49152,depth=1,linesize=64,associativity=12,type=Data}\n                    D5: L0 P0 Core\n                        D6: L0 P0 PU\n                        D6: L1 P4 PU\n            D3: L1 P-1 L2Cache  Cache{size=1310720,depth=2,linesize=64,associativity=20,type=Unified}\n                D4: L1 P-1 L1Cache  Cache{size=49152,depth=1,linesize=64,associativity=12,type=Data}\n                    D5: L1 P1 Core\n                        D6: L2 P1 PU\n                        D6: L3 P5 PU\n            D3: L2 P-1 L2Cache  Cache{size=1310720,depth=2,linesize=64,associativity=20,type=Unified}\n                D4: L2 P-1 L1Cache  Cache{size=49152,depth=1,linesize=64,associativity=12,type=Data}\n                    D5: L2 P2 Core\n                        D6: L4 P2 PU\n                        D6: L5 P6 PU\n            D3: L3 P-1 L2Cache  Cache{size=1310720,depth=2,linesize=64,associativity=20,type=Unified}\n                D4: L3 P-1 L1Cache  Cache{size=49152,depth=1,linesize=64,associativity=12,type=Data}\n                    D5: L3 P3 Core\n                        D6: L6 P3 PU\n                        D6: L7 P7 PU```","user":"UAUPJLBQX","ts":"1616699969.050300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IEK","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using Hwloc\n\njulia> topology_load()\nD0: L0 P0 Machine\n    D1: L0 P0 Package\n        D2: L0 P-1 L3Cache  Cache{size=12582912,depth=3,linesize=64,associativity=12,type=Unified}\n            D3: L0 P-1 L2Cache  Cache{size=1310720,depth=2,linesize=64,associativity=20,type=Unified}\n                D4: L0 P-1 L1Cache  Cache{size=49152,depth=1,linesize=64,associativity=12,type=Data}\n                    D5: L0 P0 Core\n                        D6: L0 P0 PU\n                        D6: L1 P4 PU\n            D3: L1 P-1 L2Cache  Cache{size=1310720,depth=2,linesize=64,associativity=20,type=Unified}\n                D4: L1 P-1 L1Cache  Cache{size=49152,depth=1,linesize=64,associativity=12,type=Data}\n                    D5: L1 P1 Core\n                        D6: L2 P1 PU\n                        D6: L3 P5 PU\n            D3: L2 P-1 L2Cache  Cache{size=1310720,depth=2,linesize=64,associativity=20,type=Unified}\n                D4: L2 P-1 L1Cache  Cache{size=49152,depth=1,linesize=64,associativity=12,type=Data}\n                    D5: L2 P2 Core\n                        D6: L4 P2 PU\n                        D6: L5 P6 PU\n            D3: L3 P-1 L2Cache  Cache{size=1310720,depth=2,linesize=64,associativity=20,type=Unified}\n                D4: L3 P-1 L1Cache  Cache{size=49152,depth=1,linesize=64,associativity=12,type=Data}\n                    D5: L3 P3 Core\n                        D6: L6 P3 PU\n                        D6: L7 P7 PU"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"4a62370a-0c2e-49b2-a453-dea3d19c440a","type":"message","text":"(laptop) easiest way to get an overview is with Hwloc","user":"UAUPJLBQX","ts":"1616699989.050500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2TO6V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(laptop) easiest way to get an overview is with Hwloc"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"6f00c846-2135-48b0-9a8e-8d0e3f3ffced","type":"message","text":"yup yup","user":"U6QGE7S86","ts":"1616700014.050700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GgH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yup yup"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"619d0864-5374-4f3c-b206-c5a86e138a1e","type":"message","text":"I do love pulling out `shell&gt; lstopo` though","user":"U6QGE7S86","ts":"1616700029.050900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BmsF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I do love pulling out "},{"type":"text","text":"shell> lstopo","style":{"code":true}},{"type":"text","text":" though"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"803c42d0-daa7-4633-862f-e9dc2f79cf50","type":"message","text":"10980XE:\n```julia&gt; sizeof(Afloat32) / (VectorizationBase.cache_size(Val(1)) * VectorizationBase.num_cores()) # L₁\n6.781684027777778\n\njulia&gt; sizeof(Afloat32) / (VectorizationBase.cache_size(Val(2)) * VectorizationBase.num_cores()) # L₂\n0.21192762586805555```\nSo L1s are still too small","user":"UAUPJLBQX","ts":"1616700094.051100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mWr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"10980XE:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> sizeof(Afloat32) / (VectorizationBase.cache_size(Val(1)) * VectorizationBase.num_cores()) # L₁\n6.781684027777778\n\njulia> sizeof(Afloat32) / (VectorizationBase.cache_size(Val(2)) * VectorizationBase.num_cores()) # L₂\n0.21192762586805555"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"So L1s are still too small"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"3ade65c1-f02a-48d6-b43e-be2ea800b407","type":"message","text":"OK - can you see your instruction pipelines in 10980XE? No way to know if you get more ILP?","user":"U6QGE7S86","ts":"1616700131.051300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Wwqay","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"OK - can you see your instruction pipelines in 10980XE? No way to know if you get more ILP?"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"b86b95d1-af27-4235-8bc6-955709f80862","type":"message","text":"```julia&gt; increment!(x) = @avxt x .+= 1\nincrement! (generic function with 1 method)\n\njulia&gt; s = @belapsed increment!($Afloat32)\n6.0342e-6\n\njulia&gt; 1e-9 * length(Afloat32) / s # GFLOPS\n165.72205097610288```","user":"UAUPJLBQX","ts":"1616700329.051500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ULOo","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> increment!(x) = @avxt x .+= 1\nincrement! (generic function with 1 method)\n\njulia> s = @belapsed increment!($Afloat32)\n6.0342e-6\n\njulia> 1e-9 * length(Afloat32) / s # GFLOPS\n165.72205097610288"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"a7ef1ee2-dab6-4f52-a04f-69edac678fdf","type":"message","text":"It's getting 165 GFLOPS on 18 cores","user":"UAUPJLBQX","ts":"1616700343.051700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ruI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's getting 165 GFLOPS on 18 cores"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"4e9cc525-4628-4f97-843c-86d3ce6c70a4","type":"message","text":"It doesn't need much ILP for that. A single core can do 130 GFLOPS of Float32 addition","user":"UAUPJLBQX","ts":"1616700437.051900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3rFdJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It doesn't need much ILP for that. A single core can do 130 GFLOPS of Float32 addition"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"34956f74-9eb4-4313-83ca-c9fe171feb03","type":"message","text":"hot damn","user":"U6QGE7S86","ts":"1616700447.052100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wSw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hot damn"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"cc96c527-0d7c-4486-a99a-9106832f642f","type":"message","text":"For comparison\n```julia&gt; using Octavian\n\njulia&gt; C = similar(Afloat32);\n\njulia&gt; @benchmark matmul!($C, $Afloat32, $Afloat32)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     617.250 μs (0.00% GC)\n  median time:      624.061 μs (0.00% GC)\n  mean time:        623.656 μs (0.00% GC)\n  maximum time:     850.805 μs (0.00% GC)\n  --------------\n  samples:          8001\n  evals/sample:     1\n\njulia&gt; 2e-9*length(C)*size(Afloat32,2) / 617.250e-6\n3240.178209801539```","user":"UAUPJLBQX","ts":"1616700825.052300","team":"T68168MUP","edited":{"user":"UAUPJLBQX","ts":"1616700836.000000"},"blocks":[{"type":"rich_text","block_id":"iNrL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For comparison\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using Octavian\n\njulia> C = similar(Afloat32);\n\njulia> @benchmark matmul!($C, $Afloat32, $Afloat32)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     617.250 μs (0.00% GC)\n  median time:      624.061 μs (0.00% GC)\n  mean time:        623.656 μs (0.00% GC)\n  maximum time:     850.805 μs (0.00% GC)\n  --------------\n  samples:          8001\n  evals/sample:     1\n\njulia> 2e-9*length(C)*size(Afloat32,2) / 617.250e-6\n3240.178209801539"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX","reactions":[{"name":"italian-chef-kiss","users":["U6QGE7S86"],"count":1}]},{"client_msg_id":"a6f1d0e7-13b0-4d6d-885b-815c8a9d3efe","type":"message","text":"20x the GFLOPS from matmul as from `a .+= 1`. `a .+= 1` is all about memory.","user":"UAUPJLBQX","ts":"1616700880.052600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HWT9g","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"20x the GFLOPS from matmul as from "},{"type":"text","text":"a .+= 1","style":{"code":true}},{"type":"text","text":". "},{"type":"text","text":"a .+= 1","style":{"code":true}},{"type":"text","text":" is all about memory."}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"c5baa996-dc52-4cd8-9f78-e0379d018290","type":"message","text":"So all the array access patterns and register reuse shenanigans is what costs the 20x?","user":"U6QGE7S86","ts":"1616701500.052900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5o8o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So all the array access patterns and register reuse shenanigans is what costs the 20x?"}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"e0d0fa39-327d-4f3f-ab23-fd856e30b717","type":"message","text":"Yes. Matrix multiplication lets us reuse memory in registers, and then again in cache.\nWhen doing A*B, you can imagine dividing A into horizontal tiles and B into vertical tiles.\nEvery one of these A tiles must be multiplied with every one of these B tiles. That means if we load one of these tiles to a certain point in memory, that is a lot of potential reuse. (We also divide A and B along their shared axis/the inner product axis, but that's just to get things into small enough pieces).\n\nFor each level of memory -- the L3, L2, and L1 cache, and then finally the registers -- we add a level of division so that some chunk can live there and maximize reuse.","user":"UAUPJLBQX","ts":"1616708719.053100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CV8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes. Matrix multiplication lets us reuse memory in registers, and then again in cache.\nWhen doing A*B, you can imagine dividing A into horizontal tiles and B into vertical tiles.\nEvery one of these A tiles must be multiplied with every one of these B tiles. That means if we load one of these tiles to a certain point in memory, that is a lot of potential reuse. (We also divide A and B along their shared axis/the inner product axis, but that's just to get things into small enough pieces).\n\nFor each level of memory -- the L3, L2, and L1 cache, and then finally the registers -- we add a level of division so that some chunk can live there and maximize reuse."}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"95be9235-e554-49bb-9d3c-7edc9fa96ad1","type":"message","text":"There's also a 2x coming from fma instructions.","user":"UAUPJLBQX","ts":"1616708739.053300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9qx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There's also a 2x coming from fma instructions."}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"f683d5ca-5512-4e13-b47b-99c3f9b21201","type":"message","text":"that too is nice.","user":"U6QGE7S86","ts":"1616708803.053500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9Du3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that too is nice."}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"},{"client_msg_id":"976dfb5e-abbb-4072-ac0f-bba92a130517","type":"message","text":"I don't think using MT assists with using more memory channels. The memory controller is for the whole CPU. Even if a single core is utilizing the memory it will use all 4 channels (In the HEDT CPU's). This is the reason you saw almost no improvement in single vs multi on the test above. Because a single thread could almost saturate memory.","user":"UAEJRV3KJ","ts":"1616780732.066800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qDf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't think using MT assists with using more memory channels. The memory controller is for the whole CPU. Even if a single core is utilizing the memory it will use all 4 channels (In the HEDT CPU's). This is the reason you saw almost no improvement in single vs multi on the test above. Because a single thread could almost saturate memory."}]}]}],"thread_ts":"1616695643.034400","parent_user_id":"UAUPJLBQX"}]