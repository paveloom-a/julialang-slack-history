[{"client_msg_id":"3e4ca342-db40-4c92-b76c-79cb079ea601","type":"message","text":"Asked this is general, but it was pointed out that this would be a better channel.\n\nDoes anyone have any advice / could point me towards resources looking at efficiently implementing multiplication between a block-diagonal and a dense matrix? (In particular when the blocks in the block-diagonal matrix are quite small in comparison to the overall matrix, if that’s relevant).","user":"U6PQP41C3","ts":"1611348537.044400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AG0RC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Asked this is general, but it was pointed out that this would be a better channel.\n\nDoes anyone have any advice / could point me towards resources looking at efficiently implementing multiplication between a block-diagonal and a dense matrix? (In particular when the blocks in the block-diagonal matrix are quite small in comparison to the overall matrix, if that’s relevant)."}]}]}],"thread_ts":"1611348537.044400","reply_count":6,"reply_users_count":3,"latest_reply":"1611448396.051200","reply_users":["U82RE6STE","U6PQP41C3","U011TRN4QBU"],"subscribed":false},{"client_msg_id":"a72fdf75-910d-41ca-99ad-10b197831df0","type":"message","text":"Doesn't BlockDiagonals.jl have one?","user":"U82RE6STE","ts":"1611394036.045100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CjzD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Doesn't BlockDiagonals.jl have one?"}]}]}],"thread_ts":"1611348537.044400","parent_user_id":"U6PQP41C3"},{"client_msg_id":"489b1848-76ba-4141-8163-22f6722dccfa","type":"message","text":"Yeah, that’s been my starting point. Doesn’t convincingly outperform a dense baseline though","user":"U6PQP41C3","ts":"1611400968.045300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Rr7H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, that’s been my starting point. Doesn’t convincingly outperform a dense baseline though"}]}]}],"thread_ts":"1611348537.044400","parent_user_id":"U6PQP41C3"},{"client_msg_id":"cf8943c1-12fa-4c67-9384-388746e368d2","type":"message","text":"Like, I think I’m going to have to get into the weeds. I’ve managed to get substantially better performance by using a similar algorithm to the one in BlockDiagonals, but using LoopVectorization for low-level stuff, but I’m still only 4 or 5 times faster than the equivalent dense algorithm (which isn’t horrible, but isn’t as good as I would have expected either)","user":"U6PQP41C3","ts":"1611401049.045500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1GGV/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Like, I think I’m going to have to get into the weeds. I’ve managed to get substantially better performance by using a similar algorithm to the one in BlockDiagonals, but using LoopVectorization for low-level stuff, but I’m still only 4 or 5 times faster than the equivalent dense algorithm (which isn’t horrible, but isn’t as good as I would have expected either)"}]}]}],"thread_ts":"1611348537.044400","parent_user_id":"U6PQP41C3"},{"client_msg_id":"47f93cdc-4ff8-4735-9035-1ad0f01718ec","type":"message","text":"is your block diagonal very sparse? otherwise there won't be much speedup in the best case anyway. Did you try a sparse x dense product?","user":"U82RE6STE","ts":"1611401913.045700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j=A5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is your block diagonal very sparse? otherwise there won't be much speedup in the best case anyway. Did you try a sparse x dense product?"}]}]}],"thread_ts":"1611348537.044400","parent_user_id":"U6PQP41C3"},{"client_msg_id":"330e93dc-0f8d-4f2c-89ad-c9d8860effd5","type":"message","text":"`LinearMaps.jl` also has block-diagonal functionality. One major obstacle is that the blocks on the diagonal apply to non-contiguously stored (views of) blocks, and you write into such blocks. If you could \"re-block\" your right matrix, then you'd get arguably peak performance by doing something like here: <https://github.com/invenia/BlockDiagonals.jl/issues/34>","user":"U011TRN4QBU","ts":"1611425379.050900","team":"T68168MUP","edited":{"user":"U011TRN4QBU","ts":"1611425410.000000"},"blocks":[{"type":"rich_text","block_id":"XduW5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"LinearMaps.jl","style":{"code":true}},{"type":"text","text":" also has block-diagonal functionality. One major obstacle is that the blocks on the diagonal apply to non-contiguously stored (views of) blocks, and you write into such blocks. If you could \"re-block\" your right matrix, then you'd get arguably peak performance by doing something like here: "},{"type":"link","url":"https://github.com/invenia/BlockDiagonals.jl/issues/34"}]}]}],"thread_ts":"1611348537.044400","parent_user_id":"U6PQP41C3"},{"client_msg_id":"1e4c2066-c74a-4750-b40d-9757402113c6","type":"message","text":"&gt;  is your block diagonal very sparse? otherwise there won’t be much speedup in the best case anyway. Did you try a sparse x dense product?\nYeah, fairly sparse. It’s roughly 300 x 300, and the blocks are 3 x 3.","user":"U6PQP41C3","ts":"1611448396.051200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yaNH","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":" is your block diagonal very sparse? otherwise there won’t be much speedup in the best case anyway. Did you try a sparse x dense product?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, fairly sparse. It’s roughly 300 x 300, and the blocks are 3 x 3."}]}]}],"thread_ts":"1611348537.044400","parent_user_id":"U6PQP41C3"}]