[{"client_msg_id":"9958accb-2569-44ae-a97c-6b8922f3c2c3","type":"message","text":"What's the rationale behind `transpose` being recursive? In what common use case is it different than a non-recursive version?","user":"UENHZ1M08","ts":"1613955339.001000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"n4lTx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What's the rationale behind "},{"type":"text","text":"transpose","style":{"code":true}},{"type":"text","text":" being recursive? In what common use case is it different than a non-recursive version?"}]}]}],"thread_ts":"1613955339.001000","reply_count":5,"reply_users_count":5,"latest_reply":"1614019264.006600","reply_users":["UB197FRCL","UH8A351DJ","UENHZ1M08","U6A936746","U6C937ENB"],"subscribed":false},{"client_msg_id":"ebcaa4cd-25cf-4719-9a61-cf2329bad165","type":"message","text":"Maybe something like below?\n```julia&gt; x = [rand(3), rand(2)] ;\n\njulia&gt; transpose(x) * x\n1.7140877825856058```","user":"UB197FRCL","ts":"1613957248.001100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EQX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe something like below?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> x = [rand(3), rand(2)] ;\n\njulia> transpose(x) * x\n1.7140877825856058"}]}]}],"thread_ts":"1613955339.001000","parent_user_id":"UENHZ1M08"},{"client_msg_id":"61ef43b6-74bc-4eb1-92bf-f0407dbb6b58","type":"message","text":"<https://discourse.julialang.org/t/why-is-transpose-recursive/2550>\n\n<https://github.com/JuliaLang/julia/issues/20978>","user":"UH8A351DJ","ts":"1613957884.001300","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1613958000.000000"},"blocks":[{"type":"rich_text","block_id":"D2o","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://discourse.julialang.org/t/why-is-transpose-recursive/2550"},{"type":"text","text":"\n\n"},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/20978"}]}]}],"thread_ts":"1613955339.001000","parent_user_id":"UENHZ1M08"},{"client_msg_id":"358036d8-9b54-4006-a67b-63d70381105d","type":"message","text":"Thanks, that was a long read. So I guess it's pretty much just specific to arrays of arrays?","user":"UENHZ1M08","ts":"1613958864.002000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Nyr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks, that was a long read. So I guess it's pretty much just specific to arrays of arrays?"}]}]}],"thread_ts":"1613955339.001000","parent_user_id":"UENHZ1M08"},{"client_msg_id":"ee8ca5a5-65cb-4774-bf84-827a6b6d69cb","type":"message","text":"In general all linear algebra operations in Julia are recursive.\nAs well as the well know Transpose, and  Adjoint cases there is also `dot.`\n\nThis turns out to be more useful than I expected. It comes up arrays of ChainRules differentials for example.","user":"U6A936746","ts":"1613987210.002200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p7JA/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In general all linear algebra operations in Julia are recursive.\nAs well as the well know Transpose, and  Adjoint cases there is also "},{"type":"text","text":"dot.\n","style":{"code":true}},{"type":"text","text":"\nThis turns out to be more useful than I expected. It comes up arrays of ChainRules differentials for example."}]}]}],"thread_ts":"1613955339.001000","parent_user_id":"UENHZ1M08"},{"client_msg_id":"C48834A8-A5C8-4E01-86C1-5783A3289F2D","type":"message","text":"Even more fundamental: * is recursive. Thus a lot of nested structures _are_ linear operators and that tells us what their transpose, adjoins, square root... should be and essentially we are simply  computing just that","user":"U6C937ENB","ts":"1614019264.006600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fK52","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Even more fundamental: * is recursive. Thus a lot of nested structures "},{"type":"text","text":"are","style":{"italic":true}},{"type":"text","text":" linear operators and that tells us what their transpose, adjoins, square root... should be and essentially we are simply  computing just that"}]}]}],"thread_ts":"1613955339.001000","parent_user_id":"UENHZ1M08"}]