[{"client_msg_id":"2abf8683-9199-46fb-bb94-36920322b1d6","type":"message","text":"Is there no `zeros(Symmetric{Int}, 3, 3)`? It would be nice to skip the 2n memory initalization step.","user":"U6QGE7S86","ts":"1616089781.003900","team":"T68168MUP","edited":{"user":"U6QGE7S86","ts":"1616089806.000000"},"blocks":[{"type":"rich_text","block_id":"DvilE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there no "},{"type":"text","text":"zeros(Symmetric{Int}, 3, 3)","style":{"code":true}},{"type":"text","text":"? It would be nice to skip the 2n memory initalization step."}]}]}],"thread_ts":"1616089781.003900","reply_count":11,"reply_users_count":4,"latest_reply":"1616091008.006500","reply_users":["UCZ7VBGUD","U6QGE7S86","UGU761DU2","U6N6VQE30"],"subscribed":false},{"client_msg_id":"5428c4ff-5b85-47eb-96f9-5dc6f8fff608","type":"message","text":"I think `Symmetric`’s are actually backed by a full matrix, they just define custom getindex’s so it only looks at one side of it. So I think their purpose is to ensure exact symmetry so you avoid numerical issues, but not necessarily to save memory","user":"UCZ7VBGUD","ts":"1616089871.004100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w=r","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think "},{"type":"text","text":"Symmetric","style":{"code":true}},{"type":"text","text":"’s are actually backed by a full matrix, they just define custom getindex’s so it only looks at one side of it. So I think their purpose is to ensure exact symmetry so you avoid numerical issues, but not necessarily to save memory"}]}]}],"thread_ts":"1616089781.003900","parent_user_id":"U6QGE7S86"},{"client_msg_id":"d52c762b-3448-4523-bc80-1d42ca636f48","type":"message","text":"Oh gotcha. And what about `zeros(LowerTriangular{Int}, 3, 3)`?","user":"U6QGE7S86","ts":"1616089909.004300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LS5qA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh gotcha. And what about "},{"type":"text","text":"zeros(LowerTriangular{Int}, 3, 3)","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1616089781.003900","parent_user_id":"U6QGE7S86"},{"client_msg_id":"ab13c0f5-4333-4033-9084-88bd0d2b4679","type":"message","text":"The docs say\n```LowerTriangular(A::AbstractMatrix)\n\n  Construct a LowerTriangular view of the matrix A.```\nso I think it’s the same thing there","user":"UCZ7VBGUD","ts":"1616089931.004500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YuxBm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The docs say\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"LowerTriangular(A::AbstractMatrix)\n\n  Construct a LowerTriangular view of the matrix A."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"so I think it’s the same thing there"}]}]}],"thread_ts":"1616089781.003900","parent_user_id":"U6QGE7S86"},{"client_msg_id":"799019ca-4dc4-44f3-b799-e56f30fed457","type":"message","text":"both are parametrized by the type of the parent matrix, so you could make a custom matrix storage type that only stores half of it, then wrap it in Symmetric to make it act like a full matrix","user":"UCZ7VBGUD","ts":"1616089950.004700","team":"T68168MUP","edited":{"user":"UCZ7VBGUD","ts":"1616089962.000000"},"blocks":[{"type":"rich_text","block_id":"XuI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"both are parametrized by the type of the parent matrix, so you could make a custom matrix storage type that only stores half of it, then wrap it in Symmetric to make it act like a full matrix"}]}]}],"thread_ts":"1616089781.003900","parent_user_id":"U6QGE7S86","reactions":[{"name":"+1","users":["UGU761DU2"],"count":1}]},{"client_msg_id":"b60f0c62-ef13-4235-8bb2-ec896b590b43","type":"message","text":"Things like `Tridiagonal(zeros(n-1), zeros(n), zeros(n-1))` also shouldn’t allocate any excess memory AFAICT","user":"UGU761DU2","ts":"1616089991.005000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PIj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Things like "},{"type":"text","text":"Tridiagonal(zeros(n-1), zeros(n), zeros(n-1))","style":{"code":true}},{"type":"text","text":" also shouldn’t allocate any excess memory AFAICT"}]}]}],"thread_ts":"1616089781.003900","parent_user_id":"U6QGE7S86"},{"client_msg_id":"c8b30960-eca9-4c49-8b8a-a5e02b79646e","type":"message","text":"Yeah I'm just doing some dynamic programming where the access pattern is triangle-shaped so I was wondering if there were some nice matrix facilities for that","user":"U6QGE7S86","ts":"1616089992.005200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OCTDi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah I'm just doing some dynamic programming where the access pattern is triangle-shaped so I was wondering if there were some nice matrix facilities for that"}]}]}],"thread_ts":"1616089781.003900","parent_user_id":"U6QGE7S86","reactions":[{"name":"+1","users":["UGU761DU2"],"count":1}]},{"client_msg_id":"91c616ee-594d-4134-bc04-34fee42b9cda","type":"message","text":"yeah, the diagonal ones are different; there there’s an asymptotic difference (n vs n^2) instead of a constant-factor difference, so I think that’s why","user":"UCZ7VBGUD","ts":"1616090041.005400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8bdb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, the diagonal ones are different; there there’s an asymptotic difference (n vs n^2) instead of a constant-factor difference, so I think that’s why"}]}]}],"thread_ts":"1616089781.003900","parent_user_id":"U6QGE7S86","reactions":[{"name":"correct_answer","users":["U6N6VQE30"],"count":1}]},{"client_msg_id":"fb3a30b4-66b6-4ba2-8074-f8d69268ae8e","type":"message","text":"Usually indexing gets slow and awkward if you store half of the data, so people don't bother","user":"U6N6VQE30","ts":"1616090668.005600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BdDN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Usually indexing gets slow and awkward if you store half of the data, so people don't bother"}]}]}],"thread_ts":"1616089781.003900","parent_user_id":"U6QGE7S86"},{"client_msg_id":"aba6c00c-c6f9-4754-a512-a2d14cec4b61","type":"message","text":"I'm wondering if there isn't some interesting custom array that can be built so that you can have locale proximity for the subsequent elements in the dynamic programming problems","user":"U6QGE7S86","ts":"1616090812.005900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"68W","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm wondering if there isn't some interesting custom array that can be built so that you can have locale proximity for the subsequent elements in the dynamic programming problems"}]}]}],"thread_ts":"1616089781.003900","parent_user_id":"U6QGE7S86"},{"client_msg_id":"15cf1980-3de2-4439-accf-b1831ed3153f","type":"message","text":"Depends on your problem, dynamic programming is quite a broad domain...","user":"U6N6VQE30","ts":"1616090907.006300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"I9/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Depends on your problem, dynamic programming is quite a broad domain..."}]}]}],"thread_ts":"1616089781.003900","parent_user_id":"U6QGE7S86"},{"client_msg_id":"2d2087c6-bafa-4674-bac5-a8453d570d3a","type":"message","text":"Oh sure. I think my scope is a rectangular array with a reduction operation as the update step for new optimal solutions.","user":"U6QGE7S86","ts":"1616091008.006500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"I0DHt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh sure. I think my scope is a rectangular array with a reduction operation as the update step for new optimal solutions."}]}]}],"thread_ts":"1616089781.003900","parent_user_id":"U6QGE7S86"}]