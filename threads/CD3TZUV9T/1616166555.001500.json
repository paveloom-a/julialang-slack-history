[{"client_msg_id":"43577f91-a978-4aeb-802b-5de292f97ed7","type":"message","text":"To what extent should I make my packages behave like the REPL vs non-REPL? e.g. `Integer^(negative integer)` :\n```julia&gt; 2^-1\n0.5\n\njulia&gt; foo(x, n) = x^n\nfoo (generic function with 1 method)\n\njulia&gt; foo(2, -1)\nERROR: DomainError with -1:\nCannot raise an integer x to a negative power -1.\nMake x or -1 a float by adding a zero decimal (e.g., 2.0^-1 or 2^-1.0 instead of 2^-1), or write 1/x^1, float(x)^-1, x^float(-1) or (x//1)^-1\nStacktrace:\n [1] throw_domerr_powbysq(#unused#::Int64, p::Int64)\n   @ Base ./intfuncs.jl:244\n [2] power_by_squaring(x_::Int64, p::Int64)\n   @ Base ./intfuncs.jl:265\n [3] ^\n   @ ./intfuncs.jl:289 [inlined]\n [4] foo(x::Int64, n::Int64)\n   @ Main ./REPL[2]:1\n [5] top-level scope\n   @ REPL[3]:1```\nIt's quite useful to automatically promote to `float`  and carry on, but is it bad practice?","user":"UDSG73JTH","ts":"1616166555.001500","team":"T68168MUP","edited":{"user":"UDSG73JTH","ts":"1616166591.000000"},"blocks":[{"type":"rich_text","block_id":"wuxq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"To what extent should I make my packages behave like the REPL vs non-REPL? e.g. "},{"type":"text","text":"Integer^(negative integer)","style":{"code":true}},{"type":"text","text":" :\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> 2^-1\n0.5\n\njulia> foo(x, n) = x^n\nfoo (generic function with 1 method)\n\njulia> foo(2, -1)\nERROR: DomainError with -1:\nCannot raise an integer x to a negative power -1.\nMake x or -1 a float by adding a zero decimal (e.g., 2.0^-1 or 2^-1.0 instead of 2^-1), or write 1/x^1, float(x)^-1, x^float(-1) or (x//1)^-1\nStacktrace:\n [1] throw_domerr_powbysq(#unused#::Int64, p::Int64)\n   @ Base ./intfuncs.jl:244\n [2] power_by_squaring(x_::Int64, p::Int64)\n   @ Base ./intfuncs.jl:265\n [3] ^\n   @ ./intfuncs.jl:289 [inlined]\n [4] foo(x::Int64, n::Int64)\n   @ Main ./REPL[2]:1\n [5] top-level scope\n   @ REPL[3]:1"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"It's quite useful to automatically promote to "},{"type":"text","text":"float","style":{"code":true}},{"type":"text","text":"  and carry on, but is it bad practice?"}]}]}],"thread_ts":"1616166555.001500","reply_count":3,"reply_users_count":2,"latest_reply":"1616166907.002100","reply_users":["U7HAYKY9X","U017LQ3A59U"],"subscribed":false},{"client_msg_id":"0b433a6f-9b0d-4b60-ae9a-9e970eed0525","type":"message","text":"This is not an issue with the REPL directly, but with whether the exponent is a compile-time constant (a literal, in this case).\nIt's not bad style to promote to float, necessarily, but it will lead to type instability that can silently kill performance. You can do it internally in a package if you know performance won't be a problem, but I wouldn't do it with some function where the promoted result could be handed back to the user","user":"U7HAYKY9X","ts":"1616166768.001700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"k+GN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is not an issue with the REPL directly, but with whether the exponent is a compile-time constant (a literal, in this case).\nIt's not bad style to promote to float, necessarily, but it will lead to type instability that can silently kill performance. You can do it internally in a package if you know performance won't be a problem, but I wouldn't do it with some function where the promoted result could be handed back to the user"}]}]}],"thread_ts":"1616166555.001500","parent_user_id":"UDSG73JTH"},{"client_msg_id":"2189ddb5-5b38-4e0e-926a-130b07c5fc3f","type":"message","text":"Because this particular case is such a weird quirk, I would avoid it completely and always require floats if your exponent could be negative","user":"U7HAYKY9X","ts":"1616166829.001900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6GAK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Because this particular case is such a weird quirk, I would avoid it completely and always require floats if your exponent could be negative"}]}]}],"thread_ts":"1616166555.001500","parent_user_id":"UDSG73JTH"},{"client_msg_id":"6099a851-56fe-4b4f-8e04-6143f830d624","type":"message","text":"Alternatively you could always promote the result regardless of the sign of the exponent, recovering type stability (but maybe confusing your user)","user":"U017LQ3A59U","ts":"1616166907.002100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2vh9n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Alternatively you could always promote the result regardless of the sign of the exponent, recovering type stability (but maybe confusing your user)"}]}]}],"thread_ts":"1616166555.001500","parent_user_id":"UDSG73JTH"}]