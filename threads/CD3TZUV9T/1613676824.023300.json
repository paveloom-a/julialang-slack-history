[{"client_msg_id":"20c25511-d96d-4e7f-87e2-c7e76b838168","type":"message","text":"Perhaps it affects things like compilation speed? I must admit, I don't really know.","user":"U8J1KET6K","ts":"1613676824.023300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4/1hI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Perhaps it affects things like compilation speed? I must admit, I don't really know."}]}]}],"thread_ts":"1613676824.023300","reply_count":8,"reply_users_count":3,"latest_reply":"1613821434.000100","reply_users":["U7HAYKY9X","U8J1KET6K","U68QW0PUZ"],"subscribed":false},{"client_msg_id":"efda0b51-d2af-4348-8ecc-08a2f2d83c75","type":"message","text":"It does lead to more efficient codegen in some circumstances, even if its fields are mutable. For example, if you refer to a field of your struct, the compiler knows for sure it's the same thing across time and so can save the field in a register.","user":"U7HAYKY9X","ts":"1613677630.023400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yFOD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It does lead to more efficient codegen in some circumstances, even if its fields are mutable. For example, if you refer to a field of your struct, the compiler knows for sure it's the same thing across time and so can save the field in a register."}]}]}],"thread_ts":"1613676824.023300","parent_user_id":"U8J1KET6K"},{"client_msg_id":"49b150db-5580-48e6-8eae-38431b6c51a7","type":"message","text":"Thank you. And what if that field is itself mutable though? Like a `Dict` or a `Ref`? is there any benefit there?","user":"U8J1KET6K","ts":"1613677667.023600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9Ey","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thank you. And what if that field is itself mutable though? Like a "},{"type":"text","text":"Dict","style":{"code":true}},{"type":"text","text":" or a "},{"type":"text","text":"Ref","style":{"code":true}},{"type":"text","text":"? is there any benefit there?"}]}]}],"thread_ts":"1613676824.023300","parent_user_id":"U8J1KET6K"},{"client_msg_id":"1303f58e-f908-443f-80e0-4fa8c8d1dcde","type":"message","text":"Then there are no benefits to immutability, and there may even be some detriments. For example, I don't think the compiler will be clever enough to place the content of mutable fields close in memory","user":"U7HAYKY9X","ts":"1613677793.024700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uwJh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Then there are no benefits to immutability, and there may even be some detriments. For example, I don't think the compiler will be clever enough to place the content of mutable fields close in memory"}]}]}],"thread_ts":"1613676824.023300","parent_user_id":"U8J1KET6K"},{"client_msg_id":"de0961cf-6667-46c8-816c-10d65823583e","type":"message","text":"I'm not sure about how mutable structs's memory layout are, actually.","user":"U7HAYKY9X","ts":"1613677840.025500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sCI9Q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not sure about how mutable structs's memory layout are, actually."}]}]}],"thread_ts":"1613676824.023300","parent_user_id":"U8J1KET6K"},{"client_msg_id":"70eb534f-08b8-4a25-b064-df5e3fe3a649","type":"message","text":"I just checked using `Base.fieldoffset` .  The vanilla struct kept its field's values (all bitstypes) inline with each of its constructs [the field values are kept `inline`.]  And this was repeated when changed one field's type from `Float64` to `Ref{Float64}`.\nThe mutable struct constructed instances that kept its field's values (all bitstypes)  at arms length ..  not `inline`.]\n```julia&gt; struct Stable\n          x::Int64\n          y::Float64\n          z::Char\n       end\n\njulia&gt; struct StableWithRef\n          x::Int64\n          y::Ref{Float64}\n          z::Char\n       end\n\njulia&gt; mutable struct Mutable\n          x::Int64\n          y::Float64\n          z::Char\n       end```","user":"U68QW0PUZ","ts":"1613691762.028800","team":"T68168MUP","edited":{"user":"U68QW0PUZ","ts":"1613692295.000000"},"blocks":[{"type":"rich_text","block_id":"Xx75","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I just checked using "},{"type":"text","text":"Base.fieldoffset","style":{"code":true}},{"type":"text","text":" .  The vanilla struct kept its field's values (all bitstypes) inline with each of its constructs [the field values are kept `inline`.]  And this was repeated when changed one field's type from `Float64` to `Ref{Float64}`.\nThe mutable struct constructed instances that kept its field's values (all bitstypes)  at arms length ..  not `inline`.]\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> struct Stable\n          x::Int64\n          y::Float64\n          z::Char\n       end\n\njulia> struct StableWithRef\n          x::Int64\n          y::Ref{Float64}\n          z::Char\n       end\n\njulia> mutable struct Mutable\n          x::Int64\n          y::Float64\n          z::Char\n       end"}]}]}],"thread_ts":"1613676824.023300","parent_user_id":"U8J1KET6K"},{"client_msg_id":"ffbadd51-5755-4095-acb8-f52d8b3605c5","type":"message","text":"Thank you. Thus one conclusion is that using `Ref` is okay for a specific field that might need to be \"mutated\"","user":"U8J1KET6K","ts":"1613730130.029100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5rn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thank you. Thus one conclusion is that using "},{"type":"text","text":"Ref","style":{"code":true}},{"type":"text","text":" is okay for a specific field that might need to be \"mutated\""}]}]}],"thread_ts":"1613676824.023300","parent_user_id":"U8J1KET6K"},{"client_msg_id":"2dad085d-9454-4549-9765-b6c955f9ba08","type":"message","text":"on this very small sample, that is the case -- I dunno if this is true for field types that are not bitstypes -- I can check this evening","user":"U68QW0PUZ","ts":"1613742230.035200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AmwYW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"on this very small sample, that is the case -- I dunno if this is true for field types that are not bitstypes -- I can check this evening"}]}]}],"thread_ts":"1613676824.023300","parent_user_id":"U8J1KET6K"},{"client_msg_id":"235ea97f-1df6-44f9-903b-a7d0b8c76de9","type":"message","text":"Yes.  Your conclusion holds up through an additional test.","user":"U68QW0PUZ","ts":"1613821434.000100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BCa7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes.  Your conclusion holds up through an additional test."}]}]}],"thread_ts":"1613676824.023300","parent_user_id":"U8J1KET6K","reactions":[{"name":"heart","users":["U8J1KET6K"],"count":1}]}]