[{"client_msg_id":"2ec516e6-208c-4fe6-af8b-72125e8ab0d1","type":"message","text":"Question on how to use structs - my impression is that struct fields need to be annotated explicitly to ensure type stability, e.g., \n```using Test\nstruct foo\n    a\nend\nf(x::foo) = x.a\n@inferred f(foo(1)) # is not type stable```\nI have a struct with a bunch of fields, and I’ve been explicitly annotating all types to ensure type stability. I now want to be able to use different types for some of these fields (e.g., from Array to SparseMatrixCSC). \n\nIs there a way to allow for this while retaining type stability? I figured I could use `Union`, but that seemed hacky. ","user":"U011LUQ182G","ts":"1610053289.129200","team":"T68168MUP","edited":{"user":"U011LUQ182G","ts":"1610053923.000000"},"blocks":[{"type":"rich_text","block_id":"x6YPg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Question on how to use structs - my impression is that struct fields need to be annotated explicitly to ensure type stability, e.g., \n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using Test\nstruct foo\n    a\nend\nf(x::foo) = x.a\n@inferred f(foo(1)) # is not type stable"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I have a struct with a bunch of fields, and I’ve been explicitly annotating all types to ensure type stability. I now want to be able to use different types for some of these fields (e.g., from Array to SparseMatrixCSC). \n\nIs there a way to allow for this while retaining type stability? I figured I could use "},{"type":"text","text":"Union","style":{"code":true}},{"type":"text","text":", but that seemed hacky. "}]}]}],"thread_ts":"1610053289.129200","reply_count":3,"reply_users_count":2,"latest_reply":"1610055188.132700","reply_users":["U6NFPDBV1","U011LUQ182G"],"subscribed":false},{"client_msg_id":"c6d6a501-7a41-4304-b770-73b6644d3256","type":"message","text":"You can parametrize your types, e.g.:\n```struct Foo{T}\n  x::T\nend```","user":"U6NFPDBV1","ts":"1610054040.129400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d2x20","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can parametrize your types, e.g.:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct Foo{T}\n  x::T\nend"}]}]}],"thread_ts":"1610053289.129200","parent_user_id":"U011LUQ182G","reactions":[{"name":"correct_answer","users":["U6740K1SP","UCZ7VBGUD","UB197FRCL"],"count":3}]},{"client_msg_id":"674ade11-9e06-4070-809a-a75902a54519","type":"message","text":"And those parameters can have their own constraints e.g. `&lt;:AbstractMatrix`","user":"U6NFPDBV1","ts":"1610054067.129700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"z38","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And those parameters can have their own constraints e.g. "},{"type":"text","text":"<:AbstractMatrix","style":{"code":true}}]}]}],"thread_ts":"1610053289.129200","parent_user_id":"U011LUQ182G"},{"client_msg_id":"213137E5-467E-4B09-8BBA-3AD22875DA6A","type":"message","text":"Thanks! Will try this when I get back to the computer","user":"U011LUQ182G","ts":"1610055188.132700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"npnV1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks! Will try this when I get back to the computer"}]}]}],"thread_ts":"1610053289.129200","parent_user_id":"U011LUQ182G"}]