[{"client_msg_id":"2ec516e6-208c-4fe6-af8b-72125e8ab0d1","type":"message","text":"Question on how to use structs - my impression is that struct fields need to be annotated explicitly to ensure type stability, e.g., \n```using Test\nstruct foo\n    a\nend\nf(x::foo) = x.a\n@inferred f(foo(1)) # is not type stable```\nI have a struct with a bunch of fields, and I’ve been explicitly annotating all types to ensure type stability. I now want to be able to use different types for some of these fields (e.g., from Array to SparseMatrixCSC). \n\nIs there a way to allow for this while retaining type stability? I figured I could use `Union`, but that seemed hacky. ","user":"U011LUQ182G","ts":"1610053289.129200","team":"T68168MUP","edited":{"user":"U011LUQ182G","ts":"1610053923.000000"},"blocks":[{"type":"rich_text","block_id":"x6YPg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Question on how to use structs - my impression is that struct fields need to be annotated explicitly to ensure type stability, e.g., \n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using Test\nstruct foo\n    a\nend\nf(x::foo) = x.a\n@inferred f(foo(1)) # is not type stable"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I have a struct with a bunch of fields, and I’ve been explicitly annotating all types to ensure type stability. I now want to be able to use different types for some of these fields (e.g., from Array to SparseMatrixCSC). \n\nIs there a way to allow for this while retaining type stability? I figured I could use "},{"type":"text","text":"Union","style":{"code":true}},{"type":"text","text":", but that seemed hacky. "}]}]}],"thread_ts":"1610053289.129200","reply_count":14,"reply_users_count":5,"latest_reply":"1610127609.137000","reply_users":["U6NFPDBV1","U011LUQ182G","U7HAYKY9X","UB7JS9CHF","U67G3QRJM"],"subscribed":false},{"client_msg_id":"c6d6a501-7a41-4304-b770-73b6644d3256","type":"message","text":"You can parametrize your types, e.g.:\n```struct Foo{T}\n  x::T\nend```","user":"U6NFPDBV1","ts":"1610054040.129400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d2x20","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can parametrize your types, e.g.:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct Foo{T}\n  x::T\nend"}]}]}],"thread_ts":"1610053289.129200","parent_user_id":"U011LUQ182G","reactions":[{"name":"correct_answer","users":["U6740K1SP","UCZ7VBGUD","UB197FRCL","U67G3QRJM"],"count":4}]},{"client_msg_id":"674ade11-9e06-4070-809a-a75902a54519","type":"message","text":"And those parameters can have their own constraints e.g. `&lt;:AbstractMatrix`","user":"U6NFPDBV1","ts":"1610054067.129700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"z38","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And those parameters can have their own constraints e.g. "},{"type":"text","text":"<:AbstractMatrix","style":{"code":true}}]}]}],"thread_ts":"1610053289.129200","parent_user_id":"U011LUQ182G"},{"client_msg_id":"213137E5-467E-4B09-8BBA-3AD22875DA6A","type":"message","text":"Thanks! Will try this when I get back to the computer","user":"U011LUQ182G","ts":"1610055188.132700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"npnV1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks! Will try this when I get back to the computer"}]}]}],"thread_ts":"1610053289.129200","parent_user_id":"U011LUQ182G"},{"client_msg_id":"dfd350cc-c876-4e11-87c8-46f6e335e4f2","type":"message","text":"sweet, I didn’t realize you didn’t need to explicitly specify the type like `Foo{Int64}.` Thanks for the help!","user":"U011LUQ182G","ts":"1610069923.133200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ABE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"sweet, I didn’t realize you didn’t need to explicitly specify the type like "},{"type":"text","text":"Foo{Int64}.","style":{"code":true}},{"type":"text","text":" Thanks for the help!"}]}]}],"thread_ts":"1610053289.129200","parent_user_id":"U011LUQ182G","reactions":[{"name":"+1","users":["U6NFPDBV1"],"count":1}]},{"client_msg_id":"fe974da9-493f-4dc1-a496-c53cda9b969d","type":"message","text":"I end up with a lot of types if I want to specialize most fields, e.g., `foo{T1,T2,T3,T4,...}`. is there a cleaner/better way to approach this apart from refactoring/sub-structs?","user":"U011LUQ182G","ts":"1610083434.133500","team":"T68168MUP","edited":{"user":"U011LUQ182G","ts":"1610084730.000000"},"blocks":[{"type":"rich_text","block_id":"94S","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I end up with a lot of types if I want to specialize most fields, e.g., "},{"type":"text","text":"foo{T1,T2,T3,T4,...}","style":{"code":true}},{"type":"text","text":". is there a cleaner/better way to approach this apart from refactoring/sub-structs?"}]}]}],"thread_ts":"1610053289.129200","parent_user_id":"U011LUQ182G"},{"client_msg_id":"bd7d9862-88e6-4234-ad73-3e3019cb6990","type":"message","text":"No real way to fix that, no. Probably, you don't really need all your fields to be generic, but if you do, it's going to get verbose.","user":"U7HAYKY9X","ts":"1610097664.134000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"e3nZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No real way to fix that, no. Probably, you don't really need all your fields to be generic, but if you do, it's going to get verbose."}]}]}],"thread_ts":"1610053289.129200","parent_user_id":"U011LUQ182G","reactions":[{"name":"+1","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"4fc96f92-15e5-4d1d-95fb-770d5acb1f9f","type":"message","text":"If you have tons of fields, maybe refactoring and using more composition (substructs) might make life easier.","user":"UB7JS9CHF","ts":"1610122061.134300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2EWSO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you have tons of fields, maybe refactoring and using more composition (substructs) might make life easier."}]}]}],"thread_ts":"1610053289.129200","parent_user_id":"U011LUQ182G"},{"client_msg_id":"a122f5ee-8ae0-4474-9c71-c575163a5431","type":"message","text":"Also, do you have sets of fields that can really all be the same type, without losing any real flexibility?  Maybe you have something where a few fields are `::T`, and you also have a collection `Vector{T}`, or `Dict{String,T}`","user":"UB7JS9CHF","ts":"1610122169.134500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DCmbU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, do you have sets of fields that can really all be the same type, without losing any real flexibility?  Maybe you have something where a few fields are "},{"type":"text","text":"::T","style":{"code":true}},{"type":"text","text":", and you also have a collection "},{"type":"text","text":"Vector{T}","style":{"code":true}},{"type":"text","text":", or "},{"type":"text","text":"Dict{String,T}","style":{"code":true}}]}]}],"thread_ts":"1610053289.129200","parent_user_id":"U011LUQ182G"},{"client_msg_id":"9a73869b-3198-45b8-bdc0-97eb61de7c0e","type":"message","text":"I think if I had a really large number of types, substructs would be the right way to go. after fiddling with it, I ended up with fewer types than I expected - my struct is something like \n```struct foo{d,N,IMat,MMat,Pmat,DMat,LMat}```\nwhere I’m specializing for 5 types of matrices","user":"U011LUQ182G","ts":"1610125874.134700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wJm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think if I had a really large number of types, substructs would be the right way to go. after fiddling with it, I ended up with fewer types than I expected - my struct is something like \n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct foo{d,N,IMat,MMat,Pmat,DMat,LMat}"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"where I’m specializing for 5 types of matrices"}]}]}],"thread_ts":"1610053289.129200","parent_user_id":"U011LUQ182G"},{"client_msg_id":"a9192954-c66c-4f78-8902-9c97f878726a","type":"message","text":"I thought substructs might be a little overkill since this struct was really just a convenience container for a bunch of semi-related fields","user":"U011LUQ182G","ts":"1610125916.134900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DF=q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I thought substructs might be a little overkill since this struct was really just a convenience container for a bunch of semi-related fields"}]}]}],"thread_ts":"1610053289.129200","parent_user_id":"U011LUQ182G"},{"client_msg_id":"b1076526-756d-4670-87de-c9d3b7609008","type":"message","text":"<@U011LUQ182G> Maybe <https://github.com/jonniedie/ConcreteStructs.jl|https://github.com/jonniedie/ConcreteStructs.jl>","user":"U67G3QRJM","ts":"1610127183.135200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6euC","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U011LUQ182G"},{"type":"text","text":" Maybe "},{"type":"link","url":"https://github.com/jonniedie/ConcreteStructs.jl","text":"https://github.com/jonniedie/ConcreteStructs.jl"}]}]}],"thread_ts":"1610053289.129200","parent_user_id":"U011LUQ182G"},{"client_msg_id":"C8D0A67E-7774-48A5-853A-9F21480B7167","type":"message","text":"You are using a mixed case name for your actual type, right? Foo instead of foo?","user":"UB7JS9CHF","ts":"1610127433.136600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zJ+OI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You are using a mixed case name for your actual type, right? Foo instead of foo?"}]}]}],"thread_ts":"1610053289.129200","parent_user_id":"U011LUQ182G"},{"client_msg_id":"367732d4-bce9-44f5-af5a-f0e71ac4123c","type":"message","text":"ah, yes!\n\nthis is how i know I’m in <#CD3TZUV9T|dev-good-practice>","user":"U011LUQ182G","ts":"1610127485.136800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"V1Bj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah, yes!\n\nthis is how i know I’m in "},{"type":"channel","channel_id":"CD3TZUV9T"}]}]}],"thread_ts":"1610053289.129200","parent_user_id":"U011LUQ182G"},{"client_msg_id":"0f094778-bf33-43a3-b110-8c5153ed5de2","type":"message","text":"<@U67G3QRJM> nice! that’ll make specializing for a lot of fields a lot less verbose","user":"U011LUQ182G","ts":"1610127609.137000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"erIU1","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U67G3QRJM"},{"type":"text","text":" nice! that’ll make specializing for a lot of fields a lot less verbose"}]}]}],"thread_ts":"1610053289.129200","parent_user_id":"U011LUQ182G","reactions":[{"name":"+1","users":["U67G3QRJM"],"count":1}]}]