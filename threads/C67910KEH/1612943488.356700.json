[{"client_msg_id":"9b05e43d-bb36-4a36-992d-63d93ee40396","type":"message","text":"Suppose I have a numerical computation `f(x, p)` that uses arithmetics, functions like `sin` and `exp`, etc. Sometimes, e.g. when roughly fitting a model, I dont care much about accuracy of computations, but care a lot about speed. Is it somehow possible now/in the future to create a macro like `@FASTMATH f(x, p)` that applies `@fastmath` everywhere within `f()` and functions called from there, replaces transcendental functions with their approximate versions, and maybe does some other performance replacements? I havent seen this in any language yet...","user":"UGTUKUHLN","ts":"1612943488.356700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ipo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Suppose I have a numerical computation "},{"type":"text","text":"f(x, p)","style":{"code":true}},{"type":"text","text":" that uses arithmetics, functions like "},{"type":"text","text":"sin","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"exp","style":{"code":true}},{"type":"text","text":", etc. Sometimes, e.g. when roughly fitting a model, I dont care much about accuracy of computations, but care a lot about speed. Is it somehow possible now/in the future to create a macro like "},{"type":"text","text":"@FASTMATH f(x, p)","style":{"code":true}},{"type":"text","text":" that applies "},{"type":"text","text":"@fastmath","style":{"code":true}},{"type":"text","text":" everywhere within "},{"type":"text","text":"f()","style":{"code":true}},{"type":"text","text":" and functions called from there, replaces transcendental functions with their approximate versions, and maybe does some other performance replacements? I havent seen this in any language yet..."}]}]}],"thread_ts":"1612943488.356700","reply_count":8,"reply_users_count":3,"latest_reply":"1612944645.358900","reply_users":["U6A936746","UGTUKUHLN","U6N6VQE30"],"subscribed":false},{"client_msg_id":"88407799-31a8-45a9-bb60-dae50caad7ab","type":"message","text":"On the the definition side or the calling side?\nOn the definition side yes, you can `@fastmath` the whole function\n\nOn the calling side you will need Cassette or similar.\nSince that is not lexically scoped but rather recursive through function calls","user":"U6A936746","ts":"1612943800.357200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MfDx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"On the the definition side or the calling side?\nOn the definition side yes, you can "},{"type":"text","text":"@fastmath","style":{"code":true}},{"type":"text","text":" the whole function\n\nOn the calling side you will need Cassette or similar.\nSince that is not lexically scoped but rather recursive through function calls"}]}]}],"thread_ts":"1612943488.356700","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"c9cbab01-fc55-4e1d-8cb8-da0a4eb3512e","type":"message","text":"Definitely callsite: sometimes it is useful to get approximate result, other times - exact. But even for definition side I don't really get how `@fastmath` helps: it needs to be applied not only in `f()` but in all functions called from there, right? This is typically not possible because they reside in different packages.","user":"UGTUKUHLN","ts":"1612943905.357400","team":"T68168MUP","edited":{"user":"UGTUKUHLN","ts":"1612943941.000000"},"blocks":[{"type":"rich_text","block_id":"8/9n8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Definitely callsite: sometimes it is useful to get approximate result, other times - exact. But even for definition side I don't really get how "},{"type":"text","text":"@fastmath","style":{"code":true}},{"type":"text","text":" helps: it needs to be applied not only in "},{"type":"text","text":"f()","style":{"code":true}},{"type":"text","text":" but in all functions called from there, right? This is typically not possible because they reside in different packages."}]}]}],"thread_ts":"1612943488.356700","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"09d564dc-ddca-4dd4-a962-ba6ca1a7b840","type":"message","text":"Yeah you need to use Cassette (or IRTools) to do that","user":"U6A936746","ts":"1612943995.357700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ojZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah you need to use Cassette (or IRTools) to do that"}]}]}],"thread_ts":"1612943488.356700","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"3b804194-6f6e-492d-8a15-e917004cea7b","type":"message","text":"Or enable it everywhere with julia --fastmath","user":"U6N6VQE30","ts":"1612944129.357900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8SL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Or enable it everywhere with julia --fastmath"}]}]}],"thread_ts":"1612943488.356700","parent_user_id":"UGTUKUHLN","reactions":[{"name":"+1","users":["U6A936746"],"count":1}]},{"client_msg_id":"fc28c1d5-316d-46aa-bd01-bae58acf8457","type":"message","text":"With Cassette You define `Cassette.overdub(::MyFastMathCtx, ::typeof(sin),x) = Base.FastMath.fast_sin(x)`\n\nEtc","user":"U6A936746","ts":"1612944230.358100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Om1=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"With Cassette You define "},{"type":"text","text":"Cassette.overdub(::MyFastMathCtx, ::typeof(sin),x) = Base.FastMath.fast_sin(x)\n","style":{"code":true}},{"type":"text","text":"\nEtc"}]}]}],"thread_ts":"1612943488.356700","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"83997edd-9ba6-4300-9981-c1d321096900","type":"message","text":"Well, `--fastmath` is \"too global\" :) And also in my experience applying `@fastmath` gives very little speedup compared to manual insertion of approximate `sin` etc: `@fastmath` is set to keep almost all precision. `--fastmath` flag is a little bit better, but still not there.","user":"UGTUKUHLN","ts":"1612944456.358400","team":"T68168MUP","edited":{"user":"UGTUKUHLN","ts":"1612944746.000000"},"blocks":[{"type":"rich_text","block_id":"JBkCo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well, "},{"type":"text","text":"--fastmath","style":{"code":true}},{"type":"text","text":" is \"too global\" :) And also in my experience applying "},{"type":"text","text":"@fastmath","style":{"code":true}},{"type":"text","text":" gives very little speedup compared to manual insertion of approximate "},{"type":"text","text":"sin","style":{"code":true}},{"type":"text","text":" etc: "},{"type":"text","text":"@fastmath","style":{"code":true}},{"type":"text","text":" is set to keep almost all precision. "},{"type":"text","text":"--fastmath","style":{"code":true}},{"type":"text","text":" flag is a little bit better, but still not there."}]}]}],"thread_ts":"1612943488.356700","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"a106ed4e-2b7e-4e8d-a288-dea5d49b12d8","type":"message","text":"Cassette does look interesting, but list of caveats seems pretty strong for now... <https://julia.mit.edu/Cassette.jl/latest/disclaimers.html>","user":"UGTUKUHLN","ts":"1612944536.358600","team":"T68168MUP","edited":{"user":"UGTUKUHLN","ts":"1612944546.000000"},"blocks":[{"type":"rich_text","block_id":"+FH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Cassette does look interesting, but list of caveats seems pretty strong for now... "},{"type":"link","url":"https://julia.mit.edu/Cassette.jl/latest/disclaimers.html"}]}]}],"thread_ts":"1612943488.356700","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"afd8dd7a-6da1-4cca-8aab-2b433ad7c5b9","type":"message","text":"At least in the future this is definitely possible, which was a part of my question :)","user":"UGTUKUHLN","ts":"1612944645.358900","team":"T68168MUP","edited":{"user":"UGTUKUHLN","ts":"1612944736.000000"},"blocks":[{"type":"rich_text","block_id":"dzAGX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"At least in the future this is definitely possible, which was a part of my question :)"}]}]}],"thread_ts":"1612943488.356700","parent_user_id":"UGTUKUHLN"}]