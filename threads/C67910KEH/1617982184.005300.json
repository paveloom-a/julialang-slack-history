[{"client_msg_id":"431cdb19-9cee-4fbf-beae-51869f00947a","type":"message","text":"hello, I'm trying to understand why `Vector{Int64} &lt;: Vector{Number}` is false? how can I type a `sum(xs :: Vector{Number})` function properly so it works for vectors of various number types?","user":"U01TUNADYPM","ts":"1617982184.005300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rnnV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hello, I'm trying to understand why "},{"type":"text","text":"Vector{Int64} <: Vector{Number}","style":{"code":true}},{"type":"text","text":" is false? how can I type a "},{"type":"text","text":"sum(xs :: Vector{Number})","style":{"code":true}},{"type":"text","text":" function properly so it works for vectors of various number types?"}]}]}],"thread_ts":"1617982184.005300","reply_count":24,"reply_users_count":6,"latest_reply":"1618006346.031600","reply_users":["UDB26738Q","U01TUNADYPM","UP9P4JFNJ","UH24GRBLL","UENHZ1M08","U6SHSF4R0"],"is_locked":false,"subscribed":false},{"client_msg_id":"323d81dd-86ba-45e6-9dd8-8fda34b1cb50","type":"message","text":"```julia&gt; [1, 2, 3]::Vector{&lt;:Number}\n3-element Vector{Int64}:\n 1\n 2\n 3```","user":"UDB26738Q","ts":"1617982244.005400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=fV","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> [1, 2, 3]::Vector{<:Number}\n3-element Vector{Int64}:\n 1\n 2\n 3"}]}]}],"thread_ts":"1617982184.005300","parent_user_id":"U01TUNADYPM"},{"client_msg_id":"af59bd8c-881b-45e4-8bd6-59a19fa07470","type":"message","text":"ah","user":"U01TUNADYPM","ts":"1617982280.005600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GZg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah"}]}]}],"thread_ts":"1617982184.005300","parent_user_id":"U01TUNADYPM"},{"client_msg_id":"f3c96f81-ee64-4f89-98e9-90637c4df56a","type":"message","text":"thank you :slightly_smiling_face:","user":"U01TUNADYPM","ts":"1617982307.005800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EfPkx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thank you "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1617982184.005300","parent_user_id":"U01TUNADYPM"},{"client_msg_id":"c73b5b8a-28fd-4353-9a13-611f66f34ee6","type":"message","text":"and the fact that `Vector{Int64} &lt;: Vector{Number}` is false is explained in this section of the manual: <https://docs.julialang.org/en/v1/manual/types/#man-parametric-composite-types>\n\n&gt; Julia's type parameters are invariant, rather than being covariant","user":"UDB26738Q","ts":"1617982333.006000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PJpg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and the fact that "},{"type":"text","text":"Vector{Int64} <: Vector{Number}","style":{"code":true}},{"type":"text","text":" is false is explained in this section of the manual: "},{"type":"link","url":"https://docs.julialang.org/en/v1/manual/types/#man-parametric-composite-types"},{"type":"text","text":"\n\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"Julia's type parameters are invariant, rather than being covariant"}]}]}],"thread_ts":"1617982184.005300","parent_user_id":"U01TUNADYPM"},{"client_msg_id":"b9ced210-7cfc-4f12-a2e0-861d93e6fff9","type":"message","text":"```julia&gt; mysum(xs::Vector{T}) where T&lt;:Number = sum(xs)\nmysum (generic function with 1 method)\n\njulia&gt; mysum([1,2,3])\n6\n\njulia&gt; mysum([4.0,5.1,6.2])\n15.3```","user":"UP9P4JFNJ","ts":"1617982727.006300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"z4Dw","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> mysum(xs::Vector{T}) where T<:Number = sum(xs)\nmysum (generic function with 1 method)\n\njulia> mysum([1,2,3])\n6\n\njulia> mysum([4.0,5.1,6.2])\n15.3"}]}]}],"thread_ts":"1617982184.005300","parent_user_id":"U01TUNADYPM"},{"client_msg_id":"801698c0-49e6-4405-a484-0549b2375807","type":"message","text":"note that\n```mysum(xs::Vector{T}) where T&lt;:Number = sum(xs)```\nis redundant, if the type `T` isn't actually used in the body of the function.  a different form which doesn't expose `T` to the scope of function's body is\n```mysum(xs::Vector{T} where T&lt;:Number) = sum(xs)```\nbut, well, that's equivalent to\n```mysum(xs::Vector{&lt;:Number}) = sum(xs)```\nwhich I suggested above","user":"UDB26738Q","ts":"1617982870.006500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6Fmn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"note that\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"mysum(xs::Vector{T}) where T<:Number = sum(xs)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"is redundant, if the type "},{"type":"text","text":"T","style":{"code":true}},{"type":"text","text":" isn't actually used in the body of the function.  a different form which doesn't expose "},{"type":"text","text":"T","style":{"code":true}},{"type":"text","text":" to the scope of function's body is\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"mysum(xs::Vector{T} where T<:Number) = sum(xs)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"but, well, that's equivalent to\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"mysum(xs::Vector{<:Number}) = sum(xs)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"which I suggested above"}]}]}],"thread_ts":"1617982184.005300","parent_user_id":"U01TUNADYPM","reactions":[{"name":"heavy_check_mark","users":["UP9P4JFNJ"],"count":1}]},{"client_msg_id":"de53128c-ecf3-4529-84d3-df3eb99fa706","type":"message","text":"`Vector{&lt;:Number}` can be read as \"A Vector that holds elements whose type are a subtype of `Number`\"","user":"UH24GRBLL","ts":"1617982945.006700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ftz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Vector{<:Number}","style":{"code":true}},{"type":"text","text":" can be read as \"A Vector that holds elements whose type are a subtype of "},{"type":"text","text":"Number","style":{"code":true}},{"type":"text","text":"\""}]}]}],"thread_ts":"1617982184.005300","parent_user_id":"U01TUNADYPM"},{"client_msg_id":"2b4e35da-35eb-4928-98f3-ea2180fcef83","type":"message","text":"whereas `Vector{Number}` is \"A Vector that holds elements whose type is `Number`\" which (in current julia at least) doesn't exist, as `Number` is an abstract type and thus has no instances.","user":"UH24GRBLL","ts":"1617983013.006900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3Au2=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"whereas "},{"type":"text","text":"Vector{Number}","style":{"code":true}},{"type":"text","text":" is \"A Vector that holds elements whose type is "},{"type":"text","text":"Number","style":{"code":true}},{"type":"text","text":"\" which (in current julia at least) doesn't exist, as "},{"type":"text","text":"Number","style":{"code":true}},{"type":"text","text":" is an abstract type and thus has no instances."}]}]}],"thread_ts":"1617982184.005300","parent_user_id":"U01TUNADYPM"},{"client_msg_id":"2e6da7d8-322d-4069-91f4-1dfbe3a0e661","type":"message","text":"that's not true:\n```julia&gt; Number[1, 2.0, π]::Vector{Number}\n3-element Vector{Number}:\n 1\n 2.0\n π = 3.1415926535897...```","user":"UDB26738Q","ts":"1617983050.007100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xF9n/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's not true:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Number[1, 2.0, π]::Vector{Number}\n3-element Vector{Number}:\n 1\n 2.0\n π = 3.1415926535897..."}]}]}],"thread_ts":"1617982184.005300","parent_user_id":"U01TUNADYPM"},{"client_msg_id":"8caee2dc-90f9-41c2-9bd2-2a0691c0bb96","type":"message","text":"ah, yes","user":"UH24GRBLL","ts":"1617983076.007300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KGu2T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah, yes"}]}]}],"thread_ts":"1617982184.005300","parent_user_id":"U01TUNADYPM"},{"client_msg_id":"24c1270c-7e34-4b12-b590-0695284b699a","type":"message","text":"I mixed things up","user":"UH24GRBLL","ts":"1617983080.007500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tpHvI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mixed things up"}]}]}],"thread_ts":"1617982184.005300","parent_user_id":"U01TUNADYPM"},{"client_msg_id":"0034fdec-3939-479b-b9dc-92a6428c7b93","type":"message","text":"the first thing should be `whose common type is`, and the original first should be the second","user":"UH24GRBLL","ts":"1617983114.007700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"400ln","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the first thing should be "},{"type":"text","text":"whose common type is","style":{"code":true}},{"type":"text","text":", and the original first should be the second"}]}]}],"thread_ts":"1617982184.005300","parent_user_id":"U01TUNADYPM"},{"client_msg_id":"c01212bc-a9d9-409e-83ba-6eaac196e063","type":"message","text":"right?","user":"UH24GRBLL","ts":"1617983122.007900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hUu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"right?"}]}]}],"thread_ts":"1617982184.005300","parent_user_id":"U01TUNADYPM"},{"client_msg_id":"4a27def0-b542-4346-923f-bbac99e955bc","type":"message","text":"yes, that's more accurate","user":"UDB26738Q","ts":"1617983158.008100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"f380g","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, that's more accurate"}]}]}],"thread_ts":"1617982184.005300","parent_user_id":"U01TUNADYPM"},{"client_msg_id":"c977558e-1f4a-43b3-bea0-848b28bc6dd6","type":"message","text":"The way I like to think of it is: `v::Vector{Number}` can store any value of type `Number`, so I should be able to  `push!(v, 1.5)`. I can't store a `Float64` in a `Vector{Int}`, so `Vector{Int}` shouldn't be considered a subtype of `Vector{Number}` (technically if I try to add a non-`Int` to an `Array{Int}` it will try to call `convert(Int, x)` first, which will succeed for integer-valued floats, but that's not the same as actually adding a `Float64` instance the array).","user":"UENHZ1M08","ts":"1617985228.009500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zSr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The way I like to think of it is: "},{"type":"text","text":"v::Vector{Number}","style":{"code":true}},{"type":"text","text":" can store any value of type "},{"type":"text","text":"Number","style":{"code":true}},{"type":"text","text":", so I should be able to  "},{"type":"text","text":"push!(v, 1.5)","style":{"code":true}},{"type":"text","text":". I can't store a "},{"type":"text","text":"Float64","style":{"code":true}},{"type":"text","text":" in a "},{"type":"text","text":"Vector{Int}","style":{"code":true}},{"type":"text","text":", so "},{"type":"text","text":"Vector{Int}","style":{"code":true}},{"type":"text","text":" shouldn't be considered a subtype of "},{"type":"text","text":"Vector{Number}","style":{"code":true}},{"type":"text","text":" (technically if I try to add a non-"},{"type":"text","text":"Int","style":{"code":true}},{"type":"text","text":" to an "},{"type":"text","text":"Array{Int}","style":{"code":true}},{"type":"text","text":" it will try to call "},{"type":"text","text":"convert(Int, x)","style":{"code":true}},{"type":"text","text":" first, which will succeed for integer-valued floats, but that's not the same as actually adding a "},{"type":"text","text":"Float64","style":{"code":true}},{"type":"text","text":" instance the array)."}]}]}],"thread_ts":"1617982184.005300","parent_user_id":"U01TUNADYPM"},{"client_msg_id":"843a1e86-c391-4b6a-9024-331c580f421d","type":"message","text":"yes, the type parameter of the array is a type that all elements _must_ match.  in most cases it's a concrete type, but in some cases it can be an abstract type (including `Any`!)","user":"UDB26738Q","ts":"1617985359.009800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Lgnn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, the type parameter of the array is a type that all elements "},{"type":"text","text":"must","style":{"italic":true}},{"type":"text","text":" match.  in most cases it's a concrete type, but in some cases it can be an abstract type (including "},{"type":"text","text":"Any","style":{"code":true}},{"type":"text","text":"!)"}]}]}],"thread_ts":"1617982184.005300","parent_user_id":"U01TUNADYPM"},{"client_msg_id":"3107F88C-BB8F-45B6-90AE-561C49620151","type":"message","text":"i look at it as:\n```Vector{&lt;:Number} == Union{Vector{Int64},Vector{Float64},...,Vector{AnySubtypeOfNumber}}```","user":"U6SHSF4R0","ts":"1618003868.022000","team":"T68168MUP","edited":{"user":"U6SHSF4R0","ts":"1618005806.000000"},"blocks":[{"type":"rich_text","block_id":"W49I8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i look at it as:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Vector{<:Number} == Union{Vector{Int64},Vector{Float64},...,Vector{AnySubtypeOfNumber}}"}]}]}],"thread_ts":"1617982184.005300","parent_user_id":"U01TUNADYPM"},{"client_msg_id":"7B73725D-7FD3-4DF1-82A8-25537BE96D25","type":"message","text":"which is use by Julia to specialise when you call function with signature `f(x::Vector{&lt;:Number}) = ...`\nit will pick one of the vectors in the Union which makes the elements concrete instead of abstract Number. ","user":"U6SHSF4R0","ts":"1618004079.025000","team":"T68168MUP","edited":{"user":"U6SHSF4R0","ts":"1618005993.000000"},"blocks":[{"type":"rich_text","block_id":"5Eu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which is use by Julia to specialise when you call function with signature "},{"type":"text","text":"f(x::Vector{<:Number}) = ...","style":{"code":true}},{"type":"text","text":"\nit will pick one of the vectors in the Union which makes the elements concrete instead of abstract Number. "}]}]}],"thread_ts":"1617982184.005300","parent_user_id":"U01TUNADYPM"},{"client_msg_id":"E755579A-0F13-4D49-BA22-E2CB72E7F464","type":"message","text":"so any container in function definition should have signature `f(x::container{&lt;:abstract_type})` if you want the `f` to dispatch on the specific type of concrete elements in container. if you use `f(x::Vector{Number})`","user":"U6SHSF4R0","ts":"1618004189.027000","team":"T68168MUP","edited":{"user":"U6SHSF4R0","ts":"1618006086.000000"},"blocks":[{"type":"rich_text","block_id":"kVpSO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so any container in function definition should have signature "},{"type":"text","text":"f(x::container{<:abstract_type})","style":{"code":true}},{"type":"text","text":" if you want the "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" to dispatch on the specific type of concrete elements in container. if you use "},{"type":"text","text":"f(x::Vector{Number})","style":{"code":true}}]}]}],"thread_ts":"1617982184.005300","parent_user_id":"U01TUNADYPM"},{"client_msg_id":"07C1876C-5B73-456D-A6EB-9D9F221C9CBF","type":"message","text":"you are specifying vector of abstract numbers and nothing else. the elements of vector must be all promoted to Number before it can dispatch","user":"U6SHSF4R0","ts":"1618005018.029100","team":"T68168MUP","edited":{"user":"U6SHSF4R0","ts":"1618005450.000000"},"blocks":[{"type":"rich_text","block_id":"o47+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you are specifying vector of abstract numbers and nothing else. the elements of vector must be all promoted to Number before it can dispatch"}]}]}],"thread_ts":"1617982184.005300","parent_user_id":"U01TUNADYPM"},{"client_msg_id":"3e5d368a-fd1f-4be3-b033-31cb7ef325d4","type":"message","text":"`[2,3//4,5]::Vector{&lt;:Number} =&gt; [2//1,3//4,5//1]::Vector{Rational}` because julia picks Vector{Rational} among the Union of Vector{concrete-types}. it uses the closest subtype to promote all elements to the same subtype","user":"U6SHSF4R0","ts":"1618005610.029500","team":"T68168MUP","edited":{"user":"U6SHSF4R0","ts":"1618006188.000000"},"blocks":[{"type":"rich_text","block_id":"/lM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"[2,3//4,5]::Vector{<:Number} => [2//1,3//4,5//1]::Vector{Rational}","style":{"code":true}},{"type":"text","text":" because julia picks Vector{Rational} among the Union of Vector{concrete-types}. it uses the closest subtype to promote all elements to the same subtype"}]}]}],"thread_ts":"1617982184.005300","parent_user_id":"U01TUNADYPM"},{"client_msg_id":"9dae6c75-270f-44df-b9d7-484183891236","type":"message","text":"`[1,2//3,5]::Vector{Number}` errors out because Julia finds it too restrictive. it cannot pick any concrete type elements to match because there is only one choice, i.e., all elements must be `Number`","user":"U6SHSF4R0","ts":"1618005730.029700","team":"T68168MUP","edited":{"user":"U6SHSF4R0","ts":"1618006254.000000"},"blocks":[{"type":"rich_text","block_id":"rdH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"[1,2//3,5]::Vector{Number}","style":{"code":true}},{"type":"text","text":" errors out because Julia finds it too restrictive. it cannot pick any concrete type elements to match because there is only one choice, i.e., all elements must be "},{"type":"text","text":"Number","style":{"code":true}}]}]}],"thread_ts":"1617982184.005300","parent_user_id":"U01TUNADYPM"},{"client_msg_id":"03645D39-6A0A-40C2-9963-B49712EE3484","type":"message","text":"and not even a subtype of `Number`","user":"U6SHSF4R0","ts":"1618006281.030900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LAlD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and not even a subtype of "},{"type":"text","text":"Number","style":{"code":true}}]}]}],"thread_ts":"1617982184.005300","parent_user_id":"U01TUNADYPM"},{"client_msg_id":"E76D3D08-E8EF-4893-BFC5-0C7FE91CF51E","type":"message","text":"X{&lt;:T}  means union-all of X containing any subtypes of T","user":"U6SHSF4R0","ts":"1618006346.031600","team":"T68168MUP","edited":{"user":"U6SHSF4R0","ts":"1618006525.000000"},"blocks":[{"type":"rich_text","block_id":"0F8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"X{<:T}  means union-all of X containing any subtypes of T"}]}]}],"thread_ts":"1617982184.005300","parent_user_id":"U01TUNADYPM"}]