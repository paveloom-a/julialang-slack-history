[{"client_msg_id":"4dd0d9dd-7426-4c67-b350-d2f53e1a35ad","type":"message","text":"Is there any way to run a macro on an entire module?\nI currently have a file of numerical constants (e.g. `pi`, `c`, radius of the earth, etc) that I can parse into a data structure. But it'd be really nice if I could just use the constants `pi`, `c`, `R`, etc to reference them instead of `data[\"pi\"]` and so on","user":"U01Q7MHAE5U","ts":"1617489950.204200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cCGm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there any way to run a macro on an entire module?\nI currently have a file of numerical constants (e.g. "},{"type":"text","text":"pi","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"c","style":{"code":true}},{"type":"text","text":", radius of the earth, etc) that I can parse into a data structure. But it'd be really nice if I could just use the constants "},{"type":"text","text":"pi","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"c","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"R","style":{"code":true}},{"type":"text","text":", etc to reference them instead of "},{"type":"text","text":"data[\"pi\"]","style":{"code":true}},{"type":"text","text":" and so on"}]}]}],"thread_ts":"1617489950.204200","reply_count":15,"reply_users_count":4,"latest_reply":"1617497978.207900","reply_users":["U6A936746","UNB36FC95","U01Q7MHAE5U","UD0NS8PDF"],"is_locked":false,"subscribed":false},{"client_msg_id":"3ad7874f-979f-4220-bd6a-5561c23444b0","type":"message","text":"`read` the file.\n`parse` the string (might have to wrap the string with `\"begin $content end\"` so you get it as a single `Expr` that you can break up by looking at `expr.args`)\nManipulate the AST as you want.\n`eval` the AST","user":"U6A936746","ts":"1617492212.204400","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1617492225.000000"},"blocks":[{"type":"rich_text","block_id":"iubqa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"read ","style":{"code":true}},{"type":"text","text":"the file.\n"},{"type":"text","text":"parse ","style":{"code":true}},{"type":"text","text":"the string (might have to wrap the string with "},{"type":"text","text":"\"begin $content end\"","style":{"code":true}},{"type":"text","text":" so you get it as a single "},{"type":"text","text":"Expr","style":{"code":true}},{"type":"text","text":" that you can break up by looking at "},{"type":"text","text":"expr.args","style":{"code":true}},{"type":"text","text":")\nManipulate the AST as you want.\n"},{"type":"text","text":"eval ","style":{"code":true}},{"type":"text","text":"the AST"}]}]}],"thread_ts":"1617489950.204200","parent_user_id":"U01Q7MHAE5U"},{"client_msg_id":"e8071f0e-6975-421a-ba54-ce4e96e433cc","type":"message","text":"I think this is possible like the way that the `reexport` macro works","user":"UNB36FC95","ts":"1617492334.204700","team":"T68168MUP","edited":{"user":"UNB36FC95","ts":"1617492445.000000"},"blocks":[{"type":"rich_text","block_id":"oUW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think this is possible like the way that the "},{"type":"text","text":"reexport","style":{"code":true}},{"type":"text","text":" macro works"}]}]}],"thread_ts":"1617489950.204200","parent_user_id":"U01Q7MHAE5U"},{"client_msg_id":"16837858-69d2-4d88-a62c-4471304bc934","type":"message","text":"If I already have some `begin...end` could I just annotate that with a macro?\nwould this work even if I include files in that block?","user":"U01Q7MHAE5U","ts":"1617493981.205400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"l5knc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If I already have some "},{"type":"text","text":"begin...end ","style":{"code":true}},{"type":"text","text":"could I just annotate that with a macro?\nwould this work even if I include files in that block?"}]}]}],"thread_ts":"1617489950.204200","parent_user_id":"U01Q7MHAE5U"},{"client_msg_id":"5b034c09-3160-4565-8957-a9f960a3a75f","type":"message","text":"where is the `begin...end` block, in the source module or the place where you're importing it?","user":"UNB36FC95","ts":"1617494014.205600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YdFSg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"where is the "},{"type":"text","text":"begin...end","style":{"code":true}},{"type":"text","text":" block, in the source module or the place where you're importing it?"}]}]}],"thread_ts":"1617489950.204200","parent_user_id":"U01Q7MHAE5U"},{"client_msg_id":"1900f84c-0c05-44b3-b928-0504fdee6957","type":"message","text":"Within a module which you are writing, can’t you just say `const pi = 1.5` or whatever at the top? This will apply to everything inside, including `include`d files.","user":"UD0NS8PDF","ts":"1617494092.205800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"22I1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Within a module which you are writing, can’t you just say "},{"type":"text","text":"const pi = 1.5","style":{"code":true}},{"type":"text","text":" or whatever at the top? This will apply to everything inside, including `include`d files."}]}]}],"thread_ts":"1617489950.204200","parent_user_id":"U01Q7MHAE5U"},{"client_msg_id":"915a983b-9078-471a-828e-4837b4d0c5fa","type":"message","text":"ahh yes so this is one of the issues I'm having\ni can just do `const pi= 1` but this first isn't configurable (it does not read from the file) and second creates conflicts in my scripts that use my module since it's also exported from base","user":"U01Q7MHAE5U","ts":"1617494300.206000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"o+QnU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ahh yes so this is one of the issues I'm having\ni can just do "},{"type":"text","text":"const pi= 1","style":{"code":true}},{"type":"text","text":" but this first isn't configurable (it does not read from the file) and second creates conflicts in my scripts that use my module since it's also exported from base"}]}]}],"thread_ts":"1617489950.204200","parent_user_id":"U01Q7MHAE5U"},{"client_msg_id":"ebeab31d-1731-4472-914f-8c8e0c0240d5","type":"message","text":"You could have a macro which reads your data file &amp; writes these const statements, at parse-time.","user":"UD0NS8PDF","ts":"1617494321.206200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s7T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You could have a macro which reads your data file & writes these const statements, at parse-time."}]}]}],"thread_ts":"1617489950.204200","parent_user_id":"U01Q7MHAE5U"},{"client_msg_id":"2aaf83aa-0a9b-49de-ac28-5543205d9728","type":"message","text":"There will be conflicts if you try to `export pi`, since then it’s unclear outside whether to use the one exported from Base or from you. But if you don’t do that, and you define `pi` before you have ever called is (and got Base.pi) then I think there should not be conflicts.","user":"UD0NS8PDF","ts":"1617494471.206400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DuE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There will be conflicts if you try to "},{"type":"text","text":"export pi","style":{"code":true}},{"type":"text","text":", since then it’s unclear outside whether to use the one exported from Base or from you. But if you don’t do that, and you define "},{"type":"text","text":"pi","style":{"code":true}},{"type":"text","text":" before you have ever called is (and got Base.pi) then I think there should not be conflicts."}]}]}],"thread_ts":"1617489950.204200","parent_user_id":"U01Q7MHAE5U"},{"client_msg_id":"853fea32-abc2-4b84-b932-b2512cba097e","type":"message","text":"indeed, I was thinking about this method too\nis there any way in the scripts that I can use my `pi` instead of base? e.g. by renaming","user":"U01Q7MHAE5U","ts":"1617495098.206600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WIr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"indeed, I was thinking about this method too\nis there any way in the scripts that I can use my "},{"type":"text","text":"pi ","style":{"code":true}},{"type":"text","text":"instead of base? e.g. by renaming"}]}]}],"thread_ts":"1617489950.204200","parent_user_id":"U01Q7MHAE5U"},{"client_msg_id":"3a69db81-6345-4928-8ec6-e974afd17288","type":"message","text":"It will just happen, inside your scope. Assignment wins.","user":"UD0NS8PDF","ts":"1617495230.206800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jY/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It will just happen, inside your scope. Assignment wins."}]}]}],"thread_ts":"1617489950.204200","parent_user_id":"U01Q7MHAE5U"},{"client_msg_id":"e83d3a65-9213-430a-9a82-66a165a16cc2","type":"message","text":"yes but I mean outside the module\ncan I rename the base functions and prefer the one exported from my module?","user":"U01Q7MHAE5U","ts":"1617495292.207000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TFmN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes but I mean outside the module\ncan I rename the base functions and prefer the one exported from my module?"}]}]}],"thread_ts":"1617489950.204200","parent_user_id":"U01Q7MHAE5U"},{"client_msg_id":"f48e9a7b-e14c-448f-a16b-2175bf9b691a","type":"message","text":"Yes. Well, you can bind names to things from your module instead of things from Base.","user":"UD0NS8PDF","ts":"1617495360.207200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fJKW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes. Well, you can bind names to things from your module instead of things from Base."}]}]}],"thread_ts":"1617489950.204200","parent_user_id":"U01Q7MHAE5U"},{"client_msg_id":"a5b493da-7c0e-4c89-96d0-6faf035c0744","type":"message","text":"```julia&gt; module MyPi\n       const pi = 1//2\n       fun(x) = x+pi\n       export pi, fun\n       end;\n\njulia&gt; using .MyPi\n\njulia&gt; pi # ambiguous\nWARNING: both MyPi and Base export \"pi\"; uses of it in module Main must be qualified\nERROR: UndefVarError: pi not defined\n\njulia&gt; fun(1) # uses the one inside the module, unambigous\n3//2\n\njulia&gt; const pi = MyPi.pi # decide what to use outside\n1//2\n\njulia&gt; pi\n1//2```","user":"UD0NS8PDF","ts":"1617495364.207400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R0s","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> module MyPi\n       const pi = 1//2\n       fun(x) = x+pi\n       export pi, fun\n       end;\n\njulia> using .MyPi\n\njulia> pi # ambiguous\nWARNING: both MyPi and Base export \"pi\"; uses of it in module Main must be qualified\nERROR: UndefVarError: pi not defined\n\njulia> fun(1) # uses the one inside the module, unambigous\n3//2\n\njulia> const pi = MyPi.pi # decide what to use outside\n1//2\n\njulia> pi\n1//2"}]}]}],"thread_ts":"1617489950.204200","parent_user_id":"U01Q7MHAE5U"},{"client_msg_id":"381e5912-dfc8-43e0-850a-04ca7db463ba","type":"message","text":"ahh makes sense\nthanks!","user":"U01Q7MHAE5U","ts":"1617495406.207600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"daQR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ahh makes sense\nthanks!"}]}]}],"thread_ts":"1617489950.204200","parent_user_id":"U01Q7MHAE5U","reactions":[{"name":"+1","users":["UD0NS8PDF"],"count":1}]},{"client_msg_id":"8c2e40e0-d05c-4340-9514-a89ff8f3ed6c","type":"message","text":"Here is an example of the `read` + `eval`  that I mentioned before.\n<https://www.github.com/JuliaText/WordTokenizers.jl/tree/master/src%2Fwords%2Fsedbased.jl|https://www.github.com/JuliaText/WordTokenizers.jl/tree/master/src%2Fwords%2Fsedbased.jl>\nIt doesn't `parse` since the file it's reading isn't Julia, but it does generate an AST from it.\n\nNote that in effect the  `include`  function is basically `read+parse+eval`","user":"U6A936746","ts":"1617497978.207900","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1617497986.000000"},"blocks":[{"type":"rich_text","block_id":"qFMg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Here is an example of the "},{"type":"text","text":"read ","style":{"code":true}},{"type":"text","text":"+ "},{"type":"text","text":"eval ","style":{"code":true}},{"type":"text","text":" that I mentioned before.\n"},{"type":"link","url":"https://www.github.com/JuliaText/WordTokenizers.jl/tree/master/src%2Fwords%2Fsedbased.jl","text":"https://www.github.com/JuliaText/WordTokenizers.jl/tree/master/src%2Fwords%2Fsedbased.jl"},{"type":"text","text":"\nIt doesn't "},{"type":"text","text":"parse ","style":{"code":true}},{"type":"text","text":"since the file it's reading isn't Julia, but it does generate an AST from it.\n\nNote that in effect the  "},{"type":"text","text":"include ","style":{"code":true}},{"type":"text","text":" function is basically "},{"type":"text","text":"read+parse+eval","style":{"code":true}}]}]}],"thread_ts":"1617489950.204200","parent_user_id":"U01Q7MHAE5U"}]