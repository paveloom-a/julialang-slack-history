[{"client_msg_id":"d8087d16-4624-487a-96ed-61a47dddc312","type":"message","text":"Theoretically, is it possible to fill Dict/Set in such a way that the worst-case scenario for time complexity is filled (all entries are inserted into the same bucket)? Let's say I want to make a set with 10 carefully chosen integers such a way that checking the existence of some value v is done in O(n) time?","user":"UAGBT2X1A","ts":"1615292750.013900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"v=iv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Theoretically, is it possible to fill Dict/Set in such a way that the worst-case scenario for time complexity is filled (all entries are inserted into the same bucket)? Let's say I want to make a set with 10 carefully chosen integers such a way that checking the existence of some value v is done in O(n) time?"}]}]}],"thread_ts":"1615292750.013900","reply_count":1,"reply_users_count":1,"latest_reply":"1615293807.014300","reply_users":["U7HAYKY9X"],"subscribed":false},{"client_msg_id":"03ad13e4-dc3d-4312-9b91-5b399372541a","type":"message","text":"That's hard to do, I think. It's easy to find a sequence of intergers with O(n) insert time, but once you've put in a few of those, the dict will re-hash, and then there are no more slots with O(n) insert time.\nIf you have a very large dict, it can take long before it re-hashes, though","user":"U7HAYKY9X","ts":"1615293807.014300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GZKZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's hard to do, I think. It's easy to find a sequence of intergers with O(n) insert time, but once you've put in a few of those, the dict will re-hash, and then there are no more slots with O(n) insert time.\nIf you have a very large dict, it can take long before it re-hashes, though"}]}]}],"thread_ts":"1615292750.013900","parent_user_id":"UAGBT2X1A"}]