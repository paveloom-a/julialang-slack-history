[{"client_msg_id":"d0ca242d-87bf-44fd-b925-d14b0a7264ee","type":"message","text":"I have a `Vector{Int}` sorted ascendingly, like `[1,1,1,3,3,7,9,9]` and would like to turn it into something like `[(1,3), (3,2), (7,1), (9,2)]` i.e. count the multiplicities of each entry. Of course I can easily code this, but in some other languages there are builtin functions for this kind of operation, and I wonder if Julia has one as well (I don't mind if it gives pairs, tuples, vector, two vectors, a dictionary, etc.)","user":"U012FH66MFW","ts":"1615560570.176200","team":"T68168MUP","edited":{"user":"U012FH66MFW","ts":"1615560646.000000"},"blocks":[{"type":"rich_text","block_id":"DWH6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have a "},{"type":"text","text":"Vector{Int}","style":{"code":true}},{"type":"text","text":" sorted ascendingly, like "},{"type":"text","text":"[1,1,1,3,3,7,9,9]","style":{"code":true}},{"type":"text","text":" and would like to turn it into something like "},{"type":"text","text":"[(1,3), (3,2), (7,1), (9,2)]","style":{"code":true}},{"type":"text","text":" i.e. count the multiplicities of each entry. Of course I can easily code this, but in some other languages there are builtin functions for this kind of operation, and I wonder if Julia has one as well (I don't mind if it gives pairs, tuples, vector, two vectors, a dictionary, etc.)"}]}]}],"thread_ts":"1615560570.176200","reply_count":14,"reply_users_count":8,"latest_reply":"1615573541.185100","reply_users":["U012FH66MFW","U7HAYKY9X","USU9FRPEU","UEA5FBCRH","U6740K1SP","UFWQ6DP0S","U01PLQWQXPV","U67431ELR"],"subscribed":false},{"client_msg_id":"1d062c77-0b8e-459a-80aa-01506fc8cfed","type":"message","text":"i.e., I did roll my own, but now I wonder if there is a \"standard\" function I could/should use instead :slightly_smiling_face:","user":"U012FH66MFW","ts":"1615560679.176600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Bi/qT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i.e., I did roll my own, but now I wonder if there is a \"standard\" function I could/should use instead "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1615560570.176200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"925280fb-503c-43c5-940e-4f38aa3254e3","type":"message","text":"```julia&gt; using IterTools\n\njulia&gt; xs = [1,1,1,3,3,7,9,9];\n\njulia&gt; map(group -&gt; (first(group), length(group)), groupby(identity, xs))\n4-element Vector{Tuple{Int64, Int64}}:\n (1, 3)\n (3, 2)\n (7, 1)\n (9, 2)```","user":"U7HAYKY9X","ts":"1615561102.177800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pT4E","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using IterTools\n\njulia> xs = [1,1,1,3,3,7,9,9];\n\njulia> map(group -> (first(group), length(group)), groupby(identity, xs))\n4-element Vector{Tuple{Int64, Int64}}:\n (1, 3)\n (3, 2)\n (7, 1)\n (9, 2)"}]}]}],"thread_ts":"1615560570.176200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"4dc15e6a-a8d1-433e-848d-c771bc9d38ce","type":"message","text":"(i.e. I think \"groupby\" is as close as you get)","user":"U7HAYKY9X","ts":"1615561190.178000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XbM6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(i.e. I think \"groupby\" is as close as you get)"}]}]}],"thread_ts":"1615560570.176200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"2893fad2-c19e-49be-ab08-6ea64a26836b","type":"message","text":"Are the Ints always greater than zero?","user":"USU9FRPEU","ts":"1615561249.178400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YQjnL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Are the Ints always greater than zero?"}]}]}],"thread_ts":"1615560570.176200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"8f6e3bd6-5877-47da-8ec5-e3da80f2fe67","type":"message","text":"they are","user":"U012FH66MFW","ts":"1615561428.178600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Herj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"they are"}]}]}],"thread_ts":"1615560570.176200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"70c5a45b-4f81-4c57-9cc8-18459acbdc93","type":"message","text":"It reminds me of the `accumarray` pattern: <http://julia-programming-language.2336112.n4.nabble.com/Equivalent-to-MATLAB-Octave-accumarray-td21031.html>","user":"USU9FRPEU","ts":"1615561532.178800","team":"T68168MUP","attachments":[{"title":"Julia Users - Equivalent to MATLAB/Octave accumarray()","title_link":"http://julia-programming-language.2336112.n4.nabble.com/Equivalent-to-MATLAB-Octave-accumarray-td21031.html","text":"Equivalent to MATLAB/Octave accumarray(). Hi, Is there any equivalent to accumarray() in Julia? <http://www.mathworks.com/help/matlab/ref/accumarray.html> -Júlio","fallback":"Julia Users - Equivalent to MATLAB/Octave accumarray()","from_url":"http://julia-programming-language.2336112.n4.nabble.com/Equivalent-to-MATLAB-Octave-accumarray-td21031.html","service_icon":"http://julia-programming-language.2336112.n4.nabble.com/favicon.ico","service_name":"julia-programming-language.2336112.n4.nabble.com","id":1,"original_url":"http://julia-programming-language.2336112.n4.nabble.com/Equivalent-to-MATLAB-Octave-accumarray-td21031.html"}],"blocks":[{"type":"rich_text","block_id":"15n9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It reminds me of the "},{"type":"text","text":"accumarray","style":{"code":true}},{"type":"text","text":" pattern: "},{"type":"link","url":"http://julia-programming-language.2336112.n4.nabble.com/Equivalent-to-MATLAB-Octave-accumarray-td21031.html"}]}]}],"thread_ts":"1615560570.176200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"cbaed06e-1939-4f9e-8c5c-c4aa5e0aef32","type":"message","text":"```julia&gt; using SparseArrays\n\njulia&gt; function countuniq(xs)\n           counts = zeros(Int,maximum(xs))\n           for i in eachindex(xs)\n               counts[xs[i]] += 1\n           end\n           sparse(counts)\n       end\ncountuniq (generic function with 1 method)\n\njulia&gt; countuniq(test)\n9-element SparseVector{Int64,Int64} with 4 stored entries:\n  [1]  =  3\n  [3]  =  2\n  [7]  =  1\n  [9]  =  2```","user":"USU9FRPEU","ts":"1615561767.179100","team":"T68168MUP","edited":{"user":"USU9FRPEU","ts":"1615561811.000000"},"blocks":[{"type":"rich_text","block_id":"oD7YN","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using SparseArrays\n\njulia> function countuniq(xs)\n           counts = zeros(Int,maximum(xs))\n           for i in eachindex(xs)\n               counts[xs[i]] += 1\n           end\n           sparse(counts)\n       end\ncountuniq (generic function with 1 method)\n\njulia> countuniq(test)\n9-element SparseVector{Int64,Int64} with 4 stored entries:\n  [1]  =  3\n  [3]  =  2\n  [7]  =  1\n  [9]  =  2"}]}]}],"thread_ts":"1615560570.176200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"78bba08b-86bb-455b-8352-3b6151af0033","type":"message","text":"They're been some resistance to adding a function that just does that because it's relatively easy and often faster to just to write something like that.","user":"USU9FRPEU","ts":"1615561886.179400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8cW/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"They're been some resistance to adding a function that just does that because it's relatively easy and often faster to just to write something like that."}]}]}],"thread_ts":"1615560570.176200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"2de0366c-4c91-437f-a09e-1a62a9fcb09c","type":"message","text":"One-liner without using extra packages:\n```julia&gt; xs = [1,1,1,3,3,7,9,9]\njulia&gt; xs |&gt; unique |&gt; x -&gt; map(y -&gt; (y, count(z-&gt;z==y, xs)), x)\n4-element Vector{Tuple{Int64, Int64}}:\n (1, 3)\n (3, 2)\n (7, 1)\n (9, 2)```","user":"UEA5FBCRH","ts":"1615561911.179600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aFO2H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"One-liner without using extra packages:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> xs = [1,1,1,3,3,7,9,9]\njulia> xs |> unique |> x -> map(y -> (y, count(z->z==y, xs)), x)\n4-element Vector{Tuple{Int64, Int64}}:\n (1, 3)\n (3, 2)\n (7, 1)\n (9, 2)"}]}]}],"thread_ts":"1615560570.176200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"a869817e-18dd-411b-b507-17fd2ce3b8be","type":"message","text":"That’s a run length encoding — you could use RLEVectors","user":"U6740K1SP","ts":"1615562399.180100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yeMNy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That’s a run length encoding — you could use RLEVectors"}]}]}],"thread_ts":"1615560570.176200","parent_user_id":"U012FH66MFW","reactions":[{"name":"point_up_2::skin-tone-3","users":["U68QW0PUZ"],"count":1}]},{"client_msg_id":"5aa95899-134f-461d-9b76-af67544af294","type":"message","text":"```julia&gt; using StatsBase\njulia&gt; countmap(xs)\nDict{Int64, Int64} with 4 entries:\n  7 =&gt; 1\n  9 =&gt; 2\n  3 =&gt; 2\n  1 =&gt; 3```","user":"UFWQ6DP0S","ts":"1615568081.182600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"azxO","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using StatsBase\njulia> countmap(xs)\nDict{Int64, Int64} with 4 entries:\n  7 => 1\n  9 => 2\n  3 => 2\n  1 => 3"}]}]}],"thread_ts":"1615560570.176200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"268810bd-a2ec-4713-a324-6b7d968bbb66","type":"message","text":"Not terribly efficient, but does the job\n```my_count(x) = map(y -&gt; (y, count(==(y), x)), unique(x))```","user":"U01PLQWQXPV","ts":"1615569886.182800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cAF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not terribly efficient, but does the job\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"my_count(x) = map(y -> (y, count(==(y), x)), unique(x))"}]}]}],"thread_ts":"1615560570.176200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"6081526b-131e-44ff-8a2f-85bf1165e3f3","type":"message","text":"Something a bit more Haskelly\n```my_count(; d=Dict()) = d\nmy_count(x, xs...; d=Dict) = (haskey(d, x) ? d[x] += 1 : d[x] = 1; my_count(xs...; d=d))```","user":"U01PLQWQXPV","ts":"1615570400.183600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yed=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Something a bit more Haskelly\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"my_count(; d=Dict()) = d\nmy_count(x, xs...; d=Dict) = (haskey(d, x) ? d[x] += 1 : d[x] = 1; my_count(xs...; d=d))"}]}]}],"thread_ts":"1615560570.176200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"29c67d9c-023c-46a9-8098-0d5a13166222","type":"message","text":"StatsBase also has an `rle` function: <https://juliastats.org/StatsBase.jl/latest/misc/#StatsBase.rle>","user":"U67431ELR","ts":"1615573541.185100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gmp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"StatsBase also has an "},{"type":"text","text":"rle","style":{"code":true}},{"type":"text","text":" function: "},{"type":"link","url":"https://juliastats.org/StatsBase.jl/latest/misc/#StatsBase.rle"}]}]}],"thread_ts":"1615560570.176200","parent_user_id":"U012FH66MFW"}]