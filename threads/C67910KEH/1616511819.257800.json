[{"client_msg_id":"85b65468-b049-4463-a07d-b8d040429a98","type":"message","text":"I am iteratively filling a big matrix using multi threading with SharedArray. Should I use SharedArray with multithreading since it is for multi processing. Code example in replies","user":"U014K4SE396","ts":"1616511819.257800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HZq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am iteratively filling a big matrix using multi threading with SharedArray. Should I use SharedArray with multithreading since it is for multi processing. Code example in replies"}]}]}],"thread_ts":"1616511819.257800","reply_count":5,"reply_users_count":2,"latest_reply":"1616517064.265100","reply_users":["U014K4SE396","UBA5PL84U"],"subscribed":false},{"client_msg_id":"d922aea8-c279-4aa8-9e07-01e11a33fbba","type":"message","text":"```Fy = BandedMatrix(Zeros(ng * nu, ng * nu), (nu, nu));\n    Fp = SharedArray{Float64}(ng * nu, np);\n    Fu = SharedArray{Float64}(ng * nu, nu - 1);\n    i = 1\n    i_F = 1 + (i - 1) * nu:i * nu - 1\n    @view(Fy[i_F, i_F])[ind_diag] .= ones_nu\n    Fy[i * nu, i * nu] = -1.0\n    Fy[i * nu, (i + 1) * nu] = 1.0\n    du = similar(@view(pred[:, i]))\n\n    dts = @views(ts[2:end] .- ts[1:end - 1]) ./ idt\n    @threads for i = 2:ng\n        # @show \"Fp_$i\"\n        u = @view(pred[:, i])\n        i_F = 1 + (i - 1) * nu:i * nu - 1\n        @view(Fp[i_F, :]) .= jacobian((du, x) -&gt;\n                                        dudt!(du, @view(pred[:, i]), x, 0.0),\n                                        du, p)::Array{Float64,2} .* (-idt)\n        @view(Fu[i_F, :]) .= jacobian((du, x) -&gt; dudt!(du, x, p, 0.0),\n                                        du, u)::Array{Float64,2} .* (-idt)\n    end```","user":"U014K4SE396","ts":"1616511832.257900","team":"T68168MUP","edited":{"user":"U014K4SE396","ts":"1616511851.000000"},"blocks":[{"type":"rich_text","block_id":"bJIW","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Fy = BandedMatrix(Zeros(ng * nu, ng * nu), (nu, nu));\n    Fp = SharedArray{Float64}(ng * nu, np);\n    Fu = SharedArray{Float64}(ng * nu, nu - 1);\n    i = 1\n    i_F = 1 + (i - 1) * nu:i * nu - 1\n    @view(Fy[i_F, i_F])[ind_diag] .= ones_nu\n    Fy[i * nu, i * nu] = -1.0\n    Fy[i * nu, (i + 1) * nu] = 1.0\n    du = similar(@view(pred[:, i]))\n\n    dts = @views(ts[2:end] .- ts[1:end - 1]) ./ idt\n    @threads for i = 2:ng\n        # @show \"Fp_$i\"\n        u = @view(pred[:, i])\n        i_F = 1 + (i - 1) * nu:i * nu - 1\n        @view(Fp[i_F, :]) .= jacobian((du, x) ->\n                                        dudt!(du, @view(pred[:, i]), x, 0.0),\n                                        du, p)::Array{Float64,2} .* (-idt)\n        @view(Fu[i_F, :]) .= jacobian((du, x) -> dudt!(du, x, p, 0.0),\n                                        du, u)::Array{Float64,2} .* (-idt)\n    end"}]}]}],"thread_ts":"1616511819.257800","parent_user_id":"U014K4SE396"},{"client_msg_id":"7955765a-f538-4c0e-8cda-93503d662254","type":"message","text":"I am filling an banded matrix with each block corresponding to a Jacobian Matrix","user":"U014K4SE396","ts":"1616511936.258200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"26uQ9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am filling an banded matrix with each block corresponding to a Jacobian Matrix"}]}]}],"thread_ts":"1616511819.257800","parent_user_id":"U014K4SE396"},{"client_msg_id":"1B2CDABC-8BAD-4FD7-B9F4-7726B44EA469","type":"message","text":"SharedArray is for distributed computing where the processes don’t access the same memory. You don’t need to use it with a multithreaded expression because all of the threads have access to the same memory.","user":"UBA5PL84U","ts":"1616514060.263700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=u6Hj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"SharedArray is for distributed computing where the processes don’t access the same memory. You don’t need to use it with a multithreaded expression because all of the threads have access to the same memory."}]}]}],"thread_ts":"1616511819.257800","parent_user_id":"U014K4SE396"},{"client_msg_id":"b6b94e6d-43a7-4912-8807-b537f0686145","type":"message","text":"Yeah, but I have a feeling that I have to do something to avoid I/O racing","user":"U014K4SE396","ts":"1616514097.263900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Yww8O","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, but I have a feeling that I have to do something to avoid I/O racing"}]}]}],"thread_ts":"1616511819.257800","parent_user_id":"U014K4SE396"},{"client_msg_id":"1398c323-0f62-483c-be5f-2ee70a324db3","type":"message","text":"As long as you are careful to only write to each element from one thread, then you should be good.","user":"UBA5PL84U","ts":"1616517064.265100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C98","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"As long as you are careful to only write to each element from one thread, then you should be good."}]}]}],"thread_ts":"1616511819.257800","parent_user_id":"U014K4SE396"}]