[{"client_msg_id":"1e43e8bf-5ad1-460f-aab4-a1c4d8c61fcc","type":"message","text":"Hello, is there a way to speed up this loop? thanks.\n\n`var1=rand(1000,1000);`\n`var2=rand(1000,1);`\n`for t in 1:100000`\n`var3=var1*var2;`\n`end`","user":"U01QST11309","ts":"1615042696.144800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Vp5J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hello, is there a way to speed up this loop? thanks.\n\n"},{"type":"text","text":"var1=rand(1000,1000);","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"var2=rand(1000,1);","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"for t in 1:100000","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"var3=var1*var2;","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"end","style":{"code":true}}]}]}],"thread_ts":"1615042696.144800","reply_count":20,"reply_users_count":5,"latest_reply":"1615144419.185400","reply_users":["UDB26738Q","U011V2YN59N","UD0NS8PDF","U01QST11309","UH24GRBLL"],"subscribed":false},{"client_msg_id":"a071e55c-b359-4e77-83ad-40f26244814b","type":"message","text":"you can reduce allocations by pre-allocating `var3`:\n```julia&gt; using LinearAlgebra, BenchmarkTools\n\njulia&gt; @btime var1 * var2 setup = (var1 = rand(1000, 1000); var2 = rand(1000, 1));\n  343.889 μs (1 allocation: 7.94 KiB)\n\njulia&gt; @btime mul!(var3, var1, var2) setup = (var1 = rand(1000, 1000); var2 = rand(1000, 1); var3 = Matrix{Float64}(undef, 1000, 1));\n  344.379 μs (0 allocations: 0 bytes)```\nbut if `var1` and `var2` are matrices of `Float64` there isn't in principle too much you can do, multiplication is done by a BLAS library","user":"UDB26738Q","ts":"1615043844.145100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AYxt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can reduce allocations by pre-allocating "},{"type":"text","text":"var3","style":{"code":true}},{"type":"text","text":":\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using LinearAlgebra, BenchmarkTools\n\njulia> @btime var1 * var2 setup = (var1 = rand(1000, 1000); var2 = rand(1000, 1));\n  343.889 μs (1 allocation: 7.94 KiB)\n\njulia> @btime mul!(var3, var1, var2) setup = (var1 = rand(1000, 1000); var2 = rand(1000, 1); var3 = Matrix{Float64}(undef, 1000, 1));\n  344.379 μs (0 allocations: 0 bytes)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"but if "},{"type":"text","text":"var1","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"var2","style":{"code":true}},{"type":"text","text":" are matrices of "},{"type":"text","text":"Float64","style":{"code":true}},{"type":"text","text":" there isn't in principle too much you can do, multiplication is done by a BLAS library"}]}]}],"thread_ts":"1615042696.144800","parent_user_id":"U01QST11309"},{"client_msg_id":"b9e7f88d-604f-41d5-85aa-a30672dc9fe7","type":"message","text":"you can try with a different BLAS library (MKL if you have an Intel CPU), or play with the number of threads of OpenBLAS.  there are some Julia libraries which offer BLAS functionalities, but usually performance is in the same ballpark (don't expect orders of magnitudes of difference)","user":"UDB26738Q","ts":"1615043911.145300","team":"T68168MUP","edited":{"user":"UDB26738Q","ts":"1615043928.000000"},"blocks":[{"type":"rich_text","block_id":"acwy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can try with a different BLAS library (MKL if you have an Intel CPU), or play with the number of threads of OpenBLAS.  there are some Julia libraries which offer BLAS functionalities, but usually performance is in the same ballpark (don't expect orders of magnitudes of difference)"}]}]}],"thread_ts":"1615042696.144800","parent_user_id":"U01QST11309"},{"client_msg_id":"eadfe1a6-be6e-4627-89f0-10f6290be571","type":"message","text":"huh TIL that `btime` has a `setup` keyword","user":"U011V2YN59N","ts":"1615044029.146700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ja1aT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"huh TIL that "},{"type":"text","text":"btime","style":{"code":true}},{"type":"text","text":" has a "},{"type":"text","text":"setup","style":{"code":true}},{"type":"text","text":" keyword"}]}]}],"thread_ts":"1615042696.144800","parent_user_id":"U01QST11309"},{"client_msg_id":"757433B6-814C-425F-AA3C-B0E56835C041","type":"message","text":"`var2 = rand(1000)` may help too, a true vector not a matrix (but I didn’t check)","user":"UD0NS8PDF","ts":"1615044052.147300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MWCVZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"var2 = rand(1000)","style":{"code":true}},{"type":"text","text":" may help too, a true vector not a matrix (but I didn’t check)"}]}]}],"thread_ts":"1615042696.144800","parent_user_id":"U01QST11309"},{"client_msg_id":"b9d8a586-bf7f-4543-b3f4-1ecab8bbba2c","type":"message","text":"```julia&gt; @btime var1 * var2 setup = (var1 = rand(1000, 1000); var2 = rand(1000));\n  173.374 μs (1 allocation: 7.94 KiB)\n\njulia&gt; @btime mul!(var3, var1, var2) setup = (var1 = rand(1000, 1000); var2 = rand(1000); var3 = Vector{Float64}(undef, 1000));\n  177.348 μs (0 allocations: 0 bytes)```\nseems to give a 2x speedup","user":"UDB26738Q","ts":"1615044130.147500","team":"T68168MUP","edited":{"user":"UDB26738Q","ts":"1615044166.000000"},"blocks":[{"type":"rich_text","block_id":"vb6v2","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @btime var1 * var2 setup = (var1 = rand(1000, 1000); var2 = rand(1000));\n  173.374 μs (1 allocation: 7.94 KiB)\n\njulia> @btime mul!(var3, var1, var2) setup = (var1 = rand(1000, 1000); var2 = rand(1000); var3 = Vector{Float64}(undef, 1000));\n  177.348 μs (0 allocations: 0 bytes)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"seems to give a 2x speedup"}]}]}],"thread_ts":"1615042696.144800","parent_user_id":"U01QST11309"},{"client_msg_id":"445b7a92-1764-4d18-a4ac-03b4bcb40f06","type":"message","text":"thank you everyone. The fact of preallocating vector instead of matrix (n,1) boost the function a lot. mul! and @fastmath were slower than simple * multiplicaiton. what I am surprise about is the fact of mentioning the format “Float64” is slowing down a little.","user":"U01QST11309","ts":"1615048308.149600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"udL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thank you everyone. The fact of preallocating vector instead of matrix (n,1) boost the function a lot. mul! and @fastmath were slower than simple * multiplicaiton. what I am surprise about is the fact of mentioning the format “Float64” is slowing down a little."}]}]}],"thread_ts":"1615042696.144800","parent_user_id":"U01QST11309"},{"client_msg_id":"5da23300-e7da-4426-89eb-0c70d24826b5","type":"message","text":"In my function I have ~10 lines vector operations and one line of matrix*vector and one line to generate random matrix. the last two lines are the slowest but matrix*vector line is twice slower than generating a random matrix !","user":"U01QST11309","ts":"1615048968.149800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Yw71l","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In my function I have ~10 lines vector operations and one line of matrix*vector and one line to generate random matrix. the last two lines are the slowest but matrix*vector line is twice slower than generating a random matrix !"}]}]}],"thread_ts":"1615042696.144800","parent_user_id":"U01QST11309"},{"client_msg_id":"88b4c18a-6210-4b28-aff2-11eb026c7e57","type":"message","text":"It would be helpful if you posted some more context about what you're doing/what your function is doing - otherwise it's pretty hard to give specific advice that doesn't end in microbenchmarks of which BLAS is called.","user":"UH24GRBLL","ts":"1615108771.171100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uLu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It would be helpful if you posted some more context about what you're doing/what your function is doing - otherwise it's pretty hard to give specific advice that doesn't end in microbenchmarks of which BLAS is called."}]}]}],"thread_ts":"1615042696.144800","parent_user_id":"U01QST11309"},{"type":"message","text":"here is my function, as you can see lines 28th and 30th are slow. Also I am solving a model by Heun’s method but I don’t know how to use the Heun’s method implemented in Julia. If you can help I’d be grateful :wink:","files":[{"id":"F01QF6F0MEW","created":1615130600,"timestamp":1615130600,"name":"myFun.jl","title":"myFun.jl","mimetype":"text/plain","filetype":"text","pretty_type":"Plain Text","user":"U01QST11309","editable":true,"size":1034,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01QF6F0MEW/myfun.jl","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01QF6F0MEW/download/myfun.jl","permalink":"https://julialang.slack.com/files/U01QST11309/F01QF6F0MEW/myfun.jl","permalink_public":"https://slack-files.com/T68168MUP-F01QF6F0MEW-09a2fdc80f","edit_link":"https://julialang.slack.com/files/U01QST11309/F01QF6F0MEW/myfun.jl/edit","preview":"\n\nusing Distributions\n\nfunction myFun()","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text/plain',window.getSelection().toString().replace(/\\u200b/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre></pre></div>\n<div><pre></pre></div>\n<div><pre>using Distributions</pre></div>\n<div><pre></pre></div>\n<div><pre>function myFun()</pre></div>\n</div>\n</div>\n","lines":62,"lines_more":57,"preview_is_truncated":true,"is_starred":false,"has_rich_preview":false}],"upload":false,"blocks":[{"type":"rich_text","block_id":"kpek","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"here is my function, as you can see lines 28th and 30th are slow. Also I am solving a model by Heun’s method but I don’t know how to use the Heun’s method implemented in Julia. If you can help I’d be grateful "},{"type":"emoji","name":"wink"}]}]}],"user":"U01QST11309","display_as_bot":false,"ts":"1615130702.176900","edited":{"user":"U01QST11309","ts":"1615130712.000000"},"thread_ts":"1615042696.144800","parent_user_id":"U01QST11309"},{"client_msg_id":"934d1ee3-ca52-4801-ada8-1621b76fd70a","type":"message","text":"I can shave off a bunch of time by making almost everything happen in place, but since the remaining bottleneck is the matric multiplication and the distribution sampling, that's probably as good as it's going to get","user":"UH24GRBLL","ts":"1615134335.178300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tfMda","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I can shave off a bunch of time by making almost everything happen in place, but since the remaining bottleneck is the matric multiplication and the distribution sampling, that's probably as good as it's going to get"}]}]}],"thread_ts":"1615042696.144800","parent_user_id":"U01QST11309"},{"client_msg_id":"19c958fb-d43a-42c5-af0b-07cdc23adb2f","type":"message","text":"```julia&gt; @benchmark myFun_modified() setup=(Random.seed!(1)) evals=1\nBenchmarkTools.Trial:                                             \n  memory estimate:  409.92 MiB                                    \n  allocs estimate:  26322                                         \n  --------------                                                  \n  minimum time:     3.223 s (0.53% GC)                            \n  median time:      3.226 s (0.53% GC)                            \n  mean time:        3.226 s (0.53% GC)                            \n  maximum time:     3.229 s (0.53% GC)                            \n  --------------                                                  \n  samples:          2                                             \n  evals/sample:     1                                             \n                                                                  \njulia&gt; @benchmark myFun() setup=(Random.seed!(1)) evals=1         \nBenchmarkTools.Trial:                                             \n  memory estimate:  3.67 GiB                                      \n  allocs estimate:  946815                                        \n  --------------                                                  \n  minimum time:     4.576 s (6.53% GC)                            \n  median time:      4.577 s (6.51% GC)                            \n  mean time:        4.577 s (6.51% GC)                            \n  maximum time:     4.577 s (6.50% GC)                            \n  --------------                                                  \n  samples:          2                                             \n  evals/sample:     1                                             ```","user":"UH24GRBLL","ts":"1615134352.178500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c5we","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @benchmark myFun_modified() setup=(Random.seed!(1)) evals=1\nBenchmarkTools.Trial:                                             \n  memory estimate:  409.92 MiB                                    \n  allocs estimate:  26322                                         \n  --------------                                                  \n  minimum time:     3.223 s (0.53% GC)                            \n  median time:      3.226 s (0.53% GC)                            \n  mean time:        3.226 s (0.53% GC)                            \n  maximum time:     3.229 s (0.53% GC)                            \n  --------------                                                  \n  samples:          2                                             \n  evals/sample:     1                                             \n                                                                  \njulia> @benchmark myFun() setup=(Random.seed!(1)) evals=1         \nBenchmarkTools.Trial:                                             \n  memory estimate:  3.67 GiB                                      \n  allocs estimate:  946815                                        \n  --------------                                                  \n  minimum time:     4.576 s (6.53% GC)                            \n  median time:      4.577 s (6.51% GC)                            \n  mean time:        4.577 s (6.51% GC)                            \n  maximum time:     4.577 s (6.50% GC)                            \n  --------------                                                  \n  samples:          2                                             \n  evals/sample:     1                                             "}]}]}],"thread_ts":"1615042696.144800","parent_user_id":"U01QST11309"},{"client_msg_id":"6c7af4b5-0f77-440c-aa07-2eef5039b3d9","type":"message","text":"```using Distributions\nusing LinearAlgebra: mul!\n\nfunction myFun_modified()\n    N = 500\n    pos = 1\n    counter = 1\n    ss = 0.005\n    matrix_ = rand(N,N)\n    matrix_ .= matrix_ .+ matrix_'\n    R = zeros(200, N)\n    V = zeros(200, N)\n    r1 = rand(N)*3 .- 0\n    v1 = rand(N)*3 .- 2.5\n    r2 = similar(r1)\n    v2 = similar(v1)\n    \n    rLeft = similar(r1)\n    vLeft = similar(v1)\n    rRight = similar(r1)\n    vRight = similar(v1)\n\n    rNoise = sqrt(ss) * 0.28\n    vNoise = sqrt(ss) * 0.4\n    coup = zeros(N)\n\n    noise = Matrix{Float64}(undef, N, 4)\n    n1 = view(noise, :, 1)\n    n2 = view(noise, :, 2)\n    n3 = view(noise, :, 3)\n    n4 = view(noise, :, 4)\n\n    pi_ratio = 0.7/π\n    pisquared = π^2\n\n    for t in ss:ss:210.0\n        mul!(coup, matrix_, r1)\n        noise .= rand(Normal(0,1),N,4)\n        \n        @. rLeft = pi_ratio + 2.0*r1*v1\n        @. vLeft = v1*v1 - pisquared*r1*r1 - 4.6 + r1*14.5 + 0.008*coup\n        mul!(r2, rNoise, n1)\n        mul!(v2, vNoise, n2)\n        r2 .+= r1 .+ ss.*rLeft\n        v2 .+= v1 .+ ss.*vLeft\n        \n        @. rRight = pi_ratio + 2.0*r2*v2\n        @. vRight = v2*v2 - pisquared*r2*r2 - 4.6 + r2*14.5 + 0.008*coup\n        stepfactor = ss/2.0\n        r1 .+= stepfactor .* (rLeft .+ rRight) .+ rNoise .* n3\n        v1 .+= stepfactor .* (vLeft .+ vRight) .+ vNoise .* n4\n        \n        for (i,x) in enumerate(r1)\n            if x &lt; 0\n                r1[i] = 0.0\n            end\n        end\n\n        if t &gt; 10\n            if mod(counter, 200) == 0\n                V[pos, :] .= v1\n                R[pos, :] .= r1\n                pos = pos + 1\n            end\n            counter = counter + 1\n        end\n        \n        if isnan(v1[1])\n            break\n        end\n    end\n    return V\nend```","user":"UH24GRBLL","ts":"1615135430.181800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HbY","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using Distributions\nusing LinearAlgebra: mul!\n\nfunction myFun_modified()\n    N = 500\n    pos = 1\n    counter = 1\n    ss = 0.005\n    matrix_ = rand(N,N)\n    matrix_ .= matrix_ .+ matrix_'\n    R = zeros(200, N)\n    V = zeros(200, N)\n    r1 = rand(N)*3 .- 0\n    v1 = rand(N)*3 .- 2.5\n    r2 = similar(r1)\n    v2 = similar(v1)\n    \n    rLeft = similar(r1)\n    vLeft = similar(v1)\n    rRight = similar(r1)\n    vRight = similar(v1)\n\n    rNoise = sqrt(ss) * 0.28\n    vNoise = sqrt(ss) * 0.4\n    coup = zeros(N)\n\n    noise = Matrix{Float64}(undef, N, 4)\n    n1 = view(noise, :, 1)\n    n2 = view(noise, :, 2)\n    n3 = view(noise, :, 3)\n    n4 = view(noise, :, 4)\n\n    pi_ratio = 0.7/π\n    pisquared = π^2\n\n    for t in ss:ss:210.0\n        mul!(coup, matrix_, r1)\n        noise .= rand(Normal(0,1),N,4)\n        \n        @. rLeft = pi_ratio + 2.0*r1*v1\n        @. vLeft = v1*v1 - pisquared*r1*r1 - 4.6 + r1*14.5 + 0.008*coup\n        mul!(r2, rNoise, n1)\n        mul!(v2, vNoise, n2)\n        r2 .+= r1 .+ ss.*rLeft\n        v2 .+= v1 .+ ss.*vLeft\n        \n        @. rRight = pi_ratio + 2.0*r2*v2\n        @. vRight = v2*v2 - pisquared*r2*r2 - 4.6 + r2*14.5 + 0.008*coup\n        stepfactor = ss/2.0\n        r1 .+= stepfactor .* (rLeft .+ rRight) .+ rNoise .* n3\n        v1 .+= stepfactor .* (vLeft .+ vRight) .+ vNoise .* n4\n        \n        for (i,x) in enumerate(r1)\n            if x < 0\n                r1[i] = 0.0\n            end\n        end\n\n        if t > 10\n            if mod(counter, 200) == 0\n                V[pos, :] .= v1\n                R[pos, :] .= r1\n                pos = pos + 1\n            end\n            counter = counter + 1\n        end\n        \n        if isnan(v1[1])\n            break\n        end\n    end\n    return V\nend"}]}]}],"thread_ts":"1615042696.144800","parent_user_id":"U01QST11309"},{"client_msg_id":"5de2dfa5-5a31-4bb5-ae5f-0d448871f0d9","type":"message","text":"I wouldn't write these solvers manually though, DifferentialEquations.jl has excellent support for Runge-Kutta methods (<https://juliahub.com/ui/Packages/DifferentialEquations/UQdwS/6.16.0> and <https://diffeq.sciml.ai/stable/solvers/ode_solve/#Explicit-Runge-Kutta-Methods>, for explicit specification of Heun's method)","user":"UH24GRBLL","ts":"1615135645.182200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Boj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I wouldn't write these solvers manually though, DifferentialEquations.jl has excellent support for Runge-Kutta methods ("},{"type":"link","url":"https://juliahub.com/ui/Packages/DifferentialEquations/UQdwS/6.16.0"},{"type":"text","text":" and "},{"type":"link","url":"https://diffeq.sciml.ai/stable/solvers/ode_solve/#Explicit-Runge-Kutta-Methods"},{"type":"text","text":", for explicit specification of Heun's method)"}]}]}],"thread_ts":"1615042696.144800","parent_user_id":"U01QST11309"},{"client_msg_id":"23009d97-bbb8-4183-af80-f0f68157d440","type":"message","text":"moreover, the package is optimized","user":"UH24GRBLL","ts":"1615135657.182400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"U5H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"moreover, the package is optimized"}]}]}],"thread_ts":"1615042696.144800","parent_user_id":"U01QST11309"},{"client_msg_id":"d2119bd2-0aa1-4a87-87f1-15622a217878","type":"message","text":"There's probably still a factor of 2 (or more) left on the table, as `matrix_` is symmetric but this isn't being taken advantage of right now. if you add `using LinearAlgebra: Symmetric` at the top and `matrix_ = Symmetric(matrix_ .+ matrix_')` instead of the plain assignment, you'll get that as well, but it comes at the cost of a tiny bit of precision (something on the order of 10^-6 off, which should be fine)","user":"UH24GRBLL","ts":"1615136984.183100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sSKj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There's probably still a factor of 2 (or more) left on the table, as "},{"type":"text","text":"matrix_","style":{"code":true}},{"type":"text","text":" is symmetric but this isn't being taken advantage of right now. if you add "},{"type":"text","text":"using LinearAlgebra: Symmetric","style":{"code":true}},{"type":"text","text":" at the top and "},{"type":"text","text":"matrix_ = Symmetric(matrix_ .+ matrix_')","style":{"code":true}},{"type":"text","text":" instead of the plain assignment, you'll get that as well, but it comes at the cost of a tiny bit of precision (something on the order of 10^-6 off, which should be fine)"}]}]}],"thread_ts":"1615042696.144800","parent_user_id":"U01QST11309"},{"client_msg_id":"065ec77b-7846-462d-ab59-dc92a4312454","type":"message","text":"afaik, DifferentialEquations.jl does all those fancy tricks and more already","user":"UH24GRBLL","ts":"1615137027.183300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Wrg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"afaik, DifferentialEquations.jl does all those fancy tricks and more already"}]}]}],"thread_ts":"1615042696.144800","parent_user_id":"U01QST11309"},{"client_msg_id":"0713521d-64b0-4ef6-b3d4-88648de4d3ed","type":"message","text":"e.g. I get\n```julia&gt; @benchmark myFun_modified() setup=(Random.seed!(1)) evals=1\nBenchmarkTools.Trial:                                             \n  memory estimate:  409.92 MiB                                    \n  allocs estimate:  26322                                         \n  --------------                                                  \n  minimum time:     2.795 s (0.66% GC)                            \n  median time:      2.805 s (0.66% GC)                            \n  mean time:        2.805 s (0.66% GC)                            \n  maximum time:     2.815 s (0.65% GC)                            \n  --------------                                                  \n  samples:          2                                             \n  evals/sample:     1                                             ```\nwith the `Symmetric` modification","user":"UH24GRBLL","ts":"1615137061.183500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2sV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"e.g. I get\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @benchmark myFun_modified() setup=(Random.seed!(1)) evals=1\nBenchmarkTools.Trial:                                             \n  memory estimate:  409.92 MiB                                    \n  allocs estimate:  26322                                         \n  --------------                                                  \n  minimum time:     2.795 s (0.66% GC)                            \n  median time:      2.805 s (0.66% GC)                            \n  mean time:        2.805 s (0.66% GC)                            \n  maximum time:     2.815 s (0.65% GC)                            \n  --------------                                                  \n  samples:          2                                             \n  evals/sample:     1                                             "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nwith the "},{"type":"text","text":"Symmetric","style":{"code":true}},{"type":"text","text":" modification"}]}]}],"thread_ts":"1615042696.144800","parent_user_id":"U01QST11309"},{"client_msg_id":"21d4dc0d-76fd-4647-b782-d0db83ab452d","type":"message","text":"wow, you did a great job, thank you so much :slightly_smiling_face: I like the idea of view and @.  , so interesting. I will try the links that you sent me, because with original inputs in Julia takes 175 sec and in Matlab 215 seconds. I hope it’ll be boosted more.","user":"U01QST11309","ts":"1615144105.185000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"62uE/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"wow, you did a great job, thank you so much "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":" I like the idea of view and @.  , so interesting. I will try the links that you sent me, because with original inputs in Julia takes 175 sec and in Matlab 215 seconds. I hope it’ll be boosted more."}]}]}],"thread_ts":"1615042696.144800","parent_user_id":"U01QST11309"},{"client_msg_id":"140ef4a3-4ac3-48e7-a61f-2a0ff6fde674","type":"message","text":"I've basically thought about where matrices already exist and wrote directly into them (reusing the memory), instead of assigning the result of an operation (which may need new memory)","user":"UH24GRBLL","ts":"1615144351.185200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bNf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I've basically thought about where matrices already exist and wrote directly into them (reusing the memory), instead of assigning the result of an operation (which may need new memory)"}]}]}],"thread_ts":"1615042696.144800","parent_user_id":"U01QST11309"},{"client_msg_id":"b6384f4d-8b56-4d80-9fb1-4d18dd906c08","type":"message","text":"You'll have to worry about that less if you use e.g. DifferentialEquations.jl, since the only place you'll have to think about is the function that's actually calculating the next step, instead of the whole solver","user":"UH24GRBLL","ts":"1615144419.185400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"X1vw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You'll have to worry about that less if you use e.g. DifferentialEquations.jl, since the only place you'll have to think about is the function that's actually calculating the next step, instead of the whole solver"}]}]}],"thread_ts":"1615042696.144800","parent_user_id":"U01QST11309"}]