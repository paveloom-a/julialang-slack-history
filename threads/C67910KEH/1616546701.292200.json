[{"client_msg_id":"ffd6d2fa-910b-405f-8047-c70337d5e8cb","type":"message","text":"Have there been discussions about what it mean to be a `Real` and/or what defines its interface? I feel like I keep running into rough edges because the concept is relatively ill-defined and prone to competing interpretations. For example if a type implement all arithmetic operations and comparisons (e.g. `Quantity`s from `Unitful` that does not subtype `Real`) shouldn't they be fully compatible? And if they are shouldn't they subtype the abstract `Real` type even so they are no strictly speaking reals (or even numbers)?","user":"U017LQ3A59U","ts":"1616546701.292200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9ctC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Have there been discussions about what it mean to be a "},{"type":"text","text":"Real","style":{"code":true}},{"type":"text","text":" and/or what defines its interface? I feel like I keep running into rough edges because the concept is relatively ill-defined and prone to competing interpretations. For example if a type implement all arithmetic operations and comparisons (e.g. "},{"type":"text","text":"Quantity","style":{"code":true}},{"type":"text","text":"s from "},{"type":"text","text":"Unitful","style":{"code":true}},{"type":"text","text":" that does not subtype "},{"type":"text","text":"Real","style":{"code":true}},{"type":"text","text":") shouldn't they be fully compatible? And if they are shouldn't they subtype the abstract "},{"type":"text","text":"Real","style":{"code":true}},{"type":"text","text":" type even so they are no strictly speaking reals (or even numbers)?"}]}]}],"thread_ts":"1616546701.292200","reply_count":17,"reply_users_count":6,"latest_reply":"1616595232.305000","reply_users":["U017LQ3A59U","U6A936746","UH8A351DJ","U67431ELR","UA3UH56HL","U6C937ENB"],"is_locked":false,"subscribed":false},{"client_msg_id":"28b87a52-349b-42da-9cf6-3accabb56414","type":"message","text":"By the way I use `Unitful` example here just because it is the last one I noticed (trying to plug it in `MultivariateStats`) but I also encountered those kind of questions while working on `IntervalArithmetic`  (something I;'ll hopefully be able to resume at some point)","user":"U017LQ3A59U","ts":"1616546911.292600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iqI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"By the way I use "},{"type":"text","text":"Unitful","style":{"code":true}},{"type":"text","text":" example here just because it is the last one I noticed (trying to plug it in "},{"type":"text","text":"MultivariateStats","style":{"code":true}},{"type":"text","text":") but I also encountered those kind of questions while working on "},{"type":"text","text":"IntervalArithmetic","style":{"code":true}},{"type":"text","text":"  (something I;'ll hopefully be able to resume at some point)"}]}]}],"thread_ts":"1616546701.292200","parent_user_id":"U017LQ3A59U"},{"client_msg_id":"30b853ad-1ffc-46d2-a8db-3084933d53e7","type":"message","text":"`Real` possibly shouldn't exist in the type hierarchy. (`AbstractFloat` even more so.)\nI guess the requirement for `Real` over other numbers is that they are Orderable. Complex numbers are not, and you can wrap a `Quanity` around a complex number,and if you do `&lt;=` will stop working.\n\nPossibly commutative multiplication us also required? Real (and Complex) have that but quaternions don't.","user":"U6A936746","ts":"1616548473.295000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"t+W","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Real ","style":{"code":true}},{"type":"text","text":"possibly shouldn't exist in the type hierarchy. (`AbstractFloat` even more so.)\nI guess the requirement for "},{"type":"text","text":"Real ","style":{"code":true}},{"type":"text","text":"over other numbers is that they are Orderable. Complex numbers are not, and you can wrap a "},{"type":"text","text":"Quanity","style":{"code":true}},{"type":"text","text":" around a complex number,and if you do "},{"type":"text","text":"<= ","style":{"code":true}},{"type":"text","text":"will stop working.\n\nPossibly commutative multiplication us also required? Real (and Complex) have that but quaternions don't."}]}]}],"thread_ts":"1616546701.292200","parent_user_id":"U017LQ3A59U"},{"client_msg_id":"f8bfd383-57cf-46d5-8e35-ca896f775a86","type":"message","text":"hm, if Real and AbstractFloat don't exist, I think we won't have DiffEq work with Measurements.jl this easily","user":"UH8A351DJ","ts":"1616548540.295200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1fNjQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hm, if Real and AbstractFloat don't exist, I think we won't have DiffEq work with Measurements.jl this easily"}]}]}],"thread_ts":"1616546701.292200","parent_user_id":"U017LQ3A59U"},{"client_msg_id":"f11295c7-da1f-4859-aaf6-c516130ee9e7","type":"message","text":"`Number` would still exist. As would `Any`","user":"U6A936746","ts":"1616548582.295400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7YDmw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Number","style":{"code":true}},{"type":"text","text":" would still exist. As would "},{"type":"text","text":"Any","style":{"code":true}}]}]}],"thread_ts":"1616546701.292200","parent_user_id":"U017LQ3A59U"},{"client_msg_id":"8daea635-8f35-49f3-8dd5-b58f09c4e352","type":"message","text":"so you're saying maybe all concrete number-representing types are direct subtype of `Number`","user":"UH8A351DJ","ts":"1616548651.295800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"brdRk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so you're saying maybe all concrete number-representing types are direct subtype of "},{"type":"text","text":"Number","style":{"code":true}}]}]}],"thread_ts":"1616546701.292200","parent_user_id":"U017LQ3A59U"},{"client_msg_id":"d9347229-01ca-40a7-aa05-b0018be95445","type":"message","text":"More or less.\n`Integer` is useful.","user":"U6A936746","ts":"1616548670.296000","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1616548845.000000"},"blocks":[{"type":"rich_text","block_id":"VreP8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"More or less.\n`Integer` is useful."}]}]}],"thread_ts":"1616546701.292200","parent_user_id":"U017LQ3A59U"},{"client_msg_id":"b4e6d4e2-19b6-4779-bbcb-0d5eb13f634b","type":"message","text":"It's pretty rare to actually dispatch on Real seperately from Number.\nI can't be think of any examples of the top of my head. (Real vs Complex yes).\nMore common is to rely on things being orderable, and when they are not error.\nAnd that error can well be at `&lt;` rather than some method signature earlier","user":"U6A936746","ts":"1616548789.296200","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1616548813.000000"},"blocks":[{"type":"rich_text","block_id":"N0G6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's pretty rare to actually dispatch on Real seperately from Number.\nI can't be think of any examples of the top of my head. (Real vs Complex yes).\nMore common is to rely on things being orderable, and when they are not error.\nAnd that error can well be at "},{"type":"text","text":"<","style":{"code":true}},{"type":"text","text":" rather than some method signature earlier"}]}]}],"thread_ts":"1616546701.292200","parent_user_id":"U017LQ3A59U"},{"client_msg_id":"8f9c1fe1-cc62-44c8-a195-e67cde6e76f3","type":"message","text":"I think it would be very useful to try documenting the interface of `Real` and other number types in the manual. You can have a look at the methods that are implemented to get an idea.","user":"U67431ELR","ts":"1616575199.300400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4Z9/7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think it would be very useful to try documenting the interface of "},{"type":"text","text":"Real","style":{"code":true}},{"type":"text","text":" and other number types in the manual. You can have a look at the methods that are implemented to get an idea."}]}]}],"thread_ts":"1616546701.292200","parent_user_id":"U017LQ3A59U","reactions":[{"name":"+1","users":["U6A936746"],"count":1}]},{"client_msg_id":"45f5f34a-094d-43ea-a805-782b7bba43f5","type":"message","text":"I agree with <@U6A936746> that our lives would be much easier if some of these abstract types were gone and people started go rely more on behavior with traits like &lt; instead of explicit dispatch. I guess that would lead to another level of integration across different packages using some kind of scalar type.","user":"UA3UH56HL","ts":"1616576003.300900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KmhP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I agree with "},{"type":"user","user_id":"U6A936746"},{"type":"text","text":" that our lives would be much easier if some of these abstract types were gone and people started go rely more on behavior with traits like < instead of explicit dispatch. I guess that would lead to another level of integration across different packages using some kind of scalar type."}]}]}],"thread_ts":"1616546701.292200","parent_user_id":"U017LQ3A59U"},{"client_msg_id":"e935997c-837c-4c5c-ae8f-8a31be1573a4","type":"message","text":"It’s not so easy to pin down what a `&lt;: Number` is, because that is basically subject to an informal consensus mechanism which works nicely for us so far, but to describe its results you would have to start with “_Most_ types `&lt;: Number`  …” and _talk_ to a number of people to get a good, balanced description.","user":"U6C937ENB","ts":"1616577313.301100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tVmT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It’s not so easy to pin down what a "},{"type":"text","text":"<: Number","style":{"code":true}},{"type":"text","text":" is, because that is basically subject to an informal consensus mechanism which works nicely for us so far, but to describe its results you would have to start with “"},{"type":"text","text":"Most","style":{"italic":true}},{"type":"text","text":" types "},{"type":"text","text":"<: Number","style":{"code":true}},{"type":"text","text":"  …” and "},{"type":"text","text":"talk","style":{"italic":true}},{"type":"text","text":" to a number of people to get a good, balanced description."}]}]}],"thread_ts":"1616546701.292200","parent_user_id":"U017LQ3A59U"},{"client_msg_id":"cb420445-be21-42fe-8ff5-6ade84277b2d","type":"message","text":"&gt; It's pretty rare to actually dispatch on Real seperately from Number.\nIs it even common to dispatch on `Number` separatly from another generic type? It may have been for arrays before broadcasting function was a think, but now I don't know.","user":"U017LQ3A59U","ts":"1616592791.303800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KbGC","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"It's pretty rare to actually dispatch on Real seperately from Number."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Is it even common to dispatch on "},{"type":"text","text":"Number","style":{"code":true}},{"type":"text","text":" separatly from another generic type? It may have been for arrays before broadcasting function was a think, but now I don't know."}]}]}],"thread_ts":"1616546701.292200","parent_user_id":"U017LQ3A59U"},{"client_msg_id":"2cf6f339-996e-4d87-8855-8eaf8645ca6c","type":"message","text":"I kind of like the intermediate types, I think they help the code to be self documented and make it friendlier for new contributors. But this has nothing to do with dispatch and some kind of \"annotation type\" would do the same, by just telling the reader what is expected but not erroring if passed something else (we could even imagine some directive enforcing the annotated type for debugging).","user":"U017LQ3A59U","ts":"1616593241.304000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eqtv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I kind of like the intermediate types, I think they help the code to be self documented and make it friendlier for new contributors. But this has nothing to do with dispatch and some kind of \"annotation type\" would do the same, by just telling the reader what is expected but not erroring if passed something else (we could even imagine some directive enforcing the annotated type for debugging)."}]}]}],"thread_ts":"1616546701.292200","parent_user_id":"U017LQ3A59U"},{"client_msg_id":"e1714cd7-4482-45b8-aee7-2ccaa1f2bfe7","type":"message","text":"Types like `Number` and `Real` are useful if you know that you can rely on functions like `isnan` to be defined on them. See e.g. <https://github.com/JuliaLang/Statistics.jl/pull/72>","user":"U67431ELR","ts":"1616593444.304200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"D4uG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Types like "},{"type":"text","text":"Number","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"Real","style":{"code":true}},{"type":"text","text":" are useful if you know that you can rely on functions like "},{"type":"text","text":"isnan","style":{"code":true}},{"type":"text","text":" to be defined on them. See e.g. "},{"type":"link","url":"https://github.com/JuliaLang/Statistics.jl/pull/72"}]}]}],"thread_ts":"1616546701.292200","parent_user_id":"U017LQ3A59U"},{"client_msg_id":"f2d80e3e-cbbc-4dd6-8d55-45d5c093fd92","type":"message","text":"Thinking about duck-typing, does Julia inference machinery pick up on missing method at compile time? I feel like it could","user":"U017LQ3A59U","ts":"1616593524.304400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IAfQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thinking about duck-typing, does Julia inference machinery pick up on missing method at compile time? I feel like it could"}]}]}],"thread_ts":"1616546701.292200","parent_user_id":"U017LQ3A59U"},{"client_msg_id":"ecb1c910-4dc4-4d4e-85f3-86c442fd5c9f","type":"message","text":"It does, but it doesn’t tell the user.\n\nTricks.jl basically abuses that to allow one to define traits based on what methods are defined.","user":"U6A936746","ts":"1616593819.304600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"P=Lr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It does, but it doesn’t tell the user.\n\nTricks.jl basically abuses that to allow one to define traits based on what methods are defined."}]}]}],"thread_ts":"1616546701.292200","parent_user_id":"U017LQ3A59U"},{"client_msg_id":"98e6a572-52d9-4fe9-bc16-2b36fea2f135","type":"message","text":"That's neat. Now I wonder (wondering is one of my main hobby) if it could be extended to pick up if a function would throw a `MethodError` when compiling it (`@code_typed` giving empty union as return type make me optimistic about it). That opens a different take on duck-typing, instead of running the code to know if it can run, we can ask the duck beforehand if it knows how to quack in all the needed ways","user":"U017LQ3A59U","ts":"1616594889.304800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1e7J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's neat. Now I wonder (wondering is one of my main hobby) if it could be extended to pick up if a function would throw a "},{"type":"text","text":"MethodError","style":{"code":true}},{"type":"text","text":" when compiling it ("},{"type":"text","text":"@code_typed","style":{"code":true}},{"type":"text","text":" giving empty union as return type make me optimistic about it). That opens a different take on duck-typing, instead of running the code to know if it can run, we can ask the duck beforehand if it knows how to quack in all the needed ways"}]}]}],"thread_ts":"1616546701.292200","parent_user_id":"U017LQ3A59U"},{"client_msg_id":"e73ded24-07fc-4f60-8654-74612dea59e6","type":"message","text":"I assume JET.jl does basically that, but I haven't tried","user":"U6A936746","ts":"1616595232.305000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ySy/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I assume JET.jl does basically that, but I haven't tried"}]}]}],"thread_ts":"1616546701.292200","parent_user_id":"U017LQ3A59U"}]