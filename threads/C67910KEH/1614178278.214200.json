[{"client_msg_id":"f458a83e-7b60-4241-8365-781b3569b661","type":"message","text":"What is `end` in `myarray[1:end]`? What is it doing under the hood? Why was it chosen that `myarray[-1]` is not able to be done? is `[-1]`  reserved or is it for ambiguity and consistency?\n\nMy friend is trying to learn Julia and is always asking questions like these to me.","user":"U01C2E6TYEM","ts":"1614178278.214200","team":"T68168MUP","edited":{"user":"U01C2E6TYEM","ts":"1614178396.000000"},"blocks":[{"type":"rich_text","block_id":"rzd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What is "},{"type":"text","text":"end","style":{"code":true}},{"type":"text","text":" in "},{"type":"text","text":"myarray[1:end]","style":{"code":true}},{"type":"text","text":"? What is it doing under the hood? Why was it chosen that "},{"type":"text","text":"myarray[-1]","style":{"code":true}},{"type":"text","text":" is not able to be done? is "},{"type":"text","text":"[-1]","style":{"code":true}},{"type":"text","text":"  reserved or is it for ambiguity and consistency?\n\nMy friend is trying to learn Julia and is always asking questions like these to me."}]}]}],"thread_ts":"1614178278.214200","reply_count":13,"reply_users_count":8,"latest_reply":"1614186558.222600","reply_users":["U67SCG4HG","U9MD78Z9N","U01C2E6TYEM","U6QPTG69E","U7HAYKY9X","U0179G7FG4F","U6740K1SP","U6A936746"],"subscribed":false},{"client_msg_id":"5637d66d-18dc-4bf9-a03c-9c012c47b882","type":"message","text":"```julia&gt; Meta.@lower myarray[1:end]\n:($(Expr(:thunk, CodeInfo(\n    @ none within `top-level scope'\n1 ─ %1 = Base.lastindex(myarray)\n│   %2 = 1:%1\n│   %3 = Base.getindex(myarray, %2)\n└──      return %3\n))))```","user":"U67SCG4HG","ts":"1614178332.214400","team":"T68168MUP","edited":{"user":"U67SCG4HG","ts":"1614178406.000000"},"blocks":[{"type":"rich_text","block_id":"blY","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Meta.@lower myarray[1:end]\n:($(Expr(:thunk, CodeInfo(\n    @ none within `top-level scope'\n1 ─ %1 = Base.lastindex(myarray)\n│   %2 = 1:%1\n│   %3 = Base.getindex(myarray, %2)\n└──      return %3\n))))"}]}]}],"thread_ts":"1614178278.214200","parent_user_id":"U01C2E6TYEM","reactions":[{"name":"point_up","users":["U6740K1SP"],"count":1}]},{"type":"message","text":"`-1` is a pythonism and has no special meaning in Julia.","user":"U9MD78Z9N","ts":"1614178369.214700","team":"T68168MUP","thread_ts":"1614178278.214200","parent_user_id":"U01C2E6TYEM"},{"client_msg_id":"107d50db-811d-481f-9ca0-e6674fb473fb","type":"message","text":"My question is more why was it chosen to be this way","user":"U01C2E6TYEM","ts":"1614178415.215100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"49s","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My question is more why was it chosen to be this way"}]}]}],"thread_ts":"1614178278.214200","parent_user_id":"U01C2E6TYEM"},{"client_msg_id":"7a2174f5-ad2e-4857-b0e0-6761e76f12be","type":"message","text":"`myarray[-1]` can return the item at index `-1` for \"offset\" arrays whose indices do not necessarily start at `1`","user":"U6QPTG69E","ts":"1614178490.215400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Qk6PK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"myarray[-1]","style":{"code":true}},{"type":"text","text":" can return the item at index "},{"type":"text","text":"-1","style":{"code":true}},{"type":"text","text":" for \"offset\" arrays whose indices do not necessarily start at "},{"type":"text","text":"1","style":{"code":true}}]}]}],"thread_ts":"1614178278.214200","parent_user_id":"U01C2E6TYEM","reactions":[{"name":"+1","users":["U01C2E6TYEM","U0179G7FG4F","UPQP0RWTH","UGU761DU2","UDXST8ARK","U6A936746","U6C5KSWAC","U680THK2S"],"count":8}]},{"client_msg_id":"36e9680d-75aa-45b2-8560-920cf7cae1cb","type":"message","text":"I can think of two reasons:\n• It's not clear why `a[-1]` makes sense in the first place. Is it the element 2 elements before `a[1]` ? Nope, gotcha! The behaviour is a little weird. Whereas `a[end - 3]` makes perfect sense - it's 3 elements before `a[end]` .\n• It makes it impossible to effectively compile down to native instructions without having to check whether the index is negative","user":"U7HAYKY9X","ts":"1614178538.215700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6PoL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I can think of two reasons:\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's not clear why "},{"type":"text","text":"a[-1]","style":{"code":true}},{"type":"text","text":" makes sense in the first place. Is it the element 2 elements before "},{"type":"text","text":"a[1]","style":{"code":true}},{"type":"text","text":" ? Nope, gotcha! The behaviour is a little weird. Whereas "},{"type":"text","text":"a[end - 3]","style":{"code":true}},{"type":"text","text":" makes perfect sense - it's 3 elements before "},{"type":"text","text":"a[end]","style":{"code":true}},{"type":"text","text":" ."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"It makes it impossible to effectively compile down to native instructions without having to check whether the index is negative"}]}],"style":"bullet","indent":0}]}],"thread_ts":"1614178278.214200","parent_user_id":"U01C2E6TYEM","reactions":[{"name":"+1","users":["U01C2E6TYEM","U6QPTG69E","UGU761DU2","U7THT3TM3","UDXST8ARK","UKG4WF8PJ","UJ7DVTVQ8","U6C5KSWAC","U680THK2S"],"count":9}]},{"type":"message","text":"Since Julia has `Base.getindex` as underlying mechanism, which can do multiple dispatch. This allows overloading this syntax this allows <https://github.com/giordano/StarWarsArrays.jl> for fun or <https://github.com/JuliaParallel/DistributedArrays.jl> for profit.","user":"U9MD78Z9N","ts":"1614178599.216200","team":"T68168MUP","thread_ts":"1614178278.214200","parent_user_id":"U01C2E6TYEM","reactions":[{"name":"+1","users":["U01C2E6TYEM","UKG4WF8PJ"],"count":2}]},{"client_msg_id":"cf33d5a6-a1a3-4f01-a180-916a250e8a05","type":"message","text":"E.g. in Cython, you have a compiler directive ``wraparound(False)`` that lets the compiler assume the index is non-negative","user":"U7HAYKY9X","ts":"1614178641.216400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gRNbD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"E.g. in Cython, you have a compiler directive `"},{"type":"text","text":"wraparound(False)","style":{"code":true}},{"type":"text","text":"` that lets the compiler assume the index is non-negative"}]}]}],"thread_ts":"1614178278.214200","parent_user_id":"U01C2E6TYEM"},{"client_msg_id":"51b4e318-9b5b-4d70-9305-3e05b8e738c5","type":"message","text":"<@U01C2E6TYEM> I think the best answer is that Julia made a very purposeful choice not to make negative numbers have \"special\"  behavior.","user":"U0179G7FG4F","ts":"1614178962.217700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Gcf","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01C2E6TYEM"},{"type":"text","text":" I think the best answer is that Julia made a very purposeful choice not to make negative numbers have \"special\"  behavior."}]}]}],"thread_ts":"1614178278.214200","parent_user_id":"U01C2E6TYEM","reactions":[{"name":"+1","users":["U6740K1SP","UKG4WF8PJ"],"count":2}]},{"client_msg_id":"9ef9292e-c9b0-495e-ac17-421bf5a72fbb","type":"message","text":"Yup, indexing is built atop a handful of very simple rules. One nice thing is that `a:b` syntax is first class outside of indexing — it’s just an array of indices.  We’ve separated out the “context-sensitive” parts to just the special `begin` and `end` keywords.","user":"U6740K1SP","ts":"1614179175.218600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"B/m","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yup, indexing is built atop a handful of very simple rules. One nice thing is that "},{"type":"text","text":"a:b","style":{"code":true}},{"type":"text","text":" syntax is first class outside of indexing — it’s just an array of indices.  We’ve separated out the “context-sensitive” parts to just the special "},{"type":"text","text":"begin","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"end","style":{"code":true}},{"type":"text","text":" keywords."}]}]}],"thread_ts":"1614178278.214200","parent_user_id":"U01C2E6TYEM"},{"client_msg_id":"ea9278b3-84c6-4931-a8c0-43e5b367bb75","type":"message","text":"It also just jives a bit better with the set of behaviors of 1-based indexing and inclusive ranges and the possibility of arbitrarily-indexed arrays.","user":"U6740K1SP","ts":"1614179302.219400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZAIt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It also just jives a bit better with the set of behaviors of 1-based indexing and inclusive ranges and the possibility of arbitrarily-indexed arrays."}]}]}],"thread_ts":"1614178278.214200","parent_user_id":"U01C2E6TYEM","reactions":[{"name":"thumbsup_all","users":["U0179G7FG4F","UKG4WF8PJ"],"count":2}]},{"client_msg_id":"a1019008-0db4-43c2-93a9-b7a2cca23f1e","type":"message","text":"Thanks for the responses, everyone!","user":"U01C2E6TYEM","ts":"1614179658.220400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+9lhe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks for the responses, everyone!"}]}]}],"thread_ts":"1614178278.214200","parent_user_id":"U01C2E6TYEM"},{"client_msg_id":"b90bf232-30a4-4a2e-a7c3-f9a78780850c","type":"message","text":"`end` can do lots of other cool things.\nBecause it is replaces with `lastindex(xs)` during lowering (as said above).\nMEaning you can use it just like a number.\n\nLike getting the first 5 elements, or all the elements if there are  less than 5:\n`xs[1:min(end, 5)]`\n\nOr or breaking the data into splits:\n```train = data[1:9end÷10]\ntest = data[9end÷10 + 1 : end]```","user":"U6A936746","ts":"1614186458.222400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xGMw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"end","style":{"code":true}},{"type":"text","text":" can do lots of other cool things.\nBecause it is replaces with "},{"type":"text","text":"lastindex(xs)","style":{"code":true}},{"type":"text","text":" during lowering (as said above).\nMEaning you can use it just like a number.\n\nLike getting the first 5 elements, or all the elements if there are  less than 5:\n"},{"type":"text","text":"xs[1:min(end, 5)]","style":{"code":true}},{"type":"text","text":"\n\nOr or breaking the data into splits:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"train = data[1:9end÷10]\ntest = data[9end÷10 + 1 : end]"}]}]}],"thread_ts":"1614178278.214200","parent_user_id":"U01C2E6TYEM"},{"client_msg_id":"e434caf5-70e5-42c8-8fe7-a4de4a91715a","type":"message","text":"`end` has historical president  in MATLAB","user":"U6A936746","ts":"1614186558.222600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2Pg2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"end","style":{"code":true}},{"type":"text","text":" has historical president  in MATLAB"}]}]}],"thread_ts":"1614178278.214200","parent_user_id":"U01C2E6TYEM"}]