[{"client_msg_id":"c0f9aea4-8e60-4ada-8358-a9d77b54500a","type":"message","text":"how clever is the compiler with types that are technically not known at compile time but for which the code for a function can be completely inferred?  For example\n```struct TestType{ùíØ}\n    z::ùíØ\n    x::Float64\n    y::Float64\nend\n\nf(t::TestType) = t.x + t.y\ng(t::TestType{&lt;:AbstractFloat}) = t.x + t.z\ng(t::TestType{&lt;:Complex}) = t.x + conj(t.z)```\nis it possible for `f` to be slow if the parameter `t` is not known at compile time because the pointer for `x` and `y` depends on the type of `z` (note I put the `z` first)?  Or does it somehow arrange things in memory such that `f` always has to output exactly the same code?","user":"U9VG1AYSG","ts":"1615831793.230600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hVFrR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"how clever is the compiler with types that are technically not known at compile time but for which the code for a function can be completely inferred?  For example\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct TestType{ùíØ}\n    z::ùíØ\n    x::Float64\n    y::Float64\nend\n\nf(t::TestType) = t.x + t.y\ng(t::TestType{<:AbstractFloat}) = t.x + t.z\ng(t::TestType{<:Complex}) = t.x + conj(t.z)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"is it possible for "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" to be slow if the parameter "},{"type":"text","text":"t","style":{"code":true}},{"type":"text","text":" is not known at compile time because the pointer for "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"y","style":{"code":true}},{"type":"text","text":" depends on the type of "},{"type":"text","text":"z","style":{"code":true}},{"type":"text","text":" (note I put the "},{"type":"text","text":"z","style":{"code":true}},{"type":"text","text":" first)?  Or does it somehow arrange things in memory such that "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" always has to output exactly the same code?"}]}]}],"thread_ts":"1615831793.230600","reply_count":64,"reply_users_count":3,"latest_reply":"1615836643.253600","reply_users":["U9VG1AYSG","UH24GRBLL","U01C3624SGJ"],"is_locked":false,"subscribed":false},{"client_msg_id":"e020d738-999d-407c-8ed8-9c0e65484ce6","type":"message","text":"for the record, I have tried testing this, the LLVM IR indeed looks different depending on the type, but the assembly itself does not seem to depend on the type, so it's pretty inconclusive on how worried I should be about this","user":"U9VG1AYSG","ts":"1615832035.231000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SE4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"for the record, I have tried testing this, the LLVM IR indeed looks different depending on the type, but the assembly itself does not seem to depend on the type, so it's pretty inconclusive on how worried I should be about this"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"69512d91-bb30-4af4-b920-1dd17766e066","type":"message","text":"since it knows the sizes of `x` and `y`, presumably the only thing that would change based on `T` is the offset","user":"UH24GRBLL","ts":"1615832172.231300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"49rb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"since it knows the sizes of "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"y","style":{"code":true}},{"type":"text","text":", presumably the only thing that would change based on "},{"type":"text","text":"T","style":{"code":true}},{"type":"text","text":" is the offset"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"230d3066-c648-49dd-9691-a3c03cf72c5e","type":"message","text":"so you'd have to test it with things you know are of different sizes","user":"UH24GRBLL","ts":"1615832200.231500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"44RqI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so you'd have to test it with things you know are of different sizes"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"495cadc7-7090-44f9-bc5b-45fc4dca04b8","type":"message","text":"right, that's exactly what I'm worried about.  So do we get some sort of latency from waiting for the compiler to figure out what the offset is?","user":"U9VG1AYSG","ts":"1615832206.231700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9P2=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"right, that's exactly what I'm worried about.  So do we get some sort of latency from waiting for the compiler to figure out what the offset is?"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"8c1abeef-fbce-41d0-a826-fb2612228d78","type":"message","text":"not as long as `T` is concrete","user":"UH24GRBLL","ts":"1615832219.231900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"E1nr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not as long as "},{"type":"text","text":"T","style":{"code":true}},{"type":"text","text":" is concrete"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"b780b9c8-81f6-4d25-a290-930e9d233162","type":"message","text":"yeah, I tried it with `ComplexF64` and `Float64`","user":"U9VG1AYSG","ts":"1615832224.232100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gHMv+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, I tried it with "},{"type":"text","text":"ComplexF64","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"Float64","style":{"code":true}}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"1509ccfb-924c-4bd0-84c7-347d7154badf","type":"message","text":"and if it's abstract, it may also be known if those are always represented by pointers","user":"UH24GRBLL","ts":"1615832240.232300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OxZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and if it's abstract, it may also be known if those are always represented by pointers"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"b301c520-e537-4bdc-9336-0e2b56597bfd","type":"message","text":"yeah those are both concrete and isbits, right?","user":"UH24GRBLL","ts":"1615832252.232500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5NrQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah those are both concrete and isbits, right?"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"4cd529cf-de44-4d40-aff9-da0c9a1d5885","type":"message","text":"what if `T` is concrete, but I am e.g. taking objects from a `Vector{TestType}` so that it can't know the type of each element?","user":"U9VG1AYSG","ts":"1615832253.232700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DX5a","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what if "},{"type":"text","text":"T","style":{"code":true}},{"type":"text","text":" is concrete, but I am e.g. taking objects from a "},{"type":"text","text":"Vector{TestType}","style":{"code":true}},{"type":"text","text":" so that it can't know the type of each element?"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"1f88074f-c669-4c57-934b-ef9dd83f17fc","type":"message","text":"yes","user":"U9VG1AYSG","ts":"1615832258.232900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gYQD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"30aeab6e-cc08-41ae-8251-3297a3bd5f24","type":"message","text":"you'll get dynamic dispatch, but the specific `f` will still be specialized","user":"UH24GRBLL","ts":"1615832278.233100","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1615832284.000000"},"blocks":[{"type":"rich_text","block_id":"UB4KC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you'll get dynamic dispatch, but the specific "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" will still be specialized"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"0dfeb61a-d393-47b0-97f1-ad128c2d8d84","type":"message","text":"ugh, so basically that means you always have to worry about type instability even in chunks of code where a priori it would seem it can't possibly affect anything","user":"U9VG1AYSG","ts":"1615832342.233600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HR7L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ugh, so basically that means you always have to worry about type instability even in chunks of code where a priori it would seem it can't possibly affect anything"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"ff352842-1d8f-45ea-921c-3566ff79b865","type":"message","text":"that's kind of disappointing","user":"U9VG1AYSG","ts":"1615832350.233800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3lz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's kind of disappointing"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"213cae22-5481-420f-8e54-acc762e579eb","type":"message","text":"what do you mean?","user":"UH24GRBLL","ts":"1615832357.234000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WeK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what do you mean?"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"8d7e3490-fb4c-4be9-8d78-6de0e7cb4ccd","type":"message","text":"`f` will always be stable","user":"UH24GRBLL","ts":"1615832361.234200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KDuwd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" will always be stable"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"d0cdd9e6-34eb-4507-95a5-b2eba24bf5cf","type":"message","text":"I tried a bit with some weirder things like a matrix or a function and the performance of f didnt change","user":"U01C3624SGJ","ts":"1615832370.234400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ejf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I tried a bit with some weirder things like a matrix or a function and the performance of f didnt change"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"9de8dd96-c105-42f3-b1ad-a65e6fb40261","type":"message","text":"it'll be specialised for each `TestType{T}`","user":"UH24GRBLL","ts":"1615832381.234600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R6T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it'll be specialised for each "},{"type":"text","text":"TestType{T}","style":{"code":true}}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"2d6e019d-76e0-48f1-8a67-b819b5cacbca","type":"message","text":"The lowered code, the LLVM code and the assembly were all equal","user":"U01C3624SGJ","ts":"1615832405.234800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PssD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The lowered code, the LLVM code and the assembly were all equal"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"66a07422-27cf-497a-be5b-a48a4743708d","type":"message","text":"you will get dispatched to each specific `f` dynamically, but you can't avoid that if you only have `Vector{TestType}`","user":"UH24GRBLL","ts":"1615832409.235000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ADw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you will get dispatched to each specific "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" dynamically, but you can't avoid that if you only have "},{"type":"text","text":"Vector{TestType}","style":{"code":true}}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"35af66ba-1f06-4f82-8640-067c7e7fbe62","type":"message","text":"yeah `f` itself is stable, but if you do e.g. `f.(v)` where `v isa Vector{TestType}` the compiler has to some how decide which version of `f` to use on each element, and presumably this must happen at run time","user":"U9VG1AYSG","ts":"1615832420.235200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g7Bc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" itself is stable, but if you do e.g. "},{"type":"text","text":"f.(v)","style":{"code":true}},{"type":"text","text":" where "},{"type":"text","text":"v isa Vector{TestType}","style":{"code":true}},{"type":"text","text":" the compiler has to some how decide which version of "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" to use on each element, and presumably this must happen at run time"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"189cfa23-a184-4976-8ae3-d05c6a658d3a","type":"message","text":"yes? but the same happens if you do that in a loop","user":"UH24GRBLL","ts":"1615832454.235400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"woo=O","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes? but the same happens if you do that in a loop"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"174d39aa-0e65-4861-84a0-18af05744aad","type":"message","text":"the problem is with `v`, not with `f` or the broadcasting","user":"UH24GRBLL","ts":"1615832467.235600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"o0Le","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the problem is with "},{"type":"text","text":"v","style":{"code":true}},{"type":"text","text":", not with "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" or the broadcasting"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"81e3b937-2bb5-4fa9-a553-9a1805f3e6ee","type":"message","text":"yeah, that's what I'm saying is a little disappointing, because presumably it's at least *possible* to compile only one version of `f`.  For example, if I put `z` at the end fo the `struct`, there'd only be one version of `f`.  That's what I'm getting at","user":"U9VG1AYSG","ts":"1615832486.235800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zUME3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, that's what I'm saying is a little disappointing, because presumably it's at least "},{"type":"text","text":"possible","style":{"bold":true}},{"type":"text","text":" to compile only one version of "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":".  For example, if I put "},{"type":"text","text":"z","style":{"code":true}},{"type":"text","text":" at the end fo the "},{"type":"text","text":"struct","style":{"code":true}},{"type":"text","text":", there'd only be one version of "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":".  That's what I'm getting at"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"e03dc2fe-6362-4239-84ed-5405edf40c83","type":"message","text":"so in that case even if `v` had an ambiguous type, at least in principle you wouldn't actually need dynamic dispatch","user":"U9VG1AYSG","ts":"1615832507.236000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jn4u+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so in that case even if "},{"type":"text","text":"v","style":{"code":true}},{"type":"text","text":" had an ambiguous type, at least in principle you wouldn't actually need dynamic dispatch"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"23fcfc0d-3469-42c0-93a8-15638415638e","type":"message","text":"not saying it would work out that way the way the ocmpiler currently works, but it would at least be possible","user":"U9VG1AYSG","ts":"1615832521.236200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Qs+p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not saying it would work out that way the way the ocmpiler currently works, but it would at least be possible"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"12de562d-5212-4cce-bca8-6e38ab25d46b","type":"message","text":"well, there may still be more versions of `f`, but they'll have the exact same code if the order is different","user":"UH24GRBLL","ts":"1615832524.236400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q8M","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well, there may still be more versions of "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":", but they'll have the exact same code if the order is different"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"e4dbac8c-8213-46ed-8790-f45a6a02869c","type":"message","text":"semantically you have to dispatch though","user":"UH24GRBLL","ts":"1615832541.236600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"34acy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"semantically you have to dispatch though"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"c1f6a6b3-6d58-43f4-8ee9-b0bf1122afc5","type":"message","text":"right, that's what I'm saying, it has to do the dispatch even though we can work out that it should always call the same `f`","user":"U9VG1AYSG","ts":"1615832559.236800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yuw8O","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"right, that's what I'm saying, it has to do the dispatch even though we can work out that it should always call the same "},{"type":"text","text":"f","style":{"code":true}}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"a2605d0e-b189-417e-8011-06d455adce1c","type":"message","text":"I don't see a problem with that though","user":"UH24GRBLL","ts":"1615832585.237000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dfjgX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't see a problem with that though"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"bffe560f-8d04-4e82-9705-6f1401523267","type":"message","text":"the problem is that it's doing dynamic dispatch on `f.(v)` when we could have put in by hand to always use the same `f` if we knew ahead of time the addresses by e.g. putting `z` at the end of the struct","user":"U9VG1AYSG","ts":"1615832622.237200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ctd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the problem is that it's doing dynamic dispatch on "},{"type":"text","text":"f.(v)","style":{"code":true}},{"type":"text","text":" when we could have put in by hand to always use the same "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" if we knew ahead of time the addresses by e.g. putting "},{"type":"text","text":"z","style":{"code":true}},{"type":"text","text":" at the end of the struct"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"215d6e1f-1157-49f4-80d3-99b851909f6f","type":"message","text":"you can always put `@nospecialize` on `f`","user":"UH24GRBLL","ts":"1615832637.237400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ICFUZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can always put "},{"type":"text","text":"@nospecialize","style":{"code":true}},{"type":"text","text":" on "},{"type":"text","text":"f","style":{"code":true}}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"2af28768-7f0c-416c-bf09-35d7e8dd8284","type":"message","text":"I'd also actually check whether it dispatches or not - remember, I'm some random guy in a slack channel who may or may not talk out of his ass","user":"UH24GRBLL","ts":"1615832692.237600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"H7u","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'd also actually check whether it dispatches or not - remember, I'm some random guy in a slack channel who may or may not talk out of his ass"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"7561553e-4105-4b8c-96ef-1b977d91cefb","type":"message","text":"lol fair enough","user":"U9VG1AYSG","ts":"1615832702.237800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kaSNd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"lol fair enough"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"9309a1ef-1f3f-492d-8fc2-6f5c12919b2e","type":"message","text":"it'd just fit my mental model is all","user":"UH24GRBLL","ts":"1615832707.238000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4N/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it'd just fit my mental model is all"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"dfe706fb-e824-4be7-9c06-2adc15db71b1","type":"message","text":"yeah, I think you are right; this seems like a problem to be solved.  In this simple case, you could solve it by always moving the parameterized fields to the end and putting something in the compiler that tells it not to dispatch if it doesn't see any fields of an unknown type.   Don't know how generalizable that would be though","user":"U9VG1AYSG","ts":"1615832779.238200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1nU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, I think you are right; this seems like a problem to be solved.  In this simple case, you could solve it by always moving the parameterized fields to the end and putting something in the compiler that tells it not to dispatch if it doesn't see any fields of an unknown type.   Don't know how generalizable that would be though"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"13d0327d-aae7-4c97-ad48-fd9cb5c4d473","type":"message","text":"I don't know","user":"UH24GRBLL","ts":"1615833016.238500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mJd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't know"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"d0180860-f4ff-4b77-8a40-e273dec72216","type":"message","text":"I personally don't have a problem with that dispatch if it's unavoidable","user":"UH24GRBLL","ts":"1615833029.238700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+s0J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I personally don't have a problem with that dispatch if it's unavoidable"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"66132ec9-f773-4de1-9f9e-8d452e2f54e6","type":"message","text":"I'm more concerned with having multiple methods with the exact same code cached","user":"UH24GRBLL","ts":"1615833041.238900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BHw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm more concerned with having multiple methods with the exact same code cached"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"3f8b9f75-3e67-498a-a416-93e74fe830b2","type":"message","text":"but it *is* avoidable, at least in principle, that's my point","user":"U9VG1AYSG","ts":"1615833051.239100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=RPG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but it "},{"type":"text","text":"is","style":{"bold":true}},{"type":"text","text":" avoidable, at least in principle, that's my point"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"6a0a2df4-5c13-4ab5-9b78-dbf048572652","type":"message","text":"from the type systems POV, it really isn't","user":"UH24GRBLL","ts":"1615833062.239300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xLW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"from the type systems POV, it really isn't"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"faba0335-0a8a-4383-977d-e8d6c0230ccc","type":"message","text":"we have nominal, not structural typing in julia","user":"UH24GRBLL","ts":"1615833071.239500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"N5gHt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we have nominal, not structural typing in julia"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"0d814968-cac4-45d2-9899-fe9a7aeeed59","type":"message","text":"not dispatching there is a possible optimization, yes, but that can only be done in very specific instances (which I doubt are being considered right now)","user":"UH24GRBLL","ts":"1615833134.239700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"T+a4h","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not dispatching there is a possible optimization, yes, but that can only be done in very specific instances (which I doubt are being considered right now)"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"09bf5d55-9bfa-4b54-a4cd-b91e35ff1014","type":"message","text":"there's bigger fish to fry at the moment","user":"UH24GRBLL","ts":"1615833146.239900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rMxtR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there's bigger fish to fry at the moment"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"60e79b13-95ec-4bcd-b2bc-cad5f5ff14cf","type":"message","text":"multiple dispatch in a language with structural typing, now _THAT_ would be interesting","user":"UH24GRBLL","ts":"1615833974.240200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d/7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"multiple dispatch in a language with structural typing, now "},{"type":"text","text":"THAT","style":{"italic":true}},{"type":"text","text":" would be interesting"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"7ff8f734-fa50-48a2-9eb5-28d7630e3710","type":"message","text":"yeah, what you are saying may very well imply that not of what I'm saying is generalizable, but this is certainly an example of a special case that *can* be fixed, and it is likely to be a fairly common case (i.e. types with a subset of fully determined fields and the subset of functions wihch only reference those fields)","user":"U9VG1AYSG","ts":"1615834649.249200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IPUkF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, what you are saying may very well imply that not of what I'm saying is generalizable, but this is certainly an example of a special case that "},{"type":"text","text":"can","style":{"bold":true}},{"type":"text","text":" be fixed, and it is likely to be a fairly common case (i.e. types with a subset of fully determined fields and the subset of functions wihch only reference those fields)"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"93f9036f-98eb-47e9-b57e-03e7ee2ba073","type":"message","text":"Doing a couple of tests, the thing about using a struct with all predefined types or a vector of structs with equal types between themselves is that they are probably stored in a contiguous way in memory allowing for faster access and specially SIMD","user":"U01C3624SGJ","ts":"1615834655.249400","team":"T68168MUP","edited":{"user":"U01C3624SGJ","ts":"1615834668.000000"},"blocks":[{"type":"rich_text","block_id":"5wbG1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Doing a couple of tests, the thing about using a struct with all predefined types or a vector of structs with equal types between themselves is that they are probably stored in a contiguous way in memory allowing for faster access and specially SIMD"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"9b0bd315-8ce5-4700-9bf6-5bace2b428ad","type":"message","text":"yeah it might be the case that all examples where this kind of dispatch is slow enough to matter are not even fixable with such a simple method anyway","user":"U9VG1AYSG","ts":"1615834703.249700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nlWI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah it might be the case that all examples where this kind of dispatch is slow enough to matter are not even fixable with such a simple method anyway"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG","reactions":[{"name":"100","users":["UH24GRBLL"],"count":1}]},{"client_msg_id":"4ad57f28-a778-4916-b588-79760be45466","type":"message","text":"yes - the core of the problem is that as long as you're isbits and homogenous, you're golden","user":"UH24GRBLL","ts":"1615834769.250000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Gg+2S","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes - the core of the problem is that as long as you're isbits and homogenous, you're golden"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"c4337546-032b-48b6-a16e-79981b72ffc9","type":"message","text":"if you get into heterogenous territory, even if you're all concrete with a `Union` or something, you'll probably miss out on SIMD stuff","user":"UH24GRBLL","ts":"1615834802.250200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ae+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you get into heterogenous territory, even if you're all concrete with a "},{"type":"text","text":"Union","style":{"code":true}},{"type":"text","text":" or something, you'll probably miss out on SIMD stuff"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"b798665f-7808-4c36-9f99-a773a2a6378c","type":"message","text":"that's not to say that there are no optimizations to be done here - the small union optimization was an important step after all","user":"UH24GRBLL","ts":"1615834845.250400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uvu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's not to say that there are no optimizations to be done here - the small union optimization was an important step after all"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"9f3ea301-0951-464c-9908-bf1169284e37","type":"message","text":"of course \"slow enough to matter\" is a relative concept.  I've definitely had a number of cases where I wanted some abstractly typed array with some set of functions like in this example which shouldn't really need dispatch for the types in the array.  If you have a very large array the factor of 2 or 3 you'd get out of avoiding this might matter","user":"U9VG1AYSG","ts":"1615834860.250600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QfDN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"of course \"slow enough to matter\" is a relative concept.  I've definitely had a number of cases where I wanted some abstractly typed array with some set of functions like in this example which shouldn't really need dispatch for the types in the array.  If you have a very large array the factor of 2 or 3 you'd get out of avoiding this might matter"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"fbbb91ca-97fa-4a34-b303-4d3262942241","type":"message","text":"The problem isnt even being isbits or not. Strings arent isbits  , but you know how big a pointer to a string is, so you can determine the offsets to get to the next field. The issue is having different kinds of types which means every object needs  its own pointer","user":"U01C3624SGJ","ts":"1615835206.250800","team":"T68168MUP","edited":{"user":"U01C3624SGJ","ts":"1615835221.000000"},"blocks":[{"type":"rich_text","block_id":"nBMx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The problem isnt even being isbits or not. Strings arent isbits  , but you know how big a pointer to a string is, so you can determine the offsets to get to the next field. The issue is having different kinds of types which means every object needs  its own pointer"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"7ea8def4-ca4d-4904-9833-38a2171dad2d","type":"message","text":"I mentioned isbits because that's required to wander onto the stack at all, assuming immutability for maximum performance","user":"UH24GRBLL","ts":"1615835402.251100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NPIA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mentioned isbits because that's required to wander onto the stack at all, assuming immutability for maximum performance"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"eb43abfb-dc41-4389-aa11-3e1868011b42","type":"message","text":"I reckon that in this case what happens is that the float values stay on the stack with a pointer to a heap value","user":"U01C3624SGJ","ts":"1615835517.251500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Yyk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I reckon that in this case what happens is that the float values stay on the stack with a pointer to a heap value"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"3bf39501-c04e-43f7-99ba-ec0d33d809c3","type":"message","text":"that may depend on `T` :thinking_face:","user":"UH24GRBLL","ts":"1615835551.251700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mJ1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that may depend on "},{"type":"text","text":"T","style":{"code":true}},{"type":"text","text":" "},{"type":"emoji","name":"thinking_face"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"7e9b24c8-09d8-44ff-9f3c-a1476de04b0a","type":"message","text":"in any case, it's probably ultimately the heterogeneity of multiple different `T` (with different sizes) that lead to not being able to vectorize","user":"UH24GRBLL","ts":"1615835616.251900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MR3j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in any case, it's probably ultimately the heterogeneity of multiple different "},{"type":"text","text":"T","style":{"code":true}},{"type":"text","text":" (with different sizes) that lead to not being able to vectorize"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"6a426ca9-ae9b-4bf4-a53d-1c1e98ee3e7b","type":"message","text":"I wouldn't even be sure to say that same sized `T` would vectorize, but it would be interesting to try","user":"UH24GRBLL","ts":"1615835648.252100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HvEM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I wouldn't even be sure to say that same sized "},{"type":"text","text":"T","style":{"code":true}},{"type":"text","text":" would vectorize, but it would be interesting to try"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"7d8b96b5-90c6-459a-8a76-e2a69ce6e284","type":"message","text":"While testing it only vectorizes when all Ts are equal","user":"U01C3624SGJ","ts":"1615835837.252300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ViMB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"While testing it only vectorizes when all Ts are equal"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"7832b6ef-e274-4b67-b998-650b718336d3","type":"message","text":"sounds like a good issue then","user":"UH24GRBLL","ts":"1615835998.252500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oTPuO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"sounds like a good issue then"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"bb23b002-3426-4cb2-a3f9-733fd4982f7f","type":"message","text":"\"Make Same sized `T` vectorize (again)\"","user":"UH24GRBLL","ts":"1615836012.252700","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1615836024.000000"},"blocks":[{"type":"rich_text","block_id":"vWb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"\"Make Same sized "},{"type":"text","text":"T","style":{"code":true}},{"type":"text","text":" vectorize (again)\""}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"fb7dc1e4-b434-4557-97a3-d937db8a1b06","type":"message","text":"don't expect a solution though","user":"UH24GRBLL","ts":"1615836046.253000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p1K6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"don't expect a solution though"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"aa1a5ae5-36ed-4818-b18b-29db1a5f194c","type":"message","text":"I will have to try some more to see if something does vectorize or not","user":"U01C3624SGJ","ts":"1615836077.253200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Obo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I will have to try some more to see if something does vectorize or not"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"4b2eead2-f2a4-465e-82ee-7039e2693185","type":"message","text":"seems like a fun way to spend the evening tbh","user":"U01C3624SGJ","ts":"1615836087.253400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7Fu=3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"seems like a fun way to spend the evening tbh"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"8373017b-2d3c-49ed-b92f-06aa2faed018","type":"message","text":"my gut tells me it won't","user":"UH24GRBLL","ts":"1615836643.253600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vFljh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"my gut tells me it won't"}]}]}],"thread_ts":"1615831793.230600","parent_user_id":"U9VG1AYSG"}]