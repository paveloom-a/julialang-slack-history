[{"client_msg_id":"2b69c4a8-0099-4a67-b3e7-47dec6f80963","type":"message","text":"<https://youtu.be/0lXUBVipXa8> I found this old talk that was just recently uploaded to YouTube from creator of Scala (Martin Odersky) and I found it relatively easy to follow give the similarities between Julia and Scala (at least for me a non-language designer :slightly_smiling_face: ) . On <https://youtu.be/0lXUBVipXa8?t=700|11:43> he showed a graph and I'm not quite sure where Julia lies, my guess is that is there close to Haskell. Also, on <https://youtu.be/0lXUBVipXa8?t=1585|26:25> he also shows a table and I think that I can make a similar map with Julia correct me if I'm wrong (cont. in thread)","user":"U013V2CFZAN","ts":"1614511979.320500","team":"T68168MUP","edited":{"user":"U013V2CFZAN","ts":"1614512379.000000"},"attachments":[{"service_name":"YouTube","service_url":"https://www.youtube.com/","title":"\"The Trouble With Types\" by Martin Odersky","title_link":"https://youtu.be/0lXUBVipXa8","author_name":"Strange Loop Conference","author_link":"https://www.youtube.com/channel/UC_QIfHvN9auy2CoOdSfMWDw","thumb_url":"https://i.ytimg.com/vi/0lXUBVipXa8/hqdefault.jpg","thumb_width":480,"thumb_height":360,"fallback":"YouTube Video: \"The Trouble With Types\" by Martin Odersky","video_html":"<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/0lXUBVipXa8?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","video_html_width":400,"video_html_height":225,"from_url":"https://youtu.be/0lXUBVipXa8","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png","id":1,"original_url":"https://youtu.be/0lXUBVipXa8"}],"blocks":[{"type":"rich_text","block_id":"t3js","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://youtu.be/0lXUBVipXa8"},{"type":"text","text":" I found this old talk that was just recently uploaded to YouTube from creator of Scala (Martin Odersky) and I found it relatively easy to follow give the similarities between Julia and Scala (at least for me a non-language designer "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":" ) . On "},{"type":"link","url":"https://youtu.be/0lXUBVipXa8?t=700","text":"11:43"},{"type":"text","text":" he showed a graph and I'm not quite sure where Julia lies, my guess is that is there close to Haskell. Also, on "},{"type":"link","url":"https://youtu.be/0lXUBVipXa8?t=1585","text":"26:25"},{"type":"text","text":" he also shows a table and I think that I can make a similar map with Julia correct me if I'm wrong (cont. in thread)"}]}]}],"thread_ts":"1614511979.320500","reply_count":31,"reply_users_count":4,"latest_reply":"1614537437.328500","reply_users":["U013V2CFZAN","U019K6Q9N15","U67BJLYCS","U018Z5UTBPH"],"subscribed":false,"reactions":[{"name":"+1","users":["U8T0YV7QC"],"count":1}]},{"client_msg_id":"f579955c-0c57-4cde-bcef-1c83de92c765","type":"message","text":"• Named Type - `DataType`\n• Compound Type - `Struct` \n• Refined Type - ???\n• Parametrized - e.g. `Vector{String}`\n• Existential Type - e.g. `Vector{T} where T}`\n• Higher-Kinded - e.g. `Vector` ?\nCould someone help me map these out?","user":"U013V2CFZAN","ts":"1614512028.320700","team":"T68168MUP","edited":{"user":"U013V2CFZAN","ts":"1614512476.000000"},"blocks":[{"type":"rich_text","block_id":"a=neo","elements":[{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Named Type - "},{"type":"text","text":"DataType","style":{"code":true}}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Compound Type - "},{"type":"text","text":"Struct","style":{"code":true}},{"type":"text","text":" "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Refined Type - ???"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Parametrized - e.g. "},{"type":"text","text":"Vector{String}","style":{"code":true}}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Existential Type - e.g. "},{"type":"text","text":"Vector{T} where T}","style":{"code":true}}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Higher-Kinded - e.g. "},{"type":"text","text":"Vector","style":{"code":true}},{"type":"text","text":" ?"}]}],"style":"bullet","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"\nCould someone help me map these out?"}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"c2295f13-c0d0-4b83-8452-3fd699b4bf42","type":"message","text":"Your mapping seems good to me. I had to look up what a refined type was-- it seems like an adhoc implementation in Julia is any type with a suitably restricted set of constructors, all of which are guaranteed to call some fixed predicate...\n\nI wouldn't put Julia up near Haskell, Scala, OCaml, but my trepidation is kind of vague... It feels like the type systems in those languages are *substantially stronger-- or perhaps they're just used much more prominently in each of those languages' vernacular.","user":"U019K6Q9N15","ts":"1614515156.321700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HJjC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Your mapping seems good to me. I had to look up what a refined type was-- it seems like an adhoc implementation in Julia is any type with a suitably restricted set of constructors, all of which are guaranteed to call some fixed predicate...\n\nI wouldn't put Julia up near Haskell, Scala, OCaml, but my trepidation is kind of vague... It feels like the type systems in those languages are *substantially stronger-- or perhaps they're just used much more prominently in each of those languages' vernacular."}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"2458dd5f-edfd-41df-b1f9-79301e219527","type":"message","text":"sure, I wonder where Julia lies on that graph. Don't know where to place it and my suspicion that it was on that region of the graph, perhaps more to the left on Eiffel's direction but no yet on that quadrant?","user":"U013V2CFZAN","ts":"1614516331.321900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"m5p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"sure, I wonder where Julia lies on that graph. Don't know where to place it and my suspicion that it was on that region of the graph, perhaps more to the left on Eiffel's direction but no yet on that quadrant?"}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"79c0c1c5-bc80-426d-89d2-c8925fdb1e4c","type":"message","text":"The trouble is that the graph is called \"static type systems\"","user":"U67BJLYCS","ts":"1614517492.322100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"B+N7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The trouble is that the graph is called \"static type systems\""}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"3486ff09-6161-4c6f-92ec-368aea7807c7","type":"message","text":"Which means Julia isn't on the :chart_with_upwards_trend:","user":"U67BJLYCS","ts":"1614517512.322300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aZ3q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Which means Julia isn't on the "},{"type":"emoji","name":"chart_with_upwards_trend"}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"1d6b8d37-9517-4ab1-ba01-ccde4c12b7e7","type":"message","text":"true, that was my follow up question ... Julia is not strictly in this graph, but it is also not strictly a dynamically typed language in the sense python and Ruby, where everything is basically an `Any` type and has associated type-like attributes.","user":"U013V2CFZAN","ts":"1614517687.322500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dGeZj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"true, that was my follow up question ... Julia is not strictly in this graph, but it is also not strictly a dynamically typed language in the sense python and Ruby, where everything is basically an "},{"type":"text","text":"Any","style":{"code":true}},{"type":"text","text":" type and has associated type-like attributes."}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"4a7233e3-bc83-4ee3-b0f6-7f54c9d48af3","type":"message","text":"Ah but that is where the trouble is. A valid Julia program can only have `Any` as a type","user":"U67BJLYCS","ts":"1614518591.322700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+ud","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah but that is where the trouble is. A valid Julia program can only have "},{"type":"text","text":"Any ","style":{"code":true}},{"type":"text","text":"as a type"}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"1ae74add-2a86-4b84-841d-05996cd9034c","type":"message","text":"We do have a richer type language than Python, but the differentiating characteristic is  dynamic vs static","user":"U67BJLYCS","ts":"1614518661.322900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KA/K","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We do have a richer type language than Python, but the differentiating characteristic is  dynamic vs static"}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"bde68292-ca93-4622-a0ae-5296c9491fa5","type":"message","text":"because you cannot guarantee type inferrability, right?","user":"U013V2CFZAN","ts":"1614518672.323100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=soG9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"because you cannot guarantee type inferrability, right?"}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"cf34dede-fa81-420b-965d-d80c718ecf78","type":"message","text":"More precisely because inferring types is an optimization","user":"U67BJLYCS","ts":"1614518724.323300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"02N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"More precisely because inferring types is an optimization"}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"b12c520b-7bd5-4598-85c3-db1c8cd66694","type":"message","text":"ou could remove type inference from the language implementation and everything should run","user":"U67BJLYCS","ts":"1614518849.323500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0X9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ou could remove type inference from the language implementation and everything should run"}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"ff73cea7-172d-4533-89cc-5206d9fd6602","type":"message","text":"On the language semantics Julia uses types for method selection i.e. dispatch","user":"U67BJLYCS","ts":"1614518888.323700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=dvQF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"On the language semantics Julia uses types for method selection i.e. dispatch"}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"e48c5935-5f56-4373-a3bc-15c20e09b04b","type":"message","text":"hmm... true, can we do the opposite and disallow `Any`? perhaps not right now, but it seems that something that should be possible.","user":"U013V2CFZAN","ts":"1614519014.323900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CYtR3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmm... true, can we do the opposite and disallow "},{"type":"text","text":"Any","style":{"code":true}},{"type":"text","text":"? perhaps not right now, but it seems that something that should be possible."}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"cd998208-b782-46f1-9a5f-9a775d7c3c3f","type":"message","text":"But that is like Python were you use the types to specify which methods an object has","user":"U67BJLYCS","ts":"1614519045.324100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PT=eQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But that is like Python were you use the types to specify which methods an object has"}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"bd57e6cc-e723-42d5-bd81-431a246182d3","type":"message","text":"Ah but `f(x) =` is syntax sugar for `f(x::Any)=`","user":"U67BJLYCS","ts":"1614519096.324300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"B4tjE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah but "},{"type":"text","text":"f(x) =","style":{"code":true}},{"type":"text","text":" is syntax sugar for "},{"type":"text","text":"f(x::Any)=","style":{"code":true}}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"414cc44f-e044-40b9-9906-5306c0034bb3","type":"message","text":"And giving that up would change the language quite a bit","user":"U67BJLYCS","ts":"1614519118.324500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Oou","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And giving that up would change the language quite a bit"}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"52b41271-1b8d-45ba-988f-64c6acf64f50","type":"message","text":"So long story short. Julia is a dynamic language at heart, and that fundamentally alters what using a type system means. Due to clever language design we can use the type system to refine dynamic Julia programs to static programs (I like to call that discover static subparts), but even when we do that we must adher to the dynamic semantics of the language. This is why method redefinition and invalidation was such a big topic #265","user":"U67BJLYCS","ts":"1614519322.324700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DeN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So long story short. Julia is a dynamic language at heart, and that fundamentally alters what using a type system means. Due to clever language design we can use the type system to refine dynamic Julia programs to static programs (I like to call that discover static subparts), but even when we do that we must adher to the dynamic semantics of the language. This is why method redefinition and invalidation was such a big topic #265"}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"cceacbb4-ca84-4b26-9b79-9178a6270470","type":"message","text":"When people (PL folks in particular) talk about type systems one has to be careful from which school of thought they are coming. When I talk to my colleagues I emphasize that Julia is using abstract interpretation to derive types, and multiple dispatch","user":"U67BJLYCS","ts":"1614519463.324900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"62=G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"When people (PL folks in particular) talk about type systems one has to be careful from which school of thought they are coming. When I talk to my colleagues I emphasize that Julia is using abstract interpretation to derive types, and multiple dispatch"}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"276b158d-73e2-4de9-b981-a06c8889ad76","type":"message","text":"I try to not use the words type system since that is overloaded with meaning","user":"U67BJLYCS","ts":"1614519486.325100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ydwUa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I try to not use the words type system since that is overloaded with meaning"}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"e4151299-ecef-4e04-85cb-6e2a24bf2691","type":"message","text":"well, I am no PL folk. But as I understand, `f(x) = x*x` is generic, however when I run `f(::Float64)` and `f(::Int)` julia generates 2 internal versions of the same function. I could restrict  `f(::Real)` and once I am done _playing_ with my functions I could make a  _snapshot_ that disallows `Any` and only keep the statically generated versions. This could be very useful for deployment.","user":"U013V2CFZAN","ts":"1614519568.325300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dDQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well, I am no PL folk. But as I understand, "},{"type":"text","text":"f(x) = x*x","style":{"code":true}},{"type":"text","text":" is generic, however when I run "},{"type":"text","text":"f(::Float64)","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"f(::Int)","style":{"code":true}},{"type":"text","text":" julia generates 2 internal versions of the same function. I could restrict  "},{"type":"text","text":"f(::Real)","style":{"code":true}},{"type":"text","text":" and once I am done "},{"type":"text","text":"playing ","style":{"italic":true}},{"type":"text","text":"with my functions I could make a  "},{"type":"text","text":"snapshot","style":{"italic":true}},{"type":"text","text":" that disallows "},{"type":"text","text":"Any","style":{"code":true}},{"type":"text","text":" and only keep the statically generated versions. This could be very useful for deployment."}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"cf9148bb-ab96-47c0-a5f9-1a00f5304baf","type":"message","text":"and in my limited view ... that is sort of indistinguishable for me from a static typed language.","user":"U013V2CFZAN","ts":"1614519616.325500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ei6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and in my limited view ... that is sort of indistinguishable for me from a static typed language."}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"3a77475b-ffd0-43a4-bd83-6db82ee70e9c","type":"message","text":"Well the whole discussion started with a characterisation of the Julia as a language so I put my PL hat on","user":"U67BJLYCS","ts":"1614519825.325700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"K/zZI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well the whole discussion started with a characterisation of the Julia as a language so I put my PL hat on"}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN","reactions":[{"name":"+1","users":["U013V2CFZAN"],"count":1}]},{"client_msg_id":"973ae300-5d1c-4499-b396-5b92cf648eec","type":"message","text":"hahaha, good point!","user":"U013V2CFZAN","ts":"1614519844.325900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4gb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hahaha, good point!"}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"d00f7d83-6e9a-4013-b9f8-1d029f61d75f","type":"message","text":"And system images are such snapshots","user":"U67BJLYCS","ts":"1614519908.326200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Sf5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And system images are such snapshots"}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"f1a81a3a-a21e-412a-b053-e161d50a9a82","type":"message","text":"And JET.jl is a static type checker","user":"U67BJLYCS","ts":"1614520010.326400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cgP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And JET.jl is a static type checker"}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN","reactions":[{"name":"+1","users":["U013V2CFZAN","U011V2YN59N"],"count":2}]},{"client_msg_id":"bfd25db0-316d-4680-8e43-d0392d12f3ec","type":"message","text":"somehow is have a cognitive dissonance because I understand that Julia is a dynamically typed language. On the other hand it feels like a statically typed language and I have a hard time putting it in the same category as python and the likes because the way it achieves this _dynamism_ is fundamentally different.","user":"U013V2CFZAN","ts":"1614520247.326600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nD47v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"somehow is have a cognitive dissonance because I understand that Julia is a dynamically typed language. On the other hand it feels like a statically typed language and I have a hard time putting it in the same category as python and the likes because the way it achieves this "},{"type":"text","text":"dynamism","style":{"italic":true}},{"type":"text","text":" is fundamentally different."}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"9cfd633f-dbbe-450a-aabe-da02a4cebb35","type":"message","text":"I have to bang my head occasionally against a table to remember that Julia is dynamic, I tend to forget it as well and then I start asking hard things from the compiler and it comes back with `Any`","user":"U67BJLYCS","ts":"1614520333.326800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UOZDt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have to bang my head occasionally against a table to remember that Julia is dynamic, I tend to forget it as well and then I start asking hard things from the compiler and it comes back with `Any`"}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"6c227333-12b7-4aaa-acd2-de1b09fc42f3","type":"message","text":"I think the big difference between Julia and Python is that we train people to cooperatively program with type inference","user":"U67BJLYCS","ts":"1614520383.327000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"X8os","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think the big difference between Julia and Python is that we train people to cooperatively program with type inference"}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"7bf4e727-4db4-414a-8aff-16ee4306e475","type":"message","text":"So you think about types like in a static language","user":"U67BJLYCS","ts":"1614520405.327200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NQCGu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So you think about types like in a static language"}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"0325ea9a-cc29-4186-b423-2f00a173f483","type":"message","text":"Well ... that's the thing, it is so close of being a static language that it feels that perhaps we could almost have a _switch_ to enforce it","user":"U013V2CFZAN","ts":"1614520975.327500","team":"T68168MUP","edited":{"user":"U013V2CFZAN","ts":"1614521426.000000"},"blocks":[{"type":"rich_text","block_id":"9m4Es","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well ... that's the thing, it is so close of being a static language that it feels that perhaps we could almost have a "},{"type":"text","text":"switch","style":{"italic":true}},{"type":"text","text":" to enforce it"}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"9251eb11-c0e2-463e-9b61-417f1e70f9ee","type":"message","text":"I think it is a bit farther away than you think.  There are open questions how to combine static types with multi methods, ex. if you read the  Fortress papers (a static typed language with multi-methods) they tried and kind of failed (falling back to dynamic runtime dispatch as a workaround in specific cases).","user":"U018Z5UTBPH","ts":"1614537437.328500","team":"T68168MUP","edited":{"user":"U018Z5UTBPH","ts":"1614537559.000000"},"blocks":[{"type":"rich_text","block_id":"YlU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think it is a bit farther away than you think.  There are open questions how to combine static types with multi methods, ex. if you read the  Fortress papers (a static typed language with multi-methods) they tried and kind of failed (falling back to dynamic runtime dispatch as a workaround in specific cases)."}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN","reactions":[{"name":"+1","users":["U67BJLYCS","U6795JH6H"],"count":2}]}]