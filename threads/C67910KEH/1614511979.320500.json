[{"client_msg_id":"2b69c4a8-0099-4a67-b3e7-47dec6f80963","type":"message","text":"<https://youtu.be/0lXUBVipXa8> I found this old talk that was just recently uploaded to YouTube from creator of Scala (Martin Odersky) and I found it relatively easy to follow give the similarities between Julia and Scala (at least for me a non-language designer :slightly_smiling_face: ) . On <https://youtu.be/0lXUBVipXa8?t=700|11:43> he showed a graph and I'm not quite sure where Julia lies, my guess is that is there close to Haskell. Also, on <https://youtu.be/0lXUBVipXa8?t=1585|26:25> he also shows a table and I think that I can make a similar map with Julia correct me if I'm wrong (cont. in thread)","user":"U013V2CFZAN","ts":"1614511979.320500","team":"T68168MUP","edited":{"user":"U013V2CFZAN","ts":"1614512379.000000"},"attachments":[{"service_name":"YouTube","service_url":"https://www.youtube.com/","title":"\"The Trouble With Types\" by Martin Odersky","title_link":"https://youtu.be/0lXUBVipXa8","author_name":"Strange Loop Conference","author_link":"https://www.youtube.com/channel/UC_QIfHvN9auy2CoOdSfMWDw","thumb_url":"https://i.ytimg.com/vi/0lXUBVipXa8/hqdefault.jpg","thumb_width":480,"thumb_height":360,"fallback":"YouTube Video: \"The Trouble With Types\" by Martin Odersky","video_html":"<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/0lXUBVipXa8?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","video_html_width":400,"video_html_height":225,"from_url":"https://youtu.be/0lXUBVipXa8","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png","id":1,"original_url":"https://youtu.be/0lXUBVipXa8"}],"blocks":[{"type":"rich_text","block_id":"t3js","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://youtu.be/0lXUBVipXa8"},{"type":"text","text":" I found this old talk that was just recently uploaded to YouTube from creator of Scala (Martin Odersky) and I found it relatively easy to follow give the similarities between Julia and Scala (at least for me a non-language designer "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":" ) . On "},{"type":"link","url":"https://youtu.be/0lXUBVipXa8?t=700","text":"11:43"},{"type":"text","text":" he showed a graph and I'm not quite sure where Julia lies, my guess is that is there close to Haskell. Also, on "},{"type":"link","url":"https://youtu.be/0lXUBVipXa8?t=1585","text":"26:25"},{"type":"text","text":" he also shows a table and I think that I can make a similar map with Julia correct me if I'm wrong (cont. in thread)"}]}]}],"thread_ts":"1614511979.320500","reply_count":6,"reply_users_count":3,"latest_reply":"1614517687.322500","reply_users":["U013V2CFZAN","U019K6Q9N15","U67BJLYCS"],"subscribed":false},{"client_msg_id":"f579955c-0c57-4cde-bcef-1c83de92c765","type":"message","text":"• Named Type - `DataType`\n• Compound Type - `Struct` \n• Refined Type - ???\n• Parametrized - e.g. `Vector{String}`\n• Existential Type - e.g. `Vector{T} where T}`\n• Higher-Kinded - e.g. `Vector` ?\nCould someone help me map these out?","user":"U013V2CFZAN","ts":"1614512028.320700","team":"T68168MUP","edited":{"user":"U013V2CFZAN","ts":"1614512476.000000"},"blocks":[{"type":"rich_text","block_id":"a=neo","elements":[{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Named Type - "},{"type":"text","text":"DataType","style":{"code":true}}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Compound Type - "},{"type":"text","text":"Struct","style":{"code":true}},{"type":"text","text":" "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Refined Type - ???"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Parametrized - e.g. "},{"type":"text","text":"Vector{String}","style":{"code":true}}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Existential Type - e.g. "},{"type":"text","text":"Vector{T} where T}","style":{"code":true}}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Higher-Kinded - e.g. "},{"type":"text","text":"Vector","style":{"code":true}},{"type":"text","text":" ?"}]}],"style":"bullet","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"\nCould someone help me map these out?"}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"c2295f13-c0d0-4b83-8452-3fd699b4bf42","type":"message","text":"Your mapping seems good to me. I had to look up what a refined type was-- it seems like an adhoc implementation in Julia is any type with a suitably restricted set of constructors, all of which are guaranteed to call some fixed predicate...\n\nI wouldn't put Julia up near Haskell, Scala, OCaml, but my trepidation is kind of vague... It feels like the type systems in those languages are *substantially stronger-- or perhaps they're just used much more prominently in each of those languages' vernacular.","user":"U019K6Q9N15","ts":"1614515156.321700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HJjC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Your mapping seems good to me. I had to look up what a refined type was-- it seems like an adhoc implementation in Julia is any type with a suitably restricted set of constructors, all of which are guaranteed to call some fixed predicate...\n\nI wouldn't put Julia up near Haskell, Scala, OCaml, but my trepidation is kind of vague... It feels like the type systems in those languages are *substantially stronger-- or perhaps they're just used much more prominently in each of those languages' vernacular."}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"2458dd5f-edfd-41df-b1f9-79301e219527","type":"message","text":"sure, I wonder where Julia lies on that graph. Don't know where to place it and my suspicion that it was on that region of the graph, perhaps more to the left on Eiffel's direction but no yet on that quadrant?","user":"U013V2CFZAN","ts":"1614516331.321900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"m5p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"sure, I wonder where Julia lies on that graph. Don't know where to place it and my suspicion that it was on that region of the graph, perhaps more to the left on Eiffel's direction but no yet on that quadrant?"}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"79c0c1c5-bc80-426d-89d2-c8925fdb1e4c","type":"message","text":"The trouble is that the graph is called \"static type systems\"","user":"U67BJLYCS","ts":"1614517492.322100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"B+N7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The trouble is that the graph is called \"static type systems\""}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"3486ff09-6161-4c6f-92ec-368aea7807c7","type":"message","text":"Which means Julia isn't on the :chart_with_upwards_trend:","user":"U67BJLYCS","ts":"1614517512.322300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aZ3q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Which means Julia isn't on the "},{"type":"emoji","name":"chart_with_upwards_trend"}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"1d6b8d37-9517-4ab1-ba01-ccde4c12b7e7","type":"message","text":"true, that was my follow up question ... Julia is not strictly in this graph, but it is also not strictly a dynamically typed language in the sense python and Ruby, where everything is basically an `Any` type and has associated type-like attributes.","user":"U013V2CFZAN","ts":"1614517687.322500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dGeZj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"true, that was my follow up question ... Julia is not strictly in this graph, but it is also not strictly a dynamically typed language in the sense python and Ruby, where everything is basically an "},{"type":"text","text":"Any","style":{"code":true}},{"type":"text","text":" type and has associated type-like attributes."}]}]}],"thread_ts":"1614511979.320500","parent_user_id":"U013V2CFZAN"}]