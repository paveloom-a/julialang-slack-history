[{"client_msg_id":"cfeb075f-78c7-4716-8fba-ae2ec46ae250","type":"message","text":"The following code segment causes julia to eat up more and more memory over time (v1.5.3)\n```makesimpletype(x::Dict{T,T}) where {T&lt;:Integer} = \n    Array{T}(vcat([[child parent] for (child, parent) ∈ x]...))\n\n\nd = Dict( n =&gt; n for n=1:1000000)\n\nfor n = 1000000 .+(1:100)\n    d[n] = n\n    mat = makesimpletype(d)\n    GC.gc()\n    println(\"$(round(Sys.maxrss()/2^20,digits=2)) MiB, \", size(mat))\nend```\nCan anyone reproduce / explain? (I'm aware that the above function is far from optimal)","user":"U9769MVA7","ts":"1612172510.438000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"da07","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The following code segment causes julia to eat up more and more memory over time (v1.5.3)\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"makesimpletype(x::Dict{T,T}) where {T<:Integer} = \n    Array{T}(vcat([[child parent] for (child, parent) ∈ x]...))\n\n\nd = Dict( n => n for n=1:1000000)\n\nfor n = 1000000 .+(1:100)\n    d[n] = n\n    mat = makesimpletype(d)\n    GC.gc()\n    println(\"$(round(Sys.maxrss()/2^20,digits=2)) MiB, \", size(mat))\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Can anyone reproduce / explain? (I'm aware that the above function is far from optimal)"}]}]}],"thread_ts":"1612172510.438000","reply_count":39,"reply_users_count":4,"latest_reply":"1612195639.473700","reply_users":["UDB26738Q","U9769MVA7","UH24GRBLL","U6795JH6H"],"subscribed":false},{"client_msg_id":"be8a19a6-05fd-4ca9-82fe-1941a2347308","type":"message","text":"what about\n```julia&gt; function makesimpletype(d::Dict{T}) where T\n           n = length(d)\n           m = Matrix{T}(undef, n, 2)\n           for (i, (k, v)) in enumerate(d)\n               m[i, 1] = k\n               m[i, 2] = v\n           end\n           return m\n       end\nmakesimpletype (generic function with 1 method)```\nfor the definition of your function?  using comprehension there is _very_ inefficient","user":"UDB26738Q","ts":"1612178477.448800","team":"T68168MUP","edited":{"user":"UDB26738Q","ts":"1612178741.000000"},"blocks":[{"type":"rich_text","block_id":"hqXtM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what about\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function makesimpletype(d::Dict{T}) where T\n           n = length(d)\n           m = Matrix{T}(undef, n, 2)\n           for (i, (k, v)) in enumerate(d)\n               m[i, 1] = k\n               m[i, 2] = v\n           end\n           return m\n       end\nmakesimpletype (generic function with 1 method)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"for the definition of your function?  using comprehension there is "},{"type":"text","text":"very","style":{"italic":true}},{"type":"text","text":" inefficient"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"ff68f3b3-e9e4-4806-a90c-be12347ff98d","type":"message","text":"Hi <@UDB26738Q>,\nI'm very aware that this particular definition is far from optimal and am currently using a much better version.\n\nWhat I was curious, is whether this might be triggering a julia bug that causes memory leaks","user":"U9769MVA7","ts":"1612179233.453000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bzn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi "},{"type":"user","user_id":"UDB26738Q"},{"type":"text","text":",\nI'm very aware that this particular definition is far from optimal and am currently using a much better version.\n\nWhat I was curious, is whether this might be triggering a julia bug that causes memory leaks"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"34e41f08-7484-400a-bc0e-88e53eb8ce52","type":"message","text":"I'm not sure I understand your concern.  aren't you creating larger matrices in each iteration?","user":"UDB26738Q","ts":"1612179276.453200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IESRB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not sure I understand your concern.  aren't you creating larger matrices in each iteration?"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"3fea523f-674a-465c-8dcc-98283b545261","type":"message","text":"Yes, I am.\nBut they do not escape their loop-scope. so they should be gc'ed at some point","user":"U9769MVA7","ts":"1612180736.454600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ci+3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, I am.\nBut they do not escape their loop-scope. so they should be gc'ed at some point"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"36521589-a933-4994-88a4-4eaa5d80cc5b","type":"message","text":"(memory usage increases by more than just a few bytes for each iteration)","user":"U9769MVA7","ts":"1612180762.454800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C18m7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(memory usage increases by more than just a few bytes for each iteration)"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"9862b94a-3e1b-48b3-af27-9307f160b802","type":"message","text":"try `GC.gc(true)`","user":"UDB26738Q","ts":"1612181122.455000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/el","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"try "},{"type":"text","text":"GC.gc(true)","style":{"code":true}}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"b5b3e3ce-0b9e-4c53-bce3-2059bcd4fc40","type":"message","text":"I don't think `GC.gc()` necessarily cleans up _everything_","user":"UDB26738Q","ts":"1612181144.455200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=rC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't think "},{"type":"text","text":"GC.gc()","style":{"code":true}},{"type":"text","text":" necessarily cleans up "},{"type":"text","text":"everything","style":{"italic":true}}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"type":"message","text":"","files":[{"id":"F01LWHQNCD7","created":1612181227,"timestamp":1612181227,"name":"Untitled","title":"Untitled","mimetype":"text/plain","filetype":"julia","pretty_type":"Julia","user":"UDB26738Q","editable":true,"size":2833,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01LWHQNCD7/untitled","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01LWHQNCD7/download/untitled","permalink":"https://julialang.slack.com/files/UDB26738Q/F01LWHQNCD7/untitled","permalink_public":"https://slack-files.com/T68168MUP-F01LWHQNCD7-04bd23ed7a","edit_link":"https://julialang.slack.com/files/UDB26738Q/F01LWHQNCD7/untitled/edit","preview":"julia> function makesimpletype(d::Dict{T}) where T\n           n = length(d)\n           m = Matrix{T}(undef, n, 2)\n           for (i, (k, v)) in enumerate(d)\n               @inbounds m[i, 1:2] .= k, v","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text/plain',window.getSelection().toString().replace(/\\u200b/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre><span class=\"cm-variable\">julia</span><span class=\"cm-operator\">&gt;</span> <span class=\"cm-keyword\">function</span> <span class=\"cm-def\">makesimpletype</span>(<span class=\"cm-variable\">d</span><span class=\"cm-builtin\">::Dict{T</span><span class=\"cm-builtin\">}</span>) <span class=\"cm-keyword\">where</span> <span class=\"cm-variable\">T</span></pre></div>\n<div><pre>           <span class=\"cm-variable\">n</span> <span class=\"cm-operator\">=</span> <span class=\"cm-builtin\">length</span>(<span class=\"cm-variable\">d</span>)</pre></div>\n<div><pre>           <span class=\"cm-variable\">m</span> <span class=\"cm-operator\">=</span> <span class=\"cm-builtin\">Matrix</span>{<span class=\"cm-variable\">T</span>}(<span class=\"cm-variable\">undef</span>, <span class=\"cm-variable\">n</span>, <span class=\"cm-number\">2</span>)</pre></div>\n<div><pre>           <span class=\"cm-keyword\">for</span> (<span class=\"cm-variable\">i</span>, (<span class=\"cm-variable\">k</span>, <span class=\"cm-variable\">v</span>)) <span class=\"cm-operator\">in</span> <span class=\"cm-builtin\">enumerate</span>(<span class=\"cm-variable\">d</span>)</pre></div>\n<div><pre>               <span class=\"cm-meta\">@inbounds</span> <span class=\"cm-variable\">m</span>[<span class=\"cm-variable\">i</span>, <span class=\"cm-number\">1</span><span class=\"cm-operator\">:</span><span class=\"cm-number\">2</span>] <span class=\"cm-operator\">.</span><span class=\"cm-operator\">=</span> <span class=\"cm-variable\">k</span>, <span class=\"cm-variable\">v</span></pre></div>\n</div>\n</div>\n","lines":118,"lines_more":113,"preview_is_truncated":true,"is_starred":false,"has_rich_preview":false}],"upload":true,"user":"UDB26738Q","display_as_bot":false,"ts":"1612181229.455400","client_msg_id":"75c49dc4-41fd-4d1b-af42-e8fd2431a865","thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"74acad52-657c-46db-abd1-8283667d30fe","type":"message","text":"do you see the same behaviour when you put the loop into a function?","user":"UH24GRBLL","ts":"1612182892.456400","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1612182905.000000"},"blocks":[{"type":"rich_text","block_id":"Eeq1T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"do you see the same behaviour when you put the loop into a function?"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"ab4d6e8b-b831-4120-9657-390403f51811","type":"message","text":"also yes, just `GC.gc()` doesn't do a full sweep","user":"UH24GRBLL","ts":"1612182945.456700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GL7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"also yes, just "},{"type":"text","text":"GC.gc()","style":{"code":true}},{"type":"text","text":" doesn't do a full sweep"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"6f570f5b-0796-4657-a6aa-6f26fc32a60b","type":"message","text":"```julia&gt; makesimpletype(x::Dict{T,T}) where {T&lt;:Integer} = \n           Array{T}(vcat([[child parent] for (child, parent) ∈ x]...));d = Dict( n =&gt; n for n=1:1000000);for n = 1000000 .+(1:100)\n           d[n] = n\n           mat = makesimpletype(d)\n           GC.gc(true)\n           println(\"$(round(Sys.maxrss()/2^20,digits=2)) MiB, \", size(mat))\n       end\n754.88 MiB, (1000001, 2)\n754.88 MiB, (1000002, 2)\n825.71 MiB, (1000003, 2)\n919.17 MiB, (1000004, 2)\n978.55 MiB, (1000005, 2)\n978.55 MiB, (1000006, 2)\n1159.05 MiB, (1000007, 2)\n1159.05 MiB, (1000008, 2)\n1251.43 MiB, (1000009, 2)\n1251.43 MiB, (1000010, 2)\n1349.09 MiB, (1000011, 2)\n1437.25 MiB, (1000012, 2)\n1526.23 MiB, (1000013, 2)\n1659.75 MiB, (1000014, 2)\n1659.75 MiB, (1000015, 2)\n1659.75 MiB, (1000016, 2)\n1659.75 MiB, (1000017, 2)\n1705.18 MiB, (1000018, 2)\n1770.3 MiB, (1000019, 2)\n1831.49 MiB, (1000020, 2)\n1904.0 MiB, (1000021, 2)\n1964.77 MiB, (1000022, 2)\n2014.4 MiB, (1000023, 2)\n2079.41 MiB, (1000024, 2)```","user":"U9769MVA7","ts":"1612186738.461600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"n2Sg","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> makesimpletype(x::Dict{T,T}) where {T<:Integer} = \n           Array{T}(vcat([[child parent] for (child, parent) ∈ x]...));d = Dict( n => n for n=1:1000000);for n = 1000000 .+(1:100)\n           d[n] = n\n           mat = makesimpletype(d)\n           GC.gc(true)\n           println(\"$(round(Sys.maxrss()/2^20,digits=2)) MiB, \", size(mat))\n       end\n754.88 MiB, (1000001, 2)\n754.88 MiB, (1000002, 2)\n825.71 MiB, (1000003, 2)\n919.17 MiB, (1000004, 2)\n978.55 MiB, (1000005, 2)\n978.55 MiB, (1000006, 2)\n1159.05 MiB, (1000007, 2)\n1159.05 MiB, (1000008, 2)\n1251.43 MiB, (1000009, 2)\n1251.43 MiB, (1000010, 2)\n1349.09 MiB, (1000011, 2)\n1437.25 MiB, (1000012, 2)\n1526.23 MiB, (1000013, 2)\n1659.75 MiB, (1000014, 2)\n1659.75 MiB, (1000015, 2)\n1659.75 MiB, (1000016, 2)\n1659.75 MiB, (1000017, 2)\n1705.18 MiB, (1000018, 2)\n1770.3 MiB, (1000019, 2)\n1831.49 MiB, (1000020, 2)\n1904.0 MiB, (1000021, 2)\n1964.77 MiB, (1000022, 2)\n2014.4 MiB, (1000023, 2)\n2079.41 MiB, (1000024, 2)"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"bcc40c1a-1939-42e2-a6b9-7983c4895dce","type":"message","text":"I know that there are better implementations that are much much faster and such.\nWhat I'm trying to figure out, is whether this is a julia bug.","user":"U9769MVA7","ts":"1612186820.461800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"woZwP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I know that there are better implementations that are much much faster and such.\nWhat I'm trying to figure out, is whether this is a julia bug."}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"e957706a-8a9a-4988-a593-ce24a8d4fe9f","type":"message","text":"what's your `versioninfo()`?","user":"UH24GRBLL","ts":"1612186841.462000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5ge","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what's your "},{"type":"text","text":"versioninfo()","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"7d58d157-4b3e-4795-ab9f-c8f657750e0f","type":"message","text":"julia&gt; versioninfo()\nJulia Version 1.5.2\nCommit 539f3ce943 (2020-09-23 23:17 UTC)\nPlatform Info:\n  OS: Linux (x86_64-pc-linux-gnu)\n  CPU: Intel(R) Core(TM) i7-9700K CPU @ 3.60GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)","user":"U9769MVA7","ts":"1612186903.462200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ryh3E","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"julia> versioninfo()\nJulia Version 1.5.2\nCommit 539f3ce943 (2020-09-23 23:17 UTC)\nPlatform Info:\n  OS: Linux (x86_64-pc-linux-gnu)\n  CPU: Intel(R) Core(TM) i7-9700K CPU @ 3.60GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"cff8b038-6661-45da-a8d1-2f25b00c6448","type":"message","text":"Here's the one inside a function\n```julia&gt; function loopfun(d)\n       for n = 1000000 .+(1:100)\n                  d[n] = n\n                  mat = makesimpletype(d)\n                  GC.gc(true)\n                  println(\"$(round(Sys.maxrss()/2^20,digits=2)) MiB, \", size(mat))\n       end\n       end\nloopfun (generic function with 1 method)\n\njulia&gt; makesimpletype(x::Dict{T,T}) where {T&lt;:Integer} = \n           Array{T}(vcat([[child parent] for (child, parent) ∈ x]...))\nmakesimpletype (generic function with 1 method)\n\njulia&gt; d = Dict( n =&gt; n for n=1:1000000);\n\njulia&gt; loopfun(d)\n585.8 MiB, (1000001, 2)\n758.2 MiB, (1000002, 2)\n758.2 MiB, (1000003, 2)\n847.17 MiB, (1000004, 2)\n907.2 MiB, (1000005, 2)\n957.37 MiB, (1000006, 2)\n1104.68 MiB, (1000007, 2)\n1104.68 MiB, (1000008, 2)\n1174.52 MiB, (1000009, 2)\n1226.73 MiB, (1000010, 2)\n1237.0 MiB, (1000011, 2)\n1340.55 MiB, (1000012, 2)\n1433.38 MiB, (1000013, 2)\n1555.63 MiB, (1000014, 2)\n1555.63 MiB, (1000015, 2)\n1555.63 MiB, (1000016, 2)\n1655.84 MiB, (1000017, 2)\n1705.59 MiB, (1000018, 2)\n1757.9 MiB, (1000019, 2)\n1830.41 MiB, (1000020, 2)\n1910.32 MiB, (1000021, 2)\n1990.12 MiB, (1000022, 2)```","user":"U9769MVA7","ts":"1612187031.462400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c3aM6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Here's the one inside a function\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function loopfun(d)\n       for n = 1000000 .+(1:100)\n                  d[n] = n\n                  mat = makesimpletype(d)\n                  GC.gc(true)\n                  println(\"$(round(Sys.maxrss()/2^20,digits=2)) MiB, \", size(mat))\n       end\n       end\nloopfun (generic function with 1 method)\n\njulia> makesimpletype(x::Dict{T,T}) where {T<:Integer} = \n           Array{T}(vcat([[child parent] for (child, parent) ∈ x]...))\nmakesimpletype (generic function with 1 method)\n\njulia> d = Dict( n => n for n=1:1000000);\n\njulia> loopfun(d)\n585.8 MiB, (1000001, 2)\n758.2 MiB, (1000002, 2)\n758.2 MiB, (1000003, 2)\n847.17 MiB, (1000004, 2)\n907.2 MiB, (1000005, 2)\n957.37 MiB, (1000006, 2)\n1104.68 MiB, (1000007, 2)\n1104.68 MiB, (1000008, 2)\n1174.52 MiB, (1000009, 2)\n1226.73 MiB, (1000010, 2)\n1237.0 MiB, (1000011, 2)\n1340.55 MiB, (1000012, 2)\n1433.38 MiB, (1000013, 2)\n1555.63 MiB, (1000014, 2)\n1555.63 MiB, (1000015, 2)\n1555.63 MiB, (1000016, 2)\n1655.84 MiB, (1000017, 2)\n1705.59 MiB, (1000018, 2)\n1757.9 MiB, (1000019, 2)\n1830.41 MiB, (1000020, 2)\n1910.32 MiB, (1000021, 2)\n1990.12 MiB, (1000022, 2)"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"a5212f76-2483-4afe-8414-370cb68f70b7","type":"message","text":"I think the inefficient `makesimpletype` is quite a problem.  without running GC, the loop with my function is instantaneous","user":"UDB26738Q","ts":"1612187127.462600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KxchH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think the inefficient "},{"type":"text","text":"makesimpletype","style":{"code":true}},{"type":"text","text":" is quite a problem.  without running GC, the loop with my function is instantaneous"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"3cd461aa-2965-4e02-ae4b-64caaa456b6c","type":"message","text":"what would you expect to happen?","user":"UH24GRBLL","ts":"1612187196.462800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Zsuy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what would you expect to happen?"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"751fdbf8-25a4-4a73-9468-319e05e6136f","type":"message","text":"Yes, of course. When I found this `makesimpletype` in the large codebase,\nI wrote a similar loop based version and measured it to be ~100 times faster.\n\nStill, I only found this particular line because all my cluster jobs started dying with too much memory use","user":"U9769MVA7","ts":"1612187265.463000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x6yP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, of course. When I found this "},{"type":"text","text":"makesimpletype","style":{"code":true}},{"type":"text","text":" in the large codebase,\nI wrote a similar loop based version and measured it to be ~100 times faster.\n\nStill, I only found this particular line because all my cluster jobs started dying with too much memory use"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"dd8d21e2-d110-4b52-be36-9c43bf186b75","type":"message","text":"I don't see why julia is not able to free the memory.","user":"U9769MVA7","ts":"1612187281.463200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=kq4u","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't see why julia is not able to free the memory."}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"08f9f5e6-906a-4c7f-a0fb-9bc92aac9a1b","type":"message","text":"`Sys.maxrss()` is the total amount of memory borrowed from the OS and I don't think it's unusual for programming language REPLs with GC to return that memory to the OS","user":"UH24GRBLL","ts":"1612187287.463400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kwKy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sys.maxrss()","style":{"code":true}},{"type":"text","text":" is the total amount of memory borrowed from the OS and I don't think it's unusual for programming language REPLs with GC to return that memory to the OS"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"0d10f54e-7436-438c-b2bf-05961866812e","type":"message","text":"`malloc` is a somewhat expensive operation, so keeping memory after it's been allocated is not unusual","user":"UH24GRBLL","ts":"1612187309.463600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tSa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"malloc","style":{"code":true}},{"type":"text","text":" is a somewhat expensive operation, so keeping memory after it's been allocated is not unusual"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"95c5ba31-f8e6-4da0-8eb5-47646110c73a","type":"message","text":"sure, but it will actually crash my system","user":"U9769MVA7","ts":"1612187330.463800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bjrY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"sure, but it will actually crash my system"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"f4faa0bc-5a80-4f13-83b8-6688f58906a9","type":"message","text":"and from the perspective of the GC - you keep requesting more memory, so it's reasonable to hold onto the memory instead of returning it and immediately `malloc` ing it again","user":"UH24GRBLL","ts":"1612187340.464000","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1612187368.000000"},"blocks":[{"type":"rich_text","block_id":"CYhJ/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and from the perspective of the GC - you keep requesting more memory, so it's reasonable to hold onto the memory instead of returning it and immediately "},{"type":"text","text":"malloc","style":{"code":true}},{"type":"text","text":" ing it again"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"adbbe387-3e65-490a-8cfa-de2333a6e57c","type":"message","text":"that said, the GC is definitely not the most optimized feature","user":"UH24GRBLL","ts":"1612187460.464300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yp97","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that said, the GC is definitely not the most optimized feature"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"7f442d27-ecf9-4f8a-9e7f-4648bf81101a","type":"message","text":"it's not good at dealing with huge counts of very small allocations (unlike Java's GC, which has been doing that for decades)","user":"UH24GRBLL","ts":"1612187527.464500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CKxfK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's not good at dealing with huge counts of very small allocations (unlike Java's GC, which has been doing that for decades)"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"e99fbeb1-704a-48c8-add8-3ed5c0970dd7","type":"message","text":"I totally get that memory usage of julia will not be constant in time here, any larger than absolutely necessary as well.\n\nBut looking at the function definitions, I feel that in the long run, memory should still be bounded, no?\n(I mean, I still get serious memory usage increases if I delete an element in each iteration instead of adding one)","user":"U9769MVA7","ts":"1612187689.464800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"G2dO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I totally get that memory usage of julia will not be constant in time here, any larger than absolutely necessary as well.\n\nBut looking at the function definitions, I feel that in the long run, memory should still be bounded, no?\n(I mean, I still get serious memory usage increases if I delete an element in each iteration instead of adding one)"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"bb5f24f5-9787-4108-b628-fe0f1acd3203","type":"message","text":"well, `d` is in global scope, so that thing might change at any time because there's parallelism and tasks","user":"UH24GRBLL","ts":"1612187751.465100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TdV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well, "},{"type":"text","text":"d","style":{"code":true}},{"type":"text","text":" is in global scope, so that thing might change at any time because there's parallelism and tasks"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"e806943d-b917-40f3-b8e4-3f61651519b6","type":"message","text":"in fact, I see much slower memory growth if I put both the loop as well as `d` inside a function","user":"UH24GRBLL","ts":"1612187906.465300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tn/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in fact, I see much slower memory growth if I put both the loop as well as "},{"type":"text","text":"d","style":{"code":true}},{"type":"text","text":" inside a function"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"01036120-8ced-4d0d-945a-5378d89bc509","type":"message","text":"```julia&gt; function loopfun(d)\n       e=deepcopy(d)\n       for n = 1:100\n                  delete!(e,n)\n                  mat = makesimpletype(e)\n                  GC.gc(true)\n                  println(\"$(round(Sys.maxrss()/2^20,digits=2)) MiB, \", size(mat))\n       end\n       end\nloopfun (generic function with 1 method)\n\njulia&gt; loopfun(d)\n870.09 MiB, (999999, 2)\n870.09 MiB, (999998, 2)\n920.77 MiB, (999997, 2)\n1010.32 MiB, (999996, 2)\n1086.32 MiB, (999995, 2)\n1129.16 MiB, (999994, 2)\n1157.11 MiB, (999993, 2)\n1231.57 MiB, (999992, 2)\n1349.88 MiB, (999991, 2)\n1388.93 MiB, (999990, 2)\n1472.41 MiB, (999989, 2)\n1542.71 MiB, (999988, 2)\n1630.54 MiB, (999987, 2)\n1737.28 MiB, (999986, 2)\n1737.28 MiB, (999985, 2)\n1737.28 MiB, (999984, 2)\n1737.28 MiB, (999983, 2)\n1782.75 MiB, (999982, 2)\n1862.89 MiB, (999981, 2)\n1916.34 MiB, (999980, 2)\n1958.36 MiB, (999979, 2)```","user":"U9769MVA7","ts":"1612187933.465500","team":"T68168MUP","edited":{"user":"U9769MVA7","ts":"1612187955.000000"},"blocks":[{"type":"rich_text","block_id":"6yMZ","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function loopfun(d)\n       e=deepcopy(d)\n       for n = 1:100\n                  delete!(e,n)\n                  mat = makesimpletype(e)\n                  GC.gc(true)\n                  println(\"$(round(Sys.maxrss()/2^20,digits=2)) MiB, \", size(mat))\n       end\n       end\nloopfun (generic function with 1 method)\n\njulia> loopfun(d)\n870.09 MiB, (999999, 2)\n870.09 MiB, (999998, 2)\n920.77 MiB, (999997, 2)\n1010.32 MiB, (999996, 2)\n1086.32 MiB, (999995, 2)\n1129.16 MiB, (999994, 2)\n1157.11 MiB, (999993, 2)\n1231.57 MiB, (999992, 2)\n1349.88 MiB, (999991, 2)\n1388.93 MiB, (999990, 2)\n1472.41 MiB, (999989, 2)\n1542.71 MiB, (999988, 2)\n1630.54 MiB, (999987, 2)\n1737.28 MiB, (999986, 2)\n1737.28 MiB, (999985, 2)\n1737.28 MiB, (999984, 2)\n1737.28 MiB, (999983, 2)\n1782.75 MiB, (999982, 2)\n1862.89 MiB, (999981, 2)\n1916.34 MiB, (999980, 2)\n1958.36 MiB, (999979, 2)"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"39ff001a-93d7-4787-85e8-3086ede21faa","type":"message","text":"Oh well,\nif you don't think this is a relevant problem then I won't keep making a fuss about it.\nI've got a working alternative anyway.","user":"U9769MVA7","ts":"1612188147.465900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/QF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh well,\nif you don't think this is a relevant problem then I won't keep making a fuss about it.\nI've got a working alternative anyway."}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"b652d930-c600-47a0-87d3-a5b84596009c","type":"message","text":"It's not that I think it's not a problem, it just feels like hitting yourself with a stick and wondering why it hurts :man-shrugging:","user":"UH24GRBLL","ts":"1612188220.466100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gEcuJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's not that I think it's not a problem, it just feels like hitting yourself with a stick and wondering why it hurts "},{"type":"emoji","name":"man-shrugging"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"1851b7a4-ef81-4fd1-a11a-2a505029b4ba","type":"message","text":"I'd be happy if GC were smarter, but I also accept that it currently isn't and that there are amazing tools to write faster code","user":"UH24GRBLL","ts":"1612188268.466300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rDX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'd be happy if GC were smarter, but I also accept that it currently isn't and that there are amazing tools to write faster code"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"f97aa106-cdd5-46d4-baee-bf9a9d2c1ea4","type":"message","text":"I don't think it's good that GC works this way, I've just tried to look for reasons that explain the behaviour you're seeing","user":"UH24GRBLL","ts":"1612188338.466500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Hbx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't think it's good that GC works this way, I've just tried to look for reasons that explain the behaviour you're seeing"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"5865579f-f5c1-4dd5-bf17-4b88010a64a8","type":"message","text":"there are a bunch of open issues concerning GC on github, I think it'd be valuable if you'd share your experience in a new one","user":"UH24GRBLL","ts":"1612188402.466700","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1612188409.000000"},"blocks":[{"type":"rich_text","block_id":"jX1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there are a bunch of open issues concerning GC on github, I think it'd be valuable if you'd share your experience in a new one"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7","reactions":[{"name":"+1","users":["UDB26738Q","U6795JH6H"],"count":2}]},{"client_msg_id":"e6c32ec4-c9bd-4340-b5db-d6e9f6241126","type":"message","text":"in fact, please do and reference this issue <https://github.com/JuliaLang/julia/issues/15543>","user":"UH24GRBLL","ts":"1612188514.467100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fXxm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in fact, please do and reference this issue "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/15543"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"6f85c790-1caf-46e8-8ee3-bb78b4ee70f1","type":"message","text":"I'm just afraid you won't make <@U681A399C> happy about this, judging by the number of commits that went into fixing the similar issue :sweat_smile:","user":"UH24GRBLL","ts":"1612188580.467300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c/Lz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm just afraid you won't make "},{"type":"user","user_id":"U681A399C"},{"type":"text","text":" happy about this, judging by the number of commits that went into fixing the similar issue "},{"type":"emoji","name":"sweat_smile"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"ad8dc133-ac37-495d-8796-961b81de1dfa","type":"message","text":"please do file an issue","user":"U6795JH6H","ts":"1612189754.467900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+BV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"please do file an issue"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"82f82c1d-8796-4b81-8938-3aff6924ef49","type":"message","text":"<https://github.com/JuliaLang/julia/issues/39475>","user":"U9769MVA7","ts":"1612193169.473300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kxH","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/issues/39475"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"},{"client_msg_id":"17398aec-5093-4e2b-aa29-857a84ce13a3","type":"message","text":"we don't have a paid slack plan, so this discussion will probably vanish soon","user":"UH24GRBLL","ts":"1612195639.473700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3Qcp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we don't have a paid slack plan, so this discussion will probably vanish soon"}]}]}],"thread_ts":"1612172510.438000","parent_user_id":"U9769MVA7"}]