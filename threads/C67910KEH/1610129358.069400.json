[{"client_msg_id":"c6f72d12-9588-4c39-a2ce-66fb04e0ae01","type":"message","text":"Sometimes I can’t workout if julia is a bad programming language, with unreasonable edge-cases,\nor if other programming languages are just as bad (or worse) and I just don’t have the skill/tools to recognize when a bad edge case is hurting me.\nI mean all programming languages are terrible.","user":"U6A936746","ts":"1610129358.069400","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1610129377.000000"},"blocks":[{"type":"rich_text","block_id":"clQMC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sometimes I can’t workout if julia is a bad programming language, with unreasonable edge-cases,\nor if other programming languages are just as bad (or worse) and I just don’t have the skill/tools to recognize when a bad edge case is hurting me.\nI mean all programming languages are terrible."}]}]}],"thread_ts":"1610129358.069400","reply_count":76,"reply_users_count":13,"latest_reply":"1610143692.105000","reply_users":["U6A936746","UM30MT6RF","UH8A351DJ","UH24GRBLL","U9VG1AYSG","U01CQTKB86N","U6740K1SP","U019K6Q9N15","USU9FRPEU","UD0NS8PDF","U7JQGPGCQ","U6795JH6H","U8D9768Q6"],"subscribed":false},{"client_msg_id":"dbe2e3ea-fed9-4635-9877-ccddd60717b9","type":"message","text":"like\n<https://github.com/JuliaLang/julia/issues/39151>","user":"U6A936746","ts":"1610129382.069600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"it8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"like\n"},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/39151"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"c22b56a9-c89e-4280-bc7c-cd4e8cd75ec2","type":"message","text":"I think broadcasting is just one case, where we try to be really smart and strain the compiler, which in turn makes it really susceptible to hitting the limit of certain compiler heuristics.","user":"UM30MT6RF","ts":"1610129761.069800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"71jv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think broadcasting is just one case, where we try to be really smart and strain the compiler, which in turn makes it really susceptible to hitting the limit of certain compiler heuristics."}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746","reactions":[{"name":"+1","users":["U6A936746","U6740K1SP","U67G3QRJM"],"count":3}]},{"client_msg_id":"c403bb69-516a-4f97-9b49-885ec7b3ec9f","type":"message","text":"Did we over-complicate the language?","user":"U6A936746","ts":"1610129805.070100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zih","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Did we over-complicate the language?"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"8fd25fb6-acbd-422c-985a-f2ded72939d7","type":"message","text":"Did we fly too close to the sun?","user":"U6A936746","ts":"1610129833.070300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VDu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Did we fly too close to the sun?"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"4b1c8534-3658-4c53-96f6-daebce491d59","type":"message","text":"I mean it's a really nice feature, and a great example of extendable no-cost abstractions that are possible in Julia","user":"UM30MT6RF","ts":"1610129887.070500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R8o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean it's a really nice feature, and a great example of extendable no-cost abstractions that are possible in Julia"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"5af585fe-c5af-4c4d-a938-52ce2489bffd","type":"message","text":"But I think it would be good to try not to encourage over-using broadcasting. For a lot of things, just `map` is enough and pretty much as readable","user":"UM30MT6RF","ts":"1610130002.070700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ABoc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But I think it would be good to try not to encourage over-using broadcasting. For a lot of things, just "},{"type":"text","text":"map","style":{"code":true}},{"type":"text","text":" is enough and pretty much as readable"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"038ccb1a-3bb2-4e18-b6f5-5db0504266fb","type":"message","text":"I mean the other approach is numpy, where you pray the assumed behavior is what you wanted.","user":"UH8A351DJ","ts":"1610130025.070900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"llkm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean the other approach is numpy, where you pray the assumed behavior is what you wanted."}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"8915fe0b-1fc7-4cb0-9100-4c9e37205b65","type":"message","text":"Does numpy do any fusing at all, or does it just always allocate new arrays for each operation?","user":"UM30MT6RF","ts":"1610130080.071100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OIhrl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does numpy do any fusing at all, or does it just always allocate new arrays for each operation?"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"5ecb32d7-59e6-4902-8928-403b81f9bc7c","type":"message","text":"The real case to match that one above is\n<https://github.com/JuliaDiff/FiniteDifferences.jl/pull/130/files#diff-ee038c16114879c8c38f6b0986eec8fcdb079a629fbd6133e9875c85ae90c9dfR250-R251>\n\nWhile you can do it with map, it would be pretty ugly","user":"U6A936746","ts":"1610130090.071300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JBa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The real case to match that one above is\n"},{"type":"link","url":"https://github.com/JuliaDiff/FiniteDifferences.jl/pull/130/files#diff-ee038c16114879c8c38f6b0986eec8fcdb079a629fbd6133e9875c85ae90c9dfR250-R251"},{"type":"text","text":"\n\nWhile you can do it with map, it would be pretty ugly"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"d8dc4514-b813-456a-8687-93421c1143b0","type":"message","text":"Yeah, true","user":"UM30MT6RF","ts":"1610130127.071500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"E0HoB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, true"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"1925de27-518c-481b-97a2-bb7d8759dfb0","type":"message","text":"I think there are also some efforts to make StaticArrays less reliant on generated functions, which might also help here","user":"UM30MT6RF","ts":"1610130167.071700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uHB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think there are also some efforts to make StaticArrays less reliant on generated functions, which might also help here"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"c26137d2-61b1-4982-a308-acae7b208f9a","type":"message","text":"no easy fusing out of the box","user":"UH8A351DJ","ts":"1610130215.071900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ePg3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no easy fusing out of the box"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"61dc8014-2c2f-4aec-a3c0-6c3bc086fce1","type":"message","text":"fusing is not the problem here imo","user":"UH24GRBLL","ts":"1610130298.072100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2aMkf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"fusing is not the problem here imo"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"0f3b4009-93a7-40ff-bec4-2d701ea1d0ca","type":"message","text":"`bar3(T, c, f) = sum(T.(f .* c))` fold just fine","user":"UH24GRBLL","ts":"1610130316.072300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wfrAO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"bar3(T, c, f) = sum(T.(f .* c))","style":{"code":true}},{"type":"text","text":" fold just fine"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"55814fd4-3679-40ad-84db-f51e667116ef","type":"message","text":"That is a different function.\n\n(We have to be really careful with types in a number of places because some computations need &gt;64 bits of precision and others need to be sure to use BLAS floats for speed)","user":"U6A936746","ts":"1610130332.072500","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1610130423.000000"},"blocks":[{"type":"rich_text","block_id":"382","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That is a different function.\n\n(We have to be really careful with types in a number of places because some computations need >64 bits of precision and others need to be sure to use BLAS floats for speed)"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"36a9305f-c467-466c-a590-481343dfef5f","type":"message","text":"either your language is lisp, or you have bad edge cases.  I personally don't want to write everything in lisp, and developers seriously think about the Julia syntax before making changes.  Can't really ask for much more than that","user":"U9VG1AYSG","ts":"1610130351.072700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tk6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"either your language is lisp, or you have bad edge cases.  I personally don't want to write everything in lisp, and developers seriously think about the Julia syntax before making changes.  Can't really ask for much more than that"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"7b0b6f29-a224-4c98-a7a8-86839904262c","type":"message","text":"I think we’ll start seeing coding languages that you don’t command to do something, but you teach them to do something.","user":"U01CQTKB86N","ts":"1610130430.073000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7F3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think we’ll start seeing coding languages that you don’t command to do something, but you teach them to do something."}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"e1dad469-2992-4c36-b697-548f9ec06562","type":"message","text":"Wolfram is kinda approaching that.","user":"U6A936746","ts":"1610130456.073200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/c6L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Wolfram is kinda approaching that."}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"cfc7565e-3631-476b-a7c0-a5deb76871c8","type":"message","text":"I mean sure, but changing the type while also multiplying seems to me like a pretty obvious thing why it won't suddenly SIMD and fold everything, especially in floating point :man-shrugging:","user":"UH24GRBLL","ts":"1610130457.073400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hn7y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean sure, but changing the type while also multiplying seems to me like a pretty obvious thing why it won't suddenly SIMD and fold everything, especially in floating point "},{"type":"emoji","name":"man-shrugging"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"7e191026-91e1-44c7-84e9-4aaa4a720a38","type":"message","text":"<https://www.wolframalpha.com/input/?i=%28maximum+weight+of+a+dog%29+%2F%28length+of+a+dog%29%5E3>","user":"U6A936746","ts":"1610130602.073700","team":"T68168MUP","attachments":[{"title":"(maximum weight of a dog) /(length of a dog)^3 - Wolfram|Alpha","title_link":"https://www.wolframalpha.com/input/?i=%28maximum+weight+of+a+dog%29+%2F%28length+of+a+dog%29%5E3","text":"Wolfram|Alpha brings expert-level knowledge and capabilities to the broadest possible range of people—spanning all professions and education levels.","fallback":"(maximum weight of a dog) /(length of a dog)^3 - Wolfram|Alpha","from_url":"https://www.wolframalpha.com/input/?i=%28maximum+weight+of+a+dog%29+%2F%28length+of+a+dog%29%5E3","service_icon":"https://www.wolframalpha.com/_next/static/images/favicon_fzx75d1e.ico","service_name":"wolframalpha.com","id":1,"original_url":"https://www.wolframalpha.com/input/?i=%28maximum+weight+of+a+dog%29+%2F%28length+of+a+dog%29%5E3"}],"blocks":[{"type":"rich_text","block_id":"LBK5","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://www.wolframalpha.com/input/?i=%28maximum+weight+of+a+dog%29+%2F%28length+of+a+dog%29%5E3"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"57dd3e6f-07a5-4954-816f-e128589d9fe9","type":"message","text":"I don’t really know about Wolfram. I’ve tried several times to ask it stuff, and sometimes I’ve got useful answers even.","user":"U01CQTKB86N","ts":"1610130640.074000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"avY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don’t really know about Wolfram. I’ve tried several times to ask it stuff, and sometimes I’ve got useful answers even."}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"dc895daa-569a-4439-9cdc-47019f4c7d52","type":"message","text":"I just computed the approximate density of a dog.","user":"U6A936746","ts":"1610130664.074200","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1610130676.000000"},"blocks":[{"type":"rich_text","block_id":"2Xs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I just computed the approximate density of a dog."}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"504760ce-3836-49ba-91cb-57c217d1cbde","type":"message","text":"*maximum possible known recorded","user":"UH24GRBLL","ts":"1610130680.074500","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1610130684.000000"},"blocks":[{"type":"rich_text","block_id":"pyr/k","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"*maximum possible known recorded"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"2bce4abd-80fa-42e6-bb0f-ac93a29bfae4","type":"message","text":"OTOH I can’t workout how to get it to give me that value in metric units.\nand I think that is the suffering any kind of language that moves in this direction ends up with.\nit is all corner cases.","user":"U6A936746","ts":"1610130732.074800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hn3by","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"OTOH I can’t workout how to get it to give me that value in metric units.\nand I think that is the suffering any kind of language that moves in this direction ends up with.\nit is all corner cases."}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746","reactions":[{"name":"julia-set-fractal","users":["U6A936746"],"count":1}]},{"client_msg_id":"9d20a434-1475-45b8-b177-2317effe2d32","type":"message","text":"use a different locale, I get kg/cm³","user":"UH24GRBLL","ts":"1610130771.075100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w7XU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"use a different locale, I get kg/cm³"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"e50c5624-c106-4f2f-85f3-52e34c16004e","type":"message","text":"But is Wolfram taught in the same way that you teach a deep neural network? Probably not?","user":"U01CQTKB86N","ts":"1610130774.075300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ow0NF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But is Wolfram taught in the same way that you teach a deep neural network? Probably not?"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"371a284e-f995-4d52-bf42-72874fe1d65c","type":"message","text":"&gt; (8×10^-6 to 0.21) kg/cm^3 (kilograms per cubic centimeter)\nis what it shows me","user":"UH24GRBLL","ts":"1610130792.075500","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1610130795.000000"},"blocks":[{"type":"rich_text","block_id":"DlH","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"(8×10^-6 to 0.21) kg/cm^3 (kilograms per cubic centimeter)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"is what it shows me"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"188e1f47-5738-4e6b-8534-d26c2613639a","type":"message","text":"<#C67TK21LJ|gripes>","user":"U6740K1SP","ts":"1610130834.075800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"t2=tx","elements":[{"type":"rich_text_section","elements":[{"type":"channel","channel_id":"C67TK21LJ"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"266c1ec6-44f9-49bc-9e12-0de2345dff09","type":"message","text":"tbh, if we ever get freeze/thaw semantics, I think the fusing would not be a problem at all anymore - I'd wager it would probably constant fold with regular arrays as well","user":"UH24GRBLL","ts":"1610130935.076100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"D/UW0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"tbh, if we ever get freeze/thaw semantics, I think the fusing would not be a problem at all anymore - I'd wager it would probably constant fold with regular arrays as well"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"7bb7acc4-5512-4d62-8ed0-34ba0fad4b63","type":"message","text":"Another thing I’ve been wondering is from Salesforce, but it applies elsewhere as well. For some reason many people think that not having code makes things simple. It does not. You can easily draw graphical boxes and set rules in a web page that is just spaghetti. The keep advertising zero code functionality, and everyone can do it.","user":"U01CQTKB86N","ts":"1610130969.076300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9Io","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Another thing I’ve been wondering is from Salesforce, but it applies elsewhere as well. For some reason many people think that not having code makes things simple. It does not. You can easily draw graphical boxes and set rules in a web page that is just spaghetti. The keep advertising zero code functionality, and everyone can do it."}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"6d740fc6-fa84-4a25-b3ea-2ac80076d4bf","type":"message","text":"In general, beware function specialization.  That’s not the whole story, but it accounts for 50% of it.","user":"U6740K1SP","ts":"1610130970.076500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aC1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In general, beware function specialization.  That’s not the whole story, but it accounts for 50% of it."}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"76A49698-DF05-46F2-A833-E18CABFB9679","type":"message","text":"Why do people say this? Are they joking when they say that all programming languages are terrible? I don’t really want to be a buzzkill but I’ve got to ask: what are we measuring that we say is terrible? ","user":"U019K6Q9N15","ts":"1610131138.079200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Wlj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Why do people say this? Are they joking when they say that all programming languages are terrible? I don’t really want to be a buzzkill but I’ve got to ask: what are we measuring that we say is terrible? "}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746","reactions":[{"name":"+1","users":["U68M6ERG8"],"count":1}]},{"client_msg_id":"da6704b9-0077-41a6-928c-befe603ab46d","type":"message","text":"Kinda joking, kinda not.\nAll programming languages are terrible because programming sucks.\n(its kind of a reference to <https://www.stilldrinking.org/programming-sucks>)\n\nBut in particular because every programming language has a flaw. And with a tool you spend thousands of hours using every year you absolutely will find it sooner or later.\nIt’s not a fair metric at all.\nbut still","user":"U6A936746","ts":"1610131340.079800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Gas","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Kinda joking, kinda not.\nAll programming languages are terrible because programming sucks.\n(its kind of a reference to "},{"type":"link","url":"https://www.stilldrinking.org/programming-sucks"},{"type":"text","text":")\n\nBut in particular because every programming language has a flaw. And with a tool you spend thousands of hours using every year you absolutely will find it sooner or later.\nIt’s not a fair metric at all.\nbut still"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746","reactions":[{"name":"ok_hand","users":["U019K6Q9N15"],"count":1}]},{"client_msg_id":"680e5ee1-5a84-41f5-aa84-6dee7e864943","type":"message","text":"I feel like there a compiler level issue here. `foo2` and `bar2` really should be equivalent.","user":"USU9FRPEU","ts":"1610131354.080000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2F6q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I feel like there a compiler level issue here. "},{"type":"text","text":"foo2","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"bar2","style":{"code":true}},{"type":"text","text":" really should be equivalent."}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"8decb635-3115-4924-8533-6030a2f21a8e","type":"message","text":"that’s the point","user":"U6740K1SP","ts":"1610131387.080200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cYs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that’s the point"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"ba64a15a-ff99-4241-ba4f-8fbb255587f9","type":"message","text":"I guess you know this, but with a function instead of a type `f32(x) = convert(Float32, x)` this problem goes away.","user":"UD0NS8PDF","ts":"1610131479.080400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/LN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess you know this, but with a function instead of a type "},{"type":"text","text":"f32(x) = convert(Float32, x)","style":{"code":true}},{"type":"text","text":" this problem goes away."}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746","reactions":[{"name":"wat","users":["U6A936746"],"count":1}]},{"client_msg_id":"5d18aee7-80da-4d66-8906-dddbdde600d0","type":"message","text":"For better or worse they are semantically different due to the fact that broadcast fusing doesn’t inline variables into expressions\n(I say for worse, but that is another discussion)\n\nbut in this case they should optimize to make the same code, or at very least `bar2` should be better.","user":"U6A936746","ts":"1610131494.080600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LaM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For better or worse they are semantically different due to the fact that broadcast fusing doesn’t inline variables into expressions\n(I say for worse, but that is another discussion)\n\nbut in this case they should optimize to make the same code, or at very least "},{"type":"text","text":"bar2","style":{"code":true}},{"type":"text","text":" should be better."}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"7a5f37ed-0373-47af-ac5c-90abd7fb7a54","type":"message","text":"It’s <https://docs.julialang.org/en/v1/manual/performance-tips/#Be-aware-of-when-Julia-avoids-specializing> (re the :wat:)","user":"U6740K1SP","ts":"1610131551.080900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"B6B8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It’s "},{"type":"link","url":"https://docs.julialang.org/en/v1/manual/performance-tips/#Be-aware-of-when-Julia-avoids-specializing"},{"type":"text","text":" (re the "},{"type":"emoji","name":"wat"},{"type":"text","text":")"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746","reactions":[{"name":"point_up","users":["UM30MT6RF"],"count":1}]},{"client_msg_id":"ee931a51-0d27-44db-a0f6-2e0b1b95fea6","type":"message","text":"That’s what I meant by <https://julialang.slack.com/archives/C67910KEH/p1610130970076500?thread_ts=1610129358.069400&amp;cid=C67910KEH>","user":"U6740K1SP","ts":"1610131582.081200","team":"T68168MUP","attachments":[{"from_url":"https://julialang.slack.com/archives/C67910KEH/p1610130970076500?thread_ts=1610129358.069400&amp;cid=C67910KEH","fallback":"[January 8th, 2021 10:36 AM] mbauman: In general, beware function specialization.  That’s not the whole story, but it accounts for 50% of it.","ts":"1610130970.076500","author_id":"U6740K1SP","author_subname":"Matt Bauman","channel_id":"C67910KEH","channel_name":"general","is_msg_unfurl":true,"is_reply_unfurl":true,"text":"In general, beware function specialization.  That’s not the whole story, but it accounts for 50% of it.","author_name":"Matt Bauman","author_link":"https://julialang.slack.com/team/U6740K1SP","author_icon":"https://avatars.slack-edge.com/2018-04-11/345326373746_90935adad71acc88a9d1_48.jpg","mrkdwn_in":["text"],"id":1,"original_url":"https://julialang.slack.com/archives/C67910KEH/p1610130970076500?thread_ts=1610129358.069400&amp;cid=C67910KEH","footer":"From a thread in #general"}],"blocks":[{"type":"rich_text","block_id":"VQj/2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That’s what I meant by "},{"type":"link","url":"https://julialang.slack.com/archives/C67910KEH/p1610130970076500?thread_ts=1610129358.069400&cid=C67910KEH"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"575afb92-13a4-4c91-a6a5-8a08b94d3f29","type":"message","text":"There I was just adding `::Type{T}` to your functions","user":"U6740K1SP","ts":"1610131593.081500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oLp0j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There I was just adding "},{"type":"text","text":"::Type{T}","style":{"code":true}},{"type":"text","text":" to your functions"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"d098c2a5-32c1-4f4b-9f39-a4614178dc3d","type":"message","text":"But `bar3(::Type{T}, c, f) where {T} = sum(f .* T.(c))` still behaves badly","user":"UD0NS8PDF","ts":"1610131642.081700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mxXh/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But "},{"type":"text","text":"bar3(::Type{T}, c, f) where {T} = sum(f .* T.(c))","style":{"code":true}},{"type":"text","text":" still behaves badly"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"b814505d-d435-47e1-8064-5d5d4c6c08a5","type":"message","text":"But I think this is really just the `Ref{T}` blocking it because `Ref{T}` is mutable","user":"U6740K1SP","ts":"1610131643.081900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TxV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But I think this is really just the "},{"type":"text","text":"Ref{T}","style":{"code":true}},{"type":"text","text":" blocking it because "},{"type":"text","text":"Ref{T}","style":{"code":true}},{"type":"text","text":" is mutable"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"99fdf466-e615-4d1a-8e32-2f5afd3b45fb","type":"message","text":"That is, it’s <https://github.com/JuliaLang/julia/issues/18379>","user":"U6740K1SP","ts":"1610131766.082100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"saJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That is, it’s "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/18379"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"a4843497-6e2b-487d-a7d2-37d76b4f4352","type":"message","text":"But why does Ref enter here at all?","user":"UD0NS8PDF","ts":"1610131825.082300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wGx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But why does Ref enter here at all?"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"0296eeb8-47b2-4914-bf93-58e8e71e5e63","type":"message","text":"Because it’s how we make types broadcastable","user":"U6740K1SP","ts":"1610131861.082500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rnnk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Because it’s how we make types broadcastable"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"34824d08-a0ff-4aab-89f4-a876102d050c","type":"message","text":"you can also just use a 1-element tuple","user":"U9VG1AYSG","ts":"1610131884.082700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eap","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can also just use a 1-element tuple"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"77c70b8b-3465-4014-8b58-de653096a2c7","type":"message","text":"Which we could actually trivially change by using a custom type or a 1 tuple","user":"U6A936746","ts":"1610131888.082900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xpv4w","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Which we could actually trivially change by using a custom type or a 1 tuple"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746","reactions":[{"name":"+1","users":["UDXST8ARK"],"count":1}]},{"client_msg_id":"d8ac6d29-1365-4f64-afae-f99b12d5256c","type":"message","text":"No, a 1-tuple will specialize as a `DataType`","user":"U6740K1SP","ts":"1610131902.083100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Uw5W3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No, a 1-tuple will specialize as a "},{"type":"text","text":"DataType","style":{"code":true}}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"0889fe58-d958-49bf-a3e5-55be13edc2ae","type":"message","text":"a custom type then?","user":"U6A936746","ts":"1610131910.083300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3=RX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"a custom type then?"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"b1e633ef-bdde-40f0-8a1a-2d584f0e3001","type":"message","text":"yes, or different function works too","user":"U6740K1SP","ts":"1610131921.083500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CmNmO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, or different function works too"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"ad852f15-020f-407d-abe4-2321eba082a1","type":"message","text":"Oh I see. But `Broadcast.broadcastable(f32)` also contains the Ref","user":"UD0NS8PDF","ts":"1610131925.083700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jsb+V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh I see. But "},{"type":"text","text":"Broadcast.broadcastable(f32)","style":{"code":true}},{"type":"text","text":" also contains the Ref"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"3a823669-eac3-456c-8e82-146bea8e3742","type":"message","text":"And 1-tuples will change the output type if used with scalars","user":"UM30MT6RF","ts":"1610131935.083900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wXv1U","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And 1-tuples will change the output type if used with scalars"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746","reactions":[{"name":"this-is-true","users":["U6740K1SP"],"count":1}]},{"client_msg_id":"90854c32-8f90-493d-a5ab-99b97dfee7eb","type":"message","text":"at some point I tested this carefully, and I did not see any cases in which 1-tuples were any worse.  In fact it seemed to be the best method","user":"U9VG1AYSG","ts":"1610131943.084100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OQY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"at some point I tested this carefully, and I did not see any cases in which 1-tuples were any worse.  In fact it seemed to be the best method"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"3340ea63-8ada-4e24-b6eb-f41a0cfac353","type":"message","text":"&gt; at some point I tested this carefully, and I did not see any cases in which 1-tuples were any worse. In fact it seemed to be the best method\nTypes.  They’re worse if they contain types.","user":"U6740K1SP","ts":"1610132026.084600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=ar2","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"at some point I tested this carefully, and I did not see any cases in which 1-tuples were any worse. In fact it seemed to be the best method"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nTypes.  They’re worse if they contain types."}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"c1d6a471-74c3-4617-8781-2dc29e43c58f","type":"message","text":"I return to my original thesis: julia is a bad programming languge","user":"U6A936746","ts":"1610132054.085100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ox8fe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I return to my original thesis: julia is a bad programming languge"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746","reactions":[{"name":"julia-troll","users":["U6A936746"],"count":1}]},{"client_msg_id":"b835037a-96b9-474e-a3eb-696c2446da1d","type":"message","text":"take it to <#C67TK21LJ|gripes>","user":"U6740K1SP","ts":"1610132064.085300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9wj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"take it to "},{"type":"channel","channel_id":"C67TK21LJ"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"ea509ea5-9728-453c-84b2-a6c7ae0ecec0","type":"message","text":"feels bad man","user":"U6740K1SP","ts":"1610132084.085600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pHa0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"feels bad man"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"ed383156-231f-4378-80bf-2f4a598fb3d8","type":"message","text":"to be clear, it’s still the best language.","user":"U6A936746","ts":"1610132101.085800","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1610132104.000000"},"blocks":[{"type":"rich_text","block_id":"wdV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"to be clear, it’s still the best language."}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746","reactions":[{"name":"correct_answer","users":["U7THT3TM3","U017XL92LJG","UKG4WF8PJ","UDXST8ARK","UGU761DU2"],"count":5}]},{"client_msg_id":"fd07a4b9-4bb8-447d-a781-1372ddf4b8ed","type":"message","text":"I get what you’re saying, and I get your frustration, but grief if it’s not a little hyperbolic","user":"U6740K1SP","ts":"1610132235.086100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AJ1PH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I get what you’re saying, and I get your frustration, but grief if it’s not a little hyperbolic"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"abfcf56b-5d35-481a-a7ad-e56a2657e551","type":"message","text":"How about <#C6FGJ8REC|appreciation>? Thank you to Julia for being best bad programming language! :slightly_smiling_face:","user":"USU9FRPEU","ts":"1610132277.086300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zvaJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How about "},{"type":"channel","channel_id":"C6FGJ8REC"},{"type":"text","text":"? Thank you to Julia for being best bad programming language! "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"45889960-0489-4b45-8c1e-7bd7fd605c56","type":"message","text":"The whole discussion is way over my head, but fwiw I think Julia is good, not bad","user":"U7JQGPGCQ","ts":"1610132438.086600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ik9ES","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The whole discussion is way over my head, but fwiw I think Julia is good, not bad"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746","reactions":[{"name":"+1","users":["U6A936746"],"count":1}]},{"client_msg_id":"73a9c54b-3d85-48ed-9543-5b435efbaab8","type":"message","text":"it’s been a long week. we’re all good here. :slightly_smiling_face:","user":"U6740K1SP","ts":"1610132715.087200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KRxyA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it’s been a long week. we’re all good here. "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746","reactions":[{"name":"slightly_smiling_face","users":["U6A936746"],"count":1}]},{"client_msg_id":"366ee1fb-53ea-4704-969b-b8fd81bc215c","type":"message","text":"anyway, this conversation has been insightful and I think  even actionable.\nProbably should have been in <#C67TK21LJ|gripes>, sorry.","user":"U6A936746","ts":"1610132758.087500","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1610132865.000000"},"blocks":[{"type":"rich_text","block_id":"MVZTv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"anyway, this conversation has been insightful and I think  even actionable.\nProbably should have been in "},{"type":"channel","channel_id":"C67TK21LJ"},{"type":"text","text":", sorry."}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"a1018812-4d4f-4389-b194-128906bedbd5","type":"message","text":"I like the `Scalar` thing, too bad it's more to write :(","user":"UH24GRBLL","ts":"1610132884.087900","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1610132885.000000"},"blocks":[{"type":"rich_text","block_id":"ERU4Q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I like the "},{"type":"text","text":"Scalar","style":{"code":true}},{"type":"text","text":" thing, too bad it's more to write :("}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"16472933-86f7-4911-b67a-3f082fd2f03e","type":"message","text":"I could tell a whole story how today I turned 5 Excel models that were 10MB+ and brought my top of the range i7 CPU to its knees into 150 lines of Julia today, and it took me about 30 minutes to get a first (fully functional) implementation running, just by defining a couple of structs that simplified thinking about the problem and the algorithm to no end","user":"U7JQGPGCQ","ts":"1610132934.088200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rIyH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I could tell a whole story how today I turned 5 Excel models that were 10MB+ and brought my top of the range i7 CPU to its knees into 150 lines of Julia today, and it took me about 30 minutes to get a first (fully functional) implementation running, just by defining a couple of structs that simplified thinking about the problem and the algorithm to no end"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746","reactions":[{"name":"heart","users":["U6A936746","UGU761DU2","U7D4R571D"],"count":3}]},{"client_msg_id":"89e13618-2b2f-4f63-a1c9-b0676115ce37","type":"message","text":"ah, should have read linked issues more, that name is not good anyway","user":"UH24GRBLL","ts":"1610132945.088400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4x/n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah, should have read linked issues more, that name is not good anyway"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"2cb2b169-6f20-4d68-a05f-5487d31c4442","type":"message","text":"we can start with something purely internal. the surface bikeshed has gotten in the way of fixing a real painpoint.","user":"U6740K1SP","ts":"1610133015.088600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dou","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we can start with something purely internal. the surface bikeshed has gotten in the way of fixing a real painpoint."}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"c99bc819-fc08-48e1-871a-fe86856b76ae","type":"message","text":"What is this bikeshed I keep hearing about?","user":"USU9FRPEU","ts":"1610133047.088900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"otCu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What is this bikeshed I keep hearing about?"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746","reactions":[{"name":"bikeshed","users":["U6740K1SP","UDDUC4R1Q","U6C5KSWAC","UDXST8ARK"],"count":4}]},{"client_msg_id":"8a74cc2a-f303-4e47-ad82-38aa62a9312b","type":"message","text":"it's talking about something that's not core to the problem at hand","user":"UH24GRBLL","ts":"1610133203.089100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Y3XV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's talking about something that's not core to the problem at hand"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"2764108f-31a2-4254-9c59-6faa4af6a0ef","type":"message","text":"Imagine a meeting about building a nuclear plant.\n\nFirst all the experts speak about their subject area, and the committee quickly approves each one, because they trust the experts and they know nothing to have an opinion about.\nWhole thing takes 30 minutes\n\nThen the question comes to build a bike shed for the employees.\nSuddenly everyone wants to argue on what color the bike-shed should be, what it should be made of.\nBecause basically everyone knows enough to have an opinion on bike-sheds.\nIt takes another 30 minutes, and extracts a promise to revisit before final construction\n\nFinally, on the agenda is to approve the purchase of  biscuits for the follow up meeting.\nThe debate goes for over an hour, on the best type, on if it is a reasonable use of the organisations money --shouldn’t people bring their own food?\nBy the end of it, not only is their no decision, but everyone is exhausted, and the combined wages of all the experts that have had this completely unnesc debate could have bought a palette of biscuits.\n\n---\n\nBikesheding is where people spend a bunch of type taking about the surface level stuff (the color of the bikeshed), and not the real core of the thing (how the nuclear plant works).\nIts bad because everyone can talk about surface stuff.","user":"U6A936746","ts":"1610133647.089300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pe9cr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Imagine a meeting about building a nuclear plant.\n\nFirst all the experts speak about their subject area, and the committee quickly approves each one, because they trust the experts and they know nothing to have an opinion about.\nWhole thing takes 30 minutes\n\nThen the question comes to build a bike shed for the employees.\nSuddenly everyone wants to argue on what color the bike-shed should be, what it should be made of.\nBecause basically everyone knows enough to have an opinion on bike-sheds.\nIt takes another 30 minutes, and extracts a promise to revisit before final construction\n\nFinally, on the agenda is to approve the purchase of  biscuits for the follow up meeting.\nThe debate goes for over an hour, on the best type, on if it is a reasonable use of the organisations money --shouldn’t people bring their own food?\nBy the end of it, not only is their no decision, but everyone is exhausted, and the combined wages of all the experts that have had this completely unnesc debate could have bought a palette of biscuits.\n\n---\n\nBikesheding is where people spend a bunch of type taking about the surface level stuff (the color of the bikeshed), and not the real core of the thing (how the nuclear plant works).\nIts bad because everyone can talk about surface stuff."}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746","reactions":[{"name":"correct_answer","users":["U6740K1SP","U011V2YN59N","U01CQTKB86N","UH24GRBLL","UKG4WF8PJ","U6C5KSWAC","UDXST8ARK","U6795JH6H"],"count":8}]},{"client_msg_id":"25422bfd-de08-4d29-9955-116c37e81d69","type":"message","text":"<https://en.wikipedia.org/wiki/Law_of_triviality>","user":"U6740K1SP","ts":"1610134046.090500","team":"T68168MUP","attachments":[{"image_url":"https://upload.wikimedia.org/wikipedia/commons/thumb/f/f3/Bike_shed_15d06.jpg/1200px-Bike_shed_15d06.jpg","image_width":1200,"image_height":900,"image_bytes":280545,"title":"Law of triviality","title_link":"https://en.wikipedia.org/wiki/Law_of_triviality","from_url":"https://en.wikipedia.org/wiki/Law_of_triviality","author_name":"Wikipedia","author_link":"https://en.wikipedia.org/","text":"Law of triviality is C. Northcote Parkinson's 1957 argument that people within an organization commonly or typically give disproportionate weight to trivial issues. Parkinson provides the example of a fictional committee whose job was to approve the plans for a nuclear power plant spending the majority of its time on discussions about relatively minor but easy-to-grasp issues, such as what materials to use for the staff bike shed, while neglecting the proposed design of the plant itself, which is far more important and a far more difficult and complex task.\nThe law has been applied to software development and other activities. The terms bicycle-shed effect, bike-shed effect, and bike-shedding were coined as metaphors to illuminate the law of triviality; it was popularised in the Berkeley Software Distribution community by the Danish software developer Poul-Henning Kamp in 1999 and has spread from there to the whole software industry.","fallback":"wikipedia: Law of triviality","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png","id":1,"original_url":"https://en.wikipedia.org/wiki/Law_of_triviality"}],"blocks":[{"type":"rich_text","block_id":"iEr","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://en.wikipedia.org/wiki/Law_of_triviality"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"e815fd81-2721-4727-bb02-98e03b3f3236","type":"message","text":"Oh awesome, I never knew this term came from Parkinson","user":"UD0NS8PDF","ts":"1610134452.092900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dnNPf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh awesome, I never knew this term came from Parkinson"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"71193125-9f99-450b-a32e-75f1c2196725","type":"message","text":"for what it’s worth, this kind of problem worries me the least because it’s “just” a performance bug, not a design mistake","user":"U6795JH6H","ts":"1610142523.099400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"G3yu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"for what it’s worth, this kind of problem worries me the least because it’s “just” a performance bug, not a design mistake"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746","reactions":[{"name":"point_up","users":["U69J94HT9","U8D9768Q6","U6740K1SP"],"count":3},{"name":"true","users":["U6A936746"],"count":1}]},{"client_msg_id":"0f600505-c64f-4d19-8101-1e426c7b52a8","type":"message","text":"there are plenty of design mistakes too, but this isn’t, as I understand it, one of them","user":"U6795JH6H","ts":"1610142537.099600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bGi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there are plenty of design mistakes too, but this isn’t, as I understand it, one of them"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"7c3e0308-bfe1-46c6-8cd7-c4c4a2002273","type":"message","text":"Yeah, this isn't even semantically part of the language. It's just a missed / misfired optimization","user":"U8D9768Q6","ts":"1610143500.104300","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1610143508.000000"},"blocks":[{"type":"rich_text","block_id":"/EVQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, this isn't even semantically part of the language. It's just a missed / misfired optimization"}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746"},{"client_msg_id":"b075c588-5467-4565-a1be-32e393841ff0","type":"message","text":"Indeed.\nThough it's a bit of a worry when the thing that semantically *is* more optimal is actually less optimal.\nIt makes it hard to reason about performance.\n\nBut like Stefan said it's merely a bug.\nCode has bugs.\nBugs can be fixed.","user":"U6A936746","ts":"1610143692.105000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EieZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Indeed.\nThough it's a bit of a worry when the thing that semantically "},{"type":"text","text":"is ","style":{"bold":true}},{"type":"text","text":"more optimal is actually less optimal.\nIt makes it hard to reason about performance.\n\nBut like Stefan said it's merely a bug.\nCode has bugs.\nBugs can be fixed."}]}]}],"thread_ts":"1610129358.069400","parent_user_id":"U6A936746","reactions":[{"name":"debug","users":["UH24GRBLL","USU9FRPEU","U01CQTKB86N"],"count":3}]}]