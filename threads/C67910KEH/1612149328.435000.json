[{"client_msg_id":"8afa208d-ab08-4a24-82be-1cec7fc6cf1a","type":"message","text":"<@UC7AF7NSU>  tapir is some kinda parallel llvm extension? What will it facilitate that we can't currently do?","user":"UDGT4PM41","ts":"1612149328.435000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"z0L","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UC7AF7NSU"},{"type":"text","text":"  tapir is some kinda parallel llvm extension? What will it facilitate that we can't currently do?"}]}]}],"thread_ts":"1612149328.435000","reply_count":2,"reply_users_count":2,"latest_reply":"1612150966.435300","reply_users":["UC7AF7NSU","U6QGE7S86"],"subscribed":false},{"client_msg_id":"39cc9464-a11b-4a8b-b543-1bbd328947e9","type":"message","text":"yeah, I think LLVM extension is a correct way to put it but it's more generally a strategy for making the compiler aware of task-based parallelism. so, Tapir is beneficial even at Julia IR level. you can, for example, const prop or type inference across `@spawn` boundaries","user":"UC7AF7NSU","ts":"1612149582.435100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sXhL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, I think LLVM extension is a correct way to put it but it's more generally a strategy for making the compiler aware of task-based parallelism. so, Tapir is beneficial even at Julia IR level. you can, for example, const prop or type inference across "},{"type":"text","text":"@spawn","style":{"code":true}},{"type":"text","text":" boundaries"}]}]}],"thread_ts":"1612149328.435000","parent_user_id":"UDGT4PM41"},{"client_msg_id":"d1eec7e9-89a8-4c4d-94e2-67a0570e48e8","type":"message","text":"Their canonical example is that of you wrote a silly parallel for loop that calculates the average of two equal length vectors and included the division isnide the tight loop thats\n1. A very simple loop invariant code motion optimization that\n2. Gets bailed on by the compiler because it is within a parallel region.\nTapir allows semantics for optimizations across parallel and sequential regions per se","user":"U6QGE7S86","ts":"1612150966.435300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=/88","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Their canonical example is that of you wrote a silly parallel for loop that calculates the average of two equal length vectors and included the division isnide the tight loop thats\n1. A very simple loop invariant code motion optimization that\n2. Gets bailed on by the compiler because it is within a parallel region.\nTapir allows semantics for optimizations across parallel and sequential regions per se"}]}]}],"thread_ts":"1612149328.435000","parent_user_id":"UDGT4PM41"}]