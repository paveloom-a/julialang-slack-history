[{"client_msg_id":"00B96D8C-4116-44F4-895A-68F239D4C57B","type":"message","text":"What if we changed the C++ in the reference implementation of Julia to Rust?","user":"U01GC3N3ZJT","ts":"1609600176.276600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XufK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What if we changed the C++ in the reference implementation of Julia to Rust?"}]}]}],"thread_ts":"1609600176.276600","reply_count":15,"reply_users_count":5,"latest_reply":"1609617738.319900","reply_users":["U6A936746","U01GC3N3ZJT","U012FH66MFW","U013V2CFZAN","U67BJLYCS"],"subscribed":false},{"client_msg_id":"a2f997bb-2b23-454d-b4be-b0b1a235e146","type":"message","text":"The only C++ in Julia is for the LLVM codegen.\nAnd it is specifically there because only the C++ library for LLVM is complete.","user":"U6A936746","ts":"1609600620.280400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9lus","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The only C++ in Julia is for the LLVM codegen.\nAnd it is specifically there because only the C++ library for LLVM is complete."}]}]}],"thread_ts":"1609600176.276600","parent_user_id":"U01GC3N3ZJT","reactions":[{"name":"correct_answer","users":["U7THT3TM3"],"count":1}]},{"client_msg_id":"2A6344D3-B409-43EE-BAE2-E58AEDD7ABD1","type":"message","text":"Ohhhh OK, Nevermind!","user":"U01GC3N3ZJT","ts":"1609601046.287400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"URg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ohhhh OK, Nevermind!"}]}]}],"thread_ts":"1609600176.276600","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"e2e413d9-d843-427b-a85f-b38d8f652758","type":"message","text":"Most of the non-julia parts of Julia are C. and I guess you could   it with rust, though making that play nice with `ccall` is nontrivial,\nand it's still redoing work which could be spent doing something more important","user":"U6A936746","ts":"1609601446.293000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"e0V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Most of the non-julia parts of Julia are C. and I guess you could   it with rust, though making that play nice with "},{"type":"text","text":"ccall","style":{"code":true}},{"type":"text","text":" is nontrivial,\nand it's still redoing work which could be spent doing something more important"}]}]}],"thread_ts":"1609600176.276600","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"40f74a4d-2f84-4fa1-8f15-8f2fd50d6cfc","type":"message","text":"... with no clear benefit whatsoever...","user":"U012FH66MFW","ts":"1609601524.293200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5Cms","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"... with no clear benefit whatsoever..."}]}]}],"thread_ts":"1609600176.276600","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"81e5c688-a2dd-4819-8c8e-a49f495a61da","type":"message","text":"<@U012FH66MFW> probably stupid suggestion here, but as a potential benefit it occurred to me  ... how about leveraging Rust's borrow checker for Julia instead of the GC? ... not even sure whether this can be done and/or how","user":"U013V2CFZAN","ts":"1609607746.299100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0j54","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U012FH66MFW"},{"type":"text","text":" probably stupid suggestion here, but as a potential benefit it occurred to me  ... how about leveraging Rust's borrow checker for Julia instead of the GC? ... not even sure whether this can be done and/or how"}]}]}],"thread_ts":"1609600176.276600","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"6fec7917-cf65-4a89-b971-d1a166ab8d19","type":"message","text":"No, that would require a drastic language change, and it is independent of how and in what language the runtime is implemented","user":"U67BJLYCS","ts":"1609611579.307400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MZzvd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No, that would require a drastic language change, and it is independent of how and in what language the runtime is implemented"}]}]}],"thread_ts":"1609600176.276600","parent_user_id":"U01GC3N3ZJT","reactions":[{"name":"true","users":["U6A936746"],"count":1}]},{"client_msg_id":"4de4b8c0-4795-4677-818f-e70ce2766a5c","type":"message","text":"fair ... was just thinking out loud","user":"U013V2CFZAN","ts":"1609611656.307900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CIz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"fair ... was just thinking out loud"}]}]}],"thread_ts":"1609600176.276600","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"124d4b9c-f9f3-4d99-85ea-fa01fa4e6817","type":"message","text":"No worries, it's important to think about what are language semantics and what are runtime implementation details","user":"U67BJLYCS","ts":"1609611762.309700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UnA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No worries, it's important to think about what are language semantics and what are runtime implementation details"}]}]}],"thread_ts":"1609600176.276600","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"becef162-3d99-453d-9783-fc3ffa7ee8d3","type":"message","text":"I know that Rust semantics to allow the borrow checker are a bit cumbersome. However, was thinking that perhaps some meta-programming could help here ... again, not sure how","user":"U013V2CFZAN","ts":"1609612649.310600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"D/p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I know that Rust semantics to allow the borrow checker are a bit cumbersome. However, was thinking that perhaps some meta-programming could help here ... again, not sure how"}]}]}],"thread_ts":"1609600176.276600","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"252c382f-6f68-4369-9742-815fc689c416","type":"message","text":"Rust borrow checker forces a programmer to think about ownership of memory and mutability","user":"U67BJLYCS","ts":"1609615061.314200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hzmG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Rust borrow checker forces a programmer to think about ownership of memory and mutability"}]}]}],"thread_ts":"1609600176.276600","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"820854c4-4d40-4bb7-87d7-ac731a753192","type":"message","text":"A GC frees the programmer from worrying about ownership","user":"U67BJLYCS","ts":"1609615116.314400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=gUSf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"A GC frees the programmer from worrying about ownership"}]}]}],"thread_ts":"1609600176.276600","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"906604a7-ae37-409b-b4aa-3153bbd676ff","type":"message","text":"well ... yes and no, when you want to just write something quick the GC frees you from that, that is true. However, when you want to optimize your code for performance you need to start thinking which part of your code is allocating or not, and how to reuse your allocated arrays or not. Also, for multi-threading you also must think about immutability and allocations as well. If you are already doing this, perhaps you can as well introduce some extra macros that give you access to a borrow checker.","user":"U013V2CFZAN","ts":"1609615992.316600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TN2t","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well ... yes and no, when you want to just write something quick the GC frees you from that, that is true. However, when you want to optimize your code for performance you need to start thinking which part of your code is allocating or not, and how to reuse your allocated arrays or not. Also, for multi-threading you also must think about immutability and allocations as well. If you are already doing this, perhaps you can as well introduce some extra macros that give you access to a borrow checker."}]}]}],"thread_ts":"1609600176.276600","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"260DD9C7-CF4C-4C0B-B87A-193707E33811","type":"message","text":"<@U013V2CFZAN> no offense, but that question/suggestion is  \"not even wrong\" :-). It just doesn't make sense","user":"U012FH66MFW","ts":"1609617444.319500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iL6","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U013V2CFZAN"},{"type":"text","text":" no offense, but that question/suggestion is  \"not even wrong\" :-). It just doesn't make sense"}]}]}],"thread_ts":"1609600176.276600","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"c583e0d6-4abd-4232-9380-649453525e29","type":"message","text":"non taken, it's a random idea","user":"U013V2CFZAN","ts":"1609617477.319700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tT9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"non taken, it's a random idea"}]}]}],"thread_ts":"1609600176.276600","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"57bc9fed-ecae-430e-93a1-bf49e92be6cb","type":"message","text":"but was thinking that that's the main advantage of using Rust (the borrow checker) and one pain point of Julia is optimizing memory and/or real time performance which the borrow checker could solve.","user":"U013V2CFZAN","ts":"1609617738.319900","team":"T68168MUP","edited":{"user":"U013V2CFZAN","ts":"1609617767.000000"},"blocks":[{"type":"rich_text","block_id":"+Qqn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but was thinking that that's the main advantage of using Rust (the borrow checker) and one pain point of Julia is optimizing memory and/or real time performance which the borrow checker could solve."}]}]}],"thread_ts":"1609600176.276600","parent_user_id":"U01GC3N3ZJT"}]