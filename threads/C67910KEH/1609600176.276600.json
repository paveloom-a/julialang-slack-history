[{"client_msg_id":"00B96D8C-4116-44F4-895A-68F239D4C57B","type":"message","text":"What if we changed the C++ in the reference implementation of Julia to Rust?","user":"U01GC3N3ZJT","ts":"1609600176.276600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XufK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What if we changed the C++ in the reference implementation of Julia to Rust?"}]}]}],"thread_ts":"1609600176.276600","reply_count":5,"reply_users_count":4,"latest_reply":"1609607746.299100","reply_users":["U6A936746","U01GC3N3ZJT","U012FH66MFW","U013V2CFZAN"],"subscribed":false},{"client_msg_id":"a2f997bb-2b23-454d-b4be-b0b1a235e146","type":"message","text":"The only C++ in Julia is for the LLVM codegen.\nAnd it is specifically there because only the C++ library for LLVM is complete.","user":"U6A936746","ts":"1609600620.280400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9lus","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The only C++ in Julia is for the LLVM codegen.\nAnd it is specifically there because only the C++ library for LLVM is complete."}]}]}],"thread_ts":"1609600176.276600","parent_user_id":"U01GC3N3ZJT","reactions":[{"name":"correct_answer","users":["U7THT3TM3"],"count":1}]},{"client_msg_id":"2A6344D3-B409-43EE-BAE2-E58AEDD7ABD1","type":"message","text":"Ohhhh OK, Nevermind!","user":"U01GC3N3ZJT","ts":"1609601046.287400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"URg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ohhhh OK, Nevermind!"}]}]}],"thread_ts":"1609600176.276600","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"e2e413d9-d843-427b-a85f-b38d8f652758","type":"message","text":"Most of the non-julia parts of Julia are C. and I guess you could   it with rust, though making that play nice with `ccall` is nontrivial,\nand it's still redoing work which could be spent doing something more important","user":"U6A936746","ts":"1609601446.293000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"e0V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Most of the non-julia parts of Julia are C. and I guess you could   it with rust, though making that play nice with "},{"type":"text","text":"ccall","style":{"code":true}},{"type":"text","text":" is nontrivial,\nand it's still redoing work which could be spent doing something more important"}]}]}],"thread_ts":"1609600176.276600","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"40f74a4d-2f84-4fa1-8f15-8f2fd50d6cfc","type":"message","text":"... with no clear benefit whatsoever...","user":"U012FH66MFW","ts":"1609601524.293200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5Cms","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"... with no clear benefit whatsoever..."}]}]}],"thread_ts":"1609600176.276600","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"81e5c688-a2dd-4819-8c8e-a49f495a61da","type":"message","text":"<@U012FH66MFW> probably stupid suggestion here, but as a potential benefit it occurred to me  ... how about leveraging Rust's borrow checker for Julia instead of the GC? ... not even sure whether this can be done and/or how","user":"U013V2CFZAN","ts":"1609607746.299100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0j54","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U012FH66MFW"},{"type":"text","text":" probably stupid suggestion here, but as a potential benefit it occurred to me  ... how about leveraging Rust's borrow checker for Julia instead of the GC? ... not even sure whether this can be done and/or how"}]}]}],"thread_ts":"1609600176.276600","parent_user_id":"U01GC3N3ZJT"}]