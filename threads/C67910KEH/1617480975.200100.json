[{"client_msg_id":"d9526432-035d-453a-bc04-3938b56d5669","type":"message","text":"Hello! beginner question incomming\nI have two functions which should be (approximate---to numerical error) inverses of each-other. Is there any good way to unit test this except for trying a few values?\ni.e. in Haskell I'd use \"QuickCheck\" for this (to test properties)","user":"U01Q7MHAE5U","ts":"1617480975.200100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WfU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hello! beginner question incomming\nI have two functions which should be (approximate---to numerical error) inverses of each-other. Is there any good way to unit test this except for trying a few values?\ni.e. in Haskell I'd use \"QuickCheck\" for this (to test properties)"}]}]}],"thread_ts":"1617480975.200100","reply_count":5,"reply_users_count":3,"latest_reply":"1617483186.201000","reply_users":["U0179G7FG4F","U012XER8K4M","U01Q7MHAE5U"],"is_locked":false,"subscribed":false},{"client_msg_id":"e719474c-b470-4a5c-99d6-3490c9e11160","type":"message","text":"I'd do this by making a vector `x`of test points and then using `all( f.(g.(x)) .==x )`","user":"U0179G7FG4F","ts":"1617482475.200200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dku8d","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'd do this by making a vector `x`of test points and then using "},{"type":"text","text":"all( f.(g.(x)) .==x )","style":{"code":true}}]}]}],"thread_ts":"1617480975.200100","parent_user_id":"U01Q7MHAE5U"},{"client_msg_id":"187a6b03-353e-45ef-af7d-a9bbfbc3c14c","type":"message","text":"Actually you want `≈` for approximate equality","user":"U0179G7FG4F","ts":"1617482525.200400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"f+N3I","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Actually you want "},{"type":"text","text":"≈","style":{"code":true}},{"type":"text","text":" for approximate equality"}]}]}],"thread_ts":"1617480975.200100","parent_user_id":"U01Q7MHAE5U"},{"client_msg_id":"b975214a-2e3f-4da3-bce3-837d6dcd200f","type":"message","text":"Nothing stops you from generating randomized inputs (though I wouldn't prefer it) (in my very limited experience, quickcheck was mostly good at finding cornercases, i.e. \"NaN/0/inf\" etc. which.. probably won't work in this case anyway).","user":"U012XER8K4M","ts":"1617482574.200600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ua+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Nothing stops you from generating randomized inputs (though I wouldn't prefer it) (in my very limited experience, quickcheck was mostly good at finding cornercases, i.e. \"NaN/0/inf\" etc. which.. probably won't work in this case anyway)."}]}]}],"thread_ts":"1617480975.200100","parent_user_id":"U01Q7MHAE5U"},{"client_msg_id":"316c3946-b56b-41bc-ae8a-2d7695948584","type":"message","text":"Indeed, from my experience it's usually bad practice to generate random inputs","user":"U01Q7MHAE5U","ts":"1617482903.200800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aG1m","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Indeed, from my experience it's usually bad practice to generate random inputs"}]}]}],"thread_ts":"1617480975.200100","parent_user_id":"U01Q7MHAE5U"},{"client_msg_id":"68431c73-356a-4fb7-9ca9-250d8fbf1979","type":"message","text":"I often use `exp10.(range(-700.0, 700.0, length=10^6))` That gets you a good range of small, medium and large numbers (technichally you also need the negative version of that), and adding tests for `Inf` and `Nan` are a good idea)","user":"U0179G7FG4F","ts":"1617483186.201000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"flyqS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I often use "},{"type":"text","text":"exp10.(range(-700.0, 700.0, length=10^6))","style":{"code":true}},{"type":"text","text":" That gets you a good range of small, medium and large numbers (technichally you also need the negative version of that), and adding tests for "},{"type":"text","text":"Inf","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"Nan","style":{"code":true}},{"type":"text","text":" are a good idea)"}]}]}],"thread_ts":"1617480975.200100","parent_user_id":"U01Q7MHAE5U"}]