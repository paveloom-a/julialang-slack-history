[{"client_msg_id":"e298ab06-1839-4baf-9f3d-3eb8aa62da19","type":"message","text":"hello all, I have a dilemma... very frequently I have to make the very hard choice between whether to write some functions for a `Vector{UInt8}` or an `IO`... these are *almost* interchangeable, but an `IO` is a mutable struct and it costs resources to allocate if I want to wrap a `Vector{UInt8}` in an `IOBuffer`.  I often think that I should write everything for `Vector{UInt8}` because of this, but this will assume I can always read in the entire buffer I need first, and indeed in the rare cases when it just can't work this way things can get rather tricky.  Other times, an `IO` actually turns out to be more convenient (particularly because of the `read(io, T)` methods).  Is there some way permanently out of this dilemma of choice?  Am I being ridiculous to worry about the time it takes to allocate an `IO` in IO contexts? (my background is physics so I'm very used to *only* worrying about CPU cycles)","user":"U9VG1AYSG","ts":"1614735210.429500","team":"T68168MUP","edited":{"user":"U9VG1AYSG","ts":"1614735234.000000"},"blocks":[{"type":"rich_text","block_id":"+UgFM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hello all, I have a dilemma... very frequently I have to make the very hard choice between whether to write some functions for a "},{"type":"text","text":"Vector{UInt8}","style":{"code":true}},{"type":"text","text":" or an "},{"type":"text","text":"IO","style":{"code":true}},{"type":"text","text":"... these are "},{"type":"text","text":"almost","style":{"bold":true}},{"type":"text","text":" interchangeable, but an "},{"type":"text","text":"IO","style":{"code":true}},{"type":"text","text":" is a mutable struct and it costs resources to allocate if I want to wrap a "},{"type":"text","text":"Vector{UInt8}","style":{"code":true}},{"type":"text","text":" in an "},{"type":"text","text":"IOBuffer","style":{"code":true}},{"type":"text","text":".  I often think that I should write everything for "},{"type":"text","text":"Vector{UInt8}","style":{"code":true}},{"type":"text","text":" because of this, but this will assume I can always read in the entire buffer I need first, and indeed in the rare cases when it just can't work this way things can get rather tricky.  Other times, an "},{"type":"text","text":"IO","style":{"code":true}},{"type":"text","text":" actually turns out to be more convenient (particularly because of the "},{"type":"text","text":"read(io, T)","style":{"code":true}},{"type":"text","text":" methods).  Is there some way permanently out of this dilemma of choice?  Am I being ridiculous to worry about the time it takes to allocate an "},{"type":"text","text":"IO","style":{"code":true}},{"type":"text","text":" in IO contexts? (my background is physics so I'm very used to "},{"type":"text","text":"only","style":{"bold":true}},{"type":"text","text":" worrying about CPU cycles)"}]}]}],"thread_ts":"1614735210.429500","reply_count":4,"reply_users_count":3,"latest_reply":"1614735657.430400","reply_users":["U680THK2S","U019K6Q9N15","U9VG1AYSG"],"subscribed":false},{"client_msg_id":"33f84d9c-d0cb-4fe8-9dc1-3c6ff4b37524","type":"message","text":"Creating an `IOBuffer` atop an existing array should be quite negligible; I can't imagine a situation in which that could a bottleneck. Often I write things like\n```f(io::IO) = # the real shit\nf(bytes) = f(IOBuffer(bytes))```\n","user":"U680THK2S","ts":"1614735473.429700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wzmIr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Creating an "},{"type":"text","text":"IOBuffer","style":{"code":true}},{"type":"text","text":" atop an existing array should be quite negligible; I can't imagine a situation in which that could a bottleneck. Often I write things like\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"f(io::IO) = # the real shit\nf(bytes) = f(IOBuffer(bytes))"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1614735210.429500","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"23c63f84-58ef-4357-9381-a944c298f8d0","type":"message","text":"I very much want the answer to be\n&gt; being ridiculous to worry about the time it takes to allocate an `IO` in IO contexts\nbut I'll defer to other folks opinions","user":"U019K6Q9N15","ts":"1614735482.429900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/e0Ll","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I very much want the answer to be\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"being ridiculous to worry about the time it takes to allocate an "},{"type":"text","text":"IO","style":{"code":true}},{"type":"text","text":" in IO contexts"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"but I'll defer to other folks opinions"}]}]}],"thread_ts":"1614735210.429500","parent_user_id":"U9VG1AYSG","reactions":[{"name":"point_up","users":["U9VG1AYSG"],"count":1}]},{"client_msg_id":"68ebfd1b-3b50-4173-94ba-621734ccc204","type":"message","text":"yeah, this was pretty much my sentiment... I can't imagine creating `IOBuffer`s being prohibitive, but when I do microbenchmarks creating the IOBuffers makes me feel dirty, and I start worrying about if I'll ever have to do this 10^12 times in a row","user":"U9VG1AYSG","ts":"1614735595.430200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uM8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, this was pretty much my sentiment... I can't imagine creating `IOBuffer`s being prohibitive, but when I do microbenchmarks creating the IOBuffers makes me feel dirty, and I start worrying about if I'll ever have to do this 10^12 times in a row"}]}]}],"thread_ts":"1614735210.429500","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"1b6389dc-307a-45dd-bd9b-2397f098748e","type":"message","text":"<@U680THK2S>, you seem experienced in this IO stuff, do you generally feel that `IO` are more useful than `Vector{UInt8}`?  I find `Vector{UInt8}` easier to work with in a lot of ways, but `read(io, T)` is often so important I'm starting to prefer `IO`","user":"U9VG1AYSG","ts":"1614735657.430400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"srLa","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U680THK2S"},{"type":"text","text":", you seem experienced in this IO stuff, do you generally feel that "},{"type":"text","text":"IO","style":{"code":true}},{"type":"text","text":" are more useful than "},{"type":"text","text":"Vector{UInt8}","style":{"code":true}},{"type":"text","text":"?  I find "},{"type":"text","text":"Vector{UInt8}","style":{"code":true}},{"type":"text","text":" easier to work with in a lot of ways, but "},{"type":"text","text":"read(io, T)","style":{"code":true}},{"type":"text","text":" is often so important I'm starting to prefer "},{"type":"text","text":"IO","style":{"code":true}}]}]}],"thread_ts":"1614735210.429500","parent_user_id":"U9VG1AYSG"}]