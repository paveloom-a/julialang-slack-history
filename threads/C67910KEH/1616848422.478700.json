[{"client_msg_id":"e9f1e181-caea-49f0-9872-1cf68ab479ad","type":"message","text":"What is the status of Cxx now? 1.6 manual says: \"For direct C++ interfacing, see the <https://github.com/Keno/Cxx.jl|Cxx> package.\", the Cxx package says: \"*Please, note that Cxx.jl only works (out of the box) currently with Julia 1.1.x to 1.3.x, i.e. with no currently supported Julia\"*","user":"U7LC4PFU4","ts":"1616848422.478700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"82/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What is the status of Cxx now? 1.6 manual says: \"For direct C++ interfacing, see the "},{"type":"link","url":"https://github.com/Keno/Cxx.jl","text":"Cxx"},{"type":"text","text":" package.\", the Cxx package says: \""},{"type":"text","text":"Please, note that Cxx.jl only works (out of the box) currently with Julia 1.1.x to 1.3.x, i.e. with no currently supported Julia\"","style":{"bold":true}}]}]}],"thread_ts":"1616848422.478700","reply_count":19,"reply_users_count":8,"latest_reply":"1617461385.185900","reply_users":["UKVBDU6HF","UDB26738Q","U01RB7WR48H","U679VPJ8L","U72B7LTMX","UDFRYRTBL","UC022KXA8","U6DN7UPJ7"],"is_locked":false,"subscribed":false},{"client_msg_id":"44921870-ba00-41c7-bbcf-96a2424e646a","type":"message","text":"Support for C++ is just starting to be added to <https://github.com/analytech-solutions/CBinding.jl|CBinding.jl> so an alternative to Cxx.jl is still a ways out for comprehensive C++ support.  More trivial C++ support could be available sooner though.","user":"UKVBDU6HF","ts":"1616850413.479000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8Jc2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Support for C++ is just starting to be added to "},{"type":"link","url":"https://github.com/analytech-solutions/CBinding.jl","text":"CBinding.jl"},{"type":"text","text":" so an alternative to Cxx.jl is still a ways out for comprehensive C++ support.  More trivial C++ support could be available sooner though."}]}]}],"thread_ts":"1616848422.478700","parent_user_id":"U7LC4PFU4"},{"client_msg_id":"62deb6a5-53c5-4b5a-8a9c-bb3ff4822f22","type":"message","text":"Will CBinding.jl make it possible to call directly into the C++ library without further rebuilding?","user":"UDB26738Q","ts":"1616860918.481200","team":"T68168MUP","edited":{"user":"UDB26738Q","ts":"1616860931.000000"},"blocks":[{"type":"rich_text","block_id":"frH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Will CBinding.jl make it possible to call directly into the C++ library without further rebuilding?"}]}]}],"thread_ts":"1616848422.478700","parent_user_id":"U7LC4PFU4"},{"client_msg_id":"d42e27cf-f42e-4e98-8d3d-8d6cf5dc267a","type":"message","text":"Yes, that's the idea!","user":"UKVBDU6HF","ts":"1616864710.482200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dZay6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, that's the idea!"}]}]}],"thread_ts":"1616848422.478700","parent_user_id":"U7LC4PFU4"},{"client_msg_id":"b3962212-f78f-4295-bedb-5993465e7758","type":"message","text":"that'd be very interesting!  how does it deal with name mangling?","user":"UDB26738Q","ts":"1616864736.482400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WSZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that'd be very interesting!  how does it deal with name mangling?"}]}]}],"thread_ts":"1616848422.478700","parent_user_id":"U7LC4PFU4"},{"client_msg_id":"51affc2e-04fa-4f7d-9ef2-602001c5627c","type":"message","text":"Conceptually it is kind of like this:\n```prettyName(arg::Int64) = ccall(:_ZcvprettyNameXyzZ, Cvoid, (Int64,), arg)```","user":"UKVBDU6HF","ts":"1616864900.482600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LXSD+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Conceptually it is kind of like this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"prettyName(arg::Int64) = ccall(:_ZcvprettyNameXyzZ, Cvoid, (Int64,), arg)"}]}]}],"thread_ts":"1616848422.478700","parent_user_id":"U7LC4PFU4"},{"client_msg_id":"6316d8eb-7962-4645-9ec3-8f7da59f2089","type":"message","text":"ok, but how do you do the translation `prettyName` -&gt; `_ZcvprettyNameXyzZ`? :sweat_smile:  I think different compilers can do different mangling?","user":"UDB26738Q","ts":"1616864957.482800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pE+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ok, but how do you do the translation "},{"type":"text","text":"prettyName","style":{"code":true}},{"type":"text","text":" -> "},{"type":"text","text":"_ZcvprettyNameXyzZ","style":{"code":true}},{"type":"text","text":"? "},{"type":"emoji","name":"sweat_smile"},{"type":"text","text":"  I think different compilers can do different mangling?"}]}]}],"thread_ts":"1616848422.478700","parent_user_id":"U7LC4PFU4"},{"client_msg_id":"9d17a656-9791-4a97-a9e3-aea41ff54a09","type":"message","text":"libclang knows - <https://clang.llvm.org/doxygen/group__CINDEX__MANGLE.html>","user":"UKVBDU6HF","ts":"1616865073.483100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZTvz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"libclang knows - "},{"type":"link","url":"https://clang.llvm.org/doxygen/group__CINDEX__MANGLE.html"}]}]}],"thread_ts":"1616848422.478700","parent_user_id":"U7LC4PFU4","reactions":[{"name":"+1","users":["UHBF252VC"],"count":1}]},{"client_msg_id":"d0f90464-4b79-473e-9096-a062e07bfba5","type":"message","text":"oh, that's cool.  so that's what Cxx used to do?  I've never looked into how Cxx (used to) works","user":"UDB26738Q","ts":"1616865229.483400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JQpr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh, that's cool.  so that's what Cxx used to do?  I've never looked into how Cxx (used to) works"}]}]}],"thread_ts":"1616848422.478700","parent_user_id":"U7LC4PFU4"},{"client_msg_id":"2cea876f-293f-4618-9074-8e2845d8e47d","type":"message","text":"Cxx is kind of bolting a C++ compiler onto Julia, I think.  CBinding.jl is just using libclang to translate C/C++ syntax into Julia equivalent constructs on-the-fly, so a lighter-weight, less intrusive, and more easily maintainable package.  Not sure yet how well C++ templates will translate though...","user":"UKVBDU6HF","ts":"1616865540.483600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qHfg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Cxx is kind of bolting a C++ compiler onto Julia, I think.  CBinding.jl is just using libclang to translate C/C++ syntax into Julia equivalent constructs on-the-fly, so a lighter-weight, less intrusive, and more easily maintainable package.  Not sure yet how well C++ templates will translate though..."}]}]}],"thread_ts":"1616848422.478700","parent_user_id":"U7LC4PFU4","reactions":[{"name":"+1","users":["UDB26738Q","UPQP0RWTH"],"count":2}]},{"client_msg_id":"c8b4a6d6-84d2-48d2-be83-93431967037b","type":"message","text":"For interfacing with C++ libraries, I’ve had success writing a C++ shim with functions defined as `extern C`, compiling to a shared object, and calling my shim functions with ccall: <https://github.com/mattwigway/TransitRouter.jl/blob/main/cxx/osrmjl.cpp>","user":"U01RB7WR48H","ts":"1616874313.485600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ElaRL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For interfacing with C++ libraries, I’ve had success writing a C++ shim with functions defined as "},{"type":"text","text":"extern C","style":{"code":true}},{"type":"text","text":", compiling to a shared object, and calling my shim functions with ccall: "},{"type":"link","url":"https://github.com/mattwigway/TransitRouter.jl/blob/main/cxx/osrmjl.cpp"}]}]}],"thread_ts":"1616848422.478700","parent_user_id":"U7LC4PFU4"},{"client_msg_id":"31191055-1719-4cd4-9b40-65a1b9387156","type":"message","text":"yeah, that's good, but unfortunately it's not always possible to do that","user":"UDB26738Q","ts":"1616874363.485800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3GUL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, that's good, but unfortunately it's not always possible to do that"}]}]}],"thread_ts":"1616848422.478700","parent_user_id":"U7LC4PFU4"},{"client_msg_id":"16b02af2-a627-4bad-b483-bd23c25bfd50","type":"message","text":"CxxWrap.jl is probably the most battle tested way to do c++ in Julia currently. It does something conceptually similar to what <@U01RB7WR48H> suggests. It been used to wrap QT in Julia, so it's battle tested.","user":"U679VPJ8L","ts":"1616874768.487900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Mkc+e","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"CxxWrap.jl is probably the most battle tested way to do c++ in Julia currently. It does something conceptually similar to what "},{"type":"user","user_id":"U01RB7WR48H"},{"type":"text","text":" suggests. It been used to wrap QT in Julia, so it's battle tested."}]}]}],"thread_ts":"1616848422.478700","parent_user_id":"U7LC4PFU4"},{"client_msg_id":"5a23969d-f23b-4507-b593-bc6ba75dd5d8","type":"message","text":"Cbinding however looks very cool, I'll follow it with interest","user":"U679VPJ8L","ts":"1616874796.488100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yAp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Cbinding however looks very cool, I'll follow it with interest"}]}]}],"thread_ts":"1616848422.478700","parent_user_id":"U7LC4PFU4"},{"type":"message","subtype":"thread_broadcast","text":"I do wish `Cxx.jl` would receive more attention. When it works, it is by far the best, most interactive experience I've had with C++ code, exactly because it bolts a C++ compiler onto Julia. I don't remember how easily you could instantiate templates, but that's the kind of thing that I'm talking about.","user":"U72B7LTMX","ts":"1617143415.073300","thread_ts":"1616848422.478700","root":{"client_msg_id":"e9f1e181-caea-49f0-9872-1cf68ab479ad","type":"message","text":"What is the status of Cxx now? 1.6 manual says: \"For direct C++ interfacing, see the <https://github.com/Keno/Cxx.jl|Cxx> package.\", the Cxx package says: \"*Please, note that Cxx.jl only works (out of the box) currently with Julia 1.1.x to 1.3.x, i.e. with no currently supported Julia\"*","user":"U7LC4PFU4","ts":"1616848422.478700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"82/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What is the status of Cxx now? 1.6 manual says: \"For direct C++ interfacing, see the "},{"type":"link","url":"https://github.com/Keno/Cxx.jl","text":"Cxx"},{"type":"text","text":" package.\", the Cxx package says: \""},{"type":"text","text":"Please, note that Cxx.jl only works (out of the box) currently with Julia 1.1.x to 1.3.x, i.e. with no currently supported Julia\"","style":{"bold":true}}]}]}],"thread_ts":"1616848422.478700","reply_count":19,"reply_users_count":8,"latest_reply":"1617461385.185900","reply_users":["UKVBDU6HF","UDB26738Q","U01RB7WR48H","U679VPJ8L","U72B7LTMX","UDFRYRTBL","UC022KXA8","U6DN7UPJ7"],"is_locked":false,"subscribed":false},"blocks":[{"type":"rich_text","block_id":"cip","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I do wish "},{"type":"text","text":"Cxx.jl","style":{"code":true}},{"type":"text","text":" would receive more attention. When it works, it is by far the best, most interactive experience I've had with C++ code, exactly because it bolts a C++ compiler onto Julia. I don't remember how easily you could instantiate templates, but that's the kind of thing that I'm talking about."}]}]}],"client_msg_id":"a7183512-fa63-48c5-ae99-0e7028e81013","reactions":[{"name":"point_up_2","users":["U66SR8JHX","U01JYU097M0"],"count":2},{"name":"heavy_check_mark","users":["U66SR8JHX","U01JYU097M0"],"count":2},{"name":"100","users":["U66SR8JHX"],"count":1},{"name":"visionary_keno","users":["U6BJXUZHR","U66SR8JHX","U01QRM4E8HL"],"count":3}]},{"client_msg_id":"9c14e805-af8c-4c36-b45e-b5de292e6e6e","type":"message","text":"I don't know. In HEP we've had \"interactive\" C++ for something like two decades now, as part of CERN's ROOT toolkit. I've never thought there was any advantage to having this. I'm quite happy with CxxWrap.jl, and to tuck C++ away in a library so I don't have to deal with it, but we probably have very different use cases. I mostly deal with fairly large libraries, grown organically over decades.\nI like Julia for allowing me to interact _less_ with that code.","user":"UDFRYRTBL","ts":"1617150784.074300","team":"T68168MUP","edited":{"user":"UDFRYRTBL","ts":"1617150811.000000"},"blocks":[{"type":"rich_text","block_id":"WSv/j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't know. In HEP we've had \"interactive\" C++ for something like two decades now, as part of CERN's ROOT toolkit. I've never thought there was any advantage to having this. I'm quite happy with CxxWrap.jl, and to tuck C++ away in a library so I don't have to deal with it, but we probably have very different use cases. I mostly deal with fairly large libraries, grown organically over decades.\nI like Julia for allowing me to interact "},{"type":"text","text":"less ","style":{"italic":true}},{"type":"text","text":"with that code."}]}]}],"thread_ts":"1616848422.478700","parent_user_id":"U7LC4PFU4","reactions":[{"name":"+1","users":["U881D0W2C"],"count":1}]},{"client_msg_id":"c32788bb-acb6-4f54-a36c-a82aed5d3548","type":"message","text":"Hi! Somewhat related topic. I have a package using Cxx.jl and I would like to move to using Cxxwrap.jl instead but it seems like it requires significantly more c++ knowledge (which I don't have :simple_smile:) . What is the best place to ask for help?\n<https://github.com/sisl/Spot.jl>","user":"UC022KXA8","ts":"1617273106.118000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ge5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi! Somewhat related topic. I have a package using Cxx.jl and I would like to move to using Cxxwrap.jl instead but it seems like it requires significantly more c++ knowledge (which I don't have "},{"type":"emoji","name":"simple_smile"},{"type":"text","text":") . What is the best place to ask for help?\n"},{"type":"link","url":"https://github.com/sisl/Spot.jl"}]}]}],"thread_ts":"1616848422.478700","parent_user_id":"U7LC4PFU4"},{"client_msg_id":"12bddf5a-659e-4886-be16-c1c74495b60d","type":"message","text":"Discourse usually gets me good results","user":"UDFRYRTBL","ts":"1617289159.120300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0E6Km","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Discourse usually gets me good results"}]}]}],"thread_ts":"1616848422.478700","parent_user_id":"U7LC4PFU4"},{"client_msg_id":"0ecabb72-8764-4213-8c88-c2c7b9c3722b","type":"message","text":"<@UKVBDU6HF> *it looks like you’re resurrecting* <https://github.com/JuliaInterop/Clang.jl/issues/20>?","user":"U6DN7UPJ7","ts":"1617459108.184600","team":"T68168MUP","edited":{"user":"U6DN7UPJ7","ts":"1617459131.000000"},"blocks":[{"type":"rich_text","block_id":"vRY","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UKVBDU6HF"},{"type":"text","text":" it looks like you’re resurrecting ","style":{"bold":true}},{"type":"link","url":"https://github.com/JuliaInterop/Clang.jl/issues/20"},{"type":"text","text":"?"}]}]}],"thread_ts":"1616848422.478700","parent_user_id":"U7LC4PFU4"},{"client_msg_id":"37a9bce1-12ee-44d9-a815-4be709e82f93","type":"message","text":"&gt;  so that’s what Cxx used to do?\n<@UDB26738Q> Cxx works at a lower level. It uses Clang’s codegen module for generating LLVM IR in memory and does a `llvmcall`  on the `LLVM::Function*`.  The C/C++’s IR is inlined with Julia’s IR, so all down-streaming LLVM optimization can apply to the hybrid-code.\n\nAs Cxx.jl uses Clang’s codegen module and libclang only exposes a stable API at the AST level,  an additional utility library that exposes codegen module functionality is needed.\n\nCxx.jl actually implemented a whole Clang compiler instance and did some hacks on the Clang’s source code in its bootstrapping library, which made it even harder to maintain between different Julia versions(Clang versions).\n\nI’m currently working on a smaller library that only wraps Clang’s codegen module and exploring to rebuild the bootstrapping library on libclang + this small library.","user":"U6DN7UPJ7","ts":"1617461385.185900","team":"T68168MUP","edited":{"user":"U6DN7UPJ7","ts":"1617461522.000000"},"blocks":[{"type":"rich_text","block_id":"FtaM8","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":" so that’s what Cxx used to do?"}]},{"type":"rich_text_section","elements":[{"type":"user","user_id":"UDB26738Q"},{"type":"text","text":" Cxx works at a lower level. It uses Clang’s codegen module for generating LLVM IR in memory and does a "},{"type":"text","text":"llvmcall","style":{"code":true}},{"type":"text","text":"  on the "},{"type":"text","text":"LLVM::Function*","style":{"code":true}},{"type":"text","text":".  The C/C++’s IR is inlined with Julia’s IR, so all down-streaming LLVM optimization can apply to the hybrid-code.\n\nAs Cxx.jl uses Clang’s codegen module and libclang only exposes a stable API at the AST level,  an additional utility library that exposes codegen module functionality is needed.\n\nCxx.jl actually implemented a whole Clang compiler instance and did some hacks on the Clang’s source code in its bootstrapping library, which made it even harder to maintain between different Julia versions(Clang versions).\n\nI’m currently working on a smaller library that only wraps Clang’s codegen module and exploring to rebuild the bootstrapping library on libclang + this small library."}]}]}],"thread_ts":"1616848422.478700","parent_user_id":"U7LC4PFU4"}]