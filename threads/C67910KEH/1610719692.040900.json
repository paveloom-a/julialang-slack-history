[{"client_msg_id":"59f59efc-f2e3-4e6a-b5ef-19f69d5402b9","type":"message","text":"Hi, I am quite confused by this behavior:\n```julia&gt; zeros(Union{Float64, Missing}, 2, 0) .* randn(2)\n2×0 Array{Union{Missing, Float64},2}\n\njulia&gt; zeros(Union{Float64, Missing}, 2, 2) .* randn(2)\n2×2 Array{Float64,2}:\n -0.0  -0.0\n -0.0  -0.0```\nIs there any reason why broadcasting is unstable when similar operations on array like matrix multiplication are?\n```julia&gt; randn(2, 2) * zeros(Union{Float64, Missing}, 2, 2)\n2×2 Array{Union{Missing, Float64},2}:\n 0.0  0.0\n 0.0  0.0\n\njulia&gt; randn(2, 2) * zeros(Union{Float64, Missing}, 2, 0)\n2×0 Array{Union{Missing, Float64},2}```","user":"U7XHKP15W","ts":"1610719692.040900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2miHA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi, I am quite confused by this behavior:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> zeros(Union{Float64, Missing}, 2, 0) .* randn(2)\n2×0 Array{Union{Missing, Float64},2}\n\njulia> zeros(Union{Float64, Missing}, 2, 2) .* randn(2)\n2×2 Array{Float64,2}:\n -0.0  -0.0\n -0.0  -0.0"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Is there any reason why broadcasting is unstable when similar operations on array like matrix multiplication are?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> randn(2, 2) * zeros(Union{Float64, Missing}, 2, 2)\n2×2 Array{Union{Missing, Float64},2}:\n 0.0  0.0\n 0.0  0.0\n\njulia> randn(2, 2) * zeros(Union{Float64, Missing}, 2, 0)\n2×0 Array{Union{Missing, Float64},2}"}]}]}],"thread_ts":"1610719692.040900","reply_count":2,"reply_users_count":2,"latest_reply":"1610721650.042800","reply_users":["U67431ELR","U7XHKP15W"],"subscribed":false},{"client_msg_id":"e757440d-8f1f-40f3-a3b1-dfe78d488e6b","type":"message","text":"`broadcast` chooses the eltype based on the actual contents of the result, except when it's empty (otherwise it would always be `Union{}`. `*` uses a difference approach which relies on the fact that `one` and `zero` can be called on the eltype IIRC. But that solution doesn't work for any functions so `broadcast` can't use it.","user":"U67431ELR","ts":"1610720793.042600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"80vg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"broadcast","style":{"code":true}},{"type":"text","text":" chooses the eltype based on the actual contents of the result, except when it's empty (otherwise it would always be "},{"type":"text","text":"Union{}","style":{"code":true}},{"type":"text","text":". "},{"type":"text","text":"*","style":{"code":true}},{"type":"text","text":" uses a difference approach which relies on the fact that "},{"type":"text","text":"one","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"zero","style":{"code":true}},{"type":"text","text":" can be called on the eltype IIRC. But that solution doesn't work for any functions so "},{"type":"text","text":"broadcast","style":{"code":true}},{"type":"text","text":" can't use it."}]}]}],"thread_ts":"1610719692.040900","parent_user_id":"U7XHKP15W"},{"client_msg_id":"d7a94a2f-b9b5-495f-afe4-a60be19aabed","type":"message","text":"I understand the technical reason, but what is the reasoning behind this design choice? I would intuitively expect that these two operations behave the same type-wise:\n```julia&gt; randn(2, 2) + zeros(Union{Float64, Missing}, 2, 2)\n2×2 Array{Float64,2}:\n 1.68235  -0.0309236\n 2.01935   0.261261\n\njulia&gt; randn(2, 2) * zeros(Union{Float64, Missing}, 2, 2)\n2×2 Array{Union{Missing, Float64},2}:\n 0.0  0.0\n 0.0  0.0```\nIf I understand this correctly, this is not impossible to fix (either remove checking the actual content in broadcasting, or add this to matmul as well)","user":"U7XHKP15W","ts":"1610721650.042800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+3xy2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I understand the technical reason, but what is the reasoning behind this design choice? I would intuitively expect that these two operations behave the same type-wise:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> randn(2, 2) + zeros(Union{Float64, Missing}, 2, 2)\n2×2 Array{Float64,2}:\n 1.68235  -0.0309236\n 2.01935   0.261261\n\njulia> randn(2, 2) * zeros(Union{Float64, Missing}, 2, 2)\n2×2 Array{Union{Missing, Float64},2}:\n 0.0  0.0\n 0.0  0.0"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"If I understand this correctly, this is not impossible to fix (either remove checking the actual content in broadcasting, or add this to matmul as well)"}]}]}],"thread_ts":"1610719692.040900","parent_user_id":"U7XHKP15W"}]