[{"client_msg_id":"f7269e0c-fa8a-4d43-aa86-7b1b36d84ec8","type":"message","text":"what do people use for summing and dropping dimensions? Is `dropdims(sum(a; dims=2); dims=2)` really the best we have?","user":"UMDEUKM29","ts":"1613724421.250700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rlBWe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what do people use for summing and dropping dimensions? Is "},{"type":"text","text":"dropdims(sum(a; dims=2); dims=2)","style":{"code":true}},{"type":"text","text":" really the best we have?"}]}]}],"thread_ts":"1613724421.250700","reply_count":17,"reply_users_count":7,"latest_reply":"1613753597.274000","reply_users":["U7QLM6E2E","UDXST8ARK","U66QZ3QF3","UMDEUKM29","UD0NS8PDF","U0179G7FG4F","UAUPJLBQX"],"subscribed":false},{"client_msg_id":"555957ad-3664-433d-9dfe-3f624e538321","type":"message","text":"`vec(sum(a; dims=2))`","user":"U7QLM6E2E","ts":"1613726487.253200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bnZ2r","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"vec(sum(a; dims=2))","style":{"code":true}}]}]}],"thread_ts":"1613724421.250700","parent_user_id":"UMDEUKM29"},{"client_msg_id":"1545005a-b1f0-4685-89f7-d7f1c0715708","type":"message","text":"Yes. Not having to specify the 'dims' twice is a long-wanted feature, but I believe Base is holding out for a more general solution.\nBut the code in this PR is one line, so you could implement it in the package where you need it, if that makes your code nicer\n<https://github.com/JuliaLang/julia/pull/33130#issuecomment-562309110|https://github.com/JuliaLang/julia/pull/33130#issuecomment-562309110>\n\nE.g. \n```\n_dropdims(f, args...; dims, kwargs...) = Base._dropdims(f(args...; kwargs..., dims=dims), dims)\n```","user":"UDXST8ARK","ts":"1613727660.253400","team":"T68168MUP","edited":{"user":"UDXST8ARK","ts":"1613727747.000000"},"blocks":[{"type":"rich_text","block_id":"uHB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes. Not having to specify the 'dims' twice is a long-wanted feature, but I believe Base is holding out for a more general solution.\nBut the code in this PR is one line, so you could implement it in the package where you need it, if that makes your code nicer\n"},{"type":"link","url":"https://github.com/JuliaLang/julia/pull/33130#issuecomment-562309110","text":"https://github.com/JuliaLang/julia/pull/33130#issuecomment-562309110"},{"type":"text","text":"\n\nE.g. \n```\n_dropdims(f, args...; dims, kwargs...) = Base._dropdims(f(args...; kwargs..., dims=dims), dims)\n```"}]}]}],"thread_ts":"1613724421.250700","parent_user_id":"UMDEUKM29"},{"client_msg_id":"02ECFE75-96DF-4839-A552-66D187BD5B1E","type":"message","text":"I think the best abstraction is `sum.(eachrow(matrix))`","user":"U66QZ3QF3","ts":"1613728534.254900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"D3bWI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think the best abstraction is "},{"type":"text","text":"sum.(eachrow(matrix))","style":{"code":true}}]}]}],"thread_ts":"1613724421.250700","parent_user_id":"UMDEUKM29"},{"client_msg_id":"84abf420-c534-4144-a821-7b7080d23d5b","type":"message","text":"pretty tough to understand if you're not too used to it, and it doesn't generalize to arbitrary dims","user":"UMDEUKM29","ts":"1613730046.255600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ceG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"pretty tough to understand if you're not too used to it, and it doesn't generalize to arbitrary dims"}]}]}],"thread_ts":"1613724421.250700","parent_user_id":"UMDEUKM29"},{"client_msg_id":"751d0746-e18f-4513-a0a9-4870fc0ad413","type":"message","text":"`sum(eachslice(matrix; dims=2))`","user":"U7QLM6E2E","ts":"1613730340.255800","team":"T68168MUP","edited":{"user":"U7QLM6E2E","ts":"1613730349.000000"},"blocks":[{"type":"rich_text","block_id":"gX/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"sum(eachslice(matrix; dims=2))","style":{"code":true}}]}]}],"thread_ts":"1613724421.250700","parent_user_id":"UMDEUKM29","reactions":[{"name":"cool","users":["UDXST8ARK"],"count":1}]},{"client_msg_id":"40149baa-1fb2-4bbb-abcc-eaf033dad888","type":"message","text":"oh that's good","user":"UMDEUKM29","ts":"1613733527.261600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IRdZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh that's good"}]}]}],"thread_ts":"1613724421.250700","parent_user_id":"UMDEUKM29"},{"client_msg_id":"5ff7a749-9e27-4242-a4eb-3dddacc54d7a","type":"message","text":"But it’s an accident of sum, e.g. `prod(eachslice(a; dims=2))` will fail, and with a dot `prod.(eachslice(a, dims=2))` reduces over all dims except 2. (And less efficiently, right now.)","user":"UD0NS8PDF","ts":"1613733574.261800","team":"T68168MUP","edited":{"user":"UD0NS8PDF","ts":"1613733909.000000"},"blocks":[{"type":"rich_text","block_id":"gvzt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But it’s an accident of sum, e.g. "},{"type":"text","text":"prod(eachslice(a; dims=2))","style":{"code":true}},{"type":"text","text":" will fail, and with a dot "},{"type":"text","text":"prod.(eachslice(a, dims=2))","style":{"code":true}},{"type":"text","text":" reduces over all dims except 2. (And less efficiently, right now.)"}]}]}],"thread_ts":"1613724421.250700","parent_user_id":"UMDEUKM29","reactions":[{"name":"disappointed","users":["UDXST8ARK"],"count":1}]},{"client_msg_id":"2a2a01c3-55d0-4f1a-8365-ca4344a39e64","type":"message","text":"One nice thing about `sum.()` is that it could potentially fuse with broadcasting, e.g. to make `1 .+ sum.(a[*, :, *])` allocate one new array. Where the stars are from this experiment at giving `eachslice` different notation: <https://github.com/mcabbott/StarSlice.jl>","user":"UD0NS8PDF","ts":"1613734305.262400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Cqq9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"One nice thing about "},{"type":"text","text":"sum.()","style":{"code":true}},{"type":"text","text":" is that it could potentially fuse with broadcasting, e.g. to make "},{"type":"text","text":"1 .+ sum.(a[*, :, *])","style":{"code":true}},{"type":"text","text":" allocate one new array. Where the stars are from this experiment at giving "},{"type":"text","text":"eachslice","style":{"code":true}},{"type":"text","text":" different notation: "},{"type":"link","url":"https://github.com/mcabbott/StarSlice.jl"}]}]}],"thread_ts":"1613724421.250700","parent_user_id":"UMDEUKM29"},{"client_msg_id":"7ab59ea8-555c-4b4c-b4f9-4f843102a6fe","type":"message","text":"it's nice that there's so much syntax available, it'd be awesome to have some of that percolate into base. My biggest gripe with arrays in julia is that slices are copies unless you put ugly `@views` everywhere","user":"UMDEUKM29","ts":"1613736323.263000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Akikq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's nice that there's so much syntax available, it'd be awesome to have some of that percolate into base. My biggest gripe with arrays in julia is that slices are copies unless you put ugly "},{"type":"text","text":"@views","style":{"code":true}},{"type":"text","text":" everywhere"}]}]}],"thread_ts":"1613724421.250700","parent_user_id":"UMDEUKM29"},{"client_msg_id":"82dc2284-8bb0-4aef-9213-1f30910c0b8e","type":"message","text":"Yeah. That's an unfortunate one where the compiler wasn't good enough when we made the api. I kinda hope we change it for 2.0, but that would be a really hard change to make","user":"U0179G7FG4F","ts":"1613743590.265300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mxQyg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah. That's an unfortunate one where the compiler wasn't good enough when we made the api. I kinda hope we change it for 2.0, but that would be a really hard change to make"}]}]}],"thread_ts":"1613724421.250700","parent_user_id":"UMDEUKM29"},{"client_msg_id":"938b5f83-f96b-4982-9102-d42bff71e3dc","type":"message","text":"yeah, it's easy enough to detect and fix (just grep for : and add copy if needed), but it does mean that every line of code should be audited. It could be detected automatically by having a special julia version where slices return poisoned arrays that error when mutated unless copied first","user":"UMDEUKM29","ts":"1613745778.265500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sYmFr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, it's easy enough to detect and fix (just grep for : and add copy if needed), but it does mean that every line of code should be audited. It could be detected automatically by having a special julia version where slices return poisoned arrays that error when mutated unless copied first"}]}]}],"thread_ts":"1613724421.250700","parent_user_id":"UMDEUKM29"},{"client_msg_id":"9ab3628e-59a4-415d-a378-2f5c0729b207","type":"message","text":"I hope for 2.0 we release a script that can auto-rewrite all breaking changes","user":"U0179G7FG4F","ts":"1613746270.265700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"V=Wop","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I hope for 2.0 we release a script that can auto-rewrite all breaking changes"}]}]}],"thread_ts":"1613724421.250700","parent_user_id":"UMDEUKM29"},{"client_msg_id":"945ad222-9d74-4d28-8538-d3c20029089c","type":"message","text":"You can define custom array types to have slices make views by default. StrideArrays does this, but I do worry that having a library behave differently than accustomed in a way that could introduce subtle and hard to track bugs would be more trouble than it's worth.","user":"UAUPJLBQX","ts":"1613752998.273200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DKqS2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can define custom array types to have slices make views by default. StrideArrays does this, but I do worry that having a library behave differently than accustomed in a way that could introduce subtle and hard to track bugs would be more trouble than it's worth."}]}]}],"thread_ts":"1613724421.250700","parent_user_id":"UMDEUKM29"},{"client_msg_id":"d773c002-f494-4a3d-bba1-0fdae9238819","type":"message","text":"Thoughts? (I'm considering whether to make slices -&gt; views the default in StrideArrays.jl)","user":"UAUPJLBQX","ts":"1613753043.273400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QZIc5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thoughts? (I'm considering whether to make slices -> views the default in StrideArrays.jl)"}]}]}],"thread_ts":"1613724421.250700","parent_user_id":"UMDEUKM29"},{"client_msg_id":"8b32d80a-33d2-459e-a558-4556db8978e0","type":"message","text":"Strided.jl also does this, FWIW. (And makes `permutedims` lazy, too.)","user":"UD0NS8PDF","ts":"1613753387.273600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BoXgs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Strided.jl also does this, FWIW. (And makes "},{"type":"text","text":"permutedims","style":{"code":true}},{"type":"text","text":" lazy, too.)"}]}]}],"thread_ts":"1613724421.250700","parent_user_id":"UMDEUKM29"},{"client_msg_id":"12223569-54b9-49f8-9e54-d98f40deb5a5","type":"message","text":"I'm already making `permutedims` lazy. Guess I'll do that too to be consistent (and because I want that behavior)","user":"UAUPJLBQX","ts":"1613753503.273800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"elPG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm already making "},{"type":"text","text":"permutedims","style":{"code":true}},{"type":"text","text":" lazy. Guess I'll do that too to be consistent (and because I want that behavior)"}]}]}],"thread_ts":"1613724421.250700","parent_user_id":"UMDEUKM29"},{"client_msg_id":"4b769671-2696-42a5-b5d7-4f6926e2629f","type":"message","text":"`PermutedDimsArray` is lazy, but I overloaded `permutedims` instead because I didn't want to return a `PermutedDimsArray`, and figured overloading a constructor to return some other type would be considered in bad taste/break some sort of implicit contract (e.g., of implicit `convert` calls).","user":"UAUPJLBQX","ts":"1613753597.274000","team":"T68168MUP","edited":{"user":"UAUPJLBQX","ts":"1613753716.000000"},"blocks":[{"type":"rich_text","block_id":"ZJqb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"PermutedDimsArray","style":{"code":true}},{"type":"text","text":" is lazy, but I overloaded "},{"type":"text","text":"permutedims","style":{"code":true}},{"type":"text","text":" instead because I didn't want to return a "},{"type":"text","text":"PermutedDimsArray","style":{"code":true}},{"type":"text","text":", and figured overloading a constructor to return some other type would be considered in bad taste/break some sort of implicit contract (e.g., of implicit "},{"type":"text","text":"convert","style":{"code":true}},{"type":"text","text":" calls)."}]}]}],"thread_ts":"1613724421.250700","parent_user_id":"UMDEUKM29"}]