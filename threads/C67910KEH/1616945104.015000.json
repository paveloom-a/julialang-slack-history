[{"client_msg_id":"65c260e7-ebf6-4260-bb4f-d76e26544412","type":"message","text":"Why does `Base` have so many functions with the method `foo(f::Function, iterable)` (e.g. `any`, `maximum`) instead of just taking a `Generator`? Is it just to better support the `do` syntax?","user":"UENHZ1M08","ts":"1616945104.015000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C1Z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Why does "},{"type":"text","text":"Base","style":{"code":true}},{"type":"text","text":" have so many functions with the method "},{"type":"text","text":"foo(f::Function, iterable)","style":{"code":true}},{"type":"text","text":" (e.g. "},{"type":"text","text":"any","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"maximum","style":{"code":true}},{"type":"text","text":") instead of just taking a "},{"type":"text","text":"Generator","style":{"code":true}},{"type":"text","text":"? Is it just to better support the "},{"type":"text","text":"do","style":{"code":true}},{"type":"text","text":" syntax?"}]}]}],"thread_ts":"1616945104.015000","reply_count":7,"reply_users_count":4,"latest_reply":"1616949361.016500","reply_users":["U01HD5VFXJM","U7HAYKY9X","UENHZ1M08","UD0NS8PDF"],"is_locked":false,"subscribed":false},{"client_msg_id":"88534164-7ae1-495e-9000-af7a3e2491c4","type":"message","text":"Like you would prefer `any(iseven(i) for i ∈ a)` over `any(iseven, a)` ?","user":"U01HD5VFXJM","ts":"1616945391.015100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"koftP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Like you would prefer "},{"type":"text","text":"any(iseven(i) for i ∈ a)","style":{"code":true}},{"type":"text","text":" over "},{"type":"text","text":"any(iseven, a)","style":{"code":true}},{"type":"text","text":" ?"}]}]}],"thread_ts":"1616945104.015000","parent_user_id":"UENHZ1M08"},{"client_msg_id":"2e4c201f-f432-4757-a628-76164985268b","type":"message","text":"Also, the former allows specialization for better performance","user":"U7HAYKY9X","ts":"1616945441.015300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7MEqT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, the former allows specialization for better performance"}]}]}],"thread_ts":"1616945104.015000","parent_user_id":"UENHZ1M08","reactions":[{"name":"+1","users":["U8D9768Q6"],"count":1}]},{"client_msg_id":"6867bdef-99f6-44ab-9721-1508ab1ffa54","type":"message","text":"It's not as nice to write, but a related question is \"why isn't there easier syntax for lazy map\" or \"why don't we have a built-in lazy map function (or just a short alias for `Base.Generator`)\". Ideally the equivalent would be something like `any(imap(iseven, a))` (and I think you'd still be able to specialize on the `Base.Generator` case). This is just coming from the developer perspective of having to implement and test these additional signatures.","user":"UENHZ1M08","ts":"1616947790.015600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2Rnc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's not as nice to write, but a related question is \"why isn't there easier syntax for lazy map\" or \"why don't we have a built-in lazy map function (or just a short alias for "},{"type":"text","text":"Base.Generator","style":{"code":true}},{"type":"text","text":")\". Ideally the equivalent would be something like "},{"type":"text","text":"any(imap(iseven, a))","style":{"code":true}},{"type":"text","text":" (and I think you'd still be able to specialize on the "},{"type":"text","text":"Base.Generator","style":{"code":true}},{"type":"text","text":" case). This is just coming from the developer perspective of having to implement and test these additional signatures."}]}]}],"thread_ts":"1616945104.015000","parent_user_id":"UENHZ1M08"},{"client_msg_id":"ae7af5c9-f25b-46ec-8f54-ff2bfe238c33","type":"message","text":"We have `Iterators.map` , but I agree that having map be eager was probably a design mistake in Julia 1.0.","user":"U7HAYKY9X","ts":"1616948022.015800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Bud0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We have "},{"type":"text","text":"Iterators.map","style":{"code":true}},{"type":"text","text":" , but I agree that having map be eager was probably a design mistake in Julia 1.0."}]}]}],"thread_ts":"1616945104.015000","parent_user_id":"UENHZ1M08"},{"client_msg_id":"d77e298b-b2c9-4349-b1d8-fc4b980e4c57","type":"message","text":"I do `imap(f, x) = Iterators.map(f, x)` at the beginning of some of my scripts","user":"U7HAYKY9X","ts":"1616948067.016000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3MCnL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I do "},{"type":"text","text":"imap(f, x) = Iterators.map(f, x)","style":{"code":true}},{"type":"text","text":" at the beginning of some of my scripts"}]}]}],"thread_ts":"1616945104.015000","parent_user_id":"UENHZ1M08"},{"client_msg_id":"d924cba0-8ed4-47f0-9a00-46de42ff4714","type":"message","text":"I think `any`/`all` are sort of the exception, because you are almost always going to be mapping a function over the iterable. But it seems unnecessary to have this signature for `minimum`, `maximum`, `sum`, `prod`, etc.","user":"UENHZ1M08","ts":"1616948292.016200","team":"T68168MUP","edited":{"user":"UENHZ1M08","ts":"1616948304.000000"},"blocks":[{"type":"rich_text","block_id":"dG4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think "},{"type":"text","text":"any","style":{"code":true}},{"type":"text","text":"/"},{"type":"text","text":"all","style":{"code":true}},{"type":"text","text":" are sort of the exception, because you are almost always going to be mapping a function over the iterable. But it seems unnecessary to have this signature for "},{"type":"text","text":"minimum","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"maximum","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"sum","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"prod","style":{"code":true}},{"type":"text","text":", etc."}]}]}],"thread_ts":"1616945104.015000","parent_user_id":"UENHZ1M08"},{"client_msg_id":"f473bd4f-9a44-4bed-a839-9585ac878aff","type":"message","text":"Something like `sum(abs2, randn(2,3), dims=2)` isn’t easy to write with a generator, although perhaps lazy broadcasting will eventually handle this.","user":"UD0NS8PDF","ts":"1616949361.016500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6yz3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Something like "},{"type":"text","text":"sum(abs2, randn(2,3), dims=2)","style":{"code":true}},{"type":"text","text":" isn’t easy to write with a generator, although perhaps lazy broadcasting will eventually handle this."}]}]}],"thread_ts":"1616945104.015000","parent_user_id":"UENHZ1M08"}]