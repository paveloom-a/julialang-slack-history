[{"client_msg_id":"7A3D0E08-384A-48B5-AABC-9DF1BD00BCBA","type":"message","text":"I’ve read that Julia has been used for HPC but that the necessary optimizations made the code like FORTRAN; e.g., loop unrolling.  Can anyone tell me about this?\n\nI wonder if the traditional focus on writing good FORTRAN and C compilers on HPC hardware is limiting the field.  An equivalent code base could be constructed from Julia and Rust, both based on the LLVM.  Focusing compiler optimizations and hardware design on one virtual machine could allow what once were improvements to only either language to become benefits to both. ","user":"U01GC3N3ZJT","ts":"1612069859.381000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+pxuI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’ve read that Julia has been used for HPC but that the necessary optimizations made the code like FORTRAN; e.g., loop unrolling.  Can anyone tell me about this?\n"},{"type":"text","text":"\n"},{"type":"text","text":"I wonder if the traditional focus on writing good FORTRAN and C compilers on HPC hardware is limiting the field.  An equivalent code base could be constructed from Julia and Rust, both based on the LLVM.  Focusing compiler optimizations and hardware design on one virtual machine could allow what once were improvements to only either language to become benefits to both. "}]}]}],"thread_ts":"1612069859.381000","reply_count":16,"reply_users_count":6,"latest_reply":"1612117628.421700","reply_users":["U0179G7FG4F","U67BJLYCS","UGU761DU2","UMDEUKM29","U01GC3N3ZJT","UAUPJLBQX"],"subscribed":false},{"client_msg_id":"6d6b577b-58d3-458d-b354-0ad3b67ea9d6","type":"message","text":"One thing that makes this hard to do on a LLVM level is that language semantics control what optimizations are valid. For example, C and Fortran compilers are fairly limited in their ability to perform inter-procedural optimization because other functions will have expectations about how to call them. Julia on the other hand has more freedom since it makes fewer guarentees here, so there are optimizations that are valid for it that aren't for C/Fortran","user":"U0179G7FG4F","ts":"1612070422.384300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eWy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"One thing that makes this hard to do on a LLVM level is that language semantics control what optimizations are valid. For example, C and Fortran compilers are fairly limited in their ability to perform inter-procedural optimization because other functions will have expectations about how to call them. Julia on the other hand has more freedom since it makes fewer guarentees here, so there are optimizations that are valid for it that aren't for C/Fortran"}]}]}],"thread_ts":"1612069859.381000","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"9bc4cee5-05d5-4941-a83c-a51b8094285f","type":"message","text":"On the other hand C/Fortran have closed world semantics so you can perform link time optimization/whole program optimization","user":"U67BJLYCS","ts":"1612071004.384800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Wpl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"On the other hand C/Fortran have closed world semantics so you can perform link time optimization/whole program optimization"}]}]}],"thread_ts":"1612069859.381000","parent_user_id":"U01GC3N3ZJT","reactions":[{"name":"thumbsup_all","users":["U0179G7FG4F","UB7JS9CHF","UAUPJLBQX"],"count":3},{"name":"point_up","users":["UB7JS9CHF"],"count":1}]},{"client_msg_id":"4def8edc-7ba5-46cb-a914-381bb11f3819","type":"message","text":"But yeah language semantics matter a lot in that regard","user":"U67BJLYCS","ts":"1612071029.385000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dK9M","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But yeah language semantics matter a lot in that regard"}]}]}],"thread_ts":"1612069859.381000","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"8659a3b0-4572-4135-a1da-0754f052a53f","type":"message","text":"I do a bit of Julia-on-HPC (just a small-ish university cluster, rather then anything massive like at DOE, but nonetheless) and all I need to get performance I’m happy with is\n\n1) Strictly avoid type-instability (you should generally do that anyways..)\n2) A little bit of LoopVectorization.jl here and there\n\nMPI.jl is very convenient IMO.","user":"UGU761DU2","ts":"1612074246.385500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OJlg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I do a bit of Julia-on-HPC (just a small-ish university cluster, rather then anything massive like at DOE, but nonetheless) and all I need to get performance I’m happy with is\n\n1) Strictly avoid type-instability (you should generally do that anyways..)\n2) A little bit of LoopVectorization.jl here and there\n\nMPI.jl is very convenient IMO."}]}]}],"thread_ts":"1612069859.381000","parent_user_id":"U01GC3N3ZJT","reactions":[{"name":"+1","users":["U8D9768Q6","U6A936746","UAREE2NMD","UAUPJLBQX","U6795JH6H"],"count":5}]},{"client_msg_id":"f1670f3b-9dc7-4def-8040-9658b40f06df","type":"message","text":"Yeah I think the only thing julia is missing for lab scale hpc is better threads. Very large scale might need some tricks and better tooling (eg parallel profilers)","user":"UMDEUKM29","ts":"1612077797.386300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eOmK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah I think the only thing julia is missing for lab scale hpc is better threads. Very large scale might need some tricks and better tooling (eg parallel profilers)"}]}]}],"thread_ts":"1612069859.381000","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"CC06757F-D19D-4FEA-89EE-EC0D711D3A55","type":"message","text":"I wonder: is the optimization freedom of LLVM better than the closed-world semantics of C and FORTRAN for massive HPC like DOE?","user":"U01GC3N3ZJT","ts":"1612106055.401900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1J6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I wonder: is the optimization freedom of LLVM better than the closed-world semantics of C and FORTRAN for massive HPC like DOE?"}]}]}],"thread_ts":"1612069859.381000","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"18e0abec-290f-4752-99dd-a710f7116cc1","type":"message","text":"Well C/C++ have an LLVM compiler as well and there is significant interested in having a Fortran LLVM compiler","user":"U67BJLYCS","ts":"1612106171.402700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Piw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well C/C++ have an LLVM compiler as well and there is significant interested in having a Fortran LLVM compiler"}]}]}],"thread_ts":"1612069859.381000","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"A9EF4947-3B9E-4816-8202-AFBF27586871","type":"message","text":"Yeah, FORTRAN LLVM sounds amazing for HPC.  Closed world semantics, built-in vectorization, and LLVM.","user":"U01GC3N3ZJT","ts":"1612106283.405200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1VSC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, FORTRAN LLVM sounds amazing for HPC.  Closed world semantics, built-in vectorization, and LLVM."}]}]}],"thread_ts":"1612069859.381000","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"C7DEA7A5-84FF-4D0D-ACE2-1D20FDD45AA1","type":"message","text":"That said, it’s such a miserable and obscure language that, once we’ve abandoned its compiler, it might just be better to abandon it altogether.","user":"U01GC3N3ZJT","ts":"1612106334.406800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DQQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That said, it’s such a miserable and obscure language that, once we’ve abandoned its compiler, it might just be better to abandon it altogether."}]}]}],"thread_ts":"1612069859.381000","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"84780cd9-a7c4-4ff4-a083-fd057f0e8a48","type":"message","text":"Fortran has many compilers","user":"U67BJLYCS","ts":"1612106366.407300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IavL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Fortran has many compilers"}]}]}],"thread_ts":"1612069859.381000","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"987b1b3f-5237-4fe1-b27e-3d832019b482","type":"message","text":"And modern fortran is nice","user":"U67BJLYCS","ts":"1612106377.407500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TAda","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And modern fortran is nice"}]}]}],"thread_ts":"1612069859.381000","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"a5820f8f-6339-4845-a394-6f2245676b95","type":"message","text":"But yeah the project is called Slang/F18","user":"U67BJLYCS","ts":"1612106390.407700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W3ZJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But yeah the project is called Slang/F18"}]}]}],"thread_ts":"1612069859.381000","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"278f9ff3-3a03-4a9b-8750-812a2dac7f6f","type":"message","text":"*Flang","user":"U67BJLYCS","ts":"1612106394.407900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MMWEq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"*Flang"}]}]}],"thread_ts":"1612069859.381000","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"ff91068e-0676-4c02-958a-a022253bb255","type":"message","text":"But fortran compilers are already really good.","user":"U67BJLYCS","ts":"1612106437.408100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TQ0OJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But fortran compilers are already really good."}]}]}],"thread_ts":"1612069859.381000","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"4203a778-64cd-4663-ab5b-801d91b0da57","type":"message","text":"LLVM is not a magic bullet","user":"U67BJLYCS","ts":"1612106448.408300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7dx9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"LLVM is not a magic bullet"}]}]}],"thread_ts":"1612069859.381000","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"4e2f207f-1ca8-4ca6-a3c4-79c3844aa588","type":"message","text":"Flang is using an MLIR dialect (FIR) as it's intermediate representation, so it'll be interesting to watch.","user":"UAUPJLBQX","ts":"1612117628.421700","team":"T68168MUP","edited":{"user":"UAUPJLBQX","ts":"1612117636.000000"},"blocks":[{"type":"rich_text","block_id":"yFaco","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Flang is using an MLIR dialect (FIR) as it's intermediate representation, so it'll be interesting to watch."}]}]}],"thread_ts":"1612069859.381000","parent_user_id":"U01GC3N3ZJT","reactions":[{"name":"today-i-learned","users":["UGU761DU2"],"count":1}]}]