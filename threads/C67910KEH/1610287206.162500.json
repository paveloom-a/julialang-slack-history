[{"client_msg_id":"d6e62848-98dd-4b0b-b11a-526ab38654fe","type":"message","text":"I have an iterable type `&lt;:Number` that on `julia-1.6.0-beta1` fails to broadcast with `typeassert`:\n```ERROR: TypeError: in typeassert, expected AbstractVector{var\"#s827\"} where var\"#s827\"&lt;:Type, got a value of type Vector{Cyclotomic{Int64, SparseArrays.SparseVector{Int64, Int64}}}\nStacktrace:\n [1] copy\n   @ ./broadcast.jl:930 [inlined]\n [2] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(*), Tuple{Cyclotomic{Int64, SparseArrays.SparseVector{Int64, Int64}}, Vector{Int64}}})\n   @ Base.Broadcast ./broadcast.jl:883\n [3] top-level scope\n   @ REPL[63]:1```\nIt does what I want if I wrap it with `Ref` or `Tuple` (i.e. `(x,)` ). What is the best way of telling julia to treat my type as a scalar? (things work just fine on 1.5 and before)","user":"UHBF252VC","ts":"1610287206.162500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lHF/u","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have an iterable type "},{"type":"text","text":"<:Number","style":{"code":true}},{"type":"text","text":" that on "},{"type":"text","text":"julia-1.6.0-beta1","style":{"code":true}},{"type":"text","text":" fails to broadcast with "},{"type":"text","text":"typeassert","style":{"code":true}},{"type":"text","text":":\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"ERROR: TypeError: in typeassert, expected AbstractVector{var\"#s827\"} where var\"#s827\"<:Type, got a value of type Vector{Cyclotomic{Int64, SparseArrays.SparseVector{Int64, Int64}}}\nStacktrace:\n [1] copy\n   @ ./broadcast.jl:930 [inlined]\n [2] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(*), Tuple{Cyclotomic{Int64, SparseArrays.SparseVector{Int64, Int64}}, Vector{Int64}}})\n   @ Base.Broadcast ./broadcast.jl:883\n [3] top-level scope\n   @ REPL[63]:1"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"It does what I want if I wrap it with "},{"type":"text","text":"Ref","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"Tuple","style":{"code":true}},{"type":"text","text":" (i.e. "},{"type":"text","text":"(x,)","style":{"code":true}},{"type":"text","text":" ). What is the best way of telling julia to treat my type as a scalar? (things work just fine on 1.5 and before)"}]}]}],"thread_ts":"1610287206.162500","reply_count":5,"reply_users_count":2,"latest_reply":"1610287623.163400","reply_users":["UHBF252VC","U67SCG4HG"],"subscribed":false},{"client_msg_id":"4baad2e1-cb56-4feb-a263-856cfef8a292","type":"message","text":"which seems to be very similar to <https://github.com/JuliaLang/julia/issues/38422>","user":"UHBF252VC","ts":"1610287326.162600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zny","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which seems to be very similar to "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/38422"}]}]}],"thread_ts":"1610287206.162500","parent_user_id":"UHBF252VC"},{"client_msg_id":"b9188353-304a-48ef-9c65-e1a01de8db5b","type":"message","text":"Define `Base.broadcastable(x::MyType)  = Ref(x)`. It is strange that it worked in 1.5 though","user":"U67SCG4HG","ts":"1610287327.162800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0Lk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Define "},{"type":"text","text":"Base.broadcastable(x::MyType)  = Ref(x)","style":{"code":true}},{"type":"text","text":". It is strange that it worked in 1.5 though"}]}]}],"thread_ts":"1610287206.162500","parent_user_id":"UHBF252VC","reactions":[{"name":"point_up","users":["U6A936746"],"count":1}]},{"client_msg_id":"5e820b0e-595b-423d-97ba-4d990b691b21","type":"message","text":"The fix for that issue is in 1.6 beta though.","user":"U67SCG4HG","ts":"1610287400.163000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VNWx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The fix for that issue is in 1.6 beta though."}]}]}],"thread_ts":"1610287206.162500","parent_user_id":"UHBF252VC"},{"client_msg_id":"3e288c67-a587-4a4e-aad5-b623ea2aeabc","type":"message","text":"If you can extracct an MWE you should probably post a new issue, or comment on the one you linked.","user":"U67SCG4HG","ts":"1610287616.163200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lsl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you can extracct an MWE you should probably post a new issue, or comment on the one you linked."}]}]}],"thread_ts":"1610287206.162500","parent_user_id":"UHBF252VC"},{"client_msg_id":"8b94b49e-1a30-474c-aaca-9d6bb95a099c","type":"message","text":"that's why I'm surprised :wink:","user":"UHBF252VC","ts":"1610287623.163400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GG8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's why I'm surprised "},{"type":"emoji","name":"wink"}]}]}],"thread_ts":"1610287206.162500","parent_user_id":"UHBF252VC"}]