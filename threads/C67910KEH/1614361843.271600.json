[{"client_msg_id":"8686e1e6-60f7-4b56-bbfb-2d4f5198966e","type":"message","text":"I'd like to automatically change a bunch of `foo(a, b)` into `a binop b`.\n(e.g. from `union(a, b)`  into `a ∪ b`)\n\nWhat do folks recommend? Is there an example using something like <https://github.com/julia-vscode/CSTParser.jl> ?","user":"U72B7LTMX","ts":"1614361843.271600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j17v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'd like to automatically change a bunch of "},{"type":"text","text":"foo(a, b)","style":{"code":true}},{"type":"text","text":" into "},{"type":"text","text":"a binop b","style":{"code":true}},{"type":"text","text":".\n(e.g. from "},{"type":"text","text":"union(a, b)","style":{"code":true}},{"type":"text","text":"  into "},{"type":"text","text":"a ∪ b","style":{"code":true}},{"type":"text","text":")\n\nWhat do folks recommend? Is there an example using something like "},{"type":"link","url":"https://github.com/julia-vscode/CSTParser.jl"},{"type":"text","text":" ?"}]}]}],"thread_ts":"1614361843.271600","reply_count":36,"reply_users_count":6,"latest_reply":"1614540042.332700","reply_users":["U6NFPDBV1","U72B7LTMX","U6A936746","U8D9768Q6","U6A7NFP62","U6CF3AA5Q"],"subscribed":false,"reactions":[{"name":"emacs","users":["UMDEUKM29","UDB26738Q"],"count":2}]},{"client_msg_id":"b3fba9da-a4ab-4ee4-a037-610f9aa236ea","type":"message","text":"<https://github.com/domluna/JuliaFormatter.jl> uses CSTParser","user":"U6NFPDBV1","ts":"1614362184.271800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GlEAF","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/domluna/JuliaFormatter.jl"},{"type":"text","text":" uses CSTParser"}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"b645772c-735a-4774-b07b-e56b54a56097","type":"message","text":"Oh thanks!","user":"U72B7LTMX","ts":"1614362262.272000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0UNk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh thanks!"}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"d72e356f-abf9-4aed-97a9-84a470f276d5","type":"message","text":"SourceWalk.jl does more or less exactly this. But it's really buggy.\nAnd unmaintained","user":"U6A936746","ts":"1614368782.275100","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1614368798.000000"},"blocks":[{"type":"rich_text","block_id":"LSN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"SourceWalk.jl does more or less exactly this. But it's really buggy.\nAnd unmaintained"}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"type":"message","subtype":"thread_broadcast","text":"DocumentFormat.jl seems to perform edits at the structural level of strings.\n\nJuliaFormatter.jl seems to perform edits at the structural level of their \"FST\".\n\nIs there anything that lets me go from a CST in CSTParser back to text? I asked here: <https://github.com/julia-vscode/CSTParser.jl/issues/265>","user":"U72B7LTMX","ts":"1614377315.279200","thread_ts":"1614361843.271600","root":{"client_msg_id":"8686e1e6-60f7-4b56-bbfb-2d4f5198966e","type":"message","text":"I'd like to automatically change a bunch of `foo(a, b)` into `a binop b`.\n(e.g. from `union(a, b)`  into `a ∪ b`)\n\nWhat do folks recommend? Is there an example using something like <https://github.com/julia-vscode/CSTParser.jl> ?","user":"U72B7LTMX","ts":"1614361843.271600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j17v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'd like to automatically change a bunch of "},{"type":"text","text":"foo(a, b)","style":{"code":true}},{"type":"text","text":" into "},{"type":"text","text":"a binop b","style":{"code":true}},{"type":"text","text":".\n(e.g. from "},{"type":"text","text":"union(a, b)","style":{"code":true}},{"type":"text","text":"  into "},{"type":"text","text":"a ∪ b","style":{"code":true}},{"type":"text","text":")\n\nWhat do folks recommend? Is there an example using something like "},{"type":"link","url":"https://github.com/julia-vscode/CSTParser.jl"},{"type":"text","text":" ?"}]}]}],"thread_ts":"1614361843.271600","reply_count":36,"reply_users_count":6,"latest_reply":"1614540042.332700","reply_users":["U6NFPDBV1","U72B7LTMX","U6A936746","U8D9768Q6","U6A7NFP62","U6CF3AA5Q"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"eYVuv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"DocumentFormat.jl seems to perform edits at the structural level of strings.\n\nJuliaFormatter.jl seems to perform edits at the structural level of their \"FST\".\n\nIs there anything that lets me go from a CST in CSTParser back to text? I asked here: "},{"type":"link","url":"https://github.com/julia-vscode/CSTParser.jl/issues/265"}]}]}],"client_msg_id":"fde6ad1f-de2d-43c6-84e5-27005e5051df"},{"client_msg_id":"9b8c6b4e-0158-481c-b253-9a177b4bddb5","type":"message","text":"I don't see any reason to use string-level tools for this. Why not operate on the AST?","user":"U8D9768Q6","ts":"1614377489.280000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"we/E","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't see any reason to use string-level tools for this. Why not operate on the AST?"}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"cd6e6fd6-425d-43b8-9129-14de4b4373c8","type":"message","text":"<@U8D9768Q6> I wonder if you think I'm trying to write a macro? I'm trying to do a find-and-replace in a code base.","user":"U72B7LTMX","ts":"1614377807.280200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"H2n=","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U8D9768Q6"},{"type":"text","text":" I wonder if you think I'm trying to write a macro? I'm trying to do a find-and-replace in a code base."}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"371f4b9f-0518-4339-8ce6-a64ce5743dda","type":"message","text":"Ah, I see. That was not very evident to me from the question","user":"U8D9768Q6","ts":"1614378085.280600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QRe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, I see. That was not very evident to me from the question"}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"89bb6a2f-55cc-4aa7-a88a-d814392f9295","type":"message","text":"Yeah, I realized when you asked!","user":"U72B7LTMX","ts":"1614378246.280800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O39r","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, I realized when you asked!"}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"00b93539-f9ea-40e5-8f9d-a9414c4c5f81","type":"message","text":"I feel tempted to say I'd still rather just parse, operate on AST and then convert to string","user":"U8D9768Q6","ts":"1614378741.281000","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1614378747.000000"},"blocks":[{"type":"rich_text","block_id":"vbU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I feel tempted to say I'd still rather just parse, operate on AST and then convert to string"}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"918ce96c-3199-4725-ba0f-78d715b923f9","type":"message","text":"Doing it on AST will destroy comments and white space and infixedness.\nYou need the CST","user":"U6A936746","ts":"1614379078.281300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/FI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Doing it on AST will destroy comments and white space and infixedness.\nYou need the CST"}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"c124c3d4-d5a9-418c-9d96-8331824781a0","type":"message","text":"Yeah true, losing comments would be a bummer.","user":"U8D9768Q6","ts":"1614379501.281500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"unE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah true, losing comments would be a bummer."}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"1e11a72a-5518-4a88-a007-dd522be79482","type":"message","text":"But I can't help but love my AST level manipulations\n```julia&gt; using MLStyle\n\njulia&gt; s = \"\"\"\n       function f(x, y, z)\n           bar(foo(x, y), foo(y, z))\n       end\n       \"\"\";\n\njulia&gt; let ex = Meta.parse(s)\n           replacer(ex) = @match ex begin\n               :foo =&gt; :∪\n               :bar =&gt; :∩\n               ex::Expr =&gt; Expr(replacer(ex.head), filter(x -&gt; !(x isa LineNumberNode), replacer.(ex.args))...)\n               x =&gt; x\n           end\n           string(replacer(ex))\n       end\n\"function f(x, y, z)\\n    (x ∪ y) ∩ (y ∪ z)\\nend\"```","user":"U8D9768Q6","ts":"1614379673.281700","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1614379683.000000"},"blocks":[{"type":"rich_text","block_id":"ti+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But I can't help but love my AST level manipulations\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using MLStyle\n\njulia> s = \"\"\"\n       function f(x, y, z)\n           bar(foo(x, y), foo(y, z))\n       end\n       \"\"\";\n\njulia> let ex = Meta.parse(s)\n           replacer(ex) = @match ex begin\n               :foo => :∪\n               :bar => :∩\n               ex::Expr => Expr(replacer(ex.head), filter(x -> !(x isa LineNumberNode), replacer.(ex.args))...)\n               x => x\n           end\n           string(replacer(ex))\n       end\n\"function f(x, y, z)\\n    (x ∪ y) ∩ (y ∪ z)\\nend\""}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"26f0affa-55c2-4a27-9abb-e1df36c41b61","type":"message","text":"You should be able to do that same code on the CST, though.\nYou can with SourceWalk.jl","user":"U6A936746","ts":"1614379777.282000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pDaI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You should be able to do that same code on the CST, though.\nYou can with SourceWalk.jl"}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"86d40779-67e9-47a7-a6b3-5be1e66ee0bc","type":"message","text":"Fair enough","user":"U8D9768Q6","ts":"1614379800.282200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3RsN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Fair enough"}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"7038e40a-af38-40a9-aa9f-87fd675a3bc1","type":"message","text":"As above, yes you need the CST but this sort of transformation is pretty easy especially if it's a ome off and the changes are based on the syntactic structure rather than semantic","user":"U6A7NFP62","ts":"1614380210.284000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kH=Y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"As above, yes you need the CST but this sort of transformation is pretty easy especially if it's a ome off and the changes are based on the syntactic structure rather than semantic"}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"type":"message","subtype":"thread_broadcast","text":"<@U6A7NFP62> I don't understand the \"but\".","user":"U72B7LTMX","ts":"1614452816.298300","thread_ts":"1614361843.271600","root":{"client_msg_id":"8686e1e6-60f7-4b56-bbfb-2d4f5198966e","type":"message","text":"I'd like to automatically change a bunch of `foo(a, b)` into `a binop b`.\n(e.g. from `union(a, b)`  into `a ∪ b`)\n\nWhat do folks recommend? Is there an example using something like <https://github.com/julia-vscode/CSTParser.jl> ?","user":"U72B7LTMX","ts":"1614361843.271600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j17v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'd like to automatically change a bunch of "},{"type":"text","text":"foo(a, b)","style":{"code":true}},{"type":"text","text":" into "},{"type":"text","text":"a binop b","style":{"code":true}},{"type":"text","text":".\n(e.g. from "},{"type":"text","text":"union(a, b)","style":{"code":true}},{"type":"text","text":"  into "},{"type":"text","text":"a ∪ b","style":{"code":true}},{"type":"text","text":")\n\nWhat do folks recommend? Is there an example using something like "},{"type":"link","url":"https://github.com/julia-vscode/CSTParser.jl"},{"type":"text","text":" ?"}]}]}],"thread_ts":"1614361843.271600","reply_count":36,"reply_users_count":6,"latest_reply":"1614540042.332700","reply_users":["U6NFPDBV1","U72B7LTMX","U6A936746","U8D9768Q6","U6A7NFP62","U6CF3AA5Q"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"muB=","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U6A7NFP62"},{"type":"text","text":" I don't understand the \"but\"."}]}]}],"client_msg_id":"0d23c7e9-670b-43dc-8cd5-194c4c8f6488"},{"client_msg_id":"a74deba9-5f91-4168-9059-49d63664aee9","type":"message","text":"By the way, it's not just about preserving comments, though that's a big one. It's also about preserving white space, or trailing commas, or any other number of things that are normalized in an AST representation.","user":"U72B7LTMX","ts":"1614453320.298700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/wz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"By the way, it's not just about preserving comments, though that's a big one. It's also about preserving white space, or trailing commas, or any other number of things that are normalized in an AST representation."}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX","reactions":[{"name":"heavy_check_mark","users":["U6A936746"],"count":1}]},{"client_msg_id":"e3ff1041-5429-4bd2-a5ef-cb5554b7aad2","type":"message","text":"<@U6A936746>, do you know if the CST representation is actually round-trippable? I have not found an example of it used in such a way, and in the [issue above](<https://github.com/julia-vscode/CSTParser.jl/issues/265>) it seems like it actually is not.","user":"U72B7LTMX","ts":"1614454590.299000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Yqb","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U6A936746"},{"type":"text","text":", do you know if the CST representation is actually round-trippable? I have not found an example of it used in such a way, and in the [issue above]("},{"type":"link","url":"https://github.com/julia-vscode/CSTParser.jl/issues/265"},{"type":"text","text":") it seems like it actually is not."}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"25f54d43-c4ce-4a01-9536-9502d198f505","type":"message","text":"<@U6A7NFP62> is who you would have to talk to about that.","user":"U6A936746","ts":"1614455308.299400","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1614455314.000000"},"blocks":[{"type":"rich_text","block_id":"3GMMp","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U6A7NFP62"},{"type":"text","text":" is who you would have to talk to about that."}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"7fdc6071-f07f-4ec2-baf7-0dba20a446a8","type":"message","text":"Hi <@U72B7LTMX>, I responded to some of the comments on your issue and do happen to have some code that does what you intially asked - 1 sec I'll find it","user":"U6A7NFP62","ts":"1614459385.309100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"T6pL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi "},{"type":"user","user_id":"U72B7LTMX"},{"type":"text","text":", I responded to some of the comments on your issue and do happen to have some code that does what you intially asked - 1 sec I'll find it"}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX","reactions":[{"name":"pray","users":["U72B7LTMX"],"count":1}]},{"client_msg_id":"511e33bc-b23c-4d36-9499-34d88d17c2d7","type":"message","text":"```using CSTParser\n\nfunction replace_call_with_infix(fname, op, docstr)\n    function find_edits(fname, op, docstr, x = CSTParser.parse(docstr, true), offset = 0, edits =[])\n        if x isa CSTParser.EXPR &amp;&amp; x.head === :call &amp;&amp; length(x.args) == 3 &amp;&amp; CSTParser.isidentifier(x.args[1]) &amp;&amp; CSTParser.valof(x.args[1]) == fname &amp;&amp; length(x) == 6\n            arg1str = String(codeunits(docstr)[(offset + sum(x[i].fullspan for i = 1:2)) .+ (1:x[3].fullspan)])\n            arg2str = String(codeunits(docstr)[(offset + sum(x[i].fullspan for i = 1:4)) .+ (1:x[5].fullspan)])\n            push!(edits, (insertrange = offset .+ (1:x.span), inserttext = string(arg1str, \" $op \", arg2str)))\n        elseif length(x) &gt; 0\n            for a in x\n                find_edits(fname, op, docstr, a, offset, edits)\n                offset += a.fullspan\n            end\n        end\n        edits\n    end\n    edits = find_edits(fname, op, docstr)\n    while !isempty(edits)\n        # loop here in case we have calls to fname within an arg of fname\n        for edit in reverse(edits)\n            docstr = String(vcat(\n                codeunits(docstr)[1:first(edit.insertrange) - 1],\n                codeunits(edit.inserttext),\n                codeunits(docstr)[last(edit.insertrange) + 1:end]\n                ))\n        end\n        edits = find_edits(fname, op, docstr)\n    end\n    docstr\nend```","user":"U6A7NFP62","ts":"1614459583.309400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FhSbI","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using CSTParser\n\nfunction replace_call_with_infix(fname, op, docstr)\n    function find_edits(fname, op, docstr, x = CSTParser.parse(docstr, true), offset = 0, edits =[])\n        if x isa CSTParser.EXPR && x.head === :call && length(x.args) == 3 && CSTParser.isidentifier(x.args[1]) && CSTParser.valof(x.args[1]) == fname && length(x) == 6\n            arg1str = String(codeunits(docstr)[(offset + sum(x[i].fullspan for i = 1:2)) .+ (1:x[3].fullspan)])\n            arg2str = String(codeunits(docstr)[(offset + sum(x[i].fullspan for i = 1:4)) .+ (1:x[5].fullspan)])\n            push!(edits, (insertrange = offset .+ (1:x.span), inserttext = string(arg1str, \" $op \", arg2str)))\n        elseif length(x) > 0\n            for a in x\n                find_edits(fname, op, docstr, a, offset, edits)\n                offset += a.fullspan\n            end\n        end\n        edits\n    end\n    edits = find_edits(fname, op, docstr)\n    while !isempty(edits)\n        # loop here in case we have calls to fname within an arg of fname\n        for edit in reverse(edits)\n            docstr = String(vcat(\n                codeunits(docstr)[1:first(edit.insertrange) - 1],\n                codeunits(edit.inserttext),\n                codeunits(docstr)[last(edit.insertrange) + 1:end]\n                ))\n        end\n        edits = find_edits(fname, op, docstr)\n    end\n    docstr\nend"}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"e77bd22b-73df-4edf-a916-0e98160fb870","type":"message","text":"and use it like -\n```replace_call_with_infix(\"func\", \"+\", \"func(a  #= some comment=#,func(b,c))\")```","user":"U6A7NFP62","ts":"1614459633.309600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gNj=9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and use it like -\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"replace_call_with_infix(\"func\", \"+\", \"func(a  #= some comment=#,func(b,c))\")"}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"823dc1ac-2f91-4742-8da7-102052138c54","type":"message","text":"Not sure how robust it is though","user":"U6A7NFP62","ts":"1614459652.309800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5brSA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not sure how robust it is though"}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"6a50f647-44f3-43f8-b2c7-ad7da73c6989","type":"message","text":"Oh, wow. Thanks!","user":"U72B7LTMX","ts":"1614459655.310000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w+NLj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh, wow. Thanks!"}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"359debcf-eb82-456f-a2cf-a5ab6f9f64d3","type":"message","text":"Do you imagine it might be possible to optionally make `EXPR` fully round-trippable, without interfering with performance in the case where that's important?","user":"U72B7LTMX","ts":"1614459709.310200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"phf8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Do you imagine it might be possible to optionally make "},{"type":"text","text":"EXPR","style":{"code":true}},{"type":"text","text":" fully round-trippable, without interfering with performance in the case where that's important?"}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"25c1fc5d-0906-4739-9814-e8cf04ba0257","type":"message","text":"If it were, then I am guessing this code would be simplified quite a bit, because you would not have to deal with the two representations simultaneously","user":"U72B7LTMX","ts":"1614459753.310400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AQj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If it were, then I am guessing this code would be simplified quite a bit, because you would not have to deal with the two representations simultaneously"}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"bf894388-4935-454a-80ef-e78fe6cb4248","type":"message","text":"Yeah you could just push the EXPR around","user":"U6A7NFP62","ts":"1614459776.310600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Lbt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah you could just push the EXPR around"}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"2a7ed232-8278-40d9-bf0e-8219b0ff420b","type":"message","text":"but in the short term, no I don't think so","user":"U6A7NFP62","ts":"1614459787.310800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BJV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but in the short term, no I don't think so"}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"e41d01df-6175-4bac-96fd-bf87546618d6","type":"message","text":"(in terms of my time), but if you want to have a go it wouldn't be too hard","user":"U6A7NFP62","ts":"1614459849.311000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pCVMi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(in terms of my time), but if you want to have a go it wouldn't be too hard"}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"9903ca6f-6bfe-4535-ad64-92d2307a9b19","type":"message","text":"you could probably just stick ws/comments into the `.val` field and use `.span` and `.fullspan` to determine what part of the val is content and what is ws","user":"U6A7NFP62","ts":"1614459923.311200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cZecJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you could probably just stick ws/comments into the "},{"type":"text","text":".val","style":{"code":true}},{"type":"text","text":" field and use "},{"type":"text","text":".span","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":".fullspan","style":{"code":true}},{"type":"text","text":" to determine what part of the val is content and what is ws"}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"d5bc481c-ae3a-4f2d-8597-c0dc7e034251","type":"message","text":"That might work. It doesn't sit quite right with me because semi-colons `;` will get lumped into the \"wrong\" place. e.g. CSTParser.parse(\"a + b;\", true)","user":"U72B7LTMX","ts":"1614461593.311600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DOjx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That might work. It doesn't sit quite right with me because semi-colons "},{"type":"text","text":";","style":{"code":true}},{"type":"text","text":" will get lumped into the \"wrong\" place. e.g. CSTParser.parse(\"a + b;\", true)"}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"e9c89cd9-fc99-4377-a7e8-528c5fc2c29b","type":"message","text":"But that was an issue with the proposal I mentioned in the issue, too.","user":"U72B7LTMX","ts":"1614461806.311800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MHQW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But that was an issue with the proposal I mentioned in the issue, too."}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"71c9d812-816f-4c72-a0e9-dd28ca478e97","type":"message","text":"I wonder if some of this would belong in the `trivia` field","user":"U72B7LTMX","ts":"1614462267.312000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"06fV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I wonder if some of this would belong in the "},{"type":"text","text":"trivia","style":{"code":true}},{"type":"text","text":" field"}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"ed86ffaa-0d5c-4fea-9922-6c528f05e019","type":"message","text":"you can use tokenize.jl as a preprocessing step to find comments/semicolons/etc and place them back in when it's appropriate\n\n<https://github.com/domluna/JuliaFormatter.jl/blob/master/src/document.jl#L45-L189>\n\nthis is how it's done in JuliaFormatter","user":"U6CF3AA5Q","ts":"1614525631.327900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jZIQ2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can use tokenize.jl as a preprocessing step to find comments/semicolons/etc and place them back in when it's appropriate\n\n"},{"type":"link","url":"https://github.com/domluna/JuliaFormatter.jl/blob/master/src/document.jl#L45-L189"},{"type":"text","text":"\n\nthis is how it's done in JuliaFormatter"}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"b7c14067-948c-40eb-9a1c-46af5d280697","type":"message","text":"<@U6CF3AA5Q> I was thinking that there should be some correspondence from the CST \"layer\" to the tokenize layer, instead of the CST layer just maintaining a correspondence to the text layer, which seems to go along with your idea. ` CSTParser.parse` already calls out to `Tokenize.jl`, so this preprocessing already happens. That means it happens twice in JuliaFormatter, to be sure.","user":"U72B7LTMX","ts":"1614538562.329100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W8pc","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U6CF3AA5Q"},{"type":"text","text":" I was thinking that there should be some correspondence from the CST \"layer\" to the tokenize layer, instead of the CST layer just maintaining a correspondence to the text layer, which seems to go along with your idea. ` CSTParser.parse` already calls out to "},{"type":"text","text":"Tokenize.jl","style":{"code":true}},{"type":"text","text":", so this preprocessing already happens. That means it happens twice in JuliaFormatter, to be sure."}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"},{"client_msg_id":"dfd21843-8f40-4cc5-b6fb-47eb24c8c631","type":"message","text":"yeah it could probably be stored in the trivia field","user":"U6CF3AA5Q","ts":"1614540042.332700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JHie","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah it could probably be stored in the trivia field"}]}]}],"thread_ts":"1614361843.271600","parent_user_id":"U72B7LTMX"}]