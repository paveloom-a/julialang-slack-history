[{"client_msg_id":"12bd9664-8b89-4ba4-ad41-8c340f916184","type":"message","text":"Mentioned in the hn thread is  <https://github.com/JuliaOptics/About|https://github.com/JuliaOptics/About>\n&gt; Julia does not offer significant acceleration over the numpy code of prysm -- only about 20%\n&gt; writing performant julia is significantly more difficult than writing performant numpy. The base language emits unvectorized code which is slower than numpy, the @avx macro is unstable and often crashes the interpreter, the allocator is much slower than numpy or even...","user":"UDGT4PM41","ts":"1616424972.227800","team":"T68168MUP","edited":{"user":"UDGT4PM41","ts":"1616425154.000000"},"blocks":[{"type":"rich_text","block_id":"5/dT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Mentioned in the hn thread is  "},{"type":"link","url":"https://github.com/JuliaOptics/About","text":"https://github.com/JuliaOptics/About"},{"type":"text","text":"\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"Julia does not offer significant acceleration over the numpy code of prysm -- only about 20%\n"},{"type":"text","text":"writing performant julia is significantly more difficult than writing performant numpy. The base language emits unvectorized code which is slower than numpy, the @avx macro is unstable and often crashes the interpreter, the allocator is much slower than numpy or even..."}]}]}],"thread_ts":"1616424972.227800","reply_count":43,"reply_users_count":11,"latest_reply":"1616467439.248200","reply_users":["U7HAYKY9X","U67D54KS8","UMDEUKM29","UGU761DU2","UDB26738Q","UH24GRBLL","U017LQ3A59U","UDGT4PM41","USU9FRPEU","U0179G7FG4F","UMY1LV01G"],"subscribed":false},{"client_msg_id":"b631c015-8234-4298-94b7-9b4d4043f91f","type":"message","text":"That's a shame. Looks like he is not used to writing performant Julia. I agree with this part:\n&gt; errors in Julia are severely cluttered by multiple line long type information which does not aid clarity","user":"U7HAYKY9X","ts":"1616425609.229200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DY6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's a shame. Looks like he is not used to writing performant Julia. I agree with this part:\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"errors in Julia are severely cluttered by multiple line long type information which does not aid clarity"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"3cef9a74-80ca-4037-9715-d97fd804ac36","type":"message","text":"&gt; This provides a set of guiding performance marks:\n&gt;   To be more than (5x required, 100x desired) faster than prysm, the fastest public physical optics code.\nAt least he had modest goals","user":"U67D54KS8","ts":"1616425687.229400","team":"T68168MUP","edited":{"user":"U67D54KS8","ts":"1616425691.000000"},"blocks":[{"type":"rich_text","block_id":"0ESo","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"This provides a set of guiding performance marks:\n  To be more than (5x required, 100x desired) faster than prysm, the fastest public physical optics code."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nAt least he had modest goals"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41","reactions":[{"name":"sweat_smile","users":["U7HAYKY9X","UGU761DU2","UEKT6136U","U01HD5VFXJM","UDGT4PM41","UKG4WF8PJ"],"count":6}]},{"client_msg_id":"b2b9d5c4-4ca0-4793-ac88-4543f1eab81d","type":"message","text":"He does have a point that certain type of array-heavy operations are not ultra-optimized in julia, require putting `@.` everywhere (although the added convenience of being able to broadcast on any function beats the downsides for me there) and might possibly be faster in numpy or matlab (which has a faster allocator and automatic multithreading)","user":"UMDEUKM29","ts":"1616426916.230400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Nbc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"He does have a point that certain type of array-heavy operations are not ultra-optimized in julia, require putting "},{"type":"text","text":"@.","style":{"code":true}},{"type":"text","text":" everywhere (although the added convenience of being able to broadcast on any function beats the downsides for me there) and might possibly be faster in numpy or matlab (which has a faster allocator and automatic multithreading)"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"f508e3c3-8eeb-4bc0-b625-e7730503c8be","type":"message","text":"Yeah, it turns out if your python project is already spending all its time in BLAS and FFT and stuff, and you come to Julia expecting a 5-100x speedup, you’re going to have a bad time… hopefully a few people who come for that will still stay for the  multiple dispatch / composability / AD, but others like this guy seem to either not want, or leave before figuring out the latter.","user":"UGU761DU2","ts":"1616427015.230600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tbnsO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, it turns out if your python project is already spending all its time in BLAS and FFT and stuff, and you come to Julia expecting a 5-100x speedup, you’re going to have a bad time… hopefully a few people who come for that will still stay for the  multiple dispatch / composability / AD, but others like this guy seem to either not want, or leave before figuring out the latter."}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"63c988d1-6d03-4bdf-8199-2888093f656d","type":"message","text":"this may be another case of wrong expectations... ok Brenhin wrote that already what I was going to say :smile:","user":"UDB26738Q","ts":"1616427044.230800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rXdS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this may be another case of wrong expectations... ok Brenhin wrote that already what I was going to say "},{"type":"emoji","name":"smile"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41","reactions":[{"name":"fast_parrot","users":["UGU761DU2","UKG4WF8PJ","U66M57AN4","U6QGE7S86","UMY1LV01G"],"count":5}]},{"client_msg_id":"149ff1b8-48e6-467f-9c8e-a3abde318e5f","type":"message","text":"That's probably true. The problem with having to be really fast at everything is that everything needs to actually have an optimized implementation. And a lot of stuff doesn't have that in Julia yet","user":"U7HAYKY9X","ts":"1616427046.231000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pdS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's probably true. The problem with having to be really fast at everything is that everything needs to actually have an optimized implementation. And a lot of stuff doesn't have that in Julia yet"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"fd38daf2-9d33-4470-996f-6a3061b4eb6c","type":"message","text":"(e.g. it's really hard to do string processing in Julia without allocating all over the place, probably because the original creators and most users of Julia are from branches of science where high performance == array computation)","user":"U7HAYKY9X","ts":"1616427106.231300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"r+j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(e.g. it's really hard to do string processing in Julia without allocating all over the place, probably because the original creators and most users of Julia are from branches of science where high performance == array computation)"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41","reactions":[{"name":"heavy_check_mark","users":["UGU761DU2","UKG4WF8PJ","U0179G7FG4F","U9MED583T"],"count":4}]},{"client_msg_id":"afe27067-a473-4a7a-aa1f-8c848924e447","type":"message","text":"Also I’d say it’s not at all _hard_ to write C-like-performant code in Julia for standard numerical stuff, but it’s very hard to do so in the mental model that you usually come with from python/matlab/etc, where a lot of your habits (because of things that were fast in those languages) will have you making excess allocations absolutely _everywhere_, and probably type-unstable too.","user":"UGU761DU2","ts":"1616428039.231800","team":"T68168MUP","edited":{"user":"UGU761DU2","ts":"1616428068.000000"},"blocks":[{"type":"rich_text","block_id":"oJ6P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also I’d say it’s not at all "},{"type":"text","text":"hard","style":{"italic":true}},{"type":"text","text":" to write C-like-performant code in Julia for standard numerical stuff, but it’s very hard to do so in the mental model that you usually come with from python/matlab/etc, where a lot of your habits (because of things that were fast in those languages) will have you making excess allocations absolutely "},{"type":"text","text":"everywhere","style":{"italic":true}},{"type":"text","text":", and probably type-unstable too."}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"8a221ce2-1b88-40f3-bdd7-56e975b9f505","type":"message","text":"The string stuff has some issues though where ideas to change them is tracked","user":"UH24GRBLL","ts":"1616428111.232100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"e4sMx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The string stuff has some issues though where ideas to change them is tracked"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"87205f56-bda1-41c3-b202-cd3e910ed5f3","type":"message","text":"the author of that JuliaOptics package was on this slack and was quite passionate about their opinions about julia","user":"UH24GRBLL","ts":"1616428182.232300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qyN6A","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the author of that JuliaOptics package was on this slack and was quite passionate about their opinions about julia"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"b68247cf-cde5-4f52-bce3-a8c781c61bd6","type":"message","text":"was certainly a little heated at times","user":"UH24GRBLL","ts":"1616428188.232600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/Z7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"was certainly a little heated at times"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41","reactions":[{"name":"this-is-true","users":["UGU761DU2","UKG4WF8PJ","U6QGE7S86","UC7FP1MQV","UMY1LV01G"],"count":5}]},{"client_msg_id":"40eac569-6421-4282-a71d-773aac978832","type":"message","text":"<@UH24GRBLL> Really? That's great! I've been worried a little that the String stuff wouldn't get fixed until Julia was so mature it would be really hard to improve","user":"U7HAYKY9X","ts":"1616428281.232900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UYR","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH24GRBLL"},{"type":"text","text":" Really? That's great! I've been worried a little that the String stuff wouldn't get fixed until Julia was so mature it would be really hard to improve"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"e53086d8-e5f2-4473-8a87-50ab432c1282","type":"message","text":"Interestingly enough if he really get 20% faster than prysm, well first it's already impressive both from the author and the language, then it means prysm can no longer claim to be 3x faster than the best competitor :smile:","user":"U017LQ3A59U","ts":"1616428294.233100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NFX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Interestingly enough if he really get 20% faster than prysm, well first it's already impressive both from the author and the language, then it means prysm can no longer claim to be 3x faster than the best competitor "},{"type":"emoji","name":"smile"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41","reactions":[{"name":"shushing_face","users":["UH24GRBLL","UGU761DU2","UKG4WF8PJ"],"count":3}]},{"client_msg_id":"8cbec3b4-4e2c-4021-940b-38756413da70","type":"message","text":"quick look through the label:strings section - quite a few of those are probably easily closed, simply because they're no longer relevant","user":"UH24GRBLL","ts":"1616428591.233700","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1616428600.000000"},"blocks":[{"type":"rich_text","block_id":"uk9nQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"quick look through the label:strings section - quite a few of those are probably easily closed, simply because they're no longer relevant"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"31368154-829f-4006-87b3-08a196bf7102","type":"message","text":"thre's also the JuliaStrings organization, though I don't know how those ideas would be integrated","user":"UH24GRBLL","ts":"1616428635.234000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w+s0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thre's also the JuliaStrings organization, though I don't know how those ideas would be integrated"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"d445e5c1-ecd7-4fdf-bab4-af1b328a29f7","type":"message","text":"Well... all the stuff in JuliaStrings shouldn't be dumped into Base. It's too specific - like ASCII strings and 16-bit chars and such. That's domain-specific, and should live in a separate package (though to come back to my previous point about the original devs being from specific fields, all the linear algebra stuff _is_ in stdlib). It's more about optimizing the existing operations, and only adding new stuff if they could help against very common stumbling blocks.\nIterative `split` , a very simple buffer type in stdlib (seriously, why does Julia have `CholeskyPivoted` in the stdlib, but not an efficient way to buffer files?), a mutable `String` type, and a way to create string views from a buffer would go a long way.","user":"U7HAYKY9X","ts":"1616429068.234300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nyj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well... all the stuff in JuliaStrings shouldn't be dumped into Base. It's too specific - like ASCII strings and 16-bit chars and such. That's domain-specific, and should live in a separate package (though to come back to my previous point about the original devs being from specific fields, all the linear algebra stuff "},{"type":"text","text":"is","style":{"italic":true}},{"type":"text","text":" in stdlib). It's more about optimizing the existing operations, and only adding new stuff if they could help against very common stumbling blocks.\nIterative "},{"type":"text","text":"split","style":{"code":true}},{"type":"text","text":" , a very simple buffer type in stdlib (seriously, why does Julia have "},{"type":"text","text":"CholeskyPivoted","style":{"code":true}},{"type":"text","text":" in the stdlib, but not an efficient way to buffer files?), a mutable "},{"type":"text","text":"String","style":{"code":true}},{"type":"text","text":" type, and a way to create string views from a buffer would go a long way."}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41","reactions":[{"name":"thumbsup_all","users":["U0179G7FG4F"],"count":1}]},{"client_msg_id":"346f6d89-2e63-4588-8051-f468b3df2651","type":"message","text":"yeah, a more specialised ByteBuffer/better IOBuffer should be a thing","user":"UH24GRBLL","ts":"1616429107.234500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lUlc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, a more specialised ByteBuffer/better IOBuffer should be a thing"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"8d68afbf-8efe-43b6-9d27-c955b682b749","type":"message","text":"I know there's a comprehensive issue about that","user":"UH24GRBLL","ts":"1616429119.234700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ilAx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I know there's a comprehensive issue about that"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"7a04a880-9c12-4841-9adc-349e2e81f376","type":"message","text":"however my understanding is that in principle there is nothing that inherently prevents such optimisations but no one took the time to go through all hoops to do that, right?","user":"UDB26738Q","ts":"1616429244.234900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JA4Zk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"however my understanding is that in principle there is nothing that inherently prevents such optimisations but no one took the time to go through all hoops to do that, right?"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"e22b3b18-80f7-4d03-8e49-755d46b584b8","type":"message","text":"there's an issue and PR for iterative line splitting, open since 2017","user":"UH24GRBLL","ts":"1616429312.235100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vjGNf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there's an issue and PR for iterative line splitting, open since 2017"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"88ebf323-0e0b-493f-92d4-410be304e9a4","type":"message","text":"my personal pet peeve with IO is #39041","user":"UH24GRBLL","ts":"1616429326.235300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aDN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"my personal pet peeve with IO is #39041"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"ae10b799-2fb8-42e5-bd28-4df7ba222443","type":"message","text":"that one will probably sadly require internal fixes/features thoguh","user":"UH24GRBLL","ts":"1616429374.235500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tPKW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that one will probably sadly require internal fixes/features thoguh"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"74500d4b-53fd-463a-826d-514288d476d9","type":"message","text":"but yeah, in theory it's just work that would need to be done","user":"UH24GRBLL","ts":"1616429388.235700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FOQA=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but yeah, in theory it's just work that would need to be done"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"7f7c0072-9e91-4af8-8cdb-e1ec8a60781f","type":"message","text":"same goes for the `ByteBuffer` thing that could be used for backing arrays as well","user":"UH24GRBLL","ts":"1616429409.235900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZE5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"same goes for the "},{"type":"text","text":"ByteBuffer","style":{"code":true}},{"type":"text","text":" thing that could be used for backing arrays as well"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"0f292952-9c50-4cae-b528-562b6eb43566","type":"message","text":"there's also #24526, which will have to be dealt with at some point :|","user":"UH24GRBLL","ts":"1616429467.236100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HLjD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there's also #24526, which will have to be dealt with at some point :|"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"cc4942d4-360e-496e-a2c3-9876dc0308f5","type":"message","text":"the string and IO stories in general need some work","user":"UH24GRBLL","ts":"1616429484.236300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"osuo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the string and IO stories in general need some work"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"653064af-24a1-40cf-aadd-d78468165d1d","type":"message","text":"but they're still not horrible","user":"UH24GRBLL","ts":"1616429495.236500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oDo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but they're still not horrible"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"4969263b-c8b2-4f77-8620-04ac01a8b3e0","type":"message","text":"Agreed, it's just a bunch of stuff that needs to be done. I don't *think* there is any bad API or design, luckily. The API was well thought out. `ByteBuffer` is probably really hard to do, becuase it requires rewriting the `Array` type which is so fundamental.","user":"U7HAYKY9X","ts":"1616429516.236700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WRGM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Agreed, it's just a bunch of stuff that needs to be done. I don't "},{"type":"text","text":"think","style":{"bold":true}},{"type":"text","text":" there is any bad API or design, luckily. The API was well thought out. "},{"type":"text","text":"ByteBuffer","style":{"code":true}},{"type":"text","text":" is probably really hard to do, becuase it requires rewriting the "},{"type":"text","text":"Array","style":{"code":true}},{"type":"text","text":" type which is so fundamental."}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"4812cc7d-f453-4dff-80a9-fd38b5c179e2","type":"message","text":"None of those are breaking changes, right?","user":"UDGT4PM41","ts":"1616430198.237000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dFCU2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"None of those are breaking changes, right?"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41","reactions":[{"name":"correct_answer","users":["U7HAYKY9X","UKG4WF8PJ"],"count":2}]},{"client_msg_id":"c444e6e9-a451-49ce-8cb5-9b7dd72024b5","type":"message","text":"not technically, but they have big implications so.. careful","user":"UH24GRBLL","ts":"1616431409.238300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zyg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not technically, but they have big implications so.. careful"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"5c1de17b-aad2-4130-8996-979e14dad12e","type":"message","text":"you have to be careful with those fundamental building blocks, especially performance wise","user":"UH24GRBLL","ts":"1616431830.238500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d94X","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you have to be careful with those fundamental building blocks, especially performance wise"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"b84cebd3-3682-4b85-b0c6-825f248e225c","type":"message","text":"I remember talking to him about <https://github.com/JuliaOptics/Fourier.jl>","user":"USU9FRPEU","ts":"1616432547.238900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2h6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I remember talking to him about "},{"type":"link","url":"https://github.com/JuliaOptics/Fourier.jl"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"521966b8-2fa6-494d-8d1e-3f23196655a2","type":"message","text":"I still think we screwed up String indexing, but oh well","user":"U0179G7FG4F","ts":"1616438007.240600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/gGH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I still think we screwed up String indexing, but oh well"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"71fa8b78-1862-4521-897a-9970de6f4d5a","type":"message","text":"Huh, why?","user":"U67D54KS8","ts":"1616441766.241200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QZ8=+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Huh, why?"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"6dd7a46f-5b55-462c-8a5f-ee4648cbc74e","type":"message","text":"Indexing by byte means that indexes are different for different string types. I'm not sure what the best solution is, but having a situation where `s[5]` will be the 5th character with ascii, but break with unicode makes for a really un-intuitive system","user":"U0179G7FG4F","ts":"1616441918.241400","team":"T68168MUP","edited":{"user":"U0179G7FG4F","ts":"1616441925.000000"},"blocks":[{"type":"rich_text","block_id":"jfD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Indexing by byte means that indexes are different for different string types. I'm not sure what the best solution is, but having a situation where "},{"type":"text","text":"s[5]","style":{"code":true}},{"type":"text","text":" will be the 5th character with ascii, but break with unicode makes for a really un-intuitive system"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"e102e1df-3b82-4b14-8aff-b12ac9f9e3f8","type":"message","text":"You should never blindly index via integer unless you have gotten that integer from something like `nextind`, `prevind` etc.","user":"U67D54KS8","ts":"1616442287.241700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"l+a6y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You should never blindly index via integer unless you have gotten that integer from something like "},{"type":"text","text":"nextind","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"prevind","style":{"code":true}},{"type":"text","text":" etc."}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"620f7ddf-e212-4d35-8cbd-beb4c6196859","type":"message","text":"If you want to gave `getindex`, I think what exists now is probably the best","user":"U67D54KS8","ts":"1616442405.241900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Rxjna","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you want to gave "},{"type":"text","text":"getindex","style":{"code":true}},{"type":"text","text":", I think what exists now is probably the best"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"f4f84a62-4613-49cf-9ebb-9bfd38ccbfa7","type":"message","text":"that's what I mean by we screwed up string indexing. The inability to pretend that they are a `Vector{Character}` is not un-workable, but is a major turn-off to people used to string processing  other high level languages","user":"U0179G7FG4F","ts":"1616442446.242100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3Nq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's what I mean by we screwed up string indexing. The inability to pretend that they are a "},{"type":"text","text":"Vector{Character}","style":{"code":true}},{"type":"text","text":" is not un-workable, but is a major turn-off to people used to string processing  other high level languages"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"d3f692eb-a648-4467-a4db-115fe1167091","type":"message","text":"How is it screwed up when it is the only sensible choice? Do you want string indexing to be O(n)? Do you want to waste 2x-4x memory because you have one non-ascii character in your string?","user":"U67D54KS8","ts":"1616442733.242300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lMx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How is it screwed up when it is the only sensible choice? Do you want string indexing to be O(n)? Do you want to waste 2x-4x memory because you have one non-ascii character in your string?"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"f5f61efa-3cca-4fc3-85ad-256974248b9b","type":"message","text":"There are possible compromises, pypy uses a system that is UTF8 with an index to allow O(1) indexing.","user":"U0179G7FG4F","ts":"1616442813.242500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oYbc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There are possible compromises, pypy uses a system that is UTF8 with an index to allow O(1) indexing."}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"bbfcd6f8-e83f-470c-818d-6a7e7e1fee96","type":"message","text":"They do it so they are compatible with Python","user":"U67D54KS8","ts":"1616442960.242700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pe/92","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"They do it so they are compatible with Python"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"4f48060a-22a7-4a84-9656-ef384cd28bd2","type":"message","text":"<@UH24GRBLL> I remember those conversations...","user":"UMY1LV01G","ts":"1616467386.248000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0N5","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH24GRBLL"},{"type":"text","text":" I remember those conversations..."}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41"},{"client_msg_id":"4a9b81fd-f675-48e5-8d30-b39d4eec1e57","type":"message","text":"They were especially unpleasant and belligerent","user":"UMY1LV01G","ts":"1616467439.248200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5xV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"They were especially unpleasant and belligerent"}]}]}],"thread_ts":"1616424972.227800","parent_user_id":"UDGT4PM41","reactions":[{"name":"henning_rousseau","users":["UGU761DU2"],"count":1}]}]