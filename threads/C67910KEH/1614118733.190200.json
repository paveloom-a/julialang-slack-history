[{"client_msg_id":"8c85cbf7-a2dc-4b48-a606-5bdc6f76596b","type":"message","text":"Are there some general recommendations to make sure that your code can run on 32-bit hardware? Like avoiding Float64 and making all your structs using floats parametric on a subtype of abstractfloats?","user":"U73KENNG4","ts":"1614118733.190200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2sr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Are there some general recommendations to make sure that your code can run on 32-bit hardware? Like avoiding Float64 and making all your structs using floats parametric on a subtype of abstractfloats?"}]}]}],"thread_ts":"1614118733.190200","reply_count":28,"reply_users_count":8,"latest_reply":"1614189182.230700","reply_users":["U0179G7FG4F","UDB26738Q","U8D9768Q6","U73KENNG4","U7HAYKY9X","UCZ7VBGUD","UAUPJLBQX","U68QW0PUZ"],"subscribed":false},{"client_msg_id":"e87d0283-b173-4135-9dc1-6317a6dc4f06","type":"message","text":"Doesn't `Float64` exist on most 32 bit hardware?","user":"U0179G7FG4F","ts":"1614118831.190300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1im","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Doesn't "},{"type":"text","text":"Float64","style":{"code":true}},{"type":"text","text":" exist on most 32 bit hardware?"}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4","reactions":[{"name":"+1","users":["U7THT3TM3"],"count":1},{"name":"heavy_check_mark","users":["U6740K1SP"],"count":1}]},{"client_msg_id":"d0577905-72ce-498f-a655-21b7320d8ffa","type":"message","text":"`Float64` isn't any special on 32- or 64-bit system.  are you thinking of `Int`?","user":"UDB26738Q","ts":"1614118899.190500","team":"T68168MUP","edited":{"user":"UDB26738Q","ts":"1614118917.000000"},"blocks":[{"type":"rich_text","block_id":"Hfy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Float64","style":{"code":true}},{"type":"text","text":" isn't any special on 32- or 64-bit system.  are you thinking of "},{"type":"text","text":"Int","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4","reactions":[{"name":"point_up","users":["U680THK2S","U8D9768Q6","U0179G7FG4F","UEKT6136U","U7THT3TM3","U6740K1SP","U6QGE7S86","UPQP0RWTH"],"count":8}]},{"client_msg_id":"A382CC53-8664-4E34-99E7-E9DEC87D1AEC","type":"message","text":"Biggest thing is just never writing `Int32` or `Int64` but writing `Int` instead. Also check the comparability of any packages you’re using. 32 bit gets less coverage generally. Run CI on 32 but machines ","user":"U8D9768Q6","ts":"1614119066.193400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"taz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Biggest thing is just never writing "},{"type":"text","text":"Int32","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"Int64","style":{"code":true}},{"type":"text","text":" but writing "},{"type":"text","text":"Int","style":{"code":true}},{"type":"text","text":" instead. Also check the comparability of any packages you’re using. 32 bit gets less coverage generally. Run CI on 32 but machines "}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4","reactions":[{"name":"+1","users":["U7THT3TM3","U6740K1SP"],"count":2}]},{"client_msg_id":"e4899ea3-a5ed-4512-9a6b-69db2f5c96f3","type":"message","text":"Counterpoint: occasionally it is relaly important to use `Int64` (the biggest case is if you are say reinterpreting between `Int` and something else and expecting it to be a specific number of bits).","user":"U0179G7FG4F","ts":"1614119171.193600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+UVo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Counterpoint: occasionally it is relaly important to use "},{"type":"text","text":"Int64","style":{"code":true}},{"type":"text","text":" (the biggest case is if you are say reinterpreting between "},{"type":"text","text":"Int","style":{"code":true}},{"type":"text","text":" and something else and expecting it to be a specific number of bits)."}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4","reactions":[{"name":"+1","users":["UGU761DU2","U8D9768Q6","UAUPJLBQX","U7THT3TM3","U6740K1SP"],"count":5}]},{"client_msg_id":"580d9840-a17c-43e6-9212-b7a8b02b30c4","type":"message","text":"yeah, it really depends: when you refer to integer literals, or index of standard `Array`s, always use `Int`.  in other cases it may depend on what you actually mean to do","user":"UDB26738Q","ts":"1614119238.193800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BLJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, it really depends: when you refer to integer literals, or index of standard `Array`s, always use "},{"type":"text","text":"Int","style":{"code":true}},{"type":"text","text":".  in other cases it may depend on what you actually mean to do"}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4","reactions":[{"name":"thumbsup_all","users":["U0179G7FG4F","U7THT3TM3"],"count":2}]},{"client_msg_id":"b0d96c3b-dcd4-4ec2-9530-82c796931f3e","type":"message","text":"Ah thanks, I actually thought so, and to demonstrate this I would show that my 64-bit machine has no issue with Float128 - but then realized Float128 doesn’t exist and start wondering","user":"U73KENNG4","ts":"1614120773.194500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nM/1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah thanks, I actually thought so, and to demonstrate this I would show that my 64-bit machine has no issue with Float128 - but then realized Float128 doesn’t exist and start wondering"}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4"},{"client_msg_id":"0266ffdf-a52c-49c0-964c-329f4e35fa8c","type":"message","text":"I think 32-bit CPUs actually have 64-bit float registers","user":"U7HAYKY9X","ts":"1614120938.194700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jDKM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think 32-bit CPUs actually have 64-bit float registers"}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4","reactions":[{"name":"thinking_face","users":["U73KENNG4","U66M57AN4"],"count":2}]},{"client_msg_id":"01d74269-1512-4c45-a430-c432a5e4e7a2","type":"message","text":"Depends on the CPU, but for anything remotely modern, yes","user":"U8D9768Q6","ts":"1614121258.195000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tKMA4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Depends on the CPU, but for anything remotely modern, yes"}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4","reactions":[{"name":"+1","users":["U7THT3TM3"],"count":1}]},{"client_msg_id":"e16f255d-9c16-4b81-a1c6-b6398907d9b7","type":"message","text":"The floating point specialized hardware is totally separate from the integer size used for addresses","user":"U8D9768Q6","ts":"1614121347.195200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WDYIy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The floating point specialized hardware is totally separate from the integer size used for addresses"}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4","reactions":[{"name":"heavy_check_mark","users":["UAUPJLBQX","U7THT3TM3","U6740K1SP"],"count":3},{"name":"today-i-learned","users":["UFWQ6DP0S"],"count":1},{"name":"point_up","users":["U67G3QRJM"],"count":1}]},{"client_msg_id":"17e763f6-cc0e-4f69-a7ae-b83fd9015af1","type":"message","text":"regarding\n&gt; Are there some general recommendations to make sure that your code can run on 32-bit hardware?\nI think running tests/CI on 32-bit is a good tip, if an obvious one :slightly_smiling_face:","user":"UCZ7VBGUD","ts":"1614121721.195800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1Qp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"regarding\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"Are there some general recommendations to make sure that your code can run on 32-bit hardware?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I think running tests/CI on 32-bit is a good tip, if an obvious one "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4","reactions":[{"name":"heavy_check_mark","users":["U8D9768Q6","USU9FRPEU","U73KENNG4","UAUPJLBQX","U0138UTB7A4","U7THT3TM3","U67G3QRJM"],"count":7}]},{"client_msg_id":"46903142-2a5f-4486-b344-df98769dc074","type":"message","text":"You can also download and install 32-bit builds of Julia on 64-bit systems to test.\nThis can let you iterate much faster than CI to fix all the issues.\nOnce you've added support for 32-bit and it works, CI is invaluable for keeping it that way.","user":"UAUPJLBQX","ts":"1614123629.196800","team":"T68168MUP","edited":{"user":"UAUPJLBQX","ts":"1614123725.000000"},"blocks":[{"type":"rich_text","block_id":"=dvO2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can also download and install 32-bit builds of Julia on 64-bit systems to test.\nThis can let you iterate much faster than CI to fix all the issues.\nOnce you've added support for 32-bit and it works, CI is invaluable for keeping it that way."}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4","reactions":[{"name":"+1","users":["UGU761DU2","U7THT3TM3","U73KENNG4"],"count":3}]},{"client_msg_id":"d998ecb1-147e-4fc8-b6fd-de70a5b2a6cd","type":"message","text":"for `Float128` use `Quadmath.jl`","user":"U68QW0PUZ","ts":"1614126937.198400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8KjL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"for "},{"type":"text","text":"Float128","style":{"code":true}},{"type":"text","text":" use "},{"type":"text","text":"Quadmath.jl","style":{"code":true}}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4","reactions":[{"name":"thumbsup_all","users":["U0179G7FG4F","U7THT3TM3","UAUPJLBQX","U73KENNG4"],"count":4}]},{"client_msg_id":"0fad850b-92cd-499b-9fd4-a10a1272fcaa","type":"message","text":"MultiFloats.jl also looks like a very interesting and exciting package. <https://github.com/dzhang314/MultiFloats.jl>","user":"U8D9768Q6","ts":"1614145593.206000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/LY5+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"MultiFloats.jl also looks like a very interesting and exciting package. "},{"type":"link","url":"https://github.com/dzhang314/MultiFloats.jl"}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4","reactions":[{"name":"point_up","users":["U67G3QRJM"],"count":1}]},{"client_msg_id":"19aa51e5-4480-4de6-96ab-c11c839aa5e4","type":"message","text":"It claims to be significantly faster than Quadmath.jl though it doesn't have transcendental functions yet.","user":"U8D9768Q6","ts":"1614145678.206200","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1614145748.000000"},"blocks":[{"type":"rich_text","block_id":"6i3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It claims to be significantly faster than Quadmath.jl though it doesn't have transcendental functions yet."}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4"},{"client_msg_id":"c4f729ae-80dd-4c87-91e2-b4649f09ebeb","type":"message","text":"it gets part of that by ignoring `Nan`s and the like which is kind of cheating. It still is really cool though","user":"U0179G7FG4F","ts":"1614145744.206400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UJjfn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it gets part of that by ignoring "},{"type":"text","text":"Nan","style":{"code":true}},{"type":"text","text":"s and the like which is kind of cheating. It still is really cool though"}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4","reactions":[{"name":"+1","users":["U8D9768Q6"],"count":1}]},{"client_msg_id":"2db41471-734f-4b60-a08e-3e1d0dd48a33","type":"message","text":"What's a few `NaN`s between friends? :wink:","user":"U8D9768Q6","ts":"1614145782.206800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZBL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What's a few "},{"type":"text","text":"NaN","style":{"code":true}},{"type":"text","text":"s between friends? "},{"type":"emoji","name":"wink"}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4"},{"client_msg_id":"fcfcbc2b-f31c-4708-96f4-019a4087ea22","type":"message","text":"How much overhead is unavailable for `NaN` handling?\nIf you provide a safe and unsafe constructor, making the safe constructor check for special cases and propagate to each of the components, that should guarantee the values propagate without need for further checks (and the unsafe constructor can be used internally).","user":"UAUPJLBQX","ts":"1614188491.228100","team":"T68168MUP","edited":{"user":"UAUPJLBQX","ts":"1614188582.000000"},"blocks":[{"type":"rich_text","block_id":"vBV9n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How much overhead is unavailable for "},{"type":"text","text":"NaN","style":{"code":true}},{"type":"text","text":" handling?\nIf you provide a safe and unsafe constructor, making the safe constructor check for special cases and propagate to each of the components, that should guarantee the values propagate without need for further checks (and the unsafe constructor can be used internally)."}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4"},{"client_msg_id":"c363ef4e-1337-4740-af1e-56339b8868d9","type":"message","text":"I think proper `Nan` handeling is around 2x overhead for DoubleFloats. The problem is that `NaN` safety basically requires 2 check per operation, and the operations are pretty cheap. The cost goes down a lot when you use more Floats, as the arithmatic operations are somewhere between N^2 and N^3","user":"U0179G7FG4F","ts":"1614188689.228600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Iiv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think proper "},{"type":"text","text":"Nan","style":{"code":true}},{"type":"text","text":" handeling is around 2x overhead for DoubleFloats. The problem is that "},{"type":"text","text":"NaN","style":{"code":true}},{"type":"text","text":" safety basically requires 2 check per operation, and the operations are pretty cheap. The cost goes down a lot when you use more Floats, as the arithmatic operations are somewhere between N^2 and N^3"}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4"},{"client_msg_id":"0a16a2bd-a585-457b-b7e3-0ec8498f1fce","type":"message","text":"Why are the checks needed?","user":"UAUPJLBQX","ts":"1614188788.228800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zBz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Why are the checks needed?"}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4"},{"client_msg_id":"debdf617-225e-406c-af42-386c6378da47","type":"message","text":"If a safe constructor for `Double(NaN, 1e-15)` -&gt; `Double(NaN,NaN)`","user":"UAUPJLBQX","ts":"1614188857.229000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W2V7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If a safe constructor for "},{"type":"text","text":"Double(NaN, 1e-15)","style":{"code":true}},{"type":"text","text":" -> "},{"type":"text","text":"Double(NaN,NaN)","style":{"code":true}}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4"},{"client_msg_id":"1f3466ab-b3b8-422d-8606-06561df0a32d","type":"message","text":"Couldn't you front-load checks, and then skip them all internally by relying on `NaN` propagating normally from the safe constructor contaminating the entire struct?","user":"UAUPJLBQX","ts":"1614188923.229200","team":"T68168MUP","edited":{"user":"UAUPJLBQX","ts":"1614188964.000000"},"blocks":[{"type":"rich_text","block_id":"=nhv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Couldn't you front-load checks, and then skip them all internally by relying on "},{"type":"text","text":"NaN","style":{"code":true}},{"type":"text","text":" propagating normally from the safe constructor contaminating the entire struct?"}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4"},{"client_msg_id":"66a005e7-06bc-4433-97e1-a0765985347e","type":"message","text":"Or is there some reason this wouldn't work?","user":"UAUPJLBQX","ts":"1614188934.229400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fuSRL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Or is there some reason this wouldn't work?"}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4"},{"client_msg_id":"2891c624-d8d8-4117-b0ca-094aa0485261","type":"message","text":"Or is there problem that things like infinities aren't handled correctly?","user":"UAUPJLBQX","ts":"1614188990.229700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UbVxw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Or is there problem that things like infinities aren't handled correctly?"}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4"},{"client_msg_id":"1661ea90-fb31-466e-895b-d909af0231e6","type":"message","text":"Are you proposing having an unsafe constructor as well? Otherwise, every operation will have a `NaN` check when it returns the results","user":"U0179G7FG4F","ts":"1614188996.229900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Mr4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Are you proposing having an unsafe constructor as well? Otherwise, every operation will have a "},{"type":"text","text":"NaN","style":{"code":true}},{"type":"text","text":" check when it returns the results"}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4"},{"client_msg_id":"715fcb3b-8e48-494e-ad01-cfe9a656ac56","type":"message","text":"Yes, am unsafe constructor as well","user":"UAUPJLBQX","ts":"1614189019.230100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4J5ns","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, am unsafe constructor as well"}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4"},{"client_msg_id":"6b13a789-7cdb-499f-a940-04daf0e4ec7c","type":"message","text":"Preferably we can opt to skip all these checks entirely, because many use cases will have already made guarantees or do other checks on inputs (e.g. special functions)","user":"UAUPJLBQX","ts":"1614189072.230300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Pd7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Preferably we can opt to skip all these checks entirely, because many use cases will have already made guarantees or do other checks on inputs (e.g. special functions)"}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4","reactions":[{"name":"thumbsup_all","users":["U0179G7FG4F"],"count":1}]},{"client_msg_id":"3675ccd8-0a45-42d7-88c9-ba938a05091e","type":"message","text":"I think the problem is that `two_sum(Inf,1.0)=NaN`","user":"U0179G7FG4F","ts":"1614189161.230500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"S8Ma","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think the problem is that "},{"type":"text","text":"two_sum(Inf,1.0)=NaN","style":{"code":true}}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4"},{"client_msg_id":"f84c2dbb-07f5-48cc-ac9f-28e74276600a","type":"message","text":"because to do the addition, you end up subtracting, so you get annoying `Inf-Inf` problems","user":"U0179G7FG4F","ts":"1614189182.230700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yq5AK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"because to do the addition, you end up subtracting, so you get annoying "},{"type":"text","text":"Inf-Inf","style":{"code":true}},{"type":"text","text":" problems"}]}]}],"thread_ts":"1614118733.190200","parent_user_id":"U73KENNG4"}]