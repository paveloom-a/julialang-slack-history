[{"client_msg_id":"4cb02bc6-31f8-4bb1-845e-bae4bebd8962","type":"message","text":"<https://github.com/google-research/dex-lang/discussions/489#discussioncomment-315053>\n\n&gt; in Julia we haven’t quite found the right interface yet. Either you have to work at the low level IR, or at high level method dispatch. In PL theory, semantics are often expressed compositionally in terms of rules in the grammar. I wonder if something like that could work — a bit like Cassette but able to handle control flow and constructs other than function application.\nInteresting discussion about compiler transforms in Dex and Julia by <@U66G4838Q> and <@U6A936746>","user":"UDGT4PM41","ts":"1612224457.489700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Z5pqx","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/google-research/dex-lang/discussions/489#discussioncomment-315053"},{"type":"text","text":"\n\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"in Julia we haven’t quite found the right interface yet. Either you have to work at the low level IR, or at high level method dispatch. In PL theory, semantics are often expressed compositionally in terms of rules in the grammar. I wonder if something like that could work — a bit like Cassette but able to handle control flow and constructs other than function application."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Interesting discussion about compiler transforms in Dex and Julia by "},{"type":"user","user_id":"U66G4838Q"},{"type":"text","text":" and "},{"type":"user","user_id":"U6A936746"}]}]}],"thread_ts":"1612224457.489700","reply_count":97,"reply_users_count":8,"latest_reply":"1612365187.072100","reply_users":["U6A936746","U019K6Q9N15","UDGT4PM41","UMY1LV01G","U66G4838Q","U0179G7FG4F","UH9KWTTD3","U8D9768Q6"],"subscribed":false},{"client_msg_id":"cadb3bb8-9a04-4ca7-8f44-8a2640991dff","type":"message","text":"It's is one of those \"why do I know about this thing\" moments for me.\nI wish I had taken PL theory at uni, but my university didn't offer anything like that.","user":"U6A936746","ts":"1612224592.489800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"//Ns","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's is one of those \"why do I know about this thing\" moments for me.\nI wish I had taken PL theory at uni, but my university didn't offer anything like that."}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"5b6ba9e1-e724-47ba-9eb6-627e24e3cfe1","type":"message","text":"Anyone want to give me an exposition of PL  theory?","user":"U019K6Q9N15","ts":"1612224621.490000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NF6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Anyone want to give me an exposition of PL  theory?"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"d8a92696-fb0a-487c-a96a-e3e81a33c201","type":"message","text":"Not even familiar with the term.","user":"U019K6Q9N15","ts":"1612224632.490200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=QiRm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not even familiar with the term."}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"26c128dd-14b2-4467-b623-85c4906d38dc","type":"message","text":"Programming Language theory.","user":"U6A936746","ts":"1612224648.490400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rhN8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Programming Language theory."}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"7c2963bd-58ba-4420-958a-a321ceb74939","type":"message","text":"Oh :face_with_hand_over_mouth:","user":"U019K6Q9N15","ts":"1612224769.490600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"piLT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh "},{"type":"emoji","name":"face_with_hand_over_mouth"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"57575ce7-76ea-4f5b-8609-a228f13d5e3e","type":"message","text":"<@U66G4838Q> are you gonna ditch us for Dex :(","user":"UDGT4PM41","ts":"1612224953.490800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sguV","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U66G4838Q"},{"type":"text","text":" are you gonna ditch us for Dex :("}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"094fd587-f45b-4b09-9552-0bc2790a36ca","type":"message","text":"Didn't <@U69BL50BF> have some ideas to transform control flow?","user":"UDGT4PM41","ts":"1612225244.491700","team":"T68168MUP","edited":{"user":"UDGT4PM41","ts":"1612225277.000000"},"blocks":[{"type":"rich_text","block_id":"x9S","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Didn't "},{"type":"user","user_id":"U69BL50BF"},{"type":"text","text":" have some ideas to transform control flow?"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"2db7134d-cb69-4bc7-a10c-4401dc937c59","type":"message","text":"How many general-purpose languages encourage the same level of post-AST code and compiler manipulation that Julia does? I can't think of one off the top of my head.","user":"UMY1LV01G","ts":"1612225266.492000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WM7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How many general-purpose languages encourage the same level of post-AST code and compiler manipulation that Julia does? I can't think of one off the top of my head."}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"4314C966-7DD9-4F59-B663-11347943F51A","type":"message","text":"Ha!  Doubtful.  Seeing all the effort that has gone into so many Julia issues (how many taking X seriously have their been?) makes me think they’ve got a long road ahead","user":"U66G4838Q","ts":"1612225302.492900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Vpr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ha!  Doubtful.  Seeing all the effort that has gone into so many Julia issues (how many taking X seriously have their been?) makes me think they’ve got a long road ahead"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41","reactions":[{"name":"+1","users":["UDGT4PM41","U67G3QRJM"],"count":2}]},{"client_msg_id":"f121a282-1420-4475-be3e-9af6676eec7f","type":"message","text":"Certainly you can generate JVM or CIL bytecode on the fly, but those don't feel as integrated with the rest of the runtime","user":"UMY1LV01G","ts":"1612225350.493400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=eB6P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Certainly you can generate JVM or CIL bytecode on the fly, but those don't feel as integrated with the rest of the runtime"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"24534E04-8E22-41C1-BEB2-43E00077F7D9","type":"message","text":"Brian I don’t know any that do","user":"U66G4838Q","ts":"1612225371.493800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"e=x98","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Brian I don’t know any that do"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"060CE762-00EA-4B69-968B-62FDE2A4DA92","type":"message","text":"<@U6A936746> just saw your comment. Dex still has a lot of control flow!","user":"U66G4838Q","ts":"1612225411.494600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q=P3X","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U6A936746"},{"type":"text","text":" just saw your comment. Dex still has a lot of control flow!"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"8A81DE53-E082-4E93-A1E5-F046B54918E5","type":"message","text":"Actually","user":"U66G4838Q","ts":"1612225413.494900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mG1jn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Actually"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"7317B3C7-CB75-404B-8D4A-D4BA2CEB2176","type":"message","text":"Me and a student implemented that Raymarcher from the Dex tutorials in Julia","user":"U66G4838Q","ts":"1612225439.495800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LQqP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Me and a student implemented that Raymarcher from the Dex tutorials in Julia"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"93C37828-8537-4724-B33C-01D1321F8B31","type":"message","text":"it would be interesting to see the performance differences","user":"U66G4838Q","ts":"1612225461.496300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=TqL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it would be interesting to see the performance differences"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"3dbe5ca1-b1d5-4d0d-92f0-46a2bddc2b1a","type":"message","text":"What do you think of the ergonomics and type system differences?","user":"UDGT4PM41","ts":"1612225484.496500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"e5FY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What do you think of the ergonomics and type system differences?"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"59629011-4B79-4E1A-93C0-6CA9931FC601","type":"message","text":"(it has a lot of control flow)","user":"U66G4838Q","ts":"1612225493.496800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZQQ48","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(it has a lot of control flow)"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"AEC56C87-20A5-488D-A8F3-AFC9FD58183D","type":"message","text":"I like ML style languages","user":"U66G4838Q","ts":"1612225531.497300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Dfec","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I like ML style languages"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"90C0A57D-2438-4B34-BE11-4439180061F5","type":"message","text":"i don’t have any strong beliefs about their focus on Arrays within the type system","user":"U66G4838Q","ts":"1612225555.498300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DEB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i don’t have any strong beliefs about their focus on Arrays within the type system"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"BCD0BAE5-06BC-4C78-98B9-A9CAD0BBC79E","type":"message","text":"I don’t know how you all feel, but with Julia I often feel like I’m on shaky ground","user":"U66G4838Q","ts":"1612225587.499300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"maa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don’t know how you all feel, but with Julia I often feel like I’m on shaky ground"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"1B991F26-3D0E-480E-AC02-7D1EF08C94AC","type":"message","text":"like there are many ways in which the code could be broken that I don’t know about","user":"U66G4838Q","ts":"1612225598.499900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aWBDt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"like there are many ways in which the code could be broken that I don’t know about"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"ECD2CB95-1DF9-4BB0-A34E-3998669B7006","type":"message","text":"and i think that’s party because its dynamic","user":"U66G4838Q","ts":"1612225626.000400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/Vs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and i think that’s party because its dynamic"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"86102EA1-EF34-408E-9BAE-5756C1E6F872","type":"message","text":"and partly due to the type system being so flexible","user":"U66G4838Q","ts":"1612225632.000800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1Jn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and partly due to the type system being so flexible"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"0320e20d-c4e4-4cd9-92aa-202d5f2740da","type":"message","text":"Does it really have that much control flow?\nWhen I started it had no control flow.\nLiterally couldn't write a branch.\nOnly `select` which is our `ifelse`\nand `scan`  which does do control flow but it's hidden behind a function.\nHow much has it picked up since then?\nAll that comes to mind is `case.`\nAnd maybe effects?","user":"U6A936746","ts":"1612225636.001000","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1612225672.000000"},"blocks":[{"type":"rich_text","block_id":"FKrvv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does it really have that much control flow?\nWhen I started it had no control flow.\nLiterally couldn't write a branch.\nOnly "},{"type":"text","text":"select ","style":{"code":true}},{"type":"text","text":"which is our "},{"type":"text","text":"ifelse","style":{"code":true}},{"type":"text","text":"\nand "},{"type":"text","text":"scan ","style":{"code":true}},{"type":"text","text":" which does do control flow but it's hidden behind a function.\nHow much has it picked up since then?\nAll that comes to mind is "},{"type":"text","text":"case.","style":{"code":true}},{"type":"text","text":"\nAnd maybe effects?"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"31F44793-0D8B-42F3-80A9-1DD72DBF3956","type":"message","text":"Hmmm actually raymarcher is all terms of pattern matching","user":"U66G4838Q","ts":"1612225672.001700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VKb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmmm actually raymarcher is all terms of pattern matching"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"78467DD9-89BB-4C12-936E-DDBD26936709","type":"message","text":"which i was basically thinking of as control flow","user":"U66G4838Q","ts":"1612225679.002200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Wlk9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which i was basically thinking of as control flow"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"13b91e21-cde3-4742-9fe2-1e59b315fe4d","type":"message","text":"Mhmm maybe that is control flow","user":"U6A936746","ts":"1612225697.002600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Im6/u","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Mhmm maybe that is control flow"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"8030c46b-00f2-4635-9b89-833a098e9194","type":"message","text":"I think it could be wrapped up into something one can almost pretend is a function","user":"U6A936746","ts":"1612225774.002900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"a2skd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think it could be wrapped up into something one can almost pretend is a function"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"f25d60e5-896a-4e05-886d-d638e8e33393","type":"message","text":"Yes julia kinda feels loosey goosey sometimes","user":"UDGT4PM41","ts":"1612225874.003200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CU/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes julia kinda feels loosey goosey sometimes"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"b5632f0f-21e0-4000-8bfb-13234ef5d738","type":"message","text":"But it's powerful","user":"UDGT4PM41","ts":"1612225883.003400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KRYq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But it's powerful"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"D81B7E30-046E-43D3-8486-E1934F1E3BAC","type":"message","text":"Right","user":"U66G4838Q","ts":"1612225926.003700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rUCOj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Right"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"8E89B005-82A3-406A-852F-37E8F9948289","type":"message","text":"A little while ago","user":"U66G4838Q","ts":"1612225936.004100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5prLW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"A little while ago"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"21B91072-5FFF-4BEB-BA06-3CB291D7E3FA","type":"message","text":"I mediated a argument here between my labmate who is a hardcore haskell PL person and a bunch of people here including Stefan and Jeff","user":"U66G4838Q","ts":"1612225981.005300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"J=N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mediated a argument here between my labmate who is a hardcore haskell PL person and a bunch of people here including Stefan and Jeff"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"EF735EC1-3521-4957-8A94-5476F5B14FDE","type":"message","text":"I’d introduced him to Julia as we’re working on a paper together and not only hated it but claimed that Julia’s claims of composability are false","user":"U66G4838Q","ts":"1612226025.006800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ln6g","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’d introduced him to Julia as we’re working on a paper together and not only hated it but claimed that Julia’s claims of composability are false"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"32b33ae1-b62b-4a46-bec1-711f61d42e6f","type":"message","text":"False ?","user":"UDGT4PM41","ts":"1612226041.007300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TGSH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"False ?"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"c817c16e-f94c-416f-b7a4-62456c403f58","type":"message","text":"How so","user":"UDGT4PM41","ts":"1612226048.007500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"47lt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How so"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"5058bb6b-171b-43f5-a4d2-ab4196eac076","type":"message","text":"Isn't that empirically falsified","user":"UDGT4PM41","ts":"1612226065.007800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ENs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Isn't that empirically falsified"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"24F30FDC-4860-4F63-A72F-320CD7B93DBE","type":"message","text":"Well that’s what Stefan basically said","user":"U66G4838Q","ts":"1612226074.008300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w9Qa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well that’s what Stefan basically said"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"3d437aee-f648-45c9-8253-a0a8c37c7302","type":"message","text":"I mean there are deff corner cases","user":"UDGT4PM41","ts":"1612226077.008600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bHClk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean there are deff corner cases"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"2F748C4E-EAF7-42F7-8626-F76B2C2B42A0","type":"message","text":"his main argument was that method dispatch in Julia breaks interface boundaries","user":"U66G4838Q","ts":"1612226110.009400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xPvd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"his main argument was that method dispatch in Julia breaks interface boundaries"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"38351006-EA06-4585-9A5E-233BAB59F7CA","type":"message","text":"and he’s right in a way","user":"U66G4838Q","ts":"1612226117.009900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IqKmV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and he’s right in a way"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"8AEE3B2A-24FF-4392-B2B8-D6E7EAF615D9","type":"message","text":"there’s a big global lookup table","user":"U66G4838Q","ts":"1612226122.010200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1r7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there’s a big global lookup table"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"D247A47A-9E5F-4A95-B1CE-7204A79724EB","type":"message","text":"like if I have package A which implements methods from B","user":"U66G4838Q","ts":"1612226132.010700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"M1O5M","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"like if I have package A which implements methods from B"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"4AA0C3CE-333F-4FB6-A056-756E92212B1A","type":"message","text":"i can then import some other package C ","user":"U66G4838Q","ts":"1612226137.011100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wDOj8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i can then import some other package C "}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"C8338F9D-F6EF-4147-9B03-1E18AD6C6C12","type":"message","text":"which changes that dependence ","user":"U66G4838Q","ts":"1612226150.011500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4+Pw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which changes that dependence "}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"6D8CDFF7-747A-4C0C-9B99-C933E72513A2","type":"message","text":"in arbitrary ways","user":"U66G4838Q","ts":"1612226153.011800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HxS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in arbitrary ways"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"FDA0D18A-A7F8-4214-82DC-8A5A137F5F65","type":"message","text":"anyway, that was a whole thing","user":"U66G4838Q","ts":"1612226163.012200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zwx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"anyway, that was a whole thing"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"F188E3D9-99FD-4847-AED9-6128B3EE18CD","type":"message","text":"I thought of it now because I think they both had points.  It’s true, there’s lost of real word examples of seamless composition in Julia","user":"U66G4838Q","ts":"1612226196.013300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"H34","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I thought of it now because I think they both had points.  It’s true, there’s lost of real word examples of seamless composition in Julia"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"61960F2A-D05F-44D5-A9AD-A8929738B837","type":"message","text":"but I’ve come to believe it’s mostly through culture","user":"U66G4838Q","ts":"1612226207.013800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tft","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but I’ve come to believe it’s mostly through culture"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"0cc5e795-83b1-4eca-b40d-f58c9fcc4973","type":"message","text":"Has anyone tried making julia macros that do compiler passes code?","user":"U0179G7FG4F","ts":"1612226208.014000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pFS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Has anyone tried making julia macros that do compiler passes code?"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"BFB101F5-F59D-4021-BAE7-BF663D58D9B5","type":"message","text":"as <@U6A936746> writes ","user":"U66G4838Q","ts":"1612226215.014300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tTx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"as "},{"type":"user","user_id":"U6A936746"},{"type":"text","text":" writes "}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"bde6c16b-60d0-481c-89ce-7f04b3270ad6","type":"message","text":"it would be really interesting to see how far we could go with that approach. Theoretically, the julia compiler could only use LLVM for code-gen, and do everything else with macros","user":"U0179G7FG4F","ts":"1612226267.014600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PPW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it would be really interesting to see how far we could go with that approach. Theoretically, the julia compiler could only use LLVM for code-gen, and do everything else with macros"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"9267a709-2b24-4d8d-8d54-843685ba536e","type":"message","text":"You mean like Arborist.jl?\nSo working at AST level?\n<https://github.com/oxinabox/Arborist.jl|https://github.com/oxinabox/Arborist.jl>\n\nOr an actual macro?","user":"U6A936746","ts":"1612226371.014800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"X5f4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You mean like Arborist.jl?\nSo working at AST level?\n"},{"type":"link","url":"https://github.com/oxinabox/Arborist.jl","text":"https://github.com/oxinabox/Arborist.jl"},{"type":"text","text":"\n\nOr an actual macro?"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"407f33ee-77f8-43ec-99d4-5a570cf3a7cf","type":"message","text":"I meant actual macros, but this is really cool too","user":"U0179G7FG4F","ts":"1612226414.015000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cUM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I meant actual macros, but this is really cool too"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"c79fd5f6-6ba2-4688-be2f-a55164adfe30","type":"message","text":"Working at AST level is from my experience not useful.\nThe AST is too high level too many way to write the thing","user":"U6A936746","ts":"1612226439.015200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"K0QV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Working at AST level is from my experience not useful.\nThe AST is too high level too many way to write the thing"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41","reactions":[{"name":"point_up","users":["UMY1LV01G"],"count":1}]},{"client_msg_id":"95988d3b-98e0-4923-a61a-06affaaf8129","type":"message","text":"You can't do it with a macro on its own as you can't achieve recursion to transform the code of each function that is called","user":"U6A936746","ts":"1612226502.015500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1ha","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can't do it with a macro on its own as you can't achieve recursion to transform the code of each function that is called"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41","reactions":[{"name":"thumbsup_all","users":["U0179G7FG4F"],"count":1}]},{"client_msg_id":"77b79aaf-4e05-4c67-b73b-ec718cb649f3","type":"message","text":"A lot of optmizations work with a CFG or SSA form IR, so all those would be thrown out","user":"UMY1LV01G","ts":"1612226505.015700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JqSK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"A lot of optmizations work with a CFG or SSA form IR, so all those would be thrown out"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"7deeb3d3-c3b7-40d7-8675-ce0eb452ed22","type":"message","text":"Interesting. But there are also examples  where more complex things break","user":"UDGT4PM41","ts":"1612226663.016000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Gi8Z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Interesting. But there are also examples  where more complex things break"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"2706e711-b424-477f-bfee-018ee0df1dbe","type":"message","text":"In the future","user":"UDGT4PM41","ts":"1612226809.016500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kfJ/q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In the future"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"40a81017-a51f-4ec3-9681-8175c77b8698","type":"message","text":"Though SSA is equivalent to CPS and AIUI you can beta-reduce the latter :shrug:","user":"UMY1LV01G","ts":"1612226817.016700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZL1RZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Though SSA is equivalent to CPS and AIUI you can beta-reduce the latter "},{"type":"emoji","name":"shrug"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"3183cdb0-5753-48f4-82e5-3ec26dbec49c","type":"message","text":"I should learn more about Continuations","user":"U6A936746","ts":"1612226974.017300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8YFr0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I should learn more about Continuations"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"a68c9b37-1221-4e68-815e-a129df416da3","type":"message","text":"I think when people talk about composability, they want to talk about ~interfaces. i.e. how to put things together in a that is safe so things don’t break (where “things” includes stuff you don’t control and haven’t seen). This is obviously an important goal, but imo not enough consideration is given to allowing someone to use your code in a way you don’t want them to.","user":"UH9KWTTD3","ts":"1612227010.017500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VPTc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think when people talk about composability, they want to talk about ~interfaces. i.e. how to put things together in a that is safe so things don’t break (where “things” includes stuff you don’t control and haven’t seen). This is obviously an important goal, but imo not enough consideration is given to allowing someone to use your code in a way you don’t want them to."}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41","reactions":[{"name":"+1","users":["UDGT4PM41","U6A936746","U019K6Q9N15","UB7JS9CHF","UKG4WF8PJ"],"count":5}]},{"client_msg_id":"c43249cf-f3ef-4075-a145-532cd6c551c7","type":"message","text":"Anyway, keno has a thread on twitter about how he as some ideas for static typing in Julia, including the ability to type on a spectrum from dynamic all the way to theorem proving","user":"UDGT4PM41","ts":"1612227063.017700","team":"T68168MUP","edited":{"user":"UDGT4PM41","ts":"1612227230.000000"},"blocks":[{"type":"rich_text","block_id":"S2q80","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Anyway, keno has a thread on twitter about how he as some ideas for static typing in Julia, including the ability to type on a spectrum from dynamic all the way to theorem proving"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41","reactions":[{"name":"star-struck","users":["UB7JS9CHF"],"count":1}]},{"client_msg_id":"86aa9c70-cc2c-4dfb-ac28-eea76ec318a8","type":"message","text":"As a project progresses","user":"UDGT4PM41","ts":"1612227079.017900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bLVKK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"As a project progresses"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"67d0c323-27f4-496d-b068-f5f5306191af","type":"message","text":"oh. That would be really cool!","user":"U0179G7FG4F","ts":"1612227155.018400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4y4r6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh. That would be really cool!"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"285069af-84aa-4786-ae9e-725dd48c7d63","type":"message","text":"Which Julia’s dispatch does really well. It may not satisfy many PL folks definitions of composable, but as a user it is pretty much what I want. Thankfully, community culture has kept the entire thing from going off the rails.","user":"UH9KWTTD3","ts":"1612227165.018600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MsX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Which Julia’s dispatch does really well. It may not satisfy many PL folks definitions of composable, but as a user it is pretty much what I want. Thankfully, community culture has kept the entire thing from going off the rails."}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41","reactions":[{"name":"+1","users":["UDGT4PM41","U019K6Q9N15","UH8A351DJ","UKG4WF8PJ","U01724Q3PGW"],"count":5}]},{"client_msg_id":"60129107-ce23-4b0f-8e46-8d6a0f6c27fc","type":"message","text":"Yea I think tooling like jet.jl and maybe some of keno's ideas can help reduce the trade-off and make things safer and reduce iteration type when composing new things","user":"UDGT4PM41","ts":"1612227302.019000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bYPCA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yea I think tooling like jet.jl and maybe some of keno's ideas can help reduce the trade-off and make things safer and reduce iteration type when composing new things"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"572ec7d9-355d-46ad-b358-9a0b2c9e626b","type":"message","text":"Ie Throwing method errors prior to runtime","user":"UDGT4PM41","ts":"1612227354.019200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Oxlm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ie Throwing method errors prior to runtime"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"4e945334-b7af-41be-bf68-a93b6cb69879","type":"message","text":"one problem we do need a better solution to is infinite loops of dispatch, which are easy to accidentally cause","user":"U0179G7FG4F","ts":"1612231222.019800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"POQmz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"one problem we do need a better solution to is infinite loops of dispatch, which are easy to accidentally cause"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"225EB495-162B-4901-B5EF-B1EBD2B0F102","type":"message","text":"I agree <@UH9KWTTD3>, but there’s another dimension.  A lot of Julia code is overly type constrained.  For instance, I created my own expression type for a DSL I have but I can’t use it with Macro Tools for no good reason other than that there are Expr constraints and constructors used everywhere.  Similarly my student tried to implement a driving controller for a simulator and found it as impossible to do it through the interface. The same freedom that allows you to use someone elses code in ways they didn’t anticipate encourages you to by pass your own interfaces. I think a lot of the amazing examples of composability in Julia when it ‘just works’ are when you are relying on the defacto standard data structures — arrays, dicts, functions.  ","user":"U66G4838Q","ts":"1612238023.025700","team":"T68168MUP","edited":{"user":"U66G4838Q","ts":"1612238095.000000"},"blocks":[{"type":"rich_text","block_id":"Mffl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I agree "},{"type":"user","user_id":"UH9KWTTD3"},{"type":"text","text":", but there’s another dimension.  A lot of Julia code is overly type constrained.  For instance, I created my own expression type for a DSL I have but I can’t use it with Macro Tools for no good reason other than that there are Expr constraints and constructors used everywhere.  Similarly my student tried to implement a driving controller for a simulator and found it as impossible to do it through the interface. The same freedom that allows you to use someone elses code in ways they didn’t anticipate encourages you to by pass your own interfaces. I think a lot of the amazing examples of composability in Julia when it ‘just works’ are when you are relying on the defacto standard data structures — arrays, dicts, functions.  "}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"a2f870dc-3d64-43e2-b022-d8fa11da21d6","type":"message","text":"Yea, that's why we need traits....Constraints are important for dispatch sometimes, but also constrain code reuse.","user":"UDGT4PM41","ts":"1612239083.026000","team":"T68168MUP","edited":{"user":"UDGT4PM41","ts":"1612239380.000000"},"blocks":[{"type":"rich_text","block_id":"DxDUh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yea, that's why we need traits....Constraints are important for dispatch sometimes, but also constrain code reuse."}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"29fc4d62-6a66-49df-81ee-19423ceacdf5","type":"message","text":"Point well taken. It all relies on someone writing good type constraints which in practice can be more of an art than a science. I never really thought about it, but a lot of composability does fall out from using the standard abstract types and interfaces. I guess it reminds me of a blog post by <@U6A936746> (I think?) noting how things like StatsBase emerge. There are a few examples of “base” interfaces that are widely adopted, not in JuliaLang/julia, and lead to composability. So it goes back to community culture like you mentioned. There’s a lot of human effort involved creating a usable interface, making sure people adopt it, and keeping it up to date with future needs.","user":"UH9KWTTD3","ts":"1612274585.027300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gdB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Point well taken. It all relies on someone writing good type constraints which in practice can be more of an art than a science. I never really thought about it, but a lot of composability does fall out from using the standard abstract types and interfaces. I guess it reminds me of a blog post by "},{"type":"user","user_id":"U6A936746"},{"type":"text","text":" (I think?) noting how things like StatsBase emerge. There are a few examples of “base” interfaces that are widely adopted, not in JuliaLang/julia, and lead to composability. So it goes back to community culture like you mentioned. There’s a lot of human effort involved creating a usable interface, making sure people adopt it, and keeping it up to date with future needs."}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"f54e04eb-d8a0-4fe9-bcf1-ceb8ab5a4b55","type":"message","text":"<https://www.oxinabox.net/2020/02/09/whycompositionaljulia.html>\n\nStatsBase is actually a terrible example of this.\nbecause it is old and we didn’t know what we were doing\n\nThe work going in with Actors and with Gaussian Processes is better example.\nAnd of course Tables.jl is the best example","user":"U6A936746","ts":"1612274689.027500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DFIg","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://www.oxinabox.net/2020/02/09/whycompositionaljulia.html"},{"type":"text","text":"\n\nStatsBase is actually a terrible example of this.\nbecause it is old and we didn’t know what we were doing\n\nThe work going in with Actors and with Gaussian Processes is better example.\nAnd of course Tables.jl is the best example"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41","reactions":[{"name":"+1","users":["UDXST8ARK","UKG4WF8PJ"],"count":2}]},{"client_msg_id":"3a9c080a-64c6-43e6-9286-d4b8249489de","type":"message","text":"If the composability is the result of human work (as opposed to the language), do you give Julia credit for creating an environment like this? Or is that a rosy way of painting the language after the fact?","user":"UH9KWTTD3","ts":"1612274728.027700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/51","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If the composability is the result of human work (as opposed to the language), do you give Julia credit for creating an environment like this? Or is that a rosy way of painting the language after the fact?"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"32070f8a-8b4f-4c5f-9234-8276eb0d2cfb","type":"message","text":"Ha! I was thinking the same thing when I typed StatsBase but couldn’t think of another example this early in the morning.","user":"UH9KWTTD3","ts":"1612274754.027900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1ri","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ha! I was thinking the same thing when I typed StatsBase but couldn’t think of another example this early in the morning."}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"3dcc1cda-b83a-43fc-b2db-96115d7a3a2d","type":"message","text":"In the blog-post I credit it to julia missing a feature (automatic method table merging) forcing people to create a common namespace to overload and which then leads them to agreeing on an API, etc","user":"U6A936746","ts":"1612274918.028100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TNDm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In the blog-post I credit it to julia missing a feature (automatic method table merging) forcing people to create a common namespace to overload and which then leads them to agreeing on an API, etc"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"81de6a60-ed3e-4473-864d-ee31a3609522","type":"message","text":"Tables.jl is the best example but ironically it doesn't use \"standard\" julia interfaces (abstract types)","user":"UDGT4PM41","ts":"1612280167.029000","team":"T68168MUP","edited":{"user":"UDGT4PM41","ts":"1612281496.000000"},"blocks":[{"type":"rich_text","block_id":"Zlc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Tables.jl is the best example but ironically it doesn't use \"standard\" julia interfaces (abstract types)"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"6e6e60b9-fb09-45db-8136-d8f1d4d0484d","type":"message","text":"<@U0179G7FG4F> to your AST idea, I think we could actually do a lot of interesting things if we had a typed AST. This is actually an idea I've been waiting on for once I learn how to use AbstractInterpreter which I think should allow it.\n\nI want an interface something like\n```@typed_ast x::Int, y::Float64 begin\n    string(x) * string(y-1)\nend```\nand then this would give something like\n```TExpr{String}(:call, Base.:(*),\n\t\t     TExpr{String}(:call, Base.string, TSymbol{Int}(:x)),\n\t\t     TExpr{String}(:call, Base.string,\n\t\t\t\t\t  TExpr{Float64}(:call, Base.(-), TSymbol{Float64}(:y), 1))) ```\nBasically, the idea is to get the information that's in typed IR, but the format of expressions so that it can be manipulated in a way that's even approximately convenient.","user":"U8D9768Q6","ts":"1612287167.035100","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1612287269.000000"},"blocks":[{"type":"rich_text","block_id":"uYvEu","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U0179G7FG4F"},{"type":"text","text":" to your AST idea, I think we could actually do a lot of interesting things if we had a typed AST. This is actually an idea I've been waiting on for once I learn how to use AbstractInterpreter which I think should allow it.\n\nI want an interface something like\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@typed_ast x::Int, y::Float64 begin\n    string(x) * string(y-1)\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"and then this would give something like\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"TExpr{String}(:call, Base.:(*),\n\t\t     TExpr{String}(:call, Base.string, TSymbol{Int}(:x)),\n\t\t     TExpr{String}(:call, Base.string,\n\t\t\t\t\t  TExpr{Float64}(:call, Base.(-), TSymbol{Float64}(:y), 1))) "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Basically, the idea is to get the information that's in typed IR, but the format of expressions so that it can be manipulated in a way that's even approximately convenient."}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41","reactions":[{"name":"cool","users":["U6A936746"],"count":1}]},{"client_msg_id":"5494b523-868e-47ee-9b0a-60f3b10eb43a","type":"message","text":"typed AST makes sense since everything is an expression.\nDoing type inference on the AST otoh seems gross, (but maybe it isn’t?)","user":"U6A936746","ts":"1612287272.035500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4eIvS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"typed AST makes sense since everything is an expression.\nDoing type inference on the AST otoh seems gross, (but maybe it isn’t?)"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41","reactions":[{"name":"+1","users":["UMY1LV01G"],"count":1}]},{"client_msg_id":"ac47f771-381f-41eb-9bcd-c9afcc6f8728","type":"message","text":"I *think* it's possible to do it halfway sanely, but we'll have to wait and see I guess. I'm sure either way, the compiler gods will be firmly against it","user":"U8D9768Q6","ts":"1612287541.035800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4ZS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I "},{"type":"text","text":"think","style":{"bold":true}},{"type":"text","text":" it's possible to do it halfway sanely, but we'll have to wait and see I guess. I'm sure either way, the compiler gods will be firmly against it"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"4fa2e5ef-6a69-46a6-936a-2dfe2d95f0ec","type":"message","text":"But I really think linear IR is not the only useful way to present a typed program. It's useful for leveraging automatic optimizations, but for humans trying to write things like macros that know about types? Hell no.","user":"U8D9768Q6","ts":"1612287625.036000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"57o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But I really think linear IR is not the only useful way to present a typed program. It's useful for leveraging automatic optimizations, but for humans trying to write things like macros that know about types? Hell no."}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"cc61b32f-2afe-4b07-beb9-dbadcaec283b","type":"message","text":"Even for automatic optimizations, I think AST might sometimes be better. Automatic for loop switching for example is probably easier to detect when you are working with code that still has for loops.","user":"U0179G7FG4F","ts":"1612287712.036200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Hegh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Even for automatic optimizations, I think AST might sometimes be better. Automatic for loop switching for example is probably easier to detect when you are working with code that still has for loops."}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41","reactions":[{"name":"+1","users":["U8D9768Q6"],"count":1}]},{"client_msg_id":"8bd0d385-c422-4d7d-be79-db1eafbfdbf9","type":"message","text":"&gt;  but for humans trying to write things like macros that know about types? Hell no.\nI thought that, then i tried to do something useful with Arborist.\n\nHave you seen e.g. in MacroTools how often there are 3-5 different ways to write something and you need try all of them?\n\nAnd thats before we think about detecting the order things happen in.\n(which e.g. MagneticReadHead need to do, because it can’t display debug info for variables that are not yet defined)","user":"U6A936746","ts":"1612287924.036700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0Q3C","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":" but for humans trying to write things like macros that know about types? Hell no."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nI thought that, then i tried to do something useful with Arborist.\n\nHave you seen e.g. in MacroTools how often there are 3-5 different ways to write something and you need try all of them?\n\nAnd thats before we think about detecting the order things happen in.\n(which e.g. MagneticReadHead need to do, because it can’t display debug info for variables that are not yet defined)"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"a6aa998e-16b2-4b55-9e4b-e097b372d7d1","type":"message","text":"but I do agree that a typed AST could be cool\n\nThough actually, how would if be different from just inserting eg\n`::`  after every expression?\n\n```julia&gt; dump( :( ((1+1)::Int + 1::Int)::Int ))\nExpr\n  head: Symbol ::\n  args: Array{Any}((2,))\n    1: Expr\n      head: Symbol call\n      args: Array{Any}((3,))\n        1: Symbol +\n        2: Expr\n          head: Symbol ::\n          args: Array{Any}((2,))\n            1: Expr\n              head: Symbol call\n              args: Array{Any}((3,))\n                1: Symbol +\n                2: Int64 1\n                3: Int64 1\n            2: Symbol Int\n        3: Expr\n          head: Symbol ::\n          args: Array{Any}((2,))\n            1: Int64 1\n            2: Symbol Int\n    2: Symbol Int```","user":"U6A936746","ts":"1612288262.037000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Gl6Rg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but I do agree that a typed AST could be cool\n\nThough actually, how would if be different from just inserting eg\n"},{"type":"text","text":"::","style":{"code":true}},{"type":"text","text":"  after every expression?\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> dump( :( ((1+1)::Int + 1::Int)::Int ))\nExpr\n  head: Symbol ::\n  args: Array{Any}((2,))\n    1: Expr\n      head: Symbol call\n      args: Array{Any}((3,))\n        1: Symbol +\n        2: Expr\n          head: Symbol ::\n          args: Array{Any}((2,))\n            1: Expr\n              head: Symbol call\n              args: Array{Any}((3,))\n                1: Symbol +\n                2: Int64 1\n                3: Int64 1\n            2: Symbol Int\n        3: Expr\n          head: Symbol ::\n          args: Array{Any}((2,))\n            1: Int64 1\n            2: Symbol Int\n    2: Symbol Int"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"3e7903fa-f782-4658-859d-957184579c7c","type":"message","text":"Name resolution. E.g. what is `:(+)`? It could be anything!","user":"U8D9768Q6","ts":"1612288438.037200","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1612288470.000000"},"blocks":[{"type":"rich_text","block_id":"9TB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Name resolution. E.g. what is "},{"type":"text","text":":(+)","style":{"code":true}},{"type":"text","text":"? It could be anything!"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41","reactions":[{"name":"+1","users":["U6A936746"],"count":1}]},{"client_msg_id":"32c6864e-efca-4eba-b313-cb12c9b403a2","type":"message","text":"That was why Arborist wasn't useful to me at least","user":"U8D9768Q6","ts":"1612288493.037800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"laa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That was why Arborist wasn't useful to me at least"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"f5f5c228-e657-4909-bb04-2095defee11b","type":"message","text":"Doesn't that rely on control flow information? e.g. conditionally assigning a lambda to a variable in a loop","user":"UMY1LV01G","ts":"1612288573.038000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"n+1g","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Doesn't that rely on control flow information? e.g. conditionally assigning a lambda to a variable in a loop"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41","reactions":[{"name":"+1","users":["U6A936746"],"count":1}]},{"client_msg_id":"97f02d17-2810-4d22-915b-3488790add21","type":"message","text":"I'm not sure I understand, could you elaborate?","user":"U8D9768Q6","ts":"1612288661.039400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"k8pg4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not sure I understand, could you elaborate?"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"9317269f-fd15-4b10-b251-5239fe1a8471","type":"message","text":"```if ii &gt; 2\n    f = x-&gt;2*x\nelse\n    f = x-&gt;3*x\nend\nf(10)```","user":"U6A936746","ts":"1612288878.041700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fmw","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"if ii > 2\n    f = x->2*x\nelse\n    f = x->3*x\nend\nf(10)"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"97e2b3ed-29c2-4190-afa4-d27594176911","type":"message","text":"I suppose it could be something like\n```if ii::Int &gt; 2\n  (f = x -&gt; 2x)::typeof(var\"#8#10\")\nelse\n  (f = x -&gt; 3x)::typeof(var\"#9#11\")\nend\n(f::Union{typeof(var\"#9#11\"), typeof(var\"#8#10\")})(10)::Int```","user":"U8D9768Q6","ts":"1612289256.044300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GVq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I suppose it could be something like\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"if ii::Int > 2\n  (f = x -> 2x)::typeof(var\"#8#10\")\nelse\n  (f = x -> 3x)::typeof(var\"#9#11\")\nend\n(f::Union{typeof(var\"#9#11\"), typeof(var\"#8#10\")})(10)::Int"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41","reactions":[{"name":"true","users":["U6A936746","UKG4WF8PJ"],"count":2}]},{"client_msg_id":"d591a675-2d16-4dee-af58-f395f0eeceee","type":"message","text":"It's true though that this could be tricky to figure out in practice, e.g. it'd be hard to get the algorithm right that figures out the flow there.","user":"U8D9768Q6","ts":"1612289720.044600","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1612289751.000000"},"blocks":[{"type":"rich_text","block_id":"2Rl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's true though that this could be tricky to figure out in practice, e.g. it'd be hard to get the algorithm right that figures out the flow there."}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"e981aa54-c724-417f-8476-5338e20fda5c","type":"message","text":"It is the thing that the control flow graph / dominance tree does.","user":"U6A936746","ts":"1612290174.045400","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1612290187.000000"},"blocks":[{"type":"rich_text","block_id":"nAJjZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It is the thing that the control flow graph / dominance tree does."}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"cbab255f-55df-439f-86eb-ffea2431ac37","type":"message","text":"Yeah. It may be that the best thing to do is to get the `code_typed` and then do like a 'relooping' algorithm on it that bundles stuff back up into typed expressions or something. But that would probably still not be ideal","user":"U8D9768Q6","ts":"1612290332.045700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vPy0H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah. It may be that the best thing to do is to get the "},{"type":"text","text":"code_typed","style":{"code":true}},{"type":"text","text":" and then do like a 'relooping' algorithm on it that bundles stuff back up into typed expressions or something. But that would probably still not be ideal"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"a1cb352d-7db2-4ff3-97ea-5c5d715bbfe0","type":"message","text":"Perhaps you'd prefer a region-based IR like WASM that enforces structured control flow?","user":"UMY1LV01G","ts":"1612290387.045900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1cM4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Perhaps you'd prefer a region-based IR like WASM that enforces structured control flow?"}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"client_msg_id":"7d005aab-1536-4ec4-9e50-ea6f8f6268af","type":"message","text":"either way, sounds definately cool to explore.","user":"U6A936746","ts":"1612290390.046100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q4u","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"either way, sounds definately cool to explore."}]}]}],"thread_ts":"1612224457.489700","parent_user_id":"UDGT4PM41"},{"type":"message","subtype":"thread_broadcast","text":"<https://twitter.com/dancherp/status/1339523195976609792?s=19|https://twitter.com/dancherp/status/1339523195976609792?s=19> anyone know about LMS? How does that fit in here","user":"UDGT4PM41","ts":"1612365074.071600","thread_ts":"1612224457.489700","root":{"client_msg_id":"4cb02bc6-31f8-4bb1-845e-bae4bebd8962","type":"message","text":"<https://github.com/google-research/dex-lang/discussions/489#discussioncomment-315053>\n\n&gt; in Julia we haven’t quite found the right interface yet. Either you have to work at the low level IR, or at high level method dispatch. In PL theory, semantics are often expressed compositionally in terms of rules in the grammar. I wonder if something like that could work — a bit like Cassette but able to handle control flow and constructs other than function application.\nInteresting discussion about compiler transforms in Dex and Julia by <@U66G4838Q> and <@U6A936746>","user":"UDGT4PM41","ts":"1612224457.489700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Z5pqx","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/google-research/dex-lang/discussions/489#discussioncomment-315053"},{"type":"text","text":"\n\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"in Julia we haven’t quite found the right interface yet. Either you have to work at the low level IR, or at high level method dispatch. In PL theory, semantics are often expressed compositionally in terms of rules in the grammar. I wonder if something like that could work — a bit like Cassette but able to handle control flow and constructs other than function application."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Interesting discussion about compiler transforms in Dex and Julia by "},{"type":"user","user_id":"U66G4838Q"},{"type":"text","text":" and "},{"type":"user","user_id":"U6A936746"}]}]}],"thread_ts":"1612224457.489700","reply_count":97,"reply_users_count":8,"latest_reply":"1612365187.072100","reply_users":["U6A936746","U019K6Q9N15","UDGT4PM41","UMY1LV01G","U66G4838Q","U0179G7FG4F","UH9KWTTD3","U8D9768Q6"],"subscribed":false},"attachments":[{"fallback":"<https://twitter.com/dancherp|@dancherp>: What is lightweight modular staging? :signal_strength:\nThesis: <http://bit.ly/2IXq3s9>\nDocs and pubs: <http://scala-lms.github.io>, <http://arxiv.org/abs/1803.10228> <https://pbs.twimg.com/media/Epbwb-jWwAM1-lp.jpg>","ts":1608202191,"author_name":"Dan Zheng","author_link":"https://twitter.com/dancherp/status/1339523195976609792","author_icon":"https://pbs.twimg.com/profile_images/1010414789351260160/dzAHJvda_normal.jpg","author_subname":"@dancherp","text":"What is lightweight modular staging? :signal_strength:\nThesis: <http://bit.ly/2IXq3s9>\nDocs and pubs: <http://scala-lms.github.io>, <http://arxiv.org/abs/1803.10228> <https://pbs.twimg.com/media/Epbwb-jWwAM1-lp.jpg>","service_name":"twitter","service_url":"https://twitter.com/","from_url":"https://twitter.com/dancherp/status/1339523195976609792?s=19","image_url":"https://pbs.twimg.com/media/Epbwb-jWwAM1-lp.jpg","image_width":1200,"image_height":675,"image_bytes":76417,"id":1,"original_url":"https://twitter.com/dancherp/status/1339523195976609792?s=19","footer":"Twitter","footer_icon":"https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"}],"blocks":[{"type":"rich_text","block_id":"xYtTV","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://twitter.com/dancherp/status/1339523195976609792?s=19","text":"https://twitter.com/dancherp/status/1339523195976609792?s=19"},{"type":"text","text":" anyone know about LMS? How does that fit in here"}]}]}],"client_msg_id":"071b55a5-aaa1-46b8-867d-d04b1dc230de","edited":{"user":"UDGT4PM41","ts":"1612365093.000000"}},{"type":"message","subtype":"thread_broadcast","text":"Looks like just another form of staged programming, but not sure if they preserve higher level types /semantics","user":"UDGT4PM41","ts":"1612365187.072100","thread_ts":"1612224457.489700","root":{"client_msg_id":"4cb02bc6-31f8-4bb1-845e-bae4bebd8962","type":"message","text":"<https://github.com/google-research/dex-lang/discussions/489#discussioncomment-315053>\n\n&gt; in Julia we haven’t quite found the right interface yet. Either you have to work at the low level IR, or at high level method dispatch. In PL theory, semantics are often expressed compositionally in terms of rules in the grammar. I wonder if something like that could work — a bit like Cassette but able to handle control flow and constructs other than function application.\nInteresting discussion about compiler transforms in Dex and Julia by <@U66G4838Q> and <@U6A936746>","user":"UDGT4PM41","ts":"1612224457.489700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Z5pqx","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/google-research/dex-lang/discussions/489#discussioncomment-315053"},{"type":"text","text":"\n\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"in Julia we haven’t quite found the right interface yet. Either you have to work at the low level IR, or at high level method dispatch. In PL theory, semantics are often expressed compositionally in terms of rules in the grammar. I wonder if something like that could work — a bit like Cassette but able to handle control flow and constructs other than function application."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Interesting discussion about compiler transforms in Dex and Julia by "},{"type":"user","user_id":"U66G4838Q"},{"type":"text","text":" and "},{"type":"user","user_id":"U6A936746"}]}]}],"thread_ts":"1612224457.489700","reply_count":97,"reply_users_count":8,"latest_reply":"1612365187.072100","reply_users":["U6A936746","U019K6Q9N15","UDGT4PM41","UMY1LV01G","U66G4838Q","U0179G7FG4F","UH9KWTTD3","U8D9768Q6"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"NOep","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Looks like just another form of staged programming, but not sure if they preserve higher level types /semantics"}]}]}],"client_msg_id":"e98c2f35-9512-4c59-ae83-80c49ee75885"}]