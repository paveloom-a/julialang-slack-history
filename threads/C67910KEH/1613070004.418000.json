[{"client_msg_id":"cb31d346-d54e-47c1-8423-6021737f35f5","type":"message","text":"```using BenchmarkTools\n\nfunction dot3(a, b)\n    return a[1]*b[1] + a[2]*b[2] + a[3]*b[3]\nend\n\nfunction main()\n    A = [1.0, 2.0, 3.0]\n    B = (1.0, 2.0, 3.0)\n    @btime dot3($A, $A)\n    @btime dot3($B, $B)\nend\n\nmain()\n\n# 2.460 ns (0 allocations: 0 bytes)\n# 0.023 ns (0 allocations: 0 bytes)```\nWhat is the technical explanation why the use of arrays is so slow compared to the use of tuples?","user":"UAGBT2X1A","ts":"1613070004.418000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LG2","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using BenchmarkTools\n\nfunction dot3(a, b)\n    return a[1]*b[1] + a[2]*b[2] + a[3]*b[3]\nend\n\nfunction main()\n    A = [1.0, 2.0, 3.0]\n    B = (1.0, 2.0, 3.0)\n    @btime dot3($A, $A)\n    @btime dot3($B, $B)\nend\n\nmain()\n\n# 2.460 ns (0 allocations: 0 bytes)\n# 0.023 ns (0 allocations: 0 bytes)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"What is the technical explanation why the use of arrays is so slow compared to the use of tuples?"}]}]}],"thread_ts":"1613070004.418000","reply_count":44,"reply_users_count":9,"latest_reply":"1613075205.432100","reply_users":["UDB26738Q","UH24GRBLL","U67BJLYCS","UAGBT2X1A","UH8A351DJ","UMZQBQU67","U6788D83U","U67D54KS8","U0179G7FG4F"],"subscribed":false},{"client_msg_id":"83e02e06-29b7-413e-b614-03bba9f78297","type":"message","text":"constant propagation probably.  subnanoseconds timings don't make sense","user":"UDB26738Q","ts":"1613070066.418100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=3E","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"constant propagation probably.  subnanoseconds timings don't make sense"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A","reactions":[{"name":"heart","users":["U67BJLYCS","UH24GRBLL"],"count":2},{"name":"heavy_check_mark","users":["UH8A351DJ"],"count":1},{"name":"correct_answer","users":["U6740K1SP","U66M57AN4"],"count":2}]},{"client_msg_id":"b056b00c-0f4e-4437-89a8-3ab39971ca33","type":"message","text":"tuples have a length known to the compiler","user":"UH24GRBLL","ts":"1613070071.418300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Cf8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"tuples have a length known to the compiler"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"049a6050-a322-4421-a381-6572d5cbf333","type":"message","text":"so it's probably folded really efficiently","user":"UH24GRBLL","ts":"1613070089.418500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1MfE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so it's probably folded really efficiently"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"dfec44c7-e8c8-4cd4-9012-a4efd8a88efa","type":"message","text":"What Mose said","user":"U67BJLYCS","ts":"1613070099.418900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TckB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What Mose said"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"b8d47198-a165-4e83-9653-7b16697bab7c","type":"message","text":"`dot3` doesn't do anything","user":"U67BJLYCS","ts":"1613070110.419100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XL8Cm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"dot3","style":{"code":true}},{"type":"text","text":" doesn't do anything"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"1bc919a8-7eb9-4509-9fda-0a17d7b27751","type":"message","text":"You mean, this is a bit unfair comparison?","user":"UAGBT2X1A","ts":"1613070140.419400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2R1E","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You mean, this is a bit unfair comparison?"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"c3279ca5-559a-4977-9bc7-052b085ad84e","type":"message","text":"0.02ns is literally a few clock cycle","user":"UH8A351DJ","ts":"1613070150.419600","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1613070158.000000"},"blocks":[{"type":"rich_text","block_id":"Y1y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"0.02ns is literally a few clock cycle"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"7942abd5-a8cb-438b-8f90-2cc0d5a1b384","type":"message","text":"```julia&gt; function main()\n           A = [1.0, 2.0, 3.0]\n           B = (1.0, 2.0, 3.0)\n           @btime dot3($(Ref(A))[], $(Ref(A))[])\n           @btime dot3($(Ref(B))[], $(Ref(B))[])\n       end\nmain (generic function with 1 method)\n\njulia&gt; main()\n  2.729 ns (0 allocations: 0 bytes)\n  1.644 ns (0 allocations: 0 bytes)\n14.0```\n`Ref` prevents constant propagation.  tuples are still faster, but not by order of magnitudes","user":"UDB26738Q","ts":"1613070156.419800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"03Aib","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function main()\n           A = [1.0, 2.0, 3.0]\n           B = (1.0, 2.0, 3.0)\n           @btime dot3($(Ref(A))[], $(Ref(A))[])\n           @btime dot3($(Ref(B))[], $(Ref(B))[])\n       end\nmain (generic function with 1 method)\n\njulia> main()\n  2.729 ns (0 allocations: 0 bytes)\n  1.644 ns (0 allocations: 0 bytes)\n14.0"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Ref","style":{"code":true}},{"type":"text","text":" prevents constant propagation.  tuples are still faster, but not by order of magnitudes"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"596c5e54-421e-4db7-b304-d6bbb24dde98","type":"message","text":"`dot3(B, B) = 14`","user":"UMZQBQU67","ts":"1613070157.420000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nBr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"dot3(B, B) = 14","style":{"code":true}}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"ea694b2f-febe-40d8-8c01-2adcda887c3b","type":"message","text":"```julia&gt; @btime dot3(Ref($B)[], Ref($B)[])\n  1.143 ns (0 allocations: 0 bytes)\n14.0```","user":"U6788D83U","ts":"1613070165.420300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DyyY","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @btime dot3(Ref($B)[], Ref($B)[])\n  1.143 ns (0 allocations: 0 bytes)\n14.0"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A","reactions":[{"name":"slow_parrot","users":["UDB26738Q","UB197FRCL"],"count":2},{"name":"+1","users":["UH8A351DJ"],"count":1}]},{"client_msg_id":"059315bd-9b03-4e00-a784-d1e6033bab55","type":"message","text":"Don't run `btime` inside a function","user":"U67BJLYCS","ts":"1613070186.420800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Nhg37","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Don't run "},{"type":"text","text":"btime","style":{"code":true}},{"type":"text","text":" inside a function"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A","reactions":[{"name":"julia-smirk","users":["UMZQBQU67"],"count":1}]},{"client_msg_id":"c02a828a-abb3-4940-9199-6751a291deb6","type":"message","text":"compiler did the work before the function ran :julia-illuminati:","user":"UH24GRBLL","ts":"1613070231.421100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"65v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"compiler did the work before the function ran "},{"type":"emoji","name":"julia-illuminati"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"c377e889-ff7d-4055-a799-98053edce860","type":"message","text":"Ok, so clearly my mistake of that.","user":"UAGBT2X1A","ts":"1613070238.421300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Cf6p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok, so clearly my mistake of that."}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"42a09f82-3d2e-475e-a2de-b5964ba6fcfe","type":"message","text":"This example and the explanation of its result is in fact a decent demonstration of why tuples are indeed faster than arrays in many cases?","user":"UMZQBQU67","ts":"1613070295.421500","team":"T68168MUP","edited":{"user":"UMZQBQU67","ts":"1613070348.000000"},"blocks":[{"type":"rich_text","block_id":"lWj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This example and the explanation of its result is in fact a decent demonstration of why tuples are indeed faster than arrays in many cases?"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"c82fa92e-0d85-4689-a63f-74806f76875e","type":"message","text":"I need to write up my: Going fast nowhere that talks about these pitfalls","user":"U67BJLYCS","ts":"1613070301.421700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yngw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I need to write up my: Going fast nowhere that talks about these pitfalls"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A","reactions":[{"name":"sonic","users":["UDB26738Q","U66M57AN4"],"count":2}]},{"client_msg_id":"da6ebbdf-5999-441f-bbbd-a87935e1f4b5","type":"message","text":"But anyway, the point was, why the use of tuples is so much faster than the use of arrays? Not with that magnitude of 10-100 but still faster. Like what we have in StaticArrays etc.","user":"UAGBT2X1A","ts":"1613070339.421900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"N5G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But anyway, the point was, why the use of tuples is so much faster than the use of arrays? Not with that magnitude of 10-100 but still faster. Like what we have in StaticArrays etc."}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"3c4426ff-1530-46cb-8f27-8832d9f6e3bd","type":"message","text":"because the size is known to the compiler","user":"UH24GRBLL","ts":"1613070357.422300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"psNl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"because the size is known to the compiler"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"d4d4f0ac-7130-43e5-9054-950b77252ba2","type":"message","text":"`StaticArray` _is_ a tuple","user":"UDB26738Q","ts":"1613070362.422500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"q+5rN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"StaticArray","style":{"code":true}},{"type":"text","text":" "},{"type":"text","text":"is","style":{"italic":true}},{"type":"text","text":" a tuple"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"3cda1aee-c7c2-4528-815f-711db927517c","type":"message","text":"&gt; 0.02ns is literally a few clock cycle\n\nI think it is a bit less than that.","user":"U67D54KS8","ts":"1613070391.422700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HVOH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"> 0.02ns is literally a few clock cycle\n\nI think it is a bit less than that."}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A","reactions":[{"name":"heavy_check_mark","users":["UH8A351DJ"],"count":1}]},{"client_msg_id":"6e019df5-c911-4c9f-96ee-397340eb8ef8","type":"message","text":"specifically, it's 1/10th of a clock cycle (assuming 5ghz)","user":"U0179G7FG4F","ts":"1613070475.423000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ItF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"specifically, it's 1/10th of a clock cycle (assuming 5ghz)"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"704bd485-642f-4662-bb8f-671e0d3e59e2","type":"message","text":"Well, Tensors.jl is also one example of a high-performance library, but why we cannot achieve the same performance with regular dynamically allocated arrays, if the allocation is done outside of the calling function, is basically the topic of my wondering.","user":"UAGBT2X1A","ts":"1613070488.423200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PF/4G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well, Tensors.jl is also one example of a high-performance library, but why we cannot achieve the same performance with regular dynamically allocated arrays, if the allocation is done outside of the calling function, is basically the topic of my wondering."}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"51a081e1-e5c2-408e-b3e8-7ef66561f2e4","type":"message","text":"that has nothing to do with dynamic allocation. it’s constant propagation","user":"U6788D83U","ts":"1613070557.423400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7=BQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that has nothing to do with dynamic allocation. it’s constant propagation"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A","reactions":[{"name":"heavy_check_mark","users":["U8D9768Q6"],"count":1}]},{"client_msg_id":"4045c56b-1eb0-4b16-8599-321c5c978849","type":"message","text":"```julia&gt; goo() = (B = (1.0, 2.0, 3.0); dot3(B, B))\ngoo (generic function with 1 method)\n\njulia&gt; @code_typed debuginfo=:none goo()\nCodeInfo(\n1 ─     return 14.0\n) =&gt; Float64```","user":"U6788D83U","ts":"1613070626.423600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xhR","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> goo() = (B = (1.0, 2.0, 3.0); dot3(B, B))\ngoo (generic function with 1 method)\n\njulia> @code_typed debuginfo=:none goo()\nCodeInfo(\n1 ─     return 14.0\n) => Float64"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A","reactions":[{"name":"fast_parrot","users":["UB197FRCL","UEN48T0BT"],"count":2}]},{"client_msg_id":"ec114d59-b04b-4a84-890d-42563c203601","type":"message","text":"The less than 0.02ns case is constant prop, the case where tuples are still a factor 2 faster is the known size for the compiler","user":"UH24GRBLL","ts":"1613070649.423800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1H+R","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The less than 0.02ns case is constant prop, the case where tuples are still a factor 2 faster is the known size for the compiler"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"6860729d-0051-4229-9b48-3c13f7f3356a","type":"message","text":"tuple is a little bit faster at runtime because there’s no bounds check. If you disable the bounds check, then they have the same speed\n```julia&gt; function dot3(a, b)\n           return @inbounds a[1]*b[1] + a[2]*b[2] + a[3]*b[3]\n       end\ndot3 (generic function with 1 method)\n\njulia&gt; @btime dot3(Ref($A)[], Ref($A)[])\n  1.419 ns (0 allocations: 0 bytes)\n14.0\n\njulia&gt; @btime dot3(Ref($B)[], Ref($B)[])\n  1.141 ns (0 allocations: 0 bytes)\n14.0```","user":"U6788D83U","ts":"1613070744.424000","team":"T68168MUP","edited":{"user":"U6788D83U","ts":"1613070766.000000"},"blocks":[{"type":"rich_text","block_id":"nWt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"tuple is a little bit faster at runtime because there’s no bounds check. If you disable the bounds check, then they have the same speed\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function dot3(a, b)\n           return @inbounds a[1]*b[1] + a[2]*b[2] + a[3]*b[3]\n       end\ndot3 (generic function with 1 method)\n\njulia> @btime dot3(Ref($A)[], Ref($A)[])\n  1.419 ns (0 allocations: 0 bytes)\n14.0\n\njulia> @btime dot3(Ref($B)[], Ref($B)[])\n  1.141 ns (0 allocations: 0 bytes)\n14.0"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A","reactions":[{"name":"point_up_2","users":["U66SR8JHX"],"count":1}]},{"client_msg_id":"a1a4d37d-a778-4ca9-96e4-789b3973f7ed","type":"message","text":"Is that the whole explanation, basically? Just disabled bounds check","user":"UAGBT2X1A","ts":"1613071576.426600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"D/EH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is that the whole explanation, basically? Just disabled bounds check"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"db02d5e2-5b70-4c12-8427-e30ca1eb7b6b","type":"message","text":"it depends on what you do in practice, unsurprisingly","user":"U6788D83U","ts":"1613071665.426800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/4vlX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it depends on what you do in practice, unsurprisingly"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"66dde8f7-bd7b-4b6f-b9c8-08ab4b40c120","type":"message","text":"well, isn't there also stack vs. heap allocated difference?","user":"UH8A351DJ","ts":"1613072027.427600","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1613072040.000000"},"blocks":[{"type":"rich_text","block_id":"/LHN3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well, isn't there also stack vs. heap allocated difference?"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A","reactions":[{"name":"point_up","users":["U6A936746"],"count":1}]},{"client_msg_id":"edc95c62-ae1d-4bf5-94e2-f1f1fefd7de1","type":"message","text":"What I was expecting, that memory allocated from the heap is going to be slightly slower than the memory allocated from the stack, due to the more complicated memory access model. And I'm trying to understand why it's like that, but according to your demonstration above, I guess I also have to reconsider my hypothesis. After all, they are both reserved from the same memory with different memory models.","user":"UAGBT2X1A","ts":"1613072177.428100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W7hK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What I was expecting, that memory allocated from the heap is going to be slightly slower than the memory allocated from the stack, due to the more complicated memory access model. And I'm trying to understand why it's like that, but according to your demonstration above, I guess I also have to reconsider my hypothesis. After all, they are both reserved from the same memory with different memory models."}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"8e5608f3-19b5-42f8-9b3f-b94616f016e7","type":"message","text":"So what is the technical reason why e.g. StaticArrays is faster than doing optimized algorithms and using arrays instead?","user":"UAGBT2X1A","ts":"1613072250.428300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gN8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So what is the technical reason why e.g. StaticArrays is faster than doing optimized algorithms and using arrays instead?"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"cac9ec30-c8dd-44f8-8e64-285aa4d9b8b7","type":"message","text":"I think there are multiple reasons.  one of them is that the compiler knows the size of `StaticArrays`'s, not just their dimensions, and can more aggressively optimise the function","user":"UDB26738Q","ts":"1613072335.428500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EgTm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think there are multiple reasons.  one of them is that the compiler knows the size of "},{"type":"text","text":"StaticArrays","style":{"code":true}},{"type":"text","text":"'s, not just their dimensions, and can more aggressively optimise the function"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"bc8daa65-e9c8-405f-9eb9-c07108cddf1b","type":"message","text":"Very likely cpu cache is doing better job then","user":"UAGBT2X1A","ts":"1613072362.428700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jTF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Very likely cpu cache is doing better job then"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"2899ba64-698b-4a57-a579-d2ef162c3af5","type":"message","text":"Consider this example.\n```julia&gt; @inline function dot3(a, b)\n           return @fastmath @inbounds a[1]*b[1] + a[2]*b[2] + a[3]*b[3]\n       end\ndot3 (generic function with 1 method)\n\njulia&gt; vecdot3(d, x) = (@inbounds for i in 1:length(d)\n           idx = 3(i-1)+1\n           A = @view x[idx:idx+2]\n           d[i] = dot3(A, A)\n       end; nothing)\nvecdot3 (generic function with 1 method)\n\njulia&gt; vecdot3_v2(d, x) = (@inbounds for i in 1:length(d)\n           idx = 3(i-1)+1\n           A = (x[idx], x[idx+1], x[idx+2])\n           d[i] = dot3(A, A)\n       end; nothing)\nvecdot3_v2 (generic function with 1 method)\n\njulia&gt; d = zeros(100); x = ones(300);\n\njulia&gt; @btime vecdot3($d, $x)\n  136.298 ns (0 allocations: 0 bytes)\n\njulia&gt; @btime vecdot3_v2($d, $x)\n  31.382 ns (0 allocations: 0 bytes)```","user":"U6788D83U","ts":"1613072440.429100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0fE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Consider this example.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @inline function dot3(a, b)\n           return @fastmath @inbounds a[1]*b[1] + a[2]*b[2] + a[3]*b[3]\n       end\ndot3 (generic function with 1 method)\n\njulia> vecdot3(d, x) = (@inbounds for i in 1:length(d)\n           idx = 3(i-1)+1\n           A = @view x[idx:idx+2]\n           d[i] = dot3(A, A)\n       end; nothing)\nvecdot3 (generic function with 1 method)\n\njulia> vecdot3_v2(d, x) = (@inbounds for i in 1:length(d)\n           idx = 3(i-1)+1\n           A = (x[idx], x[idx+1], x[idx+2])\n           d[i] = dot3(A, A)\n       end; nothing)\nvecdot3_v2 (generic function with 1 method)\n\njulia> d = zeros(100); x = ones(300);\n\njulia> @btime vecdot3($d, $x)\n  136.298 ns (0 allocations: 0 bytes)\n\njulia> @btime vecdot3_v2($d, $x)\n  31.382 ns (0 allocations: 0 bytes)"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"11b81ced-3fc3-4ceb-a4c3-314fc31de2cf","type":"message","text":"Can you guess what causes the performance difference?","user":"U6788D83U","ts":"1613072455.429300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"baC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can you guess what causes the performance difference?"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"3a96500f-dcd7-47e8-b75c-37dec3291253","type":"message","text":"`vecdot3` computes the dot product directly. `vecdot3_v2` loads the same thing into a tuple, then compute the dot product.","user":"U6788D83U","ts":"1613072551.429500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KUdvw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"vecdot3","style":{"code":true}},{"type":"text","text":" computes the dot product directly. "},{"type":"text","text":"vecdot3_v2","style":{"code":true}},{"type":"text","text":" loads the same thing into a tuple, then compute the dot product."}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"9c63f138-fdb0-446c-acc8-8b06e3be0d4c","type":"message","text":"Hint: those two functions don’t always produce the same output even in the absence of round-off errors.","user":"U6788D83U","ts":"1613072674.429900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"I9fr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hint: those two functions don’t always produce the same output even in the absence of round-off errors."}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"9c26e230-743b-4c69-a211-3abd6f322d73","type":"message","text":"After thinking this a while, I actually cannot \"see\" the difference. Likely `@view` is introducing some extra magic that costs. Is this another lecture about compiler optimization because `x = ones(300)` ?","user":"UAGBT2X1A","ts":"1613073694.430400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Vio","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"After thinking this a while, I actually cannot \"see\" the difference. Likely "},{"type":"text","text":"@view","style":{"code":true}},{"type":"text","text":" is introducing some extra magic that costs. Is this another lecture about compiler optimization because "},{"type":"text","text":"x = ones(300)","style":{"code":true}},{"type":"text","text":" ?"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"b580c2df-6748-4aea-8a02-2e7f7483dbca","type":"message","text":"No, it’s not by `view` . Consider the case where d is a chunk of x.\n```julia&gt; x = [1, 2, 3, 4, 5, 6.0];\n\njulia&gt; vecdot3(@view(x[3:4]), x); x\n6-element Vector{Float64}:\n  1.0\n  2.0\n 14.0\n 77.0\n  5.0\n  6.0\n\njulia&gt; vecdot3_v2(@view(x[3:4]), x); x\n6-element Vector{Float64}:\n    1.0\n    2.0\n  201.0\n 5990.0\n    5.0\n    6.0```","user":"U6788D83U","ts":"1613073774.430600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9vsE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No, it’s not by "},{"type":"text","text":"view","style":{"code":true}},{"type":"text","text":" . Consider the case where d is a chunk of x.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> x = [1, 2, 3, 4, 5, 6.0];\n\njulia> vecdot3(@view(x[3:4]), x); x\n6-element Vector{Float64}:\n  1.0\n  2.0\n 14.0\n 77.0\n  5.0\n  6.0\n\njulia> vecdot3_v2(@view(x[3:4]), x); x\n6-element Vector{Float64}:\n    1.0\n    2.0\n  201.0\n 5990.0\n    5.0\n    6.0"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"c75fd87d-85a5-496d-9c5b-b05f03963edd","type":"message","text":"This cases is often referred as “aliasing”. It prohibits the compiler to vectorize your loop. Loading data into a different memory address space ensures the destination never aliases with the source, so the compiler can vectorize the loop. That causes the performance difference.","user":"U6788D83U","ts":"1613073869.430800","team":"T68168MUP","edited":{"user":"U6788D83U","ts":"1613073905.000000"},"blocks":[{"type":"rich_text","block_id":"W=3O4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This cases is often referred as “aliasing”. It prohibits the compiler to vectorize your loop. Loading data into a different memory address space ensures the destination never aliases with the source, so the compiler can vectorize the loop. That causes the performance difference."}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"c64d6bbc-121a-4831-a76b-fe1aa539cd24","type":"message","text":"Hmm. I think I need some more time to process what's going on here.","user":"UAGBT2X1A","ts":"1613074222.431100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RIst","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmm. I think I need some more time to process what's going on here."}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"7e41ef98-39be-4c75-ae1e-3c935eef8a26","type":"message","text":"System overload, hehe","user":"UAGBT2X1A","ts":"1613074244.431300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4LC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"System overload, hehe"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"90e2c008-289c-4cbf-ac2b-7582ca05af28","type":"message","text":"I replicated the test on my own computer. And get a remarkable performance difference also. And they're no differences in how parameters to function `dot3` is passed? I'm not familiar with how this `@view` is internally working, but how I think now is that in the v1 when calling function dot3, we are passing pointers to function whereas in v2 there are actually 6 integers pushed to the stack before calling the function.","user":"UAGBT2X1A","ts":"1613075058.431600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TYF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I replicated the test on my own computer. And get a remarkable performance difference also. And they're no differences in how parameters to function "},{"type":"text","text":"dot3","style":{"code":true}},{"type":"text","text":" is passed? I'm not familiar with how this "},{"type":"text","text":"@view","style":{"code":true}},{"type":"text","text":" is internally working, but how I think now is that in the v1 when calling function dot3, we are passing pointers to function whereas in v2 there are actually 6 integers pushed to the stack before calling the function."}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"636841ce-412b-4fe9-885d-b5536cc049d5","type":"message","text":"oops, my example is wrong. `vecdot3` is indeed the same with `vecdot3_v2` . but yeah, the reason that the compiler cannot optimize `vecdot3` is that it cannot prove they don’t alias.","user":"U6788D83U","ts":"1613075111.431800","team":"T68168MUP","edited":{"user":"U6788D83U","ts":"1613075120.000000"},"blocks":[{"type":"rich_text","block_id":"x98f","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oops, my example is wrong. "},{"type":"text","text":"vecdot3","style":{"code":true}},{"type":"text","text":" is indeed the same with "},{"type":"text","text":"vecdot3_v2","style":{"code":true}},{"type":"text","text":" . but yeah, the reason that the compiler cannot optimize "},{"type":"text","text":"vecdot3","style":{"code":true}},{"type":"text","text":" is that it cannot prove they don’t alias."}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"},{"client_msg_id":"73dc597f-768b-4a80-b083-dd368e3a3a0c","type":"message","text":"Thus making some extra copies is actually making code faster","user":"UAGBT2X1A","ts":"1613075205.432100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WGcak","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thus making some extra copies is actually making code faster"}]}]}],"thread_ts":"1613070004.418000","parent_user_id":"UAGBT2X1A"}]