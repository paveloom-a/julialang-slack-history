[{"client_msg_id":"FEF91241-A87D-4CB8-9725-C9C3986002CD","type":"message","text":"Hey, I come from Python, where actually using the language to do anything is discouraged, modules handle all the heavy lifting, and minimizing dependencies is important for interoperability.  I know that Julia was designed with the opposite intent but can’t shake the feeling that I should use packages, avoid objects, and keep my code in pure Julia for simplicity and performance.","user":"U01GC3N3ZJT","ts":"1609598463.259700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x/Xm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hey, I come from Python, where actually using the language to do anything is discouraged, modules handle all the heavy lifting, and minimizing dependencies is important for interoperability.  I know that Julia was designed with the opposite intent but can’t shake the feeling that I should use packages, avoid objects, and keep my code in pure Julia for simplicity and performance."}]}]}],"thread_ts":"1609598463.259700","reply_count":27,"reply_users_count":3,"latest_reply":"1609600656.281500","reply_users":["U7HAYKY9X","U01GC3N3ZJT","UH24GRBLL"],"subscribed":false},{"client_msg_id":"b35c7246-7b21-4767-8a9f-cd07652515ef","type":"message","text":"Hello and welcome!\nVery broad question. I do think it's correct minimizing dependencies has advantages for maintainability and interoperability, although my experience is that maintaining Julia is quite a bit easier than Python, because of the better package manager of Julia. The Julia ecosystem have more packages that are small, well-tested and built to synergize with other packages, and fewer giant monolith packages like Numpy or Scipy","user":"U7HAYKY9X","ts":"1609599092.260900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4vU=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hello and welcome!\nVery broad question. I do think it's correct minimizing dependencies has advantages for maintainability and interoperability, although my experience is that maintaining Julia is quite a bit easier than Python, because of the better package manager of Julia. The Julia ecosystem have more packages that are small, well-tested and built to synergize with other packages, and fewer giant monolith packages like Numpy or Scipy"}]}]}],"thread_ts":"1609598463.259700","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"435ed2f0-7b5e-46fc-9777-96b806bae894","type":"message","text":"Keeping the code pure Julia certainly is a good idea. It has lots of good downstream consequences, like easier deployment and installation, easier debugging, and making it easier to contribute by Julia users. But it's not critical, really.\nFinally, Julia objects have zero runtime costs, and often end up making your code faster because they compartmentalize your code such that optimizing parts of it is easier. The Julian way is to create tonnes of small new types.","user":"U7HAYKY9X","ts":"1609599232.261600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yujRy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Keeping the code pure Julia certainly is a good idea. It has lots of good downstream consequences, like easier deployment and installation, easier debugging, and making it easier to contribute by Julia users. But it's not critical, really.\nFinally, Julia objects have zero runtime costs, and often end up making your code faster because they compartmentalize your code such that optimizing parts of it is easier. The Julian way is to create tonnes of small new types."}]}]}],"thread_ts":"1609598463.259700","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"e65f5583-9dbe-4a1d-a990-71940010d976","type":"message","text":"A good exercise is to have a toy project where you create small, low-level objects. Then you can convince yourself that types really do have zero runtime cost, and you can create a new type even for types that should be one byte in size.","user":"U7HAYKY9X","ts":"1609599321.262700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sgZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"A good exercise is to have a toy project where you create small, low-level objects. Then you can convince yourself that types really do have zero runtime cost, and you can create a new type even for types that should be one byte in size."}]}]}],"thread_ts":"1609598463.259700","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"82B6F0ED-A42B-4D7A-BB79-D56F2BE6CF2D","type":"message","text":"_Zero_ runtime cost? 🥺","user":"U01GC3N3ZJT","ts":"1609599367.263100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DNQ/o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Zero","style":{"italic":true}},{"type":"text","text":" runtime cost? 🥺"}]}]}],"thread_ts":"1609598463.259700","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"63308623-4150-4676-9BF3-B4C7E5E2A0D2","type":"message","text":"_Faster_ code?","user":"U01GC3N3ZJT","ts":"1609599379.263400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IsJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Faster","style":{"italic":true}},{"type":"text","text":" code?"}]}]}],"thread_ts":"1609598463.259700","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"19C1527D-606B-48C5-90E8-40B956CF7C2E","type":"message","text":"Somebody, pinch me!  I must be dreaming.  This is incredible.","user":"U01GC3N3ZJT","ts":"1609599410.264300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ckx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Somebody, pinch me!  I must be dreaming.  This is incredible."}]}]}],"thread_ts":"1609598463.259700","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"a2cdead1-caf6-47eb-b904-f8a0de63bd5c","type":"message","text":"Indeed! In fact, basically all compiled languages have that feature.","user":"U7HAYKY9X","ts":"1609599472.265800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"grP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Indeed! In fact, basically all compiled languages have that feature."}]}]}],"thread_ts":"1609598463.259700","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"BB2CBB05-2B95-4E1E-9498-91EFF1A8CED7","type":"message","text":"WHAT","user":"U01GC3N3ZJT","ts":"1609599477.266100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Dy0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"WHAT"}]}]}],"thread_ts":"1609598463.259700","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"CAC85E50-D27E-4522-91FA-A067DD5D4063","type":"message","text":":exploding_head:","user":"U01GC3N3ZJT","ts":"1609599490.266400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ByvF","elements":[{"type":"rich_text_section","elements":[{"type":"emoji","name":"exploding_head"}]}]}],"thread_ts":"1609598463.259700","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"BFEFFF54-7C7C-4242-8F25-AF9847C621B1","type":"message","text":"Is this why _everything_ in Java is an object?","user":"U01GC3N3ZJT","ts":"1609599563.267200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MsDeG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is this why "},{"type":"text","text":"everything","style":{"italic":true}},{"type":"text","text":" in Java is an object?"}]}]}],"thread_ts":"1609598463.259700","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"2f6faf40-68f2-4110-bb56-9f0d4463f478","type":"message","text":"Uh, Ḯm not familiar with Java. Types may not have zero overhead in Java. But they do for C++, Julia and Rust, certainly.","user":"U7HAYKY9X","ts":"1609599598.267400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mdrG9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Uh, Ḯm not familiar with Java. Types may not have zero overhead in Java. But they do for C++, Julia and Rust, certainly."}]}]}],"thread_ts":"1609598463.259700","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"39DCE045-00C2-4CB7-B412-357146831AFA","type":"message","text":"This is mind-boggling.  Man, I wish we could ditch Python except for glue code and just use Julia with neat little packages and types for the real programming.","user":"U01GC3N3ZJT","ts":"1609599687.269000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yyDfY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is mind-boggling.  Man, I wish we could ditch Python except for glue code and just use Julia with neat little packages and types for the real programming."}]}]}],"thread_ts":"1609598463.259700","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"1014e102-b06c-42b2-b429-3012d2cfa8c7","type":"message","text":"I have managed to do just that for my work, and it is incredible! Julia also have some drawbacks, particularly\n• The latency when starting up, which may be e.g. 15 seconds for scripts\n• Higher memory consumption due to the JIT compiler than more efficient languages like Rust\n• The language lacks good support for static analysis like other compiled languages have.","user":"U7HAYKY9X","ts":"1609599763.271100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vLL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have managed to do just that for my work, and it is incredible! Julia also have some drawbacks, particularly\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The latency when starting up, which may be e.g. 15 seconds for scripts"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Higher memory consumption due to the JIT compiler than more efficient languages like Rust"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"The language lacks good support for static analysis like other compiled languages have."}]}],"style":"bullet","indent":0}]}],"thread_ts":"1609598463.259700","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"2488c44c-1d25-4f41-855f-75345a1f9acd","type":"message","text":"*zero extra overhead compared to just allocating some memory and operating on it","user":"UH24GRBLL","ts":"1609599783.271300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qn4l","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"*zero extra overhead compared to just allocating some memory and operating on it"}]}]}],"thread_ts":"1609598463.259700","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"65142e36-913d-4679-8a67-641c458a0585","type":"message","text":"But if you use Python in situations where these drawbacks don't matter much, then switching to Julia is amazing","user":"U7HAYKY9X","ts":"1609599797.271500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"75xFu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But if you use Python in situations where these drawbacks don't matter much, then switching to Julia is amazing"}]}]}],"thread_ts":"1609598463.259700","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"bbe2ffb2-ca3c-44a9-970d-f6a76c99b587","type":"message","text":"Higher memory consumption can be alleviated by learning the ins and outs of `@benchmark` and `@code_warntype` ;)","user":"UH24GRBLL","ts":"1609599832.271700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mLHIe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Higher memory consumption can be alleviated by learning the ins and outs of "},{"type":"text","text":"@benchmark","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"@code_warntype","style":{"code":true}},{"type":"text","text":" ;)"}]}]}],"thread_ts":"1609598463.259700","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"8fd92328-77f2-4ece-ac23-878e859030e2","type":"message","text":"IMO, learning to embrace structs, the mutation of memory and immutable things leads to a lot of excitement on your road to learning julia","user":"UH24GRBLL","ts":"1609599883.272000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mWaz6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"IMO, learning to embrace structs, the mutation of memory and immutable things leads to a lot of excitement on your road to learning julia"}]}]}],"thread_ts":"1609598463.259700","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"8b1e013f-797c-4fb3-807c-3501417455d1","type":"message","text":"feel free to ask any questions you might have while learning julia in <#C6A044SQH|helpdesk> :)","user":"UH24GRBLL","ts":"1609599901.272500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"atm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"feel free to ask any questions you might have while learning julia in "},{"type":"channel","channel_id":"C6A044SQH"},{"type":"text","text":" :)"}]}]}],"thread_ts":"1609598463.259700","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"45954977-671A-4C32-B384-3426CCCCE529","type":"message","text":"Alright, time to start campaigning for Julia and Rust wherever I go.  I wonder if we could even re-implement the C++ of the reference implementations of Julia and the LLVM in Rust.","user":"U01GC3N3ZJT","ts":"1609599969.274100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fUjP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Alright, time to start campaigning for Julia and Rust wherever I go.  I wonder if we could even re-implement the C++ of the reference implementations of Julia and the LLVM in Rust."}]}]}],"thread_ts":"1609598463.259700","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"286F2ADA-8DC4-48EC-B440-7AC9D026EF30","type":"message","text":"And to add support for static compilation, type checking, and Rust API calls to Julia.","user":"U01GC3N3ZJT","ts":"1609599999.275000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KTF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And to add support for static compilation, type checking, and Rust API calls to Julia."}]}]}],"thread_ts":"1609598463.259700","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"c711413e-a5bf-44ef-bc99-d68e9520c1f0","type":"message","text":"static compilation works-ish right now with PackageCompiler.jl","user":"UH24GRBLL","ts":"1609600415.276700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0ox","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"static compilation works-ish right now with PackageCompiler.jl"}]}]}],"thread_ts":"1609598463.259700","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"098716c5-49de-42f1-8e8d-6f7084f2cd2d","type":"message","text":"will be better in the future though, the past few months of compiler improvements have partially been in preparation for that","user":"UH24GRBLL","ts":"1609600444.276900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"grw5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"will be better in the future though, the past few months of compiler improvements have partially been in preparation for that"}]}]}],"thread_ts":"1609598463.259700","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"0a14ee08-5d6c-4b89-9a5b-322978db33c0","type":"message","text":"Just have rust API calls :) A rust re-impl will probably never happen, but the other things are a good idea!","user":"U7HAYKY9X","ts":"1609600455.277100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"y/E","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Just have rust API calls :) A rust re-impl will probably never happen, but the other things are a good idea!"}]}]}],"thread_ts":"1609598463.259700","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"81e3edad-e09c-4feb-8b73-600f74ad36f2","type":"message","text":"you can also call Rust from julia and julia from rust, iirc there were packages for both paths","user":"UH24GRBLL","ts":"1609600482.277300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AYd3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can also call Rust from julia and julia from rust, iirc there were packages for both paths"}]}]}],"thread_ts":"1609598463.259700","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"b5e6eab0-fd2e-4ead-8e3b-853c5643f6c1","type":"message","text":"reimplementing LLVM in Rust is probably not going to happen ever, LLVM has way too much buy-in from C++","user":"UH24GRBLL","ts":"1609600620.280200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sz9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"reimplementing LLVM in Rust is probably not going to happen ever, LLVM has way too much buy-in from C++"}]}]}],"thread_ts":"1609598463.259700","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"E4FD2443-1A96-4752-9201-6738C989D105","type":"message","text":"Yep!  Can’t wait for static compilation for those oddball cases that require hand-coding.  I wonder if now isn’t the perfect time to re-implement, though, because Rust’s inherent memory and type safety and legible syntax ease and hasten development.  We could have more new features sooner and faster with fewer bugs.","user":"U01GC3N3ZJT","ts":"1609600626.280700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fLRBc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yep!  Can’t wait for static compilation for those oddball cases that require hand-coding.  I wonder if now isn’t the perfect time to re-implement, though, because Rust’s inherent memory and type safety and legible syntax ease and hasten development.  We could have more new features sooner and faster with fewer bugs."}]}]}],"thread_ts":"1609598463.259700","parent_user_id":"U01GC3N3ZJT"},{"client_msg_id":"7A84F4B2-1805-42EB-9A1D-610CEF7CC7D8","type":"message","text":"Oh, what do you mean by “buy-in”?  Do you mean lock-in?","user":"U01GC3N3ZJT","ts":"1609600656.281500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QF7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh, what do you mean by “buy-in”?  Do you mean lock-in?"}]}]}],"thread_ts":"1609598463.259700","parent_user_id":"U01GC3N3ZJT"}]