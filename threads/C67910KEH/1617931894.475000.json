[{"client_msg_id":"C41219B4-D5A4-436A-A4AE-D28DD30616EC","type":"message","text":"Is there any difference between `x === nothing` and `x isa Nothing`?","user":"U7THT3TM3","ts":"1617931894.475000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Dpb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there any difference between "},{"type":"text","text":"x === nothing","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"x isa Nothing","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1617931894.475000","reply_count":21,"reply_users_count":7,"latest_reply":"1617998912.020600","reply_users":["U01FKQQ7J0J","U7THT3TM3","U6795JH6H","U674T3KB3","UH24GRBLL","UMZQBQU67","UD0NS8PDF"],"is_locked":false,"subscribed":false},{"client_msg_id":"d825ce7f-9370-4545-b99b-4c1c56a51fde","type":"message","text":"Great question.  And don't forget `x == nothing` and `isnothing(x)`","user":"U01FKQQ7J0J","ts":"1617933311.475200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3WNrU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Great question.  And don't forget "},{"type":"text","text":"x == nothing","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"isnothing(x)","style":{"code":true}}]}]}],"thread_ts":"1617931894.475000","parent_user_id":"U7THT3TM3"},{"client_msg_id":"234BF37F-A735-41B3-855C-30A36DC6D9C4","type":"message","text":"`x === nothing` is better than `x == nothing` and `isnothing` because you can add methods to `==` and `isnothing`; in contrast, you cannot modify or add methods to `===`, so the compiler can make additional assumptions based on the guarantee that `===` will not change.","user":"U7THT3TM3","ts":"1617933627.478300","team":"T68168MUP","edited":{"user":"U7THT3TM3","ts":"1617933633.000000"},"blocks":[{"type":"rich_text","block_id":"EubDU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"x ==","style":{"code":true}},{"type":"text","text":"= ","style":{"code":true}},{"type":"text","text":"nothing","style":{"code":true}},{"type":"text","text":" is better than "},{"type":"text","text":"x == nothing","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"isnothing","style":{"code":true}},{"type":"text","text":" because you can add methods to "},{"type":"text","text":"==","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"isnothing","style":{"code":true}},{"type":"text","text":"; in contrast, you cannot modify or add methods to "},{"type":"text","text":"===","style":{"code":true}},{"type":"text","text":", so the compiler can make additional assumptions based on the guarantee that "},{"type":"text","text":"===","style":{"code":true}},{"type":"text","text":" will not change."}]}]}],"thread_ts":"1617931894.475000","parent_user_id":"U7THT3TM3","reactions":[{"name":"+1","users":["U01FKQQ7J0J","U6CJRSR63"],"count":2},{"name":"+1::skin-tone-4","users":["UAREE2NMD"],"count":1}]},{"client_msg_id":"3F0E2A15-F4CC-4BCA-8FCB-D1099746BC4E","type":"message","text":"But since `===` and `isa` are both built-in (you can't modify or add methods to them), I'm not sure if there's any difference between `x === nothing` and `x isa Nothing`.","user":"U7THT3TM3","ts":"1617933760.480500","team":"T68168MUP","edited":{"user":"U7THT3TM3","ts":"1617933767.000000"},"blocks":[{"type":"rich_text","block_id":"Di+7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But since "},{"type":"text","text":"===","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"isa","style":{"code":true}},{"type":"text","text":" are both built-in (you can't modify or add methods to them), I'm not sure if there's any difference between "},{"type":"text","text":"x === nothing","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"x isa Nothing","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1617931894.475000","parent_user_id":"U7THT3TM3"},{"client_msg_id":"3F27F530-CE77-4D4A-87FC-B3BD5BFDBC78","type":"message","text":"Look at the generated code?","user":"U6795JH6H","ts":"1617934620.483200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6HSQf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Look at the generated code?"}]}]}],"thread_ts":"1617931894.475000","parent_user_id":"U7THT3TM3"},{"client_msg_id":"4dc40e2f-669b-4342-ae4d-1639895da91b","type":"message","text":"Maybe this isn't technically \"adding a method\", but it does look like it:\n```julia&gt; struct Foo; x; end\n\njulia&gt; ===(a::Foo, b::Nothing) = true\n=== (generic function with 1 method)\n\njulia&gt; a = Foo(rand())\nFoo(0.18613438908731017)\n\njulia&gt; a === nothing\ntrue```","user":"U01FKQQ7J0J","ts":"1617934640.483400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Z0qH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe this isn't technically \"adding a method\", but it does look like it:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> struct Foo; x; end\n\njulia> ===(a::Foo, b::Nothing) = true\n=== (generic function with 1 method)\n\njulia> a = Foo(rand())\nFoo(0.18613438908731017)\n\njulia> a === nothing\ntrue"}]}]}],"thread_ts":"1617931894.475000","parent_user_id":"U7THT3TM3"},{"client_msg_id":"c7743712-c6ec-4b0c-b9f2-0f763732a1f6","type":"message","text":"that's just shadowing a binding","user":"U674T3KB3","ts":"1617937039.484900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"exAl4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's just shadowing a binding"}]}]}],"thread_ts":"1617931894.475000","parent_user_id":"U7THT3TM3"},{"client_msg_id":"dbde7efb-949e-4d93-94a9-b1d5617e2f69","type":"message","text":"`Main.===` in your example is not the same as `Core.===`","user":"UH24GRBLL","ts":"1617978685.002500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CY3Xn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Main.===","style":{"code":true}},{"type":"text","text":" in your example is not the same as "},{"type":"text","text":"Core.===","style":{"code":true}}]}]}],"thread_ts":"1617931894.475000","parent_user_id":"U7THT3TM3"},{"client_msg_id":"8859fa94-022c-44df-8509-b9d461c81868","type":"message","text":"To clarify: `===` is just a normal variable name but the function that `===` refers to by default is not a generic function, it’s a built-in. So what’s happening here is that you’ve given the name `===` a new meaning: it’s now a normal generic function unrelated to `Core.===` which still exists.","user":"U6795JH6H","ts":"1617983819.008600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eAO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"To clarify: "},{"type":"text","text":"===","style":{"code":true}},{"type":"text","text":" is just a normal variable name but the function that "},{"type":"text","text":"===","style":{"code":true}},{"type":"text","text":" refers to by default is not a generic function, it’s a built-in. So what’s happening here is that you’ve given the name "},{"type":"text","text":"===","style":{"code":true}},{"type":"text","text":" a new meaning: it’s now a normal generic function unrelated to "},{"type":"text","text":"Core.===","style":{"code":true}},{"type":"text","text":" which still exists."}]}]}],"thread_ts":"1617931894.475000","parent_user_id":"U7THT3TM3"},{"client_msg_id":"82c4bbc0-1067-420a-a530-3c9ab97ccdd6","type":"message","text":"The ability to redefine names is far less of a problem from the compiler’s perspective for a few reasons: 1) it’s statically resolvable and 2) this binding is const, so it cannot change once it’s made","user":"U6795JH6H","ts":"1617983864.008800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Md7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The ability to redefine names is far less of a problem from the compiler’s perspective for a few reasons: 1) it’s statically resolvable and 2) this binding is const, so it cannot change once it’s made"}]}]}],"thread_ts":"1617931894.475000","parent_user_id":"U7THT3TM3"},{"client_msg_id":"28443ff5-e6b8-42e9-bbb5-46d69c3baca0","type":"message","text":"So\n\n```julia&gt; struct Foo; x; end\n\njulia&gt; import Core: ===\n\njulia&gt; ===(a::Foo, b::Nothing) = true\nERROR: cannot add methods to a builtin function\nStacktrace:\n [1] top-level scope at REPL[5]:1```\ndoes not work.","user":"UMZQBQU67","ts":"1617984929.009000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Wk63","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> struct Foo; x; end\n\njulia> import Core: ===\n\njulia> ===(a::Foo, b::Nothing) = true\nERROR: cannot add methods to a builtin function\nStacktrace:\n [1] top-level scope at REPL[5]:1"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\ndoes not work."}]}]}],"thread_ts":"1617931894.475000","parent_user_id":"U7THT3TM3"},{"client_msg_id":"e2603394-21b1-418a-b44e-198cb6157202","type":"message","text":"yep","user":"UH24GRBLL","ts":"1617985178.009200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lMo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yep"}]}]}],"thread_ts":"1617931894.475000","parent_user_id":"U7THT3TM3"},{"client_msg_id":"03f713da-011e-4b80-a6d5-ee5c212b02b0","type":"message","text":"Thanks for emphasizing the distinction between `Main.===` and `Core.===`.  The fact that defining `===` (implicitly in the `Main` module) showed it as \"generic function with 1 method\" is a clue that a new function is being created rather than a new method being added to an existing function.  Anybody who defines `Main.===` IRL will get what they deserve (which I guess could be what they want if they've thought things through very carefully? :man-shrugging:)","user":"U01FKQQ7J0J","ts":"1617987348.013600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rEL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks for emphasizing the distinction between "},{"type":"text","text":"Main.===","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"Core.===","style":{"code":true}},{"type":"text","text":".  The fact that defining "},{"type":"text","text":"===","style":{"code":true}},{"type":"text","text":" (implicitly in the "},{"type":"text","text":"Main","style":{"code":true}},{"type":"text","text":" module) showed it as \"generic function with 1 method\" is a clue that a new function is being created rather than a new method being added to an existing function.  Anybody who defines "},{"type":"text","text":"Main.===","style":{"code":true}},{"type":"text","text":" IRL will get what they deserve (which I guess could be what they want if they've thought things through very carefully? "},{"type":"emoji","name":"man-shrugging"},{"type":"text","text":")"}]}]}],"thread_ts":"1617931894.475000","parent_user_id":"U7THT3TM3"},{"client_msg_id":"efffd9a2-5f8a-4708-aec9-8ade044a8052","type":"message","text":"We could disallow it but we’re not very into disallowing things unless there’s a good reason","user":"U6795JH6H","ts":"1617987564.014200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Yv6Xv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We could disallow it but we’re not very into disallowing things unless there’s a good reason"}]}]}],"thread_ts":"1617931894.475000","parent_user_id":"U7THT3TM3"},{"client_msg_id":"7df3102a-f18f-4626-b8e8-092e7557df9e","type":"message","text":"if someone wants to use that syntax to mean something else in their own code, why not?","user":"U6795JH6H","ts":"1617987579.014400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tkJ8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if someone wants to use that syntax to mean something else in their own code, why not?"}]}]}],"thread_ts":"1617931894.475000","parent_user_id":"U7THT3TM3"},{"client_msg_id":"c0830654-f910-4ba4-9a41-604264f23fd5","type":"message","text":"Could even be a slight change to the standard `===` behavior for whatever reason","user":"U6795JH6H","ts":"1617987610.014800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RQqK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Could even be a slight change to the standard "},{"type":"text","text":"===","style":{"code":true}},{"type":"text","text":" behavior for whatever reason"}]}]}],"thread_ts":"1617931894.475000","parent_user_id":"U7THT3TM3"},{"client_msg_id":"1bea41df-8e78-4ba0-b4a2-df59fc1b3931","type":"message","text":"Oh yeah, I think it should be allowed.  I think adding guard rails all over the place can get rather messy and arbitrarily constraining.  Just because something is generally ill-advised doesn't mean it is always ill-advised :sweat_smile:","user":"U01FKQQ7J0J","ts":"1617987783.015500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"74uo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh yeah, I think it should be allowed.  I think adding guard rails all over the place can get rather messy and arbitrarily constraining.  Just because something is generally ill-advised doesn't mean it is always ill-advised "},{"type":"emoji","name":"sweat_smile"}]}]}],"thread_ts":"1617931894.475000","parent_user_id":"U7THT3TM3"},{"client_msg_id":"5477ea5d-3941-4413-addb-b02e838f564c","type":"message","text":"TIL that you can similarly overload `isa`, in case you want a confusing ascii infix operator","user":"UD0NS8PDF","ts":"1617987818.015700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"i0Ke","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"TIL that you can similarly overload "},{"type":"text","text":"isa","style":{"code":true}},{"type":"text","text":", in case you want a confusing ascii infix operator"}]}]}],"thread_ts":"1617931894.475000","parent_user_id":"U7THT3TM3"},{"client_msg_id":"87170499-9080-4b17-9b95-36e28e499338","type":"message","text":"I think the reason that so many things are special in other languages is that their notion of a function is often too limited and they want special behaviors for some operators that their functions cannot do","user":"U6795JH6H","ts":"1617987960.016100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"U8D","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think the reason that so many things are special in other languages is that their notion of a function is often too limited and they want special behaviors for some operators that their functions cannot do"}]}]}],"thread_ts":"1617931894.475000","parent_user_id":"U7THT3TM3"},{"client_msg_id":"b4a3e4fa-9ee4-412b-9ccb-999b6e33f977","type":"message","text":"Since one of the main design criteria for Julia was that all operators be “just functions” we don’t have that problem, so pretty much everything can just be a binding a plain old function, which means almost everything can be overridden by the user","user":"U6795JH6H","ts":"1617988031.016700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LP3g","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Since one of the main design criteria for Julia was that all operators be “just functions” we don’t have that problem, so pretty much everything can just be a binding a plain old function, which means almost everything can be overridden by the user"}]}]}],"thread_ts":"1617931894.475000","parent_user_id":"U7THT3TM3"},{"client_msg_id":"8e92efd3-1d94-4785-a859-65501756dd94","type":"message","text":"One of the things I like(d) about Ruby is(was) that it has open classes and modules.  I think some OO purists are horrified at the thought, but sometimes a little monkey-patching (and maybe type piracy, but I'm not 100% clear on that concept) is great IMHO.  Julia isn't OO, but it does seem to have that same spirit of openness :grinning:","user":"U01FKQQ7J0J","ts":"1617989186.017400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Z5Q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"One of the things I like(d) about Ruby is(was) that it has open classes and modules.  I think some OO purists are horrified at the thought, but sometimes a little monkey-patching (and maybe type piracy, but I'm not 100% clear on that concept) is great IMHO.  Julia isn't OO, but it does seem to have that same spirit of openness "},{"type":"emoji","name":"grinning"}]}]}],"thread_ts":"1617931894.475000","parent_user_id":"U7THT3TM3","reactions":[{"name":"heavy_check_mark","users":["U6795JH6H"],"count":1}]},{"client_msg_id":"c758b86b-9548-4304-b539-cdd8728a1fdc","type":"message","text":"Yeah, all of Ruby on Rails is built on open classes and monkey patching. Which was kind of a big problem but also wildly successful.","user":"U6795JH6H","ts":"1617998912.020600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"H2x","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, all of Ruby on Rails is built on open classes and monkey patching. Which was kind of a big problem but also wildly successful."}]}]}],"thread_ts":"1617931894.475000","parent_user_id":"U7THT3TM3"}]