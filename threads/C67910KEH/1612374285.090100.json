[{"client_msg_id":"7a047661-3384-4237-b627-4864a9494f37","type":"message","text":"Is there a resource I could use to learn why and when extra memory may be allocated when a Julia function is called, when it doesn't appear to be strictly needed for execution?\n\nExample being <https://github.com/JuliaLang/julia/issues/37639>\n\nI understand the immediate issue is caused by disabling optimization of the throw block, but I want to understand why the compiler thinks that means it needs to pre-emptively allocate more memory when that block isn't likely to be executed. I'm assuming there are good reasons for the behavior, I just don't know what they are.","user":"U01HD5VFXJM","ts":"1612374285.090100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ip5S","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a resource I could use to learn why and when extra memory may be allocated when a Julia function is called, when it doesn't appear to be strictly needed for execution?\n\nExample being "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/37639"},{"type":"text","text":"\n\nI understand the immediate issue is caused by disabling optimization of the throw block, but I want to understand why the compiler thinks that means it needs to pre-emptively allocate more memory when that block isn't likely to be executed. I'm assuming there are good reasons for the behavior, I just don't know what they are."}]}]}],"thread_ts":"1612374285.090100","reply_count":55,"reply_users_count":4,"latest_reply":"1612457812.141000","reply_users":["U67BJLYCS","U01HD5VFXJM","U6740K1SP","U01GRS159T8"],"subscribed":false},{"client_msg_id":"7deebc6a-c1e6-4b7b-a921-d525d2a6ffa5","type":"message","text":"1. Julia does precise garbage-collection, that means that there are points in the program \"safepoints\" at which we know that memory used in the program is rooted (for objects created in a function that is the gcframe).","user":"U67BJLYCS","ts":"1612374818.090200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Tpvl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"1. Julia does precise garbage-collection, that means that there are points in the program \"safepoints\" at which we know that memory used in the program is rooted (for objects created in a function that is the gcframe)."}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"cc67c081-edde-4125-8251-d2faf1aef740","type":"message","text":"2. Without optimization \"everything\" is a heap allocation, e.g. something that needs to be tracked by GC.","user":"U67BJLYCS","ts":"1612374866.090400","team":"T68168MUP","edited":{"user":"U67BJLYCS","ts":"1612374900.000000"},"blocks":[{"type":"rich_text","block_id":"tVXU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"2. Without optimization \"everything\" is a heap allocation, e.g. something that needs to be tracked by GC."}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"37a36400-ea1d-43f2-ac19-c2438e56effa","type":"message","text":"Optimizations that exists are:\n- Immutable objects can in most cases be turned into stack allocations\n- non escaping mutable objects / immutable objects that contain pointers to GC objects can be turned into stack allocations","user":"U67BJLYCS","ts":"1612375002.090700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SIB5e","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Optimizations that exists are:\n- Immutable objects can in most cases be turned into stack allocations\n- non escaping mutable objects / immutable objects that contain pointers to GC objects can be turned into stack allocations"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"71bb9297-82d6-4b2f-aaa2-b578cb2519d5","type":"message","text":"Escaping analysis is basically saying: Are all uses of this object inside this function","user":"U67BJLYCS","ts":"1612375060.090900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NrO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Escaping analysis is basically saying: Are all uses of this object inside this function"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"a1ea8c22-6bd0-4220-9dae-22ebadf2e56e","type":"message","text":"it's implemented here <https://github.com/JuliaLang/julia/blob/master/src/llvm-alloc-opt.cpp>","user":"U67BJLYCS","ts":"1612375124.091100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"laDhe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's implemented here "},{"type":"link","url":"https://github.com/JuliaLang/julia/blob/master/src/llvm-alloc-opt.cpp"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"98b1826e-5d2c-4011-826a-39983eb60080","type":"message","text":"Thank you! That gives me a good foothold.","user":"U01HD5VFXJM","ts":"1612375274.091300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YtQk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thank you! That gives me a good foothold."}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"dcb9fef7-1fc3-44e8-af3f-5ac325018b10","type":"message","text":"So what's the difference between","user":"U67BJLYCS","ts":"1612375341.091500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kTeTs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So what's the difference between"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"84bbf6b9-e402-4ca2-b70b-6780ada261cd","type":"message","text":"```julia&gt; function g(dims, xs...)\n         if prod(dims) != length(xs)\n             throw(ArgumentError(\"argument count does not match specified shape (expected $(prod(dims)), got $(length(xs)))\"))\n         end\n       end\ng (generic function with 1 method)\n\njulia&gt; function f(dims, xs...)\n         lengthxs = length(xs)\n         if prod(dims) != lengthxs\n             throw(ArgumentError(\"argument count does not match specified shape (expected $(prod(dims)), got $(lengthxs))\"))\n         end\n       end```","user":"U67BJLYCS","ts":"1612375344.091700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DSRQ","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function g(dims, xs...)\n         if prod(dims) != length(xs)\n             throw(ArgumentError(\"argument count does not match specified shape (expected $(prod(dims)), got $(length(xs)))\"))\n         end\n       end\ng (generic function with 1 method)\n\njulia> function f(dims, xs...)\n         lengthxs = length(xs)\n         if prod(dims) != lengthxs\n             throw(ArgumentError(\"argument count does not match specified shape (expected $(prod(dims)), got $(lengthxs))\"))\n         end\n       end"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"28620164-9287-4a04-a258-fc2e0d192e53","type":"message","text":"```julia&gt; @code_typed f((1,), 1)\nCodeInfo(\n1 ─ %1 = Core.getfield(dims, 1)::Int64\n│   %2 = (%1 === 1)::Bool\n│   %3 = Base.not_int(%2)::Bool\n└──      goto #3 if not %3\n2 ─ %5 = Main.prod(dims)::Any\n│   %6 = Base.string(\"argument count does not match specified shape (expected \", %5, \", got \", 1, \")\")::Any\n│   %7 = Main.ArgumentError(%6)::Any\n│        Main.throw(%7)::Union{}\n└──      unreachable\n3 ─      return nothing\n) =&gt; Nothing\n\njulia&gt; @code_typed g((1,), 1)\nCodeInfo(\n1 ─ %1 = Core.getfield(dims, 1)::Int64\n│   %2 = (%1 === 1)::Bool\n│   %3 = Base.not_int(%2)::Bool\n└──      goto #3 if not %3\n2 ─ %5 = Main.prod(dims)::Any\n│   %6 = Main.length(xs)::Any\n│   %7 = Base.string(\"argument count does not match specified shape (expected \", %5, \", got \", %6, \")\")::Any\n│   %8 = Main.ArgumentError(%7)::Any\n│        Main.throw(%8)::Union{}\n└──      unreachable\n3 ─      return nothing\n) =&gt; Nothing```","user":"U67BJLYCS","ts":"1612375378.091900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Meg","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @code_typed f((1,), 1)\nCodeInfo(\n1 ─ %1 = Core.getfield(dims, 1)::Int64\n│   %2 = (%1 === 1)::Bool\n│   %3 = Base.not_int(%2)::Bool\n└──      goto #3 if not %3\n2 ─ %5 = Main.prod(dims)::Any\n│   %6 = Base.string(\"argument count does not match specified shape (expected \", %5, \", got \", 1, \")\")::Any\n│   %7 = Main.ArgumentError(%6)::Any\n│        Main.throw(%7)::Union{}\n└──      unreachable\n3 ─      return nothing\n) => Nothing\n\njulia> @code_typed g((1,), 1)\nCodeInfo(\n1 ─ %1 = Core.getfield(dims, 1)::Int64\n│   %2 = (%1 === 1)::Bool\n│   %3 = Base.not_int(%2)::Bool\n└──      goto #3 if not %3\n2 ─ %5 = Main.prod(dims)::Any\n│   %6 = Main.length(xs)::Any\n│   %7 = Base.string(\"argument count does not match specified shape (expected \", %5, \", got \", %6, \")\")::Any\n│   %8 = Main.ArgumentError(%7)::Any\n│        Main.throw(%8)::Union{}\n└──      unreachable\n3 ─      return nothing\n) => Nothing"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"d23891fb-80fd-4595-9060-777bf1a4ee64","type":"message","text":"see how the call to `length(xs)` slipped into the throw branch?","user":"U67BJLYCS","ts":"1612375438.092100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c2e","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"see how the call to "},{"type":"text","text":"length(xs)","style":{"code":true}},{"type":"text","text":" slipped into the throw branch?"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM","reactions":[{"name":"+1","users":["U01HD5VFXJM"],"count":1}]},{"client_msg_id":"aa8d9646-2b09-4e62-92b9-bffb39c71c4a","type":"message","text":"so you can look at the code we end up with `@code_llvm`","user":"U67BJLYCS","ts":"1612375492.092400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KED","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so you can look at the code we end up with "},{"type":"text","text":"@code_llvm","style":{"code":true}}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"1deaa258-12d7-4d06-9083-1a60bb522aa3","type":"message","text":"`g` has `%gcframe2 = alloca [4 x {}*], align 16`","user":"U67BJLYCS","ts":"1612375522.092600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aI4jE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"g","style":{"code":true}},{"type":"text","text":" has "},{"type":"text","text":"%gcframe2 = alloca [4 x {}*], align 16","style":{"code":true}}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"6d69d04e-d488-431d-a9a4-e4870626fd00","type":"message","text":"`f` has `gcframe2 = alloca [3 x {}*], align 16`","user":"U67BJLYCS","ts":"1612375539.092800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Sy178","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" has "},{"type":"text","text":"gcframe2 = alloca [3 x {}*], align 16","style":{"code":true}}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"77c50f25-71d4-4ba0-b156-f14902ca8d46","type":"message","text":"with if I am not mistaken means that we need to keep one more object alive in `g`","user":"U67BJLYCS","ts":"1612375603.093000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"i6+YI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"with if I am not mistaken means that we need to keep one more object alive in "},{"type":"text","text":"g","style":{"code":true}}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"922ec10b-b34a-4da4-9420-0f36f84a913c","type":"message","text":"Okay, I was wondering if that's what that meant.","user":"U01HD5VFXJM","ts":"1612375653.093200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kP9g","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Okay, I was wondering if that's what that meant."}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"38320b02-e8e4-4055-9ad5-7d2bed30e13f","type":"message","text":"I am not a 100% on that, but that is my understanding","user":"U67BJLYCS","ts":"1612375682.093400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5KR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am not a 100% on that, but that is my understanding"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"febe1b57-953e-4c6c-879b-6d498a28ed79","type":"message","text":"and so the problem is that in the throw block we use dynamic semantics and use `jl_apply_generic` so everything is escaping in the throw block","user":"U67BJLYCS","ts":"1612375745.093600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1kVA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and so the problem is that in the throw block we use dynamic semantics and use "},{"type":"text","text":"jl_apply_generic","style":{"code":true}},{"type":"text","text":" so everything is escaping in the throw block"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"3e830b05-44ab-42b8-8c7f-501f7c203a7f","type":"message","text":"which should be fine!","user":"U67BJLYCS","ts":"1612375750.093800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DPA0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which should be fine!"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"8cc94fa9-5eec-4236-ad9d-92793d5c23cb","type":"message","text":"yeah we might need a bigger gcframe, but that in itself isn't a problem","user":"U67BJLYCS","ts":"1612375769.094000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3xjE0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah we might need a bigger gcframe, but that in itself isn't a problem"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"fea46401-9ad9-4a9c-899b-5c8d0be9c5d1","type":"message","text":"so what I suspect is happening is that the capture in the escape branch of `xs` causes an optimization not to fire","user":"U67BJLYCS","ts":"1612375835.094300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FHoL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so what I suspect is happening is that the capture in the escape branch of "},{"type":"text","text":"xs","style":{"code":true}},{"type":"text","text":" causes an optimization not to fire"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"bot_id":"BUQUB8RBN","type":"message","text":"blog post","user":"U6740K1SP","ts":"1612375858.094500","team":"T68168MUP","bot_profile":{"id":"BUQUB8RBN","deleted":false,"name":"giphy","updated":1583162249,"app_id":"A0F827J2C","icons":{"image_36":"https://a.slack-edge.com/dc483/img/plugins/giphy/service_72.png","image_48":"https://a.slack-edge.com/dc483/img/plugins/giphy/service_48.png","image_72":"https://a.slack-edge.com/dc483/img/plugins/giphy/service_72.png"},"team_id":"T68168MUP"},"blocks":[{"type":"image","block_id":"WOz","image_url":"https://media0.giphy.com/media/inlGp1wGqBog2cVw5y/giphy.gif?cid=6104955e31dce05e454083ebea62b4c4e5671e091f4cf5bc&rid=giphy.gif","alt_text":"blog post","title":{"type":"plain_text","text":"blog post","emoji":true},"fallback":"480x480px image","image_width":480,"image_height":480,"image_bytes":22229,"is_animated":true},{"type":"context","block_id":"sGor","elements":[{"type":"image","image_url":"https://a.slack-edge.com/dc483/img/plugins/giphy/service_32.png","alt_text":"giphy logo"},{"type":"mrkdwn","text":"Posted using /giphy | GIF by <https://giphy.com/channel/Winniemint92/|Winnie Mint Creations>","verbatim":false}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM","reactions":[{"name":"100","users":["U6QGE7S86"],"count":1}]},{"client_msg_id":"8b921961-6499-49bb-8301-2d1aa7d675cd","type":"message","text":"and thus we see an allocation in the non-throw path","user":"U67BJLYCS","ts":"1612375882.095100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tSdFT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and thus we see an allocation in the non-throw path"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"d2728b79-1354-4a51-82a3-e0923fa4becb","type":"message","text":"haha <@U6740K1SP> I was thinking about that, but I am  decidedly reverse interpreting the gc code, but I definitily wanted to write up my learnings about how gcframe works","user":"U67BJLYCS","ts":"1612375953.096700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cJXX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"haha "},{"type":"user","user_id":"U6740K1SP"},{"type":"text","text":" I was thinking about that, but I am  decidedly reverse interpreting the gc code, but I definitily wanted to write up my learnings about how gcframe works"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM","reactions":[{"name":"+1","users":["U6740K1SP","U0179G7FG4F"],"count":2}]},{"client_msg_id":"6a994831-79aa-4641-8f6b-40f7fc63c984","type":"message","text":"maybe I can get to that with the help of <@UC7AF7NSU> we have been staring at the runtime code together","user":"U67BJLYCS","ts":"1612376104.097500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C2P6j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"maybe I can get to that with the help of "},{"type":"user","user_id":"UC7AF7NSU"},{"type":"text","text":" we have been staring at the runtime code together"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"5e1b5344-7c27-42b0-94eb-a865f429c221","type":"message","text":"But I still feel like a tourist in GC land","user":"U67BJLYCS","ts":"1612376148.097700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qCdiy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But I still feel like a tourist in GC land"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"46f4ad3b-0f57-487a-85e1-3413d97dfcfb","type":"message","text":"Tourists draw the best maps","user":"U6740K1SP","ts":"1612376305.098300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"f2w","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Tourists draw the best maps"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM","reactions":[{"name":"100","users":["U01HD5VFXJM","U6QGE7S86"],"count":2}]},{"client_msg_id":"7f47f892-9842-406e-a988-d1d8377e5fcc","type":"message","text":"Thanks! In Julia 1.5.3, the fully optimized version replaces length(xs) with a constant in both branches. In 1.6.0-beta1, it replaces the first instance with a constant (specifically `Core.Compiler.Const(8, false))` for my 8-length example and the throw-block instance is left as Any. I'll poke around more with this new knowledge.","user":"U01HD5VFXJM","ts":"1612376365.098500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"B5lC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks! In Julia 1.5.3, the fully optimized version replaces length(xs) with a constant in both branches. In 1.6.0-beta1, it replaces the first instance with a constant (specifically "},{"type":"text","text":"Core.Compiler.Const(8, false))","style":{"code":true}},{"type":"text","text":" for my 8-length example and the throw-block instance is left as Any. I'll poke around more with this new knowledge."}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"8efd4ff2-17e7-40ac-a040-57edae51c40d","type":"message","text":"hm, not sure that analogy holds up","user":"U6740K1SP","ts":"1612376366.098700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"whF5q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hm, not sure that analogy holds up"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"0722520d-8223-4523-80fb-06a52cec79fd","type":"message","text":"foreign spies draw the best maps <https://redatlasbook.com/>","user":"U67BJLYCS","ts":"1612376425.099000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0QmDy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"foreign spies draw the best maps "},{"type":"link","url":"https://redatlasbook.com/"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM","reactions":[{"name":"+1","users":["U01HD5VFXJM"],"count":1},{"name":"flag-ussr","users":["U6740K1SP"],"count":1}]},{"client_msg_id":"735cf41e-5b67-4b0c-a78a-46488015fafe","type":"message","text":"<@U01HD5VFXJM> a good exercise is to break down the `@code_llvm`","user":"U67BJLYCS","ts":"1612376470.099400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bxC","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01HD5VFXJM"},{"type":"text","text":" a good exercise is to break down the "},{"type":"text","text":"@code_llvm","style":{"code":true}}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"7c0e95ee-e153-49b1-99cc-02af917da0c1","type":"message","text":"it can be daunting, but it leads to the most solid explanations","user":"U67BJLYCS","ts":"1612376534.099700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pNbG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it can be daunting, but it leads to the most solid explanations"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"caba4169-608c-45a1-90b4-f3f1cc48a9ba","type":"message","text":"as an example:\n\n```  %12 = call noalias nonnull {}* @jl_gc_pool_alloc(i8* %ptls_i8, i32 1400, i32 16) #1\n  %13 = bitcast {}* %12 to i64*\n  %14 = getelementptr inbounds i64, i64* %13, i64 -1\n  store atomic i64 140224749195264, i64* %14 unordered, align 8```","user":"U67BJLYCS","ts":"1612376555.100000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RtT9B","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"as an example:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"  %12 = call noalias nonnull {}* @jl_gc_pool_alloc(i8* %ptls_i8, i32 1400, i32 16) #1\n  %13 = bitcast {}* %12 to i64*\n  %14 = getelementptr inbounds i64, i64* %13, i64 -1\n  store atomic i64 140224749195264, i64* %14 unordered, align 8"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"91e02bd2-f2e5-4a07-ae14-b2bd643b5877","type":"message","text":"is the allocation of an object, and the store of the typetag","user":"U67BJLYCS","ts":"1612376567.100200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"S8bx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is the allocation of an object, and the store of the typetag"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"fe962680-d70a-42f0-bebd-ed0865183b69","type":"message","text":"```julia&gt; Base.unsafe_pointer_to_objref(Base.reinterpret(Ptr{Cvoid}, 140224749195264))\nTuple{Int64}```","user":"U67BJLYCS","ts":"1612376604.100400","team":"T68168MUP","edited":{"user":"U67BJLYCS","ts":"1612376659.000000"},"blocks":[{"type":"rich_text","block_id":"UlHzg","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Base.unsafe_pointer_to_objref(Base.reinterpret(Ptr{Cvoid}, 140224749195264))\nTuple{Int64}"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"9c2d8cd9-1460-4572-b0aa-010c566c2361","type":"message","text":"```  %21 = call nonnull {}* @jl_apply_generic({}* inttoptr (i64 140224761869120 to {}*), {}** nonnull %.sub, i32 5)```","user":"U67BJLYCS","ts":"1612376672.100700","team":"T68168MUP","edited":{"user":"U67BJLYCS","ts":"1612376679.000000"},"blocks":[{"type":"rich_text","block_id":"T2G","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"  %21 = call nonnull {}* @jl_apply_generic({}* inttoptr (i64 140224761869120 to {}*), {}** nonnull %.sub, i32 5)"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"320b5696-0391-41de-a65a-d6634a311a45","type":"message","text":"is a call of a function with 5 arguments","user":"U67BJLYCS","ts":"1612376693.101100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oz8oF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is a call of a function with 5 arguments"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"559f1891-8fb1-46ea-ac6b-fff5159f745c","type":"message","text":"which function?","user":"U67BJLYCS","ts":"1612376729.101300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FdGIv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which function?"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"fed0e305-9e3b-4ed6-b661-8171ba0955ed","type":"message","text":"```julia&gt; Base.unsafe_pointer_to_objref(Base.reinterpret(Ptr{Cvoid}, 140224761869120))\nstring (generic function with 20 methods)```","user":"U67BJLYCS","ts":"1612376732.101500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yeP","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Base.unsafe_pointer_to_objref(Base.reinterpret(Ptr{Cvoid}, 140224761869120))\nstring (generic function with 20 methods)"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"2a4e509e-558b-4b8a-a48f-1fc844a0133e","type":"message","text":"(Btw: for the lurkers these embedded integers are part of the challenge for static compilation)","user":"U67BJLYCS","ts":"1612376777.101700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IS+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(Btw: for the lurkers these embedded integers are part of the challenge for static compilation)"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM","reactions":[{"name":"octopus","users":["U6QGE7S86"],"count":1}]},{"client_msg_id":"a8d7a820-1b84-4793-944e-538c8806c3d8","type":"message","text":"I should add that to Cthulhu....","user":"U67BJLYCS","ts":"1612376844.101900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hm=b","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I should add that to Cthulhu...."}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"06384735-7281-40eb-9002-4870b738b672","type":"message","text":"if someone has a nice pamphlet entitled \"the idiots guide to the julia garbage collector\" I'd love to read it","user":"U01GRS159T8","ts":"1612383219.104000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+Ezk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if someone has a nice pamphlet entitled \"the idiots guide to the julia garbage collector\" I'd love to read it"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"41958261-a9dc-449d-b88f-7cd9ca9c916f","type":"message","text":"Is there a reason why the garbage collector / escape analysis might treat a vararg variable differently from a tuple passed to a function without splatting?\n\nI need to investigate a bit more to be sure of what I'm seeing, just curious if you were aware of something off the top of your head.","user":"U01HD5VFXJM","ts":"1612390965.107700","team":"T68168MUP","edited":{"user":"U01HD5VFXJM","ts":"1612390976.000000"},"blocks":[{"type":"rich_text","block_id":"l03wj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a reason why the garbage collector / escape analysis might treat a vararg variable differently from a tuple passed to a function without splatting?\n\nI need to investigate a bit more to be sure of what I'm seeing, just curious if you were aware of something off the top of your head."}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"bb43c63c-1357-4d8f-8cd5-4be9ed074ecc","type":"message","text":"it might need to reconstruct the tuple. Vararg get's expanded","user":"U67BJLYCS","ts":"1612397007.109100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zhU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it might need to reconstruct the tuple. Vararg get's expanded"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"c10988b1-38cf-4e4e-9fec-6b6b5b0216b9","type":"message","text":"```julia&gt; f(x...) = x```","user":"U67BJLYCS","ts":"1612397016.109300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6dyA","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> f(x...) = x"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"fdbd1367-1bbb-45e7-acd7-8adfed46705f","type":"message","text":"```julia&gt; @code_llvm f(1,2,3)\n\n;  @ REPL[1]:1 within `f'\ndefine void @julia_f_220([3 x i64]* noalias nocapture sret, i64, i64, i64) {\ntop:\n  %x.sroa.0.0..sroa_idx = getelementptr inbounds [3 x i64], [3 x i64]* %0, i64 0, i64 0\n  store i64 %1, i64* %x.sroa.0.0..sroa_idx, align 8\n  %x.sroa.2.0..sroa_idx3 = getelementptr inbounds [3 x i64], [3 x i64]* %0, i64 0, i64 1\n  store i64 %2, i64* %x.sroa.2.0..sroa_idx3, align 8\n  %x.sroa.3.0..sroa_idx4 = getelementptr inbounds [3 x i64], [3 x i64]* %0, i64 0, i64 2\n  store i64 %3, i64* %x.sroa.3.0..sroa_idx4, align 8\n  ret void\n}```","user":"U67BJLYCS","ts":"1612397025.109500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Y+6i","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @code_llvm f(1,2,3)\n\n;  @ REPL[1]:1 within `f'\ndefine void @julia_f_220([3 x i64]* noalias nocapture sret, i64, i64, i64) {\ntop:\n  %x.sroa.0.0..sroa_idx = getelementptr inbounds [3 x i64], [3 x i64]* %0, i64 0, i64 0\n  store i64 %1, i64* %x.sroa.0.0..sroa_idx, align 8\n  %x.sroa.2.0..sroa_idx3 = getelementptr inbounds [3 x i64], [3 x i64]* %0, i64 0, i64 1\n  store i64 %2, i64* %x.sroa.2.0..sroa_idx3, align 8\n  %x.sroa.3.0..sroa_idx4 = getelementptr inbounds [3 x i64], [3 x i64]* %0, i64 0, i64 2\n  store i64 %3, i64* %x.sroa.3.0..sroa_idx4, align 8\n  ret void\n}"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"477fb053-a0d2-43ed-bc46-efe078bd95e6","type":"message","text":"see how there are three `i64` args?","user":"U67BJLYCS","ts":"1612397036.109700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FXYp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"see how there are three "},{"type":"text","text":"i64","style":{"code":true}},{"type":"text","text":" args?"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"4e3d9761-f50a-4ea8-a9b5-ed016f0c8f7b","type":"message","text":"Or more precisly:","user":"U67BJLYCS","ts":"1612397107.109900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IX3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Or more precisly:"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"ce63092e-0e96-45ad-8cd8-3932126a292c","type":"message","text":"```julia&gt; @noinline escape(x) = Base.inferencebarrier(nothing)::Nothing\nescape (generic function with 1 method)\n\njulia&gt; f(x...) = escape(x)\nf (generic function with 1 method)\n\njulia&gt; @code_llvm f(1,2,3)\n\n;  @ REPL[5]:1 within `f'\ndefine void @julia_f_257(i64, i64, i64) {\ntop:\n  %x = alloca [3 x i64], align 8\n  %.sroa.0.0..sroa_idx = getelementptr inbounds [3 x i64], [3 x i64]* %x, i64 0, i64 0\n  store i64 %0, i64* %.sroa.0.0..sroa_idx, align 8\n  %.sroa.2.0..sroa_idx1 = getelementptr inbounds [3 x i64], [3 x i64]* %x, i64 0, i64 1\n  store i64 %1, i64* %.sroa.2.0..sroa_idx1, align 8\n  %.sroa.3.0..sroa_idx2 = getelementptr inbounds [3 x i64], [3 x i64]* %x, i64 0, i64 2\n  store i64 %2, i64* %.sroa.3.0..sroa_idx2, align 8\n  call void @j_escape_258([3 x i64]* nocapture readonly %x)\n  ret void\n}```","user":"U67BJLYCS","ts":"1612397108.110100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wYU9","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @noinline escape(x) = Base.inferencebarrier(nothing)::Nothing\nescape (generic function with 1 method)\n\njulia> f(x...) = escape(x)\nf (generic function with 1 method)\n\njulia> @code_llvm f(1,2,3)\n\n;  @ REPL[5]:1 within `f'\ndefine void @julia_f_257(i64, i64, i64) {\ntop:\n  %x = alloca [3 x i64], align 8\n  %.sroa.0.0..sroa_idx = getelementptr inbounds [3 x i64], [3 x i64]* %x, i64 0, i64 0\n  store i64 %0, i64* %.sroa.0.0..sroa_idx, align 8\n  %.sroa.2.0..sroa_idx1 = getelementptr inbounds [3 x i64], [3 x i64]* %x, i64 0, i64 1\n  store i64 %1, i64* %.sroa.2.0..sroa_idx1, align 8\n  %.sroa.3.0..sroa_idx2 = getelementptr inbounds [3 x i64], [3 x i64]* %x, i64 0, i64 2\n  store i64 %2, i64* %.sroa.3.0..sroa_idx2, align 8\n  call void @j_escape_258([3 x i64]* nocapture readonly %x)\n  ret void\n}"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"e8687e90-3695-4b36-b4ef-700b51565281","type":"message","text":"and if we can't infer the call to `escape`","user":"U67BJLYCS","ts":"1612397132.110300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ty/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and if we can't infer the call to "},{"type":"text","text":"escape","style":{"code":true}}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"62049e54-885b-4ebc-a30a-99c6b132475d","type":"message","text":"`f(x...) = Base.invokelatest(escape, x)`","user":"U67BJLYCS","ts":"1612397376.110500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dxS69","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"f(x...) = Base.invokelatest(escape, x)","style":{"code":true}}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"bdec83e0-b329-4806-bc9c-a60ca70e112a","type":"message","text":"then we have to allocate the tuple on the heap","user":"U67BJLYCS","ts":"1612397394.110700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IW9c","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"then we have to allocate the tuple on the heap"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"2c5d291c-6544-497b-bcc8-1fadfaa6b196","type":"message","text":"and reconstruct it","user":"U67BJLYCS","ts":"1612397397.110900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"T45iD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and reconstruct it"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"42a31acc-42dd-4b9b-a399-700d8f46eff5","type":"message","text":"Hmm okay. I'm looking at my two variants (splatted and unsplatted) and they have the same gcframe allocations (w/ slightly different identifiers).\n```  %9 = alloca [4 x {}*], align 8\n  %gcframe84 = alloca [4 x {}*], align 16\n  %gcframe84.sub = getelementptr inbounds [4 x {}*], [4 x {}*]* %gcframe84, i64 0, i64 0\n  %.sub = getelementptr inbounds [4 x {}*], [4 x {}*]* %9, i64 0, i64 0\n  %10 = bitcast [4 x {}*]* %gcframe84 to i8*\n  call void @llvm.memset.p0i8.i32(i8* nonnull align 16 dereferenceable(32) %10, i8 0, i32 32, i1 false)\n  %thread_ptr = call i8* asm \"movq %fs:0, $0\", \"=r\"() #8\n  %ptls_i8 = getelementptr i8, i8* %thread_ptr, i64 -32768```\nSo that `4 x` vs `3 x` difference we noted earlier may not be relevant?\n\nI do see the tuple constructed and stored in the splatted version, but if I'm understanding the LLVM reference, `alloca` is always a stack allocation. Does it sometimes also go to the heap? Should I see a heap allocation instruction in the LLVM somewhere? (<https://llvm.org/docs/LangRef.html#alloca-instruction>)\n\nEverything else between the two, including the throw branch, appears identical.\n\nSince track_allocations indicated that the allocations were occurring at the line invoking the function, I defined two functions to call the problem functions, and there I do see differences:\n\n```; splatted and referenced within throw block\ndefine nonnull {}* @julia_hhh1_1434() {\ntop:\n  %0 = alloca [9 x {}*], align 8\n  %.sub = getelementptr inbounds [9 x {}*], [9 x {}*]* %0, i64 0, i64 0\n  store {}* inttoptr (i64 140221255393520 to {}*), {}** %.sub, align 8\n  %1 = getelementptr inbounds [9 x {}*], [9 x {}*]* %0, i64 0, i64 1\n  store {}* inttoptr (i64 140222631608416 to {}*), {}** %1, align 8\n  %2 = getelementptr inbounds [9 x {}*], [9 x {}*]* %0, i64 0, i64 2\n  store {}* inttoptr (i64 140222631608544 to {}*), {}** %2, align 8\n  %3 = getelementptr inbounds [9 x {}*], [9 x {}*]* %0, i64 0, i64 3\n  store {}* inttoptr (i64 140222631608608 to {}*), {}** %3, align 8\n  %4 = getelementptr inbounds [9 x {}*], [9 x {}*]* %0, i64 0, i64 4\n  store {}* inttoptr (i64 140222631608672 to {}*), {}** %4, align 8\n  %5 = getelementptr inbounds [9 x {}*], [9 x {}*]* %0, i64 0, i64 5\n  store {}* inttoptr (i64 140222631608736 to {}*), {}** %5, align 8\n  %6 = getelementptr inbounds [9 x {}*], [9 x {}*]* %0, i64 0, i64 6\n  store {}* inttoptr (i64 140222631608672 to {}*), {}** %6, align 8\n  %7 = getelementptr inbounds [9 x {}*], [9 x {}*]* %0, i64 0, i64 7\n  store {}* inttoptr (i64 140222631608544 to {}*), {}** %7, align 8\n  %8 = getelementptr inbounds [9 x {}*], [9 x {}*]* %0, i64 0, i64 8\n  store {}* inttoptr (i64 140222631608544 to {}*), {}** %8, align 8\n  %9 = call nonnull {}* @j1_hvncat1_1436({}* inttoptr (i64 140222636343384 to {}*), {}** nonnull %.sub, i32 9)\n  ret {}* %9\n}```\n```; directly passed as tuple\ndefine nonnull {}* @julia_hhh3_1437() {\ntop:\n  %0 = call nonnull {}* @j_hvncat3_1439([3 x i64]* nocapture readonly @_j_const1, [8 x i64]* nocapture readonly @_j_const2)\n  ret {}* %0\n}```\nAnd for completeness, the splatted version that doesn't reference the splatted variable inside the throw block has the same calling code as for the other splatted version.","user":"U01HD5VFXJM","ts":"1612405043.114100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2/Hmh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmm okay. I'm looking at my two variants (splatted and unsplatted) and they have the same gcframe allocations (w/ slightly different identifiers).\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"  %9 = alloca [4 x {}*], align 8\n  %gcframe84 = alloca [4 x {}*], align 16\n  %gcframe84.sub = getelementptr inbounds [4 x {}*], [4 x {}*]* %gcframe84, i64 0, i64 0\n  %.sub = getelementptr inbounds [4 x {}*], [4 x {}*]* %9, i64 0, i64 0\n  %10 = bitcast [4 x {}*]* %gcframe84 to i8*\n  call void @llvm.memset.p0i8.i32(i8* nonnull align 16 dereferenceable(32) %10, i8 0, i32 32, i1 false)\n  %thread_ptr = call i8* asm \"movq %fs:0, $0\", \"=r\"() #8\n  %ptls_i8 = getelementptr i8, i8* %thread_ptr, i64 -32768"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"So that "},{"type":"text","text":"4 x","style":{"code":true}},{"type":"text","text":" vs "},{"type":"text","text":"3 x","style":{"code":true}},{"type":"text","text":" difference we noted earlier may not be relevant?\n\nI do see the tuple constructed and stored in the splatted version, but if I'm understanding the LLVM reference, "},{"type":"text","text":"alloca","style":{"code":true}},{"type":"text","text":" is always a stack allocation. Does it sometimes also go to the heap? Should I see a heap allocation instruction in the LLVM somewhere? ("},{"type":"link","url":"https://llvm.org/docs/LangRef.html#alloca-instruction"},{"type":"text","text":")\n\nEverything else between the two, including the throw branch, appears identical.\n\nSince track_allocations indicated that the allocations were occurring at the line invoking the function, I defined two functions to call the problem functions, and there I do see differences:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"; splatted and referenced within throw block\ndefine nonnull {}* @julia_hhh1_1434() {\ntop:\n  %0 = alloca [9 x {}*], align 8\n  %.sub = getelementptr inbounds [9 x {}*], [9 x {}*]* %0, i64 0, i64 0\n  store {}* inttoptr (i64 140221255393520 to {}*), {}** %.sub, align 8\n  %1 = getelementptr inbounds [9 x {}*], [9 x {}*]* %0, i64 0, i64 1\n  store {}* inttoptr (i64 140222631608416 to {}*), {}** %1, align 8\n  %2 = getelementptr inbounds [9 x {}*], [9 x {}*]* %0, i64 0, i64 2\n  store {}* inttoptr (i64 140222631608544 to {}*), {}** %2, align 8\n  %3 = getelementptr inbounds [9 x {}*], [9 x {}*]* %0, i64 0, i64 3\n  store {}* inttoptr (i64 140222631608608 to {}*), {}** %3, align 8\n  %4 = getelementptr inbounds [9 x {}*], [9 x {}*]* %0, i64 0, i64 4\n  store {}* inttoptr (i64 140222631608672 to {}*), {}** %4, align 8\n  %5 = getelementptr inbounds [9 x {}*], [9 x {}*]* %0, i64 0, i64 5\n  store {}* inttoptr (i64 140222631608736 to {}*), {}** %5, align 8\n  %6 = getelementptr inbounds [9 x {}*], [9 x {}*]* %0, i64 0, i64 6\n  store {}* inttoptr (i64 140222631608672 to {}*), {}** %6, align 8\n  %7 = getelementptr inbounds [9 x {}*], [9 x {}*]* %0, i64 0, i64 7\n  store {}* inttoptr (i64 140222631608544 to {}*), {}** %7, align 8\n  %8 = getelementptr inbounds [9 x {}*], [9 x {}*]* %0, i64 0, i64 8\n  store {}* inttoptr (i64 140222631608544 to {}*), {}** %8, align 8\n  %9 = call nonnull {}* @j1_hvncat1_1436({}* inttoptr (i64 140222636343384 to {}*), {}** nonnull %.sub, i32 9)\n  ret {}* %9\n}"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"; directly passed as tuple\ndefine nonnull {}* @julia_hhh3_1437() {\ntop:\n  %0 = call nonnull {}* @j_hvncat3_1439([3 x i64]* nocapture readonly @_j_const1, [8 x i64]* nocapture readonly @_j_const2)\n  ret {}* %0\n}"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nAnd for completeness, the splatted version that doesn't reference the splatted variable inside the throw block has the same calling code as for the other splatted version."}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"bb0d558b-7a7f-4720-8445-8fda31b44acb","type":"message","text":"&gt; I do see the tuple constructed and stored in the splatted version, but if I'm understanding the LLVM reference, alloca is always a stack allocation. Does it sometimes also go to the heap? Should I see a heap allocation instruction in the LLVM somewhere? (<https://llvm.org/docs/LangRef.html#alloca-instruction>)\nno `alloca` is always a stack allocation","user":"U67BJLYCS","ts":"1612407307.117300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nFQ","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"I do see the tuple constructed and stored in the splatted version, but if I'm understanding the LLVM reference, alloca is always a stack allocation. Does it sometimes also go to the heap? Should I see a heap allocation instruction in the LLVM somewhere? ("},{"type":"link","url":"https://llvm.org/docs/LangRef.html#alloca-instruction"},{"type":"text","text":")"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nno "},{"type":"text","text":"alloca","style":{"code":true}},{"type":"text","text":" is always a stack allocation"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"},{"client_msg_id":"be64193b-d874-4fdd-998b-fdde31e4dd12","type":"message","text":"Thanks. Should a heap allocation be apparent in the LLVM, or is the GC stuff happening to the side?","user":"U01HD5VFXJM","ts":"1612457812.141000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8YeyP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks. Should a heap allocation be apparent in the LLVM, or is the GC stuff happening to the side?"}]}]}],"thread_ts":"1612374285.090100","parent_user_id":"U01HD5VFXJM"}]