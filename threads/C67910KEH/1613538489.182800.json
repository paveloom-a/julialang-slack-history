[{"client_msg_id":"5da2c972-68c2-4a1f-a1d9-bddd24cb950a","type":"message","text":"Probably a basic question but I am from a stat (non CS) background trying to wrap my head around KD-Trees and I have the following:\n``` \n struct KdNode\n     point::Tuple\n     left::KdNode\n     right::KdNode\n     level::Int64\n     KdNode() = (x=new();x.left=x;x.right=x)\n end\n\n KdNode((3,5,7),nothing,nothing,2) #error no method matching..\n     ```\nHow do I initialize the first instance here in Julia? I tried stuff from <https://docs.julialang.org/en/v1/manual/constructors/#Incomplete-Initialization> but I don't think I am doing it right.","user":"U01EF0QVAB0","ts":"1613538489.182800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2NmGQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Probably a basic question but I am from a stat (non CS) background trying to wrap my head around KD-Trees and I have the following:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":" \n struct KdNode\n     point::Tuple\n     left::KdNode\n     right::KdNode\n     level::Int64\n     KdNode() = (x=new();x.left=x;x.right=x)\n end\n\n KdNode((3,5,7),nothing,nothing,2) #error no method matching..\n     "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"How do I initialize the first instance here in Julia? I tried stuff from "},{"type":"link","url":"https://docs.julialang.org/en/v1/manual/constructors/#Incomplete-Initialization"},{"type":"text","text":" but I don't think I am doing it right."}]}]}],"thread_ts":"1613538489.182800","reply_count":7,"reply_users_count":3,"latest_reply":"1613541662.185000","reply_users":["U0179G7FG4F","U01EF0QVAB0","U01FKQQ7J0J"],"subscribed":false},{"client_msg_id":"9be5087c-2177-4a5f-a048-a7e3bf5f0c1f","type":"message","text":"The key is `left::Union{KdNode,Nothing}`","user":"U0179G7FG4F","ts":"1613538627.182900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tUHhm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The key is "},{"type":"text","text":"left::Union{KdNode,Nothing}","style":{"code":true}}]}]}],"thread_ts":"1613538489.182800","parent_user_id":"U01EF0QVAB0","reactions":[{"name":"+1","users":["U01EF0QVAB0"],"count":1}]},{"client_msg_id":"90ef0ec8-6534-43e0-b502-453ccd5c273d","type":"message","text":"(and the same with `right`)","user":"U0179G7FG4F","ts":"1613538634.183100","team":"T68168MUP","edited":{"user":"U0179G7FG4F","ts":"1613538647.000000"},"blocks":[{"type":"rich_text","block_id":"trjG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(and the same with "},{"type":"text","text":"right","style":{"code":true}},{"type":"text","text":")"}]}]}],"thread_ts":"1613538489.182800","parent_user_id":"U01EF0QVAB0"},{"client_msg_id":"a16b0ab2-eb9a-4430-a9ed-7cc4214385c3","type":"message","text":"Oh wow thanks! That was much simpler than I expected, no need for that weird last line in the struct anymore too","user":"U01EF0QVAB0","ts":"1613538824.183500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6xXP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh wow thanks! That was much simpler than I expected, no need for that weird last line in the struct anymore too"}]}]}],"thread_ts":"1613538489.182800","parent_user_id":"U01EF0QVAB0","reactions":[{"name":"thumbsup_all","users":["U0179G7FG4F"],"count":1}]},{"client_msg_id":"20763bba-6375-4dd6-a162-90873bebf6ff","type":"message","text":"You could also define inner constructor `KDNode(point::Tuple, level::Int64) = (x=new(); x.point=point; x.left=x; x.right=x; x.level=level)`.  Then I think `KdNode((3,5,7), 2)` would work.  This would avoid having to check for `nothing`, which may or may not make it easier to work with KdNode instances depending on how you use them.","user":"U01FKQQ7J0J","ts":"1613539522.184100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fN2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You could also define inner constructor "},{"type":"text","text":"KDNode(point::Tuple, level::Int64) = (x=new(); x.point=point; x.left=x; x.right=x; x.level=level)","style":{"code":true}},{"type":"text","text":".  Then I think "},{"type":"text","text":"KdNode((3,5,7), 2)","style":{"code":true}},{"type":"text","text":" would work.  This would avoid having to check for "},{"type":"text","text":"nothing","style":{"code":true}},{"type":"text","text":", which may or may not make it easier to work with KdNode instances depending on how you use them."}]}]}],"thread_ts":"1613538489.182800","parent_user_id":"U01EF0QVAB0"},{"client_msg_id":"6afb5229-ed9a-479a-946f-1856f50753a8","type":"message","text":"Thanks, that doesn't give an error but when I do `a=KdNode((3,57),2)` I just get a=2. I am going to be using the KdTree for learning the kNN efficient implementation, so I think I need Nothing since that provides a way to check once you get to the end of the tree?","user":"U01EF0QVAB0","ts":"1613540919.184400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x5K","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks, that doesn't give an error but when I do "},{"type":"text","text":"a=KdNode((3,57),2)","style":{"code":true}},{"type":"text","text":" I just get a=2. I am going to be using the KdTree for learning the kNN efficient implementation, so I think I need Nothing since that provides a way to check once you get to the end of the tree?"}]}]}],"thread_ts":"1613538489.182800","parent_user_id":"U01EF0QVAB0"},{"client_msg_id":"705564f7-5311-4aee-81c2-df26fbcc7fad","type":"message","text":"Ah, I guess the inner constructor needs to actually return the constructed instance!\n```KDNode(point::Tuple, level::Int64) = (x=new(); x.point=point; x.left=x; x.right=x; x.level=level; x)```","user":"U01FKQQ7J0J","ts":"1613541056.184700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zYFhi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, I guess the inner constructor needs to actually return the constructed instance!\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"KDNode(point::Tuple, level::Int64) = (x=new(); x.point=point; x.left=x; x.right=x; x.level=level; x)"}]}]}],"thread_ts":"1613538489.182800","parent_user_id":"U01EF0QVAB0"},{"client_msg_id":"2c262f5f-48a3-416d-9608-e8030cbc1fe4","type":"message","text":"To check the \" left edge\" case, you could check either `kd.left == kd` or, for the `nothing` case, `kd.left == nothing` or `isnothing(kd.left)`.  I'm not sure about the pros and cons of the two `nothing` checks. Avoiding `Union{Nothing, KdNode}` seems to keep thing simpler (assuming self-reference can only occur at \"edges\"), but maybe that's ultimately short sighted.  You'll probably know after you've picked one way and then written half the code :stuck_out_tongue_winking_eye:.","user":"U01FKQQ7J0J","ts":"1613541662.185000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"u2/K","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"To check the \" left edge\" case, you could check either "},{"type":"text","text":"kd.left == kd","style":{"code":true}},{"type":"text","text":" or, for the "},{"type":"text","text":"nothing","style":{"code":true}},{"type":"text","text":" case, "},{"type":"text","text":"kd.left == nothing","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"isnothing(kd.left)","style":{"code":true}},{"type":"text","text":".  I'm not sure about the pros and cons of the two "},{"type":"text","text":"nothing","style":{"code":true}},{"type":"text","text":" checks. Avoiding "},{"type":"text","text":"Union{Nothing, KdNode}","style":{"code":true}},{"type":"text","text":" seems to keep thing simpler (assuming self-reference can only occur at \"edges\"), but maybe that's ultimately short sighted.  You'll probably know after you've picked one way and then written half the code "},{"type":"emoji","name":"stuck_out_tongue_winking_eye"},{"type":"text","text":"."}]}]}],"thread_ts":"1613538489.182800","parent_user_id":"U01EF0QVAB0"}]