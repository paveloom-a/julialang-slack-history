[{"client_msg_id":"F5A5E313-C89A-42CB-A218-1870D83078F1","type":"message","text":"Interesting, I found this by following comments: <https://aosabook.org/en/llvm.html|https://aosabook.org/en/llvm.html>\n","user":"U01CQTKB86N","ts":"1610356758.202700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JNKW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Interesting, I found this by following comments: "},{"type":"link","url":"https://aosabook.org/en/llvm.html","text":"https://aosabook.org/en/llvm.html"},{"type":"text","text":"\n"}]}]}],"thread_ts":"1610356758.202700","reply_count":10,"reply_users_count":2,"latest_reply":"1610393821.225200","reply_users":["U01CQTKB86N","UKA81L34J"],"subscribed":false},{"client_msg_id":"52D52FEC-4087-40BD-98C7-B0A40EF8587D","type":"message","text":"I’m sure all that is just basic knowledge for Julia devs, but I learned more about LLVM IR: ”Beyond being implemented as a language, LLVM IR is actually defined in three isomorphic forms: the textual format above, an in-memory data structure inspected and modified by optimizations themselves, and an efficient and dense on-disk binary \"bitcode\" format.” *and* ”In particular, LLVM IR is both well specified and the only interface to the optimizer. This property means that all you need to know to write a front end for LLVM is what LLVM IR is, how it works, and the invariants it expects. Since LLVM IR has a first-class textual form, it is both possible and reasonable to build a front end that outputs LLVM IR as text, then uses Unix pipes to send it through the optimizer sequence and code generator of your choice.”\n","user":"U01CQTKB86N","ts":"1610360835.205300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3z4eN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’m sure all that is just basic knowledge for Julia devs, but I learned more about LLVM IR: ”Beyond being implemented as a language, LLVM IR is actually defined in three isomorphic forms: the textual format above, an in-memory data structure inspected and modified by optimizations themselves, and an efficient and dense on-disk binary \"bitcode\" format.” "},{"type":"text","text":"and","style":{"bold":true}},{"type":"text","text":" ”In particular, LLVM IR is both well specified and the only interface to the optimizer. This property means that all you need to know to write a front end for LLVM is what LLVM IR is, how it works, and the invariants it expects. Since LLVM IR has a first-class textual form, it is both possible and reasonable to build a front end that outputs LLVM IR as text, then uses Unix pipes to send it through the optimizer sequence and code generator of your choice.”\n"}]}]}],"thread_ts":"1610356758.202700","parent_user_id":"U01CQTKB86N"},{"client_msg_id":"D1D2863E-7613-4102-BA69-232AD7217016","type":"message","text":"I don’t think it’s reasonable to do that anymore. It’s much more reasonable to construct IR through the C interface in memory.\n\nI suspect that (if you asked the LLVM discord) they would not recommend textual emission before optimization with the exception of debugging? Seems unnecessary.","user":"UKA81L34J","ts":"1610378998.215000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Fy5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don’t think it’s reasonable to do that anymore. It’s much more reasonable to construct IR through the C interface in memory.\n"},{"type":"text","text":"\n"},{"type":"text","text":"I suspect that (if you asked the LLVM discord) they would not recommend textual emission before optimization with the exception of debugging? Seems unnecessary."}]}]}],"thread_ts":"1610356758.202700","parent_user_id":"U01CQTKB86N"},{"client_msg_id":"56c40434-0e67-48d1-a505-415e304b04de","type":"message","text":"I find it a bit sad if that part of LLVM architecture does not hold anymore. The textual format is the only format that humans can really read. Human’s don’t read bitstream, neither do they really grasp the end result of calling functions, unless printed out as text.","user":"U01CQTKB86N","ts":"1610393331.223800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LgFn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I find it a bit sad if that part of LLVM architecture does not hold anymore. The textual format is the only format that humans can really read. Human’s don’t read bitstream, neither do they really grasp the end result of calling functions, unless printed out as text."}]}]}],"thread_ts":"1610356758.202700","parent_user_id":"U01CQTKB86N"},{"client_msg_id":"680ae67f-cd36-4637-8388-224bd7003ace","type":"message","text":"It’s not that it doesn’t hold","user":"UKA81L34J","ts":"1610393474.224000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tAm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It’s not that it doesn’t hold"}]}]}],"thread_ts":"1610356758.202700","parent_user_id":"U01CQTKB86N"},{"client_msg_id":"f7a30e83-70ae-47a6-b241-09ee800737fc","type":"message","text":"The exact specification that is the only interface (even if done via a C API) is the difference that’s stated in comparison to GCC. They mention GCC had a lot of global variables affecting this.","user":"U01CQTKB86N","ts":"1610393497.224200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uLv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The exact specification that is the only interface (even if done via a C API) is the difference that’s stated in comparison to GCC. They mention GCC had a lot of global variables affecting this."}]}]}],"thread_ts":"1610356758.202700","parent_user_id":"U01CQTKB86N"},{"client_msg_id":"07378541-43c4-4588-9e65-5c81fbb61233","type":"message","text":"It’s just not recommended to construct a compilation pipeline around generating `*.ll` and passing it into `opt` directly unless you’re doing debug.","user":"UKA81L34J","ts":"1610393502.224400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RBGV1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It’s just not recommended to construct a compilation pipeline around generating "},{"type":"text","text":"*.ll","style":{"code":true}},{"type":"text","text":" and passing it into "},{"type":"text","text":"opt","style":{"code":true}},{"type":"text","text":" directly unless you’re doing debug."}]}]}],"thread_ts":"1610356758.202700","parent_user_id":"U01CQTKB86N"},{"client_msg_id":"b586dfc6-0e52-43fe-8aa8-940243711c85","type":"message","text":"Well, I wasn’t suggesting generating text and passing it with pipe would be a very good long term solution.","user":"U01CQTKB86N","ts":"1610393555.224600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aWmPh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well, I wasn’t suggesting generating text and passing it with pipe would be a very good long term solution."}]}]}],"thread_ts":"1610356758.202700","parent_user_id":"U01CQTKB86N"},{"client_msg_id":"64d3caa3-545b-43d0-888d-b70cb750fe97","type":"message","text":"right :slightly_smiling_face:","user":"UKA81L34J","ts":"1610393656.224800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fedaq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"right "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1610356758.202700","parent_user_id":"U01CQTKB86N"},{"client_msg_id":"23f30008-3df3-4590-9b75-2a754a818c2e","type":"message","text":"The specification still contains the invariants you’ve described - I just found it weird when Chris suggested it was reasonable to emit LLVM IR in text form as part of the pipeline :stuck_out_tongue:","user":"UKA81L34J","ts":"1610393715.225000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DGFR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The specification still contains the invariants you’ve described - I just found it weird when Chris suggested it was reasonable to emit LLVM IR in text form as part of the pipeline "},{"type":"emoji","name":"stuck_out_tongue"}]}]}],"thread_ts":"1610356758.202700","parent_user_id":"U01CQTKB86N"},{"client_msg_id":"78bcd213-b24c-4a82-a61b-e03f94972054","type":"message","text":"That series of five book that this is a part of looks awesome. I’ll have to find time to read more of them. <http://aosabook.org/en/index.html>","user":"U01CQTKB86N","ts":"1610393821.225200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cpXk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That series of five book that this is a part of looks awesome. I’ll have to find time to read more of them. "},{"type":"link","url":"http://aosabook.org/en/index.html"}]}]}],"thread_ts":"1610356758.202700","parent_user_id":"U01CQTKB86N"}]