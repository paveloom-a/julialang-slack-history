[{"client_msg_id":"F5A5E313-C89A-42CB-A218-1870D83078F1","type":"message","text":"Interesting, I found this by following comments: <https://aosabook.org/en/llvm.html|https://aosabook.org/en/llvm.html>\n","user":"U01CQTKB86N","ts":"1610356758.202700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JNKW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Interesting, I found this by following comments: "},{"type":"link","url":"https://aosabook.org/en/llvm.html","text":"https://aosabook.org/en/llvm.html"},{"type":"text","text":"\n"}]}]}],"thread_ts":"1610356758.202700","reply_count":2,"reply_users_count":2,"latest_reply":"1610378998.215000","reply_users":["U01CQTKB86N","UKA81L34J"],"subscribed":false},{"client_msg_id":"52D52FEC-4087-40BD-98C7-B0A40EF8587D","type":"message","text":"I’m sure all that is just basic knowledge for Julia devs, but I learned more about LLVM IR: ”Beyond being implemented as a language, LLVM IR is actually defined in three isomorphic forms: the textual format above, an in-memory data structure inspected and modified by optimizations themselves, and an efficient and dense on-disk binary \"bitcode\" format.” *and* ”In particular, LLVM IR is both well specified and the only interface to the optimizer. This property means that all you need to know to write a front end for LLVM is what LLVM IR is, how it works, and the invariants it expects. Since LLVM IR has a first-class textual form, it is both possible and reasonable to build a front end that outputs LLVM IR as text, then uses Unix pipes to send it through the optimizer sequence and code generator of your choice.”\n","user":"U01CQTKB86N","ts":"1610360835.205300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3z4eN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’m sure all that is just basic knowledge for Julia devs, but I learned more about LLVM IR: ”Beyond being implemented as a language, LLVM IR is actually defined in three isomorphic forms: the textual format above, an in-memory data structure inspected and modified by optimizations themselves, and an efficient and dense on-disk binary \"bitcode\" format.” "},{"type":"text","text":"and","style":{"bold":true}},{"type":"text","text":" ”In particular, LLVM IR is both well specified and the only interface to the optimizer. This property means that all you need to know to write a front end for LLVM is what LLVM IR is, how it works, and the invariants it expects. Since LLVM IR has a first-class textual form, it is both possible and reasonable to build a front end that outputs LLVM IR as text, then uses Unix pipes to send it through the optimizer sequence and code generator of your choice.”\n"}]}]}],"thread_ts":"1610356758.202700","parent_user_id":"U01CQTKB86N"},{"client_msg_id":"D1D2863E-7613-4102-BA69-232AD7217016","type":"message","text":"I don’t think it’s reasonable to do that anymore. It’s much more reasonable to construct IR through the C interface in memory.\n\nI suspect that (if you asked the LLVM discord) they would not recommend textual emission before optimization with the exception of debugging? Seems unnecessary.","user":"UKA81L34J","ts":"1610378998.215000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Fy5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don’t think it’s reasonable to do that anymore. It’s much more reasonable to construct IR through the C interface in memory.\n"},{"type":"text","text":"\n"},{"type":"text","text":"I suspect that (if you asked the LLVM discord) they would not recommend textual emission before optimization with the exception of debugging? Seems unnecessary."}]}]}],"thread_ts":"1610356758.202700","parent_user_id":"U01CQTKB86N"}]