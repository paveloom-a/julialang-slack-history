[{"client_msg_id":"852b789c-dbe8-4c75-8249-f4a4f039949f","type":"message","text":"do the julia internals have any concept of a stack pointer?  ie in C you can do\n```void foo() {\n    int x = 3;\n    int x_ptr = &amp;x;\n    *x_ptr = 4;\n}```","user":"U01GRS159T8","ts":"1609275006.105000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"U9P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"do the julia internals have any concept of a stack pointer?  ie in C you can do\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"void foo() {\n    int x = 3;\n    int x_ptr = &x;\n    *x_ptr = 4;\n}"}]}]}],"thread_ts":"1609275006.105000","reply_count":49,"reply_users_count":5,"latest_reply":"1609314365.145500","reply_users":["UH8A351DJ","U01GRS159T8","U7HAYKY9X","UH24GRBLL","U6795JH6H"],"subscribed":false},{"client_msg_id":"fbe08f02-a386-4984-b4f1-1bb8e2823ec4","type":"message","text":"`Ref()` can achieve this behavior if you insist","user":"UH8A351DJ","ts":"1609275064.105800","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1609275090.000000"},"blocks":[{"type":"rich_text","block_id":"Y+FY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ref()","style":{"code":true}},{"type":"text","text":" can achieve this behavior if you insist"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8","reactions":[{"name":"heavy_check_mark","users":["U7HAYKY9X"],"count":1}]},{"client_msg_id":"ca9f4939-283b-4972-baa6-c31f20dedfae","type":"message","text":"no it can't it requires a heap allocation to refer to","user":"U01GRS159T8","ts":"1609275145.106700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p7=Cd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no it can't it requires a heap allocation to refer to"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"0c13adf6-58fc-437d-9889-22de68bd1d67","type":"message","text":"```julia&gt; let; x = 3; rr = Ref(x); rr[] = 4; println(x); end\n3```","user":"U01GRS159T8","ts":"1609275173.106900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"o9x","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> let; x = 3; rr = Ref(x); rr[] = 4; println(x); end\n3"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"b9a7a3f7-e814-4ad8-ba4a-ba3611b9f9c7","type":"message","text":"The compiler can optimize away the heap allocation if the Ref does not escape (until 1.6, it's a release-blocking regression)","user":"U7HAYKY9X","ts":"1609275216.107500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mQur","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The compiler can optimize away the heap allocation if the Ref does not escape (until 1.6, it's a release-blocking regression)"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"bb522497-9aa7-4918-a9f2-7bce1d4bad70","type":"message","text":"So if you want to do shady bitcasting, that's the way to go.","user":"U7HAYKY9X","ts":"1609275271.107700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KVm0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So if you want to do shady bitcasting, that's the way to go."}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"cbb57de8-0ffb-4693-8ef3-1284f45f6a6b","type":"message","text":"sadly if it does this optimization it does it very inconsistently","user":"U01GRS159T8","ts":"1609275304.107900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CK4W","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"sadly if it does this optimization it does it very inconsistently"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"eab13acc-99dd-4c4c-86bd-4b08016bcdb8","type":"message","text":"may I ask why do you need this in a performance critical function?","user":"UH8A351DJ","ts":"1609275323.108100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TBq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"may I ask why do you need this in a performance critical function?"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"5da47f37-ebb3-4a47-9080-d2aa031610e7","type":"message","text":"why can't you just pass by value? (for scalers)","user":"UH8A351DJ","ts":"1609275337.108300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"H2u+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"why can't you just pass by value? (for scalers)"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"1c937b0f-6567-491f-a2f9-9b6ce6b75da2","type":"message","text":"Yeah, it's probably not something to rely on I guess. But I use it often enough","user":"U7HAYKY9X","ts":"1609275343.108500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kxGi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, it's probably not something to rely on I guess. But I use it often enough"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"86ad1ded-ec89-4c3b-b30f-f7c9035149b0","type":"message","text":"Im trying to figure out why writing an Int to a stream allocates","user":"U01GRS159T8","ts":"1609275370.108900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"37BMd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Im trying to figure out why writing an Int to a stream allocates"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"2b2542c1-7591-485f-a922-c28066624d8a","type":"message","text":"ie\n```let; io = IOBuffer(); println(length(io.data)); @time write(io, 1234); println(length(io.data)); @time write(io, 1234); end\n32\n  0.000001 seconds (1 allocation: 16 bytes)\n32\n  0.000000 seconds (1 allocation: 16 bytes)```","user":"U01GRS159T8","ts":"1609275374.109100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FCZw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ie\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"let; io = IOBuffer(); println(length(io.data)); @time write(io, 1234); println(length(io.data)); @time write(io, 1234); end\n32\n  0.000001 seconds (1 allocation: 16 bytes)\n32\n  0.000000 seconds (1 allocation: 16 bytes)"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"2b962faf-b161-4a4b-9072-f2d1ec1d31ff","type":"message","text":"the buffer has room and yet it allocates","user":"U01GRS159T8","ts":"1609275386.109500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xGkL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the buffer has room and yet it allocates"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"f88ceff7-f75b-4748-bf56-56f3923cbec1","type":"message","text":"if you look at the stack trace it does all sorts of crazy stuff turning the int into a Ref and then a Ptr","user":"U01GRS159T8","ts":"1609275407.109900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Lzev/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you look at the stack trace it does all sorts of crazy stuff turning the int into a Ref and then a Ptr"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"b4e1754a-d084-4a58-9fb0-43934f13e55c","type":"message","text":"and goes through a noinline function","user":"U01GRS159T8","ts":"1609275418.110100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RYM4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and goes through a noinline function"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"da664789-2e10-4a7c-9f4f-901bb6a8e556","type":"message","text":"normally this wouldnt be too much of an issue, like with a single threaded program","user":"U01GRS159T8","ts":"1609275472.110300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4I/P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"normally this wouldnt be too much of an issue, like with a single threaded program"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"f094dacf-63ab-45be-90a0-9bfb4ea2624d","type":"message","text":"but when you have 100 threads making these tiny allocations the garbage collector can't keep up","user":"U01GRS159T8","ts":"1609275491.110500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DXkm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but when you have 100 threads making these tiny allocations the garbage collector can't keep up"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"b8d93b0f-9eb1-489c-9f70-b2bb1cadad4e","type":"message","text":"Ah, that's probably why the Ref is not optimized away. The compiler can't see through the @noinline function.","user":"U7HAYKY9X","ts":"1609275547.110700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"chB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, that's probably why the Ref is not optimized away. The compiler can't see through the @noinline function."}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"7bb52c6c-ded2-42f0-b5f0-2371830f1387","type":"message","text":"so the allocation is either with the Ref that gets created or with a garbage collector root creation (which I dont understand)","user":"U01GRS159T8","ts":"1609275572.110900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"n+V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so the allocation is either with the Ref that gets created or with a garbage collector root creation (which I dont understand)"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"820404ef-a921-4f42-9277-926c6bfa60dc","type":"message","text":"Yeah, it's the `Ref` .","user":"U7HAYKY9X","ts":"1609275878.111100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZxW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, it's the "},{"type":"text","text":"Ref","style":{"code":true}},{"type":"text","text":" ."}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"3b7ac68d-82f5-43cb-a7de-274c7d8f762a","type":"message","text":"In theory, a stack pointer is fine if you can guarantee it doesn't escape. I guess julia internals don't/haven't  tried to guarantee it yet, so that's why it has to allocate","user":"UH24GRBLL","ts":"1609276058.111900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WenVi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In theory, a stack pointer is fine if you can guarantee it doesn't escape. I guess julia internals don't/haven't  tried to guarantee it yet, so that's why it has to allocate"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"55f4ea3f-7a5f-4ea2-b20a-16cc64c383fa","type":"message","text":"though it really shouldn't, at least for primitive data types :grimacing:","user":"UH24GRBLL","ts":"1609276072.112100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"D0x7G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"though it really shouldn't, at least for primitive data types "},{"type":"emoji","name":"grimacing"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"50ceab80-abb0-4508-86b3-8c1481e7e96b","type":"message","text":"How does C deal with having a pointer to an object that is optimized away?","user":"U7HAYKY9X","ts":"1609276099.112300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FvDt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How does C deal with having a pointer to an object that is optimized away?"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"b6142084-ab2d-493d-9117-ff423d5b4f03","type":"message","text":"the pointer or the object?","user":"UH24GRBLL","ts":"1609276147.112500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3uC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the pointer or the object?"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"2f5c56be-a570-460c-ae3d-390f862a9a67","type":"message","text":"and what do you mean when you say that either is optimized away?","user":"UH24GRBLL","ts":"1609276162.112700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fH4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and what do you mean when you say that either is optimized away?"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"a8ab92f9-8fc4-4ba4-8dac-4abb4e612a3a","type":"message","text":"Like this:\n```julia&gt; function foo()\n           a = 1\n           b = 1\n           c = 1\n           return a + b + c\n       end\nfoo (generic function with 1 method)\n\njulia&gt; @code_native foo()\n\t.text\n; ┌ @ REPL[34]:1 within `foo'\n\tmovl\t$3, %eax\n\tretq\n\tnopw\t%cs:(%rax,%rax)\n; └```\nNeither a, b or c really exists at runtime, the function is just compiled down to \"return 3\".","user":"U7HAYKY9X","ts":"1609276287.112900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Viw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Like this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function foo()\n           a = 1\n           b = 1\n           c = 1\n           return a + b + c\n       end\nfoo (generic function with 1 method)\n\njulia> @code_native foo()\n\t.text\n; ┌ @ REPL[34]:1 within `foo'\n\tmovl\t$3, %eax\n\tretq\n\tnopw\t%cs:(%rax,%rax)\n; └"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Neither a, b or c really exists at runtime, the function is just compiled down to \"return 3\"."}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"3724b9dc-a190-4caf-bcab-a0656f257dfe","type":"message","text":"well if the pointer escapes, all bets are off since it's undefined where it points to and what's there","user":"UH24GRBLL","ts":"1609276395.113100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+4g9P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well if the pointer escapes, all bets are off since it's undefined where it points to and what's there"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"bdbb7fa5-4dde-4e63-bf6e-344a042bbd32","type":"message","text":"but if it doesn't escape, it'll be optimized away just the same, together with the \"object\"","user":"UH24GRBLL","ts":"1609276419.113300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EqD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but if it doesn't escape, it'll be optimized away just the same, together with the \"object\""}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"8e13435b-146d-4f1d-a4e4-f12b8af880d3","type":"message","text":"in my little IOBuffer example, how does the pointer escape?","user":"U01GRS159T8","ts":"1609277298.115200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Z0QRV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in my little IOBuffer example, how does the pointer escape?"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"612cf786-70ae-4efc-b7e1-25aabd9c55de","type":"message","text":"or rather, how come it can't tell that a reference to the value 1234 doesnt escape the scope of the write() call ?","user":"U01GRS159T8","ts":"1609277386.115400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aXBQT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or rather, how come it can't tell that a reference to the value 1234 doesnt escape the scope of the write() call ?"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"89288160-cfaa-41ce-9bea-87e436c97a09","type":"message","text":"it doesn't, but that doesn't mean that julia semantics allow it to be optimized away","user":"UH24GRBLL","ts":"1609278677.115700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oWrow","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it doesn't, but that doesn't mean that julia semantics allow it to be optimized away"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"9352a358-cb66-4330-a5da-510db03f3895","type":"message","text":"apparently, julia semantics for Ref are only valid to heap data, that's why it's copied - there's no further reasoning because of the `@no_inline`, so the compiler doesn't look into the called function to make sure the reference isn't passed to some global variable","user":"UH24GRBLL","ts":"1609278734.115900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7Y0+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"apparently, julia semantics for Ref are only valid to heap data, that's why it's copied - there's no further reasoning because of the "},{"type":"text","text":"@no_inline","style":{"code":true}},{"type":"text","text":", so the compiler doesn't look into the called function to make sure the reference isn't passed to some global variable"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"73784878-3f7c-4874-8ca6-b8f63fabe2f4","type":"message","text":"this is why I always have to put extra buffers around everything to do with IO in julia","user":"U01GRS159T8","ts":"1609279500.116100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p8tnP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this is why I always have to put extra buffers around everything to do with IO in julia"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"60ef9fc5-ba9e-4bd1-b818-e8dfaac1edcf","type":"message","text":"another example where the lack of stack ptrs is awkward is interfacing with c libraries\ne.g. I wrote this to get to the high precision clock without doing any heap allocations\n```const librt = Sys.isunix() ? Libdl.find_library([\"librt.so\"]) : nothing\n\nmutable struct Clock{IsUnix}\n    sec::Int\n    nsec::Int\nend\n\nfunction Clock()\n    return Clock{Sys.isunix()}(0,0)\nend\n\nconst GlobalClock = Clock()\n\nfunction get_time(c::Clock{true})::Int\n    ccall((:clock_gettime, librt), Int32, (Int32, Ptr{Clock}), Int32(0), pointer_from_objref(c))\n    return c.sec * 1000000000 + c.nsec\nend\n\nfunction get_time(::Clock{false})::Int\n    return round(Int,time() * 1e9)\nend\n\n# not thread safe to use GlobalClock so be careful\nfunction get_time()\n    return get_time(GlobalClock)\nend```","user":"U01GRS159T8","ts":"1609279698.116300","team":"T68168MUP","edited":{"user":"U01GRS159T8","ts":"1609279896.000000"},"blocks":[{"type":"rich_text","block_id":"CUu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"another example where the lack of stack ptrs is awkward is interfacing with c libraries\ne.g. I wrote this to get to the high precision clock without doing any heap allocations\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"const librt = Sys.isunix() ? Libdl.find_library([\"librt.so\"]) : nothing\n\nmutable struct Clock{IsUnix}\n    sec::Int\n    nsec::Int\nend\n\nfunction Clock()\n    return Clock{Sys.isunix()}(0,0)\nend\n\nconst GlobalClock = Clock()\n\nfunction get_time(c::Clock{true})::Int\n    ccall((:clock_gettime, librt), Int32, (Int32, Ptr{Clock}), Int32(0), pointer_from_objref(c))\n    return c.sec * 1000000000 + c.nsec\nend\n\nfunction get_time(::Clock{false})::Int\n    return round(Int,time() * 1e9)\nend\n\n# not thread safe to use GlobalClock so be careful\nfunction get_time()\n    return get_time(GlobalClock)\nend"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"72bf55d7-e20f-4739-ad49-fab64253d77b","type":"message","text":"a pretty standard pattern in C is to allocate a small struct on the stack and then pass a pointer to it to a function, which populates it","user":"U01GRS159T8","ts":"1609279739.116500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/2Gpf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"a pretty standard pattern in C is to allocate a small struct on the stack and then pass a pointer to it to a function, which populates it"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"36ea52cb-4e9b-426d-88e7-d42d0793ed0d","type":"message","text":"can't do that so I have to use this global const","user":"U01GRS159T8","ts":"1609279767.116700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3xo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"can't do that so I have to use this global const"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"c2226ccf-a388-4e05-9f94-21583b1a4bfa","type":"message","text":"and of course now this isn't threadsafe","user":"U01GRS159T8","ts":"1609279819.116900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"P5VgB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and of course now this isn't threadsafe"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"a5746a0c-4cad-412e-97bd-60d8cf41299b","type":"message","text":"huh? I'm not sure I follow","user":"UH24GRBLL","ts":"1609280107.117200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JIoz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"huh? I'm not sure I follow"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"bc1d8ad1-6668-4508-aa69-34918837245e","type":"message","text":"why do you have to use a global const?","user":"UH24GRBLL","ts":"1609280112.117400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HE5jA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"why do you have to use a global const?"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"5b8dcf22-21c8-41a9-8262-5922a50bbb1b","type":"message","text":"because to get a pointer to something in julia it has to be on the heap one way or the other","user":"U01GRS159T8","ts":"1609280147.117600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7L2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"because to get a pointer to something in julia it has to be on the heap one way or the other"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"44384cc3-4481-482a-94d8-6e856b24d2da","type":"message","text":"if I create the Clock inside get_time() it will have to be a heap allocation","user":"U01GRS159T8","ts":"1609280198.117800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SiuE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if I create the Clock inside get_time() it will have to be a heap allocation"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"a0d2f892-19c9-4b42-89e1-a0314d550732","type":"message","text":"the global const is also a heap allocation, just at a different time","user":"UH24GRBLL","ts":"1609280222.118000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WMd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the global const is also a heap allocation, just at a different time"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"001cc3b9-1b0a-4bdc-a21d-ac00a9b2bcac","type":"message","text":"right but just once","user":"U01GRS159T8","ts":"1609280230.118200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2SUL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"right but just once"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"3e5b8ef3-e269-447d-8426-bfae73a520a6","type":"message","text":"instead of every time get_time is called","user":"U01GRS159T8","ts":"1609280238.118400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oXJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"instead of every time get_time is called"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"5bd9a53b-43ef-40f1-91a4-65b85b3fb8d9","type":"message","text":"is using an array and `pointer` or `Ref` not an option here as well?","user":"UH24GRBLL","ts":"1609280292.118600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UX0Mh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is using an array and "},{"type":"text","text":"pointer","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"Ref","style":{"code":true}},{"type":"text","text":" not an option here as well?"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"1d714750-285e-45e3-b79f-39bb5916a915","type":"message","text":"those would be elided if done inline, I think","user":"UH24GRBLL","ts":"1609280302.118800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"n/R","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"those would be elided if done inline, I think"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"12b5fc4b-6a99-471b-8534-c686bfbf0206","type":"message","text":"you'd do\n\n```@static if Sys.isunix()\nfunction get_time()::Int\n    c = CInt[0,0]\n    ccall((:clock_gettime, librt), Int32, (Int32, Ptr{CInt}), Int32(0), pointer(c))\n    return c.sec * 1000000000 + c.nsec\nend\nelse\nfunction get_time()::Int\n    return round(Int,time() * 1e9)\nend\nend```\ndoesn't something like that work?","user":"UH24GRBLL","ts":"1609280444.119000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4NBI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you'd do\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@static if Sys.isunix()\nfunction get_time()::Int\n    c = CInt[0,0]\n    ccall((:clock_gettime, librt), Int32, (Int32, Ptr{CInt}), Int32(0), pointer(c))\n    return c.sec * 1000000000 + c.nsec\nend\nelse\nfunction get_time()::Int\n    return round(Int,time() * 1e9)\nend\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\ndoesn't something like that work?"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"7f3bebb5-fda6-46c2-96fc-cc8cf3052ec1","type":"message","text":"(fixing getindex of course)","user":"UH24GRBLL","ts":"1609280544.119200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GWeg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(fixing getindex of course)"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"3D60006A-62F3-4EDC-9FB4-844B222408F3","type":"message","text":"Please file an issue about whatever performance problem you’re seeing","user":"U6795JH6H","ts":"1609306130.139400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LGW1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Please file an issue about whatever performance problem you’re seeing"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"},{"client_msg_id":"fa51acfa-5de1-4cf5-b398-95ef7fad8efe","type":"message","text":"<https://github.com/JuliaLang/julia/issues/39041> done","user":"UH24GRBLL","ts":"1609314365.145500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"F=R","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/issues/39041"},{"type":"text","text":" done"}]}]}],"thread_ts":"1609275006.105000","parent_user_id":"U01GRS159T8"}]