[{"client_msg_id":"8e5efacb-c5e0-4838-a3e2-31bc1f8206bd","type":"message","text":"Ok, I gave a poor example for my actual usecase. It's more like `MyStruct.from_raw(0.5)`, `MyStruct.from_normalized(1.5)`  - the same number and types of parameters.","user":"UGTUKUHLN","ts":"1610116287.040700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Plfrg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok, I gave a poor example for my actual usecase. It's more like "},{"type":"text","text":"MyStruct.from_raw(0.5)","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"MyStruct.from_normalized(1.5)","style":{"code":true}},{"type":"text","text":"  - the same number and types of parameters."}]}]}],"thread_ts":"1610116287.040700","reply_count":9,"reply_users_count":3,"latest_reply":"1610119325.051600","reply_users":["UD0NS8PDF","UGTUKUHLN","U7HAYKY9X"],"subscribed":false},{"client_msg_id":"e0ca6b03-0c6c-4329-8582-05a284d534f9","type":"message","text":"Then one way would be to make keyword constructors: `MyStruct(raw=0.5)` and `MySruct(normalised=1.5)`","user":"UD0NS8PDF","ts":"1610116800.040900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kJZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Then one way would be to make keyword constructors: "},{"type":"text","text":"MyStruct(raw=0.5)","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"MySruct(normalised=1.5)","style":{"code":true}}]}]}],"thread_ts":"1610116287.040700","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"d1e51030-2d43-40c7-b4d2-dad069344c6c","type":"message","text":"which could look something like\n```julia&gt; MyStruct(; raw=nothing, norm=nothing) = _MyStruct(raw, norm);\n\njulia&gt; _MyStruct(raw, ::Nothing) = \"one\"\njulia&gt; _MyStruct(::Nothing, norm) = \"two\"\njulia&gt; _MyStruct(raw, norm) = error()```","user":"UD0NS8PDF","ts":"1610117076.041300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/uZJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which could look something like\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> MyStruct(; raw=nothing, norm=nothing) = _MyStruct(raw, norm);\n\njulia> _MyStruct(raw, ::Nothing) = \"one\"\njulia> _MyStruct(::Nothing, norm) = \"two\"\njulia> _MyStruct(raw, norm) = error()"}]}]}],"thread_ts":"1610116287.040700","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"29335f09-cff8-466b-9eb5-b579f25cec5c","type":"message","text":"And what do you think about `MyStruct(::Raw, x) = ...`, `MyStruct(::Normalized, x) = ...` , how it compares? With `struct Raw end` , `struct Normalized end` defined.","user":"UGTUKUHLN","ts":"1610117635.041500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"onG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And what do you think about "},{"type":"text","text":"MyStruct(::Raw, x) = ...","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"MyStruct(::Normalized, x) = ...","style":{"code":true}},{"type":"text","text":" , how it compares? With "},{"type":"text","text":"struct Raw end","style":{"code":true}},{"type":"text","text":" , "},{"type":"text","text":"struct Normalized end","style":{"code":true}},{"type":"text","text":" defined."}]}]}],"thread_ts":"1610116287.040700","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"6fcf9ec0-7c0c-4574-8c7d-381b5803cc30","type":"message","text":"I think that's a good idea.","user":"U7HAYKY9X","ts":"1610117800.041700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O8ud","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think that's a good idea."}]}]}],"thread_ts":"1610116287.040700","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"7c49fc47-36ef-4db7-a04f-e4b47a156aee","type":"message","text":"Yes this is another pattern, like `round(2.5, RoundUp)`. I guess it means users need to have more objects in scope, `MyPkg.MyStruct(MyPkg.Raw(), x)`.","user":"UD0NS8PDF","ts":"1610118004.041900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aJSj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes this is another pattern, like "},{"type":"text","text":"round(2.5, RoundUp)","style":{"code":true}},{"type":"text","text":". I guess it means users need to have more objects in scope, "},{"type":"text","text":"MyPkg.MyStruct(MyPkg.Raw(), x)","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1610116287.040700","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"1e813076-69a8-4877-8c23-28c9a2737e08","type":"message","text":"Yet another way I can think of:\n```module MyStructs\nfrom_raw(x) = MyStruct(...)\nfrom_normalized(x) = MyStruct(...)\nend\n\nstruct MyStruct\n\t...\nend```","user":"UGTUKUHLN","ts":"1610118686.045800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"U+v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yet another way I can think of:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"module MyStructs\nfrom_raw(x) = MyStruct(...)\nfrom_normalized(x) = MyStruct(...)\nend\n\nstruct MyStruct\n\t...\nend"}]}]}],"thread_ts":"1610116287.040700","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"ef9b8969-0b6b-4e93-a78b-541f51f3610a","type":"message","text":"So there is no dominant approach for such problem, everyone uses whatever they personally like more?","user":"UGTUKUHLN","ts":"1610118689.046000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TxN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So there is no dominant approach for such problem, everyone uses whatever they personally like more?"}]}]}],"thread_ts":"1610116287.040700","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"1cd0c8f6-f6e0-48d6-9b65-1f8bed9397f5","type":"message","text":"There are more, too. You can just have `MyStruct(data; raw=false)` etc. You can wrap normalised things in some struct and use `MyStruct(raw)` vs `MyStruct(Normed(data))` like LinearAlgebra does all over the place.","user":"UD0NS8PDF","ts":"1610119010.049300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yJY/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There are more, too. You can just have "},{"type":"text","text":"MyStruct(data; raw=false)","style":{"code":true}},{"type":"text","text":" etc. You can wrap normalised things in some struct and use "},{"type":"text","text":"MyStruct(raw)","style":{"code":true}},{"type":"text","text":" vs "},{"type":"text","text":"MyStruct(Normed(data))","style":{"code":true}},{"type":"text","text":" like LinearAlgebra does all over the place."}]}]}],"thread_ts":"1610116287.040700","parent_user_id":"UGTUKUHLN"},{"client_msg_id":"25b25da5-a744-4c7d-b7b7-fa49504a24bb","type":"message","text":"Thanks, I see...","user":"UGTUKUHLN","ts":"1610119325.051600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ShUm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks, I see..."}]}]}],"thread_ts":"1610116287.040700","parent_user_id":"UGTUKUHLN"}]