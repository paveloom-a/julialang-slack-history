[{"client_msg_id":"6d9e3e83-a00f-4dad-9220-1f45ef3e0792","type":"message","text":"Is there a way to define a parametric struct type, where some of the member types are \"computed\" from the parameters of the type? Here's a stupid example to illustrate what I mean (note: this is an artificial example, not what I actually want):\n```struct VectorWithRepresentative{S &lt;: AbstractVector}\n  vec::S\n  rep::eltype(S)\nend```\nAs far as I could tell, the only way to do something like this seems to be with a macro? Am I wrong? If I am right: is there perhaps something like this somewhere already?","user":"U012FH66MFW","ts":"1612366821.076200","team":"T68168MUP","edited":{"user":"U012FH66MFW","ts":"1612367456.000000"},"blocks":[{"type":"rich_text","block_id":"0eRSl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a way to define a parametric struct type, where some of the member types are \"computed\" from the parameters of the type? Here's a stupid example to illustrate what I mean (note: this is an artificial example, not what I actually want):\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct VectorWithRepresentative{S <: AbstractVector}\n  vec::S\n  rep::eltype(S)\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"As far as I could tell, the only way to do something like this seems to be with a macro? Am I wrong? If I am right: is there perhaps something like this somewhere already?"}]}]}],"thread_ts":"1612366821.076200","reply_count":34,"reply_users_count":4,"latest_reply":"1612368615.084300","reply_users":["UDB26738Q","U012FH66MFW","U85R3JJ8L","U6740K1SP"],"subscribed":false},{"client_msg_id":"be372c08-3a4a-4f93-b224-1b794c1000e2","type":"message","text":"<https://github.com/vtjnash/ComputedFieldTypes.jl>","user":"UDB26738Q","ts":"1612366862.076300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wEX","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/vtjnash/ComputedFieldTypes.jl"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"c06ea4ea-83b5-45ce-9fe9-91e6979b6055","type":"message","text":"actually, to my surprise, my pseudo code snippet actually works... ?!? :joy:","user":"U012FH66MFW","ts":"1612366900.076700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5kZH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"actually, to my surprise, my pseudo code snippet actually works... ?!? "},{"type":"emoji","name":"joy"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW","reactions":[{"name":"tada","users":["U011LUQ182G","UDB26738Q"],"count":2},{"name":"radioactive_sign","users":["U6740K1SP"],"count":1}]},{"client_msg_id":"3f6b6829-6ed9-404f-b042-b80e57a221bf","type":"message","text":"I could have sworn I tried that before?! I guess time to figure out what makes my pseudo example different from what I tried before :slightly_smiling_face:","user":"U012FH66MFW","ts":"1612366929.077000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UUR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I could have sworn I tried that before?! I guess time to figure out what makes my pseudo example different from what I tried before "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"af7216ce-19a2-4a4b-bc5b-7e73aabaaf5b","type":"message","text":"thanks anyway, <@UDB26738Q> I'll have a look at that, too, I am sure I'll find uses for it :slightly_smiling_face:","user":"U012FH66MFW","ts":"1612366945.077200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qoe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thanks anyway, "},{"type":"user","user_id":"UDB26738Q"},{"type":"text","text":" I'll have a look at that, too, I am sure I'll find uses for it "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"3609f304-3391-4d42-9e06-ad96d2588329","type":"message","text":"The answer is no :disappointed:","user":"U85R3JJ8L","ts":"1612367435.077400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jD+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The answer is no "},{"type":"emoji","name":"disappointed"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"ab8f48cc-9af4-4857-97c6-ebc73ba310f4","type":"message","text":"<https://github.com/JuliaLang/julia/issues/18466>","user":"U85R3JJ8L","ts":"1612367466.077700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7JJq","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/issues/18466"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"d13b809a-4e27-484c-9cbc-fd7f98b5e1b9","type":"message","text":"what do you mean? the above code actually *works* ...","user":"U012FH66MFW","ts":"1612367466.077900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/fjnn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what do you mean? the above code actually "},{"type":"text","text":"works","style":{"bold":true}},{"type":"text","text":" ..."}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"1153ee41-f89e-45fb-be68-9fd36e63bd36","type":"message","text":"```julia&gt; struct VectorWithRepresentative{S &lt;: AbstractVector}\n         vec::S\n         rep::eltype(S)\n       end\n\njulia&gt; v = VectorWithRepresentative([1,2],3)\nVectorWithRepresentative{Array{Int64,1}}([1, 2], 3)\n\njulia&gt; dump(v)\nVectorWithRepresentative{Array{Int64,1}}\n  vec: Array{Int64}((2,)) [1, 2]\n  rep: Int64 3```","user":"U012FH66MFW","ts":"1612367507.078100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dKBQ7","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> struct VectorWithRepresentative{S <: AbstractVector}\n         vec::S\n         rep::eltype(S)\n       end\n\njulia> v = VectorWithRepresentative([1,2],3)\nVectorWithRepresentative{Array{Int64,1}}([1, 2], 3)\n\njulia> dump(v)\nVectorWithRepresentative{Array{Int64,1}}\n  vec: Array{Int64}((2,)) [1, 2]\n  rep: Int64 3"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"45dd5a7d-5e62-4b73-b58f-c86a4d88d879","type":"message","text":"maybe I am missing something?","user":"U012FH66MFW","ts":"1612367538.078300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XSl0p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"maybe I am missing something?"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"ec7a5d57-956a-4e88-8702-c28cf6b67563","type":"message","text":"(also, it is quite possible this doesn't work in all situations, I've not yet tried the examples I really care about (you probably can guess some of them :wink: )","user":"U012FH66MFW","ts":"1612367561.078500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CnD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(also, it is quite possible this doesn't work in all situations, I've not yet tried the examples I really care about (you probably can guess some of them "},{"type":"emoji","name":"wink"},{"type":"text","text":" )"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"03ed015b-bbb6-4bba-b3dc-3f3b34153322","type":"message","text":"Hmmm","user":"U85R3JJ8L","ts":"1612367754.078800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PPV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmmm"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"c6fbaeb2-c2df-48ca-8947-ee0d3925f96e","type":"message","text":"`S` at the time of struct definition is a `TypeVar` or somesuch","user":"U6740K1SP","ts":"1612367766.079000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eX8v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"S","style":{"code":true}},{"type":"text","text":" at the time of struct definition is a "},{"type":"text","text":"TypeVar","style":{"code":true}},{"type":"text","text":" or somesuch"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"6cb27537-5a2c-4c10-a2ba-f60cfc19344d","type":"message","text":"Not sure what is allowed, even `f(T) = T == Int ? Float64 : BigFloat` works","user":"U85R3JJ8L","ts":"1612367771.079200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+rQVK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not sure what is allowed, even "},{"type":"text","text":"f(T) = T == Int ? Float64 : BigFloat","style":{"code":true}},{"type":"text","text":" works"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"6a64fbc8-dde2-4412-96dc-a585f4a273cf","type":"message","text":"and there’s a fallback `eltype(::Any) = Any`","user":"U6740K1SP","ts":"1612367775.079400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZrPf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and there’s a fallback "},{"type":"text","text":"eltype(::Any) = Any","style":{"code":true}}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"7613b06b-347b-41d5-aed1-775c6871204c","type":"message","text":"In other words, it’s not doing what you want or think","user":"U6740K1SP","ts":"1612367790.079600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CKm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In other words, it’s not doing what you want or think"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"6e6e3a7f-5749-492a-8bed-565713f803eb","type":"message","text":"```julia&gt; fieldtypes(VectorWithRepresentative{Vector{Int}})\n(Array{Int64,1}, Any)```","user":"U6740K1SP","ts":"1612367887.080400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KAa3","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> fieldtypes(VectorWithRepresentative{Vector{Int}})\n(Array{Int64,1}, Any)"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"74e56599-f2fb-417e-9a1d-45c0538f825a","type":"message","text":"Ah, no, sorry","user":"U85R3JJ8L","ts":"1612367889.080600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+RwW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, no, sorry"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"79d47779-10d1-45ce-82ab-6406dded4ae8","type":"message","text":"so `rep` is really of type `Any`, got it","user":"U012FH66MFW","ts":"1612367890.080800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vjQ59","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so "},{"type":"text","text":"rep","style":{"code":true}},{"type":"text","text":" is really of type "},{"type":"text","text":"Any","style":{"code":true}},{"type":"text","text":", got it"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"3eaad452-4b46-45bc-92ac-bf95d4829817","type":"message","text":"yeah","user":"U012FH66MFW","ts":"1612367891.081000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"en9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"bf7f412f-14f1-4614-8a87-91792966d5c2","type":"message","text":"OK, that's evil: it doesn't produce an error but also doesn't produce what one would expect *sigh* OK. Thanks for warning me :slightly_smiling_face:","user":"U012FH66MFW","ts":"1612367998.081200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CLYNj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"OK, that's evil: it doesn't produce an error but also doesn't produce what one would expect "},{"type":"text","text":"sigh","style":{"bold":true}},{"type":"text","text":" OK. Thanks for warning me "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"2d691c6d-0d1f-4b70-bd8b-596c41c00fa3","type":"message","text":"time to look into <https://github.com/vtjnash/ComputedFieldTypes.jl> then :wink:","user":"U012FH66MFW","ts":"1612368008.081400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8fhrN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"time to look into "},{"type":"link","url":"https://github.com/vtjnash/ComputedFieldTypes.jl"},{"type":"text","text":" then "},{"type":"emoji","name":"wink"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"cfb25d8f-b3ca-458a-8362-f21d0fa5c7aa","type":"message","text":"You can do this instead:\n```struct VectorWithRepresentative{T, S &lt;: AbstractVector{T}}```","user":"U6740K1SP","ts":"1612368089.081600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q/da=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can do this instead:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct VectorWithRepresentative{T, S <: AbstractVector{T}}"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"f42a1964-420b-4652-8a1f-7b43d9eb2ba1","type":"message","text":"yeah, but what I really need is more complicated :slightly_smiling_face:","user":"U012FH66MFW","ts":"1612368138.081800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ufCH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, but what I really need is more complicated "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"7eb04528-0699-4177-992d-3fd8bfbdc97e","type":"message","text":"I really need to map type T1 to  FooBar and T2 to QuuxFlum (none of which have parameters)","user":"U012FH66MFW","ts":"1612368142.082000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yQcsY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I really need to map type T1 to  FooBar and T2 to QuuxFlum (none of which have parameters)"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"12188f1f-0896-417a-b864-2c9363898876","type":"message","text":"so `fieldtypes(MyType{T1})` should e.g. give `(T1, FooBar, Int64)` while  `fieldtypes(MyType{T2})` would give `(T2, QuuxFlum, Int64)`","user":"U012FH66MFW","ts":"1612368196.082200","team":"T68168MUP","edited":{"user":"U012FH66MFW","ts":"1612368208.000000"},"blocks":[{"type":"rich_text","block_id":"eCWn7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so "},{"type":"text","text":"fieldtypes(MyType{T1})","style":{"code":true}},{"type":"text","text":" should e.g. give "},{"type":"text","text":"(T1, FooBar, Int64)","style":{"code":true}},{"type":"text","text":" while  "},{"type":"text","text":"fieldtypes(MyType{T2})","style":{"code":true}},{"type":"text","text":" would give "},{"type":"text","text":"(T2, QuuxFlum, Int64)","style":{"code":true}}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"84d3b101-12d8-45e2-888c-21099d478a57","type":"message","text":"(this is still rather hypothetical, of course)","user":"U012FH66MFW","ts":"1612368224.082600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yB8Uq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(this is still rather hypothetical, of course)"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"d4a54296-d711-4238-aef5-b21395167214","type":"message","text":"the problem here is that I need to bring together types from quite different sources, so I can't expect them to have common supertypes or follow conventions I'd like to impose. In Julia, instead of inheritance it seems composition is the go-to solution, but I feel that parametric types are still fairly limited when it comes to that :confused:. Luckily the marco system helps a bit...","user":"U012FH66MFW","ts":"1612368311.082800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/N=G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the problem here is that I need to bring together types from quite different sources, so I can't expect them to have common supertypes or follow conventions I'd like to impose. In Julia, instead of inheritance it seems composition is the go-to solution, but I feel that parametric types are still fairly limited when it comes to that "},{"type":"emoji","name":"confused"},{"type":"text","text":". Luckily the marco system helps a bit..."}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"9072b88b-029e-41b4-b20c-3ea5f1e785e5","type":"message","text":"but of course the next question then will be what the performance implications of `ComputedFieldTypes.jl` are ...","user":"U012FH66MFW","ts":"1612368333.083000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZjE4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but of course the next question then will be what the performance implications of "},{"type":"text","text":"ComputedFieldTypes.jl","style":{"code":true}},{"type":"text","text":" are ..."}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"3327eb81-8ee5-4f5e-8a3e-112cdea20fc7","type":"message","text":"(note that in the end, in the particular example I am looking at right now, really only two types T1 and T2 are involved, so right now we are just duplicating the relevant code. But that's still annoying, and also there will be other examples where there is far more variety...","user":"U012FH66MFW","ts":"1612368405.083200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"F=L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(note that in the end, in the particular example I am looking at right now, really only two types T1 and T2 are involved, so right now we are just duplicating the relevant code. But that's still annoying, and also there will be other examples where there is far more variety..."}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"8ab60b11-a0a5-47fb-861b-f4479e84aef2","type":"message","text":"(and in the end, what I'd really like is to have something similar for function signatures :wink: for this I could use <https://github.com/schlichtanders/WhereTraits.jl>","user":"U012FH66MFW","ts":"1612368439.083400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4GH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(and in the end, what I'd really like is to have something similar for function signatures "},{"type":"emoji","name":"wink"},{"type":"text","text":" for this I could use "},{"type":"link","url":"https://github.com/schlichtanders/WhereTraits.jl"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"da99a3d7-fc79-4f9e-942f-dccb6bd35c1b","type":"message","text":"In general I’ve found it much simpler to just do:\n```struct Foo{A,B,C}\n    x::A\n    y::B\n    z::C\nend```\nand enforce constraints/computed things in constructors","user":"U6740K1SP","ts":"1612368446.083600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"em1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In general I’ve found it much simpler to just do:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct Foo{A,B,C}\n    x::A\n    y::B\n    z::C\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"and enforce constraints/computed things in constructors"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"9fdc530e-18a1-4fcd-a076-126c8c085e50","type":"message","text":"which is I think what Jameson’s package does in the end","user":"U6740K1SP","ts":"1612368459.083800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HLML","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which is I think what Jameson’s package does in the end"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"39b9970d-1d39-492c-89ad-53c7bb877fa4","type":"message","text":"it's only \"easier\" because Julia doesn't allow for better :slightly_smiling_face:. But yeah, that's probably the way to go for me for now, it's a pity nevertheless :disappointed: (but again, the remarkable macro system means one can avoid this)","user":"U012FH66MFW","ts":"1612368564.084000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eX9/n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's only \"easier\" because Julia doesn't allow for better "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":". But yeah, that's probably the way to go for me for now, it's a pity nevertheless "},{"type":"emoji","name":"disappointed"},{"type":"text","text":" (but again, the remarkable macro system means one can avoid this)"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"},{"client_msg_id":"1a175921-88e2-4713-960d-951b3e4c0786","type":"message","text":"thank you all for the help and input, much appreciated (and don't get me wrong, I really like Julia and I know you can't do everything for everyone; and perhaps the above, as well as official \"traits\" and more, will come in 2.0, who knows)","user":"U012FH66MFW","ts":"1612368615.084300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8Dt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thank you all for the help and input, much appreciated (and don't get me wrong, I really like Julia and I know you can't do everything for everyone; and perhaps the above, as well as official \"traits\" and more, will come in 2.0, who knows)"}]}]}],"thread_ts":"1612366821.076200","parent_user_id":"U012FH66MFW"}]