[{"client_msg_id":"6d8607a7-aaac-4993-adfa-b936ff5dec8a","type":"message","text":"I've been trying to think through what it is I actually enjoy about dynamic programming languages. I'm having a hard time convincing myself that I enjoy them at all, despite using them a lot! Over time, my programming style in dynamic languages has become more and more static, with only small parts requiring true dynamism. This particularly applies as a piece of code transitions from a more researchy state to a more stable, production state.\nDoes anyone have any clear opinions or thoughts on the benefits? \nContext: I have a good working knowledge of python, Julia, c++, &amp; a few other other static languages.","user":"UCNPT22MQ","ts":"1614802088.454700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nIR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I've been trying to think through what it is I actually enjoy about dynamic programming languages. I'm having a hard time convincing myself that I enjoy them at all, despite using them a lot! Over time, my programming style in dynamic languages has become more and more static, with only small parts requiring true dynamism. This particularly applies as a piece of code transitions from a more researchy state to a more stable, production state.\nDoes anyone have any clear opinions or thoughts on the benefits? \nContext: I have a good working knowledge of python, Julia, c++, & a few other other static languages."}]}]}],"thread_ts":"1614802088.454700","reply_count":5,"reply_users_count":3,"latest_reply":"1614802541.455900","reply_users":["U9VG1AYSG","U019K6Q9N15","UCNPT22MQ"],"subscribed":false},{"client_msg_id":"55ec255e-7033-4337-851b-5cc21cfb8739","type":"message","text":"to me having good generics is a lot more important than being dynamic.  Formally they have nothing to do with each other, but in practice I find it a lot easier to write generic code in dynamic languages.  Certainly that is true of Julia compared to C++ to an almost laughable degree","user":"U9VG1AYSG","ts":"1614802185.454800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NLn8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"to me having good generics is a lot more important than being dynamic.  Formally they have nothing to do with each other, but in practice I find it a lot easier to write generic code in dynamic languages.  Certainly that is true of Julia compared to C++ to an almost laughable degree"}]}]}],"thread_ts":"1614802088.454700","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"7ff8fd1d-900a-4bae-8908-1c343deb5584","type":"message","text":"The feedback loop during development in dynamic programming languages is incomparable, viz. Clojure and Julia. Incomparable.","user":"U019K6Q9N15","ts":"1614802402.455200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RnjQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The feedback loop during development in dynamic programming languages is incomparable, viz. Clojure and Julia. Incomparable."}]}]}],"thread_ts":"1614802088.454700","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"937f3c92-c727-4aa1-9352-690c69db0196","type":"message","text":"But I have the suspicion that that might be a function of the community intentionally putting an emphasis on the tooling there.","user":"U019K6Q9N15","ts":"1614802441.455400","team":"T68168MUP","edited":{"user":"U019K6Q9N15","ts":"1614802467.000000"},"blocks":[{"type":"rich_text","block_id":"7GX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But I have the suspicion that that might be a function of the community intentionally putting an emphasis on the tooling there."}]}]}],"thread_ts":"1614802088.454700","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"f16687ab-b1e6-4402-ac8e-6c5cd0ddb330","type":"message","text":"<@U9VG1AYSG> You mean just because the effort of thinking through the exact contract for your generic function, and even naming the return type can be very difficult?","user":"UCNPT22MQ","ts":"1614802473.455700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XhJX","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U9VG1AYSG"},{"type":"text","text":" You mean just because the effort of thinking through the exact contract for your generic function, and even naming the return type can be very difficult?"}]}]}],"thread_ts":"1614802088.454700","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"7257624b-dcc2-4a4e-a507-31b960db9a3b","type":"message","text":"<@U019K6Q9N15> yeah, I see what you're saying, but I also think this is orthogonal to dynamic types. You have languages like Haskell and Scala that have very interactive, productive development, with static type systems","user":"UCNPT22MQ","ts":"1614802541.455900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FXNm","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U019K6Q9N15"},{"type":"text","text":" yeah, I see what you're saying, but I also think this is orthogonal to dynamic types. You have languages like Haskell and Scala that have very interactive, productive development, with static type systems"}]}]}],"thread_ts":"1614802088.454700","parent_user_id":"UCNPT22MQ"}]