[{"client_msg_id":"3d74e1a2-6ae1-4fab-a32e-7c53b3a12609","type":"message","text":"do any channels get into how Julia alleviates the _Two Language Problem_?","user":"U01GZ9QPYPR","ts":"1616074794.050500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WCY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"do any channels get into how Julia alleviates the "},{"type":"text","text":"Two Language Problem","style":{"italic":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1616074794.050500","reply_count":6,"reply_users_count":4,"latest_reply":"1616076318.053200","reply_users":["UGU761DU2","UPTBGS6CC","U9VG1AYSG","U6A936746"],"subscribed":false},{"client_msg_id":"07c78111-434f-4e57-9b59-e17a8c2ed010","type":"message","text":"I suppose it depends _which_ two-language problem. Julia certainly solved my personal two language problem, which was that I was previously using Matlab for everyday plotting / analysis / etc., and C for HPC, but now just use Julia for everything. <#CBFP2PTTR|hpc> isn’t the most active channel around here, but does have a bunch of active Julia HPC users subscribed, if that’s the two-language problem you have in mind.","user":"UGU761DU2","ts":"1616075491.051100","team":"T68168MUP","edited":{"user":"UGU761DU2","ts":"1616075889.000000"},"blocks":[{"type":"rich_text","block_id":"kbD7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I suppose it depends "},{"type":"text","text":"which","style":{"italic":true}},{"type":"text","text":" two-language problem. Julia certainly solved my personal two language problem, which was that I was previously using Matlab for everyday plotting / analysis / etc., and C for HPC, but now just use Julia for everything. "},{"type":"channel","channel_id":"CBFP2PTTR"},{"type":"text","text":" isn’t the most active channel around here, but does have a bunch of active Julia HPC users subscribed, if that’s the two-language problem you have in mind."}]}]}],"thread_ts":"1616074794.050500","parent_user_id":"U01GZ9QPYPR"},{"client_msg_id":"f254d75f-6825-44d4-92e6-429f77012d2c","type":"message","text":"Personally also, while I came for the ability to have C-like speed in a high-level interactive language, I think the most compelling advantage of Julia long-term may be actually the composability that comes from dispatch-oriented programming (which is, of course, not unrelated to how Julia manages to achieve its balance of speed and interactivity)","user":"UGU761DU2","ts":"1616075599.051300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vOx9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Personally also, while I came for the ability to have C-like speed in a high-level interactive language, I think the most compelling advantage of Julia long-term may be actually the composability that comes from dispatch-oriented programming (which is, of course, not unrelated to how Julia manages to achieve its balance of speed and interactivity)"}]}]}],"thread_ts":"1616074794.050500","parent_user_id":"U01GZ9QPYPR"},{"client_msg_id":"17a6e715-70af-44d6-a2eb-9d157a933e8d","type":"message","text":"There is also the two-language problem for GPUs that the <#C689Y34LE|gpu> channel is focused on - letting people code up in Julia for both GPUs and CPUs without having to know CUDA/OpenCL.","user":"UPTBGS6CC","ts":"1616075752.051800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q08","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There is also the two-language problem for GPUs that the "},{"type":"channel","channel_id":"C689Y34LE"},{"type":"text","text":" channel is focused on - letting people code up in Julia for both GPUs and CPUs without having to know CUDA/OpenCL."}]}]}],"thread_ts":"1616074794.050500","parent_user_id":"U01GZ9QPYPR","reactions":[{"name":"gpu","users":["UGU761DU2"],"count":1},{"name":"100","users":["UGU761DU2"],"count":1}]},{"client_msg_id":"91195c50-b165-4089-aba3-d5399bad5387","type":"message","text":"to put it bluntly, when people say that it's very much aimed at Python: Python is too slow to be used on its own, so basically everything is written in some combination of C, C++ and Fortran.  This introduces all sorts of problems coming from the fact that none of the packages are really that interoperable with eachother (at least without enormous effort) because from the Python level they all consist of a bunch of opaque C structs.  There is simply no such problem in e.g. Go, Crystal, nim, Rust, so it really isn't fair to say that \"Julia addresses the two language problem\" any better than those languages.  Also, while Julia can replace C or C++ or can be considered as an alternative to Rust in many cases, there is a large class of programs for which Julia does not attempt to compete with those languages because Julia is garbage collected while those are not.  In the cases where Julia can be an alternative to Rust or C++, many people would find it preferable because there's a lot of mental overhead for any language without garbage collection, even with a system as clever as Rust's.","user":"U9VG1AYSG","ts":"1616076160.052400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7Ok","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"to put it bluntly, when people say that it's very much aimed at Python: Python is too slow to be used on its own, so basically everything is written in some combination of C, C++ and Fortran.  This introduces all sorts of problems coming from the fact that none of the packages are really that interoperable with eachother (at least without enormous effort) because from the Python level they all consist of a bunch of opaque C structs.  There is simply no such problem in e.g. Go, Crystal, nim, Rust, so it really isn't fair to say that \"Julia addresses the two language problem\" any better than those languages.  Also, while Julia can replace C or C++ or can be considered as an alternative to Rust in many cases, there is a large class of programs for which Julia does not attempt to compete with those languages because Julia is garbage collected while those are not.  In the cases where Julia can be an alternative to Rust or C++, many people would find it preferable because there's a lot of mental overhead for any language without garbage collection, even with a system as clever as Rust's."}]}]}],"thread_ts":"1616074794.050500","parent_user_id":"U01GZ9QPYPR","reactions":[{"name":"+1","users":["U6A936746"],"count":1}]},{"client_msg_id":"93b64a08-6638-473d-b5a1-2e1f78853c4b","type":"message","text":"(Python, R and Matlab, to be fair.)","user":"U6A936746","ts":"1616076292.052700","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1616076297.000000"},"blocks":[{"type":"rich_text","block_id":"S7nJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(Python, R and Matlab, to be fair.)"}]}]}],"thread_ts":"1616074794.050500","parent_user_id":"U01GZ9QPYPR","reactions":[{"name":"point_up","users":["U9VG1AYSG"],"count":1}]},{"client_msg_id":"4f01f232-158b-4f17-90dc-dc5dec9db2a4","type":"message","text":"(right, I just didn't mention R and matlab because I personally have managed to stay way clear of them :laughing: )","user":"U9VG1AYSG","ts":"1616076318.053200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"whED","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(right, I just didn't mention R and matlab because I personally have managed to stay way clear of them "},{"type":"emoji","name":"laughing"},{"type":"text","text":" )"}]}]}],"thread_ts":"1616074794.050500","parent_user_id":"U01GZ9QPYPR"}]