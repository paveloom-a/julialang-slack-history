[{"client_msg_id":"0a6e1ca0-ffd5-4c28-8522-0b6c8ce23e78","type":"message","text":"how would I write a function method which when called the first time computes some data, stores it in a variable, then \"replaces\" itself with a new method that uses the stored data? I'd imagine something like this pseudo code:\n```function foo(x::T)\n  global mycache\n  if !isdefined(mycache)\n    mycache = expensive_computation() # actually ideally should be made a global const?!\n    replace_foo_by( x -&gt; cheap_computation(mycache, x)) # &lt;- how could this be done?\n  end\n  return cheap_computation(mycache, x)\nend```","user":"U012FH66MFW","ts":"1608675502.384300","team":"T68168MUP","edited":{"user":"U012FH66MFW","ts":"1608675519.000000"},"blocks":[{"type":"rich_text","block_id":"TFCR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"how would I write a function method which when called the first time computes some data, stores it in a variable, then \"replaces\" itself with a new method that uses the stored data? I'd imagine something like this pseudo code:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function foo(x::T)\n  global mycache\n  if !isdefined(mycache)\n    mycache = expensive_computation() # actually ideally should be made a global const?!\n    replace_foo_by( x -> cheap_computation(mycache, x)) # <- how could this be done?\n  end\n  return cheap_computation(mycache, x)\nend"}]}]}],"thread_ts":"1608675502.384300","reply_count":11,"reply_users_count":5,"latest_reply":"1608678661.387500","reply_users":["UDB26738Q","U012FH66MFW","U0179G7FG4F","UUMJUCYRK","U6A936746"],"subscribed":false},{"client_msg_id":"bfcccce7-1295-4cb8-b39f-271c3f9f2691","type":"message","text":"memoization?","user":"UDB26738Q","ts":"1608675539.384900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yYXJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"memoization?"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW"},{"client_msg_id":"9a4a3844-2d52-4286-a98e-b71c3d91ced6","type":"message","text":"there are some packages doing that already","user":"UDB26738Q","ts":"1608675561.385100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Usv5A","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there are some packages doing that already"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW"},{"client_msg_id":"ae3636e4-04a1-49e4-ad2d-d70329206d9b","type":"message","text":"not quite, the data does not depend on the input (but OK I guess one could consider it a special case of memoization)","user":"U012FH66MFW","ts":"1608675576.385300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mWX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not quite, the data does not depend on the input (but OK I guess one could consider it a special case of memoization)"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW"},{"client_msg_id":"48e4de23-5a79-4341-afaf-470bd5b739f7","type":"message","text":"OK, I'll look under that keyword, thanks for the pointer","user":"U012FH66MFW","ts":"1608675585.385500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AVGwO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"OK, I'll look under that keyword, thanks for the pointer"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW"},{"client_msg_id":"c064a06c-fd10-4460-bd6a-22981349a695","type":"message","text":"what you specifically want to do is use memoization on a `expensive_computation`","user":"U0179G7FG4F","ts":"1608675648.385700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eV0cl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what you specifically want to do is use memoization on a "},{"type":"text","text":"expensive_computation","style":{"code":true}}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW"},{"client_msg_id":"3824e378-7605-4350-a785-266465b42724","type":"message","text":"```@memoize expensive_computation() = ....\n\nfunction foo(x::T)\n    return cheap_computation(expensive_computation(), x)\nend```\nAny of the memoization packages should be fine.","user":"UUMJUCYRK","ts":"1608675837.385900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2T71l","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@memoize expensive_computation() = ....\n\nfunction foo(x::T)\n    return cheap_computation(expensive_computation(), x)\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Any of the memoization packages should be fine."}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW","reactions":[{"name":"+1","users":["U0179G7FG4F"],"count":1}]},{"client_msg_id":"cdb9cd8a-b0b4-4fba-b9a6-d183127616b9","type":"message","text":"Makes sense, thanks","user":"U012FH66MFW","ts":"1608677715.386200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OkO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Makes sense, thanks"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW"},{"client_msg_id":"d7ef9d39-7d50-4918-bee7-0dc087466b69","type":"message","text":"Now I just have to evaluate 4+ memoization packages :joy:","user":"U012FH66MFW","ts":"1608677731.386400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/Xc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Now I just have to evaluate 4+ memoization packages "},{"type":"emoji","name":"joy"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW"},{"client_msg_id":"be8ff61a-80cb-4b20-a983-413155d3df8f","type":"message","text":"I recommend the one by the brilliant author at <https://github.com/marius311/Memoization.jl> :grin:","user":"UUMJUCYRK","ts":"1608677789.386600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Qqe9D","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I recommend the one by the brilliant author at "},{"type":"link","url":"https://github.com/marius311/Memoization.jl"},{"type":"text","text":" "},{"type":"emoji","name":"grin"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW"},{"client_msg_id":"47ed62ba-b45b-43d1-afa2-bdf6736a6f3d","type":"message","text":"I tend to skip the packages are just do:\n```const _FOO_CACHE = Dict{Tuple{...}, T)()\nfunction foo(args...)\n    get!(_FOO_CACHE, args) do\n        # write out the expensive computation here\n        # over multiple lines.\n    end\nend,s```\nit’s just not that hard, and `get!() do`  is perfect for it","user":"U6A936746","ts":"1608677824.386800","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1608677911.000000"},"blocks":[{"type":"rich_text","block_id":"T6M=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I tend to skip the packages are just do:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"const _FOO_CACHE = Dict{Tuple{...}, T)()\nfunction foo(args...)\n    get!(_FOO_CACHE, args) do\n        # write out the expensive computation here\n        # over multiple lines.\n    end\nend,s"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"it’s just not that hard, and "},{"type":"text","text":"get!() do","style":{"code":true}},{"type":"text","text":"  is perfect for it"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW","reactions":[{"name":"+1","users":["U7THT3TM3"],"count":1}]},{"client_msg_id":"f4dc5e72-8695-4f61-8871-b939f2dab922","type":"message","text":"actually for my application, I prefer not to use a package, and also not to use a Dict or IdDict and just use a `Ref` (again: zero arguments here, so this suffices) but I'll ~steal~ borrow inspiration from the macro implementations in all those packages ;-)","user":"U012FH66MFW","ts":"1608678661.387500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ebh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"actually for my application, I prefer not to use a package, and also not to use a Dict or IdDict and just use a "},{"type":"text","text":"Ref","style":{"code":true}},{"type":"text","text":" (again: zero arguments here, so this suffices) but I'll "},{"type":"text","text":"steal","style":{"strike":true}},{"type":"text","text":" borrow inspiration from the macro implementations in all those packages ;-)"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW"}]