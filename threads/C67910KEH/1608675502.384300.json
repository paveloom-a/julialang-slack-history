[{"client_msg_id":"0a6e1ca0-ffd5-4c28-8522-0b6c8ce23e78","type":"message","text":"how would I write a function method which when called the first time computes some data, stores it in a variable, then \"replaces\" itself with a new method that uses the stored data? I'd imagine something like this pseudo code:\n```function foo(x::T)\n  global mycache\n  if !isdefined(mycache)\n    mycache = expensive_computation() # actually ideally should be made a global const?!\n    replace_foo_by( x -&gt; cheap_computation(mycache, x)) # &lt;- how could this be done?\n  end\n  return cheap_computation(mycache, x)\nend```","user":"U012FH66MFW","ts":"1608675502.384300","team":"T68168MUP","edited":{"user":"U012FH66MFW","ts":"1608675519.000000"},"blocks":[{"type":"rich_text","block_id":"TFCR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"how would I write a function method which when called the first time computes some data, stores it in a variable, then \"replaces\" itself with a new method that uses the stored data? I'd imagine something like this pseudo code:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function foo(x::T)\n  global mycache\n  if !isdefined(mycache)\n    mycache = expensive_computation() # actually ideally should be made a global const?!\n    replace_foo_by( x -> cheap_computation(mycache, x)) # <- how could this be done?\n  end\n  return cheap_computation(mycache, x)\nend"}]}]}],"thread_ts":"1608675502.384300","reply_count":27,"reply_users_count":8,"latest_reply":"1608740273.422400","reply_users":["UDB26738Q","U012FH66MFW","U0179G7FG4F","UUMJUCYRK","U6A936746","U8D9768Q6","UM30MT6RF","U6795JH6H"],"subscribed":false},{"client_msg_id":"bfcccce7-1295-4cb8-b39f-271c3f9f2691","type":"message","text":"memoization?","user":"UDB26738Q","ts":"1608675539.384900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yYXJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"memoization?"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW"},{"client_msg_id":"9a4a3844-2d52-4286-a98e-b71c3d91ced6","type":"message","text":"there are some packages doing that already","user":"UDB26738Q","ts":"1608675561.385100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Usv5A","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there are some packages doing that already"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW"},{"client_msg_id":"ae3636e4-04a1-49e4-ad2d-d70329206d9b","type":"message","text":"not quite, the data does not depend on the input (but OK I guess one could consider it a special case of memoization)","user":"U012FH66MFW","ts":"1608675576.385300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mWX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not quite, the data does not depend on the input (but OK I guess one could consider it a special case of memoization)"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW"},{"client_msg_id":"48e4de23-5a79-4341-afaf-470bd5b739f7","type":"message","text":"OK, I'll look under that keyword, thanks for the pointer","user":"U012FH66MFW","ts":"1608675585.385500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AVGwO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"OK, I'll look under that keyword, thanks for the pointer"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW"},{"client_msg_id":"c064a06c-fd10-4460-bd6a-22981349a695","type":"message","text":"what you specifically want to do is use memoization on a `expensive_computation`","user":"U0179G7FG4F","ts":"1608675648.385700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eV0cl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what you specifically want to do is use memoization on a "},{"type":"text","text":"expensive_computation","style":{"code":true}}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW"},{"client_msg_id":"3824e378-7605-4350-a785-266465b42724","type":"message","text":"```@memoize expensive_computation() = ....\n\nfunction foo(x::T)\n    return cheap_computation(expensive_computation(), x)\nend```\nAny of the memoization packages should be fine.","user":"UUMJUCYRK","ts":"1608675837.385900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2T71l","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@memoize expensive_computation() = ....\n\nfunction foo(x::T)\n    return cheap_computation(expensive_computation(), x)\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Any of the memoization packages should be fine."}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW","reactions":[{"name":"+1","users":["U0179G7FG4F"],"count":1}]},{"client_msg_id":"cdb9cd8a-b0b4-4fba-b9a6-d183127616b9","type":"message","text":"Makes sense, thanks","user":"U012FH66MFW","ts":"1608677715.386200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OkO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Makes sense, thanks"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW"},{"client_msg_id":"d7ef9d39-7d50-4918-bee7-0dc087466b69","type":"message","text":"Now I just have to evaluate 4+ memoization packages :joy:","user":"U012FH66MFW","ts":"1608677731.386400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/Xc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Now I just have to evaluate 4+ memoization packages "},{"type":"emoji","name":"joy"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW"},{"client_msg_id":"be8ff61a-80cb-4b20-a983-413155d3df8f","type":"message","text":"I recommend the one by the brilliant author at <https://github.com/marius311/Memoization.jl> :grin:","user":"UUMJUCYRK","ts":"1608677789.386600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Qqe9D","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I recommend the one by the brilliant author at "},{"type":"link","url":"https://github.com/marius311/Memoization.jl"},{"type":"text","text":" "},{"type":"emoji","name":"grin"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW"},{"client_msg_id":"47ed62ba-b45b-43d1-afa2-bdf6736a6f3d","type":"message","text":"I tend to skip the packages are just do:\n```const _FOO_CACHE = Dict{Tuple{...}, T)()\nfunction foo(args...)\n    get!(_FOO_CACHE, args) do\n        # write out the expensive computation here\n        # over multiple lines.\n    end\nend,s```\nit’s just not that hard, and `get!() do`  is perfect for it","user":"U6A936746","ts":"1608677824.386800","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1608677911.000000"},"blocks":[{"type":"rich_text","block_id":"T6M=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I tend to skip the packages are just do:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"const _FOO_CACHE = Dict{Tuple{...}, T)()\nfunction foo(args...)\n    get!(_FOO_CACHE, args) do\n        # write out the expensive computation here\n        # over multiple lines.\n    end\nend,s"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"it’s just not that hard, and "},{"type":"text","text":"get!() do","style":{"code":true}},{"type":"text","text":"  is perfect for it"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW","reactions":[{"name":"+1","users":["U7THT3TM3","UKG4WF8PJ"],"count":2}]},{"client_msg_id":"f4dc5e72-8695-4f61-8871-b939f2dab922","type":"message","text":"actually for my application, I prefer not to use a package, and also not to use a Dict or IdDict and just use a `Ref` (again: zero arguments here, so this suffices) but I'll ~steal~ borrow inspiration from the macro implementations in all those packages ;-)","user":"U012FH66MFW","ts":"1608678661.387500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ebh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"actually for my application, I prefer not to use a package, and also not to use a Dict or IdDict and just use a "},{"type":"text","text":"Ref","style":{"code":true}},{"type":"text","text":" (again: zero arguments here, so this suffices) but I'll "},{"type":"text","text":"steal","style":{"strike":true}},{"type":"text","text":" borrow inspiration from the macro implementations in all those packages ;-)"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW"},{"client_msg_id":"1c982d91-0d0d-4500-ba26-d604c02f08a8","type":"message","text":"ahhh, and of course I can use `eval` ...\n```module HACK\n  function foo(x)\n    if !isdefined(@__MODULE__, :foo_cache)\n      eval(:(const foo_cache = 42 ; foo(x) = foo_cache + x))\n    end\n    return foo_cache + x\n  end\nend```\nthen I get:\n```julia&gt; HACK.foo(20)\n62\n\njulia&gt; @code_native HACK.foo(20)\n\t.section\t__TEXT,__text,regular,pure_instructions\n; ┌ @ REPL[67]:4 within `foo'\n; │┌ @ int.jl:86 within `+'\n\tleaq\t42(%rdi), %rax\n; │└\n\tretq\n\tnopw\t%cs:(%rax,%rax)\n\tnop\n; └```\ni.e. basically optimal code","user":"U012FH66MFW","ts":"1608679602.387700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tLm7O","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ahhh, and of course I can use "},{"type":"text","text":"eval","style":{"code":true}},{"type":"text","text":" ...\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"module HACK\n  function foo(x)\n    if !isdefined(@__MODULE__, :foo_cache)\n      eval(:(const foo_cache = 42 ; foo(x) = foo_cache + x))\n    end\n    return foo_cache + x\n  end\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"then I get:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> HACK.foo(20)\n62\n\njulia> @code_native HACK.foo(20)\n\t.section\t__TEXT,__text,regular,pure_instructions\n; ┌ @ REPL[67]:4 within `foo'\n; │┌ @ int.jl:86 within `+'\n\tleaq\t42(%rdi), %rax\n; │└\n\tretq\n\tnopw\t%cs:(%rax,%rax)\n\tnop\n; └"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"i.e. basically optimal code"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW"},{"client_msg_id":"48cc7268-b11f-4ecd-aecc-a2b8672300f4","type":"message","text":"I think you will have world-age issues if you do this in normal code.","user":"U6A936746","ts":"1608679849.387900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"THo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think you will have world-age issues if you do this in normal code."}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW","reactions":[{"name":"world_map","users":["UDB26738Q"],"count":1},{"name":"hourglass_flowing_sand","users":["UDB26738Q"],"count":1}]},{"client_msg_id":"47b252a4-9103-4dd2-b271-09660dcb944b","type":"message","text":"If we're brainstorming, you might like this, granted it has its own limitations too\n```@generated function foo(x)\n    foo_cache = 42\n    quote\n        $foo_cache + x\n    end\nend```\n","user":"UUMJUCYRK","ts":"1608679991.389200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VDhc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If we're brainstorming, you might like this, granted it has its own limitations too\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@generated function foo(x)\n    foo_cache = 42\n    quote\n        $foo_cache + x\n    end\nend"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW"},{"type":"message","subtype":"thread_broadcast","text":"Oh boy you get world age issues, but not world-age errors.\n```module HACK\n    function foo()\n        if !isdefined(@__MODULE__, :foo_cache)\n            eval(:(const foo_cache = 1; foo()=10))\n            return 1\n        end\n        return 100\n    end\nend\n\nbar() = HACK.foo() + HACK.foo()\nbar()```\nresult is  `101`\nIs this a julia bug?","user":"U6A936746","ts":"1608680339.393600","thread_ts":"1608675502.384300","root":{"client_msg_id":"0a6e1ca0-ffd5-4c28-8522-0b6c8ce23e78","type":"message","text":"how would I write a function method which when called the first time computes some data, stores it in a variable, then \"replaces\" itself with a new method that uses the stored data? I'd imagine something like this pseudo code:\n```function foo(x::T)\n  global mycache\n  if !isdefined(mycache)\n    mycache = expensive_computation() # actually ideally should be made a global const?!\n    replace_foo_by( x -&gt; cheap_computation(mycache, x)) # &lt;- how could this be done?\n  end\n  return cheap_computation(mycache, x)\nend```","user":"U012FH66MFW","ts":"1608675502.384300","team":"T68168MUP","edited":{"user":"U012FH66MFW","ts":"1608675519.000000"},"blocks":[{"type":"rich_text","block_id":"TFCR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"how would I write a function method which when called the first time computes some data, stores it in a variable, then \"replaces\" itself with a new method that uses the stored data? I'd imagine something like this pseudo code:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function foo(x::T)\n  global mycache\n  if !isdefined(mycache)\n    mycache = expensive_computation() # actually ideally should be made a global const?!\n    replace_foo_by( x -> cheap_computation(mycache, x)) # <- how could this be done?\n  end\n  return cheap_computation(mycache, x)\nend"}]}]}],"thread_ts":"1608675502.384300","reply_count":27,"reply_users_count":8,"latest_reply":"1608740273.422400","reply_users":["UDB26738Q","U012FH66MFW","U0179G7FG4F","UUMJUCYRK","U6A936746","U8D9768Q6","UM30MT6RF","U6795JH6H"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"MiK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh boy you get world age issues, but not world-age errors.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"module HACK\n    function foo()\n        if !isdefined(@__MODULE__, :foo_cache)\n            eval(:(const foo_cache = 1; foo()=10))\n            return 1\n        end\n        return 100\n    end\nend\n\nbar() = HACK.foo() + HACK.foo()\nbar()"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"result is  "},{"type":"text","text":"101","style":{"code":true}},{"type":"text","text":"\nIs this a julia bug?"}]}]}],"client_msg_id":"3c5e4d44-057d-483f-93d6-a09aa4811e8a","reactions":[{"name":"bug","users":["UDB26738Q","UKG4WF8PJ"],"count":2}]},{"client_msg_id":"eb8dcd31-83a1-4322-b6b4-356958bfcea1","type":"message","text":"<@UUMJUCYRK> ooohhh, nice, `@generated` seems perfect for my use case","user":"U012FH66MFW","ts":"1608680887.395700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"r5MK","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UUMJUCYRK"},{"type":"text","text":" ooohhh, nice, "},{"type":"text","text":"@generated","style":{"code":true}},{"type":"text","text":" seems perfect for my use case"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW"},{"client_msg_id":"f5b6d0da-5052-48dc-8112-9edf613d3677","type":"message","text":"<@U6A936746> worldage error rarely happen in the presence of eval with regular functions. That's usually a generated function thing.","user":"U8D9768Q6","ts":"1608680938.396000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dB2Bt","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U6A936746"},{"type":"text","text":" worldage error rarely happen in the presence of eval with regular functions. That's usually a generated function thing."}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW"},{"client_msg_id":"a8230cf3-7985-473e-b7d8-7303483bc27b","type":"message","text":"be really careful with it. Definitely read the docs on it and the asterisks as to when it's appropriate","user":"U0179G7FG4F","ts":"1608680947.396200","team":"T68168MUP","edited":{"user":"U0179G7FG4F","ts":"1608680972.000000"},"blocks":[{"type":"rich_text","block_id":"B8Bp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"be really careful with it. Definitely read the docs on it and the asterisks as to when it's appropriate"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW","reactions":[{"name":"point_up","users":["UUMJUCYRK","U6A936746","U7THT3TM3","U6795JH6H"],"count":4}]},{"client_msg_id":"620aaa91-33af-44d3-85e1-442c62b974f6","type":"message","text":"<@U6A936746> actually that's exactly what I'd expect (I was careful in my example to make sure that the \"old\" and \"new\" definition of the function return matching values","user":"U012FH66MFW","ts":"1608681007.396600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=8sk","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U6A936746"},{"type":"text","text":" actually that's exactly what I'd expect (I was careful in my example to make sure that the \"old\" and \"new\" definition of the function return matching values"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW"},{"client_msg_id":"23d2673a-24d8-43de-a966-3ff116c8ff5d","type":"message","text":"There is no real world age error in Julia, it's just a hint for `MethodError`s. If a matching method exists in the corresponding world age, it just gets called.","user":"UM30MT6RF","ts":"1608681170.397500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=wn3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There is no real world age error in Julia, it's just a hint for "},{"type":"text","text":"MethodError","style":{"code":true}},{"type":"text","text":"s. If a matching method exists in the corresponding world age, it just gets called."}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW","reactions":[{"name":"+1","users":["U7THT3TM3","U012FH66MFW","U6795JH6H"],"count":3}]},{"client_msg_id":"2abea7ae-ca58-4c79-a90d-22349e89d5d7","type":"message","text":"just to explain, my real usecase is to workaround some limitation of \"foreign types\" (a mostly undocumented concept added in Julia 1.3 to allow injecting some special custom types into the Julia kernel at runtime): these types cannot be serialized/dumped during precompilation (yet -- I hope this can be addressed in a future version of Julia, but that's a difficult task and really for now a low priority, to me at least). Anyway, it means that I can't just write\n```const myforeignobj = func_returning_object_of_foreign_type()\nfoo(x) = bar(myforeignobj, x)```\nInstead I am writing right now:\n```foo(x) = bar(func_returning_object_of_foreign_type(), x)```\nHere, `func_returning_object_of_foreign_type()` is not really \"slow\", it just is \"slower\" than the actual time taken for `bar(myforeignobj, x)` -- and this can add up in tight loops. I think `@generated` can solve all of this for me (I might still write another macro around that for my specific use pattern, which is basically exactly as in <@UUMJUCYRK>'s snippet","user":"U012FH66MFW","ts":"1608681525.397900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x0=v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"just to explain, my real usecase is to workaround some limitation of \"foreign types\" (a mostly undocumented concept added in Julia 1.3 to allow injecting some special custom types into the Julia kernel at runtime): these types cannot be serialized/dumped during precompilation (yet -- I hope this can be addressed in a future version of Julia, but that's a difficult task and really for now a low priority, to me at least). Anyway, it means that I can't just write\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"const myforeignobj = func_returning_object_of_foreign_type()\nfoo(x) = bar(myforeignobj, x)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Instead I am writing right now:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"foo(x) = bar(func_returning_object_of_foreign_type(), x)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Here, "},{"type":"text","text":"func_returning_object_of_foreign_type()","style":{"code":true}},{"type":"text","text":" is not really \"slow\", it just is \"slower\" than the actual time taken for "},{"type":"text","text":"bar(myforeignobj, x)","style":{"code":true}},{"type":"text","text":" -- and this can add up in tight loops. I think "},{"type":"text","text":"@generated","style":{"code":true}},{"type":"text","text":" can solve all of this for me (I might still write another macro around that for my specific use pattern, which is basically exactly as in "},{"type":"user","user_id":"UUMJUCYRK"},{"type":"text","text":"'s snippet"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW"},{"client_msg_id":"6939bbc5-28fa-4ec0-bb6e-6faac3d3fe8b","type":"message","text":"Many thanks to all of you who chimed in, I really appreciate it!","user":"U012FH66MFW","ts":"1608681539.398200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5iUs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Many thanks to all of you who chimed in, I really appreciate it!"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW"},{"client_msg_id":"0d2cfecb-6f17-43b6-bc74-7fd3dd8ffbf3","type":"message","text":"I am not sure your `eval`  code will ever use the version declared via eval. Except if invoked in seperate calls in the REPL.\nThe `@generated` should be fine though","user":"U6A936746","ts":"1608681757.398600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vfC5V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am not sure your "},{"type":"text","text":"eval","style":{"code":true}},{"type":"text","text":"  code will ever use the version declared via eval. Except if invoked in seperate calls in the REPL.\nThe "},{"type":"text","text":"@generated","style":{"code":true}},{"type":"text","text":" should be fine though"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW"},{"client_msg_id":"22B6230C-A986-4F0C-9947-6A52803337EE","type":"message","text":"The `eval` code can be made to work with `invokelatest`","user":"U8D9768Q6","ts":"1608681853.399600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CGVGZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The "},{"type":"text","text":"eval","style":{"code":true}},{"type":"text","text":" code can be made to work with "},{"type":"text","text":"invokelatest","style":{"code":true}}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW","reactions":[{"name":"true","users":["U6A936746"],"count":1}]},{"client_msg_id":"651d507f-7e9e-4655-b4c1-6b81da258611","type":"message","text":"`invokelatest`  is always faster than i think it is. Its slow compred to normal function calls but its still only around the dozen of `ns` mark","user":"U6A936746","ts":"1608682060.401300","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1608682087.000000"},"blocks":[{"type":"rich_text","block_id":"CWQ8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"invokelatest","style":{"code":true}},{"type":"text","text":"  is always faster than i think it is. Its slow compred to normal function calls but its still only around the dozen of "},{"type":"text","text":"ns","style":{"code":true}},{"type":"text","text":" mark"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW","reactions":[{"name":"+1","users":["U0179G7FG4F","U8D9768Q6"],"count":2}]},{"client_msg_id":"7FC35875-0B6A-4422-BC32-D26079438C6C","type":"message","text":"There’s a PR to make it faster too","user":"U8D9768Q6","ts":"1608684394.402400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3MXO6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There’s a PR to make it faster too"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW","reactions":[{"name":"sonic","users":["U6A936746"],"count":1}]},{"client_msg_id":"38e5f2fe-f53d-4e7b-8acc-2a10f20b94dd","type":"message","text":"using eval for this feels very dicey, but I think `eval` + `invokelatest` is not undefined","user":"U6795JH6H","ts":"1608740273.422400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kww","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"using eval for this feels very dicey, but I think "},{"type":"text","text":"eval","style":{"code":true}},{"type":"text","text":" + "},{"type":"text","text":"invokelatest","style":{"code":true}},{"type":"text","text":" is not undefined"}]}]}],"thread_ts":"1608675502.384300","parent_user_id":"U012FH66MFW"}]