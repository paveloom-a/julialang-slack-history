[{"client_msg_id":"dc3e6f89-d00c-4fe3-9a9e-1492c34f8d47","type":"message","text":"I took a shot at implementing Rust-like error types in Julia: <https://github.com/jakobnissen/ErrorTypes.jl> Any feedback is welcome :)","user":"U7HAYKY9X","ts":"1611152162.202800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s=AE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I took a shot at implementing Rust-like error types in Julia: "},{"type":"link","url":"https://github.com/jakobnissen/ErrorTypes.jl"},{"type":"text","text":" Any feedback is welcome :)"}]}]}],"thread_ts":"1611152162.202800","reply_count":6,"reply_users_count":4,"latest_reply":"1611166848.207300","reply_users":["U67D54KS8","U6A936746","U7HAYKY9X","U01K2JB9GPJ"],"subscribed":false,"reactions":[{"name":"rust","users":["UDB26738Q","U7THT3TM3","UUCN877U5","ULUC3K6M6","UAREE2NMD"],"count":5}]},{"client_msg_id":"f2f4f18b-88aa-40b0-90a2-762bbc07dfcd","type":"message","text":"Also, see <https://github.com/iamed2/ResultTypes.jl>, <https://github.com/KristofferC/Expect.jl> :stuck_out_tongue:","user":"U67D54KS8","ts":"1611152914.203100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kFO1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, see "},{"type":"link","url":"https://github.com/iamed2/ResultTypes.jl"},{"type":"text","text":", "},{"type":"link","url":"https://github.com/KristofferC/Expect.jl"},{"type":"text","text":" "},{"type":"emoji","name":"stuck_out_tongue"}]}]}],"thread_ts":"1611152162.202800","parent_user_id":"U7HAYKY9X","reactions":[{"name":"point_up","users":["U6A936746","UFU63RJRY","U7THT3TM3","U7HAYKY9X"],"count":4}]},{"client_msg_id":"6c69fb43-7a8f-42fb-95cd-be5be5d14740","type":"message","text":"It would be nice to include a short set of comparisons to those in the readme.","user":"U6A936746","ts":"1611152937.203300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"b2=Z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It would be nice to include a short set of comparisons to those in the readme."}]}]}],"thread_ts":"1611152162.202800","parent_user_id":"U7HAYKY9X","reactions":[{"name":"+1","users":["U7THT3TM3"],"count":1},{"name":"100","users":["U7HAYKY9X"],"count":1}]},{"client_msg_id":"baf3222d-d301-4eb1-9fdd-907814758a1b","type":"message","text":"Also do all three of these packages use division as their example?\nIs this because Rust or something uses division as it’s example?","user":"U6A936746","ts":"1611153020.203600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aDG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also do all three of these packages use division as their example?\nIs this because Rust or something uses division as it’s example?"}]}]}],"thread_ts":"1611152162.202800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"8487992b-91df-4f78-a544-8e085fffa9e4","type":"message","text":"Ah yeah, that is indeed very similar.","user":"U7HAYKY9X","ts":"1611153635.204000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"leA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah yeah, that is indeed very similar."}]}]}],"thread_ts":"1611152162.202800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"b11adebc-0f18-4bb7-9cbf-ff7c67de2355","type":"message","text":"I guess it's basically the same thing as `Expect.jl`, except:\n• My package does not allow the expected and unexpected type to be the same, so there is no danger of traps there\n• There is the Option type for convenience, since I think `Nothing` going to be the most common unexpected value\n• There are a few more convenience functions, like the propagating macro `@?` (similar to Rusts `?` ), `expect_nothing`  etc.\nBut yeah, they are pretty interchangable.","user":"U7HAYKY9X","ts":"1611154205.204200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=1l","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess it's basically the same thing as "},{"type":"text","text":"Expect.jl","style":{"code":true}},{"type":"text","text":", except:\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My package does not allow the expected and unexpected type to be the same, so there is no danger of traps there"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"There is the Option type for convenience, since I think "},{"type":"text","text":"Nothing","style":{"code":true}},{"type":"text","text":" going to be the most common unexpected value"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"There are a few more convenience functions, like the propagating macro "},{"type":"text","text":"@?","style":{"code":true}},{"type":"text","text":" (similar to Rusts "},{"type":"text","text":"?","style":{"code":true}},{"type":"text","text":" ), "},{"type":"text","text":"expect_nothing","style":{"code":true}},{"type":"text","text":"  etc."}]}],"style":"bullet","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"But yeah, they are pretty interchangable."}]}]}],"thread_ts":"1611152162.202800","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"9dc6fa96-a642-4d4f-b727-ac5b3673788f","type":"message","text":"Gave it a quick glance at the readme, are those basically free monads?","user":"U01K2JB9GPJ","ts":"1611166848.207300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5Wl+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Gave it a quick glance at the readme, are those basically free monads?"}]}]}],"thread_ts":"1611152162.202800","parent_user_id":"U7HAYKY9X","reactions":[{"name":"correct_answer","users":["U7HAYKY9X"],"count":1}]}]