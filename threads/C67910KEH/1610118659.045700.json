[{"client_msg_id":"7affe4a6-92de-4080-adf2-5f09a95ef0fd","type":"message","text":"Is it true that in julia all lines are Expressions?","user":"U010LT79LKX","ts":"1610118659.045700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UTYoU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is it true that in julia all lines are Expressions?"}]}]}],"thread_ts":"1610118659.045700","reply_count":22,"reply_users_count":10,"latest_reply":"1610138295.096300","reply_users":["UM30MT6RF","U010LT79LKX","U8D9768Q6","U7HAYKY9X","U6740K1SP","U6Z8377N2","ULGMQ3LCB","UDDUC4R1Q","UGU761DU2","UH24GRBLL"],"subscribed":false},{"client_msg_id":"15f07c5d-b897-4604-b71b-5169311f0b53","type":"message","text":"Depends on what you mean by expression. It generally isn't really tied to line breaks though","user":"UM30MT6RF","ts":"1610118733.046200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bgk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Depends on what you mean by expression. It generally isn't really tied to line breaks though"}]}]}],"thread_ts":"1610118659.045700","parent_user_id":"U010LT79LKX"},{"client_msg_id":"888ce803-4eeb-48ba-9f94-543ad0792a80","type":"message","text":"oh, ok. I was just wondering if Julia has an Everything is an X architecture. (Well not everything, even in unix not everything is a file/stream)","user":"U010LT79LKX","ts":"1610119953.055300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fg+7E","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh, ok. I was just wondering if Julia has an Everything is an X architecture. (Well not everything, even in unix not everything is a file/stream)"}]}]}],"thread_ts":"1610118659.045700","parent_user_id":"U010LT79LKX"},{"client_msg_id":"02C8276E-DED8-4918-8B19-BB6F4CF1808A","type":"message","text":"Everything in julia is an expression. ","user":"U8D9768Q6","ts":"1610120147.056800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+0Q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Everything in julia is an expression. "}]}]}],"thread_ts":"1610118659.045700","parent_user_id":"U010LT79LKX"},{"client_msg_id":"c3d77399-ff21-4cfd-9535-d40f7a6786c3","type":"message","text":"That's not true. All Julia *code* are expressions, but there is a difference between `:(1 + 1)`  and `1 + 1` . Only the former is an expression.","user":"U7HAYKY9X","ts":"1610121111.059500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d2H2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's not true. All Julia "},{"type":"text","text":"code","style":{"bold":true}},{"type":"text","text":" are expressions, but there is a difference between "},{"type":"text","text":":(1 + 1)","style":{"code":true}},{"type":"text","text":"  and "},{"type":"text","text":"1 + 1","style":{"code":true}},{"type":"text","text":" . Only the former is an expression."}]}]}],"thread_ts":"1610118659.045700","parent_user_id":"U010LT79LKX","reactions":[{"name":"thinking_face","users":["U6740K1SP"],"count":1}]},{"client_msg_id":"33e4f2f2-a71b-492e-ae77-9e2f292f52af","type":"message","text":"that’s not my understanding of what the word expression means","user":"U6740K1SP","ts":"1610121184.060100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0M3/0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that’s not my understanding of what the word expression means"}]}]}],"thread_ts":"1610118659.045700","parent_user_id":"U010LT79LKX","reactions":[{"name":"heavy_check_mark","users":["UGU761DU2"],"count":1}]},{"client_msg_id":"3640409b-fd21-4d59-9241-38a1593539cf","type":"message","text":"Maybe I'm confused about the meaning, but certainly within Julia, this is the case:\n```julia&gt; typeof(:(1 + 1))\nExpr\n\njulia&gt; typeof(1 + 1)\nInt64```","user":"U7HAYKY9X","ts":"1610121232.061300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gYQC3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe I'm confused about the meaning, but certainly within Julia, this is the case:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> typeof(:(1 + 1))\nExpr\n\njulia> typeof(1 + 1)\nInt64"}]}]}],"thread_ts":"1610118659.045700","parent_user_id":"U010LT79LKX"},{"client_msg_id":"654D9CC0-73BA-4DB5-B2E9-F575163B7DEC","type":"message","text":"The former is an expression defining an `Expr` data type.  The latter is an expression for computing `1 + 1` ","user":"U8D9768Q6","ts":"1610121234.061500","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1610121344.000000"},"blocks":[{"type":"rich_text","block_id":"1g1q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The former is an expression defining an "},{"type":"text","text":"Expr","style":{"code":true}},{"type":"text","text":" data type.  The latter is an expression for computing "},{"type":"text","text":"1 + 1","style":{"code":true}},{"type":"text","text":" "}]}]}],"thread_ts":"1610118659.045700","parent_user_id":"U010LT79LKX","reactions":[{"name":"correct_answer","users":["U6740K1SP"],"count":1},{"name":"point_up","users":["U6A936746"],"count":1}]},{"client_msg_id":"84924462-E6ED-4B3C-858B-4894938F5799","type":"message","text":"Many languages have statements in addition to expressions, Julia does not. That’s what I was talking about, but maybe I misunderstood the OP’s question. ","user":"U8D9768Q6","ts":"1610121315.063500","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1610121322.000000"},"blocks":[{"type":"rich_text","block_id":"bHScc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Many languages have statements in addition to expressions, Julia does not. That’s what I was talking about, but maybe I misunderstood the OP’s question. "}]}]}],"thread_ts":"1610118659.045700","parent_user_id":"U010LT79LKX","reactions":[{"name":"point_up","users":["U6A936746"],"count":1}]},{"client_msg_id":"ba7920d8-0068-4824-aae9-a01103f6d7d1","type":"message","text":"Ah, we may be accidentally splitting hairs. Similar to someone pointing to a picture of a dog saying \"This is a dog\", and the other one going, \"Nope, that is just colored ink on a piece of paper\".","user":"U7HAYKY9X","ts":"1610121333.063800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hgS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, we may be accidentally splitting hairs. Similar to someone pointing to a picture of a dog saying \"This is a dog\", and the other one going, \"Nope, that is just colored ink on a piece of paper\"."}]}]}],"thread_ts":"1610118659.045700","parent_user_id":"U010LT79LKX","reactions":[{"name":"pipe","users":["U6740K1SP","UDXUQE5T3","U8D9768Q6","U67G3QRJM","UDDUC4R1Q","UPRKNS675"],"count":6}]},{"client_msg_id":"b33bfa2d-cb50-423e-a798-df2eb9cbf1f7","type":"message","text":"Would `using ....` be technically \"statements\" and not expressions? I read somewhere that `using ...` is the only thing in Julia that is not \"first class\", if that makes sense","user":"U6Z8377N2","ts":"1610125478.066400","team":"T68168MUP","edited":{"user":"U6Z8377N2","ts":"1610125504.000000"},"blocks":[{"type":"rich_text","block_id":"Bjil5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Would "},{"type":"text","text":"using ....","style":{"code":true}},{"type":"text","text":" be technically \"statements\" and not expressions? I read somewhere that "},{"type":"text","text":"using ...","style":{"code":true}},{"type":"text","text":" is the only thing in Julia that is not \"first class\", if that makes sense"}]}]}],"thread_ts":"1610118659.045700","parent_user_id":"U010LT79LKX"},{"client_msg_id":"f626f006-7fd4-444e-a81c-e8963cee72e9","type":"message","text":"No:\n```julia&gt; x = (using PyPlot)\n\njulia&gt; x === nothing\ntrue```","user":"UM30MT6RF","ts":"1610125530.066700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dB=q5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> x = (using PyPlot)\n\njulia> x === nothing\ntrue"}]}]}],"thread_ts":"1610118659.045700","parent_user_id":"U010LT79LKX","reactions":[{"name":"heavy_check_mark","users":["U8D9768Q6"],"count":1}]},{"client_msg_id":"b46d787a-c98e-4317-8276-046b5176e9c5","type":"message","text":"It's just not allowed in local scopes","user":"UM30MT6RF","ts":"1610125573.067000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KOe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's just not allowed in local scopes"}]}]}],"thread_ts":"1610118659.045700","parent_user_id":"U010LT79LKX"},{"client_msg_id":"20aa14f0-1122-4e7b-b072-bb231cb4bd03","type":"message","text":"<@U8D9768Q6> no you got my question exactly right","user":"U010LT79LKX","ts":"1610125622.067200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BnF","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U8D9768Q6"},{"type":"text","text":" no you got my question exactly right"}]}]}],"thread_ts":"1610118659.045700","parent_user_id":"U010LT79LKX"},{"client_msg_id":"e3c7549a-fd03-4805-9410-ee97d9d228e8","type":"message","text":"Is `return 1` in Julia an expression?","user":"ULGMQ3LCB","ts":"1610128798.067600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kk9Q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is "},{"type":"text","text":"return 1","style":{"code":true}},{"type":"text","text":" in Julia an expression?"}]}]}],"thread_ts":"1610118659.045700","parent_user_id":"U010LT79LKX"},{"client_msg_id":"d19c1a22-3697-4de9-8321-29ab6c13650b","type":"message","text":"Yes, sure!","user":"UM30MT6RF","ts":"1610128835.067800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"M9Piz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, sure!"}]}]}],"thread_ts":"1610118659.045700","parent_user_id":"U010LT79LKX"},{"client_msg_id":"854a084d-5468-4348-8537-6f767b79e386","type":"message","text":"Yep, that's why you can do `cond &amp;&amp; return true` . It gets a little bit weird because people typically consider expressions as things that return values (and `return`  can never yield a value since it changes control flow the way it does). Some languages actually model this (e.g., TypeScript has a `never` type that indicates that some expression can never return a value -- e.g., because it's a function call that will always throw an error).","user":"UDDUC4R1Q","ts":"1610134003.090000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"i3F","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yep, that's why you can do "},{"type":"text","text":"cond && return true","style":{"code":true}},{"type":"text","text":" . It gets a little bit weird because people typically consider expressions as things that return values (and "},{"type":"text","text":"return","style":{"code":true}},{"type":"text","text":"  can never yield a value since it changes control flow the way it does). Some languages actually model this (e.g., TypeScript has a "},{"type":"text","text":"never","style":{"code":true}},{"type":"text","text":" type that indicates that some expression can never return a value -- e.g., because it's a function call that will always throw an error)."}]}]}],"thread_ts":"1610118659.045700","parent_user_id":"U010LT79LKX"},{"client_msg_id":"06341b1a-dd70-4d82-ac9a-e3038ac6286d","type":"message","text":"&gt; (e.g., TypeScript has a `never` type that indicates that some expression can never return a value -- e.g., because it’s a function call that will always throw an error)\nWe have that — functions that never return are inferred to return `Union{}` . No value can inhabit that type.","user":"U6740K1SP","ts":"1610134237.091900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"H=oY","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"(e.g., TypeScript has a "},{"type":"text","text":"never","style":{"code":true}},{"type":"text","text":" type that indicates that some expression can never return a value -- e.g., because it’s a function call that will always throw an error)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nWe have that — functions that never return are inferred to return "},{"type":"text","text":"Union{}","style":{"code":true}},{"type":"text","text":" . No value can inhabit that type."}]}]}],"thread_ts":"1610118659.045700","parent_user_id":"U010LT79LKX","reactions":[{"name":"today-i-learned","users":["UDDUC4R1Q"],"count":1}]},{"client_msg_id":"5c32d65d-ec03-4f7e-b09e-b0a07ca779c4","type":"message","text":"Interesting! Definitely different use cases between Julia &amp; TypeScript (b/c the latter is trying to do static typing for correctness whereas Julia is doing inferred typing for performance).","user":"UDDUC4R1Q","ts":"1610134574.093200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3nzt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Interesting! Definitely different use cases between Julia & TypeScript (b/c the latter is trying to do static typing for correctness whereas Julia is doing inferred typing for performance)."}]}]}],"thread_ts":"1610118659.045700","parent_user_id":"U010LT79LKX"},{"type":"message","subtype":"thread_broadcast","text":"I could be wrong, but I would have said that `1+1` is an expression, and `:(1+1)` is an _expression that quotes another expression_. I say that because the lisp-y s-expression form (_a la_ `Meta.show_sexpr`)  of `1+1` is\n```(:call, :+, 1, 1)```\nwhereas the s-expression form of `:(1+1)` is\n```(:quote, (:call, :+, 1, 1))```","user":"UGU761DU2","ts":"1610137202.094200","thread_ts":"1610118659.045700","root":{"client_msg_id":"7affe4a6-92de-4080-adf2-5f09a95ef0fd","type":"message","text":"Is it true that in julia all lines are Expressions?","user":"U010LT79LKX","ts":"1610118659.045700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UTYoU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is it true that in julia all lines are Expressions?"}]}]}],"thread_ts":"1610118659.045700","reply_count":22,"reply_users_count":10,"latest_reply":"1610138295.096300","reply_users":["UM30MT6RF","U010LT79LKX","U8D9768Q6","U7HAYKY9X","U6740K1SP","U6Z8377N2","ULGMQ3LCB","UDDUC4R1Q","UGU761DU2","UH24GRBLL"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"4riB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I could be wrong, but I would have said that "},{"type":"text","text":"1+1","style":{"code":true}},{"type":"text","text":" is an expression, and "},{"type":"text","text":":(1+1)","style":{"code":true}},{"type":"text","text":" is an "},{"type":"text","text":"expression that quotes another expression","style":{"italic":true}},{"type":"text","text":". I say that because the lisp-y s-expression form ("},{"type":"text","text":"a la","style":{"italic":true}},{"type":"text","text":" "},{"type":"text","text":"Meta.show_sexpr","style":{"code":true}},{"type":"text","text":")  of "},{"type":"text","text":"1+1","style":{"code":true}},{"type":"text","text":" is\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"(:call, :+, 1, 1)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"whereas the s-expression form of "},{"type":"text","text":":(1+1)","style":{"code":true}},{"type":"text","text":" is\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"(:quote, (:call, :+, 1, 1))"}]}]}],"client_msg_id":"93568ec2-f422-4602-b141-7124c941a07d","reactions":[{"name":"+1","users":["U0179G7FG4F","U7THT3TM3","UDSU53PEG"],"count":3}]},{"client_msg_id":"3e47a117-e9a0-443c-9ba6-d613e914e475","type":"message","text":"I suggest liberal use of the wonderful `Meta.@dump`","user":"UH24GRBLL","ts":"1610137615.095100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"i4KcA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I suggest liberal use of the wonderful "},{"type":"text","text":"Meta.@dump","style":{"code":true}}]}]}],"thread_ts":"1610118659.045700","parent_user_id":"U010LT79LKX"},{"client_msg_id":"12072f59-6efc-4421-8d84-940efa490a56","type":"message","text":"```julia&gt; Meta.@dump 1 + 1\nExpr\n  head: Symbol call\n  args: Array{Any}((3,))\n    1: Symbol +\n    2: Int64 1\n    3: Int64 1\n\njulia&gt; Meta.@dump :(1 + 1)\nExpr\n  head: Symbol quote\n  args: Array{Any}((1,))\n    1: Expr\n      head: Symbol call\n      args: Array{Any}((3,))\n        1: Symbol +\n        2: Int64 1\n        3: Int64 1```","user":"UH24GRBLL","ts":"1610137628.095400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FQa","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Meta.@dump 1 + 1\nExpr\n  head: Symbol call\n  args: Array{Any}((3,))\n    1: Symbol +\n    2: Int64 1\n    3: Int64 1\n\njulia> Meta.@dump :(1 + 1)\nExpr\n  head: Symbol quote\n  args: Array{Any}((1,))\n    1: Expr\n      head: Symbol call\n      args: Array{Any}((3,))\n        1: Symbol +\n        2: Int64 1\n        3: Int64 1"}]}]}],"thread_ts":"1610118659.045700","parent_user_id":"U010LT79LKX","reactions":[{"name":"science_parrot","users":["UGU761DU2","U7THT3TM3"],"count":2},{"name":"+1","users":["U6A936746","U7THT3TM3","U67G3QRJM"],"count":3}]},{"client_msg_id":"2568d619-30a7-4434-8528-0a16e3805eef","type":"message","text":"it's also immensly useful when developing macros","user":"UH24GRBLL","ts":"1610138295.096300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JQe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's also immensly useful when developing macros"}]}]}],"thread_ts":"1610118659.045700","parent_user_id":"U010LT79LKX","reactions":[{"name":"meta","users":["UGU761DU2"],"count":1},{"name":"heavy_check_mark","users":["U6A936746"],"count":1}]}]