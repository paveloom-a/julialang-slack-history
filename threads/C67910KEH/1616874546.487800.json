[{"client_msg_id":"1fcd2b13-4a2d-47e3-b355-b6f878fab1ce","type":"message","text":"Random conversation. Next week I will having a discussion on my team where I hope to push for the case of Julia. However, with Modern Fortran gaining momentum, how does one justify and argue for Julia? What advantage does using Julia above Fortran (as Fortran is ditching old school) offer? I understand the REPL ability and all (I think somewhere there is a post of Good O'l Fortran is even having a REPL soon), but I'd like to some the community response here. Thanks.","user":"U018K59MVSR","ts":"1616874546.487800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LA0Kv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Random conversation. Next week I will having a discussion on my team where I hope to push for the case of Julia. However, with Modern Fortran gaining momentum, how does one justify and argue for Julia? What advantage does using Julia above Fortran (as Fortran is ditching old school) offer? I understand the REPL ability and all (I think somewhere there is a post of Good O'l Fortran is even having a REPL soon), but I'd like to some the community response here. Thanks."}]}]}],"thread_ts":"1616874546.487800","reply_count":28,"reply_users_count":5,"latest_reply":"1616879014.495700","reply_users":["U0179G7FG4F","U018K59MVSR","UMDEUKM29","UGU761DU2","U01SFUPBJ9E"],"is_locked":false,"subscribed":false},{"client_msg_id":"61fb3f4d-98ff-47fc-830c-3f36a0b514e5","type":"message","text":"multiple dispatch is really nice. Generic algorithms just work","user":"U0179G7FG4F","ts":"1616875343.488300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h5BK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"multiple dispatch is really nice. Generic algorithms just work"}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR"},{"client_msg_id":"acde6fac-a23d-4ee4-8528-6f19bfb20501","type":"message","text":"Agreed <@U0179G7FG4F> Multiple dispatch is the sort of thing that look like \"Dark magic\" to me. One of the great part of Julia.","user":"U018K59MVSR","ts":"1616875717.488500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hNDnV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Agreed "},{"type":"user","user_id":"U0179G7FG4F"},{"type":"text","text":" Multiple dispatch is the sort of thing that look like \"Dark magic\" to me. One of the great part of Julia."}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR"},{"client_msg_id":"9cce92c5-c67b-4dbe-9aa5-5ff8bb784727","type":"message","text":"Often my collaborator are quite comfortable with using Fortran and I suspect they will bring up the Modern Fortran argument up.","user":"U018K59MVSR","ts":"1616875792.488700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vIMO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Often my collaborator are quite comfortable with using Fortran and I suspect they will bring up the Modern Fortran argument up."}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR"},{"client_msg_id":"3efd2dbd-6832-489f-8b17-2a2133fb2744","type":"message","text":"I think <https://github.com/JuliaLinearAlgebra/Octavian.jl> is a pretty good argument that modern Fortran can't compare. It's better than OpenBlas in about 2000 lines of code","user":"U0179G7FG4F","ts":"1616876006.488900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1nOv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think "},{"type":"link","url":"https://github.com/JuliaLinearAlgebra/Octavian.jl"},{"type":"text","text":" is a pretty good argument that modern Fortran can't compare. It's better than OpenBlas in about 2000 lines of code"}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR"},{"client_msg_id":"d38b650f-a73c-4367-a643-e1845a7168cf","type":"message","text":"there's very little to recommend fortran over julia","user":"UMDEUKM29","ts":"1616876215.489700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wvS/N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there's very little to recommend fortran over julia"}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR"},{"client_msg_id":"781a1793-c731-42a6-b178-909bac5b5b78","type":"message","text":"better tooling for HPC, static compilation, and that's it","user":"UMDEUKM29","ts":"1616876243.490300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lmn/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"better tooling for HPC, static compilation, and that's it"}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR"},{"client_msg_id":"A5AFFBF8-E0CB-4762-B038-1B90DAD6182D","type":"message","text":"Fortran is awesome, but multiple dispatch is life-changing","user":"UGU761DU2","ts":"1616876252.490500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sj8i","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Fortran is awesome, but multiple dispatch is life-changing"}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR"},{"client_msg_id":"6a5e6572-2e84-47d1-98da-b57a111cc521","type":"message","text":"Nice. Suggestion on Octavian <@U0179G7FG4F>","user":"U018K59MVSR","ts":"1616877225.491400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jGI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Nice. Suggestion on Octavian "},{"type":"user","user_id":"U0179G7FG4F"}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR"},{"client_msg_id":"26f8bab4-35eb-412a-90ec-3a6627d4e785","type":"message","text":"<@UMDEUKM29> Are you suggesting Fortran has better tooling for HPC or the reverse.","user":"U018K59MVSR","ts":"1616877275.491600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2q9","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UMDEUKM29"},{"type":"text","text":" Are you suggesting Fortran has better tooling for HPC or the reverse."}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR"},{"client_msg_id":"a92164eb-b0c8-4a99-a64e-93add9fc3d56","type":"message","text":"Fortran has better tooling","user":"UMDEUKM29","ts":"1616877287.491800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YqoJf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Fortran has better tooling"}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR"},{"client_msg_id":"728691c0-c7c8-43e1-9f2c-05e58bf30d49","type":"message","text":"Traditionally accepting clumsy languages that take forever to express simple things and forbid you from using abstractions was the price for performance, but that just isn't true anymore","user":"UMDEUKM29","ts":"1616877383.492000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zK=t","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Traditionally accepting clumsy languages that take forever to express simple things and forbid you from using abstractions was the price for performance, but that just isn't true anymore"}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR"},{"client_msg_id":"a6f36efa-92d6-44b8-83b5-e732740248d5","type":"message","text":"What finally convinced me to learn Julia was its automatic differentiation capabilities. It is incredibly easy to take derivatives, gradients, hessians, etc. of functions in Julia. From a control theory perspective, this is really useful when implementing gradient-based state-space control methods (e.g. higher-order control barrier functions). From a machine learning perspective, Julia's autodiff capabilities gives you a huge amount of flexibility and creativity for implementing learning methods in unexpected settings. For example, I like the <https://julialang.org/blog/2019/01/fluxdiffeq/|old post on the Julia blog> describing some of the work being done by the SciML organization where you can use Julia to autodiff through entire differential equation solvers.\n\nAutomatic differentiation has definitely been done in other languages, but in my opinion Julia has one of the most simple and elegant implementations.","user":"U01SFUPBJ9E","ts":"1616877791.492200","team":"T68168MUP","attachments":[{"title":"DiffEqFlux.jl – A Julia Library for Neural Differential Equations","title_link":"https://julialang.org/blog/2019/01/fluxdiffeq/","text":"DiffEqFlux.jl – A Julia Library for Neural Differential Equations...","fallback":"DiffEqFlux.jl – A Julia Library for Neural Differential Equations","image_url":"https://julialang.org/assets/images/julia-open-graph.png","from_url":"https://julialang.org/blog/2019/01/fluxdiffeq/","image_width":500,"image_height":250,"image_bytes":742374,"service_name":"julialang.org","id":1,"original_url":"https://julialang.org/blog/2019/01/fluxdiffeq/"}],"blocks":[{"type":"rich_text","block_id":"g6gKF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What finally convinced me to learn Julia was its automatic differentiation capabilities. It is incredibly easy to take derivatives, gradients, hessians, etc. of functions in Julia. From a control theory perspective, this is really useful when implementing gradient-based state-space control methods (e.g. higher-order control barrier functions). From a machine learning perspective, Julia's autodiff capabilities gives you a huge amount of flexibility and creativity for implementing learning methods in unexpected settings. For example, I like the "},{"type":"link","url":"https://julialang.org/blog/2019/01/fluxdiffeq/","text":"old post on the Julia blog"},{"type":"text","text":" describing some of the work being done by the SciML organization where you can use Julia to autodiff through entire differential equation solvers.\n\nAutomatic differentiation has definitely been done in other languages, but in my opinion Julia has one of the most simple and elegant implementations."}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR"},{"client_msg_id":"6f6a5757-c68b-4ff1-9219-e371dd6d403d","type":"message","text":"Absolutely spot on <@UMDEUKM29> Many would say Fortran is simple to write.","user":"U018K59MVSR","ts":"1616877800.492500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Oo6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Absolutely spot on "},{"type":"user","user_id":"UMDEUKM29"},{"type":"text","text":" Many would say Fortran is simple to write."}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR"},{"client_msg_id":"1c047903-0b1e-4382-8313-c90f18fb2b10","type":"message","text":"I would say julia and Fortran are about as simple to write for basic stuff. As soon as you start to have some structure, julia is much simpler","user":"UMDEUKM29","ts":"1616877934.492700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"thJ8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I would say julia and Fortran are about as simple to write for basic stuff. As soon as you start to have some structure, julia is much simpler"}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR","reactions":[{"name":"thumbsup_all","users":["U0179G7FG4F"],"count":1}]},{"client_msg_id":"2f68dfb2-2f4e-42b7-a9f4-e8712ef953a3","type":"message","text":"<@U01SFUPBJ9E> cool contribution. I will look into that AD stuff","user":"U018K59MVSR","ts":"1616877989.493000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Lz2","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01SFUPBJ9E"},{"type":"text","text":" cool contribution. I will look into that AD stuff"}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR","reactions":[{"name":"+1","users":["U01SFUPBJ9E"],"count":1}]},{"client_msg_id":"a1db2e78-0faf-4eee-ba97-c0336147bc23","type":"message","text":"Even basic linear algebra is a nightmare in Fortran","user":"UMDEUKM29","ts":"1616877995.493200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kKR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Even basic linear algebra is a nightmare in Fortran"}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR"},{"client_msg_id":"7e8ae50e-9296-4e80-8277-f277bc058494","type":"message","text":"I have never tried doing linear algebra in Fortran.","user":"U018K59MVSR","ts":"1616878468.493500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PTN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have never tried doing linear algebra in Fortran."}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR"},{"client_msg_id":"cdb2db86-28f3-4b82-9aa2-d8dc47332b76","type":"message","text":"Since most software/PL I used till date easily provide that. Interesting take <@UMDEUKM29>","user":"U018K59MVSR","ts":"1616878527.493700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"V7M","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Since most software/PL I used till date easily provide that. Interesting take "},{"type":"user","user_id":"UMDEUKM29"}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR"},{"client_msg_id":"a28fdfa4-93ed-4937-a8ad-bcbb2c874fb7","type":"message","text":"the basic problem is you need a different name for every different type combination. Given that there are probably 20 different types of matrices (regular, banded, blocked, symmetric, different element types, factorizations), that means that if you want every combination of 2 matrix types, that's 400 different function names. Good luck remembering all of them or reading code with that.","user":"U0179G7FG4F","ts":"1616878642.493900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Y4vsd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the basic problem is you need a different name for every different type combination. Given that there are probably 20 different types of matrices (regular, banded, blocked, symmetric, different element types, factorizations), that means that if you want every combination of 2 matrix types, that's 400 different function names. Good luck remembering all of them or reading code with that."}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR"},{"client_msg_id":"15a76c5e-d598-4c11-8c83-469d92b456c9","type":"message","text":"Oh try it, it's very fun","user":"UMDEUKM29","ts":"1616878654.494100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dzy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh try it, it's very fun"}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR"},{"client_msg_id":"03c97a5b-3a1a-49b1-b4b7-9b886ad24840","type":"message","text":"The most fun being the part where you have to explicitly give the dimensions of the matrices as well as the strides","user":"UMDEUKM29","ts":"1616878688.494300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"J=DF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The most fun being the part where you have to explicitly give the dimensions of the matrices as well as the strides"}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR"},{"client_msg_id":"0f95805f-0c1f-48f0-b5df-56be0ab55fc5","type":"message","text":"Holy Moly. I will check on that.","user":"U018K59MVSR","ts":"1616878713.494500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aOn=1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Holy Moly. I will check on that."}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR"},{"client_msg_id":"ac681f54-7adc-4991-b4c8-f67cd7b4903f","type":"message","text":"Which is very convenient when your operation involves three matrices","user":"UMDEUKM29","ts":"1616878720.494700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9H3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Which is very convenient when your operation involves three matrices"}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR"},{"client_msg_id":"40850aff-1b1b-445b-a138-4abcbeeb24bf","type":"message","text":"13 arguments for a matrix multiplication","user":"UMDEUKM29","ts":"1616878764.494900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HdpK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"13 arguments for a matrix multiplication"}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR"},{"client_msg_id":"24f8bd95-18c7-4457-8cef-65ab7c86aa13","type":"message","text":"Did I mention you get a segfault if you screw up on one of them?","user":"UMDEUKM29","ts":"1616878778.495100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"J=pp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Did I mention you get a segfault if you screw up on one of them?"}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR"},{"client_msg_id":"9bfa6bdc-492e-4a84-aaec-a045b9e0acfb","type":"message","text":"As well as if you give an integer where the library expects a float for the alpha and beta arguments","user":"UMDEUKM29","ts":"1616878846.495300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bnE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"As well as if you give an integer where the library expects a float for the alpha and beta arguments"}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR"},{"client_msg_id":"07edc6b0-4741-41cf-ae46-106b6195306e","type":"message","text":"Ah, good times","user":"UMDEUKM29","ts":"1616878850.495500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CP32I","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, good times"}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR"},{"client_msg_id":"e25bdcd8-ae4f-4ddd-a53c-951ba6e13363","type":"message","text":"Hahahahaha. O boy. I better beg my committee people to safe me the torture of complain.","user":"U018K59MVSR","ts":"1616879014.495700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BJ+7N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hahahahaha. O boy. I better beg my committee people to safe me the torture of complain."}]}]}],"thread_ts":"1616874546.487800","parent_user_id":"U018K59MVSR"}]