[{"client_msg_id":"b36baeef-e5d5-4295-88b8-507d8172a3aa","type":"message","text":"I don't really like teaming up with sinners (looking at you engineers) that take pleasure in redefining holy numbers like `π`  to, let's say, `π=3` but can anyone properly explain what is behind the Julia approach that, as long as we don't use `π` we can assign it to something else\n```# fire up a new Julias session\nπ = 3\n# Congratulations, Archimedes of Syracuse is now crying```\n```# fire up a new Julia session\npi = π\nπ = 3\n# Congratulations, Julia just saved you from hurting Archimedes of Syracuse```\nWhile writing this down I guess I kind of understand the approach, that is, allowing people who don't care what `π` really is being able to not have the symbol locked up to some irrational (pun) nonsense.\n\nBut why stop there then? I could be a masochist and not want `(+)`  defined as well...\n\n_1 minute of playing with the REPL later_\n\nHOLY SHIT, if you assign `(+)` before using any `Base` method you can also kill them\n```# fire up a new Julia session\n(+)(a...) = \"nope\"\n\n# Congratulations, you have now made all mathematicians cry```\nWriting this has been a revelation, I am in awe","user":"U01PLQWQXPV","ts":"1614879757.498600","team":"T68168MUP","edited":{"user":"U01PLQWQXPV","ts":"1614879826.000000"},"blocks":[{"type":"rich_text","block_id":"SRKeg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't really like teaming up with sinners (looking at you engineers) that take pleasure in redefining holy numbers like "},{"type":"text","text":"π","style":{"code":true}},{"type":"text","text":"  to, let's say, "},{"type":"text","text":"π=3","style":{"code":true}},{"type":"text","text":" but can anyone properly explain what is behind the Julia approach that, as long as we don't use "},{"type":"text","text":"π","style":{"code":true}},{"type":"text","text":" we can assign it to something else\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"# fire up a new Julias session\nπ = 3\n# Congratulations, Archimedes of Syracuse is now crying"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"# fire up a new Julia session\npi = π\nπ = 3\n# Congratulations, Julia just saved you from hurting Archimedes of Syracuse"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nWhile writing this down I guess I kind of understand the approach, that is, allowing people who don't care what "},{"type":"text","text":"π","style":{"code":true}},{"type":"text","text":" really is being able to not have the symbol locked up to some irrational (pun) nonsense.\n\nBut why stop there then? I could be a masochist and not want "},{"type":"text","text":"(+)","style":{"code":true}},{"type":"text","text":"  defined as well...\n\n"},{"type":"text","text":"1 minute of playing with the REPL later","style":{"italic":true}},{"type":"text","text":"\n\nHOLY SHIT, if you assign "},{"type":"text","text":"(+)","style":{"code":true}},{"type":"text","text":" before using any "},{"type":"text","text":"Base","style":{"code":true}},{"type":"text","text":" method you can also kill them\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"# fire up a new Julia session\n(+)(a...) = \"nope\"\n\n# Congratulations, you have now made all mathematicians cry"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nWriting this has been a revelation, I am in awe"}]}]}],"thread_ts":"1614879757.498600","reply_count":29,"reply_users_count":6,"latest_reply":"1614881699.008200","reply_users":["U01C3624SGJ","U01PLQWQXPV","U6A936746","U0179G7FG4F","U72B7LTMX","U8D9768Q6"],"subscribed":false},{"client_msg_id":"27dec606-9455-40ac-9a25-348480dca1dc","type":"message","text":"You can rewrite every method. Although rewriting base methods for base types is a good way to create some very hard to track bugs. <https://docs.julialang.org/en/v1/manual/style-guide/#Avoid-type-piracy>","user":"U01C3624SGJ","ts":"1614879931.499000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gvL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can rewrite every method. Although rewriting base methods for base types is a good way to create some very hard to track bugs. "},{"type":"link","url":"https://docs.julialang.org/en/v1/manual/style-guide/#Avoid-type-piracy"}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV"},{"client_msg_id":"2d146f4c-7f98-4796-bfea-05259b8d76de","type":"message","text":"Sure I can rewrite every method. But note that I did not have to import the `Base` method or change it directly with `Base.:+(...)` .\n\nI am very aware of type piracy but this simply surprised me because it went well beyond that, it completely bypassed `Base`","user":"U01PLQWQXPV","ts":"1614880129.499200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Zco","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sure I can rewrite every method. But note that I did not have to import the "},{"type":"text","text":"Base","style":{"code":true}},{"type":"text","text":" method or change it directly with "},{"type":"text","text":"Base.:+(...)","style":{"code":true}},{"type":"text","text":" .\n\nI am very aware of type piracy but this simply surprised me because it went well beyond that, it completely bypassed "},{"type":"text","text":"Base","style":{"code":true}}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV"},{"client_msg_id":"8029baac-9e35-4710-912b-48dbd4e370f8","type":"message","text":"The point is, if you use any method of the `Base` `(+)`  *before* you won't be able to completely redefine the `(+)` like this","user":"U01PLQWQXPV","ts":"1614880216.499600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Xmq4z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The point is, if you use any method of the "},{"type":"text","text":"Base","style":{"code":true}},{"type":"text","text":" "},{"type":"text","text":"(+)","style":{"code":true}},{"type":"text","text":"  "},{"type":"text","text":"before ","style":{"bold":true}},{"type":"text","text":"you won't be able to completely redefine the "},{"type":"text","text":"(+)","style":{"code":true}},{"type":"text","text":" like this"}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV"},{"client_msg_id":"2f11e9cd-2ad9-4f10-b984-2111ea14b0eb","type":"message","text":"You are not redefining them.\nYou are shadowing them.\nCreating a new local variable with a different diffinition.","user":"U6A936746","ts":"1614880245.499800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZUS6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You are not redefining them.\nYou are shadowing them.\nCreating a new local variable with a different diffinition."}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV","reactions":[{"name":"heavy_check_mark","users":["U8D9768Q6","U67G3QRJM","U67D54KS8","UN45LV5K6","U7THT3TM3"],"count":5},{"name":"today-i-learned","users":["U0138UTB7A4"],"count":1}]},{"client_msg_id":"1671dba4-d28b-45fd-9820-075efbcb235d","type":"message","text":"Until something that is imported (via `using`)is used for the first time  in a module.\n(including in Main)\nyou are allowed to declare  new variables that have those names,\nand your new ones will be selected.","user":"U6A936746","ts":"1614880395.000000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gWqKb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Until something that is imported (via "},{"type":"text","text":"using","style":{"code":true}},{"type":"text","text":")is used for the first time  in a module.\n(including in Main)\nyou are allowed to declare  new variables that have those names,\nand your new ones will be selected."}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV"},{"client_msg_id":"e1f80184-2d98-41f8-afc4-5952a0320183","type":"message","text":"If you check `methods(+)`  and `methods(Base.+)` after you do this you will see that they are different.","user":"U6A936746","ts":"1614880423.000200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"u3v2V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you check "},{"type":"text","text":"methods(+)","style":{"code":true}},{"type":"text","text":"  and "},{"type":"text","text":"methods(Base.+)","style":{"code":true}},{"type":"text","text":" after you do this you will see that they are different."}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV","reactions":[{"name":"point_up","users":["U72B7LTMX","U67G3QRJM","U7THT3TM3"],"count":3}]},{"client_msg_id":"d0b49770-3ec4-4e78-ae6f-a4c7c99f58d2","type":"message","text":"Thank you for correcting my imprecision.\n\nSo basically when I am in, let's say, `Main`, all the `Base` methods will be \"hidden\" until they are somehow used.\n\nFor example, I can completely redefine the `(*)`  operator in a new session without any warning.\n`(*)(a...) = \"nope\"`\n\nBut if I somehow inspect *BEFOREHAND* the methods of `(*)` with `methods((*))` I can no longer redefine it without warning","user":"U01PLQWQXPV","ts":"1614880702.000800","team":"T68168MUP","edited":{"user":"U01PLQWQXPV","ts":"1614880909.000000"},"blocks":[{"type":"rich_text","block_id":"CLU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thank you for correcting my imprecision.\n\nSo basically when I am in, let's say, "},{"type":"text","text":"Main","style":{"code":true}},{"type":"text","text":", all the "},{"type":"text","text":"Base","style":{"code":true}},{"type":"text","text":" methods will be \"hidden\" until they are somehow used.\n\nFor example, I can completely redefine the "},{"type":"text","text":"(*)","style":{"code":true}},{"type":"text","text":"  operator in a new session without any warning.\n"},{"type":"text","text":"(*)(a...) = \"nope\"","style":{"code":true}},{"type":"text","text":"\n\nBut if I somehow inspect "},{"type":"text","text":"BEFOREHAND ","style":{"bold":true}},{"type":"text","text":"the methods of "},{"type":"text","text":"(*)","style":{"code":true}},{"type":"text","text":" with "},{"type":"text","text":"methods((*))","style":{"code":true}},{"type":"text","text":" I can no longer redefine it without warning"}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV"},{"client_msg_id":"a766fc60-8531-4cfb-a955-de14da4e6824","type":"message","text":"<@U01PLQWQXPV> the basic reason for this is that this rule allows `Base` to define new things without potentially breaking user code. User code written before the new thing was exported will define things before using them. Thus they won't have their code broken by Base.","user":"U0179G7FG4F","ts":"1614880728.001000","team":"T68168MUP","edited":{"user":"U0179G7FG4F","ts":"1614880733.000000"},"blocks":[{"type":"rich_text","block_id":"zB7","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01PLQWQXPV"},{"type":"text","text":" the basic reason for this is that this rule allows "},{"type":"text","text":"Base","style":{"code":true}},{"type":"text","text":" to define new things without potentially breaking user code. User code written before the new thing was exported will define things before using them. Thus they won't have their code broken by Base."}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV"},{"client_msg_id":"675f788b-12a0-4cee-a86e-36ea05dcea28","type":"message","text":"You are still saying \"redefine\", which I think is not the best way to frame the behavior.","user":"U72B7LTMX","ts":"1614880741.001300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nRt0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You are still saying \"redefine\", which I think is not the best way to frame the behavior."}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV"},{"client_msg_id":"5dd0e000-a02a-4286-b051-30ac864fb261","type":"message","text":"Perhaps better to say  \"define\", in the namespace of `Main`.","user":"U72B7LTMX","ts":"1614880787.001800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aVL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Perhaps better to say  \"define\", in the namespace of "},{"type":"text","text":"Main","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV","reactions":[{"name":"thumbsup_all","users":["U01PLQWQXPV"],"count":1}]},{"client_msg_id":"3524ca4f-2740-4db3-a0f7-24de30677d01","type":"message","text":"The other definition is still present, in the namespace of `Base`. That's why it's not re-definition. I think of it as having more to do with how names are \"resolved\". An unqualified use of `\\pi` or  `+` usually resolves to the definition in `Base`. However, if you have definitions in `Main`, then they resolve to those.","user":"U72B7LTMX","ts":"1614880908.002300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Xh/4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The other definition is still present, in the namespace of "},{"type":"text","text":"Base","style":{"code":true}},{"type":"text","text":". That's why it's not re-definition. I think of it as having more to do with how names are \"resolved\". An unqualified use of "},{"type":"text","text":"\\pi","style":{"code":true}},{"type":"text","text":" or  "},{"type":"text","text":"+","style":{"code":true}},{"type":"text","text":" usually resolves to the definition in "},{"type":"text","text":"Base","style":{"code":true}},{"type":"text","text":". However, if you have definitions in "},{"type":"text","text":"Main","style":{"code":true}},{"type":"text","text":", then they resolve to those."}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV","reactions":[{"name":"today-i-learned","users":["U0138UTB7A4"],"count":1}]},{"client_msg_id":"26ccfa92-544a-46e1-be3a-fcd2646a6c9c","type":"message","text":"Here's a little demonstration of the fact that you haven't changed the bahaviour of `+` anywhere but your own module:\n```julia&gt; (+)(args...) = (*)(args...)\n+ (generic function with 1 method)\n\njulia&gt; 2 + 3\n6\n\njulia&gt; @eval Base 2 + 3\n5```\nYou can even still use the usual definition of `+` in your module like this\n```julia&gt; 2 + 3\n6\n\njulia&gt; Base.:(+)(2, 3)\n5```","user":"U8D9768Q6","ts":"1614880917.002600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eL11","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Here's a little demonstration of the fact that you haven't changed the bahaviour of "},{"type":"text","text":"+","style":{"code":true}},{"type":"text","text":" anywhere but your own module:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> (+)(args...) = (*)(args...)\n+ (generic function with 1 method)\n\njulia> 2 + 3\n6\n\njulia> @eval Base 2 + 3\n5"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"You can even still use the usual definition of "},{"type":"text","text":"+","style":{"code":true}},{"type":"text","text":" in your module like this\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> 2 + 3\n6\n\njulia> Base.:(+)(2, 3)\n5"}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV"},{"client_msg_id":"6141cb72-272c-4f51-90a3-22518946b359","type":"message","text":"Yeah, if you actually redefine `Base.:(+)`, say on `Int`, you'll almost immediately bork Julia. It will e.g. segfault.","user":"U72B7LTMX","ts":"1614880963.002800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"upQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, if you actually redefine "},{"type":"text","text":"Base.:(+)","style":{"code":true}},{"type":"text","text":", say on "},{"type":"text","text":"Int","style":{"code":true}},{"type":"text","text":", you'll almost immediately bork Julia. It will e.g. segfault."}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV","reactions":[{"name":"heavy_check_mark","users":["U8D9768Q6"],"count":1}]},{"client_msg_id":"45ce333c-b8d3-4d2e-a338-1c0d8ce91df7","type":"message","text":"```julia&gt; Base.:(+)(x::Int, y::Int) where {T} = \"bork\"\n\nfatal: error thrown and no exception handler available.\nMethodError(f=Base.isless, args=(2, \"bork\"), world=0x0000000000006ca3)\njl_method_error_bare at /Users/julia/buildbot/worker/package_macos64/build/src/gf.c:1798\njl_method_error at /Users/julia/buildbot/worker/package_macos64/build/src/gf.c:1816```","user":"U72B7LTMX","ts":"1614881028.003000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+vZ","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Base.:(+)(x::Int, y::Int) where {T} = \"bork\"\n\nfatal: error thrown and no exception handler available.\nMethodError(f=Base.isless, args=(2, \"bork\"), world=0x0000000000006ca3)\njl_method_error_bare at /Users/julia/buildbot/worker/package_macos64/build/src/gf.c:1798\njl_method_error at /Users/julia/buildbot/worker/package_macos64/build/src/gf.c:1816"}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV"},{"client_msg_id":"5c60219a-1c4a-4f33-b969-0dc935e63d85","type":"message","text":"There are actually some contexts where this is a really nice little property to take advantage of. For instance, I sometimes find myself writing things like\n```julia&gt; let (≈)(x, y) = isapprox(x, y; rtol=1e-2) \n           1.001 ≈ 1.0\n       end\ntrue```","user":"U8D9768Q6","ts":"1614881074.003200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HuB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There are actually some contexts where this is a really nice little property to take advantage of. For instance, I sometimes find myself writing things like\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> let (≈)(x, y) = isapprox(x, y; rtol=1e-2) \n           1.001 ≈ 1.0\n       end\ntrue"}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV"},{"client_msg_id":"3b85d806-daa8-4a63-b64a-5ecc19ba9a10","type":"message","text":"(It's very \"Smalltalk\" in that way.)","user":"U72B7LTMX","ts":"1614881094.003500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W071","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(It's very \"Smalltalk\" in that way.)"}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV"},{"client_msg_id":"43e7e0a8-93b2-476b-8008-79bda71c3f76","type":"message","text":"Sure, I completely botched terminologies here and in no way I thought my `(+)`  was overwriting Julia's Base (which would of course break basic internal operations).\n\nWhat was at the end surprising to me was that as long as I didn't use any `(+)` method, in this simple example, from Base, I would simply be allowed to bind anything to that symbol","user":"U01PLQWQXPV","ts":"1614881249.004100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fTtQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sure, I completely botched terminologies here and in no way I thought my "},{"type":"text","text":"(+)","style":{"code":true}},{"type":"text","text":"  was overwriting Julia's Base (which would of course break basic internal operations).\n\nWhat was at the end surprising to me was that as long as I didn't use any "},{"type":"text","text":"(+)","style":{"code":true}},{"type":"text","text":" method, in this simple example, from Base, I would simply be allowed to bind anything to that symbol"}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV"},{"client_msg_id":"5a7466bb-5be2-4598-be3f-66b063337405","type":"message","text":"Ah I see. Yeah, I'm a big fan of this behaviour personally. It's directly in line with how we handle other nested scopes as well.","user":"U8D9768Q6","ts":"1614881310.004400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GXd0+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah I see. Yeah, I'm a big fan of this behaviour personally. It's directly in line with how we handle other nested scopes as well."}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV","reactions":[{"name":"+1","users":["U72B7LTMX"],"count":1}]},{"client_msg_id":"77e3701b-ce4b-43b3-81d8-4325bc84dd3f","type":"message","text":"Yeah, julia very much takes the approach of \"If you really want to, we won't stop you\"","user":"U0179G7FG4F","ts":"1614881336.004600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nGZB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, julia very much takes the approach of \"If you really want to, we won't stop you\""}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV"},{"client_msg_id":"12b21c7b-beb3-4f67-ac4d-b913bf735c0b","type":"message","text":"I see it as fundamentally the same as this behaviour:\n```julia&gt; x = 1\n1\n\njulia&gt; let \n           x\n       end\n1\n\njulia&gt; let \n           x = 2\n           x\n       end\n2\n\njulia&gt; x\n1```","user":"U8D9768Q6","ts":"1614881358.004800","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1614881407.000000"},"blocks":[{"type":"rich_text","block_id":"AmN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see it as fundamentally the same as this behaviour:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> x = 1\n1\n\njulia> let \n           x\n       end\n1\n\njulia> let \n           x = 2\n           x\n       end\n2\n\njulia> x\n1"}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV"},{"client_msg_id":"6fb367e3-9067-4944-8151-e561b55f5f56","type":"message","text":"Of actually, `let` is maybe a bad example here because it has this particularly horrifying behavior:\n```julia&gt; let\n           x = 2\n           let\n               x = 3\n           end\n           x\n       end\n3```\nI really wish that `let` was just syntax for creating and immediately evaluating an anonynous function instead of this weird crap.","user":"U8D9768Q6","ts":"1614881526.005400","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1614881577.000000"},"blocks":[{"type":"rich_text","block_id":"EkIb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Of actually, "},{"type":"text","text":"let","style":{"code":true}},{"type":"text","text":" is maybe a bad example here because it has this particularly horrifying behavior:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> let\n           x = 2\n           let\n               x = 3\n           end\n           x\n       end\n3"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I really wish that "},{"type":"text","text":"let","style":{"code":true}},{"type":"text","text":" was just syntax for creating and immediately evaluating an anonynous function instead of this weird crap."}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV","reactions":[{"name":"100","users":["U6A936746"],"count":1},{"name":"coffin","users":["U01PLQWQXPV"],"count":1}]},{"client_msg_id":"e8feb3d6-5819-4744-8d78-03685273922b","type":"message","text":"<@U01PLQWQXPV> I agree it's surprising, but I'm also a fan.","user":"U72B7LTMX","ts":"1614881544.005600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VLg","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01PLQWQXPV"},{"type":"text","text":" I agree it's surprising, but I'm also a fan."}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV"},{"client_msg_id":"1bf1623f-0024-476c-999e-94fc5bd8f5f4","type":"message","text":"I guess it's just a side-effect from knowing other languages where some symbols (namely the ones used as operators) are basically \"system locked\". Suddenly here you are given all this freedom [and thus responsibility] and forget that being able to do `(+)(a...) = \"I refuse to compute\"` without any warning is actually completely ok and expected","user":"U01PLQWQXPV","ts":"1614881547.005800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g2G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess it's just a side-effect from knowing other languages where some symbols (namely the ones used as operators) are basically \"system locked\". Suddenly here you are given all this freedom [and thus responsibility] and forget that being able to do "},{"type":"text","text":"(+)(a...) = \"I refuse to compute\"","style":{"code":true}},{"type":"text","text":" without any warning is actually completely ok and expected"}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV"},{"client_msg_id":"e4db191c-8acc-4f1b-8746-29742583950f","type":"message","text":"wait. What the hell is that?","user":"U0179G7FG4F","ts":"1614881550.006000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eSpSA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"wait. What the hell is that?"}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV"},{"client_msg_id":"ba137ed3-5132-4b98-80e9-c891d77479ed","type":"message","text":"<@U8D9768Q6> ah, yeah. there are two kinds of scope introducing things. e.g. `begin` and `let` are different. I forgot the names to distinguish them...\n\n[EDIT] never mind, `begin` has the same behavior...","user":"U72B7LTMX","ts":"1614881573.006400","team":"T68168MUP","edited":{"user":"U72B7LTMX","ts":"1614881648.000000"},"blocks":[{"type":"rich_text","block_id":"c6E","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U8D9768Q6"},{"type":"text","text":" ah, yeah. there are two kinds of scope introducing things. e.g. "},{"type":"text","text":"begin","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"let","style":{"code":true}},{"type":"text","text":" are different. I forgot the names to distinguish them...\n\n[EDIT] never mind, "},{"type":"text","text":"begin","style":{"code":true}},{"type":"text","text":" has the same behavior..."}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV"},{"client_msg_id":"21d9c0a1-fccc-4d84-89d8-2d5f62455838","type":"message","text":"`let` is bullshit sometimes.","user":"U8D9768Q6","ts":"1614881600.007000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XKJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"let","style":{"code":true}},{"type":"text","text":" is bullshit sometimes."}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV","reactions":[{"name":"point_up","users":["U6A936746","U0179G7FG4F"],"count":2}]},{"client_msg_id":"f1875a13-925c-49b0-9691-9f31533dbc0b","type":"message","text":"(Perhaps a good candidate for your idea of a magic-show presentation / julia WAT)","user":"U72B7LTMX","ts":"1614881601.007200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nEXDJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(Perhaps a good candidate for your idea of a magic-show presentation / julia WAT)"}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV"},{"client_msg_id":"8454b836-b2ff-47b8-8dee-e774e8acc1d7","type":"message","text":"I had used julia for like 6 years before i realized that where you put newlines in a let block *really* mattered.","user":"U6A936746","ts":"1614881665.007900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cy4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I had used julia for like 6 years before i realized that where you put newlines in a let block "},{"type":"text","text":"really","style":{"bold":true}},{"type":"text","text":" mattered."}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV"},{"client_msg_id":"b79afb71-a3ba-47a4-a40e-b331e55e238c","type":"message","text":"```julia&gt; begin\n           x = 2\n           begin\n               x = 3\n           end\n           x\n       end\n\n3```","user":"U72B7LTMX","ts":"1614881699.008200","team":"T68168MUP","edited":{"user":"U72B7LTMX","ts":"1614881776.000000"},"blocks":[{"type":"rich_text","block_id":"Us/D","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> begin\n           x = 2\n           begin\n               x = 3\n           end\n           x\n       end\n\n3"}]}]}],"thread_ts":"1614879757.498600","parent_user_id":"U01PLQWQXPV"}]