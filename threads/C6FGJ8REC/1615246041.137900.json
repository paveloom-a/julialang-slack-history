[{"client_msg_id":"6f5117a0-63f2-4a1e-b852-f0cae3a5b4af","type":"message","text":"<@UK1BNFHFV> for Chain.jl.\n\nIt's a really nice example of having existing workflows that were limiting, someone coming along and understanding the pain points, and creating a really nice solution that fills all needs. See this issue in DataFramesMeta recently: <https://github.com/JuliaData/DataFramesMeta.jl/issues/232>","user":"UBF9YRB6H","ts":"1615246041.137900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yon","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UK1BNFHFV"},{"type":"text","text":" for Chain.jl.\n\nIt's a really nice example of having existing workflows that were limiting, someone coming along and understanding the pain points, and creating a really nice solution that fills all needs. See this issue in DataFramesMeta recently: "},{"type":"link","url":"https://github.com/JuliaData/DataFramesMeta.jl/issues/232"}]}]}],"thread_ts":"1615246041.137900","reply_count":9,"reply_users_count":4,"latest_reply":"1615283410.000800","reply_users":["UBF9YRB6H","U6C937ENB","UK1BNFHFV","U013V2CFZAN"],"subscribed":false,"reactions":[{"name":"heavy_plus_sign","users":["U019K6Q9N15","UKG4WF8PJ","UGR3910CQ"],"count":3},{"name":"chains","users":["UDB26738Q","UGU761DU2"],"count":2}]},{"client_msg_id":"591dbe29-da45-4cf7-81f0-4c7262ae033c","type":"message","text":"lol except that particular example doesn't actually work. still appreciate Chain.jl!","user":"UBF9YRB6H","ts":"1615246218.138200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6CC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"lol except that particular example doesn't actually work. still appreciate Chain.jl!"}]}]}],"thread_ts":"1615246041.137900","parent_user_id":"UBF9YRB6H","reactions":[{"name":"sweat_smile","users":["UDB26738Q"],"count":1}]},{"client_msg_id":"510ABC46-288A-4301-8E83-AC4252DCB23A","type":"message","text":"<https://github.com/jkrumbiegel/Chain.jl|https://github.com/jkrumbiegel/Chain.jl>","user":"U6C937ENB","ts":"1615246335.138600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DMS","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/jkrumbiegel/Chain.jl","text":"https://github.com/jkrumbiegel/Chain.jl"}]}]}],"thread_ts":"1615246041.137900","parent_user_id":"UBF9YRB6H"},{"type":"message","subtype":"thread_broadcast","text":"Thanks :) the macro makes a let block, so your variable doesn't escape, but you can get the variable out of the let block with the usual tricks I think. For example by writing `local n`before to declare the variable","user":"UK1BNFHFV","ts":"1615254742.003100","thread_ts":"1615246041.137900","root":{"client_msg_id":"6f5117a0-63f2-4a1e-b852-f0cae3a5b4af","type":"message","text":"<@UK1BNFHFV> for Chain.jl.\n\nIt's a really nice example of having existing workflows that were limiting, someone coming along and understanding the pain points, and creating a really nice solution that fills all needs. See this issue in DataFramesMeta recently: <https://github.com/JuliaData/DataFramesMeta.jl/issues/232>","user":"UBF9YRB6H","ts":"1615246041.137900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yon","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UK1BNFHFV"},{"type":"text","text":" for Chain.jl.\n\nIt's a really nice example of having existing workflows that were limiting, someone coming along and understanding the pain points, and creating a really nice solution that fills all needs. See this issue in DataFramesMeta recently: "},{"type":"link","url":"https://github.com/JuliaData/DataFramesMeta.jl/issues/232"}]}]}],"thread_ts":"1615246041.137900","reply_count":9,"reply_users_count":4,"latest_reply":"1615283410.000800","reply_users":["UBF9YRB6H","U6C937ENB","UK1BNFHFV","U013V2CFZAN"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"TME+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks :) the macro makes a let block, so your variable doesn't escape, but you can get the variable out of the let block with the usual tricks I think. For example by writing "},{"type":"text","text":"local ","style":{"code":true}},{"type":"text","text":"n","style":{"code":true}},{"type":"text","text":"before to declare the variable"}]}]}],"client_msg_id":"C6B59BEF-15CF-4455-9F4B-F4BB99038190","edited":{"user":"UK1BNFHFV","ts":"1615254876.000000"}},{"client_msg_id":"749A445B-1258-425C-8347-22A6AB75AC18","type":"message","text":"Maybe there are other ways, but if this is important to you, we can think about adding that feature with a @var macro or something","user":"UK1BNFHFV","ts":"1615254948.005000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iJzt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe there are other ways, but if this is important to you, we can think about adding that feature with a @var macro or something"}]}]}],"thread_ts":"1615246041.137900","parent_user_id":"UBF9YRB6H"},{"client_msg_id":"ed68e154-ef39-4c43-96cd-b0746bb7814f","type":"message","text":"I don't think it's that important (the OP can just add assignment at the top)\n\nI think its really just impossible given julia's semantics. We don't know what the \"outside\" scope is and we can't write macros that \"look backwards\".","user":"UBF9YRB6H","ts":"1615255219.005200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LFWWF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't think it's that important (the OP can just add assignment at the top)\n\nI think its really just impossible given julia's semantics. We don't know what the \"outside\" scope is and we can't write macros that \"look backwards\"."}]}]}],"thread_ts":"1615246041.137900","parent_user_id":"UBF9YRB6H"},{"client_msg_id":"2DF92810-15A9-43CC-91E5-9DAB760328A7","type":"message","text":"Hm thinking a bit more about this, I guess it would be possible to just change the let block to a begin block. I mean, all the variables I create are gensym'd so they won't conflict anway. I just picked let at the time because it seemed nicely contained, but actually it doesn't have a tangible benefit I think. If you get your variable assignment with a change to begin, why not do that","user":"UK1BNFHFV","ts":"1615255455.008700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4LKvV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hm thinking a bit more about this, I guess it would be possible to just change the let block to a begin block. I mean, all the variables I create are gensym'd so they won't conflict anway. I just picked let at the time because it seemed nicely contained, but actually it doesn't have a tangible benefit I think. If you get your variable assignment with a change to begin, why not do that"}]}]}],"thread_ts":"1615246041.137900","parent_user_id":"UBF9YRB6H"},{"client_msg_id":"6488976D-A72D-453A-A309-D5376FD608BC","type":"message","text":"Although that would add tons of these variables to the global scope at the repl after a while.. Don't know if that can have adverse effects. Just seems messy :)","user":"UK1BNFHFV","ts":"1615255756.010600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=qB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Although that would add tons of these variables to the global scope at the repl after a while.. Don't know if that can have adverse effects. Just seems messy :)"}]}]}],"thread_ts":"1615246041.137900","parent_user_id":"UBF9YRB6H"},{"client_msg_id":"82822c7d-7db1-4287-8e14-1e04e61ef55d","type":"message","text":"no i definitely like the encapsulation\n\nplus, having a `let` makes `@aside` a lot easier","user":"UBF9YRB6H","ts":"1615260196.000100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4xv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no i definitely like the encapsulation\n\nplus, having a "},{"type":"text","text":"let","style":{"code":true}},{"type":"text","text":" makes "},{"type":"text","text":"@aside","style":{"code":true}},{"type":"text","text":" a lot easier"}]}]}],"thread_ts":"1615246041.137900","parent_user_id":"UBF9YRB6H"},{"client_msg_id":"d6538f5f-9c9c-4fb6-81d6-6146791c1839","type":"message","text":"hmm... interesting ... I didn't know about this package and I have been starting to use `Pipe.jl` instead of `Lazy.jl` ... but `Chain.jl` seems useful as well","user":"U013V2CFZAN","ts":"1615283410.000800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nC/6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmm... interesting ... I didn't know about this package and I have been starting to use "},{"type":"text","text":"Pipe.jl","style":{"code":true}},{"type":"text","text":" instead of "},{"type":"text","text":"Lazy.jl","style":{"code":true}},{"type":"text","text":" ... but "},{"type":"text","text":"Chain.jl","style":{"code":true}},{"type":"text","text":" seems useful as well"}]}]}],"thread_ts":"1615246041.137900","parent_user_id":"UBF9YRB6H"}]