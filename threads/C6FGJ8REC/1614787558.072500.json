[{"client_msg_id":"49442389-a462-4e43-85bb-a6cd443e7b3e","type":"message","text":"I did a job interview task over the weekend. Did it in R because that's what I have been using in my job for the past 4 years and I'm just a lot more fluent in it right now. The second task was a nice little one about simulating some computing resource requirement, based on log data and some rules for when resources got allocated. I thought \"I'll just write it in R because I'm working in it right now. The runtime doesn't matter and it can't be THAT slow, right?\" It ran half the night – when I rewrote it in Julia the next day it took like 3 seconds","user":"U7EF5AWHW","ts":"1614787558.072500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9DlG5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I did a job interview task over the weekend. Did it in R because that's what I have been using in my job for the past 4 years and I'm just a lot more fluent in it right now. The second task was a nice little one about simulating some computing resource requirement, based on log data and some rules for when resources got allocated. I thought \"I'll just write it in R because I'm working in it right now. The runtime doesn't matter and it can't be THAT slow, right?\" It ran half the night – when I rewrote it in Julia the next day it took like 3 seconds"}]}]}],"thread_ts":"1614787558.072500","reply_count":12,"reply_users_count":7,"latest_reply":"1614797555.078400","reply_users":["U6QGE7S86","U7EF5AWHW","U0179G7FG4F","U67431ELR","USU9FRPEU","UBF9YRB6H","UBGRZ7FSP"],"subscribed":false,"reactions":[{"name":"+1::skin-tone-5","users":["U6QGE7S86","U6795JH6H","UKG4WF8PJ","U69HXAL7P"],"count":4},{"name":"fast_parrot","users":["U6740K1SP","U8T0YV7QC","UDB26738Q","U687RKK0E","UC53031QU","U0138UTB7A4","USU9FRPEU","U6A936746","U6795JH6H","U67G3QRJM","U82LX4ACB","ULUC3K6M6","UKG4WF8PJ","U66QZ3QF3","UGU761DU2"],"count":15}]},{"client_msg_id":"02afe7d6-ae75-4ac8-aaf7-dbb82d993304","type":"message","text":"Awesome!","user":"U6QGE7S86","ts":"1614788076.072900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L6GEV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Awesome!"}]}]}],"thread_ts":"1614787558.072500","parent_user_id":"U7EF5AWHW"},{"client_msg_id":"557e6342-b1f3-41c0-8687-6a740ac7969c","type":"message","text":"What do you think was the bottleneck with R?","user":"U6QGE7S86","ts":"1614788083.073100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tMj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What do you think was the bottleneck with R?"}]}]}],"thread_ts":"1614787558.072500","parent_user_id":"U7EF5AWHW"},{"client_msg_id":"2c00ef9d-2fcd-4d7a-9289-d47fd7451c75","type":"message","text":"Are there some well known pitfalls about processing string logs in R?","user":"U6QGE7S86","ts":"1614788103.073300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eZyG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Are there some well known pitfalls about processing string logs in R?"}]}]}],"thread_ts":"1614787558.072500","parent_user_id":"U7EF5AWHW"},{"client_msg_id":"2b2ea680-d378-4695-9838-693418051511","type":"message","text":"For loops are notoriously slow in R, and I was allocating a list within each loop in order to keep track of some state that got updated for each row in the file. Not much more to it than that! To make that sort of thing fast in R I would either have to fall back to C++, or rewrite the algorithm in some sort of vectorised way, maybe using functions like cumsum. I knew for loops were slow in R and avoid them for that reason, but it stunned me how slow it really was when I tried! R is fantastic for working with data frames but as soon as you try to loop over the rows, hooooo boy","user":"U7EF5AWHW","ts":"1614788368.073600","team":"T68168MUP","edited":{"user":"U7EF5AWHW","ts":"1614788430.000000"},"blocks":[{"type":"rich_text","block_id":"gbLvn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For loops are notoriously slow in R, and I was allocating a list within each loop in order to keep track of some state that got updated for each row in the file. Not much more to it than that! To make that sort of thing fast in R I would either have to fall back to C++, or rewrite the algorithm in some sort of vectorised way, maybe using functions like cumsum. I knew for loops were slow in R and avoid them for that reason, but it stunned me how slow it really was when I tried! R is fantastic for working with data frames but as soon as you try to loop over the rows, hooooo boy"}]}]}],"thread_ts":"1614787558.072500","parent_user_id":"U7EF5AWHW"},{"client_msg_id":"d313944e-c2a1-49c9-b0c0-9fe45cdad1a5","type":"message","text":"Oh gotcha","user":"U6QGE7S86","ts":"1614788513.073900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9FS4v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh gotcha"}]}]}],"thread_ts":"1614787558.072500","parent_user_id":"U7EF5AWHW"},{"client_msg_id":"010cf7a5-5f9e-49e3-9db0-f026a1b22ef3","type":"message","text":"Really odd to make loops slow in a computer language :slow_parrot:","user":"U6QGE7S86","ts":"1614788548.074100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eWGSC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Really odd to make loops slow in a computer language "},{"type":"emoji","name":"slow_parrot"}]}]}],"thread_ts":"1614787558.072500","parent_user_id":"U7EF5AWHW"},{"client_msg_id":"3ace7731-bffb-46c3-974e-e68fd8aba28f","type":"message","text":"Loops are really slow in a lot of interpreted languages. Python has a similar issue (although iirc python loops are still ~10x faster than R loops)","user":"U0179G7FG4F","ts":"1614788662.074500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d=K","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Loops are really slow in a lot of interpreted languages. Python has a similar issue (although iirc python loops are still ~10x faster than R loops)"}]}]}],"thread_ts":"1614787558.072500","parent_user_id":"U7EF5AWHW"},{"client_msg_id":"6c2e1733-80b9-496c-9ef9-5cd369c7fd10","type":"message","text":"Damn, we really are spoiled.","user":"U6QGE7S86","ts":"1614788712.074700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bCb1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Damn, we really are spoiled."}]}]}],"thread_ts":"1614787558.072500","parent_user_id":"U7EF5AWHW","reactions":[{"name":"this-is-true","users":["UGU761DU2"],"count":1}]},{"client_msg_id":"d28417c2-e935-45bf-90f0-3dd940d33b27","type":"message","text":"Reallocating a list at each iteration may be even slower than for loops. Maybe there's a structure in R that allows doing the equivalent of `push!`?","user":"U67431ELR","ts":"1614789728.075000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Rkksf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Reallocating a list at each iteration may be even slower than for loops. Maybe there's a structure in R that allows doing the equivalent of "},{"type":"text","text":"push!","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1614787558.072500","parent_user_id":"U7EF5AWHW"},{"client_msg_id":"9efba095-f877-45be-8f6d-d3eff52db4b2","type":"message","text":"Like other interpreted languages, we might be able to find some tricks to make it work. However, the refreshing thing about Julia is that we don't have to resort to arbitrary tricks.","user":"USU9FRPEU","ts":"1614792469.077000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RcOO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Like other interpreted languages, we might be able to find some tricks to make it work. However, the refreshing thing about Julia is that we don't have to resort to arbitrary tricks."}]}]}],"thread_ts":"1614787558.072500","parent_user_id":"U7EF5AWHW"},{"client_msg_id":"d40d420f-3a92-4675-873f-4ab2083b8e09","type":"message","text":"I looked into this recently and I think `list[[\"x\"]] = y` updates in-place","user":"UBF9YRB6H","ts":"1614793918.077600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"prn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I looked into this recently and I think "},{"type":"text","text":"list[[\"x\"]] = y","style":{"code":true}},{"type":"text","text":" updates in-place"}]}]}],"thread_ts":"1614787558.072500","parent_user_id":"U7EF5AWHW"},{"client_msg_id":"b8cd02f7-9319-42a8-83d9-c39157204ff5","type":"message","text":"Internally R's structures are not conducive to looping other than by using the `apply` family.\n1. Everything is a vector.  Internally there are only 4 types of structures for data and they are all fixed-length vectors.  You can have a vector of 64-bit floats, a vector of 32-bit ints (logical values are stored as 32-bit ints), a vector of character strings or a vector of pointers to other vectors (called a list in R).\n2. All vectors are fixed length.  To add elements to a vector you end up copying the current contents to a new location.\n3. R's concept of lazy evaluation makes it extremely difficult to do things like byte compilation.  (There is a byte compiler but it doesn't usually give you a big speed boost.)\n4. R uses sentinels for missing data representation and every data type can have missing data.  This means that every operation on a vector has to check every element to see if it is missing before operating on it.\nThe `apply` family of functions, such as `lapply` , are a functional programming style and thus can determine the size and structure of the result before starting the loop.","user":"UBGRZ7FSP","ts":"1614797555.078400","team":"T68168MUP","edited":{"user":"UBGRZ7FSP","ts":"1614798181.000000"},"blocks":[{"type":"rich_text","block_id":"B2KV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Internally R's structures are not conducive to looping other than by using the "},{"type":"text","text":"apply","style":{"code":true}},{"type":"text","text":" family.\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Everything is a vector.  Internally there are only 4 types of structures for data and they are all fixed-length vectors.  You can have a vector of 64-bit floats, a vector of 32-bit ints (logical values are stored as 32-bit ints), a vector of character strings or a vector of pointers to other vectors (called a list in R)."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"All vectors are fixed length.  To add elements to a vector you end up copying the current contents to a new location."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"R's concept of lazy evaluation makes it extremely difficult to do things like byte compilation.  (There is a byte compiler but it doesn't usually give you a big speed boost.)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"R uses sentinels for missing data representation and every data type can have missing data.  This means that every operation on a vector has to check every element to see if it is missing before operating on it."}]}],"style":"ordered","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"The "},{"type":"text","text":"apply","style":{"code":true}},{"type":"text","text":" family of functions, such as "},{"type":"text","text":"lapply","style":{"code":true}},{"type":"text","text":" , are a functional programming style and thus can determine the size and structure of the result before starting the loop."}]}]}],"thread_ts":"1614787558.072500","parent_user_id":"U7EF5AWHW","reactions":[{"name":"heart","users":["U6795JH6H","U6QGE7S86","UB7JS9CHF","UCTJ1TGBV"],"count":4},{"name":"point_up","users":["UAUCGGD6C"],"count":1}]}]