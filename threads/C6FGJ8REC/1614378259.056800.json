[{"client_msg_id":"4e4de803-e01b-4618-9604-8810abd2b7a9","type":"message","text":"<@U681ELA87> for re-architecting plumbing in the Julia datasphere that I’ll never understand in order to add my pet feature request. Thanks to his hard work, JSON3.jl (via Strapping.jl) now supports importing of nested JSON structures in the manner of Panda’s `pd.json_normalize()` and is faster than Python to boot!","user":"ULY5YL9F1","ts":"1614378259.056800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Fv7S","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U681ELA87"},{"type":"text","text":" for re-architecting plumbing in the Julia datasphere that I’ll never understand in order to add my pet feature request. Thanks to his hard work, JSON3.jl (via Strapping.jl) now supports importing of nested JSON structures in the manner of Panda’s "},{"type":"text","text":"pd.json_normalize()","style":{"code":true}},{"type":"text","text":" and is faster than Python to boot!"}]}]}],"thread_ts":"1614378259.056800","reply_count":1,"reply_users_count":1,"latest_reply":"1614381621.057800","reply_users":["U681ELA87"],"subscribed":false,"reactions":[{"name":"quinnj","users":["U7THT3TM3","U6A936746","U9YTNSWCA","UDXST8ARK","UCAFZ51L3","U9VG1AYSG","UGR3910CQ","U687RKK0E"],"count":8}]},{"type":"message","subtype":"thread_broadcast","text":"Ok, let's nerd out for a second, not only does all the functionality give a faster equivalent as `pd.json_normalize`, but it:\n• Works generically on any nesting `AbstractDict` (including `JSON3.Object`) _or_ custom Julia struct that has `StructTypes.Struct` or `StructTypes.Mutable` defined\n• If the object (AbstractDict or struct) has a `StructTypes.ArrayType` field (like any `AbstractArray` or `JSON3.Array`), `Strapping.deconstruct` will also \"unroll\" the collection field, one row per collection element, automatically repeating non-collection fields (this is a typical database normalization feature)\n• The normalized data can be materialized by _any_ Tables.jl-compatible sink; not just `DataFrame`. You could send the data to any compatible database, file format (arrow, csv, etc.), or in-memory table (DataFrame, TypedTable, JuliaDB.Table, etc.).\nAnd yes, it took some refactoring of several packages involved, but it was all accomplished in a couple of days by one developer. I just think exercises like this are such a huge selling point of ecosystem development for Julia.","user":"U681ELA87","ts":"1614381621.057800","thread_ts":"1614378259.056800","root":{"client_msg_id":"4e4de803-e01b-4618-9604-8810abd2b7a9","type":"message","text":"<@U681ELA87> for re-architecting plumbing in the Julia datasphere that I’ll never understand in order to add my pet feature request. Thanks to his hard work, JSON3.jl (via Strapping.jl) now supports importing of nested JSON structures in the manner of Panda’s `pd.json_normalize()` and is faster than Python to boot!","user":"ULY5YL9F1","ts":"1614378259.056800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Fv7S","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U681ELA87"},{"type":"text","text":" for re-architecting plumbing in the Julia datasphere that I’ll never understand in order to add my pet feature request. Thanks to his hard work, JSON3.jl (via Strapping.jl) now supports importing of nested JSON structures in the manner of Panda’s "},{"type":"text","text":"pd.json_normalize()","style":{"code":true}},{"type":"text","text":" and is faster than Python to boot!"}]}]}],"thread_ts":"1614378259.056800","reply_count":1,"reply_users_count":1,"latest_reply":"1614381621.057800","reply_users":["U681ELA87"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"bDr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok, let's nerd out for a second, not only does all the functionality give a faster equivalent as "},{"type":"text","text":"pd.json_normalize","style":{"code":true}},{"type":"text","text":", but it:\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Works generically on any nesting "},{"type":"text","text":"AbstractDict","style":{"code":true}},{"type":"text","text":" (including "},{"type":"text","text":"JSON3.Object","style":{"code":true}},{"type":"text","text":") "},{"type":"text","text":"or","style":{"italic":true}},{"type":"text","text":" custom Julia struct that has "},{"type":"text","text":"StructTypes.Struct","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"StructTypes.Mutable","style":{"code":true}},{"type":"text","text":" defined"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"If the object (AbstractDict or struct) has a "},{"type":"text","text":"StructTypes.ArrayType","style":{"code":true}},{"type":"text","text":" field (like any "},{"type":"text","text":"AbstractArray","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"JSON3.Array","style":{"code":true}},{"type":"text","text":"), "},{"type":"text","text":"Strapping.deconstruct","style":{"code":true}},{"type":"text","text":" will also \"unroll\" the collection field, one row per collection element, automatically repeating non-collection fields (this is a typical database normalization feature)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"The normalized data can be materialized by "},{"type":"text","text":"any","style":{"italic":true}},{"type":"text","text":" Tables.jl-compatible sink; not just "},{"type":"text","text":"DataFrame","style":{"code":true}},{"type":"text","text":". You could send the data to any compatible database, file format (arrow, csv, etc.), or in-memory table (DataFrame, TypedTable, JuliaDB.Table, etc.)."}]}],"style":"bullet","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"\nAnd yes, it took some refactoring of several packages involved, but it was all accomplished in a couple of days by one developer. I just think exercises like this are such a huge selling point of ecosystem development for Julia."}]}]}],"client_msg_id":"14a580c2-b02c-48f8-8b54-6d682c345faf","reactions":[{"name":"heart","users":["U6A936746","ULY5YL9F1","U01HD5VFXJM","UDXST8ARK","U017J1FHTSA","U6C5KSWAC","UM30MT6RF","U01724Q3PGW","U69BK8S74","UCAFZ51L3","U6QGE7S86"],"count":11}]}]