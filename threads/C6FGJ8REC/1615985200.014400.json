[{"client_msg_id":"de151ff8-7bd2-44cc-a20f-66139cac02ed","type":"message","text":"We all know how much work was put into it broadcasting and views, but it still surprised me today when a custom setter achieved the very same performance as a simple `setindex!` call\n\n```function setter(x)\n  for i in eachindex(x)\n    x[i] = 1.0\n  end\nend\n\nfunction fancy_setter(x)\n  s = i -&gt; @views x[i:i]\n  for i in eachindex(x)\n     s(i) .= 1.0\n  end\nend```\n```julia&gt; @btime setter(x) setup=(x=rand(1000))\n  462.589 ns (0 allocations: 0 bytes)\njulia&gt; @btime fancy_setter(x) setup=(x=rand(1000))\n  464.919 ns (0 allocations: 0 bytes)```\nIncredible!","user":"U01PLQWQXPV","ts":"1615985200.014400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VEfT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We all know how much work was put into it broadcasting and views, but it still surprised me today when a custom setter achieved the very same performance as a simple "},{"type":"text","text":"setindex!","style":{"code":true}},{"type":"text","text":" call\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function setter(x)\n  for i in eachindex(x)\n    x[i] = 1.0\n  end\nend\n\nfunction fancy_setter(x)\n  s = i -> @views x[i:i]\n  for i in eachindex(x)\n     s(i) .= 1.0\n  end\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @btime setter(x) setup=(x=rand(1000))\n  462.589 ns (0 allocations: 0 bytes)\njulia> @btime fancy_setter(x) setup=(x=rand(1000))\n  464.919 ns (0 allocations: 0 bytes)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nIncredible!"}]}]}],"thread_ts":"1615985200.014400","reply_count":2,"reply_users_count":2,"latest_reply":"1615987030.014800","reply_users":["U7HAYKY9X","U01PLQWQXPV"],"subscribed":false},{"client_msg_id":"52db8b24-e908-4bfd-894b-5bf30423969d","type":"message","text":"Indeed. You can't really beat a generic setindex! over eachindex. Broadcasting is not so much useful for speed (it's the same as a loop), but for convenience. And views only make your code faster if you would otherwise have to create a copy of some data (which you don't do here)","user":"U7HAYKY9X","ts":"1615985513.014500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=Qu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Indeed. You can't really beat a generic setindex! over eachindex. Broadcasting is not so much useful for speed (it's the same as a loop), but for convenience. And views only make your code faster if you would otherwise have to create a copy of some data (which you don't do here)"}]}]}],"thread_ts":"1615985200.014400","parent_user_id":"U01PLQWQXPV"},{"client_msg_id":"2ce09cb3-3835-45ee-9b4f-39b606626a1d","type":"message","text":"Sure.\n\nBut in order to be able to be able to mimic the `setindex!` behaviour, `fancy_setter` creates a reference of a part of `x` with `@views` and then in order to assign something to it uses the `.=`  operator as a normal `=` would just rebind the name of the setter.\n\nI would imagine that this would create a lot of overhead but the performance and `@code_native` expr are basically the same","user":"U01PLQWQXPV","ts":"1615987030.014800","team":"T68168MUP","edited":{"user":"U01PLQWQXPV","ts":"1615987061.000000"},"blocks":[{"type":"rich_text","block_id":"U70","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sure.\n\nBut in order to be able to be able to mimic the "},{"type":"text","text":"setindex!","style":{"code":true}},{"type":"text","text":" behaviour, "},{"type":"text","text":"fancy_setter","style":{"code":true}},{"type":"text","text":" creates a reference of a part of "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" with "},{"type":"text","text":"@views","style":{"code":true}},{"type":"text","text":" and then in order to assign something to it uses the "},{"type":"text","text":".=","style":{"code":true}},{"type":"text","text":"  operator as a normal "},{"type":"text","text":"=","style":{"code":true}},{"type":"text","text":" would just rebind the name of the setter.\n\nI would imagine that this would create a lot of overhead but the performance and "},{"type":"text","text":"@code_native","style":{"code":true}},{"type":"text","text":" expr are basically the same"}]}]}],"thread_ts":"1615985200.014400","parent_user_id":"U01PLQWQXPV"}]