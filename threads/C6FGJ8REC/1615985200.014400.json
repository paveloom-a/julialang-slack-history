[{"client_msg_id":"de151ff8-7bd2-44cc-a20f-66139cac02ed","type":"message","text":"We all know how much work was put into it broadcasting and views, but it still surprised me today when a custom setter achieved the very same performance as a simple `setindex!` call\n\n```function setter(x)\n  for i in eachindex(x)\n    x[i] = 1.0\n  end\nend\n\nfunction fancy_setter(x)\n  s = i -&gt; @views x[i:i]\n  for i in eachindex(x)\n     s(i) .= 1.0\n  end\nend```\n```julia&gt; @btime setter(x) setup=(x=rand(1000))\n  462.589 ns (0 allocations: 0 bytes)\njulia&gt; @btime fancy_setter(x) setup=(x=rand(1000))\n  464.919 ns (0 allocations: 0 bytes)```\nIncredible!","user":"U01PLQWQXPV","ts":"1615985200.014400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VEfT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We all know how much work was put into it broadcasting and views, but it still surprised me today when a custom setter achieved the very same performance as a simple "},{"type":"text","text":"setindex!","style":{"code":true}},{"type":"text","text":" call\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function setter(x)\n  for i in eachindex(x)\n    x[i] = 1.0\n  end\nend\n\nfunction fancy_setter(x)\n  s = i -> @views x[i:i]\n  for i in eachindex(x)\n     s(i) .= 1.0\n  end\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @btime setter(x) setup=(x=rand(1000))\n  462.589 ns (0 allocations: 0 bytes)\njulia> @btime fancy_setter(x) setup=(x=rand(1000))\n  464.919 ns (0 allocations: 0 bytes)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nIncredible!"}]}]}],"thread_ts":"1615985200.014400","reply_count":10,"reply_users_count":7,"latest_reply":"1615997958.017500","reply_users":["U7HAYKY9X","U01PLQWQXPV","UPSSPPBFV","UBEF50B7C","UGU761DU2","U66GD0880","UH9KWTTD3"],"is_locked":false,"subscribed":false,"reactions":[{"name":"sunglasses","users":["U687RKK0E"],"count":1}]},{"client_msg_id":"52db8b24-e908-4bfd-894b-5bf30423969d","type":"message","text":"Indeed. You can't really beat a generic setindex! over eachindex. Broadcasting is not so much useful for speed (it's the same as a loop), but for convenience. And views only make your code faster if you would otherwise have to create a copy of some data (which you don't do here)","user":"U7HAYKY9X","ts":"1615985513.014500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=Qu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Indeed. You can't really beat a generic setindex! over eachindex. Broadcasting is not so much useful for speed (it's the same as a loop), but for convenience. And views only make your code faster if you would otherwise have to create a copy of some data (which you don't do here)"}]}]}],"thread_ts":"1615985200.014400","parent_user_id":"U01PLQWQXPV","reactions":[{"name":"this-is-true","users":["UGU761DU2"],"count":1}]},{"client_msg_id":"2ce09cb3-3835-45ee-9b4f-39b606626a1d","type":"message","text":"Sure.\n\nBut in order to be able to be able to mimic the `setindex!` behaviour, `fancy_setter` creates a reference of a part of `x` with `@views` and then in order to assign something to it uses the `.=`  operator as a normal `=` would just rebind the name of the setter.\n\nI would imagine that this would create a lot of overhead but the performance and `@code_native` expr are basically the same","user":"U01PLQWQXPV","ts":"1615987030.014800","team":"T68168MUP","edited":{"user":"U01PLQWQXPV","ts":"1615987061.000000"},"blocks":[{"type":"rich_text","block_id":"U70","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sure.\n\nBut in order to be able to be able to mimic the "},{"type":"text","text":"setindex!","style":{"code":true}},{"type":"text","text":" behaviour, "},{"type":"text","text":"fancy_setter","style":{"code":true}},{"type":"text","text":" creates a reference of a part of "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" with "},{"type":"text","text":"@views","style":{"code":true}},{"type":"text","text":" and then in order to assign something to it uses the "},{"type":"text","text":".=","style":{"code":true}},{"type":"text","text":"  operator as a normal "},{"type":"text","text":"=","style":{"code":true}},{"type":"text","text":" would just rebind the name of the setter.\n\nI would imagine that this would create a lot of overhead but the performance and "},{"type":"text","text":"@code_native","style":{"code":true}},{"type":"text","text":" expr are basically the same"}]}]}],"thread_ts":"1615985200.014400","parent_user_id":"U01PLQWQXPV"},{"client_msg_id":"7671fcf3-5503-42ba-9dfa-5845f07cbba9","type":"message","text":"I imagine that's just how smart the compiler is :stuck_out_tongue:","user":"UPSSPPBFV","ts":"1615988379.015400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ohBF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I imagine that's just how smart the compiler is "},{"type":"emoji","name":"stuck_out_tongue"}]}]}],"thread_ts":"1615985200.014400","parent_user_id":"U01PLQWQXPV"},{"client_msg_id":"624a0c01-2bdc-43b4-b126-eda30179b8ca","type":"message","text":"Looks like the compiler is able to inline `s(i)` so you avoid a costly function call there","user":"UBEF50B7C","ts":"1615988696.015600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"doO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Looks like the compiler is able to inline "},{"type":"text","text":"s(i)","style":{"code":true}},{"type":"text","text":" so you avoid a costly function call there"}]}]}],"thread_ts":"1615985200.014400","parent_user_id":"U01PLQWQXPV"},{"client_msg_id":"4ef8c14b-bd15-42bc-a221-cab3a5b5f9b6","type":"message","text":"If you use `@inbounds` you get even faster code in both cases, as the compiler then will use simd instructions","user":"UBEF50B7C","ts":"1615988747.015800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FOyZH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you use "},{"type":"text","text":"@inbounds","style":{"code":true}},{"type":"text","text":" you get even faster code in both cases, as the compiler then will use simd instructions"}]}]}],"thread_ts":"1615985200.014400","parent_user_id":"U01PLQWQXPV"},{"type":"message","subtype":"thread_broadcast","text":"Yeah, I think there is often an expectation (presumably in part coming from experience with Python/R/Matlab/etc.) that broadcasting will be faster than loops, which is I think probably also driven in part by the overloaded multiple uses of the term “vectorization” in CS: there *is* a thing called vectorization in Julia that will speed up your code, but it’s not ~related to~ ^[equivalent to] broadcasting (in contrast to use of the term in these other languages).\n\nInstead it’s about properly filling up your SIMD vector registers, either by the Julia compiler itself (with encouragement from `@inbounds` and/or `@simd`) or by using `@avx` from LoopVectorization.jl","user":"UGU761DU2","ts":"1615994492.016100","thread_ts":"1615985200.014400","root":{"client_msg_id":"de151ff8-7bd2-44cc-a20f-66139cac02ed","type":"message","text":"We all know how much work was put into it broadcasting and views, but it still surprised me today when a custom setter achieved the very same performance as a simple `setindex!` call\n\n```function setter(x)\n  for i in eachindex(x)\n    x[i] = 1.0\n  end\nend\n\nfunction fancy_setter(x)\n  s = i -&gt; @views x[i:i]\n  for i in eachindex(x)\n     s(i) .= 1.0\n  end\nend```\n```julia&gt; @btime setter(x) setup=(x=rand(1000))\n  462.589 ns (0 allocations: 0 bytes)\njulia&gt; @btime fancy_setter(x) setup=(x=rand(1000))\n  464.919 ns (0 allocations: 0 bytes)```\nIncredible!","user":"U01PLQWQXPV","ts":"1615985200.014400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VEfT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We all know how much work was put into it broadcasting and views, but it still surprised me today when a custom setter achieved the very same performance as a simple "},{"type":"text","text":"setindex!","style":{"code":true}},{"type":"text","text":" call\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function setter(x)\n  for i in eachindex(x)\n    x[i] = 1.0\n  end\nend\n\nfunction fancy_setter(x)\n  s = i -> @views x[i:i]\n  for i in eachindex(x)\n     s(i) .= 1.0\n  end\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @btime setter(x) setup=(x=rand(1000))\n  462.589 ns (0 allocations: 0 bytes)\njulia> @btime fancy_setter(x) setup=(x=rand(1000))\n  464.919 ns (0 allocations: 0 bytes)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nIncredible!"}]}]}],"thread_ts":"1615985200.014400","reply_count":10,"reply_users_count":7,"latest_reply":"1615997958.017500","reply_users":["U7HAYKY9X","U01PLQWQXPV","UPSSPPBFV","UBEF50B7C","UGU761DU2","U66GD0880","UH9KWTTD3"],"is_locked":false,"subscribed":false},"blocks":[{"type":"rich_text","block_id":"=9w","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, I think there is often an expectation (presumably in part coming from experience with Python/R/Matlab/etc.) that broadcasting will be faster than loops, which is I think probably also driven in part by the overloaded multiple uses of the term “vectorization” in CS: there "},{"type":"text","text":"is","style":{"bold":true}},{"type":"text","text":" a thing called vectorization in Julia that will speed up your code, but it’s not "},{"type":"text","text":"related to","style":{"strike":true}},{"type":"text","text":" ^[equivalent to] broadcasting (in contrast to use of the term in these other languages).\n\nInstead it’s about properly filling up your SIMD vector registers, either by the Julia compiler itself (with encouragement from "},{"type":"text","text":"@inbounds","style":{"code":true}},{"type":"text","text":" and/or "},{"type":"text","text":"@simd","style":{"code":true}},{"type":"text","text":") or by using "},{"type":"text","text":"@avx","style":{"code":true}},{"type":"text","text":" from LoopVectorization.jl"}]}]}],"client_msg_id":"20b87416-6f4a-43d3-8092-ee6f15f1f67f","edited":{"user":"UGU761DU2","ts":"1615995286.000000"}},{"client_msg_id":"990a86cb-12fd-4232-a85a-2bebd277488d","type":"message","text":"I wouldn’t say SIMD is not related to broadcasting… broadcasting is the syntax we all want to use to apply SIMD to complex functions such as `sin()`, using ISPC-style program transformations.  We’re not there yet, but the reason the term vectorization is so overloaded is because these concepts _are_ related","user":"U66GD0880","ts":"1615994680.016400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"H2LN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I wouldn’t say SIMD is not related to broadcasting… broadcasting is the syntax we all want to use to apply SIMD to complex functions such as "},{"type":"text","text":"sin()","style":{"code":true}},{"type":"text","text":", using ISPC-style program transformations.  We’re not there yet, but the reason the term vectorization is so overloaded is because these concepts "},{"type":"text","text":"are","style":{"italic":true}},{"type":"text","text":" related"}]}]}],"thread_ts":"1615985200.014400","parent_user_id":"U01PLQWQXPV","reactions":[{"name":"point_up::skin-tone-5","users":["UH9KWTTD3","U6795JH6H"],"count":2}]},{"client_msg_id":"697997bb-fdc1-4d52-9538-a94961b0083d","type":"message","text":"Yeah this always comes up in the never ending vmap threads","user":"UH9KWTTD3","ts":"1615994962.016700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2HrEP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah this always comes up in the never ending vmap threads"}]}]}],"thread_ts":"1615985200.014400","parent_user_id":"U01PLQWQXPV"},{"client_msg_id":"490e924d-2140-4ebe-bf48-2e8ef8f1ed7a","type":"message","text":"Yeah fair, I guess `s/related to/the same as/g`","user":"UGU761DU2","ts":"1615994996.016900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+88z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah fair, I guess "},{"type":"text","text":"s/related to/the same as/g","style":{"code":true}}]}]}],"thread_ts":"1615985200.014400","parent_user_id":"U01PLQWQXPV"},{"client_msg_id":"e0777bce-5e6e-416d-8a21-cac03991c1f3","type":"message","text":"Just as an addendum, the original post was not at all about the speed of broadcasting vs for loops the way you decided to take this conversation.\n\nThe point was not about broadcasting being as fast as a for loop but *the reverse*: the fact that even with all the added machinery required for broadcasting and subarrays (and closures), the compiler still managing to produce very similar instructions to a simple for-loop assignment.\n\nOf course this is only possible with an excellent compiler but also paired with an excellent implementation of, e.g., subarrays, which, afaik, took many iterations and long hours to get just right","user":"U01PLQWQXPV","ts":"1615997958.017500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CIg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Just as an addendum, the original post was not at all about the speed of broadcasting vs for loops the way you decided to take this conversation.\n\nThe point was not about broadcasting being as fast as a for loop but "},{"type":"text","text":"the reverse","style":{"bold":true}},{"type":"text","text":": the fact that even with all the added machinery required for broadcasting and subarrays (and closures), the compiler still managing to produce very similar instructions to a simple for-loop assignment.\n\nOf course this is only possible with an excellent compiler but also paired with an excellent implementation of, e.g., subarrays, which, afaik, took many iterations and long hours to get just right"}]}]}],"thread_ts":"1615985200.014400","parent_user_id":"U01PLQWQXPV","reactions":[{"name":"+1","users":["UGU761DU2","U6795JH6H","UH9KWTTD3","U0179G7FG4F"],"count":4},{"name":"+1::skin-tone-4","users":["UAREE2NMD"],"count":1}]}]