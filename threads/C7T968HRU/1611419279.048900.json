[{"client_msg_id":"6ab2824d-55fe-4548-a27f-f9fd273a2ad4","type":"message","text":"I’m still trying to understand the (in) efficiency of solving ODE’s driven by piecewise constant functions.\nI wrote up a few examples showing this (see comment).\nIn a nutshell, using `tstops` or `d_discontinuities` tanks the solver performance (both time and space) but using a DiscreteCallback doesn’t. It feels like I’m not not using `solve`  right with all its possibilities.","user":"UPM0H43C7","ts":"1611419279.048900","team":"T68168MUP","edited":{"user":"UPM0H43C7","ts":"1611419290.000000"},"blocks":[{"type":"rich_text","block_id":"nXN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’m still trying to understand the (in) efficiency of solving ODE’s driven by piecewise constant functions.\nI wrote up a few examples showing this (see comment).\nIn a nutshell, using "},{"type":"text","text":"tstops","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"d_discontinuities","style":{"code":true}},{"type":"text","text":" tanks the solver performance (both time and space) but using a DiscreteCallback doesn’t. It feels like I’m not not using "},{"type":"text","text":"solve","style":{"code":true}},{"type":"text","text":"  right with all its possibilities."}]}]}],"thread_ts":"1611419279.048900","reply_count":15,"reply_users_count":2,"latest_reply":"1611428073.059100","reply_users":["UPM0H43C7","U69BL50BF"],"subscribed":false},{"client_msg_id":"7edbcadc-12f5-46df-ab2b-42b17e5e65f2","type":"message","text":"```using OrdinaryDiffEq, DiffEqSensitivity, DiffEqCallbacks, RecursiveArrayTools\nusing DiffEqFlux:basic_tgrad\nusing DataInterpolations\nusing BenchmarkTools, Random\nusing Adapt\nusing Adapt: adapt_structure, adapt\nusing Zygote: @adjoint, @nograd\n\"\"\"\nDefinitions of ConstantInterpolationRegularGrid, nograd and CheapEmbedding at the bottom\n\n\"\"\"\n\nRandom.seed!(0);\nFT = Float64\nWi = randn(FT, 250,10)\nWh = randn(FT, 250,250)\nb = randn(FT, 250)\nxall = rand(1:10,100,140)\nx = xall[:,1]\nonehx = (x'.==1:10)\nu0 = randn(FT, 250,100)\n\nfunction main()\n  dudt_1(u,p,t) = tanh.(Wh*u + Wi*onehx .+ b) .-u\n  dudt_2(u,p,t) = tanh.(Wh*u + Wi[:,x] .+ b) .-u\n  dudt_3(u,p,t) = tanh.(Wh*u + Wi*(x'.==1:10) .+ b) .-u\n  ## Testing products\n  @btime Wi*onehx;  #  234.129 μs (8 allocations: 195.72 KiB)\n  @btime Wi[:,x];  #  18.440 μs (3 allocations: 195.41 KiB)\n  @btime Wi*(x'.==1:10);  #  241.559 μs (14 allocations: 200.23 KiB)\n  ## Testing solves\n  for du in [dudt_1,dudt_2,dudt_3]\n      ff = ODEFunction{false}(du,tgrad=basic_tgrad)\n      prob = ODEProblem{false}(ff,u0,FT.((0.,140.)))\n      @btime solve(prob, Tsit5() ;sense=InterpolatingAdjoint(autojacvec=ZygoteVJP()));\n  end\n\n  #=\n  dudt_1  8.362 s (291899 allocations: 15.04 GiB)\n  dudt_2  7.548 s (266144 allocations: 15.04 GiB)\n  dudt_3  8.784 s (322805 allocations: 15.06 GiB)\n  =#\n  ##\n  xno = nograd(ConstantInterpolationRegularGrid(xall), f=x-&gt;CheapEmbedding(x,10))\n  xmanual = nograd(ConstantInterpolationRegularGrid(xall), f= identity)\n  dudt_1(u,p,t) = tanh.(Wh*u + Wi*xno(t) .+ b) .-u\n  dudt_2(u,p,t) = tanh.(Wh*u + Wi[:,xmanual(t)] .+ b) .-u\n  dudt_3(u,p,t) = tanh.(Wh*u + Wi*(xmanual(t)'.==1:10) .+ b) .-u\n  for du in [dudt_1,dudt_2,dudt_3]\n      ff = ODEFunction{false}(du,tgrad=basic_tgrad)\n      prob = ODEProblem{false}(ff,u0,FT.((0.,140.)))\n      @btime solve(prob, Tsit5() ;sense=InterpolatingAdjoint(autojacvec=ZygoteVJP()));\n  end\n  #=\n    14.005 s (598771 allocations: 32.25 GiB)\n    19.882 s (598771 allocations: 32.25 GiB)\n    16.566 s (723544 allocations: 32.30 GiB)\n  =#\n  ## Using tstops to enforce solver restarting\n  for du in [dudt_1,dudt_2,dudt_3]\n      ff = ODEFunction{false}(du,tgrad=basic_tgrad)\n      prob = ODEProblem{false}(ff,u0,FT.((0.,140.)))\n      @btime solve(prob, Tsit5() ;tstops = collect(FT, 1:139),sense=InterpolatingAdjoint(autojacvec=ZygoteVJP()));\n  end\n  #=\n    30.278 s (1050037 allocations: 56.77 GiB)\n    41.624 s (1050037 allocations: 56.77 GiB)\n    46.018 s (1267540 allocations: 56.86 GiB)\n  =#\n  ## d_discontinuities\n  for du in [dudt_1,dudt_2,dudt_3]\n      ff = ODEFunction{false}(du,tgrad=basic_tgrad)\n      prob = ODEProblem{false}(ff,u0,FT.((0.,140.))   )\n      @btime solve(prob, Tsit5() ;d_discontinuities = collect(FT, 1:139),sense=InterpolatingAdjoint(autojacvec=ZygoteVJP()));\n  end\n  #=\n    30.809 s (1052401 allocations: 56.87 GiB)\n    41.780 s (1052401 allocations: 56.87 GiB)\n    46.369 s (1271433 allocations: 56.96 GiB)\n  =#\n  ##\n  diffed_xall = hcat(xall[:,1],diff(xall, dims=2));\n  @show(cumsum(diffed_xall, dims=2) == xall);\n  xmanual_diffed = nograd(ConstantInterpolationRegularGrid(diffed_xall), f= identity)\n\n  tstops = collect(FT, 1:139)\n  affect!(integrator) = integrator.p += xmanual_diffed(integrator.t)\n  cb = PresetTimeCallback(tstops, affect!, save_positions=(false,false))\n  dudt_1(u,p,t) = tanh.(Wh*u + Wi*CheapEmbedding(p,10) .+ b) .-u\n  dudt_2(u,p,t) = tanh.(Wh*u + Wi[:,p] .+ b) .-u\n  dudt_3(u,p,t) = tanh.(Wh*u + Wi*(p'.==1:10) .+ b) .-u\n  for du in [dudt_1,dudt_2,dudt_3]\n      p0 = copy(xmanual_diffed(0.))\n      ff = ODEFunction{false}(du,tgrad=basic_tgrad)\n      prob = ODEProblem{false}(ff,u0,FT.((0.,140.)),p0)\n      @btime solve(prob, Tsit5() ; callback = cb, sense=InterpolatingAdjoint(autojacvec=ZygoteVJP()));\n  end\n  #=\n    8.892 s (376538 allocations: 21.24 GiB)\n    13.645 s (376538 allocations: 21.24 GiB)\n    15.624 s (435562 allocations: 21.27 GiB)\n  =#\n  ##\n  xmanual_diffed_float = nograd(ConstantInterpolationRegularGrid(diffed_xall), f= x-&gt;FT.(x) )\n  tstops = collect(FT, 1:139)\n  affect!(integrator) = integrator.u[end,:] += xmanual_diffed_float(integrator.t)\n  cb = PresetTimeCallback(tstops, affect!, save_positions=(false,false))\n\n  dudt_1(u,p,t) = tanh.(Wh*u + Wi*CheapEmbedding(Int.(p),10) .+ b) .-u\n  dudt_2(u,p,t) = tanh.(Wh*u + Wi[:,Int.(p)] .+ b) .-u\n  dudt_3(u,p,t) = tanh.(Wh*u + Wi*(Int.(p)'.==1:10) .+ b) .-u\n\n  for du in [dudt_1,dudt_2,dudt_3]\n      \n      _u0= vcat(u0,copy(xmanual_diffed_float(0.))|&gt;permutedims )\n      ff = ODEFunction{false}( (u,p,t) -&gt; vcat(du(u[1:250,:],u[end,:],t),zeros(FT,1,100)),tgrad=basic_tgrad)\n      prob = ODEProblem{false}(ff,_u0,FT.((0.,140.)))\n      @btime solve(prob, Tsit5() ; callback = cb, sense=InterpolatingAdjoint(autojacvec=ZygoteVJP()));\n  end\n  #=  Pretty promising, space and time ~ same as the failed Callback wrt to   parameters\n    8.963 s (421822 allocations: 23.68 GiB)\n    14.263 s (421822 allocations: 23.68 GiB)\n    16.257 s (479886 allocations: 23.71 GiB)\n  =#\n  ##\n  ts = collect(FT, 0.:140.)\n\n  function sol(ts,u0, xall)\n      for i in 1:length(ts)-1\n          du(u,p,t) = tanh.(Wh*u + Wi*CheapEmbedding(xall[:,i],10) .+ b) .-u\n          ff = ODEFunction{false}(du ,tgrad=basic_tgrad)\n          prob = ODEProblem{false}(ff,u0,(ts[i], ts[i+1]))\n          solution = solve(prob, Tsit5() ;sense=InterpolatingAdjoint(autojacvec=ZygoteVJP()), dense=false, save_everystep=false, save_start=false, save_end=true)\n          u0 = solution[end]\n      end\n  end\n  @btime sol(ts, u0, xall)\n  #=\n  Slower than Callback on parameters &amp; callback on states\n      10.586 s (469728 allocations: 24.36 GiB)\n  =#\nend\nfunction ConstantInterpolationRegularGrid(u::AV; t₀::T=0,t₁::T=length(u)-1,Δt::T=1) where {T&lt;:Number,AV&lt;:AbstractVector{&lt;:Number}}\n    n = length(u)\n    @assert length(t₀:Δt:t₁) == n\n    t = collect(t₀:Δt:t₁-Δt)\n    # u, t = munge_data(u, t)\n    return DataInterpolations.ConstantInterpolation{true}(u,t,:left)\nend\n\nconst UnivInpt = Union{LinearInterpolationRegularGrid{T},ConstantInterpolation{T},CubicSpline{T},CubicSplineRegularGrid{T}} where  T&lt;:AbstractVector\nconst MultivInpt = Union{LinearInterpolationRegularGrid{T},ConstantInterpolation{T},CubicSpline{T},CubicSplineRegularGrid{T}} where  T&lt;:AbstractMatrix\n\nstruct nograd{T}\n    interpolant::T\n    dtype\n    t\n    f\n    function nograd(interp::ITP; f = identity ) where {ITP&lt;:UnivInpt}\n        new{typeof(interp)}(interp,eltype(interp.u),collect(interp.t),f)\n    end\n    \n    function nograd(interp::ITP; f = permutedims ) where {ITP&lt;:MultivInpt}\n        new{typeof(interp)}(interp,eltype(interp.u),collect(interp.t),f)\n    end\nend\n\nfunction (n::nograd{T})(t) where T&lt;:Union{UnivInpt,MultivInpt}\n x = ignore() do\n    n.interpolant(t) |&gt; n.f\n  end\nend\n\n\n\nstruct CheapEmbedding{T&lt;:Integer, L, I&lt;:AbstractVector{T}} &lt;: AbstractMatrix{Bool}\n  indices::I\nend\nCheapEmbedding{T, L, I}(indices) where {T, L, I} = CheapEmbedding{T, L, I}(indices)\nCheapEmbedding(indices::AbstractVector{T}, L::Integer) where {T} = CheapEmbedding{T, L, typeof(indices)}(indices)\nCheapEmbedding(indices::AbstractArray{T}, L::Integer) where {T} = CheapEmbedding(vec(indices), L) \n_indices(x::CheapEmbedding) = x.indices\n\nBase.size(x::CheapEmbedding{&lt;:Any, L}) where L = (Int(L), length(x.indices))\n_onehotindex(x, i) = (x == i)\nBase.getindex(x::CheapEmbedding, i::Integer, I...) = _onehotindex.(x.indices[I...], i)\nAdapt.adapt_structure(T, x::CheapEmbedding{&lt;:Any, L}) where L = CheapEmbedding(adapt(T, x.indices), L)\n# Base.BroadcastStyle(::Type{&lt;:CheapEmbedding}) where N = CUDA.CuArrayStyle{1}()\n\n@nograd CheapEmbedding\n\nfunction Base.:(*)(A::AbstractMatrix, B::CheapEmbedding{&lt;:Any, L}) where L\n  return A[:, B.indices]\nend\n@adjoint function Base.:(*)(A::AbstractMatrix, B::CheapEmbedding{&lt;:Any, L}) where L\n    c = A[:, B.indices]\n    return c, Δ -&gt; ( Δ*eltype(c).(B.indices .== (1:L)'), nothing )\nend\n\nif abspath(PROGRAM_FILE) == @__FILE__\n    main()\nend```","user":"UPM0H43C7","ts":"1611419500.049100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9sksK","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using OrdinaryDiffEq, DiffEqSensitivity, DiffEqCallbacks, RecursiveArrayTools\nusing DiffEqFlux:basic_tgrad\nusing DataInterpolations\nusing BenchmarkTools, Random\nusing Adapt\nusing Adapt: adapt_structure, adapt\nusing Zygote: @adjoint, @nograd\n\"\"\"\nDefinitions of ConstantInterpolationRegularGrid, nograd and CheapEmbedding at the bottom\n\n\"\"\"\n\nRandom.seed!(0);\nFT = Float64\nWi = randn(FT, 250,10)\nWh = randn(FT, 250,250)\nb = randn(FT, 250)\nxall = rand(1:10,100,140)\nx = xall[:,1]\nonehx = (x'.==1:10)\nu0 = randn(FT, 250,100)\n\nfunction main()\n  dudt_1(u,p,t) = tanh.(Wh*u + Wi*onehx .+ b) .-u\n  dudt_2(u,p,t) = tanh.(Wh*u + Wi[:,x] .+ b) .-u\n  dudt_3(u,p,t) = tanh.(Wh*u + Wi*(x'.==1:10) .+ b) .-u\n  ## Testing products\n  @btime Wi*onehx;  #  234.129 μs (8 allocations: 195.72 KiB)\n  @btime Wi[:,x];  #  18.440 μs (3 allocations: 195.41 KiB)\n  @btime Wi*(x'.==1:10);  #  241.559 μs (14 allocations: 200.23 KiB)\n  ## Testing solves\n  for du in [dudt_1,dudt_2,dudt_3]\n      ff = ODEFunction{false}(du,tgrad=basic_tgrad)\n      prob = ODEProblem{false}(ff,u0,FT.((0.,140.)))\n      @btime solve(prob, Tsit5() ;sense=InterpolatingAdjoint(autojacvec=ZygoteVJP()));\n  end\n\n  #=\n  dudt_1  8.362 s (291899 allocations: 15.04 GiB)\n  dudt_2  7.548 s (266144 allocations: 15.04 GiB)\n  dudt_3  8.784 s (322805 allocations: 15.06 GiB)\n  =#\n  ##\n  xno = nograd(ConstantInterpolationRegularGrid(xall), f=x->CheapEmbedding(x,10))\n  xmanual = nograd(ConstantInterpolationRegularGrid(xall), f= identity)\n  dudt_1(u,p,t) = tanh.(Wh*u + Wi*xno(t) .+ b) .-u\n  dudt_2(u,p,t) = tanh.(Wh*u + Wi[:,xmanual(t)] .+ b) .-u\n  dudt_3(u,p,t) = tanh.(Wh*u + Wi*(xmanual(t)'.==1:10) .+ b) .-u\n  for du in [dudt_1,dudt_2,dudt_3]\n      ff = ODEFunction{false}(du,tgrad=basic_tgrad)\n      prob = ODEProblem{false}(ff,u0,FT.((0.,140.)))\n      @btime solve(prob, Tsit5() ;sense=InterpolatingAdjoint(autojacvec=ZygoteVJP()));\n  end\n  #=\n    14.005 s (598771 allocations: 32.25 GiB)\n    19.882 s (598771 allocations: 32.25 GiB)\n    16.566 s (723544 allocations: 32.30 GiB)\n  =#\n  ## Using tstops to enforce solver restarting\n  for du in [dudt_1,dudt_2,dudt_3]\n      ff = ODEFunction{false}(du,tgrad=basic_tgrad)\n      prob = ODEProblem{false}(ff,u0,FT.((0.,140.)))\n      @btime solve(prob, Tsit5() ;tstops = collect(FT, 1:139),sense=InterpolatingAdjoint(autojacvec=ZygoteVJP()));\n  end\n  #=\n    30.278 s (1050037 allocations: 56.77 GiB)\n    41.624 s (1050037 allocations: 56.77 GiB)\n    46.018 s (1267540 allocations: 56.86 GiB)\n  =#\n  ## d_discontinuities\n  for du in [dudt_1,dudt_2,dudt_3]\n      ff = ODEFunction{false}(du,tgrad=basic_tgrad)\n      prob = ODEProblem{false}(ff,u0,FT.((0.,140.))   )\n      @btime solve(prob, Tsit5() ;d_discontinuities = collect(FT, 1:139),sense=InterpolatingAdjoint(autojacvec=ZygoteVJP()));\n  end\n  #=\n    30.809 s (1052401 allocations: 56.87 GiB)\n    41.780 s (1052401 allocations: 56.87 GiB)\n    46.369 s (1271433 allocations: 56.96 GiB)\n  =#\n  ##\n  diffed_xall = hcat(xall[:,1],diff(xall, dims=2));\n  @show(cumsum(diffed_xall, dims=2) == xall);\n  xmanual_diffed = nograd(ConstantInterpolationRegularGrid(diffed_xall), f= identity)\n\n  tstops = collect(FT, 1:139)\n  affect!(integrator) = integrator.p += xmanual_diffed(integrator.t)\n  cb = PresetTimeCallback(tstops, affect!, save_positions=(false,false))\n  dudt_1(u,p,t) = tanh.(Wh*u + Wi*CheapEmbedding(p,10) .+ b) .-u\n  dudt_2(u,p,t) = tanh.(Wh*u + Wi[:,p] .+ b) .-u\n  dudt_3(u,p,t) = tanh.(Wh*u + Wi*(p'.==1:10) .+ b) .-u\n  for du in [dudt_1,dudt_2,dudt_3]\n      p0 = copy(xmanual_diffed(0.))\n      ff = ODEFunction{false}(du,tgrad=basic_tgrad)\n      prob = ODEProblem{false}(ff,u0,FT.((0.,140.)),p0)\n      @btime solve(prob, Tsit5() ; callback = cb, sense=InterpolatingAdjoint(autojacvec=ZygoteVJP()));\n  end\n  #=\n    8.892 s (376538 allocations: 21.24 GiB)\n    13.645 s (376538 allocations: 21.24 GiB)\n    15.624 s (435562 allocations: 21.27 GiB)\n  =#\n  ##\n  xmanual_diffed_float = nograd(ConstantInterpolationRegularGrid(diffed_xall), f= x->FT.(x) )\n  tstops = collect(FT, 1:139)\n  affect!(integrator) = integrator.u[end,:] += xmanual_diffed_float(integrator.t)\n  cb = PresetTimeCallback(tstops, affect!, save_positions=(false,false))\n\n  dudt_1(u,p,t) = tanh.(Wh*u + Wi*CheapEmbedding(Int.(p),10) .+ b) .-u\n  dudt_2(u,p,t) = tanh.(Wh*u + Wi[:,Int.(p)] .+ b) .-u\n  dudt_3(u,p,t) = tanh.(Wh*u + Wi*(Int.(p)'.==1:10) .+ b) .-u\n\n  for du in [dudt_1,dudt_2,dudt_3]\n      \n      _u0= vcat(u0,copy(xmanual_diffed_float(0.))|>permutedims )\n      ff = ODEFunction{false}( (u,p,t) -> vcat(du(u[1:250,:],u[end,:],t),zeros(FT,1,100)),tgrad=basic_tgrad)\n      prob = ODEProblem{false}(ff,_u0,FT.((0.,140.)))\n      @btime solve(prob, Tsit5() ; callback = cb, sense=InterpolatingAdjoint(autojacvec=ZygoteVJP()));\n  end\n  #=  Pretty promising, space and time ~ same as the failed Callback wrt to   parameters\n    8.963 s (421822 allocations: 23.68 GiB)\n    14.263 s (421822 allocations: 23.68 GiB)\n    16.257 s (479886 allocations: 23.71 GiB)\n  =#\n  ##\n  ts = collect(FT, 0.:140.)\n\n  function sol(ts,u0, xall)\n      for i in 1:length(ts)-1\n          du(u,p,t) = tanh.(Wh*u + Wi*CheapEmbedding(xall[:,i],10) .+ b) .-u\n          ff = ODEFunction{false}(du ,tgrad=basic_tgrad)\n          prob = ODEProblem{false}(ff,u0,(ts[i], ts[i+1]))\n          solution = solve(prob, Tsit5() ;sense=InterpolatingAdjoint(autojacvec=ZygoteVJP()), dense=false, save_everystep=false, save_start=false, save_end=true)\n          u0 = solution[end]\n      end\n  end\n  @btime sol(ts, u0, xall)\n  #=\n  Slower than Callback on parameters & callback on states\n      10.586 s (469728 allocations: 24.36 GiB)\n  =#\nend\nfunction ConstantInterpolationRegularGrid(u::AV; t₀::T=0,t₁::T=length(u)-1,Δt::T=1) where {T<:Number,AV<:AbstractVector{<:Number}}\n    n = length(u)\n    @assert length(t₀:Δt:t₁) == n\n    t = collect(t₀:Δt:t₁-Δt)\n    # u, t = munge_data(u, t)\n    return DataInterpolations.ConstantInterpolation{true}(u,t,:left)\nend\n\nconst UnivInpt = Union{LinearInterpolationRegularGrid{T},ConstantInterpolation{T},CubicSpline{T},CubicSplineRegularGrid{T}} where  T<:AbstractVector\nconst MultivInpt = Union{LinearInterpolationRegularGrid{T},ConstantInterpolation{T},CubicSpline{T},CubicSplineRegularGrid{T}} where  T<:AbstractMatrix\n\nstruct nograd{T}\n    interpolant::T\n    dtype\n    t\n    f\n    function nograd(interp::ITP; f = identity ) where {ITP<:UnivInpt}\n        new{typeof(interp)}(interp,eltype(interp.u),collect(interp.t),f)\n    end\n    \n    function nograd(interp::ITP; f = permutedims ) where {ITP<:MultivInpt}\n        new{typeof(interp)}(interp,eltype(interp.u),collect(interp.t),f)\n    end\nend\n\nfunction (n::nograd{T})(t) where T<:Union{UnivInpt,MultivInpt}\n x = ignore() do\n    n.interpolant(t) |> n.f\n  end\nend\n\n\n\nstruct CheapEmbedding{T<:Integer, L, I<:AbstractVector{T}} <: AbstractMatrix{Bool}\n  indices::I\nend\nCheapEmbedding{T, L, I}(indices) where {T, L, I} = CheapEmbedding{T, L, I}(indices)\nCheapEmbedding(indices::AbstractVector{T}, L::Integer) where {T} = CheapEmbedding{T, L, typeof(indices)}(indices)\nCheapEmbedding(indices::AbstractArray{T}, L::Integer) where {T} = CheapEmbedding(vec(indices), L) \n_indices(x::CheapEmbedding) = x.indices\n\nBase.size(x::CheapEmbedding{<:Any, L}) where L = (Int(L), length(x.indices))\n_onehotindex(x, i) = (x == i)\nBase.getindex(x::CheapEmbedding, i::Integer, I...) = _onehotindex.(x.indices[I...], i)\nAdapt.adapt_structure(T, x::CheapEmbedding{<:Any, L}) where L = CheapEmbedding(adapt(T, x.indices), L)\n# Base.BroadcastStyle(::Type{<:CheapEmbedding}) where N = CUDA.CuArrayStyle{1}()\n\n@nograd CheapEmbedding\n\nfunction Base.:(*)(A::AbstractMatrix, B::CheapEmbedding{<:Any, L}) where L\n  return A[:, B.indices]\nend\n@adjoint function Base.:(*)(A::AbstractMatrix, B::CheapEmbedding{<:Any, L}) where L\n    c = A[:, B.indices]\n    return c, Δ -> ( Δ*eltype(c).(B.indices .== (1:L)'), nothing )\nend\n\nif abspath(PROGRAM_FILE) == @__FILE__\n    main()\nend"}]}]}],"thread_ts":"1611419279.048900","parent_user_id":"UPM0H43C7"},{"client_msg_id":"0ddbf07a-0efd-456f-a9fe-a609bb8c0580","type":"message","text":"I'm not sure what I'm reading here.","user":"U69BL50BF","ts":"1611423632.049400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+/0X","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not sure what I'm reading here."}]}]}],"thread_ts":"1611419279.048900","parent_user_id":"UPM0H43C7"},{"client_msg_id":"8731FE7A-4B78-4F65-A5B8-1C7F46171BF1","type":"message","text":"Lol sorry","user":"UPM0H43C7","ts":"1611423686.049700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zqkI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Lol sorry"}]}]}],"thread_ts":"1611419279.048900","parent_user_id":"UPM0H43C7"},{"client_msg_id":"DEF968DE-54D4-45D4-A4AE-B631F86F9C5F","type":"message","text":"My take away is that tstops a d_discontinuities have a very different effect than using a callback. It looks like integrator.u_modified is what's allowing the callback to be more efficient for the specific problem of having discontinuous changes in the dynamics. ","user":"UPM0H43C7","ts":"1611423909.053700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g=v/Z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My take away is that tstops a d_discontinuities have a very different effect than using a callback. It looks like integrator.u_modified is what's allowing the callback to be more efficient for the specific problem of having discontinuous changes in the dynamics. "}]}]}],"thread_ts":"1611419279.048900","parent_user_id":"UPM0H43C7"},{"client_msg_id":"EF4BFAFE-0B8E-4588-BD58-1FA314125D0A","type":"message","text":"It might be worthwhile in the future to specifiy the type of d_discontinuities so that the integrator can either re evaluate the coefficients or restart depending on the order of the discontinuity","user":"UPM0H43C7","ts":"1611424052.056600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hBIN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It might be worthwhile in the future to specifiy the type of d_discontinuities so that the integrator can either re evaluate the coefficients or restart depending on the order of the discontinuity"}]}]}],"thread_ts":"1611419279.048900","parent_user_id":"UPM0H43C7"},{"client_msg_id":"65d077c5-230f-40aa-bb8e-8cbc8adf37ca","type":"message","text":"&gt; It might be worthwhile in the future to specifiy the type of d_discontinuities so that the integrator can either re evaluate the coefficients or restart depending on the order of the discontinuity\nThat does exist for the delay differential equation solvers.","user":"U69BL50BF","ts":"1611424124.056800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yuRf","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"It might be worthwhile in the future to specifiy the type of d_discontinuities so that the integrator can either re evaluate the coefficients or restart depending on the order of the discontinuity"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"That does exist for the delay differential equation solvers."}]}]}],"thread_ts":"1611419279.048900","parent_user_id":"UPM0H43C7"},{"client_msg_id":"80950f0e-8ff9-48aa-8c1e-7e38192372f6","type":"message","text":"&gt; My take away is that tstops a d_discontinuities have a very different effect than using a callback. It looks like integrator.u_modified is what's allowing the callback to be more efficient for the specific problem of having discontinuous changes in the dynamics.\nIt should be doing the same thing?","user":"U69BL50BF","ts":"1611424143.057000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Fxb","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"My take away is that tstops a d_discontinuities have a very different effect than using a callback. It looks like integrator.u_modified is what's allowing the callback to be more efficient for the specific problem of having discontinuous changes in the dynamics."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"It should be doing the same thing?"}]}]}],"thread_ts":"1611419279.048900","parent_user_id":"UPM0H43C7"},{"client_msg_id":"5d5d7e79-6de3-42d0-bdf5-6c7a6eca8472","type":"message","text":"Can you try and isolate this behavior to a simpler example?","user":"U69BL50BF","ts":"1611424153.057200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JZUeT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can you try and isolate this behavior to a simpler example?"}]}]}],"thread_ts":"1611419279.048900","parent_user_id":"UPM0H43C7"},{"client_msg_id":"abaebb32-74dc-461f-9661-f879582ec915","type":"message","text":"```using OrdinaryDiffEq, DiffEqSensitivity, DiffEqCallbacks, Zygote\nusing BenchmarkTools\nfunction fiip(du,u,p,t)\n  du[1] = dx = p[1]*u[1] - p[2]*u[1]*u[2]\n  du[2] = dy = -p[3]*u[2] + p[4]*u[1]*u[2]\nend\np = [1.5,1.0,3.0,1.0]; u0 = [1.0;1.0]\nprob = ODEProblem(fiip,u0,(0.0,10.0),p)\ncondition(u,t,integrator) = t == 5\n\"\"\" No change to p[1]\nBenchmarkTools.Trial: \n  memory estimate:  18.67 KiB\n  allocs estimate:  150\n  --------------\n  minimum time:     901.125 μs (0.00% GC)\n  median time:      967.875 μs (0.00% GC)\n  mean time:        1.029 ms (0.09% GC)\n  maximum time:     5.594 ms (82.71% GC)\n  --------------\n  samples:          4854\n  evals/sample:     1\n\"\"\"\naffect!(integrator) = integrator.p[1] += 0.0\ncb = DiscreteCallback(condition,affect!,save_positions=(false,false))\n@benchmark solve(prob,Tsit5(),u0=u0,p=p,callback=cb,tstops=[5.0],abstol=1e-14,reltol=1e-14,saveat=0.1,sensealg=BacksolveAdjoint())\n##\n\"\"\"  p[1] += 2. using DiscreteCallback\nBenchmarkTools.Trial: \n  memory estimate:  18.67 KiB\n  allocs estimate:  150\n  --------------\n  minimum time:     13.660 ms (0.00% GC)\n  median time:      17.021 ms (0.00% GC)\n  mean time:        17.244 ms (0.00% GC)\n  maximum time:     24.512 ms (0.00% GC)\n  --------------\n  samples:          290\n  evals/sample:     1\n\"\"\"\naffect2p!(integrator) = integrator.p[1] += 2.0\ncb2p = DiscreteCallback(condition,affect2p!,save_positions=(false,false))\n@benchmark solve(prob,Tsit5(),u0=u0,p=p,callback=cb2p,tstops=[5.0],abstol=1e-14,reltol=1e-14,saveat=0.1,sensealg=BacksolveAdjoint())\n##\n\"\"\"  p[1] += 2. using d_discontinuities\nBenchmarkTools.Trial: \n  memory estimate:  18.69 KiB\n  allocs estimate:  151\n  --------------\n  minimum time:     20.110 ms (0.00% GC)\n  median time:      21.858 ms (0.00% GC)\n  mean time:        22.164 ms (0.00% GC)\n  maximum time:     27.730 ms (0.00% GC)\n  --------------\n  samples:          226\n  evals/sample:     1\n\"\"\"\n@inline step(t) = Float64(t≥5)*2\nfunction fiip_wt_step(du,u,p,t)\n  du[1] = dx = (p[1]+step(t))*u[1] - p[2]*u[1]*u[2]\n  du[2] = dy = -p[3]*u[2] + p[4]*u[1]*u[2]\nend\nprob_wt_step = ODEProblem(fiip_wt_step,u0,(0.0,10.0),p)\n@benchmark solve(prob_wt_step,Tsit5(),u0=u0,p=p,abstol=1e-14,reltol=1e-14,saveat=0.1,sensealg=BacksolveAdjoint(), d_discontinuities=[5.0])\n##\n\"\"\"  p[1] += 2. using tstops\nBenchmarkTools.Trial: \n  memory estimate:  18.64 KiB\n  allocs estimate:  150\n  --------------\n  minimum time:     19.751 ms (0.00% GC)\n  median time:      20.685 ms (0.00% GC)\n  mean time:        20.784 ms (0.00% GC)\n  maximum time:     28.346 ms (0.00% GC)\n  --------------\n  samples:          241\n  evals/sample:     1\n\"\"\"\n@inline step(t) = Float64(t≥5)*2\nfunction fiip_wt_step(du,u,p,t)\n  du[1] = dx = (p[1]+step(t))*u[1] - p[2]*u[1]*u[2]\n  du[2] = dy = -p[3]*u[2] + p[4]*u[1]*u[2]\nend\nprob_wt_step = ODEProblem(fiip_wt_step,u0,(0.0,10.0),p)\n@benchmark solve(prob_wt_step,Tsit5(),u0=u0,p=p,abstol=1e-14,reltol=1e-14,saveat=0.1,sensealg=BacksolveAdjoint(), tstops=[5.0])```","user":"UPM0H43C7","ts":"1611426849.057900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+5v","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using OrdinaryDiffEq, DiffEqSensitivity, DiffEqCallbacks, Zygote\nusing BenchmarkTools\nfunction fiip(du,u,p,t)\n  du[1] = dx = p[1]*u[1] - p[2]*u[1]*u[2]\n  du[2] = dy = -p[3]*u[2] + p[4]*u[1]*u[2]\nend\np = [1.5,1.0,3.0,1.0]; u0 = [1.0;1.0]\nprob = ODEProblem(fiip,u0,(0.0,10.0),p)\ncondition(u,t,integrator) = t == 5\n\"\"\" No change to p[1]\nBenchmarkTools.Trial: \n  memory estimate:  18.67 KiB\n  allocs estimate:  150\n  --------------\n  minimum time:     901.125 μs (0.00% GC)\n  median time:      967.875 μs (0.00% GC)\n  mean time:        1.029 ms (0.09% GC)\n  maximum time:     5.594 ms (82.71% GC)\n  --------------\n  samples:          4854\n  evals/sample:     1\n\"\"\"\naffect!(integrator) = integrator.p[1] += 0.0\ncb = DiscreteCallback(condition,affect!,save_positions=(false,false))\n@benchmark solve(prob,Tsit5(),u0=u0,p=p,callback=cb,tstops=[5.0],abstol=1e-14,reltol=1e-14,saveat=0.1,sensealg=BacksolveAdjoint())\n##\n\"\"\"  p[1] += 2. using DiscreteCallback\nBenchmarkTools.Trial: \n  memory estimate:  18.67 KiB\n  allocs estimate:  150\n  --------------\n  minimum time:     13.660 ms (0.00% GC)\n  median time:      17.021 ms (0.00% GC)\n  mean time:        17.244 ms (0.00% GC)\n  maximum time:     24.512 ms (0.00% GC)\n  --------------\n  samples:          290\n  evals/sample:     1\n\"\"\"\naffect2p!(integrator) = integrator.p[1] += 2.0\ncb2p = DiscreteCallback(condition,affect2p!,save_positions=(false,false))\n@benchmark solve(prob,Tsit5(),u0=u0,p=p,callback=cb2p,tstops=[5.0],abstol=1e-14,reltol=1e-14,saveat=0.1,sensealg=BacksolveAdjoint())\n##\n\"\"\"  p[1] += 2. using d_discontinuities\nBenchmarkTools.Trial: \n  memory estimate:  18.69 KiB\n  allocs estimate:  151\n  --------------\n  minimum time:     20.110 ms (0.00% GC)\n  median time:      21.858 ms (0.00% GC)\n  mean time:        22.164 ms (0.00% GC)\n  maximum time:     27.730 ms (0.00% GC)\n  --------------\n  samples:          226\n  evals/sample:     1\n\"\"\"\n@inline step(t) = Float64(t≥5)*2\nfunction fiip_wt_step(du,u,p,t)\n  du[1] = dx = (p[1]+step(t))*u[1] - p[2]*u[1]*u[2]\n  du[2] = dy = -p[3]*u[2] + p[4]*u[1]*u[2]\nend\nprob_wt_step = ODEProblem(fiip_wt_step,u0,(0.0,10.0),p)\n@benchmark solve(prob_wt_step,Tsit5(),u0=u0,p=p,abstol=1e-14,reltol=1e-14,saveat=0.1,sensealg=BacksolveAdjoint(), d_discontinuities=[5.0])\n##\n\"\"\"  p[1] += 2. using tstops\nBenchmarkTools.Trial: \n  memory estimate:  18.64 KiB\n  allocs estimate:  150\n  --------------\n  minimum time:     19.751 ms (0.00% GC)\n  median time:      20.685 ms (0.00% GC)\n  mean time:        20.784 ms (0.00% GC)\n  maximum time:     28.346 ms (0.00% GC)\n  --------------\n  samples:          241\n  evals/sample:     1\n\"\"\"\n@inline step(t) = Float64(t≥5)*2\nfunction fiip_wt_step(du,u,p,t)\n  du[1] = dx = (p[1]+step(t))*u[1] - p[2]*u[1]*u[2]\n  du[2] = dy = -p[3]*u[2] + p[4]*u[1]*u[2]\nend\nprob_wt_step = ODEProblem(fiip_wt_step,u0,(0.0,10.0),p)\n@benchmark solve(prob_wt_step,Tsit5(),u0=u0,p=p,abstol=1e-14,reltol=1e-14,saveat=0.1,sensealg=BacksolveAdjoint(), tstops=[5.0])"}]}]}],"thread_ts":"1611419279.048900","parent_user_id":"UPM0H43C7"},{"client_msg_id":"d0e63653-83ba-40ec-868c-dffad7830ff5","type":"message","text":"the first one is solving a different equation so I don't get that one.","user":"U69BL50BF","ts":"1611426984.058100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=/T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the first one is solving a different equation so I don't get that one."}]}]}],"thread_ts":"1611419279.048900","parent_user_id":"UPM0H43C7"},{"client_msg_id":"0f2678bb-590d-4081-9c4c-8f674412cb1d","type":"message","text":"the cost is probably due to branch prediction failures? Hmm","user":"U69BL50BF","ts":"1611427072.058300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Xg55s","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the cost is probably due to branch prediction failures? Hmm"}]}]}],"thread_ts":"1611419279.048900","parent_user_id":"UPM0H43C7"},{"client_msg_id":"3ce826bf-75b5-4311-8117-a426785bcdd4","type":"message","text":"did you profile it?","user":"U69BL50BF","ts":"1611427074.058500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2kWNC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"did you profile it?"}]}]}],"thread_ts":"1611419279.048900","parent_user_id":"UPM0H43C7"},{"client_msg_id":"813ee68a-f958-4027-82f7-3e07be3a31d5","type":"message","text":"no","user":"UPM0H43C7","ts":"1611427103.058700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DQEz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no"}]}]}],"thread_ts":"1611419279.048900","parent_user_id":"UPM0H43C7"},{"client_msg_id":"13516ead-4ebf-43c7-ba18-c4d240bea1e0","type":"message","text":"it would be worth seeing if something pops up there.","user":"U69BL50BF","ts":"1611427122.058900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8b9OV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it would be worth seeing if something pops up there."}]}]}],"thread_ts":"1611419279.048900","parent_user_id":"UPM0H43C7"},{"client_msg_id":"64fc2879-c23b-4d7e-9429-9df14cae1a82","type":"message","text":"I’ll look into it more later I’m drowning in work ;(","user":"UPM0H43C7","ts":"1611428073.059100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EKS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’ll look into it more later I’m drowning in work ;("}]}]}],"thread_ts":"1611419279.048900","parent_user_id":"UPM0H43C7"}]