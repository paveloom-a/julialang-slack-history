[{"client_msg_id":"b324a70c-5ffa-4fc2-95ee-1f56d20599b5","type":"message","text":"A few days ago I asked about fitting large (-ish) neural ode models, and I ran into problems with the memory usage both during the solve call and the adjoint.\n\nI tested it and I think the culprit is taking a low-dimensional input (that with the neural ODE defines a inhomogeneous system) and embedding it in a higher dimensional space. Even though the input is instantaneous, something during the solve call must store it. This is despite the fact the embedding is wrapped with `Zygote.ignore` .\n\nI tried implementing it with a `DiscreteCallback`  that affects the parameters (rather than states `u`). This was a partial success as it halved the peak memory usage. but it does not work with reverse mode autodiff (at least the ones I tried).\n\nAny suggestions what might a good workaround this problem?","user":"UPM0H43C7","ts":"1611328034.032200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QhYV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"A few days ago I asked about fitting large (-ish) neural ode models, and I ran into problems with the memory usage both during the solve call and the adjoint.\n\nI tested it and I think the culprit is taking a low-dimensional input (that with the neural ODE defines a inhomogeneous system) and embedding it in a higher dimensional space. Even though the input is instantaneous, something during the solve call must store it. This is despite the fact the embedding is wrapped with "},{"type":"text","text":"Zygote.ignore","style":{"code":true}},{"type":"text","text":" .\n\nI tried implementing it with a "},{"type":"text","text":"DiscreteCallback","style":{"code":true}},{"type":"text","text":"  that affects the parameters (rather than states "},{"type":"text","text":"u","style":{"code":true}},{"type":"text","text":"). This was a partial success as it halved the peak memory usage. but it does not work with reverse mode autodiff (at least the ones I tried).\n\nAny suggestions what might a good workaround this problem?"}]}]}],"thread_ts":"1611328034.032200","reply_count":35,"reply_users_count":2,"latest_reply":"1611348558.040700","reply_users":["UPM0H43C7","U69BL50BF"],"subscribed":false},{"client_msg_id":"383b48ec-e9ea-4865-a543-fb79c3af27cd","type":"message","text":"Some more detail, the embedding is a one-hot type encoding and the input is interpolated to be piecewise constant. The interpolation is also wrapped with Zygote.ignore.\n\nThe callback solve has a peak memory use of 4.5 GB on a 250*100*140 time units system, vs the 9-10 GB one for including the one-hot interpolation directly ( du(u,p,t) = \\dots + W*onehot(t) )","user":"UPM0H43C7","ts":"1611328233.032300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/e/4p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Some more detail, the embedding is a one-hot type encoding and the input is interpolated to be piecewise constant. The interpolation is also wrapped with Zygote.ignore.\n\nThe callback solve has a peak memory use of 4.5 GB on a 250*100*140 time units system, vs the 9-10 GB one for including the one-hot interpolation directly ( du(u,p,t) = \\dots + W*onehot(t) )"}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"81c445b6-c297-4ab0-a45a-2c4a847f8f26","type":"message","text":"&gt; I tried implementing it with a `DiscreteCallback`  that affects the parameters (rather than states `u`). This was a partial success as it halved the peak memory usage. but it does not work with reverse mode autodiff (at least the ones I tried).\nIt would be good to get an MWE. We've been doing a bunch of stuff with this, but not with callbacks changing parameters","user":"U69BL50BF","ts":"1611329117.032500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1NTSQ","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"I tried implementing it with a "},{"type":"text","text":"DiscreteCallback","style":{"code":true}},{"type":"text","text":"  that affects the parameters (rather than states "},{"type":"text","text":"u","style":{"code":true}},{"type":"text","text":"). This was a partial success as it halved the peak memory usage. but it does not work with reverse mode autodiff (at least the ones I tried)."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"It would be good to get an MWE. We've been doing a bunch of stuff with this, but not with callbacks changing parameters"}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"DA85648E-8B23-4138-9653-F9D8188B11EF","type":"message","text":"Yeah, I saw. I'll send it over in a few hours.","user":"UPM0H43C7","ts":"1611331436.033100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ogLLb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, I saw. I'll send it over in a few hours."}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"E771DDC1-ADEC-4A1B-8796-BE6B34A81674","type":"message","text":"Any idea though why a fixed mapping from a bunch of piecewise constant  scalars blows up memory?","user":"UPM0H43C7","ts":"1611331518.034300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fIG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Any idea though why a fixed mapping from a bunch of piecewise constant  scalars blows up memory?"}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"edc73adf-1721-4065-b461-f4ffc2f83a74","type":"message","text":"nope. I can't quite picture what you're doing anyways.","user":"U69BL50BF","ts":"1611336623.034600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2CG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"nope. I can't quite picture what you're doing anyways."}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"c2fc457d-7a90-4e4c-90a9-ac4bb562798f","type":"message","text":"I’m sorry, was dead tired when I wrote that.\nThe problem I’m faced is the following. Suppose we have an inhomogeneous ODE parametrized by a function of this form\n```dudt_(u,x,p,t) = \\sigma.(Wr*u + Wi*x(t) +b)```\nI fit these by interpolating the input `x`  with some interpolator and it runs smoothly. The problems start when I consider x to be a one-hot coded input and `Wi*onehot(x(t))`  becomes a matrix-matrix product. I figured that the most efficient way of doing is to somehow represent the matmul as `W[:, x(t) ]` with `x`’s being integers.  To give some extra context, I assume that all `x`’s are piecewise constant and live on the same regular grid.","user":"UPM0H43C7","ts":"1611342308.034800","team":"T68168MUP","edited":{"user":"UPM0H43C7","ts":"1611342390.000000"},"blocks":[{"type":"rich_text","block_id":"vP4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’m sorry, was dead tired when I wrote that.\nThe problem I’m faced is the following. Suppose we have an inhomogeneous ODE parametrized by a function of this form\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"dudt_(u,x,p,t) = \\sigma.(Wr*u + Wi*x(t) +b)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I fit these by interpolating the input "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":"  with some interpolator and it runs smoothly. The problems start when I consider x to be a one-hot coded input and "},{"type":"text","text":"Wi*onehot(x(t))","style":{"code":true}},{"type":"text","text":"  becomes a matrix-matrix product. I figured that the most efficient way of doing is to somehow represent the matmul as "},{"type":"text","text":"W[:, x(t) ]","style":{"code":true}},{"type":"text","text":" with "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":"’s being integers.  To give some extra context, I assume that all "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":"’s are piecewise constant and live on the same regular grid."}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"548309a6-5ef5-41b5-a197-19e7c307d376","type":"message","text":":shrug: this seems like an ML issue. Asking in that channel would probably let you know of anyone working on a sparser representation","user":"U69BL50BF","ts":"1611342364.035000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4M1","elements":[{"type":"rich_text_section","elements":[{"type":"emoji","name":"shrug"},{"type":"text","text":" this seems like an ML issue. Asking in that channel would probably let you know of anyone working on a sparser representation"}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"7c637b07-c169-494d-b21d-82ac65a82b18","type":"message","text":"Sorry, typing slowly — I’m getting to the DiffEq relevant part :smile:","user":"UPM0H43C7","ts":"1611342414.035300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NdJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sorry, typing slowly — I’m getting to the DiffEq relevant part "},{"type":"emoji","name":"smile"}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"83692287-b639-424c-a166-6d1428441139","type":"message","text":"Anyways, I noticed that if I solve the ivp my memmory usage blows up. It’s not because of the dimensionality of the state space- — replacing `Wi*onehot(x(t))`  with a fixed `Wi*A`  results in 1/6th memory usage. I checked if replaced that product with something that has an explicit time dependence (`Wi*cos.(t*A)`) and it bumped the memory usage, but only by a bit.","user":"UPM0H43C7","ts":"1611342694.035500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6kFf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Anyways, I noticed that if I solve the ivp my memmory usage blows up. It’s not because of the dimensionality of the state space- — replacing "},{"type":"text","text":"Wi*onehot(x(t))","style":{"code":true}},{"type":"text","text":"  with a fixed "},{"type":"text","text":"Wi*A","style":{"code":true}},{"type":"text","text":"  results in 1/6th memory usage. I checked if replaced that product with something that has an explicit time dependence ("},{"type":"text","text":"Wi*cos.(t*A)","style":{"code":true}},{"type":"text","text":") and it bumped the memory usage, but only by a bit."}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"7b50c2a1-7e33-4ab8-b47b-8d37a80e3a0d","type":"message","text":"how are you doing the interpolation?","user":"U69BL50BF","ts":"1611342746.035700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Pk3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"how are you doing the interpolation?"}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"7f51eb2b-9370-4372-a0d6-0e0f5ec779ab","type":"message","text":"Piecewise constant. And I force the solver to stop at the gridpoints.","user":"UPM0H43C7","ts":"1611342771.035900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5N0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Piecewise constant. And I force the solver to stop at the gridpoints."}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"d092b419-9ba2-4da9-8350-3645a29889a1","type":"message","text":"but how?","user":"U69BL50BF","ts":"1611342783.036100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XdP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but how?"}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"7786272f-363b-4557-96ef-d8f069bbcb80","type":"message","text":"DataInterpolations?","user":"U69BL50BF","ts":"1611342787.036300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"B6kV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"DataInterpolations?"}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"a284a87b-9437-4d80-a294-df4e571cd0c6","type":"message","text":"Yeah. Hacked it so it works with CUDA.jl and wrapped all the internals of the interpolation in `Zygote.ignore`","user":"UPM0H43C7","ts":"1611342821.036500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Iv2B6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah. Hacked it so it works with CUDA.jl and wrapped all the internals of the interpolation in "},{"type":"text","text":"Zygote.ignore","style":{"code":true}}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"50c21be7-f24b-4b68-92ad-d2fd616e90a9","type":"message","text":"it has derivative overloads?","user":"U69BL50BF","ts":"1611342844.036700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Eq/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it has derivative overloads?"}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"654f193a-1cbe-49b4-8510-a252fce69019","type":"message","text":"yup","user":"UPM0H43C7","ts":"1611342850.036900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"snAMK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yup"}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"8de45006-4c8c-402e-b0b1-94231ff56cb0","type":"message","text":"and it's using those?","user":"U69BL50BF","ts":"1611342856.037100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+pF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and it's using those?"}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"a3da9bc2-c77b-467f-861c-c46df6db66e6","type":"message","text":"yes","user":"UPM0H43C7","ts":"1611342863.037300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"B0ci","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes"}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"ffa9d5bc-b129-4178-87e7-84769a2f8adf","type":"message","text":"I would check to make sure it's not hitting scalar getindex overloads.","user":"U69BL50BF","ts":"1611342865.037500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aLwB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I would check to make sure it's not hitting scalar getindex overloads."}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"a75b8595-1acf-42f7-b7d1-e4f5f64b5385","type":"message","text":"scalar getindex copies really badlyh","user":"U69BL50BF","ts":"1611342874.037700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LMzF1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"scalar getindex copies really badlyh"}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"39dc2f39-60b7-4d0a-a217-cf8b98e49df7","type":"message","text":"that would blow up memory","user":"U69BL50BF","ts":"1611342878.037900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g41E","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that would blow up memory"}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"b77ed53f-bbea-47c3-bef7-5562fd110756","type":"message","text":"try to isolate it","user":"U69BL50BF","ts":"1611342901.038100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Wxc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"try to isolate it"}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"2a460622-bfc9-44d1-9293-b667297b7b24","type":"message","text":"disabled with CUDA.allowscalar(false)","user":"UPM0H43C7","ts":"1611342905.038300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MrL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"disabled with CUDA.allowscalar(false)"}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"8ca4f7c0-0f86-4c0d-9fae-a22cecf19d35","type":"message","text":"if you just differentiate that interpolation part do you get the memory blow up?","user":"U69BL50BF","ts":"1611342914.038500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eXR4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you just differentiate that interpolation part do you get the memory blow up?"}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"63d0013d-8039-4ce0-8714-1aafbc44883c","type":"message","text":"I never tried tbh.","user":"UPM0H43C7","ts":"1611342944.038700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UacAC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I never tried tbh."}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"8db178be-1e06-4ca5-a494-44cbf2f6f2d0","type":"message","text":"Even if I used a explicit solver like Tsit5, does the DiffEq suite use ForwardDiff?","user":"UPM0H43C7","ts":"1611342999.038900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cLD+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Even if I used a explicit solver like Tsit5, does the DiffEq suite use ForwardDiff?"}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"62b6a543-5738-4403-9308-e1c502b6bed2","type":"message","text":"Cause I’m pretty sure I’ve disabled any redundant gradient computation done by Zygote","user":"UPM0H43C7","ts":"1611343042.039100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jFK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Cause I’m pretty sure I’ve disabled any redundant gradient computation done by Zygote"}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"a30c3995-8238-4d60-a9b9-ec71c60b2dae","type":"message","text":"&gt; Even if I used a explicit solver like Tsit5, does the DiffEq suite use ForwardDiff?\nNo","user":"U69BL50BF","ts":"1611343083.039300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Izm1","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"Even if I used a explicit solver like Tsit5, does the DiffEq suite use ForwardDiff?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"No"}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"c9f1ed3e-3769-4466-9e6d-b690c189611e","type":"message","text":"Oh and one last thing before I forget. If I include those `x` ’s as as parameters for the differential equation problem then I get 1/2 half of the memory consumption that I got by just including the the interpolation in `dudt_`. There are two interesting things about it. I was lazy when I tested it so `affect!` still used the interpolation. The second, unfortunate one is that when I tested against `DiffEqSensitivity#master`  I got some gnarly error (stack trace the length of the mahabharata)","user":"UPM0H43C7","ts":"1611343344.039500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"A/os3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh and one last thing before I forget. If I include those "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" ’s as as parameters for the differential equation problem then I get 1/2 half of the memory consumption that I got by just including the the interpolation in "},{"type":"text","text":"dudt_","style":{"code":true}},{"type":"text","text":". There are two interesting things about it. I was lazy when I tested it so "},{"type":"text","text":"affect!","style":{"code":true}},{"type":"text","text":" still used the interpolation. The second, unfortunate one is that when I tested against "},{"type":"text","text":"DiffEqSensitivity#master","style":{"code":true}},{"type":"text","text":"  I got some gnarly error (stack trace the length of the mahabharata)"}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"7a39c959-92e4-4e2e-a90b-7a0bc68f6115","type":"message","text":"the error is probably correct.","user":"U69BL50BF","ts":"1611345057.039700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BXW3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the error is probably correct."}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"a81c9a68-4475-495f-a761-7e0679909788","type":"message","text":"I figured.\nMWE\n```    function fiip(du,u,p,t)\n     du[1] = dx = p[1]*u[1] - p[2]*u[1]*u[2]\n     du[2] = dy = -p[3]*u[2] + p[4]*u[1]*u[2]\n    end\n    p = [1.5,1.0,3.0,1.0]; u0 = [1.0;1.0]\n    prob = ODEProblem(fiip,u0,(0.0,10.0),p)\n    condition(u,t,integrator) = t == 5\n    affect!(integrator) = integrator.p[1] += 0.0\n    cb = DiscreteCallback(condition,affect!,save_positions=(false,false))\n\n\n    du01,dp1 = Zygote.gradient(\n    (u0,p)-&gt;sum(solve(prob,Tsit5(),u0=u0,p=p,callback=cb,tstops=[5.0],abstol=1e-14,reltol=1e-14,saveat=0.1,sensealg=BacksolveAdjoint())),\n    u0,p)```\n\n``` Warning: Adjoint failed\n│   exception = (ErrorException(\"TrackedArrays do not support setindex!\"), Base.StackTraces.StackFrame[top-level scope at logging.jl:332, top-level scope at callback_adj.jl:60, include_string(::Function, ::Module, ::String, ::String) at loading.jl:1091, invokelatest(::Any, ::Any, ::Vararg{Any,N} where N; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at essentials.jl:710, invokelatest(::Any, ::Any, ::Vararg{Any,N} where N) at essentials.jl:709, inlineeval(::Module, ::String, ::Int64, ::Int64, ::String; softscope::Bool) at eval.jl:185, inlineeval at eval.jl:183 [inlined], (::VSCodeServer.var\"#61#65\"{String,Int64,Int64,String,Module,Bool,VSCodeServer.ReplRunCodeRequestParams})() at eval.jl:144, withpath(::VSCodeServer.var\"#61#65\"{String,Int64,Int64,String,Module,Bool,VSCodeServer.ReplRunCodeRequestParams}, ::String) at repl.jl:124, (::VSCodeServer.var\"#60#64\"{String,Int64,Int64,String,Module,Bool,Bool,VSCodeServer.ReplRunCodeRequestParams})() at eval.jl:142, hideprompt(::VSCodeServer.var\"#60#64\"{String,Int64,Int64,String,Module,Bool,Bool,VSCodeServer.ReplRunCodeRequestParams}) at repl.jl:36, (::VSCodeServer.var\"#59#63\"{String,Int64,Int64,String,Module,Bool,Bool,VSCodeServer.ReplRunCodeRequestParams})() at eval.jl:110, with_logstate(::Function, ::Any) at logging.jl:408, with_logger at logging.jl:514 [inlined], (::VSCodeServer.var\"#58#62\"{VSCodeServer.ReplRunCodeRequestParams})() at eval.jl:109, #invokelatest#1 at essentials.jl:710 [inlined], invokelatest(::Any) at essentials.jl:709, macro expansion at eval.jl:27 [inlined], (::VSCodeServer.var\"#56#57\")() at task.jl:356])```","user":"UPM0H43C7","ts":"1611347412.039900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bAN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I figured.\nMWE\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"    function fiip(du,u,p,t)\n     du[1] = dx = p[1]*u[1] - p[2]*u[1]*u[2]\n     du[2] = dy = -p[3]*u[2] + p[4]*u[1]*u[2]\n    end\n    p = [1.5,1.0,3.0,1.0]; u0 = [1.0;1.0]\n    prob = ODEProblem(fiip,u0,(0.0,10.0),p)\n    condition(u,t,integrator) = t == 5\n    affect!(integrator) = integrator.p[1] += 0.0\n    cb = DiscreteCallback(condition,affect!,save_positions=(false,false))\n\n\n    du01,dp1 = Zygote.gradient(\n    (u0,p)->sum(solve(prob,Tsit5(),u0=u0,p=p,callback=cb,tstops=[5.0],abstol=1e-14,reltol=1e-14,saveat=0.1,sensealg=BacksolveAdjoint())),\n    u0,p)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":" Warning: Adjoint failed\n│   exception = (ErrorException(\"TrackedArrays do not support setindex!\"), Base.StackTraces.StackFrame[top-level scope at logging.jl:332, top-level scope at callback_adj.jl:60, include_string(::Function, ::Module, ::String, ::String) at loading.jl:1091, invokelatest(::Any, ::Any, ::Vararg{Any,N} where N; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at essentials.jl:710, invokelatest(::Any, ::Any, ::Vararg{Any,N} where N) at essentials.jl:709, inlineeval(::Module, ::String, ::Int64, ::Int64, ::String; softscope::Bool) at eval.jl:185, inlineeval at eval.jl:183 [inlined], (::VSCodeServer.var\"#61#65\"{String,Int64,Int64,String,Module,Bool,VSCodeServer.ReplRunCodeRequestParams})() at eval.jl:144, withpath(::VSCodeServer.var\"#61#65\"{String,Int64,Int64,String,Module,Bool,VSCodeServer.ReplRunCodeRequestParams}, ::String) at repl.jl:124, (::VSCodeServer.var\"#60#64\"{String,Int64,Int64,String,Module,Bool,Bool,VSCodeServer.ReplRunCodeRequestParams})() at eval.jl:142, hideprompt(::VSCodeServer.var\"#60#64\"{String,Int64,Int64,String,Module,Bool,Bool,VSCodeServer.ReplRunCodeRequestParams}) at repl.jl:36, (::VSCodeServer.var\"#59#63\"{String,Int64,Int64,String,Module,Bool,Bool,VSCodeServer.ReplRunCodeRequestParams})() at eval.jl:110, with_logstate(::Function, ::Any) at logging.jl:408, with_logger at logging.jl:514 [inlined], (::VSCodeServer.var\"#58#62\"{VSCodeServer.ReplRunCodeRequestParams})() at eval.jl:109, #invokelatest#1 at essentials.jl:710 [inlined], invokelatest(::Any) at essentials.jl:709, macro expansion at eval.jl:27 [inlined], (::VSCodeServer.var\"#56#57\")() at task.jl:356])"}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"f8875408-d9dc-44eb-883c-f0e0cf164dbf","type":"message","text":"interesting","user":"U69BL50BF","ts":"1611347704.040100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=LdU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"interesting"}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"4c421a56-c1f4-4017-b93b-4ea0ad97dea2","type":"message","text":"can you make that into an issue?","user":"U69BL50BF","ts":"1611347714.040300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dYMb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"can you make that into an issue?"}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"e4baf319-713f-42c1-89e1-be0175efd345","type":"message","text":"It requires the callback right?","user":"U69BL50BF","ts":"1611347717.040500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gRWc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It requires the callback right?"}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"},{"client_msg_id":"22b728a9-59e8-4f21-b069-66b11de86b86","type":"message","text":"yeap","user":"UPM0H43C7","ts":"1611348558.040700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OW21","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeap"}]}]}],"thread_ts":"1611328034.032200","parent_user_id":"UPM0H43C7"}]