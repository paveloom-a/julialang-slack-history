[{"client_msg_id":"654c55a7-d953-458c-a9f0-2bf45084b50a","type":"message","text":"Two questions: (1) I'm seeing a performance drop of almost 50x when using ArrayPartition as the state variable, even with no problems from @code_warntype. Is this normal/expected? And (2) Is there a standard, performant way to couple PDEs together when the discretized grid sizes are different?","user":"U01H36BUDJB","ts":"1612645291.309100","team":"T68168MUP","edited":{"user":"U01H36BUDJB","ts":"1612645364.000000"},"blocks":[{"type":"rich_text","block_id":"+=8F0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Two questions: (1) I'm seeing a performance drop of almost 50x when using ArrayPartition as the state variable, even with no problems from @code_warntype. Is this normal/expected? And (2) Is there a standard, performant way to couple PDEs together when the discretized grid sizes are different?"}]}]}],"thread_ts":"1612645291.309100","reply_count":56,"reply_users_count":2,"latest_reply":"1612704510.325100","reply_users":["U69BL50BF","U01H36BUDJB"],"subscribed":false},{"client_msg_id":"9b4b33a9-e925-489d-ae13-4eda7bc05092","type":"message","text":"interesting. I know it's not going to be as efficient as just using views on a single array, but that is much larger than I expected, like 2x to 4x would be in the range I recall.","user":"U69BL50BF","ts":"1612652560.311800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"i=x","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"interesting. I know it's not going to be as efficient as just using views on a single array, but that is much larger than I expected, like 2x to 4x would be in the range I recall."}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"cab6de39-3206-4a6a-b75f-07205a1e5b82","type":"message","text":"Do you have an MWE for this?","user":"U69BL50BF","ts":"1612652566.312000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IClX1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Do you have an MWE for this?"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"ccd4fcb5-d0f1-4a5f-a10e-0c7885470f30","type":"message","text":"I would try ComponentArrays.jl here.","user":"U69BL50BF","ts":"1612652572.312200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"88yo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I would try ComponentArrays.jl here."}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"40c039f9-e8e3-4f06-b017-ef21bf8fa5df","type":"message","text":"I'll have to clean up the code a bit, but yes I have a MWE with the heat equation.","user":"U01H36BUDJB","ts":"1612655445.313200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xSod","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'll have to clean up the code a bit, but yes I have a MWE with the heat equation."}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"e2cf6179-5803-4f40-b811-11325d5264d5","type":"message","text":"Funny, I just implemented a much less fully featured version of ComponentArrays for myself to deal with flattening parameters. I didn't know that package existed!","user":"U01H36BUDJB","ts":"1612655489.313400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ORQi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Funny, I just implemented a much less fully featured version of ComponentArrays for myself to deal with flattening parameters. I didn't know that package existed!"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"098a46ed-3143-452d-ae4b-c8789a528007","type":"message","text":"it's a great package.","user":"U69BL50BF","ts":"1612655519.313600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"y5C04","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's a great package."}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"936dd6ff-6ca1-43c6-9eb2-a22e051842a7","type":"message","text":"We need to use it in tutorials more","user":"U69BL50BF","ts":"1612655523.313800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nEhG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We need to use it in tutorials more"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"aeabc273-9f6f-4022-ba91-f6e8c3ce861f","type":"message","text":"it kind of supersceded MultiScaleArrays and ArrayPartition for this purpose when it came out.","user":"U69BL50BF","ts":"1612655538.314000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0y0W","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it kind of supersceded MultiScaleArrays and ArrayPartition for this purpose when it came out."}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"e6fff61c-5e48-4e47-8789-fb0dcc63f2e0","type":"message","text":"does it have a smaller footprint?","user":"U01H36BUDJB","ts":"1612655559.314200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uV3Er","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"does it have a smaller footprint?"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"102728f6-663e-49d9-b7dc-54cf532743f2","type":"message","text":"I mean I'm surprised ArrayPartition has such a huge effect considering that it's type stable...","user":"U01H36BUDJB","ts":"1612655586.314400","team":"T68168MUP","edited":{"user":"U01H36BUDJB","ts":"1612655598.000000"},"blocks":[{"type":"rich_text","block_id":"u4m","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean I'm surprised ArrayPartition has such a huge effect considering that it's type stable..."}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"5bf473cd-da91-422c-a340-c994326bcdb3","type":"message","text":"I'm kind of surprised by the cost","user":"U69BL50BF","ts":"1612655634.314700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"H0JZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm kind of surprised by the cost"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"fd75232c-bca2-4b74-8bda-2ec92ed3ba38","type":"message","text":"that's why I'd like to take a look","user":"U69BL50BF","ts":"1612655639.314900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WrkX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's why I'd like to take a look"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"26cf9e07-733a-4b38-8bf0-b3e7e7cb72f1","type":"message","text":"It might be because of the broadcast overload not constant proping, it might because of the linear algebra having to transform","user":"U69BL50BF","ts":"1612655661.315100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=cgmq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It might be because of the broadcast overload not constant proping, it might because of the linear algebra having to transform"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"b30b8958-70fd-4f09-a2d9-e61005a3f033","type":"message","text":"it's hard to tell","user":"U69BL50BF","ts":"1612655664.315300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xunf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's hard to tell"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"54a96479-8183-4726-b7bf-513349072ae3","type":"message","text":"if you can generate a quick profile that would be great.","user":"U69BL50BF","ts":"1612655676.315500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"k5=3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you can generate a quick profile that would be great."}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"6c3ba906-1319-4852-a173-10c574e92df3","type":"message","text":"I was also testing Unitful alongside it, so I'll make sure to remove that as well. That also seems to have a significant cost with ArrayPartition but has low overhead on a normal Array with everything typed as the same unit.","user":"U01H36BUDJB","ts":"1612655842.315700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"r/HM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I was also testing Unitful alongside it, so I'll make sure to remove that as well. That also seems to have a significant cost with ArrayPartition but has low overhead on a normal Array with everything typed as the same unit."}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"73346444-7aa0-4f38-b76f-ee7567db09b5","type":"message","text":"But that makes sense, I guess, because it would potentially make ArrayPartition type unstable to mix units, depending on how you access it.","user":"U01H36BUDJB","ts":"1612655883.315900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5gNG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But that makes sense, I guess, because it would potentially make ArrayPartition type unstable to mix units, depending on how you access it."}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"d38e3c0e-fdc7-4bc5-aed0-07ed52147d3e","type":"message","text":"yes, it will be badly type unstable, which is why I don't suggest it anymore. I think we need an entirely new units package, so I don't recommend it at all.","user":"U69BL50BF","ts":"1612656093.316100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HKX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, it will be badly type unstable, which is why I don't suggest it anymore. I think we need an entirely new units package, so I don't recommend it at all."}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"0642b697-fd81-48c0-97d0-3edc4a97872c","type":"message","text":"```using DifferentialEquations, OrdinaryDiffEq, DiffEqOperators\nusing BenchmarkTools\nusing RecursiveArrayTools\nusing FastClosures\n\nconst nknots = 100\nconst h = 1.0/(nknots+1)\nt0 = 0.0\nt1 = 1.0\n\nfunction _f(du,u,p,t)\n  du .= zero(eltype(u))\n  u₃ = @view u[3:end]\n  u₂ = @view u[2:end-1]\n  u₁ = @view u[1:end-2]\n  @. du[2:end-1] = ((u₃ - 2*u₂ + u₁)/h^2.0)\n  nothing\nend\n\nfunction f(du,u,p,t)\n  _f(du.x[1],u.x[1],p,t)\n  _f(du.x[2],u.x[2],p,t)\nend\n\nA = randn(200)\nu0 = ArrayPartition(A[1:100],A[101:200])\nprob = ODEProblem(f, u0, (t0, t1))\nsol = @btime solve(prob, Tsit5(), saveat=0.2)\n\nfunction f(du,u,p,t)\n  _f(du[1:100],u[1:100],p,t)\n  _f(du[101:200],u[101:200],p,t)\nend\n\nu0 = A\nprob = ODEProblem(f, u0, (t0, t1))\nsol = @btime solve(prob, Tsit5(), saveat=0.2)```\nHere's the MWE. If you use the second version of `f` with the linear indices hard-coded, then the overhead is just 2-4x like you said. The issue seems to be with accessing the nested arrays via `.x` , but maybe this is expected?","user":"U01H36BUDJB","ts":"1612656540.316300","team":"T68168MUP","edited":{"user":"U01H36BUDJB","ts":"1612657261.000000"},"blocks":[{"type":"rich_text","block_id":"DH0","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using DifferentialEquations, OrdinaryDiffEq, DiffEqOperators\nusing BenchmarkTools\nusing RecursiveArrayTools\nusing FastClosures\n\nconst nknots = 100\nconst h = 1.0/(nknots+1)\nt0 = 0.0\nt1 = 1.0\n\nfunction _f(du,u,p,t)\n  du .= zero(eltype(u))\n  u₃ = @view u[3:end]\n  u₂ = @view u[2:end-1]\n  u₁ = @view u[1:end-2]\n  @. du[2:end-1] = ((u₃ - 2*u₂ + u₁)/h^2.0)\n  nothing\nend\n\nfunction f(du,u,p,t)\n  _f(du.x[1],u.x[1],p,t)\n  _f(du.x[2],u.x[2],p,t)\nend\n\nA = randn(200)\nu0 = ArrayPartition(A[1:100],A[101:200])\nprob = ODEProblem(f, u0, (t0, t1))\nsol = @btime solve(prob, Tsit5(), saveat=0.2)\n\nfunction f(du,u,p,t)\n  _f(du[1:100],u[1:100],p,t)\n  _f(du[101:200],u[101:200],p,t)\nend\n\nu0 = A\nprob = ODEProblem(f, u0, (t0, t1))\nsol = @btime solve(prob, Tsit5(), saveat=0.2)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Here's the MWE. If you use the second version of "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" with the linear indices hard-coded, then the overhead is just 2-4x like you said. The issue seems to be with accessing the nested arrays via "},{"type":"text","text":".x","style":{"code":true}},{"type":"text","text":" , but maybe this is expected?"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"c14e9d28-2e77-4935-b366-09a19ac4da1d","type":"message","text":"```# with ArrayPartition, first f\n86.704 ms (23382 allocations: 3.24 MiB)\n# plain array, second f\n31.650 μs (184 allocations: 159.30 KiB)\n# ArrayPartition second f\n70.867 μs (226 allocations: 160.95 KiB)```","user":"U01H36BUDJB","ts":"1612656630.316600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O/C","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"# with ArrayPartition, first f\n86.704 ms (23382 allocations: 3.24 MiB)\n# plain array, second f\n31.650 μs (184 allocations: 159.30 KiB)\n# ArrayPartition second f\n70.867 μs (226 allocations: 160.95 KiB)"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"2faca9fe-9034-4848-ad7d-f0213993735f","type":"message","text":"yeah the linear indices are slow.","user":"U69BL50BF","ts":"1612656653.316800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nbm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah the linear indices are slow."}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"23b327f9-d37a-4b44-88ca-f1f577fc05e5","type":"message","text":"It's made to only use them as a fallback","user":"U69BL50BF","ts":"1612656660.317000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g2O","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's made to only use them as a fallback"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"a509c9d2-1d2b-4e8a-a0ae-58f09a42f032","type":"message","text":"broadcast doesn't use them, and it's assumed user code won't (otherwise, use an array)","user":"U69BL50BF","ts":"1612656679.317200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h8cO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"broadcast doesn't use them, and it's assumed user code won't (otherwise, use an array)"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"1cc9ea67-705f-4828-95fb-96727f7b8517","type":"message","text":"but then to make linear algebra faster, it converts to an array before doing linalg, which is where the 2x-4x can come from.","user":"U69BL50BF","ts":"1612656701.317400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LXnsi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but then to make linear algebra faster, it converts to an array before doing linalg, which is where the 2x-4x can come from."}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"9bfebd30-a256-49e5-8114-2bc1ec41ed31","type":"message","text":"yeah then I think ComponentArrays is more what I need","user":"U01H36BUDJB","ts":"1612656704.317600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mAT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah then I think ComponentArrays is more what I need"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"952b2ddb-188c-4023-b5c1-b5e8fd8ac3f5","type":"message","text":"Yeah, ComponentArrays have an actual array underneath, so that fixes the linalg in a nice way.","user":"U69BL50BF","ts":"1612656720.317800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ta4S","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, ComponentArrays have an actual array underneath, so that fixes the linalg in a nice way."}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"6b9836bd-6d64-412e-9542-cd7e2ee4b6d8","type":"message","text":"MultiScaleArrays seemed like a good fit too at first","user":"U01H36BUDJB","ts":"1612656770.318000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ryo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"MultiScaleArrays seemed like a good fit too at first"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"efe02a97-59d6-4c62-ba02-15f6d09f608f","type":"message","text":"but it had pretty huge overhead as well, worse than ArrayPartition","user":"U01H36BUDJB","ts":"1612656784.318200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p3u","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but it had pretty huge overhead as well, worse than ArrayPartition"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"66e4ba2d-4330-470f-8dfa-e75bee6f6b3c","type":"message","text":"and also the structure doesn't quite fit nicely with what I'm trying to do","user":"U01H36BUDJB","ts":"1612656801.318400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cbN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and also the structure doesn't quite fit nicely with what I'm trying to do"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"54e725bd-d642-4c7c-97a1-9b942a54e591","type":"message","text":"that's why the 2021 approach I'm doing is ModelingToolkit","user":"U69BL50BF","ts":"1612656822.318600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Rwt23","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's why the 2021 approach I'm doing is ModelingToolkit"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"ac905701-72dc-4f12-9c28-c8ea94dacf0f","type":"message","text":"build the system symbolically, but compile it down to something on arrays.","user":"U69BL50BF","ts":"1612656830.318800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KLp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"build the system symbolically, but compile it down to something on arrays."}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"ed2ccc5b-a882-41d7-a587-e5b3b9770d6c","type":"message","text":"mixing abstraction with computational details (i.e. splitting into different arrays to match user structure) doesn't lead to great performance","user":"U69BL50BF","ts":"1612656858.319000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=IF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"mixing abstraction with computational details (i.e. splitting into different arrays to match user structure) doesn't lead to great performance"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"ab70c9a0-45e3-4061-b62e-b4901c31f1dd","type":"message","text":"except in weird cases","user":"U69BL50BF","ts":"1612656862.319200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"74zlH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"except in weird cases"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"ae3b6590-baff-4613-8f65-d62db9dd16f9","type":"message","text":"that would certainly be nice, but I have trouble believing it will work for complicated, multi-scale models...?","user":"U01H36BUDJB","ts":"1612656870.319400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sZY85","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that would certainly be nice, but I have trouble believing it will work for complicated, multi-scale models...?"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"7f28cf1c-c2b1-47d7-923d-183dda589ad0","type":"message","text":"MultiScaleArrays are the best way to have models that change size all of the time.","user":"U69BL50BF","ts":"1612656873.319600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ND2+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"MultiScaleArrays are the best way to have models that change size all of the time."}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"933b3cd3-c529-4e34-a167-7ac9e0ec804d","type":"message","text":"&gt; that would certainly be nice, but I have trouble believing it will work for complicated, multi-scale models...?\nDefinitely not the case. Building an 8000 equation model is relatively straightforward from our tests :wink:","user":"U69BL50BF","ts":"1612656903.319800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1og","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"that would certainly be nice, but I have trouble believing it will work for complicated, multi-scale models...?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Definitely not the case. Building an 8000 equation model is relatively straightforward from our tests "},{"type":"emoji","name":"wink"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"384348e2-7c60-44fe-ae3b-eb09b9018442","type":"message","text":"Also it lets you symbolically simplify it down, so you can do a bunch of tricks to reduce it down to like 100 equations, solve those, and lazily reconstruct the others.","user":"U69BL50BF","ts":"1612656930.320000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1hcDY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also it lets you symbolically simplify it down, so you can do a bunch of tricks to reduce it down to like 100 equations, solve those, and lazily reconstruct the others."}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"dffb2f90-9e2d-4e1a-9db0-d00a42c0dbf3","type":"message","text":"well, what I mean is a system where you have different layers/scales and each layer might have different dynamics, etc.","user":"U01H36BUDJB","ts":"1612656934.320200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qZZa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well, what I mean is a system where you have different layers/scales and each layer might have different dynamics, etc."}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"4b59982c-4d7c-48c5-af3e-4309c164208c","type":"message","text":"That's my problem","user":"U01H36BUDJB","ts":"1612656942.320400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0LkT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's my problem"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"3a78ce3f-ae13-4ad5-a73e-eb74d24a2fb3","type":"message","text":"I think the component-based system is one of the quickest ways to build it out.","user":"U69BL50BF","ts":"1612656973.320800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YaVY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think the component-based system is one of the quickest ways to build it out."}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"fb902c97-88a2-4f9a-b64b-ee1ecac7d829","type":"message","text":"yeah I'd like to give ModelingToolkit another try","user":"U01H36BUDJB","ts":"1612657019.321200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fUg1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah I'd like to give ModelingToolkit another try"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"5aa74aae-c810-40fe-8f4b-98103f3964dd","type":"message","text":"what I'm mentioning though isn't documented right now","user":"U69BL50BF","ts":"1612657037.321400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7rCn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what I'm mentioning though isn't documented right now"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"aa6591d7-dfbb-4cd7-9d38-d1b00993f87d","type":"message","text":"we should release this portion of it in about a month.","user":"U69BL50BF","ts":"1612657047.321600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c5o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we should release this portion of it in about a month."}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"945bcd24-df4b-4304-8053-e86f36a264cc","type":"message","text":"but I had to give up on it for now, partially due the MOL bug and partially because it didn't seem to be possible to do what I wanted at present time","user":"U01H36BUDJB","ts":"1612657053.321800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QvS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but I had to give up on it for now, partially due the MOL bug and partially because it didn't seem to be possible to do what I wanted at present time"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"b1013361-ce00-41bf-87f7-06be9ce3b59d","type":"message","text":"oh I don't mean the MOL stuff","user":"U69BL50BF","ts":"1612657070.322000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3C7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh I don't mean the MOL stuff"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"603b15eb-fb1c-48e2-a8a7-f69b32d77602","type":"message","text":"I mean the direct ODE component-based stuff.","user":"U69BL50BF","ts":"1612657076.322200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"A+U","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean the direct ODE component-based stuff."}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"3e289a32-9c70-4819-9ffd-9f4a76fa35a4","type":"message","text":"yeah I know","user":"U01H36BUDJB","ts":"1612657078.322400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1HS/x","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah I know"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"5c8cd7ec-7570-4e95-ad8d-4b8073e91802","type":"message","text":"that's separate","user":"U01H36BUDJB","ts":"1612657081.322600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"18av5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's separate"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"43ae92e6-6418-43e1-989b-72e63a5cc000","type":"message","text":"oh also I would need the ability to express non-linear diffusion","user":"U01H36BUDJB","ts":"1612657200.322800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Nt9a","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh also I would need the ability to express non-linear diffusion"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"f1852e55-d3ba-445a-9aa4-1e76da5b208f","type":"message","text":"can't remember if that's possible or not","user":"U01H36BUDJB","ts":"1612657206.323000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"whth","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"can't remember if that's possible or not"}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"b495c5f6-df98-4c13-aa75-503759b427f2","type":"message","text":"on the ODE component-based stuff? Yeah you'd do it manually.","user":"U69BL50BF","ts":"1612657688.323400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MudVd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"on the ODE component-based stuff? Yeah you'd do it manually."}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"f8798d6f-3a5b-48f7-aac0-05d7ce46b412","type":"message","text":"Looks like ComponentArrays is just as slow as ArrayPartition on the same example... almost 70 ms on the same example as above. If you have to use the linear indices (i.e. `u[1:100]` ) in order for it to be fast, what's the point of using it in the first place? I thought the point was so you could access the array by component.","user":"U01H36BUDJB","ts":"1612700590.324200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AVJG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Looks like ComponentArrays is just as slow as ArrayPartition on the same example... almost 70 ms on the same example as above. If you have to use the linear indices (i.e. "},{"type":"text","text":"u[1:100]","style":{"code":true}},{"type":"text","text":" ) in order for it to be fast, what's the point of using it in the first place? I thought the point was so you could access the array by component."}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"6feb5b42-2c70-469b-a8ae-1628efd2515d","type":"message","text":"I would be ok with the performance hit being 2-3x, but going from microseconds to milliseconds on a simple example is unacceptable.","user":"U01H36BUDJB","ts":"1612700637.324400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"o6M","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I would be ok with the performance hit being 2-3x, but going from microseconds to milliseconds on a simple example is unacceptable."}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"35dfd996-a480-4c24-a400-4fd8f59e5ddc","type":"message","text":"Is the problem maybe taking views of views? I remember when I was testing with the plain array, there was a similar performance hit when using views at the top level (i.e. taking a view of a view in `_f` ) vs. just using slices at the top level.","user":"U01H36BUDJB","ts":"1612700864.324600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3o7kV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is the problem maybe taking views of views? I remember when I was testing with the plain array, there was a similar performance hit when using views at the top level (i.e. taking a view of a view in "},{"type":"text","text":"_f","style":{"code":true}},{"type":"text","text":" ) vs. just using slices at the top level."}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"ab08c4e0-c6a1-4c2e-8dc0-24044b1e65b4","type":"message","text":"i.e. in this example:\n```function f_comp(du,u,p,t)\n    @unpack a,b,c = u\n    _f(du.a,a,p,t)\n    _f(du.b,b,p,t)\n    _f(du.c,c,p,t)\nend\n\nfunction f_linear(du,u,p,t)\n    du1, u1 = du[1:100], u[1:100]\n    du2, u2 = du[101:200], u[101:200]\n    du3, u3 = du[201:300], u[201:300]\n    _f(du1,u1,p,t)\n    _f(du2,u2,p,t)\n    _f(du3,u3,p,t)\nend```\nthe second function `f_linear`  is several orders of magnitude faster (&gt;800x) and makes far fewer allocations.","user":"U01H36BUDJB","ts":"1612701979.324800","team":"T68168MUP","edited":{"user":"U01H36BUDJB","ts":"1612702044.000000"},"blocks":[{"type":"rich_text","block_id":"I/30","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i.e. in this example:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function f_comp(du,u,p,t)\n    @unpack a,b,c = u\n    _f(du.a,a,p,t)\n    _f(du.b,b,p,t)\n    _f(du.c,c,p,t)\nend\n\nfunction f_linear(du,u,p,t)\n    du1, u1 = du[1:100], u[1:100]\n    du2, u2 = du[101:200], u[101:200]\n    du3, u3 = du[201:300], u[201:300]\n    _f(du1,u1,p,t)\n    _f(du2,u2,p,t)\n    _f(du3,u3,p,t)\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"the second function "},{"type":"text","text":"f_linear","style":{"code":true}},{"type":"text","text":"  is several orders of magnitude faster (>800x) and makes far fewer allocations."}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"8ad8d416-ce41-4755-83a2-42fcfb21342a","type":"message","text":"```function f(du,u,p,t)\n    du1, u1 = (@view du[1:100]),@view u[1:100]\n    du2, u2 = (@view du[101:200]),@view u[101:200]\n    du3, u3 = (@view du[201:300]),@view u[201:300]\n    _f(du1,u1,p,t)\n    _f(du2,u2,p,t)\n    _f(du3,u3,p,t)\nend```\nDefinitely has something to do with views-of-views. This is just as slow. I am not able to reproduce this, though, independent of `OrdinaryDiffEq` . Views of views seem to be faster in other contexts.","user":"U01H36BUDJB","ts":"1612704510.325100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"b/u64","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function f(du,u,p,t)\n    du1, u1 = (@view du[1:100]),@view u[1:100]\n    du2, u2 = (@view du[101:200]),@view u[101:200]\n    du3, u3 = (@view du[201:300]),@view u[201:300]\n    _f(du1,u1,p,t)\n    _f(du2,u2,p,t)\n    _f(du3,u3,p,t)\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Definitely has something to do with views-of-views. This is just as slow. I am not able to reproduce this, though, independent of "},{"type":"text","text":"OrdinaryDiffEq","style":{"code":true}},{"type":"text","text":" . Views of views seem to be faster in other contexts."}]}]}],"thread_ts":"1612645291.309100","parent_user_id":"U01H36BUDJB"}]