[{"client_msg_id":"eeeb52b7-cf31-4df8-bc7f-4f39b889804f","type":"message","text":"Hi! i'd like to simulate an n-body gravitational problem and get the bodies' trajectories, but I'm having trouble!\n\nSolving for each body's acceleration, you get `a1 = G*m2 / r^2` or `x** = Gm2 / norm2(x)`. My confusion is on how to solve a system of n second-order equations and on how to keep track of the 2/3d `x` vector. Any help is highly appreciated!","user":"UM9Q1BM9Q","ts":"1617685826.339900","team":"T68168MUP","edited":{"user":"UM9Q1BM9Q","ts":"1617685884.000000"},"blocks":[{"type":"rich_text","block_id":"loR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi! i'd like to simulate an n-body gravitational problem and get the bodies' trajectories, but I'm having trouble!\n\nSolving for each body's acceleration, you get "},{"type":"text","text":"a1 = G*m2 / r^2","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"x** = Gm2 / norm2(x)","style":{"code":true}},{"type":"text","text":". My confusion is on how to solve a system of n second-order equations and on how to keep track of the 2/3d "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" vector. Any help is highly appreciated!"}]}]}],"thread_ts":"1617685826.339900","reply_count":22,"reply_users_count":4,"latest_reply":"1617740836.353100","reply_users":["U013L06JN15","UM9Q1BM9Q","U9MED583T","U69BL50BF"],"is_locked":false,"subscribed":false},{"client_msg_id":"d6408c22-d708-478d-af6f-7c9a8945b465","type":"message","text":"<@UM9Q1BM9Q> You should be able to lower n second-order equations into 2n first-order equations fairly trivially. I'm assuming you have a state that is a 3D position, then you can just introduce an additional 3D velocity (so you have a 6D state) and a set of trivial differential equations to update the position (they just use the current velocity state).","user":"U013L06JN15","ts":"1617687095.340100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NxZM","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UM9Q1BM9Q"},{"type":"text","text":" You should be able to lower n second-order equations into 2n first-order equations fairly trivially. I'm assuming you have a state that is a 3D position, then you can just introduce an additional 3D velocity (so you have a 6D state) and a set of trivial differential equations to update the position (they just use the current velocity state)."}]}]}],"thread_ts":"1617685826.339900","parent_user_id":"UM9Q1BM9Q"},{"client_msg_id":"b7ea3d4a-e0a6-42a7-a782-052d73c5ff5e","type":"message","text":"You could easily solve such a system using DifferentialEquations.jl","user":"U013L06JN15","ts":"1617687105.340300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dB4M2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You could easily solve such a system using DifferentialEquations.jl"}]}]}],"thread_ts":"1617685826.339900","parent_user_id":"UM9Q1BM9Q"},{"client_msg_id":"31101026-1bbf-44fe-855c-341ca96ae722","type":"message","text":"There's also an automated order-reduction function in ModelingToolkit.jl (which you could use to build the whole differential system, then solve on DifferentialEquations.jl)","user":"U013L06JN15","ts":"1617687158.340500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Dqfp/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There's also an automated order-reduction function in ModelingToolkit.jl (which you could use to build the whole differential system, then solve on DifferentialEquations.jl)"}]}]}],"thread_ts":"1617685826.339900","parent_user_id":"UM9Q1BM9Q"},{"client_msg_id":"b2af9819-1721-466d-811e-36c9355e572c","type":"message","text":"You could try having a look at my OrbitalTrajectories.jl that does some of this, in particular the `EphemerisNBP` solver, but I'm not simulating an n-body gravitational problem exactly so your application might be a little different.","user":"U013L06JN15","ts":"1617687207.340700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j7BL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You could try having a look at my OrbitalTrajectories.jl that does some of this, in particular the "},{"type":"text","text":"EphemerisNBP","style":{"code":true}},{"type":"text","text":" solver, but I'm not simulating an n-body gravitational problem exactly so your application might be a little different."}]}]}],"thread_ts":"1617685826.339900","parent_user_id":"UM9Q1BM9Q"},{"client_msg_id":"e625c848-27be-46bc-a9a4-556119b2f500","type":"message","text":"If you use DifferentialEquations.jl, you don't need to keep track of the `x` vector -- all you have to do is provide the initial state (called `u0`) to the `solve()` function, and the solver will take care of tracking the `x` vector (starting with `u0`) for you.","user":"U013L06JN15","ts":"1617687331.340900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4S+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you use DifferentialEquations.jl, you don't need to keep track of the "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" vector -- all you have to do is provide the initial state (called "},{"type":"text","text":"u0","style":{"code":true}},{"type":"text","text":") to the "},{"type":"text","text":"solve()","style":{"code":true}},{"type":"text","text":" function, and the solver will take care of tracking the "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" vector (starting with "},{"type":"text","text":"u0","style":{"code":true}},{"type":"text","text":") for you."}]}]}],"thread_ts":"1617685826.339900","parent_user_id":"UM9Q1BM9Q"},{"client_msg_id":"760a5442-768d-4bf0-bceb-56db36fffde1","type":"message","text":"thanks! so i'd need to use a variable per coordinate? (i.e. i can't have e.g. u[1] = (x1, y1))","user":"UM9Q1BM9Q","ts":"1617687362.341100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xpl9y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thanks! so i'd need to use a variable per coordinate? (i.e. i can't have e.g. u[1] = (x1, y1))"}]}]}],"thread_ts":"1617685826.339900","parent_user_id":"UM9Q1BM9Q"},{"client_msg_id":"c60b7c04-0a36-4be1-8a3b-01532d571101","type":"message","text":"Then at the end the solver returns a `ODESolution`, which includes the entire history of the `x` vector, which you can then plot or something","user":"U013L06JN15","ts":"1617687368.341300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FFs9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Then at the end the solver returns a "},{"type":"text","text":"ODESolution","style":{"code":true}},{"type":"text","text":", which includes the entire history of the "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" vector, which you can then plot or something"}]}]}],"thread_ts":"1617685826.339900","parent_user_id":"UM9Q1BM9Q"},{"client_msg_id":"52af7a7b-b691-465c-b33c-fef0387ef9de","type":"message","text":"Yes it would be u[1] = x, u[2] = y, u[3] = z","user":"U013L06JN15","ts":"1617687377.341500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TX6r","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes it would be u[1] = x, u[2] = y, u[3] = z"}]}]}],"thread_ts":"1617685826.339900","parent_user_id":"UM9Q1BM9Q"},{"client_msg_id":"9fed899f-4a89-48a0-a4bd-0b2dec2dbade","type":"message","text":"u[4] = x', u[5] = y', u[6] = z'","user":"U013L06JN15","ts":"1617687390.341700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uTN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"u[4] = x', u[5] = y', u[6] = z'"}]}]}],"thread_ts":"1617685826.339900","parent_user_id":"UM9Q1BM9Q"},{"client_msg_id":"15d55dd4-9d99-41cd-8df6-c5c5261ecb0a","type":"message","text":"got it!","user":"UM9Q1BM9Q","ts":"1617687403.341900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Pi4+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"got it!"}]}]}],"thread_ts":"1617685826.339900","parent_user_id":"UM9Q1BM9Q"},{"client_msg_id":"72fee1ff-c08c-4970-804f-bab461c0cc36","type":"message","text":"OrbitalDynamics.jl looks great, it might be overkill though - i just want some 2d trajectories for 2-3 objects","user":"UM9Q1BM9Q","ts":"1617687450.342100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Feq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"OrbitalDynamics.jl looks great, it might be overkill though - i just want some 2d trajectories for 2-3 objects"}]}]}],"thread_ts":"1617685826.339900","parent_user_id":"UM9Q1BM9Q"},{"client_msg_id":"1ca72502-d4d2-474e-95b0-3dbc53037d41","type":"message","text":"yeah you could build that quite easily I think","user":"U013L06JN15","ts":"1617687511.342300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rRs+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah you could build that quite easily I think"}]}]}],"thread_ts":"1617685826.339900","parent_user_id":"UM9Q1BM9Q"},{"client_msg_id":"4bfc70e1-f834-4bcc-a9a9-eae91c30d77d","type":"message","text":"your equations of motion would essentially be something like this","user":"U013L06JN15","ts":"1617687517.342500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MJQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"your equations of motion would essentially be something like this"}]}]}],"thread_ts":"1617685826.339900","parent_user_id":"UM9Q1BM9Q"},{"client_msg_id":"68220f6c-5a10-42ad-8d82-2c35df9924a3","type":"message","text":"```du[1] = u[3]  # x-velocity\ndu[2] = u[4]  # y-velocity\ndu[3] = Gm2 / norm2(u[1:2])  # x-acceleration\ndu[4] = Gm2 / norm2(u[1:2])  # y-acceleration```\nsomething along those lines","user":"U013L06JN15","ts":"1617687583.342700","team":"T68168MUP","edited":{"user":"U013L06JN15","ts":"1617687695.000000"},"blocks":[{"type":"rich_text","block_id":"Io0r","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"du[1] = u[3]  # x-velocity\ndu[2] = u[4]  # y-velocity\ndu[3] = Gm2 / norm2(u[1:2])  # x-acceleration\ndu[4] = Gm2 / norm2(u[1:2])  # y-acceleration"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"something along those lines"}]}]}],"thread_ts":"1617685826.339900","parent_user_id":"UM9Q1BM9Q"},{"client_msg_id":"d8f26349-afba-4b08-849a-02b57303390f","type":"message","text":"then you just wrap that up in a function\n```function eqs_motion(du, u, p, t)\n du[1] ...\nend```\nand build it into an `ODEProblem` object, then pass that into `solve()`","user":"U013L06JN15","ts":"1617687638.342900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W=38W","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"then you just wrap that up in a function\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function eqs_motion(du, u, p, t)\n du[1] ...\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"and build it into an "},{"type":"text","text":"ODEProblem","style":{"code":true}},{"type":"text","text":" object, then pass that into "},{"type":"text","text":"solve()","style":{"code":true}}]}]}],"thread_ts":"1617685826.339900","parent_user_id":"UM9Q1BM9Q"},{"client_msg_id":"3b414664-a0c3-49c4-86cf-55ae6ae55b95","type":"message","text":"of course that only simulates one object (in this case with the gravitational pull of a static object in the origin, I guess)","user":"U013L06JN15","ts":"1617687656.343100","team":"T68168MUP","edited":{"user":"U013L06JN15","ts":"1617687789.000000"},"blocks":[{"type":"rich_text","block_id":"VXFr7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"of course that only simulates one object (in this case with the gravitational pull of a static object in the origin, I guess)"}]}]}],"thread_ts":"1617685826.339900","parent_user_id":"UM9Q1BM9Q"},{"client_msg_id":"2b34f92d-a8c9-4fce-9249-8ce9dff04125","type":"message","text":"if you want more you need to expand your state vector to 4 variables (x, y, x', y') per object","user":"U013L06JN15","ts":"1617687667.343300","team":"T68168MUP","edited":{"user":"U013L06JN15","ts":"1617687881.000000"},"blocks":[{"type":"rich_text","block_id":"nT+Q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you want more you need to expand your state vector to 4 variables (x, y, x', y') per object"}]}]}],"thread_ts":"1617685826.339900","parent_user_id":"UM9Q1BM9Q"},{"client_msg_id":"7f227768-247e-4925-a0c8-3a528e694d74","type":"message","text":"(and accordingly also build up the equations of motion as necessary)","user":"U013L06JN15","ts":"1617687715.343600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OszIf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(and accordingly also build up the equations of motion as necessary)"}]}]}],"thread_ts":"1617685826.339900","parent_user_id":"UM9Q1BM9Q"},{"client_msg_id":"b3871cfe-b14c-4af2-847c-e996e84a5a16","type":"message","text":"at least, that's how I think it works. xD","user":"U013L06JN15","ts":"1617687741.343800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HQyvv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"at least, that's how I think it works. xD"}]}]}],"thread_ts":"1617685826.339900","parent_user_id":"UM9Q1BM9Q"},{"client_msg_id":"1e25fd2d-4985-4af9-a78e-164d916ed2a6","type":"message","text":"You can also use `SecondOrderODEProblem` directly or `DynamicalODEProblem`. If you don't want to write the equations, you can use `NBodyProblems`or `Molly.jl`","user":"U9MED583T","ts":"1617695533.344200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3dF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can also use "},{"type":"text","text":"SecondOrderODEProblem","style":{"code":true}},{"type":"text","text":" directly or "},{"type":"text","text":"DynamicalODEProblem","style":{"code":true}},{"type":"text","text":". If you don't want to write the equations, you can use "},{"type":"text","text":"NBodyProblems","style":{"code":true}},{"type":"text","text":"or "},{"type":"text","text":"Molly.jl","style":{"code":true}}]}]}],"thread_ts":"1617685826.339900","parent_user_id":"UM9Q1BM9Q"},{"client_msg_id":"d11c6ba3-bca0-48c4-8e34-7e5b9b4ad1e1","type":"message","text":"NBodySimulator.jl","user":"U69BL50BF","ts":"1617704341.344800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iue","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"NBodySimulator.jl"}]}]}],"thread_ts":"1617685826.339900","parent_user_id":"UM9Q1BM9Q"},{"client_msg_id":"2c39158b-a06a-4fd1-8daa-39cda8c36ee9","type":"message","text":"Thanks <@U69BL50BF>, NBodySimualtor.jl was my first look, but i want to be able to add a hook to perturb the objects and am not sure how to do that with the interface","user":"UM9Q1BM9Q","ts":"1617740836.353100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NJLvw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks "},{"type":"user","user_id":"U69BL50BF"},{"type":"text","text":", NBodySimualtor.jl was my first look, but i want to be able to add a hook to perturb the objects and am not sure how to do that with the interface"}]}]}],"thread_ts":"1617685826.339900","parent_user_id":"UM9Q1BM9Q"}]