[{"client_msg_id":"3ff79f80-5812-47e8-90e2-bc51ae1556b9","type":"message","text":"I would like to do a Jet Transport based on a MTK model and am hitting many road blocks. It looks like TaylorSeries IC doesn't work  w/ DiffEq in general. produces  `LoadError: MethodError: no method matching TaylorN{Float64}(::Rational{Int64})` for both `Tsit5()`  and `TaylorMethod` .  As a work around, I looked into building the eom function and calling `TaylorIntegration`  directly, however the parsing performed in `taylorinteg`  is hitting a roadblock w/ `RuntimeGeneratedFunctions` .  I would prefer to used DiffEq directly but is there a simple stop-gap workaround for this. e.g. produce a `function`  instead of `RuntimeGeneratedFunctions` ?","user":"UP95S4864","ts":"1611668881.071300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/pcf4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I would like to do a Jet Transport based on a MTK model and am hitting many road blocks. It looks like TaylorSeries IC doesn't work  w/ DiffEq in general. produces  "},{"type":"text","text":"LoadError: MethodError: no method matching TaylorN{Float64}(::Rational{Int64})","style":{"code":true}},{"type":"text","text":" for both "},{"type":"text","text":"Tsit5()","style":{"code":true}},{"type":"text","text":"  and "},{"type":"text","text":"TaylorMethod","style":{"code":true}},{"type":"text","text":" .  As a work around, I looked into building the eom function and calling "},{"type":"text","text":"TaylorIntegration","style":{"code":true}},{"type":"text","text":"  directly, however the parsing performed in "},{"type":"text","text":"taylorinteg","style":{"code":true}},{"type":"text","text":"  is hitting a roadblock w/ "},{"type":"text","text":"RuntimeGeneratedFunctions","style":{"code":true}},{"type":"text","text":" .  I would prefer to used DiffEq directly but is there a simple stop-gap workaround for this. e.g. produce a "},{"type":"text","text":"function","style":{"code":true}},{"type":"text","text":"  instead of "},{"type":"text","text":"RuntimeGeneratedFunctions","style":{"code":true}},{"type":"text","text":" ?"}]}]}],"thread_ts":"1611668881.071300","reply_count":45,"reply_users_count":3,"latest_reply":"1611842901.113900","reply_users":["UP95S4864","U69BL50BF","U9Z3H4H5F"],"subscribed":false},{"client_msg_id":"d00d8ca4-d3ed-4ac2-9979-cab765994923","type":"message","text":"For ref RE Jet transport: <https://perezhz.github.io/TaylorIntegration.jl/latest/pendulum/>","user":"UP95S4864","ts":"1611668960.071400","team":"T68168MUP","edited":{"user":"UP95S4864","ts":"1611668976.000000"},"blocks":[{"type":"rich_text","block_id":"CTr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For ref RE Jet transport: "},{"type":"link","url":"https://perezhz.github.io/TaylorIntegration.jl/latest/pendulum/"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"b5f636e7-08c3-4a22-a10b-0ff6fdb50b68","type":"message","text":"where are the rational numbers coming from?","user":"U69BL50BF","ts":"1611669710.071700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LXlvr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"where are the rational numbers coming from?"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"8e6d0e82-2656-4b6e-8683-67fb4c6370fc","type":"message","text":"Let me put together a quick MWE","user":"UP95S4864","ts":"1611669922.071900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mFY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Let me put together a quick MWE"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"a4440a73-13af-472c-ae0f-2a95dede724a","type":"message","text":"```using TaylorSeries, OrdinaryDiffEq, TaylorIntegration\n\nfunction vanderpol!(du,u,ps,t)\n    du[1] = u[2]\n    du[2] = ps[1]*(1-u[1]^2)*u[2]-u[1]\n    nothing\nend\n\ntspan = (0.0, 7.0)\nu0 = [1.4, 2.4]\nps = [1.0]\n\nprob = ODEProblem(vanderpol!, u0, tspan, ps)\nsolve(prob, Tsit5()) # success\nsolve(prob, TaylorMethod(20)) #success\n\n# TaylorSeries Expansion\nξ = set_variables(\"ξ\", numvars=2, order=20)# \\xi\nu0ξ = u0.+ξ\n\nprob2 = ODEProblem(vanderpol!, u0ξ, tspan, ps)\nsolve(prob2, Tsit5()) #LoadError: MethodError: no method matching TaylorN{Float64}(::Rational{Int64})```","user":"UP95S4864","ts":"1611670409.072100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pdCrI","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using TaylorSeries, OrdinaryDiffEq, TaylorIntegration\n\nfunction vanderpol!(du,u,ps,t)\n    du[1] = u[2]\n    du[2] = ps[1]*(1-u[1]^2)*u[2]-u[1]\n    nothing\nend\n\ntspan = (0.0, 7.0)\nu0 = [1.4, 2.4]\nps = [1.0]\n\nprob = ODEProblem(vanderpol!, u0, tspan, ps)\nsolve(prob, Tsit5()) # success\nsolve(prob, TaylorMethod(20)) #success\n\n# TaylorSeries Expansion\nξ = set_variables(\"ξ\", numvars=2, order=20)# \\xi\nu0ξ = u0.+ξ\n\nprob2 = ODEProblem(vanderpol!, u0ξ, tspan, ps)\nsolve(prob2, Tsit5()) #LoadError: MethodError: no method matching TaylorN{Float64}(::Rational{Int64})"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"4f5234c1-0927-4cba-8859-81878038473a","type":"message","text":"```solve(prob2, Tsit5())\nERROR: LoadError: MethodError: no method matching TaylorN{Float64}(::Rational{Int64})\nClosest candidates are:\n  TaylorN{Float64}(::T) where T&lt;:Number at boot.jl:716\n  TaylorN{Float64}(::Base.TwicePrecision) where T&lt;:Number at twiceprecision.jl:243\n  TaylorN{Float64}(::AbstractChar) where T&lt;:Union{AbstractChar, Number} at char.jl:50\n  ...\nStacktrace:\n [1] __init(::ODEProblem{Array{TaylorN{Float64},1},Tuple{Float64,Float64},true,Array{Float64,1},ODEFunction{true,typeof(vanderpol!),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Tsit5, ::Tuple{}, ::Tuple{}, ::Tuple{}, ::Type{Val{true}}; saveat::Tuple{}, tstops::Tuple{}, d_discontinuities::Tuple{}, save_idxs::Nothing, save_everystep::Bool, save_on::Bool, save_start::Bool, save_end::Bool, callback::Nothing, dense::Bool, calck::Bool, dt::Float64, dtmin::Nothing, dtmax::Float64, force_dtmin::Bool, adaptive::Bool, gamma::Rational{Int64}, abstol::Nothing, reltol::Nothing, qmin::Rational{Int64}, qmax::Int64, qsteady_min::Int64, qsteady_max::Int64, qoldinit::Rational{Int64}, fullnormalize::Bool, failfactor::Int64, beta1::Nothing, beta2::Nothing, maxiters::Int64, internalnorm::typeof(DiffEqBase.ODE_DEFAULT_NORM), internalopnorm::typeof(LinearAlgebra.opnorm), isoutofdomain::typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), unstable_check::typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), verbose::Bool, timeseries_errors::Bool, dense_errors::Bool, advance_to_tstop::Bool, stop_at_next_tstop::Bool, initialize_save::Bool, progress::Bool, progress_steps::Int64, progress_name::String, progress_message::typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), userdata::Nothing, allow_extrapolation::Bool, initialize_integrator::Bool, alias_u0::Bool, alias_du0::Bool, initializealg::OrdinaryDiffEq.DefaultInit, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/user/.julia/packages/OrdinaryDiffEq/5GBYL/src/solve.jl:308\n [2] __init(::ODEProblem{Array{TaylorN{Float64},1},Tuple{Float64,Float64},true,Array{Float64,1},ODEFunction{true,typeof(vanderpol!),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Tsit5, ::Tuple{}, ::Tuple{}, ::Tuple{}, ::Type{Val{true}}) at /home/user/.julia/packages/OrdinaryDiffEq/5GBYL/src/solve.jl:66 (repeats 5 times)\n [3] __solve(::ODEProblem{Array{TaylorN{Float64},1},Tuple{Float64,Float64},true,Array{Float64,1},ODEFunction{true,typeof(vanderpol!),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Tsit5; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/user/.julia/packages/OrdinaryDiffEq/5GBYL/src/solve.jl:4\n [4] __solve(::ODEProblem{Array{TaylorN{Float64},1},Tuple{Float64,Float64},true,Array{Float64,1},ODEFunction{true,typeof(vanderpol!),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Tsit5) at /home/user/.julia/packages/OrdinaryDiffEq/5GBYL/src/solve.jl:4\n [5] solve_call(::ODEProblem{Array{TaylorN{Float64},1},Tuple{Float64,Float64},true,Array{Float64,1},ODEFunction{true,typeof(vanderpol!),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Tsit5; merge_callbacks::Bool, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/user/.julia/packages/DiffEqBase/ORQhu/src/solve.jl:65\n [6] solve_call(::ODEProblem{Array{TaylorN{Float64},1},Tuple{Float64,Float64},true,Array{Float64,1},ODEFunction{true,typeof(vanderpol!),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Tsit5) at /home/user/.julia/packages/DiffEqBase/ORQhu/src/solve.jl:52\n [7] solve_up(::ODEProblem{Array{TaylorN{Float64},1},Tuple{Float64,Float64},true,Array{Float64,1},ODEFunction{true,typeof(vanderpol!),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Nothing, ::Array{TaylorN{Float64},1}, ::Array{Float64,1}, ::Tsit5; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/user/.julia/packages/DiffEqBase/ORQhu/src/solve.jl:86\n [8] solve_up(::ODEProblem{Array{TaylorN{Float64},1},Tuple{Float64,Float64},true,Array{Float64,1},ODEFunction{true,typeof(vanderpol!),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Nothing, ::Array{TaylorN{Float64},1}, ::Array{Float64,1}, ::Tsit5) at /home/user/.julia/packages/DiffEqBase/ORQhu/src/solve.jl:79\n [9] solve(::ODEProblem{Array{TaylorN{Float64},1},Tuple{Float64,Float64},true,Array{Float64,1},ODEFunction{true,typeof(vanderpol!),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Tsit5; sensealg::Nothing, u0::Nothing, p::Nothing, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/user/.julia/packages/DiffEqBase/ORQhu/src/solve.jl:74\n [10] solve(::ODEProblem{Array{TaylorN{Float64},1},Tuple{Float64,Float64},true,Array{Float64,1},ODEFunction{true,typeof(vanderpol!),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Tsit5) at /home/user/.julia/packages/DiffEqBase/ORQhu/src/solve.jl:72\n [11] top-level scope at /home/user/GitLab/KoopmanSandbox/JetTransport/jet_mwe.jl:27```","user":"UP95S4864","ts":"1611670421.072300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7Ub","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"solve(prob2, Tsit5())\nERROR: LoadError: MethodError: no method matching TaylorN{Float64}(::Rational{Int64})\nClosest candidates are:\n  TaylorN{Float64}(::T) where T<:Number at boot.jl:716\n  TaylorN{Float64}(::Base.TwicePrecision) where T<:Number at twiceprecision.jl:243\n  TaylorN{Float64}(::AbstractChar) where T<:Union{AbstractChar, Number} at char.jl:50\n  ...\nStacktrace:\n [1] __init(::ODEProblem{Array{TaylorN{Float64},1},Tuple{Float64,Float64},true,Array{Float64,1},ODEFunction{true,typeof(vanderpol!),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Tsit5, ::Tuple{}, ::Tuple{}, ::Tuple{}, ::Type{Val{true}}; saveat::Tuple{}, tstops::Tuple{}, d_discontinuities::Tuple{}, save_idxs::Nothing, save_everystep::Bool, save_on::Bool, save_start::Bool, save_end::Bool, callback::Nothing, dense::Bool, calck::Bool, dt::Float64, dtmin::Nothing, dtmax::Float64, force_dtmin::Bool, adaptive::Bool, gamma::Rational{Int64}, abstol::Nothing, reltol::Nothing, qmin::Rational{Int64}, qmax::Int64, qsteady_min::Int64, qsteady_max::Int64, qoldinit::Rational{Int64}, fullnormalize::Bool, failfactor::Int64, beta1::Nothing, beta2::Nothing, maxiters::Int64, internalnorm::typeof(DiffEqBase.ODE_DEFAULT_NORM), internalopnorm::typeof(LinearAlgebra.opnorm), isoutofdomain::typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), unstable_check::typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), verbose::Bool, timeseries_errors::Bool, dense_errors::Bool, advance_to_tstop::Bool, stop_at_next_tstop::Bool, initialize_save::Bool, progress::Bool, progress_steps::Int64, progress_name::String, progress_message::typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), userdata::Nothing, allow_extrapolation::Bool, initialize_integrator::Bool, alias_u0::Bool, alias_du0::Bool, initializealg::OrdinaryDiffEq.DefaultInit, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/user/.julia/packages/OrdinaryDiffEq/5GBYL/src/solve.jl:308\n [2] __init(::ODEProblem{Array{TaylorN{Float64},1},Tuple{Float64,Float64},true,Array{Float64,1},ODEFunction{true,typeof(vanderpol!),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Tsit5, ::Tuple{}, ::Tuple{}, ::Tuple{}, ::Type{Val{true}}) at /home/user/.julia/packages/OrdinaryDiffEq/5GBYL/src/solve.jl:66 (repeats 5 times)\n [3] __solve(::ODEProblem{Array{TaylorN{Float64},1},Tuple{Float64,Float64},true,Array{Float64,1},ODEFunction{true,typeof(vanderpol!),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Tsit5; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/user/.julia/packages/OrdinaryDiffEq/5GBYL/src/solve.jl:4\n [4] __solve(::ODEProblem{Array{TaylorN{Float64},1},Tuple{Float64,Float64},true,Array{Float64,1},ODEFunction{true,typeof(vanderpol!),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Tsit5) at /home/user/.julia/packages/OrdinaryDiffEq/5GBYL/src/solve.jl:4\n [5] solve_call(::ODEProblem{Array{TaylorN{Float64},1},Tuple{Float64,Float64},true,Array{Float64,1},ODEFunction{true,typeof(vanderpol!),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Tsit5; merge_callbacks::Bool, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/user/.julia/packages/DiffEqBase/ORQhu/src/solve.jl:65\n [6] solve_call(::ODEProblem{Array{TaylorN{Float64},1},Tuple{Float64,Float64},true,Array{Float64,1},ODEFunction{true,typeof(vanderpol!),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Tsit5) at /home/user/.julia/packages/DiffEqBase/ORQhu/src/solve.jl:52\n [7] solve_up(::ODEProblem{Array{TaylorN{Float64},1},Tuple{Float64,Float64},true,Array{Float64,1},ODEFunction{true,typeof(vanderpol!),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Nothing, ::Array{TaylorN{Float64},1}, ::Array{Float64,1}, ::Tsit5; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/user/.julia/packages/DiffEqBase/ORQhu/src/solve.jl:86\n [8] solve_up(::ODEProblem{Array{TaylorN{Float64},1},Tuple{Float64,Float64},true,Array{Float64,1},ODEFunction{true,typeof(vanderpol!),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Nothing, ::Array{TaylorN{Float64},1}, ::Array{Float64,1}, ::Tsit5) at /home/user/.julia/packages/DiffEqBase/ORQhu/src/solve.jl:79\n [9] solve(::ODEProblem{Array{TaylorN{Float64},1},Tuple{Float64,Float64},true,Array{Float64,1},ODEFunction{true,typeof(vanderpol!),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Tsit5; sensealg::Nothing, u0::Nothing, p::Nothing, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/user/.julia/packages/DiffEqBase/ORQhu/src/solve.jl:74\n [10] solve(::ODEProblem{Array{TaylorN{Float64},1},Tuple{Float64,Float64},true,Array{Float64,1},ODEFunction{true,typeof(vanderpol!),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Tsit5) at /home/user/.julia/packages/DiffEqBase/ORQhu/src/solve.jl:72\n [11] top-level scope at /home/user/GitLab/KoopmanSandbox/JetTransport/jet_mwe.jl:27"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"ffef3f07-8268-4332-a4e7-992d13fe4876","type":"message","text":"yeah just change `qoldinit`, `q...` etc.","user":"U69BL50BF","ts":"1611670450.072500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"49M","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah just change "},{"type":"text","text":"qoldinit","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"q...","style":{"code":true}},{"type":"text","text":" etc."}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"4dd46c5b-8c33-43f9-8587-8e11c065f7ca","type":"message","text":"or make it promote rationals, which is the real solution.","user":"U69BL50BF","ts":"1611670470.072700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Jdo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or make it promote rationals, which is the real solution."}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"8a15e6b6-06cd-428f-bf4a-c6a3752c0a0f","type":"message","text":"not clear on first statement","user":"UP95S4864","ts":"1611670504.072900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HXcpz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not clear on first statement"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"c6424e7c-229a-4c66-8212-6380a1b7655d","type":"message","text":"there are keyword arguments without exact floating point representations","user":"U69BL50BF","ts":"1611670525.073100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OwHfH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there are keyword arguments without exact floating point representations"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"08b699e6-17c2-4425-91b5-105a6ddf80c2","type":"message","text":"so they are kept as rationals and convert","user":"U69BL50BF","ts":"1611670531.073300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tiD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so they are kept as rationals and convert"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"9e6b0655-3748-489d-a086-8a8ca8d1e284","type":"message","text":"for `solve` ?","user":"UP95S4864","ts":"1611670582.073500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FkeK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"for "},{"type":"text","text":"solve","style":{"code":true}},{"type":"text","text":" ?"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"36e4f862-bcf5-4286-8052-90c1588c94b8","type":"message","text":"I see it. Thanks.","user":"UP95S4864","ts":"1611670677.073700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Kro","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see it. Thanks."}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"8e8a0b52-8baf-42c0-a18a-01e03e6a6e68","type":"message","text":"No luck.\n```solve(prob2, Tsit5(); \n               qmin = Float64(OrdinaryDiffEq.qmin_default(alg)), \n               qoldinit = OrdinaryDiffEq.isadaptive(alg) ? Float64(1//10^4) : 0.0,\n               gamma = Float64(OrdinaryDiffEq.gamma_default(alg)))\nERROR: LoadError: MethodError: no method matching TaylorN{Float64}(::Float64)```","user":"UP95S4864","ts":"1611671654.073900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8419","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No luck.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"solve(prob2, Tsit5(); \n               qmin = Float64(OrdinaryDiffEq.qmin_default(alg)), \n               qoldinit = OrdinaryDiffEq.isadaptive(alg) ? Float64(1//10^4) : 0.0,\n               gamma = Float64(OrdinaryDiffEq.gamma_default(alg)))\nERROR: LoadError: MethodError: no method matching TaylorN{Float64}(::Float64)"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"02d533fd-d8a5-4b6f-9c01-a88860f530bc","type":"message","text":"Is DiffEq essentially trying to cast to `TaylorN` ?","user":"UP95S4864","ts":"1611671689.074100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VOUd6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is DiffEq essentially trying to cast to "},{"type":"text","text":"TaylorN","style":{"code":true}},{"type":"text","text":" ?"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"0844a628-7290-4113-bc5d-a2802dde4efb","type":"message","text":"some of those things effect state","user":"U69BL50BF","ts":"1611671722.074300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Gr=rz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"some of those things effect state"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"cdd7a2b4-e733-486b-9651-94a9d95c06f6","type":"message","text":"so it's trying to make them state variables.","user":"U69BL50BF","ts":"1611671727.074500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PNy2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so it's trying to make them state variables."}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"450403ff-2a4d-47e4-aa19-fd4e65911d57","type":"message","text":"hmm... not seeing a logical way around this as you need to do the conversion based on the expansion variables already defined.","user":"UP95S4864","ts":"1611672615.074700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kBSj=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmm... not seeing a logical way around this as you need to do the conversion based on the expansion variables already defined."}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"14d47b8d-4fdd-4ffc-b7c8-f8c35052a3ec","type":"message","text":"i think there is a conceptual issue, the algorithm tries to create more than 2 taylor series variables (the output of `TaylorSeries.TaylorN{Float64}(x::Rational{Int64}) = println(x)`  starts with 9 // 10 , ..) if you redefine that constructor in a meaningful way and set more variables (say `numvars=10`) there are other issues such as `isless(::TaylorN, ::Number)`","user":"U9Z3H4H5F","ts":"1611729388.091300","team":"T68168MUP","edited":{"user":"U9Z3H4H5F","ts":"1611729420.000000"},"blocks":[{"type":"rich_text","block_id":"+xn6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i think there is a conceptual issue, the algorithm tries to create more than 2 taylor series variables (the output of "},{"type":"text","text":"TaylorSeries.TaylorN{Float64}(x::Rational{Int64}) = println(x)","style":{"code":true}},{"type":"text","text":"  starts with 9 // 10 , ..) if you redefine that constructor in a meaningful way and set more variables (say "},{"type":"text","text":"numvars=10","style":{"code":true}},{"type":"text","text":") there are other issues such as "},{"type":"text","text":"isless(::TaylorN, ::Number)","style":{"code":true}}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"c7778a51-51e9-46a8-aa39-62482ffa3d1a","type":"message","text":"there are algorithms which are made for propagating initial sets of states. i made a notebook for your example: <https://github.com/mforets/escritoire/blob/master/2021/Week4/vanderpol_example.ipynb>","user":"U9Z3H4H5F","ts":"1611729541.091800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lK6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there are algorithms which are made for propagating initial sets of states. i made a notebook for your example: "},{"type":"link","url":"https://github.com/mforets/escritoire/blob/master/2021/Week4/vanderpol_example.ipynb"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"9ca102ec-ee02-47c7-a03b-081e643a0ffb","type":"message","text":"see also <https://juliareach.github.io/ReachabilityAnalysis.jl/dev/models/VanDerPol/#Safety-verification-1>","user":"U9Z3H4H5F","ts":"1611729577.092000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PHWPq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"see also "},{"type":"link","url":"https://juliareach.github.io/ReachabilityAnalysis.jl/dev/models/VanDerPol/#Safety-verification-1"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"82cdea09-a4e4-4353-b049-81728c79e454","type":"message","text":"there are Runge-Kutta methods for sets (which is not the method used in the notebook i sent, it uses Taylor models), see eg. <https://hal.archives-ouvertes.fr/hal-01243053/document>","user":"U9Z3H4H5F","ts":"1611729676.092200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w3G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there are Runge-Kutta methods for sets (which is not the method used in the notebook i sent, it uses Taylor models), see eg. "},{"type":"link","url":"https://hal.archives-ouvertes.fr/hal-01243053/document"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"dfb2739e-f9f5-43b4-9ad9-d6156aaa4763","type":"message","text":"in the example with initial states, `X0 = Hyperrectangle(low=[1.25, 2.35], high=[1.55, 2.45])` , it's represented by a center and  symbolic variables xi1 and xi2 like in your initial model, but here they are constrained (information that is used to bound integrals),, and the output of the algorithm are polynomials in time whose coefficients are polynomials in space (xi). the exact solution is always contained in such taylor models.","user":"U9Z3H4H5F","ts":"1611730131.092400","team":"T68168MUP","edited":{"user":"U9Z3H4H5F","ts":"1611730220.000000"},"blocks":[{"type":"rich_text","block_id":"i8Lt7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in the example with initial states, "},{"type":"text","text":"X0 = Hyperrectangle(low=[1.25, 2.35], high=[1.55, 2.45])","style":{"code":true}},{"type":"text","text":" , it's represented by a center and  symbolic variables xi1 and xi2 like in your initial model, but here they are constrained (information that is used to bound integrals),, and the output of the algorithm are polynomials in time whose coefficients are polynomials in space (xi). the exact solution is always contained in such taylor models."}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"ecb75781-0037-41cf-b8c6-4e2389555d1d","type":"message","text":"for fun i wrote an algorithm that would give the \"kind of\" output you would normally get if the OP works, but for the textbook implementation of RK4","user":"U9Z3H4H5F","ts":"1611765754.107900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/5Jwh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"for fun i wrote an algorithm that would give the \"kind of\" output you would normally get if the OP works, but for the textbook implementation of RK4"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"6b870fc2-f0a5-49c6-b425-2b78fcaa7020","type":"message","text":"<https://nbviewer.jupyter.org/github/mforets/escritoire/blob/master/2021/Week4/RK4_TaylorSeries.ipynb>","user":"U9Z3H4H5F","ts":"1611765755.108100","team":"T68168MUP","attachments":[{"title":"Notebook on nbviewer","title_link":"https://nbviewer.jupyter.org/github/mforets/escritoire/blob/master/2021/Week4/RK4_TaylorSeries.ipynb","text":"Check out this Jupyter notebook!","fallback":"Notebook on nbviewer","from_url":"https://nbviewer.jupyter.org/github/mforets/escritoire/blob/master/2021/Week4/RK4_TaylorSeries.ipynb","service_icon":"https://nbviewer.jupyter.org/static/ico/apple-touch-icon-144-precomposed.png","service_name":"nbviewer.jupyter.org","id":1,"original_url":"https://nbviewer.jupyter.org/github/mforets/escritoire/blob/master/2021/Week4/RK4_TaylorSeries.ipynb"}],"blocks":[{"type":"rich_text","block_id":"2j3vs","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://nbviewer.jupyter.org/github/mforets/escritoire/blob/master/2021/Week4/RK4_TaylorSeries.ipynb"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"48ec7f73-294f-44a4-af42-492ee9724bb2","type":"message","text":"in the last part i comapred it with TMJets() in ReachabilityAnalysis.jl. .. the main difference between the numerical integration approach and the reachability approach is that the latter encloses the behavior of the system in dense time.","user":"U9Z3H4H5F","ts":"1611765830.108400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MW9Y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in the last part i comapred it with TMJets() in ReachabilityAnalysis.jl. .. the main difference between the numerical integration approach and the reachability approach is that the latter encloses the behavior of the system in dense time."}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"ed0eeba1-7b68-40cf-9c3d-7e9a3735d92e","type":"message","text":"cool!","user":"U69BL50BF","ts":"1611765864.108600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WAl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"cool!"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864","reactions":[{"name":"+1","users":["U9Z3H4H5F"],"count":1}]},{"client_msg_id":"8dd8604f-f7e9-483b-9d33-1b27706d2773","type":"message","text":"Awesome. The thing I failed to realize w/ the reachability approach is the enclosure of \"dense time\". I don't think I need that for what I hope to show.","user":"UP95S4864","ts":"1611774386.109100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4ivWm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Awesome. The thing I failed to realize w/ the reachability approach is the enclosure of \"dense time\". I don't think I need that for what I hope to show."}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"17a96e33-d47d-404d-b8c9-3fdbb1e8b3e8","type":"message","text":"I am still working through the documentation to get a better feel for what can be done","user":"UP95S4864","ts":"1611774410.109300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+VOH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am still working through the documentation to get a better feel for what can be done"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"bef028d4-1fa7-4e4a-9908-8fe8870c2870","type":"message","text":"When you plot the TMJet sol, what overapproximation is used for the plotting?","user":"UP95S4864","ts":"1611775321.109500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"I7Vdr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"When you plot the TMJet sol, what overapproximation is used for the plotting?"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"fcd101be-92c9-42b5-8b8f-35bc834e3dca","type":"message","text":"I guess I'm trying to understand when the output of solve represents for TMJets. In the first notebook you have\n```R2 = sol_reach[10]\npolynomial(R2)[2]```\nso `R2`  is the 10th time interval and `polynomial(R2)[2]`  is the TaylorSeries expansion for the 2nd state on the interval","user":"UP95S4864","ts":"1611775981.109700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L7=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess I'm trying to understand when the output of solve represents for TMJets. In the first notebook you have\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"R2 = sol_reach[10]\npolynomial(R2)[2]"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"so "},{"type":"text","text":"R2","style":{"code":true}},{"type":"text","text":"  is the 10th time interval and "},{"type":"text","text":"polynomial(R2)[2]","style":{"code":true}},{"type":"text","text":"  is the TaylorSeries expansion for the 2nd state on the interval"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"dabbff2a-0b09-400e-9ce4-c9af7c1c95f2","type":"message","text":"Does then `plot(t-&gt;polynomial(R2)[2](t)(), RA.tspan(R2).lo, RA.tspan(R2).hi)`  show the function that ultimately gets over approximated prior to doing set operation? Noting that its for a singleton.","user":"UP95S4864","ts":"1611776076.109900","team":"T68168MUP","edited":{"user":"UP95S4864","ts":"1611776333.000000"},"blocks":[{"type":"rich_text","block_id":"sd+k","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does then "},{"type":"text","text":"plot(t->polynomial(R2)[2](t)(), RA.tspan(R2).lo, RA.tspan(R2).hi)","style":{"code":true}},{"type":"text","text":"  show the function that ultimately gets over approximated prior to doing set operation? Noting that its for a singleton."}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"ad2e9f14-9988-4589-a535-2f2d3d719239","type":"message","text":"the overapproximation used in the plots is with a zonotope. it works by keeping the linear terms of the Taylor model as they are given, and the nonlinear terms are overapproximated with axis-aligned generators.","user":"U9Z3H4H5F","ts":"1611836412.110300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nXZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the overapproximation used in the plots is with a zonotope. it works by keeping the linear terms of the Taylor model as they are given, and the nonlinear terms are overapproximated with axis-aligned generators."}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"6e47fa43-59de-4aa4-841d-169fa9f6b58a","type":"message","text":"it is also possible to split the domain of the taylor model and repeat the zonotope approximation -- but this is not done by default since just 1 zonotope is often ok for quick generation of the plots","user":"U9Z3H4H5F","ts":"1611836548.110500","team":"T68168MUP","edited":{"user":"U9Z3H4H5F","ts":"1611836561.000000"},"blocks":[{"type":"rich_text","block_id":"7r3+h","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it is also possible to split the domain of the taylor model and repeat the zonotope approximation -- but this is not done by default since just 1 zonotope is often ok for quick generation of the plots"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"9fa89ca7-5362-4363-921d-e492e44aa31a","type":"message","text":"about the output of solve with TMJets, yes, exactly `polynomial(R2)[2]` is the polynomial part of the reach-set for the 2nd state variable. the content of R2 is a Taylor model in time, the domain of the taylor model being the time span of the reach set, and its coefficients are polynomials in the state variables, normalized in the interval -1, .. ,1","user":"U9Z3H4H5F","ts":"1611836779.110800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"chaGj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"about the output of solve with TMJets, yes, exactly "},{"type":"text","text":"polynomial(R2)[2]","style":{"code":true}},{"type":"text","text":" is the polynomial part of the reach-set for the 2nd state variable. the content of R2 is a Taylor model in time, the domain of the taylor model being the time span of the reach set, and its coefficients are polynomials in the state variables, normalized in the interval -1, .. ,1"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"ca37d729-140f-4eef-9307-9409092db28c","type":"message","text":"what this means is that the exact solution of the system, for the tspan(R2), is included in the range of R2.","user":"U9Z3H4H5F","ts":"1611836838.111000","team":"T68168MUP","edited":{"user":"U9Z3H4H5F","ts":"1611836861.000000"},"blocks":[{"type":"rich_text","block_id":"IVF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what this means is that the exact solution of the system, for the tspan(R2), is included in the range of R2."}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"4af7591a-0df9-49b6-b0a6-f0b6e965693b","type":"message","text":"so about your last comment, it is not quite that because you need to evaluate the space variables in -1 .. 1.  we should write more introductory docs, but if you want to check now, it's <https://github.com/JuliaReach/ReachabilityAnalysis.jl/blob/master/src/Flowpipes/reachsets.jl#L790|this function>","user":"U9Z3H4H5F","ts":"1611837050.111300","team":"T68168MUP","edited":{"user":"U9Z3H4H5F","ts":"1611837094.000000"},"blocks":[{"type":"rich_text","block_id":"n2i","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so about your last comment, it is not quite that because you need to evaluate the space variables in -1 .. 1.  we should write more introductory docs, but if you want to check now, it's "},{"type":"link","url":"https://github.com/JuliaReach/ReachabilityAnalysis.jl/blob/master/src/Flowpipes/reachsets.jl#L790","text":"this function"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"3d5ece05-bf69-47da-923a-444be7d78a7a","type":"message","text":"it would be nice to try it with the Van der pol example. even for a singleton initial condition you get a dense set of R^2 again because of the fact that each reach-set is associated with a (non-degenerate) time interval","user":"U9Z3H4H5F","ts":"1611837328.111700","team":"T68168MUP","edited":{"user":"U9Z3H4H5F","ts":"1611838107.000000"},"blocks":[{"type":"rich_text","block_id":"DblsS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it would be nice to try it with the Van der pol example. even for a singleton initial condition you get a dense set of R^2 again because of the fact that each reach-set is associated with a (non-degenerate) time interval"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"a90e43f0-a9e8-420d-a1de-e2b85d037364","type":"message","text":"\"so about your last comment, it is not quite that because you need to evaluate the space variables in -1 .. 1\" - Is that true in this case? Being a singleton, the resulting polynomial is just a scalar value in this case\n```polynomial(R2)[2](RA.tspan(R2).lo)\n0.7398804618247171 + 𝒪(‖x‖³)```","user":"UP95S4864","ts":"1611839152.112000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HKD0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"\"so about your last comment, it is not quite that because you need to evaluate the space variables in -1 .. 1\" - Is that true in this case? Being a singleton, the resulting polynomial is just a scalar value in this case\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"polynomial(R2)[2](RA.tspan(R2).lo)\n0.7398804618247171 + 𝒪(‖x‖³)"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"e8ffc551-8d5e-402d-aec6-5bdb1e0425b0","type":"message","text":"right, the coefficients in x1 and x2 are all zero. you also need to add the remainder (get it with `remainder`  , but it is very small in the example)","user":"U9Z3H4H5F","ts":"1611839664.112200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7Fg11","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"right, the coefficients in x1 and x2 are all zero. you also need to add the remainder (get it with "},{"type":"text","text":"remainder","style":{"code":true}},{"type":"text","text":"  , but it is very small in the example)"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"92f64643-17a6-44c9-ac48-24260b49fd17","type":"message","text":"just to clear possible doubts,\n\n``` R2 = sol_reach[10]; set(R2)\n\n2-element Array{TaylorModels.TaylorModel1{TaylorN{Float64},Float64},1}:\n      1.7584019718866175 + ( 1.576769151568127) t + ( - 2.528483775679568) t² + ( 0.043135304283992516) t³ + ( 3.3666964995718303) t⁴ + ( - 2.4497160637433772) t⁵ + ( - 4.003646265251382) t⁶ + ( 7.094860114694345) t⁷ + ( 2.2866621267912666) t⁸ + [-1.10586e-13, 2.9598e-14]\n   1.576769151568127 + ( - 5.056967551359136) t + ( 0.12940591285197756) t² + ( 13.466785998287321) t³ + ( - 12.248580318716886) t⁴ + ( - 24.021877591508293) t⁵ + ( 49.66402080286042) t⁶ + ( 18.293297014330133) t⁷ + ( - 131.72991923602365) t⁸ + [-7.02493e-13, 2.64356e-13]```\nthe parts in square brackets are the remainder of the taylor model; the coefficients of the polynomial in time happen to be constants but in general they are polynomials in the state variables. you can try with `X0 = BallInf(u0, 1e-6)` to see those terms emerging","user":"U9Z3H4H5F","ts":"1611839773.112400","team":"T68168MUP","edited":{"user":"U9Z3H4H5F","ts":"1611840227.000000"},"blocks":[{"type":"rich_text","block_id":"gyn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"just to clear possible doubts,\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":" R2 = sol_reach[10]; set(R2)\n\n2-element Array{TaylorModels.TaylorModel1{TaylorN{Float64},Float64},1}:\n      1.7584019718866175 + ( 1.576769151568127) t + ( - 2.528483775679568) t² + ( 0.043135304283992516) t³ + ( 3.3666964995718303) t⁴ + ( - 2.4497160637433772) t⁵ + ( - 4.003646265251382) t⁶ + ( 7.094860114694345) t⁷ + ( 2.2866621267912666) t⁸ + [-1.10586e-13, 2.9598e-14]\n   1.576769151568127 + ( - 5.056967551359136) t + ( 0.12940591285197756) t² + ( 13.466785998287321) t³ + ( - 12.248580318716886) t⁴ + ( - 24.021877591508293) t⁵ + ( 49.66402080286042) t⁶ + ( 18.293297014330133) t⁷ + ( - 131.72991923602365) t⁸ + [-7.02493e-13, 2.64356e-13]"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nthe parts in square brackets are the remainder of the taylor model; the coefficients of the polynomial in time happen to be constants but in general they are polynomials in the state variables. you can try with "},{"type":"text","text":"X0 = BallInf(u0, 1e-6)","style":{"code":true}},{"type":"text","text":" to see those terms emerging"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864","reactions":[{"name":"+1","users":["UP95S4864"],"count":1}]},{"client_msg_id":"f99788c6-67c4-4666-af02-ee000ffab95e","type":"message","text":"by the way, about the plot function you propose, that's nice ! i see the line segment. there are 2 technical comments: in that command we're ignoring the remainder, otherwise we would have small boxes, and the domain stored internally is normalized to [0, dt] (reason is to have less floating-point accumulation of error), so you can do:  `plot(t-&gt;polynomial(R2)[2](t)(), RA.tspan(R2).lo - domain(R2).hi, RA.tspan(R2).hi - domain(R2).hi)` . i will ad a new function to the package so that it is easier to do, something like `plot(overapproximate(R2, Hyperrectangle, length_time=10))`","user":"U9Z3H4H5F","ts":"1611841419.113100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h3GNX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"by the way, about the plot function you propose, that's nice ! i see the line segment. there are 2 technical comments: in that command we're ignoring the remainder, otherwise we would have small boxes, and the domain stored internally is normalized to [0, dt] (reason is to have less floating-point accumulation of error), so you can do:  "},{"type":"text","text":"plot(t->polynomial(R2)[2](t)(), RA.tspan(R2).lo - domain(R2).hi, RA.tspan(R2).hi - domain(R2).hi)","style":{"code":true}},{"type":"text","text":" . i will ad a new function to the package so that it is easier to do, something like "},{"type":"text","text":"plot(overapproximate(R2, Hyperrectangle, length_time=10))","style":{"code":true}}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"8c96e92c-b2a9-4fab-a105-8a1bf3744cbb","type":"message","text":"(currently, only mincing in space is available as an API function)","user":"U9Z3H4H5F","ts":"1611841476.113300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LUKq4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(currently, only mincing in space is available as an API function)"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"691175b9-6284-494b-a764-07df75372317","type":"message","text":"For my application, I want to work with the resulting TM directly, not its set approximation. In the RA community is seems like the TM is alway an intermediate step. You eventually need to do some sort of set approximation so you can check intersection and the like. So, in a round about way I'm trying to figure out if I can use the internals of package to do what I need.","user":"UP95S4864","ts":"1611841751.113500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"quaol","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For my application, I want to work with the resulting TM directly, not its set approximation. In the RA community is seems like the TM is alway an intermediate step. You eventually need to do some sort of set approximation so you can check intersection and the like. So, in a round about way I'm trying to figure out if I can use the internals of package to do what I need."}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"1c4ea1f4-e5e5-49b2-a1ae-0c7b73fcb492","type":"message","text":"I am putting together a MWE using the RK45 you sent that should highlight what I'm trying to do.","user":"UP95S4864","ts":"1611841777.113700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=VXf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am putting together a MWE using the RK45 you sent that should highlight what I'm trying to do."}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"},{"client_msg_id":"1f377941-5cd1-4ea7-a8c1-557227341650","type":"message","text":"sure :thumbsup:\n\n&gt;  In the RA community is seems like the TM is alway an intermediate step.\nthe Taylor model stands as any other set representation (the diagram in <https://www.annualreviews.org/doi/abs/10.1146/annurev-control-071420-081941|this review> should clarify what i mean) , but it is non-convex and things like intersection tend to be easier by enclosing with a convex set -- but you can also exploit the information in time and in space to do things more accurately.\n\nin the problem of closed loop systems with neural network controllers, for example, you can compute the forward state of the network with a taylor model and feed it directly to the plant model (if your algorithm accepts them as input)","user":"U9Z3H4H5F","ts":"1611842901.113900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BBy51","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"sure "},{"type":"emoji","name":"thumbsup"},{"type":"text","text":"\n\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":" In the RA community is seems like the TM is alway an intermediate step."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nthe Taylor model stands as any other set representation (the diagram in "},{"type":"link","url":"https://www.annualreviews.org/doi/abs/10.1146/annurev-control-071420-081941","text":"this review"},{"type":"text","text":" should clarify what i mean) , but it is non-convex and things like intersection tend to be easier by enclosing with a convex set -- but you can also exploit the information in time and in space to do things more accurately.\n\nin the problem of closed loop systems with neural network controllers, for example, you can compute the forward state of the network with a taylor model and feed it directly to the plant model (if your algorithm accepts them as input)"}]}]}],"thread_ts":"1611668881.071300","parent_user_id":"UP95S4864"}]