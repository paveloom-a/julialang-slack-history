[{"client_msg_id":"41dcdd0f-c1ed-4806-bf30-ae667e35785c","type":"message","text":"Ok, are there examples somewhere that I've missed which handle non-integrated (and thus pre-allocated) state variables with DiffEqSensitivity? This has been a sticking point for me for weeks now... I can kind of see how to do it with `ForwardDiff` but the chunk size complicates everything (especially thanks to <https://github.com/SciML/DiffEqSensitivity.jl/issues/390|this bug> ).","user":"U01H36BUDJB","ts":"1614977758.020800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rlFWH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok, are there examples somewhere that I've missed which handle non-integrated (and thus pre-allocated) state variables with DiffEqSensitivity? This has been a sticking point for me for weeks now... I can kind of see how to do it with "},{"type":"text","text":"ForwardDiff","style":{"code":true}},{"type":"text","text":" but the chunk size complicates everything (especially thanks to "},{"type":"link","url":"https://github.com/SciML/DiffEqSensitivity.jl/issues/390","text":"this bug"},{"type":"text","text":" )."}]}]}],"thread_ts":"1614977758.020800","reply_count":8,"reply_users_count":2,"latest_reply":"1615114681.025200","reply_users":["U01H36BUDJB","U69BL50BF"],"subscribed":false},{"client_msg_id":"282100ad-e2ba-452f-a581-93bd08697b07","type":"message","text":"<@U69BL50BF> I think there's a fundamental problem with making this work with reverse mode... that being that \"external\" state variables aren't saved or tracked in the forward pass so the intermediary states aren't saved anywhere. This means, I think, that the adjoint computation would be wrong.\n\nI am still trying to get forward mode to work for the time being, but I would really like to have reverse mode available too.\n\nIf that means contributing some development effort to supporting non-integrated/external state variables then I am happy to do that. It's beneficial to my research.","user":"U01H36BUDJB","ts":"1614979148.021100","team":"T68168MUP","edited":{"user":"U01H36BUDJB","ts":"1614979195.000000"},"blocks":[{"type":"rich_text","block_id":"IQiR","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U69BL50BF"},{"type":"text","text":" I think there's a fundamental problem with making this work with reverse mode... that being that \"external\" state variables aren't saved or tracked in the forward pass so the intermediary states aren't saved anywhere. This means, I think, that the adjoint computation would be wrong.\n\nI am still trying to get forward mode to work for the time being, but I would really like to have reverse mode available too.\n\nIf that means contributing some development effort to supporting non-integrated/external state variables then I am happy to do that. It's beneficial to my research."}]}]}],"thread_ts":"1614977758.020800","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"3e4e17ad-8316-4e7b-9971-2f502b62978f","type":"message","text":"`DEDataVector` might also be a solution to this, but I'm not 100% sure... also there's a performance hit for using it which is kind of annoying.","user":"U01H36BUDJB","ts":"1615048484.023500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s39f","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"DEDataVector","style":{"code":true}},{"type":"text","text":" might also be a solution to this, but I'm not 100% sure... also there's a performance hit for using it which is kind of annoying."}]}]}],"thread_ts":"1614977758.020800","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"f1272451-28a0-4688-b8b3-a1617ee4d426","type":"message","text":"I'm not sure what the question is here.","user":"U69BL50BF","ts":"1615103661.024100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Iru8c","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not sure what the question is here."}]}]}],"thread_ts":"1614977758.020800","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"68b76e47-f74c-4a66-8c09-c8191b6d219b","type":"message","text":"Well the basic problem is that in many modeling scenarios, you have state variables that are not \"prognostic\", i.e. not integrated, but still change over time. In my use case, heat capacity and thermal conductivity are both examples of this. They change as a function of liquid water content, which changes as a function of the integrated variables (phase change).\n\nIt's not clear to me still how this is supposed to work in the SciML framework. You can store extra state in `p` or the `ODEFunction` , but this doesn't really work (or at least gets really complicated) when you try to use autodiff+sensitivity analysis because of the specialized types (`TrackedArray` ,`Dual` ,etc..).\n\nSo I just wanted to start a discussion about this and what the right solutions are. I'm happy to put some time into contributing something if needed.","user":"U01H36BUDJB","ts":"1615114150.024300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6kO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well the basic problem is that in many modeling scenarios, you have state variables that are not \"prognostic\", i.e. not integrated, but still change over time. In my use case, heat capacity and thermal conductivity are both examples of this. They change as a function of liquid water content, which changes as a function of the integrated variables (phase change).\n\nIt's not clear to me still how this is supposed to work in the SciML framework. You can store extra state in "},{"type":"text","text":"p","style":{"code":true}},{"type":"text","text":" or the "},{"type":"text","text":"ODEFunction","style":{"code":true}},{"type":"text","text":" , but this doesn't really work (or at least gets really complicated) when you try to use autodiff+sensitivity analysis because of the specialized types ("},{"type":"text","text":"TrackedArray","style":{"code":true}},{"type":"text","text":" ,"},{"type":"text","text":"Dual","style":{"code":true}},{"type":"text","text":" ,etc..).\n\nSo I just wanted to start a discussion about this and what the right solutions are. I'm happy to put some time into contributing something if needed."}]}]}],"thread_ts":"1614977758.020800","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"36ad8111-ce7a-43b3-b47f-ebb3fac7097f","type":"message","text":"like discrete values you're updating along the integration with callbacks?","user":"U69BL50BF","ts":"1615114222.024500","team":"T68168MUP","edited":{"user":"U69BL50BF","ts":"1615114230.000000"},"blocks":[{"type":"rich_text","block_id":"i5kSJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"like discrete values you're updating along the integration with callbacks?"}]}]}],"thread_ts":"1614977758.020800","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"64029333-cc70-40ac-87e0-15eabd6dc3f7","type":"message","text":"Not just callbacks... they could be updated in the step function as well.","user":"U01H36BUDJB","ts":"1615114333.024800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lJA1r","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not just callbacks... they could be updated in the step function as well."}]}]}],"thread_ts":"1614977758.020800","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"90eebbf1-acb6-4522-b489-1e6d5a669505","type":"message","text":"Phase change is a continuous process that occurs over a time interval, though the \"start\" and \"end\" could be modeled as discrete events with a callback.","user":"U01H36BUDJB","ts":"1615114380.025000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7yHo8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Phase change is a continuous process that occurs over a time interval, though the \"start\" and \"end\" could be modeled as discrete events with a callback."}]}]}],"thread_ts":"1614977758.020800","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"6d34b5db-3761-4250-8c99-dfc4d9d8a13c","type":"message","text":"Actually I guess it would be possible to put everything into callbacks, but there would have to be a discrete callback that would end up getting called at every time step because phase change is always occurring somewhere in the ground.","user":"U01H36BUDJB","ts":"1615114681.025200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rIWg+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Actually I guess it would be possible to put everything into callbacks, but there would have to be a discrete callback that would end up getting called at every time step because phase change is always occurring somewhere in the ground."}]}]}],"thread_ts":"1614977758.020800","parent_user_id":"U01H36BUDJB"}]