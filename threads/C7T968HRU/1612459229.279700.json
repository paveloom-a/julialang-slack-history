[{"client_msg_id":"72767238-0794-44d2-8571-439914fe0133","type":"message","text":"I saw something on this slack recently but don't remember what it said exactly. If I have a large system, but I am primarily interested in just the linear combination of some of the state variables (for instance, an age structured model where I want to measure the total population), is there a method that will get me that more efficiently than solving for all the state variables?","user":"U011V2YN59N","ts":"1612459229.279700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Y8Q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I saw something on this slack recently but don't remember what it said exactly. If I have a large system, but I am primarily interested in just the linear combination of some of the state variables (for instance, an age structured model where I want to measure the total population), is there a method that will get me that more efficiently than solving for all the state variables?"}]}]}],"thread_ts":"1612459229.279700","reply_count":1,"reply_users_count":1,"latest_reply":"1612461793.280800","reply_users":["U010BJMDXGX"],"subscribed":false},{"client_msg_id":"580865d6-5c0a-4b1f-8d84-56274a504787","type":"message","text":"Maybe you were thinking of this? <https://julialang.slack.com/archives/CN04R7WKE/p1611938553070500>","user":"U010BJMDXGX","ts":"1612461793.280800","team":"T68168MUP","attachments":[{"from_url":"https://julialang.slack.com/archives/CN04R7WKE/p1611938553070500","fallback":"[January 29th, 2021 8:42 AM] ameyer: I am trying to most efficiently solve a linear ODE (of ~100 state variables). I need to calculate its solution at many, evenly spaced timepoints. The twist is that the actual output of the model is the sum of many of the state variables (e.g. sum of the first 50 is the first observable, then the second 50 is the second observable). This gives rise to a weakly oscillatory system with overall exponential decay or growth. (This is a way to express Gamma-distributed delay equations using the <https://arxiv.org/abs/1808.07571|LCT>.)\n\nSo far, just calculating `expm(A*δt)` has been most efficient, but is by far the slowest part of my code. I've tried Krylov methods in ExponentialUtilities.jl, and using `LawsonEuler` in DiffEq.jl, which end up slower. Some matrix decomposition approach is temping—for example, I could express the sum within the eigenvectors—but <https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwjI2oSEycHuAhVByaQKHfgqCqsQFjAAegQIAhAC&amp;url=https%3A%2F%2Fwww.cs.cornell.edu%2Fcv%2FResearchPDF%2F19ways%2B.pdf&amp;usg=AOvVaw2rq2d6snwBYEz5ZB1HQwV1|suffer from roundoff error>. Am I missing something? It seems like this would come up when efficiently solving large linear systems as approximations of non-linear systems, like with the Koopman Op...","ts":"1611938553.070500","author_id":"U010BJMDXGX","author_subname":"Aaron Meyer","channel_id":"CN04R7WKE","channel_name":"sciml","is_msg_unfurl":true,"is_thread_root_unfurl":true,"text":"I am trying to most efficiently solve a linear ODE (of ~100 state variables). I need to calculate its solution at many, evenly spaced timepoints. The twist is that the actual output of the model is the sum of many of the state variables (e.g. sum of the first 50 is the first observable, then the second 50 is the second observable). This gives rise to a weakly oscillatory system with overall exponential decay or growth. (This is a way to express Gamma-distributed delay equations using the <https://arxiv.org/abs/1808.07571|LCT>.)\n\nSo far, just calculating `expm(A*δt)` has been most efficient, but is by far the slowest part of my code. I've tried Krylov methods in ExponentialUtilities.jl, and using `LawsonEuler` in DiffEq.jl, which end up slower. Some matrix decomposition approach is temping—for example, I could express the sum within the eigenvectors—but <https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwjI2oSEycHuAhVByaQKHfgqCqsQFjAAegQIAhAC&amp;url=https%3A%2F%2Fwww.cs.cornell.edu%2Fcv%2FResearchPDF%2F19ways%2B.pdf&amp;usg=AOvVaw2rq2d6snwBYEz5ZB1HQwV1|suffer from roundoff error>. Am I missing something? It seems like this would come up when efficiently solving large linear systems as approximations of non-linear systems, like with the Koopman Op...","author_name":"Aaron Meyer","author_link":"https://julialang.slack.com/team/U010BJMDXGX","author_icon":"https://secure.gravatar.com/avatar/1c32f33d4c7d389f16e683767b5e8335.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-48.png","mrkdwn_in":["text"],"id":1,"original_url":"https://julialang.slack.com/archives/CN04R7WKE/p1611938553070500","footer":"Thread in #sciml"}],"blocks":[{"type":"rich_text","block_id":"yhY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe you were thinking of this? "},{"type":"link","url":"https://julialang.slack.com/archives/CN04R7WKE/p1611938553070500"}]}]}],"thread_ts":"1612459229.279700","parent_user_id":"U011V2YN59N"}]