[{"client_msg_id":"7846f07b-cf27-4df6-bef9-1f245dcabd69","type":"message","text":"Hi, I'm new to Julia and playing around with tutorials for DiffEqFlux. For this example of LV (<https://diffeqflux.sciml.ai/stable/examples/optimization_ode/>), I tried adding some system perturbations with `PresetTimeCallback()`. It did change the standalone simulation output. However when I put the callback into `solve()` inside loss calculation and `sciml_train()`, it says \"Interpolation disabled due to sensitivity analysis\", and the output no longer reflect saveat input. Anything else I have to do other than adding callback to `solve`, e.g. changing sensitivity algorithm?\n```t_event = [2, 6, 8]\naffect!(integrator) = integrator.u[1] += 1\ncb = PresetTimeCallback(t_event, affect!)\n\nfunction loss_w_cb(p)\n    sol = solve(prob, Tsit5(), p=p, saveat = tsteps, callback=cb)\n    println(sol)\n    loss = sum(abs2, sol.-1)\n    return loss, sol\nend\n\nresult_ode = DiffEqFlux.sciml_train(loss_w_cb, p,\n                                    ADAM(0.1),\n                                    # cb = callback,\n                                    maxiters = 100)```","user":"U01TFEL2EMA","ts":"1617680584.335000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FuOo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi, I'm new to Julia and playing around with tutorials for DiffEqFlux. For this example of LV ("},{"type":"link","url":"https://diffeqflux.sciml.ai/stable/examples/optimization_ode/"},{"type":"text","text":"), I tried adding some system perturbations with `PresetTimeCallback()`. It did change the standalone simulation output. However when I put the callback into `solve()` inside loss calculation and `sciml_train()`, it says \"Interpolation disabled due to sensitivity analysis\", and the output no longer reflect saveat input. Anything else I have to do other than adding callback to `solve`, e.g. changing sensitivity algorithm?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"t_event = [2, 6, 8]\naffect!(integrator) = integrator.u[1] += 1\ncb = PresetTimeCallback(t_event, affect!)\n\nfunction loss_w_cb(p)\n    sol = solve(prob, Tsit5(), p=p, saveat = tsteps, callback=cb)\n    println(sol)\n    loss = sum(abs2, sol.-1)\n    return loss, sol\nend\n\nresult_ode = DiffEqFlux.sciml_train(loss_w_cb, p,\n                                    ADAM(0.1),\n                                    # cb = callback,\n                                    maxiters = 100)"}]}]}],"thread_ts":"1617680584.335000","reply_count":3,"reply_users_count":2,"latest_reply":"1617717403.345000","reply_users":["U69BL50BF","U01TFEL2EMA"],"is_locked":false,"subscribed":false},{"client_msg_id":"b665566d-dd02-41b7-8ea0-e81818889316","type":"message","text":"can you share a full example?","user":"U69BL50BF","ts":"1617704283.344400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tVDaP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"can you share a full example?"}]}]}],"thread_ts":"1617680584.335000","parent_user_id":"U01TFEL2EMA"},{"client_msg_id":"da46d851-0d6a-4a30-9962-5ad496c23a50","type":"message","text":"this doesn't seem like it would do it since there's no interpolation here.","user":"U69BL50BF","ts":"1617704300.344600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sowH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this doesn't seem like it would do it since there's no interpolation here."}]}]}],"thread_ts":"1617680584.335000","parent_user_id":"U01TFEL2EMA"},{"type":"message","text":"Thanks, here is the full code..","files":[{"id":"F01T70WKAPQ","created":1617717389,"timestamp":1617717389,"name":"03-DiffEqFlux-normal-param-est.jl","title":"03-DiffEqFlux-normal-param-est.jl","mimetype":"text/plain","filetype":"text","pretty_type":"Plain Text","user":"U01TFEL2EMA","editable":true,"size":1199,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01T70WKAPQ/03-diffeqflux-normal-param-est.jl","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01T70WKAPQ/download/03-diffeqflux-normal-param-est.jl","permalink":"https://julialang.slack.com/files/U01TFEL2EMA/F01T70WKAPQ/03-diffeqflux-normal-param-est.jl","permalink_public":"https://slack-files.com/T68168MUP-F01T70WKAPQ-e0a00c8489","edit_link":"https://julialang.slack.com/files/U01TFEL2EMA/F01T70WKAPQ/03-diffeqflux-normal-param-est.jl/edit","preview":"using DifferentialEquations, Flux, Optim, DiffEqFlux, DiffEqSensitivity, Plots\n\nfunction lotka_volterra!(du, u, p, t)\n    x, y = u\n    α, β, δ, γ = p","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text/plain',window.getSelection().toString().replace(/\\u200b/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>using DifferentialEquations, Flux, Optim, DiffEqFlux, DiffEqSensitivity, Plots</pre></div>\n<div><pre></pre></div>\n<div><pre>function lotka_volterra!(du, u, p, t)</pre></div>\n<div><pre>    x, y = u</pre></div>\n<div><pre>    α, β, δ, γ = p</pre></div>\n</div>\n</div>\n","lines":51,"lines_more":46,"preview_is_truncated":true,"is_starred":false,"has_rich_preview":false}],"upload":false,"blocks":[{"type":"rich_text","block_id":"ePx1c","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks, here is the full code.."}]}]}],"user":"U01TFEL2EMA","display_as_bot":false,"ts":"1617717403.345000","thread_ts":"1617680584.335000","parent_user_id":"U01TFEL2EMA"}]