[{"client_msg_id":"edb49b0e-a92b-439e-be0e-ff6985697324","type":"message","text":"&gt; Hi, I am interested in solving very large ODE problems (which result from PDE semi-discretizations and/or operator splittings). I am wondering how hard it would be to utilize the existing ecosystem, assuming that my problem is so large that I would need a distributed memory implementation (talking about the orders of 1'000'000 to 100'000'000 dimensions in the semi-discretization). Are there any examples?\nDistributed memory is still a little hard, but we do have some simple examples using DistributedArrays.jl. If you use DistributedArrays, then it will keep all of the pieces separate and only do communication in your `f`... kind of. This is because internally there's only broadcast if you use a non-stiff ODE solver, so non-stiff ODEs \"just work\". Implicit solvers, well, DistributedArrays.jl does not support all linear algebra so sadly that will fail at LU. And then DistributedArrays.jl may not have everything you need for writing your `f`.","user":"U69BL50BF","ts":"1614883120.381000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GF4","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"Hi, I am interested in solving very large ODE problems (which result from PDE semi-discretizations and/or operator splittings). I am wondering how hard it would be to utilize the existing ecosystem, assuming that my problem is so large that I would need a distributed memory implementation (talking about the orders of 1'000'000 to 100'000'000 dimensions in the semi-discretization). Are there any examples?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Distributed memory is still a little hard, but we do have some simple examples using DistributedArrays.jl. If you use DistributedArrays, then it will keep all of the pieces separate and only do communication in your "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":"... kind of. This is because internally there's only broadcast if you use a non-stiff ODE solver, so non-stiff ODEs \"just work\". Implicit solvers, well, DistributedArrays.jl does not support all linear algebra so sadly that will fail at LU. And then DistributedArrays.jl may not have everything you need for writing your "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1614883120.381000","reply_count":4,"reply_users_count":2,"latest_reply":"1614886385.388900","reply_users":["U014A5E6L3V","U69BL50BF"],"subscribed":false},{"client_msg_id":"977dc82c-3a27-4308-ad01-22dabb329902","type":"message","text":"Thanks for the quick reply! Atm I do not have a distributed implementation in Julia, because I wanted to gather some information what paradigm or package would be the best to use before starting. Since the problem is technically a \"stiff DAE\" (which can be written as an ODE in mass matrix form) it will boil down to internal solves anyway. However, I would use iterative solvers instead of direct solvers, as direct solver runtimes will blow up with systems of this size.","user":"U014A5E6L3V","ts":"1614885827.387900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Vkq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks for the quick reply! Atm I do not have a distributed implementation in Julia, because I wanted to gather some information what paradigm or package would be the best to use before starting. Since the problem is technically a \"stiff DAE\" (which can be written as an ODE in mass matrix form) it will boil down to internal solves anyway. However, I would use iterative solvers instead of direct solvers, as direct solver runtimes will blow up with systems of this size."}]}]}],"thread_ts":"1614883120.381000","parent_user_id":"U69BL50BF"},{"client_msg_id":"b8518955-09e0-40e9-8b66-74a4f9a0898f","type":"message","text":"But I guess I can assume that, assuming I have some distributed iterative solver, there would be no problems in just using the existing ecosystem?","user":"U014A5E6L3V","ts":"1614885918.388100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L+plM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But I guess I can assume that, assuming I have some distributed iterative solver, there would be no problems in just using the existing ecosystem?"}]}]}],"thread_ts":"1614883120.381000","parent_user_id":"U69BL50BF"},{"client_msg_id":"e722f748-7031-47ab-b90d-38b86c7de01b","type":"message","text":"That should work","user":"U69BL50BF","ts":"1614886349.388600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aMA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That should work"}]}]}],"thread_ts":"1614883120.381000","parent_user_id":"U69BL50BF","reactions":[{"name":"rocket","users":["U014A5E6L3V"],"count":1}]},{"client_msg_id":"33b3dd35-cade-439a-a3d9-4218b8c76761","type":"message","text":"should in a looser sense than I usually use it, as in, this is something I haven't tested but by design it should (unless DistributedArrays is missing a function)","user":"U69BL50BF","ts":"1614886385.388900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"l43","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"should in a looser sense than I usually use it, as in, this is something I haven't tested but by design it should (unless DistributedArrays is missing a function)"}]}]}],"thread_ts":"1614883120.381000","parent_user_id":"U69BL50BF"}]