[{"client_msg_id":"229708d5-ab60-4aed-84f6-bac5d3834568","type":"message","text":"For the following, recipe, the second argument in the `AbstractPlotting.plot!` method is not the function `f`  but is a vector obtained by applying `f` to `x`.  But I want `f` to be function in the `AbstractPlotting.plot!` method. Is there a way to this?\n```using Makie \n\n@recipe(MyPlot, x, f) do scene \n    Attributes(\n        mycolor = :red \n    )\nend\n\nfunction AbstractPlotting.plot!(plt::MyPlot) \n    xx = plt[:x] \n    ff = plt[:f]   # `ff` is not a function. It is a vector of floats. \n    @show xx \n    @show ff \n    lines!(plt, xx, ff, color=plt.mycolor) \n    plt\nend\n\nmyplot(collect(0 : 0.1 : 10.), sin) ```","user":"UTX7DAUBE","ts":"1613119276.029600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"29m","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For the following, recipe, the second argument in the "},{"type":"text","text":"AbstractPlotting.plot!","style":{"code":true}},{"type":"text","text":" method is not the function "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":"  but is a vector obtained by applying "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" to "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":".  But I want "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" to be function in the "},{"type":"text","text":"AbstractPlotting.plot!","style":{"code":true}},{"type":"text","text":" method. Is there a way to this?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using Makie \n\n@recipe(MyPlot, x, f) do scene \n    Attributes(\n        mycolor = :red \n    )\nend\n\nfunction AbstractPlotting.plot!(plt::MyPlot) \n    xx = plt[:x] \n    ff = plt[:f]   # `ff` is not a function. It is a vector of floats. \n    @show xx \n    @show ff \n    lines!(plt, xx, ff, color=plt.mycolor) \n    plt\nend\n\nmyplot(collect(0 : 0.1 : 10.), sin) "}]}]}],"thread_ts":"1613119276.029600","reply_count":2,"reply_users_count":2,"latest_reply":"1613133368.034400","reply_users":["UK1BNFHFV","UTX7DAUBE"],"subscribed":false},{"client_msg_id":"78FFDAFB-6C3F-4B7A-A32C-7AE312232C96","type":"message","text":"Looks like a generic convert_arguments method causes this. You could make another convert_arguments with your plot type as the first argument and then vector, function where you just pass the arguments through as is. That should stop the conversion ","user":"UK1BNFHFV","ts":"1613125020.034200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LoG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Looks like a generic convert_arguments method causes this. You could make another convert_arguments with your plot type as the first argument and then vector, function where you just pass the arguments through as is. That should stop the conversion "}]}]}],"thread_ts":"1613119276.029600","parent_user_id":"UTX7DAUBE","reactions":[{"name":"+1","users":["UTX7DAUBE"],"count":1}]},{"client_msg_id":"34d44090-b7ec-47b6-a8e5-19801a05e6f5","type":"message","text":"Thanks a lot <@UK1BNFHFV> Here is the complete recipe.\n```using Makie \n\n@recipe(MyPlot, x, f) do scene \n    Attributes(\n        mycolor = :red \n    )\nend\n\nfunction AbstractPlotting.plot!(plt::MyPlot) \n    xx = plt[:x][] \n    ff = plt[:f][]   # `ff` is now a function !\n    lines!(plt, xx, ff.(xx), color=plt.mycolor) \n    plt\nend\n\nfunction AbstractPlotting.convert_arguments(::Type{&lt;:MyPlot}, x::AbstractVector, f::Function)\n    (x, f)\nend \n\nmyplot(collect(0 : 0.1 : 10.), cos) ```\nEverything works properly now.","user":"UTX7DAUBE","ts":"1613133368.034400","team":"T68168MUP","edited":{"user":"UTX7DAUBE","ts":"1613133447.000000"},"blocks":[{"type":"rich_text","block_id":"d5dnN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks a lot "},{"type":"user","user_id":"UK1BNFHFV"},{"type":"text","text":" Here is the complete recipe.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using Makie \n\n@recipe(MyPlot, x, f) do scene \n    Attributes(\n        mycolor = :red \n    )\nend\n\nfunction AbstractPlotting.plot!(plt::MyPlot) \n    xx = plt[:x][] \n    ff = plt[:f][]   # `ff` is now a function !\n    lines!(plt, xx, ff.(xx), color=plt.mycolor) \n    plt\nend\n\nfunction AbstractPlotting.convert_arguments(::Type{<:MyPlot}, x::AbstractVector, f::Function)\n    (x, f)\nend \n\nmyplot(collect(0 : 0.1 : 10.), cos) "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Everything works properly now."}]}]}],"thread_ts":"1613119276.029600","parent_user_id":"UTX7DAUBE"}]