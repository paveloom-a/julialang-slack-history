[{"client_msg_id":"7efdba77-4962-4285-813a-eefd0d5dacb6","type":"message","text":"Maybe something like what is described <https://brushingupscience.com/2017/05/09/vector-and-raster-in-one-with-matplotlib/comment-page-1/|here> for matplotlib?","user":"UB197FRCL","ts":"1611719071.190800","team":"T68168MUP","attachments":[{"service_name":"Brushing Up Science","service_url":"http://brushingupscience.com","title":"Vector and raster in one withÂ Matplotlib","title_link":"https://brushingupscience.com/2017/05/09/vector-and-raster-in-one-with-matplotlib/comment-page-1/","author_name":"Ken Hughes","author_link":"https://brushingupscience.com/author/hugke729/","thumb_url":"https://brushingupscience.files.wordpress.com/2017/05/rasterize_example-svg.png?fit=200%2C150","thumb_width":197,"thumb_height":150,"text":"Vector images are great, except when they shouldn&rsquo;t be vector. Figures with intricate detail can actually benefit from being rasterized. This can reduce file size and help the figure load more quickly. Python&rsquo;s Matplotlib has an option to rasterize certain elements, but it doesn&rsquo;t always work as simply as expected.\nThis post describes a function&nbsp;that (i) lets you rasterize any chosen elements when&nbsp;you export the figure and (ii) overcomes problems with the current implementation of rasterizing objects with Matplotlib.\n\nHow to rasterize in Matplotlib\nFor most plot types, it is as simple as including\n\nrasterized=True\n\nin the call to, say, pcolormesh or scatter. For example,\n\nfrom numpy.random import randn\nN = 10000\nplt.scatter(x=randn(N), y=randn(N), s=20*randn(N),\n            rasterized=True)\n\nThe resolution of the rasterization is set by the dpi argument when saving:\n\nplt.savefig('output.pdf', dpi=300)\n\nSimplifying matters\nSetting rasterized=True does not always work as easily as you might expect. For example, filled contour plots (plt.contourf) appear to ignore the setting and Basemap maps (m.fillcontinents) don&rsquo;t give the option. Furthermore, it would be simpler if we could specify which objects to rasterize when we export the figure as opposed to early in the code. For these reasons, I have developed a function&nbsp;entitled rasterize_and_save that works much like plt.savefig, but takes as an argument a list of objects to rasterize.\nConsider an example containing various plot types. We want to rasterize all but the line plot.\n\nfrom numpy.random import randn\nX, Y, Z = randn(9, 9), randn(9, 9), randn(9, 9)\n\nfig, axs = plt.subplots(ncols=2, nrows=2)\n(ax1, ax2), (ax3, ax4) = axs\n\ncax1 = ax1.contourf(Z)\ncax2 = ax2.scatter(X, Y, s=Z)\ncax3 = ax3.pcolormesh(Z)\ncax4 = ax4.plot(Z[:, 0])\n\nrasterize_list = [cax1, cax2, cax3]\nrasterize_and_save('out.svg', rasterize_list, dpi=300)\n\nAll but the last two lines will be familiar to Matplotlib users. The penultimate line specifies which objects will be rasterized. The final line exports the figure as an svg image at a resolution of 300 dpi. Here&rsquo;s the (annotated) result:\n\nKeeping some of the panels as vector elements is as simple as changing the objects contained in rasterize_list. Also, note how the contour plot is rasterized. This works because the rasterize_and_save function does the hard work of changing the rasterized setting on each filled contour individually.","fallback":"Brushing Up Science Link: Vector and raster in one with&nbsp;Matplotlib","from_url":"https://brushingupscience.com/2017/05/09/vector-and-raster-in-one-with-matplotlib/comment-page-1/","service_icon":"https://brushingupscience.files.wordpress.com/2019/11/favicon.png?w=150","id":1,"original_url":"https://brushingupscience.com/2017/05/09/vector-and-raster-in-one-with-matplotlib/comment-page-1/"}],"blocks":[{"type":"rich_text","block_id":"4rq=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe something like what is described "},{"type":"link","url":"https://brushingupscience.com/2017/05/09/vector-and-raster-in-one-with-matplotlib/comment-page-1/","text":"here"},{"type":"text","text":" for matplotlib?"}]}]}],"thread_ts":"1611719071.190800","reply_count":1,"reply_users_count":1,"latest_reply":"1611719468.191000","reply_users":["UB197FRCL"],"subscribed":false},{"client_msg_id":"9a3594a0-2dde-4043-8967-61e72f31be4f","type":"message","text":"Or something like this <https://stackoverflow.com/questions/37020842/reducing-size-of-vectorized-contourplot|other matplotlib example>","user":"UB197FRCL","ts":"1611719468.191000","team":"T68168MUP","attachments":[{"service_name":"Stack Overflow","title":"Reducing size of vectorized contourplot","title_link":"https://stackoverflow.com/questions/37020842/reducing-size-of-vectorized-contourplot","text":"I would like to include a filled contour plot to a pdf document (for example a TeX document). Currently I am using pyplots contourf, and saving to pdf with pyplots savefig. The problem with this is...","fallback":"Stack Overflow: Reducing size of vectorized contourplot","thumb_url":"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded","from_url":"https://stackoverflow.com/questions/37020842/reducing-size-of-vectorized-contourplot","thumb_width":316,"thumb_height":316,"service_icon":"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon.png?v=c78bd457575a","id":1,"original_url":"https://stackoverflow.com/questions/37020842/reducing-size-of-vectorized-contourplot"}],"blocks":[{"type":"rich_text","block_id":"u0zKS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Or something like this "},{"type":"link","url":"https://stackoverflow.com/questions/37020842/reducing-size-of-vectorized-contourplot","text":"other matplotlib example"}]}]}],"thread_ts":"1611719071.190800","parent_user_id":"UB197FRCL"}]