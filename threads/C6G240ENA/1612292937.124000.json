[{"client_msg_id":"7d2fe34d-5422-4e04-9adb-46f2fe8b629e","type":"message","text":"Is this the correct `rrule` for `reinterpret(reshape, ...)`?\n```function ChainRulesCore.rrule(::typeof(reinterpret), ::typeof(reshape), ::Type{R}, r::AbstractArray{T}) where {R, T}\n    function pullback(r̄)\n        return (NO_FIELDS, DoesNotExist(), DoesNotExist(), reinterpret(reshape, T, r̄))\n    end\n    return reinterpret(reshape, R, r), pullback\nend```","user":"U66SR8JHX","ts":"1612292937.124000","team":"T68168MUP","edited":{"user":"U66SR8JHX","ts":"1612292993.000000"},"blocks":[{"type":"rich_text","block_id":"Wyi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is this the correct "},{"type":"text","text":"rrule","style":{"code":true}},{"type":"text","text":" for "},{"type":"text","text":"reinterpret(reshape, ...)","style":{"code":true}},{"type":"text","text":"?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function ChainRulesCore.rrule(::typeof(reinterpret), ::typeof(reshape), ::Type{R}, r::AbstractArray{T}) where {R, T}\n    function pullback(r̄)\n        return (NO_FIELDS, DoesNotExist(), DoesNotExist(), reinterpret(reshape, T, r̄))\n    end\n    return reinterpret(reshape, R, r), pullback\nend"}]}]}],"thread_ts":"1612292937.124000","reply_count":28,"reply_users_count":3,"latest_reply":"1612317556.135200","reply_users":["U66SR8JHX","U6A936746","UD0NS8PDF"],"subscribed":false},{"client_msg_id":"5a9f6e3e-f492-4be6-89a7-9665616f386f","type":"message","text":"It seems that won't work as `eltype(r̄)` can be `Union{Nothing, R}` which is not a\nbitstype.","user":"U66SR8JHX","ts":"1612293939.124200","team":"T68168MUP","edited":{"user":"U66SR8JHX","ts":"1612293961.000000"},"blocks":[{"type":"rich_text","block_id":"pUs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It seems that won't work as "},{"type":"text","text":"eltype(r̄)","style":{"code":true}},{"type":"text","text":" can be "},{"type":"text","text":"Union{Nothing, R}","style":{"code":true}},{"type":"text","text":" which is not a\nbitstype."}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX"},{"client_msg_id":"34381768-1d04-4bb9-8e54-20d94c510084","type":"message","text":"Can you give an an example of what code you would like to AD through. (With input and output types).\n\nMost uses of reinterpret are probably not differentible.","user":"U6A936746","ts":"1612294186.124500","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1612294453.000000"},"blocks":[{"type":"rich_text","block_id":"NzSfA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can you give an an example of what code you would like to AD through. (With input and output types).\n\nMost uses of reinterpret are probably not differentible."}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX"},{"client_msg_id":"dec4f004-a0d4-4cd6-9e4d-787e8f53c8f6","type":"message","text":"Note that the type of the differential does not have to be the type of the primal. See <https://www.juliadiff.org/ChainRulesCore.jl/dev/design/many_differentials.html|https://www.juliadiff.org/ChainRulesCore.jl/dev/design/many_differentials.html>.","user":"U6A936746","ts":"1612294470.124800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DUEj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Note that the type of the differential does not have to be the type of the primal. See "},{"type":"link","url":"https://www.juliadiff.org/ChainRulesCore.jl/dev/design/many_differentials.html","text":"https://www.juliadiff.org/ChainRulesCore.jl/dev/design/many_differentials.html"},{"type":"text","text":"."}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX"},{"client_msg_id":"23289fc0-2357-43db-9ae8-ffa8caaf5bcf","type":"message","text":"I am not sure I have seen this method of reinterpret.\nWhat does it do?","user":"U6A936746","ts":"1612294503.125000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"drH0o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am not sure I have seen this method of reinterpret.\nWhat does it do?"}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX"},{"client_msg_id":"0285129e-854b-4370-9910-911ee5300774","type":"message","text":"From the docs:\n```Change the type-interpretation of A while consuming or adding a \"channel dimension.\"```","user":"U66SR8JHX","ts":"1612294558.125200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RIRQ+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"From the docs:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Change the type-interpretation of A while consuming or adding a \"channel dimension.\""}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX"},{"client_msg_id":"017491c7-9d98-4d35-8a3c-a711efcde22e","type":"message","text":"Example of code?","user":"U6A936746","ts":"1612294660.125400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"K3Jqg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Example of code?"}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX"},{"client_msg_id":"2838c7ee-bdb1-4010-ad93-009cefa78403","type":"message","text":"```julia&gt; reinterpret(reshape, SVector{3, Float64}, rand(3, 3))\n3-element reinterpret(reshape, SVector{3, Float64}, ::Matrix{Float64}) with eltype SVector{3, Float64}:\n [0.2253646402151508, 0.11989048844369599, 0.7209225542881343]\n [0.7173769955099616, 0.3733974566682021, 0.8826088945546879]\n [0.763236210083762, 0.7871552676803042, 0.7733302744244395]```","user":"U66SR8JHX","ts":"1612294742.125600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6zZ","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> reinterpret(reshape, SVector{3, Float64}, rand(3, 3))\n3-element reinterpret(reshape, SVector{3, Float64}, ::Matrix{Float64}) with eltype SVector{3, Float64}:\n [0.2253646402151508, 0.11989048844369599, 0.7209225542881343]\n [0.7173769955099616, 0.3733974566682021, 0.8826088945546879]\n [0.763236210083762, 0.7871552676803042, 0.7733302744244395]"}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX"},{"client_msg_id":"6ba6b294-929b-4e6e-a064-2f39ef48c327","type":"message","text":"I have a function that takes an array of size `3×N` and each column represents a vector of positions and then different functions that take positions. I can write the code so I pass the views of each column, but if I reinterpret it as SVectors the compiler can optimize it much more, and got wondering if it was possible to differentiate `reinterpret`","user":"U66SR8JHX","ts":"1612294918.125800","team":"T68168MUP","edited":{"user":"U66SR8JHX","ts":"1612294966.000000"},"blocks":[{"type":"rich_text","block_id":"u05","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have a function that takes an array of size "},{"type":"text","text":"3×N","style":{"code":true}},{"type":"text","text":" and each column represents a vector of positions and then different functions that take positions. I can write the code so I pass the views of each column, but if I reinterpret it as SVectors the compiler can optimize it much more, and got wondering if it was possible to differentiate "},{"type":"text","text":"reinterpret","style":{"code":true}}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX"},{"client_msg_id":"fbc7f0a0-836c-4ac4-83e1-1ba456814c68","type":"message","text":"I can always just pass the views instead.","user":"U66SR8JHX","ts":"1612295025.126100","team":"T68168MUP","edited":{"user":"U66SR8JHX","ts":"1612317786.000000"},"blocks":[{"type":"rich_text","block_id":"Np7Lb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I can always just pass the views instead."}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX"},{"client_msg_id":"f8cf443a-c5d6-4432-bcca-1dd8072868bc","type":"message","text":"Something like that ought to be possible, but perhaps there should be an `R&lt;:AbstractArray{T}` or something, to prevent this working on reinterpreting Floats to Ints etc.","user":"UD0NS8PDF","ts":"1612295033.126300","team":"T68168MUP","edited":{"user":"UD0NS8PDF","ts":"1612295881.000000"},"blocks":[{"type":"rich_text","block_id":"qSZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Something like that ought to be possible, but perhaps there should be an "},{"type":"text","text":"R<:AbstractArray{T}","style":{"code":true}},{"type":"text","text":" or something, to prevent this working on reinterpreting Floats to Ints etc."}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX"},{"client_msg_id":"836a6075-3424-4e46-a42b-730a1a03b7b6","type":"message","text":"But you may need more than one pullback method — if the next function gives you an array of arrays, not Static, then this pullback should (I think) still glue them back together.","user":"UD0NS8PDF","ts":"1612295104.126500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KfIf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But you may need more than one pullback method — if the next function gives you an array of arrays, not Static, then this pullback should (I think) still glue them back together."}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX"},{"client_msg_id":"924273bc-a7c6-4f53-90ce-7c736e99e7c6","type":"message","text":"(This is also a case where something like `r::DenseArray{T}` would probably be good.)","user":"UD0NS8PDF","ts":"1612295215.127000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4Yfe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(This is also a case where something like "},{"type":"text","text":"r::DenseArray{T}","style":{"code":true}},{"type":"text","text":" would probably be good.)"}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX"},{"client_msg_id":"9c25023d-fc10-44e6-8471-bef6387efec2","type":"message","text":"Ah I see it is a newish function\n<https://docs.julialang.org/en/v1.7-dev/base/arrays/#Base.reinterpret|https://docs.julialang.org/en/v1.7-dev/base/arrays/#Base.reinterpret>\n\nYeah\nIt is hard to do in general because it might change the eltype and then you need to know things about what differential type  you need, and it is a bit fiddly.\nI would need to think for a bit.\n\nBut if it's all abstract arrays of the same kinds of floats should be easier.\n\nCan possibly just use r look plain reshape on backwards pass are return a plain `Array` which is a valid differential type for a static array","user":"U6A936746","ts":"1612295278.127200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p4x","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah I see it is a newish function\n"},{"type":"link","url":"https://docs.julialang.org/en/v1.7-dev/base/arrays/#Base.reinterpret","text":"https://docs.julialang.org/en/v1.7-dev/base/arrays/#Base.reinterpret"},{"type":"text","text":"\n\nYeah\nIt is hard to do in general because it might change the eltype and then you need to know things about what differential type  you need, and it is a bit fiddly.\nI would need to think for a bit.\n\nBut if it's all abstract arrays of the same kinds of floats should be easier.\n\nCan possibly just use r look plain reshape on backwards pass are return a plain "},{"type":"text","text":"Array ","style":{"code":true}},{"type":"text","text":"which is a valid differential type for a static array"}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX"},{"client_msg_id":"5fe716be-b15e-449a-8c7a-2ad4f24190ea","type":"message","text":"The example turns one Array into many slices, so its gradient should make one big Array again, but not via reshape","user":"UD0NS8PDF","ts":"1612295368.127400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HLfP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The example turns one Array into many slices, so its gradient should make one big Array again, but not via reshape"}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX","reactions":[{"name":"+1","users":["U6A936746","U66SR8JHX"],"count":2}]},{"client_msg_id":"7639ce89-ac40-4392-9762-4fd5a2601567","type":"message","text":"Oh right, I need to return and array of the right size and type but it doesn't have to be through reshape. That helps. Thanks!","user":"U66SR8JHX","ts":"1612295573.127800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"caK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh right, I need to return and array of the right size and type but it doesn't have to be through reshape. That helps. Thanks!"}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX"},{"client_msg_id":"878250b5-b0fc-4196-8cf6-4b2191698b35","type":"message","text":"Best case is that it can be done through `reinterpret` again, like the forward pass. But I think there ought to be a fallback to some `reduce(hcat, )` type operation.","user":"UD0NS8PDF","ts":"1612295654.128000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Wtr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Best case is that it can be done through "},{"type":"text","text":"reinterpret","style":{"code":true}},{"type":"text","text":" again, like the forward pass. But I think there ought to be a fallback to some "},{"type":"text","text":"reduce(hcat, )","style":{"code":true}},{"type":"text","text":" type operation."}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX"},{"client_msg_id":"036cb3b1-3722-4e4d-a2d9-e88f3bb88c2e","type":"message","text":"As long as `+(::P, ::D)::P` holds does matter what type `D` is returned.\nMight want to just return a suitable `Composite`\n","user":"U6A936746","ts":"1612295692.128200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Tzga","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"As long as "},{"type":"text","text":"+(::P, ::D)::P","style":{"code":true}},{"type":"text","text":" holds does matter what type "},{"type":"text","text":"D ","style":{"code":true}},{"type":"text","text":"is returned.\nMight want to just return a suitable "},{"type":"text","text":"Composite\n","style":{"code":true}}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX"},{"client_msg_id":"16ee30bf-f936-4db5-9767-e7d1049d4d77","type":"message","text":"Ok. I'll have to read the docs a bit more, But this helps","user":"U66SR8JHX","ts":"1612295799.128400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3XOiE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok. I'll have to read the docs a bit more, But this helps"}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX"},{"client_msg_id":"7dfe73de-9fa6-4365-b8ca-1a4c6048fe6f","type":"message","text":"The existence of `nothing`  in rbar is almost certainly a bug in Zygote. But probably one you can ignore.\nI think I have an issue open, and I know the fix.\nBut another bit of looseness in Zygote should cancel it out anyway I think","user":"U6A936746","ts":"1612295812.128600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FzKn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The existence of "},{"type":"text","text":"nothing ","style":{"code":true}},{"type":"text","text":" in rbar is almost certainly a bug in Zygote. But probably one you can ignore.\nI think I have an issue open, and I know the fix.\nBut another bit of looseness in Zygote should cancel it out anyway I think"}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX"},{"client_msg_id":"1a41a434-793a-44e9-a82a-263c7228aeb6","type":"message","text":"In my case I'm reinterpreting the same floats with SVector (of the same type of floats), for which, as <@UD0NS8PDF> said, in the best case I could use `reinterpret` again (if it wasn't for the `nothing` in rbar), but I think I can still get something usable for now.","user":"U66SR8JHX","ts":"1612296027.129500","team":"T68168MUP","edited":{"user":"U66SR8JHX","ts":"1612296084.000000"},"blocks":[{"type":"rich_text","block_id":"=ibH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In my case I'm reinterpreting the same floats with SVector (of the same type of floats), for which, as "},{"type":"user","user_id":"UD0NS8PDF"},{"type":"text","text":" said, in the best case I could use "},{"type":"text","text":"reinterpret","style":{"code":true}},{"type":"text","text":" again (if it wasn't for the "},{"type":"text","text":"nothing","style":{"code":true}},{"type":"text","text":" in rbar), but I think I can still get something usable for now."}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX"},{"client_msg_id":"cdeb1b1f-4f2d-4ef7-8f7e-cab32190a517","type":"message","text":"Oh now I see, “eltype(r̄) can be Union{Nothing, R}” i.e. the upstream function is sometimes returning an array, and sometimes nothing. Then I can’t see reinterpret working (although these small unions are weird so maybe there’s a way) but even a fallback can’t just be `reduce(hcat, …)` as it also needs to handle this nothing / Zero() possibility.","user":"UD0NS8PDF","ts":"1612296206.130300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SfB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh now I see, “eltype(r̄) can be Union{Nothing, R}” i.e. the upstream function is sometimes returning an array, and sometimes nothing. Then I can’t see reinterpret working (although these small unions are weird so maybe there’s a way) but even a fallback can’t just be "},{"type":"text","text":"reduce(hcat, …)","style":{"code":true}},{"type":"text","text":" as it also needs to handle this nothing / Zero() possibility."}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX"},{"client_msg_id":"3d33bec6-0401-4e94-8038-218d8f7edbef","type":"message","text":"Never as simple as it looks at first!","user":"UD0NS8PDF","ts":"1612296216.130500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9eWE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Never as simple as it looks at first!"}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX"},{"client_msg_id":"53b102e6-e50f-4726-acc7-b183d615678f","type":"message","text":"The nothings really shouldn't be there as I said.\nBut you can replace  nothings with `zero(R)`","user":"U6A936746","ts":"1612296332.130700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bdAu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The nothings really shouldn't be there as I said.\nBut you can replace  nothings with "},{"type":"text","text":"zero(R)","style":{"code":true}}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX","reactions":[{"name":"+1","users":["U66SR8JHX"],"count":1}]},{"client_msg_id":"6e65db7c-9086-4e2e-88bd-01bde59182f7","type":"message","text":"For StaticArrays you could replace like this. They shouldn’t be there because the next function should have a type-stable gradient or something?","user":"UD0NS8PDF","ts":"1612296491.131500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hw9Qn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For StaticArrays you could replace like this. They shouldn’t be there because the next function should have a type-stable gradient or something?"}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX"},{"client_msg_id":"19c6c07a-4342-467e-b1e9-f03975a870b9","type":"message","text":"The general case seems to be that you can only assume you’ll get an AbsVec(AbsVec)… possibly with some Zero() mixed in? e.g. suppose the next function is `sum(v -&gt; rand()&gt;0.5 ? 1//2 : sum(v), vs)` where `vs` is the vector of SVectors","user":"UD0NS8PDF","ts":"1612296536.131700","team":"T68168MUP","edited":{"user":"UD0NS8PDF","ts":"1612296920.000000"},"blocks":[{"type":"rich_text","block_id":"q6e","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The general case seems to be that you can only assume you’ll get an AbsVec(AbsVec)… possibly with some Zero() mixed in? e.g. suppose the next function is "},{"type":"text","text":"sum(v -> rand()>0.5 ? 1//2 : sum(v), vs)","style":{"code":true}},{"type":"text","text":" where "},{"type":"text","text":"vs","style":{"code":true}},{"type":"text","text":" is the vector of SVectors"}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX"},{"client_msg_id":"be0b4648-bf33-4612-b943-dd45fa4fd207","type":"message","text":"As a follow up, this works for my use case\n```function ChainRulesCore.rrule(\n    ::typeof(reinterpret),\n    ::typeof(reshape),\n    ::Type{R},\n    A::AbstractArray{T}\n) where {N, T, R &lt;: SVector{N, T}}\n    function pullback(Ā)\n        ∂A = mapreduce(\n            v -&gt; (\n                v isa R ? v : zero(R)\n            ),\n            vcat,\n            Ā;\n            init = similar(A, 0)\n        )\n        return (\n            NO_FIELDS,\n            DoesNotExist(),\n            DoesNotExist(),\n            reshape(∂A, size(A))\n        )\n    end\n    return (\n        reinterpret(reshape, R, A),\n        pullback\n    )\nend```","user":"U66SR8JHX","ts":"1612316727.134500","team":"T68168MUP","edited":{"user":"U66SR8JHX","ts":"1612317699.000000"},"blocks":[{"type":"rich_text","block_id":"ico","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"As a follow up, this works for my use case\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function ChainRulesCore.rrule(\n    ::typeof(reinterpret),\n    ::typeof(reshape),\n    ::Type{R},\n    A::AbstractArray{T}\n) where {N, T, R <: SVector{N, T}}\n    function pullback(Ā)\n        ∂A = mapreduce(\n            v -> (\n                v isa R ? v : zero(R)\n            ),\n            vcat,\n            Ā;\n            init = similar(A, 0)\n        )\n        return (\n            NO_FIELDS,\n            DoesNotExist(),\n            DoesNotExist(),\n            reshape(∂A, size(A))\n        )\n    end\n    return (\n        reinterpret(reshape, R, A),\n        pullback\n    )\nend"}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX","reactions":[{"name":"+1","users":["U6A936746"],"count":1}]},{"client_msg_id":"06dae75d-ea74-494d-82df-c2e06511cab8","type":"message","text":"Now, I have stumbled with <https://github.com/FluxML/Zygote.jl/issues/860>  because the functions to which the wrapped `SVector`s are passed to call `norm` on some of them.","user":"U66SR8JHX","ts":"1612316927.134700","team":"T68168MUP","edited":{"user":"U66SR8JHX","ts":"1612318712.000000"},"blocks":[{"type":"rich_text","block_id":"0Mh0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Now, I have stumbled with "},{"type":"link","url":"https://github.com/FluxML/Zygote.jl/issues/860"},{"type":"text","text":"  because the functions to which the wrapped "},{"type":"text","text":"SVector","style":{"code":true}},{"type":"text","text":"s are passed to call "},{"type":"text","text":"norm","style":{"code":true}},{"type":"text","text":" on some of them."}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX"},{"client_msg_id":"877d6b6f-7ced-466b-87c6-8b72c410c47a","type":"message","text":"Anyway, thanks for the hints and discussion <@U6A936746> and <@UD0NS8PDF>!","user":"U66SR8JHX","ts":"1612317556.135200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8WFBY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Anyway, thanks for the hints and discussion "},{"type":"user","user_id":"U6A936746"},{"type":"text","text":" and "},{"type":"user","user_id":"UD0NS8PDF"},{"type":"text","text":"!"}]}]}],"thread_ts":"1612292937.124000","parent_user_id":"U66SR8JHX"}]