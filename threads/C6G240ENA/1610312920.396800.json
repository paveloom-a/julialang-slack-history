[{"client_msg_id":"e2e52d45-4f94-4a73-8be7-6ca6353b0d88","type":"message","text":"So, I think I nearly have a rule sett of `rrules` that works for `Ax = DerivativeOperator(...)` used in the form `u_dot = Ax*(Q*u)` . `Ax` is an struct dependent on coefficient parameters and u is the state vector. When I compare my Zygote gradients and gradients obtained with `FiniteDifferences` I get agreeing values for the gradient with respect to `u`, but not the correct gradient with respect to `coeff_func`, which is the coefficient array of the `DerivativeOperator`, given on initialization. I have scratched my head quite some time to find the cause of the dissagreeing result, so would be super grateful if someone here would take a quick look at my adjoints :blush: This is my repo: <https://github.com/simenhu/wave_inversion/blob/dev/src/simutils/adjoints.jl>.","user":"U016VPPCQA1","ts":"1610312920.396800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PKK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So, I think I nearly have a rule sett of "},{"type":"text","text":"rrules","style":{"code":true}},{"type":"text","text":" that works for "},{"type":"text","text":"Ax = DerivativeOperator(...)","style":{"code":true}},{"type":"text","text":" used in the form "},{"type":"text","text":"u_dot = Ax*(Q*u)","style":{"code":true}},{"type":"text","text":" . "},{"type":"text","text":"Ax","style":{"code":true}},{"type":"text","text":" is an struct dependent on coefficient parameters and u is the state vector. When I compare my Zygote gradients and gradients obtained with "},{"type":"text","text":"FiniteDifferences","style":{"code":true}},{"type":"text","text":" I get agreeing values for the gradient with respect to "},{"type":"text","text":"u","style":{"code":true}},{"type":"text","text":", but not the correct gradient with respect to "},{"type":"text","text":"coeff_func","style":{"code":true}},{"type":"text","text":", which is the coefficient array of the "},{"type":"text","text":"DerivativeOperator","style":{"code":true}},{"type":"text","text":", given on initialization. I have scratched my head quite some time to find the cause of the dissagreeing result, so would be super grateful if someone here would take a quick look at my adjoints "},{"type":"emoji","name":"blush"},{"type":"text","text":" This is my repo: "},{"type":"link","url":"https://github.com/simenhu/wave_inversion/blob/dev/src/simutils/adjoints.jl"},{"type":"text","text":"."}]}]}],"thread_ts":"1610312920.396800","reply_count":21,"reply_users_count":3,"latest_reply":"1610398042.415000","reply_users":["UHDQQ4GN6","U6A936746","U016VPPCQA1"],"subscribed":false},{"client_msg_id":"2dec7229-c870-4d8a-a326-3956079309c6","type":"message","text":"You're representing the cotangent of `Ax` with an array, right? But `Ax` is not an array? I'm actually surprised that doesn't raise an error. Is there a rule for the constructor of `DerivativeOperator` that will pull that cotangent to `coeff_func`? Usually with ChainRules, except sometimes for `AbstractArray`s, differentials of some variable `obj::F` are represented as `Composite{F}`, with the differentials for the fields being specified. So in this rrule you would explicitly compute `∂coeff_func` and return `∂Ax = Composite{DerivativeOperator}(coeff_func = ∂coeff_func)`","user":"UHDQQ4GN6","ts":"1610313794.397000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8zV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You're representing the cotangent of "},{"type":"text","text":"Ax","style":{"code":true}},{"type":"text","text":" with an array, right? But "},{"type":"text","text":"Ax","style":{"code":true}},{"type":"text","text":" is not an array? I'm actually surprised that doesn't raise an error. Is there a rule for the constructor of "},{"type":"text","text":"DerivativeOperator","style":{"code":true}},{"type":"text","text":" that will pull that cotangent to "},{"type":"text","text":"coeff_func","style":{"code":true}},{"type":"text","text":"? Usually with ChainRules, except sometimes for "},{"type":"text","text":"AbstractArray","style":{"code":true}},{"type":"text","text":"s, differentials of some variable "},{"type":"text","text":"obj::F","style":{"code":true}},{"type":"text","text":" are represented as "},{"type":"text","text":"Composite{F}","style":{"code":true}},{"type":"text","text":", with the differentials for the fields being specified. So in this rrule you would explicitly compute "},{"type":"text","text":"∂coeff_func","style":{"code":true}},{"type":"text","text":" and return "},{"type":"text","text":"∂Ax = Composite{DerivativeOperator}(coeff_func = ∂coeff_func)","style":{"code":true}}]}]}],"thread_ts":"1610312920.396800","parent_user_id":"U016VPPCQA1"},{"client_msg_id":"0de7c97d-48a9-4339-8dcc-f7af3664072c","type":"message","text":"To be precise.\nFor any type `P` , its differential must be a type `D` that follows: `+(::S, ::D)::S`\n(Which `Composite` is for basically any struct which has a default constructor.)","user":"U6A936746","ts":"1610314490.397300","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1610314508.000000"},"blocks":[{"type":"rich_text","block_id":"0ePEf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"To be precise.\nFor any type "},{"type":"text","text":"P","style":{"code":true}},{"type":"text","text":" , its differential must be a type "},{"type":"text","text":"D","style":{"code":true}},{"type":"text","text":" that follows: "},{"type":"text","text":"+(::S, ::D)::S","style":{"code":true}},{"type":"text","text":"\n(Which "},{"type":"text","text":"Composite","style":{"code":true}},{"type":"text","text":" is for basically any struct which has a default constructor.)"}]}]}],"thread_ts":"1610312920.396800","parent_user_id":"U016VPPCQA1"},{"client_msg_id":"1b87b13e-8e8a-46ec-abe4-0cbf1cb274a1","type":"message","text":"Ax is an lazy DifferentialOperator, so it has fields that represent stencils and operations defined on it to be concerted to Arrays etc. I had implemented a rule for the constructor of `DerivativeOperator`, but Zygote didn't seem to use it when I had a rule for `RightStaggeredDifference` and `LeftStaggeredDifference` at the bottom, so deleted it (still in the git history).  Should be said that the last two rules return a object of type `DerivativeOperator` not Left or Right difference.","user":"U016VPPCQA1","ts":"1610314566.398300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YjRI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ax is an lazy DifferentialOperator, so it has fields that represent stencils and operations defined on it to be concerted to Arrays etc. I had implemented a rule for the constructor of "},{"type":"text","text":"DerivativeOperator","style":{"code":true}},{"type":"text","text":", but Zygote didn't seem to use it when I had a rule for "},{"type":"text","text":"RightStaggeredDifference","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"LeftStaggeredDifference","style":{"code":true}},{"type":"text","text":" at the bottom, so deleted it (still in the git history).  Should be said that the last two rules return a object of type "},{"type":"text","text":"DerivativeOperator","style":{"code":true}},{"type":"text","text":" not Left or Right difference."}]}]}],"thread_ts":"1610312920.396800","parent_user_id":"U016VPPCQA1"},{"client_msg_id":"dc11936a-90a6-48b5-bbde-5101a89908cc","type":"message","text":"Is the cotangent the pull back value leaving from Ax? (a bit new to the jargon of AD)","user":"U016VPPCQA1","ts":"1610314660.399800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5xogK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is the cotangent the pull back value leaving from Ax? (a bit new to the jargon of AD)"}]}]}],"thread_ts":"1610312920.396800","parent_user_id":"U016VPPCQA1"},{"client_msg_id":"c6d08afd-7ee9-4731-a283-8fbe11eb086c","type":"message","text":"The cotangent of Ax is the matching value that is the sensitivity of Ax.\nSo the output of the pullback of the function that takes `Ax` as an input.","user":"U6A936746","ts":"1610314817.400100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nvl5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The cotangent of Ax is the matching value that is the sensitivity of Ax.\nSo the output of the pullback of the function that takes "},{"type":"text","text":"Ax","style":{"code":true}},{"type":"text","text":" as an input."}]}]}],"thread_ts":"1610312920.396800","parent_user_id":"U016VPPCQA1"},{"client_msg_id":"14f1607c-f029-4223-a5d5-2c99f2544fed","type":"message","text":"Then yes, I represent the cotangent of the construction of `Ax` as an array, since that is the type passed as an array when constructing `Ax`.","user":"U016VPPCQA1","ts":"1610315083.402700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"khL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Then yes, I represent the cotangent of the construction of "},{"type":"text","text":"Ax","style":{"code":true}},{"type":"text","text":" as an array, since that is the type passed as an array when constructing "},{"type":"text","text":"Ax","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1610312920.396800","parent_user_id":"U016VPPCQA1"},{"client_msg_id":"c77a0d98-7ff2-4ce5-bd67-990356a8c62a","type":"message","text":"Does the type T of  `Composite{T}`  have to be the same type as the `rrule` constructor type?","user":"U016VPPCQA1","ts":"1610316552.402900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ao3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does the type T of  "},{"type":"text","text":"Composite{T}","style":{"code":true}},{"type":"text","text":"  have to be the same type as the "},{"type":"text","text":"rrule","style":{"code":true}},{"type":"text","text":" constructor type?"}]}]}],"thread_ts":"1610312920.396800","parent_user_id":"U016VPPCQA1"},{"client_msg_id":"626ae588-21b3-401b-ab8d-5bdcc8550be1","type":"message","text":"If `x` is the argument to the original function, then its corresponding cotangent should be `∂x::Composite{typeof(x)}`","user":"UHDQQ4GN6","ts":"1610316674.403100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6ydI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" is the argument to the original function, then its corresponding cotangent should be "},{"type":"text","text":"∂x::Composite{typeof(x)}","style":{"code":true}}]}]}],"thread_ts":"1610312920.396800","parent_user_id":"U016VPPCQA1"},{"client_msg_id":"5e961e3b-fa58-4afc-866c-b7ac61963a96","type":"message","text":"If the original function is a constructor, then `T` will not be the same type as the constructor, rather the same type as the corresponding input argument.","user":"UHDQQ4GN6","ts":"1610316723.403300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"thPh0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If the original function is a constructor, then "},{"type":"text","text":"T","style":{"code":true}},{"type":"text","text":" will not be the same type as the constructor, rather the same type as the corresponding input argument."}]}]}],"thread_ts":"1610312920.396800","parent_user_id":"U016VPPCQA1","reactions":[{"name":"+1","users":["U6A936746"],"count":1}]},{"client_msg_id":"6a1d4824-5130-4294-b161-7ac781a0f8d2","type":"message","text":"But what if the constructor is a different type than the object it return? <https://github.com/SciML/DiffEqOperators.jl/blob/master/src/derivative_operators/derivative_operator.jl#L31-L68>","user":"U016VPPCQA1","ts":"1610316811.403600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CPuJg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But what if the constructor is a different type than the object it return? "},{"type":"link","url":"https://github.com/SciML/DiffEqOperators.jl/blob/master/src/derivative_operators/derivative_operator.jl#L31-L68"}]}]}],"thread_ts":"1610312920.396800","parent_user_id":"U016VPPCQA1"},{"client_msg_id":"9e138409-be2c-49c4-9e94-21c58344d9a4","type":"message","text":"My constructor is basically just a modified version of the one above","user":"U016VPPCQA1","ts":"1610316858.403800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uR0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My constructor is basically just a modified version of the one above"}]}]}],"thread_ts":"1610312920.396800","parent_user_id":"U016VPPCQA1"},{"client_msg_id":"7932d153-c0ae-47a7-add4-f259e2fc9abb","type":"message","text":"Then `T` should be the type of the object it returns.\n\nAnd the person who wrote that so called constructor should feel bad. (only half joking)","user":"U6A936746","ts":"1610316995.404000","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1610317005.000000"},"blocks":[{"type":"rich_text","block_id":"FBmt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Then "},{"type":"text","text":"T","style":{"code":true}},{"type":"text","text":" should be the type of the object it returns.\n\nAnd the person who wrote that so called constructor should feel bad. (only half joking)"}]}]}],"thread_ts":"1610312920.396800","parent_user_id":"U016VPPCQA1","reactions":[{"name":"rackauckas","users":["U6A936746"],"count":1}]},{"client_msg_id":"6fc86650-a275-4007-8e4b-b9554352386b","type":"message","text":"Do you have an example git repository where this `Composite{T}` is used. Tried to change the return tuple of the pull back function to  `return Composite{typeof(A)}(coeff_func = ∂c)` instead of `(NO_FIELDS, DoesNotExist(), DoesNotExist(), DoesNotExist(), DoesNotExist(), ∂c)`. But got an `BoundsError: attempt to access NamedTuple{(:coeff_func,),Tuple{SparseArrays.SparseVector{Float64,Int64}}}`\n  `at index [4]` error.","user":"U016VPPCQA1","ts":"1610317604.404400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CgF=+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Do you have an example git repository where this "},{"type":"text","text":"Composite{T}","style":{"code":true}},{"type":"text","text":" is used. Tried to change the return tuple of the pull back function to  "},{"type":"text","text":"return Composite{typeof(A)}(coeff_func = ∂c)","style":{"code":true}},{"type":"text","text":" instead of "},{"type":"text","text":"(NO_FIELDS, DoesNotExist(), DoesNotExist(), DoesNotExist(), DoesNotExist(), ∂c)","style":{"code":true}},{"type":"text","text":". But got an "},{"type":"text","text":"BoundsError: attempt to access NamedTuple{(:coeff_func,),Tuple{SparseArrays.SparseVector{Float64,Int64}}}","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"  at index [4]","style":{"code":true}},{"type":"text","text":" error."}]}]}],"thread_ts":"1610312920.396800","parent_user_id":"U016VPPCQA1"},{"client_msg_id":"8435eaea-c1be-4903-a5ac-1e9515100086","type":"message","text":"<https://github.com/JuliaDiff/ChainRules.jl/search?q=Composite>","user":"U6A936746","ts":"1610317975.404800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FdNTX","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaDiff/ChainRules.jl/search?q=Composite"}]}]}],"thread_ts":"1610312920.396800","parent_user_id":"U016VPPCQA1","reactions":[{"name":"+1","users":["U016VPPCQA1"],"count":1}]},{"client_msg_id":"10506dfb-8653-44ce-ae8f-77142c1aa1d9","type":"message","text":"Just to be clear, it was like this you meant right? <https://gist.github.com/simenhu/3d2d83d8ec8d5792714c8c45d1f57808>","user":"U016VPPCQA1","ts":"1610361235.407400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WTpx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Just to be clear, it was like this you meant right? "},{"type":"link","url":"https://gist.github.com/simenhu/3d2d83d8ec8d5792714c8c45d1f57808"}]}]}],"thread_ts":"1610312920.396800","parent_user_id":"U016VPPCQA1"},{"client_msg_id":"0f1dbd30-b006-4ceb-b5c1-78c685a71516","type":"message","text":"I'm getting `BoundsError: attempt to access NamedTuple{(:coeff_func,),Tuple{SparseArrays.SparseVector{Float64,Int64}}}`\n  `at index [4]` when I do this","user":"U016VPPCQA1","ts":"1610361276.407600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"n9jtT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm getting "},{"type":"text","text":"BoundsError: attempt to access NamedTuple{(:coeff_func,),Tuple{SparseArrays.SparseVector{Float64,Int64}}}","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"  at index [4]","style":{"code":true}},{"type":"text","text":" when I do this"}]}]}],"thread_ts":"1610312920.396800","parent_user_id":"U016VPPCQA1"},{"client_msg_id":"2b982803-5c92-48e4-8639-c2b659dd1e58","type":"message","text":"No, the return values of the pullback have a 1-to-1 relationship with input arguments to the `rrule`. So in this case the pullback must return `(NO_FIELDS, ∂derivative_order, ∂approximation_order, ∂dx, ∂len, ∂coeff_func)`, where `NO_FIELDS` is the differential of `::Type{&lt;:RightStaggeredDifference}`.","user":"UHDQQ4GN6","ts":"1610368282.408200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mYJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No, the return values of the pullback have a 1-to-1 relationship with input arguments to the "},{"type":"text","text":"rrule","style":{"code":true}},{"type":"text","text":". So in this case the pullback must return "},{"type":"text","text":"(NO_FIELDS, ∂derivative_order, ∂approximation_order, ∂dx, ∂len, ∂coeff_func)","style":{"code":true}},{"type":"text","text":", where "},{"type":"text","text":"NO_FIELDS","style":{"code":true}},{"type":"text","text":" is the differential of "},{"type":"text","text":"::Type{<:RightStaggeredDifference}","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1610312920.396800","parent_user_id":"U016VPPCQA1"},{"client_msg_id":"c0dd592c-0281-4711-a867-2840b4f937d9","type":"message","text":"So if all other inputs have derivatives that \"do not exist\", then you might return `(NO_FIELDS, DoesNotExist(), DoesNotExist(), DoesNotExist(), DoesNotExist(), ∂c)` .","user":"UHDQQ4GN6","ts":"1610368382.408400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"y4=C","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So if all other inputs have derivatives that \"do not exist\", then you might return "},{"type":"text","text":"(NO_FIELDS, DoesNotExist(), DoesNotExist(), DoesNotExist(), DoesNotExist(), ∂c)","style":{"code":true}},{"type":"text","text":" ."}]}]}],"thread_ts":"1610312920.396800","parent_user_id":"U016VPPCQA1"},{"client_msg_id":"cb2c1776-30c7-4cf7-bd2c-dc448383c391","type":"message","text":"Ok, right. So then the way it was implemented from the start was actually correct, only that you expected a `Composite{DerivativeOperator}(coeff_func = ∂coeff_func)` instead of `NO_FIELDS` as the first element in the return tuple of the pullback function?","user":"U016VPPCQA1","ts":"1610373544.408800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jgE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok, right. So then the way it was implemented from the start was actually correct, only that you expected a "},{"type":"text","text":"Composite{DerivativeOperator}(coeff_func = ∂coeff_func)","style":{"code":true}},{"type":"text","text":" instead of "},{"type":"text","text":"NO_FIELDS","style":{"code":true}},{"type":"text","text":" as the first element in the return tuple of the pullback function?"}]}]}],"thread_ts":"1610312920.396800","parent_user_id":"U016VPPCQA1"},{"client_msg_id":"9339aa3f-15a7-4218-a218-810ebd92898d","type":"message","text":"My earlier comments were about the rrule for `*` because this had a `DerivativeOperator` input, and I was concerned about the representation of that cotangent. Looking at <https://github.com/simenhu/wave_inversion/blob/dev/src/simutils/adjoints.jl#L56-L71>, nothing jumps out to me as problematic.\n\nThe first return value of a pullback will only not be `NO_FIELDS` when the first argument is a callable with stored parameters, e.g.\n```struct MyObject\n    A\nend\n(obj::MyObject)(x) = obj.A * x```\nIn this case, the pullback for this function would be something like `Δy -&gt; (Composite{MyObject}(A = Δy * x'), obj.A' * Δy)`. I don't think this applies to your case.","user":"UHDQQ4GN6","ts":"1610397488.414500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NZ2u","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My earlier comments were about the rrule for "},{"type":"text","text":"*","style":{"code":true}},{"type":"text","text":" because this had a "},{"type":"text","text":"DerivativeOperator","style":{"code":true}},{"type":"text","text":" input, and I was concerned about the representation of that cotangent. Looking at "},{"type":"link","url":"https://github.com/simenhu/wave_inversion/blob/dev/src/simutils/adjoints.jl#L56-L71"},{"type":"text","text":", nothing jumps out to me as problematic.\n\nThe first return value of a pullback will only not be "},{"type":"text","text":"NO_FIELDS","style":{"code":true}},{"type":"text","text":" when the first argument is a callable with stored parameters, e.g.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct MyObject\n    A\nend\n(obj::MyObject)(x) = obj.A * x"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"In this case, the pullback for this function would be something like "},{"type":"text","text":"Δy -> (Composite{MyObject}(A = Δy * x'), obj.A' * Δy)","style":{"code":true}},{"type":"text","text":". I don't think this applies to your case."}]}]}],"thread_ts":"1610312920.396800","parent_user_id":"U016VPPCQA1","reactions":[{"name":"raised_hands","users":["U016VPPCQA1"],"count":1}]},{"client_msg_id":"f44d8be0-4e28-41d9-b133-338d7d84d5d5","type":"message","text":"That make sense! Thanks for the patience :blush: I will look other places for the source of the wrong results then","user":"U016VPPCQA1","ts":"1610398042.415000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4ZuF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That make sense! Thanks for the patience "},{"type":"emoji","name":"blush"},{"type":"text","text":" I will look other places for the source of the wrong results then"}]}]}],"thread_ts":"1610312920.396800","parent_user_id":"U016VPPCQA1"}]