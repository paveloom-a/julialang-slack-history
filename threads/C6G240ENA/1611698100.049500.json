[{"client_msg_id":"c9b9930b-94a2-4bde-bfe1-b56579916872","type":"message","text":"How would I debug what’s going on here?","user":"U67G3QRJM","ts":"1611698100.049500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZbkYs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How would I debug what’s going on here?"}]}]}],"thread_ts":"1611698100.049500","reply_count":3,"reply_users_count":2,"latest_reply":"1611726657.051400","reply_users":["UJ7DVTVQ8","U67G3QRJM"],"subscribed":false},{"client_msg_id":"bfab4fb5-3a8a-4f12-bfc9-23106c730343","type":"message","text":"<@U9MU673LL> recently saw a similar problem with ForwardDiff.jl and StaticArrays.jl and managed to reduce the compile time dramatically by using snoopcompile. I believe it was discussed on discourse.","user":"UJ7DVTVQ8","ts":"1611721910.050900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2XCR","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U9MU673LL"},{"type":"text","text":" recently saw a similar problem with ForwardDiff.jl and StaticArrays.jl and managed to reduce the compile time dramatically by using snoopcompile. I believe it was discussed on discourse."}]}]}],"thread_ts":"1611698100.049500","parent_user_id":"U67G3QRJM"},{"client_msg_id":"d3bf5038-71a9-46c4-8620-16dafcf3634c","type":"message","text":"<https://discourse.julialang.org/t/understanding-and-optimizing-compiler-time-just-a-bit/51759/12?u=baggepinnen|https://discourse.julialang.org/t/understanding-and-optimizing-compiler-time-just-a-bit/51759/12?u=baggepinnen>","user":"UJ7DVTVQ8","ts":"1611722044.051100","team":"T68168MUP","attachments":[{"service_name":"JuliaLang","title":"Understanding and optimizing compiler time (just a bit)","title_link":"https://discourse.julialang.org/t/understanding-and-optimizing-compiler-time-just-a-bit/51759/12?u=baggepinnen","text":"For the curious: 90% of excess inference time in my code can be reduced to an (over|ab)use of SArrays. Here is an MWE (all latest package versions, Julia 1.6) using StaticArrays, ForwardDiff, LinearAlgebra, BenchmarkTools # SETUP _dual(x, ::Val{N}) where N = ForwardDiff.Dual(x, ntuple(_ -&gt; x, Val(N))) K = 30 # too large N = 6 T = Float64 s = _dual.(rand(SVector{K,T}), Val(6)); v = Vector(s); V = rand(T, K); # time in a fresh session --- it is mostly compilation time @time dot(V, s) # mixed c...","fallback":"JuliaLang: Understanding and optimizing compiler time (just a bit)","thumb_url":"https://aws1.discourse-cdn.com/business5/uploads/julialang/original/2X/1/12829a7ba92b924d4ce81099cbf99785bee9b405.png","ts":1609763309,"from_url":"https://discourse.julialang.org/t/understanding-and-optimizing-compiler-time-just-a-bit/51759/12?u=baggepinnen","thumb_width":408,"thumb_height":263,"service_icon":"https://aws1.discourse-cdn.com/business5/uploads/julialang/optimized/2X/6/6ca888e296f59ca2a599807f7d5edd489e3d1829_2_180x180.png","id":1,"original_url":"https://discourse.julialang.org/t/understanding-and-optimizing-compiler-time-just-a-bit/51759/12?u=baggepinnen"}],"blocks":[{"type":"rich_text","block_id":"PNG2","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://discourse.julialang.org/t/understanding-and-optimizing-compiler-time-just-a-bit/51759/12?u=baggepinnen","text":"https://discourse.julialang.org/t/understanding-and-optimizing-compiler-time-just-a-bit/51759/12?u=baggepinnen"}]}]}],"thread_ts":"1611698100.049500","parent_user_id":"U67G3QRJM"},{"client_msg_id":"c5f1ca72-cc2d-4af2-b118-712a8f387417","type":"message","text":"That indeed looks very relevant, thanks!","user":"U67G3QRJM","ts":"1611726657.051400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ykT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That indeed looks very relevant, thanks!"}]}]}],"thread_ts":"1611698100.049500","parent_user_id":"U67G3QRJM"}]