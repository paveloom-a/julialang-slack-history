[{"client_msg_id":"55c19b20-0e0d-4e1c-ba53-911ae31877ff","type":"message","text":"Interesting that `jacobian` as a concept kind of sums up the essence of all of differentiation. It basically differentiates many things wrt many other things. I don’t think it gets more generic than this!","user":"U85JBUGGP","ts":"1612613738.266000","team":"T68168MUP","edited":{"user":"U85JBUGGP","ts":"1612613772.000000"},"blocks":[{"type":"rich_text","block_id":"GH5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Interesting that "},{"type":"text","text":"jacobian","style":{"code":true}},{"type":"text","text":" as a concept kind of sums up the essence of all of differentiation. It basically differentiates many things wrt many other things. I don’t think it gets more generic than this!"}]}]}],"thread_ts":"1612613738.266000","reply_count":24,"reply_users_count":5,"latest_reply":"1612695659.273300","reply_users":["U6A936746","U85JBUGGP","UM6JW2SF9","UHDQQ4GN6","UMDEUKM29"],"subscribed":false,"reactions":[{"name":"+1","users":["U6A936746","UKG4WF8PJ","UAUPJLBQX"],"count":3}]},{"client_msg_id":"921ee16a-a031-4544-9899-be0044e9fbdb","type":"message","text":"See i think my mind must be twisted. For me it doesn’t get any more generic than pushforward","user":"U6A936746","ts":"1612613879.266200","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1612613926.000000"},"blocks":[{"type":"rich_text","block_id":"LXC8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"See i think my mind must be twisted. For me it doesn’t get any more generic than pushforward"}]}]}],"thread_ts":"1612613738.266000","parent_user_id":"U85JBUGGP"},{"client_msg_id":"2080c459-d087-45c8-9737-616518336cbe","type":"message","text":"jacobian is merely the result of pushing forward a whole basis.","user":"U6A936746","ts":"1612613911.266400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=ZZ9P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"jacobian is merely the result of pushing forward a whole basis."}]}]}],"thread_ts":"1612613738.266000","parent_user_id":"U85JBUGGP"},{"client_msg_id":"a7df2e1e-c938-40a4-8bc2-81237d7f503a","type":"message","text":"true I think I am just taking the simple minded calculus route while you are taking the more differential geometric route","user":"U85JBUGGP","ts":"1612613989.266700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qt1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"true I think I am just taking the simple minded calculus route while you are taking the more differential geometric route"}]}]}],"thread_ts":"1612613738.266000","parent_user_id":"U85JBUGGP"},{"client_msg_id":"fc60f3a9-81d9-4480-a645-0230419e2c4d","type":"message","text":"but they both meet at the end","user":"U85JBUGGP","ts":"1612614007.266900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kKVUa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but they both meet at the end"}]}]}],"thread_ts":"1612613738.266000","parent_user_id":"U85JBUGGP"},{"client_msg_id":"53af7c85-5918-4304-a53e-5edd9deb336f","type":"message","text":"Yeah, they both meet in the end.\n(I never studied differential geometry and it is coming back to bite me)","user":"U6A936746","ts":"1612614089.267100","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1612614108.000000"},"blocks":[{"type":"rich_text","block_id":"Jr+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, they both meet in the end.\n(I never studied differential geometry and it is coming back to bite me)"}]}]}],"thread_ts":"1612613738.266000","parent_user_id":"U85JBUGGP"},{"client_msg_id":"8301a7f9-c840-4f1b-9a28-7d31176cc3ac","type":"message","text":"pushing forward basises is like the coolest thing to me these days.\nIt can answer like a ton of questions\n\nand Jacobian product with the basis as a matrix is a way to express that if you  want think in term of matrixes instead of linear operator functions.\n\nI guess the reason i always want to think interms of linear operator functions is that it is readily apparent to me how they generalizes in code to things that are not vectors.","user":"U6A936746","ts":"1612614299.267500","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1612614316.000000"},"blocks":[{"type":"rich_text","block_id":"4KTg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"pushing forward basises is like the coolest thing to me these days.\nIt can answer like a ton of questions\n\nand Jacobian product with the basis as a matrix is a way to express that if you  want think in term of matrixes instead of linear operator functions.\n\nI guess the reason i always want to think interms of linear operator functions is that it is readily apparent to me how they generalizes in code to things that are not vectors."}]}]}],"thread_ts":"1612613738.266000","parent_user_id":"U85JBUGGP"},{"client_msg_id":"325e0ed2-3050-4de5-a20d-751b07d8040b","type":"message","text":"So the way I think of pushing forward is basically as a directional derivative so instead of differentiating `f(x)` at `x = x0` you differentiate `xd -&gt; f(x0 + d * xd)` at `xd = zeros(size(d,2))` where `d` is the vector/matrix you are pushing forward. It’s less efficient (unnecessary arithmetic unless the compiler optimises it) but it’s a nice fallback if an AD package doesn’t define `pushforward_function`.","user":"U85JBUGGP","ts":"1612614741.267900","team":"T68168MUP","edited":{"user":"U85JBUGGP","ts":"1612614832.000000"},"blocks":[{"type":"rich_text","block_id":"uMH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So the way I think of pushing forward is basically as a directional derivative so instead of differentiating "},{"type":"text","text":"f(x)","style":{"code":true}},{"type":"text","text":" at "},{"type":"text","text":"x = x0","style":{"code":true}},{"type":"text","text":" you differentiate "},{"type":"text","text":"xd -> f(x0 + d * xd)","style":{"code":true}},{"type":"text","text":" at "},{"type":"text","text":"xd = zeros(size(d,2))","style":{"code":true}},{"type":"text","text":" where "},{"type":"text","text":"d","style":{"code":true}},{"type":"text","text":" is the vector/matrix you are pushing forward. It’s less efficient (unnecessary arithmetic unless the compiler optimises it) but it’s a nice fallback if an AD package doesn’t define "},{"type":"text","text":"pushforward_function","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1612613738.266000","parent_user_id":"U85JBUGGP","reactions":[{"name":"+1","users":["U6A936746"],"count":1}]},{"client_msg_id":"222eac12-81c0-4c02-8213-212a0aec72fd","type":"message","text":"so it’s just a different `jacobian`","user":"U85JBUGGP","ts":"1612614856.268300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WXw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so it’s just a different "},{"type":"text","text":"jacobian","style":{"code":true}}]}]}],"thread_ts":"1612613738.266000","parent_user_id":"U85JBUGGP"},{"client_msg_id":"f890b5e5-b951-46ca-ac74-8d9b90ef5bd0","type":"message","text":"similarly `pullback` is the jacobian of a `dot` or inner product.","user":"U85JBUGGP","ts":"1612615099.268500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tGdv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"similarly "},{"type":"text","text":"pullback","style":{"code":true}},{"type":"text","text":" is the jacobian of a "},{"type":"text","text":"dot","style":{"code":true}},{"type":"text","text":" or inner product."}]}]}],"thread_ts":"1612613738.266000","parent_user_id":"U85JBUGGP","reactions":[{"name":"heart_eyes","users":["U6A936746"],"count":1}]},{"client_msg_id":"fd629413-b766-468a-9c0e-c64104eb684d","type":"message","text":"&gt;  similarly `pullback` is the jacobian of a `dot` or inner product.\nI really need to internalise this one.\nI have had things around it pointed out to me before.\nbut it hasn’t quite clicked as a way of thinking.","user":"U6A936746","ts":"1612615235.268900","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1612615242.000000"},"blocks":[{"type":"rich_text","block_id":"ke0P","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":" similarly "},{"type":"text","text":"pullback","style":{"code":true}},{"type":"text","text":" is the jacobian of a "},{"type":"text","text":"dot","style":{"code":true}},{"type":"text","text":" or inner product."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nI really need to internalise this one.\nI have had things around it pointed out to me before.\nbut it hasn’t quite clicked as a way of thinking."}]}]}],"thread_ts":"1612613738.266000","parent_user_id":"U85JBUGGP"},{"client_msg_id":"c0148e81-9691-40e9-86cc-5e48cfd7e629","type":"message","text":"Using the chain rule, the jacobian of `g(x) = dot(w, f(x))` is `J(f)(x)' * w` which is the pullback of `w` through `f` at `x`","user":"U85JBUGGP","ts":"1612615319.269200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"B5uIr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Using the chain rule, the jacobian of "},{"type":"text","text":"g(x) = dot(w, f(x))","style":{"code":true}},{"type":"text","text":" is "},{"type":"text","text":"J(f)(x)' * w","style":{"code":true}},{"type":"text","text":" which is the pullback of "},{"type":"text","text":"w","style":{"code":true}},{"type":"text","text":" through "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" at "},{"type":"text","text":"x","style":{"code":true}}]}]}],"thread_ts":"1612613738.266000","parent_user_id":"U85JBUGGP"},{"client_msg_id":"cf471a49-552a-40ed-80a5-37281e3184b3","type":"message","text":"forgive my simple minded interpretations :laughing:","user":"U85JBUGGP","ts":"1612615533.269400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4AIs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"forgive my simple minded interpretations "},{"type":"emoji","name":"laughing"}]}]}],"thread_ts":"1612613738.266000","parent_user_id":"U85JBUGGP"},{"client_msg_id":"8ba3f004-b94c-43c9-ac38-998369082ddb","type":"message","text":"Do you intend `jacobian` to always return some dense arrays or could backends return lazy operator representations? As e. g. in JacVec in SparseDiffTools.jl","user":"UM6JW2SF9","ts":"1612616928.269900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8b=Lj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Do you intend "},{"type":"text","text":"jacobian","style":{"code":true}},{"type":"text","text":" to always return some dense arrays or could backends return lazy operator representations? As e. g. in JacVec in SparseDiffTools.jl"}]}]}],"thread_ts":"1612613738.266000","parent_user_id":"U85JBUGGP"},{"client_msg_id":"54c37452-3dc5-4ae9-9bf7-93bb4b87359c","type":"message","text":"IMO\n`jacobian`  should be dense/eager, but we should provide another function (I like `J)` that can return a lazy operator.\nAnd we might provide tools to implement such given other parts","user":"U6A936746","ts":"1612617197.270100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dlfJM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"IMO\n"},{"type":"text","text":"jacobian ","style":{"code":true}},{"type":"text","text":" should be dense/eager, but we should provide another function (I like "},{"type":"text","text":"J)","style":{"code":true}},{"type":"text","text":" that can return a lazy operator.\nAnd we might provide tools to implement such given other parts"}]}]}],"thread_ts":"1612613738.266000","parent_user_id":"U85JBUGGP","reactions":[{"name":"+1","users":["UM6JW2SF9"],"count":1}]},{"client_msg_id":"d79e0ba5-32ee-4993-bf7a-ebe62910d799","type":"message","text":"I am kind of liberal here. I think it can return anything that has vector semantics. I am not going to limit it because you know, custom arrays, structs, etc. In practice what that means is if it doesn’t error then it is probably fine. If it errors for a fixable reason, then we can try to fix it. No need to break things that don’t need to break.","user":"U85JBUGGP","ts":"1612617618.270300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Rfz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am kind of liberal here. I think it can return anything that has vector semantics. I am not going to limit it because you know, custom arrays, structs, etc. In practice what that means is if it doesn’t error then it is probably fine. If it errors for a fixable reason, then we can try to fix it. No need to break things that don’t need to break."}]}]}],"thread_ts":"1612613738.266000","parent_user_id":"U85JBUGGP","reactions":[{"name":"+1","users":["UM6JW2SF9"],"count":1}]},{"client_msg_id":"e8024767-b7f8-438f-8204-a1ed512b5c90","type":"message","text":"I will also implement the lazy operator. But if you want to roll your own, be my guest.","user":"U85JBUGGP","ts":"1612617678.270500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gQM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I will also implement the lazy operator. But if you want to roll your own, be my guest."}]}]}],"thread_ts":"1612613738.266000","parent_user_id":"U85JBUGGP"},{"client_msg_id":"e2bfa60c-9909-4946-9431-7775e4ca379e","type":"message","text":"I'm with <@U6A936746> on this one. The pushforward is the more fundamental thing. It's a linear operator. The Jacobian is its matrix representation when a basis is chosen. The pullback is the adjoint operator of the pushforward (strictly, its dual), which is associated with the transpose of the Jacobian upon choice of a basis.","user":"UHDQQ4GN6","ts":"1612638544.271300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"n3y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm with "},{"type":"user","user_id":"U6A936746"},{"type":"text","text":" on this one. The pushforward is the more fundamental thing. It's a linear operator. The Jacobian is its matrix representation when a basis is chosen. The pullback is the adjoint operator of the pushforward (strictly, its dual), which is associated with the transpose of the Jacobian upon choice of a basis."}]}]}],"thread_ts":"1612613738.266000","parent_user_id":"U85JBUGGP"},{"client_msg_id":"3a4c2917-feeb-463f-9004-8b4dfc2348c0","type":"message","text":"&gt; Using the chain rule, the jacobian of `g(x) = dot(w, f(x))` is `J(f)(x)' * w` which is the pullback of `w` through `f` at `x`","user":"UMDEUKM29","ts":"1612639016.271500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vCw","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"Using the chain rule, the jacobian of "},{"type":"text","text":"g(x) = dot(w, f(x))","style":{"code":true}},{"type":"text","text":" is "},{"type":"text","text":"J(f)(x)' * w","style":{"code":true}},{"type":"text","text":" which is the pullback of "},{"type":"text","text":"w","style":{"code":true}},{"type":"text","text":" through "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" at "},{"type":"text","text":"x","style":{"code":true}}]}]}],"thread_ts":"1612613738.266000","parent_user_id":"U85JBUGGP"},{"client_msg_id":"8f070ec2-dfce-4a84-b125-cfdaeffb0d8b","type":"message","text":"this is wrong, the jacobian is a row vector, what you wrote is the transpose","user":"UMDEUKM29","ts":"1612639037.271700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hrG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this is wrong, the jacobian is a row vector, what you wrote is the transpose"}]}]}],"thread_ts":"1612613738.266000","parent_user_id":"U85JBUGGP","reactions":[{"name":"+1","users":["U85JBUGGP"],"count":1}]},{"client_msg_id":"6434af3e-d836-4ad2-91cb-aa6296f5d717","type":"message","text":"but yeah, distinguishing the linear operator from its matrix representation is often useful. In differential geometry (where there's no natural basis) and in functional analysis (where there's no basis at all) the linear operator is the fundamental object","user":"UMDEUKM29","ts":"1612639201.271900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Yt8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but yeah, distinguishing the linear operator from its matrix representation is often useful. In differential geometry (where there's no natural basis) and in functional analysis (where there's no basis at all) the linear operator is the fundamental object"}]}]}],"thread_ts":"1612613738.266000","parent_user_id":"U85JBUGGP","reactions":[{"name":"+1","users":["UM6JW2SF9","U85JBUGGP"],"count":2}]},{"client_msg_id":"f4bdc429-6597-4c93-bc36-2996083c685f","type":"message","text":"&gt;  (I never studied differential geometry and it is coming back to bite me)","user":"UMDEUKM29","ts":"1612639372.272100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Tx/","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":" (I never studied differential geometry and it is coming back to bite me)"}]}]}],"thread_ts":"1612613738.266000","parent_user_id":"U85JBUGGP"},{"client_msg_id":"6237568f-9ebb-4459-96e8-a02099ff51b8","type":"message","text":"FWIW I used to think that and that it was this big complicated thing, but in fact the intersection of differential geometry and things that are useful in practice (unless you do complicated things) is pretty small and simple. the trouble is that a lot of the info on differential geometry is written targetting pure math people","user":"UMDEUKM29","ts":"1612639592.272300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OZSr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"FWIW I used to think that and that it was this big complicated thing, but in fact the intersection of differential geometry and things that are useful in practice (unless you do complicated things) is pretty small and simple. the trouble is that a lot of the info on differential geometry is written targetting pure math people"}]}]}],"thread_ts":"1612613738.266000","parent_user_id":"U85JBUGGP"},{"client_msg_id":"7ecda9a5-0c27-4ca9-9ec2-0b1816f9356b","type":"message","text":"&gt; I’m with <@U6A936746> on this one. The pushforward is the more fundamental thing. It’s a linear operator.\nSo what I am trying to say here is that the application of the linear operator itself can be described as the Jacobian of another function.","user":"U85JBUGGP","ts":"1612695468.273000","team":"T68168MUP","edited":{"user":"U85JBUGGP","ts":"1612695537.000000"},"blocks":[{"type":"rich_text","block_id":"yIA","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"I’m with "},{"type":"user","user_id":"U6A936746"},{"type":"text","text":" on this one. The pushforward is the more fundamental thing. It’s a linear operator."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"So what I am trying to say here is that the application of the linear operator itself can be described as the Jacobian of another function."}]}]}],"thread_ts":"1612613738.266000","parent_user_id":"U85JBUGGP"},{"client_msg_id":"16cae2e4-8067-4878-8194-b110b41a13a0","type":"message","text":"Therefore, one can just use `jacobian` (and `primalvalue`) to define all of the AD “primitives”. Doesn’t mean it’s the most “fundamental” but it is quite minimal so I like it.","user":"U85JBUGGP","ts":"1612695659.273300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HmAuP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Therefore, one can just use "},{"type":"text","text":"jacobian","style":{"code":true}},{"type":"text","text":" (and "},{"type":"text","text":"primalvalue","style":{"code":true}},{"type":"text","text":") to define all of the AD “primitives”. Doesn’t mean it’s the most “fundamental” but it is quite minimal so I like it."}]}]}],"thread_ts":"1612613738.266000","parent_user_id":"U85JBUGGP"}]