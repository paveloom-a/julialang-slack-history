[{"client_msg_id":"45e82003-af32-4d65-9eec-4f212b4113ab","type":"message","text":"So the main reason for wanting a separate package is that `ChainRulesCore` is more ambitious and targets a different layer of abstraction than the one I have in mind. This means that it can develop in ways, albeit great, that are not really necessary for a package like ~`FiniteDifferences`~ `ForwardDiff` to do its job. So I don’t think ~`FiniteDifferences`~ `ForwardDiff` should depend on a moving target like `ChainRulesCore` when the AD API component can be as static as a rock living in its own distant package that no one really needs to touch. Just summarising my thoughts.","user":"U85JBUGGP","ts":"1612550366.227300","team":"T68168MUP","edited":{"user":"U85JBUGGP","ts":"1612550464.000000"},"blocks":[{"type":"rich_text","block_id":"QLGZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So the main reason for wanting a separate package is that "},{"type":"text","text":"ChainRulesCore","style":{"code":true}},{"type":"text","text":" is more ambitious and targets a different layer of abstraction than the one I have in mind. This means that it can develop in ways, albeit great, that are not really necessary for a package like "},{"type":"text","text":"FiniteDifferences","style":{"strike":true,"code":true}},{"type":"text","text":" "},{"type":"text","text":"ForwardDiff","style":{"code":true}},{"type":"text","text":" to do its job. So I don’t think "},{"type":"text","text":"FiniteDifferences","style":{"strike":true,"code":true}},{"type":"text","text":" "},{"type":"text","text":"ForwardDiff","style":{"code":true}},{"type":"text","text":" should depend on a moving target like "},{"type":"text","text":"ChainRulesCore","style":{"code":true}},{"type":"text","text":" when the AD API component can be as static as a rock living in its own distant package that no one really needs to touch. Just summarising my thoughts."}]}]}],"thread_ts":"1612550366.227300","reply_count":18,"reply_users_count":2,"latest_reply":"1612551173.234700","reply_users":["U6A936746","U85JBUGGP"],"subscribed":false},{"client_msg_id":"f09bf3a6-83b0-4566-9d91-a631ea83ecfa","type":"message","text":"Aside: FiniteDIfferences already depends on ChainRulesCore","user":"U6A936746","ts":"1612550390.227500","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1612550411.000000"},"blocks":[{"type":"rich_text","block_id":"7lb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Aside: FiniteDIfferences already depends on ChainRulesCore"}]}]}],"thread_ts":"1612550366.227300","parent_user_id":"U85JBUGGP"},{"client_msg_id":"486f1d53-a342-41d7-8a69-fb0ae2a7049b","type":"message","text":"Haha great! Swap it with ForwardDiff then.","user":"U85JBUGGP","ts":"1612550410.227700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xZLsK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Haha great! Swap it with ForwardDiff then."}]}]}],"thread_ts":"1612550366.227300","parent_user_id":"U85JBUGGP"},{"client_msg_id":"f943cead-3371-4cd2-95b3-84461b172851","type":"message","text":"perhaps it shouldn’t though?","user":"U85JBUGGP","ts":"1612550474.228900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JeSVX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"perhaps it shouldn’t though?"}]}]}],"thread_ts":"1612550366.227300","parent_user_id":"U85JBUGGP"},{"client_msg_id":"55a5c1d6-ea98-48c7-a586-44aff000d38c","type":"message","text":"no, it should","user":"U6A936746","ts":"1612550483.229200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Wh2TW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no, it should"}]}]}],"thread_ts":"1612550366.227300","parent_user_id":"U85JBUGGP"},{"client_msg_id":"d652c936-57f6-4906-a36d-7e8ba97513c5","type":"message","text":"It gives us the abstractions needed to work with stucts.","user":"U6A936746","ts":"1612550498.229400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uhGs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It gives us the abstractions needed to work with stucts."}]}]}],"thread_ts":"1612550366.227300","parent_user_id":"U85JBUGGP"},{"client_msg_id":"e9ec9a53-525c-4910-8240-d864e47bd78e","type":"message","text":"ha I see :lightbulb:","user":"U85JBUGGP","ts":"1612550516.229600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zey","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ha I see "},{"type":"emoji","name":"lightbulb"}]}]}],"thread_ts":"1612550366.227300","parent_user_id":"U85JBUGGP"},{"client_msg_id":"49de7896-8b71-4f01-8ad1-14c848db1031","type":"message","text":"Right now we only use `Composite` in a little way,\nbut plan is to fully replace `to_vec` with it.\n\nIt won’t be visable from the outside though.\nAll that will be visible from the outside is that that now don’t need to define `to_vec` anymore","user":"U6A936746","ts":"1612550567.229800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bLZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Right now we only use "},{"type":"text","text":"Composite","style":{"code":true}},{"type":"text","text":" in a little way,\nbut plan is to fully replace "},{"type":"text","text":"to_vec","style":{"code":true}},{"type":"text","text":" with it.\n\nIt won’t be visable from the outside though.\nAll that will be visible from the outside is that that now don’t need to define "},{"type":"text","text":"to_vec","style":{"code":true}},{"type":"text","text":" anymore"}]}]}],"thread_ts":"1612550366.227300","parent_user_id":"U85JBUGGP"},{"client_msg_id":"e98419ba-8558-44d5-846b-292a7a695ff3","type":"message","text":"I see. Cool! Perhaps `ForwardDiff` will eventually get the same treatment?","user":"U85JBUGGP","ts":"1612550606.230500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/cMY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see. Cool! Perhaps "},{"type":"text","text":"ForwardDiff","style":{"code":true}},{"type":"text","text":" will eventually get the same treatment?"}]}]}],"thread_ts":"1612550366.227300","parent_user_id":"U85JBUGGP"},{"client_msg_id":"dca02dec-b0cf-47f3-9b15-9cc460021f10","type":"message","text":"Not touching `ForwardDiff`  it’s too stable to mess with.\nBut a forward-mode AD should use `Composite`\nForwardDiff2 really should, but it doesn’t care about structs.\nShould be a `Duel` that pairs a struct with a `Compostite`","user":"U6A936746","ts":"1612550696.230700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pS5vY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not touching "},{"type":"text","text":"ForwardDiff","style":{"code":true}},{"type":"text","text":"  it’s too stable to mess with.\nBut a forward-mode AD should use "},{"type":"text","text":"Composite","style":{"code":true}},{"type":"text","text":"\nForwardDiff2 really should, but it doesn’t care about structs.\nShould be a "},{"type":"text","text":"Duel","style":{"code":true}},{"type":"text","text":" that pairs a struct with a "},{"type":"text","text":"Compostite","style":{"code":true}}]}]}],"thread_ts":"1612550366.227300","parent_user_id":"U85JBUGGP"},{"client_msg_id":"9adf7e01-a6e2-4344-bf5e-df8f1f9dffac","type":"message","text":"I see but adding struct support doesn’t really mess with the existing ForwardDiff API at all so it would be a new feature.","user":"U85JBUGGP","ts":"1612550743.231700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x5fX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see but adding struct support doesn’t really mess with the existing ForwardDiff API at all so it would be a new feature."}]}]}],"thread_ts":"1612550366.227300","parent_user_id":"U85JBUGGP"},{"client_msg_id":"04db4239-671f-4a98-a370-71fd3cbe4781","type":"message","text":"Problem is ForwardDiff is purely scalar.\nWich means it likes Structs of Duals.\n\nWhere as Composites go with Duals of Structs\n(it is the partial side of that dual)","user":"U6A936746","ts":"1612550792.232000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WrZ=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Problem is ForwardDiff is purely scalar.\nWich means it likes Structs of Duals.\n\nWhere as Composites go with Duals of Structs\n(it is the partial side of that dual)"}]}]}],"thread_ts":"1612550366.227300","parent_user_id":"U85JBUGGP"},{"client_msg_id":"ebb11596-4881-4ef8-8a5d-c7f5a227b709","type":"message","text":"I see. Can’t `Composite` support the struct of duals view? Re-interpreting it internally perhaps?","user":"U85JBUGGP","ts":"1612550842.232700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vPqC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see. Can’t "},{"type":"text","text":"Composite","style":{"code":true}},{"type":"text","text":" support the struct of duals view? Re-interpreting it internally perhaps?"}]}]}],"thread_ts":"1612550366.227300","parent_user_id":"U85JBUGGP"},{"client_msg_id":"6b8626d8-ff79-440e-a08f-8bc211ccd7a3","type":"message","text":"Not really, it an object that is in tangent-space.","user":"U6A936746","ts":"1612550899.232900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NOsl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not really, it an object that is in tangent-space."}]}]}],"thread_ts":"1612550366.227300","parent_user_id":"U85JBUGGP"},{"client_msg_id":"63b989c6-0fa2-4b86-8e06-5ebc83196bfa","type":"message","text":"struct of duals is bad anyway.\nBreaks BLAS.\nBreaks cache locality.","user":"U6A936746","ts":"1612550933.233100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TrY0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"struct of duals is bad anyway.\nBreaks BLAS.\nBreaks cache locality."}]}]}],"thread_ts":"1612550366.227300","parent_user_id":"U85JBUGGP"},{"client_msg_id":"6b2d9958-4be3-44d0-ba98-9c0a05a6483c","type":"message","text":"but it’s lighter on the compiler I guess","user":"U85JBUGGP","ts":"1612550975.233900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TuQUq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but it’s lighter on the compiler I guess"}]}]}],"thread_ts":"1612550366.227300","parent_user_id":"U85JBUGGP"},{"client_msg_id":"f945df32-ed0f-4e11-8857-f862aeebd11d","type":"message","text":"I am not sure.\nEasier to implement for sure, since you just need to implement the Number / Real API.\nand then as long as thigns are relaxed enough to accept `Real` they work withy your `Dual`\n\nWhere as an operator overloading AD that implements dual of structs ends up looking like e.g. Nabla with its `@unionize` to make functions be overloaded to accept its Dual type.","user":"U6A936746","ts":"1612551068.234100","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1612551166.000000"},"blocks":[{"type":"rich_text","block_id":"Di=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am not sure.\nEasier to implement for sure, since you just need to implement the Number / Real API.\nand then as long as thigns are relaxed enough to accept "},{"type":"text","text":"Real","style":{"code":true}},{"type":"text","text":" they work withy your "},{"type":"text","text":"Dual","style":{"code":true}},{"type":"text","text":"\n\nWhere as an operator overloading AD that implements dual of structs ends up looking like e.g. Nabla with its "},{"type":"text","text":"@unionize","style":{"code":true}},{"type":"text","text":" to make functions be overloaded to accept its Dual type."}]}]}],"thread_ts":"1612550366.227300","parent_user_id":"U85JBUGGP"},{"client_msg_id":"09e22e13-9827-46d5-b710-392f895d0662","type":"message","text":"But with source to source it should be fairly clean.\n(and basically what ForwardDiff2 does.)","user":"U6A936746","ts":"1612551105.234400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CAio","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But with source to source it should be fairly clean.\n(and basically what ForwardDiff2 does.)"}]}]}],"thread_ts":"1612550366.227300","parent_user_id":"U85JBUGGP"},{"client_msg_id":"1e0c8d14-ed4f-409f-97c5-a9ff3a1cf171","type":"message","text":":thumbsup:","user":"U85JBUGGP","ts":"1612551173.234700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ubgj","elements":[{"type":"rich_text_section","elements":[{"type":"emoji","name":"thumbsup"}]}]}],"thread_ts":"1612550366.227300","parent_user_id":"U85JBUGGP"}]