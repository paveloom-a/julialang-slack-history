[{"client_msg_id":"7c1f5886-e2a7-4a0e-8f87-29eb05c5e94c","type":"message","text":"I have a custom model which I've defined via `ChainRulesCore` to get, as the gradient, a `ChainRulesCore.Composite` for the differentials (it has some fields, I've written custom `rrule`s for access to the fields following the `Composite` pattern, and my resulting gradient has a nested structure of `Composite` values).\n\nThe tuple which backs the composite looks something like:\n```(array = [Composite(a = 1,), Composite(a = 2,), Zero()], another_value = 2.0)```\nI want to use this for optimization, so ideally I'd take this `Composite` differential and scale it/add it to the primal (I think I can use that word here). Is there any way I can do that? I know that Zygote/Flux uses an `IdSet` to keep track of the parameters but I don't want to use that because I am also tracking scalar field values, and to use the Flux machinery I'd have to wrap in `Ref` . So far I've been able to use `destructure`/ `restructure` to get a flat vector representation, but the problem there is that sometimes my `Composite` has `Zero()` (equivalently, `nothing` in Zygote) values, and then the destructured flat vector of the Composite has a different shape than the primal\n\nAnother strategy I'm considering is writing a custom `Functors.fmap` type function to traverse the fields and accumulate that way.","user":"UETJU4TG8","ts":"1617388108.141700","team":"T68168MUP","edited":{"user":"UETJU4TG8","ts":"1617388366.000000"},"blocks":[{"type":"rich_text","block_id":"5wY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have a custom model which I've defined via "},{"type":"text","text":"ChainRulesCore","style":{"code":true}},{"type":"text","text":" to get, as the gradient, a "},{"type":"text","text":"ChainRulesCore.Composite","style":{"code":true}},{"type":"text","text":" for the differentials (it has some fields, I've written custom "},{"type":"text","text":"rrule","style":{"code":true}},{"type":"text","text":"s for access to the fields following the "},{"type":"text","text":"Composite","style":{"code":true}},{"type":"text","text":" pattern, and my resulting gradient has a nested structure of "},{"type":"text","text":"Composite","style":{"code":true}},{"type":"text","text":" values).\n\nThe tuple which backs the composite looks something like:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"(array = [Composite(a = 1,), Composite(a = 2,), Zero()], another_value = 2.0)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nI want to use this for optimization, so ideally I'd take this "},{"type":"text","text":"Composite","style":{"code":true}},{"type":"text","text":" differential and scale it/add it to the primal (I think I can use that word here). Is there any way I can do that? I know that Zygote/Flux uses an "},{"type":"text","text":"IdSet","style":{"code":true}},{"type":"text","text":" to keep track of the parameters but I don't want to use that because I am also tracking scalar field values, and to use the Flux machinery I'd have to wrap in "},{"type":"text","text":"Ref","style":{"code":true}},{"type":"text","text":" . So far I've been able to use "},{"type":"text","text":"destructure","style":{"code":true}},{"type":"text","text":"/ "},{"type":"text","text":"restructure","style":{"code":true}},{"type":"text","text":" to get a flat vector representation, but the problem there is that sometimes my "},{"type":"text","text":"Composite","style":{"code":true}},{"type":"text","text":" has "},{"type":"text","text":"Zero()","style":{"code":true}},{"type":"text","text":" (equivalently, `nothing` in Zygote) values, and then the destructured flat vector of the Composite has a different shape than the primal\n\nAnother strategy I'm considering is writing a custom "},{"type":"text","text":"Functors.fmap","style":{"code":true}},{"type":"text","text":" type function to traverse the fields and accumulate that way."}]}]}],"thread_ts":"1617388108.141700","reply_count":7,"reply_users_count":2,"latest_reply":"1617394344.143400","reply_users":["UHDQQ4GN6","UETJU4TG8"],"is_locked":false,"subscribed":false},{"client_msg_id":"2a774798-b2fe-4bb6-8dfa-f94403149104","type":"message","text":"I believe addition of a `Composite` with its primal should \"just work\" (<https://github.com/JuliaDiff/ChainRulesCore.jl/blob/v0.9.36/src/differential_arithmetic.jl#L119-L132>). Can you give a minimal failing example?","user":"UHDQQ4GN6","ts":"1617391898.142100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IRVW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I believe addition of a "},{"type":"text","text":"Composite","style":{"code":true}},{"type":"text","text":" with its primal should \"just work\" ("},{"type":"link","url":"https://github.com/JuliaDiff/ChainRulesCore.jl/blob/v0.9.36/src/differential_arithmetic.jl#L119-L132"},{"type":"text","text":"). Can you give a minimal failing example?"}]}]}],"thread_ts":"1617388108.141700","parent_user_id":"UETJU4TG8"},{"client_msg_id":"9257e92e-ad07-4c01-8609-ce99715b9c7e","type":"message","text":"Thanks for the link, I am probably messing something up with a custom rrule then, because I can't succesfully `*` my differential. Give me a moment.","user":"UETJU4TG8","ts":"1617392193.142300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ap+v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks for the link, I am probably messing something up with a custom rrule then, because I can't succesfully "},{"type":"text","text":"*","style":{"code":true}},{"type":"text","text":" my differential. Give me a moment."}]}]}],"thread_ts":"1617388108.141700","parent_user_id":"UETJU4TG8"},{"client_msg_id":"257b9ae6-b524-4294-99f2-d9d6ad31d54c","type":"message","text":"```import ChainRulesCore\nimport Zygote\n\nstruct BPrimal\n  foo::Float64\nend\n\nstruct APrimal\n  a::Vector{BPrimal}\n  b::Float64\n  c::BPrimal\nend\n\nmy_b(a) = a.b\n\nfunction ChainRulesCore.rrule(::typeof(my_b), a)\n    function _my_b_pullback(Δb)\n        ∂b = Composite{typeof(a)}(; b = Δb)\n        return (NO_FIELDS, ∂b)\n     end\n     return my_b(a), _my_b_pullback\nend\n\ngrad = Zygote.gradient(my_b, APrimal(BPrimal[], 1.0, BPrimal(2.0)))[1]\n0.1 * ChainRulesCore.Composite{ABPrimal}(grad...) # This errors```","user":"UETJU4TG8","ts":"1617392704.142500","team":"T68168MUP","edited":{"user":"UETJU4TG8","ts":"1617393072.000000"},"blocks":[{"type":"rich_text","block_id":"xxyF","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"import ChainRulesCore\nimport Zygote\n\nstruct BPrimal\n  foo::Float64\nend\n\nstruct APrimal\n  a::Vector{BPrimal}\n  b::Float64\n  c::BPrimal\nend\n\nmy_b(a) = a.b\n\nfunction ChainRulesCore.rrule(::typeof(my_b), a)\n    function _my_b_pullback(Δb)\n        ∂b = Composite{typeof(a)}(; b = Δb)\n        return (NO_FIELDS, ∂b)\n     end\n     return my_b(a), _my_b_pullback\nend\n\ngrad = Zygote.gradient(my_b, APrimal(BPrimal[], 1.0, BPrimal(2.0)))[1]\n0.1 * ChainRulesCore.Composite{ABPrimal}(grad...) # This errors"}]}]}],"thread_ts":"1617388108.141700","parent_user_id":"UETJU4TG8"},{"client_msg_id":"4f0cb4f7-4108-4663-8540-d0f87a4ef2de","type":"message","text":"And I can confirm that if I just have a simple structure\n```struct ABPrimal\n  b::Float64\nend```\nThen the above differential is ok","user":"UETJU4TG8","ts":"1617393116.142800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Zr2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And I can confirm that if I just have a simple structure\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct ABPrimal\n  b::Float64\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Then the above differential is ok"}]}]}],"thread_ts":"1617388108.141700","parent_user_id":"UETJU4TG8"},{"client_msg_id":"84d0c7a5-1cd3-4f25-8c1b-0dd49fa8efd4","type":"message","text":"The issue is is that non-differentiable fields of `APrimal` are `AbstractZero`s in ChainRules, but Zygote converts it to `nothing`, which it uses for structural zeros. So you'll need to explicitly either replace the `nothing` with `Zero` or (equivalently), just drop the nothing fields. e.g.\n```julia&gt; 0.1 * ChainRulesCore.Composite{APrimal}(; filter(x -&gt; !isnothing(x[2]), pairs(grad))...)\nComposite{APrimal}(b = 0.1,)```","user":"UHDQQ4GN6","ts":"1617393892.143000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oPE3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The issue is is that non-differentiable fields of "},{"type":"text","text":"APrimal","style":{"code":true}},{"type":"text","text":" are "},{"type":"text","text":"AbstractZero","style":{"code":true}},{"type":"text","text":"s in ChainRules, but Zygote converts it to "},{"type":"text","text":"nothing","style":{"code":true}},{"type":"text","text":", which it uses for structural zeros. So you'll need to explicitly either replace the "},{"type":"text","text":"nothing","style":{"code":true}},{"type":"text","text":" with "},{"type":"text","text":"Zero","style":{"code":true}},{"type":"text","text":" or (equivalently), just drop the nothing fields. e.g.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> 0.1 * ChainRulesCore.Composite{APrimal}(; filter(x -> !isnothing(x[2]), pairs(grad))...)\nComposite{APrimal}(b = 0.1,)"}]}]}],"thread_ts":"1617388108.141700","parent_user_id":"UETJU4TG8"},{"client_msg_id":"cbadbed0-dd0e-4edb-b390-43cddebf5dbd","type":"message","text":"Ok, that's putting me on the right path although in my use case I'm still having a problem with the nested structures. I think that taking what you have and recursing through my fields should work though. Thanks again!","user":"UETJU4TG8","ts":"1617394303.143200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/p+rF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok, that's putting me on the right path although in my use case I'm still having a problem with the nested structures. I think that taking what you have and recursing through my fields should work though. Thanks again!"}]}]}],"thread_ts":"1617388108.141700","parent_user_id":"UETJU4TG8"},{"client_msg_id":"87169bf6-72ab-4e5d-88fc-93c7b1d4cc0e","type":"message","text":"Sounds like you've got it! No problem.","user":"UHDQQ4GN6","ts":"1617394344.143400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eth","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sounds like you've got it! No problem."}]}]}],"thread_ts":"1617388108.141700","parent_user_id":"UETJU4TG8"}]