[{"client_msg_id":"dab08fdd-5711-44d6-bb5c-15cfde7a6a27","type":"message","text":"Are there any examples of defining / using structural differentials ie `Composite{P}` from ChainRules.jl? Also, would Diffractor.jl be using ChainRules as well in the future?","user":"U9NH09E58","ts":"1616793562.112000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0nfx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Are there any examples of defining / using structural differentials ie "},{"type":"text","text":"Composite{P}","style":{"code":true}},{"type":"text","text":" from ChainRules.jl? Also, would Diffractor.jl be using ChainRules as well in the future?"}]}]}],"thread_ts":"1616793562.112000","reply_count":3,"reply_users_count":3,"latest_reply":"1616803837.113600","reply_users":["UDXST8ARK","U9NH09E58","U6A936746"],"is_locked":false,"subscribed":false},{"client_msg_id":"6bac6e02-1a80-4ef5-82cd-63b76506a9a9","type":"message","text":"Yes and yes\n\nQuite a few of the LinearAlgebra rules return a Composite e.g. the various Factorization types\n<https://github.com/JuliaDiff/ChainRules.jl/blob/master/src/rulesets/LinearAlgebra/factorization.jl|https://github.com/JuliaDiff/ChainRules.jl/blob/master/src/rulesets/LinearAlgebra/factorization.jl>","user":"UDXST8ARK","ts":"1616793926.112200","team":"T68168MUP","edited":{"user":"UDXST8ARK","ts":"1616793938.000000"},"blocks":[{"type":"rich_text","block_id":"4pFqa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes and yes\n\nQuite a few of the LinearAlgebra rules return a Composite e.g. the various Factorization types\n"},{"type":"link","url":"https://github.com/JuliaDiff/ChainRules.jl/blob/master/src/rulesets/LinearAlgebra/factorization.jl","text":"https://github.com/JuliaDiff/ChainRules.jl/blob/master/src/rulesets/LinearAlgebra/factorization.jl"}]}]}],"thread_ts":"1616793562.112000","parent_user_id":"U9NH09E58"},{"client_msg_id":"87c1f110-a2d0-4846-80ab-7ff38fb13be7","type":"message","text":"Thanks! I think this will help me AD through a C-library that has well defined math but poor (for AD) function arguments. I've wrapped the library with structs so want to define my own composites for said structs that just retain the vital fields.","user":"U9NH09E58","ts":"1616794029.112500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"U5c","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks! I think this will help me AD through a C-library that has well defined math but poor (for AD) function arguments. I've wrapped the library with structs so want to define my own composites for said structs that just retain the vital fields."}]}]}],"thread_ts":"1616793562.112000","parent_user_id":"U9NH09E58","reactions":[{"name":"chainrules","users":["U6PQP41C3"],"count":1}]},{"client_msg_id":"15428a24-0239-4fc5-9594-935ed770e68e","type":"message","text":"Nice thing about Composites is you just define the fields that have nonzero derivatives.\n\nYou also don't have to have composites with same fields as the primal so long as + works.\nBut that's a bit weird and I am not entirely sure we should support it. But we do and we even use it for one of the factorisations.\n\nYou can instead define your own differential type.\nI should rework the docs on this.\nIt need addition defined to other differentials of same type.\nAnd ideally to the primal.\nAlso good if it has scalar multipcation, and `zero` defined (and that result should `iszero`)\nAdding other linear operators to it can be useful also,","user":"U6A936746","ts":"1616803837.113600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wsyYu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Nice thing about Composites is you just define the fields that have nonzero derivatives.\n\nYou also don't have to have composites with same fields as the primal so long as + works.\nBut that's a bit weird and I am not entirely sure we should support it. But we do and we even use it for one of the factorisations.\n\nYou can instead define your own differential type.\nI should rework the docs on this.\nIt need addition defined to other differentials of same type.\nAnd ideally to the primal.\nAlso good if it has scalar multipcation, and "},{"type":"text","text":"zero ","style":{"code":true}},{"type":"text","text":"defined (and that result should `iszero`)\nAdding other linear operators to it can be useful also,"}]}]}],"thread_ts":"1616793562.112000","parent_user_id":"U9NH09E58"}]