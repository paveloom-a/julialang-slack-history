[{"client_msg_id":"c7fd90be-75ef-4e20-92ac-536fd78d7216","type":"message","text":"I was thinking about differential types and the formalism behind. Is the intuition correct that thinking of differential types means giving up on the vector space semantics for the primal type, in the sense that:\n```+(x::P, dx::D) -&gt; P```\naddition does not have to be defined on the primal space, just like scaling does not have to be defined on the primal space, but the differential space has to be a vector space, and we have this `+`  operation taking two elements of different types, P and D and returning a P","user":"U82RE6STE","ts":"1611222848.003200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s7o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I was thinking about differential types and the formalism behind. Is the intuition correct that thinking of differential types means giving up on the vector space semantics for the primal type, in the sense that:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"+(x::P, dx::D) -> P"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"addition does not have to be defined on the primal space, just like scaling does not have to be defined on the primal space, but the differential space has to be a vector space, and we have this "},{"type":"text","text":"+","style":{"code":true}},{"type":"text","text":"  operation taking two elements of different types, P and D and returning a P"}]}]}],"thread_ts":"1611222848.003200","reply_count":32,"reply_users_count":5,"latest_reply":"1611248032.012300","reply_users":["U6A936746","U82RE6STE","U0160CXEY3Z","UD0NS8PDF","U674T3KB3"],"subscribed":false},{"client_msg_id":"c0a7dc4b-5696-4183-a54b-c0487e729964","type":"message","text":"Correct","user":"U6A936746","ts":"1611222922.004400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8jhTB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Correct"}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"ad2482ea-1537-4dd8-b8c7-19dfd04aa3b4","type":"message","text":"ok cool. This is kind of odd to have in the same context an operator defined in two different manners, `+(::D, ::D)`  and `+(::P, ::D)`","user":"U82RE6STE","ts":"1611222973.004800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EZ3H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ok cool. This is kind of odd to have in the same context an operator defined in two different manners, "},{"type":"text","text":"+(::D, ::D)","style":{"code":true}},{"type":"text","text":"  and "},{"type":"text","text":"+(::P, ::D)","style":{"code":true}}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"f9439e29-89a7-458e-bae4-a4ac47c1e376","type":"message","text":"Why does\n```+(x::P, dx::D) -&gt; P```\nimply that primal types do not form a vector space?","user":"U0160CXEY3Z","ts":"1611228933.005000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"v75B","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Why does\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"+(x::P, dx::D) -> P"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"imply that primal types do not form a vector space?"}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"3ecfbf91-e588-43d5-b54b-aeb39e9bcf66","type":"message","text":"It doesn’t it merely doesn’t require them to be a vector space or not.","user":"U6A936746","ts":"1611229731.005400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RZXCI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It doesn’t it merely doesn’t require them to be a vector space or not."}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE","reactions":[{"name":"+1","users":["U0160CXEY3Z","U82RE6STE","UKG4WF8PJ"],"count":3}]},{"client_msg_id":"edeccb29-615a-4aa0-8828-d8f66b005999","type":"message","text":"&gt;  This is kind of odd to have in the same context an operator defined in two different manners\nIt’s multiple-dispatch. Which I guess is atypical in math?\nI guess you could write them with seperate operators, but it seems like it would make expressing associativity hard\n\n`(x + dx1) + dx2 == x + (dx1 + dx2)`\nI guess would write as:\n`(x  ⊕ dx1) ⊕ dx2 == x  ⊕ (dx1 + dx2)`","user":"U6A936746","ts":"1611229936.005700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CDGw","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":" This is kind of odd to have in the same context an operator defined in two different manners"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nIt’s multiple-dispatch. Which I guess is atypical in math?\nI guess you could write them with seperate operators, but it seems like it would make expressing associativity hard\n\n"},{"type":"text","text":"(x + dx1) + dx2 == x + (dx1 + dx2)","style":{"code":true}},{"type":"text","text":"\nI guess would write as:\n"},{"type":"text","text":"(x  ⊕ dx1) ⊕ dx2 == x  ⊕ (dx1 + dx2)","style":{"code":true}}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"1d4dfa1b-abd9-4f09-98e5-2f13583f5db7","type":"message","text":"I’m a little uncertain about `+(x::P, dx::D) -&gt; P`. At a medium level of rigor, I would say that tiny changes `dx` in the (co)tangent space ought to move you to another point  in the base space, but finite ones need not do so.","user":"UD0NS8PDF","ts":"1611231159.005900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Rtn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’m a little uncertain about "},{"type":"text","text":"+(x::P, dx::D) -> P","style":{"code":true}},{"type":"text","text":". At a medium level of rigor, I would say that tiny changes "},{"type":"text","text":"dx","style":{"code":true}},{"type":"text","text":" in the (co)tangent space ought to move you to another point  in the base space, but finite ones need not do so."}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"aee3a3c9-fd04-4800-bddb-d2564ae61e9b","type":"message","text":"For example on a sphere of radius 1, I can walk distance 0.001 in any direction no problem, but the tangent space is flat, and if I have a vector of length 1, then saying what it means to add that to my position isn’t linear anymore --- I would need to speak of a geodesic extending that vector along the manifold, or something.","user":"UD0NS8PDF","ts":"1611231275.006100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xGYs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For example on a sphere of radius 1, I can walk distance 0.001 in any direction no problem, but the tangent space is flat, and if I have a vector of length 1, then saying what it means to add that to my position isn’t linear anymore --- I would need to speak of a geodesic extending that vector along the manifold, or something."}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"ffcba0db-feda-41cf-bd45-8d57866b3148","type":"message","text":"Whether this distinction matters for AD stuff I don’t know. The ability to add an infinitesimal tangent vector `dx::D` `to x::P` is already a constraint on their types.","user":"UD0NS8PDF","ts":"1611231443.006300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DFEmx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Whether this distinction matters for AD stuff I don’t know. The ability to add an infinitesimal tangent vector "},{"type":"text","text":"dx::D","style":{"code":true}},{"type":"text","text":" "},{"type":"text","text":"to x::P","style":{"code":true}},{"type":"text","text":" is already a constraint on their types."}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"802d90fd-e816-4e39-98ff-e4b6c9277a75","type":"message","text":"It’s true.\nAnd it is required in that case to project back down onto the sphere.\nand depending how you do that, i can imagine it might break associativity sometimes?","user":"U6A936746","ts":"1611234511.006900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rSqu3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It’s true.\nAnd it is required in that case to project back down onto the sphere.\nand depending how you do that, i can imagine it might break associativity sometimes?"}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"724a8138-322b-4eab-938d-2f21978be89c","type":"message","text":"Ok I see, I was thinking of the type P as the domain, not necessarily encoding the x on manifold constraint","user":"U82RE6STE","ts":"1611236094.007200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1xof5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok I see, I was thinking of the type P as the domain, not necessarily encoding the x on manifold constraint"}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"b0034558-f70d-4c15-be3e-9302f4b3cfab","type":"message","text":"If you say “project back down” then you are picturing the manifold as a subspace of some higher-dimensional space, but this is not necessary for differential geometry. The notion of “walk 1 unit that way” intrinsic to the manifold is to take one step, and then parallel transport your direction vector to the tangent space at your new location (it’s the same dim but a distinct space, may use a different basis, etc) and use that to take the next step, and so on.","user":"UD0NS8PDF","ts":"1611236880.007400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h=z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you say “project back down” then you are picturing the manifold as a subspace of some higher-dimensional space, but this is not necessary for differential geometry. The notion of “walk 1 unit that way” intrinsic to the manifold is to take one step, and then parallel transport your direction vector to the tangent space at your new location (it’s the same dim but a distinct space, may use a different basis, etc) and use that to take the next step, and so on."}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"b2ae6e52-34a4-47da-8777-60e9061d18a2","type":"message","text":"Even in flat space, e.g. if you take the plane in polar co-ordinates, then to transport a tangent vector at one point to another point, you will need to keep changing it as you go along. (Assuming that your basis for the tangent space is the one coming from the plane polar co-ordinates.)","user":"UD0NS8PDF","ts":"1611237385.007600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UN7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Even in flat space, e.g. if you take the plane in polar co-ordinates, then to transport a tangent vector at one point to another point, you will need to keep changing it as you go along. (Assuming that your basis for the tangent space is the one coming from the plane polar co-ordinates.)"}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"47ede814-3776-426d-b2cc-47d9770155cb","type":"message","text":"I have just been thinking in terms of julia code.\nIts one of the examples i have been playing with.\n(note my fav one, which is still Primal=DateTime, Differential=Miliscond)\n\n```struct UnitCirclePoint\n    # Represents a point on the unit circle.\n    # But rather than using polar coordinates like sensible people\n    # we are using cartesian coordinates\n    x::Float64\n    y::Float64\n\n    function UnitCirclePoint(x, y)\n        x^2 + y^2 ≈ 1 || DomainError()\n        return new(x, y)\n    end\nend\n\n# Standard + defined on struct and Composite won't work because it would escape the unit circle.\n# Need to define custom +\nfunction Base.+(p::UnitCirclePoint, d::Composite{UnitCirclePoint})\n    θ = atan(p.x, p.y)\n    dθ = atan(d.x, d.y)\n    new_θ = θ + dθ\n    new_x, new_y = sincos(new_θ)\n    return UnitCirclePoint(new_x, new_y)\nend```\nSo to me in this case at least it looks like the is a 2D space (and `Composite{UnitCirclePoint}`  naively could go anywhere in it),\nbut that the `UnitCirclePoint` type only is allowed to occupy a subspace of it.\n\ncc <@U674T3KB3> this related to a past discussion, on this.","user":"U6A936746","ts":"1611237867.007800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cNM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have just been thinking in terms of julia code.\nIts one of the examples i have been playing with.\n(note my fav one, which is still Primal=DateTime, Differential=Miliscond)\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct UnitCirclePoint\n    # Represents a point on the unit circle.\n    # But rather than using polar coordinates like sensible people\n    # we are using cartesian coordinates\n    x::Float64\n    y::Float64\n\n    function UnitCirclePoint(x, y)\n        x^2 + y^2 ≈ 1 || DomainError()\n        return new(x, y)\n    end\nend\n\n# Standard + defined on struct and Composite won't work because it would escape the unit circle.\n# Need to define custom +\nfunction Base.+(p::UnitCirclePoint, d::Composite{UnitCirclePoint})\n    θ = atan(p.x, p.y)\n    dθ = atan(d.x, d.y)\n    new_θ = θ + dθ\n    new_x, new_y = sincos(new_θ)\n    return UnitCirclePoint(new_x, new_y)\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nSo to me in this case at least it looks like the is a 2D space (and "},{"type":"text","text":"Composite{UnitCirclePoint}","style":{"code":true}},{"type":"text","text":"  naively could go anywhere in it),\nbut that the "},{"type":"text","text":"UnitCirclePoint","style":{"code":true}},{"type":"text","text":" type only is allowed to occupy a subspace of it.\n\ncc "},{"type":"user","user_id":"U674T3KB3"},{"type":"text","text":" this related to a past discussion, on this."}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"bb1cdcf2-805b-4481-8652-9b4f3a5d660c","type":"message","text":"The DateTime one is easier in that they are both real numbers (with interpretation). Here, Composite is just a wrapper to flag things as differentials?","user":"UD0NS8PDF","ts":"1611238119.008000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"szj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The DateTime one is easier in that they are both real numbers (with interpretation). Here, Composite is just a wrapper to flag things as differentials?"}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"e7fdc2e9-6fb1-4830-a860-630534550e60","type":"message","text":"Re-using UnitCirclePoint for the tangent space doesn’t seem ideal, since it’s not a vector space: there exists some scalar `λ&gt;1` such that `λ*d == d` which ought not to happen. But it is just `R / θ~θ+2π`, real numbers identified, so it’s not super-weird, and maybe no bad things will happen in real life.","user":"UD0NS8PDF","ts":"1611238292.008200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yzs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Re-using UnitCirclePoint for the tangent space doesn’t seem ideal, since it’s not a vector space: there exists some scalar "},{"type":"text","text":"λ>1","style":{"code":true}},{"type":"text","text":" such that "},{"type":"text","text":"λ*d == d","style":{"code":true}},{"type":"text","text":" which ought not to happen. But it is just "},{"type":"text","text":"R / θ~θ+2π","style":{"code":true}},{"type":"text","text":", real numbers identified, so it’s not super-weird, and maybe no bad things will happen in real life."}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"f11f27d6-c10c-474f-adcc-e133528bec48","type":"message","text":"&gt;  Re-using UnitCirclePoint for the tangent space\nThat is exactly what we are *not* doing here.\nThe `Composite` is the the vector space; it is the tangent type.\nThe `UnitCirclePoint`  is the primal only. can’t add two `UnitCirclePoint`s to each other.","user":"U6A936746","ts":"1611238477.008400","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1611238560.000000"},"blocks":[{"type":"rich_text","block_id":"kgdO4","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":" Re-using UnitCirclePoint for the tangent space"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"That is exactly what we are "},{"type":"text","text":"not","style":{"bold":true}},{"type":"text","text":" doing here.\nThe "},{"type":"text","text":"Composite","style":{"code":true}},{"type":"text","text":" is the the vector space; it is the tangent type.\nThe "},{"type":"text","text":"UnitCirclePoint","style":{"code":true}},{"type":"text","text":"  is the primal only. can’t add two "},{"type":"text","text":"UnitCirclePoint","style":{"code":true}},{"type":"text","text":"s to each other."}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"f6bf122f-f29f-4960-8b56-9f1de7fc908f","type":"message","text":"Oh sorry, maybe I don’t know what `Composite` is. It inherits what fields to have from the primal type?","user":"UD0NS8PDF","ts":"1611238605.008700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YYTCL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh sorry, maybe I don’t know what "},{"type":"text","text":"Composite","style":{"code":true}},{"type":"text","text":" is. It inherits what fields to have from the primal type?"}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"ac4f4877-7981-4bde-96ef-98765c3efd6a","type":"message","text":"Yeah basically,","user":"U6A936746","ts":"1611238630.008900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zlH=g","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah basically,"}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"2e8a5f49-cfbd-49c4-b09f-150a17509013","type":"message","text":"but does it impose `x^2+y^2=1`?","user":"UD0NS8PDF","ts":"1611238682.009100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hDcC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but does it impose "},{"type":"text","text":"x^2+y^2=1","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"5766d5a7-ea7a-4b2d-95b1-c190b143d681","type":"message","text":"It does not","user":"U6A936746","ts":"1611238705.009300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TVRKn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It does not"}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"f78bbf76-ebe8-47ad-859b-93f22718e18b","type":"message","text":"That’s why I have been thinking about it moving freely through the 2D space, where as the primal living only in that subspace.\n*But maybe that is nonsense as a thing to do?*","user":"U6A936746","ts":"1611238755.009500","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1611238764.000000"},"blocks":[{"type":"rich_text","block_id":"s+VCk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That’s why I have been thinking about it moving freely through the 2D space, where as the primal living only in that subspace.\n"},{"type":"text","text":"But maybe that is nonsense as a thing to do?","style":{"bold":true}}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"b211cb3d-cd0f-4b07-abd5-ec72b12ef287","type":"message","text":"Ok, I never looked at <https://github.com/JuliaDiff/ChainRulesCore.jl/blob/master/src/differentials/composite.jl> but looking now… I see that its storage is not of the primal type, that’s good. Sorry about guessing wrong from the snippet!","user":"UD0NS8PDF","ts":"1611238857.009800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fpBYv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok, I never looked at "},{"type":"link","url":"https://github.com/JuliaDiff/ChainRulesCore.jl/blob/master/src/differentials/composite.jl"},{"type":"text","text":" but looking now… I see that its storage is not of the primal type, that’s good. Sorry about guessing wrong from the snippet!"}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"e041ea7b-399c-4417-80d6-e36a124d4803","type":"message","text":"n.p.","user":"U6A936746","ts":"1611238867.010000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"r2nJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"n.p."}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"4f27ae4d-46d2-46ef-9b70-f05f2770b813","type":"message","text":"it may actually implictly have `x^2+y^2=1` imposed upon it, just due to the nature of it coming out of the result if differentiating operations that have `UnitCirclePoint` as an input.\nBut i don’t think it will; since operations like:\n`get_x(p::UnitCirclePoint)=p.x`  exist\nand that would have pullback:\n``` x̄-&gt;Composite{UnitCiclePoint}(x=x̄)  #implict y=Zero()```\nand one could chain operations like\n`2*get_x(p)` and be certain to see it escape; right?","user":"U6A936746","ts":"1611238982.010200","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1611238987.000000"},"blocks":[{"type":"rich_text","block_id":"TTO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it may actually implictly have "},{"type":"text","text":"x^2+y^2=1","style":{"code":true}},{"type":"text","text":" imposed upon it, just due to the nature of it coming out of the result if differentiating operations that have "},{"type":"text","text":"UnitCirclePoint","style":{"code":true}},{"type":"text","text":" as an input.\nBut i don’t think it will; since operations like:\n"},{"type":"text","text":"get_x(p::UnitCirclePoint)=p.x","style":{"code":true}},{"type":"text","text":"  exist\nand that would have pullback:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":" x̄->Composite{UnitCiclePoint}(x=x̄)  #implict y=Zero()"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"and one could chain operations like\n"},{"type":"text","text":"2*get_x(p)","style":{"code":true}},{"type":"text","text":" and be certain to see it escape; right?"}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"b40fe5f5-1b06-4f6f-903c-3fe4848be99d","type":"message","text":"I will have to digest this more slowly. It looks like the `backing` could be anything, but there is some default which is being used here?","user":"UD0NS8PDF","ts":"1611239117.010500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Udp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I will have to digest this more slowly. It looks like the "},{"type":"text","text":"backing","style":{"code":true}},{"type":"text","text":" could be anything, but there is some default which is being used here?"}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"143a4fbf-c384-4d3e-a661-0a442de804a5","type":"message","text":"if the primal is a `struct` backing is always a `NamedTuple`.\nif the primal is a `Tuple` the backing is always a `Tuple`.\nThough the backing is an implementation detail and should not be visiable to the public API\n\n(lets not worry about the case where the Primal is a `Dict`  and the backing is also a `Dict`)","user":"U6A936746","ts":"1611239957.010700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BPP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if the primal is a "},{"type":"text","text":"struct","style":{"code":true}},{"type":"text","text":" backing is always a "},{"type":"text","text":"NamedTuple","style":{"code":true}},{"type":"text","text":".\nif the primal is a "},{"type":"text","text":"Tuple","style":{"code":true}},{"type":"text","text":" the backing is always a "},{"type":"text","text":"Tuple","style":{"code":true}},{"type":"text","text":".\nThough the backing is an implementation detail and should not be visiable to the public API\n\n(lets not worry about the case where the Primal is a "},{"type":"text","text":"Dict","style":{"code":true}},{"type":"text","text":"  and the backing is also a "},{"type":"text","text":"Dict","style":{"code":true}},{"type":"text","text":")"}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"0dd7f11d-1a87-4ff6-a931-192455900ca9","type":"message","text":"Taking derivatives in curved space is exactly what the diffgeo formalism I've been using addresses","user":"U674T3KB3","ts":"1611242188.011100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Iop","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Taking derivatives in curved space is exactly what the diffgeo formalism I've been using addresses"}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"cb8fb5a0-196e-46a5-b9c7-baffb0c3141d","type":"message","text":"In this case the cotangent space of the unit circle is not Composite","user":"U674T3KB3","ts":"1611242247.011300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SB3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In this case the cotangent space of the unit circle is not Composite"}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"3a852468-d0d3-49a3-aca6-1047cf117865","type":"message","text":"Instead, it's a cylinder","user":"U674T3KB3","ts":"1611242259.011500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XMTi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Instead, it's a cylinder"}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"ad6a9e2f-d414-425c-8f3d-61c7903c63fd","type":"message","text":"And addition is parallel transport along the circle","user":"U674T3KB3","ts":"1611242298.011700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s=BVE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And addition is parallel transport along the circle"}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE","reactions":[{"name":"cool","users":["U6A936746"],"count":1}]},{"client_msg_id":"73d3dea0-1c3b-46a9-8495-4b989fbe48e9","type":"message","text":"For my next trick, I will show you how we generalize from Circle and Cylinder over `x` and `y`,\nto `TCPServer` and `HyperTCPServer` over `TcpTimedWaitDelay`, `TcpMaxDataRetransmissions`, `TCPInitialRtt`\n\n---\n\nI am not joking when I suggest that TCPServer settings form a manifold\n(I am joking when i say i will should how to make that work. But i think it can)","user":"U6A936746","ts":"1611242786.012000","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1611243004.000000"},"blocks":[{"type":"rich_text","block_id":"JU0q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For my next trick, I will show you how we generalize from Circle and Cylinder over "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"y","style":{"code":true}},{"type":"text","text":",\nto "},{"type":"text","text":"TCPServer","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"HyperTCPServer","style":{"code":true}},{"type":"text","text":" over "},{"type":"text","text":"TcpTimedWaitDelay","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"TcpMaxDataRetransmissions","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"TCPInitialRtt","style":{"code":true}},{"type":"text","text":"\n\n---\n\nI am not joking when I suggest that TCPServer settings form a manifold\n(I am joking when i say i will should how to make that work. But i think it can)"}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"},{"client_msg_id":"cb2f0a40-e5d4-48ef-bfe1-ceaee8090cd4","type":"message","text":"&gt;  Primal=DateTime, Differential=Miliscond\nyes I was exactly picturing this in my initial questions","user":"U82RE6STE","ts":"1611248032.012300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d1XW4","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":" Primal=DateTime, Differential=Miliscond"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"yes I was exactly picturing this in my initial questions"}]}]}],"thread_ts":"1611222848.003200","parent_user_id":"U82RE6STE"}]