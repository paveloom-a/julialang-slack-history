[{"client_msg_id":"665a8d0b-0751-49db-aae3-5cc9c70970a8","type":"message","text":"My read of this:\n<https://github.com/google-research/dex-lang/issues/454#issuecomment-770117681|https://github.com/google-research/dex-lang/issues/454#issuecomment-770117681>\n\nConal Elliott takes objection to fusing the pushforward with the primal in (e.g.) ChainRules' `frule`.\nHe thinks this kind of thing should be like `rrule` returning a primal result, and a pushforward linear operator (which will be a closure)","user":"U6A936746","ts":"1612031768.084800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Gd=M","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My read of this:\n"},{"type":"link","url":"https://github.com/google-research/dex-lang/issues/454#issuecomment-770117681","text":"https://github.com/google-research/dex-lang/issues/454#issuecomment-770117681"},{"type":"text","text":"\n\nConal Elliott takes objection to fusing the pushforward with the primal in (e.g.) ChainRules' "},{"type":"text","text":"frule","style":{"code":true}},{"type":"text","text":".\nHe thinks this kind of thing should be like "},{"type":"text","text":"rrule","style":{"code":true}},{"type":"text","text":" returning a primal result, and a pushforward linear operator (which will be a closure)"}]}]}],"thread_ts":"1612031768.084800","reply_count":48,"reply_users_count":7,"latest_reply":"1612053234.101600","reply_users":["U8R9JE0D6","UMY1LV01G","U6A936746","U8D9768Q6","UD0NS8PDF","U69BL50BF","UHDQQ4GN6"],"subscribed":false},{"client_msg_id":"bc1c9897-35c8-41ce-b031-085c23f8fabb","type":"message","text":"Conal Elliot is awesome. If he has an opinion, I'd take it seriously.","user":"U8R9JE0D6","ts":"1612031906.084900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"b6af","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Conal Elliot is awesome. If he has an opinion, I'd take it seriously."}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"6d5953fb-457e-48eb-8ebe-55aed6568ffb","type":"message","text":"TIL he's active on GitHub. All this differential geometry stuff is way over my head though :dizzy_face:","user":"UMY1LV01G","ts":"1612033553.085100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kdHDX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"TIL he's active on GitHub. All this differential geometry stuff is way over my head though "},{"type":"emoji","name":"dizzy_face"}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"4bcbcff9-739c-4a2c-bb58-45386d49edf8","type":"message","text":"Do you think this will have any impact (aspirational or practical) on ChainRules' API?","user":"UMY1LV01G","ts":"1612033933.085300","team":"T68168MUP","edited":{"user":"UMY1LV01G","ts":"1612033959.000000"},"blocks":[{"type":"rich_text","block_id":"CbCMe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Do you think this will have any impact (aspirational or practical) on ChainRules' API?"}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"87f96c49-b967-47b8-b41f-04f944a57c60","type":"message","text":"Probably not","user":"U6A936746","ts":"1612034181.085600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"E2ZJB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Probably not"}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"a8e44e5f-f3cc-4910-912b-73ef55979f4f","type":"message","text":"The argument for fusing `frule` that <@U6788D83U>  and <@U69BL50BF>  gave was really strong.\n<https://github.com/JuliaDiff/ChainRulesCore.jl/issues/74|https://github.com/JuliaDiff/ChainRulesCore.jl/issues/74>","user":"U6A936746","ts":"1612034309.085800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eMR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The argument for fusing `frule` that "},{"type":"user","user_id":"U6788D83U"},{"type":"text","text":"  and "},{"type":"user","user_id":"U69BL50BF"},{"type":"text","text":"  gave was really strong.\n"},{"type":"link","url":"https://github.com/JuliaDiff/ChainRulesCore.jl/issues/74","text":"https://github.com/JuliaDiff/ChainRulesCore.jl/issues/74"}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746","reactions":[{"name":"+1","users":["UMY1LV01G","U016RL8KEHX"],"count":2}]},{"client_msg_id":"58429af1-c697-4c0e-916e-74ae538b0413","type":"message","text":"IMO, Conal Elliot's objection is more ideological / aesthetic than practical. The reality is that there are real costs to creating closures for every `frule` and there should be practical benefits to outweigh those costs for us to do it (like is the case with `rrule`)\n\nWe don't treat `rrule` different from `frule` because we think they're different things, we do it because there's practical advantages to doing so.","user":"U8D9768Q6","ts":"1612034609.086000","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1612034674.000000"},"blocks":[{"type":"rich_text","block_id":"amDGu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"IMO, Conal Elliot's objection is more ideological / aesthetic than practical. The reality is that there are real costs to creating closures for every "},{"type":"text","text":"frule","style":{"code":true}},{"type":"text","text":" and there should be practical benefits to outweigh those costs for us to do it (like is the case with "},{"type":"text","text":"rrule","style":{"code":true}},{"type":"text","text":")\n\nWe don't treat "},{"type":"text","text":"rrule","style":{"code":true}},{"type":"text","text":" different from "},{"type":"text","text":"frule","style":{"code":true}},{"type":"text","text":" because we think they're different things, we do it because there's practical advantages to doing so."}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746","reactions":[{"name":"+1","users":["UMY1LV01G","U6A936746"],"count":2}]},{"client_msg_id":"f0025051-9b5e-4a5b-93c5-afe44ac01dc5","type":"message","text":"Are there any fairly-practical advantages the other way, I mean to the way he proposes? I haven’t thought about this much… but does anything ever end up trying to be generic as to whether it’s traveling forwards or backwards? (By “fairly-practical” I guess I include tidier implementation, not only practical as in saving flops/memory, but exclude pure armchair aesthetic concerns.)","user":"UD0NS8PDF","ts":"1612034718.086600","team":"T68168MUP","edited":{"user":"UD0NS8PDF","ts":"1612034856.000000"},"blocks":[{"type":"rich_text","block_id":"NZ/5K","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Are there any fairly-practical advantages the other way, I mean to the way he proposes? I haven’t thought about this much… but does anything ever end up trying to be generic as to whether it’s traveling forwards or backwards? (By “fairly-practical” I guess I include tidier implementation, not only practical as in saving flops/memory, but exclude pure armchair aesthetic concerns.)"}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"78da41a3-0268-4679-bef4-0e52705cfd54","type":"message","text":"The whole point of forward mode is that you can do the jvp at every operation the moment you do the operation. Having to then go back through it would require that you save state of the forward mode, which makes even non-allocating forward passes be allocating in the frule. This would mean that things like ForwardDiff are impossible, pushing forward at every point, and thus it would be impossible to keep non-allocating codes non-allocating. That is fine for rrules because by their very nature they have to delay the computation of the rrule, but for frules it's a pretty huge performance drop for good codes.\n\nEven if all you wanted to do was frules for machine learning, not fusing would mean doing a matrix-vector multiplication and then doing matrix-matrix multiplication later, instead of doing one (bigger) matrix-matrix multiplication which would get better multithreading and cache efficiency on both CPUs and GPUs. So computationally it's moot: fusing is just better for scalar and vector mode.","user":"U69BL50BF","ts":"1612034771.086900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Qdzoj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The whole point of forward mode is that you can do the jvp at every operation the moment you do the operation. Having to then go back through it would require that you save state of the forward mode, which makes even non-allocating forward passes be allocating in the frule. This would mean that things like ForwardDiff are impossible, pushing forward at every point, and thus it would be impossible to keep non-allocating codes non-allocating. That is fine for rrules because by their very nature they have to delay the computation of the rrule, but for frules it's a pretty huge performance drop for good codes.\n\nEven if all you wanted to do was frules for machine learning, not fusing would mean doing a matrix-vector multiplication and then doing matrix-matrix multiplication later, instead of doing one (bigger) matrix-matrix multiplication which would get better multithreading and cache efficiency on both CPUs and GPUs. So computationally it's moot: fusing is just better for scalar and vector mode."}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746","reactions":[{"name":"100","users":["U8D9768Q6"],"count":1},{"name":"heavy_check_mark","users":["U6A936746"],"count":1}]},{"client_msg_id":"7ca930be-6106-462d-98ba-a02aadecd320","type":"message","text":"Delaying less things in rrules is *the* big plus to opaque closures.","user":"U6A936746","ts":"1612034947.087400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"StRZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Delaying less things in rrules is "},{"type":"text","text":"the ","style":{"bold":true}},{"type":"text","text":"big plus to opaque closures."}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746","reactions":[{"name":"heavy_check_mark","users":["U69BL50BF","U016RL8KEHX"],"count":2}]},{"client_msg_id":"9fca09f4-3393-401b-a17f-3a047ff7c16f","type":"message","text":"&gt; Are there any fairly-practical advantages the other way, I mean to the way he proposes?\nMaybe it can be easier to implement a mixed mode if both rules always return anonymous functions to delay computations? Even then though, the most memory efficient implementation would not delay a ton of operations and then start pushing forward: it would push forward the moment it can so that it could get rid of state and decrease the peak memory usage. So even a good mixed mode using frules like that would evaluate the forward pass and then immediately evaluate the anonymous function, while not letting the user fuse the two :face_palm:","user":"U69BL50BF","ts":"1612035015.087600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BRU","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"Are there any fairly-practical advantages the other way, I mean to the way he proposes?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe it can be easier to implement a mixed mode if both rules always return anonymous functions to delay computations? Even then though, the most memory efficient implementation would not delay a ton of operations and then start pushing forward: it would push forward the moment it can so that it could get rid of state and decrease the peak memory usage. So even a good mixed mode using frules like that would evaluate the forward pass and then immediately evaluate the anonymous function, while not letting the user fuse the two "},{"type":"emoji","name":"face_palm"}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"026a49bc-223f-469a-82e5-ce1d73c5e152","type":"message","text":"Here's another way of putting what Chris said:\n\nWhile there is a symmetry between forward mode and backwards mode, that symmetry is not respected by a computer which necessarily operates from a start point to an end point.\n\nThis means that not all optimizations that apply in one mode can be translated to the other, so if you use a truly symmetric implementation, you are leaving performance on the table.","user":"U8D9768Q6","ts":"1612035102.088000","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1612035140.000000"},"blocks":[{"type":"rich_text","block_id":"GoLY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Here's another way of putting what Chris said:\n\nWhile there is a symmetry between forward mode and backwards mode, that symmetry is not respected by a computer which necessarily operates from a start point to an end point.\n\nThis means that not all optimizations that apply in one mode can be translated to the other, so if you use a truly symmetric implementation, you are leaving performance on the table."}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746","reactions":[{"name":"heavy_check_mark","users":["U69BL50BF","UHDQQ4GN6","UDXST8ARK","U9TCDH0E7","U6BJXUZHR"],"count":5}]},{"client_msg_id":"0d34a7e3-1d91-473f-b9bf-a7d7f3a3cb9b","type":"message","text":"Yes that's a good way of putting it. Forward mode just naturally has more things that can be optimized because you do not necessarily have to delay the computation. You can make the rule definition and application symmetric, but that will necessarily be making forward mode as bad as reverse mode!","user":"U69BL50BF","ts":"1612035193.088400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cDfL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes that's a good way of putting it. Forward mode just naturally has more things that can be optimized because you do not necessarily have to delay the computation. You can make the rule definition and application symmetric, but that will necessarily be making forward mode as bad as reverse mode!"}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"fbe66303-3e41-4727-b4db-3b8247d6f089","type":"message","text":"One can always slice the pushforward out if your optimiser is good.\nIt's partial evaluation on `frule` .\nThis kind of partial evaluation is at least well studied.\nThough not implemented in Julia.\n(It is however one of the core tricks of :jax: , and is used *exactly* for this*)*","user":"U6A936746","ts":"1612035351.088600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kpJ2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"One can always slice the pushforward out if your optimiser is good.\nIt's partial evaluation on "},{"type":"text","text":"frule","style":{"code":true}},{"type":"text","text":" .\nThis kind of partial evaluation is at least well studied.\nThough not implemented in Julia.\n(It is however one of the core tricks of "},{"type":"emoji","name":"jax"},{"type":"text","text":" , and is used "},{"type":"text","text":"exactly ","style":{"bold":true}},{"type":"text","text":"for this"},{"type":"text","text":")","style":{"bold":true}}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"1fcbdc85-b148-46cf-a6e4-d34a660b0a72","type":"message","text":"Wait partial evaluation of which part? You mean when you don’t want the primal and only want the tangent?","user":"UD0NS8PDF","ts":"1612035472.088800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4uaT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Wait partial evaluation of which part? You mean when you don’t want the primal and only want the tangent?"}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"7727bafb-cdac-45f2-a081-3845b84254a9","type":"message","text":"Sure, but deliberately writing bad code and hoping your compiler will optimize it into good code is a very unwise strategy for someone like ChainRules who wants to entice performance sensitive packages to rely on it.","user":"U8D9768Q6","ts":"1612035478.089000","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1612035621.000000"},"blocks":[{"type":"rich_text","block_id":"//83","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sure, but deliberately writing bad code and hoping your compiler will optimize it into good code is a very unwise strategy for someone like ChainRules who wants to entice performance sensitive packages to rely on it."}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"b6721c80-d8a5-4144-807c-ac879e9be952","type":"message","text":"&gt; Wait partial evaluation of which part? You mean when you don't want the primal and only want the tangent?\n\nTo take `frule` + the primal input, and get out the `pushforward`. Which is the function that propagates tangents.\nThere may not be much work you can slice away. But even if not slicing away work the `linearize` function I gave earlier has the semantics right","user":"U6A936746","ts":"1612035650.089300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VuY9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"> Wait partial evaluation of which part? You mean when you don't want the primal and only want the tangent?\n\nTo take "},{"type":"text","text":"frule","style":{"code":true}},{"type":"text","text":" + the primal input, and get out the "},{"type":"text","text":"pushforward","style":{"code":true}},{"type":"text","text":". Which is the function that propagates tangents.\nThere may not be much work you can slice away. But even if not slicing away work the `linearize` function I gave earlier has the semantics right"}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"520d7327-c972-4b3d-82db-e7f7410ac749","type":"message","text":"There's also counter examples. JAX can only do those tricks on a subset of its supported code. There's tiers of support. It turns out the AD linearization doesn't support the kinds of dynamic codes like the ODE solver with adaptivity :shrug: . That's fine because you can define a forward rule and an adjoint rule? Well other than the fact that adjoint rules are not accurate for ODEs (or most other \"implicit layers\", a whole big issue itself that ML seems to ignore to major consequence as described in the optimal control literature), you also can't define the fusing in the forward rule. So you solve two ODEs, either redoing computation or storing the full first forward pass, instead of solving one. That ODE example that I give in the issue is thus precisely one that's hard to optimize well in their system.","user":"U69BL50BF","ts":"1612035666.089500","team":"T68168MUP","edited":{"user":"U69BL50BF","ts":"1612035793.000000"},"blocks":[{"type":"rich_text","block_id":"kqx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There's also counter examples. JAX can only do those tricks on a subset of its supported code. There's tiers of support. It turns out the AD linearization doesn't support the kinds of dynamic codes like the ODE solver with adaptivity "},{"type":"emoji","name":"shrug"},{"type":"text","text":" . That's fine because you can define a forward rule and an adjoint rule? Well other than the fact that adjoint rules are not accurate for ODEs (or most other \"implicit layers\", a whole big issue itself that ML seems to ignore to major consequence as described in the optimal control literature), you also can't define the fusing in the forward rule. So you solve two ODEs, either redoing computation or storing the full first forward pass, instead of solving one. That ODE example that I give in the issue is thus precisely one that's hard to optimize well in their system."}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746","reactions":[{"name":"+1","users":["U8D9768Q6","U6A936746"],"count":2}]},{"client_msg_id":"ca836d8f-b161-44c0-a81a-7e1c3a5a8a07","type":"message","text":"Edit: message from older world_age deleted","user":"U8D9768Q6","ts":"1612035762.089700","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1612035964.000000"},"blocks":[{"type":"rich_text","block_id":"goO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Edit: message from older world_age deleted"}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746","reactions":[{"name":"joy","users":["UMY1LV01G"],"count":1}]},{"client_msg_id":"ed2986ff-0a1f-416f-a2e2-4f2ff04def86","type":"message","text":"yeah doesn't","user":"U69BL50BF","ts":"1612035783.090000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fku","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah doesn't"}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"c6e1fdf9-6258-45cb-b15a-5864e829094c","type":"message","text":"&gt; Sure, but deliberately writing bad code and hoping your compiler will optimize it\n\nIs this addressed at me?\nChainRules does the thing that is always fast (fusing), which is also the thing that via partial evaluation be turned into the thing one might want because they like the purity of a distinct pushforward.\n \nThe reverse is much harder. I am not sure even with a magic optimiser that you can't turn a distinct pushforward into a fused frule.\nBecause there are algorithmic differences in what you can do.\nI don't think you can common subexpression elimatate them to be the same.\nLike Chris said in his ODE example.","user":"U6A936746","ts":"1612036038.090500","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1612036093.000000"},"blocks":[{"type":"rich_text","block_id":"aINzx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"> Sure, but deliberately writing bad code and hoping your compiler will optimize it\n\nIs this addressed at me?\nChainRules does the thing that is always fast (fusing), which is also the thing that via partial evaluation be turned into the thing one might want because they like the purity of a distinct pushforward.\n \nThe reverse is much harder. I am not sure even with a magic optimiser that you can't turn a distinct pushforward into a fused frule.\nBecause there are algorithmic differences in what you can do.\nI don't think you can common subexpression elimatate them to be the same.\nLike Chris said in his ODE example."}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"e4a04135-dfb2-4b20-bb63-f8ed4d619e8b","type":"message","text":"I was just pointing out why relying on such an optimizer in ChainRules even if we had it would be bad. I wasn't saying you disagreed, just elaborating.","user":"U8D9768Q6","ts":"1612036236.090900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qaQ7y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I was just pointing out why relying on such an optimizer in ChainRules even if we had it would be bad. I wasn't saying you disagreed, just elaborating."}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"26139401-03a6-4646-a1eb-61529a224a2b","type":"message","text":"Does anyone object to me uploading screenshots of this convo to Zulip so it's not lost to the SlackHole?","user":"U8D9768Q6","ts":"1612036345.091100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dq0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does anyone object to me uploading screenshots of this convo to Zulip so it's not lost to the SlackHole?"}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"13d01716-560b-4c18-9783-b1803d0d1bc2","type":"message","text":"Please do","user":"U6A936746","ts":"1612036356.091300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fMTY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Please do"}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"ea71f51d-1172-4b35-92d3-b9a36c18f400","type":"message","text":"nope sounds good","user":"U69BL50BF","ts":"1612036357.091500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9BLWq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"nope sounds good"}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"bdac7b67-3ba6-4c62-9770-7c62e988fe15","type":"message","text":"<https://julialang.zulipchat.com/#narrow/stream/233469-autodiff>","user":"U8D9768Q6","ts":"1612036474.091800","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1612036478.000000"},"blocks":[{"type":"rich_text","block_id":"05b","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://julialang.zulipchat.com/#narrow/stream/233469-autodiff"}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"6bbba8c0-ad64-48e6-9b61-eec478326f5e","type":"message","text":"Anyways, yeah better partial evaluation optimizations would be really nice to have in julia, regardless of whether we explicitly took advantage of it in ChainRules","user":"U8D9768Q6","ts":"1612036690.092200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6V7P+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Anyways, yeah better partial evaluation optimizations would be really nice to have in julia, regardless of whether we explicitly took advantage of it in ChainRules"}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"2492e9fb-409b-4841-a19e-a3877180a6f6","type":"message","text":"I do wonder how close opaque closures will get is to good partial evaluation","user":"U6A936746","ts":"1612036959.092400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Qdgd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I do wonder how close opaque closures will get is to good partial evaluation"}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"4cf23404-68a9-49f2-b707-1ee0649f679f","type":"message","text":"<@U6A936746> I now see I misundrstood your point up above. I thought you were talking about something different, sorry for the confusion.","user":"U8D9768Q6","ts":"1612037003.092600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w4+","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U6A936746"},{"type":"text","text":" I now see I misundrstood your point up above. I thought you were talking about something different, sorry for the confusion."}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746","reactions":[{"name":"ok_hand","users":["U6A936746","UKG4WF8PJ"],"count":2}]},{"client_msg_id":"75318e43-19c2-4570-89d1-7d9ae6571976","type":"message","text":"I think one thing with opaque closures is that they cannot be inlined, so that right there is a big reason to to avoid sometimes.","user":"U8D9768Q6","ts":"1612037074.092900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZIJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think one thing with opaque closures is that they cannot be inlined, so that right there is a big reason to to avoid sometimes."}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"833af352-a410-468e-ba1f-90545d7b39cc","type":"message","text":"Ah that massively limits there ability to be used when worrying about  optimisation contexts especially nesting.\n\nI think more significant problem is that they ignore world ages.\nThey are bad in similar ways to `@pure` and `@generated`","user":"U6A936746","ts":"1612037207.093100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"duhq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah that massively limits there ability to be used when worrying about  optimisation contexts especially nesting.\n\nI think more significant problem is that they ignore world ages.\nThey are bad in similar ways to "},{"type":"text","text":"@pure","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"@generated","style":{"code":true}}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746","reactions":[{"name":"+1","users":["U8D9768Q6","UKG4WF8PJ"],"count":2}]},{"client_msg_id":"7f652ec9-5f40-4a36-9a13-9e1e4e3df9ca","type":"message","text":"Some more thought, largely overlapping with thing I already said\n\nunfused -&gt; fused: as an optimisation is  common subexpression elimatation.\nAssuming the algorithms are infact overlapping (which I don't think is always the case).\nThis is a well known and commonly implemented optimisation.\nBut we've seen it fail before in AD contexts.\nNested forward most should CSE into Taylor mode, but it doesn't.\n\nFused-&gt;unfused: optimisation is aggressive constant folding in partial evaluation. Algorithmically unfused can never be faster than fused as it is trivial to rewrite an unfused into a fused by just not wrapping the pushforward code in a function  (indeed most frules in ChainRules right now have this form).\nWe *have*  seen this optimisation work in AD contexts. Since unfusing frules to get pushforward operators  that are then transposed is how :jax: implements reverse mode.","user":"U6A936746","ts":"1612037520.093400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Cqfpk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Some more thought, largely overlapping with thing I already said\n\nunfused -> fused: as an optimisation is  common subexpression elimatation.\nAssuming the algorithms are infact overlapping (which I don't think is always the case).\nThis is a well known and commonly implemented optimisation.\nBut we've seen it fail before in AD contexts.\nNested forward most should CSE into Taylor mode, but it doesn't.\n\nFused->unfused: optimisation is aggressive constant folding in partial evaluation. Algorithmically unfused can never be faster than fused as it is trivial to rewrite an unfused into a fused by just not wrapping the pushforward code in a function  (indeed most frules in ChainRules right now have this form).\nWe "},{"type":"text","text":"have  ","style":{"bold":true}},{"type":"text","text":"seen this optimisation work in AD contexts. Since unfusing frules to get pushforward operators  that are then transposed is how "},{"type":"emoji","name":"jax"},{"type":"text","text":" implements reverse mode."}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"7c05c9db-7ba6-4ed6-95ba-7dd639847db5","type":"message","text":"&gt; Anyways, yeah better partial evaluation optimizations would be really nice to have in julia, regardless of whether we explicitly took advantage of it in ChainRules\nI _think_ Mjolnir was meant for this, but I don't really understand all of this.","user":"UHDQQ4GN6","ts":"1612038465.096300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/IZfr","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"Anyways, yeah better partial evaluation optimizations would be really nice to have in julia, regardless of whether we explicitly took advantage of it in ChainRules"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I "},{"type":"text","text":"think","style":{"italic":true}},{"type":"text","text":" Mjolnir was meant for this, but I don't really understand all of this."}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746","reactions":[{"name":"true","users":["U6A936746","UMY1LV01G","U8D9768Q6","UKG4WF8PJ"],"count":4}]},{"client_msg_id":"44b1ea02-a24b-47a1-9fe9-18e54f6223c1","type":"message","text":"&gt;   I _think_ Mjolnir was meant for this, but I don’t really understand all of this.\nIt exactly was","user":"U6A936746","ts":"1612038484.096500","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1612038488.000000"},"blocks":[{"type":"rich_text","block_id":"GUv","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"  I "},{"type":"text","text":"think","style":{"italic":true}},{"type":"text","text":" Mjolnir was meant for this, but I don’t really understand all of this."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"It exactly was"}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"4cf4bd14-7e2b-4490-926d-28e23692af63","type":"message","text":"Not to go too off-topic, but how much of Mjolnir is subsumed by AbstractInterpreter? I assume most of the IRTools functionality?","user":"UMY1LV01G","ts":"1612038982.097100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RThrO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not to go too off-topic, but how much of Mjolnir is subsumed by AbstractInterpreter? I assume most of the IRTools functionality?"}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"96ac4e50-646d-494e-b8a3-58c5f62d2532","type":"message","text":"Maybe a new thread?","user":"U6A936746","ts":"1612039014.097300","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1612039023.000000"},"blocks":[{"type":"rich_text","block_id":"8iSFZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe a new thread?"}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746","reactions":[{"name":"+1","users":["UMY1LV01G"],"count":1}]},{"client_msg_id":"d97ff733-82c3-443d-9674-7ac948383a32","type":"message","text":"What is the canonical implementation of Conal Elliot’s ideas?","user":"U6A936746","ts":"1612040296.097700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jXZQ5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What is the canonical implementation of Conal Elliot’s ideas?"}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"d923cc13-1dd5-44e7-b055-822e4726c47b","type":"message","text":"One other random thought: I think Conal's suggestion is probably much more compelling in a Dex / Haskell context where they generally believe that the type signature of a function tells you a great deal about it.\n\nIn julia, few people would ever just tell you the type signature of a method and not what the actual method's body is.","user":"U8D9768Q6","ts":"1612044898.098100","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1612044966.000000"},"blocks":[{"type":"rich_text","block_id":"gaE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"One other random thought: I think Conal's suggestion is probably much more compelling in a Dex / Haskell context where they generally believe that the type signature of a function tells you a great deal about it.\n\nIn julia, few people would ever just tell you the type signature of a method and not what the actual method's body is."}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"3e317cf6-2c71-400c-af1a-566922ec2364","type":"message","text":"but that doesn’t solve the fact that that has a fundemental performance problem,","user":"U6A936746","ts":"1612045590.098500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"meytc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but that doesn’t solve the fact that that has a fundemental performance problem,"}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746","reactions":[{"name":"heavy_check_mark","users":["U8D9768Q6","UKG4WF8PJ"],"count":2}]},{"client_msg_id":"efd54a23-05d5-4d11-9be6-618a7a3e29ef","type":"message","text":"I should *not* get into an argument with Conal Elliot.\nThat would not be a wise thing to do, would it?","user":"U6A936746","ts":"1612045885.098700","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1612046180.000000"},"blocks":[{"type":"rich_text","block_id":"cJ9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I should "},{"type":"text","text":"not","style":{"bold":true}},{"type":"text","text":" get into an argument with Conal Elliot.\nThat would not be a wise thing to do, would it?"}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"322ea793-e5e1-42ad-8177-53cd5a83a316","type":"message","text":"yeah let them do their thing :shrug:","user":"U69BL50BF","ts":"1612045908.098900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jJ+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah let them do their thing "},{"type":"emoji","name":"shrug"}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"7fd68eb3-64db-4fe8-9f6c-45b62b04b7dd","type":"message","text":"I am sure a Jax person will come do that.\nProbably Adam.","user":"U6A936746","ts":"1612045933.099100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6rMGZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am sure a Jax person will come do that.\nProbably Adam."}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"db94cc2d-2e9c-43ad-8a64-a6661ee47699","type":"message","text":"I'm not paying close attention, but it looks like some good points were raised in this thread. Has anyone relayed them to Conal? That would be nice I think.","user":"U8R9JE0D6","ts":"1612046550.099500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"veS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not paying close attention, but it looks like some good points were raised in this thread. Has anyone relayed them to Conal? That would be nice I think."}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"4e4676bb-19f4-4e5e-ab56-f5dd6d2b3099","type":"message","text":"The twist Dex: is actually doing what Conal wants.\nConal just didn’t read the code, just an earlier comment (which was wrong for Dex, but right for Jax).\n<https://github.com/google-research/dex-lang/blob/718a86cada3a9287708882fc563e1605f5f24aca/lib/prelude.dx#L841-L843>\nbut now that I have talked to Dougal they are thinking about not doing that; and doing what we do.","user":"U6A936746","ts":"1612052038.099700","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1612052251.000000"},"blocks":[{"type":"rich_text","block_id":"K3Sz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The twist Dex: is actually doing what Conal wants.\nConal just didn’t read the code, just an earlier comment (which was wrong for Dex, but right for Jax).\n"},{"type":"link","url":"https://github.com/google-research/dex-lang/blob/718a86cada3a9287708882fc563e1605f5f24aca/lib/prelude.dx#L841-L843"},{"type":"text","text":"\nbut now that I have talked to Dougal they are thinking about not doing that; and doing what we do."}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"9464ba18-2741-401e-ae3a-1a37f2ebd370","type":"message","text":"&gt; I should *not* get into an argument with Conal Elliot.\n&gt; That would not be a wise thing to do, would it?\nIf you don't want to, I suppose I could try and summarize some of the points made here and post it to that thread. But I think it'd probably be better coming from you, given you know this subject more than I and are familiar with the Dex community.","user":"U8D9768Q6","ts":"1612052258.100200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gIuO","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"I should "},{"type":"text","text":"not","style":{"bold":true}},{"type":"text","text":" get into an argument with Conal Elliot.\nThat would not be a wise thing to do, would it?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"If you don't want to, I suppose I could try and summarize some of the points made here and post it to that thread. But I think it'd probably be better coming from you, given you know this subject more than I and are familiar with the Dex community."}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"63adb3f5-7874-4274-aea2-6d7b410566c0","type":"message","text":"But I think it'd be good to at least present the counter arguments to him.","user":"U8D9768Q6","ts":"1612052291.100400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"frcgP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But I think it'd be good to at least present the counter arguments to him."}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"bfa46f78-2a77-4b97-9e0f-bc43e40b33f5","type":"message","text":"I have talked to Adam and Dougal, who are the two main authors of Dex.\nThey know, and they can present the argument.\nProbably also while correcting him on the current state of Dex since it actually does do the thing he wants.","user":"U6A936746","ts":"1612052334.100600","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1612052344.000000"},"blocks":[{"type":"rich_text","block_id":"GmtTe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have talked to Adam and Dougal, who are the two main authors of Dex.\nThey know, and they can present the argument.\nProbably also while correcting him on the current state of Dex since it actually does do the thing he wants."}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746","reactions":[{"name":"+1","users":["U8D9768Q6","UD0NS8PDF","UKG4WF8PJ"],"count":3}]},{"type":"message","text":"As I understand it Conal Elliot has a reputation.\nIIRC the team behind the Differentiable Curry Paper apparently had a massive argument with him the result of which was the following slide.\nWhere meaning of the new title is the same as the old to for almost every use of the word curry.\n(This is probably the same family of pedantry that would say julia doesn’t have closures, because they bind at the wrong time)","files":[{"id":"F01LMC537CL","created":1612052766,"timestamp":1612052766,"name":"image.png","title":"image.png","mimetype":"image/png","filetype":"png","pretty_type":"PNG","user":"U6A936746","editable":false,"size":222227,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01LMC537CL/image.png","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01LMC537CL/download/image.png","thumb_64":"https://files.slack.com/files-tmb/T68168MUP-F01LMC537CL-80e0f8d9f6/image_64.png","thumb_80":"https://files.slack.com/files-tmb/T68168MUP-F01LMC537CL-80e0f8d9f6/image_80.png","thumb_360":"https://files.slack.com/files-tmb/T68168MUP-F01LMC537CL-80e0f8d9f6/image_360.png","thumb_360_w":346,"thumb_360_h":360,"thumb_480":"https://files.slack.com/files-tmb/T68168MUP-F01LMC537CL-80e0f8d9f6/image_480.png","thumb_480_w":461,"thumb_480_h":480,"thumb_160":"https://files.slack.com/files-tmb/T68168MUP-F01LMC537CL-80e0f8d9f6/image_160.png","thumb_720":"https://files.slack.com/files-tmb/T68168MUP-F01LMC537CL-80e0f8d9f6/image_720.png","thumb_720_w":692,"thumb_720_h":720,"thumb_800":"https://files.slack.com/files-tmb/T68168MUP-F01LMC537CL-80e0f8d9f6/image_800.png","thumb_800_w":800,"thumb_800_h":833,"thumb_960":"https://files.slack.com/files-tmb/T68168MUP-F01LMC537CL-80e0f8d9f6/image_960.png","thumb_960_w":922,"thumb_960_h":960,"thumb_1024":"https://files.slack.com/files-tmb/T68168MUP-F01LMC537CL-80e0f8d9f6/image_1024.png","thumb_1024_w":984,"thumb_1024_h":1024,"original_w":1620,"original_h":1686,"thumb_tiny":"AwAwAC7SHSlyKT+Gm+WvPyjn3oAfRUXlKOifrR5S5+4fzoAlpDTDGD2/Wn9qAAdKML6D8qB0paAEwvoPyowvoPypaKAEwvoPyoPSlBBpDQAfw1EysBhST9T0qTJAGBn8aMnPIH50ARASYwCf8/Wl8s5yefqc1LgegowPalYdxpXjAyv0p3alpDTEf//Z","permalink":"https://julialang.slack.com/files/U6A936746/F01LMC537CL/image.png","permalink_public":"https://slack-files.com/T68168MUP-F01LMC537CL-82a3c856d1","is_starred":false,"has_rich_preview":false}],"upload":false,"blocks":[{"type":"rich_text","block_id":"ZUO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"As I understand it Conal Elliot has a reputation.\nIIRC the team behind the Differentiable Curry Paper apparently had a massive argument with him the result of which was the following slide.\nWhere meaning of the new title is the same as the old to for almost every use of the word curry.\n(This is probably the same family of pedantry that would say julia doesn’t have closures, because they bind at the wrong time)"}]}]}],"user":"U6A936746","display_as_bot":false,"ts":"1612052907.101000","edited":{"user":"U6A936746","ts":"1612053029.000000"},"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"},{"client_msg_id":"aef50004-644e-4819-81a0-7ec664f95d67","type":"message","text":"Ah, very fun.","user":"U8D9768Q6","ts":"1612053234.101600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FQeuu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, very fun."}]}]}],"thread_ts":"1612031768.084800","parent_user_id":"U6A936746"}]