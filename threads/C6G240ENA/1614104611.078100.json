[{"client_msg_id":"5f31ec7e-dfba-4274-835e-9bceb45f9405","type":"message","text":"Why does this work\n```julia&gt; f2(x) = sum(SMatrix{2,2,Float64,4}(x,x^2,√x,sin(x)))\njulia&gt; Zygote.gradient(f2,3.3)  # (6.887761171372725,)```\nwhen this fails?\n```julia&gt; function f3(x)::SMatrix{2,2,Float64,4}\n           [ x x^2; √x sin(x) ]\n       end\njulia&gt; Zygote.gradient(x-&gt;sum(f3(x)),3.3)  #  ERROR: Need an adjoint for constructor SMatrix{2, 2, Float64, 4}. Gradient is of type FillArrays.Fill{...```\nIt seems like function defs with return-type specifications cause Zygote missing-constructor-adjoint errors even when the constructor `rrule` is defined, but I could be misunderstanding something more basic. In my case, before the code above I have defined `rrule`s for `SMatrix` construction like this\n```julia&gt; ChainRulesCore.rrule(T::Type{&lt;:SMatrix}, x::AbstractMatrix) = ( T(x), dv -&gt; (nothing, dv) )\njulia&gt; ChainRulesCore.rrule(T::Type{&lt;:SMatrix}, xs::Number...) = ( T(xs...), dv -&gt; (nothing, dv...) )\njulia&gt; ChainRules.refresh_rules()\njulia&gt; Zygote.refresh()```\nSorry, probably a dumb question. Any advice or workaround would be much appreciated! Some of the functions causing this error for me are in imported packages, so I'm hoping to avoid this without redefining them.","user":"U01HK5WRVJT","ts":"1614104611.078100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DgBpT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Why does this work\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> f2(x) = sum(SMatrix{2,2,Float64,4}(x,x^2,√x,sin(x)))\njulia> Zygote.gradient(f2,3.3)  # (6.887761171372725,)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"when this fails?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function f3(x)::SMatrix{2,2,Float64,4}\n           [ x x^2; √x sin(x) ]\n       end\njulia> Zygote.gradient(x->sum(f3(x)),3.3)  #  ERROR: Need an adjoint for constructor SMatrix{2, 2, Float64, 4}. Gradient is of type FillArrays.Fill{..."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"It seems like function defs with return-type specifications cause Zygote missing-constructor-adjoint errors even when the constructor "},{"type":"text","text":"rrule","style":{"code":true}},{"type":"text","text":" is defined, but I could be misunderstanding something more basic. In my case, before the code above I have defined "},{"type":"text","text":"rrule","style":{"code":true}},{"type":"text","text":"s for "},{"type":"text","text":"SMatrix","style":{"code":true}},{"type":"text","text":" construction like this\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> ChainRulesCore.rrule(T::Type{<:SMatrix}, x::AbstractMatrix) = ( T(x), dv -> (nothing, dv) )\njulia> ChainRulesCore.rrule(T::Type{<:SMatrix}, xs::Number...) = ( T(xs...), dv -> (nothing, dv...) )\njulia> ChainRules.refresh_rules()\njulia> Zygote.refresh()"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Sorry, probably a dumb question. Any advice or workaround would be much appreciated! Some of the functions causing this error for me are in imported packages, so I'm hoping to avoid this without redefining them."}]}]}],"thread_ts":"1614104611.078100","reply_count":12,"reply_users_count":2,"latest_reply":"1614109465.081000","reply_users":["U6A936746","U01HK5WRVJT"],"subscribed":false},{"client_msg_id":"bf5693a2-d575-4fee-96a1-4078fc21e59f","type":"message","text":"Note: none of the following are the answer but:\n\n&gt; _function defs with return-type specifications_\nTo be clear that code trigger a call to `convert`\nIt is the same as putting a `convert`  right before your thing\nNot that that should be related\n\n---\n&gt;  `(nothing, dv)` \nthis should be `(NO_FIELDS, dv)` similar other uses of `nothing`.\nBut that would either be ignored or  you would get a different error.\n\n---\n\n&gt;  `ChainRules.refresh_rules()`\nThis does nothing for your use case.\nZygote doesn’t use this mechanism.","user":"U6A936746","ts":"1614105083.078400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nvK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Note: none of the following are the answer but:\n\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"function defs with return-type specifications","style":{"italic":true}}]},{"type":"rich_text_section","elements":[{"type":"text","text":"To be clear that code trigger a call to "},{"type":"text","text":"convert","style":{"code":true}},{"type":"text","text":"\nIt is the same as putting a "},{"type":"text","text":"convert","style":{"code":true}},{"type":"text","text":"  right before your thing\nNot that that should be related\n\n---\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":" "},{"type":"text","text":"(nothing, dv)","style":{"code":true}},{"type":"text","text":" "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nthis should be "},{"type":"text","text":"(NO_FIELDS, dv)","style":{"code":true}},{"type":"text","text":" similar other uses of "},{"type":"text","text":"nothing","style":{"code":true}},{"type":"text","text":".\nBut that would either be ignored or  you would get a different error.\n\n---\n\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":" "},{"type":"text","text":"ChainRules.refresh_rules()","style":{"code":true}}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nThis does nothing for your use case.\nZygote doesn’t use this mechanism."}]}]}],"thread_ts":"1614104611.078100","parent_user_id":"U01HK5WRVJT"},{"client_msg_id":"ef86b3a9-18bd-4d90-a568-472b4014de76","type":"message","text":"These look like the right rules.","user":"U6A936746","ts":"1614105098.078600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XCP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"These look like the right rules."}]}]}],"thread_ts":"1614104611.078100","parent_user_id":"U01HK5WRVJT"},{"client_msg_id":"e08f5c37-74f6-4157-875a-866569ce7da2","type":"message","text":"Could be some bug with how Zygote picks up rrules for constructors.\nTry defining the same with ZygoteRules.\nAnd if that works open an issue on Zygote","user":"U6A936746","ts":"1614105142.078800","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1614105162.000000"},"blocks":[{"type":"rich_text","block_id":"EedBF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Could be some bug with how Zygote picks up rrules for constructors.\nTry defining the same with ZygoteRules.\nAnd if that works open an issue on Zygote"}]}]}],"thread_ts":"1614104611.078100","parent_user_id":"U01HK5WRVJT"},{"client_msg_id":"26a0f0c5-323d-49dc-813b-ec9b984e161d","type":"message","text":"wow you are very quick, thanks. i have felt uncertain about how return-type specs in fn/method definitions related to convert for a long time, that is helpful. Also, oops, I converted a batch of StaticArrays-related constructor `Zygote.@adjoint`s to `rrule`s and totally forgot to switch the `nothing`s, thanks for pointing that out.\n\nDefining the same with ZygoteRules would just mean using the old `Zygote.@adjoint` rule def syntax? I'll give that a try.","user":"U01HK5WRVJT","ts":"1614105424.079100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0vrn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"wow you are very quick, thanks. i have felt uncertain about how return-type specs in fn/method definitions related to convert for a long time, that is helpful. Also, oops, I converted a batch of StaticArrays-related constructor"},{"type":"text","text":" Zygote.@adjoint","style":{"code":true}},{"type":"text","text":"s to "},{"type":"text","text":"rrule","style":{"code":true}},{"type":"text","text":"s and totally forgot to switch the "},{"type":"text","text":"nothing","style":{"code":true}},{"type":"text","text":"s, thanks for pointing that out.\n\nDefining the same with ZygoteRules would just mean using the old "},{"type":"text","text":"Zygote.@adjoint","style":{"code":true}},{"type":"text","text":" rule def syntax? I'll give that a try."}]}]}],"thread_ts":"1614104611.078100","parent_user_id":"U01HK5WRVJT"},{"client_msg_id":"38347e6a-f740-4ed1-9595-99048e7be08d","type":"message","text":"yeah,","user":"U6A936746","ts":"1614106021.079300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rMyfy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah,"}]}]}],"thread_ts":"1614104611.078100","parent_user_id":"U01HK5WRVJT"},{"client_msg_id":"44d04589-6888-4108-ba3b-52ec9dd0ba5d","type":"message","text":"The same issue shows up using ZygoteRules. on a fresh julia REPL:\n```julia&gt; using StaticArrays, Zygote\njulia&gt; @Zygote.adjoint (T::Type{&lt;:SMatrix})(xs::Number...) = T(xs...), dv -&gt; (nothing, dv...)\njulia&gt; @Zygote.adjoint (T::Type{&lt;:SMatrix})(x::AbstractMatrix) = T(x), dv -&gt; (nothing, dv)\njulia&gt; Zygote.refresh()\njulia&gt; f2(x) = sum(SMatrix{2,2,Float64,4}(x,x^2,√x,sin(x)))\njulia&gt; function f3(x)::SMatrix{2,2,Float64,4}\n                  [ x x^2; √x sin(x) ]\n              end\njulia&gt; Zygote.gradient(f2,3.3)  #    (6.887761171372725,)\njulia&gt; Zygote.gradient(x-&gt;sum(f3(x)),3.3)   #  ERROR: Need an adjoint for constructor SMatrix{2, 2, Float64, 4}...```\n","user":"U01HK5WRVJT","ts":"1614106292.079500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p=FxQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The same issue shows up using ZygoteRules. on a fresh julia REPL:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using StaticArrays, Zygote\njulia> @Zygote.adjoint (T::Type{<:SMatrix})(xs::Number...) = T(xs...), dv -> (nothing, dv...)\njulia> @Zygote.adjoint (T::Type{<:SMatrix})(x::AbstractMatrix) = T(x), dv -> (nothing, dv)\njulia> Zygote.refresh()\njulia> f2(x) = sum(SMatrix{2,2,Float64,4}(x,x^2,√x,sin(x)))\njulia> function f3(x)::SMatrix{2,2,Float64,4}\n                  [ x x^2; √x sin(x) ]\n              end\njulia> Zygote.gradient(f2,3.3)  #    (6.887761171372725,)\njulia> Zygote.gradient(x->sum(f3(x)),3.3)   #  ERROR: Need an adjoint for constructor SMatrix{2, 2, Float64, 4}..."}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1614104611.078100","parent_user_id":"U01HK5WRVJT"},{"client_msg_id":"28db3bf9-d944-4ac2-a6ef-16092ca4e21a","type":"message","text":"of course without defining those rules the `gradient` call on `f2` also fails","user":"U01HK5WRVJT","ts":"1614106393.079700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"34MbI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"of course without defining those rules the "},{"type":"text","text":"gradient","style":{"code":true}},{"type":"text","text":" call on "},{"type":"text","text":"f2","style":{"code":true}},{"type":"text","text":" also fails"}]}]}],"thread_ts":"1614104611.078100","parent_user_id":"U01HK5WRVJT"},{"client_msg_id":"f684d66a-fe46-4d8f-8b71-3034a54f08db","type":"message","text":"try defining ity specificically on `::Type{SMatrix{2, 2, Float64, 4}}`\nShouldn’t be any different","user":"U6A936746","ts":"1614106778.079900","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1614106792.000000"},"blocks":[{"type":"rich_text","block_id":"zrTU1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"try defining ity specificically on "},{"type":"text","text":"::Type{SMatrix{2, 2, Float64, 4}}","style":{"code":true}},{"type":"text","text":"\nShouldn’t be any different"}]}]}],"thread_ts":"1614104611.078100","parent_user_id":"U01HK5WRVJT"},{"client_msg_id":"fddbf031-8ab7-4a5f-bc2d-be90deda37f3","type":"message","text":"yea, specifying the constructor type params in the `Zygote.@adjoint` rule and refreshing had no effect. I also realized I should compare more directly with the constructor method for a `Matrix` rather than a `Tuple`. Zygote.gradient still works if the constructor is explicit within the fn def, just not when the conversion is triggered by a return-type-spec (as in f3):\n```julia&gt; f4(x) = SMatrix{2,2,Float64,4}([ x x^2; √x sin(x) ])\njulia&gt; Zygote.gradient(x-&gt;sum(f4(x)),3.3)   #  (6.887761171372725,)```\nIt's as if the convert call can't see new rules? I guess I'll open an issue with Zygote.","user":"U01HK5WRVJT","ts":"1614107503.080200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"P/+F","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yea, specifying the constructor type params in the "},{"type":"text","text":"Zygote.@adjoint","style":{"code":true}},{"type":"text","text":" rule and refreshing had no effect. I also realized I should compare more directly with the constructor method for a "},{"type":"text","text":"Matrix","style":{"code":true}},{"type":"text","text":" rather than a "},{"type":"text","text":"Tuple","style":{"code":true}},{"type":"text","text":". Zygote.gradient still works if the constructor is explicit within the fn def, just not when the conversion is triggered by a return-type-spec (as in f3):\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> f4(x) = SMatrix{2,2,Float64,4}([ x x^2; √x sin(x) ])\njulia> Zygote.gradient(x->sum(f4(x)),3.3)   #  (6.887761171372725,)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"It's as if the convert call can't see new rules? I guess I'll open an issue with Zygote."}]}]}],"thread_ts":"1614104611.078100","parent_user_id":"U01HK5WRVJT"},{"client_msg_id":"9a404b55-950d-4645-ae03-f18b38b0aa82","type":"message","text":"Thanks for your reply, and more broadly thanks for doing so much work to support ChainRules and Julia AD in general. I've been learning to use it recently and I am blown away by how powerful and accessible it is. You and the JuliaDiff cohort do amazing work.","user":"U01HK5WRVJT","ts":"1614107620.080400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"m77A=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks for your reply, and more broadly thanks for doing so much work to support ChainRules and Julia AD in general. I've been learning to use it recently and I am blown away by how powerful and accessible it is. You and the JuliaDiff cohort do amazing work."}]}]}],"thread_ts":"1614104611.078100","parent_user_id":"U01HK5WRVJT"},{"client_msg_id":"e8b3de90-3031-453b-a3b9-eb270a1f10cb","type":"message","text":"&gt;  Zygote.gradient still works if the constructor is explicit within the fn def, just not when the conversion is triggered by a return-type-spec (as in f3):\nWoah. Weird","user":"U6A936746","ts":"1614107808.080600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uH6YA","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":" Zygote.gradient still works if the constructor is explicit within the fn def, just not when the conversion is triggered by a return-type-spec (as in f3):"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nWoah. Weird"}]}]}],"thread_ts":"1614104611.078100","parent_user_id":"U01HK5WRVJT"},{"client_msg_id":"ab606f30-4c1c-4e06-ae90-47aa2640134a","type":"message","text":"Lol if you're surprised then I would _never_ have figured this out. I opened <https://github.com/FluxML/Zygote.jl/issues/908> (my first issue!)","user":"U01HK5WRVJT","ts":"1614109465.081000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bdr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Lol if you're surprised then I would "},{"type":"text","text":"never","style":{"italic":true}},{"type":"text","text":" have figured this out. I opened "},{"type":"link","url":"https://github.com/FluxML/Zygote.jl/issues/908"},{"type":"text","text":" (my first issue!)"}]}]}],"thread_ts":"1614104611.078100","parent_user_id":"U01HK5WRVJT"}]