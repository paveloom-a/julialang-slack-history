[{"client_msg_id":"e7c14708-e746-484f-88a9-8d82301ac1c2","type":"message","text":"Does the dual number approach extend to complex dual numbers (a 4-tuple with partial real and imag values)? I would have thought that it should, but I haven't seen support for it and a quick google didn't show anything. The use case I have in mind is eigen-/schur decompositions. I was taking a look at GenericSchur.jl to see if I could adapt it to support Duals, but dealing with complex numbers was the sticking point for me.","user":"U017YGFQTE3","ts":"1611915451.077100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5zK5p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does the dual number approach extend to complex dual numbers (a 4-tuple with partial real and imag values)? I would have thought that it should, but I haven't seen support for it and a quick google didn't show anything. The use case I have in mind is eigen-/schur decompositions. I was taking a look at GenericSchur.jl to see if I could adapt it to support Duals, but dealing with complex numbers was the sticking point for me."}]}]}],"thread_ts":"1611915451.077100","reply_count":6,"reply_users_count":3,"latest_reply":"1611918820.079800","reply_users":["UD0NS8PDF","U017YGFQTE3","UHDQQ4GN6"],"subscribed":false},{"client_msg_id":"fe476c35-4e3d-4426-ad3a-790c2d0ef4a2","type":"message","text":"I think Dual numbers do work with complex numbers now, maybe you need a sufficiently recent Julia version. I think `Complex{Dual}` is the preferred order. But most of ForwardDiff does not really handle them (yet).","user":"UD0NS8PDF","ts":"1611915669.077200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tuMl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think Dual numbers do work with complex numbers now, maybe you need a sufficiently recent Julia version. I think "},{"type":"text","text":"Complex{Dual}","style":{"code":true}},{"type":"text","text":" is the preferred order. But most of ForwardDiff does not really handle them (yet)."}]}]}],"thread_ts":"1611915451.077100","parent_user_id":"U017YGFQTE3"},{"client_msg_id":"f71f03d9-34b4-46e9-9fa3-1aa2532f8fe9","type":"message","text":"Ahh I see, that's great. Thanks!","user":"U017YGFQTE3","ts":"1611915796.077400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tJKq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ahh I see, that's great. Thanks!"}]}]}],"thread_ts":"1611915451.077100","parent_user_id":"U017YGFQTE3"},{"client_msg_id":"e3a26e41-c98e-4bad-9efb-1f79496477c0","type":"message","text":"There's also a known differentiation rule for `eigen` that's independent of its implementation (see <https://github.com/JuliaDiff/ChainRules.jl/blob/v0.7.49/src/rulesets/LinearAlgebra/factorization.jl#L78-L100>). I don't know of a rule for the Schur decomposition.","user":"UHDQQ4GN6","ts":"1611916394.077600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"npGq5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There's also a known differentiation rule for "},{"type":"text","text":"eigen","style":{"code":true}},{"type":"text","text":" that's independent of its implementation (see "},{"type":"link","url":"https://github.com/JuliaDiff/ChainRules.jl/blob/v0.7.49/src/rulesets/LinearAlgebra/factorization.jl#L78-L100"},{"type":"text","text":"). I don't know of a rule for the Schur decomposition."}]}]}],"thread_ts":"1611915451.077100","parent_user_id":"U017YGFQTE3"},{"client_msg_id":"937e13f8-b3c7-4ef4-b14d-d54826a19633","type":"message","text":"So, say you have `schur(A,B) = Q,S,T,Z`\nwhere `QSZ' = A, QTZ' = B, Q'Q = I, Z'Z = I`, and `S,T` are not expected to be invertible. The differentiation rules for `S,T` can be found pretty easily just from `S = Q'AZ` and so on.\n\nBut when you want to find the rule for say `Z`, you would want to differentiate  `SZ' = Q'A`  and/or  `TZ' = Q'B` where `S,T` are not expected to be invertible.\n\nIs there a simple rule for differentiating this type of expression?","user":"U017YGFQTE3","ts":"1611918430.079400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Kuo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So, say you have "},{"type":"text","text":"schur(A,B) = Q,S,T,Z","style":{"code":true}},{"type":"text","text":"\nwhere "},{"type":"text","text":"QSZ' = A, QTZ' = B, Q'Q = I, Z'Z = I","style":{"code":true}},{"type":"text","text":", and "},{"type":"text","text":"S,T","style":{"code":true}},{"type":"text","text":" are not expected to be invertible. The differentiation rules for "},{"type":"text","text":"S,T","style":{"code":true}},{"type":"text","text":" can be found pretty easily just from "},{"type":"text","text":"S = Q'AZ","style":{"code":true}},{"type":"text","text":" and so on.\n\nBut when you want to find the rule for say "},{"type":"text","text":"Z","style":{"code":true}},{"type":"text","text":", you would want to differentiate  "},{"type":"text","text":"SZ' = Q'A","style":{"code":true}},{"type":"text","text":"  and/or  "},{"type":"text","text":"TZ' = Q'B","style":{"code":true}},{"type":"text","text":" where "},{"type":"text","text":"S,T","style":{"code":true}},{"type":"text","text":" are not expected to be invertible.\n\nIs there a simple rule for differentiating this type of expression?"}]}]}],"thread_ts":"1611915451.077100","parent_user_id":"U017YGFQTE3"},{"client_msg_id":"e89c34e0-49c9-423e-99e0-50cf37060063","type":"message","text":"I don't know of one. With the eigendecomposition, we know enough about the structure to manipulate and solve for the pushforward of the eigenvectors (under some assumptions, mainly that all eigenvalues are unique). With Schur, I don't think `S` and `T` are sufficiently constrained for us to do the same.","user":"UHDQQ4GN6","ts":"1611918794.079600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wZkte","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't know of one. With the eigendecomposition, we know enough about the structure to manipulate and solve for the pushforward of the eigenvectors (under some assumptions, mainly that all eigenvalues are unique). With Schur, I don't think "},{"type":"text","text":"S","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"T","style":{"code":true}},{"type":"text","text":" are sufficiently constrained for us to do the same."}]}]}],"thread_ts":"1611915451.077100","parent_user_id":"U017YGFQTE3"},{"client_msg_id":"0d6761fa-a6b2-4a2d-9341-58507a81c1ab","type":"message","text":"(and even then, I don't know of a rule for generalized eigendecomposition, just the usual one)","user":"UHDQQ4GN6","ts":"1611918820.079800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Y=tvr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(and even then, I don't know of a rule for generalized eigendecomposition, just the usual one)"}]}]}],"thread_ts":"1611915451.077100","parent_user_id":"U017YGFQTE3"}]