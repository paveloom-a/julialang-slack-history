[{"client_msg_id":"2ea397d5-193b-47c7-b698-9de90559b94d","type":"message","text":"Is there any reversediff style package that supports array mutation? My problem has 300 input variables and 1 output. A function evaluation takes 2.5s on my machine. ForwardDiff takes quite some time.","user":"UMC2RHKLZ","ts":"1614472691.140600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NfZFy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there any reversediff style package that supports array mutation? My problem has 300 input variables and 1 output. A function evaluation takes 2.5s on my machine. ForwardDiff takes quite some time."}]}]}],"thread_ts":"1614472691.140600","reply_count":9,"reply_users_count":2,"latest_reply":"1614474259.143200","reply_users":["UCD4Z3NJZ","UMC2RHKLZ"],"subscribed":false},{"client_msg_id":"2679099f-3e21-4547-9024-56694e7bc8ff","type":"message","text":"Do you mind rewriting your code with NiLang? If your code is short maybe I can rewrite it for you. <https://github.com/GiggleLiu/NiLang.jl>","user":"UCD4Z3NJZ","ts":"1614473047.140800","team":"T68168MUP","edited":{"user":"UCD4Z3NJZ","ts":"1614473074.000000"},"blocks":[{"type":"rich_text","block_id":"D03","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Do you mind rewriting your code with NiLang? If your code is short maybe I can rewrite it for you. "},{"type":"link","url":"https://github.com/GiggleLiu/NiLang.jl"}]}]}],"thread_ts":"1614472691.140600","parent_user_id":"UMC2RHKLZ"},{"client_msg_id":"b3a35582-2492-44a4-a7fd-a1481638078c","type":"message","text":"There is a tradeoff in reverse mode AD. If you want fast BLAS, then inplace operations might be forbidden. Otherwise, BLAS might be not usable.","user":"UCD4Z3NJZ","ts":"1614473263.141100","team":"T68168MUP","edited":{"user":"UCD4Z3NJZ","ts":"1614473334.000000"},"blocks":[{"type":"rich_text","block_id":"V8Q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There is a tradeoff in reverse mode AD. If you want fast BLAS, then inplace operations might be forbidden. Otherwise, BLAS might be not usable."}]}]}],"thread_ts":"1614472691.140600","parent_user_id":"UMC2RHKLZ"},{"client_msg_id":"e9d868e3-5f38-41d5-8777-fe80bfa0a0c5","type":"message","text":"This is because it is hard to let reverse mode AD handle effective code properly.","user":"UCD4Z3NJZ","ts":"1614473276.141300","team":"T68168MUP","edited":{"user":"UCD4Z3NJZ","ts":"1614473323.000000"},"blocks":[{"type":"rich_text","block_id":"NXl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is because it is hard to let reverse mode AD handle effective code properly."}]}]}],"thread_ts":"1614472691.140600","parent_user_id":"UMC2RHKLZ","reactions":[{"name":"+1","users":["UMC2RHKLZ"],"count":1}]},{"client_msg_id":"95e1b121-0cdf-4f39-bd28-3f37333f049f","type":"message","text":"Interesting package! My code is somewhat long now unfortunately and not yet open (soon!)\n\nI also use shared-read-writes often, so there may be some non-trivial changes to port to NiLang.","user":"UMC2RHKLZ","ts":"1614473494.141700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GQKl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Interesting package! My code is somewhat long now unfortunately and not yet open (soon!)\n\nI also use shared-read-writes often, so there may be some non-trivial changes to port to NiLang."}]}]}],"thread_ts":"1614472691.140600","parent_user_id":"UMC2RHKLZ"},{"client_msg_id":"090e4859-027e-4057-b95e-62d358b5076e","type":"message","text":"Actually, one can use NiLang to write the backward rule to accelerate the mutation part. It you can wrap your mutation part as a function, I will be pleased to help you rewrite this part (you might be interested in this example: <https://giggleliu.github.io/NiLang.jl/stable/examples/port_zygote/>). Also, please take a look at the `Buffer` in Zygote, it might the easist solution to your problem.","user":"UCD4Z3NJZ","ts":"1614473714.142000","team":"T68168MUP","edited":{"user":"UCD4Z3NJZ","ts":"1614473725.000000"},"blocks":[{"type":"rich_text","block_id":"oxS2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Actually, one can use NiLang to write the backward rule to accelerate the mutation part. It you can wrap your mutation part as a function, I will be pleased to help you rewrite this part (you might be interested in this example: "},{"type":"link","url":"https://giggleliu.github.io/NiLang.jl/stable/examples/port_zygote/"},{"type":"text","text":"). Also, please take a look at the "},{"type":"text","text":"Buffer","style":{"code":true}},{"type":"text","text":" in Zygote, it might the easist solution to your problem."}]}]}],"thread_ts":"1614472691.140600","parent_user_id":"UMC2RHKLZ"},{"client_msg_id":"5176f26f-7ef8-4dfe-9bef-4f5e2ecc5c84","type":"message","text":"`shared-read-writes`  cause trouble not only in NiLang, but also in any kind of parallelization. Please be careful about it. It is not only an issue of NiLang, but also an issue of all AD packages.","user":"UCD4Z3NJZ","ts":"1614473836.142300","team":"T68168MUP","edited":{"user":"UCD4Z3NJZ","ts":"1614473917.000000"},"blocks":[{"type":"rich_text","block_id":"ya8xM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"shared-read-writes","style":{"code":true}},{"type":"text","text":"  cause trouble not only in NiLang, but also in any kind of parallelization. Please be careful about it. It is not only an issue of NiLang, but also an issue of all AD packages."}]}]}],"thread_ts":"1614472691.140600","parent_user_id":"UMC2RHKLZ"},{"client_msg_id":"9f6acc83-8770-495d-b8c6-e8edd7161330","type":"message","text":"I see, I mean only that I do `x .= f(x)` quite often. This is different from the usual shared access patterns I know about in parallel programming, but from the docs it seemed that NiLang doesn't support this without intermediate variables.","user":"UMC2RHKLZ","ts":"1614473981.142800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QuY1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see, I mean only that I do "},{"type":"text","text":"x .= f(x)","style":{"code":true}},{"type":"text","text":" quite often. This is different from the usual shared access patterns I know about in parallel programming, but from the docs it seemed that NiLang doesn't support this without intermediate variables."}]}]}],"thread_ts":"1614472691.140600","parent_user_id":"UMC2RHKLZ"},{"client_msg_id":"b4fa8180-3d7f-4760-b0ed-d878df588cd5","type":"message","text":"Oh, I see what you want. You are right, NiLang requires you to create intermediate variables explicitly. I think you can just use `Buffer`  type in Zygote. Have you tried this?","user":"UCD4Z3NJZ","ts":"1614474218.143000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=9mo6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh, I see what you want. You are right, NiLang requires you to create intermediate variables explicitly. I think you can just use "},{"type":"text","text":"Buffer","style":{"code":true}},{"type":"text","text":"  type in Zygote. Have you tried this?"}]}]}],"thread_ts":"1614472691.140600","parent_user_id":"UMC2RHKLZ"},{"client_msg_id":"59784d1d-8019-4e1f-8d02-757e9e55fe31","type":"message","text":"No, I'll check this out now. Thanks!","user":"UMC2RHKLZ","ts":"1614474259.143200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"u3YJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No, I'll check this out now. Thanks!"}]}]}],"thread_ts":"1614472691.140600","parent_user_id":"UMC2RHKLZ"}]