[{"client_msg_id":"b4dd4e54-6b89-496c-b330-985c0655a2cb","type":"message","text":"Hi. I'm trying understand AD starting from the basics. Right now I am going through <https://github.com/MikeInnes/diff-zoo/blob/notebooks/intro.ipynb> , which is super helpful btw! :)\nThere is an example comparing interpolated expressions and non-interpolated expressions in their behaviour in the following code. My question is this: Given `y2` and `y3` as below, how do I actually distinguish them from each other in general?\n```julia&gt; printstructure(x, _, _) = x\nprintstructure (generic function with 1 method)\n\njulia&gt; function printstructure(ex::Expr, cache = IdDict(), n = Ref(0))\n         haskey(cache, ex) &amp;&amp; return cache[ex]\n         args = map(x -&gt; printstructure(x, cache, n), ex.args)\n         cache[ex] = sym = Symbol(:y, n[] += 1)\n         println(:($sym = $(Expr(ex.head, args...))))\n         return sym\n       end\nprintstructure (generic function with 4 methods)\n\njulia&gt; y1 = :(1 * 2)\n:(1 * 2)\n\njulia&gt; y2 = :($y1 + $y1 + $y1 + $y1)\n:(1 * 2 + 1 * 2 + 1 * 2 + 1 * 2)\n\njulia&gt; printstructure(y2);\ny1 = 1 * 2\ny2 = y1 + y1 + y1 + y1\n\njulia&gt; y3 = :($(:(1 * 2)) + $(:(1 * 2)) + $(:(1 * 2)) + $(:(1 * 2)))\n:(1 * 2 + 1 * 2 + 1 * 2 + 1 * 2)\n\njulia&gt; y2 == y3\ntrue\n\njulia&gt; y2 === y3\nfalse\n\njulia&gt; printstructure(y3);\ny1 = 1 * 2\ny2 = 1 * 2\ny3 = 1 * 2\ny4 = 1 * 2\ny5 = y1 + y2 + y3 + y4\n\njulia&gt;```\nAlso, can someone explain the following strange behaviour? Why is `y1.args` bigger than `y1` itself?\n```julia&gt; sizeof(y1)\n16\n\njulia&gt; sizeof(y1.args)\n24```","user":"U0190AJCYK0","ts":"1614434572.134500","team":"T68168MUP","edited":{"user":"U0190AJCYK0","ts":"1614434989.000000"},"blocks":[{"type":"rich_text","block_id":"IR5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi. I'm trying understand AD starting from the basics. Right now I am going through "},{"type":"link","url":"https://github.com/MikeInnes/diff-zoo/blob/notebooks/intro.ipynb"},{"type":"text","text":" , which is super helpful btw! :)\nThere is an example comparing interpolated expressions and non-interpolated expressions in their behaviour in the following code. My question is this: Given "},{"type":"text","text":"y2","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"y3","style":{"code":true}},{"type":"text","text":" as below, how do I actually distinguish them from each other in general?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> printstructure(x, _, _) = x\nprintstructure (generic function with 1 method)\n\njulia> function printstructure(ex::Expr, cache = IdDict(), n = Ref(0))\n         haskey(cache, ex) && return cache[ex]\n         args = map(x -> printstructure(x, cache, n), ex.args)\n         cache[ex] = sym = Symbol(:y, n[] += 1)\n         println(:($sym = $(Expr(ex.head, args...))))\n         return sym\n       end\nprintstructure (generic function with 4 methods)\n\njulia> y1 = :(1 * 2)\n:(1 * 2)\n\njulia> y2 = :($y1 + $y1 + $y1 + $y1)\n:(1 * 2 + 1 * 2 + 1 * 2 + 1 * 2)\n\njulia> printstructure(y2);\ny1 = 1 * 2\ny2 = y1 + y1 + y1 + y1\n\njulia> y3 = :($(:(1 * 2)) + $(:(1 * 2)) + $(:(1 * 2)) + $(:(1 * 2)))\n:(1 * 2 + 1 * 2 + 1 * 2 + 1 * 2)\n\njulia> y2 == y3\ntrue\n\njulia> y2 === y3\nfalse\n\njulia> printstructure(y3);\ny1 = 1 * 2\ny2 = 1 * 2\ny3 = 1 * 2\ny4 = 1 * 2\ny5 = y1 + y2 + y3 + y4\n\njulia>"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Also, can someone explain the following strange behaviour? Why is "},{"type":"text","text":"y1.args","style":{"code":true}},{"type":"text","text":" bigger than "},{"type":"text","text":"y1","style":{"code":true}},{"type":"text","text":" itself?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> sizeof(y1)\n16\n\njulia> sizeof(y1.args)\n24"}]}]}],"thread_ts":"1614434572.134500","reply_count":1,"reply_users_count":1,"latest_reply":"1614435223.134700","reply_users":["U6A936746"],"subscribed":false},{"client_msg_id":"5f158f7d-93aa-4028-9eac-733c037b263b","type":"message","text":"`sizeof` does not recursive into references. For that you need `Base.summarysize`","user":"U6A936746","ts":"1614435223.134700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ohvu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"sizeof","style":{"code":true}},{"type":"text","text":" does not recursive into references. For that you need "},{"type":"text","text":"Base.summarysize","style":{"code":true}}]}]}],"thread_ts":"1614434572.134500","parent_user_id":"U0190AJCYK0"}]