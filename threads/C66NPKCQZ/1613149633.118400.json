[{"client_msg_id":"c3352d9f-3fa3-46f3-ac9b-f2b29cb2a644","type":"message","text":"Is there any package that calculates the modified Bessel's functions in arbitrary precision? It looks like SpecialFunctions.jl has support for BigFloat types for besselj and bessely but not for besseli and besselk...","user":"U01FSUY7YES","ts":"1613149633.118400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6YUuI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there any package that calculates the modified Bessel's functions in arbitrary precision? It looks like SpecialFunctions.jl has support for BigFloat types for besselj and bessely but not for besseli and besselk..."}]}]}],"thread_ts":"1613149633.118400","reply_count":4,"reply_users_count":2,"latest_reply":"1613228119.120100","reply_users":["U01FSUY7YES","U012FH66MFW"],"subscribed":false},{"client_msg_id":"75d7d7d8-1812-41f2-90c0-cf92c4d85979","type":"message","text":"This works quite well for first kind solutions for any nu and x:\n```function besseli(nu::Int64, x::BigFloat)\n\n    nu = abs(nu)\n    b = big(0.0)\n\n    for k = big(0):big(1000)\n        b += (x^2 / 4)^k / (factorial(k)*gamma(nu + k + 1))\n    end\n    return b * (x/2)^nu\nend```","user":"U01FSUY7YES","ts":"1613149823.118500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"a5U","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This works quite well for first kind solutions for any nu and x:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function besseli(nu::Int64, x::BigFloat)\n\n    nu = abs(nu)\n    b = big(0.0)\n\n    for k = big(0):big(1000)\n        b += (x^2 / 4)^k / (factorial(k)*gamma(nu + k + 1))\n    end\n    return b * (x/2)^nu\nend"}]}]}],"thread_ts":"1613149633.118400","parent_user_id":"U01FSUY7YES"},{"client_msg_id":"8ba7403b-d4b5-406c-a8e0-bb8510a3818d","type":"message","text":"... but I'm a little confused on the relation between the modified first and second kind. The definition is something like `besselk(ν, x) =  π/(2sin(ν*π)) * (besseli(-ν, x) - besseli(ν, x))` but it appears that the positive and negative orders are equivalent?","user":"U01FSUY7YES","ts":"1613150276.118700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oBy1j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"... but I'm a little confused on the relation between the modified first and second kind. The definition is something like "},{"type":"text","text":"besselk(ν, x) =  π/(2sin(ν*π)) * (besseli(-ν, x) - besseli(ν, x))","style":{"code":true}},{"type":"text","text":" but it appears that the positive and negative orders are equivalent?"}]}]}],"thread_ts":"1613149633.118400","parent_user_id":"U01FSUY7YES"},{"client_msg_id":"5231d248-c34b-4c0b-a06b-c0c5e351b002","type":"message","text":"Nemo.jl can do it (but beware of <https://github.com/Nemocas/Nemo.jl/issues/954> )","user":"U012FH66MFW","ts":"1613179899.119000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"brGTR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Nemo.jl can do it (but beware of "},{"type":"link","url":"https://github.com/Nemocas/Nemo.jl/issues/954"},{"type":"text","text":" )"}]}]}],"thread_ts":"1613149633.118400","parent_user_id":"U01FSUY7YES","reactions":[{"name":"white_check_mark","users":["U01FSUY7YES"],"count":1}]},{"client_msg_id":"0AEE98F8-71DA-4A88-87FC-095B85866A7B","type":"message","text":"Ahh perfect! Thanks so much (and thank you for the warning) ","user":"U01FSUY7YES","ts":"1613228119.120100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TMZB3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ahh perfect! Thanks so much (and thank you for the warning) "}]}]}],"thread_ts":"1613149633.118400","parent_user_id":"U01FSUY7YES"}]