[{"client_msg_id":"325f4e87-b81e-40fd-81c4-b061e1aa185d","type":"message","text":"made a thing: <https://github.com/jakobnissen/ScanByte.jl> . It's a package for scanning a piece of memory for the first occurence of a byte from a set of bytes. I made it very, very fast, like ridiculous fast, so it can be used for things like a Regex implementation or a text search engine or whatever. I'm using it for making parsers myself.","user":"U7HAYKY9X","ts":"1611441247.001200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"D9Iq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"made a thing: "},{"type":"link","url":"https://github.com/jakobnissen/ScanByte.jl"},{"type":"text","text":" . It's a package for scanning a piece of memory for the first occurence of a byte from a set of bytes. I made it very, very fast, like ridiculous fast, so it can be used for things like a Regex implementation or a text search engine or whatever. I'm using it for making parsers myself."}]}]}],"thread_ts":"1611441247.001200","reply_count":8,"reply_users_count":2,"latest_reply":"1611607230.002700","reply_users":["U69J94HT9","U7HAYKY9X"],"subscribed":false},{"client_msg_id":"b1c4c363-9829-4766-b67c-88870d22c277","type":"message","text":"is there a fallback for when SSE2 isn't available (e.g., aarch64)?","user":"U69J94HT9","ts":"1611599249.001300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZbEOP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is there a fallback for when SSE2 isn't available (e.g., aarch64)?"}]}]}],"thread_ts":"1611441247.001200","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"7e3857de-6175-4ea6-9913-51d0dc7698e7","type":"message","text":"Nope, sorry :( I would love to add that, but it might be too hard. Many of the algorithms depend on vpshufb being present.","user":"U7HAYKY9X","ts":"1611599648.001500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Wnd9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Nope, sorry :( I would love to add that, but it might be too hard. Many of the algorithms depend on vpshufb being present."}]}]}],"thread_ts":"1611441247.001200","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"c7d043c3-0afb-4820-8225-61cb0fd04272","type":"message","text":"Out of curiosity, which CPUs doesn't have SSE2?","user":"U7HAYKY9X","ts":"1611599940.001700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pspKe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Out of curiosity, which CPUs doesn't have SSE2?"}]}]}],"thread_ts":"1611441247.001200","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"b2b55143-6b21-4639-993a-a6252e085320","type":"message","text":"ARM ones, including the new Macs\n\nThey have alternate instructions called NEON","user":"U69J94HT9","ts":"1611604363.001900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4bjff","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ARM ones, including the new Macs\n\nThey have alternate instructions called NEON"}]}]}],"thread_ts":"1611441247.001200","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"1142387b-088c-4255-98fe-a589a2e33dbc","type":"message","text":"check out this and especially the Related Projects section: <https://github.com/DLTcollab/sse2neon>","user":"U69J94HT9","ts":"1611604373.002100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AP7=K","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"check out this and especially the Related Projects section: "},{"type":"link","url":"https://github.com/DLTcollab/sse2neon"}]}]}],"thread_ts":"1611441247.001200","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"cf919735-dd4d-47d9-b4fb-cf725ee6d1b3","type":"message","text":"By a fallback I meant a slow fallback that didn't use the same algorithm, just gave the same answer for e.g. memchr\n\nAlthough I guess a package using ScanByte could make that choice itself","user":"U69J94HT9","ts":"1611604571.002300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"30E+v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"By a fallback I meant a slow fallback that didn't use the same algorithm, just gave the same answer for e.g. memchr\n\nAlthough I guess a package using ScanByte could make that choice itself"}]}]}],"thread_ts":"1611441247.001200","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"903de850-cbc5-4dea-acbf-3575025a0fa9","type":"message","text":"Hm, it does look like ARM's TBL instructions are equivalent to vpshufb, so it could also be made fast for ARM. But I don't have an ARM computer, so I can't test it","user":"U7HAYKY9X","ts":"1611606908.002500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"G2o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hm, it does look like ARM's TBL instructions are equivalent to vpshufb, so it could also be made fast for ARM. But I don't have an ARM computer, so I can't test it"}]}]}],"thread_ts":"1611441247.001200","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"b039fcdc-76de-4c85-8d4b-9351dc222902","type":"message","text":"Maybe I should add a platform-agnostic fallback using SIMD.jl","user":"U7HAYKY9X","ts":"1611607230.002700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gJo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe I should add a platform-agnostic fallback using SIMD.jl"}]}]}],"thread_ts":"1611441247.001200","parent_user_id":"U7HAYKY9X","reactions":[{"name":"+1","users":["U69J94HT9"],"count":1}]}]