[{"client_msg_id":"14395d5f-157d-4658-a442-e4eda8c220a2","type":"message","text":"I am trying to most efficiently solve a linear ODE (of ~100 state variables). I need to calculate its solution at many, evenly spaced timepoints. The twist is that the actual output of the model is the sum of many of the state variables (e.g. sum of the first 50 is the first observable, then the second 50 is the second observable). This gives rise to a weakly oscillatory system with overall exponential decay or growth. (This is a way to express Gamma-distributed delay equations using the <https://arxiv.org/abs/1808.07571|LCT>.)\n\nSo far, just calculating `expm(A*δt)` has been most efficient, but is by far the slowest part of my code. I've tried Krylov methods in ExponentialUtilities.jl, and using `LawsonEuler` in DiffEq.jl, which end up slower. Some matrix decomposition approach is temping—for example, I could express the sum within the eigenvectors—but <https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwjI2oSEycHuAhVByaQKHfgqCqsQFjAAegQIAhAC&amp;url=https%3A%2F%2Fwww.cs.cornell.edu%2Fcv%2FResearchPDF%2F19ways%2B.pdf&amp;usg=AOvVaw2rq2d6snwBYEz5ZB1HQwV1|suffer from roundoff error>. Am I missing something? It seems like this would come up when efficiently solving large linear systems as approximations of non-linear systems, like with the Koopman Op...","user":"U010BJMDXGX","ts":"1611938553.070500","team":"T68168MUP","edited":{"user":"U010BJMDXGX","ts":"1611938583.000000"},"blocks":[{"type":"rich_text","block_id":"rSF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am trying to most efficiently solve a linear ODE (of ~100 state variables). I need to calculate its solution at many, evenly spaced timepoints. The twist is that the actual output of the model is the sum of many of the state variables (e.g. sum of the first 50 is the first observable, then the second 50 is the second observable). This gives rise to a weakly oscillatory system with overall exponential decay or growth. (This is a way to express Gamma-distributed delay equations using the "},{"type":"link","url":"https://arxiv.org/abs/1808.07571","text":"LCT"},{"type":"text","text":".)\n\nSo far, just calculating "},{"type":"text","text":"expm(A*δt)","style":{"code":true}},{"type":"text","text":" has been most efficient, but is by far the slowest part of my code. I've tried Krylov methods in ExponentialUtilities.jl, and using "},{"type":"text","text":"LawsonEuler","style":{"code":true}},{"type":"text","text":" in DiffEq.jl, which end up slower. Some matrix decomposition approach is temping—for example, I could express the sum within the eigenvectors—but "},{"type":"link","url":"https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwjI2oSEycHuAhVByaQKHfgqCqsQFjAAegQIAhAC&url=https%3A%2F%2Fwww.cs.cornell.edu%2Fcv%2FResearchPDF%2F19ways%2B.pdf&usg=AOvVaw2rq2d6snwBYEz5ZB1HQwV1","text":"suffer from roundoff error"},{"type":"text","text":". Am I missing something? It seems like this would come up when efficiently solving large linear systems as approximations of non-linear systems, like with the Koopman Op..."}]}]}],"thread_ts":"1611938553.070500","reply_count":18,"reply_users_count":4,"latest_reply":"1612201686.081800","reply_users":["U9Z3H4H5F","U010BJMDXGX","U9MD78Z9N","U69BL50BF"],"subscribed":false},{"client_msg_id":"9507fe92-096b-49a2-be17-274fa887a4ae","type":"message","text":"since you're not interested in computing all states but only linear combinations, it can be beneficial to directly compute w^T exp(At) v (that is the motivation of issue <https://github.com/SciML/ExponentialUtilities.jl/issues/47> )","user":"U9Z3H4H5F","ts":"1611944579.071000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rQm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"since you're not interested in computing all states but only linear combinations, it can be beneficial to directly compute w^T exp(At) v (that is the motivation of issue "},{"type":"link","url":"https://github.com/SciML/ExponentialUtilities.jl/issues/47"},{"type":"text","text":" )"}]}]}],"thread_ts":"1611938553.070500","parent_user_id":"U010BJMDXGX"},{"client_msg_id":"d9b18e3a-9ef7-4779-80d7-5fbebdbad9dd","type":"message","text":"is your initial states a single point? or you have a distribution?","user":"U9Z3H4H5F","ts":"1611944646.071200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4TO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is your initial states a single point? or you have a distribution?"}]}]}],"thread_ts":"1611938553.070500","parent_user_id":"U010BJMDXGX"},{"client_msg_id":"533bcfa9-a23d-453f-b9e3-319582bede81","type":"message","text":"This would be perfect! The initial state is a single point. Have you made any progress on an implementation within ExpUtils.jl?","user":"U010BJMDXGX","ts":"1611947398.071400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6W=c","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This would be perfect! The initial state is a single point. Have you made any progress on an implementation within ExpUtils.jl?"}]}]}],"thread_ts":"1611938553.070500","parent_user_id":"U010BJMDXGX"},{"client_msg_id":"1fdcf5f8-38b6-4a97-8277-9bdb30b168fc","type":"message","text":"i'm still very interested in that feature , but no, i didn't work in it for lack of time.","user":"U9Z3H4H5F","ts":"1611947667.071600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0ahd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i'm still very interested in that feature , but no, i didn't work in it for lack of time."}]}]}],"thread_ts":"1611938553.070500","parent_user_id":"U010BJMDXGX"},{"client_msg_id":"115c7616-9bf8-44df-9c4b-bf2354686e21","type":"message","text":"however from my experience Krylov approach starts to give an advantage one order of magnitude larger than the system that you have. it depends on how sparse the system is too","user":"U9Z3H4H5F","ts":"1611947753.071800","team":"T68168MUP","edited":{"user":"U9Z3H4H5F","ts":"1611947849.000000"},"blocks":[{"type":"rich_text","block_id":"OYC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"however from my experience Krylov approach starts to give an advantage one order of magnitude larger than the system that you have. it depends on how sparse the system is too"}]}]}],"thread_ts":"1611938553.070500","parent_user_id":"U010BJMDXGX"},{"client_msg_id":"914e2cc8-2a26-4488-9835-1baadb49e4ca","type":"message","text":"what solver are you using for `x' = A*x`  ?","user":"U9Z3H4H5F","ts":"1611947776.072000","team":"T68168MUP","edited":{"user":"U9Z3H4H5F","ts":"1611947790.000000"},"blocks":[{"type":"rich_text","block_id":"cmym","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what solver are you using for "},{"type":"text","text":"x' = A*x","style":{"code":true}},{"type":"text","text":"  ?"}]}]}],"thread_ts":"1611938553.070500","parent_user_id":"U010BJMDXGX"},{"client_msg_id":"fe9f1d78-35dd-4058-b99e-2b08d669250a","type":"message","text":"Right now just solving the matrix exponential and then multiplying by it to get each time-step is fastest. The Krylov approach pre-calculating with Arnoldi takes the same amount of time (mostly spent calculating `expm(H)` inside `expmv`). However, it's much faster if the Krylov space can be reduced down to 5-6 instead of 30.","user":"U010BJMDXGX","ts":"1611948040.072400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YZhD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Right now just solving the matrix exponential and then multiplying by it to get each time-step is fastest. The Krylov approach pre-calculating with Arnoldi takes the same amount of time (mostly spent calculating "},{"type":"text","text":"expm(H)","style":{"code":true}},{"type":"text","text":" inside "},{"type":"text","text":"expmv","style":{"code":true}},{"type":"text","text":"). However, it's much faster if the Krylov space can be reduced down to 5-6 instead of 30."}]}]}],"thread_ts":"1611938553.070500","parent_user_id":"U010BJMDXGX"},{"client_msg_id":"3c296c0b-9af3-4d69-9fc7-5faa0f4685b2","type":"message","text":"`A` is _mostly_ bidiagonal.","user":"U010BJMDXGX","ts":"1611948098.072600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RLC6m","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" is "},{"type":"text","text":"mostly","style":{"italic":true}},{"type":"text","text":" bidiagonal."}]}]}],"thread_ts":"1611938553.070500","parent_user_id":"U010BJMDXGX"},{"client_msg_id":"b2c9c2ed-af3d-4d4d-b2bb-b6b43bafc9bb","type":"message","text":"So it's fairly sparse if there's a method to take advantage of it.","user":"U010BJMDXGX","ts":"1611948153.072800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1bRXY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So it's fairly sparse if there's a method to take advantage of it."}]}]}],"thread_ts":"1611938553.070500","parent_user_id":"U010BJMDXGX","reactions":[{"name":"+1","users":["U9Z3H4H5F"],"count":1}]},{"type":"message","text":"Are you using <https://diffeq.sciml.ai/stable/features/diffeq_operator/> already?\nAlso if your matrix is nillpotent i wrote this MVP <https://github.com/freemin7/NilPotentIntegrator.jl> .","user":"U9MD78Z9N","ts":"1611948464.073100","team":"T68168MUP","thread_ts":"1611938553.070500","parent_user_id":"U010BJMDXGX"},{"client_msg_id":"01cf2383-5bf0-4ebf-8e80-d75b0da67a84","type":"message","text":"Interesting, thanks! Unfortunately it's not nilpotent.","user":"U010BJMDXGX","ts":"1611956294.074500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SYK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Interesting, thanks! Unfortunately it's not nilpotent."}]}]}],"thread_ts":"1611938553.070500","parent_user_id":"U010BJMDXGX"},{"client_msg_id":"84123993-5582-492b-b8f7-79e15f718219","type":"message","text":"&gt; Have you made any progress on an implementation within ExpUtils.jl?\n<@U010BJMDXGX> if you're still interested, i'd be happy to team up with you for the task.","user":"U9Z3H4H5F","ts":"1612117251.080400","team":"T68168MUP","edited":{"user":"U9Z3H4H5F","ts":"1612117362.000000"},"blocks":[{"type":"rich_text","block_id":"MV=uD","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"Have you made any progress on an implementation within ExpUtils.jl?"}]},{"type":"rich_text_section","elements":[{"type":"user","user_id":"U010BJMDXGX"},{"type":"text","text":" if you're still interested, i'd be happy to team up with you for the task."}]}]}],"thread_ts":"1611938553.070500","parent_user_id":"U010BJMDXGX"},{"client_msg_id":"749d849e-f009-4a52-b9d9-2fbdbcf3ff0f","type":"message","text":"Yeah if you use <https://diffeq.sciml.ai/stable/solvers/nonautonomous_linear_ode/#Exponential-Methods-for-Linear-and-Affine-Problems> it's just using ExponentialUtilities.jl under the hood, so if you need more, then ExpUtils is the place to hack on.","user":"U69BL50BF","ts":"1612120791.080700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oz3Rr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah if you use "},{"type":"link","url":"https://diffeq.sciml.ai/stable/solvers/nonautonomous_linear_ode/#Exponential-Methods-for-Linear-and-Affine-Problems"},{"type":"text","text":" it's just using ExponentialUtilities.jl under the hood, so if you need more, then ExpUtils is the place to hack on."}]}]}],"thread_ts":"1611938553.070500","parent_user_id":"U010BJMDXGX"},{"client_msg_id":"6df28d43-6c60-46db-88aa-3bac13008fdb","type":"message","text":"<@U9Z3H4H5F> I'd be happy to help. Looking through the reference, is it just a matter of collapsing `V` by the indicated projection matrix once it's derived in Arnoldi?","user":"U010BJMDXGX","ts":"1612199301.081000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BBRMM","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U9Z3H4H5F"},{"type":"text","text":" I'd be happy to help. Looking through the reference, is it just a matter of collapsing "},{"type":"text","text":"V","style":{"code":true}},{"type":"text","text":" by the indicated projection matrix once it's derived in Arnoldi?"}]}]}],"thread_ts":"1611938553.070500","parent_user_id":"U010BJMDXGX"},{"client_msg_id":"56c3264b-2c55-4958-a5b8-f502e25675f6","type":"message","text":"Awesome!","user":"U9Z3H4H5F","ts":"1612199978.081200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c9QrD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Awesome!"}]}]}],"thread_ts":"1611938553.070500","parent_user_id":"U010BJMDXGX"},{"client_msg_id":"bc5f5cdd-a4cd-4702-a85d-42710b8f26b2","type":"message","text":"Yes, it seems that's the change they propose to the original algorithm.","user":"U9Z3H4H5F","ts":"1612200206.081400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"e/D1A","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, it seems that's the change they propose to the original algorithm."}]}]}],"thread_ts":"1611938553.070500","parent_user_id":"U010BJMDXGX"},{"client_msg_id":"6da326ec-7743-47ef-a082-3e08cd02ebed","type":"message","text":"&gt;  The output of the iteration is then the much smaller o × k matrix CVk (or the i × k matrix ET Vk). This eliminates the need to store Vk, a potentially large n × k matrix, reducing the memory required for the algorithm","user":"U9Z3H4H5F","ts":"1612200206.081600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tTX2","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":" The output of the iteration is then the much smaller o × k matrix CVk (or the i × k matrix ET Vk). This eliminates the need to store Vk, a potentially large n × k matrix, reducing the memory required for the algorithm"}]}]}],"thread_ts":"1611938553.070500","parent_user_id":"U010BJMDXGX"},{"client_msg_id":"954c7bc5-a3f4-41e0-b30d-0a5d2f1f5de8","type":"message","text":"i'll look into code details (i'm not familiar with the ExpUtils code) so we can discuss, but probably not until tomorrow or on wed","user":"U9Z3H4H5F","ts":"1612201686.081800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5Kmu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i'll look into code details (i'm not familiar with the ExpUtils code) so we can discuss, but probably not until tomorrow or on wed"}]}]}],"thread_ts":"1611938553.070500","parent_user_id":"U010BJMDXGX","reactions":[{"name":"+1","users":["U010BJMDXGX"],"count":1}]}]