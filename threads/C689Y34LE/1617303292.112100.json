[{"client_msg_id":"0cf12aa7-e82e-48f3-9f5a-fa95b65eccba","type":"message","text":"When passing a `@view` object to a device function, what parameter type should I specify? It seems that I have to either leave it blank and let the compiler determine or fully specify its long name such as `SubArray{Float64, 2, CuDeviceArray{Float64, 3, 1}, Tuple{Base.Slice{...}, ...)`. I was replacing `@cuDynamicSharedMem`  with `@view` to see how performance changes. When I used `@cuDynamicSharedMem` , I could specify basic type such as `CuDeviceArray{Float64,2}` as parameter type, but with `@view` it seems that it requires different parameter type, which makes me modify the prototypes of my whole device functions..","user":"U01FXSDEXN3","ts":"1617303292.112100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"m0j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"When passing a "},{"type":"text","text":"@view","style":{"code":true}},{"type":"text","text":" object to a device function, what parameter type should I specify? It seems that I have to either leave it blank and let the compiler determine or fully specify its long name such as "},{"type":"text","text":"SubArray{Float64, 2, CuDeviceArray{Float64, 3, 1}, Tuple{Base.Slice{...}, ...)","style":{"code":true}},{"type":"text","text":". I was replacing "},{"type":"text","text":"@cuDynamicSharedMem","style":{"code":true}},{"type":"text","text":"  with "},{"type":"text","text":"@view","style":{"code":true}},{"type":"text","text":" to see how performance changes. When I used "},{"type":"text","text":"@cuDynamicSharedMem","style":{"code":true}},{"type":"text","text":" , I could specify basic type such as "},{"type":"text","text":"CuDeviceArray{Float64,2}","style":{"code":true}},{"type":"text","text":" as parameter type, but with "},{"type":"text","text":"@view","style":{"code":true}},{"type":"text","text":" it seems that it requires different parameter type, which makes me modify the prototypes of my whole device functions.."}]}]}],"thread_ts":"1617303292.112100","reply_count":1,"reply_users_count":1,"latest_reply":"1617347715.120600","reply_users":["U68A3ASP9"],"is_locked":false,"subscribed":false},{"client_msg_id":"a6b0d7f6-2716-4bef-8c7c-e8543615bdc6","type":"message","text":"what's the reason you want to specify the arg type? you could do `SubArray{T,2,&lt;:CuDeviceArray}`, or just `AbstractArray{T}`, There's also CUDA.AnyCuArray for anything that's kernel compatible, which includes CuArray, SubArray{...,...,&lt;:CuArray}, and other derivatives (but ideally we want Base support for this, i.e., AbstractWrappedArray <https://github.com/JuliaLang/julia/pull/31563>)","user":"U68A3ASP9","ts":"1617347715.120600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vboE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what's the reason you want to specify the arg type? you could do "},{"type":"text","text":"SubArray{T,2,<:CuDeviceArray}","style":{"code":true}},{"type":"text","text":", or just "},{"type":"text","text":"AbstractArray{T}","style":{"code":true}},{"type":"text","text":", There's also CUDA.AnyCuArray for anything that's kernel compatible, which includes CuArray, SubArray{...,...,<:CuArray}, and other derivatives (but ideally we want Base support for this, i.e., AbstractWrappedArray "},{"type":"link","url":"https://github.com/JuliaLang/julia/pull/31563"},{"type":"text","text":")"}]}]}],"thread_ts":"1617303292.112100","parent_user_id":"U01FXSDEXN3"}]