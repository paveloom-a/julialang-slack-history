[{"client_msg_id":"afd780f3-1c5e-4bca-9032-af9dc9b34e2a","type":"message","text":"But, since my approach for manual \"forced\" union splitting is mostly based on the continuation-passing style which could hurt performance on GPU  (due to thread divergence), I wonder if we can enable different optimizations/lowering of small Union. Can we have a custom pass on Julia's SSA IR in GPUCompiler? (cc <@U68A3ASP9> <@U67BJLYCS>)","user":"UC7AF7NSU","ts":"1615327192.006300","team":"T68168MUP","edited":{"user":"UC7AF7NSU","ts":"1615327245.000000"},"blocks":[{"type":"rich_text","block_id":"zIHl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But, since my approach for manual \"forced\" union splitting is mostly based on the continuation-passing style which could hurt performance on GPU  (due to thread divergence), I wonder if we can enable different optimizations/lowering of small Union. Can we have a custom pass on Julia's SSA IR in GPUCompiler? (cc "},{"type":"user","user_id":"U68A3ASP9"},{"type":"text","text":" "},{"type":"user","user_id":"U67BJLYCS"},{"type":"text","text":")"}]}]}],"thread_ts":"1615327192.006300","reply_count":12,"reply_users_count":3,"latest_reply":"1615331626.008900","reply_users":["U6A0PD8CR","U67BJLYCS","UC7AF7NSU"],"subscribed":false},{"client_msg_id":"87179d8e-5226-4d65-902c-735ab53b2163","type":"message","text":"We don't currently have a Julia IR pass manager in GPUCompiler.","user":"U6A0PD8CR","ts":"1615328172.006600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"e4V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We don't currently have a Julia IR pass manager in GPUCompiler."}]}]}],"thread_ts":"1615327192.006300","parent_user_id":"UC7AF7NSU"},{"client_msg_id":"bb2ff869-b481-4d1a-a32e-a9cab7238b2a","type":"message","text":"I think Tim and Valentin were discussing how to do composable IR transforms over Julia IR, but I don't know if that ended up with a solution.","user":"U6A0PD8CR","ts":"1615328235.006800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mgO6t","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think Tim and Valentin were discussing how to do composable IR transforms over Julia IR, but I don't know if that ended up with a solution."}]}]}],"thread_ts":"1615327192.006300","parent_user_id":"UC7AF7NSU"},{"client_msg_id":"46b2e648-b480-4262-8cf9-5f803cbbcf21","type":"message","text":"<https://github.com/vchuravy/KernelCompiler.jl/blob/main/src/optimize.jl>","user":"U67BJLYCS","ts":"1615328312.007000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6IO","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/vchuravy/KernelCompiler.jl/blob/main/src/optimize.jl"}]}]}],"thread_ts":"1615327192.006300","parent_user_id":"UC7AF7NSU"},{"client_msg_id":"7327fbc1-d999-4d38-9f15-f3fd53b8d1f7","type":"message","text":"If you have a AbsInt","user":"U67BJLYCS","ts":"1615328393.007200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iAIv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you have a AbsInt"}]}]}],"thread_ts":"1615327192.006300","parent_user_id":"UC7AF7NSU"},{"client_msg_id":"00120d61-62b6-42c9-8c81-c719e8cdd7ea","type":"message","text":"and you want to override the pipeline","user":"U67BJLYCS","ts":"1615328403.007400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hbB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and you want to override the pipeline"}]}]}],"thread_ts":"1615327192.006300","parent_user_id":"UC7AF7NSU"},{"client_msg_id":"301b4b4e-1429-4c19-9d2a-2f1df9e6b86a","type":"message","text":"Isn't GPUInterpreter an AbsInt?","user":"UC7AF7NSU","ts":"1615329237.007700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/6Mv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Isn't GPUInterpreter an AbsInt?"}]}]}],"thread_ts":"1615327192.006300","parent_user_id":"UC7AF7NSU"},{"client_msg_id":"f14ac404-46e0-4478-af19-8000969a769e","type":"message","text":"Yep, GPUCompiler and KernelCompiler are both AbsInt","user":"U6A0PD8CR","ts":"1615329265.007900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LZ4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yep, GPUCompiler and KernelCompiler are both AbsInt"}]}]}],"thread_ts":"1615327192.006300","parent_user_id":"UC7AF7NSU"},{"client_msg_id":"4386d086-f3c6-441f-8c5a-30a570a7887e","type":"message","text":"oh I guess what Valentin meant was that GPUCompiler is currently not overriding `optimize`, while KernelCompiler does it?","user":"UC7AF7NSU","ts":"1615329414.008100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TmrD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh I guess what Valentin meant was that GPUCompiler is currently not overriding "},{"type":"text","text":"optimize","style":{"code":true}},{"type":"text","text":", while KernelCompiler does it?"}]}]}],"thread_ts":"1615327192.006300","parent_user_id":"UC7AF7NSU"},{"client_msg_id":"4bc56166-3082-4864-81e0-94314992f3ac","type":"message","text":"The point I was trying to make is that 2 different AbsInt implementations don't compose, which is something you might want","user":"U6A0PD8CR","ts":"1615329553.008300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7URJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The point I was trying to make is that 2 different AbsInt implementations don't compose, which is something you might want"}]}]}],"thread_ts":"1615327192.006300","parent_user_id":"UC7AF7NSU"},{"client_msg_id":"50449886-f383-42de-818e-bc0938fb7871","type":"message","text":"But yeah, GPUCompiler doesn't override `optimize`","user":"U6A0PD8CR","ts":"1615329565.008500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=A1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But yeah, GPUCompiler doesn't override "},{"type":"text","text":"optimize","style":{"code":true}}]}]}],"thread_ts":"1615327192.006300","parent_user_id":"UC7AF7NSU"},{"client_msg_id":"48740cbf-77d8-44b8-8140-641921b1cc33","type":"message","text":"We basically only do LLVM transforms","user":"U6A0PD8CR","ts":"1615329584.008700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ipHkS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We basically only do LLVM transforms"}]}]}],"thread_ts":"1615327192.006300","parent_user_id":"UC7AF7NSU"},{"client_msg_id":"150891ac-05e0-43c8-a36b-2f88fc7587b7","type":"message","text":"we have _some_ amount of composability in midend, in principle, right? (not that we have it in Julia right now or it's easy to design)","user":"UC7AF7NSU","ts":"1615331626.008900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sD4n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we have "},{"type":"text","text":"some","style":{"italic":true}},{"type":"text","text":" amount of composability in midend, in principle, right? (not that we have it in Julia right now or it's easy to design)"}]}]}],"thread_ts":"1615327192.006300","parent_user_id":"UC7AF7NSU"}]