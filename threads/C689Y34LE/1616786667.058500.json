[{"client_msg_id":"c448560a-b8c1-426f-8325-b33e8cc73e41","type":"message","text":"I'm trying to improve performance of my Julia CUDA code by checking the output of ptxas to see how code is compiled. When interpreting the ptxas info generated by running with  `JULIA_DEBUG=CUDA` , do user-defined device functions have names in a form \"julia_NAME_somenumber\" in the output? For example, if my device function name is gpnorm, then julia_gpnorm_somenumber would be the corresponding name?\n\nIf they have such names, I have some weird output. The information about stack frame, spill stores, and spill loads is very different from what I get from nvcc. When I used nvcc, all of stack frame, spill stores, and spill loads are zero, but they have some high numbers when I used Julia.\n\nDo you happen to know what I could do in this case to figure out or fix the issue: high numbers for stack frame, spill stores, and spill loads that seem to be the cause slowing down performance?","user":"U01FXSDEXN3","ts":"1616786667.058500","team":"T68168MUP","edited":{"user":"U01FXSDEXN3","ts":"1616787434.000000"},"blocks":[{"type":"rich_text","block_id":"dntxG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm trying to improve performance of my Julia CUDA code by checking the output of ptxas to see how code is compiled. When interpreting the ptxas info generated by running with  "},{"type":"text","text":"JULIA_DEBUG=CUDA","style":{"code":true}},{"type":"text","text":" , do user-defined device functions have names in a form \"julia_NAME_somenumber\" in the output? For example, if my device function name is gpnorm, then julia_gpnorm_somenumber would be the corresponding name?\n\nIf they have such names, I have some weird output. The information about stack frame, spill stores, and spill loads is very different from what I get from nvcc. When I used nvcc, all of stack frame, spill stores, and spill loads are zero, but they have some high numbers when I used Julia.\n\nDo you happen to know what I could do in this case to figure out or fix the issue: high numbers for stack frame, spill stores, and spill loads that seem to be the cause slowing down performance?"}]}]}],"thread_ts":"1616786667.058500","reply_count":5,"reply_users_count":2,"latest_reply":"1617375979.121800","reply_users":["U68A3ASP9","U01FXSDEXN3"],"is_locked":false,"subscribed":false},{"client_msg_id":"260397d2-f853-471d-864e-38a6fd0196f0","type":"message","text":"which version of Julia, CUDA.jl, GPUCompiler.jl? there was a know regression in GPUCompiler, fixed in <https://github.com/JuliaGPU/GPUCompiler.jl/pull/93> but that's only part of 1.6. but at the same time, another user reported <https://github.com/JuliaGPU/BinomialGPU.jl/issues/8> which seems to show a regression on 1.6.","user":"U68A3ASP9","ts":"1616788258.058700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EJA3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which version of Julia, CUDA.jl, GPUCompiler.jl? there was a know regression in GPUCompiler, fixed in "},{"type":"link","url":"https://github.com/JuliaGPU/GPUCompiler.jl/pull/93"},{"type":"text","text":" but that's only part of 1.6. but at the same time, another user reported "},{"type":"link","url":"https://github.com/JuliaGPU/BinomialGPU.jl/issues/8"},{"type":"text","text":" which seems to show a regression on 1.6."}]}]}],"thread_ts":"1616786667.058500","parent_user_id":"U01FXSDEXN3"},{"client_msg_id":"cefa9602-6ccf-4d10-9c11-eed201aa0810","type":"message","text":"anyway, code should perform similarly to code compiled with nvcc, so if you have an example that causes lots of spills please do file an issue","user":"U68A3ASP9","ts":"1616788284.058900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xov","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"anyway, code should perform similarly to code compiled with nvcc, so if you have an example that causes lots of spills please do file an issue"}]}]}],"thread_ts":"1616786667.058500","parent_user_id":"U01FXSDEXN3"},{"client_msg_id":"5882ef35-e3b2-43e2-ab9f-924151add71a","type":"message","text":"I was using Julia 1.6.0 with CUDA 2.6.1 and GPUCompiler 0.10.0. Do I need to specify compute capability, i.e., sm_70, or does Julia automatically detect it? Also, it seems that the output does not show the number of registers used for Julia device functions. It showed the number of registers for kernel functions, though.\n\nIt's a bit tricky to generate a simple example cause my kernel is a bit complicated and has a number of device functions...","user":"U01FXSDEXN3","ts":"1616789274.059100","team":"T68168MUP","edited":{"user":"U01FXSDEXN3","ts":"1616789326.000000"},"blocks":[{"type":"rich_text","block_id":"ez5z0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I was using Julia 1.6.0 with CUDA 2.6.1 and GPUCompiler 0.10.0. Do I need to specify compute capability, i.e., sm_70, or does Julia automatically detect it? Also, it seems that the output does not show the number of registers used for Julia device functions. It showed the number of registers for kernel functions, though.\n\nIt's a bit tricky to generate a simple example cause my kernel is a bit complicated and has a number of device functions..."}]}]}],"thread_ts":"1616786667.058500","parent_user_id":"U01FXSDEXN3"},{"client_msg_id":"0b87a642-ec52-43c0-a38c-beec895058d3","type":"message","text":"missed your comment here; Julia auto-detects the compute capability, but LLVM doesn't support the very latest. That shouldn't matter though, and the perf issue probably doesn't relate to that.","user":"U68A3ASP9","ts":"1617039246.070100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iuitt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"missed your comment here; Julia auto-detects the compute capability, but LLVM doesn't support the very latest. That shouldn't matter though, and the perf issue probably doesn't relate to that."}]}]}],"thread_ts":"1616786667.058500","parent_user_id":"U01FXSDEXN3"},{"client_msg_id":"8cded173-3825-4825-8c93-aee0e6718f8c","type":"message","text":"After adding `@inline` to device functions, performance improved by a factor of two. It is now 1.5 times slower than nvcc. Thanks a lot for your help.","user":"U01FXSDEXN3","ts":"1617375979.121800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"r48JX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"After adding "},{"type":"text","text":"@inline","style":{"code":true}},{"type":"text","text":" to device functions, performance improved by a factor of two. It is now 1.5 times slower than nvcc. Thanks a lot for your help."}]}]}],"thread_ts":"1616786667.058500","parent_user_id":"U01FXSDEXN3"}]