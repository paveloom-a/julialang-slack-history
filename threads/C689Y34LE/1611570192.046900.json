[{"client_msg_id":"ee41f35c-63eb-4505-bfde-d9668e21b430","type":"message","text":"Following up an example from a few days ago on using ForwardDiff inside of CUDA kernels, I have a slightly different MWE now:\nI have a function in-place function `f!(y,x)` that fills up a vector `y` based on the input `x`. When I make `y` a CuArray like below, the function runs fine on GPU. Also, when I use `ForwardDiff.jacobian!`  like in the code below, I can get the code to run on the GPU. However, when I try to call `ForwardDiff.jacobian!`  from within a kernel function (`g!`), I get a `Reason: unsupported dynamic function invocation (call to jacobian!(result::Union{AbstractArray, DiffResults.DiffResult}, f!, y::AbstractArray, x::AbstractArray) in ForwardDiff` error. I'm trying to understand the stacktrace but it's way over my head (calls to `compile`, `codegen`, `check_ir` functions `GPUCompiler`) so I was wondering if there's someone here who might know how to deal with the problem.\n```# julia-1.6\nusing CUDA # master\nusing ForwardDiff # v0.10.15\nusing StaticArrays # v1.0.1\n\nx = @SVector rand(Float32, 3);\ny = cu(zeros(256));\n\nf!(y, x) = y[:] .= x'*x;\nf!(y,x); # runs\n\ndy = cu(zeros(256,3))\nForwardDiff.jacobian!(dy,f!,y,x); # also runs\n\nfunction g!(dy,y,x)\n    threadIdx().x == 1 &amp;&amp; ForwardDiff.jacobian!(dy,f!,y,x)\n    nothing\nend\n\n@cuda threads=1 g!(dy,y,x) # doesn't run\n@device_code_warntype @cuda threads=1 g!(dy,y,x)```","user":"UCT34GL7M","ts":"1611570192.046900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BYHx4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Following up an example from a few days ago on using ForwardDiff inside of CUDA kernels, I have a slightly different MWE now:\nI have a function in-place function "},{"type":"text","text":"f!(y,x)","style":{"code":true}},{"type":"text","text":" that fills up a vector "},{"type":"text","text":"y","style":{"code":true}},{"type":"text","text":" based on the input "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":". When I make "},{"type":"text","text":"y","style":{"code":true}},{"type":"text","text":" a CuArray like below, the function runs fine on GPU. Also, when I use "},{"type":"text","text":"ForwardDiff.jacobian!","style":{"code":true}},{"type":"text","text":"  like in the code below, I can get the code to run on the GPU. However, when I try to call "},{"type":"text","text":"ForwardDiff.jacobian!","style":{"code":true}},{"type":"text","text":"  from within a kernel function ("},{"type":"text","text":"g!","style":{"code":true}},{"type":"text","text":"), I get a "},{"type":"text","text":"Reason: unsupported dynamic function invocation (call to jacobian!(result::Union{AbstractArray, DiffResults.DiffResult}, f!, y::AbstractArray, x::AbstractArray) in ForwardDiff","style":{"code":true}},{"type":"text","text":" error. I'm trying to understand the stacktrace but it's way over my head (calls to "},{"type":"text","text":"compile","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"codegen","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"check_ir","style":{"code":true}},{"type":"text","text":" functions "},{"type":"text","text":"GPUCompiler","style":{"code":true}},{"type":"text","text":") so I was wondering if there's someone here who might know how to deal with the problem.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"# julia-1.6\nusing CUDA # master\nusing ForwardDiff # v0.10.15\nusing StaticArrays # v1.0.1\n\nx = @SVector rand(Float32, 3);\ny = cu(zeros(256));\n\nf!(y, x) = y[:] .= x'*x;\nf!(y,x); # runs\n\ndy = cu(zeros(256,3))\nForwardDiff.jacobian!(dy,f!,y,x); # also runs\n\nfunction g!(dy,y,x)\n    threadIdx().x == 1 && ForwardDiff.jacobian!(dy,f!,y,x)\n    nothing\nend\n\n@cuda threads=1 g!(dy,y,x) # doesn't run\n@device_code_warntype @cuda threads=1 g!(dy,y,x)"}]}]}],"thread_ts":"1611570192.046900","reply_count":10,"reply_users_count":2,"latest_reply":"1611577890.052200","reply_users":["U68A3ASP9","UCT34GL7M"],"subscribed":false},{"client_msg_id":"974cec1c-813e-4274-a647-23bf66c3c073","type":"message","text":"you should look at the stack trace right below the 'unsupported dynamic function call' the large trace below is from the host-side compiler invocation, and won't help you","user":"U68A3ASP9","ts":"1611570674.047000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bkIZi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you should look at the stack trace right below the 'unsupported dynamic function call' the large trace below is from the host-side compiler invocation, and won't help you"}]}]}],"thread_ts":"1611570192.046900","parent_user_id":"UCT34GL7M"},{"client_msg_id":"2b67fd3b-2aa6-48c0-b3f0-51af73116c7b","type":"message","text":"general advice here is to use `@device_code_warntype interactive=true` to find the type inference failure that leads to the dynamic invocation","user":"U68A3ASP9","ts":"1611570699.047200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EvL0Y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"general advice here is to use "},{"type":"text","text":"@device_code_warntype interactive=true","style":{"code":true}},{"type":"text","text":" to find the type inference failure that leads to the dynamic invocation"}]}]}],"thread_ts":"1611570192.046900","parent_user_id":"UCT34GL7M"},{"client_msg_id":"d571ed78-ea5f-43c3-b899-95a9c0e0fd9a","type":"message","text":"The stack trace right below the 'unsupported dynamic function call' just says:\n```Stacktrace:\n [1] g!\n   @ REPL[32]:2```\nWhen I use the interactive mode, it seems as if problems arise when ForwardDiff.JacobianConfig is called:\n```│ ─ %-1  = invoke JacobianConfig(::GlobalRef,::CuDeviceVector{Float32, 1},::SVector{3, Float32},::ForwardDiff.Chunk,::ForwardDiff.Tag{GlobalRef, Float32})::ForwardDiff.JacobianConfig{ForwardDiff.Tag{GlobalRef, Float32}, Float32, _A, _B} where _B where _A\nVariables\n  #self#::Type{ForwardDiff.JacobianConfig}\n  f::GlobalRef\n  y::CuDeviceVector{Float32, 1}\n  x::SVector{3, Float32}\n  @_5::ForwardDiff.Chunk\n  @_6::Core.Const(ForwardDiff.Tag{GlobalRef, Float32}())\n  duals::Tuple{Vector{_A} where _A, MVector{3, _A} where _A}\n  xduals::MVector{3, _A} where _A\n  yduals::Vector{_A} where _A\n  seeds::Any```","user":"UCT34GL7M","ts":"1611571527.047400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zK55h","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The stack trace right below the 'unsupported dynamic function call' just says:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Stacktrace:\n [1] g!\n   @ REPL[32]:2"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"When I use the interactive mode, it seems as if problems arise when ForwardDiff.JacobianConfig is called:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"│ ─ %-1  = invoke JacobianConfig(::GlobalRef,::CuDeviceVector{Float32, 1},::SVector{3, Float32},::ForwardDiff.Chunk,::ForwardDiff.Tag{GlobalRef, Float32})::ForwardDiff.JacobianConfig{ForwardDiff.Tag{GlobalRef, Float32}, Float32, _A, _B} where _B where _A\nVariables\n  #self#::Type{ForwardDiff.JacobianConfig}\n  f::GlobalRef\n  y::CuDeviceVector{Float32, 1}\n  x::SVector{3, Float32}\n  @_5::ForwardDiff.Chunk\n  @_6::Core.Const(ForwardDiff.Tag{GlobalRef, Float32}())\n  duals::Tuple{Vector{_A} where _A, MVector{3, _A} where _A}\n  xduals::MVector{3, _A} where _A\n  yduals::Vector{_A} where _A\n  seeds::Any"}]}]}],"thread_ts":"1611570192.046900","parent_user_id":"UCT34GL7M"},{"client_msg_id":"1607c6f1-6bdc-4158-b6e2-fe375037e2a8","type":"message","text":"there's regular CPU vectors in there?","user":"U68A3ASP9","ts":"1611573053.050600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MyZK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there's regular CPU vectors in there?"}]}]}],"thread_ts":"1611570192.046900","parent_user_id":"UCT34GL7M"},{"client_msg_id":"c08fbab8-bd68-43d5-a665-d66959c3c657","type":"message","text":"so that's not going to work either way","user":"U68A3ASP9","ts":"1611573058.050800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4y4P/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so that's not going to work either way"}]}]}],"thread_ts":"1611570192.046900","parent_user_id":"UCT34GL7M"},{"client_msg_id":"870e48f8-b81f-4c01-be5b-bbd2928704af","type":"message","text":"but those tuples looks badly inferred, yes.","user":"U68A3ASP9","ts":"1611573067.051000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QbDI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but those tuples looks badly inferred, yes."}]}]}],"thread_ts":"1611570192.046900","parent_user_id":"UCT34GL7M"},{"client_msg_id":"95a15e22-c207-4669-86ec-8f34ece7e197","type":"message","text":"The `dy` and `y` are `CuArrays`, the `x` is an `SVector`.","user":"UCT34GL7M","ts":"1611573418.051400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wnzX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The "},{"type":"text","text":"dy","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"y","style":{"code":true}},{"type":"text","text":" are "},{"type":"text","text":"CuArrays","style":{"code":true}},{"type":"text","text":", the "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" is an "},{"type":"text","text":"SVector","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1611570192.046900","parent_user_id":"UCT34GL7M"},{"client_msg_id":"c0c55259-707c-4c91-92d2-238ce79b8cc5","type":"message","text":"you posted:\n``` yduals::Vector{_A} where _A\nduals::Tuple{Vector{_A} where _A, MVector{3, _A} where _A}```","user":"U68A3ASP9","ts":"1611573989.051800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BWFEo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you posted:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":" yduals::Vector{_A} where _A\nduals::Tuple{Vector{_A} where _A, MVector{3, _A} where _A}"}]}]}],"thread_ts":"1611570192.046900","parent_user_id":"UCT34GL7M"},{"client_msg_id":"62134f8a-9dd4-47a2-a2e6-3c4e0b1220d6","type":"message","text":"Yes, those are not inputs to my function though, they are created within the call to `ForwardDiff.jacobian!`  I have to admit this is the first time I'm using Cthulhu so I'm not exactly sure what I'm looking at :sweat_smile:\n\nBut it seems as if the call to GradientConfig allocates a bufferarray (`JacobianConfig(f!,y,x).duals[1]`) and I guess that's not supposed to happen within a kernel. But then I'm not sure how I could do this in-place Jacobian call inside of a kernel.","user":"UCT34GL7M","ts":"1611577868.052000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Y/y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, those are not inputs to my function though, they are created within the call to "},{"type":"text","text":"ForwardDiff.jacobian!","style":{"code":true}},{"type":"text","text":"  I have to admit this is the first time I'm using Cthulhu so I'm not exactly sure what I'm looking at "},{"type":"emoji","name":"sweat_smile"},{"type":"text","text":"\n\nBut it seems as if the call to GradientConfig allocates a bufferarray ("},{"type":"text","text":"JacobianConfig(f!,y,x).duals[1]","style":{"code":true}},{"type":"text","text":") and I guess that's not supposed to happen within a kernel. But then I'm not sure how I could do this in-place Jacobian call inside of a kernel."}]}]}],"thread_ts":"1611570192.046900","parent_user_id":"UCT34GL7M"},{"client_msg_id":"f4e3bbf6-b934-4ee3-91c1-91d5af170e98","type":"message","text":"(Thanks for helping out by the way)","user":"UCT34GL7M","ts":"1611577890.052200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tGI6G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(Thanks for helping out by the way)"}]}]}],"thread_ts":"1611570192.046900","parent_user_id":"UCT34GL7M"}]