[{"client_msg_id":"49ccd126-3237-4e13-b1b9-e4f463016ebd","type":"message","text":"<@U68A3ASP9>, I've been very slowly trying to understand how Nvidia Optix could work with Julia/CUDA.jl. So far I've understood that Optix has a C API to where one sends \"programs\" (ray generation, intersection) that are no more than PTX code (literally a string) compiled from functions with specific signatures. The functions have to have specific name prefixes, like `__raygen__` and receive no parameters. The input of such functions has to be done through global variables, e.g., `.const .align 8 .b8 params[24];`, and through calls to a device API defined in asm in C headers, e.g., `call (%r1), _optix_get_launch_index_x, ();`.   <@U68A3ASP9> can you give some hint whether any of this 3 means may pose a big problem to current CUDA.jl workings?","user":"U6CCK2SCV","ts":"1607973616.001100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xQ1m","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U68A3ASP9"},{"type":"text","text":", I've been very slowly trying to understand how Nvidia Optix could work with Julia/CUDA.jl. So far I've understood that Optix has a C API to where one sends \"programs\" (ray generation, intersection) that are no more than PTX code (literally a string) compiled from functions with specific signatures. The functions have to have specific name prefixes, like "},{"type":"text","text":"__raygen__","style":{"code":true}},{"type":"text","text":" and receive no parameters. The input of such functions has to be done through global variables, e.g., "},{"type":"text","text":".const .align 8 .b8 params[24];","style":{"code":true}},{"type":"text","text":", and through calls to a device API defined in asm in C headers, e.g., "},{"type":"text","text":"call (%r1), _optix_get_launch_index_x, ();","style":{"code":true}},{"type":"text","text":".   "},{"type":"user","user_id":"U68A3ASP9"},{"type":"text","text":" can you give some hint whether any of this 3 means may pose a big problem to current CUDA.jl workings?"}]}]}],"thread_ts":"1607973616.001100","reply_count":5,"reply_users_count":2,"latest_reply":"1607977510.006200","reply_users":["U6CCK2SCV","U68A3ASP9"],"subscribed":false},{"client_msg_id":"91d95dab-b886-4e33-b534-f9ee73154a10","type":"message","text":"I've seen that PTX from CUDA.jl has some prepended prefixes in function names. I've found nothing about global variables. And I still don't know how to manually translate an asm call from an API heather to Julia. But I've been able to call host API from Julia through hand-made wrappers.","user":"U6CCK2SCV","ts":"1607973834.001200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"V7j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I've seen that PTX from CUDA.jl has some prepended prefixes in function names. I've found nothing about global variables. And I still don't know how to manually translate an asm call from an API heather to Julia. But I've been able to call host API from Julia through hand-made wrappers."}]}]}],"thread_ts":"1607973616.001100","parent_user_id":"U6CCK2SCV"},{"client_msg_id":"36080c82-d686-4481-8a67-55883ed1be6b","type":"message","text":"I think all that should be doable","user":"U68A3ASP9","ts":"1607975818.003400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GQ5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think all that should be doable"}]}]}],"thread_ts":"1607973616.001100","parent_user_id":"U6CCK2SCV"},{"client_msg_id":"6a996414-7d36-47ca-b808-fe27288481a8","type":"message","text":"there's a constant memory PR that should make the const globals easily usable too","user":"U68A3ASP9","ts":"1607975829.003600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BojhF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there's a constant memory PR that should make the const globals easily usable too"}]}]}],"thread_ts":"1607973616.001100","parent_user_id":"U6CCK2SCV"},{"client_msg_id":"71850129-9ef3-4b78-b7d1-684128d081b2","type":"message","text":"and for the header calls:\n\n```julia\njulia&gt; kernel() = ccall(\"extern _optix_get_launch_index_x\", llvmcall, Cint, (), )\nkernel (generic function with 1 method)\n\njulia&gt; CUDA.code_ptx(kernel, Tuple{})\n//\n// Generated by LLVM NVPTX Back-End\n//\n\n.version 6.3\n.target sm_75\n.address_size 64\n\n\t// .globl\tjulia_kernel_1816       // -- Begin function julia_kernel_1816\n.extern .func  (.param .b32 func_retval0) _optix_get_launch_index_x\n()\n;\n.weak .global .align 8 .u64 exception_flag;\n                                        // @julia_kernel_1816\n.visible .func  (.param .b32 func_retval0) julia_kernel_1816()\n{\n\t.reg .b32 \t%r&lt;3&gt;;\n\n// %bb.0:                               // %top\n\t{ // callseq 1, 0\n\t.reg .b32 temp_param_reg;\n\t.param .b32 retval0;\n\tcall.uni (retval0), \n\t_optix_get_launch_index_x, \n\t(\n\t);\n\tld.param.b32 \t%r1, [retval0+0];\n\t} // callseq 1\n\tst.param.b32 \t[func_retval0+0], %r1;\n\tret;\n                                        // -- End function\n}```","user":"U68A3ASP9","ts":"1607976474.003800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W11XA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and for the header calls:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia\njulia> kernel() = ccall(\"extern _optix_get_launch_index_x\", llvmcall, Cint, (), )\nkernel (generic function with 1 method)\n\njulia> CUDA.code_ptx(kernel, Tuple{})\n//\n// Generated by LLVM NVPTX Back-End\n//\n\n.version 6.3\n.target sm_75\n.address_size 64\n\n\t// .globl\tjulia_kernel_1816       // -- Begin function julia_kernel_1816\n.extern .func  (.param .b32 func_retval0) _optix_get_launch_index_x\n()\n;\n.weak .global .align 8 .u64 exception_flag;\n                                        // @julia_kernel_1816\n.visible .func  (.param .b32 func_retval0) julia_kernel_1816()\n{\n\t.reg .b32 \t%r<3>;\n\n// %bb.0:                               // %top\n\t{ // callseq 1, 0\n\t.reg .b32 temp_param_reg;\n\t.param .b32 retval0;\n\tcall.uni (retval0), \n\t_optix_get_launch_index_x, \n\t(\n\t);\n\tld.param.b32 \t%r1, [retval0+0];\n\t} // callseq 1\n\tst.param.b32 \t[func_retval0+0], %r1;\n\tret;\n                                        // -- End function\n}"}]}]}],"thread_ts":"1607973616.001100","parent_user_id":"U6CCK2SCV"},{"client_msg_id":"7816d978-c386-4ff8-84bc-e7f5191dc47a","type":"message","text":"Nice, thanks!","user":"U6CCK2SCV","ts":"1607977510.006200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FVE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Nice, thanks!"}]}]}],"thread_ts":"1607973616.001100","parent_user_id":"U6CCK2SCV"}]