[{"client_msg_id":"6cc47365-08dc-47ae-b335-b4df6e5782a3","type":"message","text":"I'd like to compute `pairwise(Euclidean(), X, Y, dims = 2)` efficiently on a GPU, where `X` and `Y` are matrices of size e.g. `3072 x 1024` . Any tips how to get this? Do I need to write my own kernel?","user":"UB2NJGVK6","ts":"1611572679.050500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pD0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'd like to compute "},{"type":"text","text":"pairwise(Euclidean(), X, Y, dims = 2)","style":{"code":true}},{"type":"text","text":" efficiently on a GPU, where "},{"type":"text","text":"X","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"Y","style":{"code":true}},{"type":"text","text":" are matrices of size e.g. "},{"type":"text","text":"3072 x 1024","style":{"code":true}},{"type":"text","text":" . Any tips how to get this? Do I need to write my own kernel?"}]}]}],"thread_ts":"1611572679.050500","reply_count":7,"reply_users_count":2,"latest_reply":"1611651075.053300","reply_users":["U68A3ASP9","UB2NJGVK6"],"subscribed":false},{"client_msg_id":"9184854b-cb33-475f-aeb9-f9ef0ae95d37","type":"message","text":"maybe <https://github.com/JuliaGPU/CUDA.jl/blob/master/examples/pairwise.jl> can help?","user":"U68A3ASP9","ts":"1611573110.051200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yGtju","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"maybe "},{"type":"link","url":"https://github.com/JuliaGPU/CUDA.jl/blob/master/examples/pairwise.jl"},{"type":"text","text":" can help?"}]}]}],"thread_ts":"1611572679.050500","parent_user_id":"UB2NJGVK6"},{"client_msg_id":"42691175-2bc1-4e00-a715-bb094b0d9883","type":"message","text":"Thanks, I'll have a look.","user":"UB2NJGVK6","ts":"1611573824.051600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"P/m6D","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks, I'll have a look."}]}]}],"thread_ts":"1611572679.050500","parent_user_id":"UB2NJGVK6"},{"client_msg_id":"7efdbd94-888f-412e-a35b-82f65daf4210","type":"message","text":"I got it to work with some simple copy-pasting and it is reasonably fast, but I don't fully understand what I'm doing.","user":"UB2NJGVK6","ts":"1611609020.052500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZwL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I got it to work with some simple copy-pasting and it is reasonably fast, but I don't fully understand what I'm doing."}]}]}],"thread_ts":"1611572679.050500","parent_user_id":"UB2NJGVK6"},{"client_msg_id":"a242346b-1867-49ff-9a4c-2ff1bf4bfe0a","type":"message","text":"```function pairwise_dist_kernel(x::CuDeviceMatrix{Float32},\n                              y::CuDeviceMatrix{Float32},\n                              result::CuDeviceMatrix{Float32}, n)\n    i = (blockIdx().x-1) * blockDim().x + threadIdx().x\n    j = (blockIdx().y-1) * blockDim().y + threadIdx().y\n    if i &lt;= n &amp;&amp; j &lt;= n\n        for k in 1:size(x, 1)\n            @inbounds result[i, j] += (x[k, i] - y[k, j])^2\n        end\n    end\nend\nfunction pairwise_gpu(x, y)\n    n = size(x, 2)\n    result = CuArray(zeros(Float32, n, n))\n    function get_threads(threads)\n        threads_x = floor(Int, sqrt(threads))\n        threads_y = threads รท threads_x\n        return (threads_x, threads_y)\n    end\n    get_shmem(threads) = 2 * sum(threads) * sizeof(Float32)\n    kernel = @cuda launch=false pairwise_dist_kernel(x, y, result, n)\n    config = launch_configuration(kernel.fun, shmem=threads-&gt;get_shmem(get_threads(threads)))\n    # convert to 2D block size and figure out appropriate grid size\n    threads = get_threads(config.threads)\n    blocks = ceil.(Int, n ./ threads)\n    shmem = get_shmem(threads)\n    kernel(x, y, result, n; threads=threads, blocks=blocks, shmem=shmem)\n    return result\nend```","user":"UB2NJGVK6","ts":"1611609035.052700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WxG","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function pairwise_dist_kernel(x::CuDeviceMatrix{Float32},\n                              y::CuDeviceMatrix{Float32},\n                              result::CuDeviceMatrix{Float32}, n)\n    i = (blockIdx().x-1) * blockDim().x + threadIdx().x\n    j = (blockIdx().y-1) * blockDim().y + threadIdx().y\n    if i <= n && j <= n\n        for k in 1:size(x, 1)\n            @inbounds result[i, j] += (x[k, i] - y[k, j])^2\n        end\n    end\nend\nfunction pairwise_gpu(x, y)\n    n = size(x, 2)\n    result = CuArray(zeros(Float32, n, n))\n    function get_threads(threads)\n        threads_x = floor(Int, sqrt(threads))\n        threads_y = threads รท threads_x\n        return (threads_x, threads_y)\n    end\n    get_shmem(threads) = 2 * sum(threads) * sizeof(Float32)\n    kernel = @cuda launch=false pairwise_dist_kernel(x, y, result, n)\n    config = launch_configuration(kernel.fun, shmem=threads->get_shmem(get_threads(threads)))\n    # convert to 2D block size and figure out appropriate grid size\n    threads = get_threads(config.threads)\n    blocks = ceil.(Int, n ./ threads)\n    shmem = get_shmem(threads)\n    kernel(x, y, result, n; threads=threads, blocks=blocks, shmem=shmem)\n    return result\nend"}]}]}],"thread_ts":"1611572679.050500","parent_user_id":"UB2NJGVK6"},{"client_msg_id":"cfc70716-0512-48b5-b9c4-e2374fa3fcab","type":"message","text":"Did I miss something obvious?","user":"UB2NJGVK6","ts":"1611609045.052900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TZg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Did I miss something obvious?"}]}]}],"thread_ts":"1611572679.050500","parent_user_id":"UB2NJGVK6"},{"client_msg_id":"dd8d41f4-1b29-4db1-ba9d-97b9be7f124e","type":"message","text":"been a while since I wrote that kernel, but looks ok. it's a naive kernel, of course, memory behavior is pretty bad/unoptimized. but if it's fast enough... :slightly_smiling_face:","user":"U68A3ASP9","ts":"1611609189.053100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=YcP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"been a while since I wrote that kernel, but looks ok. it's a naive kernel, of course, memory behavior is pretty bad/unoptimized. but if it's fast enough... "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1611572679.050500","parent_user_id":"UB2NJGVK6"},{"client_msg_id":"41d89171-6cba-495a-b294-6252263ce4f9","type":"message","text":"Great, thanks a lot! I may look at memory behaviour later.","user":"UB2NJGVK6","ts":"1611651075.053300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DfP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Great, thanks a lot! I may look at memory behaviour later."}]}]}],"thread_ts":"1611572679.050500","parent_user_id":"UB2NJGVK6"}]