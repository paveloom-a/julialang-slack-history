[{"client_msg_id":"e985aef3-d285-4c08-843b-71256958aea2","type":"message","text":"Whats the current recommended way to deal with broadcasting CuArrays over Base.sin without having to have two copies of your code and make one of them CUDA.sin?","user":"UUMJUCYRK","ts":"1609619621.141000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RUie","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Whats the current recommended way to deal with broadcasting CuArrays over Base.sin without having to have two copies of your code and make one of them CUDA.sin?"}]}]}],"thread_ts":"1609619621.141000","reply_count":6,"reply_users_count":2,"latest_reply":"1609635765.142700","reply_users":["U6A0PD8CR","UUMJUCYRK"],"subscribed":false},{"client_msg_id":"edaa52f4-09f0-4997-8476-7fdbe52e74a4","type":"message","text":"KernelAbstractions or manual usage of Cassette","user":"U6A0PD8CR","ts":"1609628115.141200","team":"T68168MUP","edited":{"user":"U6A0PD8CR","ts":"1609628139.000000"},"blocks":[{"type":"rich_text","block_id":"scuwz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"KernelAbstractions or manual usage of Cassette"}]}]}],"thread_ts":"1609619621.141000","parent_user_id":"UUMJUCYRK"},{"client_msg_id":"743f3614-bbde-4b71-81b1-18c4d8327079","type":"message","text":"Broadcast over CuArray should already do that replacement though","user":"U6A0PD8CR","ts":"1609628166.141600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/Nj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Broadcast over CuArray should already do that replacement though"}]}]}],"thread_ts":"1609619621.141000","parent_user_id":"UUMJUCYRK"},{"client_msg_id":"331e6805-6b5f-4d79-a781-881bea8ade5c","type":"message","text":"Ah OK, I see that Base.sin works, but I should have said Base.angle is the one that I'm actually having an issue with, is this a bug perhaps?\n\n```julia&gt; using CUDA\n\njulia&gt; x = cu(rand(10,10));\n\njulia&gt; angle.(x)\n┌ Warning: calls to Base intrinsics might be GPU incompatible\n│   exception =\n│    You called atan(y::T, x::T) where T&lt;:Union{Float32, Float64} in Base.Math at special/trig.jl:567, maybe you intended to call atan(x::Float32, y::Float32) in CUDA at /home/marius/.julia/packages/CUDA/YeS8q/src/device/intrinsics/math.jl:39 instead?```","user":"UUMJUCYRK","ts":"1609633792.142100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BaaIU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah OK, I see that Base.sin works, but I should have said Base.angle is the one that I'm actually having an issue with, is this a bug perhaps?\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using CUDA\n\njulia> x = cu(rand(10,10));\n\njulia> angle.(x)\n┌ Warning: calls to Base intrinsics might be GPU incompatible\n│   exception =\n│    You called atan(y::T, x::T) where T<:Union{Float32, Float64} in Base.Math at special/trig.jl:567, maybe you intended to call atan(x::Float32, y::Float32) in CUDA at /home/marius/.julia/packages/CUDA/YeS8q/src/device/intrinsics/math.jl:39 instead?"}]}]}],"thread_ts":"1609619621.141000","parent_user_id":"UUMJUCYRK"},{"client_msg_id":"23322533-1467-4412-87c0-78654a263f27","type":"message","text":"I think defining this solves it for my simple expressions `y = angle.(x)`, haven't tested for how it might work with more complicated broadcasts though\n```Base.broadcasted(::typeof(angle), x::CuArray) = Base.broadcasted(CUDA.angle, x)```","user":"UUMJUCYRK","ts":"1609634039.142300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YSr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think defining this solves it for my simple expressions "},{"type":"text","text":"y = angle.(x)","style":{"code":true}},{"type":"text","text":", haven't tested for how it might work with more complicated broadcasts though\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Base.broadcasted(::typeof(angle), x::CuArray) = Base.broadcasted(CUDA.angle, x)"}]}]}],"thread_ts":"1609619621.141000","parent_user_id":"UUMJUCYRK"},{"client_msg_id":"14476c71-df66-41d4-8607-9643c0cea993","type":"message","text":"Yea, definitely doesn't work generally, I think the right solution is\n```CUDA.cufunc(::typeof(angle)) = CUDA.angle```","user":"UUMJUCYRK","ts":"1609635191.142500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vMBU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yea, definitely doesn't work generally, I think the right solution is\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"CUDA.cufunc(::typeof(angle)) = CUDA.angle"}]}]}],"thread_ts":"1609619621.141000","parent_user_id":"UUMJUCYRK"},{"client_msg_id":"bcccf133-78c7-4f36-9b6a-b59324c91fcd","type":"message","text":"Ref <https://github.com/JuliaGPU/CUDA.jl/pull/618>","user":"UUMJUCYRK","ts":"1609635765.142700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OvY/8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ref "},{"type":"link","url":"https://github.com/JuliaGPU/CUDA.jl/pull/618"}]}]}],"thread_ts":"1609619621.141000","parent_user_id":"UUMJUCYRK"}]