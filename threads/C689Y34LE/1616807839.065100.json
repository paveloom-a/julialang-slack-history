[{"client_msg_id":"3e29874b-d616-408a-a4fb-b2cfa2ca391f","type":"message","text":"Hi I just upgraded to 1.6 and am running into a new error computing the gradient of a cholesky decomposition with cuarrays. I tried reverting a bunch of versions of Zygote and a bunch of versions of CUDA with no dice, in addition to trying master, so its almost definitely something in the jump to 1.6. To be clear this works on 1.5.4:\n```using CUDA, Zygote\nX = rand(5,2) |&gt; CuArray{Float64}\ny=rand(5)|&gt; CuArray{Float64}\ntf(X,y) = sum(CUDA.cholesky(X'*X)\\ (X' * y))\ntf(X,y) #works fine\ngradient((X)-&gt;tf(X,y),X) \n\nERROR: ArgumentError: cannot take the CPU address of a CuArray{Float64, 2}\nStacktrace:\n  [1] unsafe_convert(#unused#::Type{Ptr{Float64}}, x::CuArray{Float64, 2})\n    @ CUDA ~\\.julia\\packages\\CUDA\\qEV3Y\\src\\array.jl:211\n  [2] trsm!(side::Char, uplo::Char, transa::Char, diag::Char, alpha::Float64, A::CuArray{Float64, 2}, B::CuArray{Float64, 2})\n    @ LinearAlgebra.BLAS C:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.6\\LinearAlgebra\\src\\blas.jl:1995\n  [3] (::Zygote.var\"#779#780\"{CuArray{Float64, 2}, Cholesky{Float64, CuArray{Float64, 2}}})(Δ::NamedTuple{(:uplo, :status, :factors), Tuple{Nothing, Nothing, CuArray{Float64, 2}}})\n    @ Zygote ~\\.julia\\packages\\Zygote\\9X8lu\\src\\lib\\array.jl:544\n  [4] (::Zygote.var\"#3113#back#781\"{Zygote.var\"#779#780\"{CuArray{Float64, 2}, Cholesky{Float64, CuArray{Float64, 2}}}})(Δ::NamedTuple{(:uplo, :status, :factors), Tuple{Nothing, Nothing, CuArray{Float64, 2}}})\n    @ Zygote ~\\.julia\\packages\\ZygoteRules\\OjfTt\\src\\adjoint.jl:59\n  [5] Pullback\n    @ .\\REPL[9]:1 [inlined]\n  [6] (::typeof(∂(tf)))(Δ::Float64)\n    @ Zygote ~\\.julia\\packages\\Zygote\\9X8lu\\src\\compiler\\interface2.jl:0\n  [7] Pullback\n    @ .\\REPL[14]:1 [inlined]\n  [8] (::typeof(∂(#3)))(Δ::Float64)\n    @ Zygote ~\\.julia\\packages\\Zygote\\9X8lu\\src\\compiler\\interface2.jl:0\n  [9] (::Zygote.var\"#41#42\"{typeof(∂(#3))})(Δ::Float64)\n    @ Zygote ~\\.julia\\packages\\Zygote\\9X8lu\\src\\compiler\\interface.jl:41\n [10] gradient(f::Function, args::CuArray{Float64, 2})\n    @ Zygote ~\\.julia\\packages\\Zygote\\9X8lu\\src\\compiler\\interface.jl:59\n [11] top-level scope\n    @ REPL[14]:1```\nI posted an issue for Zygote (<https://github.com/FluxML/Zygote.jl/issues/933>) since it only happens with the gradient, but I can cross-post it on CUDA if that would be helpful- in any case, would be grateful for any help on this- regression code is my main use case","user":"U011ZPX1T5G","ts":"1616807839.065100","team":"T68168MUP","edited":{"user":"U011ZPX1T5G","ts":"1616807900.000000"},"blocks":[{"type":"rich_text","block_id":"zzB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi I just upgraded to 1.6 and am running into a new error computing the gradient of a cholesky decomposition with cuarrays. I tried reverting a bunch of versions of Zygote and a bunch of versions of CUDA with no dice, in addition to trying master, so its almost definitely something in the jump to 1.6. To be clear this works on 1.5.4:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using CUDA, Zygote\nX = rand(5,2) |> CuArray{Float64}\ny=rand(5)|> CuArray{Float64}\ntf(X,y) = sum(CUDA.cholesky(X'*X)\\ (X' * y))\ntf(X,y) #works fine\ngradient((X)->tf(X,y),X) \n\nERROR: ArgumentError: cannot take the CPU address of a CuArray{Float64, 2}\nStacktrace:\n  [1] unsafe_convert(#unused#::Type{Ptr{Float64}}, x::CuArray{Float64, 2})\n    @ CUDA ~\\.julia\\packages\\CUDA\\qEV3Y\\src\\array.jl:211\n  [2] trsm!(side::Char, uplo::Char, transa::Char, diag::Char, alpha::Float64, A::CuArray{Float64, 2}, B::CuArray{Float64, 2})\n    @ LinearAlgebra.BLAS C:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.6\\LinearAlgebra\\src\\blas.jl:1995\n  [3] (::Zygote.var\"#779#780\"{CuArray{Float64, 2}, Cholesky{Float64, CuArray{Float64, 2}}})(Δ::NamedTuple{(:uplo, :status, :factors), Tuple{Nothing, Nothing, CuArray{Float64, 2}}})\n    @ Zygote ~\\.julia\\packages\\Zygote\\9X8lu\\src\\lib\\array.jl:544\n  [4] (::Zygote.var\"#3113#back#781\"{Zygote.var\"#779#780\"{CuArray{Float64, 2}, Cholesky{Float64, CuArray{Float64, 2}}}})(Δ::NamedTuple{(:uplo, :status, :factors), Tuple{Nothing, Nothing, CuArray{Float64, 2}}})\n    @ Zygote ~\\.julia\\packages\\ZygoteRules\\OjfTt\\src\\adjoint.jl:59\n  [5] Pullback\n    @ .\\REPL[9]:1 [inlined]\n  [6] (::typeof(∂(tf)))(Δ::Float64)\n    @ Zygote ~\\.julia\\packages\\Zygote\\9X8lu\\src\\compiler\\interface2.jl:0\n  [7] Pullback\n    @ .\\REPL[14]:1 [inlined]\n  [8] (::typeof(∂(#3)))(Δ::Float64)\n    @ Zygote ~\\.julia\\packages\\Zygote\\9X8lu\\src\\compiler\\interface2.jl:0\n  [9] (::Zygote.var\"#41#42\"{typeof(∂(#3))})(Δ::Float64)\n    @ Zygote ~\\.julia\\packages\\Zygote\\9X8lu\\src\\compiler\\interface.jl:41\n [10] gradient(f::Function, args::CuArray{Float64, 2})\n    @ Zygote ~\\.julia\\packages\\Zygote\\9X8lu\\src\\compiler\\interface.jl:59\n [11] top-level scope\n    @ REPL[14]:1"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I posted an issue for Zygote ("},{"type":"link","url":"https://github.com/FluxML/Zygote.jl/issues/933"},{"type":"text","text":") since it only happens with the gradient, but I can cross-post it on CUDA if that would be helpful- in any case, would be grateful for any help on this- regression code is my main use case"}]}]}],"thread_ts":"1616807839.065100","reply_count":1,"reply_users_count":1,"latest_reply":"1616818821.065700","reply_users":["U011ZPX1T5G"],"is_locked":false,"subscribed":false},{"client_msg_id":"7e0b24e1-a1b5-4373-9db2-cfe3be7a964a","type":"message","text":"Work around- I modified the Zygote adjoint code for cholesky to explicitly call CUBLAS\n\n```Zygote.@adjoint function cholesky(Σ::CuMatrix; check = true)\n  C = cholesky(Σ, check = check)\n  return C, function(Δ::NamedTuple)\n    issuccess(C) || throw(PosDefException(C.info))\n    U, Ū = C.U, Δ.factors\n    Σ̄ = similar(U.data)\n    Σ̄ = mul!(Σ̄, Ū, U')\n    Σ̄ = Zygote.copytri!(Σ̄, 'U')\n    Σ̄ = ldiv!(U, Σ̄)\n    Σ̄ = CUBLAS.trsm!('R', 'U', 'T', 'N', one(eltype(Σ)), U.data, Σ̄)\n    Σ̄[diagind(Σ̄)] ./= 2\n    return (UpperTriangular(Σ̄),)\n  end\nend```\n","user":"U011ZPX1T5G","ts":"1616818821.065700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"V5n+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Work around- I modified the Zygote adjoint code for cholesky to explicitly call CUBLAS\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Zygote.@adjoint function cholesky(Σ::CuMatrix; check = true)\n  C = cholesky(Σ, check = check)\n  return C, function(Δ::NamedTuple)\n    issuccess(C) || throw(PosDefException(C.info))\n    U, Ū = C.U, Δ.factors\n    Σ̄ = similar(U.data)\n    Σ̄ = mul!(Σ̄, Ū, U')\n    Σ̄ = Zygote.copytri!(Σ̄, 'U')\n    Σ̄ = ldiv!(U, Σ̄)\n    Σ̄ = CUBLAS.trsm!('R', 'U', 'T', 'N', one(eltype(Σ)), U.data, Σ̄)\n    Σ̄[diagind(Σ̄)] ./= 2\n    return (UpperTriangular(Σ̄),)\n  end\nend"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1616807839.065100","parent_user_id":"U011ZPX1T5G"}]