[{"client_msg_id":"b63ec2be-dc89-4690-8c47-2a61eb69ae4c","type":"message","text":"Actually folks like <@UC8821DPY> have already done lots of great work to improve type stabilities in `Base` in terms of preventing invalidations :slightly_smiling_face: But yes, more improvements will be very appreciated for JET to be more practical.\nWe can also just improve Julia compiler; the more we improve Julia compiler, the more practical JET will be. E.g. some of the issues you may have faced will be fixed w/ this PR: <https://github.com/JuliaLang/julia/pull/38905>","user":"UH1BLK14H","ts":"1613568555.030200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5GcY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Actually folks like "},{"type":"user","user_id":"UC8821DPY"},{"type":"text","text":" have already done lots of great work to improve type stabilities in "},{"type":"text","text":"Base","style":{"code":true}},{"type":"text","text":" in terms of preventing invalidations "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":" But yes, more improvements will be very appreciated for JET to be more practical.\nWe can also just improve Julia compiler; the more we improve Julia compiler, the more practical JET will be. E.g. some of the issues you may have faced will be fixed w/ this PR: "},{"type":"link","url":"https://github.com/JuliaLang/julia/pull/38905"}]}]}],"thread_ts":"1613568555.030200","reply_count":10,"reply_users_count":3,"latest_reply":"1613571288.034500","reply_users":["U7HAYKY9X","UM30MT6RF","UH1BLK14H"],"subscribed":false,"reactions":[{"name":"heart","users":["U011V2YN59N","UM30MT6RF","UC8821DPY","U7HAYKY9X"],"count":4}]},{"client_msg_id":"485ecf0b-ff3b-49e8-b085-a350f5c45486","type":"message","text":"I agree :+1: Much of it may be un-fixable, but a lot can be fixed with changes to the compiler. Maybe JET will even help point out places where the compiler could be improved!\nIn my 15-minute playing around with JET, I did see a lot of patterns like this\n```x = some_function() # inferred to Union{A, Nothing}\nif x !== nothing\n    # do stuff with x, assuming it's an A\nend```\n, where the compiler failed to see that x cannot be a Nothing in that block.\nAn example is here: <https://github.com/JuliaLang/julia/blob/master/base/strings/util.jl#L421>, where JET complains that `first(r)` will fail if r is a Nothing.\n\nWeirdly, there is actually a compiler optimization in place that does exactly the right thing, it's just that it doesn't seem to work in that particular line of code, don't know why","user":"U7HAYKY9X","ts":"1613569475.030600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RXQl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I agree "},{"type":"emoji","name":"+1"},{"type":"text","text":" Much of it may be un-fixable, but a lot can be fixed with changes to the compiler. Maybe JET will even help point out places where the compiler could be improved!\nIn my 15-minute playing around with JET, I did see a lot of patterns like this\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"x = some_function() # inferred to Union{A, Nothing}\nif x !== nothing\n    # do stuff with x, assuming it's an A\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":", where the compiler failed to see that x cannot be a Nothing in that block.\nAn example is here: "},{"type":"link","url":"https://github.com/JuliaLang/julia/blob/master/base/strings/util.jl#L421"},{"type":"text","text":", where JET complains that "},{"type":"text","text":"first(r)","style":{"code":true}},{"type":"text","text":" will fail if r is a Nothing.\n\nWeirdly, there is actually a compiler optimization in place that does exactly the right thing, it's just that it doesn't seem to work in that particular line of code, don't know why"}]}]}],"thread_ts":"1613568555.030200","parent_user_id":"UH1BLK14H"},{"client_msg_id":"6e5e52a2-6def-4ce9-9711-b9c3ac233dd0","type":"message","text":"You can see it just be doing `@report_call split(\"\")`","user":"U7HAYKY9X","ts":"1613569541.030800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6Eqi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can see it just be doing "},{"type":"text","text":"@report_call split(\"\")","style":{"code":true}}]}]}],"thread_ts":"1613568555.030200","parent_user_id":"UH1BLK14H"},{"client_msg_id":"4dd73c03-abaf-4809-96fd-b63ff1285b45","type":"message","text":"Okay, I just now looked through the PR you linked, and that indeed looks like exactly the thing to fix several of these issue. Great work. :heart: I really hope it gets merged.","user":"U7HAYKY9X","ts":"1613569879.031000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rGR/l","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Okay, I just now looked through the PR you linked, and that indeed looks like exactly the thing to fix several of these issue. Great work. "},{"type":"emoji","name":"heart"},{"type":"text","text":" I really hope it gets merged."}]}]}],"thread_ts":"1613568555.030200","parent_user_id":"UH1BLK14H"},{"client_msg_id":"5927ca26-57af-4ec0-81b0-7076b6048ac4","type":"message","text":"Hmm, that's odd because it seems like Julia's own inference definitely knows about that.","user":"UM30MT6RF","ts":"1613570739.032900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sprk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmm, that's odd because it seems like Julia's own inference definitely knows about that."}]}]}],"thread_ts":"1613568555.030200","parent_user_id":"UH1BLK14H"},{"client_msg_id":"b48447b2-8961-4efc-8007-b2b1ced8136e","type":"message","text":"<@U7HAYKY9X> On the latest nightly I get:\n```julia&gt; using JET\n\njulia&gt; @report_call split(\"\")\nNo errors !\nVector{SubString{String}} (alias for Array{SubString{String}, 1})```","user":"UM30MT6RF","ts":"1613570984.033100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NLSIF","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U7HAYKY9X"},{"type":"text","text":" On the latest nightly I get:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using JET\n\njulia> @report_call split(\"\")\nNo errors !\nVector{SubString{String}} (alias for Array{SubString{String}, 1})"}]}]}],"thread_ts":"1613568555.030200","parent_user_id":"UH1BLK14H"},{"client_msg_id":"4eab03ef-5a22-4851-ba63-77586650a9e1","type":"message","text":"Ah, looks like it was changed b/w the version I use and master","user":"U7HAYKY9X","ts":"1613570986.033300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4U7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, looks like it was changed b/w the version I use and master"}]}]}],"thread_ts":"1613568555.030200","parent_user_id":"UH1BLK14H"},{"client_msg_id":"dd8c50e7-9382-4886-a8c8-8d76999b2dc0","type":"message","text":"I use 1.6.0-rc1, commit a58bdd9010 from 11 days ago, where it used `!isnothing` instead of `!== nothing` . But yeah, that looks exactly like the thing something the PR in the OP of this thread would address, such that `isnothing` becomes more inferrable","user":"U7HAYKY9X","ts":"1613571072.033500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C3t","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I use 1.6.0-rc1, commit a58bdd9010 from 11 days ago, where it used "},{"type":"text","text":"!isnothing","style":{"code":true}},{"type":"text","text":" instead of "},{"type":"text","text":"!== nothing","style":{"code":true}},{"type":"text","text":" . But yeah, that looks exactly like the thing something the PR in the OP of this thread would address, such that "},{"type":"text","text":"isnothing","style":{"code":true}},{"type":"text","text":" becomes more inferrable"}]}]}],"thread_ts":"1613568555.030200","parent_user_id":"UH1BLK14H"},{"client_msg_id":"ab7b2ff1-d134-4a4e-bcee-e4cef3d4da75","type":"message","text":"Yes, that's true. Currently this constraint propagation only works for builtins","user":"UM30MT6RF","ts":"1613571106.033700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jsTil","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, that's true. Currently this constraint propagation only works for builtins"}]}]}],"thread_ts":"1613568555.030200","parent_user_id":"UH1BLK14H","reactions":[{"name":"+1","users":["U7HAYKY9X"],"count":1}]},{"client_msg_id":"8d872d0d-db68-4cc1-82ed-2bab83281101","type":"message","text":"yeah, I certainly fixed `split(\"\")` case in this PR <https://github.com/JuliaLang/julia/pull/38832>","user":"UH1BLK14H","ts":"1613571170.034000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3ViF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, I certainly fixed "},{"type":"text","text":"split(\"\")","style":{"code":true}},{"type":"text","text":" case in this PR "},{"type":"link","url":"https://github.com/JuliaLang/julia/pull/38832"}]}]}],"thread_ts":"1613568555.030200","parent_user_id":"UH1BLK14H","reactions":[{"name":"+1","users":["UM30MT6RF"],"count":1},{"name":"heart","users":["U7HAYKY9X"],"count":1}]},{"client_msg_id":"4802df42-b36e-4b6f-a113-0cdd98d3c503","type":"message","text":"New <#CN00LP5UK|apprecigripes> - Julia gets fixed so fast that running 11 days old master makes me gripe about things that's already fixed :sweat_smile:","user":"U7HAYKY9X","ts":"1613571288.034500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"H8/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"New "},{"type":"channel","channel_id":"CN00LP5UK"},{"type":"text","text":" - Julia gets fixed so fast that running 11 days old master makes me gripe about things that's already fixed "},{"type":"emoji","name":"sweat_smile"}]}]}],"thread_ts":"1613568555.030200","parent_user_id":"UH1BLK14H","reactions":[{"name":"point_up","users":["U67G3QRJM"],"count":1}]}]