[{"client_msg_id":"d40e1a91-3d21-4fee-9e3e-55962e9571de","type":"message","text":"Is it just me, or is database support in Julia still at a very early and incomplete stage? I'm moving some processes from Python to Julia, and for a language designed for scientific computing I find it odd that database support isn't a very strong part. I had no problems using pymongo or SqlAlchemy for connecting to mongo and Postgres. In Julia I haven't yet got mongoc to work, but that is probably me (although some documentation would help). PostgreSQL.jl seems to be dead, and libPQ has not one single line of documentation on how to use it, so I have no idea whether it works or not, or how to use it with data frames. At least Redis and mysql seem well supported. Are people using pycall to get around all this?","user":"U01GFAJRZ44","ts":"1611313509.001100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CWFjE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is it just me, or is database support in Julia still at a very early and incomplete stage? I'm moving some processes from Python to Julia, and for a language designed for scientific computing I find it odd that database support isn't a very strong part. I had no problems using pymongo or SqlAlchemy for connecting to mongo and Postgres. In Julia I haven't yet got mongoc to work, but that is probably me (although some documentation would help). PostgreSQL.jl seems to be dead, and libPQ has not one single line of documentation on how to use it, so I have no idea whether it works or not, or how to use it with data frames. At least Redis and mysql seem well supported. Are people using pycall to get around all this?"}]}]}],"thread_ts":"1611313509.001100","reply_count":5,"reply_users_count":3,"latest_reply":"1611327211.010600","reply_users":["U017JTQFNEQ","UC53031QU","U9VG1AYSG"],"subscribed":false,"reactions":[{"name":"100","users":["U017JTQFNEQ"],"count":1}]},{"client_msg_id":"78ba5f08-0d10-450d-9a5e-5371e9fce247","type":"message","text":"i  have used MySQL.jl.  something like sqlAlchemy would be really nice.","user":"U017JTQFNEQ","ts":"1611317197.009700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rhKzm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i  have used MySQL.jl.  something like sqlAlchemy would be really nice."}]}]}],"thread_ts":"1611313509.001100","parent_user_id":"U01GFAJRZ44"},{"client_msg_id":"d0e602a1-2445-4f2c-9069-d45346ad84b3","type":"message","text":"I agree LibPQ’s docs could be more thorough, but saying there’s nothing is a bit strong - <https://invenia.github.io/LibPQ.jl/stable/>","user":"UC53031QU","ts":"1611323786.009900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"P=8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I agree LibPQ’s docs could be more thorough, but saying there’s nothing is a bit strong - "},{"type":"link","url":"https://invenia.github.io/LibPQ.jl/stable/"}]}]}],"thread_ts":"1611313509.001100","parent_user_id":"U01GFAJRZ44"},{"client_msg_id":"9fcb0385-ec80-4a94-ad9d-1539f5aa18c2","type":"message","text":"I’ve used LibPQ quite a bit and it’s generally been good for my use cases, same with MySQL","user":"UC53031QU","ts":"1611323856.010100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"v1LCd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’ve used LibPQ quite a bit and it’s generally been good for my use cases, same with MySQL"}]}]}],"thread_ts":"1611313509.001100","parent_user_id":"U01GFAJRZ44"},{"client_msg_id":"909d70ee-d619-42a6-975a-842b78b5bbef","type":"message","text":"<https://github.com/JuliaDatabases/DBInterface.jl> is a step towards a more integrated approach like SQLAlchema, but doesn’t go as far as being an ORM","user":"UC53031QU","ts":"1611323912.010300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"i/a","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaDatabases/DBInterface.jl"},{"type":"text","text":" is a step towards a more integrated approach like SQLAlchema, but doesn’t go as far as being an ORM"}]}]}],"thread_ts":"1611313509.001100","parent_user_id":"U01GFAJRZ44"},{"type":"message","subtype":"thread_broadcast","text":"Unfortunately, replicating SQLAlchemy requires an *enormous* amount of effort.  The problem with SQL is that it is actually about a hundred different things each with its own, *completely* distinct implementation masquerading as the same thing.  Many, perhaps most of us who are active in the Julia community have scientific and academic backgrounds, and tend to only be interested in working on database support as far as absolutely necessary, and many scientific communities just don't use SQL at all, so the probability of someone coming along and spending a year of non-stop effort trying to reproduce sqlachemy is pretty low, which is probably a good thing, because afterwards that person would become a suicide risk.\n\nThat said, while Julia certainly can't boast the polished database support that python has, at this point there are tons of options.  I suggest that you look for your database interface in the following order:\n- If you are using a database with a mature direct wrapper like LibPQ, MySQL or SQLite, just use those packages.  We do need some more documentation yes, but those are pretty solid packages by now.\n- If that's not avaialable, use ODBC.jl.  ODBC is a bit of a pain-in-the-ass, yes, but <@U681ELA87> has done a lot to streamline the process.  If you can obtain the driver, it's now very easy to set up.\n- If the above fail, you should consider using JDBC.jl.  This is unpleasant since it will require the JVM, but JDBC itself is *extremely* mature and well-supported, so if you can get the wrapper working, you can query anything.\n- If you dont' want to bother with that, use PyCall on SQLAlchemy.\n\nFor the record, at my job I use postgres, MS SQL and AWS athena (apache presto) and I have not had to resort to JDBC or PyCall in quite a long time.  It's perhaps also a relevant trend that things seem to be moving in the direction of HTTP requests, e.g. AWS athena, and while there aren't create packages in the Julia ecosystem for these right now either, querying databases via HTTP *drastically* simplifies many of the interface details, even if it doesn't necessarily solve the problem of needing a common interface.","user":"U9VG1AYSG","ts":"1611327211.010600","thread_ts":"1611313509.001100","root":{"client_msg_id":"d40e1a91-3d21-4fee-9e3e-55962e9571de","type":"message","text":"Is it just me, or is database support in Julia still at a very early and incomplete stage? I'm moving some processes from Python to Julia, and for a language designed for scientific computing I find it odd that database support isn't a very strong part. I had no problems using pymongo or SqlAlchemy for connecting to mongo and Postgres. In Julia I haven't yet got mongoc to work, but that is probably me (although some documentation would help). PostgreSQL.jl seems to be dead, and libPQ has not one single line of documentation on how to use it, so I have no idea whether it works or not, or how to use it with data frames. At least Redis and mysql seem well supported. Are people using pycall to get around all this?","user":"U01GFAJRZ44","ts":"1611313509.001100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CWFjE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is it just me, or is database support in Julia still at a very early and incomplete stage? I'm moving some processes from Python to Julia, and for a language designed for scientific computing I find it odd that database support isn't a very strong part. I had no problems using pymongo or SqlAlchemy for connecting to mongo and Postgres. In Julia I haven't yet got mongoc to work, but that is probably me (although some documentation would help). PostgreSQL.jl seems to be dead, and libPQ has not one single line of documentation on how to use it, so I have no idea whether it works or not, or how to use it with data frames. At least Redis and mysql seem well supported. Are people using pycall to get around all this?"}]}]}],"thread_ts":"1611313509.001100","reply_count":5,"reply_users_count":3,"latest_reply":"1611327211.010600","reply_users":["U017JTQFNEQ","UC53031QU","U9VG1AYSG"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"XFZC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Unfortunately, replicating SQLAlchemy requires an "},{"type":"text","text":"enormous","style":{"bold":true}},{"type":"text","text":" amount of effort.  The problem with SQL is that it is actually about a hundred different things each with its own, "},{"type":"text","text":"completely","style":{"bold":true}},{"type":"text","text":" distinct implementation masquerading as the same thing.  Many, perhaps most of us who are active in the Julia community have scientific and academic backgrounds, and tend to only be interested in working on database support as far as absolutely necessary, and many scientific communities just don't use SQL at all, so the probability of someone coming along and spending a year of non-stop effort trying to reproduce sqlachemy is pretty low, which is probably a good thing, because afterwards that person would become a suicide risk.\n\nThat said, while Julia certainly can't boast the polished database support that python has, at this point there are tons of options.  I suggest that you look for your database interface in the following order:\n- If you are using a database with a mature direct wrapper like LibPQ, MySQL or SQLite, just use those packages.  We do need some more documentation yes, but those are pretty solid packages by now.\n- If that's not avaialable, use ODBC.jl.  ODBC is a bit of a pain-in-the-ass, yes, but "},{"type":"user","user_id":"U681ELA87"},{"type":"text","text":" has done a lot to streamline the process.  If you can obtain the driver, it's now very easy to set up.\n- If the above fail, you should consider using JDBC.jl.  This is unpleasant since it will require the JVM, but JDBC itself is "},{"type":"text","text":"extremely","style":{"bold":true}},{"type":"text","text":" mature and well-supported, so if you can get the wrapper working, you can query anything.\n- If you dont' want to bother with that, use PyCall on SQLAlchemy.\n\nFor the record, at my job I use postgres, MS SQL and AWS athena (apache presto) and I have not had to resort to JDBC or PyCall in quite a long time.  It's perhaps also a relevant trend that things seem to be moving in the direction of HTTP requests, e.g. AWS athena, and while there aren't create packages in the Julia ecosystem for these right now either, querying databases via HTTP "},{"type":"text","text":"drastically","style":{"bold":true}},{"type":"text","text":" simplifies many of the interface details, even if it doesn't necessarily solve the problem of needing a common interface."}]}]}],"client_msg_id":"59cf2e08-3dcc-4caa-88b3-90ef726ed43e","reactions":[{"name":"100","users":["UC53031QU","UGU761DU2","U017JTQFNEQ"],"count":3},{"name":"+1","users":["U01GFAJRZ44"],"count":1}]}]