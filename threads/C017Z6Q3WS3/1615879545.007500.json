[{"client_msg_id":"e01afe5f-1a89-4674-9a9e-ec76987212a6","type":"message","text":"I have a Pluto notebook with three cells.  The first cell creates an Array.  The second cell populates the Array.  The third cell computes a result based on the Array contents.  I find that changes made in the second cell (that change the  Array's contents) do not trigger the third cell to recompute the result.  I guess this is because the second cell is changing the contents of the Array, but the actual variable that references the Array is unchanged.  I've been able to work around this by also setting a dummy variable in the second cell (`pluto_opulate_trigger = nothing`) and then adding a no-op reference the dummy variable in the third cell.  This seems to work OK, but I was wondering: is there a better way to handle this situation?  If not, is there some sort of naming convention for such dummy variables?","user":"U01FKQQ7J0J","ts":"1615879545.007500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=CJYW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have a Pluto notebook with three cells.  The first cell creates an Array.  The second cell populates the Array.  The third cell computes a result based on the Array contents.  I find that changes made in the second cell (that change the  Array's contents) do not trigger the third cell to recompute the result.  I guess this is because the second cell is changing the contents of the Array, but the actual variable that references the Array is unchanged.  I've been able to work around this by also setting a dummy variable in the second cell ("},{"type":"text","text":"pluto_opulate_trigger = nothing","style":{"code":true}},{"type":"text","text":") and then adding a no-op reference the dummy variable in the third cell.  This seems to work OK, but I was wondering: is there a better way to handle this situation?  If not, is there some sort of naming convention for such dummy variables?"}]}]}],"thread_ts":"1615879545.007500","reply_count":9,"reply_users_count":3,"latest_reply":"1615940311.023700","reply_users":["UB197FRCL","UUTL3EKN3","U01FKQQ7J0J"],"subscribed":false},{"client_msg_id":"297956a6-e7a9-421e-84d7-b6f7cfef62d7","type":"message","text":"I think with Pluto you should avoid mutating things in general. Do you truly need to create the array in a different cell? Can you get away with a `let...end` block? Or a `begin...end` one?","user":"UB197FRCL","ts":"1615896461.007900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vBG8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think with Pluto you should avoid mutating things in general. Do you truly need to create the array in a different cell? Can you get away with a "},{"type":"text","text":"let...end","style":{"code":true}},{"type":"text","text":" block? Or a "},{"type":"text","text":"begin...end","style":{"code":true}},{"type":"text","text":" one?"}]}]}],"thread_ts":"1615879545.007500","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"28261340-dac3-41f6-9197-0128c2bafbf0","type":"message","text":"E.g.,\n```begin\n    A = Matrix(undef, 2, 2)\n    @. A[:] = rand()\nend```\nnext cell\n```do stuff with A```","user":"UB197FRCL","ts":"1615896564.008100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6shk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"E.g.,\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"begin\n    A = Matrix(undef, 2, 2)\n    @. A[:] = rand()\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"next cell\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"do stuff with A"}]}]}],"thread_ts":"1615879545.007500","parent_user_id":"U01FKQQ7J0J","reactions":[{"name":"+1","users":["UUTL3EKN3"],"count":1}]},{"client_msg_id":"29940716-b647-4d4f-b61c-5fe138f51c06","type":"message","text":"The dummy variable is really smart! I would also recommend a `begin` block in this situation. Try to contain definitions and mutations of one object within a single cell.","user":"UUTL3EKN3","ts":"1615900151.009100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"m3XL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The dummy variable is really smart! I would also recommend a "},{"type":"text","text":"begin","style":{"code":true}},{"type":"text","text":" block in this situation. Try to contain definitions and mutations of one object within a single cell."}]}]}],"thread_ts":"1615879545.007500","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"458fe2b1-1a79-4c44-8da7-f63e85690d0f","type":"message","text":"Thanks for all the comments!  I usually don't separate the construction and mutation, but the notebook I first encountered this in is a tutorial where I wanted to have a bit of text discussing the creation of each Array (the real notebook actually uses two).  Because I wanted this extra explanatory text I had to split them up into separate cells.  I suppose I could define \"factory\" methods when discussing the creation of the Arrays and then call the factory methods and populate the Arrays all in the second cell.  I'll try that and see which way seems the least \"unnatural\".","user":"U01FKQQ7J0J","ts":"1615913323.012500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"N1s","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks for all the comments!  I usually don't separate the construction and mutation, but the notebook I first encountered this in is a tutorial where I wanted to have a bit of text discussing the creation of each Array (the real notebook actually uses two).  Because I wanted this extra explanatory text I had to split them up into separate cells.  I suppose I could define \"factory\" methods when discussing the creation of the Arrays and then call the factory methods and populate the Arrays all in the second cell.  I'll try that and see which way seems the least \"unnatural\"."}]}]}],"thread_ts":"1615879545.007500","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"96af6fb2-2fb8-4139-be01-5efe5cfa49a7","type":"message","text":"BTW, I can't take credit for the dummy variable idea.  I got that idea from PlutoUI's Button :big-red-button:","user":"U01FKQQ7J0J","ts":"1615921643.015800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ethwn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"BTW, I can't take credit for the dummy variable idea.  I got that idea from PlutoUI's Button "},{"type":"emoji","name":"big-red-button"}]}]}],"thread_ts":"1615879545.007500","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"a9d1425d-9601-4155-9c45-929fc61f54d3","type":"message","text":"Since it's for a tutorial, what about instead making a dummy variable for the creation? E.g.,\n```dummyA = Matrix(undef, 2, 2)```\nnext cell, create + allocate\n```begin\n    A = Matrix(undef, 2, 2)\n    @. A[:] = rand()\nend```\nnext cell do stuff\n```do stuff with A```\n","user":"UB197FRCL","ts":"1615939725.023000","team":"T68168MUP","edited":{"user":"UB197FRCL","ts":"1615939777.000000"},"blocks":[{"type":"rich_text","block_id":"uNpK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Since it's for a tutorial, what about instead making a dummy variable for the creation? E.g.,\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"dummyA = Matrix(undef, 2, 2)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"next cell, create + allocate\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"begin\n    A = Matrix(undef, 2, 2)\n    @. A[:] = rand()\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"next cell do stuff\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"do stuff with A"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1615879545.007500","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"d55d0279-1a34-4bf5-b7e4-ef951cb53373","type":"message","text":"Interesting idea!  That makes the Array twice, but maybe the second cell could do `A = dummyA`?","user":"U01FKQQ7J0J","ts":"1615940075.023300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3Cha","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Interesting idea!  That makes the Array twice, but maybe the second cell could do "},{"type":"text","text":"A = dummyA","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1615879545.007500","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"0828832a-fe1a-4573-bbdf-c50ffb8068eb","type":"message","text":"Actually, I was more think of the opposite, where you don't even create `dummyA`, as in\n```Matrix(undef, 2, 2) # to show how to create the array```\nnext cell, actually do create + allocate the arrays you will use\n```begin\n    A = Matrix(undef, 2, 2)\n    @. A[:] = rand()\nend```\n","user":"UB197FRCL","ts":"1615940143.023500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"S9b","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Actually, I was more think of the opposite, where you don't even create "},{"type":"text","text":"dummyA","style":{"code":true}},{"type":"text","text":", as in\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Matrix(undef, 2, 2) # to show how to create the array"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"next cell, actually do create + allocate the arrays you will use\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"begin\n    A = Matrix(undef, 2, 2)\n    @. A[:] = rand()\nend"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1615879545.007500","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"60ee788a-fccb-43bb-b2b3-d97c25ef77c4","type":"message","text":"Ah, I like that! :+1:","user":"U01FKQQ7J0J","ts":"1615940311.023700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fh78y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, I like that! "},{"type":"emoji","name":"+1"}]}]}],"thread_ts":"1615879545.007500","parent_user_id":"U01FKQQ7J0J"}]