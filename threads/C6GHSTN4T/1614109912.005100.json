[{"client_msg_id":"4fca82ad-cee8-4161-8698-29b6e8ae8902","type":"message","text":"`BlockArrays` allocates its own memory, and gives you an interface that lets you work with it in terms of blocks. Is there anything that goes the other direction? Say I have a two existing vectors, and want to treat them as a single `AbstractVector` without any additional allocations or copying","user":"U81PB6N77","ts":"1614109912.005100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ak340","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"BlockArrays","style":{"code":true}},{"type":"text","text":" allocates its own memory, and gives you an interface that lets you work with it in terms of blocks. Is there anything that goes the other direction? Say I have a two existing vectors, and want to treat them as a single "},{"type":"text","text":"AbstractVector","style":{"code":true}},{"type":"text","text":" without any additional allocations or copying"}]}]}],"thread_ts":"1614109912.005100","reply_count":14,"reply_users_count":5,"latest_reply":"1614114690.009300","reply_users":["U81PB6N77","U67D54KS8","U6740K1SP","U681ELA87","UPNRULT51"],"subscribed":false},{"client_msg_id":"306bfcbc-1b3e-43b8-8496-737b01d4a4fe","type":"message","text":"Context is working with a collection of MCMC chains (but not using that package) as if they were a single chain","user":"U81PB6N77","ts":"1614110011.005200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"l6BS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Context is working with a collection of MCMC chains (but not using that package) as if they were a single chain"}]}]}],"thread_ts":"1614109912.005100","parent_user_id":"U81PB6N77"},{"client_msg_id":"d2fee4c3-c34a-4beb-aabc-1392d74871f4","type":"message","text":"That sounds like PseudoBlockArray (also in the BlockArrays.jl package)","user":"U67D54KS8","ts":"1614111322.005600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TMV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That sounds like PseudoBlockArray (also in the BlockArrays.jl package)"}]}]}],"thread_ts":"1614109912.005100","parent_user_id":"U81PB6N77"},{"client_msg_id":"1a1568e7-fec6-47a6-8c4f-da5cdd36164d","type":"message","text":"&gt; A PseudoBlockArray is similar to a BlockArray except the full array is stored contiguously instead of block by block.\nI don't have a contiguous block, it's a collection of separately-allocated blocks","user":"U81PB6N77","ts":"1614112218.005800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0KSkx","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"A PseudoBlockArray is similar to a BlockArray except the full array is stored contiguously instead of block by block."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nI don't have a contiguous block, it's a collection of separately-allocated blocks"}]}]}],"thread_ts":"1614109912.005100","parent_user_id":"U81PB6N77"},{"client_msg_id":"51fa3eb6-29fb-4faa-b5c4-a958b1185dfd","type":"message","text":"ChainedArrays?","user":"U6740K1SP","ts":"1614112730.006000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"k+kL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ChainedArrays?"}]}]}],"thread_ts":"1614109912.005100","parent_user_id":"U81PB6N77"},{"client_msg_id":"e12a0331-1a14-44ff-8d77-5367a286125f","type":"message","text":"er, what are they called…","user":"U6740K1SP","ts":"1614112757.006200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GXgr9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"er, what are they called…"}]}]}],"thread_ts":"1614109912.005100","parent_user_id":"U81PB6N77"},{"client_msg_id":"e9126ca5-11b7-44c3-af10-80cdd8fb0c24","type":"message","text":"I know DiffEq uses this","user":"U6740K1SP","ts":"1614112767.006400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2a+Z3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I know DiffEq uses this"}]}]}],"thread_ts":"1614109912.005100","parent_user_id":"U81PB6N77"},{"client_msg_id":"a1875799-8f9c-4e48-8288-c585c0863f21","type":"message","text":"Hrm. Can’t remember/find it right now","user":"U6740K1SP","ts":"1614112938.006600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7fYK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hrm. Can’t remember/find it right now"}]}]}],"thread_ts":"1614109912.005100","parent_user_id":"U81PB6N77"},{"client_msg_id":"4f442c75-73a2-4c90-8c88-6d9eb895959b","type":"message","text":"I’m certain this exists","user":"U6740K1SP","ts":"1614112943.006800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7Is+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’m certain this exists"}]}]}],"thread_ts":"1614109912.005100","parent_user_id":"U81PB6N77"},{"client_msg_id":"DEBB2E9E-555E-4393-9F45-CADC991102F2","type":"message","text":"SentinelArrays.ChainedVector was built for this case (reusing existing arrays)","user":"U681ELA87","ts":"1614113530.008000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"a9yzA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"SentinelArrays.ChainedVector was built for this case (reusing existing arrays)"}]}]}],"thread_ts":"1614109912.005100","parent_user_id":"U81PB6N77"},{"client_msg_id":"c8493610-f5ad-43fe-9c0f-7e3d0d9b5958","type":"message","text":"I'll check it out, thanks <@U67D54KS8> <@U6740K1SP> <@U681ELA87>","user":"U81PB6N77","ts":"1614113568.008300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rM5KZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'll check it out, thanks "},{"type":"user","user_id":"U67D54KS8"},{"type":"text","text":" "},{"type":"user","user_id":"U6740K1SP"},{"type":"text","text":" "},{"type":"user","user_id":"U681ELA87"}]}]}],"thread_ts":"1614109912.005100","parent_user_id":"U81PB6N77"},{"client_msg_id":"55ef0330-cb0c-4371-baec-63e445371b34","type":"message","text":"There’s also <https://github.com/JuliaArrays/LazyArrays.jl> with `vcat`; I can’t quite remember how you use it, but it allows a lot of the same functionality as ChainedVector","user":"U681ELA87","ts":"1614113635.008500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"arICG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There’s also "},{"type":"link","url":"https://github.com/JuliaArrays/LazyArrays.jl"},{"type":"text","text":" with "},{"type":"text","text":"vcat","style":{"code":true}},{"type":"text","text":"; I can’t quite remember how you use it, but it allows a lot of the same functionality as ChainedVector"}]}]}],"thread_ts":"1614109912.005100","parent_user_id":"U81PB6N77","reactions":[{"name":"+1","users":["U81PB6N77"],"count":1}]},{"client_msg_id":"995b1aa0-8b95-4463-91e9-bb9c03799410","type":"message","text":"&gt; I don't have a contiguous block, it's a collection of separately-allocated blocks\n\nOh yeah, I got that backwards.","user":"U67D54KS8","ts":"1614114294.008800","team":"T68168MUP","edited":{"user":"U67D54KS8","ts":"1614114304.000000"},"blocks":[{"type":"rich_text","block_id":"ZOxw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"> I don't have a contiguous block, it's a collection of separately-allocated blocks\n\nOh yeah, I got that backwards."}]}]}],"thread_ts":"1614109912.005100","parent_user_id":"U81PB6N77"},{"client_msg_id":"2bf5c834-ab4b-4f41-a7ee-babeeef568e1","type":"message","text":"But there is also a BlockArray type in BlockArrays.jl that keeps the original blocks.","user":"UPNRULT51","ts":"1614114642.009100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uSnm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But there is also a BlockArray type in BlockArrays.jl that keeps the original blocks."}]}]}],"thread_ts":"1614109912.005100","parent_user_id":"U81PB6N77"},{"client_msg_id":"ae299fdd-c343-4e42-97d9-268ce0316d54","type":"message","text":"Yes, but I don't see an option to not allocate. Anyway, I think `ApplyArray` will work well for this use case","user":"U81PB6N77","ts":"1614114690.009300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"J9jW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, but I don't see an option to not allocate. Anyway, I think "},{"type":"text","text":"ApplyArray","style":{"code":true}},{"type":"text","text":" will work well for this use case"}]}]}],"thread_ts":"1614109912.005100","parent_user_id":"U81PB6N77"}]