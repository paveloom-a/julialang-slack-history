[{"client_msg_id":"ddbfa590-433e-4779-942c-19ee29a433e1","type":"message","text":"Ah I see. Is this comment out of date then? <https://discourse.julialang.org/t/using-generated-functions-to-preallocate-memory/23070/14?u=mason>","user":"U8D9768Q6","ts":"1613592945.031300","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1613592992.000000"},"blocks":[{"type":"rich_text","block_id":"Yq/D","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah I see. Is this comment out of date then? "},{"type":"link","url":"https://discourse.julialang.org/t/using-generated-functions-to-preallocate-memory/23070/14?u=mason"}]}]}],"thread_ts":"1613592945.031300","reply_count":3,"reply_users_count":2,"latest_reply":"1613594734.041500","reply_users":["U89GY9W1J","U67BXBF99"],"subscribed":false},{"client_msg_id":"7432ed9a-c8ca-4952-9536-ad9700e83739","type":"message","text":":sweat_smile: even though I know it's probably bad, we do this a bit too....\n\nWe've been using it in `MuttsDicts.jl` to avoid allocations where we know we want to return any empty vector but we don't know what the type will be, generically.\n\nThat code is here:\n<https://github.com/RelationalAI-oss/MuttsDicts.jl/blob/329d54dfd6f012f7ebac71b09ef14e9702bb1569/src/iterate.jl#L27-L30>\n\nCC: <@U67BXBF99>","user":"U89GY9W1J","ts":"1613593554.035400","team":"T68168MUP","edited":{"user":"U89GY9W1J","ts":"1613593611.000000"},"blocks":[{"type":"rich_text","block_id":"lC+Y","elements":[{"type":"rich_text_section","elements":[{"type":"emoji","name":"sweat_smile"},{"type":"text","text":" even though I know it's probably bad, we do this a bit too....\n\nWe've been using it in "},{"type":"text","text":"MuttsDicts.jl","style":{"code":true}},{"type":"text","text":" to avoid allocations where we know we want to return any empty vector but we don't know what the type will be, generically.\n\nThat code is here:\n"},{"type":"link","url":"https://github.com/RelationalAI-oss/MuttsDicts.jl/blob/329d54dfd6f012f7ebac71b09ef14e9702bb1569/src/iterate.jl#L27-L30"},{"type":"text","text":"\n\nCC: "},{"type":"user","user_id":"U67BXBF99"}]}]}],"thread_ts":"1613592945.031300","parent_user_id":"U8D9768Q6"},{"client_msg_id":"a3d21d13-b512-4cf9-b95c-cf051947428f","type":"message","text":"I guess maybe this should be `@pure`, but i also know that there are potentially weird world age issues with that? So we went with `@generated`, for now, even though it of course means that we can't use new user-defined types without getting a World Age error.","user":"U89GY9W1J","ts":"1613593602.036100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"V3gn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess maybe this should be "},{"type":"text","text":"@pure","style":{"code":true}},{"type":"text","text":", but i also know that there are potentially weird world age issues with that? So we went with "},{"type":"text","text":"@generated","style":{"code":true}},{"type":"text","text":", for now, even though it of course means that we can't use new user-defined types without getting a World Age error."}]}]}],"thread_ts":"1613592945.031300","parent_user_id":"U8D9768Q6"},{"client_msg_id":"cae85dd9-99a4-4719-b6cb-5378c5eac55f","type":"message","text":"They have the same caveats","user":"U67BXBF99","ts":"1613594734.041500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nRj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"They have the same caveats"}]}]}],"thread_ts":"1613592945.031300","parent_user_id":"U8D9768Q6"}]