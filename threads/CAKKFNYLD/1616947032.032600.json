[{"client_msg_id":"1fb5c192-91f8-45e6-9871-d7dc455ad822","type":"message","text":"Hey everyone, I know the benefits of Automa.jl, but I'm finding that there are significant performance penalties using it.\n\nFor example in VCFtools.jl the parser uses automa in the backend and takes 6.5 seconds to parse a file I have.\n\nI wrote albeit a very bad parser without Automa (not really a parser but a function and a forloop), but its fast and gets the job done. It finishes the task in 0.6 seconds. I achieved this by reading each line of the file as UInt8[] and parsing that.\n\nI benchmarked with a mature, highly optimized C-based parser (plink.exe) and my bad parser seems to match the speed of a basic file read.\n\nMy question is mainly concerning library creation. I get that BioJulia modules use Automa for their parsers, but if we can save ~10x the time not using it, would that be worth it?","user":"U01FAHWCMFF","ts":"1616947032.032600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pd5km","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hey everyone, I know the benefits of Automa.jl, but I'm finding that there are significant performance penalties using it.\n\nFor example in VCFtools.jl the parser uses automa in the backend and takes 6.5 seconds to parse a file I have.\n\nI wrote albeit a very bad parser without Automa (not really a parser but a function and a forloop), but its fast and gets the job done. It finishes the task in 0.6 seconds. I achieved this by reading each line of the file as UInt8[] and parsing that.\n\nI benchmarked with a mature, highly optimized C-based parser (plink.exe) and my bad parser seems to match the speed of a basic file read.\n\nMy question is mainly concerning library creation. I get that BioJulia modules use Automa for their parsers, but if we can save ~10x the time not using it, would that be worth it?"}]}]}],"thread_ts":"1616947032.032600","reply_count":19,"reply_users_count":3,"latest_reply":"1616949841.036600","reply_users":["U7HAYKY9X","U01FAHWCMFF","UPNRULT51"],"is_locked":false,"subscribed":false},{"client_msg_id":"d6a9ecd6-b336-4e5f-9f5a-f145392d37ef","type":"message","text":"It's unlikely the issue is due to Automa in itself. Automa is pretty fast, from what I've seen","user":"U7HAYKY9X","ts":"1616947081.032700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DXNV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's unlikely the issue is due to Automa in itself. Automa is pretty fast, from what I've seen"}]}]}],"thread_ts":"1616947032.032600","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"07cb1c60-9105-4fc2-9ff0-fdb5fa59e0d6","type":"message","text":"Can I see the code you are comparing?","user":"U7HAYKY9X","ts":"1616947086.032900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"08R","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can I see the code you are comparing?"}]}]}],"thread_ts":"1616947032.032600","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"ac19a9e6-d569-420c-8efd-0eea364d7cc7","type":"message","text":"(i.e. Automa parsers are usually much faster than hand-written parsers)","user":"U7HAYKY9X","ts":"1616947145.033100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WSNs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(i.e. Automa parsers are usually much faster than hand-written parsers)"}]}]}],"thread_ts":"1616947032.032600","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"3d525dde-13bc-45a3-9596-49f6fca27166","type":"message","text":"Alright copy pasting it from my notebook.","user":"U01FAHWCMFF","ts":"1616947459.033300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GTz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Alright copy pasting it from my notebook."}]}]}],"thread_ts":"1616947032.032600","parent_user_id":"U01FAHWCMFF","reactions":[{"name":"+1","users":["U7HAYKY9X"],"count":1}]},{"client_msg_id":"052f1f8d-0690-4951-916c-721e2247ab4e","type":"message","text":"```using CodecZlib\nusing MappedArrays\nusing Mmap\n\nconst NEWLINE = b\"\\n\"[1]\nconst HASH = b\"#\"[1]\nconst SLASH = b\"/\"[1]\nconst VERTICAL_BAR = b\"|\"[1]\nconst ONE = b\"1\"[1]\n\nopen_stream(filename) = GzipDecompressorStream(open(filename))\nget_samples(header) = split(String(header), '\\t')[9:end]\nget_phase_locs(line) = mappedarray(x -&gt; x == SLASH || x == VERTICAL_BAR, line)\nget_consensus_genotype(genotype_1, genotype_2) = mappedarray((x, y) -&gt; x == ONE || y == ONE, genotype_1, genotype_2)\n\nfunction read_vcfgz(filename)\n    stream = open_stream(filename)\n    samples = read_header(stream)\n    genotypes = read_body(stream)\n    \nend\n\nfunction read_header(stream)\n    while !eof(stream)\n        line = readuntil(stream, NEWLINE)\n        if line[1] == HASH &amp;&amp; line[2] != HASH\n            return get_samples(line)\n        end\n    end\nend\n\nfunction read_body(stream)\n    outs = Vector[]\n    while !eof(stream)\n        line = readuntil(stream, NEWLINE)\n        phase_locs = get_phase_locs(line)\n        locs_1 = circshift(phase_locs, -1)\n        locs_2 = circshift(phase_locs, 1)\n        genotype_1 = line[locs_1]\n        genotype_2 = line[locs_2]\n        consensus_genotype = get_consensus_genotype(genotype_1, genotype_2)\n        push!(outs, consensus_genotype)\n    end\n    return outs\nend\n\nfilename = \"blah.vcf.gz\"\n@time x = read_vcfgz(filename);```","user":"U01FAHWCMFF","ts":"1616947498.033600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rN+","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using CodecZlib\nusing MappedArrays\nusing Mmap\n\nconst NEWLINE = b\"\\n\"[1]\nconst HASH = b\"#\"[1]\nconst SLASH = b\"/\"[1]\nconst VERTICAL_BAR = b\"|\"[1]\nconst ONE = b\"1\"[1]\n\nopen_stream(filename) = GzipDecompressorStream(open(filename))\nget_samples(header) = split(String(header), '\\t')[9:end]\nget_phase_locs(line) = mappedarray(x -> x == SLASH || x == VERTICAL_BAR, line)\nget_consensus_genotype(genotype_1, genotype_2) = mappedarray((x, y) -> x == ONE || y == ONE, genotype_1, genotype_2)\n\nfunction read_vcfgz(filename)\n    stream = open_stream(filename)\n    samples = read_header(stream)\n    genotypes = read_body(stream)\n    \nend\n\nfunction read_header(stream)\n    while !eof(stream)\n        line = readuntil(stream, NEWLINE)\n        if line[1] == HASH && line[2] != HASH\n            return get_samples(line)\n        end\n    end\nend\n\nfunction read_body(stream)\n    outs = Vector[]\n    while !eof(stream)\n        line = readuntil(stream, NEWLINE)\n        phase_locs = get_phase_locs(line)\n        locs_1 = circshift(phase_locs, -1)\n        locs_2 = circshift(phase_locs, 1)\n        genotype_1 = line[locs_1]\n        genotype_2 = line[locs_2]\n        consensus_genotype = get_consensus_genotype(genotype_1, genotype_2)\n        push!(outs, consensus_genotype)\n    end\n    return outs\nend\n\nfilename = \"blah.vcf.gz\"\n@time x = read_vcfgz(filename);"}]}]}],"thread_ts":"1616947032.032600","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"5f3cd729-2490-454b-9c59-cc3d50b6c018","type":"message","text":"Ah. Hmm. Actually, the VCF parser should be rewritten/have some updates. It's in a bad shape right now.","user":"U7HAYKY9X","ts":"1616948283.033800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ie/k","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah. Hmm. Actually, the VCF parser should be rewritten/have some updates. It's in a bad shape right now."}]}]}],"thread_ts":"1616947032.032600","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"dd675949-1d25-4f78-a176-c797d48cc942","type":"message","text":"So its not the fault of automa but the fault of the parser/faulty code?","user":"U01FAHWCMFF","ts":"1616948327.034000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Bm9p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So its not the fault of automa but the fault of the parser/faulty code?"}]}]}],"thread_ts":"1616947032.032600","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"a2a06c37-8eb2-444b-a197-950857af366e","type":"message","text":"I can't tell for sure. But I've been working a lot with Automa (and working on optimizing it), and it's very fast. Like, 500 MB/s in the worst case fast","user":"U7HAYKY9X","ts":"1616948370.034200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W2rEd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I can't tell for sure. But I've been working a lot with Automa (and working on optimizing it), and it's very fast. Like, 500 MB/s in the worst case fast"}]}]}],"thread_ts":"1616947032.032600","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"dd38e85b-f1d2-41e1-9ab0-47817aa55896","type":"message","text":"And that's really the worst case. Automa parses FASTQ at 10 GB/s, only limited by the implementation of the creation of the FASTQ record objects in FASTX.jl.","user":"U7HAYKY9X","ts":"1616948416.034400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GmcR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And that's really the worst case. Automa parses FASTQ at 10 GB/s, only limited by the implementation of the creation of the FASTQ record objects in FASTX.jl."}]}]}],"thread_ts":"1616947032.032600","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"83fc9a7f-7fed-434a-b9e3-0a1d5007fcbb","type":"message","text":"Btw i recommend we push for whatever changes because pythons best parser also takes 6.5 seconds. If we can get it to anywhere &lt;1 second, we can actually show the Julia is better than python in that regard.\n\nIf you know of anyway I can help let me know.","user":"U01FAHWCMFF","ts":"1616948550.034600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C3+G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Btw i recommend we push for whatever changes because pythons best parser also takes 6.5 seconds. If we can get it to anywhere <1 second, we can actually show the Julia is better than python in that regard.\n\nIf you know of anyway I can help let me know."}]}]}],"thread_ts":"1616947032.032600","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"97a1d712-b53a-4f7d-9ed6-64791009e3e6","type":"message","text":"Hm, now I seem to recall VCF being split out from GeneticVariation, actually","user":"U7HAYKY9X","ts":"1616948948.034800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"47L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hm, now I seem to recall VCF being split out from GeneticVariation, actually"}]}]}],"thread_ts":"1616947032.032600","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"aea76024-9028-4982-9282-c6b0bae0e770","type":"message","text":"Here we go: <https://github.com/rasmushenningsson/VariantCallFormat.jl>","user":"U7HAYKY9X","ts":"1616949061.035000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"a=J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Here we go: "},{"type":"link","url":"https://github.com/rasmushenningsson/VariantCallFormat.jl"}]}]}],"thread_ts":"1616947032.032600","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"c2b1061e-0bba-4173-a090-6adba989e259","type":"message","text":"This was added just about one month ago. The author took it upon himself to improve GeneticVariation's VCF parser","user":"U7HAYKY9X","ts":"1616949083.035200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"q+Ko","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This was added just about one month ago. The author took it upon himself to improve GeneticVariation's VCF parser"}]}]}],"thread_ts":"1616947032.032600","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"869ff080-15e4-472a-9e3a-7b9f126f9569","type":"message","text":"I think the best way to contribute would be to get in contact with the author and make PRs","user":"U7HAYKY9X","ts":"1616949108.035400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pvXp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think the best way to contribute would be to get in contact with the author and make PRs"}]}]}],"thread_ts":"1616947032.032600","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"7c6f4a92-1f08-4943-9c37-2e6a15998515","type":"message","text":"I don't know much about VCF files (only used them a few times for work), but I can help with Automa and BioJulia stuff","user":"U7HAYKY9X","ts":"1616949128.035600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dp2A","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't know much about VCF files (only used them a few times for work), but I can help with Automa and BioJulia stuff"}]}]}],"thread_ts":"1616947032.032600","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"00f1ab2f-a325-442d-a93e-8cfaef17c367","type":"message","text":"I was following this library <https://github.com/OpenMendel/VCFTools.jl>","user":"U01FAHWCMFF","ts":"1616949229.035800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TlOf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I was following this library "},{"type":"link","url":"https://github.com/OpenMendel/VCFTools.jl"}]}]}],"thread_ts":"1616947032.032600","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"44cc726e-b7dc-44a4-a8ca-f96c25823ce9","type":"message","text":"Yes, the fault is not in Automa.jl, but in the way it's being used when parsing VCF files.","user":"UPNRULT51","ts":"1616949679.036000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nWP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, the fault is not in Automa.jl, but in the way it's being used when parsing VCF files."}]}]}],"thread_ts":"1616947032.032600","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"15957340-8430-4160-941b-3690734ddd0b","type":"message","text":"I intend to improve performance, but there are other more pressing issues that I want to focus on first.","user":"UPNRULT51","ts":"1616949751.036200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DE8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I intend to improve performance, but there are other more pressing issues that I want to focus on first."}]}]}],"thread_ts":"1616947032.032600","parent_user_id":"U01FAHWCMFF","reactions":[{"name":"heart","users":["U7HAYKY9X"],"count":1},{"name":"thumbsup_all","users":["U01FAHWCMFF"],"count":1}]},{"client_msg_id":"58b1edc4-21d8-46d6-a375-18c78430e08f","type":"message","text":"Alright will try to play around with Automa and make the PR for the VCF library.","user":"U01FAHWCMFF","ts":"1616949841.036600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YlgZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Alright will try to play around with Automa and make the PR for the VCF library."}]}]}],"thread_ts":"1616947032.032600","parent_user_id":"U01FAHWCMFF","reactions":[{"name":"heart","users":["U7HAYKY9X"],"count":1}]}]