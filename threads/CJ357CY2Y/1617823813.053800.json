[{"client_msg_id":"686d24e0-f807-4b84-b6f5-62f5ce797d98","type":"message","text":"Assuming safety checks for generated CodeInfo, it indeed looks like a good bet now. What about API stability? I remember in older days CodeInfo structure wasn't very stable and broke my code a couple of times when moving to a new Julia version. But it was in pre-1.0 times, is it better now?\n\nRegarding YaoCompiler, the docs are mostly (and expectedly) about quantum programs, is there a specific subset of API relevant to the discussion or it's just a good reference for transformations of CodeInfo &amp; friends?","user":"U72B014PN","ts":"1617823813.053800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tWS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Assuming safety checks for generated CodeInfo, it indeed looks like a good bet now. What about API stability? I remember in older days CodeInfo structure wasn't very stable and broke my code a couple of times when moving to a new Julia version. But it was in pre-1.0 times, is it better now?\n\nRegarding YaoCompiler, the docs are mostly (and expectedly) about quantum programs, is there a specific subset of API relevant to the discussion or it's just a good reference for transformations of CodeInfo & friends?"}]}]}],"thread_ts":"1617823813.053800","reply_count":16,"reply_users_count":4,"latest_reply":"1617830259.060100","reply_users":["UKA81L34J","U72B014PN","UM30MT6RF","UC6SUUPRC"],"is_locked":false,"subscribed":false},{"client_msg_id":"503257d2-1f14-4810-9c5e-1f958b251ef6","type":"message","text":"<@U72B014PN> Maybe look here <https://github.com/femtomc/CodeInfoTools.jl> and <https://github.com/femtomc/Mixtape.jl> for related tooling. Roger is mostly busy until end of classes but I’ll likely be working on these off and on when I have free time","user":"UKA81L34J","ts":"1617824213.054800","team":"T68168MUP","edited":{"user":"UKA81L34J","ts":"1617824222.000000"},"blocks":[{"type":"rich_text","block_id":"Kw+","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U72B014PN"},{"type":"text","text":" Maybe look here "},{"type":"link","url":"https://github.com/femtomc/CodeInfoTools.jl"},{"type":"text","text":" and "},{"type":"link","url":"https://github.com/femtomc/Mixtape.jl"},{"type":"text","text":" for related tooling. Roger is mostly busy until end of classes but I’ll likely be working on these off and on when I have free time"}]}]}],"thread_ts":"1617823813.053800","parent_user_id":"U72B014PN"},{"client_msg_id":"d9b3dfb6-11d9-44e0-ac05-767ba3d82c68","type":"message","text":"Re — stability: I was assured today that it’s been stable for several years (probably since the time you were discussing, around Julia 1.0)","user":"UKA81L34J","ts":"1617824302.055100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"94RGO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Re — stability: I was assured today that it’s been stable for several years (probably since the time you were discussing, around Julia 1.0)"}]}]}],"thread_ts":"1617823813.053800","parent_user_id":"U72B014PN","reactions":[{"name":"the_horns","users":["U72B014PN"],"count":1}]},{"client_msg_id":"952a9976-7f16-40cd-9e2f-6bb578fb7592","type":"message","text":"Sweet! Is there anything like `IRTools.@dynamo` for recursive function tracing with context?","user":"U72B014PN","ts":"1617824745.055300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"l5eN7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sweet! Is there anything like "},{"type":"text","text":"IRTools.@dynamo","style":{"code":true}},{"type":"text","text":" for recursive function tracing with context?"}]}]}],"thread_ts":"1617823813.053800","parent_user_id":"U72B014PN"},{"client_msg_id":"677ac894-36cc-443c-97ca-b21c321c3f99","type":"message","text":"Just `@generated` should do","user":"UM30MT6RF","ts":"1617824858.055700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Aza","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Just "},{"type":"text","text":"@generated","style":{"code":true}},{"type":"text","text":" should do"}]}]}],"thread_ts":"1617823813.053800","parent_user_id":"U72B014PN"},{"client_msg_id":"B5771347-FA87-4C56-AE00-6B45D739C9A9","type":"message","text":"<@UM30MT6RF> you won’t get recursive wrapping unless you implemented a Cassette or IRTools style transform — so unfortunately, there’s no good option at this point. But there should be some soon.","user":"UKA81L34J","ts":"1617825165.057400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6LA5Z","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UM30MT6RF"},{"type":"text","text":" you won’t get recursive wrapping unless you implemented a Cassette or IRTools style transform — so unfortunately, there’s no good option at this point. But there should be some soon."}]}]}],"thread_ts":"1617823813.053800","parent_user_id":"U72B014PN"},{"client_msg_id":"f5bc3a85-85fd-443d-8431-eeea1a528260","type":"message","text":"&gt; Re — stability: I was assured today that it's been stable for several years (probably since the time you were discussing, around Julia 1.0)\n&gt; \nThe `CodeInfo` type itself, yes, but the statements produced by lowering have changed since then, e.g. `Expr(:return, ...)` -&gt; `ReturnNode(...)` in 1.6","user":"UM30MT6RF","ts":"1617825235.057600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Y16m","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"Re — stability: I was assured today that it's been stable for several years (probably since the time you were discussing, around Julia 1.0)\n"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"The "},{"type":"text","text":"CodeInfo","style":{"code":true}},{"type":"text","text":" type itself, yes, but the statements produced by lowering have changed since then, e.g. "},{"type":"text","text":"Expr(:return, ...)","style":{"code":true}},{"type":"text","text":" -> "},{"type":"text","text":"ReturnNode(...)","style":{"code":true}},{"type":"text","text":" in 1.6"}]}]}],"thread_ts":"1617823813.053800","parent_user_id":"U72B014PN"},{"client_msg_id":"b02af21c-6cd3-4bf0-8a66-d89625b820eb","type":"message","text":"&gt; <@UM30MT6RF> you won't get recursive wrapping unless you implemented a Cassette or IRTools style transform — so unfortunately, there's no good option at this point. But there should be some soon.\n&gt; \nYes, you will have to implement recursion yourself. Although FWIW, you might as well just use Cassette in this case.","user":"UM30MT6RF","ts":"1617825307.058000","team":"T68168MUP","edited":{"user":"UM30MT6RF","ts":"1617825319.000000"},"blocks":[{"type":"rich_text","block_id":"S2nXT","elements":[{"type":"rich_text_quote","elements":[{"type":"user","user_id":"UM30MT6RF"},{"type":"text","text":" you won't get recursive wrapping unless you implemented a Cassette or IRTools style transform — so unfortunately, there's no good option at this point. But there should be some soon.\n"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, you will have to implement recursion yourself. Although FWIW, you might as well just use Cassette in this case."}]}]}],"thread_ts":"1617823813.053800","parent_user_id":"U72B014PN"},{"client_msg_id":"090f2d70-30bb-4b65-a925-c556c9a2d5a6","type":"message","text":"Choosing between my own implementation, Cassette and IRTools, the last one still looks the most promising :)","user":"U72B014PN","ts":"1617825492.058300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dLRF4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Choosing between my own implementation, Cassette and IRTools, the last one still looks the most promising :)"}]}]}],"thread_ts":"1617823813.053800","parent_user_id":"U72B014PN"},{"client_msg_id":"0f112b82-471f-4eb5-b6ba-dab8029b342d","type":"message","text":"FYI, for recursive function tracing (or aka method overlay), Keno has started a better solution by allowing custom method tables: <https://github.com/JuliaLang/julia/pull/39697>","user":"UC6SUUPRC","ts":"1617826347.058500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L1k","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"FYI, for recursive function tracing (or aka method overlay), Keno has started a better solution by allowing custom method tables: "},{"type":"link","url":"https://github.com/JuliaLang/julia/pull/39697"}]}]}],"thread_ts":"1617823813.053800","parent_user_id":"U72B014PN"},{"client_msg_id":"9d92e795-0c93-4c7c-9f90-87f4b944c9e1","type":"message","text":"The package I was/will be working on is here: <https://github.com/Roger-luo/Yuan.jl> I splitted out the `Expr` tools into (this is done and registered, in case it’s useful for someone): <https://github.com/Roger-luo/Expronicon.jl>","user":"UC6SUUPRC","ts":"1617826419.058700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QZQ9X","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The package I was/will be working on is here: "},{"type":"link","url":"https://github.com/Roger-luo/Yuan.jl"},{"type":"text","text":" I splitted out the "},{"type":"text","text":"Expr","style":{"code":true}},{"type":"text","text":" tools into (this is done and registered, in case it’s useful for someone): "},{"type":"link","url":"https://github.com/Roger-luo/Expronicon.jl"}]}]}],"thread_ts":"1617823813.053800","parent_user_id":"U72B014PN"},{"client_msg_id":"bacf5442-c768-4282-8074-615a2a92a4cd","type":"message","text":"the fact that tracing inside Zygote goes through every calls actually annoys me quite often. See also <https://github.com/FluxML/IRTools.jl/pull/63>","user":"UC6SUUPRC","ts":"1617826505.058900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RwF3H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the fact that tracing inside Zygote goes through every calls actually annoys me quite often. See also "},{"type":"link","url":"https://github.com/FluxML/IRTools.jl/pull/63"}]}]}],"thread_ts":"1617823813.053800","parent_user_id":"U72B014PN"},{"client_msg_id":"c95643c7-6532-417c-bf24-3f96f1fc1fe1","type":"message","text":"it’s not merged I guess because Mike left at that time, so no one reviews it anymore…","user":"UC6SUUPRC","ts":"1617826531.059100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xpf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it’s not merged I guess because Mike left at that time, so no one reviews it anymore…"}]}]}],"thread_ts":"1617823813.053800","parent_user_id":"U72B014PN"},{"client_msg_id":"aaf34c6a-45f4-4a8d-b376-f482f9a19e45","type":"message","text":"I’d love to have these all provided in Yuan.jl (I tried to avoid CodeInfo in the name cuz I’m planning to split out tools for both CodeInfo and IRCode into this repo)","user":"UC6SUUPRC","ts":"1617826608.059300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZBid4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’d love to have these all provided in Yuan.jl (I tried to avoid CodeInfo in the name cuz I’m planning to split out tools for both CodeInfo and IRCode into this repo)"}]}]}],"thread_ts":"1617823813.053800","parent_user_id":"U72B014PN"},{"client_msg_id":"e51d08b9-3f93-47ce-ac3f-21d2c6f63d54","type":"message","text":"but for short term (before I finish my finals) feel free to copy paste code from YaoCompiler etc. :wink: I copied <@U67BJLYCS>’s code in early stages a lot too. You can also find some tools inside KernelCompiler, buruts, and Cassette too.","user":"UC6SUUPRC","ts":"1617826813.059500","team":"T68168MUP","edited":{"user":"UC6SUUPRC","ts":"1617826852.000000"},"blocks":[{"type":"rich_text","block_id":"baXF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but for short term (before I finish my finals) feel free to copy paste code from YaoCompiler etc. "},{"type":"emoji","name":"wink"},{"type":"text","text":" I copied "},{"type":"user","user_id":"U67BJLYCS"},{"type":"text","text":"’s code in early stages a lot too. You can also find some tools inside KernelCompiler, buruts, and Cassette too."}]}]}],"thread_ts":"1617823813.053800","parent_user_id":"U72B014PN"},{"client_msg_id":"f703109f-540d-4505-9b26-3e68d908ec45","type":"message","text":"they actually have been in a lot different projects for a long time, we just need a place to organize them together and provide a better interface in one package.","user":"UC6SUUPRC","ts":"1617826889.059800","team":"T68168MUP","edited":{"user":"UC6SUUPRC","ts":"1617826905.000000"},"blocks":[{"type":"rich_text","block_id":"1iq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"they actually have been in a lot different projects for a long time, we just need a place to organize them together and provide a better interface in one package."}]}]}],"thread_ts":"1617823813.053800","parent_user_id":"U72B014PN"},{"client_msg_id":"56aa0c41-ef90-4789-8dac-3ae2b01ae510","type":"message","text":"I don't see custom method tables as a general solution to tracing because some things such as `%new` or branches are out of scope in them. For instance, I have a branch in Yota which attempts to detect loops in `IR` and convert them into a `Loop` operation (with its own subgraph) to further export to ONNX. \n\nI don't really have an urgent need for a new tool, so perhaps I'll just use IRTools for now and monitor the infrastructure development. I wish I had time and skills to help you with this stuff, but the required level of involvement seems to be too high for me at the moment :grimacing:","user":"U72B014PN","ts":"1617830259.060100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6sB+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't see custom method tables as a general solution to tracing because some things such as "},{"type":"text","text":"%new","style":{"code":true}},{"type":"text","text":" or branches are out of scope in them. For instance, I have a branch in Yota which attempts to detect loops in "},{"type":"text","text":"IR","style":{"code":true}},{"type":"text","text":" and convert them into a "},{"type":"text","text":"Loop","style":{"code":true}},{"type":"text","text":" operation (with its own subgraph) to further export to ONNX. \n\nI don't really have an urgent need for a new tool, so perhaps I'll just use IRTools for now and monitor the infrastructure development. I wish I had time and skills to help you with this stuff, but the required level of involvement seems to be too high for me at the moment "},{"type":"emoji","name":"grimacing"}]}]}],"thread_ts":"1617823813.053800","parent_user_id":"U72B014PN"}]