[{"client_msg_id":"b08286c7-8b02-4b64-8742-6ef25f70e026","type":"message","text":"<@UAUPJLBQX> Are there any branchless techniques references that you could recommend for Julia?","user":"U013V2CFZAN","ts":"1617443388.116700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"im2b","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UAUPJLBQX"},{"type":"text","text":" Are there any branchless techniques references that you could recommend for Julia?"}]}]}],"thread_ts":"1617443388.116700","reply_count":11,"reply_users_count":2,"latest_reply":"1617541431.119500","reply_users":["UAUPJLBQX","U013V2CFZAN"],"is_locked":false,"subscribed":false},{"client_msg_id":"1d7125bb-c619-4e70-811f-fa040166f523","type":"message","text":"What're you looking to do, specifically?\n`ifelse` doesn't add branches, but LLVM is good at converting back and forth between `select` statements (which `ifelse` produces) and branches, so long as it knows there are no side-effects.\nYou can use `IfElse.ifelse` if you want your code to work with libraries that need to be able to extend it (the `Base.ifelse` isn't a generic function, so you can't add methods).","user":"UAUPJLBQX","ts":"1617446231.116800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"B8i","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What're you looking to do, specifically?\n"},{"type":"text","text":"ifelse","style":{"code":true}},{"type":"text","text":" doesn't add branches, but LLVM is good at converting back and forth between "},{"type":"text","text":"select","style":{"code":true}},{"type":"text","text":" statements (which "},{"type":"text","text":"ifelse","style":{"code":true}},{"type":"text","text":" produces) and branches, so long as it knows there are no side-effects.\nYou can use "},{"type":"text","text":"IfElse.ifelse","style":{"code":true}},{"type":"text","text":" if you want your code to work with libraries that need to be able to extend it (the "},{"type":"text","text":"Base.ifelse","style":{"code":true}},{"type":"text","text":" isn't a generic function, so you can't add methods)."}]}]}],"thread_ts":"1617443388.116700","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"fa5a2b1f-83c6-42f8-bc79-af0dacef3317","type":"message","text":"A couple of months ago you helped me to speed up a code (it was like a loop with branches) and what you did was just to multiply that outcome by the the \"boolean\" and that was faster than the branch. That wouldn't have occurred to me if I would't have seen it from that example.","user":"U013V2CFZAN","ts":"1617484283.117200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tgwX2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"A couple of months ago you helped me to speed up a code (it was like a loop with branches) and what you did was just to multiply that outcome by the the \"boolean\" and that was faster than the branch. That wouldn't have occurred to me if I would't have seen it from that example."}]}]}],"thread_ts":"1617443388.116700","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"fe51b75a-6055-4973-8bea-7cffc7fc4c34","type":"message","text":"I am looking for similar examples/techniques","user":"U013V2CFZAN","ts":"1617484298.117400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WEM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am looking for similar examples/techniques"}]}]}],"thread_ts":"1617443388.116700","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"64471b17-0407-4495-8d10-7053d80fd59f","type":"message","text":"just to be aware of them","user":"U013V2CFZAN","ts":"1617484327.117600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7K3F","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"just to be aware of them"}]}]}],"thread_ts":"1617443388.116700","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"398573ea-d71a-4301-93a4-bc4b3bbcda0b","type":"message","text":"Hmm, I'm not sure.\nNote that `C`/`C++` don't have an equivalent to `ifelse`","user":"UAUPJLBQX","ts":"1617541088.118300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"o=XhZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmm, I'm not sure.\nNote that "},{"type":"text","text":"C","style":{"code":true}},{"type":"text","text":"/"},{"type":"text","text":"C++","style":{"code":true}},{"type":"text","text":" don't have an equivalent to "},{"type":"text","text":"ifelse","style":{"code":true}}]}]}],"thread_ts":"1617443388.116700","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"0fc4cdc8-6bd5-4593-ba2a-1ef369a20413","type":"message","text":"so most of the \"tricks\" you see when googling \"branchless programming\" are just totally unnecessary in Julia.","user":"UAUPJLBQX","ts":"1617541121.118500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kOMi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so most of the \"tricks\" you see when googling \"branchless programming\" are just totally unnecessary in Julia."}]}]}],"thread_ts":"1617443388.116700","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"b31ecc12-dc2e-481c-9a9c-082510a706b1","type":"message","text":"A more complicated case is defining a SIMD `sin` or `cos`","user":"UAUPJLBQX","ts":"1617541175.118700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4PGhv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"A more complicated case is defining a SIMD "},{"type":"text","text":"sin","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"cos","style":{"code":true}}]}]}],"thread_ts":"1617443388.116700","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"8ed05e94-9dd3-4913-81c2-e2dd99d98b07","type":"message","text":"Yes indeed, that's why I was wondering about some examples that are more useful for Julia","user":"U013V2CFZAN","ts":"1617541200.118900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sP4eF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes indeed, that's why I was wondering about some examples that are more useful for Julia"}]}]}],"thread_ts":"1617443388.116700","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"433a3a6a-b440-4b2c-8618-de0bdf858571","type":"message","text":"well, `ifelse` is much easier to the point I don't think we need any articles on it.","user":"UAUPJLBQX","ts":"1617541244.119100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8e8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well, "},{"type":"text","text":"ifelse","style":{"code":true}},{"type":"text","text":" is much easier to the point I don't think we need any articles on it."}]}]}],"thread_ts":"1617443388.116700","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"db6c54fa-1cfa-408a-82ec-8f1f4032c0af","type":"message","text":"<https://github.com/JuliaLang/julia/blob/89fff18d590db9be84598e0045003b903d48d2df/base/special/trig.jl#L43-L51>","user":"UAUPJLBQX","ts":"1617541337.119300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6iQ","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/blob/89fff18d590db9be84598e0045003b903d48d2df/base/special/trig.jl#L43-L51"}]}]}],"thread_ts":"1617443388.116700","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"09a548c2-1c7c-44a0-88c8-58fb4f7b1b24","type":"message","text":"```    if n == 0\n        return sin_kernel(y)\n    elseif n == 1\n        return cos_kernel(y)\n    elseif n == 2\n        return -sin_kernel(y)\n    else\n        return -cos_kernel(y)\n    end```\nif it was just `sin_kernel(y)` vs `-sin_kernel(y)`, it'd be straightforward.\nBut to make a SIMD version of this, we'd have to combine `sin_kernel`  and `cos_kernel`","user":"UAUPJLBQX","ts":"1617541431.119500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UPB","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"    if n == 0\n        return sin_kernel(y)\n    elseif n == 1\n        return cos_kernel(y)\n    elseif n == 2\n        return -sin_kernel(y)\n    else\n        return -cos_kernel(y)\n    end"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"if it was just "},{"type":"text","text":"sin_kernel(y)","style":{"code":true}},{"type":"text","text":" vs "},{"type":"text","text":"-sin_kernel(y)","style":{"code":true}},{"type":"text","text":", it'd be straightforward.\nBut to make a SIMD version of this, we'd have to combine "},{"type":"text","text":"sin_kernel","style":{"code":true}},{"type":"text","text":"  and "},{"type":"text","text":"cos_kernel","style":{"code":true}}]}]}],"thread_ts":"1617443388.116700","parent_user_id":"U013V2CFZAN"}]