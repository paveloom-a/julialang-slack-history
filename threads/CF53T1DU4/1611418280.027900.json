[{"client_msg_id":"9667088b-fbb9-4040-8889-7e05cb7a4180","type":"message","text":"Can anyone explain to me why this code allocates memory (looking at `@benchmark` ), and if it's possible to avoid it? i.e. I want to create a view of a struct's array and use it to construct another instance of the same struct. But even just creating a view of the struct's array field allocates memory. This does not happen if the function argument is an array rather than a struct instance.\n```struct Foo\n  vals\nend\n\nconst A = randn(100)\nfoo = Foo(A)\nfunction testalloc(X,inds)\n  view(X.vals, inds);\n  return nothing;\nend\n\nxs = 1:10\n@benchmark testalloc(foo,xs)```","user":"U01H36BUDJB","ts":"1611418280.027900","team":"T68168MUP","edited":{"user":"U01H36BUDJB","ts":"1611418333.000000"},"blocks":[{"type":"rich_text","block_id":"4I9++","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can anyone explain to me why this code allocates memory (looking at "},{"type":"text","text":"@benchmark","style":{"code":true}},{"type":"text","text":" ), and if it's possible to avoid it? i.e. I want to create a view of a struct's array and use it to construct another instance of the same struct. But even just creating a view of the struct's array field allocates memory. This does not happen if the function argument is an array rather than a struct instance.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct Foo\n  vals\nend\n\nconst A = randn(100)\nfoo = Foo(A)\nfunction testalloc(X,inds)\n  view(X.vals, inds);\n  return nothing;\nend\n\nxs = 1:10\n@benchmark testalloc(foo,xs)"}]}]}],"thread_ts":"1611418280.027900","reply_count":35,"reply_users_count":5,"latest_reply":"1611428030.038000","reply_users":["U7HAYKY9X","U0179G7FG4F","U01H36BUDJB","U01GRS159T8","UH24GRBLL"],"subscribed":false},{"client_msg_id":"b2035313-3182-4786-813d-75fe42e65e68","type":"message","text":"The compiler can't tell the type of the field `vals` .","user":"U7HAYKY9X","ts":"1611418541.028100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Gsok","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The compiler can't tell the type of the field "},{"type":"text","text":"vals","style":{"code":true}},{"type":"text","text":" ."}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"ab9a4ad6-9ffc-4650-abbd-d2a36a37d127","type":"message","text":"This can be fixed with\n```struct Foo{T}\n  vals::T\nend```","user":"U0179G7FG4F","ts":"1611418579.028300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1gc6V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This can be fixed with\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct Foo{T}\n  vals::T\nend"}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"adc0478a-ccba-406c-847e-2a215347add7","type":"message","text":"Right, yeah, thanks. But the problem is that if you specify the type, you can't construct `Foo` with a view of `foo.vals` because the types don't match. Is there a way around that that I am not aware of?","user":"U01H36BUDJB","ts":"1611419979.028500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1Ez","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Right, yeah, thanks. But the problem is that if you specify the type, you can't construct "},{"type":"text","text":"Foo","style":{"code":true}},{"type":"text","text":" with a view of "},{"type":"text","text":"foo.vals","style":{"code":true}},{"type":"text","text":" because the types don't match. Is there a way around that that I am not aware of?"}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"00daa4a6-f01a-4086-99af-d84d8995997f","type":"message","text":"what do you mean by the types don't match? Can you give an example?","user":"U0179G7FG4F","ts":"1611420049.028700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6Xr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what do you mean by the types don't match? Can you give an example?"}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"fd3d8a29-1641-4f3f-b38f-bc8f0ee57f8b","type":"message","text":"`@view foo.vals` is of type `SubArray` while `Foo{T}` has `vals::Array{T}` or possibly `Foo{T,A&lt;:AbstractArray{T}}` with `vals::A{T}`","user":"U01H36BUDJB","ts":"1611420159.028900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rTZA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"@view foo.vals","style":{"code":true}},{"type":"text","text":" is of type "},{"type":"text","text":"SubArray","style":{"code":true}},{"type":"text","text":" while "},{"type":"text","text":"Foo{T}","style":{"code":true}},{"type":"text","text":" has "},{"type":"text","text":"vals::Array{T}","style":{"code":true}},{"type":"text","text":" or possibly "},{"type":"text","text":"Foo{T,A<:AbstractArray{T}}","style":{"code":true}},{"type":"text","text":" with "},{"type":"text","text":"vals::A{T}","style":{"code":true}}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"27b760bb-a058-41fc-852b-69fca16ff238","type":"message","text":"basically this boils down to the oddity of Julia treating slices as copies and views as a different type, which imho, doesn't really make sense.","user":"U01H36BUDJB","ts":"1611420194.029100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ieeS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"basically this boils down to the oddity of Julia treating slices as copies and views as a different type, which imho, doesn't really make sense."}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"cefb0565-f900-48ac-a881-089085b643aa","type":"message","text":"even if slices were views by default (which imho they should be), views have to be a different type. They have a completely different internal layout","user":"U0179G7FG4F","ts":"1611420266.029300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"isd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"even if slices were views by default (which imho they should be), views have to be a different type. They have a completely different internal layout"}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"1b6db213-2559-49e7-9c54-2f00aa0959a5","type":"message","text":"I still don't see the problem with `@view foo.vals` being a different type than `vals` here.","user":"U0179G7FG4F","ts":"1611420301.029500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NCqL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I still don't see the problem with "},{"type":"text","text":"@view foo.vals","style":{"code":true}},{"type":"text","text":" being a different type than "},{"type":"text","text":"vals","style":{"code":true}},{"type":"text","text":" here."}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"86b54e66-bf3e-471d-88ff-320eca237539","type":"message","text":"huh? why? shouldn't it just be a subset of contiguous memory?","user":"U01H36BUDJB","ts":"1611420312.029700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"etrJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"huh? why? shouldn't it just be a subset of contiguous memory?"}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"d094e7c1-49c7-4b33-bbc7-58e70e2a3f31","type":"message","text":"because a `view` has to store what that subset is. Also `view`s aren't necessarily contiguous","user":"U0179G7FG4F","ts":"1611420341.029900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gwOJo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"because a "},{"type":"text","text":"view","style":{"code":true}},{"type":"text","text":" has to store what that subset is. Also "},{"type":"text","text":"view","style":{"code":true}},{"type":"text","text":"s aren't necessarily contiguous"}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"a06af717-0934-45bc-8d3d-a50c86353c5e","type":"message","text":"what I often do is make a constructor like\n```function Foo(x)\n    return Foo{typeof(x)}(x)\nend```","user":"U01GRS159T8","ts":"1611420387.030100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"J4s","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what I often do is make a constructor like\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function Foo(x)\n    return Foo{typeof(x)}(x)\nend"}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"408bafd0-74a6-48fc-9754-2b7b08aeef94","type":"message","text":"but you'll have two different kinds of Foos floating around, one typed on the array and one typed on the view","user":"U01GRS159T8","ts":"1611420429.030300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/TS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but you'll have two different kinds of Foos floating around, one typed on the array and one typed on the view"}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"55a39daf-dd2c-4004-883c-77826cc79140","type":"message","text":"<@U0179G7FG4F> I see. But intuitively to me, a sub-array can conceptually be just another array pointing to a slice of memory, if you remove the requirement that the parent array be recoverable.\n<@U01GRS159T8> Aha, ok that should work. I think it's manageable to have two different types.","user":"U01H36BUDJB","ts":"1611420540.030500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zLm","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U0179G7FG4F"},{"type":"text","text":" I see. But intuitively to me, a sub-array can conceptually be just another array pointing to a slice of memory, if you remove the requirement that the parent array be recoverable.\n"},{"type":"user","user_id":"U01GRS159T8"},{"type":"text","text":" Aha, ok that should work. I think it's manageable to have two different types."}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"4a67ca24-3f44-4fa5-b664-0b6983b2cd2f","type":"message","text":"yeah but views are still quite different than arrays in general.  If you want to do this maximum super efficient you can use Ptrs","user":"U01GRS159T8","ts":"1611420593.030700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4vNY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah but views are still quite different than arrays in general.  If you want to do this maximum super efficient you can use Ptrs"}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"6a303737-d8c5-48b4-acdd-7cc5f5bc0ce8","type":"message","text":"the field types of the struct need to be concrete otherwise every access incurs a type check","user":"U01GRS159T8","ts":"1611420616.030900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0ur","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the field types of the struct need to be concrete otherwise every access incurs a type check"}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"224810fe-032a-47f0-b319-4f9ce610eb12","type":"message","text":"I have thus far avoided pointers... PTSD from the C days haha","user":"U01H36BUDJB","ts":"1611420724.031100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UQKn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have thus far avoided pointers... PTSD from the C days haha"}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"127ee8ba-a93c-4a74-a261-3017eb70c297","type":"message","text":"you shouldn't use pointers here","user":"U0179G7FG4F","ts":"1611420733.031300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9=0TP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you shouldn't use pointers here"}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"782fbcbf-2e6f-4f7e-8511-e169ad4e5f79","type":"message","text":"you could also just make Foo always use views","user":"U01GRS159T8","ts":"1611420851.031500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"o88Al","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you could also just make Foo always use views"}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"36901342-68f9-4ef5-ac92-228d1ff179d9","type":"message","text":"and make a constructor for Foo that takes an array and makes a view of the whole thing","user":"U01GRS159T8","ts":"1611420870.031700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Dbz09","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and make a constructor for Foo that takes an array and makes a view of the whole thing"}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"006284a1-e8e2-42da-9071-e25825535dd8","type":"message","text":"I think there is some fundamental confusion here about parametric types. You can easily have a `Foo{A}`  and a `Foo{B}` with different type params existing at the same time.","user":"U7HAYKY9X","ts":"1611420883.031900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"prVR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think there is some fundamental confusion here about parametric types. You can easily have a "},{"type":"text","text":"Foo{A}","style":{"code":true}},{"type":"text","text":"  and a "},{"type":"text","text":"Foo{B}","style":{"code":true}},{"type":"text","text":" with different type params existing at the same time."}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"df3264b7-cbfa-49f5-b75e-5e6a3cd31c18","type":"message","text":"yeah Im just guessing somewhere else in the code he plans to have Vector{Foo} or something like that","user":"U01GRS159T8","ts":"1611420915.032100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0aXJ=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah Im just guessing somewhere else in the code he plans to have Vector{Foo} or something like that"}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"f6623799-d250-404c-bf27-3256d1196683","type":"message","text":"so the reason a `view` isn't an `Array` is that an `Array` only stores a pointer to memory, and a `Tuple` with it's size. This means that `Array`s are necessarily contiguous in memory. `view`s on the other hand can be strided (ie viewing a row of a `Matrix`), so they can not possibly be an `Array`","user":"U0179G7FG4F","ts":"1611420919.032300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ezm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so the reason a "},{"type":"text","text":"view","style":{"code":true}},{"type":"text","text":" isn't an "},{"type":"text","text":"Array","style":{"code":true}},{"type":"text","text":" is that an "},{"type":"text","text":"Array","style":{"code":true}},{"type":"text","text":" only stores a pointer to memory, and a "},{"type":"text","text":"Tuple","style":{"code":true}},{"type":"text","text":" with it's size. This means that "},{"type":"text","text":"Array","style":{"code":true}},{"type":"text","text":"s are necessarily contiguous in memory. "},{"type":"text","text":"view","style":{"code":true}},{"type":"text","text":"s on the other hand can be strided (ie viewing a row of a "},{"type":"text","text":"Matrix","style":{"code":true}},{"type":"text","text":"), so they can not possibly be an "},{"type":"text","text":"Array","style":{"code":true}}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"0f2b0931-7c17-4d7b-accf-8c68c3934c89","type":"message","text":"and then all the performance problems will be pushed to where he iterates that vector","user":"U01GRS159T8","ts":"1611420930.032500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Onc2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and then all the performance problems will be pushed to where he iterates that vector"}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"76d341f2-ebe5-4f01-83cd-52bfa84f4230","type":"message","text":"which might be fine","user":"U01GRS159T8","ts":"1611420941.032700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WwL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which might be fine"}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"08f69fe1-cdf3-4ba0-8b4f-135b5237ff80","type":"message","text":"<@U7HAYKY9X> No confusion there, I get that.\n<@U0179G7FG4F> I get that, but you could have a specific type of contiguous view that would also just be a pointer to the same memory and a tuple.\n<@U01GRS159T8> The end goal is actually to have `Foo` hold multiple arrays and then implement `view` on `Foo` such that it creates a new `Foo` with views of all the internal arrays. And I would like that to be allocation-free with the exception of the new type which I assume is stack allocated.","user":"U01H36BUDJB","ts":"1611421162.032900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aHu","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U7HAYKY9X"},{"type":"text","text":" No confusion there, I get that.\n"},{"type":"user","user_id":"U0179G7FG4F"},{"type":"text","text":" I get that, but you could have a specific type of contiguous view that would also just be a pointer to the same memory and a tuple.\n"},{"type":"user","user_id":"U01GRS159T8"},{"type":"text","text":" The end goal is actually to have "},{"type":"text","text":"Foo","style":{"code":true}},{"type":"text","text":" hold multiple arrays and then implement "},{"type":"text","text":"view","style":{"code":true}},{"type":"text","text":" on "},{"type":"text","text":"Foo","style":{"code":true}},{"type":"text","text":" such that it creates a new "},{"type":"text","text":"Foo","style":{"code":true}},{"type":"text","text":" with views of all the internal arrays. And I would like that to be allocation-free with the exception of the new type which I assume is stack allocated."}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"fa09640b-400f-4e16-931a-99501d4b2ff6","type":"message","text":"<@U01H36BUDJB> that would work, but then `view(a,inds)` would be type unstable","user":"U0179G7FG4F","ts":"1611421235.033100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rru","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01H36BUDJB"},{"type":"text","text":" that would work, but then "},{"type":"text","text":"view(a,inds)","style":{"code":true}},{"type":"text","text":" would be type unstable"}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"c1643b6f-3b4b-43f8-9833-12dd8fc4d2a3","type":"message","text":"Wouldn't you just need to insure that `inds` represents a contiguous range? I can't remember if there's a `Range` subtype for that.","user":"U01H36BUDJB","ts":"1611421299.033300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"E78J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Wouldn't you just need to insure that "},{"type":"text","text":"inds","style":{"code":true}},{"type":"text","text":" represents a contiguous range? I can't remember if there's a "},{"type":"text","text":"Range","style":{"code":true}},{"type":"text","text":" subtype for that."}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"490bb9fe-61ac-4abc-a1f9-68a4dab7fd46","type":"message","text":"Alternative wold be to just specify an interval instead of a range.","user":"U01H36BUDJB","ts":"1611421350.033500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Dwo+/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Alternative wold be to just specify an interval instead of a range."}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"2e5a545b-7adb-4c19-937d-6c46db13a97e","type":"message","text":"that might work. I also think there is a problem that this would break the GC. You need to have something keeping track that the view refers to the array, or else you can garbage collect the array while the view is still alive.","user":"U0179G7FG4F","ts":"1611421618.033700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SUg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that might work. I also think there is a problem that this would break the GC. You need to have something keeping track that the view refers to the array, or else you can garbage collect the array while the view is still alive."}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB","reactions":[{"name":"point_up","users":["UH24GRBLL","U01H36BUDJB"],"count":2}]},{"client_msg_id":"f0062fe4-167e-47b1-9aa4-fb44f8adffac","type":"message","text":"the stepsize of a range is not part of it's type, so there's no distinction between a contigous and a non-contigous range","user":"UH24GRBLL","ts":"1611421623.033900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"huzD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the stepsize of a range is not part of it's type, so there's no distinction between a contigous and a non-contigous range"}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"21408629-c32b-4669-bfe9-833ccfe41f0a","type":"message","text":"it could be, but that would lead to a lot of extra compilation overhead, I think","user":"UH24GRBLL","ts":"1611421636.034100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R1=N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it could be, but that would lead to a lot of extra compilation overhead, I think"}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB","reactions":[{"name":"+1","users":["U0179G7FG4F"],"count":1}]},{"client_msg_id":"33c1417e-5324-4b50-9106-cb94a40b4c53","type":"message","text":"<@U0179G7FG4F> That's true, that would be a problem. I have no immediate solution off the top of my head.","user":"U01H36BUDJB","ts":"1611421702.034500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/t2od","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U0179G7FG4F"},{"type":"text","text":" That's true, that would be a problem. I have no immediate solution off the top of my head."}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"bf1267f2-47fd-4ac4-a158-8abb156acb32","type":"message","text":"<@U01GRS159T8>’s solution with specifying the array type appears to solve the original problem, btw :+1:","user":"U01H36BUDJB","ts":"1611421907.035000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g4=b","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01GRS159T8"},{"type":"text","text":"’s solution with specifying the array type appears to solve the original problem, btw "},{"type":"emoji","name":"+1"}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"a8c8d1b4-b585-40d2-8aaa-99327cc9c9b6","type":"message","text":"A lot of the code I write is just generating types!","user":"U01GRS159T8","ts":"1611428015.037800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AY5fe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"A lot of the code I write is just generating types!"}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"2572d884-2436-4d7b-ad5f-775ed4bb7d4b","type":"message","text":"then the fancy julia compiler can do all the work","user":"U01GRS159T8","ts":"1611428030.038000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eWhU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"then the fancy julia compiler can do all the work"}]}]}],"thread_ts":"1611418280.027900","parent_user_id":"U01H36BUDJB"}]