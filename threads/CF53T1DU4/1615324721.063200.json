[{"client_msg_id":"10557393-6712-46e7-a0d4-a8c913bd04ba","type":"message","text":"I'm just doing something like:\n```for i in 1:length(vals)\n    old = vals[i]\n    vals[i] = MyStruct(old.a, old.b, old.c + 10)\nend```","user":"UCNPT22MQ","ts":"1615324721.063200","team":"T68168MUP","edited":{"user":"UCNPT22MQ","ts":"1615324757.000000"},"blocks":[{"type":"rich_text","block_id":"yLLr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm just doing something like:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"for i in 1:length(vals)\n    old = vals[i]\n    vals[i] = MyStruct(old.a, old.b, old.c + 10)\nend"}]}]}],"thread_ts":"1615324721.063200","reply_count":127,"reply_users_count":4,"latest_reply":"1615340329.090800","reply_users":["UH24GRBLL","UCNPT22MQ","U0179G7FG4F","UAUPJLBQX"],"subscribed":false},{"client_msg_id":"d5903758-313c-414e-bf91-382e10ba96db","type":"message","text":"what does `MyStruct` look like in your case?","user":"UH24GRBLL","ts":"1615324806.063400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qMoe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what does "},{"type":"text","text":"MyStruct","style":{"code":true}},{"type":"text","text":" look like in your case?"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"4708cc5b-b6f3-4f94-b6c3-967b4a4a91b7","type":"message","text":"might simply be an alignment issue","user":"UH24GRBLL","ts":"1615324812.063600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GB1Ca","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"might simply be an alignment issue"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"075cbadf-6d22-4bca-bcb3-d9e72fe32050","type":"message","text":"also, in a function or not?","user":"UH24GRBLL","ts":"1615324822.063800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6hsj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"also, in a function or not?"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"97a447b4-97fb-4985-be75-5fd5ba67808f","type":"message","text":"ah, there may simply be an `@inbounds` missing","user":"UH24GRBLL","ts":"1615324889.064000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9nn6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah, there may simply be an "},{"type":"text","text":"@inbounds","style":{"code":true}},{"type":"text","text":" missing"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ","reactions":[{"name":"thumbsup_all","users":["U0179G7FG4F"],"count":1}]},{"client_msg_id":"aa9ee86e-768f-4b13-b877-f150d8a4505f","type":"message","text":"Sorry, away from desk now. MyStruct is, say, Int, Float64, Int16\nAll in a function, with @inbounds &amp; @simd","user":"UCNPT22MQ","ts":"1615324932.064200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HMmN0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sorry, away from desk now. MyStruct is, say, Int, Float64, Int16\nAll in a function, with @inbounds & @simd"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"f1f94356-e57d-483a-9827-039d194e8dce","type":"message","text":"that's 144 bits - I'm surprised C++ scatters here","user":"UH24GRBLL","ts":"1615324980.064400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SKNIW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's 144 bits - I'm surprised C++ scatters here"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"3f086d9a-fc5a-4dd6-869a-30cc579269d1","type":"message","text":"Presumably the struct would pad to a multiple of word size though?","user":"UCNPT22MQ","ts":"1615325031.064600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Pp+u=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Presumably the struct would pad to a multiple of word size though?"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"3d70cfaf-4a71-44af-ba17-3f386a170320","type":"message","text":"In both languages?","user":"UCNPT22MQ","ts":"1615325036.064800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sAdu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In both languages?"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"71237a46-fefa-427f-bb38-5e4b520a07dd","type":"message","text":"iirc there's no automatic padding in julia","user":"UH24GRBLL","ts":"1615325042.065000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"r4o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"iirc there's no automatic padding in julia"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"16584a16-1d5e-4599-abcf-4d421bf0d44c","type":"message","text":"only 85% sure though","user":"UH24GRBLL","ts":"1615325057.065200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ayowl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"only 85% sure though"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"0d677470-724c-4ed9-8e32-5f5f97cf6b5e","type":"message","text":"you could also try `@avx` form LoopVectorization","user":"UH24GRBLL","ts":"1615325065.065400","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1615325071.000000"},"blocks":[{"type":"rich_text","block_id":"fFSrP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you could also try "},{"type":"text","text":"@avx","style":{"code":true}},{"type":"text","text":" form LoopVectorization"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"2b381e51-dd31-4804-8c0f-cd3d6999dcf4","type":"message","text":"Hmm, must be for it to be accessible in an array?","user":"UCNPT22MQ","ts":"1615325073.065700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Cyu8P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmm, must be for it to be accessible in an array?"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"870bb6c0-d6fc-461c-acef-0d0324ea0f1d","type":"message","text":"Clang is generating `vinserti128`","user":"UCNPT22MQ","ts":"1615325099.065900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zzfT=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Clang is generating "},{"type":"text","text":"vinserti128","style":{"code":true}}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"7ced9a42-a8f2-4d00-90fc-e6b5b51582f7","type":"message","text":"Sorry, I'm talking rubbish, it only needs to be a multiple of byte to have an address...","user":"UCNPT22MQ","ts":"1615325145.066100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dK6gJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sorry, I'm talking rubbish, it only needs to be a multiple of byte to have an address..."}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"b6709097-9c31-4a9a-a788-cb9b07e28f62","type":"message","text":"<@U6QF223TN> I'm pretty sure we do pad structs automatically to a multiple of the biggest element I don't think we pad between elements, but that's not relevant here.","user":"U0179G7FG4F","ts":"1615325148.066300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uXM=","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U6QF223TN"},{"type":"text","text":" I'm pretty sure we do pad structs automatically to a multiple of the biggest element I don't think we pad between elements, but that's not relevant here."}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"0879febe-e81e-41a2-8aaa-2b9c3ddf24ba","type":"message","text":"I think you pinged the wrong person","user":"UH24GRBLL","ts":"1615325471.066600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YK4Eq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think you pinged the wrong person"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"f7980a44-52fb-4d57-ab4e-686c82511114","type":"message","text":"When I get back, I'll experiment with explicit padding fields","user":"UCNPT22MQ","ts":"1615325474.066800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+gv3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"When I get back, I'll experiment with explicit padding fields"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"c265f93e-51c7-45ec-8132-1031fc3a4f8e","type":"message","text":"I definitely remember some place where explicit padding fields allowed for more SIMD because of alignment","user":"UH24GRBLL","ts":"1615325519.067000","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1615325524.000000"},"blocks":[{"type":"rich_text","block_id":"xGgww","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I definitely remember some place where explicit padding fields allowed for more SIMD because of alignment"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"127e205b-d594-4299-9703-eca268a0f594","type":"message","text":"Yep, it makes sense and I hadn't thought of it. Not sure what the default padding in c++ is - do you?","user":"UCNPT22MQ","ts":"1615325546.067300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TkyFE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yep, it makes sense and I hadn't thought of it. Not sure what the default padding in c++ is - do you?"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"bf33a0ab-bf2c-4a4d-8ece-8177f33e016c","type":"message","text":"depends on the compiler","user":"UH24GRBLL","ts":"1615325555.067500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/ZH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"depends on the compiler"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"4c10a9db-8096-4aec-844e-1bfd64a8712e","type":"message","text":"Thanks for your help!","user":"UCNPT22MQ","ts":"1615325555.067700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iZo=D","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks for your help!"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"605530e7-93a3-421b-a4c6-7d8f20a67077","type":"message","text":"Ok","user":"UCNPT22MQ","ts":"1615325560.067900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KGJXs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"5bae5415-ebe9-45fb-b9a3-462748ac3c29","type":"message","text":"you can check godbolt though","user":"UH24GRBLL","ts":"1615325574.068100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ly8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can check godbolt though"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"c23d0cb7-0e65-489d-9120-a2630c2ab122","type":"message","text":"for more specific help, I guess we'd need more code :)","user":"UH24GRBLL","ts":"1615325657.068300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JC27","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"for more specific help, I guess we'd need more code :)"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"dcff2892-ea9d-4b08-bbae-dd7586258b84","type":"message","text":"Julia pads fields.","user":"UAUPJLBQX","ts":"1615330305.068500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KvN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Julia pads fields."}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"e2a6a5c1-c3c6-46c4-9cf0-e45a2c8f1974","type":"message","text":"It uses the same alignment as C for interoperability","user":"UAUPJLBQX","ts":"1615330336.068700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cHy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It uses the same alignment as C for interoperability"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"a5e142ff-0223-44a5-82e5-d1afa5f78988","type":"message","text":"```julia&gt; t = (zero(Int64),zero(Int32),zero(Int64),zero(Int8),zero(Int64));\n\njulia&gt; sizeof(t)\n40\n\njulia&gt; sizeof(Int64) * length(t)\n40\n\njulia&gt; mapreduce(sizeof,+,t)\n29```","user":"UAUPJLBQX","ts":"1615330582.068900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"f0NE","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> t = (zero(Int64),zero(Int32),zero(Int64),zero(Int8),zero(Int64));\n\njulia> sizeof(t)\n40\n\njulia> sizeof(Int64) * length(t)\n40\n\njulia> mapreduce(sizeof,+,t)\n29"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"353bcad0-f13f-4269-bc13-cba760381a70","type":"message","text":"Note that `@avx` still only works with homogenous vectors of types `T&lt;:Union{Bool,Base.HWReal}`.","user":"UAUPJLBQX","ts":"1615330716.069100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LP5n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Note that "},{"type":"text","text":"@avx","style":{"code":true}},{"type":"text","text":" still only works with homogenous vectors of types "},{"type":"text","text":"T<:Union{Bool,Base.HWReal}","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"b8f4f1c8-e2c7-44f5-a9cc-f0f7764860f4","type":"message","text":"If you wanted to try that, you'd need to reinterpret the array of structs into an array of type of whatever field you want to access (preferably with the new `reinterpret(reshape, ...` in Julia 1.6), and access the appropriate index.","user":"UAUPJLBQX","ts":"1615330780.069300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FEjdt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you wanted to try that, you'd need to reinterpret the array of structs into an array of type of whatever field you want to access (preferably with the new "},{"type":"text","text":"reinterpret(reshape, ...","style":{"code":true}},{"type":"text","text":" in Julia 1.6), and access the appropriate index."}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"37845aee-f4dc-4378-80d4-5ea73b98a96f","type":"message","text":"`@avx` will use gather/scatter for non-contiguous memory accesses.","user":"UAUPJLBQX","ts":"1615330838.069500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aFj6h","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"@avx","style":{"code":true}},{"type":"text","text":" will use gather/scatter for non-contiguous memory accesses."}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"cd5a8686-baac-418f-8858-b28b3a2e43f9","type":"message","text":"But...I think `@inbounds @simd` really should too, so it'd help if you could provide an example.","user":"UAUPJLBQX","ts":"1615330862.069700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mSKVY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But...I think "},{"type":"text","text":"@inbounds @simd","style":{"code":true}},{"type":"text","text":" really should too, so it'd help if you could provide an example."}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"28117f9c-a284-46d1-8612-780a4c7ea8df","type":"message","text":"Something else you could consider is using `StructArrays.jl`","user":"UAUPJLBQX","ts":"1615330883.069900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"E3d","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Something else you could consider is using "},{"type":"text","text":"StructArrays.jl","style":{"code":true}}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"f60cca4c-6cbd-4639-919e-0734f0bcf983","type":"message","text":"If you find yourself manipulating one field at a time of each in a vector often, that'll almost certainly give you a good performance boost.","user":"UAUPJLBQX","ts":"1615330925.070100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6Jk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you find yourself manipulating one field at a time of each in a vector often, that'll almost certainly give you a good performance boost."}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"bc889071-14c9-4f46-98f7-f3841985c349","type":"message","text":"(gather and scatter aren't faster on Intel or AMD systems than just doing each load/store serially, meaning your CPU has to have enough compute instructions to do to be bottlenecked by them for gather/scatter to be profitable)","user":"UAUPJLBQX","ts":"1615331012.070300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PULh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(gather and scatter aren't faster on Intel or AMD systems than just doing each load/store serially, meaning your CPU has to have enough compute instructions to do to be bottlenecked by them for gather/scatter to be profitable)"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"e19a4ad8-c3e5-4eac-a575-9074b041849f","type":"message","text":"Thanks. Back now, let me try to put together a concrete example. Would be great if we had Julia godbolt","user":"UCNPT22MQ","ts":"1615331165.070500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PjL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks. Back now, let me try to put together a concrete example. Would be great if we had Julia godbolt"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"31d3cb2a-5a83-45e1-a532-9bcbc5c8fd6f","type":"message","text":"We have `@code_native` which is pretty close","user":"U0179G7FG4F","ts":"1615331541.070700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OyVm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We have "},{"type":"text","text":"@code_native","style":{"code":true}},{"type":"text","text":" which is pretty close"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"6ba7a989-e45b-4470-b29c-856dc83c862a","type":"message","text":"```struct MyStruct\n    a::Int\n    b::Float64\n    c::Int16\nend\n@assert sizeof(MyStruct) == 24\ndest = Vector{MyStruct}(undef, 1_000_000)\nfunction modify(xs::Vector{MyStruct})\n    @inbounds @simd for i in 1:length(xs)\n        x = xs[i]\n        xs[i] = MyStruct(x.a + 2, x.a, x.a)\n    end\n    return xs\nend\n@code_native debuginfo=:none modify(dest)\njulia&gt; @code_native debuginfo=:none modify(dest)\n        .text\n        pushq   %rax\n        movq    %rsi, (%rsp)\n        movq    (%rsi), %rax\n        movq    8(%rax), %rcx\n        testq   %rcx, %rcx\n        je      L77\n        movq    (%rax), %rdx\n        nopw    %cs:(%rax,%rax)\nL32:\n        movq    (%rdx), %rsi\n        movswq  %si, %rdi\n        cmpq    %rsi, %rdi\n        jne     L79\n        vcvtsi2sd       %rsi, %xmm1, %xmm0\n        movq    %rsi, %rdi\n        addq    $2, %rdi\n        movw    %si, 16(%rdx)\n        vmovsd  %xmm0, 8(%rdx)\n        movq    %rdi, (%rdx)\n        addq    $24, %rdx\n        decq    %rcx\n        jne     L32\nL77:\n        popq    %rcx\n        retq\nL79:\n        movabsq $throw_inexacterror, %rax\n        movabsq $140018999185664, %rdi          # imm = 0x7F58B6B55100\n        callq   *%rax\n        ud2```","user":"UCNPT22MQ","ts":"1615331827.070900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nSV","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct MyStruct\n    a::Int\n    b::Float64\n    c::Int16\nend\n@assert sizeof(MyStruct) == 24\ndest = Vector{MyStruct}(undef, 1_000_000)\nfunction modify(xs::Vector{MyStruct})\n    @inbounds @simd for i in 1:length(xs)\n        x = xs[i]\n        xs[i] = MyStruct(x.a + 2, x.a, x.a)\n    end\n    return xs\nend\n@code_native debuginfo=:none modify(dest)\njulia> @code_native debuginfo=:none modify(dest)\n        .text\n        pushq   %rax\n        movq    %rsi, (%rsp)\n        movq    (%rsi), %rax\n        movq    8(%rax), %rcx\n        testq   %rcx, %rcx\n        je      L77\n        movq    (%rax), %rdx\n        nopw    %cs:(%rax,%rax)\nL32:\n        movq    (%rdx), %rsi\n        movswq  %si, %rdi\n        cmpq    %rsi, %rdi\n        jne     L79\n        vcvtsi2sd       %rsi, %xmm1, %xmm0\n        movq    %rsi, %rdi\n        addq    $2, %rdi\n        movw    %si, 16(%rdx)\n        vmovsd  %xmm0, 8(%rdx)\n        movq    %rdi, (%rdx)\n        addq    $24, %rdx\n        decq    %rcx\n        jne     L32\nL77:\n        popq    %rcx\n        retq\nL79:\n        movabsq $throw_inexacterror, %rax\n        movabsq $140018999185664, %rdi          # imm = 0x7F58B6B55100\n        callq   *%rax\n        ud2"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"08571631-3aaf-4f7b-8cfd-727eb2f7a591","type":"message","text":"Here's the julia code, and what I see on cascade lake. and here's the C++ equivalent: <https://godbolt.org/z/W7nYjx>","user":"UCNPT22MQ","ts":"1615331846.071100","team":"T68168MUP","edited":{"user":"UCNPT22MQ","ts":"1615331854.000000"},"blocks":[{"type":"rich_text","block_id":"eK=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Here's the julia code, and what I see on cascade lake. and here's the C++ equivalent: "},{"type":"link","url":"https://godbolt.org/z/W7nYjx"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"da40e5e2-d7a0-4620-9aec-2112184e2f08","type":"message","text":"so clang has managed to avx512 this, where I can't really tell if Julia is getting any SIMD at all. There are 2 vector instructions in there but I'm unclear on exactly what they're doing, since the rest seems scalar","user":"UCNPT22MQ","ts":"1615331938.071400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nHYU=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so clang has managed to avx512 this, where I can't really tell if Julia is getting any SIMD at all. There are 2 vector instructions in there but I'm unclear on exactly what they're doing, since the rest seems scalar"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"a4a1e572-79f9-4788-a43e-d9b88c633c12","type":"message","text":"```julia&gt; function modify(xs::Vector{MyStruct})\n           @inbounds @simd for i in 1:length(xs)\n               x = xs[i]\n               xs[i] = MyStruct(x.a + 2, x.b, x.c)\n           end\n           return xs\n       end\nmodify (generic function with 2 methods)\njulia&gt; @code_native debuginfo=:none modify(dest)\n        .text\n        movq    %rsi, -8(%rsp)\n        movq    (%rsi), %rax\n        movq    8(%rax), %rcx\n        testq   %rcx, %rcx\n        je      L45\n        movq    (%rax), %rdx\n        nopw    %cs:(%rax,%rax)\nL32:\n        addq    $2, (%rdx)\n        addq    $24, %rdx\n        decq    %rcx\n        jne     L32\nL45:\n        retq```\nmy bad, managed to mess up the fields in the example. This is what it should look like","user":"UCNPT22MQ","ts":"1615332439.071600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ydV","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function modify(xs::Vector{MyStruct})\n           @inbounds @simd for i in 1:length(xs)\n               x = xs[i]\n               xs[i] = MyStruct(x.a + 2, x.b, x.c)\n           end\n           return xs\n       end\nmodify (generic function with 2 methods)\njulia> @code_native debuginfo=:none modify(dest)\n        .text\n        movq    %rsi, -8(%rsp)\n        movq    (%rsi), %rax\n        movq    8(%rax), %rcx\n        testq   %rcx, %rcx\n        je      L45\n        movq    (%rax), %rdx\n        nopw    %cs:(%rax,%rax)\nL32:\n        addq    $2, (%rdx)\n        addq    $24, %rdx\n        decq    %rcx\n        jne     L32\nL45:\n        retq"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"my bad, managed to mess up the fields in the example. This is what it should look like"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"87d75e1b-2c0d-41df-8837-de68c90852f8","type":"message","text":"<@U0179G7FG4F> yeah, it's more the sharing feature of godbolt that is cool","user":"UCNPT22MQ","ts":"1615332466.071800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ylf2j","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U0179G7FG4F"},{"type":"text","text":" yeah, it's more the sharing feature of godbolt that is cool"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"d911c283-a24e-44e9-aebd-f5ce0a64d54d","type":"message","text":"Adding an extra 6 bytes of padding, e.g. another Int16 + Int32 fields, seems to generate AVX512 instructions, aggressively unrolled. This would be a struct size of 32 bytes\nRuntime is almost identical though :confused:, so maybe not a bottleneck. Though it's not quite the real application.","user":"UCNPT22MQ","ts":"1615333083.072000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tOLuV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Adding an extra 6 bytes of padding, e.g. another Int16 + Int32 fields, seems to generate AVX512 instructions, aggressively unrolled. This would be a struct size of 32 bytes\nRuntime is almost identical though "},{"type":"emoji","name":"confused"},{"type":"text","text":", so maybe not a bottleneck. Though it's not quite the real application."}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"cf1c082e-b81e-449d-87ee-0b00605480f3","type":"message","text":"\"sd\" means \"single double\"","user":"UAUPJLBQX","ts":"1615333426.073000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zVu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"\"sd\" means \"single double\""}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"a83f6348-9e79-4d9f-9d4e-67a0f9dfbff0","type":"message","text":"\"pd\" would mean \"packed double\"","user":"UAUPJLBQX","ts":"1615333485.073200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MxA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"\"pd\" would mean \"packed double\""}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"7da24040-5e84-4b34-936f-1a048637aa5c","type":"message","text":"that is, ss and sd (single single precision and single double precision) are not SIMD, but ps and pd (packed single precision, packed double precision) are.","user":"UAUPJLBQX","ts":"1615333521.073400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Xum","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that is, ss and sd (single single precision and single double precision) are not SIMD, but ps and pd (packed single precision, packed double precision) are."}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"49b618d1-3d8a-4d3f-bd5e-c95dab2f96a0","type":"message","text":"ok. in that godbolt example, it looks like `sizeof(struct mystruct)` is 24, so clang isn't doing some crazy padding","user":"UCNPT22MQ","ts":"1615333606.073600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s0ha","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ok. in that godbolt example, it looks like "},{"type":"text","text":"sizeof(struct mystruct)","style":{"code":true}},{"type":"text","text":" is 24, so clang isn't doing some crazy padding"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"dc261fcf-6183-4a54-a083-6900af3a757d","type":"message","text":"Yeah, I'm looking at code native","user":"UAUPJLBQX","ts":"1615333711.073800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=/bcy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, I'm looking at code native"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"d0fc9262-bde0-41d0-a715-8457e6aebe15","type":"message","text":"not sure why it isn't SIMD-ing","user":"UAUPJLBQX","ts":"1615333716.074000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gOq2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not sure why it isn't SIMD-ing"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"5619dad5-457c-4edc-92d6-47162a9ad4b2","type":"message","text":"I'll check what LLVM says","user":"UAUPJLBQX","ts":"1615333722.074200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BkG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'll check what LLVM says"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"3b4213f0-d79b-4fcc-93af-c82b65b5c826","type":"message","text":"also, you can skip the truncation check","user":"UAUPJLBQX","ts":"1615333743.074400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ugFA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"also, you can skip the truncation check"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"87727dd1-493f-4cec-aded-497cacddf630","type":"message","text":"via `x.a % Int16`","user":"UAUPJLBQX","ts":"1615333749.074600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ukzs1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"via "},{"type":"text","text":"x.a % Int16","style":{"code":true}}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"727f2b0c-849f-41bb-adb7-d67b582362bd","type":"message","text":"(doesn't help SIMD though)","user":"UAUPJLBQX","ts":"1615333760.074800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dey","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(doesn't help SIMD though)"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"4cb29268-6ac4-4fc5-b78f-fc58030aa1f2","type":"message","text":"```remark: array.jl:840:0: loop not vectorized: instruction return type cannot be vectorized\nremark: simdloop.jl:75:0: loop not vectorized: unsafe dependent memory operations in loop. Use #pragma loop distribute(enable) to allow loop distribution to attempt to isolate the offending operations into a separate loop\nremark: simdloop.jl:75:0: loop not vectorized```","user":"UAUPJLBQX","ts":"1615333847.075000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kj7DR","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"remark: array.jl:840:0: loop not vectorized: instruction return type cannot be vectorized\nremark: simdloop.jl:75:0: loop not vectorized: unsafe dependent memory operations in loop. Use #pragma loop distribute(enable) to allow loop distribution to attempt to isolate the offending operations into a separate loop\nremark: simdloop.jl:75:0: loop not vectorized"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"d9980bd5-5811-4e79-84b0-8058b7e854a8","type":"message","text":"`set -x JULIA_LLVM_ARGS --pass-remarks-analysis=loop-vectorize --pass-remarks-missed=loop-vectorize --pass-remarks=loop-vectorize`\nor\n`export JULIA_LLVM_ARGS=\"--pass-remarks-analysis=loop-vectorize --pass-remarks-missed=loop-vectorize --pass-remarks=loop-vectorize\"`","user":"UAUPJLBQX","ts":"1615333893.075200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HFq6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"set -x JULIA_LLVM_ARGS --pass-remarks-analysis=loop-vectorize --pass-remarks-missed=loop-vectorize --pass-remarks=loop-vectorize","style":{"code":true}},{"type":"text","text":"\nor\n"},{"type":"text","text":"export JULIA_LLVM_ARGS=\"--pass-remarks-analysis=loop-vectorize --pass-remarks-missed=loop-vectorize --pass-remarks=loop-vectorize\"","style":{"code":true}}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"9b80d870-a962-48ab-8ecc-78f0456291c2","type":"message","text":"depending on shell","user":"UAUPJLBQX","ts":"1615333898.075400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dTj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"depending on shell"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"24d7c97c-235d-4226-97e9-c8d4ff3ea7c1","type":"message","text":"```julia&gt; function modify!(xs::Vector{MyStruct})\n           @assert sizeof(Int) == sizeof(Float64) &amp;&amp; sizeof(MyStruct) == 24\n           xp = Base.unsafe_convert(Ptr{Int}, xs)\n           @inbounds @simd ivdep for i in 0:length(xs)-1\n               xa = unsafe_load(xp + 24i)\n               unsafe_store!(xp + 24i    , xa + 2)\n               unsafe_store!(xp + 24i + 8, reinterpret(Int,Float64(xa)))\n               unsafe_store!(xp + 24i + 16,xa)\n           end\n           return xs\n       end\nmodify! (generic function with 1 method)```","user":"UAUPJLBQX","ts":"1615334505.075600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W/2","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function modify!(xs::Vector{MyStruct})\n           @assert sizeof(Int) == sizeof(Float64) && sizeof(MyStruct) == 24\n           xp = Base.unsafe_convert(Ptr{Int}, xs)\n           @inbounds @simd ivdep for i in 0:length(xs)-1\n               xa = unsafe_load(xp + 24i)\n               unsafe_store!(xp + 24i    , xa + 2)\n               unsafe_store!(xp + 24i + 8, reinterpret(Int,Float64(xa)))\n               unsafe_store!(xp + 24i + 16,xa)\n           end\n           return xs\n       end\nmodify! (generic function with 1 method)"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"908cbf2a-92ce-4944-9225-0346948cb134","type":"message","text":"Assembly:","user":"UAUPJLBQX","ts":"1615334522.075800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aDlt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Assembly:"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"30d2308c-c183-45d0-9c09-871ae06e0c3e","type":"message","text":"```.text\n        mov     qword ptr [rsp - 8], rsi\n        mov     rax, qword ptr [rsi]\n        mov     rcx, qword ptr [rax + 8]\n        test    rcx, rcx\n        je      L369\n        mov     rdx, qword ptr [rax]\n        cmp     rcx, 8\n        jae     L38\n        xor     r8d, r8d\n        jmp     L320\nL38:\n        movabs  rsi, offset .rodata\n        vmovdqa64       zmm0, zmmword ptr [rsi]\n        mov     r8, rcx\n        movabs  rsi, offset .rodata.cst8\n        vpbroadcastq    zmm1, qword ptr [rsi]\n        and     r8, -8\n        vpbroadcastq    zmm2, rdx\n        movabs  rsi, 140690734747592\n        vpbroadcastq    zmm3, qword ptr [rsi]\n        movabs  rsi, 140690734747392\n        vmovdqa64       zmm4, zmmword ptr [rsi]\n        mov     r9b, 36\n        movabs  rsi, 140690734747456\n        vmovdqa64       zmm5, zmmword ptr [rsi]\n        movabs  rsi, 140690734747520\n        vmovdqa64       zmm6, zmmword ptr [rsi]\n        movabs  rsi, 140690734747600\n        vpbroadcastq    zmm7, qword ptr [rsi]\n        mov     rsi, r8\n        nop     dword ptr [rax]\nL176:\n        vpmullq zmm8, zmm0, zmm1\n        vpaddq  zmm9, zmm2, zmm8\n        kxnorw  k1, k0, k0\n        vpgatherqq      zmm10 {k1}, zmmword ptr [zmm9]\n        vpaddq  zmm9, zmm10, zmm3\n        vmovq   rdi, xmm8\n        vcvtqq2pd       zmm8, zmm10\n        vmovdqa64       zmm11, zmm9\n        vpermt2q        zmm11, zmm4, zmm8\n        kmovd   k1, r9d\n        vpermilpd       zmm12, zmm8, 85         # zmm12 = zmm8[1,0,3,2,5,4,7,6]\n        vshufi64x2      zmm11 {k1}, zmm10, zmm10, 0 # zmm11 {%k1} = zmm10[0,1,0,1,0,1,0,1]\n        vpermt2q        zmm8, zmm6, zmm10\n        vpermt2q        zmm10, zmm5, zmm9\n        vmovdqa64       zmm10 {k1}, zmm12\n        vshufi64x2      zmm8 {k1}, zmm9, zmm9, 60 # zmm8 {%k1} = zmm9[0,1,6,7,6,7,0,1]\n        vmovdqu64       zmmword ptr [rdx + rdi + 128], zmm8\n        vmovdqu64       zmmword ptr [rdx + rdi + 64], zmm10\n        vmovdqu64       zmmword ptr [rdx + rdi], zmm11\n        vpaddq  zmm0, zmm0, zmm7\n        add     rsi, -8\n        jne     L176\n        cmp     rcx, r8\n        je      L369\nL320:\n        sub     rcx, r8\n        lea     rsi, [r8 + 2*r8]\n        lea     rdx, [rdx + 8*rsi]\n        nop     dword ptr [rax + rax]\nL336:\n        mov     rsi, qword ptr [rdx]\n        lea     rdi, [rsi + 2]\n        vcvtsi2sd       xmm0, xmm13, rsi\n        mov     qword ptr [rdx], rdi\n        vmovsd  qword ptr [rdx + 8], xmm0\n        mov     qword ptr [rdx + 16], rsi\n        add     rdx, 24\n        dec     rcx\n        jne     L336\nL369:\n        vzeroupper\n        ret```","user":"UAUPJLBQX","ts":"1615334524.076000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j5N","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":".text\n        mov     qword ptr [rsp - 8], rsi\n        mov     rax, qword ptr [rsi]\n        mov     rcx, qword ptr [rax + 8]\n        test    rcx, rcx\n        je      L369\n        mov     rdx, qword ptr [rax]\n        cmp     rcx, 8\n        jae     L38\n        xor     r8d, r8d\n        jmp     L320\nL38:\n        movabs  rsi, offset .rodata\n        vmovdqa64       zmm0, zmmword ptr [rsi]\n        mov     r8, rcx\n        movabs  rsi, offset .rodata.cst8\n        vpbroadcastq    zmm1, qword ptr [rsi]\n        and     r8, -8\n        vpbroadcastq    zmm2, rdx\n        movabs  rsi, 140690734747592\n        vpbroadcastq    zmm3, qword ptr [rsi]\n        movabs  rsi, 140690734747392\n        vmovdqa64       zmm4, zmmword ptr [rsi]\n        mov     r9b, 36\n        movabs  rsi, 140690734747456\n        vmovdqa64       zmm5, zmmword ptr [rsi]\n        movabs  rsi, 140690734747520\n        vmovdqa64       zmm6, zmmword ptr [rsi]\n        movabs  rsi, 140690734747600\n        vpbroadcastq    zmm7, qword ptr [rsi]\n        mov     rsi, r8\n        nop     dword ptr [rax]\nL176:\n        vpmullq zmm8, zmm0, zmm1\n        vpaddq  zmm9, zmm2, zmm8\n        kxnorw  k1, k0, k0\n        vpgatherqq      zmm10 {k1}, zmmword ptr [zmm9]\n        vpaddq  zmm9, zmm10, zmm3\n        vmovq   rdi, xmm8\n        vcvtqq2pd       zmm8, zmm10\n        vmovdqa64       zmm11, zmm9\n        vpermt2q        zmm11, zmm4, zmm8\n        kmovd   k1, r9d\n        vpermilpd       zmm12, zmm8, 85         # zmm12 = zmm8[1,0,3,2,5,4,7,6]\n        vshufi64x2      zmm11 {k1}, zmm10, zmm10, 0 # zmm11 {%k1} = zmm10[0,1,0,1,0,1,0,1]\n        vpermt2q        zmm8, zmm6, zmm10\n        vpermt2q        zmm10, zmm5, zmm9\n        vmovdqa64       zmm10 {k1}, zmm12\n        vshufi64x2      zmm8 {k1}, zmm9, zmm9, 60 # zmm8 {%k1} = zmm9[0,1,6,7,6,7,0,1]\n        vmovdqu64       zmmword ptr [rdx + rdi + 128], zmm8\n        vmovdqu64       zmmword ptr [rdx + rdi + 64], zmm10\n        vmovdqu64       zmmword ptr [rdx + rdi], zmm11\n        vpaddq  zmm0, zmm0, zmm7\n        add     rsi, -8\n        jne     L176\n        cmp     rcx, r8\n        je      L369\nL320:\n        sub     rcx, r8\n        lea     rsi, [r8 + 2*r8]\n        lea     rdx, [rdx + 8*rsi]\n        nop     dword ptr [rax + rax]\nL336:\n        mov     rsi, qword ptr [rdx]\n        lea     rdi, [rsi + 2]\n        vcvtsi2sd       xmm0, xmm13, rsi\n        mov     qword ptr [rdx], rdi\n        vmovsd  qword ptr [rdx + 8], xmm0\n        mov     qword ptr [rdx + 16], rsi\n        add     rdx, 24\n        dec     rcx\n        jne     L336\nL369:\n        vzeroupper\n        ret"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"a480df49-7bcd-478d-8e45-d107f64ecc12","type":"message","text":"Benchmarks on vector of length 1000:","user":"UAUPJLBQX","ts":"1615334621.076200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"D41X","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Benchmarks on vector of length 1000:"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"6f2bcb69-8de3-43f0-9399-c2d64ba6c331","type":"message","text":"```julia&gt; @benchmark modify($dest)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     432.960 ns (0.00% GC)\n  median time:      433.121 ns (0.00% GC)\n  mean time:        434.992 ns (0.00% GC)\n  maximum time:     701.909 ns (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     198\n\njulia&gt; @benchmark modify!($dest)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     350.808 ns (0.00% GC)\n  median time:      367.033 ns (0.00% GC)\n  mean time:        364.772 ns (0.00% GC)\n  maximum time:     520.878 ns (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     213```","user":"UAUPJLBQX","ts":"1615334624.076400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"T5ht","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @benchmark modify($dest)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     432.960 ns (0.00% GC)\n  median time:      433.121 ns (0.00% GC)\n  mean time:        434.992 ns (0.00% GC)\n  maximum time:     701.909 ns (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     198\n\njulia> @benchmark modify!($dest)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     350.808 ns (0.00% GC)\n  median time:      367.033 ns (0.00% GC)\n  mean time:        364.772 ns (0.00% GC)\n  maximum time:     520.878 ns (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     213"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"b3f2605b-7783-41d0-865f-eba3e9f89571","type":"message","text":"no-bang is the original + `x.a % Int16`","user":"UAUPJLBQX","ts":"1615334643.076600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uCN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no-bang is the original + "},{"type":"text","text":"x.a % Int16","style":{"code":true}}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"542e4e8b-082a-40b4-8005-03a0801873f6","type":"message","text":"bang is the one using pointers and SIMD.","user":"UAUPJLBQX","ts":"1615334654.076800","team":"T68168MUP","edited":{"user":"UAUPJLBQX","ts":"1615334669.000000"},"blocks":[{"type":"rich_text","block_id":"4Edi5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"bang is the one using pointers and SIMD."}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"1bb92c21-8f7f-4cfe-af23-b0b81a6fd430","type":"message","text":"Note that this requires AVX512 for SIMD","user":"UAUPJLBQX","ts":"1615334679.077100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SnPFi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Note that this requires AVX512 for SIMD"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"d9748e88-2da4-4757-ad45-4138e4c6c38e","type":"message","text":"because AVX2 and older don't have SIMD `Int64 -&gt; Float64` conversion","user":"UAUPJLBQX","ts":"1615334696.077300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O=Ivo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"because AVX2 and older don't have SIMD "},{"type":"text","text":"Int64 -> Float64","style":{"code":true}},{"type":"text","text":" conversion"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"71fedcac-144f-426b-9745-36c49bc2efa9","type":"message","text":"thanks, good to know about those flags.\nwhat's the deal with x.a % Int16? I think I might have confused you by making a typo in the very first thing I sent, which I corrected","user":"UCNPT22MQ","ts":"1615334813.077500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s5w","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thanks, good to know about those flags.\nwhat's the deal with x.a % Int16? I think I might have confused you by making a typo in the very first thing I sent, which I corrected"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"9606a1c3-c39c-450d-bcf6-725c2c649d2a","type":"message","text":"the fields should be a, b, c -- not a, a, a","user":"UCNPT22MQ","ts":"1615334828.077700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h4w","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the fields should be a, b, c -- not a, a, a"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"91c76510-20e6-4dc0-9cff-4c4b6de5d4c7","type":"message","text":"i.e. corresponding to just mutating a, leaving b and c unchanged","user":"UCNPT22MQ","ts":"1615334841.077900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gzw4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i.e. corresponding to just mutating a, leaving b and c unchanged"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"ba04005d-9901-4d1b-9889-946996e6c0c5","type":"message","text":"oh","user":"UAUPJLBQX","ts":"1615334849.078100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W6RA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"9fe437f9-bd9d-45d2-bcd9-440580d2c497","type":"message","text":"the `x.a % Int16` truncates the 64-bit integer to 16-bit","user":"UAUPJLBQX","ts":"1615334879.078300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ErJne","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the "},{"type":"text","text":"x.a % Int16","style":{"code":true}},{"type":"text","text":" truncates the 64-bit integer to 16-bit"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"0bf44165-0903-45d4-b565-33e7e7185ece","type":"message","text":"```julia&gt; convert(Int16, (1 &lt;&lt; 17) + 5)\nERROR: InexactError: trunc(Int16, 131077)\nStacktrace:\n [1] throw_inexacterror(f::Symbol, #unused#::Type{Int16}, val::Int64)\n   @ Core ./boot.jl:608\n [2] checked_trunc_sint\n   @ ./boot.jl:630 [inlined]\n [3] toInt16\n   @ ./boot.jl:656 [inlined]\n [4] Int16\n   @ ./boot.jl:756 [inlined]\n [5] convert(#unused#::Type{Int16}, x::Int64)\n   @ Base ./number.jl:7\n [6] top-level scope\n   @ REPL[9]:1\n\njulia&gt; ((1 &lt;&lt; 17) + 5) % Int16\n5```","user":"UAUPJLBQX","ts":"1615334924.078500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"turwB","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> convert(Int16, (1 << 17) + 5)\nERROR: InexactError: trunc(Int16, 131077)\nStacktrace:\n [1] throw_inexacterror(f::Symbol, #unused#::Type{Int16}, val::Int64)\n   @ Core ./boot.jl:608\n [2] checked_trunc_sint\n   @ ./boot.jl:630 [inlined]\n [3] toInt16\n   @ ./boot.jl:656 [inlined]\n [4] Int16\n   @ ./boot.jl:756 [inlined]\n [5] convert(#unused#::Type{Int16}, x::Int64)\n   @ Base ./number.jl:7\n [6] top-level scope\n   @ REPL[9]:1\n\njulia> ((1 << 17) + 5) % Int16\n5"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"e8e39347-8aee-4bfb-8bdb-85caf7878c41","type":"message","text":"it's not necessary if you meant `x.a + 2, x.b, x.c`","user":"UAUPJLBQX","ts":"1615334943.078700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1A9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's not necessary if you meant "},{"type":"text","text":"x.a + 2, x.b, x.c","style":{"code":true}}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"592c0797-e4c3-4ee2-97e9-f0759fed5bf6","type":"message","text":"yep, and can remove the other 2 unsafe_stores","user":"UCNPT22MQ","ts":"1615334955.078900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"39lQW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yep, and can remove the other 2 unsafe_stores"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"838b5326-dbee-479b-b6e5-b68fa4901029","type":"message","text":"yeah","user":"UAUPJLBQX","ts":"1615334976.079100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"um6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"039f3b5c-b2b9-4856-8927-fe1674ff851e","type":"message","text":"Updated benchmark:\n```julia&gt; @benchmark modify($dest)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     291.015 ns (0.00% GC)\n  median time:      291.442 ns (0.00% GC)\n  mean time:        293.800 ns (0.00% GC)\n  maximum time:     449.052 ns (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     269\n\njulia&gt; @benchmark modify!($dest)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     317.072 ns (0.00% GC)\n  median time:      317.557 ns (0.00% GC)\n  mean time:        323.976 ns (0.00% GC)\n  maximum time:     712.194 ns (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     237```","user":"UAUPJLBQX","ts":"1615335051.079300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LzvT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Updated benchmark:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @benchmark modify($dest)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     291.015 ns (0.00% GC)\n  median time:      291.442 ns (0.00% GC)\n  mean time:        293.800 ns (0.00% GC)\n  maximum time:     449.052 ns (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     269\n\njulia> @benchmark modify!($dest)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     317.072 ns (0.00% GC)\n  median time:      317.557 ns (0.00% GC)\n  mean time:        323.976 ns (0.00% GC)\n  maximum time:     712.194 ns (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     237"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"3eda544a-aa20-4b43-95cc-848ee3e8cfd7","type":"message","text":"SIMD is slower","user":"UAUPJLBQX","ts":"1615335056.079500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CJ0Xu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"SIMD is slower"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"a77f8853-a116-4c19-819c-ef463105805c","type":"message","text":"on my computer","user":"UAUPJLBQX","ts":"1615335064.079700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Mq9K","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"on my computer"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"441bd074-5984-4c52-a17c-96fb0498c531","type":"message","text":"(Tiger Lake, but I also have Skylake-AVX512 and Cascadelake systems, but I don't expect the results to be different there)","user":"UAUPJLBQX","ts":"1615335100.079900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MtMlI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(Tiger Lake, but I also have Skylake-AVX512 and Cascadelake systems, but I don't expect the results to be different there)"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"b3009c09-d83e-47b3-b19d-9e9ab7e5e0a5","type":"message","text":"it may be that in the future gather is faster","user":"UAUPJLBQX","ts":"1615335107.080100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cTe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it may be that in the future gather is faster"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"5fd549f9-67a6-4e00-b1f7-cf47887e8a72","type":"message","text":"for example, gather is supposed to be faster on the ARM A64FX","user":"UAUPJLBQX","ts":"1615335121.080300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VxuW9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"for example, gather is supposed to be faster on the ARM A64FX"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"9f4ad38a-0c85-4fb0-9530-c2cfe386765a","type":"message","text":"yeah, I'm seeing pretty much exactly the same timings for the basic no-SIMD version and the unsafe / simd version","user":"UCNPT22MQ","ts":"1615335198.080500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mLg2q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, I'm seeing pretty much exactly the same timings for the basic no-SIMD version and the unsafe / simd version"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"8d273b34-2bd2-478c-ac95-6d6797e9a682","type":"message","text":"87 microseconds for 100k elements","user":"UCNPT22MQ","ts":"1615335207.080700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"q49H=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"87 microseconds for 100k elements"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"0fa9a827-c7c2-4c89-881f-cee21e12042e","type":"message","text":"It'll be memory bandwidth bound by 100k elements","user":"UAUPJLBQX","ts":"1615335248.080900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rkr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It'll be memory bandwidth bound by 100k elements"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"44c9de99-3f2f-4440-a9a9-890a6e01d32b","type":"message","text":"true, yeah","user":"UCNPT22MQ","ts":"1615335268.081100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jwKbA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"true, yeah"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"0220901c-b9c8-4f1c-9651-9f0db58ff218","type":"message","text":"```julia&gt; (sizeof(MyStruct) * 100_000) / (1 &lt;&lt; 20)\n2.288818359375```","user":"UAUPJLBQX","ts":"1615335299.081300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"T6TH","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> (sizeof(MyStruct) * 100_000) / (1 << 20)\n2.288818359375"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"3749e5f0-d96f-4a13-98ed-7131f1368939","type":"message","text":"about 2.3 MiB","user":"UAUPJLBQX","ts":"1615335306.081500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZXZ+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"about 2.3 MiB"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"933aa6bf-9dab-4de9-90cd-864c727ac81d","type":"message","text":"Cascadelake and Skylake-X have 1 MiB L2 cache","user":"UAUPJLBQX","ts":"1615335312.081700","team":"T68168MUP","edited":{"user":"UAUPJLBQX","ts":"1615335342.000000"},"blocks":[{"type":"rich_text","block_id":"ihspx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Cascadelake and Skylake-X have 1 MiB L2 cache"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"265c11ac-694d-4b91-8d65-4bb6c9fc44cf","type":"message","text":"Tiger Lake has 1.25 MiB","user":"UAUPJLBQX","ts":"1615335352.082000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"t1V3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Tiger Lake has 1.25 MiB"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"4c351429-e6ca-4dae-8271-50ec2d08f563","type":"message","text":"ok. for 20k elements, looking at about 7 micros for original, 10 for simd","user":"UCNPT22MQ","ts":"1615335403.082200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"utv1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ok. for 20k elements, looking at about 7 micros for original, 10 for simd"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"e94752d7-9899-4643-98d0-a1d24ac34e0f","type":"message","text":"though this is a bit of a simplified example, so it might not extend to a full program. What I want to do now is try and find ways to make the unsafe_load / unsafe_store a bit nicer to use","user":"UCNPT22MQ","ts":"1615335448.082400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lQ8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"though this is a bit of a simplified example, so it might not extend to a full program. What I want to do now is try and find ways to make the unsafe_load / unsafe_store a bit nicer to use"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"b66fb408-a847-4d54-9b3b-69f723fa1ecb","type":"message","text":"fieldoffset/sizeof seem like it could be handy...","user":"UCNPT22MQ","ts":"1615335462.082600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4y8V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"fieldoffset/sizeof seem like it could be handy..."}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"f45cceb0-5ebc-43fe-9c30-64978d143bca","type":"message","text":"It may be in the future that gather is faster. Like on the ARM A64FX (whch also has 512 bit vectors), successive loads from the same cacheline are much cheaper. Its cachelines are also 4x bigger than on x86 CPUs","user":"UAUPJLBQX","ts":"1615335574.082800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Aqzml","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It may be in the future that gather is faster. Like on the ARM A64FX (whch also has 512 bit vectors), successive loads from the same cacheline are much cheaper. Its cachelines are also 4x bigger than on x86 CPUs"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"a3e1e516-e08e-4e63-87d6-f9884a004e7d","type":"message","text":"It may be that a future arch from Intel also has gathers that are faster than just doing serial loads.","user":"UAUPJLBQX","ts":"1615335598.083000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"n6yB3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It may be that a future arch from Intel also has gathers that are faster than just doing serial loads."}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"ce636ef2-f92a-4bd1-81ed-552317ab8f7a","type":"message","text":"More work than just `+` could also amortize the cost of gather/scatter","user":"UAUPJLBQX","ts":"1615335618.083200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+V=b","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"More work than just "},{"type":"text","text":"+","style":{"code":true}},{"type":"text","text":" could also amortize the cost of gather/scatter"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"9f4894a6-05c0-43a1-9883-95749bc3f167","type":"message","text":"yep. It's definitely nice to at least have the option to get simd here","user":"UCNPT22MQ","ts":"1615335621.083400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hdd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yep. It's definitely nice to at least have the option to get simd here"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"4959970e-169d-452e-9229-24d63981bbee","type":"message","text":"And yeah, I'd use `fieldoffset` for a more general version","user":"UAUPJLBQX","ts":"1615335642.083600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VBSH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And yeah, I'd use "},{"type":"text","text":"fieldoffset","style":{"code":true}},{"type":"text","text":" for a more general version"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"25335aeb-fa7e-4fc9-8402-bd87d9677631","type":"message","text":"hmm, I was hoping fieldoffset would work in terms of a symbol / field name","user":"UCNPT22MQ","ts":"1615335658.083800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Qf8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmm, I was hoping fieldoffset would work in terms of a symbol / field name"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"dc37dd68-c642-4616-9205-a93f7c253fb9","type":"message","text":"any tips on how to do somethign like that?","user":"UCNPT22MQ","ts":"1615335667.084000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6SAM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"any tips on how to do somethign like that?"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"eaf7da59-f537-4ed3-a75a-4be4c5da1ade","type":"message","text":"```julia&gt; function fieldoffsetsym(::Type{T}, ::Val{S}) where {T,S}\n           for (i,s) ∈ enumerate(fieldnames(T))\n               s === S &amp;&amp; return fieldoffset(T, i)\n           end\n       end\nfieldoffsetsym (generic function with 1 method)\n\njulia&gt; fieldoffsetsym(MyStruct, Val(:a))\n0x0000000000000000\n\njulia&gt; @code_typed fieldoffsetsym(MyStruct, Val(:a))\nCodeInfo(\n1 ─ %1 = $(Expr(:static_parameter, 1))::Type{MyStruct}\n│   %2 = Base.getfield(%1, :name)::Core.TypeName\n│        Base.getfield(%2, :names)::Core.SimpleVector\n└──      return 0x0000000000000000\n) =&gt; UInt64\n\njulia&gt; @generated function fieldoffsetsym(::Type{T}, ::Val{S}) where {T,S}\n           for (i,s) ∈ enumerate(fieldnames(T))\n               s === S &amp;&amp; return fieldoffset(T, i)\n           end\n       end\nfieldoffsetsym (generic function with 1 method)\n\njulia&gt; @code_typed fieldoffsetsym(MyStruct, Val(:a))\nCodeInfo(\n1 ─     return 0x0000000000000000\n) =&gt; UInt64```","user":"UAUPJLBQX","ts":"1615335877.084200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+o9nH","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function fieldoffsetsym(::Type{T}, ::Val{S}) where {T,S}\n           for (i,s) ∈ enumerate(fieldnames(T))\n               s === S && return fieldoffset(T, i)\n           end\n       end\nfieldoffsetsym (generic function with 1 method)\n\njulia> fieldoffsetsym(MyStruct, Val(:a))\n0x0000000000000000\n\njulia> @code_typed fieldoffsetsym(MyStruct, Val(:a))\nCodeInfo(\n1 ─ %1 = $(Expr(:static_parameter, 1))::Type{MyStruct}\n│   %2 = Base.getfield(%1, :name)::Core.TypeName\n│        Base.getfield(%2, :names)::Core.SimpleVector\n└──      return 0x0000000000000000\n) => UInt64\n\njulia> @generated function fieldoffsetsym(::Type{T}, ::Val{S}) where {T,S}\n           for (i,s) ∈ enumerate(fieldnames(T))\n               s === S && return fieldoffset(T, i)\n           end\n       end\nfieldoffsetsym (generic function with 1 method)\n\njulia> @code_typed fieldoffsetsym(MyStruct, Val(:a))\nCodeInfo(\n1 ─     return 0x0000000000000000\n) => UInt64"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"279749d5-79a4-4fdf-a8a7-f539956ab10c","type":"message","text":"The non-`@generated` version's result was determined at compile time, but if you're nervous about const prop failing, you can stick `@generated` in front","user":"UAUPJLBQX","ts":"1615335920.084400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AY7R","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The non-"},{"type":"text","text":"@generated","style":{"code":true}},{"type":"text","text":" version's result was determined at compile time, but if you're nervous about const prop failing, you can stick "},{"type":"text","text":"@generated","style":{"code":true}},{"type":"text","text":" in front"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"dbfbfae6-b272-4efe-8625-ae460c0b9026","type":"message","text":"Sweet, thanks so much","user":"UCNPT22MQ","ts":"1615335946.084600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qeT/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sweet, thanks so much"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"63147ab7-d964-41a9-ac34-e6379b4f93f3","type":"message","text":"I'm trying to think of what a nice macro helper for writing this kind of code could look like","user":"UCNPT22MQ","ts":"1615336033.084800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mQJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm trying to think of what a nice macro helper for writing this kind of code could look like"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"330fc4d7-e9a8-481e-8467-5bb3a24ff3c1","type":"message","text":"BTW, have you looked at: <https://github.com/JuliaArrays/StructArrays.jl>","user":"UAUPJLBQX","ts":"1615336043.085000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ASR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"BTW, have you looked at: "},{"type":"link","url":"https://github.com/JuliaArrays/StructArrays.jl"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"38e57329-bcce-4a71-b31b-8aaa30948db3","type":"message","text":"? If it's an option, struct of arrays layout is normally much friendlier to SIMD than array of structs (and this would be about as extreme an example it gets of it being better)","user":"UAUPJLBQX","ts":"1615336088.085200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q+n4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"? If it's an option, struct of arrays layout is normally much friendlier to SIMD than array of structs (and this would be about as extreme an example it gets of it being better)"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"afa80a48-b404-4e1a-bccc-7fa642e93342","type":"message","text":"Thanks, yeah I've seen that one. I do want AoS layout here though - access tends to be random but multi-field","user":"UCNPT22MQ","ts":"1615336114.085400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tCFV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks, yeah I've seen that one. I do want AoS layout here though - access tends to be random but multi-field"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ","reactions":[{"name":"+1","users":["UAUPJLBQX"],"count":1}]},{"client_msg_id":"baf7eda3-3b77-43b0-851b-880a13706a7f","type":"message","text":"Come up with the syntax you want, and then figure out how to do the macro that implements it","user":"UAUPJLBQX","ts":"1615336176.085700","team":"T68168MUP","edited":{"user":"UAUPJLBQX","ts":"1615336185.000000"},"blocks":[{"type":"rich_text","block_id":"3t5X","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Come up with the syntax you want, and then figure out how to do the macro that implements it"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"dd1f6e21-9fc8-4f9d-9ade-e5b8cb976e26","type":"message","text":"Also, I think it'd be worth filing a Julia issue","user":"UAUPJLBQX","ts":"1615336195.086100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XZ+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, I think it'd be worth filing a Julia issue"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"44384148-d2e9-4f5f-936b-07f1d5979ccc","type":"message","text":"\"Clang SIMDs this example, resulting in slower code than Julia which fails!\" isn't exactly a call to action :wink:","user":"UAUPJLBQX","ts":"1615336225.086300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L8aCO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"\"Clang SIMDs this example, resulting in slower code than Julia which fails!\" isn't exactly a call to action "},{"type":"emoji","name":"wink"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"72b77f1b-f3d6-48a6-94f5-88bf1525eb8c","type":"message","text":"but, I do think it's a Julia-LLVM bug that causes the SIMD failure unless you go really low level","user":"UAUPJLBQX","ts":"1615336265.086500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ktiuj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but, I do think it's a Julia-LLVM bug that causes the SIMD failure unless you go really low level"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"f290c655-edaa-491f-8269-bdd8f69c8132","type":"message","text":"Thanks, good idea. Let me see if I can fudge the example to be simd-favourable","user":"UCNPT22MQ","ts":"1615336338.086700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IG20","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks, good idea. Let me see if I can fudge the example to be simd-favourable"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"02ff083c-10ca-4266-abdf-d171cc5f9673","type":"message","text":"Beyond the simd thing, the safe code is also just awkward - having to call the constructor and name all the fields is very verbose, and annoying to maintain if you add fields","user":"UCNPT22MQ","ts":"1615336649.087000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vwsY8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Beyond the simd thing, the safe code is also just awkward - having to call the constructor and name all the fields is very verbose, and annoying to maintain if you add fields"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"716ef526-44c2-4f6f-8511-102df0d193a5","type":"message","text":"There are helper packages like <https://github.com/jw3126/Setfield.jl>","user":"UAUPJLBQX","ts":"1615336809.087200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uubbX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There are helper packages like "},{"type":"link","url":"https://github.com/jw3126/Setfield.jl"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"8ecab116-df9f-473e-af74-3e415be16289","type":"message","text":"Also <https://github.com/RelationalAI-oss/Blobs.jl>","user":"UAUPJLBQX","ts":"1615336831.087400","team":"T68168MUP","edited":{"user":"UAUPJLBQX","ts":"1615336839.000000"},"blocks":[{"type":"rich_text","block_id":"bwKJD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also "},{"type":"link","url":"https://github.com/RelationalAI-oss/Blobs.jl"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"369faf8b-68ad-44d5-9f0a-0bc3b1b65292","type":"message","text":"As two more ergonomic alternatives.","user":"UAUPJLBQX","ts":"1615336894.087700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Lrv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"As two more ergonomic alternatives."}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"faa2a1d0-8faa-4723-adb9-589df023700b","type":"message","text":"For a more favorable alternative, you could just do a bunch of operations, like chain `(a ⊻ b + c) ⊻ d` a bunch of times","user":"UAUPJLBQX","ts":"1615336962.087900","team":"T68168MUP","edited":{"user":"UAUPJLBQX","ts":"1615337311.000000"},"blocks":[{"type":"rich_text","block_id":"hmyb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For a more favorable alternative, you could just do a bunch of operations, like chain "},{"type":"text","text":"(a ⊻ b + c) ⊻ d","style":{"code":true}},{"type":"text","text":" a bunch of times"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"c1b0a8e4-a4e4-492c-80b0-9a62d639e56a","type":"message","text":"(note, I switched computers, now on skylake-avx512)","user":"UAUPJLBQX","ts":"1615337298.088100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wLa4M","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(note, I switched computers, now on skylake-avx512)"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"2a81f6cd-4cf7-406b-966a-40f9dfe93567","type":"message","text":"```julia&gt; function modify!(xs::Vector{MyStruct})\n           @assert sizeof(Int) == sizeof(Float64) &amp;&amp; sizeof(MyStruct) == 24\n           xp = Base.unsafe_convert(Ptr{Int}, xs)\n           @inbounds @simd ivdep for i in 0:length(xs)-1\n               xa = unsafe_load(xp + 24i)\n               Base.Cartesian.@nexprs 8 i -&gt; xa = (xa ⊻ -967586086265509696 + 1918587501833626224) ⊻ 4397106132285692209\n               unsafe_store!(xp + 24i, xa + 2)\n           end\n           return xs\n       end\nmodify! (generic function with 1 method)\n\njulia&gt; function modify(xs::Vector{MyStruct})\n           @inbounds @simd for i in 1:length(xs)\n               x = xs[i]\n               xa = x.a\n               Base.Cartesian.@nexprs 8 i -&gt; xa = (xa ⊻ -967586086265509696 + 1918587501833626224) ⊻ 4397106132285692209\n               xs[i] = MyStruct(xa + 2, x.b, x.c)\n           end\n           return xs\n       end\nmodify (generic function with 1 method)\n\njulia&gt; @benchmark modify!($dest)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     1.074 μs (0.00% GC)\n  median time:      1.083 μs (0.00% GC)\n  mean time:        1.088 μs (0.00% GC)\n  maximum time:     3.323 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     10\n\njulia&gt; @benchmark modify($dest)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     1.869 μs (0.00% GC)\n  median time:      1.877 μs (0.00% GC)\n  mean time:        1.884 μs (0.00% GC)\n  maximum time:     3.233 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     10```","user":"UAUPJLBQX","ts":"1615337300.088300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"shF","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function modify!(xs::Vector{MyStruct})\n           @assert sizeof(Int) == sizeof(Float64) && sizeof(MyStruct) == 24\n           xp = Base.unsafe_convert(Ptr{Int}, xs)\n           @inbounds @simd ivdep for i in 0:length(xs)-1\n               xa = unsafe_load(xp + 24i)\n               Base.Cartesian.@nexprs 8 i -> xa = (xa ⊻ -967586086265509696 + 1918587501833626224) ⊻ 4397106132285692209\n               unsafe_store!(xp + 24i, xa + 2)\n           end\n           return xs\n       end\nmodify! (generic function with 1 method)\n\njulia> function modify(xs::Vector{MyStruct})\n           @inbounds @simd for i in 1:length(xs)\n               x = xs[i]\n               xa = x.a\n               Base.Cartesian.@nexprs 8 i -> xa = (xa ⊻ -967586086265509696 + 1918587501833626224) ⊻ 4397106132285692209\n               xs[i] = MyStruct(xa + 2, x.b, x.c)\n           end\n           return xs\n       end\nmodify (generic function with 1 method)\n\njulia> @benchmark modify!($dest)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     1.074 μs (0.00% GC)\n  median time:      1.083 μs (0.00% GC)\n  mean time:        1.088 μs (0.00% GC)\n  maximum time:     3.323 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     10\n\njulia> @benchmark modify($dest)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     1.869 μs (0.00% GC)\n  median time:      1.877 μs (0.00% GC)\n  mean time:        1.884 μs (0.00% GC)\n  maximum time:     3.233 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     10"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"2672c0db-2c97-4eb0-9ff1-6573a42fcfcd","type":"message","text":"SIMD integer multiplication is really slow, so avoid that for the examples. You could convert to float and then do multiplications or fmas, or just do stuff that's actually fast on integers like logic or addition","user":"UAUPJLBQX","ts":"1615337376.088700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nC9JW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"SIMD integer multiplication is really slow, so avoid that for the examples. You could convert to float and then do multiplications or fmas, or just do stuff that's actually fast on integers like logic or addition"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"ed71b7e0-3e6f-472f-b675-ef00494a6d5f","type":"message","text":"thanks for the library tips. Trying out Setfield first, doesn't seem great. Lots of machine code generated, none of it useful simd, and some allocations. takes about 1.8s to run 20k, and generates 9GB of garbage!!","user":"UCNPT22MQ","ts":"1615338081.088900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vCu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thanks for the library tips. Trying out Setfield first, doesn't seem great. Lots of machine code generated, none of it useful simd, and some allocations. takes about 1.8s to run 20k, and generates 9GB of garbage!!"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"91374cec-d48b-4d87-8863-dc6c23400b30","type":"message","text":"```x = xs[i]\nSetfield.@set xs[i].a = x.a + 2```","user":"UCNPT22MQ","ts":"1615338112.089100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Mzokr","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"x = xs[i]\nSetfield.@set xs[i].a = x.a + 2"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"a607bb83-e862-4130-abf4-77350132815d","type":"message","text":"```function modify_blobs!(xs::Vector{MyStruct})\n    @inbounds @simd for i in 1:length(xs)\n        b = Blobs.Blob{MyStruct}(convert(Ptr{Nothing}, pointer(xs, i)), 0, sizeof(MyStruct))\n        b.a[] += 2\n    end\n    return xs\nend```\nBlobs code works nicely - basically identical to the unsafe version (because that's what it does) and generates almost identical vectorised code","user":"UCNPT22MQ","ts":"1615338443.089300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wKULO","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function modify_blobs!(xs::Vector{MyStruct})\n    @inbounds @simd for i in 1:length(xs)\n        b = Blobs.Blob{MyStruct}(convert(Ptr{Nothing}, pointer(xs, i)), 0, sizeof(MyStruct))\n        b.a[] += 2\n    end\n    return xs\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Blobs code works nicely - basically identical to the unsafe version (because that's what it does) and generates almost identical vectorised code"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"20eae20e-eeb0-4eb6-ba68-6b99ce4ca061","type":"message","text":"A little verbose, though","user":"UCNPT22MQ","ts":"1615338461.089500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6bd19","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"A little verbose, though"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"04588166-13fe-4060-9dae-cdeec11e79eb","type":"message","text":"Blobs should really support representing a vector","user":"UAUPJLBQX","ts":"1615338500.089700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LK0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Blobs should really support representing a vector"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"5fff40a4-08e6-443c-9a54-f5b7a5e3144c","type":"message","text":"I've never actually used Setfield myself. Really disapointing that it has performance issues like that.","user":"UAUPJLBQX","ts":"1615338551.089900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Kwl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I've never actually used Setfield myself. Really disapointing that it has performance issues like that."}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"90ff9c26-79b7-48e8-9301-6b7339cb0df9","type":"message","text":"`b = Blobs.Blob(pointer(xs, i))` also works, much lighter","user":"UCNPT22MQ","ts":"1615338616.090100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XUBA6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"b = Blobs.Blob(pointer(xs, i))","style":{"code":true}},{"type":"text","text":" also works, much lighter"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ","reactions":[{"name":"+1","users":["UAUPJLBQX"],"count":1}]},{"client_msg_id":"83a5b1be-f53d-4fa6-b6b1-7704948343c3","type":"message","text":"```function modify_unsafe_nice!(xs::Vector{MyStruct})\n    xs_p = Base.unsafe_convert(Ptr{Int}, xs)\n    @inbounds @simd ivdep for i in 1:length(xs)\n        field_offset = fieldoffsetsym(eltype(xs), Val(:a))\n        x_p = xs_p + sizeof(MyStruct) * i\n\n        xa = unsafe_load(x_p + field_offset)\n        unsafe_store!(x_p + field_offset, xa + 2)\n        # x = xs[i]\n        # unsafe_store!(x_p + field_offset, x.a + 2)\n    end\n    return xs\nend```\nI actually seems to be the load that it doesn't like. The first two lines (uncommented) generate fast simd, but if you swap the comments and remove the ivdep, no simd","user":"UCNPT22MQ","ts":"1615340264.090400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Hny1U","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function modify_unsafe_nice!(xs::Vector{MyStruct})\n    xs_p = Base.unsafe_convert(Ptr{Int}, xs)\n    @inbounds @simd ivdep for i in 1:length(xs)\n        field_offset = fieldoffsetsym(eltype(xs), Val(:a))\n        x_p = xs_p + sizeof(MyStruct) * i\n\n        xa = unsafe_load(x_p + field_offset)\n        unsafe_store!(x_p + field_offset, xa + 2)\n        # x = xs[i]\n        # unsafe_store!(x_p + field_offset, x.a + 2)\n    end\n    return xs\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I actually seems to be the load that it doesn't like. The first two lines (uncommented) generate fast simd, but if you swap the comments and remove the ivdep, no simd"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"85cbe9af-5f47-4e87-b658-dafab6ebfa73","type":"message","text":"if you swap the comments and keep the ivdep, you get simde but 50% slower","user":"UCNPT22MQ","ts":"1615340277.090600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CuImT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you swap the comments and keep the ivdep, you get simde but 50% slower"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"},{"client_msg_id":"ae77ab03-6842-4940-9ee2-47cd4ac841d2","type":"message","text":"(I was trying to write a macro, and realised that the moment I take a safe reference to xs[i], simd goes)","user":"UCNPT22MQ","ts":"1615340329.090800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UwSld","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(I was trying to write a macro, and realised that the moment I take a safe reference to xs[i], simd goes)"}]}]}],"thread_ts":"1615324721.063200","parent_user_id":"UCNPT22MQ"}]