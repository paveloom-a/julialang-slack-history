[{"client_msg_id":"4b474e68-7f48-41d1-af6b-7925b967b931","type":"message","text":"why is multiplying `a * b`  as fast as multiplying `transpose(a)*b` . Shouldn't the latter be much faster in a language with column-major ordering?","user":"U7PD3M3L5","ts":"1613033281.161600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"99G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"why is multiplying "},{"type":"text","text":"a * b","style":{"code":true}},{"type":"text","text":"  as fast as multiplying "},{"type":"text","text":"transpose(a)*b","style":{"code":true}},{"type":"text","text":" . Shouldn't the latter be much faster in a language with column-major ordering?"}]}]}],"thread_ts":"1613033281.161600","reply_count":16,"reply_users_count":3,"latest_reply":"1613040539.167000","reply_users":["UH24GRBLL","U7PD3M3L5","UD0NS8PDF"],"subscribed":false},{"client_msg_id":"60ea393f-e107-464a-9c19-f487f537c44e","type":"message","text":"transpose is lazy","user":"UH24GRBLL","ts":"1613033300.161700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6STD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"transpose is lazy"}]}]}],"thread_ts":"1613033281.161600","parent_user_id":"U7PD3M3L5"},{"client_msg_id":"be27c9e6-a83f-42e2-8f99-b35a6836dfee","type":"message","text":"whether or not a manifested transpose is faster depends on what `a` is. pretty sure it's just a type tag for vectors (so same memory), whereas for matrices it  changes which dimension is iterated over first","user":"UH24GRBLL","ts":"1613033396.161900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"t9i0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"whether or not a manifested transpose is faster depends on what "},{"type":"text","text":"a","style":{"code":true}},{"type":"text","text":" is. pretty sure it's just a type tag for vectors (so same memory), whereas for matrices it  changes which dimension is iterated over first"}]}]}],"thread_ts":"1613033281.161600","parent_user_id":"U7PD3M3L5"},{"client_msg_id":"13eb94a5-bc9d-471e-9b9a-360641f38ab6","type":"message","text":"but transpose(a)*b is a different operation. The memory layout stays the same but now the matrix multiplication runs along columns for both matrices","user":"U7PD3M3L5","ts":"1613033456.162100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GhDl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but transpose(a)*b is a different operation. The memory layout stays the same but now the matrix multiplication runs along columns for both matrices"}]}]}],"thread_ts":"1613033281.161600","parent_user_id":"U7PD3M3L5"},{"client_msg_id":"7645de44-236e-4a43-a8d3-d5a667876352","type":"message","text":"that's why I said it depends on what `a` is. if it's a vector it won't matter","user":"UH24GRBLL","ts":"1613033570.162300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uLi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's why I said it depends on what "},{"type":"text","text":"a","style":{"code":true}},{"type":"text","text":" is. if it's a vector it won't matter"}]}]}],"thread_ts":"1613033281.161600","parent_user_id":"U7PD3M3L5"},{"client_msg_id":"77d0aa7d-c325-4f8c-8bf7-774b21be2cab","type":"message","text":"there's also special cases for transposes that are taken advantage of, if I remember correctly","user":"UH24GRBLL","ts":"1613033590.162500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jGf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there's also special cases for transposes that are taken advantage of, if I remember correctly"}]}]}],"thread_ts":"1613033281.161600","parent_user_id":"U7PD3M3L5"},{"client_msg_id":"f18ab4a6-c931-4b47-a01b-3df504bf0f2b","type":"message","text":"it's not an eager transpose, the matrix is wrapped in a type that does the translation (which may be specialised)","user":"UH24GRBLL","ts":"1613033625.162700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g1Upu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's not an eager transpose, the matrix is wrapped in a type that does the translation (which may be specialised)"}]}]}],"thread_ts":"1613033281.161600","parent_user_id":"U7PD3M3L5"},{"client_msg_id":"d5e910ea-6cd1-4ea7-bdb5-77799386cb1d","type":"message","text":"ah these are both matrices:","user":"U7PD3M3L5","ts":"1613033722.162900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"V5Y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah these are both matrices:"}]}]}],"thread_ts":"1613033281.161600","parent_user_id":"U7PD3M3L5"},{"client_msg_id":"beca3fbd-f3b6-4486-a6c0-5b62b7844b70","type":"message","text":"```a = rand(500, 500)\nb = rand(500, 500)```","user":"U7PD3M3L5","ts":"1613033739.163200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lHp","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"a = rand(500, 500)\nb = rand(500, 500)"}]}]}],"thread_ts":"1613033281.161600","parent_user_id":"U7PD3M3L5"},{"client_msg_id":"ecdd5a57-db24-4ffe-8699-eb5588c7f4c4","type":"message","text":"like this?\n\n```julia&gt; @benchmark a*b setup=(a=rand(500,500),b=rand(500,500))\nBenchmarkTools.Trial:\n  memory estimate:  1.91 MiB\n  allocs estimate:  2\n  --------------\n  minimum time:     4.213 ms (0.00% GC)\n  median time:      4.381 ms (0.00% GC)\n  mean time:        4.497 ms (0.40% GC)\n  maximum time:     9.355 ms (0.00% GC)\n  --------------\n  samples:          867\n  evals/sample:     1\n\njulia&gt; @benchmark transpose(a)*b setup=(a=rand(500,500),b=rand(500,500))\nBenchmarkTools.Trial:\n  memory estimate:  1.91 MiB\n  allocs estimate:  2\n  --------------\n  minimum time:     4.267 ms (0.00% GC)\n  median time:      4.417 ms (0.00% GC)\n  mean time:        4.540 ms (0.42% GC)\n  maximum time:     7.972 ms (0.00% GC)\n  --------------\n  samples:          860\n  evals/sample:     1```","user":"UH24GRBLL","ts":"1613034136.163400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CnjO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"like this?\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @benchmark a*b setup=(a=rand(500,500),b=rand(500,500))\nBenchmarkTools.Trial:\n  memory estimate:  1.91 MiB\n  allocs estimate:  2\n  --------------\n  minimum time:     4.213 ms (0.00% GC)\n  median time:      4.381 ms (0.00% GC)\n  mean time:        4.497 ms (0.40% GC)\n  maximum time:     9.355 ms (0.00% GC)\n  --------------\n  samples:          867\n  evals/sample:     1\n\njulia> @benchmark transpose(a)*b setup=(a=rand(500,500),b=rand(500,500))\nBenchmarkTools.Trial:\n  memory estimate:  1.91 MiB\n  allocs estimate:  2\n  --------------\n  minimum time:     4.267 ms (0.00% GC)\n  median time:      4.417 ms (0.00% GC)\n  mean time:        4.540 ms (0.42% GC)\n  maximum time:     7.972 ms (0.00% GC)\n  --------------\n  samples:          860\n  evals/sample:     1"}]}]}],"thread_ts":"1613033281.161600","parent_user_id":"U7PD3M3L5"},{"client_msg_id":"165a663f-fdde-48b5-be52-ebdb88dae87f","type":"message","text":"the `transpose(a)*b` call ends up here\n\n``` 371  @inline function mul!(C::StridedMatrix{T}, transA::Transpose{&lt;:Any,&lt;:StridedVecOrMat{T}}, B::StridedVecOrMat{T},\n 372                   alpha::Number, beta::Number) where {T&lt;:BlasFloat}\n 373      A = transA.parent\n&gt; 374      if A===B\n 375          return syrk_wrapper!(C, 'T', A, MulAddMul(alpha, beta))\n 376      else\n 377          return gemm_wrapper!(C, 'T', 'N', A, B, MulAddMul(alpha, beta))\n 378      end\n 379  end```","user":"UH24GRBLL","ts":"1613034291.163600","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1613034295.000000"},"blocks":[{"type":"rich_text","block_id":"R+Ti","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the "},{"type":"text","text":"transpose(a)*b","style":{"code":true}},{"type":"text","text":" call ends up here\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":" 371  @inline function mul!(C::StridedMatrix{T}, transA::Transpose{<:Any,<:StridedVecOrMat{T}}, B::StridedVecOrMat{T},\n 372                   alpha::Number, beta::Number) where {T<:BlasFloat}\n 373      A = transA.parent\n> 374      if A===B\n 375          return syrk_wrapper!(C, 'T', A, MulAddMul(alpha, beta))\n 376      else\n 377          return gemm_wrapper!(C, 'T', 'N', A, B, MulAddMul(alpha, beta))\n 378      end\n 379  end"}]}]}],"thread_ts":"1613033281.161600","parent_user_id":"U7PD3M3L5"},{"client_msg_id":"ab9f9035-1101-4835-9d3a-bd53a43db28f","type":"message","text":"this ends up calling out to BLAS, which has special handling for transposes","user":"UH24GRBLL","ts":"1613034443.163900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pCJ9F","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this ends up calling out to BLAS, which has special handling for transposes"}]}]}],"thread_ts":"1613033281.161600","parent_user_id":"U7PD3M3L5"},{"client_msg_id":"5352d7d3-5b76-4cae-846d-e55eae72e0bc","type":"message","text":"yes, but that means that somehow BLAS does not care it seems if I am multiplying to matrices in a wise that respects column ordering or that does not","user":"U7PD3M3L5","ts":"1613036727.164100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yLag","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, but that means that somehow BLAS does not care it seems if I am multiplying to matrices in a wise that respects column ordering or that does not"}]}]}],"thread_ts":"1613033281.161600","parent_user_id":"U7PD3M3L5"},{"client_msg_id":"bc59abb3-6c13-4c11-ab3d-afa1b493ef8a","type":"message","text":"kind of surprises me","user":"U7PD3M3L5","ts":"1613036730.164300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fyot","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"kind of surprises me"}]}]}],"thread_ts":"1613033281.161600","parent_user_id":"U7PD3M3L5"},{"client_msg_id":"74f03f00-6c5e-4e5b-8b99-fa3a9e6d3a3b","type":"message","text":"I'm no BLAS expert, but it may very well be that the matrices are too small to see a big difference","user":"UH24GRBLL","ts":"1613037008.164500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eU5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm no BLAS expert, but it may very well be that the matrices are too small to see a big difference"}]}]}],"thread_ts":"1613033281.161600","parent_user_id":"U7PD3M3L5"},{"client_msg_id":"dacb911e-95e7-4f78-a6f7-f84a7126d2fd","type":"message","text":"I think a naiive algorithm would show big differences here. But BLAS does a lot of clever stuff with memory access, including copying blocks to its own working memory in a layout it prefers, and I think they optimise both of these cases as hard as they can.","user":"UD0NS8PDF","ts":"1613038501.166600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hN8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think a naiive algorithm would show big differences here. But BLAS does a lot of clever stuff with memory access, including copying blocks to its own working memory in a layout it prefers, and I think they optimise both of these cases as hard as they can."}]}]}],"thread_ts":"1613033281.161600","parent_user_id":"U7PD3M3L5"},{"client_msg_id":"8b68b2ab-f606-434c-9be9-e01a26ca17a9","type":"message","text":"ok, I'll just trust the magic then","user":"U7PD3M3L5","ts":"1613040539.167000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DcL9u","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ok, I'll just trust the magic then"}]}]}],"thread_ts":"1613033281.161600","parent_user_id":"U7PD3M3L5"}]