[{"client_msg_id":"dc994942-070f-4568-80c2-9200e38e0767","type":"message","text":"`@avx` is equivalent to something like `@inbounds @simd` if the loop is only 1D, right?","user":"U011V2YN59N","ts":"1616735350.019000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uPi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"@avx","style":{"code":true}},{"type":"text","text":" is equivalent to something like "},{"type":"text","text":"@inbounds @simd","style":{"code":true}},{"type":"text","text":" if the loop is only 1D, right?"}]}]}],"thread_ts":"1616735350.019000","reply_count":17,"reply_users_count":4,"latest_reply":"1616765514.036300","reply_users":["U0179G7FG4F","U011V2YN59N","U013V2CFZAN","UAUPJLBQX"],"is_locked":false,"subscribed":false},{"client_msg_id":"6325a370-f677-4177-9819-39f4f89addfd","type":"message","text":"No. It also does unrolling and manual vectorization instructions","user":"U0179G7FG4F","ts":"1616735756.019700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"U/TN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No. It also does unrolling and manual vectorization instructions"}]}]}],"thread_ts":"1616735350.019000","parent_user_id":"U011V2YN59N"},{"client_msg_id":"1272fc28-f4b0-4b12-bf2c-c50ee8056e4d","type":"message","text":"also, it has special vectorized forms of special functions (trig, exponentials, etc)  that can be much more efficient","user":"U0179G7FG4F","ts":"1616735951.019900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Z533A","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"also, it has special vectorized forms of special functions (trig, exponentials, etc)  that can be much more efficient"}]}]}],"thread_ts":"1616735350.019000","parent_user_id":"U011V2YN59N"},{"client_msg_id":"9011e527-f1c4-45af-aa2a-41fdf974cb42","type":"message","text":"Huh, cool. Thanks!","user":"U011V2YN59N","ts":"1616737067.020100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NVFP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Huh, cool. Thanks!"}]}]}],"thread_ts":"1616735350.019000","parent_user_id":"U011V2YN59N"},{"client_msg_id":"1b4ac598-1607-4855-bb87-3b3be3a89af7","type":"message","text":"hmmm ... can it be used to speed up an `erf` ? :thinking_face:","user":"U013V2CFZAN","ts":"1616753264.029200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"z/Ke3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmmm ... can it be used to speed up an "},{"type":"text","text":"erf","style":{"code":true}},{"type":"text","text":" ? "},{"type":"emoji","name":"thinking_face"}]}]}],"thread_ts":"1616735350.019000","parent_user_id":"U011V2YN59N"},{"client_msg_id":"c9a9cadf-7e4c-45b1-8e7b-8cc4393821fe","type":"message","text":"```julia&gt; using LoopVectorization, VectorizationBase, SpecialFunctions\n\njulia&gt; x = randn(1024); y1 = similar(x); y2 = similar(x);\n\njulia&gt; @benchmark @. $y1 = erf($x)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     11.015 μs (0.00% GC)\n  median time:      11.082 μs (0.00% GC)\n  mean time:        11.104 μs (0.00% GC)\n  maximum time:     27.353 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1\n\njulia&gt; @benchmark @avx @. $y2 = VectorizationBase.verf($x)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     1.919 μs (0.00% GC)\n  median time:      1.925 μs (0.00% GC)\n  mean time:        1.928 μs (0.00% GC)\n  maximum time:     3.527 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     10\n\njulia&gt; y1 ≈ y2\ntrue```\nI should add accuracy tests for erf.","user":"UAUPJLBQX","ts":"1616757205.033700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"36B","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using LoopVectorization, VectorizationBase, SpecialFunctions\n\njulia> x = randn(1024); y1 = similar(x); y2 = similar(x);\n\njulia> @benchmark @. $y1 = erf($x)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     11.015 μs (0.00% GC)\n  median time:      11.082 μs (0.00% GC)\n  mean time:        11.104 μs (0.00% GC)\n  maximum time:     27.353 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1\n\njulia> @benchmark @avx @. $y2 = VectorizationBase.verf($x)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     1.919 μs (0.00% GC)\n  median time:      1.925 μs (0.00% GC)\n  mean time:        1.928 μs (0.00% GC)\n  maximum time:     3.527 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     10\n\njulia> y1 ≈ y2\ntrue"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I should add accuracy tests for erf."}]}]}],"thread_ts":"1616735350.019000","parent_user_id":"U011V2YN59N"},{"client_msg_id":"3c940362-dd59-41f9-95b9-76706f480a07","type":"message","text":"This was with AVX512. With AVX(2), the speed up would probably be about half this.","user":"UAUPJLBQX","ts":"1616757225.033900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2Ax","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This was with AVX512. With AVX(2), the speed up would probably be about half this."}]}]}],"thread_ts":"1616735350.019000","parent_user_id":"U011V2YN59N"},{"client_msg_id":"fcb15317-5bcb-4ae7-9f84-98cbfecc7e19","type":"message","text":"With AVX512, it should also be faster at handling non-vectorized remainders, e.g. benchmark on a dot product on 1024 vectors, one each of length 1,...,1024 in a random order:\n```julia&gt; function dotavx(a, b)\n           s = zero(eltype(a))\n           @avx for i ∈ eachindex(a)\n               s += a[i]*b[i]\n           end\n           s\n       end\ndotavx (generic function with 1 method)\n\njulia&gt; function dotsimd(a, b)\n           s = zero(eltype(a))\n           @inbounds @simd for i ∈ eachindex(a)\n               s += a[i]*b[i]\n           end\n           s\n       end\ndotsimd (generic function with 1 method)\n\njulia&gt; using Random\n\njulia&gt; x = randn(1024); y = randn(1024); Ns = shuffle(axes(x,1));\n\njulia&gt; @benchmark foreach(n -&gt; dotavx(view($x,1:n),view($y,1:n)), $Ns)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     34.579 μs (0.00% GC)\n  median time:      34.975 μs (0.00% GC)\n  mean time:        35.033 μs (0.00% GC)\n  maximum time:     55.155 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1\n\njulia&gt; @benchmark foreach(n -&gt; dotsimd(view($x,1:n),view($y,1:n)), $Ns)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     40.854 μs (0.00% GC)\n  median time:      40.937 μs (0.00% GC)\n  mean time:        40.992 μs (0.00% GC)\n  maximum time:     58.113 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1```","user":"UAUPJLBQX","ts":"1616757442.034100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EaK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"With AVX512, it should also be faster at handling non-vectorized remainders, e.g. benchmark on a dot product on 1024 vectors, one each of length 1,...,1024 in a random order:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function dotavx(a, b)\n           s = zero(eltype(a))\n           @avx for i ∈ eachindex(a)\n               s += a[i]*b[i]\n           end\n           s\n       end\ndotavx (generic function with 1 method)\n\njulia> function dotsimd(a, b)\n           s = zero(eltype(a))\n           @inbounds @simd for i ∈ eachindex(a)\n               s += a[i]*b[i]\n           end\n           s\n       end\ndotsimd (generic function with 1 method)\n\njulia> using Random\n\njulia> x = randn(1024); y = randn(1024); Ns = shuffle(axes(x,1));\n\njulia> @benchmark foreach(n -> dotavx(view($x,1:n),view($y,1:n)), $Ns)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     34.579 μs (0.00% GC)\n  median time:      34.975 μs (0.00% GC)\n  mean time:        35.033 μs (0.00% GC)\n  maximum time:     55.155 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1\n\njulia> @benchmark foreach(n -> dotsimd(view($x,1:n),view($y,1:n)), $Ns)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     40.854 μs (0.00% GC)\n  median time:      40.937 μs (0.00% GC)\n  mean time:        40.992 μs (0.00% GC)\n  maximum time:     58.113 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1"}]}]}],"thread_ts":"1616735350.019000","parent_user_id":"U011V2YN59N"},{"client_msg_id":"4ae154fb-6501-462f-8c96-d871b574f87e","type":"message","text":"There also some other differences. Aside from special functions, it can vectorize reductions with `max` and `min`","user":"UAUPJLBQX","ts":"1616757659.034300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZABq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There also some other differences. Aside from special functions, it can vectorize reductions with "},{"type":"text","text":"max","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"min","style":{"code":true}}]}]}],"thread_ts":"1616735350.019000","parent_user_id":"U011V2YN59N"},{"client_msg_id":"dbb51fae-bccb-4bc3-acb5-33bfb0f2f7f3","type":"message","text":"```julia&gt; function maxsimd(x)\n           s = -Inf\n           @inbounds @simd for i ∈ eachindex(x)\n               s = max(s,x[i])\n           end\n           s\n       end\nmaxsimd (generic function with 1 method)\n\njulia&gt; function maxavx(x)\n           s = -Inf\n           @avx for i ∈ eachindex(x)\n               s = max(s,x[i])\n           end\n           s\n       end\nmaxavx (generic function with 1 method)\n\njulia&gt; @btime maximum($x)\n  936.966 ns (0 allocations: 0 bytes)\n2.841877611066272\n\njulia&gt; @btime maxsimd($x)\n  2.568 μs (0 allocations: 0 bytes)\n2.841877611066272\n\njulia&gt; @btime maxavx($x)\n  31.907 ns (0 allocations: 0 bytes)\n2.841877611066272```\n","user":"UAUPJLBQX","ts":"1616757734.034500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DvEI","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function maxsimd(x)\n           s = -Inf\n           @inbounds @simd for i ∈ eachindex(x)\n               s = max(s,x[i])\n           end\n           s\n       end\nmaxsimd (generic function with 1 method)\n\njulia> function maxavx(x)\n           s = -Inf\n           @avx for i ∈ eachindex(x)\n               s = max(s,x[i])\n           end\n           s\n       end\nmaxavx (generic function with 1 method)\n\njulia> @btime maximum($x)\n  936.966 ns (0 allocations: 0 bytes)\n2.841877611066272\n\njulia> @btime maxsimd($x)\n  2.568 μs (0 allocations: 0 bytes)\n2.841877611066272\n\njulia> @btime maxavx($x)\n  31.907 ns (0 allocations: 0 bytes)\n2.841877611066272"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1616735350.019000","parent_user_id":"U011V2YN59N"},{"client_msg_id":"1206ed54-9a4a-4bff-95ec-a06ac2507c6f","type":"message","text":"That's 80x faster than `@inbounds @simd`","user":"UAUPJLBQX","ts":"1616757784.034700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L+Z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's 80x faster than "},{"type":"text","text":"@inbounds @simd","style":{"code":true}}]}]}],"thread_ts":"1616735350.019000","parent_user_id":"U011V2YN59N"},{"client_msg_id":"42c89c45-fd77-46e3-a414-b1a71e2c9adf","type":"message","text":"GREAT!! Thanks!","user":"U013V2CFZAN","ts":"1616761138.034900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c49Fy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"GREAT!! Thanks!"}]}]}],"thread_ts":"1616735350.019000","parent_user_id":"U011V2YN59N"},{"client_msg_id":"d07914d4-6e0f-4c04-8127-6ba39e61b8b4","type":"message","text":"Hmmm ... there is something \"fishy\" or misleading here\n```julia&gt; x = randn(1024); y1 = similar(x); y2 = similar(x); y3 = similar(x);\n\njulia&gt; using PyCall\n\njulia&gt; sp = pyimport(\"scipy.special\")\nPyObject &lt;module 'scipy.special' from '/home/el_oso/miniconda3/lib/python3.7/site-packages/scipy/special/__init__.py'&gt;\n\njulia&gt; @benchmark @. $y1 = erf($x)\nBenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     10.261 μs (0.00% GC)\n  median time:      10.411 μs (0.00% GC)\n  mean time:        10.439 μs (0.00% GC)\n  maximum time:     102.098 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1\n\njulia&gt; @benchmark @avx @. $y2 = VectorizationBase.verf($x)\nBenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     3.043 μs (0.00% GC)\n  median time:      3.085 μs (0.00% GC)\n  mean time:        3.093 μs (0.00% GC)\n  maximum time:     4.617 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     8\n\njulia&gt; @benchmark $y3 = sp.erf($x)\nBenchmarkTools.Trial: \n  memory estimate:  9.73 KiB\n  allocs estimate:  31\n  --------------\n  minimum time:     15.811 μs (0.00% GC)\n  median time:      16.521 μs (0.00% GC)\n  mean time:        16.956 μs (0.00% GC)\n  maximum time:     388.991 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1```\nI was curious whether there was some overhead by using `PyCall`, so I tested like this\n```In [13]: x = np.random.rand(1024)\n\nIn [14]: %timeit -r 100 sp.erf(x)\n3.68 µs ± 62.7 ns per loop (mean ± std. dev. of 100 runs, 100000 loops each)```","user":"U013V2CFZAN","ts":"1616764116.035200","team":"T68168MUP","edited":{"user":"U013V2CFZAN","ts":"1616764659.000000"},"blocks":[{"type":"rich_text","block_id":"NhPA7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmmm ... there is something \"fishy\" or misleading here\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> x = randn(1024); y1 = similar(x); y2 = similar(x); y3 = similar(x);\n\njulia> using PyCall\n\njulia> sp = pyimport(\"scipy.special\")\nPyObject <module 'scipy.special' from '/home/el_oso/miniconda3/lib/python3.7/site-packages/scipy/special/__init__.py'>\n\njulia> @benchmark @. $y1 = erf($x)\nBenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     10.261 μs (0.00% GC)\n  median time:      10.411 μs (0.00% GC)\n  mean time:        10.439 μs (0.00% GC)\n  maximum time:     102.098 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1\n\njulia> @benchmark @avx @. $y2 = VectorizationBase.verf($x)\nBenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     3.043 μs (0.00% GC)\n  median time:      3.085 μs (0.00% GC)\n  mean time:        3.093 μs (0.00% GC)\n  maximum time:     4.617 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     8\n\njulia> @benchmark $y3 = sp.erf($x)\nBenchmarkTools.Trial: \n  memory estimate:  9.73 KiB\n  allocs estimate:  31\n  --------------\n  minimum time:     15.811 μs (0.00% GC)\n  median time:      16.521 μs (0.00% GC)\n  mean time:        16.956 μs (0.00% GC)\n  maximum time:     388.991 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I was curious whether there was some overhead by using "},{"type":"text","text":"PyCall","style":{"code":true}},{"type":"text","text":", so I tested like this\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"In [13]: x = np.random.rand(1024)\n\nIn [14]: %timeit -r 100 sp.erf(x)\n3.68 µs ± 62.7 ns per loop (mean ± std. dev. of 100 runs, 100000 loops each)"}]}]}],"thread_ts":"1616735350.019000","parent_user_id":"U011V2YN59N"},{"client_msg_id":"09c0d43d-0613-40ee-9da2-aac354ea821b","type":"message","text":"python version ... from python seems slightly slower than the `VectorizationBase` but way faster than `SpecialFunctions.jl`","user":"U013V2CFZAN","ts":"1616764193.035400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1uD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"python version ... from python seems slightly slower than the "},{"type":"text","text":"VectorizationBase","style":{"code":true}},{"type":"text","text":" but way faster than "},{"type":"text","text":"SpecialFunctions.jl","style":{"code":true}}]}]}],"thread_ts":"1616735350.019000","parent_user_id":"U011V2YN59N"},{"client_msg_id":"faab49df-c2be-4233-ba82-1c84f969c16e","type":"message","text":"Does numpy have a lot of SIMD special function implementations?","user":"UAUPJLBQX","ts":"1616765239.035700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SJd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does numpy have a lot of SIMD special function implementations?"}]}]}],"thread_ts":"1616735350.019000","parent_user_id":"U011V2YN59N"},{"client_msg_id":"7b32a12a-8a18-4ed9-a269-f0f32ef18342","type":"message","text":"(I assume it's using SIMD? Not that familiar with numpy)","user":"UAUPJLBQX","ts":"1616765277.035900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"egPc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(I assume it's using SIMD? Not that familiar with numpy)"}]}]}],"thread_ts":"1616735350.019000","parent_user_id":"U011V2YN59N"},{"client_msg_id":"ad63be23-e932-49ab-8be7-f063c45eaa1b","type":"message","text":"For all I know, that could also vary from one distribution to another.","user":"UAUPJLBQX","ts":"1616765305.036100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6eUis","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For all I know, that could also vary from one distribution to another."}]}]}],"thread_ts":"1616735350.019000","parent_user_id":"U011V2YN59N"},{"client_msg_id":"eaf57089-2120-4c55-9bb2-67296cbd6843","type":"message","text":"svml has simd erf.","user":"UAUPJLBQX","ts":"1616765514.036300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g8g7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"svml has simd erf."}]}]}],"thread_ts":"1616735350.019000","parent_user_id":"U011V2YN59N"}]