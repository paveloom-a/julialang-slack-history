[{"client_msg_id":"90b8a123-7e58-4953-beff-e9f35ea3c0b3","type":"message","text":"So I currently am having a mini-contest between a co-worker of mine about performance.\n\nHe claims that Java is one of the fastest languages for his toy-problem.\n\nI wrote a Julia version but my code currently runs at &lt;2x the speed of his Java code.\n\nCan anyone suggest to me some ways to increase my performance? Also feel free to give any un-solicited advice about my coding style :slightly_smiling_face:\nNote this has to all follow the same structure (e.g. single threaded, must use recursion)\n\nThe toy problem is just <https://en.wikipedia.org/wiki/Peg_solitaire|peg solitaire> but on a triangular board. It involves lots and lots of array append and lots of recursion.\n\n<https://github.com/ayman-albaz/peg-performance/blob/master/src/main/julia/performance.jl>","user":"U01FAHWCMFF","ts":"1611856909.043900","team":"T68168MUP","edited":{"user":"U01FAHWCMFF","ts":"1611856973.000000"},"attachments":[{"image_url":"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0b/Peg_Solitaire_1687_on_Portrait_of_Princess_Soubise_by_Claude-Auguste_Berey.jpg/1200px-Peg_Solitaire_1687_on_Portrait_of_Princess_Soubise_by_Claude-Auguste_Berey.jpg","image_width":1200,"image_height":1626,"image_bytes":797938,"title":"Peg solitaire","title_link":"https://en.wikipedia.org/wiki/Peg_solitaire","from_url":"https://en.wikipedia.org/wiki/Peg_solitaire","author_name":"Wikipedia","author_link":"https://en.wikipedia.org/","text":"Peg solitaire (or Solo Noble) is a board game for one player involving movement of pegs on a board with holes.  Some sets use marbles in a board with indentations. The game is known simply as Solitaire in the United Kingdom where the card games are called Patience.  It is also referred to as Brainvita (mainly in India, where sets are sold commercially under this name).\nThe first evidence of the game can be traced back to the court of Louis XIV, and the specific date of 1697, with an engraving made ten years later by Claude Auguste Berey of Anne de Rohan-Chabot, Princess of Soubise, with the puzzle by her side.  The August 1687 edition of the French literary magazine Mercure galant contains a description of the board, rules and sample problems.  This is the first known reference to the game in print.\nThe standard game fills the entire board with pegs except for the central hole. The objective is, making valid moves, to empty the entire board except for a solitary peg in the central hole.","fallback":"wikipedia: Peg solitaire","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png","id":1,"original_url":"https://en.wikipedia.org/wiki/Peg_solitaire"}],"blocks":[{"type":"rich_text","block_id":"SkErK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So I currently am having a mini-contest between a co-worker of mine about performance.\n\nHe claims that Java is one of the fastest languages for his toy-problem.\n\nI wrote a Julia version but my code currently runs at <2x the speed of his Java code.\n\nCan anyone suggest to me some ways to increase my performance? Also feel free to give any un-solicited advice about my coding style "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":"\nNote this has to all follow the same structure (e.g. single threaded, must use recursion)\n\nThe toy problem is just "},{"type":"link","url":"https://en.wikipedia.org/wiki/Peg_solitaire","text":"peg solitaire"},{"type":"text","text":" but on a triangular board. It involves lots and lots of array append and lots of recursion.\n\n"},{"type":"link","url":"https://github.com/ayman-albaz/peg-performance/blob/master/src/main/julia/performance.jl"}]}]}],"thread_ts":"1611856909.043900","reply_count":103,"reply_users_count":5,"latest_reply":"1612029601.079000","reply_users":["U01GMP3HF9C","U01FAHWCMFF","USU9FRPEU","UH24GRBLL","U01H36BUDJB"],"subscribed":false},{"client_msg_id":"beb14977-a3b4-499f-9d7d-c0ca4f65c863","type":"message","text":"Have you tried profiling the code to see what takes time?","user":"U01GMP3HF9C","ts":"1611857859.047600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EnvO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Have you tried profiling the code to see what takes time?"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"85b57ae2-7ec3-40ce-8628-d1e7390ca685","type":"message","text":"Yes! The three things that take the longest time are\n• Recursion \n• Finding the next new points.\nI'm not a fan of recursion myself so i didn't try to optimize that\nI tried optimizing finding the next new points but I exhausted all my performance advantage methods (such as declaring the types, inbounds)\n\nI'm wondering if it has something to do with Julia running using Int64s and Java running using Int32s","user":"U01FAHWCMFF","ts":"1611858024.047800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Mo8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes! The three things that take the longest time are\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Recursion "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Finding the next new points."}]}],"style":"bullet","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"\nI'm not a fan of recursion myself so i didn't try to optimize that\nI tried optimizing finding the next new points but I exhausted all my performance advantage methods (such as declaring the types, inbounds)\n\nI'm wondering if it has something to do with Julia running using Int64s and Java running using Int32s"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"bae46a93-34ed-41f9-ba5a-bbbba4de788a","type":"message","text":"Have you tried iterating through the next few moves in a loop rather than storing them in a temporary array?","user":"U01GMP3HF9C","ts":"1611860783.048000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KKjG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Have you tried iterating through the next few moves in a loop rather than storing them in a temporary array?"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"b9cb6165-d336-4d0d-8e63-e619ac30a24d","type":"message","text":"Also, instinctively I would have stored the game state as a matrix of booleans, is there maybe a specific reason why you didn’t?","user":"U01GMP3HF9C","ts":"1611860926.048200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Bjma","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, instinctively I would have stored the game state as a matrix of booleans, is there maybe a specific reason why you didn’t?"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"161936dc-518a-48e1-98cc-eab172ae882a","type":"message","text":"we are not comparing algorithm efficiency, but rather, using the same code structure as the java source code, can Julia outperform Java.\n\nAs you can this the repo has different languages and benchmark files. The idea is to see which language is the fastest on this toy problem using the specific way of solving the problem.","user":"U01FAHWCMFF","ts":"1611862749.048400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TGbF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we are not comparing algorithm efficiency, but rather, using the same code structure as the java source code, can Julia outperform Java.\n\nAs you can this the repo has different languages and benchmark files. The idea is to see which language is the fastest on this toy problem using the specific way of solving the problem."}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"91d29d7b-d68c-4962-ab8b-3ba9d593a6ff","type":"message","text":"Consider benchmarking with `@btime` from BenchmarkTools","user":"USU9FRPEU","ts":"1611871496.049400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+Xs=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Consider benchmarking with "},{"type":"text","text":"@btime","style":{"code":true}},{"type":"text","text":" from BenchmarkTools"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"488be3c9-bd8e-4bf1-a422-a11b942f5e2c","type":"message","text":"What data structure for the `moves` array is your friend using? It might be a good idea to preallocate some capacity there.","user":"USU9FRPEU","ts":"1611871892.049600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CCCYW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What data structure for the "},{"type":"text","text":"moves","style":{"code":true}},{"type":"text","text":" array is your friend using? It might be a good idea to preallocate some capacity there."}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"470300b7-685f-48c7-a17a-aeff9213589a","type":"message","text":"You may want to considering using something from <https://juliacollections.github.io/DataStructures.jl/latest/> there","user":"USU9FRPEU","ts":"1611872006.049800","team":"T68168MUP","edited":{"user":"USU9FRPEU","ts":"1611872040.000000"},"blocks":[{"type":"rich_text","block_id":"K/r","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You may want to considering using something from "},{"type":"link","url":"https://juliacollections.github.io/DataStructures.jl/latest/"},{"type":"text","text":" there"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"cdb23f43-4c8a-460c-ab66-75f4f49931a9","type":"message","text":"Here is the java code for the Moves class\n<https://github.com/ayman-albaz/peg-performance/blob/master/src/main/java/ca/tjug/talks/performance/Move.java>\n\nJust note that the idea behind this isn't to out-optimize the function using different algos/structures.\n\nBut rather we're trying to create 1 to 1 recreations of codes  across different languages to see which code performs fastest for that particular toy problem.","user":"U01FAHWCMFF","ts":"1611872465.050100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LfFXg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Here is the java code for the Moves class\n"},{"type":"link","url":"https://github.com/ayman-albaz/peg-performance/blob/master/src/main/java/ca/tjug/talks/performance/Move.java"},{"type":"text","text":"\n\nJust note that the idea behind this isn't to out-optimize the function using different algos/structures.\n\nBut rather we're trying to create 1 to 1 recreations of codes  across different languages to see which code performs fastest for that particular toy problem."}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"da7ecdb7-4953-43f1-9ab3-82b493ec01a2","type":"message","text":"Yea, it looks like they are using `java.util.ArrayList`. You may want to consider using `sizehint!` to provide some initial capacity","user":"USU9FRPEU","ts":"1611872936.050300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PIMx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yea, it looks like they are using "},{"type":"text","text":"java.util.ArrayList","style":{"code":true}},{"type":"text","text":". You may want to consider using "},{"type":"text","text":"sizehint!","style":{"code":true}},{"type":"text","text":" to provide some initial capacity"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"c2e088c2-4718-467d-b7a6-57ae2ee23557","type":"message","text":"Oh, I see there discussion outside of this thread","user":"USU9FRPEU","ts":"1611872988.050500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HFov1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh, I see there discussion outside of this thread"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"d998bd9d-3f80-4dcb-a032-e66d9029c9f5","type":"message","text":"Thanks for the tip. I will try sizehint tonight","user":"U01FAHWCMFF","ts":"1611874441.050700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9UQg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks for the tip. I will try sizehint tonight"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"05e9eb01-0da8-435f-b733-8c8dabe3e70f","type":"message","text":"Tried sizehints they only see to get me from 0.450ms to 0.410ms. Java runs at 0.270","user":"U01FAHWCMFF","ts":"1611875947.051500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"47A","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Tried sizehints they only see to get me from 0.450ms to 0.410ms. Java runs at 0.270"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"32c087df-e307-4c12-810c-23a612d30673","type":"message","text":"the sizehint would not make a difference, as far as I can tell the game states are fairly small","user":"UH24GRBLL","ts":"1611909729.055700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W3q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the sizehint would not make a difference, as far as I can tell the game states are fairly small"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"e5ae8742-4ff4-48dc-93bc-6d1f10ebd46c","type":"message","text":"however - why is the gamestate a `mutable struct`? as far as I can tell, the fields themselves are never reassigned, only their _contents_ are.","user":"UH24GRBLL","ts":"1611909757.055900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3tgsW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"however - why is the gamestate a "},{"type":"text","text":"mutable struct","style":{"code":true}},{"type":"text","text":"? as far as I can tell, the fields themselves are never reassigned, only their "},{"type":"text","text":"contents","style":{"italic":true}},{"type":"text","text":" are."}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"1c3d286d-1ca3-409f-ae00-37918929550c","type":"message","text":"basically the same goes for `GameCounter` - writing it as a regular `struct` with `increment(gc::GameCounter, move_stack) = GameCounter(gc.games_played + 1, append!(gc.games_solution, move_stack))` works just the same and allows the actual struct to live on the stack","user":"UH24GRBLL","ts":"1611909932.056100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lmZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"basically the same goes for "},{"type":"text","text":"GameCounter","style":{"code":true}},{"type":"text","text":" - writing it as a regular "},{"type":"text","text":"struct","style":{"code":true}},{"type":"text","text":" with "},{"type":"text","text":"increment(gc::GameCounter, move_stack) = GameCounter(gc.games_played + 1, append!(gc.games_solution, move_stack))","style":{"code":true}},{"type":"text","text":" works just the same and allows the actual struct to live on the stack"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"0d75bbcd-8c15-4960-8223-9700c6d916ab","type":"message","text":"you'll also need `increment(gc::GameCounter) = GameCounter(gc.games_played + 1, gc.move_stack)` for the `length == 0` case","user":"UH24GRBLL","ts":"1611909983.056300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eMq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you'll also need "},{"type":"text","text":"increment(gc::GameCounter) = GameCounter(gc.games_played + 1, gc.move_stack)","style":{"code":true}},{"type":"text","text":" for the "},{"type":"text","text":"length == 0","style":{"code":true}},{"type":"text","text":" case"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"fa2216a0-ca22-4408-bcd2-cf066d0e7141","type":"message","text":"I also suspect that most of the difference can be found in how much is allocated in the julia code - the JVM is very good at juggling gazillions of tiny allocations because that's what it's been doing for about 20 years. Julia-style just prefers not to allocate at all, though this could be improved.","user":"UH24GRBLL","ts":"1611910174.056500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Zs9cl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I also suspect that most of the difference can be found in how much is allocated in the julia code - the JVM is very good at juggling gazillions of tiny allocations because that's what it's been doing for about 20 years. Julia-style just prefers not to allocate at all, though this could be improved."}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF","reactions":[{"name":"+1","users":["U01H36BUDJB"],"count":1}]},{"client_msg_id":"9ad866b2-c778-4ea8-b52d-465595352a3a","type":"message","text":"one way to validate that hypothesis is to check either `@allocated` or `@benchmark` (from BenchmarkTools)","user":"UH24GRBLL","ts":"1611910209.056700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3MXub","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"one way to validate that hypothesis is to check either "},{"type":"text","text":"@allocated","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"@benchmark","style":{"code":true}},{"type":"text","text":" (from BenchmarkTools)"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"4aa5e481-8261-4626-b1a3-9b16c3857a64","type":"message","text":"further, the `init!` for the `GameState` is totally unnecessary - there are regular inner constructors in julia too <https://docs.julialang.org/en/v1/manual/constructors/#man-inner-constructor-methods>","user":"UH24GRBLL","ts":"1611910343.056900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mTvsh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"further, the "},{"type":"text","text":"init!","style":{"code":true}},{"type":"text","text":" for the "},{"type":"text","text":"GameState","style":{"code":true}},{"type":"text","text":" is totally unnecessary - there are regular inner constructors in julia too "},{"type":"link","url":"https://docs.julialang.org/en/v1/manual/constructors/#man-inner-constructor-methods"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"fc71e4e9-4dfa-4a30-a690-1138497609f1","type":"message","text":"Yeah I'm not sure it's an apt comparison. The two languages are built for completely different use cases. Java is going to be better at handling allocation happy programs because that's what it was designed to do, and quite frankly, it's really good at it.","user":"U01H36BUDJB","ts":"1611911554.057200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OJjw3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah I'm not sure it's an apt comparison. The two languages are built for completely different use cases. Java is going to be better at handling allocation happy programs because that's what it was designed to do, and quite frankly, it's really good at it."}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"0d2477bb-3b4f-4459-b14a-f839b1171520","type":"message","text":"yes, but even the way it's done right now I'm not 100% sure GC is the problem already since there are some other things that don't change the core algorithm but could be done. Hard to know without measurements.","user":"UH24GRBLL","ts":"1611911851.060200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kMU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, but even the way it's done right now I'm not 100% sure GC is the problem already since there are some other things that don't change the core algorithm but could be done. Hard to know without measurements."}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"d7d8488c-c631-4e36-af22-0c04e71c3c7c","type":"message","text":"the julia native array is also already doing memory doubling, just like java's ArrayList, so it shouldn't matter too much","user":"UH24GRBLL","ts":"1611911901.060800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dpXU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the julia native array is also already doing memory doubling, just like java's ArrayList, so it shouldn't matter too much"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"70f8717f-2198-4442-83d3-72aff318f592","type":"message","text":"```    new_gs.occupied_holes = new_gs.occupied_holes[new_gs.occupied_holes .!= [move.fromh]]\n    new_gs.occupied_holes = new_gs.occupied_holes[new_gs.occupied_holes .!= [move.jumped]]```\nI think this is problematic. Slicing performs a copy/allocation and then the assignment isn't broadcasted, so it's reallocating the entire vector each time. Maybe change this to:\n```    new_gs.occupied_holes .= @view new_gs.occupied_holes[new_gs.occupied_holes .!= [move.fromh]]\n    new_gs.occupied_holes .= @view new_gs.occupied_holes[new_gs.occupied_holes .!= [move.jumped]]```","user":"U01H36BUDJB","ts":"1611912446.061000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eHuV","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"    new_gs.occupied_holes = new_gs.occupied_holes[new_gs.occupied_holes .!= [move.fromh]]\n    new_gs.occupied_holes = new_gs.occupied_holes[new_gs.occupied_holes .!= [move.jumped]]"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I think this is problematic. Slicing performs a copy/allocation and then the assignment isn't broadcasted, so it's reallocating the entire vector each time. Maybe change this to:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"    new_gs.occupied_holes .= @view new_gs.occupied_holes[new_gs.occupied_holes .!= [move.fromh]]\n    new_gs.occupied_holes .= @view new_gs.occupied_holes[new_gs.occupied_holes .!= [move.jumped]]"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"1ff4eb9a-5e54-40f3-baf6-2e61f18cf787","type":"message","text":"Would also help to pre-allocate the array for the boolean indexer.","user":"U01H36BUDJB","ts":"1611912533.061200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HFav4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Would also help to pre-allocate the array for the boolean indexer."}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"147afc7a-bc58-44c4-b483-c8646c667da6","type":"message","text":"I think the number of occupied holes can change with moves","user":"UH24GRBLL","ts":"1611912909.061400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VWfJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think the number of occupied holes can change with moves"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"dc11cc11-c5ea-4cfe-8cc8-877bd21f2cfc","type":"message","text":"but I haven't looked to far into this","user":"UH24GRBLL","ts":"1611912918.061600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8vDi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but I haven't looked to far into this"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"0ecac30c-b1ce-41ce-a3bb-36397aa6b3db","type":"message","text":"what you _could_ do is allocate a big vector, and `sizehint!` ing it down. that keeps the allocation, but \"makes\" the vector smaller","user":"UH24GRBLL","ts":"1611912967.061800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mkgm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what you "},{"type":"text","text":"could","style":{"italic":true}},{"type":"text","text":" do is allocate a big vector, and "},{"type":"text","text":"sizehint!","style":{"code":true}},{"type":"text","text":" ing it down. that keeps the allocation, but \"makes\" the vector smaller"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"8e87f2af-9c25-433c-9fa7-ce2ef51b0e00","type":"message","text":"and then broadcast","user":"UH24GRBLL","ts":"1611912977.062000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0EO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and then broadcast"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"4609b811-d104-4d4c-ae25-00b4d61a3105","type":"message","text":"yeah, you're right, it breaks it. hmm.","user":"U01H36BUDJB","ts":"1611913322.062200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Fuo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, you're right, it breaks it. hmm."}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"bb3fe2e1-959b-4914-b4c7-d2456ae1d2b9","type":"message","text":"you can avoid the intermediate though","user":"UH24GRBLL","ts":"1611913395.062400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Lstpw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can avoid the intermediate though"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"84b7dab9-25e6-4693-923e-cd3cfecc7881","type":"message","text":"yeah rewriting that as one line with `&amp;` brings it down to ~370ms for me, i.e.\n```new_gs.occupied_holes = new_gs.occupied_holes[new_gs.occupied_holes .!= [move.fromh] .&amp; new_gs.occupied_holes .!= [move.jumped]]```\nBut I still think it's better to find a way to not reallocate it every time.","user":"U01H36BUDJB","ts":"1611913824.062600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1ymCD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah rewriting that as one line with "},{"type":"text","text":"&","style":{"code":true}},{"type":"text","text":" brings it down to ~370ms for me, i.e.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"new_gs.occupied_holes = new_gs.occupied_holes[new_gs.occupied_holes .!= [move.fromh] .& new_gs.occupied_holes .!= [move.jumped]]"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"But I still think it's better to find a way to not reallocate it every time."}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"bc75b1a8-222d-4513-8479-06fbda225874","type":"message","text":"you should be able to .= now though","user":"UH24GRBLL","ts":"1611913953.062800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IuoC5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you should be able to .= now though"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"cc0cc71a-6527-43c4-9c9e-831c325dab5a","type":"message","text":"but that still will allocate the intermediate for selecting the indices in the first place","user":"UH24GRBLL","ts":"1611913976.063000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Hnoi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but that still will allocate the intermediate for selecting the indices in the first place"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"dce8ddcc-01bf-4549-80ca-5519e4d0c8e5","type":"message","text":"just writing the loop here explicitly will be plenty","user":"UH24GRBLL","ts":"1611913999.063200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4GOhI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"just writing the loop here explicitly will be plenty"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF","reactions":[{"name":"+1","users":["U01H36BUDJB"],"count":1}]},{"client_msg_id":"965d1ea5-fadc-45a1-a8c3-b698c683ea60","type":"message","text":"No, I don't think you can `.=` because the sizes don't match. You would have to index the LHS as well, but that breaks the program logic.","user":"U01H36BUDJB","ts":"1611914144.063500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZWRe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No, I don't think you can "},{"type":"text","text":".=","style":{"code":true}},{"type":"text","text":" because the sizes don't match. You would have to index the LHS as well, but that breaks the program logic."}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"5b4f8d70-41fc-4e8a-b02a-ef4976124ad0","type":"message","text":"ah, true","user":"UH24GRBLL","ts":"1611914168.063700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xt=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah, true"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"39506971-b038-4e7b-bfbf-0e6f90101896","type":"message","text":"But yes, as much as I like writing expressions over loops, it would be wise to take advantage of Julia's fast loops here to get rid of the extra allocations. I would also argue that this still satisfies the vague 1:1 constraint as well. It's a minor implementation detail.","user":"U01H36BUDJB","ts":"1611914232.063900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"U7B","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But yes, as much as I like writing expressions over loops, it would be wise to take advantage of Julia's fast loops here to get rid of the extra allocations. I would also argue that this still satisfies the vague 1:1 constraint as well. It's a minor implementation detail."}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"5deba3a2-a3e4-44b3-a628-cce01b4bdf4b","type":"message","text":"the java code is full of loops :man-shrugging:","user":"UH24GRBLL","ts":"1611914325.064100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ps2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the java code is full of loops "},{"type":"emoji","name":"man-shrugging"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"ff7c2b3f-f68e-4e21-b160-c6f737618145","type":"message","text":"Thank you everyone for helping me on this.\nI will implement the changes and let you guys know the results.","user":"U01FAHWCMFF","ts":"1611928150.064300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5j2ae","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thank you everyone for helping me on this.\nI will implement the changes and let you guys know the results."}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"ae05d5e4-6300-410f-854c-922926196eac","type":"message","text":"As promised, I did the forloop changes and now Im only 10ms within the java runtime\n\nThanks all\n\n```function apply_move(gs::GameState, move::Move)\n    new_gs = GameState(gs.rows, gs.empty_hole, gs.occupied_holes)\n\n    occ = BitVector(undef, length(new_gs.occupied_holes))\n    for i in eachindex(occ)\n        occ[i] = @views (new_gs.occupied_holes[i] != move.fromh) &amp; (new_gs.occupied_holes[i] != move.jumped)\n    end\n    @inbounds new_gs.occupied_holes = new_gs.occupied_holes[occ]\n    push!(new_gs.occupied_holes, <http://move.to|move.to>)\n    new_gs\nend```","user":"U01FAHWCMFF","ts":"1611960746.064500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s//","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"As promised, I did the forloop changes and now Im only 10ms within the java runtime\n\nThanks all\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function apply_move(gs::GameState, move::Move)\n    new_gs = GameState(gs.rows, gs.empty_hole, gs.occupied_holes)\n\n    occ = BitVector(undef, length(new_gs.occupied_holes))\n    for i in eachindex(occ)\n        occ[i] = @views (new_gs.occupied_holes[i] != move.fromh) & (new_gs.occupied_holes[i] != move.jumped)\n    end\n    @inbounds new_gs.occupied_holes = new_gs.occupied_holes[occ]\n    push!(new_gs.occupied_holes, move.to)\n    new_gs\nend"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF","reactions":[{"name":"heart","users":["UH24GRBLL"],"count":1}]},{"client_msg_id":"a64e2abb-f533-4a24-bbd1-498f80de296b","type":"message","text":"By my measurement, you can shave off another 20ms by inlining `get_possible_moves` ,`get_legal_moves` , and `apply_move` with `@inline` .","user":"U01H36BUDJB","ts":"1612019465.064800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8Gq1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"By my measurement, you can shave off another 20ms by inlining "},{"type":"text","text":"get_possible_moves","style":{"code":true}},{"type":"text","text":" ,"},{"type":"text","text":"get_legal_moves","style":{"code":true}},{"type":"text","text":" , and "},{"type":"text","text":"apply_move","style":{"code":true}},{"type":"text","text":" with "},{"type":"text","text":"@inline","style":{"code":true}},{"type":"text","text":" ."}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"f3cf85a8-a2a4-4c1e-b92f-83d551d4da93","type":"message","text":"So then you would be as good or better than Java with a fraction of the code and infinitely less pain and suffering.","user":"U01H36BUDJB","ts":"1612019540.065000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ftFE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So then you would be as good or better than Java with a fraction of the code and infinitely less pain and suffering."}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF","reactions":[{"name":"julia","users":["U01FAHWCMFF"],"count":1},{"name":"juliabouncing","users":["UH24GRBLL"],"count":1}]},{"client_msg_id":"9b0fe8ae-dbc8-44f9-936a-ffcfcca9693b","type":"message","text":"Ya last time I check these functions were automatically inlined on my PC (well the first two at least).\n\nJust wondering if you could answer these questions, im experiencing weird behaviour!\n\nHow come when i go from\n```co.row &gt;= 3 &amp;&amp; co.hole &gt;= 3```\nto\n```(co.row &gt;= 3) &amp; (co.hole &gt;= 3)```\nmy program takes as twice as long to run\n\nWhy is there no consistency between speed and type of operation? How do I determine which is faster `&amp;` or `&amp;&amp;` without benchmarking every case?","user":"U01FAHWCMFF","ts":"1612021696.065200","team":"T68168MUP","edited":{"user":"U01FAHWCMFF","ts":"1612021869.000000"},"blocks":[{"type":"rich_text","block_id":"bc7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ya last time I check these functions were automatically inlined on my PC (well the first two at least).\n\nJust wondering if you could answer these questions, im experiencing weird behaviour!\n\nHow come when i go from\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"co.row >= 3 && co.hole >= 3"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"to\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"(co.row >= 3) & (co.hole >= 3)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"my program takes as twice as long to run\n\nWhy is there no consistency between speed and type of operation? How do I determine which is faster "},{"type":"text","text":"&","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"&&","style":{"code":true}},{"type":"text","text":" without benchmarking every case?"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"7805db7d-617c-424a-bb4a-34bef7324f53","type":"message","text":"Assuming `row` and `hole` are scalars (because otherwise I'm pretty sure this wouldn't compile), the reason why `&amp;` might take longer is because `&amp;&amp;` is a so-called \"short-circuiting\" boolean operator. It doesn't execute the RHS if the LHS evaluates to false. If this case occurs frequently, it certainly could have an effect on performance, although I find it surprising that it's a 2x effect. It's also possible that something weird is happening with the types.","user":"U01H36BUDJB","ts":"1612022173.065800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AOp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Assuming "},{"type":"text","text":"row","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"hole","style":{"code":true}},{"type":"text","text":" are scalars (because otherwise I'm pretty sure this wouldn't compile), the reason why "},{"type":"text","text":"&","style":{"code":true}},{"type":"text","text":" might take longer is because "},{"type":"text","text":"&&","style":{"code":true}},{"type":"text","text":" is a so-called \"short-circuiting\" boolean operator. It doesn't execute the RHS if the LHS evaluates to false. If this case occurs frequently, it certainly could have an effect on performance, although I find it surprising that it's a 2x effect. It's also possible that something weird is happening with the types."}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"17962c13-2ffb-4b09-9785-f3db28b5a98b","type":"message","text":"`&amp;&amp;` is the short circuiting and-operator. \"short circuiting\" means in `a &amp;&amp; b`, if `a == false`, `b` won't be evaluated","user":"UH24GRBLL","ts":"1612022304.066100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2wq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"&&","style":{"code":true}},{"type":"text","text":" is the short circuiting and-operator. \"short circuiting\" means in "},{"type":"text","text":"a && b","style":{"code":true}},{"type":"text","text":", if "},{"type":"text","text":"a == false","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"b","style":{"code":true}},{"type":"text","text":" won't be evaluated"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"0e72a248-5eaf-4150-993e-f831b3391624","type":"message","text":"Im aware of what it is, but causing a x2 slowdown doesnt make sense IMO","user":"U01FAHWCMFF","ts":"1612022338.066300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HAqPu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Im aware of what it is, but causing a x2 slowdown doesnt make sense IMO"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"b6676cc7-324d-4dc9-a98a-ae5b0b162627","type":"message","text":"if it's very unlikely to ever hit the RHS, this will make a big difference, because only `co.row` will have to be loaded from RAM","user":"UH24GRBLL","ts":"1612022360.066500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5vQzX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if it's very unlikely to ever hit the RHS, this will make a big difference, because only "},{"type":"text","text":"co.row","style":{"code":true}},{"type":"text","text":" will have to be loaded from RAM"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"99e13d96-832f-4759-a95c-6dee90b18240","type":"message","text":"and presumably `co.row` is already cached, which is much faster","user":"UH24GRBLL","ts":"1612022381.066700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uXw/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and presumably "},{"type":"text","text":"co.row","style":{"code":true}},{"type":"text","text":" is already cached, which is much faster"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"05dfaf2e-61c3-484c-8d37-6de19f7932b6","type":"message","text":"So is it almost always favourable to go with &amp;&amp;?","user":"U01FAHWCMFF","ts":"1612022389.066900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0mdI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So is it almost always favourable to go with &&?"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"d3ba4f81-7a17-467d-9539-7d52b84fc9b1","type":"message","text":"Oh also, this is wrong as you have written it: `co.row &gt;= 3 &amp;&amp; co.hole &gt;= 3` . You need parentheses, as you can see by the parser output for the expression:\n```julia&gt; :(1&gt;0 &amp; 4&gt;3).args\n5-element Array{Any,1}:\n 1\n  :&gt;\n  :(0 &amp; 4)\n  :&gt;\n 3```","user":"U01H36BUDJB","ts":"1612022390.067100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TvT+C","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh also, this is wrong as you have written it: "},{"type":"text","text":"co.row >= 3 && co.hole >= 3","style":{"code":true}},{"type":"text","text":" . You need parentheses, as you can see by the parser output for the expression:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> :(1>0 & 4>3).args\n5-element Array{Any,1}:\n 1\n  :>\n  :(0 & 4)\n  :>\n 3"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"b1ca081f-567d-43f8-bcf6-48537118b754","type":"message","text":"not necessarily, it depends on your data","user":"UH24GRBLL","ts":"1612022421.067300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ShCM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not necessarily, it depends on your data"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"799ffdaf-feef-409c-845f-cd877fd7073a","type":"message","text":"huh? Brian that's not quite right in this case","user":"UH24GRBLL","ts":"1612022471.067500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p+HNq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"huh? Brian that's not quite right in this case"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"b5065e59-ce3c-4324-9f76-5cdbb9083dc1","type":"message","text":"Oh wait actually it behaves differently between `&amp;` and `&amp;&amp;`","user":"U01H36BUDJB","ts":"1612022486.067700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pUaL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh wait actually it behaves differently between "},{"type":"text","text":"&","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"&&","style":{"code":true}}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"afc6815e-7cba-45bf-9256-e9e25f2bd868","type":"message","text":"`co.row &gt;= 3 &amp;&amp; co.hole &gt;= 3` is equivalent to `(co.row &gt;= 3) &amp; (co.hole &gt;= 3)`","user":"U01FAHWCMFF","ts":"1612022491.067900","team":"T68168MUP","edited":{"user":"U01FAHWCMFF","ts":"1612022517.000000"},"blocks":[{"type":"rich_text","block_id":"ZTZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"co.row >= 3 && co.hole >= 3","style":{"code":true}},{"type":"text","text":" is equivalent to "},{"type":"text","text":"(co.row >= 3) & (co.hole >= 3)","style":{"code":true}}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"07ea08c4-65da-4485-a35e-afc2ebc8adab","type":"message","text":"That's weird","user":"U01H36BUDJB","ts":"1612022492.068100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"csLRi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's weird"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"d03be850-5195-4a30-acb2-70126411cf26","type":"message","text":"check `Meta.@dump (co.row &gt;= 3 &amp;&amp; co.hole &gt;= 3)`","user":"UH24GRBLL","ts":"1612022492.068300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"e6j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"check "},{"type":"text","text":"Meta.@dump (co.row >= 3 && co.hole >= 3)","style":{"code":true}}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"f96a3355-c671-4db5-9bc8-a3b4eb5c1f89","type":"message","text":"no this is expected","user":"UH24GRBLL","ts":"1612022514.068500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IASlY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no this is expected"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"b1f4872d-f788-4523-abf3-e89f987f4a4b","type":"message","text":"`&amp;` is bitwise and, which is a well defined operation for `Int`","user":"UH24GRBLL","ts":"1612022527.068800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bXTRP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"&","style":{"code":true}},{"type":"text","text":" is bitwise and, which is a well defined operation for "},{"type":"text","text":"Int","style":{"code":true}}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"313259b1-b2ac-431b-bdf3-72dbb98e0268","type":"message","text":"the precedence here is expected","user":"UH24GRBLL","ts":"1612022534.069000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iPSI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the precedence here is expected"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"450f0ff4-b47f-4976-b746-309502e2317d","type":"message","text":"Aha, ok fair enough.","user":"U01H36BUDJB","ts":"1612022538.069200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xnq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Aha, ok fair enough."}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"106e6160-dc7e-4821-b0d9-07b1195fee70","type":"message","text":"Ayman, no, it's not equivalent","user":"UH24GRBLL","ts":"1612022572.069400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R+t","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ayman, no, it's not equivalent"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF","reactions":[{"name":"thumbsup_all","users":["U01FAHWCMFF"],"count":1}]},{"client_msg_id":"34b60ff3-76bf-4370-a32c-bfcc23c06701","type":"message","text":"Yes even ignoring the parsing/precedence issue, the two statements are not equivalent.","user":"U01H36BUDJB","ts":"1612022605.069600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GLD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes even ignoring the parsing/precedence issue, the two statements are not equivalent."}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"4ccc5ad5-d0a1-4ce6-9d50-c867634e58e5","type":"message","text":"```if (co.row &gt;= 3)\n   if (co.col &gt;= 3)\n    # do stuff\n   end\nend```\nmore like this","user":"UH24GRBLL","ts":"1612022605.069800","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1612022633.000000"},"blocks":[{"type":"rich_text","block_id":"/UO2S","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"if (co.row >= 3)\n   if (co.col >= 3)\n    # do stuff\n   end\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"more like this"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"7abbd9b7-a944-4e44-9ee7-d06a3362601d","type":"message","text":"if the first condition is false, the second won't even be evaluated","user":"UH24GRBLL","ts":"1612022621.070000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZiQC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if the first condition is false, the second won't even be evaluated"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"aae84351-be8b-4f4c-9e9d-dd70c2160916","type":"message","text":"Oh what i meant to say was that bitwise required them to be in brackets for some reason.","user":"U01FAHWCMFF","ts":"1612022640.070300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=Apb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh what i meant to say was that bitwise required them to be in brackets for some reason."}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"58cf5544-b9c6-4e1f-901b-8323226defef","type":"message","text":"Yeah it's a precedence issue, as <@UH24GRBLL> pointed out.","user":"U01H36BUDJB","ts":"1612022666.070600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+iW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah it's a precedence issue, as "},{"type":"user","user_id":"UH24GRBLL"},{"type":"text","text":" pointed out."}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"2d1ab8c1-5ec2-4d27-93b1-0d988a0827b1","type":"message","text":"oh yeah, you might want to write the `ifs` explicitly, to only do the comparisons once","user":"UH24GRBLL","ts":"1612022759.070800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Jk7p7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh yeah, you might want to write the "},{"type":"text","text":"ifs","style":{"code":true}},{"type":"text","text":" explicitly, to only do the comparisons once"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"f069e134-c666-4e49-b07c-c8ca8c68c4b1","type":"message","text":"probably won't help much, but every eliminated branch is a good branch (because you don't confuse the branch predictor)","user":"UH24GRBLL","ts":"1612022814.071000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jiG44","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"probably won't help much, but every eliminated branch is a good branch (because you don't confuse the branch predictor)"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"fc4eedbc-9e35-41e6-97e7-6f166aa7145f","type":"message","text":"Hmm another weird quirk\n```    for i in eachindex(occ)\n        occ[i] = @views (new_gs.occupied_holes[i] != move.fromh) &amp; (new_gs.occupied_holes[i] != move.jumped)\n    end```\nIs 2 times faster than\n```    for i in eachindex(occ)\n        occ[i] = @views (new_gs.occupied_holes[i] != move.fromh) &amp;&amp; (new_gs.occupied_holes[i] != move.jumped)\n    end```\n","user":"U01FAHWCMFF","ts":"1612022841.071200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"imp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmm another weird quirk\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"    for i in eachindex(occ)\n        occ[i] = @views (new_gs.occupied_holes[i] != move.fromh) & (new_gs.occupied_holes[i] != move.jumped)\n    end"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Is 2 times faster than\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"    for i in eachindex(occ)\n        occ[i] = @views (new_gs.occupied_holes[i] != move.fromh) && (new_gs.occupied_holes[i] != move.jumped)\n    end"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"451d2793-a781-4253-a974-469f5e22bba0","type":"message","text":"have you pushed the newest version to the repo?","user":"UH24GRBLL","ts":"1612022844.071400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZqUH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"have you pushed the newest version to the repo?"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"82bfe514-7491-4c93-ac77-bb35dc99db06","type":"message","text":"no, that's not surprising to me - it probably SIMDs with `&amp;`","user":"UH24GRBLL","ts":"1612022865.071600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Lc+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no, that's not surprising to me - it probably SIMDs with "},{"type":"text","text":"&","style":{"code":true}}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"c6d0d6d0-1b51-47e3-9612-d5e5b352bb6d","type":"message","text":"Hmmm very cool then","user":"U01FAHWCMFF","ts":"1612022874.071800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DOXy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmmm very cool then"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"17a8d75f-a967-44b1-a1c0-443ffd6071d2","type":"message","text":"So there are different cases for each","user":"U01FAHWCMFF","ts":"1612022879.072000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"J=W","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So there are different cases for each"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"a68dfb52-9eca-4211-aee8-d600698b39a2","type":"message","text":"yes","user":"UH24GRBLL","ts":"1612022882.072200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MXByh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"de1681a0-f49d-4ae1-ad05-d8461cc0e911","type":"message","text":"it's a tradeoff","user":"UH24GRBLL","ts":"1612022885.072400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bwH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's a tradeoff"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"41a0c76a-e25b-49c2-a4a7-b06631a0567c","type":"message","text":"`&amp;&amp;` (often) forces a branch, which prevents SIMD","user":"UH24GRBLL","ts":"1612022909.072600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SORE1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"&&","style":{"code":true}},{"type":"text","text":" (often) forces a branch, which prevents SIMD"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF","reactions":[{"name":"+1","users":["U01H36BUDJB","U01FAHWCMFF"],"count":2}]},{"client_msg_id":"908fcf60-4f0a-4f60-bf45-44b507e1dc8c","type":"message","text":"thats really interesting to know\n\nIf you’d like to try your hand at optimization\n<https://github.com/ayman-albaz/peg-performance/tree/master/src/main/julia>","user":"U01FAHWCMFF","ts":"1612022949.073000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RXfm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thats really interesting to know\n\nIf you’d like to try your hand at optimization\n"},{"type":"link","url":"https://github.com/ayman-albaz/peg-performance/tree/master/src/main/julia"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"a8548d51-a164-4b48-aebf-c3644376f72a","type":"message","text":"Thanks everyone :slightly_smiling_face:","user":"U01FAHWCMFF","ts":"1612022956.073200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QSY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks everyone "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"1152be23-6adf-4061-ac14-070fbdb8ac84","type":"message","text":"^ This. If you've ever done any GPU kernel programming, you might be familiar with this problem... it's the source of so many performance bugs haha.","user":"U01H36BUDJB","ts":"1612022957.073400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/ZV2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"^ This. If you've ever done any GPU kernel programming, you might be familiar with this problem... it's the source of so many performance bugs haha."}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"12e40647-aa18-4cf1-aa37-8047e4ed23d9","type":"message","text":"in the other case with `co.row`, there was no loop or anything that benefitted from SIMD in the first place, so that's probably why the `&amp;&amp;` (eliminating the other comparison entirely) was faster","user":"UH24GRBLL","ts":"1612022979.073600","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1612022986.000000"},"blocks":[{"type":"rich_text","block_id":"wq/p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in the other case with "},{"type":"text","text":"co.row","style":{"code":true}},{"type":"text","text":", there was no loop or anything that benefitted from SIMD in the first place, so that's probably why the "},{"type":"text","text":"&&","style":{"code":true}},{"type":"text","text":" (eliminating the other comparison entirely) was faster"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF","reactions":[{"name":"+1","users":["U01H36BUDJB"],"count":1}]},{"client_msg_id":"90e688f5-8ad2-4056-a310-2b22dd01382a","type":"message","text":"you could still experiment with making the `GameState` struct immutable, like I suggested somewhere above","user":"UH24GRBLL","ts":"1612023036.074000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cZZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you could still experiment with making the "},{"type":"text","text":"GameState","style":{"code":true}},{"type":"text","text":" struct immutable, like I suggested somewhere above"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"738dee80-fa35-4740-b48e-fe12c1e029ff","type":"message","text":"not sure how much it will help though","user":"UH24GRBLL","ts":"1612023059.074200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W25","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not sure how much it will help though"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"33a0f7c8-9686-456d-b362-6db6bbf8a454","type":"message","text":"I did make GameState immutable but it doesn’t work since its Vector can’t be updated","user":"U01FAHWCMFF","ts":"1612023064.074400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XWIW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I did make GameState immutable but it doesn’t work since its Vector can’t be updated"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"eebc8e95-7571-4f48-a234-3a7fa55ebd11","type":"message","text":"yes, that's why I said that you'd also need the `increment` methods that return a \"new\" instance","user":"UH24GRBLL","ts":"1612023087.074600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"edBxH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes, that's why I said that you'd also need the "},{"type":"text","text":"increment","style":{"code":true}},{"type":"text","text":" methods that return a \"new\" instance"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"d356ae2f-a32a-4320-ba55-bdc538172f88","type":"message","text":"ah","user":"U01FAHWCMFF","ts":"1612023099.074800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YBaJ6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"3e74383d-ffd1-4a0c-96a6-dad36e845172","type":"message","text":"immutable structs can often be used by the compiler to avoid allocating memory at all","user":"UH24GRBLL","ts":"1612023101.075000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DHL/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"immutable structs can often be used by the compiler to avoid allocating memory at all"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"506721fe-e5d0-4f24-8d28-6a886d3710e2","type":"message","text":"so even though you write `increment(gs::GameState) = GameState(...)`, that doesn't necessarily translate into a heap allocation monitored by GC, if `GameState` is an immutable struct","user":"UH24GRBLL","ts":"1612023142.075200","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1612023152.000000"},"blocks":[{"type":"rich_text","block_id":"lGn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so even though you write "},{"type":"text","text":"increment(gs::GameState) = GameState(...)","style":{"code":true}},{"type":"text","text":", that doesn't necessarily translate into a heap allocation monitored by GC, if "},{"type":"text","text":"GameState","style":{"code":true}},{"type":"text","text":" is an immutable struct"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF","reactions":[{"name":"thumbsup_all","users":["U01FAHWCMFF"],"count":1}]},{"client_msg_id":"3b05c751-ceca-4a54-be09-4a787fbe9c56","type":"message","text":"Awesome, I never knew that. I will try that then :slightly_smiling_face:","user":"U01FAHWCMFF","ts":"1612023177.075500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iVHm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Awesome, I never knew that. I will try that then "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"80d3dd7f-abff-48fb-b4b8-30af04a8d628","type":"message","text":"in the case of `GameState`, the struct itself will probably live on the stack, while the contained vector will live on the heap","user":"UH24GRBLL","ts":"1612023335.075800","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1612023377.000000"},"blocks":[{"type":"rich_text","block_id":"ba5l","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in the case of "},{"type":"text","text":"GameState","style":{"code":true}},{"type":"text","text":", the struct itself will probably live on the stack, while the contained vector will live on the heap"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"c0bd1277-2cf3-4e0d-84f9-90bd6110c3b8","type":"message","text":"Updated. Added only immutable `GameCounter` for now\n```struct GameCounter\n    games_played::Int\n    games_solution::Vector{Move}\nend\n\nincrement(gc::GameCounter)                           = GameCounter(gc.games_played + 1, gc.games_solution)\nincrement(gc::GameCounter, move_stack::Vector{Move}) = GameCounter(gc.games_played + 1, append!(gc.games_solution, move_stack))\n\nfunction search(gs::GameState, gc::GameCounter, move_stack::Vector{Move})\n    \n    if length(gs.occupied_holes) == 1\n        return increment(gc, move_stack)\n    end\n    \n    legal_moves = get_legal_moves(gs)\n    \n    if length(legal_moves) == 0\n        return increment(gc)\n    end\n    \n    for move in legal_moves\n        new_gs = apply_move(gs, move)\n        push!(move_stack, move)\n        gc = search(new_gs, gc, move_stack)\n        pop!(move_stack)\n    end\n    gc\nend```\nIt runs nearly 1.8x slower. I think this is because GC time went all the way up from 6% to 31%\n\nWhy is GC activating more in this example?","user":"U01FAHWCMFF","ts":"1612026873.076100","team":"T68168MUP","edited":{"user":"U01FAHWCMFF","ts":"1612026898.000000"},"blocks":[{"type":"rich_text","block_id":"=utu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Updated. Added only immutable "},{"type":"text","text":"GameCounter","style":{"code":true}},{"type":"text","text":" for now\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct GameCounter\n    games_played::Int\n    games_solution::Vector{Move}\nend\n\nincrement(gc::GameCounter)                           = GameCounter(gc.games_played + 1, gc.games_solution)\nincrement(gc::GameCounter, move_stack::Vector{Move}) = GameCounter(gc.games_played + 1, append!(gc.games_solution, move_stack))\n\nfunction search(gs::GameState, gc::GameCounter, move_stack::Vector{Move})\n    \n    if length(gs.occupied_holes) == 1\n        return increment(gc, move_stack)\n    end\n    \n    legal_moves = get_legal_moves(gs)\n    \n    if length(legal_moves) == 0\n        return increment(gc)\n    end\n    \n    for move in legal_moves\n        new_gs = apply_move(gs, move)\n        push!(move_stack, move)\n        gc = search(new_gs, gc, move_stack)\n        pop!(move_stack)\n    end\n    gc\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"It runs nearly 1.8x slower. I think this is because GC time went all the way up from 6% to 31%\n\nWhy is GC activating more in this example?"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"50f4da71-69fc-4809-897a-f99446fdcf7a","type":"message","text":"Is that the only thing that changed?","user":"U01H36BUDJB","ts":"1612028330.076400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oIK0W","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is that the only thing that changed?"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"c65fe46d-42ae-4b82-8e3e-2b4ae2e50dcc","type":"message","text":"Yes if you change\n```increment(gc::GameCounter, move_stack::Vector{Move}) = GameCounter(gc.games_played + 1, append!(gc.games_solution, move_stack))```\nto\n```increment(gc::GameCounter, move_stack::Vector{Move}) = GameCounter(gc.games_played + 1, move_stack)```\nYou get the normal speed back. Why is the append function slow here then if it were inside the function for a mutable struct?","user":"U01FAHWCMFF","ts":"1612028837.076600","team":"T68168MUP","edited":{"user":"U01FAHWCMFF","ts":"1612028885.000000"},"blocks":[{"type":"rich_text","block_id":"A4Z62","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes if you change\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"increment(gc::GameCounter, move_stack::Vector{Move}) = GameCounter(gc.games_played + 1, append!(gc.games_solution, move_stack))"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"to\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"increment(gc::GameCounter, move_stack::Vector{Move}) = GameCounter(gc.games_played + 1, move_stack)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"You get the normal speed back. Why is the append function slow here then if it were inside the function for a mutable struct?"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"da544319-ab1c-4325-934e-042d26a82da8","type":"message","text":"those two codes do fundamentally different things, no?","user":"UH24GRBLL","ts":"1612028922.076900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L12e","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"those two codes do fundamentally different things, no?"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"add09554-3f1a-4ca4-b9e5-5c2a988efd04","type":"message","text":"Yes","user":"U01FAHWCMFF","ts":"1612028930.077100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Pszu+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"1a2036f3-3a6d-4db3-b4d1-f9e4a2f6036a","type":"message","text":"What im trying to get at its that its the append function that is slowing the whole thing down with GC","user":"U01FAHWCMFF","ts":"1612028942.077300","team":"T68168MUP","edited":{"user":"U01FAHWCMFF","ts":"1612028978.000000"},"blocks":[{"type":"rich_text","block_id":"iD5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What im trying to get at its that its the append function that is slowing the whole thing down with GC"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"bee7c2bf-5171-48dd-b803-03c5328cc9b3","type":"message","text":"Im guessing its because we keep creating new Arrays and discarding the old ones","user":"U01FAHWCMFF","ts":"1612028961.077500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d56l","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Im guessing its because we keep creating new Arrays and discarding the old ones"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"ef41303f-343b-4143-87aa-5c8072f3f029","type":"message","text":"what was the type of `gc.games_solution`?","user":"UH24GRBLL","ts":"1612028978.077800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TDHA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what was the type of "},{"type":"text","text":"gc.games_solution","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"7eeb5056-41bb-4db8-b892-ff6a847af449","type":"message","text":"`Vector{Move}`\n\n```struct Move\n    fromh::Coordinate\n    jumped::Coordinate\n    to::Coordinate\nend\n\nstruct Coordinate\n    row::Int\n    hole::Int\nend```","user":"U01FAHWCMFF","ts":"1612028995.078000","team":"T68168MUP","edited":{"user":"U01FAHWCMFF","ts":"1612029029.000000"},"blocks":[{"type":"rich_text","block_id":"QgX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Vector{Move}","style":{"code":true}},{"type":"text","text":"\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct Move\n    fromh::Coordinate\n    jumped::Coordinate\n    to::Coordinate\nend\n\nstruct Coordinate\n    row::Int\n    hole::Int\nend"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"31e84795-de21-4f33-b7c0-1e29903205e7","type":"message","text":"ok, at this point you may want to `sizehint!` the `games_solution` on init","user":"UH24GRBLL","ts":"1612029039.078300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AE3T3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ok, at this point you may want to "},{"type":"text","text":"sizehint!","style":{"code":true}},{"type":"text","text":" the "},{"type":"text","text":"games_solution","style":{"code":true}},{"type":"text","text":" on init"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"1a0a2b96-d156-4c63-b88b-948a8d6036d4","type":"message","text":"`append!` resizes its first argument to fit the data from the other arguments","user":"UH24GRBLL","ts":"1612029063.078500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7+Bht","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"append!","style":{"code":true}},{"type":"text","text":" resizes its first argument to fit the data from the other arguments"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"c9e62fc1-656a-4de5-aae6-83753da202b5","type":"message","text":"but I'm not sure this transform is correct - I've only posted it that way as an example, as I have not investigated whether that's whats actually going on in the java/initial julia code","user":"UH24GRBLL","ts":"1612029114.078700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mLD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but I'm not sure this transform is correct - I've only posted it that way as an example, as I have not investigated whether that's whats actually going on in the java/initial julia code"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF","reactions":[{"name":"thankyou","users":["U01FAHWCMFF"],"count":1}]},{"client_msg_id":"11c0e4ac-bee7-4043-a629-4ca65cc427a4","type":"message","text":"Im actually not sure if that will work.\nFrom my understanding it makes sense why the GC is slowing everything down. Its because we keep creating new strutcts with large vectors over and over again, as opposed to only making them once in a mutable struct and just appending to the pre-existing array.","user":"U01FAHWCMFF","ts":"1612029601.079000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pRbJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Im actually not sure if that will work.\nFrom my understanding it makes sense why the GC is slowing everything down. Its because we keep creating new strutcts with large vectors over and over again, as opposed to only making them once in a mutable struct and just appending to the pre-existing array."}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"}]