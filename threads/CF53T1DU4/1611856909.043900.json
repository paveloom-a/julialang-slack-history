[{"client_msg_id":"90b8a123-7e58-4953-beff-e9f35ea3c0b3","type":"message","text":"So I currently am having a mini-contest between a co-worker of mine about performance.\n\nHe claims that Java is one of the fastest languages for his toy-problem.\n\nI wrote a Julia version but my code currently runs at &lt;2x the speed of his Java code.\n\nCan anyone suggest to me some ways to increase my performance? Also feel free to give any un-solicited advice about my coding style :slightly_smiling_face:\nNote this has to all follow the same structure (e.g. single threaded, must use recursion)\n\nThe toy problem is just <https://en.wikipedia.org/wiki/Peg_solitaire|peg solitaire> but on a triangular board. It involves lots and lots of array append and lots of recursion.\n\n<https://github.com/ayman-albaz/peg-performance/blob/master/src/main/julia/performance.jl>","user":"U01FAHWCMFF","ts":"1611856909.043900","team":"T68168MUP","edited":{"user":"U01FAHWCMFF","ts":"1611856973.000000"},"attachments":[{"image_url":"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0b/Peg_Solitaire_1687_on_Portrait_of_Princess_Soubise_by_Claude-Auguste_Berey.jpg/1200px-Peg_Solitaire_1687_on_Portrait_of_Princess_Soubise_by_Claude-Auguste_Berey.jpg","image_width":1200,"image_height":1626,"image_bytes":797938,"title":"Peg solitaire","title_link":"https://en.wikipedia.org/wiki/Peg_solitaire","from_url":"https://en.wikipedia.org/wiki/Peg_solitaire","author_name":"Wikipedia","author_link":"https://en.wikipedia.org/","text":"Peg solitaire (or Solo Noble) is a board game for one player involving movement of pegs on a board with holes.  Some sets use marbles in a board with indentations. The game is known simply as Solitaire in the United Kingdom where the card games are called Patience.  It is also referred to as Brainvita (mainly in India, where sets are sold commercially under this name).\nThe first evidence of the game can be traced back to the court of Louis XIV, and the specific date of 1697, with an engraving made ten years later by Claude Auguste Berey of Anne de Rohan-Chabot, Princess of Soubise, with the puzzle by her side.  The August 1687 edition of the French literary magazine Mercure galant contains a description of the board, rules and sample problems.  This is the first known reference to the game in print.\nThe standard game fills the entire board with pegs except for the central hole. The objective is, making valid moves, to empty the entire board except for a solitary peg in the central hole.","fallback":"wikipedia: Peg solitaire","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png","id":1,"original_url":"https://en.wikipedia.org/wiki/Peg_solitaire"}],"blocks":[{"type":"rich_text","block_id":"SkErK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So I currently am having a mini-contest between a co-worker of mine about performance.\n\nHe claims that Java is one of the fastest languages for his toy-problem.\n\nI wrote a Julia version but my code currently runs at <2x the speed of his Java code.\n\nCan anyone suggest to me some ways to increase my performance? Also feel free to give any un-solicited advice about my coding style "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":"\nNote this has to all follow the same structure (e.g. single threaded, must use recursion)\n\nThe toy problem is just "},{"type":"link","url":"https://en.wikipedia.org/wiki/Peg_solitaire","text":"peg solitaire"},{"type":"text","text":" but on a triangular board. It involves lots and lots of array append and lots of recursion.\n\n"},{"type":"link","url":"https://github.com/ayman-albaz/peg-performance/blob/master/src/main/julia/performance.jl"}]}]}],"thread_ts":"1611856909.043900","reply_count":5,"reply_users_count":2,"latest_reply":"1611862749.048400","reply_users":["U01GMP3HF9C","U01FAHWCMFF"],"subscribed":false},{"client_msg_id":"beb14977-a3b4-499f-9d7d-c0ca4f65c863","type":"message","text":"Have you tried profiling the code to see what takes time?","user":"U01GMP3HF9C","ts":"1611857859.047600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EnvO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Have you tried profiling the code to see what takes time?"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"85b57ae2-7ec3-40ce-8628-d1e7390ca685","type":"message","text":"Yes! The three things that take the longest time are\n• Recursion \n• Finding the next new points.\nI'm not a fan of recursion myself so i didn't try to optimize that\nI tried optimizing finding the next new points but I exhausted all my performance advantage methods (such as declaring the types, inbounds)\n\nI'm wondering if it has something to do with Julia running using Int64s and Java running using Int32s","user":"U01FAHWCMFF","ts":"1611858024.047800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Mo8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes! The three things that take the longest time are\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Recursion "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Finding the next new points."}]}],"style":"bullet","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"\nI'm not a fan of recursion myself so i didn't try to optimize that\nI tried optimizing finding the next new points but I exhausted all my performance advantage methods (such as declaring the types, inbounds)\n\nI'm wondering if it has something to do with Julia running using Int64s and Java running using Int32s"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"bae46a93-34ed-41f9-ba5a-bbbba4de788a","type":"message","text":"Have you tried iterating through the next few moves in a loop rather than storing them in a temporary array?","user":"U01GMP3HF9C","ts":"1611860783.048000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KKjG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Have you tried iterating through the next few moves in a loop rather than storing them in a temporary array?"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"b9cb6165-d336-4d0d-8e63-e619ac30a24d","type":"message","text":"Also, instinctively I would have stored the game state as a matrix of booleans, is there maybe a specific reason why you didn’t?","user":"U01GMP3HF9C","ts":"1611860926.048200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Bjma","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, instinctively I would have stored the game state as a matrix of booleans, is there maybe a specific reason why you didn’t?"}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"161936dc-518a-48e1-98cc-eab172ae882a","type":"message","text":"we are not comparing algorithm efficiency, but rather, using the same code structure as the java source code, can Julia outperform Java.\n\nAs you can this the repo has different languages and benchmark files. The idea is to see which language is the fastest on this toy problem using the specific way of solving the problem.","user":"U01FAHWCMFF","ts":"1611862749.048400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TGbF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we are not comparing algorithm efficiency, but rather, using the same code structure as the java source code, can Julia outperform Java.\n\nAs you can this the repo has different languages and benchmark files. The idea is to see which language is the fastest on this toy problem using the specific way of solving the problem."}]}]}],"thread_ts":"1611856909.043900","parent_user_id":"U01FAHWCMFF"}]