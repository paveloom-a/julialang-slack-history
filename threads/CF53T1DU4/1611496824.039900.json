[{"client_msg_id":"efce8b63-3113-4f39-988e-f33158a1908f","type":"message","text":"Anyone know if `Interpolations.jl` is supposed to be allocation free? It appears that even a simple example with the interpolation object and query points fixed causes allocation inside of a function:\n```const A = randn(100);\nconst A_i = interpolate(A,BSpline(Linear()));\nfunction interpalloc(y,xs,out)\n    out .= y(xs)\nend\n@benchmark interpalloc(A_i,xs,out)\n\nBenchmarkTools.Trial: \n  memory estimate:  496 bytes\n  allocs estimate:  2\n  --------------\n  minimum time:     142.632 ns (0.00% GC)\n  median time:      146.349 ns (0.00% GC)\n  mean time:        161.094 ns (4.74% GC)\n  maximum time:     1.289 μs (84.83% GC)\n  --------------\n  samples:          10000\n  evals/sample:     846```","user":"U01H36BUDJB","ts":"1611496824.039900","team":"T68168MUP","edited":{"user":"U01H36BUDJB","ts":"1611496916.000000"},"blocks":[{"type":"rich_text","block_id":"8KC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Anyone know if "},{"type":"text","text":"Interpolations.jl","style":{"code":true}},{"type":"text","text":" is supposed to be allocation free? It appears that even a simple example with the interpolation object and query points fixed causes allocation inside of a function:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"const A = randn(100);\nconst A_i = interpolate(A,BSpline(Linear()));\nfunction interpalloc(y,xs,out)\n    out .= y(xs)\nend\n@benchmark interpalloc(A_i,xs,out)\n\nBenchmarkTools.Trial: \n  memory estimate:  496 bytes\n  allocs estimate:  2\n  --------------\n  minimum time:     142.632 ns (0.00% GC)\n  median time:      146.349 ns (0.00% GC)\n  mean time:        161.094 ns (4.74% GC)\n  maximum time:     1.289 μs (84.83% GC)\n  --------------\n  samples:          10000\n  evals/sample:     846"}]}]}],"thread_ts":"1611496824.039900","reply_count":7,"reply_users_count":3,"latest_reply":"1611610936.041400","reply_users":["U67G3QRJM","U01H36BUDJB","USU9FRPEU"],"subscribed":false},{"client_msg_id":"fde850fd-252e-4e97-a098-fc35c0049588","type":"message","text":"What is `xs`? Does it help to do `@benchmark interpalloc(A_i, $xs, $out)`?","user":"U67G3QRJM","ts":"1611535467.040200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jgJwZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What is "},{"type":"text","text":"xs","style":{"code":true}},{"type":"text","text":"? Does it help to do "},{"type":"text","text":"@benchmark interpalloc(A_i, $xs, $out)","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1611496824.039900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"8a7bcf53-c325-4a2d-af94-d1ee4d5e9bc4","type":"message","text":"`xs` is just a `StepRange` from 1 to 10. Adding the eval `$` does not seem to have an effect.","user":"U01H36BUDJB","ts":"1611565093.040400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kaB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"xs","style":{"code":true}},{"type":"text","text":" is just a "},{"type":"text","text":"StepRange","style":{"code":true}},{"type":"text","text":" from 1 to 10. Adding the eval "},{"type":"text","text":"$","style":{"code":true}},{"type":"text","text":" does not seem to have an effect."}]}]}],"thread_ts":"1611496824.039900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"41577b83-3a20-44f8-b51c-a51d70b3c7a1","type":"message","text":"Aha! If you use broadcasting, i.e. `out .= y.(xs)` then there is no allocation. I think this should be clarified in the documentation.","user":"U01H36BUDJB","ts":"1611565240.040600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"r8=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Aha! If you use broadcasting, i.e. "},{"type":"text","text":"out .= y.(xs)","style":{"code":true}},{"type":"text","text":" then there is no allocation. I think this should be clarified in the documentation."}]}]}],"thread_ts":"1611496824.039900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"232c8a63-b204-4da7-8fdd-ec2fce8fbdec","type":"message","text":"I'm nominally maintaining Interpolations.jl. Could you create an issue or PR?\n\nThis seems more general than Interpolations.jl though.","user":"USU9FRPEU","ts":"1611591835.040800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ii+T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm nominally maintaining Interpolations.jl. Could you create an issue or PR?\n\nThis seems more general than Interpolations.jl though."}]}]}],"thread_ts":"1611496824.039900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"14cf39ce-13ec-411a-8373-9e55d7d3c29e","type":"message","text":"Sure. I think insofar as how it relates to `Interpolations.jl` , it's just a matter of API clarity and having good examples. Since it is permitted to pass an array `xs` to the interpolation function, it might be a good idea to clearly document in the examples the trade-offs compared to broadcasting. You could also deprecate the array argument type and only allow users to interpolate multiple query points with broadcasting. This makes the API simpler (in some sense) but also would break a lot of code.","user":"U01H36BUDJB","ts":"1611592406.041000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"J6Js","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sure. I think insofar as how it relates to "},{"type":"text","text":"Interpolations.jl","style":{"code":true}},{"type":"text","text":" , it's just a matter of API clarity and having good examples. Since it is permitted to pass an array "},{"type":"text","text":"xs","style":{"code":true}},{"type":"text","text":" to the interpolation function, it might be a good idea to clearly document in the examples the trade-offs compared to broadcasting. You could also deprecate the array argument type and only allow users to interpolate multiple query points with broadcasting. This makes the API simpler (in some sense) but also would break a lot of code."}]}]}],"thread_ts":"1611496824.039900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"19c05903-596c-41ca-aa38-5379f1ead9dd","type":"message","text":"Is the ultimate objective computational time?","user":"USU9FRPEU","ts":"1611598420.041200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uBSb5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is the ultimate objective computational time?"}]}]}],"thread_ts":"1611496824.039900","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"cd158169-65a1-488b-abc3-73d12f9ed312","type":"message","text":"Yeah, I think a lot of people using Julia (and probably also `Interpolations.jl`) are interested in its capability to be really, really fast. One of the main killers of performance is GC.","user":"U01H36BUDJB","ts":"1611610936.041400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IVrrW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, I think a lot of people using Julia (and probably also "},{"type":"text","text":"Interpolations.jl","style":{"code":true}},{"type":"text","text":") are interested in its capability to be really, really fast. One of the main killers of performance is GC."}]}]}],"thread_ts":"1611496824.039900","parent_user_id":"U01H36BUDJB"}]