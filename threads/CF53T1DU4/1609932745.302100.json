[{"client_msg_id":"b9c1be21-656b-40e2-a4bb-0aa28567ff28","type":"message","text":"When working with gzipped files, you can make it go faster by doing the (de)compression in a separate thread from the other computation. But I can't find any good packages for easy asynchronous/parallel (de)compression. Does such a package exist?","user":"U7HAYKY9X","ts":"1609932745.302100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hpY5i","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"When working with gzipped files, you can make it go faster by doing the (de)compression in a separate thread from the other computation. But I can't find any good packages for easy asynchronous/parallel (de)compression. Does such a package exist?"}]}]}],"thread_ts":"1609932745.302100","reply_count":11,"reply_users_count":2,"latest_reply":"1609936069.304700","reply_users":["U6A936746","U7HAYKY9X"],"subscribed":false},{"client_msg_id":"a065c14f-9209-4708-998a-c861c261f6fa","type":"message","text":"DataDeps does this under the hood when a download is done","user":"U6A936746","ts":"1609935494.302500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+2dL5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"DataDeps does this under the hood when a download is done"}]}]}],"thread_ts":"1609932745.302100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"d9fe18f7-6145-4c22-a627-afb47bcd2e21","type":"message","text":"It just spawns a bunch of seperate processes to run lib7zip, one per file","user":"U6A936746","ts":"1609935529.302700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=7pt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It just spawns a bunch of seperate processes to run lib7zip, one per file"}]}]}],"thread_ts":"1609932745.302100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"0c89a9eb-87fa-4c82-aff8-96524215bfd9","type":"message","text":"Same also applies for downloading","user":"U6A936746","ts":"1609935544.302900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ss/l","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Same also applies for downloading"}]}]}],"thread_ts":"1609932745.302100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"7d7c6922-d347-46e3-8dae-ab3b0c3ab5f7","type":"message","text":"But like in general what would a package specifically for this look like?\nUsing Julia's built in functionality for this seems like it is all the API you need","user":"U6A936746","ts":"1609935604.303100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dV8=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But like in general what would a package specifically for this look like?\nUsing Julia's built in functionality for this seems like it is all the API you need"}]}]}],"thread_ts":"1609932745.302100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"a2873298-ad7a-48e4-b4ba-5fc7dbd18e34","type":"message","text":"Not quite what I mean. I mean, something similar to `CodecZlib` , some kind of `IO` object that (de)compresses behind the curtain","user":"U7HAYKY9X","ts":"1609935616.303300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Lod","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not quite what I mean. I mean, something similar to "},{"type":"text","text":"CodecZlib","style":{"code":true}},{"type":"text","text":" , some kind of "},{"type":"text","text":"IO","style":{"code":true}},{"type":"text","text":" object that (de)compresses behind the curtain"}]}]}],"thread_ts":"1609932745.302100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"b9bc3358-38a6-47d6-8369-4686d440925d","type":"message","text":"Oh I get it","user":"U6A936746","ts":"1609935695.303500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zrVL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh I get it"}]}]}],"thread_ts":"1609932745.302100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"15d0c602-0912-4596-9aef-4a8ad7ab765e","type":"message","text":"It's a little tricky to implement, because it needs to decompress to two different buffers. Buffer A stores the already-decompressed data, while the IO is busy decompressing new data into buffer B in a seperate thread.\nWhen the consumer of data has spent all the data in buffer A, it then waits for the decompression of B. Then A and B are switched, and the decompressor begins decompressing new data into A","user":"U7HAYKY9X","ts":"1609935719.303700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SVVdE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's a little tricky to implement, because it needs to decompress to two different buffers. Buffer A stores the already-decompressed data, while the IO is busy decompressing new data into buffer B in a seperate thread.\nWhen the consumer of data has spent all the data in buffer A, it then waits for the decompression of B. Then A and B are switched, and the decompressor begins decompressing new data into A"}]}]}],"thread_ts":"1609932745.302100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"e88f5f4c-9691-4a73-af24-634fa9d0561b","type":"message","text":"Yeah, it needs the same kind of blocking if necessary API as a Channel","user":"U6A936746","ts":"1609935776.303900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"f7L8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, it needs the same kind of blocking if necessary API as a Channel"}]}]}],"thread_ts":"1609932745.302100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"fd92063a-120c-43fb-85ac-d69153be3f0b","type":"message","text":"Ideally, it should just be a `TranscodingStream` such that you can add it to any existing IO, independent of the type of compressor, and it just works","user":"U7HAYKY9X","ts":"1609935778.304100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WAH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ideally, it should just be a "},{"type":"text","text":"TranscodingStream","style":{"code":true}},{"type":"text","text":" such that you can add it to any existing IO, independent of the type of compressor, and it just works"}]}]}],"thread_ts":"1609932745.302100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"bf537bfa-932f-43fc-ac01-a623edcc2c05","type":"message","text":"Cool idea.\nI like your  notion of having 2 or more blocks where 1 is being read from and one is being decompressed into,\nand then they swap once the one being read gets empty.\nIt's very neat how it minimizes locking","user":"U6A936746","ts":"1609935973.304300","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1609936033.000000"},"blocks":[{"type":"rich_text","block_id":"9GbLw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Cool idea.\nI like your  notion of having 2 or more blocks where 1 is being read from and one is being decompressed into,\nand then they swap once the one being read gets empty.\nIt's very neat how it minimizes locking"}]}]}],"thread_ts":"1609932745.302100","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"083f0af6-7af5-4920-8611-6661de44d372","type":"message","text":"Sounds like I need to make a package then :)","user":"U7HAYKY9X","ts":"1609936069.304700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"n7lP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sounds like I need to make a package then :)"}]}]}],"thread_ts":"1609932745.302100","parent_user_id":"U7HAYKY9X"}]