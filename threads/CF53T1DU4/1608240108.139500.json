[{"client_msg_id":"098d0cf6-d109-41cc-a560-36f954d58aaa","type":"message","text":"TranscodingStreams.jl is the best bet we have for very fast IO buffering, right? It seems like some performance is still left on the table:\nComparing this\n```function bufferfile(path, buffer::Vector{UInt8})\n    rdr = NoopStream(open(path))\n    while !eof(rdr)\n        readbytes!(rdr, buffer)\n    end\nend```\nwith `cat my_file &gt; /dev/null` , I get 370 ms for TranscodingStreams and 240 ms for `cat` . Does anyone know if a thorough optimization has been attempted?","user":"U7HAYKY9X","ts":"1608240108.139500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3wJn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"TranscodingStreams.jl is the best bet we have for very fast IO buffering, right? It seems like some performance is still left on the table:\nComparing this\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function bufferfile(path, buffer::Vector{UInt8})\n    rdr = NoopStream(open(path))\n    while !eof(rdr)\n        readbytes!(rdr, buffer)\n    end\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"with "},{"type":"text","text":"cat my_file > /dev/null","style":{"code":true}},{"type":"text","text":" , I get 370 ms for TranscodingStreams and 240 ms for "},{"type":"text","text":"cat","style":{"code":true}},{"type":"text","text":" . Does anyone know if a thorough optimization has been attempted?"}]}]}],"thread_ts":"1608240108.139500","reply_count":12,"reply_users_count":3,"latest_reply":"1608319538.142000","reply_users":["UH24GRBLL","U7HAYKY9X","U01GRS159T8"],"subscribed":false},{"client_msg_id":"88e6d1b2-a169-4dfc-b31b-dd9eb8551017","type":"message","text":"aside from the fact that your noop stream is basically only doing reading and cat is reading &amp; writing, it might be slower because file IO has been thread safe since 1.3","user":"UH24GRBLL","ts":"1608240207.139600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YKBFY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"aside from the fact that your noop stream is basically only doing reading and cat is reading & writing, it might be slower because file IO has been thread safe since 1.3"}]}]}],"thread_ts":"1608240108.139500","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"1c835529-1948-49ed-87f3-60cf97e1dca1","type":"message","text":"I think `cat` skips the writing if you do it to devnull (not sure), and IO locking means little when you do it once every 16 KiB","user":"U7HAYKY9X","ts":"1608240376.139800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"StCyo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think "},{"type":"text","text":"cat","style":{"code":true}},{"type":"text","text":" skips the writing if you do it to devnull (not sure), and IO locking means little when you do it once every 16 KiB"}]}]}],"thread_ts":"1608240108.139500","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"94222072-311f-4a83-aa89-84ae7981bef9","type":"message","text":"well you can try piping someplace else and see if that makes `cat` slower?","user":"UH24GRBLL","ts":"1608240887.140000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bHy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well you can try piping someplace else and see if that makes "},{"type":"text","text":"cat","style":{"code":true}},{"type":"text","text":" slower?"}]}]}],"thread_ts":"1608240108.139500","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"ef4072f5-dea5-4d47-8697-fb091f8401a8","type":"message","text":"I have had to manually add my own buffer around TranscodingStreams","user":"U01GRS159T8","ts":"1608311169.140400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mY03","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have had to manually add my own buffer around TranscodingStreams"}]}]}],"thread_ts":"1608240108.139500","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"629fc904-5c60-4fbd-bf63-1706713e84c7","type":"message","text":"otherwise very slow and tons of allocations","user":"U01GRS159T8","ts":"1608311189.140600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"isWq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"otherwise very slow and tons of allocations"}]}]}],"thread_ts":"1608240108.139500","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"1a13d167-773a-48bc-ac77-1599a53e2be8","type":"message","text":"with CodecZlib and CodecZstd","user":"U01GRS159T8","ts":"1608311199.140800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"osms","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"with CodecZlib and CodecZstd"}]}]}],"thread_ts":"1608240108.139500","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"c07eba16-3203-4b53-9915-6328047a490f","type":"message","text":"<@U01GRS159T8>  do you have any code of an example of that? I'd like to see if TranscodingStreams can be improved","user":"U7HAYKY9X","ts":"1608312136.141000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Y+p","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01GRS159T8"},{"type":"text","text":"  do you have any code of an example of that? I'd like to see if TranscodingStreams can be improved"}]}]}],"thread_ts":"1608240108.139500","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"c7d7e7a9-95fa-4af1-8eb1-f053b704d1fe","type":"message","text":"it will take me a bit of time to isolate from the rest of my code","user":"U01GRS159T8","ts":"1608319429.141200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NTs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it will take me a bit of time to isolate from the rest of my code"}]}]}],"thread_ts":"1608240108.139500","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"1eaefdd2-5948-4f0f-9020-ae0bd771618c","type":"message","text":"basically I was using the standard read(::IO, type) calls to read a few bytes at a time","user":"U01GRS159T8","ts":"1608319458.141400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mPfbC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"basically I was using the standard read(::IO, type) calls to read a few bytes at a time"}]}]}],"thread_ts":"1608240108.139500","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"d1352069-0a44-42f7-84e4-0d63f74505a8","type":"message","text":"and it caused tons of allocations that would show up especially when I was doing it in many threads","user":"U01GRS159T8","ts":"1608319476.141600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AYuf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and it caused tons of allocations that would show up especially when I was doing it in many threads"}]}]}],"thread_ts":"1608240108.139500","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"ae2330dc-0f75-4d65-8549-0eab0da4597c","type":"message","text":"so I changed it to use readbytes() into a buffer and then manually managed the buffer and all the problems went away","user":"U01GRS159T8","ts":"1608319510.141800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ynwr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so I changed it to use readbytes() into a buffer and then manually managed the buffer and all the problems went away"}]}]}],"thread_ts":"1608240108.139500","parent_user_id":"U7HAYKY9X"},{"client_msg_id":"0bbc010e-4e57-4025-83eb-86b1ddc91a99","type":"message","text":"which is weird because I know Zstd and probably Zlib have their own internal buffers that are substantial","user":"U01GRS159T8","ts":"1608319538.142000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"irk9N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which is weird because I know Zstd and probably Zlib have their own internal buffers that are substantial"}]}]}],"thread_ts":"1608240108.139500","parent_user_id":"U7HAYKY9X"}]