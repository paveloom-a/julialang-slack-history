[{"client_msg_id":"25c54e4e-8987-4d0b-93f8-16ac41f953f0","type":"message","text":"Hi there! I am stuck with a perf comparison with C code which is almost twice as fast as my julia version (I gain 10% if call julia with fastmath mode, but it still is far from C). Of course I can use threads easily, but that is kind of not the point. Any obvious improvement from the following julia code?\n```using BenchmarkTools\n\ncx(x, side, scale) = x / side * 2 * scale - scale\ncy(y...) = cx(y...) * 1im\n\nfunction solvePixel(i, i_n, side, center, scale)\n    y, x = divrem(i, side)\n    c = cx(x, side, scale) + cy(y, side, scale) + center\n    z = 0im\n    k = 0\n    while (k &lt; i_n)\n        z = z * z + c\n        abs(z) &lt;= 2 ? k += 1 : break \n    end\n    return 1 - k / i_n\nend\n\nfunction res_(idx, i_n, side, center, scale)\n    return UInt8(floor(solvePixel(idx, i_n, side, center, scale) * 255))\nend\n\nfunction main(; i_n=512, side=2048, center=0.4 + 0.4im, scale=0.3)\n    open(\"out.ppm\", \"w\") do io\n        write(io, \"P6 $side $side 255 \")\n        buffer = Matrix{UInt8}(undef, side, side * 3)\n        for i in 0:side - 1\n            tmp = i * side\n            for j in 1:side\n                idx = tmp + j\n                res = res_(idx, i_n, side, center, scale)\n                @inbounds buffer[i + 1,j * 3 - 2:j * 3] .= res\n            end\n        end                     \n        write(io, buffer)       \n    end\nend\n\n@benchmark main()```","user":"U01FR2HFJ7M","ts":"1614914041.036100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"K5nyJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi there! I am stuck with a perf comparison with C code which is almost twice as fast as my julia version (I gain 10% if call julia with fastmath mode, but it still is far from C). Of course I can use threads easily, but that is kind of not the point. Any obvious improvement from the following julia code?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using BenchmarkTools\n\ncx(x, side, scale) = x / side * 2 * scale - scale\ncy(y...) = cx(y...) * 1im\n\nfunction solvePixel(i, i_n, side, center, scale)\n    y, x = divrem(i, side)\n    c = cx(x, side, scale) + cy(y, side, scale) + center\n    z = 0im\n    k = 0\n    while (k < i_n)\n        z = z * z + c\n        abs(z) <= 2 ? k += 1 : break \n    end\n    return 1 - k / i_n\nend\n\nfunction res_(idx, i_n, side, center, scale)\n    return UInt8(floor(solvePixel(idx, i_n, side, center, scale) * 255))\nend\n\nfunction main(; i_n=512, side=2048, center=0.4 + 0.4im, scale=0.3)\n    open(\"out.ppm\", \"w\") do io\n        write(io, \"P6 $side $side 255 \")\n        buffer = Matrix{UInt8}(undef, side, side * 3)\n        for i in 0:side - 1\n            tmp = i * side\n            for j in 1:side\n                idx = tmp + j\n                res = res_(idx, i_n, side, center, scale)\n                @inbounds buffer[i + 1,j * 3 - 2:j * 3] .= res\n            end\n        end                     \n        write(io, buffer)       \n    end\nend\n\n@benchmark main()"}]}]}],"thread_ts":"1614914041.036100","reply_count":24,"reply_users_count":4,"latest_reply":"1614975936.047800","reply_users":["U0179G7FG4F","U01FR2HFJ7M","UJ7DVTVQ8","U67G3QRJM"],"subscribed":false},{"client_msg_id":"01136588-7575-4f3c-8961-c3942a1a84a9","type":"message","text":"Does much change if you replace `abs(z) &lt;= 2 ? k += 1 : break` with `abs2(z) &lt;= 4 ? k += 1 : break`","user":"U0179G7FG4F","ts":"1614916420.036200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TCB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does much change if you replace "},{"type":"text","text":"abs(z) <= 2 ? k += 1 : break","style":{"code":true}},{"type":"text","text":" with "},{"type":"text","text":"abs2(z) <= 4 ? k += 1 : break","style":{"code":true}}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M","reactions":[{"name":"tada","users":["U01FR2HFJ7M","UAUPJLBQX"],"count":2}]},{"client_msg_id":"0ccf9936-8ebe-4430-8ec2-a1e0fb70d279","type":"message","text":"The other obvious performance gain is to do your calculations in terms of x and y instead of `i` and `j`. This would remove a bunch of divisions, which are probably the other slow part of this.","user":"U0179G7FG4F","ts":"1614916512.036400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w0=E","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The other obvious performance gain is to do your calculations in terms of x and y instead of "},{"type":"text","text":"i","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"j","style":{"code":true}},{"type":"text","text":". This would remove a bunch of divisions, which are probably the other slow part of this."}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"dd5228b7-9a1e-4841-bf13-fdeab67a77a2","type":"message","text":"Oh my, just using `abs2`  was enough to beat the C program by 5-10% (which is also doing something similar in the end).\nAs I am improving an existing code, and I never used `im` in Julia I was not expecting something like this.\nThanks <@U0179G7FG4F>","user":"U01FR2HFJ7M","ts":"1614917480.036700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Nyqx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh my, just using "},{"type":"text","text":"abs2","style":{"code":true}},{"type":"text","text":"  was enough to beat the C program by 5-10% (which is also doing something similar in the end).\nAs I am improving an existing code, and I never used "},{"type":"text","text":"im","style":{"code":true}},{"type":"text","text":" in Julia I was not expecting something like this.\nThanks "},{"type":"user","user_id":"U0179G7FG4F"}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"b39f908f-0b36-4370-b9ca-be94251f34af","type":"message","text":"glad that worked. `abs` for complex numbers is a bit of a performance trap because it really looks like it should be fast, but is about 20x slower than `abs2` since it has to do a complex square root","user":"U0179G7FG4F","ts":"1614917788.036900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ALd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"glad that worked. "},{"type":"text","text":"abs","style":{"code":true}},{"type":"text","text":" for complex numbers is a bit of a performance trap because it really looks like it should be fast, but is about 20x slower than "},{"type":"text","text":"abs2","style":{"code":true}},{"type":"text","text":" since it has to do a complex square root"}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"647fb915-9b02-4281-be62-a238c798c021","type":"message","text":"It makes sense mathematically, just I didn't even think about it","user":"U01FR2HFJ7M","ts":"1614918491.037100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dcvs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It makes sense mathematically, just I didn't even think about it"}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"16cdfcf8-e020-4a70-95ce-08fb801a984d","type":"message","text":"For the sake of showing numbers:\nC with -Ofast\n```jeff@jeff-jfli:~/Tests$ time ./mandelfast\n\nreal    0m2,278s\nuser    0m2,202s\nsys     0m0,020s```\nJulia without fast math\n```BenchmarkTools.Trial: \n  memory estimate:  13.25 MiB\n  allocs estimate:  25672\n  --------------\n  minimum time:     2.362 s (0.00% GC)\n  median time:      2.396 s (0.00% GC)\n  mean time:        2.389 s (0.00% GC)\n  maximum time:     2.409 s (0.00% GC)\n  --------------\n  samples:          3\n  evals/sample:     1```\nJulia with fast math\n```BenchmarkTools.Trial: \n  memory estimate:  13.25 MiB\n  allocs estimate:  25672\n  --------------\n  minimum time:     1.584 s (0.00% GC)\n  median time:      1.640 s (0.00% GC)\n  mean time:        1.639 s (0.02% GC)\n  maximum time:     1.692 s (0.00% GC)\n  --------------\n  samples:          4\n  evals/sample:     1```\nJulia with threads (6) and fast maths\n```BenchmarkTools.Trial: \n  memory estimate:  13.27 MiB\n  allocs estimate:  26063\n  --------------\n  minimum time:     277.576 ms (0.00% GC)\n  median time:      366.677 ms (0.00% GC)\n  mean time:        355.744 ms (0.09% GC)\n  maximum time:     485.432 ms (0.00% GC)\n  --------------\n  samples:          15\n  evals/sample:     1```","user":"U01FR2HFJ7M","ts":"1614918703.037300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cZd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For the sake of showing numbers:\nC with -Ofast\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"jeff@jeff-jfli:~/Tests$ time ./mandelfast\n\nreal    0m2,278s\nuser    0m2,202s\nsys     0m0,020s"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Julia without fast math\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"BenchmarkTools.Trial: \n  memory estimate:  13.25 MiB\n  allocs estimate:  25672\n  --------------\n  minimum time:     2.362 s (0.00% GC)\n  median time:      2.396 s (0.00% GC)\n  mean time:        2.389 s (0.00% GC)\n  maximum time:     2.409 s (0.00% GC)\n  --------------\n  samples:          3\n  evals/sample:     1"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Julia with fast math\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"BenchmarkTools.Trial: \n  memory estimate:  13.25 MiB\n  allocs estimate:  25672\n  --------------\n  minimum time:     1.584 s (0.00% GC)\n  median time:      1.640 s (0.00% GC)\n  mean time:        1.639 s (0.02% GC)\n  maximum time:     1.692 s (0.00% GC)\n  --------------\n  samples:          4\n  evals/sample:     1"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Julia with threads (6) and fast maths\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"BenchmarkTools.Trial: \n  memory estimate:  13.27 MiB\n  allocs estimate:  26063\n  --------------\n  minimum time:     277.576 ms (0.00% GC)\n  median time:      366.677 ms (0.00% GC)\n  mean time:        355.744 ms (0.09% GC)\n  maximum time:     485.432 ms (0.00% GC)\n  --------------\n  samples:          15\n  evals/sample:     1"}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"e3ca1b4c-0122-420b-94ed-a2e6ef01bff9","type":"message","text":"I can't see any warning about `abs` in the doc, maybe I should make an issue/PR","user":"U01FR2HFJ7M","ts":"1614919243.037500","team":"T68168MUP","edited":{"user":"U01FR2HFJ7M","ts":"1614919281.000000"},"blocks":[{"type":"rich_text","block_id":"UN6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I can't see any warning about "},{"type":"text","text":"abs","style":{"code":true}},{"type":"text","text":" in the doc, maybe I should make an issue/PR"}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"fe0f38f6-09f0-4b17-890b-614591d12dd6","type":"message","text":"Adding something like \"For complex numbers, consider abs2 if you require high performance\" would probably be a good idea. PRs from new users are always appreciated. I can help if you have questions on how to make one","user":"U0179G7FG4F","ts":"1614923903.038100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ASD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Adding something like \"For complex numbers, consider abs2 if you require high performance\" would probably be a good idea. PRs from new users are always appreciated. I can help if you have questions on how to make one"}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"5c2d125b-a997-4014-8e1e-0b3224f8a2a8","type":"message","text":"`abs` for complex numbers is slow for a reason. If you point users to abs2 for performance, maybe the tradeoff should be made clear?","user":"UJ7DVTVQ8","ts":"1614924084.038300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FaL7e","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"abs","style":{"code":true}},{"type":"text","text":" for complex numbers is slow for a reason. If you point users to abs2 for performance, maybe the tradeoff should be made clear?"}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"e42d8fb4-f08c-40f1-bc67-c7cff72c2e5f","type":"message","text":"A lot of the reason for it is just that while `abs` is a very easy function to think about, it isn't possible to implement quickly. There are very few cases where `abs` has a benefit over `abs2`","user":"U0179G7FG4F","ts":"1614925176.038500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"teB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"A lot of the reason for it is just that while "},{"type":"text","text":"abs","style":{"code":true}},{"type":"text","text":" is a very easy function to think about, it isn't possible to implement quickly. There are very few cases where "},{"type":"text","text":"abs","style":{"code":true}},{"type":"text","text":" has a benefit over "},{"type":"text","text":"abs2","style":{"code":true}}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"5374f4d4-6e0b-451a-b5ed-f33914c6d6a0","type":"message","text":"(the only one I can think of is slightly better overflow/underflow resistance)","user":"U0179G7FG4F","ts":"1614925199.038700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uaZd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(the only one I can think of is slightly better overflow/underflow resistance)"}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"2b26d170-b398-44e8-b507-520759c745b9","type":"message","text":"But it remains the default, as opposed to `Base.FastMath.abs_fast` so someone has decided that it's better to be safe and accurate by default.","user":"UJ7DVTVQ8","ts":"1614927965.038900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Arcw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But it remains the default, as opposed to "},{"type":"text","text":"Base.FastMath.abs_fast","style":{"code":true}},{"type":"text","text":" so someone has decided that it's better to be safe and accurate by default."}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"d107df79-d91e-4e80-9758-ec4b16ca145d","type":"message","text":"Just to clarify, I'm not against hinting at `abs2` for performance in the docstring, I'm just thinking doing so might bring up questions that can be answered at the same time","user":"UJ7DVTVQ8","ts":"1614928160.039100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hpYs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Just to clarify, I'm not against hinting at "},{"type":"text","text":"abs2","style":{"code":true}},{"type":"text","text":" for performance in the docstring, I'm just thinking doing so might bring up questions that can be answered at the same time"}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"4bd3c3a3-d899-486c-93a3-649e4fc7e1e3","type":"message","text":"This is quite an interesting topic. I also think accuracy by default is better. Maybe opening an issue first would be better. I suppose there are other cases that might not be yet documented for this accuracy&lt;-&gt; perf trade-off","user":"U01FR2HFJ7M","ts":"1614934137.039300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"l5H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is quite an interesting topic. I also think accuracy by default is better. Maybe opening an issue first would be better. I suppose there are other cases that might not be yet documented for this accuracy<-> perf trade-off"}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"1a802a15-598a-4606-b8d6-4a9b0a88df41","type":"message","text":"`abs` should be square root of a real number (which is pretty fast), not a complex number?","user":"U67G3QRJM","ts":"1614975661.045900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QyIsI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"abs","style":{"code":true}},{"type":"text","text":" should be square root of a real number (which is pretty fast), not a complex number?"}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"f8f9a022-db56-4485-8921-28d7346a1a90","type":"message","text":"sorry yeah. It's a real square root, but that still is noticably slower than just `a^2+b^2`","user":"U0179G7FG4F","ts":"1614975694.046100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Oh43K","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"sorry yeah. It's a real square root, but that still is noticably slower than just "},{"type":"text","text":"a^2+b^2","style":{"code":true}}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"51b4e6bd-c33c-4769-bbfb-c666d860fdd7","type":"message","text":"Ah but there’s some overflow nonsense going on?","user":"U67G3QRJM","ts":"1614975695.046300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RTfvW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah but there’s some overflow nonsense going on?"}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"37e833b5-1c8c-4d7d-a1f4-56c0df739827","type":"message","text":"I don’t see why it should be so much slower","user":"U67G3QRJM","ts":"1614975704.046500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eKCI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don’t see why it should be so much slower"}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"1f9e8363-b499-4e98-a0cc-435b5ca2a385","type":"message","text":"It should basically be `sqrt(abs2(z))`","user":"U67G3QRJM","ts":"1614975718.046700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KxvyR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It should basically be "},{"type":"text","text":"sqrt(abs2(z))","style":{"code":true}}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"03f5b823-2ea9-4498-9dbf-baa4ad263ce7","type":"message","text":"and real `sqrt` is fast","user":"U67G3QRJM","ts":"1614975738.046900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qv4cD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and real "},{"type":"text","text":"sqrt","style":{"code":true}},{"type":"text","text":" is fast"}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"61b00a5f-6f88-4561-8e41-f898e10c8db4","type":"message","text":"Oh. I got the reason wrong. It's that it uses hypot","user":"U0179G7FG4F","ts":"1614975777.047100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1UVg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh. I got the reason wrong. It's that it uses hypot"}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"3163174d-95d5-4d7d-a827-e49e00401067","type":"message","text":"and that is slow?","user":"U67G3QRJM","ts":"1614975851.047300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PNZm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and that is slow?"}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"b5c99d76-a56f-4652-805e-ad06bd44af90","type":"message","text":"yeah. It does a bunch of math to get accurate rounding","user":"U0179G7FG4F","ts":"1614975882.047500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rVN7/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah. It does a bunch of math to get accurate rounding"}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M","reactions":[{"name":"+1","users":["U67G3QRJM"],"count":1}]},{"client_msg_id":"ae2cbee6-ff03-41d6-878e-f4456699a08e","type":"message","text":"It could probably be made faster by just doing the obvious thing in extended precision. I'll try it out and see if it helps","user":"U0179G7FG4F","ts":"1614975936.047800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wjlZM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It could probably be made faster by just doing the obvious thing in extended precision. I'll try it out and see if it helps"}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M"}]