[{"client_msg_id":"25c54e4e-8987-4d0b-93f8-16ac41f953f0","type":"message","text":"Hi there! I am stuck with a perf comparison with C code which is almost twice as fast as my julia version (I gain 10% if call julia with fastmath mode, but it still is far from C). Of course I can use threads easily, but that is kind of not the point. Any obvious improvement from the following julia code?\n```using BenchmarkTools\n\ncx(x, side, scale) = x / side * 2 * scale - scale\ncy(y...) = cx(y...) * 1im\n\nfunction solvePixel(i, i_n, side, center, scale)\n    y, x = divrem(i, side)\n    c = cx(x, side, scale) + cy(y, side, scale) + center\n    z = 0im\n    k = 0\n    while (k &lt; i_n)\n        z = z * z + c\n        abs(z) &lt;= 2 ? k += 1 : break \n    end\n    return 1 - k / i_n\nend\n\nfunction res_(idx, i_n, side, center, scale)\n    return UInt8(floor(solvePixel(idx, i_n, side, center, scale) * 255))\nend\n\nfunction main(; i_n=512, side=2048, center=0.4 + 0.4im, scale=0.3)\n    open(\"out.ppm\", \"w\") do io\n        write(io, \"P6 $side $side 255 \")\n        buffer = Matrix{UInt8}(undef, side, side * 3)\n        for i in 0:side - 1\n            tmp = i * side\n            for j in 1:side\n                idx = tmp + j\n                res = res_(idx, i_n, side, center, scale)\n                @inbounds buffer[i + 1,j * 3 - 2:j * 3] .= res\n            end\n        end                     \n        write(io, buffer)       \n    end\nend\n\n@benchmark main()```","user":"U01FR2HFJ7M","ts":"1614914041.036100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"K5nyJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi there! I am stuck with a perf comparison with C code which is almost twice as fast as my julia version (I gain 10% if call julia with fastmath mode, but it still is far from C). Of course I can use threads easily, but that is kind of not the point. Any obvious improvement from the following julia code?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using BenchmarkTools\n\ncx(x, side, scale) = x / side * 2 * scale - scale\ncy(y...) = cx(y...) * 1im\n\nfunction solvePixel(i, i_n, side, center, scale)\n    y, x = divrem(i, side)\n    c = cx(x, side, scale) + cy(y, side, scale) + center\n    z = 0im\n    k = 0\n    while (k < i_n)\n        z = z * z + c\n        abs(z) <= 2 ? k += 1 : break \n    end\n    return 1 - k / i_n\nend\n\nfunction res_(idx, i_n, side, center, scale)\n    return UInt8(floor(solvePixel(idx, i_n, side, center, scale) * 255))\nend\n\nfunction main(; i_n=512, side=2048, center=0.4 + 0.4im, scale=0.3)\n    open(\"out.ppm\", \"w\") do io\n        write(io, \"P6 $side $side 255 \")\n        buffer = Matrix{UInt8}(undef, side, side * 3)\n        for i in 0:side - 1\n            tmp = i * side\n            for j in 1:side\n                idx = tmp + j\n                res = res_(idx, i_n, side, center, scale)\n                @inbounds buffer[i + 1,j * 3 - 2:j * 3] .= res\n            end\n        end                     \n        write(io, buffer)       \n    end\nend\n\n@benchmark main()"}]}]}],"thread_ts":"1614914041.036100","reply_count":4,"reply_users_count":2,"latest_reply":"1614917788.036900","reply_users":["U0179G7FG4F","U01FR2HFJ7M"],"subscribed":false},{"client_msg_id":"01136588-7575-4f3c-8961-c3942a1a84a9","type":"message","text":"Does much change if you replace `abs(z) &lt;= 2 ? k += 1 : break` with `abs2(z) &lt;= 4 ? k += 1 : break`","user":"U0179G7FG4F","ts":"1614916420.036200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TCB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does much change if you replace "},{"type":"text","text":"abs(z) <= 2 ? k += 1 : break","style":{"code":true}},{"type":"text","text":" with "},{"type":"text","text":"abs2(z) <= 4 ? k += 1 : break","style":{"code":true}}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M","reactions":[{"name":"tada","users":["U01FR2HFJ7M"],"count":1}]},{"client_msg_id":"0ccf9936-8ebe-4430-8ec2-a1e0fb70d279","type":"message","text":"The other obvious performance gain is to do your calculations in terms of x and y instead of `i` and `j`. This would remove a bunch of divisions, which are probably the other slow part of this.","user":"U0179G7FG4F","ts":"1614916512.036400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w0=E","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The other obvious performance gain is to do your calculations in terms of x and y instead of "},{"type":"text","text":"i","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"j","style":{"code":true}},{"type":"text","text":". This would remove a bunch of divisions, which are probably the other slow part of this."}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"dd5228b7-9a1e-4841-bf13-fdeab67a77a2","type":"message","text":"Oh my, just using `abs2`  was enough to beat the C program by 5-10% (which is also doing something similar in the end).\nAs I am improving an existing code, and I never used `im` in Julia I was not expecting something like this.\nThanks <@U0179G7FG4F>","user":"U01FR2HFJ7M","ts":"1614917480.036700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Nyqx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh my, just using "},{"type":"text","text":"abs2","style":{"code":true}},{"type":"text","text":"  was enough to beat the C program by 5-10% (which is also doing something similar in the end).\nAs I am improving an existing code, and I never used "},{"type":"text","text":"im","style":{"code":true}},{"type":"text","text":" in Julia I was not expecting something like this.\nThanks "},{"type":"user","user_id":"U0179G7FG4F"}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M"},{"client_msg_id":"b39f908f-0b36-4370-b9ca-be94251f34af","type":"message","text":"glad that worked. `abs` for complex numbers is a bit of a performance trap because it really looks like it should be fast, but is about 20x slower than `abs2` since it has to do a complex square root","user":"U0179G7FG4F","ts":"1614917788.036900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ALd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"glad that worked. "},{"type":"text","text":"abs","style":{"code":true}},{"type":"text","text":" for complex numbers is a bit of a performance trap because it really looks like it should be fast, but is about 20x slower than "},{"type":"text","text":"abs2","style":{"code":true}},{"type":"text","text":" since it has to do a complex square root"}]}]}],"thread_ts":"1614914041.036100","parent_user_id":"U01FR2HFJ7M"}]