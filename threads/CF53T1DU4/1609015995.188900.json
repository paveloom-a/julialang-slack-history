[{"client_msg_id":"7e136000-a164-491e-a412-59320db940b8","type":"message","text":"I wrote a simple function to sum integers from 1 to n as a simple test of BigInt:\n```function sum_n(n::BigInt)::BigInt\n  val = BigInt(0)\n\n  while n &gt; 0\n    val += n\n    n -=  1\n  end\n\n  val\nend\nsum_n(BigInt(10))\n@time println(sum_n(BigInt(6000000))) # 6 Million```\nIt takes roughly 2.2 seconds to sum 6M numbers. By comparison, the following Racket function can sum 1B numbers in about the same amount of time. The Julia code has 30M in allocations which seems crazy. Does the BigInt implementation allocate a new BigInt for each arithmetic operation?\n```(define (sum-n n [result 0])\n  (if (&gt; n 0) \n      (sum-n (- n 1) (+ result n))\n      result))\n\n(time (sum-n 1000000000)) ; 1 Billion```","user":"U014ATN949F","ts":"1609015995.188900","team":"T68168MUP","edited":{"user":"U014ATN949F","ts":"1609016087.000000"},"blocks":[{"type":"rich_text","block_id":"cIfOH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I wrote a simple function to sum integers from 1 to n as a simple test of BigInt:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function sum_n(n::BigInt)::BigInt\n  val = BigInt(0)\n\n  while n > 0\n    val += n\n    n -=  1\n  end\n\n  val\nend\nsum_n(BigInt(10))\n@time println(sum_n(BigInt(6000000))) # 6 Million"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"It takes roughly 2.2 seconds to sum 6M numbers. By comparison, the following Racket function can sum 1B numbers in about the same amount of time. The Julia code has 30M in allocations which seems crazy. Does the BigInt implementation allocate a new BigInt for each arithmetic operation?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"(define (sum-n n [result 0])\n  (if (> n 0) \n      (sum-n (- n 1) (+ result n))\n      result))\n\n(time (sum-n 1000000000)) ; 1 Billion"}]}]}],"thread_ts":"1609015995.188900","reply_count":225,"reply_users_count":6,"latest_reply":"1609093215.238000","reply_users":["UH24GRBLL","U014ATN949F","U7HAYKY9X","UDD5Z7FLZ","UD0NS8PDF","UB7JS9CHF"],"subscribed":false},{"client_msg_id":"25cd9479-b9c8-49de-b645-7cc2a47d5f58","type":"message","text":"well that’s another concern","user":"UD0NS8PDF","ts":"1609016610.194700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VXqS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well that’s another concern"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"0635fc5f-6132-4e47-bc65-8dda5b9924cb","type":"message","text":"but the numbers aren’t big enough that it has to be using BigInt, so maybe it’s not?","user":"UD0NS8PDF","ts":"1609016630.194900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"b/E=q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but the numbers aren’t big enough that it has to be using BigInt, so maybe it’s not?"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"020f1125-0590-4932-951e-2503b39e8782","type":"message","text":"Syx, that's another level since there's machine support for those transforms","user":"UH24GRBLL","ts":"1609016635.195100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6WZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Syx, that's another level since there's machine support for those transforms"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"2bdd1f2e-4ab8-4f8e-9660-723a30942d7a","type":"message","text":"the julia compiler is not aware of GMP implementation details - those transforms are not necessarily available here.","user":"UH24GRBLL","ts":"1609016652.195300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RLpN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the julia compiler is not aware of GMP implementation details - those transforms are not necessarily available here."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"41ff443a-c5dd-4263-a2ef-9c2d8352d371","type":"message","text":"you can investigate `Base.GMP` if you want to dig for more stuff","user":"UH24GRBLL","ts":"1609016681.195500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"k=Sh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can investigate "},{"type":"text","text":"Base.GMP","style":{"code":true}},{"type":"text","text":" if you want to dig for more stuff"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"dfd09fae-1b10-454c-bc38-621cced7cf28","type":"message","text":"and you can also take a look at that module to see how you could implement/call the mutating versions","user":"UH24GRBLL","ts":"1609016704.195700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5z6w","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and you can also take a look at that module to see how you could implement/call the mutating versions"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"61758d32-ebcf-4e80-9ddb-c31ff56e9ac1","type":"message","text":"Other than that, just saying \"well ask scheme developers then :)\" seems needlessly passive aggressive to me","user":"UH24GRBLL","ts":"1609016728.195900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bxVSD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Other than that, just saying \"well ask scheme developers then :)\" seems needlessly passive aggressive to me"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F","reactions":[{"name":"+1","users":["UMY1LV01G"],"count":1}]},{"client_msg_id":"0774d2ed-261d-4729-85d9-474da4e8ef69","type":"message","text":"We should ask Haskell people, the big integer performance in Haskell is very good :smile:","user":"UDD5Z7FLZ","ts":"1609016763.196100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7aKW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We should ask Haskell people, the big integer performance in Haskell is very good "},{"type":"emoji","name":"smile"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"5c6731a6-bf52-466f-8205-1c41294acb86","type":"message","text":"In this case, `Base.GMP.MPZ.add!` is probably what you're looking for","user":"UH24GRBLL","ts":"1609016815.196300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O+Os","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In this case, "},{"type":"text","text":"Base.GMP.MPZ.add!","style":{"code":true}},{"type":"text","text":" is probably what you're looking for"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"654b1271-f5c4-444c-9e5a-fdc3d3edcb1b","type":"message","text":"I think it would be nice to have a fast BigInt implementation in Julia. I would bet Python's implementation is way faster.","user":"U7HAYKY9X","ts":"1609016831.196500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ewN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think it would be nice to have a fast BigInt implementation in Julia. I would bet Python's implementation is way faster."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"302a9a9a-530c-4668-b595-21efd719ba85","type":"message","text":"They all call to GMP iirc","user":"UH24GRBLL","ts":"1609016852.196700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rMc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"They all call to GMP iirc"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"0dfd96fb-5ed3-4f50-8326-9ae20e18e1ea","type":"message","text":"because as it turns out, writing those algorithms is itself not a trivial task","user":"UH24GRBLL","ts":"1609016863.196900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OrQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"because as it turns out, writing those algorithms is itself not a trivial task"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F","reactions":[{"name":"point_up","users":["U67G3QRJM"],"count":1}]},{"client_msg_id":"6b7a27be-48ef-425e-92af-aed51e6e9aa9","type":"message","text":"I know because I've tried","user":"UH24GRBLL","ts":"1609016875.197100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tFi+q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I know because I've tried"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"7e64a3e3-54a9-4994-9b00-a9a9040c16c1","type":"message","text":"In theory, the algorithms are easy. In practice, you have to work with things like cache sizes and locality, which is hard &gt;&lt;","user":"UDD5Z7FLZ","ts":"1609016945.197300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"J4I","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In theory, the algorithms are easy. In practice, you have to work with things like cache sizes and locality, which is hard ><"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"0788574b-04bb-415f-9cdc-06b83ca456b2","type":"message","text":"<@UH24GRBLL> yes, that works! I couldn't find it in the docs:\n```function sum_n(n::BigInt)::BigInt\n  neg1 = BigInt(-1)\n  val = BigInt(0)\n\n  while n &gt; 0\n    Base.GMP.MPZ.add!(val, val, n)\n    Base.GMP.MPZ.add!(n, n, neg1)\n  end\n\n  val\nend\nsum_n(BigInt(10))\n@time println(sum_n(BigInt(6000000))) # 6 Million```","user":"U014ATN949F","ts":"1609017004.197500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jGyr","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH24GRBLL"},{"type":"text","text":" yes, that works! I couldn't find it in the docs:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function sum_n(n::BigInt)::BigInt\n  neg1 = BigInt(-1)\n  val = BigInt(0)\n\n  while n > 0\n    Base.GMP.MPZ.add!(val, val, n)\n    Base.GMP.MPZ.add!(n, n, neg1)\n  end\n\n  val\nend\nsum_n(BigInt(10))\n@time println(sum_n(BigInt(6000000))) # 6 Million"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"fb3104b3-bc10-42bb-a251-4d0ce50bd8cd","type":"message","text":"no Syx, the description sounds devilishly easy - but just representing the data structure they're using and using them correctly and performantly is not.","user":"UH24GRBLL","ts":"1609017082.197700","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1609017084.000000"},"blocks":[{"type":"rich_text","block_id":"QKH1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no Syx, the description sounds devilishly easy - but just representing the data structure they're using and using them correctly and performantly is not."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"fde312ca-6411-4a3a-ac2d-742a54d0e134","type":"message","text":"Although, I suppose that requires implementing everything to do that i.e. if I were to do a matrix multiply, it would be allocating new BigInt's everywhere.","user":"U014ATN949F","ts":"1609017099.198000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hJzK+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Although, I suppose that requires implementing everything to do that i.e. if I were to do a matrix multiply, it would be allocating new BigInt's everywhere."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"199acd03-08d4-40d2-8250-dcaae53abc64","type":"message","text":"Yes.","user":"UH24GRBLL","ts":"1609017117.198200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yBk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"471e08a5-d686-41aa-9bee-eebbc43ee4ba","type":"message","text":"If you need to multiply BigInt matrices, I can confirmed that `Nemo` works well, though loading that library takes forever.","user":"UDD5Z7FLZ","ts":"1609017137.198400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cnfW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you need to multiply BigInt matrices, I can confirmed that "},{"type":"text","text":"Nemo","style":{"code":true}},{"type":"text","text":" works well, though loading that library takes forever."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F","reactions":[{"name":"+1","users":["U014ATN949F"],"count":1}]},{"client_msg_id":"392890cc-d7ed-4d62-9971-467a62022f32","type":"message","text":"Supporting the basic stuff in a slow manner is easy, supporting _every mutating function for all use cases where we need `Number`_ is not.","user":"UH24GRBLL","ts":"1609017163.198600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EW73","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Supporting the basic stuff in a slow manner is easy, supporting "},{"type":"text","text":"every mutating function for all use cases where we need ","style":{"italic":true}},{"type":"text","text":"Number","style":{"italic":true,"code":true}},{"type":"text","text":" is not."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"0901f9a9-cefc-4295-b606-2c95f072f371","type":"message","text":"```ulia&gt; function ∑(n)\n           Val = zero(n)\n           \n           for i in 1:n\n               Val += i\n           end\n           \n           Val\n       end;\n\njulia&gt; function ∑2(n)\n           Val = zero(n)\n           \n           for i in 1:n\n               Base.GMP.MPZ.add!(Val, i)\n           end\n           \n           Val\n       end;\n\njulia&gt; @btime ∑(big(5_000_000))\n  2.743 s (50000004 allocations: 1.04 GiB)\n12500002500000\n\njulia&gt; @btime ∑2(big(5_000_000))\n  2.484 s (40000005 allocations: 839.23 MiB)\n12500002500000```\nI tried this, but this doesn't work, because the for loop secretly uses the immutable add.","user":"UDD5Z7FLZ","ts":"1609017266.200000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kLL","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"ulia> function ∑(n)\n           Val = zero(n)\n           \n           for i in 1:n\n               Val += i\n           end\n           \n           Val\n       end;\n\njulia> function ∑2(n)\n           Val = zero(n)\n           \n           for i in 1:n\n               Base.GMP.MPZ.add!(Val, i)\n           end\n           \n           Val\n       end;\n\njulia> @btime ∑(big(5_000_000))\n  2.743 s (50000004 allocations: 1.04 GiB)\n12500002500000\n\njulia> @btime ∑2(big(5_000_000))\n  2.484 s (40000005 allocations: 839.23 MiB)\n12500002500000"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I tried this, but this doesn't work, because the for loop secretly uses the immutable add."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"27d992bc-05ca-4d76-ad13-cba13f70beb3","type":"message","text":"This may just be a hypothetical concern for me. I _may_ be able to do everything I need to use Julia for with Int64 and Float64.","user":"U014ATN949F","ts":"1609017279.200200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5Wz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This may just be a hypothetical concern for me. I "},{"type":"text","text":"may","style":{"italic":true}},{"type":"text","text":" be able to do everything I need to use Julia for with Int64 and Float64."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"e7fb312c-8b17-433f-b949-f1a042c7dd7b","type":"message","text":"<@UDD5Z7FLZ> Maybe with `one(n):n`?","user":"UH24GRBLL","ts":"1609017325.200800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gXQ","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UDD5Z7FLZ"},{"type":"text","text":" Maybe with "},{"type":"text","text":"one(n):n","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"c17a13c2-6c2b-49cd-ae90-78eefb822e6c","type":"message","text":"Well Brian, what do you want to use it for?","user":"UH24GRBLL","ts":"1609017354.201000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pGO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well Brian, what do you want to use it for?"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"209e27ec-23e9-4645-9177-0bfd61c35967","type":"message","text":"<@UH24GRBLL> It is promoted at compile time\n```julia&gt; 1:big(100) |&gt; typeof\nUnitRange{BigInt}```","user":"UDD5Z7FLZ","ts":"1609017391.201200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9sK","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH24GRBLL"},{"type":"text","text":" It is promoted at compile time\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> 1:big(100) |> typeof\nUnitRange{BigInt}"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"df6f5ab8-9dd1-4987-b62d-1125301c4f52","type":"message","text":"I've recently started studying more statistics/probability/linear algebra, etc., and I'm considering \"data sciency\" stuff as well as AI/machine learning.","user":"U014ATN949F","ts":"1609017402.201400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"H7I0k","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I've recently started studying more statistics/probability/linear algebra, etc., and I'm considering \"data sciency\" stuff as well as AI/machine learning."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"6f3ea82c-6f78-44b5-82bd-623731690092","type":"message","text":"well it still has to create each BigInt in each iteration, no?","user":"UH24GRBLL","ts":"1609017413.201600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L9fRw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well it still has to create each BigInt in each iteration, no?"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"565e577d-3d27-454c-9fe7-f5259ee069be","type":"message","text":"Well ML is really doing Float32 and Float64 AT BEST, since they're doing GPU stuff anyway","user":"UH24GRBLL","ts":"1609017445.201800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"z3o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well ML is really doing Float32 and Float64 AT BEST, since they're doing GPU stuff anyway"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F","reactions":[{"name":"point_up","users":["UMY1LV01G","U9YTNSWCA"],"count":2}]},{"client_msg_id":"1ccb970f-ae5f-4723-9ed6-57438e797f42","type":"message","text":"Yeah, but changing it to `one(n):n` doesn't help as a UnitRange doesn't actually store this information.","user":"UDD5Z7FLZ","ts":"1609017457.202000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DTcF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, but changing it to "},{"type":"text","text":"one(n):n","style":{"code":true}},{"type":"text","text":" doesn't help as a UnitRange doesn't actually store this information."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"1340bf8c-a9f1-44ff-96aa-4ffce1771d7a","type":"message","text":"Given Julia's emphasis on performance, per my comment above, my guess is that for much of that, native types are used.","user":"U014ATN949F","ts":"1609017471.202200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ExeND","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Given Julia's emphasis on performance, per my comment above, my guess is that for much of that, native types are used."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"9ee59213-f9a0-416f-afab-4805c834ec4c","type":"message","text":"And Stats and Linear Algebra are also quite happy with Int64 and Float64","user":"UH24GRBLL","ts":"1609017475.202400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5US","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And Stats and Linear Algebra are also quite happy with Int64 and Float64"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"ebf93055-0f0b-4efb-bf53-59db3731cf9c","type":"message","text":"Yes","user":"UH24GRBLL","ts":"1609017479.202600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xFI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"638027da-7d6b-4918-9ecc-d9c18fdb7f29","type":"message","text":"Hmmmm I wonder if iteration over UnitRange{BigInt}  can use the mutating version to iterate or if that violates some invariant we guarantee","user":"UH24GRBLL","ts":"1609017661.202800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mL7Li","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmmmm I wonder if iteration over UnitRange{BigInt}  can use the mutating version to iterate or if that violates some invariant we guarantee"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"164fa830-37da-460d-a2e3-cad9371ad9b6","type":"message","text":"`collect` could still allocate","user":"UH24GRBLL","ts":"1609017674.203000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9s60z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"collect","style":{"code":true}},{"type":"text","text":" could still allocate"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"89aad267-7b44-4246-bf74-966f3615c937","type":"message","text":"```julia&gt; @btime ∑2(big(5_000_000))\n  3.915 s (40000005 allocations: 839.23 MiB)\n12500002500000\n\njulia&gt; function ∑3(n)\n                  val = zero(n)\n                  for i in one(n):one(n):n\n                      Base.GMP.MPZ.add!(val, i)\n                  end\n                  val\n        end\n∑3 (generic function with 1 method)\n\njulia&gt; @btime ∑3(big(5_000_000))\n  969.387 ms (10000021 allocations: 228.88 MiB)\n12500002500000```","user":"UD0NS8PDF","ts":"1609017708.203200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rT9d8","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @btime ∑2(big(5_000_000))\n  3.915 s (40000005 allocations: 839.23 MiB)\n12500002500000\n\njulia> function ∑3(n)\n                  val = zero(n)\n                  for i in one(n):one(n):n\n                      Base.GMP.MPZ.add!(val, i)\n                  end\n                  val\n        end\n∑3 (generic function with 1 method)\n\njulia> @btime ∑3(big(5_000_000))\n  969.387 ms (10000021 allocations: 228.88 MiB)\n12500002500000"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"b5eb473b-7e5e-4247-ab35-99bc6405843b","type":"message","text":"is there an instability in the iteration of `UnitRange{BigInt}`?","user":"UH24GRBLL","ts":"1609017740.203400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9fc=e","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is there an instability in the iteration of "},{"type":"text","text":"UnitRange{BigInt}","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"af82bfed-efa9-4857-a610-894dcf6829cf","type":"message","text":"that seems weird","user":"UH24GRBLL","ts":"1609017748.203600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SCSC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that seems weird"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"b6cd2519-dedc-4b91-8485-ca8969f0f211","type":"message","text":"the StepRange is more optimized, it seems :thinking_face:","user":"UH24GRBLL","ts":"1609017785.203800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"22K","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the StepRange is more optimized, it seems "},{"type":"emoji","name":"thinking_face"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"50b5313e-5749-44ec-99fd-5b176522a37e","type":"message","text":"I don’t know what it should be called, but I guess UnitRange assumes the step is `1::Int` somewhere (although `1:big(10) |&gt; step |&gt; typeof` does not report this)","user":"UD0NS8PDF","ts":"1609017825.204000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"u2HCt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don’t know what it should be called, but I guess UnitRange assumes the step is "},{"type":"text","text":"1::Int","style":{"code":true}},{"type":"text","text":" somewhere (although "},{"type":"text","text":"1:big(10) |> step |> typeof","style":{"code":true}},{"type":"text","text":" does not report this)"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"dfc260d4-db20-4f96-8f25-4c3da69c9e17","type":"message","text":"```julia&gt; @edit iterate(1:BigInt(10))\nERROR: IOError: stat: host is down (EHOSTDOWN) for file \"range.jl\"```\nwell that's not what I expected","user":"UH24GRBLL","ts":"1609017890.204200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"q8q","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @edit iterate(1:BigInt(10))\nERROR: IOError: stat: host is down (EHOSTDOWN) for file \"range.jl\""}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nwell that's not what I expected"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"da70d618-2994-480a-86fb-1a8b945846cf","type":"message","text":"Here’s what that shows me:\n```iterate(r::OrdinalRange) = isempty(r) ? nothing : (first(r), first(r))\n\nfunction iterate(r::OrdinalRange{T}, i) where {T}\n    @_inline_meta\n    i == last(r) &amp;&amp; return nothing\n    next = convert(T, i + step(r))\n    (next, next)\nend```","user":"UD0NS8PDF","ts":"1609017954.204400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eBvbe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Here’s what that shows me:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"iterate(r::OrdinalRange) = isempty(r) ? nothing : (first(r), first(r))\n\nfunction iterate(r::OrdinalRange{T}, i) where {T}\n    @_inline_meta\n    i == last(r) && return nothing\n    next = convert(T, i + step(r))\n    (next, next)\nend"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"ace80b53-3af4-49f2-9d86-60b18e0d03b4","type":"message","text":"yeah navigated there manually with `@which`","user":"UH24GRBLL","ts":"1609017990.204700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kn4z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah navigated there manually with "},{"type":"text","text":"@which","style":{"code":true}}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"7a772ad2-732a-4809-9cce-46a7af9a1bfd","type":"message","text":"both `1:BigInt(10)` and `1:1:BigInt(10)` are calling the same methods, but compiling differently","user":"UH24GRBLL","ts":"1609018928.204900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"M+O","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"both "},{"type":"text","text":"1:BigInt(10)","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"1:1:BigInt(10)","style":{"code":true}},{"type":"text","text":" are calling the same methods, but compiling differently"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"36d16836-e513-4a0a-83cd-0a4c04b0d18e","type":"message","text":"very interesting","user":"UH24GRBLL","ts":"1609018946.205100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6yc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"very interesting"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"02b67b6a-e8cc-43fc-b2b5-b3a30dac4337","type":"message","text":"this will probably be an interesting github issue","user":"UH24GRBLL","ts":"1609018970.205300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yCKZ0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this will probably be an interesting github issue"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"82d921fa-844e-4216-9517-32ce87407323","type":"message","text":"<https://github.com/JuliaLang/julia/issues/39008>","user":"UH24GRBLL","ts":"1609019408.205500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jFlt","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/issues/39008"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F","reactions":[{"name":"+1","users":["U014ATN949F"],"count":1}]},{"client_msg_id":"731c9532-eba6-42d0-95c9-c3bd6a38aeea","type":"message","text":"Yes it’s pretty odd. Iterating Int &amp; converting afterwards also turns out to be a bit quicker. And avoiding `Int` entirely is another factor of 10:\n```julia&gt; function ∑5!(n)\n           val = zero(n)\n           zed = zero(n)\n           inc = -one(n)\n           while n &gt; zed\n               Base.GMP.MPZ.add!(val, n)\n               Base.GMP.MPZ.add!(n, inc)\n           end\n           val\n        end\n∑5! (generic function with 1 method)\n\njulia&gt; @btime ∑5!(big(5_000_000))\n  73.343 ms (12 allocations: 216 bytes)```","user":"UD0NS8PDF","ts":"1609019433.205700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OAVJP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes it’s pretty odd. Iterating Int & converting afterwards also turns out to be a bit quicker. And avoiding "},{"type":"text","text":"Int","style":{"code":true}},{"type":"text","text":" entirely is another factor of 10:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function ∑5!(n)\n           val = zero(n)\n           zed = zero(n)\n           inc = -one(n)\n           while n > zed\n               Base.GMP.MPZ.add!(val, n)\n               Base.GMP.MPZ.add!(n, inc)\n           end\n           val\n        end\n∑5! (generic function with 1 method)\n\njulia> @btime ∑5!(big(5_000_000))\n  73.343 ms (12 allocations: 216 bytes)"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"b445392e-4214-431a-952c-1f804cf4f492","type":"message","text":"yep","user":"UH24GRBLL","ts":"1609019791.206000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lwc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yep"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"4d04730a-8a59-44de-abd3-a1a6f7cef3d3","type":"message","text":"posted basically that same version in the github issue as well","user":"UH24GRBLL","ts":"1609019801.206200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1PgU7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"posted basically that same version in the github issue as well"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"6d8ed9dd-5ba6-4f36-b7e4-2a7bae0e5754","type":"message","text":"oh right, I just found it!","user":"UD0NS8PDF","ts":"1609019861.206400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"f11","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh right, I just found it!"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"b96f253b-b19c-4a0e-8ca4-2de2d049e341","type":"message","text":"Is there a use case for this, BTW? typemax(Int) / (4GHz) = 80 years","user":"UD0NS8PDF","ts":"1609020238.206600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GRw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a use case for this, BTW? typemax(Int) / (4GHz) = 80 years"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"e789aefc-f228-4aa9-9426-b88d07a6a26f","type":"message","text":"Well, other than speed = amazing? Not sure, but even iterating over smaller ranges is slower than necessary","user":"UH24GRBLL","ts":"1609020322.206800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Uwp82","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well, other than speed = amazing? Not sure, but even iterating over smaller ranges is slower than necessary"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"fad165c5-ea62-41fb-a6c0-a3b844b421c8","type":"message","text":"and since the fix seems easy enough and simple to maintain, not sure if there's an argument against it","user":"UH24GRBLL","ts":"1609020347.207000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JJU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and since the fix seems easy enough and simple to maintain, not sure if there's an argument against it"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"2c47f1a8-4cc2-4aae-9244-9d787d0a663f","type":"message","text":"Sure, the iteration fix is neat &amp; might be fun. But maybe knowing what it’s actually for might point to other issues, etc","user":"UD0NS8PDF","ts":"1609020450.207200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Rsgj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sure, the iteration fix is neat & might be fun. But maybe knowing what it’s actually for might point to other issues, etc"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"0c92e871-a499-4a5d-8ebc-f366eba5bb30","type":"message","text":"I guess other issues are \"use more mutating functions for BigInt\" in general","user":"UH24GRBLL","ts":"1609020478.207400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Y5q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess other issues are \"use more mutating functions for BigInt\" in general"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"534e251c-f924-47ba-84c9-f7ef700ae042","type":"message","text":"but using those is very situation dependent and ends in \"specialize every LinearAlgebra call for BigInt to use more mutating stuff\"","user":"UH24GRBLL","ts":"1609020509.207600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iVD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but using those is very situation dependent and ends in \"specialize every LinearAlgebra call for BigInt to use more mutating stuff\""}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"6ba3c139-f6f2-4720-8612-9c4879118a4f","type":"message","text":"Yes. Does fma work, would perhaps be a low-hanging factor of 2.","user":"UD0NS8PDF","ts":"1609020543.207800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VZc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes. Does fma work, would perhaps be a low-hanging factor of 2."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"bba4adf7-a252-4feb-b3aa-ab7ccfb39a04","type":"message","text":"everything that you can find in `Base.GMP.MPZ` is possibly useful for doing that, yes","user":"UH24GRBLL","ts":"1609020582.208000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lc+7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"everything that you can find in "},{"type":"text","text":"Base.GMP.MPZ","style":{"code":true}},{"type":"text","text":" is possibly useful for doing that, yes"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"9f6b64a1-daaa-4b8a-bbb8-550bfa99dbf4","type":"message","text":"I ask also because I’ve never in my life wanted BigInt, while BigFloat has lots of obvious-to-me uses.","user":"UD0NS8PDF","ts":"1609020608.208200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LMpPC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I ask also because I’ve never in my life wanted BigInt, while BigFloat has lots of obvious-to-me uses."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"c4d9cf44-7c28-4c9d-8a02-f0d244789ec6","type":"message","text":"Well I wanted to compute Ackermann(4,3) at some point, but even that is more academic","user":"UH24GRBLL","ts":"1609020629.208400","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1609020633.000000"},"blocks":[{"type":"rich_text","block_id":"fvp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well I wanted to compute Ackermann(4,3) at some point, but even that is more academic"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F","reactions":[{"name":"+1","users":["UD0NS8PDF"],"count":1}]},{"client_msg_id":"7eaad815-3823-42e8-b24d-d047493c6b01","type":"message","text":"there's no built in fma because it doesn't make sense at that level (you're basically adding large chunks of memory, there's almost no fusing you can do)","user":"UH24GRBLL","ts":"1609020683.208700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CAy1I","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there's no built in fma because it doesn't make sense at that level (you're basically adding large chunks of memory, there's almost no fusing you can do)"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"6f42f45d-7f64-4665-857a-297e22dfabfc","type":"message","text":"well, I guess you could add in the same loop","user":"UH24GRBLL","ts":"1609020692.208900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Z0Lz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well, I guess you could add in the same loop"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"b4479f6c-ffbf-47d6-9c89-ab416727cac5","type":"message","text":"but it's not in our MPZ, as far as I can tell - don't know if GMP has that at all","user":"UH24GRBLL","ts":"1609020720.209100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d3zw0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but it's not in our MPZ, as far as I can tell - don't know if GMP has that at all"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"c4121a79-4937-444f-8b2c-b4f12e1fb827","type":"message","text":"(computing Ackermann(4,3) failed not due to not mutating though, the numbers are simply too large for a single GMP Int)","user":"UH24GRBLL","ts":"1609020811.209400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZU8p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(computing Ackermann(4,3) failed not due to not mutating though, the numbers are simply too large for a single GMP Int)"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"124bb82d-9ae7-492b-ab78-219c34c639fd","type":"message","text":"Mea culpa :slightly_smiling_face: Most of my career has been 32-bit, so I mistakenly assumed a jump to BigInt, but in my example, I'm pretty sure Racket stays with a fixnum.  Allocating new BigInt's is certainly a problem _in general_, but not in my example specifically.","user":"U014ATN949F","ts":"1609020948.209600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BFOKH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Mea culpa "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":" Most of my career has been 32-bit, so I mistakenly assumed a jump to BigInt, but in my example, I'm pretty sure Racket stays with a fixnum.  Allocating new BigInt's is certainly a problem "},{"type":"text","text":"in general","style":{"italic":true}},{"type":"text","text":", but not in my example specifically."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"2c8d1c8b-12b8-4dee-8f3c-bfe79dcec947","type":"message","text":"yeah","user":"UH24GRBLL","ts":"1609021039.209800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Jr26","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"2d1240e7-ca67-4d1f-b897-7023937e1e06","type":"message","text":"also, you shouldn't be afraid of abstractions:\n\n```julia&gt; @btime sum(1:big(6_000_000))\n  1.410 μs (47 allocations: 936 bytes)\n18000003000000\n\njulia&gt; @btime sum(1:6_000_000)\n  1.300 ns (0 allocations: 0 bytes)\n18000003000000```","user":"UH24GRBLL","ts":"1609021054.210000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LF9e","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"also, you shouldn't be afraid of abstractions:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @btime sum(1:big(6_000_000))\n  1.410 μs (47 allocations: 936 bytes)\n18000003000000\n\njulia> @btime sum(1:6_000_000)\n  1.300 ns (0 allocations: 0 bytes)\n18000003000000"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"1e159a8c-6809-4036-99d2-c19e4d20c22c","type":"message","text":"Sure, but I was specifically trying to stress BigInt.","user":"U014ATN949F","ts":"1609021088.210200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NZv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sure, but I was specifically trying to stress BigInt."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"93c4c5fb-e63c-4dac-8529-9c846c1455dd","type":"message","text":"OK! There is also Int128 built in, if things just don’t quite fit","user":"UD0NS8PDF","ts":"1609021089.210400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3w0Fi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"OK! There is also Int128 built in, if things just don’t quite fit"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"a9e58f3f-e276-4276-a16e-a45da026d529","type":"message","text":"while the first one is much slower than the second one, it's still plenty fast enough since it actually does something even smarter - using the gaussian formula, iirc","user":"UH24GRBLL","ts":"1609021091.210600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j/p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"while the first one is much slower than the second one, it's still plenty fast enough since it actually does something even smarter - using the gaussian formula, iirc"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"74a8e636-a4de-4db9-a0b8-d218eb12648a","type":"message","text":"or I'd just do `(n * (n + 1)) / 2` :slightly_smiling_face:","user":"U014ATN949F","ts":"1609021113.210800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2qg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or I'd just do "},{"type":"text","text":"(n * (n + 1)) / 2","style":{"code":true}},{"type":"text","text":" "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"2ae35d08-6db9-452a-91d4-e902b8ce68b7","type":"message","text":"well, you're not really stressing BigInt with your original code, but a missing iteration optimization :man-shrugging:","user":"UH24GRBLL","ts":"1609021124.211000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lXwcD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well, you're not really stressing BigInt with your original code, but a missing iteration optimization "},{"type":"emoji","name":"man-shrugging"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"69dbba64-a3e7-4032-a03a-e2f2d5c143fd","type":"message","text":"GMP has probably done what it could with the primitives that were called in the end","user":"UH24GRBLL","ts":"1609021140.211200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VIIrH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"GMP has probably done what it could with the primitives that were called in the end"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"5d42efa1-0c91-42cb-90a6-44dba40e16f8","type":"message","text":"Yes, as I just mentioned above.","user":"U014ATN949F","ts":"1609021147.211400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WtTv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, as I just mentioned above."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"9a91c9c3-4ac0-443c-80ae-18521b8025a0","type":"message","text":"Forcing both languages to use integers &gt; 2^64 result in Julia being 5.6x Racket, so much improved for Julia.","user":"U014ATN949F","ts":"1609022469.211600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zToB7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Forcing both languages to use integers > 2^64 result in Julia being 5.6x Racket, so much improved for Julia."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"6a01a560-f16d-4a6d-9ac3-3a64471d506e","type":"message","text":"5.6x what? slower? faster?","user":"UH24GRBLL","ts":"1609022589.211800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"b9nF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"5.6x what? slower? faster?"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"3d51acef-ba72-4c1b-8839-e3575c6470ad","type":"message","text":"Sorry. Julia's runtime is 6.78 seconds vs. Racket's 1.21 seconds.","user":"U014ATN949F","ts":"1609022755.212000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gYan","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sorry. Julia's runtime is 6.78 seconds vs. Racket's 1.21 seconds."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"f390ef18-2bab-4f2d-9d0b-f4843bab203d","type":"message","text":"In my specific case, 80M allocations w/ 24% gc time.","user":"U014ATN949F","ts":"1609022777.212200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"itYX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In my specific case, 80M allocations w/ 24% gc time."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"617a0b05-9054-411e-92f5-8708a0c406d6","type":"message","text":"which version was what? your original one?","user":"UH24GRBLL","ts":"1609022795.212400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MgT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which version was what? your original one?"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"a9d77829-ac52-4913-8c5e-c09abc959369","type":"message","text":"what about the mutating versions posted earlier?","user":"UH24GRBLL","ts":"1609022805.212600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0vc0z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what about the mutating versions posted earlier?"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"d284f585-da2b-4d8c-a46f-9cb0586ed752","type":"message","text":"```function sum_n(m::BigInt, n::BigInt)::BigInt\n  val = BigInt(0)\n  i   = BigInt(m)\n  one = BigInt(1)\n\n  while i &lt;= n\n    val = val + i\n    i   = i + one\n  end\n\n  val\nend\nsum_n(BigInt(10), BigInt(20))\n@time println(sum_n(BigInt(200000000000000000000), BigInt(200000000000020000000)))```","user":"U014ATN949F","ts":"1609022807.212800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Tce","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function sum_n(m::BigInt, n::BigInt)::BigInt\n  val = BigInt(0)\n  i   = BigInt(m)\n  one = BigInt(1)\n\n  while i <= n\n    val = val + i\n    i   = i + one\n  end\n\n  val\nend\nsum_n(BigInt(10), BigInt(20))\n@time println(sum_n(BigInt(200000000000000000000), BigInt(200000000000020000000)))"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"4c93ef27-0a4c-4a90-ac4c-9f7a58d98775","type":"message","text":"that's still not mutating","user":"UH24GRBLL","ts":"1609022817.213000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SMH9C","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's still not mutating"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"8c9dd9b7-d056-4311-a9ff-1a37495f5aef","type":"message","text":"Correct. It's _idiomatic_ as was:\n```(define (sum-n m n [result 0])\n  (let loop ([ val 0 ][ i m ])\n    (if (&lt;= i n)\n        (loop (+ val i) (+ i 1))\n        val)))\n\n(time (sum-n 200000000000000000000 200000000000020000000))```","user":"U014ATN949F","ts":"1609022842.213200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tRU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Correct. It's "},{"type":"text","text":"idiomatic","style":{"italic":true}},{"type":"text","text":" as was:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"(define (sum-n m n [result 0])\n  (let loop ([ val 0 ][ i m ])\n    (if (<= i n)\n        (loop (+ val i) (+ i 1))\n        val)))\n\n(time (sum-n 200000000000000000000 200000000000020000000))"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"44140921-4e86-4939-ae80-4b19be5df209","type":"message","text":"It's nice there is a _bit_ of an escape hatch with `Base.GMP.MPZ.add!`, but I don't consider that ideal.","user":"U014ATN949F","ts":"1609022889.213400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MF0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's nice there is a "},{"type":"text","text":"bit","style":{"italic":true}},{"type":"text","text":" of an escape hatch with "},{"type":"text","text":"Base.GMP.MPZ.add!","style":{"code":true}},{"type":"text","text":", but I don't consider that ideal."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"efe11e32-abcb-4bc7-9680-3ee1fdc4bdca","type":"message","text":"does Racket have a Int128? since `200000000000000000000` still fits in that","user":"UH24GRBLL","ts":"1609022902.213600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hYhZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"does Racket have a Int128? since "},{"type":"text","text":"200000000000000000000","style":{"code":true}},{"type":"text","text":" still fits in that"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"854608e7-19e0-4480-ab60-6ca292b03b9d","type":"message","text":"Good question. I'll check ...","user":"U014ATN949F","ts":"1609022924.213800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"K7g","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Good question. I'll check ..."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"c48c1374-6dba-48f8-a830-4565040995b6","type":"message","text":"```julia&gt; sum(200000000000000000000:200000000000020000000)\n4000000200000200000010000000\n\njulia&gt; sum(200000000000000000000:200000000000020000000) |&gt; typeof\nInt128```","user":"UH24GRBLL","ts":"1609022930.214000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uRLrU","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> sum(200000000000000000000:200000000000020000000)\n4000000200000200000010000000\n\njulia> sum(200000000000000000000:200000000000020000000) |> typeof\nInt128"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"ba6e5fc8-b6c1-4670-a468-c1bae8ee36a6","type":"message","text":"```julia&gt; d = 200000000000000000000:200000000000020000000\n200000000000000000000:200000000000020000000\n\njulia&gt; @btime sum($d)\n  1.400 ns (0 allocations: 0 bytes)\n4000000200000200000010000000```","user":"UH24GRBLL","ts":"1609022966.214200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"496d","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> d = 200000000000000000000:200000000000020000000\n200000000000000000000:200000000000020000000\n\njulia> @btime sum($d)\n  1.400 ns (0 allocations: 0 bytes)\n4000000200000200000010000000"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"0e55decb-b5f1-476d-94f0-bd4bc8f84ad2","type":"message","text":"so yeah","user":"UH24GRBLL","ts":"1609022977.214400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ji2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so yeah"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"89a9cde3-6907-48aa-9614-a32509313123","type":"message","text":"I _really_ doubt you actually need BigInt :sweat_smile:","user":"UH24GRBLL","ts":"1609022988.214600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ilYLY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I "},{"type":"text","text":"really","style":{"italic":true}},{"type":"text","text":" doubt you actually need BigInt "},{"type":"emoji","name":"sweat_smile"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"e8a2f75d-dbbb-414f-a9c5-f117ed9aa057","type":"message","text":"The only reason I'm using summation is to get the iteration count high enough to stress BigInt.","user":"U014ATN949F","ts":"1609023018.214800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g7SO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The only reason I'm using summation is to get the iteration count high enough to stress BigInt."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"688f72f8-4bb9-49f8-8a4e-47787e4cba4d","type":"message","text":"I mean, Racket doesn't have semantics of memory, right? or mutation?","user":"UH24GRBLL","ts":"1609023054.215000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Zc=z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean, Racket doesn't have semantics of memory, right? or mutation?"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"c61ceb79-a22d-4578-a687-eb66aef77247","type":"message","text":"so Racket, from my point of view, is free to just use the mutating versions","user":"UH24GRBLL","ts":"1609023068.215200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ezmM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so Racket, from my point of view, is free to just use the mutating versions"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"742e7580-f743-4258-9697-d9fe959759aa","type":"message","text":"whereas in julia, having that distinction is an important context you as a programmer use actively","user":"UH24GRBLL","ts":"1609023094.215400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8i/0N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"whereas in julia, having that distinction is an important context you as a programmer use actively"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"c8dc32c1-f5a2-4d47-925e-b325d98cfb8d","type":"message","text":"I'd expect BigInt to behave more like Int.","user":"U014ATN949F","ts":"1609023128.215600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0ri92","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'd expect BigInt to behave more like Int."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"0b205eba-f4bf-494e-ae7f-31c84c7f20d1","type":"message","text":"in what sense?","user":"UH24GRBLL","ts":"1609023144.215800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5ey","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in what sense?"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"51cff71d-9ff1-4312-9ac8-8f55c2fc016b","type":"message","text":"they support the same interfaces","user":"UH24GRBLL","ts":"1609023151.216000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RcZI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"they support the same interfaces"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"dc01c54f-e13c-4a51-883c-9ab130b994a4","type":"message","text":"In the sense of `x += y` doing what I'd expect.","user":"U014ATN949F","ts":"1609023164.216200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"r6hBc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In the sense of "},{"type":"text","text":"x += y","style":{"code":true}},{"type":"text","text":" doing what I'd expect."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"b93d0c71-37c7-49c6-80e1-6c557cb41d3b","type":"message","text":"well that's not a sensible standard to measure things by though","user":"UH24GRBLL","ts":"1609023175.216400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O+K+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well that's not a sensible standard to measure things by though"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"17f2686d-19db-4c04-bbe5-f39cf8bb2024","type":"message","text":"I wouldn't expect an allocation to happen there.","user":"U014ATN949F","ts":"1609023179.216600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6RDVH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I wouldn't expect an allocation to happen there."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"b0ca1112-6b2b-4e23-95f0-f21ac142ea99","type":"message","text":"That's the point where the abstraction of BigInt leaks :man-shrugging:","user":"UH24GRBLL","ts":"1609023207.216800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"P/ji","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's the point where the abstraction of BigInt leaks "},{"type":"emoji","name":"man-shrugging"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"ae10b3a9-7cda-456d-8ab7-c99f9776eddf","type":"message","text":"Racket gets away with not telling you about anything because it can prove to you \"hey, you don't need any intermediaries\"","user":"UH24GRBLL","ts":"1609023277.217000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d9w","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Racket gets away with not telling you about anything because it can prove to you \"hey, you don't need any intermediaries\""}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"fcc6748e-e005-4020-a314-f8489b1fc76a","type":"message","text":"and yes, in theory julia could do the same thing here, it's just not been done yet","user":"UH24GRBLL","ts":"1609023293.217200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tsVu3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and yes, in theory julia could do the same thing here, it's just not been done yet"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"6cf9c7d0-45b0-45c1-9ef6-7a83bb482e77","type":"message","text":"From all the videos I've watched with folks discussing the goals/philosophy/etc. of Julia, it seems that implementing a BigInt that works as I expect _is_ possible in Julia, but maybe I missed something.","user":"U014ATN949F","ts":"1609023315.217400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0hd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"From all the videos I've watched with folks discussing the goals/philosophy/etc. of Julia, it seems that implementing a BigInt that works as I expect "},{"type":"text","text":"is","style":{"italic":true}},{"type":"text","text":" possible in Julia, but maybe I missed something."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"ad7038d4-a217-4228-9012-f6eb2c3cc924","type":"message","text":"or rather, the intermediaries don't leak out of the scope and thus Racket can elide them","user":"UH24GRBLL","ts":"1609023321.217600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Sda","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or rather, the intermediaries don't leak out of the scope and thus Racket can elide them"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"8598532c-988e-4ff7-a774-8e477f126363","type":"message","text":"Yes it's certainly possible and there have been attempts before for a julia native BigInt, but again, that's a hard thing to do","user":"UH24GRBLL","ts":"1609023354.217800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hiMZw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes it's certainly possible and there have been attempts before for a julia native BigInt, but again, that's a hard thing to do"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"ce9d26e7-1404-4298-893d-3c2417386452","type":"message","text":"and for the vast, vast majority of stuff to be done with large integers, Int128 is very much plenty","user":"UH24GRBLL","ts":"1609023403.218000","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1609023417.000000"},"blocks":[{"type":"rich_text","block_id":"k58","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and for the vast, vast majority of stuff to be done with large integers, Int128 is very much plenty"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"da3ae43e-155a-49a8-a011-f07b1a01b292","type":"message","text":"I'd have to agree there.","user":"U014ATN949F","ts":"1609023430.218300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xyj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'd have to agree there."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"8e725aff-2a13-4073-bd9a-6b0a07464959","type":"message","text":"BigInt is really only necessary if you're doing heavy number theory","user":"UH24GRBLL","ts":"1609023432.218500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MtwV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"BigInt is really only necessary if you're doing heavy number theory"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"6dd420b9-09d1-4a39-bcd4-67499472ce64","type":"message","text":"and there you don't really want to sum a lot of them, you do some other operations on them","user":"UH24GRBLL","ts":"1609023451.218700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"asIxm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and there you don't really want to sum a lot of them, you do some other operations on them"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"3b89e7b5-96fc-4c11-ab79-a886b3adf4f5","type":"message","text":"think BigInts the size of multiple gigabyte or more","user":"UH24GRBLL","ts":"1609023466.218900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/ftLv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"think BigInts the size of multiple gigabyte or more"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"2961434c-2e6e-4424-aa43-ebd97768f36a","type":"message","text":"at that point, you even run into problems with GMP itself, since their internal type is basically limited to ~4GB per Integer","user":"UH24GRBLL","ts":"1609023489.219100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UrA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"at that point, you even run into problems with GMP itself, since their internal type is basically limited to ~4GB per Integer"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"0a54951c-557b-48db-b84e-2989a0f7c8b1","type":"message","text":"so that's why there's not too much work to improve performance here, because it's hard to find a usecase that people run into doing their daily work where the existing stuff doesn't work","user":"UH24GRBLL","ts":"1609023539.219300","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1609023546.000000"},"blocks":[{"type":"rich_text","block_id":"Dd0B4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so that's why there's not too much work to improve performance here, because it's hard to find a usecase that people run into doing their daily work where the existing stuff doesn't work"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"9eef93e0-d5dc-44a2-b00f-04ae36249aac","type":"message","text":"Ok, I used integers &gt; 2^128 this time :slightly_smiling_face: Similar results. Julia = 6.7s; Racket = 1.3s","user":"U014ATN949F","ts":"1609023660.219600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YKcs/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok, I used integers > 2^128 this time "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":" Similar results. Julia = 6.7s; Racket = 1.3s"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"228ce92a-ec20-4e4d-942f-1ea3282fcce2","type":"message","text":"ok - now what about the mutating version?","user":"UH24GRBLL","ts":"1609023686.219800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xzw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ok - now what about the mutating version?"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"69df7c08-23f2-49c2-b3fd-62d974bbee4c","type":"message","text":"Outside my scope of interest.","user":"U014ATN949F","ts":"1609023698.220000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jiu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Outside my scope of interest."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"2c797177-de51-4e4b-a7bf-4729809c9088","type":"message","text":"Ok, so you only want to complain about `x = x + y` not eliding the allocation?","user":"UH24GRBLL","ts":"1609023727.220200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ciJ1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok, so you only want to complain about "},{"type":"text","text":"x = x + y","style":{"code":true}},{"type":"text","text":" not eliding the allocation?"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"54ffc75c-b87c-493c-bea8-24d9075151be","type":"message","text":"I don't want to have to thread `Base.GMP.MPZ...` through _everything_.","user":"U014ATN949F","ts":"1609023752.220400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1Yab","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't want to have to thread "},{"type":"text","text":"Base.GMP.MPZ...","style":{"code":true}},{"type":"text","text":" through "},{"type":"text","text":"everything","style":{"italic":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"d879bc2a-d2bc-46fc-b9f4-cf69c0dcee3d","type":"message","text":"```julia&gt; using Base.GMP.MPZ: add!\n\njulia&gt; a = big(10)\n10\n\njulia&gt; add!(a, big(8))\n18```","user":"UH24GRBLL","ts":"1609023810.220600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ky3","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using Base.GMP.MPZ: add!\n\njulia> a = big(10)\n10\n\njulia> add!(a, big(8))\n18"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"20db7c1e-3a39-464c-9858-c556541ea43e","type":"message","text":"What is your end goal in this discussion?","user":"UH24GRBLL","ts":"1609023842.220800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Pqkwh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What is your end goal in this discussion?"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"009e689e-f760-41a9-af0f-95b5679fe77a","type":"message","text":"Because frankly, I feel like you're not familiar with julia semantics and thus don't know why `x = x + y` can't really just switch to a different adding function","user":"UH24GRBLL","ts":"1609023883.221000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KDW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Because frankly, I feel like you're not familiar with julia semantics and thus don't know why "},{"type":"text","text":"x = x + y","style":{"code":true}},{"type":"text","text":" can't really just switch to a different adding function"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"3abbdffb-9579-4a2f-adb7-8a1671911b00","type":"message","text":"and as a consequence of those semantics, you have to be aware of the abstractions you're using","user":"UH24GRBLL","ts":"1609023908.221200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+ODiq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and as a consequence of those semantics, you have to be aware of the abstractions you're using"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"253fd8dc-86d4-44bd-9a45-22e4a415cd8c","type":"message","text":"My original question was simply whether Julia was allocating a BigInt for every arithmetic operation. The answer was yes, so I was basically done at that point.","user":"U014ATN949F","ts":"1609023909.221400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/Ef","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My original question was simply whether Julia was allocating a BigInt for every arithmetic operation. The answer was yes, so I was basically done at that point."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"ecd84a9e-f551-4d69-a2db-76f531428cfd","type":"message","text":"Are you not interested in the _why_?","user":"UH24GRBLL","ts":"1609023927.221600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R0q=F","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Are you not interested in the "},{"type":"text","text":"why","style":{"italic":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"31fc7522-aecf-47c2-8a54-9ccadabc5eea","type":"message","text":"I'm not interested in the _current_ limitations of BigInt.","user":"U014ATN949F","ts":"1609024004.221800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"80lN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not interested in the "},{"type":"text","text":"current","style":{"italic":true}},{"type":"text","text":" limitations of BigInt."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"4ac838b1-505b-42e4-b17f-03a7ab5818c4","type":"message","text":"It's not a limitation of the BigInt type","user":"UH24GRBLL","ts":"1609024021.222000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QKc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's not a limitation of the BigInt type"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"b48ea20c-4365-4868-9e11-782f5df29f09","type":"message","text":"You could very much define `+(a::BigInt, b::BigInt) = add!(a,b)`","user":"UH24GRBLL","ts":"1609024055.222200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rsA3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You could very much define "},{"type":"text","text":"+(a::BigInt, b::BigInt) = add!(a,b)","style":{"code":true}}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"d35900c1-af27-467d-8db4-3886b27bbd12","type":"message","text":"Interesting. I thought it was possible to create a type in Julia that behaved as a \"collection of bits\" i.e. to behave in a way similar to the native numeric types.","user":"U014ATN949F","ts":"1609024072.222400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c8m","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Interesting. I thought it was possible to create a type in Julia that behaved as a \"collection of bits\" i.e. to behave in a way similar to the native numeric types."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"e9a28cc2-60c2-4edf-b29d-c4c5650513f5","type":"message","text":"or safer, `const +ˡ = Base.GMP.MPZ.add!`","user":"UD0NS8PDF","ts":"1609024083.222600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GQnq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or safer, "},{"type":"text","text":"const +ˡ = Base.GMP.MPZ.add!","style":{"code":true}}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F","reactions":[{"name":"point_up_2","users":["UH24GRBLL"],"count":1}]},{"client_msg_id":"f89b4cf1-e65e-436f-a4fb-132490feb92f","type":"message","text":"I fail to see how that is relevant, mind explaining?","user":"UH24GRBLL","ts":"1609024107.222900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4vhl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I fail to see how that is relevant, mind explaining?"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"059744c9-bf87-405f-8d48-ba07b6f08756","type":"message","text":"I guess I'm not sure what your point is.","user":"U014ATN949F","ts":"1609024123.223100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Wt53B","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess I'm not sure what your point is."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"b50af2ef-b41c-4bff-b390-2e63295f5a1d","type":"message","text":"It is, but bitstypes need a fixed layout. I thought the difficulty was that BigFloat and friends are variable precision, so they don’t.","user":"UD0NS8PDF","ts":"1609024134.223300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qkITG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It is, but bitstypes need a fixed layout. I thought the difficulty was that BigFloat and friends are variable precision, so they don’t."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"8baa96d0-96d5-40eb-a168-c742de1f0624","type":"message","text":"This whole discussion has, to me at least, felt like you're pointing out some thing X that doesn't work like you expected it to, like some sort of gotcha, without asking about why it is the way it is","user":"UH24GRBLL","ts":"1609024156.223500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JkfCR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This whole discussion has, to me at least, felt like you're pointing out some thing X that doesn't work like you expected it to, like some sort of gotcha, without asking about why it is the way it is"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"b6d62df5-b1ed-493d-b379-6a0b6d0561ee","type":"message","text":"e.g. DoubleFloats does this to make a sort-of Float128 all in Julia. But BigInt isn’t like that.","user":"UD0NS8PDF","ts":"1609024195.223700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"y83","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"e.g. DoubleFloats does this to make a sort-of Float128 all in Julia. But BigInt isn’t like that."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"adc58cb2-5ad4-4fe0-9b0a-c09f384a7efb","type":"message","text":"Gotcha. Yes, in this case, I'm less interested in why BigInt arithmetic allocates a lot, than I am in the fact that it does. Digging into the details of something negative is not very interesting to me.","user":"U014ATN949F","ts":"1609024225.223900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SRYxZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Gotcha. Yes, in this case, I'm less interested in why BigInt arithmetic allocates a lot, than I am in the fact that it does. Digging into the details of something negative is not very interesting to me."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"adf3603d-d612-41a3-a50e-575c68baf6a2","type":"message","text":"I see.","user":"UH24GRBLL","ts":"1609024249.224100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QXK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"85cae76a-13f8-4985-ae25-171b93ee373c","type":"message","text":"So do you have a use-case in mind for BigInt?","user":"UD0NS8PDF","ts":"1609024258.224300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3n/E","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So do you have a use-case in mind for BigInt?"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"f7cff204-74f5-44c4-a5b5-d7d4de2055e5","type":"message","text":"I mean there’s a problem you’d like to solve, or this is just a way to kick the tires &amp; compare things?","user":"UD0NS8PDF","ts":"1609024322.224500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7p1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean there’s a problem you’d like to solve, or this is just a way to kick the tires & compare things?"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"f76044f2-9043-431d-942d-f5da929d9c77","type":"message","text":"If you're only interested in pointing out \"X doesn't work like I expect it to, so it's bad\", I don't feel the need to argue about why it's doing what it's doing, because you're clearly also not interested in learning about julia's semantics and why things are the way they are...","user":"UH24GRBLL","ts":"1609024352.224700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4Gl/1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you're only interested in pointing out \"X doesn't work like I expect it to, so it's bad\", I don't feel the need to argue about why it's doing what it's doing, because you're clearly also not interested in learning about julia's semantics and why things are the way they are..."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"19ddfa41-e9c6-4907-9ca7-bd06cdb9a0a5","type":"message","text":"<@UD0NS8PDF> mostly probing the corners of the language at this point. I've tentatively decided that Julia is my choice for any \"mathy\" stuff that Racket might fall short with - either due to speed, or lack of libraries. I'll be doing the majority of my coding in Racket, so I'm trying to find the appropriate boundary between the two langs.","user":"U014ATN949F","ts":"1609024459.224900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aY3L6","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UD0NS8PDF"},{"type":"text","text":" mostly probing the corners of the language at this point. I've tentatively decided that Julia is my choice for any \"mathy\" stuff that Racket might fall short with - either due to speed, or lack of libraries. I'll be doing the majority of my coding in Racket, so I'm trying to find the appropriate boundary between the two langs."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"99aae643-5aec-48ee-be22-83f390457245","type":"message","text":"It's kind of a bummer that I've ended up with a \"two language\" problem, since Julia has solved that for some scenarios.","user":"U014ATN949F","ts":"1609024531.225100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"E1D7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's kind of a bummer that I've ended up with a \"two language\" problem, since Julia has solved that for some scenarios."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"4443ea2e-6b29-4c31-81ff-d51609387447","type":"message","text":"But does mathy stuff mean heavy crypto or something? I’m just curious what you need fast high-precision integers for.","user":"UD0NS8PDF","ts":"1609024581.225300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"P66","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But does mathy stuff mean heavy crypto or something? I’m just curious what you need fast high-precision integers for."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"af91be08-d77b-4caa-9d9e-1bd25f770989","type":"message","text":"*fast high-precision integers for multiple operations without caring about the internals &amp; limitations of those integers","user":"UH24GRBLL","ts":"1609024617.225500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Qu5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"*fast high-precision integers for multiple operations without caring about the internals & limitations of those integers"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"e09143f8-c31b-4028-a89e-8c73b95084c4","type":"message","text":"<@UH24GRBLL> I'm really not interested in arguing with you. I think your intentions are probably good, but you seem a bit aggressive. You initially shot off a hasty reply about me failing to consider compiler time in my benchmark before deleting it, and since then you seem to have a chip on your shoulder. I actually am _very_ pleased with Julia in general, and I just expected it to _always_ beat Racket for performance, so I was surprised with the BigInt situation. It's not really a big deal.","user":"U014ATN949F","ts":"1609024626.225700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/4W","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH24GRBLL"},{"type":"text","text":" I'm really not interested in arguing with you. I think your intentions are probably good, but you seem a bit aggressive. You initially shot off a hasty reply about me failing to consider compiler time in my benchmark before deleting it, and since then you seem to have a chip on your shoulder. I actually am "},{"type":"text","text":"very","style":{"italic":true}},{"type":"text","text":" pleased with Julia in general, and I just expected it to "},{"type":"text","text":"always","style":{"italic":true}},{"type":"text","text":" beat Racket for performance, so I was surprised with the BigInt situation. It's not really a big deal."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"36d8df10-8955-408c-927c-5e32c6dee7aa","type":"message","text":"I'm sorry if my tone has turned a little sour, that's not my intention","user":"UH24GRBLL","ts":"1609024672.225900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qjm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm sorry if my tone has turned a little sour, that's not my intention"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"face66b1-d117-487c-919c-e875c8584983","type":"message","text":"<@UD0NS8PDF> \"mathy\" stuff for me will most likely *not* involve BigInt typically. I expect it will be a lot of floating point linear algebra stuff where Julia should do just fine.","user":"U014ATN949F","ts":"1609024714.226100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+sU","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UD0NS8PDF"},{"type":"text","text":" \"mathy\" stuff for me will most likely "},{"type":"text","text":"not","style":{"bold":true}},{"type":"text","text":" involve BigInt typically. I expect it will be a lot of floating point linear algebra stuff where Julia should do just fine."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"4cefc136-7668-46fa-ada0-90e816b5a8dc","type":"message","text":"it's just that there have been a lot of people over the years coming to this slack and to discourse, arguing that X didn't behave like they expected it to and concluding from that that Y wasn't a good thing and was bad.","user":"UH24GRBLL","ts":"1609024724.226300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AgZiy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's just that there have been a lot of people over the years coming to this slack and to discourse, arguing that X didn't behave like they expected it to and concluding from that that Y wasn't a good thing and was bad."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"c91b7d54-4c96-4174-af3a-8ef85fa9087d","type":"message","text":"I don't think it's unreasonable to want fast-ish unlimited precision integer maths.","user":"U7HAYKY9X","ts":"1609024739.226500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PcRz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't think it's unreasonable to want fast-ish unlimited precision integer maths."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"a68bc8e7-2db7-4554-931d-1e1f253685c3","type":"message","text":"So if someone argues from seemingly the same position, I get a little antsy","user":"UH24GRBLL","ts":"1609024746.226700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PvD24","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So if someone argues from seemingly the same position, I get a little antsy"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"4a5c3b6c-f7d3-4a21-82cd-29bb87bdbc0b","type":"message","text":"One point on why (even if you don't care for it) is that with `a + b`, there's no clear reasoning for why the result should be stored in either `a` or `b`","user":"UH24GRBLL","ts":"1609024820.226900","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1609024829.000000"},"blocks":[{"type":"rich_text","block_id":"n70","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"One point on why (even if you don't care for it) is that with "},{"type":"text","text":"a + b","style":{"code":true}},{"type":"text","text":", there's no clear reasoning for why the result should be stored in either "},{"type":"text","text":"a","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"b","style":{"code":true}}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"439d9ceb-cc2a-43c0-be5d-42cb631117de","type":"message","text":"No, `+` semantically means \"add these things and return the result, without modifying the input\"","user":"UH24GRBLL","ts":"1609024855.227200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W9Ebb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No, "},{"type":"text","text":"+","style":{"code":true}},{"type":"text","text":" semantically means \"add these things and return the result, without modifying the input\""}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"116d5d37-1a1b-4232-a8de-bb238a988438","type":"message","text":"Racket just has different semantics here, and that's fine - but as a consequence of that difference, you have to be aware of what types you're using and whether or not mutating them is faster or not","user":"UH24GRBLL","ts":"1609024891.227400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IQdbY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Racket just has different semantics here, and that's fine - but as a consequence of that difference, you have to be aware of what types you're using and whether or not mutating them is faster or not"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"3b8e5213-0952-436c-9f24-660286b103a7","type":"message","text":"I bet you could hack `a .+= b` and `a .= a .+ b` etc. to mutate BigInt, if you wanted to.","user":"UD0NS8PDF","ts":"1609024937.227600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ylo4q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I bet you could hack "},{"type":"text","text":"a .+= b","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"a .= a .+ b","style":{"code":true}},{"type":"text","text":" etc. to mutate BigInt, if you wanted to."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"601bf0b3-9907-415e-8020-b99935557117","type":"message","text":"I am sort of curious now about Racket's semantics. I would assume it is boxing BigInt, so maybe `(+ val i)` is behaving identically to Julia i.e. returning a new boxed value.","user":"U014ATN949F","ts":"1609024966.227800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1xt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am sort of curious now about Racket's semantics. I would assume it is boxing BigInt, so maybe "},{"type":"text","text":"(+ val i)","style":{"code":true}},{"type":"text","text":" is behaving identically to Julia i.e. returning a new boxed value."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"881a6bec-0e5c-4b2e-8495-fa353d1c5587","type":"message","text":"it errors right now, so wouldn't even be breaking to add in a minor release","user":"UH24GRBLL","ts":"1609024982.228000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+qp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it errors right now, so wouldn't even be breaking to add in a minor release"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"54eb88fa-48d4-40b5-8bc7-4236b76501df","type":"message","text":"(I don't know Racket, I've pulled that argument from my limited understanding of what Racket has to do to be fast here)","user":"UH24GRBLL","ts":"1609025006.228200","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1609025013.000000"},"blocks":[{"type":"rich_text","block_id":"QMb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(I don't know Racket, I've pulled that argument from my limited understanding of what Racket has to do to be fast here)"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"9ecb2b8f-f4b1-454f-a0f3-089216b88a32","type":"message","text":"Apologies if this was said above, but is Racket using the same library under the hood?","user":"UD0NS8PDF","ts":"1609025065.228500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xX9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Apologies if this was said above, but is Racket using the same library under the hood?"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"34854213-073e-4c28-9f3b-8eab1b3ca2c2","type":"message","text":"I bet Racket figures out that the intermediaries don't escape and thus switches from an allocating + to a mutating + - which is something julia (by it's semantics) can't do, as dispatch happens on types, not on context","user":"UH24GRBLL","ts":"1609025093.228700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0pE+A","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I bet Racket figures out that the intermediaries don't escape and thus switches from an allocating + to a mutating + - which is something julia (by it's semantics) can't do, as dispatch happens on types, not on context"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"ca2bdff9-a70b-4b13-b66e-c05ef1eb8683","type":"message","text":"I for one would be very confused if + behaved differently depending on the function I wrote :grimacing:","user":"UH24GRBLL","ts":"1609025136.228900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"85ml","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I for one would be very confused if + behaved differently depending on the function I wrote "},{"type":"emoji","name":"grimacing"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"9b29615b-7bcf-4a6a-893f-fb2dcad844db","type":"message","text":"I don't see how Racket could be using a mutating + actually.","user":"U014ATN949F","ts":"1609025162.229100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6rQO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't see how Racket could be using a mutating + actually."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"65adaff3-9795-4a83-af37-2c68814192c0","type":"message","text":"Maybe it's just a matter of having native support for big int vs. delegating to GMP. I'll check into it on the Racket slack.","user":"U014ATN949F","ts":"1609025207.229300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Fre","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe it's just a matter of having native support for big int vs. delegating to GMP. I'll check into it on the Racket slack."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"92011360-6edc-4621-a46a-be9e5f72ffd8","type":"message","text":"I'm thinking Racket knows that the `+` would allocate, but that the result would be assigned to the same box that was in an argument, and thus elides the allocation by mutating instead","user":"UH24GRBLL","ts":"1609025253.229500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CQJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm thinking Racket knows that the "},{"type":"text","text":"+","style":{"code":true}},{"type":"text","text":" would allocate, but that the result would be assigned to the same box that was in an argument, and thus elides the allocation by mutating instead"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"76531d26-800a-49b1-a8ee-a300e7d0c3c8","type":"message","text":"Racket also uses GMP, yes: <https://github.com/racket/racket/blob/master/racket/src/native-libs/patches/gmp-weak.patch>","user":"UH24GRBLL","ts":"1609025379.229700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/VvV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Racket also uses GMP, yes: "},{"type":"link","url":"https://github.com/racket/racket/blob/master/racket/src/native-libs/patches/gmp-weak.patch"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F","reactions":[{"name":"heavy_check_mark","users":["UD0NS8PDF"],"count":1}]},{"client_msg_id":"9ba72ced-a639-4138-84d8-54593c46c773","type":"message","text":"I can't imagine another use for a GMP patch :man-shrugging:","user":"UH24GRBLL","ts":"1609025397.230000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"87p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I can't imagine another use for a GMP patch "},{"type":"emoji","name":"man-shrugging"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"5d3aa268-d300-4456-a57c-545baf782490","type":"message","text":"so at some level, Racket (or the compiler) has to be aware of the difference between mutating and non-mutating GMP calls","user":"UH24GRBLL","ts":"1609025426.230200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kPX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so at some level, Racket (or the compiler) has to be aware of the difference between mutating and non-mutating GMP calls"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"e9698775-f4b7-4ec9-af44-a505d84aaffc","type":"message","text":"Racket has an emphasis on functional &amp; immutable. When `(+ a b)` is evaluated, it simply evaluates `a` &amp; `b`, and then evaluates `+` passing in `a` &amp; `b`, it wouldn't know the destination for the result.","user":"U014ATN949F","ts":"1609025570.230400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qll8U","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Racket has an emphasis on functional & immutable. When "},{"type":"text","text":"(+ a b)","style":{"code":true}},{"type":"text","text":" is evaluated, it simply evaluates "},{"type":"text","text":"a","style":{"code":true}},{"type":"text","text":" & "},{"type":"text","text":"b","style":{"code":true}},{"type":"text","text":", and then evaluates "},{"type":"text","text":"+","style":{"code":true}},{"type":"text","text":" passing in "},{"type":"text","text":"a","style":{"code":true}},{"type":"text","text":" & "},{"type":"text","text":"b","style":{"code":true}},{"type":"text","text":", it wouldn't know the destination for the result."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"6b218365-f5b5-4e01-84a8-4752254309dc","type":"message","text":"I guess it could also always mutate either argument","user":"UH24GRBLL","ts":"1609025604.230600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DBS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess it could also always mutate either argument"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"2fac13bf-a568-4b23-b00f-76f9d69e83ce","type":"message","text":"No, it would never do that.","user":"U014ATN949F","ts":"1609025619.230800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"N/Gm6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No, it would never do that."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"9a44121c-8dc7-48d8-84d0-131a9ae704e8","type":"message","text":"you have to allocate then, if you're truly immutable","user":"UH24GRBLL","ts":"1609025626.231000","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1609025637.000000"},"blocks":[{"type":"rich_text","block_id":"+Qh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you have to allocate then, if you're truly immutable"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"e78166dc-b394-468b-812c-b3a267cba56d","type":"message","text":"I agree, so not sure of the 5-6x difference.","user":"U014ATN949F","ts":"1609025659.231300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0K2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I agree, so not sure of the 5-6x difference."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"d2d67c83-88d7-409b-beed-a86eebdb62e1","type":"message","text":"mutate in the sense that the memory is reused, not in the sense that it semantically reuses the same slot","user":"UH24GRBLL","ts":"1609025673.231500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j+FE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"mutate in the sense that the memory is reused, not in the sense that it semantically reuses the same slot"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"3760b565-4a13-4b60-b806-c3ccd399dffa","type":"message","text":"If I get an explanation of some cleverness in the Racket implementation, I'll report back.","user":"U014ATN949F","ts":"1609025682.231700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Gf6E","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If I get an explanation of some cleverness in the Racket implementation, I'll report back."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"6968697c-1e2e-4e14-9fa0-923a73cb49ef","type":"message","text":"Please do","user":"UH24GRBLL","ts":"1609025689.231900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HjdF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Please do"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"8fa8f869-1aca-47b4-a4ae-a8336f5fc809","type":"message","text":"well there most certainly is some scheme awareness of GMP: <https://github.com/racket/racket/blob/46a191df038244199f83f2bb1235beb8ca137f9a/racket/src/bc/src/gmp/gmp.c#L31-L32>","user":"UH24GRBLL","ts":"1609025788.232100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kqF2=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well there most certainly is some scheme awareness of GMP: "},{"type":"link","url":"https://github.com/racket/racket/blob/46a191df038244199f83f2bb1235beb8ca137f9a/racket/src/bc/src/gmp/gmp.c#L31-L32"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"456998a1-fe88-49e3-95ca-90eeaf4ddeee","type":"message","text":"I always forget what it's called, but there is this concept in functional programming where the compiler is basically allowed to do any transform on the code you give to it as long as you can't (in the semantics of your language) observe that it's cheating","user":"UH24GRBLL","ts":"1609025912.232300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Up3Ix","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I always forget what it's called, but there is this concept in functional programming where the compiler is basically allowed to do any transform on the code you give to it as long as you can't (in the semantics of your language) observe that it's cheating"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"19f526b3-259a-498e-b4e9-51b7d2ad6ae3","type":"message","text":"something about replacing a statement with the equivalent value","user":"UH24GRBLL","ts":"1609025928.232500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"t2H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"something about replacing a statement with the equivalent value"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"9e8b1f7f-bb7d-44e3-a188-1e786ad66067","type":"message","text":"under that, the compiler is allowed to swap out mutating and non-mutating versions as it likes, as long as you're not able to observe (again, through the semantics of the language) that it has done so","user":"UH24GRBLL","ts":"1609025961.232700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AtNbG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"under that, the compiler is allowed to swap out mutating and non-mutating versions as it likes, as long as you're not able to observe (again, through the semantics of the language) that it has done so"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"6b544e9a-cd3c-4463-9b76-342ce9bc2685","type":"message","text":"Ah, it was `Referential transparency` (<https://en.wikipedia.org/wiki/Referential_transparency>)","user":"UH24GRBLL","ts":"1609026103.232900","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1609026142.000000"},"attachments":[{"title":"Referential transparency","title_link":"https://en.wikipedia.org/wiki/Referential_transparency","from_url":"https://en.wikipedia.org/wiki/Referential_transparency","author_name":"Wikipedia","author_link":"https://en.wikipedia.org/","text":"Referential transparency and referential opacity are properties of parts of computer programs. An expression is called referentially transparent if it can be replaced with its corresponding value (and vice-versa) without changing the program's behavior. This requires that the expression be pure, that is to say the expression value must be the same for the same inputs and its evaluation must have no side effects. An expression that is not referentially transparent is called referentially opaque.\nIn mathematics all function applications are referentially transparent, by the definition of what constitutes a mathematical function. However, this is not always the case in programming, where the terms procedure and method are used to avoid misleading connotations. In functional programming only referentially transparent functions are considered. Some programming languages provide means to guarantee referential transparency. Some functional programming languages enforce referential transparency for all functions.\nThe importance of referential transparency is that it allows the programmer and the compiler to reason about program behavior as a rewrite system. This can help in proving correctness, simplifying an algorithm, assisting in modifying code without breaking it, or optimizing code by means of memoization, common subexpression elimination, lazy evaluation, or parallelization.","fallback":"wikipedia: Referential transparency","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png","id":1,"original_url":"https://en.wikipedia.org/wiki/Referential_transparency"}],"blocks":[{"type":"rich_text","block_id":"ykyx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, it was "},{"type":"text","text":"Referential transparency","style":{"code":true}},{"type":"text","text":" ("},{"type":"link","url":"https://en.wikipedia.org/wiki/Referential_transparency"},{"type":"text","text":")"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"db28f650-b9f7-4daa-9f65-989c4d12ff0b","type":"message","text":"I'm like 85% sure that's what Racket does here","user":"UH24GRBLL","ts":"1609026246.233300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VWZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm like 85% sure that's what Racket does here"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"5aecdc09-f37d-46b4-b65a-022206634a73","type":"message","text":"(in terms of Referential transparency, what julia does is an assignment `z = x + y; x = z`, which is _not_ referentially transparent and thus can't be replaced by a mutating version. Racket doesn't have the concept of assignment at all, so its version _is_ referentially transparent and the compiler can do more useful transforms, like sprinkling mutating calls to external libs here)","user":"UH24GRBLL","ts":"1609026624.233500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"A6Zw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(in terms of Referential transparency, what julia does is an assignment "},{"type":"text","text":"z = x + y; x = z","style":{"code":true}},{"type":"text","text":", which is "},{"type":"text","text":"not","style":{"italic":true}},{"type":"text","text":" referentially transparent and thus can't be replaced by a mutating version. Racket doesn't have the concept of assignment at all, so its version "},{"type":"text","text":"is","style":{"italic":true}},{"type":"text","text":" referentially transparent and the compiler can do more useful transforms, like sprinkling mutating calls to external libs here)"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"82de2262-92fb-4a2f-8399-32169d16b446","type":"message","text":"Here's the response from Matthew Flatt, who probably knows best:\n\"Chez Scheme does not use GMP, and it has its own implementation of bignum operations. Operations that produce a bignum will pretty much always have to allocate it. (But allocation is relatively fast in Chez Scheme.)\"","user":"U014ATN949F","ts":"1609029424.233700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zgGI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Here's the response from Matthew Flatt, who probably knows best:\n\"Chez Scheme does not use GMP, and it has its own implementation of bignum operations. Operations that produce a bignum will pretty much always have to allocate it. (But allocation is relatively fast in Chez Scheme.)\""}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"723f7399-e1aa-46bd-84fa-57f13050ce9c","type":"message","text":"Racket is moving from an implementation involving a fair amount of C code to one based on Chez Scheme (which is the one I'm using).","user":"U014ATN949F","ts":"1609029455.233900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yCuHn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Racket is moving from an implementation involving a fair amount of C code to one based on Chez Scheme (which is the one I'm using)."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"bfc80733-b183-4640-b074-087215071d95","type":"message","text":"I thought that might be the case. Racket handles allocation &amp; garbage collection really well, so it may just come down to that.","user":"U014ATN949F","ts":"1609029480.234100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HchHd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I thought that might be the case. Racket handles allocation & garbage collection really well, so it may just come down to that."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"9d540489-1689-47af-ad59-6619858386a9","type":"message","text":"I don’t think it would be a good idea at all to allow mutating values of type `BigInt` , because (like `String` ), there is an implicit contract that `Integer` values are immutable.","user":"UB7JS9CHF","ts":"1609030557.234300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fN7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don’t think it would be a good idea at all to allow mutating values of type "},{"type":"text","text":"BigInt","style":{"code":true}},{"type":"text","text":" , because (like "},{"type":"text","text":"String","style":{"code":true}},{"type":"text","text":" ), there is an implicit contract that "},{"type":"text","text":"Integer","style":{"code":true}},{"type":"text","text":" values are immutable."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"dbe5152a-8e4e-4238-af36-b8dd74f865d2","type":"message","text":"Instead, I wouldn’t be too difficult to create a `BigIntRef` type, that *is* mutable, and it could guarantee that you wouldn’t accidentally corrupt memory etc.","user":"UB7JS9CHF","ts":"1609030645.234500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mtJI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Instead, I wouldn’t be too difficult to create a "},{"type":"text","text":"BigIntRef","style":{"code":true}},{"type":"text","text":" type, that "},{"type":"text","text":"is","style":{"bold":true}},{"type":"text","text":" mutable, and it could guarantee that you wouldn’t accidentally corrupt memory etc."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"23971674-4a56-4731-afb2-49f3626c3b08","type":"message","text":"<@UH24GRBLL> I don't think it's referential transparency. I tried a version using `set!` which is the same as Julia's assignment. It was basically the same runtime (1.4 sec instead of 1.2 sec):\n```(define (sum-n m n)\n  (define val 0)\n  (for ([ i (in-range m (add1 n)) ])\n    (set! val (+ val i)))\n  val)```","user":"U014ATN949F","ts":"1609031419.234700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WmI","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH24GRBLL"},{"type":"text","text":" I don't think it's referential transparency. I tried a version using "},{"type":"text","text":"set!","style":{"code":true}},{"type":"text","text":" which is the same as Julia's assignment. It was basically the same runtime (1.4 sec instead of 1.2 sec):\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"(define (sum-n m n)\n  (define val 0)\n  (for ([ i (in-range m (add1 n)) ])\n    (set! val (+ val i)))\n  val)"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"093758c7-cbcf-4d7f-a5d2-f538b6906e4a","type":"message","text":"Ill just note that the following doesnt solve the problem, but its faster\n```julia&gt; using BenchmarkTools, Nemo\n\njulia&gt; function ∑(n)\n           Val = zero(n)\n           for i in one(n):one(n):n\n               Val += i\n           end\n           Val\n       end\n∑ (generic function with 1 method)\n\njulia&gt; @btime ∑(ZZ(5_000_000))\n  803.152 ms (10000011 allocations: 152.59 MiB)\n12500002500000\n\njulia&gt; @btime ∑(big(5_000_000))\n  1.227 s (20000018 allocations: 457.76 MiB)\n12500002500000```","user":"UDD5Z7FLZ","ts":"1609034034.235100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"t5n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ill just note that the following doesnt solve the problem, but its faster\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using BenchmarkTools, Nemo\n\njulia> function ∑(n)\n           Val = zero(n)\n           for i in one(n):one(n):n\n               Val += i\n           end\n           Val\n       end\n∑ (generic function with 1 method)\n\njulia> @btime ∑(ZZ(5_000_000))\n  803.152 ms (10000011 allocations: 152.59 MiB)\n12500002500000\n\njulia> @btime ∑(big(5_000_000))\n  1.227 s (20000018 allocations: 457.76 MiB)\n12500002500000"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"055d4e8e-00f5-422c-a17f-43feb84fb014","type":"message","text":"Ok, didn't know that - again, not familiar with Racket","user":"UH24GRBLL","ts":"1609054666.235500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gubJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok, didn't know that - again, not familiar with Racket"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"a322b92a-9891-495d-97e9-8d98d7fc2c77","type":"message","text":"Is there a way to see some native assembly for that code? I'd really like to know what Racket ends up with here, as I really can't imagine it doing all those allocations all the time","user":"UH24GRBLL","ts":"1609054811.235700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WvgD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a way to see some native assembly for that code? I'd really like to know what Racket ends up with here, as I really can't imagine it doing all those allocations all the time"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"009ef7ec-69d7-4fcc-8c32-8fabc663f3fc","type":"message","text":"or maybe some lowered form?","user":"UH24GRBLL","ts":"1609054889.235900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Uvm/i","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or maybe some lowered form?"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"5555985a-5255-4bf1-b27a-764c74b28a71","type":"message","text":"or maybe you know where that addition for the bignums is implemented? I've tried searching for it in the racket repo on github, but let's just say it's not easy to navigate that :/","user":"UH24GRBLL","ts":"1609057813.236200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tg8e","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or maybe you know where that addition for the bignums is implemented? I've tried searching for it in the racket repo on github, but let's just say it's not easy to navigate that :/"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"af0f8782-1687-449b-af86-4b84308a9f61","type":"message","text":"<@UH24GRBLL> I don't think the equivalent of `@code_llvm` or `@code_native` exists. I expect there are ways to look at the final expansion before the Chez Scheme compiler compiles to native code, but I'm not sure how to do that unfortunately.","user":"U014ATN949F","ts":"1609092193.236400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"I/Y9","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH24GRBLL"},{"type":"text","text":" I don't think the equivalent of "},{"type":"text","text":"@code_llvm","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"@code_native","style":{"code":true}},{"type":"text","text":" exists. I expect there are ways to look at the final expansion before the Chez Scheme compiler compiles to native code, but I'm not sure how to do that unfortunately."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"3152fc90-416d-4577-aeb0-00536aeffe19","type":"message","text":"The bignum implementation would be in the <https://github.com/racket/ChezScheme|Racket fork of Chez Scheme>","user":"U014ATN949F","ts":"1609092297.236600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kre+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The bignum implementation would be in the "},{"type":"link","url":"https://github.com/racket/ChezScheme","text":"Racket fork of Chez Scheme"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"98e5998e-a839-4a44-bd5e-f8e7a221d45a","type":"message","text":"Maybe <https://github.com/racket/ChezScheme/blob/master/c/number.c|here?>","user":"U014ATN949F","ts":"1609092345.236800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YrbNb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe "},{"type":"link","url":"https://github.com/racket/ChezScheme/blob/master/c/number.c","text":"here?"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"22b6e780-1a10-41a6-946d-ec04317e400f","type":"message","text":"Yeah I found those as well, but I can't really make sense of it","user":"UH24GRBLL","ts":"1609093147.237000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6Fn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah I found those as well, but I can't really make sense of it"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"f02e7780-c30b-4f7f-891d-c25e5a955a24","type":"message","text":"<https://github.com/racket/ChezScheme/blob/c3b341fb57710bd375c3c80c37edb9133c9874a4/c/number.c#L523-L542>  this seems to indicate that it copies on every invocation as well","user":"UH24GRBLL","ts":"1609093160.237200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oWM","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/racket/ChezScheme/blob/c3b341fb57710bd375c3c80c37edb9133c9874a4/c/number.c#L523-L542"},{"type":"text","text":"  this seems to indicate that it copies on every invocation as well"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"fbba160f-0f30-4b8d-9a30-e22f368f0678","type":"message","text":"Yes, I'd be extremely surprised if it didn't.","user":"U014ATN949F","ts":"1609093177.237400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4NHn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, I'd be extremely surprised if it didn't."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"c3931ddf-aa8f-4252-8d10-0a6326d8f9e9","type":"message","text":"though I _think_  `tc` is passed in from the outside in the correct size, so it probably doesn't allocate, just move data around","user":"UH24GRBLL","ts":"1609093196.237600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fUB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"though I "},{"type":"text","text":"think","style":{"italic":true}},{"type":"text","text":"  "},{"type":"text","text":"tc","style":{"code":true}},{"type":"text","text":" is passed in from the outside in the correct size, so it probably doesn't allocate, just move data around"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"8982913b-12dc-483b-af08-c61da7a54940","type":"message","text":"It does appear to be a difference in the performance of allocation &amp; garbage collection.","user":"U014ATN949F","ts":"1609093200.237800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uK=PR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It does appear to be a difference in the performance of allocation & garbage collection."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"020188ee-2a5d-4be0-b582-02b31079e66b","type":"message","text":"but that depends on how this is used, and that's much less transparent from those snippets","user":"UH24GRBLL","ts":"1609093215.238000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pLKtr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but that depends on how this is used, and that's much less transparent from those snippets"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"7e136000-a164-491e-a412-59320db940b8","type":"message","text":"I wrote a simple function to sum integers from 1 to n as a simple test of BigInt:\n```function sum_n(n::BigInt)::BigInt\n  val = BigInt(0)\n\n  while n &gt; 0\n    val += n\n    n -=  1\n  end\n\n  val\nend\nsum_n(BigInt(10))\n@time println(sum_n(BigInt(6000000))) # 6 Million```\nIt takes roughly 2.2 seconds to sum 6M numbers. By comparison, the following Racket function can sum 1B numbers in about the same amount of time. The Julia code has 30M in allocations which seems crazy. Does the BigInt implementation allocate a new BigInt for each arithmetic operation?\n```(define (sum-n n [result 0])\n  (if (&gt; n 0) \n      (sum-n (- n 1) (+ result n))\n      result))\n\n(time (sum-n 1000000000)) ; 1 Billion```","user":"U014ATN949F","ts":"1609015995.188900","team":"T68168MUP","edited":{"user":"U014ATN949F","ts":"1609016087.000000"},"blocks":[{"type":"rich_text","block_id":"cIfOH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I wrote a simple function to sum integers from 1 to n as a simple test of BigInt:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function sum_n(n::BigInt)::BigInt\n  val = BigInt(0)\n\n  while n > 0\n    val += n\n    n -=  1\n  end\n\n  val\nend\nsum_n(BigInt(10))\n@time println(sum_n(BigInt(6000000))) # 6 Million"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"It takes roughly 2.2 seconds to sum 6M numbers. By comparison, the following Racket function can sum 1B numbers in about the same amount of time. The Julia code has 30M in allocations which seems crazy. Does the BigInt implementation allocate a new BigInt for each arithmetic operation?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"(define (sum-n n [result 0])\n  (if (> n 0) \n      (sum-n (- n 1) (+ result n))\n      result))\n\n(time (sum-n 1000000000)) ; 1 Billion"}]}]}],"thread_ts":"1609015995.188900","reply_count":225,"reply_users_count":6,"latest_reply":"1609093215.238000","reply_users":["UH24GRBLL","U014ATN949F","U7HAYKY9X","UDD5Z7FLZ","UD0NS8PDF","UB7JS9CHF"],"subscribed":false},{"client_msg_id":"75c5842e-c796-4005-b8de-32da0b4899ee","type":"message","text":"your code is type unstable","user":"UH24GRBLL","ts":"1609016072.189400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LXJUv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"your code is type unstable"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"578adef0-2989-4d22-8ed2-f171038abb44","type":"message","text":"`val` changes type from Int (when you set it to 0) to BigInt (when you add `n`)","user":"UH24GRBLL","ts":"1609016091.189700","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1609016097.000000"},"blocks":[{"type":"rich_text","block_id":"5z3=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"val","style":{"code":true}},{"type":"text","text":" changes type from Int (when you set it to 0) to BigInt (when you add "},{"type":"text","text":"n","style":{"code":true}},{"type":"text","text":")"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"9389bd9c-4603-473d-b78f-3f771c33892a","type":"message","text":"Doesn't matter, I just changed it w/ zero effect. It would've been promoted once out of 6M times.","user":"U014ATN949F","ts":"1609016111.190000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8hcUy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Doesn't matter, I just changed it w/ zero effect. It would've been promoted once out of 6M times."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"dfb997d4-620b-4853-813b-6ef926d93a17","type":"message","text":"I'm afraid it does allocate once per BigInt, yes.","user":"U7HAYKY9X","ts":"1609016159.190200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"J+/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm afraid it does allocate once per BigInt, yes."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"1f855678-1ad3-488c-bc46-1097c20ce8cf","type":"message","text":"So, basically unusable then :disappointed:","user":"U014ATN949F","ts":"1609016174.190400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"we0/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So, basically unusable then "},{"type":"emoji","name":"disappointed"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"3ba828a1-695d-4a31-87a8-fc97ec97be5e","type":"message","text":"are you sure the Racket one isn't computed earlier, e.g. at compile time?","user":"UH24GRBLL","ts":"1609016187.190600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"l=lI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"are you sure the Racket one isn't computed earlier, e.g. at compile time?"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"5a66efc7-5ebb-4eaa-be5a-4adf09c83a97","type":"message","text":"not familiar with Racket","user":"UH24GRBLL","ts":"1609016195.190800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"P92lS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not familiar with Racket"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"2e57bee1-b067-4691-ae50-c355c84e75e6","type":"message","text":"Yeah, they're not usable for very fast computation. You could make your own integer type which would automatically switch to bigint representation when it becomes big enough. That would be much faster, but still slower than native integers","user":"U7HAYKY9X","ts":"1609016281.191000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"799og","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, they're not usable for very fast computation. You could make your own integer type which would automatically switch to bigint representation when it becomes big enough. That would be much faster, but still slower than native integers"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"86edb865-7fda-4d4c-96d8-be727e26a01d","type":"message","text":"That would help, but as soon as you switched to BigInt, it would then become way too slow. I can only conclude that BigInt's are not used much in numerical/scientific computing.","user":"U014ATN949F","ts":"1609016328.191200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PeUA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That would help, but as soon as you switched to BigInt, it would then become way too slow. I can only conclude that BigInt's are not used much in numerical/scientific computing."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"cadd1148-a93f-4177-9bca-ead2a42440a8","type":"message","text":"julias BigInt call out to GMP","user":"UH24GRBLL","ts":"1609016344.191400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"212o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"julias BigInt call out to GMP"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"659f1681-0b85-4b27-8921-5bed58dc736f","type":"message","text":"\"not used much in numerical/scientific computing\" is a very far stretch","user":"UH24GRBLL","ts":"1609016360.191600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VtN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"\"not used much in numerical/scientific computing\" is a very far stretch"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"ccdd7527-ef44-4a77-8c3b-e26b0f237b60","type":"message","text":"I mean so does Racket, which calls out to GMP","user":"UDD5Z7FLZ","ts":"1609016376.191800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3fL7/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean so does Racket, which calls out to GMP"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"a9c9eb49-e65d-4d7b-90e0-7a4e0776d271","type":"message","text":"Yes, Julia uses GMP, but it doesn't make use of mutation apparently.","user":"U014ATN949F","ts":"1609016385.192000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1LIXC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, Julia uses GMP, but it doesn't make use of mutation apparently."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"a5035fbd-3ad0-4ffa-b3ab-94be7404443d","type":"message","text":"they may not use every available call that mutates existing GMP integers, while Racket may do","user":"UH24GRBLL","ts":"1609016392.192200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4sDre","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"they may not use every available call that mutates existing GMP integers, while Racket may do"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"a3372a7d-5aaa-46af-9c17-c0b22bbe1d10","type":"message","text":"\"every available\" ?!?!  I'm just adding &amp; subtracting :slightly_smiling_face:","user":"U014ATN949F","ts":"1609016413.192400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ir4/6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"\"every available\" ?!?!  I'm just adding & subtracting "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"9fce0e65-4418-43ea-affa-561c3adced70","type":"message","text":"How is Racket being told to use BigInt (or its equivalent)?","user":"UD0NS8PDF","ts":"1609016418.192600","team":"T68168MUP","edited":{"user":"UD0NS8PDF","ts":"1609016432.000000"},"blocks":[{"type":"rich_text","block_id":"LrY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How is Racket being told to use BigInt (or its equivalent)?"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"26d65b2a-9cba-46c2-9041-86a4a435a75c","type":"message","text":"When the value is too large for a fixnum, it promotes to a bigint.","user":"U014ATN949F","ts":"1609016464.192900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BPN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"When the value is too large for a fixnum, it promotes to a bigint."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"a711549b-0c73-4015-973b-e2a1630fecf7","type":"message","text":"julia lowers `a += b` to `a = a + b` - how should it know that in this case, mutation is desired?","user":"UH24GRBLL","ts":"1609016474.193100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"m3h","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"julia lowers "},{"type":"text","text":"a += b","style":{"code":true}},{"type":"text","text":" to "},{"type":"text","text":"a = a + b","style":{"code":true}},{"type":"text","text":" - how should it know that in this case, mutation is desired?"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"66a44058-8192-4ec6-ae69-2cfdcb12761f","type":"message","text":"remember, we only see the latter form","user":"UH24GRBLL","ts":"1609016486.193300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"meHkV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"remember, we only see the latter form"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"8dbd28e1-029c-4fe9-93c4-ce4eb5f35ce1","type":"message","text":"I dunno - maybe ask the Scheme developers :slightly_smiling_face:","user":"U014ATN949F","ts":"1609016500.193500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+ZDE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I dunno - maybe ask the Scheme developers "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"49b16b14-3f58-4a19-b3dc-90a77da16317","type":"message","text":"<@UH24GRBLL> Theoretically, it should be possible to note that the old `a` is no longer needed, nor can escape from the function, and so can be mutated in-place.","user":"U7HAYKY9X","ts":"1609016519.193700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KgnDq","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH24GRBLL"},{"type":"text","text":" Theoretically, it should be possible to note that the old "},{"type":"text","text":"a","style":{"code":true}},{"type":"text","text":" is no longer needed, nor can escape from the function, and so can be mutated in-place."}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"f78c0b8d-7c1e-4bb7-a64c-538e6316cc10","type":"message","text":"<@U7HAYKY9X> yes, but that's a compiler transform, not a function implementation thing","user":"UH24GRBLL","ts":"1609016541.193900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sBAr","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U7HAYKY9X"},{"type":"text","text":" yes, but that's a compiler transform, not a function implementation thing"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"13ffd704-68c0-42df-822d-f3b3cafafd6a","type":"message","text":"If it only promotes when needed, then since `sum(big.(1:10^9)) == sum(1:10^9)` presumably it does this in Int64?","user":"UD0NS8PDF","ts":"1609016541.194100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Xzl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If it only promotes when needed, then since "},{"type":"text","text":"sum(big.(1:10^9)) == sum(1:10^9)","style":{"code":true}},{"type":"text","text":" presumably it does this in Int64?"}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F","reactions":[{"name":"+1","users":["U67G3QRJM"],"count":1}]},{"client_msg_id":"334bef14-f373-482e-8bd5-74af0507377b","type":"message","text":"I'd even be happy with an explicit call i.e. `BigInt.addto(val, n)`","user":"U014ATN949F","ts":"1609016558.194300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3hVO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'd even be happy with an explicit call i.e. "},{"type":"text","text":"BigInt.addto(val, n)","style":{"code":true}}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"},{"client_msg_id":"eda43a9d-7c8b-4ab6-af2a-823a89844356","type":"message","text":"I mean, the compiler optimizes the for loop into a multiply and divide for `Int64`","user":"UDD5Z7FLZ","ts":"1609016586.194500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Qvxrn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean, the compiler optimizes the for loop into a multiply and divide for "},{"type":"text","text":"Int64","style":{"code":true}}]}]}],"thread_ts":"1609015995.188900","parent_user_id":"U014ATN949F"}]