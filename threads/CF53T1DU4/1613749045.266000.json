[{"client_msg_id":"e54b6091-4f3d-4635-af2a-2d0f41b6350c","type":"message","text":"Could anyone familiar with ComponentArrays explain why this line seems to be type-unstable with `@code_warntype` despite all of the present variables (i.e. `values` ,`start` ,`stop`) being fully known? It's really perplexing me.\n```newvalues = ComponentArray(values,(Axis{(edges=start:2:stop,cells=start+1:2:stop-1)}(),))```","user":"U01H36BUDJB","ts":"1613749045.266000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OpeP3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Could anyone familiar with ComponentArrays explain why this line seems to be type-unstable with "},{"type":"text","text":"@code_warntype","style":{"code":true}},{"type":"text","text":" despite all of the present variables (i.e. "},{"type":"text","text":"values","style":{"code":true}},{"type":"text","text":" ,"},{"type":"text","text":"start","style":{"code":true}},{"type":"text","text":" ,"},{"type":"text","text":"stop","style":{"code":true}},{"type":"text","text":") being fully known? It's really perplexing me.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"newvalues = ComponentArray(values,(Axis{(edges=start:2:stop,cells=start+1:2:stop-1)}(),))"}]}]}],"thread_ts":"1613749045.266000","reply_count":26,"reply_users_count":3,"latest_reply":"1613762257.311400","reply_users":["U01H36BUDJB","U69BL50BF","US4A6G6B0"],"subscribed":false},{"client_msg_id":"3c8eb001-b96e-4638-92e4-7e0a0182a5d6","type":"message","text":"`values` is a fully-specified `SVector` and the type is known according to `@code_warntype`","user":"U01H36BUDJB","ts":"1613749075.266100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oaea","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"values","style":{"code":true}},{"type":"text","text":" is a fully-specified "},{"type":"text","text":"SVector","style":{"code":true}},{"type":"text","text":" and the type is known according to "},{"type":"text","text":"@code_warntype","style":{"code":true}}]}]}],"thread_ts":"1613749045.266000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"cb138eba-e0b7-4cfe-9e29-bb50955e43ef","type":"message","text":"<@US4A6G6B0>","user":"U69BL50BF","ts":"1613754986.266300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"l85HM","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"US4A6G6B0"}]}]}],"thread_ts":"1613749045.266000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"C62FD607-0DE4-4F03-A823-FAC925BB8D79","type":"message","text":"I think this all comes down to how  `start` and `stop` are defined. If the compiler has access to their values (e.g. they were defined at the outset as a `Val` and passed in to the containing function and destructured from there), this will be type stable. But in general the compiler doesn’t have access to the values of these variables, only their types. And constant folding only goes so far. Kinda like how you can’t do `SVector{length(x)}(x)` in a type-stable way.","user":"US4A6G6B0","ts":"1613756457.276800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DZr4w","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think this all comes down to how  "},{"type":"text","text":"start","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"stop","style":{"code":true}},{"type":"text","text":" are defined. If the compiler has access to their values (e.g. they were defined at the outset as a "},{"type":"text","text":"Val","style":{"code":true}},{"type":"text","text":" and passed in to the containing function and destructured from there), this will be type stable. But in general the compiler doesn’t have access to the values of these variables, only their types. And constant folding only goes so far. Kinda like how you can’t do "},{"type":"text","text":"SVector{length(x)}(x)","style":{"code":true}},{"type":"text","text":" in a type-stable way."}]}]}],"thread_ts":"1613749045.266000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"DC4ED60B-52E2-4B01-B01A-BB2587A4C4AB","type":"message","text":"But it sounds like they were defined based on the length of the `SVector` right? In that case I’m not sure how long the compiler holds on to that information. I guess a `@generated` function would work here? I’m not sure. But I don’t think there’s anything I can do about it on the ComponentArrays side.","user":"US4A6G6B0","ts":"1613756724.280700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iyka2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But it sounds like they were defined based on the length of the "},{"type":"text","text":"SVector","style":{"code":true}},{"type":"text","text":" right? In that case I’m not sure how long the compiler holds on to that information. I guess a "},{"type":"text","text":"@generated","style":{"code":true}},{"type":"text","text":" function would work here? I’m not sure. But I don’t think there’s anything I can do about it on the ComponentArrays side."}]}]}],"thread_ts":"1613749045.266000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"0209EE8A-819D-495A-90F7-E8174A53038E","type":"message","text":"But if it turns out I’m wrong and there is some way to fix it, I’d be happy to do so. ","user":"US4A6G6B0","ts":"1613756966.281600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JUR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But if it turns out I’m wrong and there is some way to fix it, I’d be happy to do so. "}]}]}],"thread_ts":"1613749045.266000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"6b48667d-9d9d-4dc0-b0ac-06452f53d47e","type":"message","text":"<@US4A6G6B0> Yes, that's what I figured after experimenting with it for a while. In this particular function, the new start and stop values are not necessarily determined by the `SVector` , so they aren't knowable at compile time. I think I tried using `Val` as well, but it didn't work, presumably because the `Val` still has to be created using a value only known at runtime.","user":"U01H36BUDJB","ts":"1613757370.281800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Idus","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"US4A6G6B0"},{"type":"text","text":" Yes, that's what I figured after experimenting with it for a while. In this particular function, the new start and stop values are not necessarily determined by the "},{"type":"text","text":"SVector","style":{"code":true}},{"type":"text","text":" , so they aren't knowable at compile time. I think I tried using "},{"type":"text","text":"Val","style":{"code":true}},{"type":"text","text":" as well, but it didn't work, presumably because the "},{"type":"text","text":"Val","style":{"code":true}},{"type":"text","text":" still has to be created using a value only known at runtime."}]}]}],"thread_ts":"1613749045.266000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"0470259f-8419-4876-96bd-9801ae63c337","type":"message","text":"I guess I'm a bit confused though about how `ComponentArrays` works. I didn't realize that the indices were always determined at compile time. You don't provide any size type information directly, like with `SVector` , so I didn't really think about this issue until now.","user":"U01H36BUDJB","ts":"1613757699.282000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NEMYi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess I'm a bit confused though about how "},{"type":"text","text":"ComponentArrays","style":{"code":true}},{"type":"text","text":" works. I didn't realize that the indices were always determined at compile time. You don't provide any size type information directly, like with "},{"type":"text","text":"SVector","style":{"code":true}},{"type":"text","text":" , so I didn't really think about this issue until now."}]}]}],"thread_ts":"1613749045.266000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"65418AC1-FCE0-4A83-A16B-D32B341DB6C1","type":"message","text":"Yeah, that was a trade-off I made early on. The two choices were:\n1. Put the index map as values in a field so construction was fast, but every use after that carried a bit of penalty\n2. Put the index map in the type domain and do indexing with `@generated` functions so construction is hard (and in some cases impossible) to make type-stable, but every operation after construction is basically zero-cost.\nIn general, I’ve found #2 to be the better choice, but unfortunately it makes it very difficult to have ComponentArrays with inner StaticArrays because immutable types require construction on-the-fly. The only solution I’ve found so far is to define the `Axis` instances ahead of time, which honestly feels like reverting back to the index-juggling problem that ComponentArrays were designed to solve. So I don’t know I’m still doing some thinking in that area.","user":"US4A6G6B0","ts":"1613759338.295600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Kkm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, that was a trade-off I made early on. The two choices were:\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Put the index map as values in a field so construction was fast, but every use after that carried a bit of penalty"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Put the index map in the type domain and do indexing with "},{"type":"text","text":"@generated","style":{"code":true}},{"type":"text","text":" functions so construction is hard (and in some cases impossible) to make type-stable, but every operation after construction is basically zero-cost."}]}],"style":"ordered","indent":0,"offset":0},{"type":"rich_text_section","elements":[{"type":"text","text":"\nIn general, I’ve found #2 to be the better choice, but unfortunately it makes it very difficult to have ComponentArrays with inner StaticArrays because immutable types require construction on-the-fly. The only solution I’ve found so far is to define the "},{"type":"text","text":"Axis","style":{"code":true}},{"type":"text","text":" instances ahead of time, which honestly feels like reverting back to the index-juggling problem that ComponentArrays were designed to solve. So I don’t know I’m still doing some thinking in that area."}]}]}],"thread_ts":"1613749045.266000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"786737f2-c18c-4027-a1a2-bb7f60aa11f8","type":"message","text":"Well I actually love that the index information is available in the type domain. That's really useful.","user":"U01H36BUDJB","ts":"1613759439.296700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QbLCE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well I actually love that the index information is available in the type domain. That's really useful."}]}]}],"thread_ts":"1613749045.266000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"2c1cf424-97fe-491f-9c58-a9368fe61eda","type":"message","text":"But now I'm just wondering how you lift the length/index information from an arbitrary user-supplied array, which I would think would be runtime information, into the type? It's via `@generated`  functions?","user":"U01H36BUDJB","ts":"1613759504.298000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ErgOf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But now I'm just wondering how you lift the length/index information from an arbitrary user-supplied array, which I would think would be runtime information, into the type? It's via "},{"type":"text","text":"@generated","style":{"code":true}},{"type":"text","text":"  functions?"}]}]}],"thread_ts":"1613749045.266000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"F31610D1-460F-4A88-9693-929AC68CDBE1","type":"message","text":"StaticArrays+ComponentArrays are still a bit of a pain point that I would really like to solve, because most of my models (controls and flight dynamics) have small state vectors and would be perfect for StaticArrays","user":"US4A6G6B0","ts":"1613759521.298500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0WF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"StaticArrays+ComponentArrays are still a bit of a pain point that I would really like to solve, because most of my models (controls and flight dynamics) have small state vectors and would be perfect for StaticArrays"}]}]}],"thread_ts":"1613749045.266000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"6D291080-7970-44EA-BF2F-BFFF46A791B1","type":"message","text":"Right now construction is all done in a pretty type-unstable way. If you can pass `Vals` in directly and create the `Axis` instances manually, it can be type-stable. But if you don’t have any way of getting that information into the type domain in the first place (i.e. it has to be calculated), there isn’t really a great way to do it","user":"US4A6G6B0","ts":"1613759713.302400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5S7vz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Right now construction is all done in a pretty type-unstable way. If you can pass "},{"type":"text","text":"Vals","style":{"code":true}},{"type":"text","text":" in directly and create the "},{"type":"text","text":"Axis","style":{"code":true}},{"type":"text","text":" instances manually, it can be type-stable. But if you don’t have any way of getting that information into the type domain in the first place (i.e. it has to be calculated), there isn’t really a great way to do it"}]}]}],"thread_ts":"1613749045.266000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"bf0151b4-b057-4025-85a8-e11e98896d77","type":"message","text":"For what it's worth, what I've done is just construct a prototype `c=ComponentArray` and then create a new `ComponentArray(getdata(c) |&gt; A, getaxes(c))` where `A` can be a `SVector` or anything else. The point being that `ComponentArrays` still solves the index juggling issue, there's just the mild inconvenience with reconstructing it with the axes.","user":"U01H36BUDJB","ts":"1613759721.302600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kRie","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For what it's worth, what I've done is just construct a prototype "},{"type":"text","text":"c=ComponentArray","style":{"code":true}},{"type":"text","text":" and then create a new "},{"type":"text","text":"ComponentArray(getdata(c) |> A, getaxes(c))","style":{"code":true}},{"type":"text","text":" where "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" can be a "},{"type":"text","text":"SVector","style":{"code":true}},{"type":"text","text":" or anything else. The point being that "},{"type":"text","text":"ComponentArrays","style":{"code":true}},{"type":"text","text":" still solves the index juggling issue, there's just the mild inconvenience with reconstructing it with the axes."}]}]}],"thread_ts":"1613749045.266000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"0aa7e46a-5b6e-478c-8f34-3444ded995d0","type":"message","text":"I also found that there's a 2x (ish) performance hit from using `ComponentArray` as the state vector in `DifferentialEquations` so to avoid this, I just use a regular array but save the value of `getaxes(c)` so that the `ComponentArray` can be reconstructed on the fly. This seems to work very well and it's allocation-free and fast.","user":"U01H36BUDJB","ts":"1613759832.303500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uQtoZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I also found that there's a 2x (ish) performance hit from using "},{"type":"text","text":"ComponentArray","style":{"code":true}},{"type":"text","text":" as the state vector in "},{"type":"text","text":"DifferentialEquations","style":{"code":true}},{"type":"text","text":" so to avoid this, I just use a regular array but save the value of "},{"type":"text","text":"getaxes(c)","style":{"code":true}},{"type":"text","text":" so that the "},{"type":"text","text":"ComponentArray","style":{"code":true}},{"type":"text","text":" can be reconstructed on the fly. This seems to work very well and it's allocation-free and fast."}]}]}],"thread_ts":"1613749045.266000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"2FF22FEB-2E6C-4F5D-9B60-A7F02572F582","type":"message","text":"Oh really? That shouldn’t be happening. I’ll have to check that out. If you’ve got a MWE, would you mind opening an issue?","user":"US4A6G6B0","ts":"1613759883.304800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jJE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh really? That shouldn’t be happening. I’ll have to check that out. If you’ve got a MWE, would you mind opening an issue?"}]}]}],"thread_ts":"1613749045.266000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"13c7bb65-ccbc-45d2-8a53-004c4528485a","type":"message","text":"I think I have one, I'll have to test it again, though, just to be sure.","user":"U01H36BUDJB","ts":"1613759934.305300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lzA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think I have one, I'll have to test it again, though, just to be sure."}]}]}],"thread_ts":"1613749045.266000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"8a3fc97d-97a7-4eae-ae7a-6bcefb1d983c","type":"message","text":"But it's not just `ComponentArray` ; it seems to be with any custom array type.","user":"U01H36BUDJB","ts":"1613759954.305600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eo5T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But it's not just "},{"type":"text","text":"ComponentArray","style":{"code":true}},{"type":"text","text":" ; it seems to be with any custom array type."}]}]}],"thread_ts":"1613749045.266000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"8FB82D41-88B4-4BE4-873B-2A271969B9AC","type":"message","text":"Okay, thanks","user":"US4A6G6B0","ts":"1613759954.305800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jvV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Okay, thanks"}]}]}],"thread_ts":"1613749045.266000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"F22E03B9-A223-4ED1-89BE-F39B69B603C5","type":"message","text":"Oh interesting. My usual way to test is to make the same example with LabelledArrays and compare the times. If both ComponentArrays and LabelledArrays are significantly slower than regular Arrays, I’ll kick the issue over to <@U69BL50BF> and team at DifferentialEquations. But usually it ends up being something that’s only slower for ComponentArrays so it’s on me.","user":"US4A6G6B0","ts":"1613760136.309900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"r0U","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh interesting. My usual way to test is to make the same example with LabelledArrays and compare the times. If both ComponentArrays and LabelledArrays are significantly slower than regular Arrays, I’ll kick the issue over to "},{"type":"user","user_id":"U69BL50BF"},{"type":"text","text":" and team at DifferentialEquations. But usually it ends up being something that’s only slower for ComponentArrays so it’s on me."}]}]}],"thread_ts":"1613749045.266000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"dd622b09-ed64-4003-8a66-d9fb13766605","type":"message","text":":thinking_face:","user":"U69BL50BF","ts":"1613761431.310100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pTsm","elements":[{"type":"rich_text_section","elements":[{"type":"emoji","name":"thinking_face"}]}]}],"thread_ts":"1613749045.266000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"47900bc4-9b42-4245-8abb-91ff86422740","type":"message","text":"is there a `copy` method defined?","user":"U69BL50BF","ts":"1613761436.310300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ToePc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is there a "},{"type":"text","text":"copy","style":{"code":true}},{"type":"text","text":" method defined?"}]}]}],"thread_ts":"1613749045.266000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"bbf23c36-3590-45a5-917f-b265c6dc7e91","type":"message","text":"I won't have time to dig in for a bit, but that might be my guess about the only thing that's different.","user":"U69BL50BF","ts":"1613761449.310500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dv44","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I won't have time to dig in for a bit, but that might be my guess about the only thing that's different."}]}]}],"thread_ts":"1613749045.266000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"9023ea6e-2775-4174-b2c2-412d6b36d339","type":"message","text":"if it falls back to deepcopy that can get expensive.","user":"U69BL50BF","ts":"1613761460.310700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Jf9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if it falls back to deepcopy that can get expensive."}]}]}],"thread_ts":"1613749045.266000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"afcc1a12-b564-4d3a-96db-7db79f2b888b","type":"message","text":"```using DifferentialEquations, OrdinaryDiffEq, DiffEqOperators\nusing ComponentArrays\nusing BenchmarkTools\n\nconst nknots = 100\nconst h = 1.0/(nknots+1)\n\n@inline function heat_conduction(du,u,p,t)\n  du .= zero(eltype(u))\n  u₃ = @view u[3:end]\n  u₂ = @view u[2:end-1]\n  u₁ = @view u[1:end-2]\n  @. du[2:end-1] = ((u₃ - 2*u₂ + u₁)/h^2.0)\n  nothing\nend\n\nconst t0,t1 = (0.0,1.0)\nu0 = randn(300)\nu0 = ComponentArray(a=u0[1:100],b=u0[101:200],c=u0[201:300])\nprob = ODEProblem(heat_conduction, u0, (t0, t1))\nsol = @btime solve(prob, Tsit5(), saveat=0.2)\n# 109.454 ms (291296 allocations: 4.50 MiB)\nu0 = randn(300)\nprob = ODEProblem(heat_conduction, u0, (t0, t1))\nsol = @btime solve(prob, Tsit5(), saveat=0.2)\n# 61.545 ms (139834 allocations: 2.19 MiB)```","user":"U01H36BUDJB","ts":"1613761920.310900","team":"T68168MUP","edited":{"user":"U01H36BUDJB","ts":"1613761979.000000"},"blocks":[{"type":"rich_text","block_id":"C5sc","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using DifferentialEquations, OrdinaryDiffEq, DiffEqOperators\nusing ComponentArrays\nusing BenchmarkTools\n\nconst nknots = 100\nconst h = 1.0/(nknots+1)\n\n@inline function heat_conduction(du,u,p,t)\n  du .= zero(eltype(u))\n  u₃ = @view u[3:end]\n  u₂ = @view u[2:end-1]\n  u₁ = @view u[1:end-2]\n  @. du[2:end-1] = ((u₃ - 2*u₂ + u₁)/h^2.0)\n  nothing\nend\n\nconst t0,t1 = (0.0,1.0)\nu0 = randn(300)\nu0 = ComponentArray(a=u0[1:100],b=u0[101:200],c=u0[201:300])\nprob = ODEProblem(heat_conduction, u0, (t0, t1))\nsol = @btime solve(prob, Tsit5(), saveat=0.2)\n# 109.454 ms (291296 allocations: 4.50 MiB)\nu0 = randn(300)\nprob = ODEProblem(heat_conduction, u0, (t0, t1))\nsol = @btime solve(prob, Tsit5(), saveat=0.2)\n# 61.545 ms (139834 allocations: 2.19 MiB)"}]}]}],"thread_ts":"1613749045.266000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"8d757b77-66a1-46e3-84d8-1a048a773317","type":"message","text":"Let me know if you spot a problem in my setup.","user":"U01H36BUDJB","ts":"1613762032.311200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ge06B","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Let me know if you spot a problem in my setup."}]}]}],"thread_ts":"1613749045.266000","parent_user_id":"U01H36BUDJB"},{"client_msg_id":"7224f3fc-70a5-4956-aa3b-9b409e15e2f2","type":"message","text":"&lt;2x isn't so bad, really.","user":"U01H36BUDJB","ts":"1613762257.311400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CidW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"<2x isn't so bad, really."}]}]}],"thread_ts":"1613749045.266000","parent_user_id":"U01H36BUDJB"}]