[{"client_msg_id":"e8021019-3541-4b03-88a9-066e151c22b4","type":"message","text":"Hmm ... this is a bit disappointing ... I prefer the vector-like notation, but I would like to have the BLAS speed\n```julia&gt; @benchmark axpy!(-a, $v1, $v2)\nBenchmarkTools.Trial: \n  memory estimate:  16 bytes\n  allocs estimate:  1\n  --------------\n  minimum time:     23.732 μs (0.00% GC)\n  median time:      25.812 μs (0.00% GC)\n  mean time:        26.578 μs (0.00% GC)\n  maximum time:     403.066 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1\n\njulia&gt; @benchmark @avx $v2 .-= a.*$v1\nBenchmarkTools.Trial: \n  memory estimate:  128 bytes\n  allocs estimate:  4\n  --------------\n  minimum time:     317.518 μs (0.00% GC)\n  median time:      323.328 μs (0.00% GC)\n  mean time:        325.628 μs (0.00% GC)\n  maximum time:     676.790 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1\n\njulia&gt; @benchmark $v2 .-= a.*$v1\nBenchmarkTools.Trial: \n  memory estimate:  128 bytes\n  allocs estimate:  4\n  --------------\n  minimum time:     445.999 μs (0.00% GC)\n  median time:      460.991 μs (0.00% GC)\n  mean time:        473.982 μs (0.00% GC)\n  maximum time:     7.687 ms (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1\n\njulia&gt; v1 |&gt; length\n1000000```","user":"U013V2CFZAN","ts":"1617350999.094900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3YiUa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmm ... this is a bit disappointing ... I prefer the vector-like notation, but I would like to have the BLAS speed\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @benchmark axpy!(-a, $v1, $v2)\nBenchmarkTools.Trial: \n  memory estimate:  16 bytes\n  allocs estimate:  1\n  --------------\n  minimum time:     23.732 μs (0.00% GC)\n  median time:      25.812 μs (0.00% GC)\n  mean time:        26.578 μs (0.00% GC)\n  maximum time:     403.066 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1\n\njulia> @benchmark @avx $v2 .-= a.*$v1\nBenchmarkTools.Trial: \n  memory estimate:  128 bytes\n  allocs estimate:  4\n  --------------\n  minimum time:     317.518 μs (0.00% GC)\n  median time:      323.328 μs (0.00% GC)\n  mean time:        325.628 μs (0.00% GC)\n  maximum time:     676.790 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1\n\njulia> @benchmark $v2 .-= a.*$v1\nBenchmarkTools.Trial: \n  memory estimate:  128 bytes\n  allocs estimate:  4\n  --------------\n  minimum time:     445.999 μs (0.00% GC)\n  median time:      460.991 μs (0.00% GC)\n  mean time:        473.982 μs (0.00% GC)\n  maximum time:     7.687 ms (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1\n\njulia> v1 |> length\n1000000"}]}]}],"thread_ts":"1617350999.094900","reply_count":15,"reply_users_count":3,"latest_reply":"1617352079.098500","reply_users":["UH24GRBLL","U013V2CFZAN","UAUPJLBQX"],"is_locked":false,"subscribed":false},{"client_msg_id":"fb400ecb-debc-4ebd-9d8f-a4a7bc9e287f","type":"message","text":"why not interpolate `a` as well?","user":"UH24GRBLL","ts":"1617351236.095000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q0Hrb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"why not interpolate "},{"type":"text","text":"a","style":{"code":true}},{"type":"text","text":" as well?"}]}]}],"thread_ts":"1617350999.094900","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"ec956f53-b9b1-4ec5-b092-e178ae57c741","type":"message","text":"oh ... I missed that","user":"U013V2CFZAN","ts":"1617351291.095200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=BNE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh ... I missed that"}]}]}],"thread_ts":"1617350999.094900","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"dcc6cd42-4fc5-4752-9876-7a34afed8056","type":"message","text":"you may also want to wrap that in a small function, just to be sure it behaves the same as  `axpy!`","user":"UH24GRBLL","ts":"1617351311.095400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uQeH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you may also want to wrap that in a small function, just to be sure it behaves the same as  "},{"type":"text","text":"axpy!","style":{"code":true}}]}]}],"thread_ts":"1617350999.094900","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"65b53b54-2582-485c-aed2-5e6f2d612b63","type":"message","text":"good idea!","user":"U013V2CFZAN","ts":"1617351356.095600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"a4fkt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"good idea!"}]}]}],"thread_ts":"1617350999.094900","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"f3df56d5-283e-489d-ba62-93ad90cc7077","type":"message","text":"the name suggests some reference is passed to some internal, compiled routine, so wrapping in a function seems appropriate","user":"UH24GRBLL","ts":"1617351358.095800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hS7r","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the name suggests some reference is passed to some internal, compiled routine, so wrapping in a function seems appropriate"}]}]}],"thread_ts":"1617350999.094900","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"961b8d10-476d-4288-bd79-ae40f206f14f","type":"message","text":"(you'll still have to interpolate all of it though)","user":"UH24GRBLL","ts":"1617351374.096000","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1617351377.000000"},"blocks":[{"type":"rich_text","block_id":"1ZgO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(you'll still have to interpolate all of it though)"}]}]}],"thread_ts":"1617350999.094900","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"c83d03c2-c844-4f68-87dd-f9fe93361ef9","type":"message","text":"```julia&gt; my_axpy!(v2, a, v1) = v2 .-= a.*v1\nmy_axpy! (generic function with 1 method)\n\njulia&gt; my_avx_axpy!(v2, a, v1) = @avx v2 .-= a.*v1\nmy_avx_axpy! (generic function with 1 method)\n\njulia&gt; @benchmark my_axpy!($v2, $a, $v1)\nBenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     305.626 μs (0.00% GC)\n  median time:      311.777 μs (0.00% GC)\n  mean time:        314.091 μs (0.00% GC)\n  maximum time:     648.636 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1\n\njulia&gt; @benchmark my_avx_axpy!($v2, $a, $v1)\nBenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     304.046 μs (0.00% GC)\n  median time:      319.618 μs (0.00% GC)\n  mean time:        323.309 μs (0.00% GC)\n  maximum time:     4.906 ms (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1```","user":"U013V2CFZAN","ts":"1617351531.096700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"H/UL","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> my_axpy!(v2, a, v1) = v2 .-= a.*v1\nmy_axpy! (generic function with 1 method)\n\njulia> my_avx_axpy!(v2, a, v1) = @avx v2 .-= a.*v1\nmy_avx_axpy! (generic function with 1 method)\n\njulia> @benchmark my_axpy!($v2, $a, $v1)\nBenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     305.626 μs (0.00% GC)\n  median time:      311.777 μs (0.00% GC)\n  mean time:        314.091 μs (0.00% GC)\n  maximum time:     648.636 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1\n\njulia> @benchmark my_avx_axpy!($v2, $a, $v1)\nBenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     304.046 μs (0.00% GC)\n  median time:      319.618 μs (0.00% GC)\n  mean time:        323.309 μs (0.00% GC)\n  maximum time:     4.906 ms (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1"}]}]}],"thread_ts":"1617350999.094900","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"126fb8ed-16cd-4a6e-bade-33dde2c1480b","type":"message","text":"How many BLAS threads?","user":"UAUPJLBQX","ts":"1617351751.096900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"q6HyJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How many BLAS threads?"}]}]}],"thread_ts":"1617350999.094900","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"02b86672-1157-4c4e-b0d4-44698f0dbc20","type":"message","text":"vs single threaded in the Julia implementations","user":"UAUPJLBQX","ts":"1617351764.097100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lrz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"vs single threaded in the Julia implementations"}]}]}],"thread_ts":"1617350999.094900","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"e198fac1-b8d5-499e-9c2c-9173a1a45be4","type":"message","text":"axpy should be totally memory bound, so I wouldn't expect there's much to optimize.","user":"UAUPJLBQX","ts":"1617351797.097300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MWiw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"axpy should be totally memory bound, so I wouldn't expect there's much to optimize."}]}]}],"thread_ts":"1617350999.094900","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"f6f3bae1-1917-44aa-89df-204ca58667a6","type":"message","text":"of course!! I always forget that BLAS uses more than one thread! :picard_facepalm:","user":"U013V2CFZAN","ts":"1617351934.097500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PgVo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"of course!! I always forget that BLAS uses more than one thread! "},{"type":"emoji","name":"picard_facepalm"}]}]}],"thread_ts":"1617350999.094900","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"8d5f1b84-0946-4b44-8b26-aa8f43966250","type":"message","text":"```julia&gt; BLAS.set_num_threads(1)\n\njulia&gt; @benchmark axpy!(-a, $v1, $v2)\nBenchmarkTools.Trial: \n  memory estimate:  16 bytes\n  allocs estimate:  1\n  --------------\n  minimum time:     321.589 μs (0.00% GC)\n  median time:      328.390 μs (0.00% GC)\n  mean time:        332.620 μs (0.00% GC)\n  maximum time:     791.057 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1```","user":"U013V2CFZAN","ts":"1617351959.097700","team":"T68168MUP","edited":{"user":"U013V2CFZAN","ts":"1617351974.000000"},"blocks":[{"type":"rich_text","block_id":"VSWCW","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> BLAS.set_num_threads(1)\n\njulia> @benchmark axpy!(-a, $v1, $v2)\nBenchmarkTools.Trial: \n  memory estimate:  16 bytes\n  allocs estimate:  1\n  --------------\n  minimum time:     321.589 μs (0.00% GC)\n  median time:      328.390 μs (0.00% GC)\n  mean time:        332.620 μs (0.00% GC)\n  maximum time:     791.057 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1"}]}]}],"thread_ts":"1617350999.094900","parent_user_id":"U013V2CFZAN"},{"client_msg_id":"23a0ab61-2c02-498b-962b-85b263adaf7e","type":"message","text":"You could also try `@avxt` to see how it fairs against multithreaded BLAS","user":"UAUPJLBQX","ts":"1617351989.098000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NVQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You could also try "},{"type":"text","text":"@avxt","style":{"code":true}},{"type":"text","text":" to see how it fairs against multithreaded BLAS"}]}]}],"thread_ts":"1617350999.094900","parent_user_id":"U013V2CFZAN","reactions":[{"name":"+1","users":["U013V2CFZAN"],"count":1}]},{"client_msg_id":"9e100e35-ff54-4597-b490-bfad9ec93b42","type":"message","text":"```julia&gt; my_avxt_axpy!(v2, a, v1) = @avxt v2 .-= a.*v1\nmy_avxt_axpy! (generic function with 1 method)\n\njulia&gt; @benchmark my_avxt_axpy!($v2, $a, $v1)\nBenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     17.221 μs (0.00% GC)\n  median time:      21.041 μs (0.00% GC)\n  mean time:        21.573 μs (0.00% GC)\n  maximum time:     313.430 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1```","user":"U013V2CFZAN","ts":"1617352061.098300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"avj3","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> my_avxt_axpy!(v2, a, v1) = @avxt v2 .-= a.*v1\nmy_avxt_axpy! (generic function with 1 method)\n\njulia> @benchmark my_avxt_axpy!($v2, $a, $v1)\nBenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     17.221 μs (0.00% GC)\n  median time:      21.041 μs (0.00% GC)\n  mean time:        21.573 μs (0.00% GC)\n  maximum time:     313.430 μs (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1"}]}]}],"thread_ts":"1617350999.094900","parent_user_id":"U013V2CFZAN","reactions":[{"name":"+1","users":["UAUPJLBQX"],"count":1}]},{"client_msg_id":"95973d49-8b56-4cf2-9ce9-6cfc39dce2f8","type":"message","text":"I always learn a lot in this channel :smile:","user":"U013V2CFZAN","ts":"1617352079.098500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6Lbq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I always learn a lot in this channel "},{"type":"emoji","name":"smile"}]}]}],"thread_ts":"1617350999.094900","parent_user_id":"U013V2CFZAN"}]