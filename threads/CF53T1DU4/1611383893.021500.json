[{"client_msg_id":"61f157da-4046-4410-a607-a96c351d492c","type":"message","text":"Is there a way to do the following without manually unrolling or (pre)allocating an array? I accumulate over some scalar `Float64` variables and want to do this\n```u1,u2,u3 = 0.0, 0.0, 0.0\nfor i = 1:10\n  u1 += 1 \n  u2 += 3\n  u3 += 2\nend```\nbut for `N` variables (assuming `N` is encoded in some static type info and `N` is small, e.g., 3-10ish).\n\nI can do this with a preallocated array, but I’d like to avoid that allocation too if possible.","user":"U011LUQ182G","ts":"1611383893.021500","team":"T68168MUP","edited":{"user":"U011LUQ182G","ts":"1611384216.000000"},"blocks":[{"type":"rich_text","block_id":"Xskab","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a way to do the following without manually unrolling or (pre)allocating an array? I accumulate over some scalar "},{"type":"text","text":"Float64","style":{"code":true}},{"type":"text","text":" variables and want to do this\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"u1,u2,u3 = 0.0, 0.0, 0.0\nfor i = 1:10\n  u1 += 1 \n  u2 += 3\n  u3 += 2\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"but for "},{"type":"text","text":"N","style":{"code":true}},{"type":"text","text":" variables (assuming "},{"type":"text","text":"N","style":{"code":true}},{"type":"text","text":" is encoded in some static type info and "},{"type":"text","text":"N","style":{"code":true}},{"type":"text","text":" is small, e.g., 3-10ish).\n\nI can do this with a preallocated array, but I’d like to avoid that allocation too if possible."}]}]}],"thread_ts":"1611383893.021500","reply_count":7,"reply_users_count":3,"latest_reply":"1611437212.038500","reply_users":["U011LUQ182G","UD0NS8PDF","UAUPJLBQX"],"subscribed":false},{"client_msg_id":"AA1CDFE0-65BE-4611-BCD2-163A41C4F666","type":"message","text":"If this is possible using metaprogramming, I’d also be interested...","user":"U011LUQ182G","ts":"1611385629.023000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"64u2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If this is possible using metaprogramming, I’d also be interested..."}]}]}],"thread_ts":"1611383893.021500","parent_user_id":"U011LUQ182G"},{"client_msg_id":"78dfac9e-68c2-4f76-bf37-0286252bc59c","type":"message","text":"Something like `@macroexpand Base.Cartesian.@nexprs 5 i -&gt; u_i += i` perhaps?","user":"UD0NS8PDF","ts":"1611385901.023200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wOH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Something like "},{"type":"text","text":"@macroexpand Base.Cartesian.@nexprs 5 i -> u_i += i","style":{"code":true}},{"type":"text","text":" perhaps?"}]}]}],"thread_ts":"1611383893.021500","parent_user_id":"U011LUQ182G","reactions":[{"name":"+1","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"b6c88240-ae6d-4a42-a5c1-48203316051c","type":"message","text":"Or just a `StaticArrays.MArray`. It won't allocate if it doesn't escape.\n\n```julia&gt; using StaticArrays\n\njulia&gt; function accumulate(L, ::Val{N}) where {N}\n           acc = zero(MVector{N,Float64})\n           @inbounds @fastmath for i ∈ 1:L\n               for n ∈ 1:N\n                   acc[n] += n\n               end\n           end\n           sum(acc)\n       end\naccumulate (generic function with 2 methods)\n\njulia&gt; @btime accumulate(10, Val(4))\n  9.258 ns (0 allocations: 0 bytes)\n100.0\n\njulia&gt; @btime accumulate(100, Val(4))\n  19.698 ns (0 allocations: 0 bytes)\n1000.0\n\njulia&gt; @btime accumulate(1000, Val(4))\n  91.899 ns (0 allocations: 0 bytes)\n10000.0```","user":"UAUPJLBQX","ts":"1611393192.023400","team":"T68168MUP","edited":{"user":"UAUPJLBQX","ts":"1611393466.000000"},"blocks":[{"type":"rich_text","block_id":"aFy4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Or just a "},{"type":"text","text":"StaticArrays.MArray","style":{"code":true}},{"type":"text","text":". It won't allocate if it doesn't escape.\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using StaticArrays\n\njulia> function accumulate(L, ::Val{N}) where {N}\n           acc = zero(MVector{N,Float64})\n           @inbounds @fastmath for i ∈ 1:L\n               for n ∈ 1:N\n                   acc[n] += n\n               end\n           end\n           sum(acc)\n       end\naccumulate (generic function with 2 methods)\n\njulia> @btime accumulate(10, Val(4))\n  9.258 ns (0 allocations: 0 bytes)\n100.0\n\njulia> @btime accumulate(100, Val(4))\n  19.698 ns (0 allocations: 0 bytes)\n1000.0\n\njulia> @btime accumulate(1000, Val(4))\n  91.899 ns (0 allocations: 0 bytes)\n10000.0"}]}]}],"thread_ts":"1611383893.021500","parent_user_id":"U011LUQ182G","reactions":[{"name":"+1","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"10cfc1f2-20b6-4dc7-ae77-5276be1399ab","type":"message","text":"<@UAUPJLBQX> woah, I didn’t know MArrays could do that!! Thanks for the heads up.","user":"U011LUQ182G","ts":"1611421833.034800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Er1Cy","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UAUPJLBQX"},{"type":"text","text":" woah, I didn’t know MArrays could do that!! Thanks for the heads up."}]}]}],"thread_ts":"1611383893.021500","parent_user_id":"U011LUQ182G"},{"client_msg_id":"20fab2e7-2467-4402-86f4-92f464e7cd66","type":"message","text":"that’s really helpful. I tried MArrays before but was running without `@inbounds`. I didn’t know `@inbounds` would reduce allocations to zero.\n\nseems like really useful info - would it be appropriate to add this to docs or an example? I’d be happy to do so or open an issue","user":"U011LUQ182G","ts":"1611427213.037600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tE6+h","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that’s really helpful. I tried MArrays before but was running without "},{"type":"text","text":"@inbounds","style":{"code":true}},{"type":"text","text":". I didn’t know "},{"type":"text","text":"@inbounds","style":{"code":true}},{"type":"text","text":" would reduce allocations to zero.\n\nseems like really useful info - would it be appropriate to add this to docs or an example? I’d be happy to do so or open an issue"}]}]}],"thread_ts":"1611383893.021500","parent_user_id":"U011LUQ182G"},{"client_msg_id":"14703de5-0a16-43c5-92b1-54d744afebc2","type":"message","text":"Nevermind, seems like the `@inbounds` isn’t necessary for zero allocations…not sure what was going on before.","user":"U011LUQ182G","ts":"1611429929.038200","team":"T68168MUP","edited":{"user":"U011LUQ182G","ts":"1611430502.000000"},"blocks":[{"type":"rich_text","block_id":"mux","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Nevermind, seems like the "},{"type":"text","text":"@inbounds","style":{"code":true}},{"type":"text","text":" isn’t necessary for zero allocations…not sure what was going on before."}]}]}],"thread_ts":"1611383893.021500","parent_user_id":"U011LUQ182G"},{"client_msg_id":"403ac80f-4b68-4d1f-b390-24a34c312fa7","type":"message","text":"I got allocations in the `accumulate` example before adding `@inbounds`. I do think it's worth an issue, because (a) bounds checks shouldn't cause allocations, and (b) the compiler should be able to get rid of bounds checks and all their potential consequences here because it knows it's length `N` and we're only indexing in `1:N`.","user":"UAUPJLBQX","ts":"1611437212.038500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1yr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I got allocations in the "},{"type":"text","text":"accumulate","style":{"code":true}},{"type":"text","text":" example before adding "},{"type":"text","text":"@inbounds","style":{"code":true}},{"type":"text","text":". I do think it's worth an issue, because (a) bounds checks shouldn't cause allocations, and (b) the compiler should be able to get rid of bounds checks and all their potential consequences here because it knows it's length "},{"type":"text","text":"N","style":{"code":true}},{"type":"text","text":" and we're only indexing in "},{"type":"text","text":"1:N","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1611383893.021500","parent_user_id":"U011LUQ182G","reactions":[{"name":"+1","users":["U011LUQ182G"],"count":1}]}]