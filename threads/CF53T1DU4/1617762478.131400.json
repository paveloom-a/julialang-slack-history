[{"client_msg_id":"daab6db2-b753-443c-b222-10f40f02beb3","type":"message","text":"I might be writing a short blog post comparing R/Python/Rust/Julia. Some folks have been golfing performance and here's my fastest version for Julia - any performance juice left to squeeze?\n\n```q = [0.001,0.002,0.003,0.003,0.004,0.004,0.005,0.007,0.009,0.011]\nw = [0.05,0.07,0.08,0.10,0.14,0.20,0.20,0.20,0.10,0.04]\nP = 100\nS = 25000\nr = 0.02\n\n# calculate present value of basic insurance policy\n@inline function npv4(q,w,P,S,r,term=nothing)\n    term = term === nothing ? length(q) : term\n    inforce = 1.0\n    result = 0.0\n    v = (1 / ( 1 + r))\n    v_t = v\n    \n    for (t,(q,w)) in enumerate(zip(q,w))\n        t &gt; term &amp;&amp; return result\n        result += inforce * (P - S * q) * v_t\n        inforce -= inforce * q + inforce * w\n        v_t *= v\n    end\n    \n    return result\nend```","user":"UFWQ6DP0S","ts":"1617762478.131400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"137WB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I might be writing a short blog post comparing R/Python/Rust/Julia. Some folks have been golfing performance and here's my fastest version for Julia - any performance juice left to squeeze?\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"q = [0.001,0.002,0.003,0.003,0.004,0.004,0.005,0.007,0.009,0.011]\nw = [0.05,0.07,0.08,0.10,0.14,0.20,0.20,0.20,0.10,0.04]\nP = 100\nS = 25000\nr = 0.02\n\n# calculate present value of basic insurance policy\n@inline function npv4(q,w,P,S,r,term=nothing)\n    term = term === nothing ? length(q) : term\n    inforce = 1.0\n    result = 0.0\n    v = (1 / ( 1 + r))\n    v_t = v\n    \n    for (t,(q,w)) in enumerate(zip(q,w))\n        t > term && return result\n        result += inforce * (P - S * q) * v_t\n        inforce -= inforce * q + inforce * w\n        v_t *= v\n    end\n    \n    return result\nend"}]}]}],"thread_ts":"1617762478.131400","reply_count":65,"reply_users_count":5,"latest_reply":"1617768044.145000","reply_users":["UFWQ6DP0S","U6795JH6H","U011V2YN59N","UD0NS8PDF","U67BJLYCS"],"is_locked":false,"subscribed":false},{"client_msg_id":"fdc20211-8b60-499e-a325-213ce4121f04","type":"message","text":"I can post other implementations that people have done if interest","user":"UFWQ6DP0S","ts":"1617762774.131500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8MC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I can post other implementations that people have done if interest"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"4c684e6b-8744-45c3-adb0-533fd3cd23a8","type":"message","text":"Very trivial, but I would just use `term=length(q)` in the function signature","user":"U6795JH6H","ts":"1617763508.131700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"q9Wp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Very trivial, but I would just use "},{"type":"text","text":"term=length(q)","style":{"code":true}},{"type":"text","text":" in the function signature"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S","reactions":[{"name":"heavy_check_mark","users":["UGU761DU2","UKG4WF8PJ"],"count":2}]},{"client_msg_id":"3a9730f7-596a-4d60-a08c-6f834ec0842c","type":"message","text":"I believe this version of the loop should be equivalent and a little simpler:\n```for (q, w) in zip(q, w, 1:term)\n    result += inforce * (P - S * q) * v_t\n    inforce -= inforce * q + inforce * w\n    v_t *= v\nend```","user":"U6795JH6H","ts":"1617763714.132000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uNFjY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I believe this version of the loop should be equivalent and a little simpler:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"for (q, w) in zip(q, w, 1:term)\n    result += inforce * (P - S * q) * v_t\n    inforce -= inforce * q + inforce * w\n    v_t *= v\nend"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"0054e5be-b9e4-472b-8553-f3aa43759daf","type":"message","text":"It terminates after `term` iterations because `zip` stops when any of the iterators it’s zipping is done","user":"U6795JH6H","ts":"1617763817.132200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QhvW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It terminates after "},{"type":"text","text":"term","style":{"code":true}},{"type":"text","text":" iterations because "},{"type":"text","text":"zip","style":{"code":true}},{"type":"text","text":" stops when any of the iterators it’s zipping is done"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"954aa956-4811-4440-88df-3da75f9e3b25","type":"message","text":"which means you don’t need the `t` counter at all","user":"U6795JH6H","ts":"1617763849.132400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lUKs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which means you don’t need the "},{"type":"text","text":"t","style":{"code":true}},{"type":"text","text":" counter at all"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"547496f8-a969-44a5-948e-b26591213bc9","type":"message","text":"will `q,w` always be the same length?","user":"U011V2YN59N","ts":"1617763867.132600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bm27","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"will "},{"type":"text","text":"q,w","style":{"code":true}},{"type":"text","text":" always be the same length?"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"df108553-f51d-4f17-a47e-dabccfa8e6ed","type":"message","text":"For me a straight loop seems faster than the zip, although not as pretty:\n```@inline function npv4(qs,ws,P,S,r,term=length(qs))\n    inforce, result = 1.0, 0.0\n    v = 1 / ( 1 + r)\n    v_t = v\n    # for (t,(q,w)) in enumerate(zip(qs,ws))\n    #     t &gt; term &amp;&amp; return result\n    #     result += inforce * (P - S * q) * v_t\n    #     inforce -= inforce * q + inforce * w\n    #     v_t *= v\n    # end\n    for t in 1:min(term, length(qs), length(ws))\n        @inbounds q, w = qs[t], ws[t]\n        result += inforce * (P - S * q) * v_t\n        inforce -= inforce * (q + w)\n        v_t *= v\n    end\n    # for (q, w) in zip(qs, ws, 1:term)\n    #     result += inforce * (P - S * q) * v_t\n    #     inforce -= inforce * q + inforce * w\n    #     v_t *= v\n    # end\n    return result\nend\n@btime npv4($q,$w,$P,$S,$r) # 10.416 ns (0 allocations: 0 bytes) initial\n# 8.708 ns with for loop\n# 11.094 ns with last zip```","user":"UD0NS8PDF","ts":"1617763887.132800","team":"T68168MUP","edited":{"user":"UD0NS8PDF","ts":"1617764011.000000"},"blocks":[{"type":"rich_text","block_id":"CzM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For me a straight loop seems faster than the zip, although not as pretty:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@inline function npv4(qs,ws,P,S,r,term=length(qs))\n    inforce, result = 1.0, 0.0\n    v = 1 / ( 1 + r)\n    v_t = v\n    # for (t,(q,w)) in enumerate(zip(qs,ws))\n    #     t > term && return result\n    #     result += inforce * (P - S * q) * v_t\n    #     inforce -= inforce * q + inforce * w\n    #     v_t *= v\n    # end\n    for t in 1:min(term, length(qs), length(ws))\n        @inbounds q, w = qs[t], ws[t]\n        result += inforce * (P - S * q) * v_t\n        inforce -= inforce * (q + w)\n        v_t *= v\n    end\n    # for (q, w) in zip(qs, ws, 1:term)\n    #     result += inforce * (P - S * q) * v_t\n    #     inforce -= inforce * q + inforce * w\n    #     v_t *= v\n    # end\n    return result\nend\n@btime npv4($q,$w,$P,$S,$r) # 10.416 ns (0 allocations: 0 bytes) initial\n# 8.708 ns with for loop\n# 11.094 ns with last zip"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S","reactions":[{"name":"+1","users":["UGU761DU2","U011LUQ182G"],"count":2}]},{"client_msg_id":"fedfbda3-1567-4b7b-a9dc-163acdb25262","type":"message","text":"It might be clearer to do `for (q, w, _) in zip(q, w, 1:term)` to explicitly discard the third zipped value, but if you only destructure the first two, then it’s implicitly ignored","user":"U6795JH6H","ts":"1617763912.133000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XK6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It might be clearer to do "},{"type":"text","text":"for (q, w, _) in zip(q, w, 1:term)","style":{"code":true}},{"type":"text","text":" to explicitly discard the third zipped value, but if you only destructure the first two, then it’s implicitly ignored"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"63ed6805-eef7-4962-8f3b-287823eeca9b","type":"message","text":"the fancy iterator versions really _ought_ to be just as fast, but sometimes the compiler gets confused and doesn’t generate optimal code","user":"U6795JH6H","ts":"1617763985.133200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MaKxQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the fancy iterator versions really "},{"type":"text","text":"ought","style":{"italic":true}},{"type":"text","text":" to be just as fast, but sometimes the compiler gets confused and doesn’t generate optimal code"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"fb786dc9-f19b-4901-b0f2-92610325c87b","type":"message","text":"<@U6795JH6H> the `for (q,w,_) in zip(q,w,1:term)` version seems to be a touch slower (18.3ns vs 17.3ns median)","user":"UFWQ6DP0S","ts":"1617764071.133600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"l3S","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U6795JH6H"},{"type":"text","text":" the "},{"type":"text","text":"for (q,w,_) in zip(q,w,1:term)","style":{"code":true}},{"type":"text","text":" version seems to be a touch slower (18.3ns vs 17.3ns median)"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"6d812a8e-4a0a-4f99-b4aa-bd7ddcc9ac9d","type":"message","text":"Boo!!!","user":"U6795JH6H","ts":"1617764083.133800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AeQE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Boo!!!"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"133e7c41-84a0-45dd-96d9-2c5b6340e9a1","type":"message","text":"who are these jokers?","user":"U6795JH6H","ts":"1617764093.134000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GNkp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"who are these jokers?"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S","reactions":[{"name":"joy","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"21f0acea-e7e6-43a5-8baa-890dfeb5d837","type":"message","text":"I just ran it locally here, vs the version I started the post with","user":"UFWQ6DP0S","ts":"1617764138.134200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HDp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I just ran it locally here, vs the version I started the post with"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"8a8a05ee-6114-49ab-aaaa-13671408f838","type":"message","text":"as to who I'm golfing this with? Several random folks via a Linkedin group about open source in insurance","user":"UFWQ6DP0S","ts":"1617764199.134400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uady","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"as to who I'm golfing this with? Several random folks via a Linkedin group about open source in insurance"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"b42f85df-e463-496f-85aa-f4c13f75554d","type":"message","text":"Weirdly `for (_, q, w) in zip(1:term, qs, ws)` is slightly faster for me than `for (q, w, _) in zip(qs, ws, 1:term)`, 10.802 ns vs 11.136 ns..","user":"UD0NS8PDF","ts":"1617764218.134600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"a0vj9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Weirdly "},{"type":"text","text":"for (_, q, w) in zip(1:term, qs, ws)","style":{"code":true}},{"type":"text","text":" is slightly faster for me than "},{"type":"text","text":"for (q, w, _) in zip(qs, ws, 1:term)","style":{"code":true}},{"type":"text","text":", 10.802 ns vs 11.136 ns.."}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"f5a5fe66-3f1c-457f-9291-0efa9511493a","type":"message","text":"it's spawned a private github org, otherwise I'd point straight to the thread","user":"UFWQ6DP0S","ts":"1617764223.134800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ErY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's spawned a private github org, otherwise I'd point straight to the thread"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"7de4e82a-72c5-4cf8-b1bf-d969aa3780e7","type":"message","text":"```julia&gt; @inline function npv5(q,w,P,S,r,term=nothing)\n           term = term === nothing ? length(q) : term\n           inforce = 1.0\n           result = 0.0\n           v = (1 / ( 1 + r))\n           v_t = v\n           for (q,w,_) in zip(q,w,1:term)\n               result += inforce * (P - S * q) * v_t\n               inforce -= inforce * q + inforce * w\n               v_t *= v\n           end\n           return result\n       end\nnpv5 (generic function with 2 methods)\n\njulia&gt; @inline function npv4(q,w,P,S,r,term=nothing)\n           term = term === nothing ? length(q) : term\n           inforce = 1.0\n           result = 0.0\n           v = (1 / ( 1 + r))\n           v_t = v\n           for (t,(q,w)) in enumerate(zip(q,w))\n               t &gt; term &amp;&amp; return result\n               result += inforce * (P - S * q) * v_t\n               inforce -= inforce * q + inforce * w\n               v_t *= v\n           end\n           return result\n       end\nnpv4 (generic function with 2 methods)\n\njulia&gt; @benchmark npv5($q,$w,$P,$S,$r)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     18.100 ns (0.00% GC)\n  median time:      18.300 ns (0.00% GC)\n  mean time:        18.507 ns (0.00% GC)\n  maximum time:     53.100 ns (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1000\n\njulia&gt; @benchmark npv4($q,$w,$P,$S,$r)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     17.117 ns (0.00% GC)\n  median time:      17.317 ns (0.00% GC)\n  mean time:        17.562 ns (0.00% GC)\n  maximum time:     128.328 ns (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     999```","user":"UFWQ6DP0S","ts":"1617764301.135000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TMM67","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @inline function npv5(q,w,P,S,r,term=nothing)\n           term = term === nothing ? length(q) : term\n           inforce = 1.0\n           result = 0.0\n           v = (1 / ( 1 + r))\n           v_t = v\n           for (q,w,_) in zip(q,w,1:term)\n               result += inforce * (P - S * q) * v_t\n               inforce -= inforce * q + inforce * w\n               v_t *= v\n           end\n           return result\n       end\nnpv5 (generic function with 2 methods)\n\njulia> @inline function npv4(q,w,P,S,r,term=nothing)\n           term = term === nothing ? length(q) : term\n           inforce = 1.0\n           result = 0.0\n           v = (1 / ( 1 + r))\n           v_t = v\n           for (t,(q,w)) in enumerate(zip(q,w))\n               t > term && return result\n               result += inforce * (P - S * q) * v_t\n               inforce -= inforce * q + inforce * w\n               v_t *= v\n           end\n           return result\n       end\nnpv4 (generic function with 2 methods)\n\njulia> @benchmark npv5($q,$w,$P,$S,$r)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     18.100 ns (0.00% GC)\n  median time:      18.300 ns (0.00% GC)\n  mean time:        18.507 ns (0.00% GC)\n  maximum time:     53.100 ns (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     1000\n\njulia> @benchmark npv4($q,$w,$P,$S,$r)\nBenchmarkTools.Trial:\n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     17.117 ns (0.00% GC)\n  median time:      17.317 ns (0.00% GC)\n  mean time:        17.562 ns (0.00% GC)\n  maximum time:     128.328 ns (0.00% GC)\n  --------------\n  samples:          10000\n  evals/sample:     999"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"f339a6a4-9cfc-482c-87f1-0ac6772e9c29","type":"message","text":"Pretty consistent for me after several runs. I will try your version <@UD0NS8PDF> now","user":"UFWQ6DP0S","ts":"1617764321.135200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/sx6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Pretty consistent for me after several runs. I will try your version "},{"type":"user","user_id":"UD0NS8PDF"},{"type":"text","text":" now"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"c1657bc8-75f7-4c45-90db-257709f533ac","type":"message","text":"when these things get down to a nanosecond difference, I get suspicious","user":"U6795JH6H","ts":"1617764344.135400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"u8ry","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"when these things get down to a nanosecond difference, I get suspicious"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"8d34ccb8-2c86-4dca-a995-4db32cb3781c","type":"message","text":"there can be timing artifacts due to where code got compiled in memory","user":"U6795JH6H","ts":"1617764385.135600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tX3nk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there can be timing artifacts due to where code got compiled in memory"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"f0fa0b14-6476-4d81-8a4e-da36ff09f668","type":"message","text":"it’s entirely possible to start a new process and get different timings","user":"U6795JH6H","ts":"1617764435.135800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vefNT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it’s entirely possible to start a new process and get different timings"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"3c302681-8db6-4cae-b75a-713f48519217","type":"message","text":"<@UD0NS8PDF> wins by about 30% speedup for me","user":"UFWQ6DP0S","ts":"1617764509.136000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EMk1","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UD0NS8PDF"},{"type":"text","text":" wins by about 30% speedup for me"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"0b2c0cc3-abd2-4ece-bfdf-fcdaf8b7b230","type":"message","text":"thanks folks, that puts it firmly ahead of the next best, which was a rust example","user":"UFWQ6DP0S","ts":"1617764538.136200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"o/g","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thanks folks, that puts it firmly ahead of the next best, which was a rust example"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S","reactions":[{"name":"sonic","users":["UD0NS8PDF"],"count":1}]},{"client_msg_id":"25795daa-b767-4ded-81a9-e0a9b629c6b2","type":"message","text":"```pub fn npv(mortality_rates: &amp;[f64], lapse_rates: &amp;[f64], interest_rate: f64, sum_assured: f64, premium: f64, init_pols: f64, term: Option&lt;usize&gt;) -&gt; f64 {\n\n    let term = term.unwrap_or_else(|| mortality_rates.len());\n    let mut result = 0.0;\n    let mut inforce = init_pols;\n    let v = 1.0 / (1.0 + interest_rate);\n    let mut v_t = v;\n\n    for (t, (q, w)) in mortality_rates.iter().zip(lapse_rates).enumerate() {\n        let no_deaths = if t &lt; term {inforce * q} else {0.0};\n        let no_lapses = if t &lt; term {inforce * w} else {0.0};\n        let premiums = inforce * premium;\n        let claims = no_deaths * sum_assured;\n        let net_cashflow = premiums - claims;\n        result += net_cashflow * v_t;\n        v_t *= v;\n        inforce = inforce - no_deaths - no_lapses;\n    }\n\n    result\n}```","user":"UFWQ6DP0S","ts":"1617764615.136500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Tt0Ip","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"pub fn npv(mortality_rates: &[f64], lapse_rates: &[f64], interest_rate: f64, sum_assured: f64, premium: f64, init_pols: f64, term: Option<usize>) -> f64 {\n\n    let term = term.unwrap_or_else(|| mortality_rates.len());\n    let mut result = 0.0;\n    let mut inforce = init_pols;\n    let v = 1.0 / (1.0 + interest_rate);\n    let mut v_t = v;\n\n    for (t, (q, w)) in mortality_rates.iter().zip(lapse_rates).enumerate() {\n        let no_deaths = if t < term {inforce * q} else {0.0};\n        let no_lapses = if t < term {inforce * w} else {0.0};\n        let premiums = inforce * premium;\n        let claims = no_deaths * sum_assured;\n        let net_cashflow = premiums - claims;\n        result += net_cashflow * v_t;\n        v_t *= v;\n        inforce = inforce - no_deaths - no_lapses;\n    }\n\n    result\n}"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"99c2f764-7375-49bb-98ae-f4888f7c97d6","type":"message","text":"the rust submission","user":"UFWQ6DP0S","ts":"1617764619.136700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ry7D","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the rust submission"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"fdde4d02-5236-4ba4-88b9-582bbc30e1ca","type":"message","text":"rearranging the third line gives me a 30% speedup over <@UD0NS8PDF>\n```      for t in 1:min(term, length(qs), length(ws))\n          @inbounds q, w = qs[t], ws[t]\n          result += inforce * (P - S * q) * v_t\n          inforce = inforce*(1 - (q + w))\n          v_t *= v\n      end```","user":"U011V2YN59N","ts":"1617764623.136900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Utff","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"rearranging the third line gives me a 30% speedup over "},{"type":"user","user_id":"UD0NS8PDF"},{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"      for t in 1:min(term, length(qs), length(ws))\n          @inbounds q, w = qs[t], ws[t]\n          result += inforce * (P - S * q) * v_t\n          inforce = inforce*(1 - (q + w))\n          v_t *= v\n      end"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"22dddfc1-b833-4bc5-a4bf-08437af1486c","type":"message","text":"```@inline function npv4(qs,ws,P,S,r,term=length(qs))\n      inforce, result = 1.0, 0.0\n      v = 1 / ( 1 + r)\n      v_t = v\n      @inbounds @simd for t in 1:min(term, length(qs), length(ws))\n          q, w = qs[t], ws[t]\n          result += inforce * (P - S * q) * v_t\n          inforce = inforce*(1 - (q + w))\n          v_t *= v\n      end\n      return result\n  end\n  @btime npv4($q,$w,$P,$S,$r) ```\nAdding `@simd` shaves off a tiny bit also, this is ~7.2 ns apparently, down from 9.5ns with the next best.","user":"U011V2YN59N","ts":"1617764728.137100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DDo","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@inline function npv4(qs,ws,P,S,r,term=length(qs))\n      inforce, result = 1.0, 0.0\n      v = 1 / ( 1 + r)\n      v_t = v\n      @inbounds @simd for t in 1:min(term, length(qs), length(ws))\n          q, w = qs[t], ws[t]\n          result += inforce * (P - S * q) * v_t\n          inforce = inforce*(1 - (q + w))\n          v_t *= v\n      end\n      return result\n  end\n  @btime npv4($q,$w,$P,$S,$r) "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Adding "},{"type":"text","text":"@simd","style":{"code":true}},{"type":"text","text":" shaves off a tiny bit also, this is ~7.2 ns apparently, down from 9.5ns with the next best."}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S","reactions":[{"name":"star2","users":["UFWQ6DP0S","U6795JH6H"],"count":2}]},{"client_msg_id":"f52694f3-e364-4a0e-8339-6002e9fde20f","type":"message","text":"Oh yeah, simd seems helpful here although the `inforce` dependency makes it tricky the compiler may be able to unroll the loop and vectorize it","user":"U6795JH6H","ts":"1617764898.137400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7gxk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh yeah, simd seems helpful here although the "},{"type":"text","text":"inforce","style":{"code":true}},{"type":"text","text":" dependency makes it tricky the compiler may be able to unroll the loop and vectorize it"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"3a76517a-3072-4308-9cb9-c665d4a8016e","type":"message","text":"With all of the improvements (including `@simd`), about 2x as fast as what I started with above (which was after several round of refinement already)","user":"UFWQ6DP0S","ts":"1617764934.137700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XVfKR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"With all of the improvements (including "},{"type":"text","text":"@simd","style":{"code":true}},{"type":"text","text":"), about 2x as fast as what I started with above (which was after several round of refinement already)"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"0bf58c86-66a4-4db9-813e-8c5fc827e23c","type":"message","text":"The `-=` change helps here too, strange as I would have thought equally many + * * operations? But weird things matter.","user":"UD0NS8PDF","ts":"1617764954.137900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LoGTO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The "},{"type":"text","text":"-=","style":{"code":true}},{"type":"text","text":" change helps here too, strange as I would have thought equally many + * * operations? But weird things matter."}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"a4aa92a8-9960-4304-8e02-0d63c4ff46a6","type":"message","text":"Would be a bit scared of `@simd`, since you’re using each iteration in the next","user":"UD0NS8PDF","ts":"1617764978.138100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qRl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Would be a bit scared of "},{"type":"text","text":"@simd","style":{"code":true}},{"type":"text","text":", since you’re using each iteration in the next"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"dc68d2b3-e76c-4cc3-8a14-776278a23e37","type":"message","text":"<@UD0NS8PDF> yeah.. I am not sure why simd helps here, the improvement is so tiny.","user":"U011V2YN59N","ts":"1617765006.138300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dgI","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UD0NS8PDF"},{"type":"text","text":" yeah.. I am not sure why simd helps here, the improvement is so tiny."}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"8ca3414e-a94c-4164-8835-3b79114e95d4","type":"message","text":"I like performance golfing wayyy too much.","user":"U011V2YN59N","ts":"1617765013.138500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aMYqH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I like performance golfing wayyy too much."}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"3d93b74f-d9c6-44a2-b9fd-d1473f455e69","type":"message","text":"My plan is to put together a container with R/Julia/Rust/Python and run the different codes to try and make it consistent to benchmark (so far everyone is self reporting times, except I've compared the Rust and Julia on same machine)","user":"UFWQ6DP0S","ts":"1617765045.138700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ikFE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My plan is to put together a container with R/Julia/Rust/Python and run the different codes to try and make it consistent to benchmark (so far everyone is self reporting times, except I've compared the Rust and Julia on same machine)"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"cc02eb85-aadf-4ab0-aea6-2c57c585a63c","type":"message","text":"I’m not too worried about it — the macro only gives license to to floating point reassociations as necessary; if won’t ignore the fact that `inforce` in each iteration depends on the last","user":"U6795JH6H","ts":"1617765056.138900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iFY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’m not too worried about it — the macro only gives license to to floating point reassociations as necessary; if won’t ignore the fact that "},{"type":"text","text":"inforce","style":{"code":true}},{"type":"text","text":" in each iteration depends on the last"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"7ce21a7a-5b0b-4e23-8f45-3bb13eaa0caf","type":"message","text":"Ah ok, then it’s smarter than I gave it credit for.","user":"UD0NS8PDF","ts":"1617765088.139100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/qO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah ok, then it’s smarter than I gave it credit for."}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"b83e4802-f7f6-4eca-99d9-a3f6254ddb71","type":"message","text":"the unrolling I was referring to was that you can compute, say 4 consecutive `inforce` values in a vector register and then do the `result` and `v_t` accumulations in vector registers","user":"U6795JH6H","ts":"1617765134.139300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sYGN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the unrolling I was referring to was that you can compute, say 4 consecutive "},{"type":"text","text":"inforce","style":{"code":true}},{"type":"text","text":" values in a vector register and then do the "},{"type":"text","text":"result","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"v_t","style":{"code":true}},{"type":"text","text":" accumulations in vector registers"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S","reactions":[{"name":"open_mouth","users":["U011V2YN59N"],"count":1}]},{"client_msg_id":"136449dc-257e-47d5-8b26-1ade9c20dc64","type":"message","text":"then write a post on <http://JuliaActuary.org|JuliaActuary.org> to highlight what the original poster termed the \"life modeling problem\" (looped, recursive nature of calculations) which in the Julia parlance is \"don't be afraid of for loops\"","user":"UFWQ6DP0S","ts":"1617765152.139500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JagRf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"then write a post on "},{"type":"link","url":"http://JuliaActuary.org","text":"JuliaActuary.org"},{"type":"text","text":" to highlight what the original poster termed the \"life modeling problem\" (looped, recursive nature of calculations) which in the Julia parlance is \"don't be afraid of for loops\""}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"a637f5e5-a3b4-4429-853d-e4cf51c0b532","type":"message","text":"thanks again!","user":"UFWQ6DP0S","ts":"1617765191.139700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=xS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thanks again!"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"638c6ba8-e89b-4d71-9017-a41291783c3c","type":"message","text":"slack question: if I \"bookmark\" this thread, I can reference it later? or does it get lost with the post limit?","user":"UFWQ6DP0S","ts":"1617765239.140000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"X3Fea","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"slack question: if I \"bookmark\" this thread, I can reference it later? or does it get lost with the post limit?"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"cbd6b441-f808-4c08-a1a6-5a30be9e7189","type":"message","text":"should be possible, but I would copy and paste it somewhere","user":"U6795JH6H","ts":"1617765294.140200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"00I","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"should be possible, but I would copy and paste it somewhere"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"085cfc13-f7d6-4794-9369-12c7b4bc1354","type":"message","text":"google docs does a surprisingly good job if you paste a Slack thread into it","user":"U6795JH6H","ts":"1617765316.140400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PUP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"google docs does a surprisingly good job if you paste a Slack thread into it"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"6b623df9-1f22-473b-bc67-50548f379a26","type":"message","text":"I’m not able to grok what’s going on in the machine code of the simd version of this","user":"U6795JH6H","ts":"1617765339.140600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XLPe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’m not able to grok what’s going on in the machine code of the simd version of this"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"5883f30e-5aff-4618-8803-b19c25b7634d","type":"message","text":"Is there a closed-form solution, btw?","user":"UD0NS8PDF","ts":"1617765483.140800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UZW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a closed-form solution, btw?"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"66e61be6-b0fa-4496-8eb9-9ddab7918fb3","type":"message","text":"I don't think there's a closed form? It's a series where every value depends on the previous one so I'm not sure there's a way to avoid iterating in some way","user":"UFWQ6DP0S","ts":"1617765895.141000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bzD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't think there's a closed form? It's a series where every value depends on the previous one so I'm not sure there's a way to avoid iterating in some way"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"d41ad217-9f20-4750-ae3e-0ccdfe1e81f0","type":"message","text":"Oh right, indeed, never mind.","user":"UD0NS8PDF","ts":"1617766290.141200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OYKe3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh right, indeed, never mind."}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"6b7de080-b1c5-40b7-a6e2-ad9462561d66","type":"message","text":"I found another ns though:  6.125 ns with `@fastmath`, 7.125 ns with `@simd`, 7.666 ns with neither.","user":"UD0NS8PDF","ts":"1617766312.141400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WIMM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I found another ns though:  6.125 ns with "},{"type":"text","text":"@fastmath","style":{"code":true}},{"type":"text","text":", 7.125 ns with "},{"type":"text","text":"@simd","style":{"code":true}},{"type":"text","text":", 7.666 ns with neither."}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"59801042-223a-4188-b45b-f3de27a8dcda","type":"message","text":"```help?&gt; @fastmath\n  @fastmath expr\n\n  Execute a transformed version of the expression, which calls functions that\n  may violate strict IEEE semantics. This allows the fastest possible\n  operation, but results are undefined – be careful when doing this, as it may\n  change numerical results.```","user":"UFWQ6DP0S","ts":"1617766482.141600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8PkqR","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"help?> @fastmath\n  @fastmath expr\n\n  Execute a transformed version of the expression, which calls functions that\n  may violate strict IEEE semantics. This allows the fastest possible\n  operation, but results are undefined – be careful when doing this, as it may\n  change numerical results."}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"66758572-84b5-4e15-a93b-a53a716b4154","type":"message","text":"What does it mean that “results are undefined”","user":"UFWQ6DP0S","ts":"1617766499.141800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MHIho","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What does it mean that “results are undefined”"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"f217cf30-3459-4258-82a9-e4a95acc9493","type":"message","text":"how much can it “change numerical results”?","user":"UFWQ6DP0S","ts":"1617766550.142000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OHKJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"how much can it “change numerical results”?"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"793f116b-b43a-494a-9060-2c5d4263e1c9","type":"message","text":"The help text is a little scary in that regard","user":"UFWQ6DP0S","ts":"1617766563.142200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"S4y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The help text is a little scary in that regard"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"56dcd9e4-7ca8-4f69-ab6e-298b01dd5542","type":"message","text":"theoretically? it can change them arbitrarily large amounts","user":"U011V2YN59N","ts":"1617766583.142400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"H=rS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"theoretically? it can change them arbitrarily large amounts"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"0e454680-e7db-4c0a-9e93-bb892fa84df1","type":"message","text":"also `@fastmath` does not improve results on my machine","user":"U011V2YN59N","ts":"1617766592.142600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PQkW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"also "},{"type":"text","text":"@fastmath","style":{"code":true}},{"type":"text","text":" does not improve results on my machine"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"3d94ff90-9982-498f-bf43-a4abd0ef8583","type":"message","text":"I think one of the changes is that NaN &amp; Inf may be handled differently, rather than following official rules.","user":"UD0NS8PDF","ts":"1617766644.142800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YoJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think one of the changes is that NaN & Inf may be handled differently, rather than following official rules."}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"71081eb1-fa6c-4668-9430-473a9d8172ed","type":"message","text":"that's one of the changes, but can't it rearrange floating point arithmetic?","user":"U011V2YN59N","ts":"1617766678.143000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Qro","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's one of the changes, but can't it rearrange floating point arithmetic?"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"6b253362-7502-4bf8-9956-3f4edd5c5e42","type":"message","text":"Yes, that too. Which I guess can get you any answer you like if you try hard enough — is that what “undefined” is trying to say?","user":"UD0NS8PDF","ts":"1617766716.143200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"a=F","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, that too. Which I guess can get you any answer you like if you try hard enough — is that what “undefined” is trying to say?"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"cb1c6ded-5a50-4936-8d63-09331dc2ef94","type":"message","text":"yeah, I think so. I read a discourse thread about splitting `fastmath` into different macros, but I am not sure of the progress.","user":"U011V2YN59N","ts":"1617766789.143400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"a1N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, I think so. I read a discourse thread about splitting "},{"type":"text","text":"fastmath","style":{"code":true}},{"type":"text","text":" into different macros, but I am not sure of the progress."}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"6b76a85b-1006-4b29-97d1-b49c67246bd3","type":"message","text":"I get a 1ns (10%) improvement with `@fastmath` (windows i9)","user":"UFWQ6DP0S","ts":"1617766817.143600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tze","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I get a 1ns (10%) improvement with "},{"type":"text","text":"@fastmath","style":{"code":true}},{"type":"text","text":" (windows i9)"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"0376d1c4-f1ed-49d4-ad3c-e816cd1d75f8","type":"message","text":"hm, I am on ryzen 5000 linux","user":"U011V2YN59N","ts":"1617766836.143800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5t1p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hm, I am on ryzen 5000 linux"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"dd843be8-29b4-4389-be00-a37ab39f67e6","type":"message","text":"I’m on an ARM mac, fwiw.","user":"UD0NS8PDF","ts":"1617766886.144000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O3b","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’m on an ARM mac, fwiw."}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"c2725447-3955-46fc-9f6c-6de8a6d8f27c","type":"message","text":"Oh yeah, I tried `@fastmath` and it was faster. Forgot to post that. That macro gives license to reassociate arithmetic ops even though they’re not strictly associative, and assume that pure math identities hold. This can have catastrophic consequences for transcendental function implementations that rely on that stuff but here it just lets the compiler reorganize additions and multiplications and whatnot, which is pretty harmless.","user":"U6795JH6H","ts":"1617767294.144200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kQfN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh yeah, I tried "},{"type":"text","text":"@fastmath","style":{"code":true}},{"type":"text","text":" and it was faster. Forgot to post that. That macro gives license to reassociate arithmetic ops even though they’re not strictly associative, and assume that pure math identities hold. This can have catastrophic consequences for transcendental function implementations that rely on that stuff but here it just lets the compiler reorganize additions and multiplications and whatnot, which is pretty harmless."}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"890c2a35-644c-446f-a3f4-68365fa262f3","type":"message","text":"Would be good to have a safer version of `@fastmath` but that’s kind of hard to define clearly","user":"U6795JH6H","ts":"1617767358.144400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CC1K","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Would be good to have a safer version of "},{"type":"text","text":"@fastmath","style":{"code":true}},{"type":"text","text":" but that’s kind of hard to define clearly"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"84ca7b77-fd8c-4659-96b3-e22c969607a3","type":"message","text":"Using this code is the fastest so far, and is 8.8ns on Windows i9-9900k, 9.4ns on Mac M1 on Julia 1.6 (Rosetta), and 6.2ns on Julia master (native ARM):\n```@inline function npv9(qs,ws,P,S,r,term=length(qs))\n    inforce, result = 1.0, 0.0\n    v = 1 / ( 1 + r)\n    v_t = v\n    @inbounds @fastmath for t in 1:min(term, length(qs), length(ws))\n        q, w = qs[t], ws[t]\n        result += inforce * (P - S * q) * v_t\n        inforce = inforce*(1 - (q + w))\n        v_t *= v\n    end\n    return result\nend```","user":"UFWQ6DP0S","ts":"1617767545.144600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"93xCR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Using this code is the fastest so far, and is 8.8ns on Windows i9-9900k, 9.4ns on Mac M1 on Julia 1.6 (Rosetta), and 6.2ns on Julia master (native ARM):\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@inline function npv9(qs,ws,P,S,r,term=length(qs))\n    inforce, result = 1.0, 0.0\n    v = 1 / ( 1 + r)\n    v_t = v\n    @inbounds @fastmath for t in 1:min(term, length(qs), length(ws))\n        q, w = qs[t], ws[t]\n        result += inforce * (P - S * q) * v_t\n        inforce = inforce*(1 - (q + w))\n        v_t *= v\n    end\n    return result\nend"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"8dd2aed8-64e2-400d-a8e4-b9f0fb2c5a26","type":"message","text":"The `@simd` will mark some operations as fast math, in order to legalize reordering","user":"U67BJLYCS","ts":"1617768000.144800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kSwD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The "},{"type":"text","text":"@simd","style":{"code":true}},{"type":"text","text":" will mark some operations as fast math, in order to legalize reordering"}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"},{"client_msg_id":"cac8a590-bc72-4636-8e44-63de919f4f5a","type":"message","text":"It doesn't state anything about independence of loop iterations (for that you need `@simd ivdep`","user":"U67BJLYCS","ts":"1617768044.145000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xNo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It doesn't state anything about independence of loop iterations (for that you need "},{"type":"text","text":"@simd ivdep","style":{"code":true}}]}]}],"thread_ts":"1617762478.131400","parent_user_id":"UFWQ6DP0S"}]