[{"client_msg_id":"6229696a-662f-4440-ba0c-dd8bbb60f03f","type":"message","text":"Hi guys I managed to patch together an example using the 'indirectbr' llvm instruction, which is how computed gotos might be implemented.  Does anyone know how to turn this into a macro?","user":"U01GRS159T8","ts":"1609952031.308500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AtkW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi guys I managed to patch together an example using the 'indirectbr' llvm instruction, which is how computed gotos might be implemented.  Does anyone know how to turn this into a macro?"}]}]}],"thread_ts":"1609952031.308500","reply_count":5,"reply_users_count":2,"latest_reply":"1609982971.311100","reply_users":["U01GRS159T8","UAUPJLBQX"],"subscribed":false},{"client_msg_id":"ce6268a3-7c2c-40af-bad0-2e1e60a69e62","type":"message","text":"```Base.@ccallable Nothing function foo1()\n    println(\"1\")\n    return nothing\nend\n\nBase.@ccallable Nothing function foo2()\n    println(\"2\")\n    return nothing\nend\n\nBase.@ccallable Nothing function foo3()\n    println(\"3\")\n    return nothing\nend\n\nfunction dofoo(x::Int32)\n    Core.Intrinsics.llvmcall((\"\"\"\n        declare void @foo1()\n        declare void @foo2()\n        declare void @foo3()\n        define i8* @dofoo(i32 %idx) nounwind {\n        %labels = alloca [6 x i8*]\n        %da = getelementptr [6 x i8*], [6 x i8*]* %labels, i32 0, i32 0\n        %db = getelementptr [6 x i8*], [6 x i8*]* %labels, i32 0, i32 1\n        %dc = getelementptr [6 x i8*], [6 x i8*]* %labels, i32 0, i32 2\n        %dd = getelementptr [6 x i8*], [6 x i8*]* %labels, i32 0, i32 3\n        %de = getelementptr [6 x i8*], [6 x i8*]* %labels, i32 0, i32 4\n        %df = getelementptr [6 x i8*], [6 x i8*]* %labels, i32 0, i32 5\n        store i8* blockaddress(@dofoo, %AA), i8** %da\n        store i8* blockaddress(@dofoo, %BB), i8** %db\n        store i8* blockaddress(@dofoo, %CC), i8** %dc\n        store i8* blockaddress(@dofoo, %DD), i8** %dd\n        store i8* blockaddress(@dofoo, %EE), i8** %de\n        store i8* blockaddress(@dofoo, %FF), i8** %df\n        %brtoptr = getelementptr [6 x i8*], [6 x i8*]* %labels, i32 0, i32 %idx\n        %brto = load i8*, i8** %brtoptr\n        indirectbr i8* %brto, [label %AA, label %BB, label %CC, label %DD, label %EE, label %FF]\n        AA:\n        call void @foo1()\n        ret i8* %brto\n        BB:\n        call void @foo2()\n        ret i8* %brto\n        CC:\n        call void @foo3()\n        ret i8* %brto\n        DD:\n        call void @foo3()\n        ret i8* %brto\n        EE:\n        call void @foo2()\n        ret i8* %brto\n        FF:\n        call void @foo1()\n        ret i8* %brto\n        }\n    \"\"\",\n        \"\"\"\n        %2 = call i8* @dofoo(i32 %0)\n        %3 = ptrtoint i8* %2 to i64\n        ret i64 %3\n    \"\"\"), Int64, Tuple{Int32}, x)\nend\n\nlet\n    dofoo(Int32(2));\nend```","user":"U01GRS159T8","ts":"1609952036.308600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uDWk","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Base.@ccallable Nothing function foo1()\n    println(\"1\")\n    return nothing\nend\n\nBase.@ccallable Nothing function foo2()\n    println(\"2\")\n    return nothing\nend\n\nBase.@ccallable Nothing function foo3()\n    println(\"3\")\n    return nothing\nend\n\nfunction dofoo(x::Int32)\n    Core.Intrinsics.llvmcall((\"\"\"\n        declare void @foo1()\n        declare void @foo2()\n        declare void @foo3()\n        define i8* @dofoo(i32 %idx) nounwind {\n        %labels = alloca [6 x i8*]\n        %da = getelementptr [6 x i8*], [6 x i8*]* %labels, i32 0, i32 0\n        %db = getelementptr [6 x i8*], [6 x i8*]* %labels, i32 0, i32 1\n        %dc = getelementptr [6 x i8*], [6 x i8*]* %labels, i32 0, i32 2\n        %dd = getelementptr [6 x i8*], [6 x i8*]* %labels, i32 0, i32 3\n        %de = getelementptr [6 x i8*], [6 x i8*]* %labels, i32 0, i32 4\n        %df = getelementptr [6 x i8*], [6 x i8*]* %labels, i32 0, i32 5\n        store i8* blockaddress(@dofoo, %AA), i8** %da\n        store i8* blockaddress(@dofoo, %BB), i8** %db\n        store i8* blockaddress(@dofoo, %CC), i8** %dc\n        store i8* blockaddress(@dofoo, %DD), i8** %dd\n        store i8* blockaddress(@dofoo, %EE), i8** %de\n        store i8* blockaddress(@dofoo, %FF), i8** %df\n        %brtoptr = getelementptr [6 x i8*], [6 x i8*]* %labels, i32 0, i32 %idx\n        %brto = load i8*, i8** %brtoptr\n        indirectbr i8* %brto, [label %AA, label %BB, label %CC, label %DD, label %EE, label %FF]\n        AA:\n        call void @foo1()\n        ret i8* %brto\n        BB:\n        call void @foo2()\n        ret i8* %brto\n        CC:\n        call void @foo3()\n        ret i8* %brto\n        DD:\n        call void @foo3()\n        ret i8* %brto\n        EE:\n        call void @foo2()\n        ret i8* %brto\n        FF:\n        call void @foo1()\n        ret i8* %brto\n        }\n    \"\"\",\n        \"\"\"\n        %2 = call i8* @dofoo(i32 %0)\n        %3 = ptrtoint i8* %2 to i64\n        ret i64 %3\n    \"\"\"), Int64, Tuple{Int32}, x)\nend\n\nlet\n    dofoo(Int32(2));\nend"}]}]}],"thread_ts":"1609952031.308500","parent_user_id":"U01GRS159T8"},{"client_msg_id":"638fc6dd-0bab-42ce-9e20-afbf882d9bd5","type":"message","text":"It would be cool if I could turn this into a macro like\n```@compgoto x foo1 foo2 foo3 foo3 foo2 foo1```","user":"U01GRS159T8","ts":"1609952071.308800","team":"T68168MUP","edited":{"user":"U01GRS159T8","ts":"1609952085.000000"},"blocks":[{"type":"rich_text","block_id":"Mfj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It would be cool if I could turn this into a macro like\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@compgoto x foo1 foo2 foo3 foo3 foo2 foo1"}]}]}],"thread_ts":"1609952031.308500","parent_user_id":"U01GRS159T8"},{"client_msg_id":"dbe6ddef-08f5-4776-ba6d-32a73b7c9c80","type":"message","text":"I don't think it's possible, unfortunately, because AFAIK you can't call Julia functions within llvmcall because of the name mangling.","user":"UAUPJLBQX","ts":"1609957600.310600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+Fq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't think it's possible, unfortunately, because AFAIK you can't call Julia functions within llvmcall because of the name mangling."}]}]}],"thread_ts":"1609952031.308500","parent_user_id":"U01GRS159T8"},{"client_msg_id":"0da9d6a1-cd74-4b17-9c13-1508545ff2ab","type":"message","text":"dont they just have to be mark @ccallable ?","user":"U01GRS159T8","ts":"1609958026.310800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9lR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"dont they just have to be mark @ccallable ?"}]}]}],"thread_ts":"1609952031.308500","parent_user_id":"U01GRS159T8"},{"client_msg_id":"57f0dd4d-9f41-4c5f-8780-1e0bd937e906","type":"message","text":"Yeah, but it won't inline the `@ccallable` functions, (although maybe you wouldn't want it to because that would change their relative addresses? I don't know much about computed gotos, but it sounds interesting)\n```julia&gt; Base.@ccallable Int function myfun(x::Int)\n           x + 1\n       end\n\njulia&gt; f(x) = Base.llvmcall(\n           (\"\"\" declare i64 @myfun(i64)\n           define i64 @entry(i64) alwaysinline {\n           top:\n                %res = call i64 @myfun(i64 %0)\n                ret i64 %res\n              }\"\"\",\"entry\"), Int, Tuple{Int}, x)\nf (generic function with 1 method)\n\njulia&gt; f(5)\n6\n\njulia&gt; @code_llvm debuginfo=:none f(7)\ndefine i64 @julia_f_734(i64 %0) {\ntop:\n  %res.i = call i64 @myfun(i64 %0)\n  ret i64 %res.i\n}```","user":"UAUPJLBQX","ts":"1609982971.311100","team":"T68168MUP","edited":{"user":"UAUPJLBQX","ts":"1609988469.000000"},"blocks":[{"type":"rich_text","block_id":"YIJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, but it won't inline the "},{"type":"text","text":"@ccallable","style":{"code":true}},{"type":"text","text":" functions, (although maybe you wouldn't want it to because that would change their relative addresses? I don't know much about computed gotos, but it sounds interesting)\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Base.@ccallable Int function myfun(x::Int)\n           x + 1\n       end\n\njulia> f(x) = Base.llvmcall(\n           (\"\"\" declare i64 @myfun(i64)\n           define i64 @entry(i64) alwaysinline {\n           top:\n                %res = call i64 @myfun(i64 %0)\n                ret i64 %res\n              }\"\"\",\"entry\"), Int, Tuple{Int}, x)\nf (generic function with 1 method)\n\njulia> f(5)\n6\n\njulia> @code_llvm debuginfo=:none f(7)\ndefine i64 @julia_f_734(i64 %0) {\ntop:\n  %res.i = call i64 @myfun(i64 %0)\n  ret i64 %res.i\n}"}]}]}],"thread_ts":"1609952031.308500","parent_user_id":"U01GRS159T8"}]