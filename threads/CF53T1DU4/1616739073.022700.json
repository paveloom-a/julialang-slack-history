[{"client_msg_id":"013325f4-7684-4d59-a775-b08637e7d21e","type":"message","text":"Hello. Running some code of mine with `@time` , I get :`7821.040149 seconds (23.55 G allocations: 1.653 TiB, 21.28% gc time)` . The code essentially consists in iterating over lots of small vectors constructed during the runtime. There is no big data that is read from disk or streamed from outside. The 1.6TiB makes me think I allocate way too much. How extreme are those numbers?","user":"U01MG0TN079","ts":"1616739073.022700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ab7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hello. Running some code of mine with "},{"type":"text","text":"@time","style":{"code":true}},{"type":"text","text":" , I get :"},{"type":"text","text":"7821.040149 seconds (23.55 G allocations: 1.653 TiB, 21.28% gc time)","style":{"code":true}},{"type":"text","text":" . The code essentially consists in iterating over lots of small vectors constructed during the runtime. There is no big data that is read from disk or streamed from outside. The 1.6TiB makes me think I allocate way too much. How extreme are those numbers?"}]}]}],"thread_ts":"1616739073.022700","reply_count":120,"reply_users_count":3,"latest_reply":"1617117150.074100","reply_users":["UJ7DVTVQ8","U01MG0TN079","UH24GRBLL"],"is_locked":false,"subscribed":false},{"client_msg_id":"52df6663-afe5-4809-baf1-56333b810aad","type":"message","text":"How small is small? You might be able to improve performance by a lot by using StaticArrays.jl","user":"UJ7DVTVQ8","ts":"1616740451.022800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"e1GI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How small is small? You might be able to improve performance by a lot by using StaticArrays.jl"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"da5fb0cf-8516-4469-89d0-e2dbe04db4ec","type":"message","text":"If small is less than about 100, I would give StaticArrays.jl a go","user":"UJ7DVTVQ8","ts":"1616740495.023000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LX2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If small is less than about 100, I would give StaticArrays.jl a go"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"c6759423-95fc-4a13-a720-8434d27906a3","type":"message","text":"small is \\leq 20","user":"U01MG0TN079","ts":"1616740523.023200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9lYXe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"small is \\leq 20"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"c8f4817d-eac6-4be9-950f-db11fa1106e5","type":"message","text":"but staticarrays require static-sized entries, don't they?","user":"U01MG0TN079","ts":"1616740538.023400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AKG5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but staticarrays require static-sized entries, don't they?"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"ad1fb83a-30d1-4f3c-805f-b1945b9add5a","type":"message","text":"Maybe `SizedArray` s make sense, then","user":"U01MG0TN079","ts":"1616740591.023600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Sve","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe "},{"type":"text","text":"SizedArray","style":{"code":true}},{"type":"text","text":" s make sense, then"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"2a109c9e-50be-46e9-95e7-f041f769b1b9","type":"message","text":"Say I have a diagonal matrix M and vectors u,v: does the product `u'*M*v` allocate a vector? Would it be better to have a custom routine to do the computation (since no allocation is needed here) ?","user":"U01MG0TN079","ts":"1616740705.023800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GIo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Say I have a diagonal matrix M and vectors u,v: does the product "},{"type":"text","text":"u'*M*v","style":{"code":true}},{"type":"text","text":" allocate a vector? Would it be better to have a custom routine to do the computation (since no allocation is needed here) ?"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"d3d367bd-50be-4779-89e8-ecd646f27ca5","type":"message","text":"It will allocate, but not if you use `dot`","user":"UJ7DVTVQ8","ts":"1616740765.024000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xUMWE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It will allocate, but not if you use "},{"type":"text","text":"dot","style":{"code":true}}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"3a4c343f-47bd-4cc3-8481-29b56f6886b7","type":"message","text":"Dot is that custom function","user":"UJ7DVTVQ8","ts":"1616740780.024200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ylk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Dot is that custom function"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"03e6ee3b-ed29-428f-8f82-8601cde0686f","type":"message","text":"And yeah, StaticArrays.jl require you to have a statically known size. Sometimes this can be worked around by using a function barrier","user":"UJ7DVTVQ8","ts":"1616740822.024400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uyZKv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And yeah, StaticArrays.jl require you to have a statically known size. Sometimes this can be worked around by using a function barrier"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"f955d1b0-fdcd-48ef-ac40-db1030ae95ce","type":"message","text":"are you using mutating functions? even with lots of small vectors, it may be possible to preallocate your working memory","user":"UH24GRBLL","ts":"1616744322.024600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1It+N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"are you using mutating functions? even with lots of small vectors, it may be possible to preallocate your working memory"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"a9be3bb8-4687-4533-8f5b-2a2bc3bed1b8","type":"message","text":"<@UJ7DVTVQ8> <https://docs.julialang.org/en/v1/stdlib/LinearAlgebra/#LinearAlgebra.dot-Tuple{Any,%20Any,%20Any}> So it is \"diagonal\" aware?","user":"U01MG0TN079","ts":"1616746074.024800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vq9C","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UJ7DVTVQ8"},{"type":"text","text":" "},{"type":"link","url":"https://docs.julialang.org/en/v1/stdlib/LinearAlgebra/#LinearAlgebra.dot-Tuple{Any,%20Any,%20Any}"},{"type":"text","text":" So it is \"diagonal\" aware?"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"a2db5f04-50b2-4e90-a9c3-e420ce959804","type":"message","text":"<@UH24GRBLL> Do you mean mutating in general, or specifically mutating the vectors? I have some mutation involved, but the vectors are generally treated as immutable I think","user":"U01MG0TN079","ts":"1616746137.025000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bbS","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UH24GRBLL"},{"type":"text","text":" Do you mean mutating in general, or specifically mutating the vectors? I have some mutation involved, but the vectors are generally treated as immutable I think"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"876fcf3f-057a-4b3c-bace-5b72c15d37da","type":"message","text":"both","user":"UH24GRBLL","ts":"1616746242.025200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6LWlq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"both"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"847f1a4c-353c-4265-ba17-abe9469c39bd","type":"message","text":"I see, and the idea is that I can preallocate vectors and specify them wherever I can?","user":"U01MG0TN079","ts":"1616746570.025400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"i8lR1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see, and the idea is that I can preallocate vectors and specify them wherever I can?"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"3b8be655-84a9-43a5-b4ba-7ef400d18d6b","type":"message","text":"the idea is to reuse memory","user":"UH24GRBLL","ts":"1616746739.025600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"00a","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the idea is to reuse memory"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"aa07e476-f4f9-4f0b-9050-497110ed6a29","type":"message","text":"`dot` with diagonal matrix will dispatch to\n```dot(x::AbstractVector, D::Diagonal, y::AbstractVector) = _mapreduce_prod(dot, x, D, y)```","user":"UJ7DVTVQ8","ts":"1616746739.025800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JmM+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"dot","style":{"code":true}},{"type":"text","text":" with diagonal matrix will dispatch to\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"dot(x::AbstractVector, D::Diagonal, y::AbstractVector) = _mapreduce_prod(dot, x, D, y)"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"10ca1f7d-2b1a-4133-8dfa-4e62358e9024","type":"message","text":"Find it using\n```let a = randn(2), B = Diagonal(randn(2))\n           @edit dot(a,B,a)\nend```","user":"UJ7DVTVQ8","ts":"1616746760.026000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dKta","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Find it using\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"let a = randn(2), B = Diagonal(randn(2))\n           @edit dot(a,B,a)\nend"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"5ad8678a-4e95-4f07-a9b8-8a567ccb292b","type":"message","text":"OK, and one last thing, then: In my case I have the diagonal storred as a vector, actually: what's the performancest way to do this dot product here?","user":"U01MG0TN079","ts":"1616747003.026200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iN0lj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"OK, and one last thing, then: In my case I have the diagonal storred as a vector, actually: what's the performancest way to do this dot product here?"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"eb9cdb14-2338-4218-bb90-9497d32db902","type":"message","text":"there is no `three_way_dot(x,y,z)` and I guess `dot(x,dot(y,z))` allocates","user":"U01MG0TN079","ts":"1616747033.026400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"o3U","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there is no "},{"type":"text","text":"three_way_dot(x,y,z)","style":{"code":true}},{"type":"text","text":" and I guess "},{"type":"text","text":"dot(x,dot(y,z))","style":{"code":true}},{"type":"text","text":" allocates"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"30f38f15-a9d4-460f-baac-673d380a938a","type":"message","text":"three argument dot exists though?","user":"UH24GRBLL","ts":"1616747119.026600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p86","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"three argument dot exists though?"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"2f5b1480-7249-43e9-b648-8d4a11e515e2","type":"message","text":"it's just `dot(a,b,c)`","user":"UH24GRBLL","ts":"1616747123.026800","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1616747129.000000"},"blocks":[{"type":"rich_text","block_id":"3nR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's just "},{"type":"text","text":"dot(a,b,c)","style":{"code":true}}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"2f284b84-4ff5-44b4-a627-a4bbbe219902","type":"message","text":"the point of `Diagonal` is precisely do represent a diagonal matrix by just storing its diagonal\n\n```Diagonal(V::AbstractVector)               \n                                          \nConstruct a matrix with V as its diagonal.```","user":"UH24GRBLL","ts":"1616747179.027100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3tJA5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the point of "},{"type":"text","text":"Diagonal","style":{"code":true}},{"type":"text","text":" is precisely do represent a diagonal matrix by just storing its diagonal\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Diagonal(V::AbstractVector)               \n                                          \nConstruct a matrix with V as its diagonal."}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"bc984a88-826d-4d7e-ae24-2243009fd05d","type":"message","text":"the reason for it being its own type is precisely to allow specialization based on the type","user":"UH24GRBLL","ts":"1616747206.027300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"THn=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the reason for it being its own type is precisely to allow specialization based on the type"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"4b132f3b-d452-4fc3-b082-37e66c48efca","type":"message","text":"it doesn't actually expand the vector into a dense matrix","user":"UH24GRBLL","ts":"1616747231.027500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Emtq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it doesn't actually expand the vector into a dense matrix"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"95931297-ea7c-409c-971d-5c7324f14685","type":"message","text":"```dot([1],LinearAlgebra.Diagonal([2]),[3])```\nthis works, but removing the `Diagonal()` throws an error on my computer","user":"U01MG0TN079","ts":"1616747319.027700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ewy8R","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"dot([1],LinearAlgebra.Diagonal([2]),[3])"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"this works, but removing the "},{"type":"text","text":"Diagonal()","style":{"code":true}},{"type":"text","text":" throws an error on my computer"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"cfe106a4-4ffc-41b2-ba59-3ef7ddc46885","type":"message","text":"OK, so the most reasonable approach is to wrap my diagonal vector into a `Diagonal`  and then just call `dot`  it seems?","user":"U01MG0TN079","ts":"1616747389.027900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"G7Z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"OK, so the most reasonable approach is to wrap my diagonal vector into a "},{"type":"text","text":"Diagonal","style":{"code":true}},{"type":"text","text":"  and then just call "},{"type":"text","text":"dot","style":{"code":true}},{"type":"text","text":"  it seems?"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"205c94aa-984d-42f0-a9b8-3cad7cb02b88","type":"message","text":"Thanks both!","user":"U01MG0TN079","ts":"1616747392.028100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AFBBB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks both!"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"b20affc3-0507-499c-af96-9c4455f4af96","type":"message","text":"In general, if your matrix has a special structure, it's a good idea to check if that structure is in `LinearAlgebra` or some package as a type, since they implement specialized algorithms that can take advantage of the structure","user":"UH24GRBLL","ts":"1616747670.028300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FLS4T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In general, if your matrix has a special structure, it's a good idea to check if that structure is in "},{"type":"text","text":"LinearAlgebra","style":{"code":true}},{"type":"text","text":" or some package as a type, since they implement specialized algorithms that can take advantage of the structure"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"ae882761-8470-456c-854c-c61e2ea502b1","type":"message","text":"the type is necessary to figure out at compile time which method to call, so you don't have to check the structure every time a method is called","user":"UH24GRBLL","ts":"1616747707.028500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RaG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the type is necessary to figure out at compile time which method to call, so you don't have to check the structure every time a method is called"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"fe7a0ca5-9477-4b34-931d-386c97fcd0fd","type":"message","text":"the advantage is that you can still just write `A*b` and it'll use the correct method, based on the types of `A` and `b`","user":"UH24GRBLL","ts":"1616747736.028700","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1616747739.000000"},"blocks":[{"type":"rich_text","block_id":"+KcvT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the advantage is that you can still just write "},{"type":"text","text":"A*b","style":{"code":true}},{"type":"text","text":" and it'll use the correct method, based on the types of "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"b","style":{"code":true}}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"f2f41f9c-4f12-44fe-aca0-b1491b852e61","type":"message","text":"That makes sense, yes!","user":"U01MG0TN079","ts":"1616748619.029000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gP+ip","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That makes sense, yes!"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"246a5b4a-2f6b-4fb3-a2b0-f83218164807","type":"message","text":"`5842.669082 seconds (20.92 G allocations: 1.435 TiB, 20.76% gc time, 0.01% compilation time)`","user":"U01MG0TN079","ts":"1616916931.048600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Aep","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"5842.669082 seconds (20.92 G allocations: 1.435 TiB, 20.76% gc time, 0.01% compilation time)","style":{"code":true}}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"dfb50ea3-5436-4d3c-b6f3-345fa3248692","type":"message","text":"I'm disappointed: I rewrote everything to kill what I thought caused the bulk of allocations, and here I am…","user":"U01MG0TN079","ts":"1616916974.048800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cri","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm disappointed: I rewrote everything to kill what I thought caused the bulk of allocations, and here I am…"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"182cd7b5-023a-4f99-bd12-f25295d1e635","type":"message","text":"well it wasn't for nothing - you shaved off 2000 seconds!","user":"UH24GRBLL","ts":"1616924634.049000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hAk3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well it wasn't for nothing - you shaved off 2000 seconds!"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"15d53823-d215-49a8-b35c-e23ec7644555","type":"message","text":"true enough, but I would have thought it would decimate allocations; I guess it's time for some \"memory allocation analysis\"","user":"U01MG0TN079","ts":"1616924883.049200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NXIzV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"true enough, but I would have thought it would decimate allocations; I guess it's time for some \"memory allocation analysis\""}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"f8832f81-9e39-4acb-a753-77d2219b1e4e","type":"message","text":"Maybe you need to profile your code more accurately. Something like\n<https://github.com/KristofferC/TimerOutputs.jl|https://github.com/KristofferC/TimerOutputs.jl>\ncould help you pin down where the allocations are happening. The built in profiler is also helpful.","user":"UJ7DVTVQ8","ts":"1616924928.049400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R3mfH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe you need to profile your code more accurately. Something like\n"},{"type":"link","url":"https://github.com/KristofferC/TimerOutputs.jl","text":"https://github.com/KristofferC/TimerOutputs.jl"},{"type":"text","text":"\ncould help you pin down where the allocations are happening. The built in profiler is also helpful."}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"4756f01f-0ccf-40eb-8aca-7114794151d9","type":"message","text":"From the readme: \"I like stars\". Haha, that's honest !","user":"U01MG0TN079","ts":"1616925258.049600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NaRx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"From the readme: \"I like stars\". Haha, that's honest !"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"ec280836-8237-4e24-ad50-60ec2159a2ea","type":"message","text":"thanks, yes, I might use this!","user":"U01MG0TN079","ts":"1616925294.049800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=t4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thanks, yes, I might use this!"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"e3cec37b-e143-49d6-9e36-ea6bbe63a54c","type":"message","text":"`11918.656886 seconds (30.72 G allocations: 2.178 TiB, 19.63% gc time)` I lost my commit with the above time and got this one now with what I think is the commit in question. Can this make sense?","user":"U01MG0TN079","ts":"1617111447.057600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xBAkh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"11918.656886 seconds (30.72 G allocations: 2.178 TiB, 19.63% gc time)","style":{"code":true}},{"type":"text","text":" I lost my commit with the above time and got this one now with what I think is the commit in question. Can this make sense?"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"36f8ea18-688f-4fb0-bfd9-0ecb502dc3fc","type":"message","text":"I mean, I did some more changes and commits, then tried to run this example again to see if I gained anything, and then tried to compare to my original \"best in class\" commit, but didn't know which it was, so I took the likeliest candidate and got this time (the neighboring commits don't have many differences, so perf should be comparable).","user":"U01MG0TN079","ts":"1617111586.057800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vAU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean, I did some more changes and commits, then tried to run this example again to see if I gained anything, and then tried to compare to my original \"best in class\" commit, but didn't know which it was, so I took the likeliest candidate and got this time (the neighboring commits don't have many differences, so perf should be comparable)."}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"2f6dfab8-1700-41a0-adb9-485181014369","type":"message","text":"uh","user":"UH24GRBLL","ts":"1617112809.058000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rjTXR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"uh"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"ad27c580-718d-4f8c-ad2f-1063fbe8418e","type":"message","text":"that looks like a serious regression","user":"UH24GRBLL","ts":"1617112814.058200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"S0+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that looks like a serious regression"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"27b446a2-3bdf-4017-b760-c58e1b962701","type":"message","text":"tbh, I'd begin with the `Profile` stdlib and check where your allocations actually are","user":"UH24GRBLL","ts":"1617112832.058400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6OGt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"tbh, I'd begin with the "},{"type":"text","text":"Profile","style":{"code":true}},{"type":"text","text":" stdlib and check where your allocations actually are"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"3294c26a-53f5-48fe-aa87-c4f2cee697c7","type":"message","text":"that's 30 million allocations, so it looks like they're in some hot loop","user":"UH24GRBLL","ts":"1617112875.058600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bj6Tl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's 30 million allocations, so it looks like they're in some hot loop"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"0739dd47-c533-409d-8e47-db3218e175f2","type":"message","text":"are you aware of the general tips from the \"Performance Tips\" section of the manual? <https://docs.julialang.org/en/v1/manual/performance-tips/>","user":"UH24GRBLL","ts":"1617112950.058800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=LtGU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"are you aware of the general tips from the \"Performance Tips\" section of the manual? "},{"type":"link","url":"https://docs.julialang.org/en/v1/manual/performance-tips/"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"572f91e3-06a9-4506-afa1-d51159534fad","type":"message","text":"What I'm really confused about is that, as far as I can see, I didn't change anything that could increase the allocations in my code (but then again, I'm not sure of the exact commit with best allocs/time…)","user":"U01MG0TN079","ts":"1617113004.059000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HGos","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What I'm really confused about is that, as far as I can see, I didn't change anything that could increase the allocations in my code (but then again, I'm not sure of the exact commit with best allocs/time…)"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"3af6502d-e16b-4caa-9537-2940fb853541","type":"message","text":"are you doing the first `@time` of the session or the second?","user":"UH24GRBLL","ts":"1617113070.059200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"v1Lv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"are you doing the first "},{"type":"text","text":"@time","style":{"code":true}},{"type":"text","text":" of the session or the second?"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"078d8e71-07a3-43fd-b790-a61a2f906652","type":"message","text":"how are you actually measuring this?","user":"UH24GRBLL","ts":"1617113075.059400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+v3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"how are you actually measuring this?"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"b1ccf984-7a01-4fc0-b18a-5477319958d8","type":"message","text":"which version are you on?","user":"UH24GRBLL","ts":"1617113087.059600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RRPnD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which version are you on?"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"6986249d-32cc-49d5-922a-ec2667ba6e0c","type":"message","text":"I am aware, yes. I `@profile`  semi-regularly and do the `--track-allocation-user`  sometimes, but it's a bit slow, so I don't do it often","user":"U01MG0TN079","ts":"1617113142.059800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d5F","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am aware, yes. I "},{"type":"text","text":"@profile","style":{"code":true}},{"type":"text","text":"  semi-regularly and do the "},{"type":"text","text":"--track-allocation-user","style":{"code":true}},{"type":"text","text":"  sometimes, but it's a bit slow, so I don't do it often"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"d058fe79-2a23-441f-a0df-4e4724cf7b19","type":"message","text":"I initialize my data, and then run `@time do_computations(mydata)` essentially","user":"U01MG0TN079","ts":"1617113194.060000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ACN7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I initialize my data, and then run "},{"type":"text","text":"@time do_computations(mydata)","style":{"code":true}},{"type":"text","text":" essentially"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"17a82cf2-ac46-4105-8907-56bb1c2f7038","type":"message","text":"and it's 1.6","user":"U01MG0TN079","ts":"1617113194.060200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TNxyQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and it's 1.6"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"4b1e5366-61ba-4f1b-94a3-821e342a7002","type":"message","text":"Everything happens here <https://github.com/bottine/VinbergsAlgorithmNF/blob/1940d63efa241612fd0900ecbef17bd35c7f5ef0/src/vinbergs_algo.jl#L370>","user":"U01MG0TN079","ts":"1617113292.060400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Lbj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Everything happens here "},{"type":"link","url":"https://github.com/bottine/VinbergsAlgorithmNF/blob/1940d63efa241612fd0900ecbef17bd35c7f5ef0/src/vinbergs_algo.jl#L370"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"903a4c97-3d17-4eb9-ba89-169bbb82c82a","type":"message","text":"Essentially, I have want to find all vectors of ~20 elements satisfying some constraints, and I iterate by taking all reasonable first coordinates, and then calling the function `_extend_root_stem` recursively","user":"U01MG0TN079","ts":"1617113373.060600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5Obb1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Essentially, I have want to find all vectors of ~20 elements satisfying some constraints, and I iterate by taking all reasonable first coordinates, and then calling the function "},{"type":"text","text":"_extend_root_stem","style":{"code":true}},{"type":"text","text":" recursively"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"4b377eab-dd76-4007-b3f0-3118f2ae22ca","type":"message","text":"I don't know if I should kill the recursive call and make it into a loop?","user":"U01MG0TN079","ts":"1617113395.060800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=834","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't know if I should kill the recursive call and make it into a loop?"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"3fe663c6-c23c-466e-934a-39596b91f23d","type":"message","text":"that function seems type unstable","user":"UH24GRBLL","ts":"1617113526.061000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Oj8Z5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that function seems type unstable"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"40282361-6fe9-4d38-93e0-f1e8edb1dc1e","type":"message","text":"recursive type unstable code is often hard to optimize","user":"UH24GRBLL","ts":"1617113537.061200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s1DC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"recursive type unstable code is often hard to optimize"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"04c875fc-8b8f-4b1b-81ac-cf972a92c792","type":"message","text":"there is no tail call optimization in julia","user":"UH24GRBLL","ts":"1617113547.061400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aHS5U","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there is no tail call optimization in julia"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"cf247247-0bed-4e01-a0a8-12714bd337cd","type":"message","text":"why type unstable?","user":"U01MG0TN079","ts":"1617113559.061600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s+/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"why type unstable?"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"4cd66784-446e-4769-b676-5f39261d21a7","type":"message","text":"all vectors should have the same length","user":"U01MG0TN079","ts":"1617113575.061800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eSr5w","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"all vectors should have the same length"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"53b5c8b0-ce34-4750-9517-2aa3ec9930e5","type":"message","text":"<https://github.com/bottine/VinbergsAlgorithmNF/blob/1940d63efa241612fd0900ecbef17bd35c7f5ef0/src/vinbergs_algo.jl#L533>\n\nthat check at least seems to rely on runtime information","user":"UH24GRBLL","ts":"1617113589.062000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ywmgQ","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/bottine/VinbergsAlgorithmNF/blob/1940d63efa241612fd0900ecbef17bd35c7f5ef0/src/vinbergs_algo.jl#L533"},{"type":"text","text":"\n\nthat check at least seems to rely on runtime information"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"0d60f16d-2705-49d0-ad08-73dc904ae943","type":"message","text":"and then later on in the big loop, you have to check `=== nothing` on every iteration","user":"UH24GRBLL","ts":"1617113640.062200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2T0CU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and then later on in the big loop, you have to check "},{"type":"text","text":"=== nothing","style":{"code":true}},{"type":"text","text":" on every iteration"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"be525f08-25b0-4ce3-8c44-c0a9f5dc35bf","type":"message","text":"wait, is that a different point you're making, or about type unstability?","user":"U01MG0TN079","ts":"1617113643.062400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wcl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"wait, is that a different point you're making, or about type unstability?"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"fe6fc487-b25c-4b17-b4af-5a61bb4fb59b","type":"message","text":"it's related","user":"UH24GRBLL","ts":"1617113659.062600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1geM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's related"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"70c2a23e-997e-4945-9bc0-64b2abf8ec8e","type":"message","text":"OK, I thought this was no big matter: Essentially I needed an option type","user":"U01MG0TN079","ts":"1617113696.062800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"l=PQK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"OK, I thought this was no big matter: Essentially I needed an option type"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"b5797cab-8e98-4b3c-bce5-04f5cc4aed4f","type":"message","text":"local type instability in your function (which would probably perform better if it were split up into smaller functions that get called) can inhibit loop optimization","user":"UH24GRBLL","ts":"1617113700.063000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"frK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"local type instability in your function (which would probably perform better if it were split up into smaller functions that get called) can inhibit loop optimization"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"cc214294-b0c6-4e4a-833b-b2fddbd86f82","type":"message","text":"why would you need an option type? you can do the check once before you enter the loop and use a variable for the bound","user":"UH24GRBLL","ts":"1617113724.063200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rLC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"why would you need an option type? you can do the check once before you enter the loop and use a variable for the bound"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"f009d1bb-fe94-4165-96b8-6b1d18aa3bf2","type":"message","text":"those variables don't get assigned to in the loop, so they're invariant","user":"UH24GRBLL","ts":"1617113766.063400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"44bfn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"those variables don't get assigned to in the loop, so they're invariant"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"b5652229-5905-4385-9214-9468715b9174","type":"message","text":"(and if they are, it's a good idea to make that more obvious by not having inner functions that magically capture state ;) )","user":"UH24GRBLL","ts":"1617113808.063600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fdkX2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(and if they are, it's a good idea to make that more obvious by not having inner functions that magically capture state ;) )"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"e1f3d9ed-5ef8-419a-8add-55dd2ce2583c","type":"message","text":"but they can be assigned `ordered[end]` , which will vary. I'm not sure what you mean?","user":"U01MG0TN079","ts":"1617113831.063800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jsrfI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but they can be assigned "},{"type":"text","text":"ordered[end]","style":{"code":true}},{"type":"text","text":" , which will vary. I'm not sure what you mean?"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"06b8aa58-90b2-47dd-b4a5-b93fbb947487","type":"message","text":"Concerning splitting into smaller functions: it's a bit hard… I've tried, but I see no way that is both \"conceptually clear\" and makes sense wrt performance (but then, I've seen already that maybe I don't have the best intuitions wrt perf)","user":"U01MG0TN079","ts":"1617113915.064000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DM0Hx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Concerning splitting into smaller functions: it's a bit hard… I've tried, but I see no way that is both \"conceptually clear\" and makes sense wrt performance (but then, I've seen already that maybe I don't have the best intuitions wrt perf)"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"17aeaae7-0616-4ec1-b01a-95ad4cc8426f","type":"message","text":"ah, mistook two variables for each other, my bad - still, not sure the instability from `global_lb_for_sk` is worth it here :thinking_face:","user":"UH24GRBLL","ts":"1617113925.064200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"b10","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah, mistook two variables for each other, my bad - still, not sure the instability from "},{"type":"text","text":"global_lb_for_sk","style":{"code":true}},{"type":"text","text":" is worth it here "},{"type":"emoji","name":"thinking_face"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"74a824e2-f9a8-4155-99a9-3986c5338b0b","type":"message","text":"I think part of the problem is all those inner functions","user":"UH24GRBLL","ts":"1617113955.064400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q4X70","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think part of the problem is all those inner functions"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"50615ecd-1d83-4ccc-93f1-8ebddc46d327","type":"message","text":"I'm not sure `@code_warntype` likes all those - seems very complicated","user":"UH24GRBLL","ts":"1617113972.064600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MR0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not sure "},{"type":"text","text":"@code_warntype","style":{"code":true}},{"type":"text","text":" likes all those - seems very complicated"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"0bd82ebb-c2c0-4538-ad2c-407b651e15ba","type":"message","text":"there's nothing wrong with hoisting them outside of the outer function and passing in the relevant variables explicitly","user":"UH24GRBLL","ts":"1617114001.064800","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1617114009.000000"},"blocks":[{"type":"rich_text","block_id":"hJ66w","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there's nothing wrong with hoisting them outside of the outer function and passing in the relevant variables explicitly"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"b3565de5-7fd8-4d30-9d9a-58e6a20aac9a","type":"message","text":"re the `nothing`  instability: I should just have booleans telling me if it's nothing or not?","user":"U01MG0TN079","ts":"1617114089.065100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Xl5jI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"re the "},{"type":"text","text":"nothing","style":{"code":true}},{"type":"text","text":"  instability: I should just have booleans telling me if it's nothing or not?"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"784a1468-d6ea-4651-9c04-647bcde5c264","type":"message","text":"and re taking the inner functions out, I fear I'll lose in simplicity, but if you think it can help, I guess I'll try and do that","user":"U01MG0TN079","ts":"1617114295.065300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=pV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and re taking the inner functions out, I fear I'll lose in simplicity, but if you think it can help, I guess I'll try and do that"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"13d49bd3-efac-4566-8e5c-d5810e9f3ef4","type":"message","text":"no, what I'm saying is that you should check whether that's a cause of your allocations","user":"UH24GRBLL","ts":"1617114313.065500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vQeXv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no, what I'm saying is that you should check whether that's a cause of your allocations"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"bc56c819-c8d8-43c7-b8aa-479af3a57700","type":"message","text":"I can also see a lot of `append!` - if that is called recursively, you'll be moving a lot of memory around","user":"UH24GRBLL","ts":"1617114334.065700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"afWM4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I can also see a lot of "},{"type":"text","text":"append!","style":{"code":true}},{"type":"text","text":" - if that is called recursively, you'll be moving a lot of memory around"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"93eecfa2-661c-4daf-ba20-6b3d816a05bf","type":"message","text":"I'm also not 100% sure whether those inner functions get compiled again and again for each recursive call or not (i.e. whether you're inadvertently redefining them)","user":"UH24GRBLL","ts":"1617114371.065900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/Zm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm also not 100% sure whether those inner functions get compiled again and again for each recursive call or not (i.e. whether you're inadvertently redefining them)"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"704da7c9-8008-4d19-ba75-271988bf593b","type":"message","text":"if you can know the final length of `roots` beforehand, you can preallocate that","user":"UH24GRBLL","ts":"1617114399.066100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Rph","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you can know the final length of "},{"type":"text","text":"roots","style":{"code":true}},{"type":"text","text":" beforehand, you can preallocate that"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"72471d2c-3579-4321-af57-4d8bbf145529","type":"message","text":"ah, that would indeed be bad","user":"U01MG0TN079","ts":"1617114402.066300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NBD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah, that would indeed be bad"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"b9d7ad0f-a397-439a-a9bb-9c0e06f8430a","type":"message","text":"the thing is, `roots` will almost surely be of length ≤10, say","user":"U01MG0TN079","ts":"1617114421.066500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"htRPY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the thing is, "},{"type":"text","text":"roots","style":{"code":true}},{"type":"text","text":" will almost surely be of length ≤10, say"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"5b406f6e-4022-45de-8ac2-26c2a09215d1","type":"message","text":"I mean, I really get a few roots in the end","user":"U01MG0TN079","ts":"1617114428.066700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oquyq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean, I really get a few roots in the end"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"bc9ce692-2a1a-40c5-88bb-f96e26a6cb5b","type":"message","text":"is there an analytical approach for just finding the number of roots?","user":"UH24GRBLL","ts":"1617114451.066900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"b2E","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is there an analytical approach for just finding the number of roots?"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"ecb1c588-6e6c-44ad-8f05-2670df9254ba","type":"message","text":"or at least an upper bound","user":"UH24GRBLL","ts":"1617114456.067100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bnriw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or at least an upper bound"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"41a5166a-da70-489a-ac83-3c0e8bc89c86","type":"message","text":"hum, not that I know of, no","user":"U01MG0TN079","ts":"1617114527.067300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cPI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hum, not that I know of, no"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"4f63fbed-fd63-4556-9175-63f3e2e7ff52","type":"message","text":"but if it's always small, is there a benefit to allocating? Does not knowing change anything in how the code gets compiled or something?","user":"U01MG0TN079","ts":"1617114557.067500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=+Ax","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but if it's always small, is there a benefit to allocating? Does not knowing change anything in how the code gets compiled or something?"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"7540f498-4670-45f6-b9cf-afe91410b7ce","type":"message","text":"if you preallocate a big enough buffer (or initialise it with an appropriate `sizehint!`) and write to the largest not-yet-written-to index instead, you won't have to potentially copy around","user":"UH24GRBLL","ts":"1617114630.067700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"b9kU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you preallocate a big enough buffer (or initialise it with an appropriate "},{"type":"text","text":"sizehint!","style":{"code":true}},{"type":"text","text":") and write to the largest not-yet-written-to index instead, you won't have to potentially copy around"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"5b14311b-09d2-4028-b634-78b447c6ea04","type":"message","text":"but again, if it's &lt;= 10, it shouldn't be a problem. At least, not on the order of 30 million allocations","user":"UH24GRBLL","ts":"1617114650.067900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d6H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but again, if it's <= 10, it shouldn't be a problem. At least, not on the order of 30 million allocations"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"b1938d8b-efb9-4467-b9e4-541ba77978c6","type":"message","text":"that's why I suspect that some type instability in your recursion or the capturing closures are mulling things over","user":"UH24GRBLL","ts":"1617114687.068100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JSsm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's why I suspect that some type instability in your recursion or the capturing closures are mulling things over"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"c4610931-dfa5-47d0-bdb2-49e89184d7ac","type":"message","text":"this function `_extend_root_stem`  is rather \"hidden\" behind multiple functions that I call from the repl. How should I do to see whether there is type instability/where it is","user":"U01MG0TN079","ts":"1617114794.068300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BUMGf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this function "},{"type":"text","text":"_extend_root_stem","style":{"code":true}},{"type":"text","text":"  is rather \"hidden\" behind multiple functions that I call from the repl. How should I do to see whether there is type instability/where it is"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"9c2ac633-efbf-4430-b723-5501af3fa8be","type":"message","text":"well ideally you'd have the calling arguments, but if you're willing to learn a little bit about how julia works, Cthulhu.jl may be good? it allows you to \"dive into\" a top level call an check what julia/inference sees down the callstack","user":"UH24GRBLL","ts":"1617114935.068500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"I9J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well ideally you'd have the calling arguments, but if you're willing to learn a little bit about how julia works, Cthulhu.jl may be good? it allows you to \"dive into\" a top level call an check what julia/inference sees down the callstack"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"80a44b0b-54e4-4190-ace9-e24d2950f151","type":"message","text":"I don't know how it will deal with those inner functions though :thinking_face:","user":"UH24GRBLL","ts":"1617114978.068700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Dww","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't know how it will deal with those inner functions though "},{"type":"emoji","name":"thinking_face"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"21257a1d-0e70-4ddb-87c6-3389e6e94cf9","type":"message","text":"Well, I guess I'll just move them out","user":"U01MG0TN079","ts":"1617115057.068900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TTHK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well, I guess I'll just move them out"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"41d1bb65-2a13-443c-b652-093ff9510ba3","type":"message","text":"If I specify the type parameters of a function, I'm assured there will be no type instability at its frontier, right?","user":"U01MG0TN079","ts":"1617115083.069100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2yK3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If I specify the type parameters of a function, I'm assured there will be no type instability at its frontier, right?"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"f2010c3c-ea94-4574-8bd9-93231029081b","type":"message","text":"this way I can move bit by bit at least","user":"U01MG0TN079","ts":"1617115100.069300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"F/wFi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this way I can move bit by bit at least"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"c2826289-8e06-4bab-bda6-1d6aa6e274e7","type":"message","text":"no, type information in function heads do nothing to help infer anything","user":"UH24GRBLL","ts":"1617115136.069500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"U/89","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no, type information in function heads do nothing to help infer anything"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"f2c77338-a9aa-4037-af51-23c32d82aa5c","type":"message","text":"they only restrict what types of objects can be used as inputs to the function","user":"UH24GRBLL","ts":"1617115159.069700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RZKKB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"they only restrict what types of objects can be used as inputs to the function"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"b0b01aec-0808-408f-868a-1094127dc7e7","type":"message","text":"inference may still infer that a function returns `Any` or a union of some sort, in which case a dynamic lookup is inserted to check whether the types match or not","user":"UH24GRBLL","ts":"1617115193.069900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZmG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"inference may still infer that a function returns "},{"type":"text","text":"Any","style":{"code":true}},{"type":"text","text":" or a union of some sort, in which case a dynamic lookup is inserted to check whether the types match or not"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"66c74467-520c-4acb-8cbb-b1036d4868ff","type":"message","text":"and if I give the return type as well?","user":"U01MG0TN079","ts":"1617115216.070100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VJY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and if I give the return type as well?"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"d62d0379-bddf-4318-ba9c-dfbd651b8f4d","type":"message","text":"if you assert return types, it'll insert a type conversion and thus make it appear type stable from the outside - but at that point the inner function that just ran is still unstable internally, so it may not be the most optimized it could be if it also were completely type stable in the first place","user":"UH24GRBLL","ts":"1617115281.070300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JQi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you assert return types, it'll insert a type conversion and thus make it appear type stable from the outside - but at that point the inner function that just ran is still unstable internally, so it may not be the most optimized it could be if it also were completely type stable in the first place"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"28bd64e1-c0b6-49a5-8f79-bf552ca5d784","type":"message","text":"ah, tha's quite counterintuitive","user":"U01MG0TN079","ts":"1617115318.070500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lHep","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah, tha's quite counterintuitive"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"b3275090-e10c-4683-9fd8-a32f0199f1ae","type":"message","text":"there are very few situations where specifying types actually helps inference (e.g. if you have a Union{Nothing,A}, a check for `!== nothing` can remove the Union and actually asserts `A` for following code, though the check alone may still prevent e.g. SIMD)","user":"UH24GRBLL","ts":"1617115376.070700","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1617115431.000000"},"blocks":[{"type":"rich_text","block_id":"sEN0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there are very few situations where specifying types actually helps inference (e.g. if you have a Union{Nothing,A}, a check for "},{"type":"text","text":"!== nothing","style":{"code":true}},{"type":"text","text":" can remove the Union and actually asserts "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" for following code, though the check alone may still prevent e.g. SIMD)"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"ee9f70a0-dafc-4d30-a0db-f105120b9bbb","type":"message","text":"basically it's only really necessary to specify types when defining structs","user":"UH24GRBLL","ts":"1617115387.070900","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1617115393.000000"},"blocks":[{"type":"rich_text","block_id":"PkTI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"basically it's only really necessary to specify types when defining structs"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"638acbef-9464-4eba-80ea-18eaa2732661","type":"message","text":"mmh, OK","user":"U01MG0TN079","ts":"1617115723.071300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9a+IT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"mmh, OK"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"3c96e807-9baa-413d-a4a5-febe0289be90","type":"message","text":"so, type instability is the king offender, and what's the first thing I should do to kill of type instability then?","user":"U01MG0TN079","ts":"1617115839.071500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vLDpj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so, type instability is the king offender, and what's the first thing I should do to kill of type instability then?"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"672e65e0-47d9-4819-bc53-db6b42473586","type":"message","text":"Any incoming variable should be type-annotated, is that it?","user":"U01MG0TN079","ts":"1617115872.071700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"e1A2H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Any incoming variable should be type-annotated, is that it?"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"05f592e7-2036-45a4-a25d-a7990471c99a","type":"message","text":"no, you should take care not to introduce type instabilities by not having the type of variables depend on runtime values","user":"UH24GRBLL","ts":"1617116030.071900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ANOAd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no, you should take care not to introduce type instabilities by not having the type of variables depend on runtime values"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"468ccd91-1585-444d-9ac5-2ce020dafda9","type":"message","text":"i.e. all types of your variables should be defined purely based on the types of the variables being put into your function (or captured, in the case of closures)","user":"UH24GRBLL","ts":"1617116166.072100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7mW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i.e. all types of your variables should be defined purely based on the types of the variables being put into your function (or captured, in the case of closures)"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"28c9948b-3526-4781-bccc-030c9b12f531","type":"message","text":"the finicky thing with closures is that capturing variables can be very bad for performance - it's a long standing issue","user":"UH24GRBLL","ts":"1617116249.072300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=7w","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the finicky thing with closures is that capturing variables can be very bad for performance - it's a long standing issue"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"3e3c2211-6dc5-4881-9d2b-cedda022b35d","type":"message","text":"it's gotten much better since the issues were originally opened, but e.g. <https://github.com/JuliaLang/julia/issues/15276>  and  <https://github.com/JuliaLang/julia/issues/34894> are not yet closed :man-shrugging:","user":"UH24GRBLL","ts":"1617116321.072500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/qGa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's gotten much better since the issues were originally opened, but e.g. "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/15276"},{"type":"text","text":"  and  "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/34894"},{"type":"text","text":" are not yet closed "},{"type":"emoji","name":"man-shrugging"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"295856df-7797-4142-bfdf-5ff69a2cf75f","type":"message","text":"I see","user":"U01MG0TN079","ts":"1617116618.072700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8sRs=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"99e12a1f-bbff-48bf-8028-8c648c8333ce","type":"message","text":"just one more thing (and thanks for all your help): is `Union{something,Nothing}` in the realm of type unstability?","user":"U01MG0TN079","ts":"1617116704.072900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qLljG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"just one more thing (and thanks for all your help): is "},{"type":"text","text":"Union{something,Nothing}","style":{"code":true}},{"type":"text","text":" in the realm of type unstability?"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"9db4cbc8-b372-4866-bc89-2710cc1c8d46","type":"message","text":"it technically speaking is, but that's not necessarily a bad thing. E.g. the iteration interface uses that to decide when to stop iterating","user":"UH24GRBLL","ts":"1617116773.073100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GLx5t","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it technically speaking is, but that's not necessarily a bad thing. E.g. the iteration interface uses that to decide when to stop iterating"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"a8350ffb-8a9b-4be7-8ace-913040b092f2","type":"message","text":"those small unions are also special cased in the compiler (the so called small union optimization)","user":"UH24GRBLL","ts":"1617116790.073300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YPzV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"those small unions are also special cased in the compiler (the so called small union optimization)"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"6ba1221c-6c19-4d9b-ae92-d5999beeef08","type":"message","text":"OK, I thought so but wasn't sure","user":"U01MG0TN079","ts":"1617116880.073500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"si/K","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"OK, I thought so but wasn't sure"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"49442da0-6479-4207-bc5b-54ce2399c4a0","type":"message","text":"I'm also unsure how much you can actually do to reduce those allocations - iirc, Hecke was pretty heavy in terms of allocations :thinking_face: maybe the authors know more about how to optimize in that case thoug","user":"UH24GRBLL","ts":"1617117025.073700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=LFZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm also unsure how much you can actually do to reduce those allocations - iirc, Hecke was pretty heavy in terms of allocations "},{"type":"emoji","name":"thinking_face"},{"type":"text","text":" maybe the authors know more about how to optimize in that case thoug"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"28bf94e4-b809-43e4-8c6e-62fbefb49036","type":"message","text":"it might be, but I think I can still do lots better,","user":"U01MG0TN079","ts":"1617117092.073900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"F7GMf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it might be, but I think I can still do lots better,"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"},{"client_msg_id":"0ecd67aa-0981-443c-9235-3ae8c83c2523","type":"message","text":"there might still be instability wrt to which types of Hecke I'm exactly using: I have to check","user":"U01MG0TN079","ts":"1617117150.074100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NOfw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there might still be instability wrt to which types of Hecke I'm exactly using: I have to check"}]}]}],"thread_ts":"1616739073.022700","parent_user_id":"U01MG0TN079"}]