[{"client_msg_id":"bff967c1-4a2a-4f36-abbb-2b0f80ffd44d","type":"message","text":"I'm looping over a text file and pushing parsed lines to a `Dict{String, Vector{Vector}}` and I find I need a function similar to `push!`, but that creates the key in the dict if it does not already exist. I came up with\n```function push_or_add!(d::AbstractDict{K, &lt;: AbstractVector}, p::Pair) \n    haskey(d, p[1]) ? push!(d[p[1]], p[2]) : push!(d, p[1] =&gt; [p[2]])\nend```\nwhich works, but it performs the key lookup twice, once in `haskey` and once in `push!`. Is there a simple way of doing this already existing?","user":"UJ7DVTVQ8","ts":"1612550826.149800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oJf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm looping over a text file and pushing parsed lines to a "},{"type":"text","text":"Dict{String, Vector{Vector}}","style":{"code":true}},{"type":"text","text":" and I find I need a function similar to "},{"type":"text","text":"push!","style":{"code":true}},{"type":"text","text":", but that creates the key in the dict if it does not already exist. I came up with\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function push_or_add!(d::AbstractDict{K, <: AbstractVector}, p::Pair) \n    haskey(d, p[1]) ? push!(d[p[1]], p[2]) : push!(d, p[1] => [p[2]])\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"which works, but it performs the key lookup twice, once in "},{"type":"text","text":"haskey","style":{"code":true}},{"type":"text","text":" and once in "},{"type":"text","text":"push!","style":{"code":true}},{"type":"text","text":". Is there a simple way of doing this already existing?"}]}]}],"thread_ts":"1612550826.149800","reply_count":9,"reply_users_count":3,"latest_reply":"1612555285.152700","reply_users":["UH24GRBLL","UJ7DVTVQ8","UCZ7VBGUD"],"subscribed":false},{"client_msg_id":"32d78e89-b16e-47d5-a543-0e9aa56a98fd","type":"message","text":"`get!`?","user":"UH24GRBLL","ts":"1612551009.149900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"woi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"get!","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1612550826.149800","parent_user_id":"UJ7DVTVQ8"},{"client_msg_id":"0bf46455-3f4b-4c6d-a3f9-e4da9909b50a","type":"message","text":"Ah, it seems `get!` has a method that actually performs `set!` :stuck_out_tongue: Thanks, I didn't even bother to look at the docstring for `get!`","user":"UJ7DVTVQ8","ts":"1612551109.150100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PzHzm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, it seems "},{"type":"text","text":"get!","style":{"code":true}},{"type":"text","text":" has a method that actually performs "},{"type":"text","text":"set!","style":{"code":true}},{"type":"text","text":" "},{"type":"emoji","name":"stuck_out_tongue"},{"type":"text","text":" Thanks, I didn't even bother to look at the docstring for "},{"type":"text","text":"get!","style":{"code":true}}]}]}],"thread_ts":"1612550826.149800","parent_user_id":"UJ7DVTVQ8"},{"client_msg_id":"80114879-9d02-455d-adbb-ec30b0b2de43","type":"message","text":"I'm not sure if the `get!` method actually lets me do what I want. I want to push to the vector no matter if the key exist or not. `get!(fun, ...)` only pushes if there is no key already, otherwise it only `get`s","user":"UJ7DVTVQ8","ts":"1612551340.150300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qsh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not sure if the "},{"type":"text","text":"get!","style":{"code":true}},{"type":"text","text":" method actually lets me do what I want. I want to push to the vector no matter if the key exist or not. "},{"type":"text","text":"get!(fun, ...)","style":{"code":true}},{"type":"text","text":" only pushes if there is no key already, otherwise it only `get`s"}]}]}],"thread_ts":"1612550826.149800","parent_user_id":"UJ7DVTVQ8"},{"client_msg_id":"6624c96a-b554-4b0e-a3ac-d725cb04a237","type":"message","text":"Actually, it returns the inner vector which is efficient to push to, so the following works\n```function push_or_add!(d::AbstractDict{&lt;:Any, &lt;: AbstractVector}, p::Pair) \n    i = p[2]\n    vec = get!(d, p[1]) do\n        push!([i])\n    end\n    vec[end] === i || push!(vec, i)\nend```","user":"UJ7DVTVQ8","ts":"1612551466.150500","team":"T68168MUP","edited":{"user":"UJ7DVTVQ8","ts":"1612551523.000000"},"blocks":[{"type":"rich_text","block_id":"fsr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Actually, it returns the inner vector which is efficient to push to, so the following works\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function push_or_add!(d::AbstractDict{<:Any, <: AbstractVector}, p::Pair) \n    i = p[2]\n    vec = get!(d, p[1]) do\n        push!([i])\n    end\n    vec[end] === i || push!(vec, i)\nend"}]}]}],"thread_ts":"1612550826.149800","parent_user_id":"UJ7DVTVQ8"},{"client_msg_id":"1329f29b-3bbe-45e6-87d4-06fefad1eb77","type":"message","text":"Thanks <@UH24GRBLL>!","user":"UJ7DVTVQ8","ts":"1612551494.150700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ELLm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks "},{"type":"user","user_id":"UH24GRBLL"},{"type":"text","text":"!"}]}]}],"thread_ts":"1612550826.149800","parent_user_id":"UJ7DVTVQ8"},{"client_msg_id":"2FA98418-C19D-4DF0-B1C0-3BB893852E76","type":"message","text":"I think you can simplify that by creating an empty vector in the `get!` and then doing the push unconditionally ","user":"UCZ7VBGUD","ts":"1612554398.152100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+U47","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think you can simplify that by creating an empty vector in the "},{"type":"text","text":"get!","style":{"code":true}},{"type":"text","text":" and then doing the push unconditionally "}]}]}],"thread_ts":"1612550826.149800","parent_user_id":"UJ7DVTVQ8"},{"client_msg_id":"51cb88ee-8861-4745-a011-c83cd934195f","type":"message","text":"You're right <@UCZ7VBGUD>, nice catch :smiley:","user":"UJ7DVTVQ8","ts":"1612555097.152300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OHd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You're right "},{"type":"user","user_id":"UCZ7VBGUD"},{"type":"text","text":", nice catch "},{"type":"emoji","name":"smiley"}]}]}],"thread_ts":"1612550826.149800","parent_user_id":"UJ7DVTVQ8"},{"client_msg_id":"8af0bb20-fe2f-4c41-9c80-c73bbf34a239","type":"message","text":"take care to use the correct eltype for the empty vector","user":"UH24GRBLL","ts":"1612555139.152500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"00tay","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"take care to use the correct eltype for the empty vector"}]}]}],"thread_ts":"1612550826.149800","parent_user_id":"UJ7DVTVQ8"},{"client_msg_id":"4218b94f-e2b7-4f2b-9cec-f6ae7dfc6186","type":"message","text":"I handle that already when creating the Dict, but of course good to keep in mind if the vectors could be of different types!","user":"UJ7DVTVQ8","ts":"1612555285.152700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AjX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I handle that already when creating the Dict, but of course good to keep in mind if the vectors could be of different types!"}]}]}],"thread_ts":"1612550826.149800","parent_user_id":"UJ7DVTVQ8"}]