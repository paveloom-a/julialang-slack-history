[{"client_msg_id":"134ba964-4c48-43d3-859c-16409f7eaa62","type":"message","text":"cross post <https://discourse.julialang.org/t/a-module-for-some-additional-try-catch-semantics/54465>\n\nMy package for having Python like try-catch-finally blocks\n<https://github.com/heetbeet/TryCatch.jl>","user":"U018FJVBXPD","ts":"1612277734.462800","team":"T68168MUP","edited":{"user":"U018FJVBXPD","ts":"1612277761.000000"},"attachments":[{"service_name":"JuliaLang","title":"A module for some additional try catch semantics","title_link":"https://discourse.julialang.org/t/a-module-for-some-additional-try-catch-semantics/54465","text":"Would anyone find something like this useful? I wrote it in order to scratch a bit of an itch I had, but can just as well make it a public package. The aim is to provide try-catch-finally semantics that behaves a bit like Python’s error handling.","fallback":"JuliaLang: A module for some additional try catch semantics","thumb_url":"https://aws1.discourse-cdn.com/business5/uploads/julialang/original/2X/1/12829a7ba92b924d4ce81099cbf99785bee9b405.png","ts":1612277676,"from_url":"https://discourse.julialang.org/t/a-module-for-some-additional-try-catch-semantics/54465","thumb_width":408,"thumb_height":263,"service_icon":"https://aws1.discourse-cdn.com/business5/uploads/julialang/optimized/2X/6/6ca888e296f59ca2a599807f7d5edd489e3d1829_2_180x180.png","id":1,"original_url":"https://discourse.julialang.org/t/a-module-for-some-additional-try-catch-semantics/54465"}],"blocks":[{"type":"rich_text","block_id":"tylO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"cross post "},{"type":"link","url":"https://discourse.julialang.org/t/a-module-for-some-additional-try-catch-semantics/54465"},{"type":"text","text":"\n\nMy package for having Python like try-catch-finally blocks\n"},{"type":"link","url":"https://github.com/heetbeet/TryCatch.jl"}]}]}],"thread_ts":"1612277734.462800","reply_count":16,"reply_users_count":6,"latest_reply":"1612282728.471100","reply_users":["U67BJLYCS","UDB26738Q","U6795JH6H","U018FJVBXPD","UB7JS9CHF","U6NFPDBV1"],"subscribed":false},{"client_msg_id":"9d086003-1c49-42d3-95da-3a861157e6ed","type":"message","text":"For those of us not using Python, what does this actually do?","user":"U67BJLYCS","ts":"1612277898.463200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"E4F","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For those of us not using Python, what does this actually do?"}]}]}],"thread_ts":"1612277734.462800","parent_user_id":"U018FJVBXPD"},{"client_msg_id":"ec9de3e6-d67e-493b-bee6-aa2b86643dff","type":"message","text":"```try\ncatch\nfinally\nend```","user":"U67BJLYCS","ts":"1612277914.463400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KApx","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"try\ncatch\nfinally\nend"}]}]}],"thread_ts":"1612277734.462800","parent_user_id":"U018FJVBXPD"},{"client_msg_id":"b4a782f1-ab83-40be-bc49-2a7a25ad47e9","type":"message","text":"is a thing in Julia","user":"U67BJLYCS","ts":"1612277919.463600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YKws","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is a thing in Julia"}]}]}],"thread_ts":"1612277734.462800","parent_user_id":"U018FJVBXPD"},{"client_msg_id":"d7ffa789-d003-4009-b5e3-fec561a90514","type":"message","text":"so how does this differentiate from that?","user":"U67BJLYCS","ts":"1612277960.463800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dQjz0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so how does this differentiate from that?"}]}]}],"thread_ts":"1612277734.462800","parent_user_id":"U018FJVBXPD"},{"client_msg_id":"52e34f4f-3ba9-4399-aaf6-fd3ec4a4295c","type":"message","text":"the `@success` macro seems useful, it's like `try-catch-else` in python: <https://github.com/JuliaLang/julia/issues/21130>","user":"UDB26738Q","ts":"1612278057.464000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cMlk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the "},{"type":"text","text":"@success","style":{"code":true}},{"type":"text","text":" macro seems useful, it's like "},{"type":"text","text":"try-catch-else","style":{"code":true}},{"type":"text","text":" in python: "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/21130"}]}]}],"thread_ts":"1612277734.462800","parent_user_id":"U018FJVBXPD"},{"client_msg_id":"771bcc37-fb4a-454f-a0e4-9cd87e0c7e99","type":"message","text":"is that the only difference? we could add the else clause to try blocks","user":"U6795JH6H","ts":"1612278106.464200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"keFHo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is that the only difference? we could add the else clause to try blocks"}]}]}],"thread_ts":"1612277734.462800","parent_user_id":"U018FJVBXPD"},{"client_msg_id":"e7298edd-340c-4cb6-8a36-878e3672d549","type":"message","text":"The main behaviour that I missed was this\n```try:\n    1/0\nexcept ZeroDivisionError as e:\n    print(\"div0\")```\nA compact way of saying \"try this and if it fails as a ZeroDivisionError rather do that otherwise throw the original exception\"","user":"U018FJVBXPD","ts":"1612278252.464400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"APue","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The main behaviour that I missed was this\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"try:\n    1/0\nexcept ZeroDivisionError as e:\n    print(\"div0\")"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"A compact way of saying \"try this and if it fails as a ZeroDivisionError rather do that otherwise throw the original exception\""}]}]}],"thread_ts":"1612277734.462800","parent_user_id":"U018FJVBXPD"},{"client_msg_id":"7a6ebc01-c2f1-4658-9e23-1d9ea29b0f29","type":"message","text":"rather than\n```try\n  sqrt(\"0\")\nexcept e\n  if e isa MethodError\n    println(\"meth err\")\n  else\n    rethrow(e)\n  end\nend```","user":"U018FJVBXPD","ts":"1612278349.464600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DaMK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"rather than\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"try\n  sqrt(\"0\")\nexcept e\n  if e isa MethodError\n    println(\"meth err\")\n  else\n    rethrow(e)\n  end\nend"}]}]}],"thread_ts":"1612277734.462800","parent_user_id":"U018FJVBXPD"},{"client_msg_id":"6c0fa076-3923-409e-bfd5-a6d7ebd858da","type":"message","text":"And as <@UDB26738Q> mentioned the else clause. <@U6795JH6H> that would be absolutely kickass.","user":"U018FJVBXPD","ts":"1612278430.464800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eQteS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And as "},{"type":"user","user_id":"UDB26738Q"},{"type":"text","text":" mentioned the else clause. "},{"type":"user","user_id":"U6795JH6H"},{"type":"text","text":" that would be absolutely kickass."}]}]}],"thread_ts":"1612277734.462800","parent_user_id":"U018FJVBXPD"},{"client_msg_id":"2ec0332d-8449-49d0-9ddd-c043950da550","type":"message","text":"```try:\n    a = get_something()\nexcept ZeroDivisionError as e:\n    print(\"div0\")\nelse:\n    do_something(a)```\nThe else clause helps especially when you want to test that a return value was safely fetched and then do something with the return value that that will be allowed to throw its own error.","user":"U018FJVBXPD","ts":"1612278695.465000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Oo8C","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"try:\n    a = get_something()\nexcept ZeroDivisionError as e:\n    print(\"div0\")\nelse:\n    do_something(a)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nThe else clause helps especially when you want to test that a return value was safely fetched and then do something with the return value that that will be allowed to throw its own error."}]}]}],"thread_ts":"1612277734.462800","parent_user_id":"U018FJVBXPD"},{"client_msg_id":"33ab8c1c-c52d-4aa0-9646-851f01b60318","type":"message","text":"```try:\n    a = get_something()\n    do_something(a)\nexcept ZeroDivisionError as e:\n    print(\"div0\")```\nThis might hide a error that occurred in the do_something block\n\n```try:\n    a = get_something()\nexcept ZeroDivisionError as e:\n    print(\"div0\")\n\ndo_something(a)```\nand this works on the mistaken assumption that `a` is available","user":"U018FJVBXPD","ts":"1612278818.465200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"51ic6","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"try:\n    a = get_something()\n    do_something(a)\nexcept ZeroDivisionError as e:\n    print(\"div0\")"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"This might hide a error that occurred in the do_something block\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"try:\n    a = get_something()\nexcept ZeroDivisionError as e:\n    print(\"div0\")\n\ndo_something(a)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"and this works on the mistaken assumption that "},{"type":"text","text":"a","style":{"code":true}},{"type":"text","text":" is available"}]}]}],"thread_ts":"1612277734.462800","parent_user_id":"U018FJVBXPD"},{"client_msg_id":"9f916ed2-ed20-4b5f-b29e-c2bd84e6ff0f","type":"message","text":"the point of not implementing `catch err::ErrorType` was so that we could reserve the syntax to do something better (like <https://github.com/JuliaLang/julia/issues/7026>) but that hasn’t so at this point, we might as well just have the standard thing that Python and Java have, which is not great but better than nothing","user":"U6795JH6H","ts":"1612278856.465400","team":"T68168MUP","edited":{"user":"U6795JH6H","ts":"1612278868.000000"},"blocks":[{"type":"rich_text","block_id":"dPtx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the point of not implementing "},{"type":"text","text":"catch err::ErrorType","style":{"code":true}},{"type":"text","text":" was so that we could reserve the syntax to do something better (like "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/7026"},{"type":"text","text":") but that hasn’t so at this point, we might as well just have the standard thing that Python and Java have, which is not great but better than nothing"}]}]}],"thread_ts":"1612277734.462800","parent_user_id":"U018FJVBXPD"},{"client_msg_id":"9D763540-C15F-47CD-8CC1-220A324D4074","type":"message","text":"In CLU, the info about which exceptions a method could throw was part of its definition. Errors also were not passed up to the caller (except as an “unhandled exception” error)\nI’ve always found that approach to be the cleanest I’ve seen among all the languages I’ve used (and even implemented)","user":"UB7JS9CHF","ts":"1612280644.470300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+LZ3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In CLU, the info about which exceptions a method could throw was part of its definition. Errors also were not passed up to the caller (except as an “unhandled exception” error)\n"},{"type":"text","text":"I’ve always found that approach to be the cleanest I’ve seen among all the languages I’ve used (and even implemented)"}]}]}],"thread_ts":"1612277734.462800","parent_user_id":"U018FJVBXPD"},{"client_msg_id":"e94fc834-f4a3-4149-97b6-23093d24dfbc","type":"message","text":"Pretty sure I have a 3-year old issue open about try/else","user":"U6NFPDBV1","ts":"1612282608.470600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TA189","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Pretty sure I have a 3-year old issue open about try/else"}]}]}],"thread_ts":"1612277734.462800","parent_user_id":"U018FJVBXPD"},{"client_msg_id":"6be282a6-de40-4600-ae36-1f9a7137d84c","type":"message","text":"yeah, the one I linked in <https://julialang.slack.com/archives/C680MM7D4/p1612278057464000?thread_ts=1612277734.462800&amp;cid=C680MM7D4> :slightly_smiling_face:","user":"UDB26738Q","ts":"1612282707.470800","team":"T68168MUP","attachments":[{"from_url":"https://julialang.slack.com/archives/C680MM7D4/p1612278057464000?thread_ts=1612277734.462800&amp;cid=C680MM7D4","fallback":"[February 2nd, 2021 7:00 AM] mose: the `@success` macro seems useful, it's like `try-catch-else` in python: <https://github.com/JuliaLang/julia/issues/21130>","ts":"1612278057.464000","author_id":"UDB26738Q","author_subname":"Mosè Giordano","channel_id":"C680MM7D4","channel_name":"random","is_msg_unfurl":true,"is_reply_unfurl":true,"text":"the `@success` macro seems useful, it's like `try-catch-else` in python: <https://github.com/JuliaLang/julia/issues/21130>","author_name":"Mosè Giordano","author_link":"https://julialang.slack.com/team/UDB26738Q","author_icon":"https://secure.gravatar.com/avatar/b1b9938790729d96af6f168d8ce0f917.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-48.png","mrkdwn_in":["text"],"id":1,"original_url":"https://julialang.slack.com/archives/C680MM7D4/p1612278057464000?thread_ts=1612277734.462800&amp;cid=C680MM7D4","footer":"From a thread in #random"}],"blocks":[{"type":"rich_text","block_id":"guIu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, the one I linked in "},{"type":"link","url":"https://julialang.slack.com/archives/C680MM7D4/p1612278057464000?thread_ts=1612277734.462800&cid=C680MM7D4"},{"type":"text","text":" "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1612277734.462800","parent_user_id":"U018FJVBXPD"},{"client_msg_id":"72221fbf-6f67-4fad-b75e-5774408d66a9","type":"message","text":"it'll turn 4 next month","user":"UDB26738Q","ts":"1612282728.471100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ehC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it'll turn 4 next month"}]}]}],"thread_ts":"1612277734.462800","parent_user_id":"U018FJVBXPD","reactions":[{"name":"tada","users":["U6QGE7S86","U9V8ZQVEY"],"count":2}]}]