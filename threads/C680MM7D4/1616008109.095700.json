[{"type":"message","text":"the wikipedia article about homoiconicity (<https://en.wikipedia.org/wiki/Homoiconicity>) has a `[citation needed]` on Julia being homoiconic :thinking_face:","files":[{"id":"F01RZB3S3FT","created":1616008070,"timestamp":1616008070,"name":"image.png","title":"image.png","mimetype":"image/png","filetype":"png","pretty_type":"PNG","user":"UDB26738Q","editable":false,"size":48851,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01RZB3S3FT/image.png","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01RZB3S3FT/download/image.png","thumb_64":"https://files.slack.com/files-tmb/T68168MUP-F01RZB3S3FT-67a74e961b/image_64.png","thumb_80":"https://files.slack.com/files-tmb/T68168MUP-F01RZB3S3FT-67a74e961b/image_80.png","thumb_360":"https://files.slack.com/files-tmb/T68168MUP-F01RZB3S3FT-67a74e961b/image_360.png","thumb_360_w":360,"thumb_360_h":134,"thumb_480":"https://files.slack.com/files-tmb/T68168MUP-F01RZB3S3FT-67a74e961b/image_480.png","thumb_480_w":480,"thumb_480_h":178,"thumb_160":"https://files.slack.com/files-tmb/T68168MUP-F01RZB3S3FT-67a74e961b/image_160.png","thumb_720":"https://files.slack.com/files-tmb/T68168MUP-F01RZB3S3FT-67a74e961b/image_720.png","thumb_720_w":720,"thumb_720_h":268,"original_w":759,"original_h":282,"thumb_tiny":"AwARADC+Tz/+uj6/1pcHnt+JqKaUQBd2cHjjNADxz9fxpe5/+vVf7dD6Sf5/Gj7fB/t/5/GgCx9f60f571X+3wf7dOiu4ZZAi78n1oAnl/1TfSs9vvL9a0Jf9U30rPb7y/WgCePqakFRx9TUgpsBaVPvikpU++KQH//Z","permalink":"https://julialang.slack.com/files/UDB26738Q/F01RZB3S3FT/image.png","permalink_public":"https://slack-files.com/T68168MUP-F01RZB3S3FT-9eebbeab5c","is_starred":false,"has_rich_preview":false}],"upload":false,"blocks":[{"type":"rich_text","block_id":"Onr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the wikipedia article about homoiconicity ("},{"type":"link","url":"https://en.wikipedia.org/wiki/Homoiconicity"},{"type":"text","text":") has a "},{"type":"text","text":"[citation needed]","style":{"code":true}},{"type":"text","text":" on Julia being homoiconic "},{"type":"emoji","name":"thinking_face"}]}]}],"user":"UDB26738Q","display_as_bot":false,"ts":"1616008109.095700","thread_ts":"1616008109.095700","reply_count":24,"reply_users_count":9,"latest_reply":"1616183026.175800","reply_users":["USU9FRPEU","UGU761DU2","U6740K1SP","UDB26738Q","U6C937ENB","U0179G7FG4F","UPUBAM63X","UAUCGGD6C","U8D9768Q6"],"subscribed":false,"reactions":[{"name":"juliaislisp","users":["UGU761DU2","USU9FRPEU"],"count":2}]},{"client_msg_id":"065dea4c-4338-400b-a678-2952f28dbaae","type":"message","text":"We really should pay the Julia PR department more.","user":"USU9FRPEU","ts":"1616008300.096200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R76","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We really should pay the Julia PR department more."}]}]}],"thread_ts":"1616008109.095700","parent_user_id":"UDB26738Q","reactions":[{"name":"100","users":["UPUBAM63X"],"count":1}]},{"client_msg_id":"21b030d3-7fc0-492e-9d45-f735500cd996","type":"message","text":"It’s definitely true for the secret built-in lisp syntax from `Meta.show_sexpr` — is there a consensus for it being true for Julia in general? I guess I would say the existence of the former should be good enough but not sure.\n\nStefan’s stack exchange post for context: <https://stackoverflow.com/questions/31733766/in-what-sense-are-languages-like-elixir-and-julia-homoiconic?answertab=active#tab-top>","user":"UGU761DU2","ts":"1616008417.096400","team":"T68168MUP","edited":{"user":"UGU761DU2","ts":"1616008483.000000"},"attachments":[{"service_name":"Stack Overflow","title":"In what sense are languages like Elixir and Julia homoiconic?","title_link":"https://stackoverflow.com/questions/31733766/in-what-sense-are-languages-like-elixir-and-julia-homoiconic?answertab=active#tab-top","text":"Homoiconicity in Lisp is easy to see: (+ 1 2) is both the function call to + with 1, 2 as arguments, as well as being a list containing +, 1, and 2. It is simultaneously both code and data. In a","fallback":"Stack Overflow: In what sense are languages like Elixir and Julia homoiconic?","thumb_url":"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded","from_url":"https://stackoverflow.com/questions/31733766/in-what-sense-are-languages-like-elixir-and-julia-homoiconic?answertab=active#tab-top","thumb_width":316,"thumb_height":316,"service_icon":"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon.png?v=c78bd457575a","id":1,"original_url":"https://stackoverflow.com/questions/31733766/in-what-sense-are-languages-like-elixir-and-julia-homoiconic?answertab=active#tab-top"}],"blocks":[{"type":"rich_text","block_id":"SHt7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It’s definitely true for the secret built-in lisp syntax from "},{"type":"text","text":"Meta.show_sexpr","style":{"code":true}},{"type":"text","text":" — is there a consensus for it being true for Julia in general? I guess I would say the existence of the former should be good enough but not sure.\n\nStefan’s stack exchange post for context: "},{"type":"link","url":"https://stackoverflow.com/questions/31733766/in-what-sense-are-languages-like-elixir-and-julia-homoiconic?answertab=active#tab-top"}]}]}],"thread_ts":"1616008109.095700","parent_user_id":"UDB26738Q"},{"client_msg_id":"c572599e-b022-44b4-9de8-39becbd77ed9","type":"message","text":"The existence of <https://github.com/swadey/LispSyntax.jl> helps the case as well.","user":"USU9FRPEU","ts":"1616008950.097200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jIzYQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The existence of "},{"type":"link","url":"https://github.com/swadey/LispSyntax.jl"},{"type":"text","text":" helps the case as well."}]}]}],"thread_ts":"1616008109.095700","parent_user_id":"UDB26738Q"},{"client_msg_id":"af7d0eaa-5027-45e7-8749-4554798dfc61","type":"message","text":"We dropped the homoiconic from the documentation because it just attracted complaints from purist &gt;&lt;","user":"U6740K1SP","ts":"1616008982.097400","team":"T68168MUP","edited":{"user":"U6740K1SP","ts":"1616009011.000000"},"blocks":[{"type":"rich_text","block_id":"1us","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We dropped the homoiconic from the documentation because it just attracted complaints from purist ><"}]}]}],"thread_ts":"1616008109.095700","parent_user_id":"UDB26738Q"},{"client_msg_id":"9db89486-2765-4f76-90bc-7a90c6b2ffa7","type":"message","text":"oh, I didn't notice that","user":"UDB26738Q","ts":"1616009063.097700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"q2=s3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh, I didn't notice that"}]}]}],"thread_ts":"1616008109.095700","parent_user_id":"UDB26738Q"},{"client_msg_id":"dd78b41e-bd9b-4533-b0f0-89945d2b6802","type":"message","text":"but I think I miss the point.  is it because in lisp the code itself is the same as its representation?","user":"UDB26738Q","ts":"1616009181.097900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UyfxW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but I think I miss the point.  is it because in lisp the code itself is the same as its representation?"}]}]}],"thread_ts":"1616008109.095700","parent_user_id":"UDB26738Q"},{"client_msg_id":"7b7e02e1-e119-45c8-8ec8-ce6172e5d618","type":"message","text":"instead in julia the representation is something else (but still a regular data structure)?","user":"UDB26738Q","ts":"1616009226.098100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ToYm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"instead in julia the representation is something else (but still a regular data structure)?"}]}]}],"thread_ts":"1616008109.095700","parent_user_id":"UDB26738Q"},{"client_msg_id":"279f0f81-d139-4450-bc32-00bdc07f6112","type":"message","text":"Solve this the mathematicians way? homo is same and homeo is “similar/same-ish”. Let’s claim homeoiconic then","user":"U6C937ENB","ts":"1616009305.098300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1iuH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Solve this the mathematicians way? homo is same and homeo is “similar/same-ish”. Let’s claim homeoiconic then"}]}]}],"thread_ts":"1616008109.095700","parent_user_id":"UDB26738Q"},{"client_msg_id":"c69f75da-f6d9-4c0f-9298-b8c261841e60","type":"message","text":"oh, maybe it was “dependent types” that I was thinking of","user":"U6740K1SP","ts":"1616009315.098500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GeZV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh, maybe it was “dependent types” that I was thinking of"}]}]}],"thread_ts":"1616008109.095700","parent_user_id":"UDB26738Q"},{"client_msg_id":"ddbe9376-7e0d-488a-bc39-7600621fad53","type":"message","text":"Yeah. The key part of Stefan’s post IMO:\n\n&gt; Having thought about this more for the past 4+ years, I think the key difference between Lisp and Julia is this:\n&gt; \n&gt;    In Lisp, the syntax for code is the same as the syntax for the data structure that is used to represent that code.\n&gt;    In Julia, the syntax for code is quite different from the syntax for the data structure that represents that code.\n&gt; \n&gt; Why does this matter? On the pro-Julia side, people like special syntax for things and often find S-expression syntax inconvenient or unpleasant. On the pro-Lisp side, it’s much easier to figure out how to do metaprogramming correctly when the syntax of the data structure you’re trying to generate (to represent code) is the same as the syntax of the code that you would normally write. This is why one of the best pieces of advice when people are trying to write macros in Julia is to do the following:\n&gt; \n&gt;    Write an example of the kind of code you want your macro to generate\n&gt;    Call Meta.@dump on that code to see it as a data structure\n&gt;    Write code to generate that data structure—this is your macro.\n&gt; \n&gt; In Lisp, you don’t have to do step 2 because syntax for the code is already the same as the syntax for the data structure. There are the quasiquoting (in Lisp speak) quote ... end and :(...) constructs in Julia, which allow you to construct the data structures using code syntax, but that’s still not as direct as having them use the same syntax in the first place. ","user":"UGU761DU2","ts":"1616009321.098700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BdWuI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah. The key part of Stefan’s post IMO:\n\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"Having thought about this more for the past 4+ years, I think the key difference between Lisp and Julia is this:\n\n   In Lisp, the syntax for code is the same as the syntax for the data structure that is used to represent that code.\n   In Julia, the syntax for code is quite different from the syntax for the data structure that represents that code.\n\nWhy does this matter? On the pro-Julia side, people like special syntax for things and often find S-expression syntax inconvenient or unpleasant. On the pro-Lisp side, it’s much easier to figure out how to do metaprogramming correctly when the syntax of the data structure you’re trying to generate (to represent code) is the same as the syntax of the code that you would normally write. This is why one of the best pieces of advice when people are trying to write macros in Julia is to do the following:\n\n   Write an example of the kind of code you want your macro to generate\n   Call Meta.@dump on that code to see it as a data structure\n   Write code to generate that data structure—this is your macro.\n\nIn Lisp, you don’t have to do step 2 because syntax for the code is already the same as the syntax for the data structure. There are the quasiquoting (in Lisp speak) quote ... end and :(...) constructs in Julia, which allow you to construct the data structures using code syntax, but that’s still not as direct as having them use the same syntax in the first place. "}]}]}],"thread_ts":"1616008109.095700","parent_user_id":"UDB26738Q"},{"client_msg_id":"a1fce68c-e389-40b8-8983-4d8ba2313711","type":"message","text":"damn it. I was just about to suggest homeoiconic","user":"U0179G7FG4F","ts":"1616009323.098900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mZo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"damn it. I was just about to suggest homeoiconic"}]}]}],"thread_ts":"1616008109.095700","parent_user_id":"UDB26738Q"},{"client_msg_id":"6467e8f7-29ce-49e7-b5ab-70da4089f58f","type":"message","text":"according to the same wikipedia article, the definition is\n\n&gt; A language is homoiconic if a program written in it can be manipulated as data using the language, and thus the program's internal representation can be inferred just by reading the program itself. This property is often summarized by saying that the language treats \"code as data\". \nand I _think_ julia matches it?","user":"UDB26738Q","ts":"1616009391.099300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EaE3R","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"according to the same wikipedia article, the definition is\n\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"A language is homoiconic if a program written in it can be manipulated as data using the language, and thus the program's internal representation can be inferred just by reading the program itself. This property is often summarized by saying that the language treats \"code as data\". "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nand I "},{"type":"text","text":"think","style":{"italic":true}},{"type":"text","text":" julia matches it?"}]}]}],"thread_ts":"1616008109.095700","parent_user_id":"UDB26738Q","reactions":[{"name":"+1","users":["UGU761DU2"],"count":1}]},{"client_msg_id":"d2e85708-bcce-452f-b406-fd7ebac6bb33","type":"message","text":"But if you just paste these ~25 lines in your REPL than even that strictest definition of homoiconic (the one that Stefan is referencing on the stack exchange post) should apply to Julia too :julia-troll:\n```to_expr(x) = x\nto_expr(t::Tuple) = isa(t[1], Symbol) ? Expr(to_expr.(t)...) : Expr(:tuple, to_expr.(t)...)\nlisparse(x) = to_expr(eval(Meta.parse(x)))\nfunction lispmode()\n    # READ\n    printstyled(\"\\nlisp&gt; \", color=:magenta, bold=true)\n    l = readline()\n    while l !== \"(:exit)\"\n        try # So we don't get thrown out of the mode\n            # EVAL\n            result = eval(lisparse(l))\n            # PRINT\n            if isa(result, Expr)\n                Meta.show_sexpr(result)\n                println()\n            elseif isa(result, Tuple)\n                Meta.show_sexpr(:($(result...),))\n                println()\n            else\n                display(result)\n            end\n        catch e\n            display(e)\n        end\n        # LOOP\n        printstyled(\"\\nlisp&gt; \", color=:magenta, bold=true)\n        l = readline()\n    end\nend\nlispmode()```","user":"UGU761DU2","ts":"1616009417.099500","team":"T68168MUP","edited":{"user":"UGU761DU2","ts":"1616009756.000000"},"blocks":[{"type":"rich_text","block_id":"Uup","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But if you just paste these ~25 lines in your REPL than even that strictest definition of homoiconic (the one that Stefan is referencing on the stack exchange post) should apply to Julia too "},{"type":"emoji","name":"julia-troll"},{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"to_expr(x) = x\nto_expr(t::Tuple) = isa(t[1], Symbol) ? Expr(to_expr.(t)...) : Expr(:tuple, to_expr.(t)...)\nlisparse(x) = to_expr(eval(Meta.parse(x)))\nfunction lispmode()\n    # READ\n    printstyled(\"\\nlisp> \", color=:magenta, bold=true)\n    l = readline()\n    while l !== \"(:exit)\"\n        try # So we don't get thrown out of the mode\n            # EVAL\n            result = eval(lisparse(l))\n            # PRINT\n            if isa(result, Expr)\n                Meta.show_sexpr(result)\n                println()\n            elseif isa(result, Tuple)\n                Meta.show_sexpr(:($(result...),))\n                println()\n            else\n                display(result)\n            end\n        catch e\n            display(e)\n        end\n        # LOOP\n        printstyled(\"\\nlisp> \", color=:magenta, bold=true)\n        l = readline()\n    end\nend\nlispmode()"}]}]}],"thread_ts":"1616008109.095700","parent_user_id":"UDB26738Q","reactions":[{"name":"100","users":["UPUBAM63X","U6QGE7S86"],"count":2}]},{"client_msg_id":"38d2d575-c731-4887-b3b8-cc9815028508","type":"message","text":"&gt; program’s internal representation can be inferred just by reading the program itself.\nThat definitely doesn’t fit","user":"U6740K1SP","ts":"1616009419.099700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XwHJ","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"program’s internal representation can be inferred just by reading the program itself."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nThat definitely doesn’t fit"}]}]}],"thread_ts":"1616008109.095700","parent_user_id":"UDB26738Q"},{"client_msg_id":"27215695-aa51-42ad-8d6a-52af272d59ec","type":"message","text":"is it an `Expr(:special_head, …)` or an `Expr(:call, :special_head, …)`?","user":"U6740K1SP","ts":"1616009447.100000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GYcO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is it an "},{"type":"text","text":"Expr(:special_head, …)","style":{"code":true}},{"type":"text","text":" or an "},{"type":"text","text":"Expr(:call, :special_head, …)","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1616008109.095700","parent_user_id":"UDB26738Q","reactions":[{"name":"thinking_face","users":["UGU761DU2"],"count":1},{"name":"+1","users":["UGU761DU2","U6C937ENB"],"count":2}]},{"client_msg_id":"78e0af8a-6332-47a9-a95c-d15139aa7085","type":"message","text":"oh, I found the backstory: <https://twitter.com/nokusu/status/427068291379908608> :smile:","user":"UDB26738Q","ts":"1616009973.102400","team":"T68168MUP","attachments":[{"fallback":"<https://twitter.com/nokusu|@nokusu>: <https://twitter.com/JeffBezanson|@JeffBezanson> <https://twitter.com/StefanKarpinski|@StefanKarpinski> <https://twitter.com/Viral_B_Shah|@Viral_B_Shah> Why do you guys say #JuliaLang is homoiconic when it just has quotations and is self-hosted?","ts":1390655989,"author_name":"Anthony Ramine","author_link":"https://twitter.com/nokusu/status/427068291379908608","author_icon":"https://pbs.twimg.com/profile_images/430707872419151872/wMBanzpN_normal.png","author_subname":"@nokusu","text":"<https://twitter.com/JeffBezanson|@JeffBezanson> <https://twitter.com/StefanKarpinski|@StefanKarpinski> <https://twitter.com/Viral_B_Shah|@Viral_B_Shah> Why do you guys say #JuliaLang is homoiconic when it just has quotations and is self-hosted?","service_name":"twitter","service_url":"https://twitter.com/","from_url":"https://twitter.com/nokusu/status/427068291379908608","id":1,"original_url":"https://twitter.com/nokusu/status/427068291379908608","footer":"Twitter","footer_icon":"https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"}],"blocks":[{"type":"rich_text","block_id":"d1oH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh, I found the backstory: "},{"type":"link","url":"https://twitter.com/nokusu/status/427068291379908608"},{"type":"text","text":" "},{"type":"emoji","name":"smile"}]}]}],"thread_ts":"1616008109.095700","parent_user_id":"UDB26738Q","reactions":[{"name":"pick","users":["U6740K1SP","UEGRU91B2","U6QGE7S86","UGU761DU2"],"count":4}]},{"client_msg_id":"5b05f917-6402-4bd8-93cb-24b4a300c98a","type":"message","text":"Brenheim can you post that script somewhere permanent I always lose it when I need it","user":"UPUBAM63X","ts":"1616012916.114500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lMzi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Brenheim can you post that script somewhere permanent I always lose it when I need it"}]}]}],"thread_ts":"1616008109.095700","parent_user_id":"UDB26738Q"},{"client_msg_id":"543c8743-87fd-40d0-8560-67aedc433bef","type":"message","text":"<https://gist.github.com/> :stuck_out_tongue:","user":"UDB26738Q","ts":"1616013000.114800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8v=5","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://gist.github.com/"},{"type":"text","text":" "},{"type":"emoji","name":"stuck_out_tongue"}]}]}],"thread_ts":"1616008109.095700","parent_user_id":"UDB26738Q"},{"client_msg_id":"5d48111a-7ce2-4b85-abc9-8f53f5b4648c","type":"message","text":"yea but its not my work so I don't wanna steal it","user":"UPUBAM63X","ts":"1616013018.115100","team":"T68168MUP","edited":{"user":"UPUBAM63X","ts":"1616013024.000000"},"blocks":[{"type":"rich_text","block_id":"ZnPA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yea but its not my work so I don't wanna steal it"}]}]}],"thread_ts":"1616008109.095700","parent_user_id":"UDB26738Q"},{"client_msg_id":"d5df3744-933a-4f17-b521-ef8fe938303b","type":"message","text":"I did put it in a gist here once: <https://gist.github.com/brenhinkeller/44051118c2f9d18b26dc765466f749ba>\nBut you should also just steal it — the “REPL” part is trivial and the only actually clever part is the `to_expr` function which is actually from <@U8D9768Q6>, not me!  (in response to a question I asked here on slack, lost-to the slack-hole by now)","user":"UGU761DU2","ts":"1616013940.115600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ilqVl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I did put it in a gist here once: "},{"type":"link","url":"https://gist.github.com/brenhinkeller/44051118c2f9d18b26dc765466f749ba"},{"type":"text","text":"\nBut you should also just steal it — the “REPL” part is trivial and the only actually clever part is the "},{"type":"text","text":"to_expr","style":{"code":true}},{"type":"text","text":" function which is actually from "},{"type":"user","user_id":"U8D9768Q6"},{"type":"text","text":", not me!  (in response to a question I asked here on slack, lost-to the slack-hole by now)"}]}]}],"thread_ts":"1616008109.095700","parent_user_id":"UDB26738Q","reactions":[{"name":"+1","users":["UPUBAM63X"],"count":1}]},{"client_msg_id":"b8945b16-8987-4573-ae0f-0ade301c8b89","type":"message","text":"There's also LispSyntax.jl which I used for a bit","user":"UAUCGGD6C","ts":"1616139765.164500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Yxi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There's also LispSyntax.jl which I used for a bit"}]}]}],"thread_ts":"1616008109.095700","parent_user_id":"UDB26738Q","reactions":[{"name":"+1","users":["UGU761DU2"],"count":1}]},{"client_msg_id":"4514cf9a-8404-420f-a22b-7b81a28defd9","type":"message","text":"So this raises an age old question... Is Julia a Lisp?","user":"UPUBAM63X","ts":"1616182691.173700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"b=ZU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So this raises an age old question... Is Julia a Lisp?"}]}]}],"thread_ts":"1616008109.095700","parent_user_id":"UDB26738Q"},{"client_msg_id":"0e957f17-e312-433a-b31d-c3b8e7a95ee5","type":"message","text":"<https://xkcd.com/224/>","user":"U8D9768Q6","ts":"1616182895.174400","team":"T68168MUP","attachments":[{"title":"Lisp","title_link":"https://xkcd.com/224/","author_name":"xkcd","author_link":"https://xkcd.com/","image_url":"https://imgs.xkcd.com/comics/lisp.jpg","image_width":740,"image_height":220,"image_bytes":63924,"text":"[Title text] \"We lost the documentation on quantum mechanics.  You'll have to decode the regexes yourself.\"","fallback":"xkcd: Lisp","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/xkcd.png","id":1,"original_url":"https://xkcd.com/224/"}],"blocks":[{"type":"rich_text","block_id":"aaKn","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://xkcd.com/224/"}]}]}],"thread_ts":"1616008109.095700","parent_user_id":"UDB26738Q","reactions":[{"name":"lisp","users":["UGU761DU2","UPUBAM63X"],"count":2},{"name":"perl","users":["UGU761DU2","UPUBAM63X"],"count":2}]},{"client_msg_id":"d1852c97-e1a6-4c6c-8d70-eaca8faaf692","type":"message","text":"I think the secret built-in lisp syntax definitely is! IIRC someone from the MIT crew shared an anecdote here once about how at Jeff’s thesis defense, one of the emeritus profs (Abelson or Sussman or something?), was there and loved it, but wanted to program it directly in the lisp syntax that’s now only shown if you call `Meta.show_sexpr` or etc.","user":"UGU761DU2","ts":"1616183026.175800","team":"T68168MUP","edited":{"user":"UGU761DU2","ts":"1616183123.000000"},"blocks":[{"type":"rich_text","block_id":"b4f77","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think the secret built-in lisp syntax definitely is! IIRC someone from the MIT crew shared an anecdote here once about how at Jeff’s thesis defense, one of the emeritus profs (Abelson or Sussman or something?), was there and loved it, but wanted to program it directly in the lisp syntax that’s now only shown if you call "},{"type":"text","text":"Meta.show_sexpr","style":{"code":true}},{"type":"text","text":" or etc."}]}]}],"thread_ts":"1616008109.095700","parent_user_id":"UDB26738Q","reactions":[{"name":"+1","users":["UPUBAM63X"],"count":1}]}]