[{"client_msg_id":"0051e5be-a915-4e5c-b376-d30dc5339959","type":"message","text":"though to add to <@U8D9768Q6>’s point, I do find myself sometimes surprised by how frequently even \"black box\" programs are hobbled by language barriers.  For example, I usually say that something like scikit-learn is the \"best case scneario\" for Python: it's a collection of black box algorithms written efficiently in C, and for 95% of use cases the opacity of it all just doesn't matter.  However, not that long ago, I happened to find myself using scikit-learn a bit (in Julia through ScikitLearn.jl, but this is just a wrapper of the Python wrapper), one of the first things I wanted to do was use a custom loss function, and I found myself annoyed by how few things in scikit-learn allow this at all.  The reason is simple: if they did, it would involve inserting Python code into the middle of their efficient C code and it would be prohibitively slow in many cases.\n\nIn my experience, frequent users of scikit-learn tend not to even notice these issues because it just never occurs to them that they should be able to do something like e.g. write a custom loss function for most algorithms.","user":"U9VG1AYSG","ts":"1617132850.250100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x5q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"though to add to "},{"type":"user","user_id":"U8D9768Q6"},{"type":"text","text":"’s point, I do find myself sometimes surprised by how frequently even \"black box\" programs are hobbled by language barriers.  For example, I usually say that something like scikit-learn is the \"best case scneario\" for Python: it's a collection of black box algorithms written efficiently in C, and for 95% of use cases the opacity of it all just doesn't matter.  However, not that long ago, I happened to find myself using scikit-learn a bit (in Julia through ScikitLearn.jl, but this is just a wrapper of the Python wrapper), one of the first things I wanted to do was use a custom loss function, and I found myself annoyed by how few things in scikit-learn allow this at all.  The reason is simple: if they did, it would involve inserting Python code into the middle of their efficient C code and it would be prohibitively slow in many cases.\n\nIn my experience, frequent users of scikit-learn tend not to even notice these issues because it just never occurs to them that they should be able to do something like e.g. write a custom loss function for most algorithms."}]}]}],"thread_ts":"1617132850.250100","reply_count":3,"reply_users_count":2,"latest_reply":"1617134935.253400","reply_users":["U7HAYKY9X","UMY1LV01G"],"is_locked":false,"subscribed":false,"reactions":[{"name":"100","users":["UGD4K0Z25","U0179G7FG4F","U67G3QRJM","U017D621ELC"],"count":4},{"name":"+1","users":["U8D9768Q6"],"count":1}]},{"client_msg_id":"c0451366-9a74-4b59-9bc9-6ff00ce99d8e","type":"message","text":"Yep, that's exactly why I fell in love with Julia. Even after programming for years in Python, I had this idea that Numpy and Scipy was written by different \"computer science people\" using a completely different kind of progamming than I knew. After learning a little Julia it dawned on my that actually, these things are just regular packages, and it's totally within reach as long as you have a fast enough language","user":"U7HAYKY9X","ts":"1617133830.250900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+N4qA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yep, that's exactly why I fell in love with Julia. Even after programming for years in Python, I had this idea that Numpy and Scipy was written by different \"computer science people\" using a completely different kind of progamming than I knew. After learning a little Julia it dawned on my that actually, these things are just regular packages, and it's totally within reach as long as you have a fast enough language"}]}]}],"thread_ts":"1617132850.250100","parent_user_id":"U9VG1AYSG","reactions":[{"name":"+1","users":["U8D9768Q6","U67G3QRJM","UMY1LV01G"],"count":3},{"name":"100","users":["UMY1LV01G"],"count":1}]},{"client_msg_id":"df0f0bbd-c1df-4333-863e-da89c8b59955","type":"message","text":"I think for better or worse, I think a lot of people who work with the Python ML/DS ecosystem are \"skim users\" that never reach that depth or level of complexity. It's much easier to convince someone who _has_ hit the wall of the merits of Julia","user":"UMY1LV01G","ts":"1617134272.252400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Js+b","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think for better or worse, I think a lot of people who work with the Python ML/DS ecosystem are \"skim users\" that never reach that depth or level of complexity. It's much easier to convince someone who "},{"type":"text","text":"has ","style":{"italic":true}},{"type":"text","text":"hit the wall of the merits of Julia"}]}]}],"thread_ts":"1617132850.250100","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"aa8e6d97-44cb-4e31-ac22-d88584eb46eb","type":"message","text":"That's okay, those people don't need to be converted by the virtues of Julia. They'll be persuaded in 5-10 years by the packages/tutorials created by people who _were_ persuaded by the virtues of Julia","user":"U7HAYKY9X","ts":"1617134935.253400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bo8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's okay, those people don't need to be converted by the virtues of Julia. They'll be persuaded in 5-10 years by the packages/tutorials created by people who "},{"type":"text","text":"were","style":{"italic":true}},{"type":"text","text":" persuaded by the virtues of Julia"}]}]}],"thread_ts":"1617132850.250100","parent_user_id":"U9VG1AYSG"}]