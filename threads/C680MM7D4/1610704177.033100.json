[{"client_msg_id":"361b5688-d1bf-4b81-90ee-19bd7f0ccdc7","type":"message","text":"Does anyone recall why `undef` or formerly `uninitialized` was introduced for array constructors?","user":"U6N6VQE30","ts":"1610704177.033100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"APE1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does anyone recall why "},{"type":"text","text":"undef","style":{"code":true}},{"type":"text","text":" or formerly "},{"type":"text","text":"uninitialized","style":{"code":true}},{"type":"text","text":" was introduced for array constructors?"}]}]}],"thread_ts":"1610704177.033100","reply_count":29,"reply_users_count":2,"latest_reply":"1610715509.042700","reply_users":["U67SCG4HG","U6N6VQE30"],"subscribed":false},{"client_msg_id":"a15d9623-3ed3-4e57-876a-5c6c98abf0fe","type":"message","text":"<https://github.com/JuliaLang/julia/issues/24595>","user":"U67SCG4HG","ts":"1610704346.033900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ey=t","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/issues/24595"}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"7e1955ac-a482-4d54-9443-dcad696c628c","type":"message","text":"I suppose you can think of the first argument as a \"producer of values\". There is also e.g. `Vector{Union{Int,Nothing}}(nothing, 10)` and also for `missing`.","user":"U67SCG4HG","ts":"1610704411.034100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"COh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I suppose you can think of the first argument as a \"producer of values\". There is also e.g. "},{"type":"text","text":"Vector{Union{Int,Nothing}}(nothing, 10)","style":{"code":true}},{"type":"text","text":" and also for "},{"type":"text","text":"missing","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"00d24def-b723-4536-b2b5-38a622549ea6","type":"message","text":"Oh. `Vector(1:4)` is a thing.","user":"U6N6VQE30","ts":"1610704601.034300","team":"T68168MUP","edited":{"user":"U6N6VQE30","ts":"1610704683.000000"},"blocks":[{"type":"rich_text","block_id":"FoPip","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh. "},{"type":"text","text":"Vector(1:4)","style":{"code":true}},{"type":"text","text":" is a thing."}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"9a44060d-1729-4ec0-aa2d-4be78b121774","type":"message","text":"Yea, definitely not finished but I believe that was the original plan","user":"U67SCG4HG","ts":"1610704701.034700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"M6Ses","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yea, definitely not finished but I believe that was the original plan"}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"222b3394-8add-48ea-9ad5-019283714efb","type":"message","text":"```julia&gt; Vector((1,2,3))\nERROR: MethodError: no method matching Array{T,1} where T(::Tuple{Int64,Int64,Int64})```\nis what I tested, hence my confusion","user":"U6N6VQE30","ts":"1610704710.034900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eWX","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Vector((1,2,3))\nERROR: MethodError: no method matching Array{T,1} where T(::Tuple{Int64,Int64,Int64})"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"is what I tested, hence my confusion"}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"a2969bfb-6d0a-4689-bc50-89e0d211ab17","type":"message","text":"`Vector(1:4)` is just `Vector(x::AbstractVector)` though","user":"U67SCG4HG","ts":"1610704720.035100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FX7v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Vector(1:4)","style":{"code":true}},{"type":"text","text":" is just "},{"type":"text","text":"Vector(x::AbstractVector)","style":{"code":true}},{"type":"text","text":" though"}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"7000711f-008c-4853-ba3b-61756ce0c489","type":"message","text":"So the groundwork was laid, but it didn't go much further :stuck_out_tongue:","user":"U6N6VQE30","ts":"1610704781.035300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YWAw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So the groundwork was laid, but it didn't go much further "},{"type":"emoji","name":"stuck_out_tongue"}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"9a67855b-ce62-41b4-804c-2b84869c363b","type":"message","text":"I would consider `fill` to be the \"producer of values\" though","user":"U6N6VQE30","ts":"1610704856.035500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fBW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I would consider "},{"type":"text","text":"fill","style":{"code":true}},{"type":"text","text":" to be the \"producer of values\" though"}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"f910d33e-40eb-4a02-a264-7c065d000713","type":"message","text":"although that's not a great API either.\n\n```julia&gt; CUDA.fill(0.0f0, 3)\n3-element CuArray{Float32,1}:\n 0.0\n 0.0\n 0.0\n\njulia&gt; fill(0.0f0, 3)\n3-element Array{Float32,1}:\n 0.0\n 0.0\n 0.0```","user":"U6N6VQE30","ts":"1610705074.035700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QW7h","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"although that's not a great API either.\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> CUDA.fill(0.0f0, 3)\n3-element CuArray{Float32,1}:\n 0.0\n 0.0\n 0.0\n\njulia> fill(0.0f0, 3)\n3-element Array{Float32,1}:\n 0.0\n 0.0\n 0.0"}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"afaa4879-6b66-4b34-9801-e30fc935d317","type":"message","text":":sweat_smile:","user":"U6N6VQE30","ts":"1610705082.035900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OJM","elements":[{"type":"rich_text_section","elements":[{"type":"emoji","name":"sweat_smile"}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"d63174ab-0672-4a20-9b31-2d7ff9cccd54","type":"message","text":"Yea I guess that would be\n```CuVector{Float32}(zeros, 3)```\nor something. The problem that the issue wanted to adress was exactly this I think. I.e. how to generalize 'zeros` etc to other types than just `Array`.","user":"U67SCG4HG","ts":"1610705882.037400","team":"T68168MUP","edited":{"user":"U67SCG4HG","ts":"1610705900.000000"},"blocks":[{"type":"rich_text","block_id":"XLUo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yea I guess that would be\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"CuVector{Float32}(zeros, 3)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"or something. The problem that the issue wanted to adress was exactly this I think. I.e. how to generalize 'zeros` etc to other types than just "},{"type":"text","text":"Array","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"3ac7c0fa-d483-4458-a93f-fb5dde5e98fa","type":"message","text":"hm yeah, or the other way around, zeros(storage_type, size)","user":"U6N6VQE30","ts":"1610708519.037700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AiE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hm yeah, or the other way around, zeros(storage_type, size)"}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"dc64e9ec-4c10-403e-afde-70684116a31e","type":"message","text":"fill(Matrix{Union{Float64,Nothing}, nothing, 3, 4)\nfill(Matrix{Float64}, undef, 5, 6)","user":"U6N6VQE30","ts":"1610708604.037900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zngY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"fill(Matrix{Union{Float64,Nothing}, nothing, 3, 4)\nfill(Matrix{Float64}, undef, 5, 6)"}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"e0e3233f-8289-4d9c-8a57-15372a9a9b72","type":"message","text":"idk","user":"U6N6VQE30","ts":"1610708617.038100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4lJ=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"idk"}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"dec3aac4-74fd-4a11-8216-668dc6e1697c","type":"message","text":"But that is ambiguous","user":"U67SCG4HG","ts":"1610708783.038300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"B+qE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But that is ambiguous"}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"7b12a492-ead1-4cc2-8e41-88b372acbb10","type":"message","text":"Do you want a 5x6 matrix filled with matrices, or a 5x6 Matrix filled with Float64","user":"U67SCG4HG","ts":"1610708831.038500","team":"T68168MUP","edited":{"user":"U67SCG4HG","ts":"1610708870.000000"},"blocks":[{"type":"rich_text","block_id":"c0V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Do you want a 5x6 matrix filled with matrices, or a 5x6 Matrix filled with Float64"}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"f2fe6622-07ad-4669-92ca-8c3105adc229","type":"message","text":"Some custom array packages did implement `zeros(::MyArray, size)::MyArray` before at least. But if you would use the actual constructor you disambiguate.","user":"U67SCG4HG","ts":"1610708936.038800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wBZVO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Some custom array packages did implement "},{"type":"text","text":"zeros(::MyArray, size)::MyArray","style":{"code":true}},{"type":"text","text":" before at least. But if you would use the actual constructor you disambiguate."}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"6dd164fb-3676-4f57-8cb2-52e3e31c8946","type":"message","text":"agreed","user":"U6N6VQE30","ts":"1610709111.039000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"apmCW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"agreed"}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"912b188b-4bb5-40ce-a915-ce8bc0b8378e","type":"message","text":"although, is it really?\n\n`fill(storage_type, value, size_tuple)` for special array types and `fill(value, size_tuple)` for not Array could work","user":"U6N6VQE30","ts":"1610709248.039200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jTG0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"although, is it really?\n\n"},{"type":"text","text":"fill(storage_type, value, size_tuple)","style":{"code":true}},{"type":"text","text":" for special array types and "},{"type":"text","text":"fill(value, size_tuple)","style":{"code":true}},{"type":"text","text":" for not Array could work"}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"76975167-0a91-465d-a35b-907ca2225678","type":"message","text":"isn't the ambiguity mostly because of the vararg?","user":"U6N6VQE30","ts":"1610709317.039400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jJh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"isn't the ambiguity mostly because of the vararg?"}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"ebc17974-78d0-4797-b2df-8d396f094773","type":"message","text":"I guess that would be one way to do it but still inconsistent in some way. Just seem natural for a type to define it's own constructor, since not all arrays can be constructed from just the type and size","user":"U67SCG4HG","ts":"1610709758.039600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mSQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess that would be one way to do it but still inconsistent in some way. Just seem natural for a type to define it's own constructor, since not all arrays can be constructed from just the type and size"}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"1ccc59e8-c52a-468e-be37-0b0d21617cba","type":"message","text":"maybe we should just accept that ambiguity error are no long errors when the compiler invokes machine learning technology to figure out the user's intentions","user":"U6N6VQE30","ts":"1610714045.041100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+59k","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"maybe we should just accept that ambiguity error are no long errors when the compiler invokes machine learning technology to figure out the user's intentions"}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"66a2bf1a-08bc-4b3c-a1c7-a08ed5be9ac2","type":"message","text":"Why do you dislike explicit constructors? :stuck_out_tongue:","user":"U67SCG4HG","ts":"1610714422.041300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eQtHB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Why do you dislike explicit constructors? "},{"type":"emoji","name":"stuck_out_tongue"}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"52372d2a-c1c6-4268-9446-24bf31565361","type":"message","text":"Hm, the one emphasizes the type being created, the other how it is created. Maybe the former should be preferred yeah.\n\nBut then I'd rather not have this \"copy constructor\" behavior `Vector(iterable)` but just `convert(array_type, iterable)` because otherwise it just hast too much functionality","user":"U6N6VQE30","ts":"1610714766.041500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"U9r","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hm, the one emphasizes the type being created, the other how it is created. Maybe the former should be preferred yeah.\n\nBut then I'd rather not have this \"copy constructor\" behavior "},{"type":"text","text":"Vector(iterable)","style":{"code":true}},{"type":"text","text":" but just "},{"type":"text","text":"convert(array_type, iterable)","style":{"code":true}},{"type":"text","text":" because otherwise it just hast too much functionality"}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"615ba439-2696-46f3-9b2d-9bc00e1eeab8","type":"message","text":"isn't `collect` and `[...]` enough?","user":"U6N6VQE30","ts":"1610714800.041700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lyEK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"isn't "},{"type":"text","text":"collect","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"[...]","style":{"code":true}},{"type":"text","text":" enough?"}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"924ee2ab-7a92-4b1c-af76-8c5af1fcd843","type":"message","text":"then Array{T}((2,3)) could be what is now Array{T}(undef, 2, 3)","user":"U6N6VQE30","ts":"1610714916.041900","team":"T68168MUP","edited":{"user":"U6N6VQE30","ts":"1610714926.000000"},"blocks":[{"type":"rich_text","block_id":"zUW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"then Array{T}((2,3)) could be what is now Array{T}(undef, 2, 3)"}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"cec838ce-c452-4b30-9d44-83be753ea431","type":"message","text":"But as an example,  `SharedArray` takes kwargs, would yuou just pass that through?","user":"U67SCG4HG","ts":"1610715058.042200","team":"T68168MUP","edited":{"user":"U67SCG4HG","ts":"1610715066.000000"},"blocks":[{"type":"rich_text","block_id":"neUQ0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But as an example,  "},{"type":"text","text":"SharedArray","style":{"code":true}},{"type":"text","text":" takes kwargs, would yuou just pass that through?"}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"a5a073ee-757d-4a06-bf0e-df3713b4932a","type":"message","text":"`fill(T::Type{&lt;:AbstractArray}, args...; kwargs...) = T(args...; kwargs)`?","user":"U67SCG4HG","ts":"1610715104.042500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Vqmb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"fill(T::Type{<:AbstractArray}, args...; kwargs...) = T(args...; kwargs)","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"},{"client_msg_id":"e4f5fbed-874a-4e45-83a2-ff5f05be9e4d","type":"message","text":"Right, I was only thinking about generic code where the storage type can be interchanged by just swapping the one type for another. Your example is a good argument for preferring constructors","user":"U6N6VQE30","ts":"1610715509.042700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Tt2Yn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Right, I was only thinking about generic code where the storage type can be interchanged by just swapping the one type for another. Your example is a good argument for preferring constructors"}]}]}],"thread_ts":"1610704177.033100","parent_user_id":"U6N6VQE30"}]