[{"client_msg_id":"11f68190-7b6e-4345-b08a-f68cb5e21603","type":"message","text":"Genuine question. I haven't dived into Julia yet but what is the hype about? I used it for just an hour and it felt like matlab. Is there anything I am missing?","user":"U01SM637QHW","ts":"1617810438.112000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7Hz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Genuine question. I haven't dived into Julia yet but what is the hype about? I used it for just an hour and it felt like matlab. Is there anything I am missing?"}]}]}],"thread_ts":"1617810438.112000","reply_count":32,"reply_users_count":11,"latest_reply":"1617820002.137500","reply_users":["U6QGE7S86","U0138UTB7A4","U01SM637QHW","UUS6GL8BH","U7HAYKY9X","U011V2YN59N","UEA5FBCRH","U011LUQ182G","U7LC4PFU4","UTRAUNYDA","UPUBAM63X"],"is_locked":false,"subscribed":false},{"client_msg_id":"d37730ad-d387-4b51-8224-6b9d03566bf0","type":"message","text":"Nope, you got us! :sweat_smile:","user":"U6QGE7S86","ts":"1617810682.112100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fSzRA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Nope, you got us! "},{"type":"emoji","name":"sweat_smile"}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW","reactions":[{"name":"point_up","users":["ULG5V164A","U7HAYKY9X","UUS6GL8BH","UEA5FBCRH","U6795JH6H","U90JR0C80","U011V2YN59N","U01C2E6TYEM","UPUBAM63X"],"count":9},{"name":"troll","users":["U8D9768Q6","U0138UTB7A4","U7HAYKY9X","UUS6GL8BH","UEA5FBCRH","U6795JH6H","UNF9QDRNJ","U90JR0C80","U011V2YN59N","U01724Q3PGW","U01QRM4E8HL","U011LUQ182G","UPQP0RWTH","UPUBAM63X"],"count":14}]},{"client_msg_id":"167b348e-e322-4100-824e-7ab388f0cbfe","type":"message","text":"What sort of applications of coding are you interested in? That will help people suggest some interesting things possible in Julia.\n\nI really like Julia for the package ecosystem and how accessible it is for me to program relatively advanced stuff using packages that people already built! For example, mixing together machine learning neural network stuff with differential equations, and being able to use neural networks to approximate unknown terms in differential equations. I find this super interesting. Even further still, is that someone made a bayesian statistics/probabilities magic stuff, and it integrates really well with neural networks and differential equations.","user":"U0138UTB7A4","ts":"1617810862.112400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7WLCQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What sort of applications of coding are you interested in? That will help people suggest some interesting things possible in Julia.\n\nI really like Julia for the package ecosystem and how accessible it is for me to program relatively advanced stuff using packages that people already built! For example, mixing together machine learning neural network stuff with differential equations, and being able to use neural networks to approximate unknown terms in differential equations. I find this super interesting. Even further still, is that someone made a bayesian statistics/probabilities magic stuff, and it integrates really well with neural networks and differential equations."}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW"},{"client_msg_id":"b5d76fe4-efc4-4d8a-a135-31e574277191","type":"message","text":"^ Ditto - it's easier if you tell us your interests <@U01SM637QHW> and we can tell you about cool Julia stuff being built in that area that may interest you / offer advantages over other languages.\n\nSpoiler: we lean towards scientific computing / ML, not so much web development and hard real time (yet!)","user":"U6QGE7S86","ts":"1617810941.112600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wpHGR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"^ Ditto - it's easier if you tell us your interests "},{"type":"user","user_id":"U01SM637QHW"},{"type":"text","text":" and we can tell you about cool Julia stuff being built in that area that may interest you / offer advantages over other languages.\n\nSpoiler: we lean towards scientific computing / ML, not so much web development and hard real time (yet!)"}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW"},{"client_msg_id":"c6a257fa-6d30-4511-bd28-495ce7c69822","type":"message","text":"I sovle PDEs numerically with finite elements so I am a part of the scientific community bucket.","user":"U01SM637QHW","ts":"1617811196.113400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zvUJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I sovle PDEs numerically with finite elements so I am a part of the scientific community bucket."}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW","reactions":[{"name":"+1","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"73a8e015-7d1a-4c52-ab4a-61d4c96e1481","type":"message","text":"which software did you use before?","user":"UUS6GL8BH","ts":"1617811215.113600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0Ke","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"which software did you use before?"}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW"},{"client_msg_id":"19bd156f-867d-4556-8224-ce7b689792bd","type":"message","text":"Related: Is there any blog post/article that explains why Julia is especially useful/cool we can point to, similarly to how we always point to Stefan's talk when people ask about Multiple Dispatch? Because honestly, all I have seen are these scattered articles about how small aspect X of Julia is neat","user":"U7HAYKY9X","ts":"1617811301.114200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xkK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Related: Is there any blog post/article that explains why Julia is especially useful/cool we can point to, similarly to how we always point to Stefan's talk when people ask about Multiple Dispatch? Because honestly, all I have seen are these scattered articles about how small aspect X of Julia is neat"}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW"},{"client_msg_id":"71d06e51-a952-401f-aaf2-49fa18ef3fec","type":"message","text":"<@UUS6GL8BH> commercial or ... ?","user":"U01SM637QHW","ts":"1617811376.114400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vIZ","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UUS6GL8BH"},{"type":"text","text":" commercial or ... ?"}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW"},{"client_msg_id":"6f128833-4ace-4717-ad12-ed5d59b93864","type":"message","text":"whatever you used before, commercial or FOSS","user":"UUS6GL8BH","ts":"1617811407.114600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mfUI5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"whatever you used before, commercial or FOSS"}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW"},{"client_msg_id":"dadf869f-d156-4dd9-a361-b323bdeb6c1f","type":"message","text":"At first I used anysy fluent (commercial) and a tiny bit openFOAM (opensource) as finite volume solvers\nThen I switched to finite elemets. I used Comsol (commercial) for awhile&gt;\nI am now using dealii which is a C++ FEM library","user":"U01SM637QHW","ts":"1617811509.115500","team":"T68168MUP","edited":{"user":"U01SM637QHW","ts":"1617811549.000000"},"blocks":[{"type":"rich_text","block_id":"P0Bn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"At first I used anysy fluent (commercial) and a tiny bit openFOAM (opensource) as finite volume solvers\nThen I switched to finite elemets. I used Comsol (commercial) for awhile>\nI am now using dealii which is a C++ FEM library"}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW"},{"client_msg_id":"4080acb9-f365-4371-9938-936282905e14","type":"message","text":"<http://www.google.com|www.google.com> can answer this one","user":"U011V2YN59N","ts":"1617811524.115700","team":"T68168MUP","edited":{"user":"U011V2YN59N","ts":"1617811538.000000"},"blocks":[{"type":"rich_text","block_id":"RbRBo","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"http://www.google.com","text":"www.google.com"},{"type":"text","text":" can answer this one"}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW"},{"client_msg_id":"fffa139a-efcc-456a-92a4-5ccb6014244a","type":"message","text":"so if you don't have any special needs, its fairly trivial to use some commercial software. Speaking about dealii, its a very complex library and for me one of the major key features of Julia is the integrated package manager. It's so easy to reproduce your set up on a cluster. Colleagues spend weeks to install their software on a different computer, while I just type `]instantiate` . But there's more to that. If you have performance critical code, it's relatively easy to parallelize it.","user":"UUS6GL8BH","ts":"1617811706.116100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ujDfl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so if you don't have any special needs, its fairly trivial to use some commercial software. Speaking about dealii, its a very complex library and for me one of the major key features of Julia is the integrated package manager. It's so easy to reproduce your set up on a cluster. Colleagues spend weeks to install their software on a different computer, while I just type "},{"type":"text","text":"]instantiate","style":{"code":true}},{"type":"text","text":" . But there's more to that. If you have performance critical code, it's relatively easy to parallelize it."}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW","reactions":[{"name":"thumbsup_all","users":["U0179G7FG4F","U01SM637QHW","UE4DPAS4W"],"count":3}]},{"client_msg_id":"8edc5fa5-89a3-4f61-b615-769a320edad0","type":"message","text":"<@U01SM637QHW> just checkout the SciML/DifferentialEquations.jl verse, you came to the right place :+1::skin-tone-5:\n<http://www.stochasticlifestyle.com/comparison-differential-equation-solver-suites-matlab-r-julia-python-c-fortran/>","user":"U6QGE7S86","ts":"1617811763.116600","team":"T68168MUP","attachments":[{"service_name":"Stochastic Lifestyle","title":"A Comparison Between Differential Equation Solver Suites In MATLAB, R, Julia, Python, C, Mathematica, Maple, and Fortran - Stochastic Lifestyle","title_link":"http://www.stochasticlifestyle.com/comparison-differential-equation-solver-suites-matlab-r-julia-python-c-fortran/","text":"Many times a scientist is choosing a programming language or a software for a specific purpose. For the field of scientific computing, the methods for solving differential equations are one of the important areas. What I would like to do is take the time to compare and contrast between the most popular offerings. This is a good way to reflect upon what's available and find out where there is room for improvement. I hope that by giving you the details for how each suite was put together (and the \"why\", as gathered from software publications) you can come to your own conclusion as to which suites are right for you. (Full disclosure, I am the lead developer of DifferentialEquations.jl. You will see at the end that DifferentialEquations.jl does offer pretty much everything from the other suite combined, but that's no accident: ... READ MORE","fallback":"Stochastic Lifestyle: A Comparison Between Differential Equation Solver Suites In MATLAB, R, Julia, Python, C, Mathematica, Maple, and Fortran - Stochastic Lifestyle","thumb_url":"http://www.stochasticlifestyle.com/wp-content/uploads/2019/11/de_solver_software_comparsion-1-scaled.png","fields":[{"title":"Written by","value":"Christopher Rackauckas","short":true},{"title":"Est. reading time","value":"36 minutes","short":true}],"ts":1506390669,"from_url":"http://www.stochasticlifestyle.com/comparison-differential-equation-solver-suites-matlab-r-julia-python-c-fortran/","thumb_width":2560,"thumb_height":1978,"service_icon":"https://i2.wp.com/www.stochasticlifestyle.com/wp-content/uploads/2016/01/cropped-faviPic.png?fit=180%2C180","id":1,"original_url":"http://www.stochasticlifestyle.com/comparison-differential-equation-solver-suites-matlab-r-julia-python-c-fortran/"}],"blocks":[{"type":"rich_text","block_id":"EDhj=","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01SM637QHW"},{"type":"text","text":" just checkout the SciML/DifferentialEquations.jl verse, you came to the right place "},{"type":"emoji","name":"+1","skin_tone":5},{"type":"text","text":"\n"},{"type":"link","url":"http://www.stochasticlifestyle.com/comparison-differential-equation-solver-suites-matlab-r-julia-python-c-fortran/"}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW","reactions":[{"name":"heart","users":["U01SM637QHW"],"count":1}]},{"client_msg_id":"2b5188aa-528c-402b-a6a2-8c85c8ae2e20","type":"message","text":"hmm I don't think so that DifferentialEquations.jl is the right place for it, at least not for now","user":"UUS6GL8BH","ts":"1617811796.117000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"A+T","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmm I don't think so that DifferentialEquations.jl is the right place for it, at least not for now"}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW"},{"client_msg_id":"c9658fb1-efff-465d-bdad-eefd624d4359","type":"message","text":"Welcome to Julia! I didn't get it at first when I tried it out the very first time, but after a while I started to discover more of the packages that I'm interested in.\n\nUnfortuntely I don't know much about solving PDEs, but I do know it has been done before in Julia. Especially large systems that need high performance. There's this older video from JuliaCon on solving large scale geophysics/EM problems <https://www.youtube.com/watch?v=pxP67ElwUM4>","user":"U0138UTB7A4","ts":"1617811818.117300","team":"T68168MUP","edited":{"user":"U0138UTB7A4","ts":"1617811827.000000"},"blocks":[{"type":"rich_text","block_id":"2HZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Welcome to Julia! I didn't get it at first when I tried it out the very first time, but after a while I started to discover more of the packages that I'm interested in.\n\nUnfortuntely I don't know much about solving PDEs, but I do know it has been done before in Julia. Especially large systems that need high performance. There's this older video from JuliaCon on solving large scale geophysics/EM problems "},{"type":"link","url":"https://www.youtube.com/watch?v=pxP67ElwUM4"}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW"},{"client_msg_id":"92d78c87-16c4-408e-b5e7-adb8984f9e21","type":"message","text":"if you want something close to dealii you should check out Ferrite.jl, if you want something more like FEniCS you can take a look at Gridap.jl","user":"UUS6GL8BH","ts":"1617811878.117700","team":"T68168MUP","edited":{"user":"UUS6GL8BH","ts":"1617811894.000000"},"blocks":[{"type":"rich_text","block_id":"oLc4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you want something close to dealii you should check out Ferrite.jl, if you want something more like FEniCS you can take a look at Gridap.jl"}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW","reactions":[{"name":"point_up","users":["UMJPZQ4RM"],"count":1}]},{"client_msg_id":"872e899d-3dc6-46ab-9533-b16838a08066","type":"message","text":"I will forget about all of these libraries before I get back to Julia","user":"U01SM637QHW","ts":"1617812010.118300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4EMO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I will forget about all of these libraries before I get back to Julia"}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW"},{"client_msg_id":"9b22c29f-4803-41ca-aa64-fd637f86feea","type":"message","text":"Here is a 1-year old Reddit post that discusses high-level differences between Julia and Matlab. <https://www.reddit.com/r/Julia/comments/cjmtd1/how_is_julia_different_from_matlab/>\n\nTop-voted answer:\n&gt; At highest level Julia is free (as in beer and as in freedom), open source and a bottom up general programming language (you can ignore all the math part and just write any program with it with the same advantages at language level), unlike Matlab which is paid, closed source and optimized solely for numerical computation.\n&gt; Julia's main focus is to solve the two language problem (have a dynamic interactive language that is high performance enough to have everything written in it), while Matlab is dependent of libraries written in C/C++/Fortran. Julia has a built-in package manager that can download and compile any library with one command, and libraries from different people can communicate well thanks to the multiple dispatch paradigm, while Matlab it's inconvenient to share libraries and many of the most useful toolkits are paid.","user":"UEA5FBCRH","ts":"1617812089.118500","team":"T68168MUP","edited":{"user":"UEA5FBCRH","ts":"1617813100.000000"},"attachments":[{"service_name":"reddit","title":"How is Julia different from MATLAB?","title_link":"https://www.reddit.com/r/Julia/comments/cjmtd1/how_is_julia_different_from_matlab/","text":"I have read several resources which talks about syntactic difference. However, I want to understand what are the higher level features that makes...","fallback":"reddit: How is Julia different from MATLAB?","thumb_url":"https://www.redditstatic.com/new-icon.png","from_url":"https://www.reddit.com/r/Julia/comments/cjmtd1/how_is_julia_different_from_matlab/","thumb_width":256,"thumb_height":256,"service_icon":"http://www.redditstatic.com/desktop2x/img/favicon/apple-icon-57x57.png","id":1,"original_url":"https://www.reddit.com/r/Julia/comments/cjmtd1/how_is_julia_different_from_matlab/"}],"blocks":[{"type":"rich_text","block_id":"F4K","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Here is a 1-year old Reddit post that discusses high-level differences between Julia and Matlab. "},{"type":"link","url":"https://www.reddit.com/r/Julia/comments/cjmtd1/how_is_julia_different_from_matlab/"},{"type":"text","text":"\n\nTop-voted answer:\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"At highest level Julia is free (as in beer and as in freedom), open source and a bottom up general programming language (you can ignore all the math part and just write any program with it with the same advantages at language level), unlike Matlab which is paid, closed source and optimized solely for numerical computation.\nJulia's main focus is to solve the two language problem (have a dynamic interactive language that is high performance enough to have everything written in it), while Matlab is dependent of libraries written in C/C++/Fortran. Julia has a built-in package manager that can download and compile any library with one command, and libraries from different people can communicate well thanks to the multiple dispatch paradigm, while Matlab it's inconvenient to share libraries and many of the most useful toolkits are paid."}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW"},{"client_msg_id":"d4008429-f6c3-4718-99aa-90729338ed3b","type":"message","text":"Same here! I feel the same way too sometimes with Julia package ecosystem, so many different packages to keep in my head on what to try out and how to try them out and how to integrate them together.","user":"U0138UTB7A4","ts":"1617812141.118800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ANTBT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Same here! I feel the same way too sometimes with Julia package ecosystem, so many different packages to keep in my head on what to try out and how to try them out and how to integrate them together."}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW"},{"client_msg_id":"aa1c479e-2ff3-4a95-af0b-69adb112e542","type":"message","text":"<@U01SM637QHW> FWIW, I also work in numerical PDEs. In comparison to Matlab, Julia is _much_ faster after optimization while still maintaining most of the ease of use. This is especially true for procedures that are more difficult to write as simple matrix-matrix or matrix-vector operations. The management of a large Julia codebase is also easier than in Matlab, and the testing framework in Julia is :italian-chef-kiss: .\n\nThere are also some features which make it easier for me to manage my code. For example, broadcasting makes it easy to manage solutions with multiple components. In Matlab and C++, I usually loop over the solution components when working on a system of PDEs. In Julia, I can just write functions designed for single scalar solutions and then broadcast them over the tuple of solution fields.\n\nFinally, the package ecosystem is also great, but many aren’t necessary for basic work on numerical PDEs. If you’re interested in getting into Julia for PDEs, I’d recommend first learning about what makes Julia code fast (I still learn new things from the performance tips <https://docs.julialang.org/en/v1/manual/performance-tips/>) and doing some timing comparisons between Matlab and Julia to convince yourself of the speedup.","user":"U011LUQ182G","ts":"1617814077.122700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"I/M7","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01SM637QHW"},{"type":"text","text":" FWIW, I also work in numerical PDEs. In comparison to Matlab, Julia is "},{"type":"text","text":"much","style":{"italic":true}},{"type":"text","text":" faster after optimization while still maintaining most of the ease of use. This is especially true for procedures that are more difficult to write as simple matrix-matrix or matrix-vector operations. The management of a large Julia codebase is also easier than in Matlab, and the testing framework in Julia is "},{"type":"emoji","name":"italian-chef-kiss"},{"type":"text","text":" .\n\nThere are also some features which make it easier for me to manage my code. For example, broadcasting makes it easy to manage solutions with multiple components. In Matlab and C++, I usually loop over the solution components when working on a system of PDEs. In Julia, I can just write functions designed for single scalar solutions and then broadcast them over the tuple of solution fields.\n\nFinally, the package ecosystem is also great, but many aren’t necessary for basic work on numerical PDEs. If you’re interested in getting into Julia for PDEs, I’d recommend first learning about what makes Julia code fast (I still learn new things from the performance tips "},{"type":"link","url":"https://docs.julialang.org/en/v1/manual/performance-tips/"},{"type":"text","text":") and doing some timing comparisons between Matlab and Julia to convince yourself of the speedup."}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW"},{"client_msg_id":"1cc42385-1ff6-4a00-901f-b26e2194be47","type":"message","text":"<@U011LUQ182G> for low level stuff all codes seem to operate at the same speed, It s all just vector vector multiplication. Pyhton and matalb mostly use a C++ or a fortran library for linear algebra under the hood and I have tested this on tiny codes.","user":"U01SM637QHW","ts":"1617814394.124000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dAY","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U011LUQ182G"},{"type":"text","text":" for low level stuff all codes seem to operate at the same speed, It s all just vector vector multiplication. Pyhton and matalb mostly use a C++ or a fortran library for linear algebra under the hood and I have tested this on tiny codes."}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW"},{"client_msg_id":"de7ea9f9-8529-4508-a0d3-bd23b3c15bb5","type":"message","text":"Do you have any comments about this?","user":"U01SM637QHW","ts":"1617814409.124200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2K4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Do you have any comments about this?"}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW"},{"client_msg_id":"0C0CE221-B1E5-407C-B818-6D3EAEB86C57","type":"message","text":"Yes - not all low level operations look like linear algebra","user":"U011LUQ182G","ts":"1617814915.125100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AiE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes - not all low level operations look like linear algebra"}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW"},{"client_msg_id":"e518d753-3186-49b8-812d-5f19c33ec4b2","type":"message","text":"Can you expand more on this? The more the better","user":"U01SM637QHW","ts":"1617814990.125300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bFEZP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can you expand more on this? The more the better"}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW"},{"client_msg_id":"ee2baaad-0f02-4849-abe4-755faa6dedd4","type":"message","text":"I'm a full time matlab user and off-and-on using julia since 0.3. a) it's not a hype anymore b) you can get into usability problems (time to first plot) which are solvable. c) julia is a sane programming language with some things you need to learn - like lisp thinking of 'scope' and multi-dispatch d) julia has a bright future","user":"U7LC4PFU4","ts":"1617815232.126100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pnz/Z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm a full time matlab user and off-and-on using julia since 0.3. a) it's not a hype anymore b) you can get into usability problems (time to first plot) which are solvable. c) julia is a sane programming language with some things you need to learn - like lisp thinking of 'scope' and multi-dispatch d) julia has a bright future"}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW"},{"client_msg_id":"ea958f15-5cb3-4f3e-b47a-294d52049e23","type":"message","text":"Sure. Here’s one example - imagine for example an explicit time-stepping wave equation solver using finite differences. You can write the system as `d2u/dt2 = A*u`, but most optimized and industry codes don’t form `A` explicitly. Insteady, they compute it via `(A*u)_i = (u[i+1]-2*u[i]-u[i-1])/h^2` in a matrix-free fashion involving a loop over `i`. This is slow in both Matlab/Python since it doesn’t call fast linear algebra libraries. It’s fast in C++, Fortran, and Julia though.\n\nAnother example - I have a code for CFD where I compute `sum(A.*B,dims=2)` (e.g., row sums of the Hadamard product of two matrices). `A` can be dense or sparse, and I form `B[i,j]` on the fly to avoid having to store it. The usual way to compute this is to loop over the rows/columns of `A` and accumulate these row sums on the fly. Again, slow in Matlab and Python, fast in Julia.\n\nMoreover, because of multiple dispatch in Julia, I can specialize if `A` is a sparse matrix and avoid forming `B` on the fly. However, it keeps the same interface, so I don’t need to call different routines for sparse vs dense `A`.","user":"U011LUQ182G","ts":"1617815591.127100","team":"T68168MUP","edited":{"user":"U011LUQ182G","ts":"1617815693.000000"},"blocks":[{"type":"rich_text","block_id":"5jlb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sure. Here’s one example - imagine for example an explicit time-stepping wave equation solver using finite differences. You can write the system as "},{"type":"text","text":"d2u/dt2 = A*u","style":{"code":true}},{"type":"text","text":", but most optimized and industry codes don’t form "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" explicitly. Insteady, they compute it via "},{"type":"text","text":"(A*u)_i = (u[i+1]-2*u[i]-u[i-1])/h^2","style":{"code":true}},{"type":"text","text":" in a matrix-free fashion involving a loop over "},{"type":"text","text":"i","style":{"code":true}},{"type":"text","text":". This is slow in both Matlab/Python since it doesn’t call fast linear algebra libraries. It’s fast in C++, Fortran, and Julia though.\n\nAnother example - I have a code for CFD where I compute "},{"type":"text","text":"sum(A.*B,dims=2)","style":{"code":true}},{"type":"text","text":" (e.g., row sums of the Hadamard product of two matrices). "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" can be dense or sparse, and I form "},{"type":"text","text":"B[i,j]","style":{"code":true}},{"type":"text","text":" on the fly to avoid having to store it. The usual way to compute this is to loop over the rows/columns of "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" and accumulate these row sums on the fly. Again, slow in Matlab and Python, fast in Julia.\n\nMoreover, because of multiple dispatch in Julia, I can specialize if "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":" is a sparse matrix and avoid forming "},{"type":"text","text":"B","style":{"code":true}},{"type":"text","text":" on the fly. However, it keeps the same interface, so I don’t need to call different routines for sparse vs dense "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW","reactions":[{"name":"heart","users":["U01SM637QHW","U0179G7FG4F"],"count":2}]},{"client_msg_id":"EB0374F3-8309-43DD-8CAC-8581664FA444","type":"message","text":"I find I can write the kind of code I wished I could write in Matlab.  Multiple dispatch is really neat.   Less work to get better results in Julia. \nExcept for plotting. Sometimes it’s a bit confusing to do more advanced stuff, but getting better, and the results are usually better than Matlab. ","user":"UTRAUNYDA","ts":"1617815877.130700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CqYOq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I find I can write the kind of code I wished I could write in Matlab.  Multiple dispatch is really neat.   Less work to get better results in Julia. \n"},{"type":"text","text":"Except for plotting. Sometimes it’s a bit confusing to do more advanced stuff, but getting better, and the results are usually better than Matlab. "}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW","reactions":[{"name":"point_up","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"ffd28623-8980-493e-8409-20c3ae4bd18e","type":"message","text":"<@U011LUQ182G> but that is as simple as multiplying and adding a couple of numbers with each other. Where does the slow down happen?","user":"U01SM637QHW","ts":"1617819597.135900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2al","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U011LUQ182G"},{"type":"text","text":" but that is as simple as multiplying and adding a couple of numbers with each other. Where does the slow down happen?"}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW"},{"client_msg_id":"806cba88-f09a-4f68-ba31-d7e2037a4baf","type":"message","text":"In Matlab? Overhead in their implementation of for loops + the fact that everything is a matrix (which incurs its own overhead - cheaper to add two double precision numbers compared with two 1x1 double precision matrices).\n\nIn Python, I’m not as sure, but my understanding is the JIT interpreter. The actual operations are fast, but they’re only run after being interpreted and run-time compiled.","user":"U011LUQ182G","ts":"1617819741.136100","team":"T68168MUP","edited":{"user":"U011LUQ182G","ts":"1617819869.000000"},"blocks":[{"type":"rich_text","block_id":"vAaq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In Matlab? Overhead in their implementation of for loops + the fact that everything is a matrix (which incurs its own overhead - cheaper to add two double precision numbers compared with two 1x1 double precision matrices).\n\nIn Python, I’m not as sure, but my understanding is the JIT interpreter. The actual operations are fast, but they’re only run after being interpreted and run-time compiled."}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW","reactions":[{"name":"100","users":["UPUBAM63X"],"count":1}]},{"client_msg_id":"93f55614-2e8f-40e4-be2c-ed45d3707645","type":"message","text":"Thanks everyone. That was very informative","user":"U01SM637QHW","ts":"1617819926.136700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Y8bh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks everyone. That was very informative"}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW","reactions":[{"name":"+1","users":["U011LUQ182G"],"count":1}]},{"client_msg_id":"b21e78c2-67d9-484a-9459-05ab7757b829","type":"message","text":"Basically, Julia learned from Python, Matlab, and R, and fixed the foundational problems in all of them. That said - it's not a copy/clone... It's a new thing that mysteriously feels old. It's fast, concise, flexible, and composable.","user":"UPUBAM63X","ts":"1617819932.136900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Fpddm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Basically, Julia learned from Python, Matlab, and R, and fixed the foundational problems in all of them. That said - it's not a copy/clone... It's a new thing that mysteriously feels old. It's fast, concise, flexible, and composable."}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW"},{"client_msg_id":"797e4f61-ce3a-4a4a-938a-26720d19620b","type":"message","text":"&gt; mysteriously feels old.\n<@UPUBAM63X> that’s just 1-indexing and the ghost of Fortran whispering to you","user":"U011LUQ182G","ts":"1617819967.137200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7QF","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"mysteriously feels old."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n"},{"type":"user","user_id":"UPUBAM63X"},{"type":"text","text":" that’s just 1-indexing and the ghost of Fortran whispering to you"}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW","reactions":[{"name":"rolling_on_the_floor_laughing","users":["UPUBAM63X","U01SM637QHW"],"count":2}]},{"client_msg_id":"b17e6ae3-eddb-4ba3-8bb2-f399df97d7f5","type":"message","text":"I accidentally 1 indexed in a Rust chatroom today it was embarassing. But yea good point.","user":"UPUBAM63X","ts":"1617820002.137500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3BN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I accidentally 1 indexed in a Rust chatroom today it was embarassing. But yea good point."}]}]}],"thread_ts":"1617810438.112000","parent_user_id":"U01SM637QHW","reactions":[{"name":"guess-ill-die-shrug","users":["U011LUQ182G","U0138UTB7A4"],"count":2}]}]