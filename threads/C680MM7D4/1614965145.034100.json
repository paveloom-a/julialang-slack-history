[{"client_msg_id":"7565e6ef-56ec-426b-9019-2a26b8ceef55","type":"message","text":"PyTorch is getting JAX like code transforms: <https://twitter.com/cHHillee/status/1367621541693857794>","user":"UDGT4PM41","ts":"1614965145.034100","team":"T68168MUP","attachments":[{"fallback":"<https://twitter.com/cHHillee|@cHHillee>: Since your transformation takes in Python code and outputs Python source code, they're\n1. Automatically composable with each other\n2. Automatically composable with anything else (like Torchscript).\n3. Able to be dumped out as Python code. \n\nHere's an example (2/4) <https://pbs.twimg.com/media/EvrDp5TVkAAJt7z.png>","ts":1614901359,"author_name":"Horace He","author_link":"https://twitter.com/cHHillee/status/1367621541693857794","author_icon":"https://pbs.twimg.com/profile_images/918522465478987776/4rqdxVqQ_normal.jpg","author_subname":"@cHHillee","text":"Since your transformation takes in Python code and outputs Python source code, they're\n1. Automatically composable with each other\n2. Automatically composable with anything else (like Torchscript).\n3. Able to be dumped out as Python code. \n\nHere's an example (2/4) <https://pbs.twimg.com/media/EvrDp5TVkAAJt7z.png>","service_name":"twitter","service_url":"https://twitter.com/","from_url":"https://twitter.com/cHHillee/status/1367621541693857794","image_url":"https://pbs.twimg.com/media/EvrDp5TVkAAJt7z.png","image_width":811,"image_height":433,"image_bytes":49251,"id":1,"original_url":"https://twitter.com/cHHillee/status/1367621541693857794","footer":"Twitter","footer_icon":"https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"}],"blocks":[{"type":"rich_text","block_id":"=cO9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"PyTorch is getting JAX like code transforms: "},{"type":"link","url":"https://twitter.com/cHHillee/status/1367621541693857794"}]}]}],"thread_ts":"1614965145.034100","reply_count":23,"reply_users_count":5,"latest_reply":"1615599177.359400","reply_users":["UDGT4PM41","U017D621ELC","UMY1LV01G","U011V2YN59N","UN3R6SDDW"],"subscribed":false},{"client_msg_id":"1a0f1b94-a685-48da-b2c2-9f7f92740e40","type":"message","text":"<@UMY1LV01G>","user":"UDGT4PM41","ts":"1614965399.034900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"irr","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UMY1LV01G"}]}]}],"thread_ts":"1614965145.034100","parent_user_id":"UDGT4PM41"},{"client_msg_id":"4ca47b9f-0a78-4c99-985b-65af067fe8dd","type":"message","text":"TF includes dynamic graphs from Pytorch\nPytorch includes functional transforms from JAX\nWhat next?","user":"U017D621ELC","ts":"1614966282.035800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1ilM2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"TF includes dynamic graphs from Pytorch\nPytorch includes functional transforms from JAX\nWhat next?"}]}]}],"thread_ts":"1614965145.034100","parent_user_id":"UDGT4PM41"},{"client_msg_id":"7c3cb641-767f-4c30-84f6-d08d915f4002","type":"message","text":"The convergence between both frameworks was inevitable once PyTorch started eating TF's lunch for research and looking into edge/mobile deployment","user":"UMY1LV01G","ts":"1614966383.036000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MCRdn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The convergence between both frameworks was inevitable once PyTorch started eating TF's lunch for research and looking into edge/mobile deployment"}]}]}],"thread_ts":"1614965145.034100","parent_user_id":"UDGT4PM41"},{"client_msg_id":"8453bd4f-519a-483f-bb2e-9f55a080ff8a","type":"message","text":"I'm not sure how I feel about the new graph framework. It looks nice, but does feel a bit \"bolted on\" and adds to the kitchen sink","user":"UMY1LV01G","ts":"1614966494.036200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hV8I3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not sure how I feel about the new graph framework. It looks nice, but does feel a bit \"bolted on\" and adds to the kitchen sink"}]}]}],"thread_ts":"1614965145.034100","parent_user_id":"UDGT4PM41","reactions":[{"name":"confused","users":["U017D621ELC","UKG4WF8PJ"],"count":2}]},{"client_msg_id":"ef8091a7-1f2a-4dc1-a7ad-a155c0a3bb47","type":"message","text":"JAX definitely has the cleanest conceptual model and least amount of API bloat. I guess we'll see if their strategy of outsourcing higher level libraries to the community pays off, or if the core library accumulates more and more orthogonal features.","user":"UMY1LV01G","ts":"1614966678.036700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w5IL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"JAX definitely has the cleanest conceptual model and least amount of API bloat. I guess we'll see if their strategy of outsourcing higher level libraries to the community pays off, or if the core library accumulates more and more orthogonal features."}]}]}],"thread_ts":"1614965145.034100","parent_user_id":"UDGT4PM41","reactions":[{"name":"heart","users":["U017D621ELC","UKG4WF8PJ"],"count":2}]},{"client_msg_id":"b0217498-953e-4907-b55c-ae66a596db7b","type":"message","text":"PyTorch started off small, after all. Though in fairness they never claimed to be just a library like JAX does","user":"UMY1LV01G","ts":"1614966722.036900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"b+A","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"PyTorch started off small, after all. Though in fairness they never claimed to be just a library like JAX does"}]}]}],"thread_ts":"1614965145.034100","parent_user_id":"UDGT4PM41"},{"client_msg_id":"d373c6a9-1830-4e64-be56-339345b913a4","type":"message","text":"I hurts how much money and effort are being put into making python fast.","user":"U011V2YN59N","ts":"1614973220.041300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zcc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I hurts how much money and effort are being put into making python fast."}]}]}],"thread_ts":"1614965145.034100","parent_user_id":"UDGT4PM41","reactions":[{"name":"100","users":["UDGT4PM41","U93BUBZP0"],"count":2},{"name":"disappointed_relieved","users":["U017D621ELC"],"count":1}]},{"client_msg_id":"85d12e6a-17c4-4b1f-9f26-6b0e9a73b5e8","type":"message","text":"when like python is very unpleasant to write","user":"U011V2YN59N","ts":"1614973389.042100","team":"T68168MUP","edited":{"user":"U011V2YN59N","ts":"1614973396.000000"},"blocks":[{"type":"rich_text","block_id":"6mXQt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"when like python is very unpleasant to write"}]}]}],"thread_ts":"1614965145.034100","parent_user_id":"UDGT4PM41","reactions":[{"name":"+1","users":["U93BUBZP0"],"count":1}]},{"client_msg_id":"c4c4f3b0-005d-43ec-bc2c-8e4f764b10a8","type":"message","text":"<@UMY1LV01G> Definitely agree that Jax the least amount of API float - not sure if I agree that it has the cleanest conceptual model :stuck_out_tongue: Or well, I'd argue that perhaps it's the cleanest, but that doesn't make it the easiest to reason about.\n\nI do sympathize with your concerns about FX haha - in some sense it's 100% bolted on. PyTorch was never meant to have a dynamic graph representation.\n\nEssentially, the hope is that there are a subset of programs that users want function transformations for, where they're willing to deal with the limitations that come from trying to acquire a graph in Python.","user":"UN3R6SDDW","ts":"1615438766.268100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7Fg","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UMY1LV01G"},{"type":"text","text":" Definitely agree that Jax the least amount of API float - not sure if I agree that it has the cleanest conceptual model "},{"type":"emoji","name":"stuck_out_tongue"},{"type":"text","text":" Or well, I'd argue that perhaps it's the cleanest, but that doesn't make it the easiest to reason about.\n\nI do sympathize with your concerns about FX haha - in some sense it's 100% bolted on. PyTorch was never meant to have a dynamic graph representation.\n\nEssentially, the hope is that there are a subset of programs that users want function transformations for, where they're willing to deal with the limitations that come from trying to acquire a graph in Python."}]}]}],"thread_ts":"1614965145.034100","parent_user_id":"UDGT4PM41"},{"client_msg_id":"0f0c80b4-6670-4a1d-95a3-eddc47fd182a","type":"message","text":"Hi Horace :)\nFWIW I do think fx is a worthwhile addition and will eliminate whole class of nasty hacks people have been doing in the name of getting good performance out of network primitives. I think my point about JAX would've been better phrased as \"fewer moving parts\" since Torch's autograd is pretty dang simple conceptually (while running circles around e.g. TF when it comes to resource usage in practice). What I hope is that we're seeing a breakdown of the old \"private island\" model of incompatible library ecosystems with these newer libraries. Julia obviously has the benefit of hindsight and not being the first mover in that respect.","user":"UMY1LV01G","ts":"1615441620.269100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RPbj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi Horace :)\nFWIW I do think fx is a worthwhile addition and will eliminate whole class of nasty hacks people have been doing in the name of getting good performance out of network primitives. I think my point about JAX would've been better phrased as \"fewer moving parts\" since Torch's autograd is pretty dang simple conceptually (while running circles around e.g. TF when it comes to resource usage in practice). What I hope is that we're seeing a breakdown of the old \"private island\" model of incompatible library ecosystems with these newer libraries. Julia obviously has the benefit of hindsight and not being the first mover in that respect."}]}]}],"thread_ts":"1614965145.034100","parent_user_id":"UDGT4PM41"},{"client_msg_id":"1a9830c8-f154-4ca8-9573-3e90ee60c6e4","type":"message","text":"<@UMY1LV01G> well, I'm not sure any of these newer libraries really resolve the issue of \"private island\" (unless you mean that different transforms can compose with each other).\n\nI definitely think Julia has a significant advantage here - no disagreements about that :stuck_out_tongue: I think there's a lot of really cool things happening on Julia, which is why I lurk on this slack sometimes.","user":"UN3R6SDDW","ts":"1615513076.325000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bJj4","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UMY1LV01G"},{"type":"text","text":" well, I'm not sure any of these newer libraries really resolve the issue of \"private island\" (unless you mean that different transforms can compose with each other).\n\nI definitely think Julia has a significant advantage here - no disagreements about that "},{"type":"emoji","name":"stuck_out_tongue"},{"type":"text","text":" I think there's a lot of really cool things happening on Julia, which is why I lurk on this slack sometimes."}]}]}],"thread_ts":"1614965145.034100","parent_user_id":"UDGT4PM41"},{"client_msg_id":"5989ddb5-b245-4d08-80b4-b695cfd24083","type":"message","text":"<@UN3R6SDDW> Maybe \"Julia for Torch\" can happen without Jeff Bezanson working at FB? :joy:","user":"UDGT4PM41","ts":"1615517424.326300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JU0S","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UN3R6SDDW"},{"type":"text","text":" Maybe \"Julia for Torch\" can happen without Jeff Bezanson working at FB? "},{"type":"emoji","name":"joy"}]}]}],"thread_ts":"1614965145.034100","parent_user_id":"UDGT4PM41"},{"client_msg_id":"6818f1b0-c6b5-4e11-94a1-ea6ecca25d5a","type":"message","text":"<@UDGT4PM41> what would you want out of \"Julia for Torch\"?","user":"UN3R6SDDW","ts":"1615517646.326500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2Ir","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UDGT4PM41"},{"type":"text","text":" what would you want out of \"Julia for Torch\"?"}]}]}],"thread_ts":"1614965145.034100","parent_user_id":"UDGT4PM41"},{"client_msg_id":"5efa4dfa-0047-48e7-8fa9-519b9e819fe0","type":"message","text":"With where Julia's at now, it would take a tiny tiny fraction of the money Google put into the s4tf ship to get something better. We can get you in touch with Jeremy Howard, Who's  been mulling  Julia instead of swift as a next gen FastAI language (Swift is pretty much dead in that regard now). Yann Was also discussing some interest In Julia on twitter","user":"UDGT4PM41","ts":"1615517675.326700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6b0U","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"With where Julia's at now, it would take a tiny tiny fraction of the money Google put into the s4tf ship to get something better. We can get you in touch with Jeremy Howard, Who's  been mulling  Julia instead of swift as a next gen FastAI language (Swift is pretty much dead in that regard now). Yann Was also discussing some interest In Julia on twitter"}]}]}],"thread_ts":"1614965145.034100","parent_user_id":"UDGT4PM41"},{"client_msg_id":"3729b863-70b2-4552-9a2a-03d7ff0f7a6a","type":"message","text":"<@UN3R6SDDW> Facebook support to get Julia to the point where it can be used for internal use and production, which would in turn benefit the Julia community and benefit Facebook by reducing programming overhead","user":"UDGT4PM41","ts":"1615517757.326900","team":"T68168MUP","edited":{"user":"UDGT4PM41","ts":"1615517799.000000"},"blocks":[{"type":"rich_text","block_id":"VSry","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UN3R6SDDW"},{"type":"text","text":" Facebook support to get Julia to the point where it can be used for internal use and production, which would in turn benefit the Julia community and benefit Facebook by reducing programming overhead"}]}]}],"thread_ts":"1614965145.034100","parent_user_id":"UDGT4PM41"},{"client_msg_id":"aa88e2f3-41eb-4434-80c1-ddc85fe9e622","type":"message","text":"Can write vendor agnostic GPU kernels in pure Julia, manipulate large graphs for GNNs, and we're on the verge of small zero runtime static binaries, all done by hacking normal compiler hooks. So can deploy to mobile and WASM","user":"UDGT4PM41","ts":"1615517897.327200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Kj1E+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can write vendor agnostic GPU kernels in pure Julia, manipulate large graphs for GNNs, and we're on the verge of small zero runtime static binaries, all done by hacking normal compiler hooks. So can deploy to mobile and WASM"}]}]}],"thread_ts":"1614965145.034100","parent_user_id":"UDGT4PM41"},{"client_msg_id":"c732c356-803c-4178-88a8-fed5c1a78c25","type":"message","text":"And whatever weird differentiable programming with weird datastructure usecases will pop up in the future. No islands so no need to rewrite scipy or diffeqs, or Pymc3 to work together in and with ML models. One array type system","user":"UDGT4PM41","ts":"1615518001.327400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"o/EQU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And whatever weird differentiable programming with weird datastructure usecases will pop up in the future. No islands so no need to rewrite scipy or diffeqs, or Pymc3 to work together in and with ML models. One array type system"}]}]}],"thread_ts":"1614965145.034100","parent_user_id":"UDGT4PM41"},{"client_msg_id":"cb06fc82-adae-42b5-92e2-e29c15ec68bc","type":"message","text":"<https://github.com/JuliaFolds/FLoops.jl> composable transuders with loop frontend that run distributed, GPU, CPU. Einsum + macro that runs does CPU codegen faster than openblas <https://github.com/mcabbott/Tullio.jl> using Julia's native vectorization capabilities. The possibilities and ecosystem has many many gems of which people are unaware.","user":"UDGT4PM41","ts":"1615518165.327600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Kbcx","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaFolds/FLoops.jl"},{"type":"text","text":" composable transuders with loop frontend that run distributed, GPU, CPU. Einsum + macro that runs does CPU codegen faster than openblas "},{"type":"link","url":"https://github.com/mcabbott/Tullio.jl"},{"type":"text","text":" using Julia's native vectorization capabilities. The possibilities and ecosystem has many many gems of which people are unaware."}]}]}],"thread_ts":"1614965145.034100","parent_user_id":"UDGT4PM41"},{"client_msg_id":"9bb412fe-2332-4ed8-a85a-f14568521116","type":"message","text":"Re Julia's popularity: It's already doubling every 18 months and I think it's ripe for a phase shift. A FAANG taking notice might trigger that","user":"UDGT4PM41","ts":"1615518253.327800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Rzz5H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Re Julia's popularity: It's already doubling every 18 months and I think it's ripe for a phase shift. A FAANG taking notice might trigger that"}]}]}],"thread_ts":"1614965145.034100","parent_user_id":"UDGT4PM41"},{"client_msg_id":"a0908c14-36ed-46b2-8773-c82560c2082d","type":"message","text":"The ecosystem is large, so instead of listing every conceivable package you might be interested in (DS, ML, Stats, Backend agnostic 3d plotting etc( and there's even a mature web MVC framework), if you have any specific areas of concern I can help with pointers","user":"UDGT4PM41","ts":"1615518503.328000","team":"T68168MUP","edited":{"user":"UDGT4PM41","ts":"1615518531.000000"},"blocks":[{"type":"rich_text","block_id":"r=BoB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The ecosystem is large, so instead of listing every conceivable package you might be interested in (DS, ML, Stats, Backend agnostic 3d plotting etc( and there's even a mature web MVC framework), if you have any specific areas of concern I can help with pointers"}]}]}],"thread_ts":"1614965145.034100","parent_user_id":"UDGT4PM41"},{"client_msg_id":"21f52ebe-146f-4d74-a8e8-79095a005042","type":"message","text":"Then there's the emergent combinatorial explosion of packages that emerge out of these composable pieces, and so on up the tower of abstraction. Here's some amazing accidental composability. With just a little bit more of a push to accelerate the process , there could be a huge output: <https://twitter.com/KenoFischer/status/1369853531423993858>\n\nAnother example, homomorphic encrypted ML in flux.jl. It's generic so no need for any sort of new package with additional  C++ Tensorflow spaghetti , just reusing code with new types of arrays: <https://juliacomputing.com/blog/2019/11/encrypted-machine-learning/> Possibilities are endless","user":"UDGT4PM41","ts":"1615518879.328300","team":"T68168MUP","edited":{"user":"UDGT4PM41","ts":"1615518935.000000"},"attachments":[{"fallback":"<https://twitter.com/KenoFischer|@KenoFischer>: I should be pretty used to #julialang's extreme composability by now, but c'mon, this just just cool! Literally no code changes required in either package - first thing I tried. <https://pbs.twimg.com/media/EwKyDrfXEAAcDTt.png>","ts":1615433507,"author_name":"Keno Fischer","author_link":"https://twitter.com/KenoFischer/status/1369853531423993858","author_icon":"https://pbs.twimg.com/profile_images/1133949652234047489/_J3gif9e_normal.png","author_subname":"@KenoFischer","text":"I should be pretty used to #julialang's extreme composability by now, but c'mon, this just just cool! Literally no code changes required in either package - first thing I tried. <https://pbs.twimg.com/media/EwKyDrfXEAAcDTt.png>","service_name":"twitter","service_url":"https://twitter.com/","from_url":"https://twitter.com/KenoFischer/status/1369853531423993858","image_url":"https://pbs.twimg.com/media/EwKyDrfXEAAcDTt.png","image_width":339,"image_height":231,"image_bytes":22032,"id":1,"original_url":"https://twitter.com/KenoFischer/status/1369853531423993858","footer":"Twitter","footer_icon":"https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"}],"blocks":[{"type":"rich_text","block_id":"fjI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Then there's the emergent combinatorial explosion of packages that emerge out of these composable pieces, and so on up the tower of abstraction. Here's some amazing accidental composability. With just a little bit more of a push to accelerate the process , there could be a huge output: "},{"type":"link","url":"https://twitter.com/KenoFischer/status/1369853531423993858"},{"type":"text","text":"\n\nAnother example, homomorphic encrypted ML in flux.jl. It's generic so no need for any sort of new package with additional  C++ Tensorflow spaghetti , just reusing code with new types of arrays: "},{"type":"link","url":"https://juliacomputing.com/blog/2019/11/encrypted-machine-learning/"},{"type":"text","text":" Possibilities are endless"}]}]}],"thread_ts":"1614965145.034100","parent_user_id":"UDGT4PM41"},{"client_msg_id":"63fc42de-369a-4a61-8c1a-641f804e32a5","type":"message","text":"One last thing. Either a  FB or FastAI adoption of Julia would create a near instant explosion in use and popularity. People are just unfamiliar with just how much better Julia is (It's just like Numba, right??!) but also concerned about  niche status (and admittedly some rough edges for more \"boring\" deep learning usecases\", . Without those  restraints, the community will be huge very fast. In the meantime, without that, will have to wait for the ML stack hit an organic  inflection point, but I think that will eventually  happen, even outside ML. In six months to a year how will people react when they can deploy a fast multithreaded web app using task parallelism and diff programming to a .so?","user":"UDGT4PM41","ts":"1615519955.328900","team":"T68168MUP","edited":{"user":"UDGT4PM41","ts":"1615520151.000000"},"blocks":[{"type":"rich_text","block_id":"fjh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"One last thing. Either a  FB or FastAI adoption of Julia would create a near instant explosion in use and popularity. People are just unfamiliar with just how much better Julia is (It's just like Numba, right??!) but also concerned about  niche status (and admittedly some rough edges for more \"boring\" deep learning usecases\", . Without those  restraints, the community will be huge very fast. In the meantime, without that, will have to wait for the ML stack hit an organic  inflection point, but I think that will eventually  happen, even outside ML. In six months to a year how will people react when they can deploy a fast multithreaded web app using task parallelism and diff programming to a .so?"}]}]}],"thread_ts":"1614965145.034100","parent_user_id":"UDGT4PM41","reactions":[{"name":"juliaheartpulse","users":["U017D621ELC"],"count":1}]},{"client_msg_id":"9a2d1290-7a89-4208-af04-c3431126d329","type":"message","text":"<@UDGT4PM41> I'm with you about Julia being very cool, and have seen most of the stuff you mentioned - although thanks for the sales pitch anyways :stuck_out_tongue: However, most of this just seems like general \"it would be really nice if Facebook put funding into Julia\". I'm not saying that's not possible, but it would probably be an easier transition if there was some nice way for Julia to provide value to the PyTorch ecosystem now.","user":"UN3R6SDDW","ts":"1615599177.359400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L0sN","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UDGT4PM41"},{"type":"text","text":" I'm with you about Julia being very cool, and have seen most of the stuff you mentioned - although thanks for the sales pitch anyways "},{"type":"emoji","name":"stuck_out_tongue"},{"type":"text","text":" However, most of this just seems like general \"it would be really nice if Facebook put funding into Julia\". I'm not saying that's not possible, but it would probably be an easier transition if there was some nice way for Julia to provide value to the PyTorch ecosystem now."}]}]}],"thread_ts":"1614965145.034100","parent_user_id":"UDGT4PM41"}]