[{"client_msg_id":"5f28def0-33d2-4018-9d39-42961104bfff","type":"message","text":"Does Julia have an equivalent to Java's `CountDownLatch`? Maybe there is a user-created package I have missed in my search?","user":"U01537M2E9W","ts":"1615940858.055800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/J6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does Julia have an equivalent to Java's "},{"type":"text","text":"CountDownLatch","style":{"code":true}},{"type":"text","text":"? Maybe there is a user-created package I have missed in my search?"}]}]}],"thread_ts":"1615940858.055800","reply_count":15,"reply_users_count":4,"latest_reply":"1616055880.125200","reply_users":["U8MPCDJAY","U01537M2E9W","UH24GRBLL","U6A936746"],"is_locked":false,"subscribed":false},{"client_msg_id":"7fe5cabb-ffd2-4cb1-8d94-07813e7193fe","type":"message","text":"I’m not aware of anything, but perhaps you could create a `finished` channel, and each thread push to that?","user":"U8MPCDJAY","ts":"1615941833.056400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gaf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’m not aware of anything, but perhaps you could create a "},{"type":"text","text":"finished","style":{"code":true}},{"type":"text","text":" channel, and each thread push to that?"}]}]}],"thread_ts":"1615940858.055800","parent_user_id":"U01537M2E9W"},{"client_msg_id":"cf68b17f-a7c0-4035-ae4a-141e545604f5","type":"message","text":"or an array of `Event` of length `ntasks` which you notify","user":"U8MPCDJAY","ts":"1615941895.056600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Jb+e4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or an array of "},{"type":"text","text":"Event","style":{"code":true}},{"type":"text","text":" of length "},{"type":"text","text":"ntasks","style":{"code":true}},{"type":"text","text":" which you notify"}]}]}],"thread_ts":"1615940858.055800","parent_user_id":"U01537M2E9W"},{"client_msg_id":"c50f0db8-2b78-4570-8a17-61e20403b57c","type":"message","text":"Sure, I could make something myself... and call it `CountDownLatch` :wink:","user":"U01537M2E9W","ts":"1615944554.057100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IvmPJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sure, I could make something myself... and call it "},{"type":"text","text":"CountDownLatch","style":{"code":true}},{"type":"text","text":" "},{"type":"emoji","name":"wink"}]}]}],"thread_ts":"1615940858.055800","parent_user_id":"U01537M2E9W"},{"client_msg_id":"c0f0686e-d93e-4ad1-90cb-a73eba2ddb3f","type":"message","text":"It's best implemented in the runtime, though","user":"U01537M2E9W","ts":"1615944597.057300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hjO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's best implemented in the runtime, though"}]}]}],"thread_ts":"1615940858.055800","parent_user_id":"U01537M2E9W"},{"client_msg_id":"f202bef4-dd2f-4493-8847-ffe4100a11c5","type":"message","text":"What is interesting, though, is that you can very easily `ccall`  into Julia's runtime... not sure how evil that is","user":"U01537M2E9W","ts":"1615944978.057500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h6xPH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What is interesting, though, is that you can very easily "},{"type":"text","text":"ccall","style":{"code":true}},{"type":"text","text":"  into Julia's runtime... not sure how evil that is"}]}]}],"thread_ts":"1615940858.055800","parent_user_id":"U01537M2E9W"},{"client_msg_id":"56d95d37-cab3-4706-b6a6-545e98d92334","type":"message","text":"Why is it best implemented in the runtime?","user":"UH24GRBLL","ts":"1615965724.060300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gxO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Why is it best implemented in the runtime?"}]}]}],"thread_ts":"1615940858.055800","parent_user_id":"U01537M2E9W","reactions":[{"name":"point_up","users":["U6A936746"],"count":1}]},{"client_msg_id":"5fccd58a-a396-402c-8450-efc573b7dfb1","type":"message","text":"as far as I can tell, `CountDownLatch` is just a thin wrapper around a lock with a counter attached and self-release mechanism once the counter reaches 0","user":"UH24GRBLL","ts":"1615965778.060500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wZN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"as far as I can tell, "},{"type":"text","text":"CountDownLatch","style":{"code":true}},{"type":"text","text":" is just a thin wrapper around a lock with a counter attached and self-release mechanism once the counter reaches 0"}]}]}],"thread_ts":"1615940858.055800","parent_user_id":"U01537M2E9W"},{"client_msg_id":"099994d3-b2bb-4c89-a331-b87f408eb3cc","type":"message","text":"It also sounds to me like a wrapper around a lock + a counter + a condition, or something like that.\n\nbut if not:\nI am in general dubious about claims that one should something special inside the task/threading machinery to be like Java. Java’s threading model is historically pathological.\nLike until relatively recently double checked locking didn’t work in Java.\nand afaict LLVM’s unordered atomic instructions are specifically are for java.\n<https://llvm.org/docs/Atomics.html>\n\nbut idk, I am not an expert on this. Java’s threading scares me.\n(Less now though, since double checked locking apparently works now)","user":"U6A936746","ts":"1615998238.074700","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1615998267.000000"},"blocks":[{"type":"rich_text","block_id":"=o9Ph","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It also sounds to me like a wrapper around a lock + a counter + a condition, or something like that.\n\nbut if not:\nI am in general dubious about claims that one should something special inside the task/threading machinery to be like Java. Java’s threading model is historically pathological.\nLike until relatively recently double checked locking didn’t work in Java.\nand afaict LLVM’s unordered atomic instructions are specifically are for java.\n"},{"type":"link","url":"https://llvm.org/docs/Atomics.html"},{"type":"text","text":"\n\nbut idk, I am not an expert on this. Java’s threading scares me.\n(Less now though, since double checked locking apparently works now)"}]}]}],"thread_ts":"1615940858.055800","parent_user_id":"U01537M2E9W"},{"client_msg_id":"7b6b8667-9985-438c-84fd-63d0356e959b","type":"message","text":"Double-checked locking is never completely safe (at least in Java).\n\nAnyway, I had a closer look at how it could be implemented in Julia, and actually enough is exposed that it can be implemented quite simply. I have done so <https://github.com/Octogonapus/CountDownLatches.jl>","user":"U01537M2E9W","ts":"1616005006.090000","team":"T68168MUP","edited":{"user":"U01537M2E9W","ts":"1616005161.000000"},"blocks":[{"type":"rich_text","block_id":"Ngz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Double-checked locking is never completely safe (at least in Java).\n\nAnyway, I had a closer look at how it could be implemented in Julia, and actually enough is exposed that it can be implemented quite simply. I have done so "},{"type":"link","url":"https://github.com/Octogonapus/CountDownLatches.jl"}]}]}],"thread_ts":"1615940858.055800","parent_user_id":"U01537M2E9W"},{"client_msg_id":"8827ebac-fce6-45ed-a4f0-5d0e5b18f7ab","type":"message","text":"&gt;  Java’s threading model is historically pathological\nI am not sure what you mean.","user":"U01537M2E9W","ts":"1616005229.091100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"39GEf","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":" Java’s threading model is historically pathological"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I am not sure what you mean."}]}]}],"thread_ts":"1615940858.055800","parent_user_id":"U01537M2E9W"},{"client_msg_id":"d5810dd4-ed3f-4b16-8a9e-edf7fd0f92d2","type":"message","text":"&gt;  In <https://en.wikipedia.org/wiki/Mathematics|mathematics>, a *pathological* object is one which possesses deviant, irregular or counterintuitive property, in such a way that distinguishes it from what is conceived as a typical object in the same category.\n<https://en.wikipedia.org/wiki/Pathological_(mathematics)>\n\nFor example: double checked locking works in every other programming language except for Java.\nJava","user":"U6A936746","ts":"1616005512.091500","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1616005520.000000"},"blocks":[{"type":"rich_text","block_id":"3TK","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":" In "},{"type":"link","url":"https://en.wikipedia.org/wiki/Mathematics","text":"mathematics"},{"type":"text","text":", a "},{"type":"text","text":"pathological","style":{"bold":true}},{"type":"text","text":" object is one which possesses deviant, irregular or counterintuitive property, in such a way that distinguishes it from what is conceived as a typical object in the same category."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n"},{"type":"link","url":"https://en.wikipedia.org/wiki/Pathological_(mathematics)"},{"type":"text","text":"\n\nFor example: double checked locking works in every other programming language except for Java.\nJava"}]}]}],"thread_ts":"1615940858.055800","parent_user_id":"U01537M2E9W"},{"client_msg_id":"7541024e-b80f-4b32-bdb7-6e6402f1a07a","type":"message","text":"I suppose I should use more precise language. In Java, if you write your double-checked lock in such a way that the pointer you return (and write into) is `volatile` then the JVM will insert a memory barrier such that the construction of the class pointed to is guaranteed to be complete before the assignment to that `volatile` pointer is visible to other threads. People just forget to do that. The same goes for C++. Without the right acquire and release fences, double-checked locking is broken in C++ as well.\n\nIn Java, you can just avoid the pattern completely, though (if you are trying to implement a lazy singleton). Class initialization is lazy; just use it to your advantage.","user":"U01537M2E9W","ts":"1616005942.093300","team":"T68168MUP","edited":{"user":"U01537M2E9W","ts":"1616006040.000000"},"blocks":[{"type":"rich_text","block_id":"1CM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I suppose I should use more precise language. In Java, if you write your double-checked lock in such a way that the pointer you return (and write into) is "},{"type":"text","text":"volatile","style":{"code":true}},{"type":"text","text":" then the JVM will insert a memory barrier such that the construction of the class pointed to is guaranteed to be complete before the assignment to that "},{"type":"text","text":"volatile","style":{"code":true}},{"type":"text","text":" pointer is visible to other threads. People just forget to do that. The same goes for C++. Without the right acquire and release fences, double-checked locking is broken in C++ as well.\n\nIn Java, you can just avoid the pattern completely, though (if you are trying to implement a lazy singleton). Class initialization is lazy; just use it to your advantage."}]}]}],"thread_ts":"1615940858.055800","parent_user_id":"U01537M2E9W"},{"client_msg_id":"af740528-b203-4690-b616-a3858fd6b039","type":"message","text":"Java definitely does lack the memory fences other languages have, though (e.g. acquire and release).","user":"U01537M2E9W","ts":"1616006206.093800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rZDh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Java definitely does lack the memory fences other languages have, though (e.g. acquire and release)."}]}]}],"thread_ts":"1615940858.055800","parent_user_id":"U01537M2E9W"},{"client_msg_id":"526460f8-3415-4986-8684-b03e4239d54f","type":"message","text":"java does memory semantics through `final` and `volatile`","user":"UH24GRBLL","ts":"1616055845.125000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZFTi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"java does memory semantics through "},{"type":"text","text":"final","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"volatile","style":{"code":true}}]}]}],"thread_ts":"1615940858.055800","parent_user_id":"U01537M2E9W"},{"client_msg_id":"83d8425e-dedd-409e-9e81-5a07f83b135e","type":"message","text":"for a summary of how memory semantics may look in the future, check out <https://docs.google.com/document/d/e/2PACX-1vT7Ibthj9WyM8s5bcQbiKsVK6MtvzqmnPFMy-bcjZLlbqv55a0_sTJ99AkbvPIZk3t7MbhZ57NzaIzC/pub> and the issues/PRs linked within","user":"UH24GRBLL","ts":"1616055880.125200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5+sL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"for a summary of how memory semantics may look in the future, check out "},{"type":"link","url":"https://docs.google.com/document/d/e/2PACX-1vT7Ibthj9WyM8s5bcQbiKsVK6MtvzqmnPFMy-bcjZLlbqv55a0_sTJ99AkbvPIZk3t7MbhZ57NzaIzC/pub"},{"type":"text","text":" and the issues/PRs linked within"}]}]}],"thread_ts":"1615940858.055800","parent_user_id":"U01537M2E9W"}]