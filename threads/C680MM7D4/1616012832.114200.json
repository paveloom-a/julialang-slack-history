[{"client_msg_id":"23f4cc2a-7279-47ee-ace4-7efba0930695","type":"message","text":"So I'm writing lecture notes for a course and want to include a section on debugging scientific code. Eg generic advice like start simple, check against known results, debug each part separately, inspect intermediary quantities, make assertions, etc. Anybody knows if this is explained well somewhere? Or is there no shortcut to learning this the hard way?","user":"UMDEUKM29","ts":"1616012832.114200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2e+Ak","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So I'm writing lecture notes for a course and want to include a section on debugging scientific code. Eg generic advice like start simple, check against known results, debug each part separately, inspect intermediary quantities, make assertions, etc. Anybody knows if this is explained well somewhere? Or is there no shortcut to learning this the hard way?"}]}]}],"thread_ts":"1616012832.114200","reply_count":5,"reply_users_count":5,"latest_reply":"1616048938.124200","reply_users":["UPUBAM63X","ULMSM9MAL","U68QW0PUZ","U0179G7FG4F","UMDEUKM29"],"subscribed":false},{"client_msg_id":"6ecea5ac-b82d-49a7-be69-1b4ed2d2d0c9","type":"message","text":"So my advice is, the best debugging happens by building smartly.\n\nMake small functions that are easily parsable. Put unit tests on them as you make them, depending on the criticality, test all edge cases you can think of.\n\nDo not write a full algorithm in one shot. Build up too it(lots of scientific algo's build from simpler steps). So start small, add complexity, test, add complexity, test, etc.","user":"UPUBAM63X","ts":"1616013278.115400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g9cBA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So my advice is, the best debugging happens by building smartly.\n\nMake small functions that are easily parsable. Put unit tests on them as you make them, depending on the criticality, test all edge cases you can think of.\n\nDo not write a full algorithm in one shot. Build up too it(lots of scientific algo's build from simpler steps). So start small, add complexity, test, add complexity, test, etc."}]}]}],"thread_ts":"1616012832.114200","parent_user_id":"UMDEUKM29","reactions":[{"name":"+1","users":["U0138UTB7A4","U0179G7FG4F"],"count":2},{"name":"this","users":["U0138UTB7A4"],"count":1}]},{"client_msg_id":"93b55123-aa83-41ec-92d9-a519ac8567e7","type":"message","text":"As an addition to that (depending on the language):\nGet very familiar with a Debugger of your choice and use it proactively on pieces of core logic. I find myself noticing potential bugs and edge cases I might have forgotten about by watching the variables change / control flow etc","user":"ULMSM9MAL","ts":"1616019940.117800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UrcO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"As an addition to that (depending on the language):\nGet very familiar with a Debugger of your choice and use it proactively on pieces of core logic. I find myself noticing potential bugs and edge cases I might have forgotten about by watching the variables change / control flow etc"}]}]}],"thread_ts":"1616012832.114200","parent_user_id":"UMDEUKM29"},{"client_msg_id":"8153539c-559f-4cdb-a776-3ce332171b7d","type":"message","text":"also .. identify \"edge cases\" test them","user":"U68QW0PUZ","ts":"1616032057.122400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VUi1z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"also .. identify \"edge cases\" test them"}]}]}],"thread_ts":"1616012832.114200","parent_user_id":"UMDEUKM29"},{"client_msg_id":"63be20fe-e06f-447b-8401-b81bb7a2c505","type":"message","text":"Really basic, but important one that I've seen a lot of people mess up: *Don't change your data*. It's really common for students new to data science to do a project by sequentially making changes to their data-source which works great until something is wrong and you have no way to debug what happened. Instead, write functions that take in data and return data, so each change gets piped into the next, and you actually have reproducible work","user":"U0179G7FG4F","ts":"1616043117.123200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"njOB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Really basic, but important one that I've seen a lot of people mess up: "},{"type":"text","text":"Don't change your data","style":{"bold":true}},{"type":"text","text":". It's really common for students new to data science to do a project by sequentially making changes to their data-source which works great until something is wrong and you have no way to debug what happened. Instead, write functions that take in data and return data, so each change gets piped into the next, and you actually have reproducible work"}]}]}],"thread_ts":"1616012832.114200","parent_user_id":"UMDEUKM29"},{"client_msg_id":"e1f26a14-2ee8-401e-ace0-65420cc10da1","type":"message","text":"Right, but is any of that written down comprehensively somewhere?","user":"UMDEUKM29","ts":"1616048938.124200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Uw/u","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Right, but is any of that written down comprehensively somewhere?"}]}]}],"thread_ts":"1616012832.114200","parent_user_id":"UMDEUKM29"}]