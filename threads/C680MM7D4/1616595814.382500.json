[{"client_msg_id":"c38b82a8-6fe8-46e9-ae35-b5083630b5a7","type":"message","text":"Is there a name for the relationship of the negation of  `&amp;&amp;` and `||` as `!(x &amp;&amp; y) = !x || !y`\nin contrast to `\\xor` &lt;-&gt; `\\xnor`","user":"U7K185TUN","ts":"1616595814.382500","team":"T68168MUP","edited":{"user":"U7K185TUN","ts":"1616597155.000000"},"blocks":[{"type":"rich_text","block_id":"D=E1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a name for the relationship of the negation of  "},{"type":"text","text":"&&","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"||","style":{"code":true}},{"type":"text","text":" as "},{"type":"text","text":"!(x && y) = !x || !y","style":{"code":true}},{"type":"text","text":"\nin contrast to "},{"type":"text","text":"\\xor","style":{"code":true}},{"type":"text","text":" <-> "},{"type":"text","text":"\\xnor","style":{"code":true}}]}]}],"thread_ts":"1616595814.382500","reply_count":33,"reply_users_count":8,"latest_reply":"1616634483.419900","reply_users":["UM30MT6RF","U7K185TUN","UPSSPPBFV","UC81ESVH6","U0138UTB7A4","UH24GRBLL","U67G3QRJM","U017WSQVCBG"],"is_locked":false,"subscribed":false},{"client_msg_id":"f8e805c7-4825-4ffc-8a57-a0481c4825ed","type":"message","text":"It's De Morgan's law","user":"UM30MT6RF","ts":"1616595913.382600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KI4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's De Morgan's law"}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN"},{"client_msg_id":"594c0294-133b-4a4a-b510-30d3e1930ef2","type":"message","text":"<https://en.wikipedia.org/wiki/De_Morgan%27s_laws>","user":"UM30MT6RF","ts":"1616595989.382800","team":"T68168MUP","attachments":[{"image_url":"https://upload.wikimedia.org/wikipedia/commons/thumb/0/06/Demorganlaws.svg/1200px-Demorganlaws.svg.png","image_width":1200,"image_height":1600,"image_bytes":67916,"title":"De Morgan's laws","title_link":"https://en.wikipedia.org/wiki/De_Morgan%27s_laws","from_url":"https://en.wikipedia.org/wiki/De_Morgan%27s_laws","author_name":"Wikipedia","author_link":"https://en.wikipedia.org/","text":"In propositional logic and Boolean algebra, De Morgan's laws are a pair of transformation rules that are both valid rules of inference. They are named after Augustus De Morgan, a 19th-century British mathematician. The rules allow the expression of conjunctions and disjunctions purely in terms of each other via negation.\nThe rules can be expressed in English as:\n\nthe negation of a disjunction is the conjunction of the negations\nthe negation of a conjunction is the disjunction of the negationsor\n\nthe complement of the union of two sets is the same as the intersection of their complements\nthe complement of the intersection of two sets is the same as the union of their complementsor\n\nnot (A or B) = not A and not B\nnot (A and B) = not A or not B.In set theory and Boolean algebra, these are written formally as\n\n  \n    \n      \n        \n          \n            \n              \n                \n                  \n                    \n                      A\n                      ∪\n                      B\n                    \n                    ¯\n                  \n                \n              \n              \n                \n                =\n                \n                  \n                    A\n                    ¯\n                  \n                \n                ∩\n                \n                  \n                    B\n                    ¯\n                  \n                \n                ,\n              \n            \n            \n              \n                \n                  \n                    \n                      A\n                      ∩\n                      B\n                    \n                    ¯\n                  \n                \n              \n              \n                \n                =\n                \n                  \n                    A\n                    ¯\n                  \n                \n                ∪\n                \n                  \n                    B\n                    ¯\n                  \n                \n                ,\n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}{\\overline {A\\cup B}}&amp;={\\overline {A}}\\cap {\\overline {B}},\\\\{\\overline {A\\cap B}}&amp;={\\overline {A}}\\cup {\\overline {B}},\\end{aligned}}}\n  where\n\nA and B are sets,\nA is the complement of A,\n∩ is the intersection, and\n∪ is the <http://union.In|union.In> formal language, the rules are written as\n\n  \n    \n      \n        ¬\n        (\n        P\n        ∨\n        Q\n        )\n        \n        ⟺\n        \n        (\n        ¬\n        P\n        )\n        ∧\n        (\n        ¬\n        Q\n        )\n        ,\n      \n    \n    {\\displaystyle \\neg (P\\lor Q)\\iff (\\neg P)\\land (\\neg Q),}\n  and\n\n  \n    \n      \n        ¬\n        (\n        P\n        ∧\n        Q\n        )\n        \n        ⟺\n        \n        (\n        ¬\n        P\n        )\n        ∨\n        (\n        ¬\n        Q\n        )\n      \n    \n    {\\displaystyle \\neg (P\\land Q)\\iff (\\neg P)\\lor (\\neg Q)}\n  where\n\nP and Q are propositions,\n\n  \n    \n      \n        ¬\n      \n    \n    {\\displaystyle \\neg }\n   is the negation logic operator (NOT),\n\n  \n    \n      \n        ∧\n      \n    \n    {\\displaystyle \\land }\n   is the conjunction logic operator (AND),\n\n  \n    \n      \n        ∨\n      \n    \n    {\\displaystyle \\lor }\n   is the disjunction logic operator (OR),\n\n  \n    \n      \n        \n        ⟺\n        \n      \n    \n    {\\displaystyle \\iff }\n   is a metalogical symbol meaning \"can be replaced in a logical proof with\".Applications of the rules include simplification of logical expressions in computer programs and digital circuit designs. De Morgan's laws are an example of a more general concept of mathematical duality.","fallback":"wikipedia: De Morgan's laws","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png","id":1,"original_url":"https://en.wikipedia.org/wiki/De_Morgan%27s_laws"}],"blocks":[{"type":"rich_text","block_id":"QhjE","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://en.wikipedia.org/wiki/De_Morgan%27s_laws"}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN"},{"client_msg_id":"cee69438-6b1c-4e7b-bffc-b3bbb639141a","type":"message","text":"Can one call it the De Morgan opposite or something? And the normal opposite of `and` is simply `nand`","user":"U7K185TUN","ts":"1616596033.383100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Gx5HQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can one call it the De Morgan opposite or something? And the normal opposite of "},{"type":"text","text":"and ","style":{"code":true}},{"type":"text","text":"is simply "},{"type":"text","text":"nand","style":{"code":true}}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN"},{"client_msg_id":"b5b6a689-a7dd-4da3-bba9-012c967f3da8","type":"message","text":"My use case is: I have structs for these operations for a constraint solver and I want to cover different ways of negating a boolean expression either with De Morgan or a simple opposite set depending on what I have implement.","user":"U7K185TUN","ts":"1616596169.383300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ewil","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My use case is: I have structs for these operations for a constraint solver and I want to cover different ways of negating a boolean expression either with De Morgan or a simple opposite set depending on what I have implement."}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN"},{"client_msg_id":"8a38d162-1cad-4b45-9a9c-52408ef4b328","type":"message","text":"No, because NAND _is_ the same as the De Morgan's law: <https://en.wikipedia.org/wiki/NAND_gate>","user":"UPSSPPBFV","ts":"1616596235.383500","team":"T68168MUP","attachments":[{"image_url":"https://upload.wikimedia.org/wikipedia/commons/c/c6/TexasInstruments_7400_chip%2C_view_and_element_placement.jpg","image_width":434,"image_height":536,"image_bytes":87287,"title":"NAND gate","title_link":"https://en.wikipedia.org/wiki/NAND_gate","from_url":"https://en.wikipedia.org/wiki/NAND_gate","author_name":"Wikipedia","author_link":"https://en.wikipedia.org/","text":"In digital electronics, a NAND gate (NOT-AND) is a logic gate which produces an output which is false only if all its inputs are true; thus its output is complement to that of an AND gate. A LOW (0) output results only if all the inputs to the gate are HIGH (1); if any input is LOW (0), a HIGH (1) output results. A NAND gate is made using transistors and junction diodes. By De Morgan's theorem, a two-input NAND gate's logic may be expressed as AB=A+B, making a NAND gate equivalent to inverters followed by an OR gate. \nThe NAND gate is significant because any boolean function can be implemented by using a combination of NAND gates. This property is called functional completeness. It shares this property with the NOR gate. Digital systems employing certain logic circuits take advantage of NAND's functional completeness.\nThe function NAND(a1, a2, ..., an) is logically equivalent to NOT(a1 AND a2 AND ... AND an).\nOne way of expressing A NAND B is \n  \n    \n      \n        \n          \n            \n              A\n              ∧\n              B\n            \n            ¯\n          \n        \n      \n    \n    {\\displaystyle {\\overline {A\\land B}}}\n  , where the symbol \n  \n    \n      \n        \n          ∧\n        \n      \n    \n    {\\displaystyle {\\land }}\n   signifies AND and the bar signifies the negation of the expression under it: in essence, simply \n  \n    \n      \n        \n          \n            ¬\n            (\n            A\n            ∧\n            B\n            )\n          \n        \n      \n    \n    {\\displaystyle {\\displaystyle \\neg (A\\land B)}}\n  .\nNAND gates with two or more inputs are available as integrated circuits in transistor-transistor logic, CMOS, and other logic families.","fallback":"wikipedia: NAND gate","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png","id":1,"original_url":"https://en.wikipedia.org/wiki/NAND_gate"}],"blocks":[{"type":"rich_text","block_id":"UqqV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No, because NAND "},{"type":"text","text":"is","style":{"italic":true}},{"type":"text","text":" the same as the De Morgan's law: "},{"type":"link","url":"https://en.wikipedia.org/wiki/NAND_gate"}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN"},{"client_msg_id":"365f22a5-5459-4a18-888c-23118b192a54","type":"message","text":"&gt; a NAND gate _equivalent to_ inverters followed by an OR gate\nThat's just De Morgan's Law.","user":"UPSSPPBFV","ts":"1616596303.383800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Qjd0n","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"a NAND gate "},{"type":"text","text":"equivalent to","style":{"italic":true}},{"type":"text","text":" inverters followed by an OR gate"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"That's just De Morgan's Law."}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN"},{"client_msg_id":"a221f465-423c-461d-b89e-c50ea04318fe","type":"message","text":"How about the relationship between xor and xnor?","user":"U7K185TUN","ts":"1616596347.384000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"krh0k","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How about the relationship between xor and xnor?"}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN"},{"client_msg_id":"02af22f9-cac7-4f3f-8c20-b521d462439e","type":"message","text":"If I remember properly DeMorgan's laws are also known as duality","user":"UC81ESVH6","ts":"1616596525.384200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+LS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If I remember properly DeMorgan's laws are also known as duality"}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN"},{"client_msg_id":"4b2053cb-2542-4428-8d34-3b0e664027fb","type":"message","text":"I'm not aware it has a name, because XOR and XNOR are not basic operations but can be expressed in terms of AND, OR and NOT, See <https://en.wikipedia.org/wiki/Boolean_algebra#Secondary_operations>","user":"UPSSPPBFV","ts":"1616596558.384500","team":"T68168MUP","attachments":[{"title":"Boolean algebra","title_link":"https://en.wikipedia.org/wiki/Boolean_algebra#Secondary_operations","from_url":"https://en.wikipedia.org/wiki/Boolean_algebra#Secondary_operations","author_name":"Wikipedia","author_link":"https://en.wikipedia.org/","text":"In mathematics and mathematical logic, Boolean algebra is the branch of algebra in which the values of the variables are the truth values true and false, usually denoted 1 and 0, respectively. Instead of elementary algebra, where the values of the variables are numbers and the prime operations are addition and multiplication, the main operations of Boolean algebra are the conjunction (and) denoted as ∧, the disjunction (or) denoted as ∨, and the negation (not) denoted as ¬. It is thus a formalism for describing logical operations, in the same way that elementary algebra describes numerical operations.\nBoolean algebra was introduced by George Boole in his first book The Mathematical Analysis of Logic (1847), and set forth more fully in his An Investigation of the Laws of Thought (1854).\nAccording to Huntington, the term \"Boolean algebra\" was first suggested by Sheffer in 1913, although Charles Sanders Peirce gave the title \"A Boolean Algebra with One Constant\" to the first chapter of his \"The Simplest Mathematics\" in 1880.\nBoolean algebra has been fundamental in the development of digital electronics, and is provided for in all modern programming languages. It is also used in set theory and statistics.","fallback":"wikipedia: Boolean algebra","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png","id":1,"original_url":"https://en.wikipedia.org/wiki/Boolean_algebra#Secondary_operations"}],"blocks":[{"type":"rich_text","block_id":"L47=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not aware it has a name, because XOR and XNOR are not basic operations but can be expressed in terms of AND, OR and NOT, See "},{"type":"link","url":"https://en.wikipedia.org/wiki/Boolean_algebra#Secondary_operations"}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN"},{"client_msg_id":"ad3290e2-d515-4026-aa2a-697d4a1dc440","type":"message","text":"XNOR is called \"equivalence\" in Boolean algebra","user":"UPSSPPBFV","ts":"1616596587.384800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+fbHX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"XNOR is called \"equivalence\" in Boolean algebra"}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN"},{"client_msg_id":"7a3e9d71-bc41-4943-9cfa-68e7906f25fd","type":"message","text":"I might need to explain my problem in a bit more detail :smile: Thanks for the De Morgan input though. The undergrad lecture left memory a while back.\n\nLet say someone defines `(x &lt;= 2) &amp;&amp; (x &gt;= 5)` as a constraint and I want to get the opposite of it.\nI want to go the De Morgan route of swapping `&amp;&amp;` with `||` and invert the parts.\nIf another constraint is `(x &lt;= 2) \\xor (x &gt;= 5)` I want to just swap the operator without inverting the parts.\nSo I would call `\\xor` &lt;-&gt; `\\xnor` anti operators\nbut how would I call `&amp;&amp;` &lt;-&gt; `||` ?","user":"U7K185TUN","ts":"1616596843.385500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LbZJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I might need to explain my problem in a bit more detail "},{"type":"emoji","name":"smile"},{"type":"text","text":" Thanks for the De Morgan input though. The undergrad lecture left memory a while back.\n\nLet say someone defines "},{"type":"text","text":"(x <= 2) && (x >= 5)","style":{"code":true}},{"type":"text","text":" as a constraint and I want to get the opposite of it.\nI want to go the De Morgan route of swapping "},{"type":"text","text":"&&","style":{"code":true}},{"type":"text","text":" with "},{"type":"text","text":"||","style":{"code":true}},{"type":"text","text":" and invert the parts.\nIf another constraint is "},{"type":"text","text":"(x <= 2) \\xor (x >= 5)","style":{"code":true}},{"type":"text","text":" I want to just swap the operator without inverting the parts.\nSo I would call "},{"type":"text","text":"\\xor","style":{"code":true}},{"type":"text","text":" <-> "},{"type":"text","text":"\\xnor","style":{"code":true}},{"type":"text","text":" anti operators\nbut how would I call "},{"type":"text","text":"&&","style":{"code":true}},{"type":"text","text":" <-> "},{"type":"text","text":"||","style":{"code":true}},{"type":"text","text":" ?"}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN"},{"client_msg_id":"555650ae-f326-4629-a7e9-ed1e786b081b","type":"message","text":"I don't know what you'd call them. As far as I know calling `xor` and `xnor` \"anti-operators\" is not standard nomenclature, so if you're defining your own conventions you're free to call them what you want. \"Dual operators\" might work, but don't expect people to understand you without explanation.","user":"UPSSPPBFV","ts":"1616597030.386000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Kcw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't know what you'd call them. As far as I know calling "},{"type":"text","text":"xor","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"xnor","style":{"code":true}},{"type":"text","text":" \"anti-operators\" is not standard nomenclature, so if you're defining your own conventions you're free to call them what you want. \"Dual operators\" might work, but don't expect people to understand you without explanation."}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN","reactions":[{"name":"+1","users":["U7K185TUN"],"count":1}]},{"client_msg_id":"b08f1d7b-8a15-475a-aac6-03908b9edcf0","type":"message","text":"Okay if there is no standard nomenclature I'll think of my own and write down the explanation :wink:","user":"U7K185TUN","ts":"1616597105.386200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+oNfm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Okay if there is no standard nomenclature I'll think of my own and write down the explanation "},{"type":"emoji","name":"wink"}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN"},{"client_msg_id":"f392185a-da0b-4ebe-bc1f-46760575f78a","type":"message","text":"It does seem like duality might be what you are looking for where your \"anti-operators\" are \"dual\" to each other. And more specifically duality in Boolean Algebra seems to be De Morgans.\n\nFrom the Boolean Algebra wikipedia page, duality section.\n\n&gt; When values and operations can be paired up in a way that leaves everything important unchanged when all pairs are switched simultaneously, we call the members of each pair dual to each other. Thus 0 and 1 are dual, and ∧ and ∨ are dual. The Duality Principle, also called De Morgan duality, asserts that Boolean algebra is unchanged when all dual pairs are interchanged. ","user":"U0138UTB7A4","ts":"1616597874.386600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c/+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It does seem like duality might be what you are looking for where your \"anti-operators\" are \"dual\" to each other. And more specifically duality in Boolean Algebra seems to be De Morgans.\n\nFrom the Boolean Algebra wikipedia page, duality section.\n\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"When values and operations can be paired up in a way that leaves everything important unchanged when all pairs are switched simultaneously, we call the members of each pair dual to each other. Thus 0 and 1 are dual, and ∧ and ∨ are dual. The Duality Principle, also called De Morgan duality, asserts that Boolean algebra is unchanged when all dual pairs are interchanged. "}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN","reactions":[{"name":"+1","users":["U7K185TUN"],"count":1}]},{"client_msg_id":"a96a405b-692e-452b-8582-1e338e5d7fa9","type":"message","text":"I'd call it \"applied negation\"","user":"UH24GRBLL","ts":"1616599247.387900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kgZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'd call it \"applied negation\""}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN"},{"client_msg_id":"368d419a-f537-4792-b220-1119052b788d","type":"message","text":"`xnor` is negated `xor`","user":"UH24GRBLL","ts":"1616599257.388300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oq6j2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"xnor","style":{"code":true}},{"type":"text","text":" is negated "},{"type":"text","text":"xor","style":{"code":true}}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN"},{"client_msg_id":"22e7baa3-fb22-4e24-b779-732166a2dd17","type":"message","text":"`nand` is negated `and`","user":"UH24GRBLL","ts":"1616599270.388800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"z0n7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"nand","style":{"code":true}},{"type":"text","text":" is negated "},{"type":"text","text":"and","style":{"code":true}}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN"},{"client_msg_id":"b5465821-92a9-474a-b9d2-8fbe1df07467","type":"message","text":"applied negation vs duality you mean?","user":"U7K185TUN","ts":"1616599309.389000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c7bUZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"applied negation vs duality you mean?"}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN"},{"client_msg_id":"607e273c-5ad0-4a3a-aa11-9e7d4e42f142","type":"message","text":"using the de morgan rule to propagate negation into the arguments of the operator is just called \"applying de morgans rule\"","user":"UH24GRBLL","ts":"1616599322.389200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"f4v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"using the de morgan rule to propagate negation into the arguments of the operator is just called \"applying de morgans rule\""}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN"},{"client_msg_id":"260d8123-e391-464e-a3b2-92f81410a53f","type":"message","text":"or negation vs applied negation :smile:","user":"U7K185TUN","ts":"1616599336.389400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oO14","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or negation vs applied negation "},{"type":"emoji","name":"smile"}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN"},{"client_msg_id":"12ec81df-349b-4f44-b0bb-6871202c2223","type":"message","text":"well it's the difference between `!(a xor b)` and `a xnor b` - the latter is the applied form of the former","user":"UH24GRBLL","ts":"1616599369.389600","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1616599380.000000"},"blocks":[{"type":"rich_text","block_id":"3BsP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"well it's the difference between "},{"type":"text","text":"!(a xor b)","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"a xnor b","style":{"code":true}},{"type":"text","text":" - the latter is the applied form of the former"}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN"},{"client_msg_id":"5dfb07b1-b1ab-428f-a9ad-415953f960f3","type":"message","text":"that it gets propagated into the arguments in the case of `&amp;&amp;` and `||` is a detail","user":"UH24GRBLL","ts":"1616599409.390100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1vGo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that it gets propagated into the arguments in the case of "},{"type":"text","text":"&&","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"||","style":{"code":true}},{"type":"text","text":" is a detail"}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN"},{"client_msg_id":"44b09b15-7057-4a83-aced-b8011813f936","type":"message","text":"that's the detail I'm interested in :joy:","user":"U7K185TUN","ts":"1616599427.390300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KlcG2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's the detail I'm interested in "},{"type":"emoji","name":"joy"}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN"},{"client_msg_id":"8048ad99-1dca-4bae-bb5f-74a2528967b1","type":"message","text":"the detail is called \"applying deMorgans' rule\"","user":"UH24GRBLL","ts":"1616599459.390700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9/Aiy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the detail is called \"applying deMorgans' rule\""}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN","reactions":[{"name":"+1","users":["U7K185TUN"],"count":1}]},{"client_msg_id":"f2a67560-0c14-420d-ba9b-d6918f03931a","type":"message","text":"(to propagate negation into the arguments)","user":"UH24GRBLL","ts":"1616599470.390900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"z1rvZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(to propagate negation into the arguments)"}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN"},{"client_msg_id":"963adc91-427b-4f01-9f99-f28010857247","type":"message","text":"it's specific to `logical and` and `logical or` though, there's no generalization here","user":"UH24GRBLL","ts":"1616599518.391400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"t5dQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's specific to "},{"type":"text","text":"logical and","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"logical or","style":{"code":true}},{"type":"text","text":" though, there's no generalization here"}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN"},{"client_msg_id":"503e3359-3495-487b-94c9-2f2bed3acc8a","type":"message","text":"if you haven't derived de Morgans' rule yet, I'd encourage you to do so to see why it's specific to those two","user":"UH24GRBLL","ts":"1616599575.391700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7tMg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you haven't derived de Morgans' rule yet, I'd encourage you to do so to see why it's specific to those two"}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN","reactions":[{"name":"+1","users":["U7K185TUN"],"count":1}]},{"client_msg_id":"9936738a-2627-4aac-b7b4-40acba70a28e","type":"message","text":"<@U7K185TUN> That's just the set complement of the set defined by the constraint, so I'd call it complement.","user":"U67G3QRJM","ts":"1616599802.392000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LYW","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U7K185TUN"},{"type":"text","text":" That's just the set complement of the set defined by the constraint, so I'd call it complement."}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN","reactions":[{"name":"100","users":["UH24GRBLL","U010LT79LKX"],"count":2}]},{"client_msg_id":"a41e9671-9e61-432a-b371-ef07d29f9855","type":"message","text":"Well for both cases it's the complement (thanks for the word :smile: ), right? The complement is just derived via a different route. The complement set of xor is xnor but the complement of and is || with the complement of the inners (deMorgan).\nSorry for the confusion.","user":"U7K185TUN","ts":"1616599963.392700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0sDT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well for both cases it's the complement (thanks for the word "},{"type":"emoji","name":"smile"},{"type":"text","text":" ), right? The complement is just derived via a different route. The complement set of xor is xnor but the complement of and is || with the complement of the inners (deMorgan).\nSorry for the confusion."}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN"},{"client_msg_id":"30f728e8-fbb0-441f-8380-6bb691d7f776","type":"message","text":"yes","user":"UH24GRBLL","ts":"1616599999.393200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3eDCX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes"}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN"},{"client_msg_id":"473f6f14-03a5-4aa0-9a56-59beeec02b00","type":"message","text":"I prefer to think of De Morgan's Laws as providing equivalences between conjunctive and disjunctive forms of a logic statement.  Much like you can convert a product of two sums into an equivalent sum of products.  They are two equivalent forms; they aren't complements (i.e., logical negations).  Now, \\xor and \\xnor are indeed complements.  So, I think it is really confusing to be using the term complement for both ideas.","user":"U017WSQVCBG","ts":"1616604702.395500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JM3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I prefer to think of De Morgan's Laws as providing equivalences between conjunctive and disjunctive forms of a logic statement.  Much like you can convert a product of two sums into an equivalent sum of products.  They are two equivalent forms; they aren't complements (i.e., logical negations).  Now, \\xor and \\xnor are indeed complements.  So, I think it is really confusing to be using the term complement for both ideas."}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN"},{"client_msg_id":"64a55adc-2088-4d11-b956-7b7ba49c866c","type":"message","text":"My suggestion of the word “complement” was because of this comment: “Let say someone defines (x &lt;= 2) &amp;&amp; (x &gt;= 5) as a constraint and I want to get the opposite of it.”   That constraint defines a set; the “opposite” is, if I understand correctly the intent, exactly the complement of that set","user":"U67G3QRJM","ts":"1616633245.415000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fuH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My suggestion of the word “complement” was because of this comment: “Let say someone defines (x <= 2) && (x >= 5) as a constraint and I want to get the opposite of it.”   That constraint defines a set; the “opposite” is, if I understand correctly the intent, exactly the complement of that set"}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN"},{"client_msg_id":"8EFD42A6-7756-4636-A553-24E78E971B6E","type":"message","text":"David, I agree with the use of the word complement for what you are talking about.  It wasn’t clear to me that some other mentions in the comments above constituted complements in the same manner, which is why I found the discussion confusing.  But, perhaps that’s just me.","user":"U017WSQVCBG","ts":"1616634483.419900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O12g","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"David, I agree with the use of the word complement for what you are talking about.  It wasn’t clear to me that some other mentions in the comments above constituted complements in the same manner, which is why I found the discussion confusing.  But, perhaps that’s just me."}]}]}],"thread_ts":"1616595814.382500","parent_user_id":"U7K185TUN","reactions":[{"name":"+1","users":["U67G3QRJM"],"count":1}]}]