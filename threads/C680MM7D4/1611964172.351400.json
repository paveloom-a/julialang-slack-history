[{"client_msg_id":"ec51ed91-7cd8-4f48-809e-813084f18bd0","type":"message","text":"The thesis of this thread is interesting.\n<https://twitter.com/jaredpar/status/1355257692005142529?s=19|https://twitter.com/jaredpar/status/1355257692005142529?s=19>.\n\nIt's kind of convincing to me:\nEither you can recover from an operation failing, or you can not.\nIf you can recover then you don't care why it failed.\nIf you cannot then you cannot, do it doesn't matter why it failed.\nHalf way down it make the argument about file reading.\nThere are many many reasons it might fail. Possibly encoded into some number of exception types. Possibly different exception types depending on some supposedly orthonal thing like if it is a remote file but that is just following the abstract file API.\n\nCounter is that some errors are programmer errors and this makes identifying them hard.\nBut maybe erroring out us not the best tool","user":"U6A936746","ts":"1611964172.351400","team":"T68168MUP","attachments":[{"fallback":"<https://twitter.com/jaredpar|@jaredpar>: .NET exception advice:\n\nQ: What should I throw? \nA: System.Exception \n\nQ: What should I catch?\nA: System.Exception \n\nThe .NET exception model is a Pokémon based system. Gotta catch them all.","ts":1611953587,"author_name":"Jared Parsons","author_link":"https://twitter.com/jaredpar/status/1355257692005142529","author_icon":"https://pbs.twimg.com/profile_images/985600797068021760/lqFDpEIj_normal.jpg","author_subname":"@jaredpar","text":".NET exception advice:\n\nQ: What should I throw? \nA: System.Exception \n\nQ: What should I catch?\nA: System.Exception \n\nThe .NET exception model is a Pokémon based system. Gotta catch them all.","service_name":"twitter","service_url":"https://twitter.com/","from_url":"https://twitter.com/jaredpar/status/1355257692005142529?s=19","id":1,"original_url":"https://twitter.com/jaredpar/status/1355257692005142529?s=19","footer":"Twitter","footer_icon":"https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"}],"blocks":[{"type":"rich_text","block_id":"qT5f","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The thesis of this thread is interesting.\n"},{"type":"link","url":"https://twitter.com/jaredpar/status/1355257692005142529?s=19","text":"https://twitter.com/jaredpar/status/1355257692005142529?s=19"},{"type":"text","text":".\n\nIt's kind of convincing to me:\nEither you can recover from an operation failing, or you can not.\nIf you can recover then you don't care why it failed.\nIf you cannot then you cannot, do it doesn't matter why it failed.\nHalf way down it make the argument about file reading.\nThere are many many reasons it might fail. Possibly encoded into some number of exception types. Possibly different exception types depending on some supposedly orthonal thing like if it is a remote file but that is just following the abstract file API.\n\nCounter is that some errors are programmer errors and this makes identifying them hard.\nBut maybe erroring out us not the best tool"}]}]}],"thread_ts":"1611964172.351400","reply_count":3,"reply_users_count":3,"latest_reply":"1611965432.352100","reply_users":["U6A936746","U019K6Q9N15","U01HD5VFXJM"],"subscribed":false},{"client_msg_id":"fa1c6ef1-7a66-48dc-82ad-183e5c85bdbb","type":"message","text":"This would suggest that rather than writing\n`err isa FooError || rethrow()`\nShould be writing more\n`err isa BarError &amp;&amp; rethrow()`","user":"U6A936746","ts":"1611964639.351600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VUn1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This would suggest that rather than writing\n"},{"type":"text","text":"err isa FooError || rethrow()\n","style":{"code":true}},{"type":"text","text":"Should be writing more\n"},{"type":"text","text":"err isa BarError && rethrow()","style":{"code":true}}]}]}],"thread_ts":"1611964172.351400","parent_user_id":"U6A936746"},{"client_msg_id":"df68cb0d-e83f-4b39-b8af-691b4cf46897","type":"message","text":"I can understand Parson's point in the case that one is dealing with a third party api.\n\nIf we're talking about handling exceptions from the application domain in the application then I have to disagree strongly. 4 years of the philosophy of not caring about why something has failed as long as you can make it recover is responsible for the endless spaghetti I've been dealing with for the past week :weary:.","user":"U019K6Q9N15","ts":"1611965292.351900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"b4G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I can understand Parson's point in the case that one is dealing with a third party api.\n\nIf we're talking about handling exceptions from the application domain in the application then I have to disagree strongly. 4 years of the philosophy of not caring about why something has failed as long as you can make it recover is responsible for the endless spaghetti I've been dealing with for the past week "},{"type":"emoji","name":"weary"},{"type":"text","text":"."}]}]}],"thread_ts":"1611964172.351400","parent_user_id":"U6A936746","reactions":[{"name":"+1","users":["UPUBAM63X","U017JTQFNEQ"],"count":2}]},{"client_msg_id":"0748c2fd-5d59-43dc-a228-68ba26823952","type":"message","text":"I think the issue is when people start catching all exceptions and swallowing them, leaving the program in a potentially undetermined state... But sometimes you do need to distinguish between different types of failures, which you can handle or present to your user for them to handle. Which is why it's weird that he uses IO failure as an example; the user or developer needs to know what kind of failure happened.","user":"U01HD5VFXJM","ts":"1611965432.352100","team":"T68168MUP","edited":{"user":"U01HD5VFXJM","ts":"1611965461.000000"},"blocks":[{"type":"rich_text","block_id":"Lgu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think the issue is when people start catching all exceptions and swallowing them, leaving the program in a potentially undetermined state... But sometimes you do need to distinguish between different types of failures, which you can handle or present to your user for them to handle. Which is why it's weird that he uses IO failure as an example; the user or developer needs to know what kind of failure happened."}]}]}],"thread_ts":"1611964172.351400","parent_user_id":"U6A936746","reactions":[{"name":"100","users":["U017JTQFNEQ"],"count":1}]}]