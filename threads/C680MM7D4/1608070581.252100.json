[{"client_msg_id":"2a354011-2904-4995-a4d0-6e77f7126de1","type":"message","text":"Today in Dex bugs: matmul was taking 85s to multiply two 500x500 matrixes.","user":"U6A936746","ts":"1608070581.252100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uyzx8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Today in Dex bugs: matmul was taking 85s to multiply two 500x500 matrixes."}]}]}],"thread_ts":"1608070581.252100","reply_count":40,"reply_users_count":7,"latest_reply":"1608133153.290800","reply_users":["U6795JH6H","U6A936746","UH24GRBLL","U8D9768Q6","U6N6VQE30","U674T3KB3","U01CQTKB86N"],"subscribed":false,"reactions":[{"name":"slow_parrot","users":["UDB26738Q","U6QGE7S86","UH8A351DJ","U6C5KSWAC","UMY1LV01G","U9V8ZQVEY","U69BL50BF"],"count":7},{"name":"jax","users":["UMY1LV01G","U69BL50BF"],"count":2}]},{"client_msg_id":"a3e29aec-b203-4319-b5e5-8b772d20323c","type":"message","text":"are they not calling a BLAS, calling a bad BLAS (i.e. reference), calling a BLAS badly, or is it implemented as a triple loop?","user":"U6795JH6H","ts":"1608070633.252300","team":"T68168MUP","edited":{"user":"U6795JH6H","ts":"1608070655.000000"},"blocks":[{"type":"rich_text","block_id":"G2wr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"are they not calling a BLAS, calling a bad BLAS (i.e. reference), calling a BLAS badly, or is it implemented as a triple loop?"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"072f65fc-0016-46c8-b35b-fdafc50cc5e1","type":"message","text":"It’s a triple loop, but it is some kind of extra bug.\nTriple loop is slow, but it is nowhere *near* that slow.\nWith a tweak I was making for unrelated reasons to the code I got it to speed up to 6ms.\nWhich is still slow.\nbut its unclear even as to why my tweak would have that much effect.\nAll i did was remove a transpose, and transpose only takes 80us.","user":"U6A936746","ts":"1608070976.253100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vAtoF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It’s a triple loop, but it is some kind of extra bug.\nTriple loop is slow, but it is nowhere "},{"type":"text","text":"near","style":{"bold":true}},{"type":"text","text":" that slow.\nWith a tweak I was making for unrelated reasons to the code I got it to speed up to 6ms.\nWhich is still slow.\nbut its unclear even as to why my tweak would have that much effect.\nAll i did was remove a transpose, and transpose only takes 80us."}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"8b25a6ab-003f-4a5a-a4ed-878ab2785931","type":"message","text":"I think Dex will never call BLAS (at least not directly), because it’s destiny is to plumb all this index information down to XLA and tell XLA to work it out.","user":"U6A936746","ts":"1608071076.253300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ai33","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think Dex will never call BLAS (at least not directly), because it’s destiny is to plumb all this index information down to XLA and tell XLA to work it out."}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"71ba23eb-bdaf-43c7-b496-82216017f595","type":"message","text":"wrong iteration order due to the transpose maybe?","user":"UH24GRBLL","ts":"1608071112.253700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"a7S","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"wrong iteration order due to the transpose maybe?"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746","reactions":[{"name":"+1","users":["U8D9768Q6"],"count":1}]},{"client_msg_id":"d23c7ea4-1d26-42d3-977d-ae323ae96647","type":"message","text":"Could it be *that* slow though?\nI thought CPU’s were pretty good at strided access with fixed strides","user":"U6A936746","ts":"1608071192.254800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8fjZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Could it be "},{"type":"text","text":"that","style":{"bold":true}},{"type":"text","text":" slow though?\nI thought CPU’s were pretty good at strided access with fixed strides"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"422a829e-5533-473f-8aea-872a1100bc61","type":"message","text":"I don't know how dex works under the hood, so it could be a worst case combination of cache eviction, iteration order and other weird interactions :man-shrugging:","user":"UH24GRBLL","ts":"1608071243.256500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qk9Ft","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't know how dex works under the hood, so it could be a worst case combination of cache eviction, iteration order and other weird interactions "},{"type":"emoji","name":"man-shrugging"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"65de1d37-3340-40c0-8976-0c2a125d1e2c","type":"message","text":"and if it's a matmul, maybe the strides just don't quite align enough and/or long enough","user":"UH24GRBLL","ts":"1608071269.256700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gp1DB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and if it's a matmul, maybe the strides just don't quite align enough and/or long enough"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"878262B7-E7C2-49F6-92AA-00B1E5552EBF","type":"message","text":"Could be that the strides are being treated dynamically ","user":"U8D9768Q6","ts":"1608071296.257400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Oi0iw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Could be that the strides are being treated dynamically "}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746","reactions":[{"name":"grimacing","users":["UH24GRBLL"],"count":1}]},{"client_msg_id":"ba17867d-5182-421a-94f3-e3e7540cabd4","type":"message","text":"How do i write the slow one in julia?\n```\n\nfunction triple_loop_matmul(x, y)\n    map(axes(x,1), axes(y,2)) do i,k\n        net = zero(eltype(x))\n        for j in axes(x, 2)\n            net+=y[j,k]\n        end\n    end\nend\n\n@btime triple_loop_matmul(x,x);```\nTakes 11us.\n(Which is like way faster than `x*x` , we should tweak the cut-off for where we decide to call out to BLAS or not.)","user":"U6A936746","ts":"1608071797.258000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"D=3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How do i write the slow one in julia?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"\n\nfunction triple_loop_matmul(x, y)\n    map(axes(x,1), axes(y,2)) do i,k\n        net = zero(eltype(x))\n        for j in axes(x, 2)\n            net+=y[j,k]\n        end\n    end\nend\n\n@btime triple_loop_matmul(x,x);"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nTakes 11us.\n(Which is like way faster than "},{"type":"text","text":"x*x","style":{"code":true}},{"type":"text","text":" , we should tweak the cut-off for where we decide to call out to BLAS or not.)"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"1bc675ff-0341-40bd-8495-92c51b76c9bc","type":"message","text":"You're not storing a result...","user":"U8D9768Q6","ts":"1608071850.258500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+3HIL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You're not storing a result..."}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"46c150bb-d121-4877-a534-da54fdf36a04","type":"message","text":"Ah that would do it","user":"U6A936746","ts":"1608071881.258800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5tU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah that would do it"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"114a04f8-e526-4e26-8851-0ab765f8f0a6","type":"message","text":"```julia&gt; function bad_mul!(C, A, B)\n           T = eltype(C)\n           @fastmath @inbounds for i ∈ axes(A, 1), j ∈ axes(B, 2)\n               Cij = zero(T)\n               @simd for k ∈ axes(A, 2)\n                   Cij += A[i, k] * B[k, j]\n               end\n               C[i, j] = Cij\n           end\n           C\n       end\nbad_mul! (generic function with 1 method)\n\njulia&gt; let n = 500\n           A = randn(n, n)\n           B = randn(n,n)\n           C = zeros(n, n)\n           @btime bad_mul!($C, $A, $B)\n           @btime bad_mul!($C, $(transpose(A)), $B)\n           @btime     mul!($C, $A, $B)\n       end;\n  159.812 ms (0 allocations: 0 bytes)\n  18.066 ms (0 allocations: 0 bytes)\n  1.912 ms (0 allocations: 0 bytes)```","user":"U8D9768Q6","ts":"1608071898.259000","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1608072106.000000"},"blocks":[{"type":"rich_text","block_id":"LyFg","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function bad_mul!(C, A, B)\n           T = eltype(C)\n           @fastmath @inbounds for i ∈ axes(A, 1), j ∈ axes(B, 2)\n               Cij = zero(T)\n               @simd for k ∈ axes(A, 2)\n                   Cij += A[i, k] * B[k, j]\n               end\n               C[i, j] = Cij\n           end\n           C\n       end\nbad_mul! (generic function with 1 method)\n\njulia> let n = 500\n           A = randn(n, n)\n           B = randn(n,n)\n           C = zeros(n, n)\n           @btime bad_mul!($C, $A, $B)\n           @btime bad_mul!($C, $(transpose(A)), $B)\n           @btime     mul!($C, $A, $B)\n       end;\n  159.812 ms (0 allocations: 0 bytes)\n  18.066 ms (0 allocations: 0 bytes)\n  1.912 ms (0 allocations: 0 bytes)"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746","reactions":[{"name":"ty","users":["U6A936746"],"count":1}]},{"client_msg_id":"f8c648da-80b9-4ef4-9731-10f94b33ee0d","type":"message","text":"(Fixed version of my above is 34us for 200x200 and 214us for 500x500)","user":"U6A936746","ts":"1608072057.259200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7IiG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(Fixed version of my above is 34us for 200x200 and 214us for 500x500)"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"ba5e2689-e151-4998-9bf2-7669f8aeb0cf","type":"message","text":"So XLA / Dex is still doing better than naive julia here.","user":"U8D9768Q6","ts":"1608072130.259700","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1608072153.000000"},"blocks":[{"type":"rich_text","block_id":"ScPG1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So XLA / Dex is still doing better than naive julia here."}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"4a77e25d-6f25-45c5-8ecf-5b7803d6d070","type":"message","text":"Ok so we can get as slow as 0.150s.\nwhich is still many orders of magitude faster than 85s.","user":"U6A936746","ts":"1608072131.259900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tZJt1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok so we can get as slow as 0.150s.\nwhich is still many orders of magitude faster than 85s."}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"e5bb0b53-f8fe-4a66-9e43-42bb4136fdbc","type":"message","text":"How did nobody notice Dex was so bad at matmul?","user":"U8D9768Q6","ts":"1608072255.260200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6Gx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How did nobody notice Dex was so bad at matmul?"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"895f06c7-8edd-4226-a943-4d2e9db2d332","type":"message","text":"There is no XLA in Dex yet, I don’t think.\nand its doing way worse.\n85s was the 500x500\n0.5s was the 200x200\n\n6ms was the improved 200x200\n112ms is the improved 500x500","user":"U6A936746","ts":"1608072299.260400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MTX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There is no XLA in Dex yet, I don’t think.\nand its doing way worse.\n85s was the 500x500\n0.5s was the 200x200\n\n6ms was the improved 200x200\n112ms is the improved 500x500"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"f41587f1-a509-4562-8231-79d7a1158990","type":"message","text":"oh, I see. I thought you meant 6ms for 500x500","user":"U8D9768Q6","ts":"1608072324.260600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kiI9w","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh, I see. I thought you meant 6ms for 500x500"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"d5be9aac-a7ff-4f83-95c4-b5bf611e86cd","type":"message","text":"&gt;  How did nobody notice Dex was so bad at matmul?\nRemember:\n<https://github.com/google-research/dex-lang/pull/43>\nwas only 12 months ago it is a tiny baby language still wobbling through.\n\nAlso performance seem reasonable on some matrixes, in particular on ones that contain constant values like full all with the digit 2.0","user":"U6A936746","ts":"1608072428.260900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DgO1A","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":" How did nobody notice Dex was so bad at matmul?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nRemember:\n"},{"type":"link","url":"https://github.com/google-research/dex-lang/pull/43"},{"type":"text","text":"\nwas only 12 months ago it is a tiny baby language still wobbling through.\n\nAlso performance seem reasonable on some matrixes, in particular on ones that contain constant values like full all with the digit 2.0"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746","reactions":[{"name":"heart","users":["U8D9768Q6"],"count":1}]},{"client_msg_id":"f49263ab-660d-4a11-96aa-e353eca831c5","type":"message","text":"I suspect it is a regression that is not so old.\nAnd they don’t have a benchmark suite to check this yet.","user":"U6A936746","ts":"1608072469.261100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"n1Yt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I suspect it is a regression that is not so old.\nAnd they don’t have a benchmark suite to check this yet."}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"6858cd8b-0c42-4f32-9b8f-ba5c974d0776","type":"message","text":"That's a beautiful PR.","user":"U8D9768Q6","ts":"1608072535.261500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1lAH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's a beautiful PR."}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746","reactions":[{"name":"slightly_smiling_face","users":["U6A936746"],"count":1}]},{"client_msg_id":"123ad2c7-3ff3-42fc-8285-998568fd8b2c","type":"message","text":"This is fun.\n```julia&gt; using LoopVectorization\n\njulia&gt; function not_so_bad_mul!(C, A, B)\n           T = eltype(C)\n           @avx for i ∈ axes(A, 1), j ∈ axes(B, 2)\n               Cij = zero(T)\n               for k ∈ axes(A, 2)\n                   Cij += A[i, k] * B[k, j]\n               end\n               C[i, j] = Cij\n           end\n           C\n       end\n\njulia&gt; let n = 500\n           A = randn(n, n)\n           B = randn(n,n)\n           C = zeros(n, n)\n           foreach((bad_mul!, not_so_bad_mul!, mul!)) do mul!\n               @show mul!\n               @btime $mul!($C, $A, $B)\n               @btime $mul!($C, $(transpose(A)), $B)\n           end\n       end;\nmul! = bad_mul!\n  159.965 ms (0 allocations: 0 bytes)\n  18.089 ms (0 allocations: 0 bytes)\nmul! = not_so_bad_mul!\n  9.053 ms (0 allocations: 0 bytes)\n  8.682 ms (0 allocations: 0 bytes)\nmul! = LinearAlgebra.mul!\n  1.908 ms (0 allocations: 0 bytes)\n  1.910 ms (0 allocations: 0 bytes)```","user":"U8D9768Q6","ts":"1608072618.261800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"N9jC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is fun.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using LoopVectorization\n\njulia> function not_so_bad_mul!(C, A, B)\n           T = eltype(C)\n           @avx for i ∈ axes(A, 1), j ∈ axes(B, 2)\n               Cij = zero(T)\n               for k ∈ axes(A, 2)\n                   Cij += A[i, k] * B[k, j]\n               end\n               C[i, j] = Cij\n           end\n           C\n       end\n\njulia> let n = 500\n           A = randn(n, n)\n           B = randn(n,n)\n           C = zeros(n, n)\n           foreach((bad_mul!, not_so_bad_mul!, mul!)) do mul!\n               @show mul!\n               @btime $mul!($C, $A, $B)\n               @btime $mul!($C, $(transpose(A)), $B)\n           end\n       end;\nmul! = bad_mul!\n  159.965 ms (0 allocations: 0 bytes)\n  18.089 ms (0 allocations: 0 bytes)\nmul! = not_so_bad_mul!\n  9.053 ms (0 allocations: 0 bytes)\n  8.682 ms (0 allocations: 0 bytes)\nmul! = LinearAlgebra.mul!\n  1.908 ms (0 allocations: 0 bytes)\n  1.910 ms (0 allocations: 0 bytes)"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"cdc351b5-e8de-4282-8652-c9dfb587a774","type":"message","text":"Can we do some kind of reverse performance challenge:\nSlowest implemation of matmul that doesn’t sleep or perform a constant number of allocations?","user":"U6A936746","ts":"1608072698.262000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XuO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can we do some kind of reverse performance challenge:\nSlowest implemation of matmul that doesn’t sleep or perform a constant number of allocations?"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"0943334e-7c4b-4e0d-9a57-a6e901bdb748","type":"message","text":"Forcing SIMD in the wrong situation is an very nice, clever way to win those comptetitions","user":"U8D9768Q6","ts":"1608072769.262200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UsrJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Forcing SIMD in the wrong situation is an very nice, clever way to win those comptetitions"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"fdaa0cfa-2ac6-460a-943f-98b21d2c7f6f","type":"message","text":"how does it work?","user":"U6A936746","ts":"1608072810.262400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3Fj50","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"how does it work?"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"8ec25795-3473-4b47-9bfc-d5829c782a27","type":"message","text":"For instance, `bad_mul!` is actually worse than `really_bad_mul!` for untransposed arrays!\n```julia&gt; let n = 500\n           A = randn(n, n)\n           B = randn(n,n)\n           C = zeros(n, n)\n           foreach((bad_mul!, really_bad_mul!, mul!)) do mul!\n               @show mul!\n               @btime $mul!($C, $A, $B)\n               @btime $mul!($C, $(transpose(A)), $B)\n           end\n       end;\nmul! = bad_mul!\n  159.928 ms (0 allocations: 0 bytes)\n  18.196 ms (0 allocations: 0 bytes)\nmul! = really_bad_mul!\n  100.659 ms (0 allocations: 0 bytes)\n  97.383 ms (0 allocations: 0 bytes)\nmul! = LinearAlgebra.mul!\n  1.904 ms (0 allocations: 0 bytes)\n  1.911 ms (0 allocations: 0 bytes)```","user":"U8D9768Q6","ts":"1608072828.262700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"I8viL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For instance, "},{"type":"text","text":"bad_mul!","style":{"code":true}},{"type":"text","text":" is actually worse than "},{"type":"text","text":"really_bad_mul!","style":{"code":true}},{"type":"text","text":" for untransposed arrays!\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> let n = 500\n           A = randn(n, n)\n           B = randn(n,n)\n           C = zeros(n, n)\n           foreach((bad_mul!, really_bad_mul!, mul!)) do mul!\n               @show mul!\n               @btime $mul!($C, $A, $B)\n               @btime $mul!($C, $(transpose(A)), $B)\n           end\n       end;\nmul! = bad_mul!\n  159.928 ms (0 allocations: 0 bytes)\n  18.196 ms (0 allocations: 0 bytes)\nmul! = really_bad_mul!\n  100.659 ms (0 allocations: 0 bytes)\n  97.383 ms (0 allocations: 0 bytes)\nmul! = LinearAlgebra.mul!\n  1.904 ms (0 allocations: 0 bytes)\n  1.911 ms (0 allocations: 0 bytes)"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"73656504-2e61-48fb-8cf0-3373cb66f3aa","type":"message","text":"Someone who knows more about computer hardware can probably explain it better, but basically SIMD is relying on data locality to be fast, so by asking it to use SIMD in situations where the data is far apart is basically asking your CPU to sit around while data gets fetched","user":"U8D9768Q6","ts":"1608072926.263000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tF=W","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Someone who knows more about computer hardware can probably explain it better, but basically SIMD is relying on data locality to be fast, so by asking it to use SIMD in situations where the data is far apart is basically asking your CPU to sit around while data gets fetched"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746","reactions":[{"name":"+1","users":["U6A936746"],"count":1}]},{"client_msg_id":"cc6e87c9-6980-4aeb-a559-5d90fb1a6f73","type":"message","text":"SIMD lets you apply the same funtion to multiple collections of data at once, but it must be synchronized. So if synchronizing and fetching all the data is slower than just operating sequentially, you've done something very foolish.","user":"U8D9768Q6","ts":"1608073006.263200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JC4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"SIMD lets you apply the same funtion to multiple collections of data at once, but it must be synchronized. So if synchronizing and fetching all the data is slower than just operating sequentially, you've done something very foolish."}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"bfc1c813-42a0-47d4-98c8-5a305a43a9fb","type":"message","text":"Maybe a really bad implementation is a stochastic one where you sample indices (i, j) uniformly randomly from (1:n) x (1:n) and compute C[i, j] = dot(A[i, 1:n], B[1:n, j])","user":"U6N6VQE30","ts":"1608073983.263600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C6i4O","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe a really bad implementation is a stochastic one where you sample indices (i, j) uniformly randomly from (1:n) x (1:n) and compute C[i, j] = dot(A[i, 1:n], B[1:n, j])"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746","reactions":[{"name":"+1","users":["U6A936746"],"count":1}]},{"client_msg_id":"e6f68cc8-adcc-4654-903e-a24a6d5fa49e","type":"message","text":"The bogosort of gemm","user":"U6N6VQE30","ts":"1608074107.263900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gb8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The bogosort of gemm"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"76852892-3566-4d6e-9f91-f09d8d98b335","type":"message","text":"Oh yeah, I forgot that `rand` doesn't allocate, that's pretty good. You'd need to remember which indices you've already calculated though. I guess you could do it in a Tuple, but if the tuple gets too big you'll end up allocating.","user":"U8D9768Q6","ts":"1608074212.264100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XiWA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh yeah, I forgot that "},{"type":"text","text":"rand","style":{"code":true}},{"type":"text","text":" doesn't allocate, that's pretty good. You'd need to remember which indices you've already calculated though. I guess you could do it in a Tuple, but if the tuple gets too big you'll end up allocating."}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"type":"message","subtype":"thread_broadcast","text":"I made a Matmul Reverse Performance competition thread here: <https://julialang.zulipchat.com/#narrow/stream/137791-general/topic/Matmul.20reverse.20performance.20competition>","user":"U8D9768Q6","ts":"1608074247.264300","thread_ts":"1608070581.252100","root":{"client_msg_id":"2a354011-2904-4995-a4d0-6e77f7126de1","type":"message","text":"Today in Dex bugs: matmul was taking 85s to multiply two 500x500 matrixes.","user":"U6A936746","ts":"1608070581.252100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uyzx8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Today in Dex bugs: matmul was taking 85s to multiply two 500x500 matrixes."}]}]}],"thread_ts":"1608070581.252100","reply_count":40,"reply_users_count":7,"latest_reply":"1608133153.290800","reply_users":["U6795JH6H","U6A936746","UH24GRBLL","U8D9768Q6","U6N6VQE30","U674T3KB3","U01CQTKB86N"],"subscribed":false},"attachments":[{"service_name":"Zulip","title":"JuliaLang","title_link":"https://julialang.zulipchat.com/#narrow/stream/137791-general/topic/Matmul.20reverse.20performance.20competition","text":"This is the Zulip server for the Julia programming language community. We ask anyone joining to adhere to the Julia Code of Conduct. | To learn more about Julia, check out <https://julialang.org/>, or just come ask us here! | You can reach out to the admins of this Zulip by sending a direct message to @zulip-admins.","fallback":"Zulip: JuliaLang","thumb_url":"https://zulip-avatars.s3.amazonaws.com/7178/realm/icon.png?version=6","from_url":"https://julialang.zulipchat.com/#narrow/stream/137791-general/topic/Matmul.20reverse.20performance.20competition","thumb_width":100,"thumb_height":100,"id":1,"original_url":"https://julialang.zulipchat.com/#narrow/stream/137791-general/topic/Matmul.20reverse.20performance.20competition"}],"blocks":[{"type":"rich_text","block_id":"yUOm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I made a Matmul Reverse Performance competition thread here: "},{"type":"link","url":"https://julialang.zulipchat.com/#narrow/stream/137791-general/topic/Matmul.20reverse.20performance.20competition"}]}]}],"client_msg_id":"25786226-c661-45f7-bebe-495638fac537","reactions":[{"name":"+1","users":["U6A936746","U6QGE7S86"],"count":2}]},{"client_msg_id":"f628abda-ec2d-4016-98da-5041e6e0c6d2","type":"message","text":"You can initially fill the matrix with NaNs with payload to signal it is not computed yet :p","user":"U6N6VQE30","ts":"1608074270.264700","team":"T68168MUP","edited":{"user":"U6N6VQE30","ts":"1608074313.000000"},"blocks":[{"type":"rich_text","block_id":"EbMP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can initially fill the matrix with NaNs with payload to signal it is not computed yet :p"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746","reactions":[{"name":"joy","users":["U8D9768Q6","UD0NS8PDF","U6CJRSR63"],"count":3}]},{"client_msg_id":"c31af05b-4e3c-48a6-b8c6-a5344e843e52","type":"message","text":"That's fantastic.","user":"U8D9768Q6","ts":"1608074330.265200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pbz=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's fantastic."}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"1a444e32-a01f-4ec7-8855-e966b3d01b1c","type":"message","text":"What is the expected number of iterations?","user":"U6N6VQE30","ts":"1608074402.265400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fnX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What is the expected number of iterations?"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"fe5331b8-28c1-4969-a829-cde82f82884c","type":"message","text":"You're multiplying together two 500x500 arrays, so 500^3 iterations","user":"U8D9768Q6","ts":"1608074568.265700","team":"T68168MUP","edited":{"user":"U8D9768Q6","ts":"1608074597.000000"},"blocks":[{"type":"rich_text","block_id":"L0ck","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You're multiplying together two 500x500 arrays, so 500^3 iterations"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"5c79bed4-f56a-4781-ab7d-94ef1d722f3d","type":"message","text":"Here we go.\nIt was a bug in how it was generating code making it make a 4 loop matmul \n<https://github.com/google-research/dex-lang/issues/346#issuecomment-745636729|https://github.com/google-research/dex-lang/issues/346#issuecomment-745636729>","user":"U6A936746","ts":"1608076714.266100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dtyf8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Here we go.\nIt was a bug in how it was generating code making it make a 4 loop matmul \n"},{"type":"link","url":"https://github.com/google-research/dex-lang/issues/346#issuecomment-745636729","text":"https://github.com/google-research/dex-lang/issues/346#issuecomment-745636729"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"a6c177f4-ad2d-463d-8318-89ec47d22a13","type":"message","text":":wat:","user":"U674T3KB3","ts":"1608081625.267200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ilO","elements":[{"type":"rich_text_section","elements":[{"type":"emoji","name":"wat"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"d0d32594-5ccf-4f38-8818-ddd4d0aa0d9a","type":"message","text":"I guess you could call Python to reverse-speedup it?","user":"U01CQTKB86N","ts":"1608105101.276200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xLyfb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess you could call Python to reverse-speedup it?"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"},{"client_msg_id":"1F80F5F0-03AF-44B2-B325-783B67FDD00E","type":"message","text":"That would allocate","user":"U8D9768Q6","ts":"1608133153.290800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mUwrQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That would allocate"}]}]}],"thread_ts":"1608070581.252100","parent_user_id":"U6A936746"}]