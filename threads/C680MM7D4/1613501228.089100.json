[{"client_msg_id":"128f2243-a866-43cc-a57e-9723a54b2eb1","type":"message","text":"Maps, broadcasts, list comprehension. They can all be technically used for the same thing so which do you guys prefer to use?\n\nI personally prefer `map` for functions, because its nice and explicit; and `broadcast` for operators because it looks nice. I rarely try and use list comprehensions.\n\nAlso on a related note, why is `broadcast` slightly faster than `map` on my PC?","user":"U01FAHWCMFF","ts":"1613501228.089100","team":"T68168MUP","edited":{"user":"U01FAHWCMFF","ts":"1613501635.000000"},"blocks":[{"type":"rich_text","block_id":"7/q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maps, broadcasts, list comprehension. They can all be technically used for the same thing so which do you guys prefer to use?\n\nI personally prefer "},{"type":"text","text":"map","style":{"code":true}},{"type":"text","text":" for functions, because its nice and explicit; and "},{"type":"text","text":"broadcast","style":{"code":true}},{"type":"text","text":" for operators because it looks nice. I rarely try and use list comprehensions.\n\nAlso on a related note, why is "},{"type":"text","text":"broadcast","style":{"code":true}},{"type":"text","text":" slightly faster than "},{"type":"text","text":"map","style":{"code":true}},{"type":"text","text":" on my PC?"}]}]}],"thread_ts":"1613501228.089100","reply_count":4,"reply_users_count":4,"latest_reply":"1613536968.108500","reply_users":["U019K6Q9N15","U7HAYKY9X","UN97XTLCV","U01EF0QVAB0"],"subscribed":false},{"client_msg_id":"d002c969-774f-4921-bd65-97ef4499f281","type":"message","text":"Maps are explicit and functorial. I think that they are really important for readability when one is transforming inherently multi-dimensional data.\n\nWhen one is just working with a business-domain lists, a broadcast can be short and sweet.\n\nDetest comprehensions. Pythonic slog alternative to a well-established functional convention.","user":"U019K6Q9N15","ts":"1613503142.092100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Jn337","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maps are explicit and functorial. I think that they are really important for readability when one is transforming inherently multi-dimensional data.\n\nWhen one is just working with a business-domain lists, a broadcast can be short and sweet.\n\nDetest comprehensions. Pythonic slog alternative to a well-established functional convention."}]}]}],"thread_ts":"1613501228.089100","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"554d15ab-12e5-455e-8740-1e6b37487e32","type":"message","text":"I like comprehensions because they are so literal. \"[x+1 for x in xs]\" does exactly what it says on the tin. Map is super cool too, I usually use it with the pipe operator. Broadcasting is nice for numerical array ops, but that's a minority of what I do.","user":"U7HAYKY9X","ts":"1613504798.098000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MOoi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I like comprehensions because they are so literal. \"[x+1 for x in xs]\" does exactly what it says on the tin. Map is super cool too, I usually use it with the pipe operator. Broadcasting is nice for numerical array ops, but that's a minority of what I do."}]}]}],"thread_ts":"1613501228.089100","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"eb3d9f23-18eb-485d-bc9b-28c08ef547c1","type":"message","text":"_generator_ comprehensions are amazing for writing something like\n```reduce(hcat, i for i in 1:3)```\ntrivial. list comps are just the parser pushing the generator through `vcat` using its `[` and `]` array literal syntax. So I guess its kind of like list comps are “free” for having generator comps and array literal syntax haha\n\nmore realistic example:\n```sum(xi * yi for xi in xs, yi in ys)```\nyes I know it’s just `dot` but generators work in a lot of places and make allocation-free programming a bit easier for sure\none i’ve used in package code:\n```@test all(test_calc(ai, bi, ci) for ai in as, bi in bs, ci in cs)```","user":"UN97XTLCV","ts":"1613509608.101500","team":"T68168MUP","edited":{"user":"UN97XTLCV","ts":"1613510400.000000"},"blocks":[{"type":"rich_text","block_id":"vliI2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"generator","style":{"italic":true}},{"type":"text","text":" comprehensions are amazing for writing something like\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"reduce(hcat, i for i in 1:3)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"trivial. list comps are just the parser pushing the generator through "},{"type":"text","text":"vcat","style":{"code":true}},{"type":"text","text":" using its "},{"type":"text","text":"[","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"]","style":{"code":true}},{"type":"text","text":" array literal syntax. So I guess its kind of like list comps are “free” for having generator comps and array literal syntax haha\n\nmore realistic example:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"sum(xi * yi for xi in xs, yi in ys)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"yes I know it’s just "},{"type":"text","text":"dot","style":{"code":true}},{"type":"text","text":" but generators work in a lot of places and make allocation-free programming a bit easier for sure\none i’ve used in package code:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@test all(test_calc(ai, bi, ci) for ai in as, bi in bs, ci in cs)"}]}]}],"thread_ts":"1613501228.089100","parent_user_id":"U01FAHWCMFF"},{"client_msg_id":"8287547a-fded-4bc3-a02b-37d01eca9031","type":"message","text":"Coming from an R background I often can't stand list comps and I like the . as well as map","user":"U01EF0QVAB0","ts":"1613536968.108500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"81Rht","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Coming from an R background I often can't stand list comps and I like the . as well as map"}]}]}],"thread_ts":"1613501228.089100","parent_user_id":"U01FAHWCMFF"}]