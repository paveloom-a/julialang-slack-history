[{"client_msg_id":"07bfe02b-2ee4-4abc-b7ba-45955cd64208","type":"message","text":"Hi, just met with a question, seems that the LSTM of Flux only support 1-dimension input. It's okay to take `[t1 t2 t3]` as a time-series data. Is that possible to input an array of array like `[[t11 t12] [t21 t22] [t31 t32]]` to a LSTM of Flux?","user":"U01977X150R","ts":"1616684673.044300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HOPp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi, just met with a question, seems that the LSTM of Flux only support 1-dimension input. It's okay to take"},{"type":"text","text":" [t1 t2 t3] ","style":{"code":true}},{"type":"text","text":"as a time-series data. Is that possible to input an array of array like "},{"type":"text","text":"[[t11 t12] [t21 t22] [t31 t32]]","style":{"code":true}},{"type":"text","text":" to a LSTM of Flux?"}]}]}],"thread_ts":"1616684673.044300","reply_count":5,"reply_users_count":2,"latest_reply":"1616697728.051400","reply_users":["U01724Q3PGW","U01977X150R"],"is_locked":false,"subscribed":false},{"client_msg_id":"5cdc1af4-46f2-4238-a3c2-8cb80e0383df","type":"message","text":"When you say 1-D I put, what is the second dimension you wish to add?","user":"U01724Q3PGW","ts":"1616695433.050600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1HjW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"When you say 1-D I put, what is the second dimension you wish to add?"}]}]}],"thread_ts":"1616684673.044300","parent_user_id":"U01977X150R"},{"client_msg_id":"73b3939a-c5de-4d91-9140-baa760b00c84","type":"message","text":"Hi, Andrew. In my example, dimension just represents the feature number at any specific timestamp. 1-D means only one feature while 2-D here means I have 2 features for any timestamps.","user":"U01977X150R","ts":"1616696196.050800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZP5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi, Andrew. In my example, dimension just represents the feature number at any specific timestamp. 1-D means only one feature while 2-D here means I have 2 features for any timestamps."}]}]}],"thread_ts":"1616684673.044300","parent_user_id":"U01977X150R"},{"client_msg_id":"461c7f48-f9ac-4530-af4a-0c649937b7c9","type":"message","text":"Unless I'm misunderstanding something, I think this is supported? If I have 19 signals that I view at each time step, and I have 5 time steps... Is that what you're saying?","user":"U01724Q3PGW","ts":"1616696834.051000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oV1a","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Unless I'm misunderstanding something, I think this is supported? If I have 19 signals that I view at each time step, and I have 5 time steps... Is that what you're saying?"}]}]}],"thread_ts":"1616684673.044300","parent_user_id":"U01977X150R"},{"client_msg_id":"712f4a49-556d-48bd-9cae-399594bfa03b","type":"message","text":"There's also batch dimension","user":"U01724Q3PGW","ts":"1616696983.051200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ls=N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There's also batch dimension"}]}]}],"thread_ts":"1616684673.044300","parent_user_id":"U01977X150R"},{"client_msg_id":"9c44ff50-3c17-4719-b2f7-f5026a710b20","type":"message","text":"Yep, that's what I'm looking for. From the document, a general structure of LSTM cell is `LSTM(*in*::Integer, out::Integer)` . If I have `5` time steps of `19`signals, then the input shape should be like `19*5`, suppose now I wanna predict the signal at time step 6,  a `LSTM(5,1)` might return a `19*1` prediction, what if my final prediction is a function of all 19 signals, then I'm not sure whether it's okay to directly broadcast the LSTM to the whole vector and then calculate the final prediction with output of LSTM.","user":"U01977X150R","ts":"1616697728.051400","team":"T68168MUP","edited":{"user":"U01977X150R","ts":"1616698860.000000"},"blocks":[{"type":"rich_text","block_id":"YX4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yep, that's what I'm looking for. From the document, a general structure of LSTM cell is "},{"type":"text","text":"LSTM(","style":{"code":true}},{"type":"text","text":"in","style":{"bold":true,"code":true}},{"type":"text","text":"::Integer, out::Integer)","style":{"code":true}},{"type":"text","text":" . If I have "},{"type":"text","text":"5","style":{"code":true}},{"type":"text","text":" time steps of "},{"type":"text","text":"19","style":{"code":true}},{"type":"text","text":"signals, then the input shape should be like "},{"type":"text","text":"19*5","style":{"code":true}},{"type":"text","text":", suppose now I wanna predict the signal at time step 6,  a "},{"type":"text","text":"LSTM(5,1)","style":{"code":true}},{"type":"text","text":" might return a "},{"type":"text","text":"19*1 ","style":{"code":true}},{"type":"text","text":"prediction, what if my final prediction is a function of all 19 signals, then I'm not sure whether it's okay to directly broadcast the LSTM to the whole vector and then calculate the final prediction with output of LSTM."}]}]}],"thread_ts":"1616684673.044300","parent_user_id":"U01977X150R"}]