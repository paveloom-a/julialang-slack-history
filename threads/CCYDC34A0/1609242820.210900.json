[{"client_msg_id":"963f39b5-342e-4945-b1bb-68f86093aa8e","type":"message","text":"Hi all. Quick question. How can I quickly test out whether I've made a mistake in my model definition? Currently, I'm using the NUTS sampler with as few as 4 samples, but it takes ages (infinite maybe) since it keeps rejecting proposals.","user":"U01BTNDCUBX","ts":"1609242820.210900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MRP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi all. Quick question. How can I quickly test out whether I've made a mistake in my model definition? Currently, I'm using the NUTS sampler with as few as 4 samples, but it takes ages (infinite maybe) since it keeps rejecting proposals."}]}]}],"thread_ts":"1609242820.210900","reply_count":9,"reply_users_count":4,"latest_reply":"1609262237.213300","reply_users":["U01BTNDCUBX","U8T9JUA5R","U01H36BUDJB","UHDNY2YMA"],"subscribed":false},{"client_msg_id":"9267f90e-d559-4d1a-a810-f9c299174361","type":"message","text":"In other words, is there a way to guarantee that the chain will stop after a few minutes because killing the Julia process and restarting it again takes quite long","user":"U01BTNDCUBX","ts":"1609242939.211200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZZ3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In other words, is there a way to guarantee that the chain will stop after a few minutes because killing the Julia process and restarting it again takes quite long"}]}]}],"thread_ts":"1609242820.210900","parent_user_id":"U01BTNDCUBX"},{"client_msg_id":"8fc08ffd-6d30-4920-be32-12c19c8e1381","type":"message","text":"You can use `Turing.VarInfo(model)` to check if it is possible to sample from the prior in a reasonable amount of time","user":"U8T9JUA5R","ts":"1609243836.211400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"J8vz2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can use "},{"type":"text","text":"Turing.VarInfo(model)","style":{"code":true}},{"type":"text","text":" to check if it is possible to sample from the prior in a reasonable amount of time"}]}]}],"thread_ts":"1609242820.210900","parent_user_id":"U01BTNDCUBX"},{"client_msg_id":"41994c0a-c2c3-4e3b-89f7-58a58cbed88d","type":"message","text":"Additionally, you can inspect type stability according to the instructions here: <https://turing.ml/dev/docs/using-turing/performancetips#ensure-that-types-in-your-model-can-be-inferred>","user":"U8T9JUA5R","ts":"1609243877.211600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"btTSN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Additionally, you can inspect type stability according to the instructions here: "},{"type":"link","url":"https://turing.ml/dev/docs/using-turing/performancetips#ensure-that-types-in-your-model-can-be-inferred"}]}]}],"thread_ts":"1609242820.210900","parent_user_id":"U01BTNDCUBX"},{"client_msg_id":"88bc79a9-ce21-40d8-859e-d56e93a0c5f1","type":"message","text":"Might also want to try a less expensive sampler like Metropolis-Hastings just to help debug and see if there's something wrong.","user":"U01H36BUDJB","ts":"1609245242.211900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mLhmJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Might also want to try a less expensive sampler like Metropolis-Hastings just to help debug and see if there's something wrong."}]}]}],"thread_ts":"1609242820.210900","parent_user_id":"U01BTNDCUBX"},{"client_msg_id":"162b712c-0d13-407a-996a-85cb3a0d5950","type":"message","text":"Awesome, MH shows nonsense output (as expected) in a few seconds.\n\n<@U8T9JUA5R>I've tried to debug via Turing.VarInfo, but I don't know exactly where to look for in\n```DynamicPPL.VarInfo{NamedTuple{(:α, :β),Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α,Tuple{}},Int64},Array{Normal{Float64},1},Array{DynamicPPL.VarName{:α,Tuple{}},1},Array{Float64,1},Array{Set{DynamicPPL.Selector},1}},DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:β,Tuple{}},Int64},Array{Normal{Float64},1},Array{DynamicPPL.VarName{:β,Tuple{}},1},Array{Float64,1},Array{Set{DynamicPPL.Selector},1}}}},Float64}((α = DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α,Tuple{}},Int64},Array{Normal{Float64},1},Array{DynamicPPL.VarName{:α,Tuple{}},1},Array{Float64,1},Array{Set{DynamicPPL.Selector},1}}(Dict(α =&gt; 1), [α], UnitRange{Int64}[1:1], [106.79107426035777], Normal{Float64}[Normal{Float64}(μ=100.0, σ=10.0)], Set{DynamicPPL.Selector}[Set()], [0], Dict{String,BitArray{1}}(\"del\" =&gt; [0],\"trans\" =&gt; [0])), β = DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:β,Tuple{}},Int64},Array{Normal{Float64},1},Array{DynamicPPL.VarName{:β,Tuple{}},1},Array{Float64,1},Array{Set{DynamicPPL.Selector},1}}(Dict(β =&gt; 1), [β], UnitRange{Int64}[1:1], [8.28413482900036], Normal{Float64}[Normal{Float64}(μ=0.0, σ=10.0)], Set{DynamicPPL.Selector}[Set()], [0], Dict{String,BitArray{1}}(\"del\" =&gt; [0],\"trans\" =&gt; [0]))), Base.RefValue{Float64}(-Inf), Base.RefValue{Int64}(1))```\nSo, if I would manage to fix the type stability issues, then the model should finish irregardless of how poorly it is defined?","user":"U01BTNDCUBX","ts":"1609245627.212100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Z01hk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Awesome, MH shows nonsense output (as expected) in a few seconds.\n\n"},{"type":"user","user_id":"U8T9JUA5R"},{"type":"text","text":"I've tried to debug via Turing.VarInfo, but I don't know exactly where to look for in\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"DynamicPPL.VarInfo{NamedTuple{(:α, :β),Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α,Tuple{}},Int64},Array{Normal{Float64},1},Array{DynamicPPL.VarName{:α,Tuple{}},1},Array{Float64,1},Array{Set{DynamicPPL.Selector},1}},DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:β,Tuple{}},Int64},Array{Normal{Float64},1},Array{DynamicPPL.VarName{:β,Tuple{}},1},Array{Float64,1},Array{Set{DynamicPPL.Selector},1}}}},Float64}((α = DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:α,Tuple{}},Int64},Array{Normal{Float64},1},Array{DynamicPPL.VarName{:α,Tuple{}},1},Array{Float64,1},Array{Set{DynamicPPL.Selector},1}}(Dict(α => 1), [α], UnitRange{Int64}[1:1], [106.79107426035777], Normal{Float64}[Normal{Float64}(μ=100.0, σ=10.0)], Set{DynamicPPL.Selector}[Set()], [0], Dict{String,BitArray{1}}(\"del\" => [0],\"trans\" => [0])), β = DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:β,Tuple{}},Int64},Array{Normal{Float64},1},Array{DynamicPPL.VarName{:β,Tuple{}},1},Array{Float64,1},Array{Set{DynamicPPL.Selector},1}}(Dict(β => 1), [β], UnitRange{Int64}[1:1], [8.28413482900036], Normal{Float64}[Normal{Float64}(μ=0.0, σ=10.0)], Set{DynamicPPL.Selector}[Set()], [0], Dict{String,BitArray{1}}(\"del\" => [0],\"trans\" => [0]))), Base.RefValue{Float64}(-Inf), Base.RefValue{Int64}(1))"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"So, if I would manage to fix the type stability issues, then the model should finish irregardless of how poorly it is defined?"}]}]}],"thread_ts":"1609242820.210900","parent_user_id":"U01BTNDCUBX"},{"client_msg_id":"ea873a57-8690-4b80-adb2-b9f0f1fa7cc7","type":"message","text":"If the `VarInfo` call succeeds (which it did it seems) it just shows that you can sample from the prior. There's nothing you can/should debug here.","user":"U8T9JUA5R","ts":"1609246562.212300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fD4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If the "},{"type":"text","text":"VarInfo","style":{"code":true}},{"type":"text","text":" call succeeds (which it did it seems) it just shows that you can sample from the prior. There's nothing you can/should debug here."}]}]}],"thread_ts":"1609242820.210900","parent_user_id":"U01BTNDCUBX","reactions":[{"name":"this-is-true","users":["U01BTNDCUBX"],"count":1},{"name":"smile","users":["U01BTNDCUBX"],"count":1}]},{"client_msg_id":"cb59bcec-f585-4f87-a289-189648d64e61","type":"message","text":"Sampling should work regardless of type stability issues. It will just be (much) slower if your code is type unstable - as it's the case for any Julia function.","user":"U8T9JUA5R","ts":"1609246629.212500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JORt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sampling should work regardless of type stability issues. It will just be (much) slower if your code is type unstable - as it's the case for any Julia function."}]}]}],"thread_ts":"1609242820.210900","parent_user_id":"U01BTNDCUBX"},{"client_msg_id":"f692aea4-90f4-47ab-9e4e-d01a7f6b95e0","type":"message","text":"Okay, check. Thanks both for the help","user":"U01BTNDCUBX","ts":"1609246778.213100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GKcC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Okay, check. Thanks both for the help"}]}]}],"thread_ts":"1609242820.210900","parent_user_id":"U01BTNDCUBX"},{"client_msg_id":"5fc2abb7-d87f-4928-9090-86ee3d0030a5","type":"message","text":"You can also just call your model, e.g. `m = model(args...); m()` to check if you can sample from its prior (might be easier to remember than `VarInfo`)","user":"UHDNY2YMA","ts":"1609262237.213300","team":"T68168MUP","edited":{"user":"UHDNY2YMA","ts":"1609262243.000000"},"blocks":[{"type":"rich_text","block_id":"GJl2c","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can also just call your model, e.g. "},{"type":"text","text":"m = model(args...); m()","style":{"code":true}},{"type":"text","text":" to check if you can sample from its prior (might be easier to remember than "},{"type":"text","text":"VarInfo","style":{"code":true}},{"type":"text","text":")"}]}]}],"thread_ts":"1609242820.210900","parent_user_id":"U01BTNDCUBX"}]