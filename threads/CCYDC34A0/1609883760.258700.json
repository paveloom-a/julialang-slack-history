[{"client_msg_id":"48f993db-3b91-4e61-a831-983951c4e64b","type":"message","text":"I am getting this error message:\n`ERROR: TypeError: in typeassert, expected Float64, got a value of type ForwardDiff.Dual{Nothing,Float64,5}`\nwhen trying to run\n`chn = sample(model(a, b, c, d), HMC(0.1, 5), Nstep)`\nIt seems to be coming from\n`function weights!(a, b, w)`\n    `p1, p2 = a`\n    `for i in 1:20`\n        `w[i] = 0.5*(1 + ((b[i] - p1)/p2))`\n    `end`\n`end`\nthat gets called from inside the model. Could this be happening because something is nondifferentiable in this function? If so, which part is it exactly?","user":"UPK2KJ95Y","ts":"1609883760.258700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NDH2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am getting this error message:\n"},{"type":"text","text":"ERROR: TypeError: in typeassert, expected Float64, got a value of type ForwardDiff.Dual{Nothing,Float64,5}","style":{"code":true}},{"type":"text","text":"\nwhen trying to run\n"},{"type":"text","text":"chn = sample(model(a, b, c, d), HMC(0.1, 5), Nstep)","style":{"code":true}},{"type":"text","text":"\nIt seems to be coming from\n"},{"type":"text","text":"function weights!(a, b, w)","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"    p1, p2 = a","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"    for i in 1:20","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"        w[i] = 0.5*(1 + ((b[i] - p1)/p2))","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"    end","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"end","style":{"code":true}},{"type":"text","text":"\nthat gets called from inside the model. Could this be happening because something is nondifferentiable in this function? If so, which part is it exactly?"}]}]}],"thread_ts":"1609883760.258700","reply_count":9,"reply_users_count":4,"latest_reply":"1609929376.272600","reply_users":["UH08DT0JU","UPK2KJ95Y","UC0SY9JFP","U8T9JUA5R"],"subscribed":false},{"client_msg_id":"2a2274a9-828a-4277-97a2-78c641fa6d98","type":"message","text":"I cannot say for certain based on the limited information you have provided, but most likely one of your variables needs to be initialized generically so that it can be a float or Dual. For example,  try something like\n```w = zeros(typeof(theta), n)```\nwhere theta is one of your parameters. you might need to do that for b as well","user":"UH08DT0JU","ts":"1609884224.258800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"u/uEe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I cannot say for certain based on the limited information you have provided, but most likely one of your variables needs to be initialized generically so that it can be a float or Dual. For example,  try something like\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"w = zeros(typeof(theta), n)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"where theta is one of your parameters. you might need to do that for b as well"}]}]}],"thread_ts":"1609883760.258700","parent_user_id":"UPK2KJ95Y"},{"client_msg_id":"507ec67b-d6c5-4a39-9d71-3e9d04b8ea54","type":"message","text":"Thanks! Below is a significantly simplified self-contained code that replicates the problem I have","user":"UPK2KJ95Y","ts":"1609895868.259000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YJ8o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks! Below is a significantly simplified self-contained code that replicates the problem I have"}]}]}],"thread_ts":"1609883760.258700","parent_user_id":"UPK2KJ95Y"},{"client_msg_id":"67dce1b7-1326-424d-9382-4381774b6ef3","type":"message","text":"`using Turing`\n\n`rprange = collect(range(0.1,30,length=31))`\n`rpmin = rprange[1:end-1]`\n`rpmax = rprange[2:end]`\n\n`NMbins = [5141181, 3795214, 2739591, 1782803, 1262850,  822732,  551119, 353990,  220015,  132850,   76394,   42184,   21126,    9761, 4016,    1318,     409,      83,      11,       3]`\n\n`logMbins = [12.29952517, 12.45307032, 12.60661547, 12.76016062, 12.91370577,`\n        `13.06725091, 13.22079606, 13.37434121, 13.52788636, 13.6814315 ,`\n        `13.83497665, 13.9885218 , 14.14206695, 14.29561209, 14.44915724,`\n        `14.60270239, 14.75624754, 14.90979269, 15.06333783, 15.21688298,`\n        `15.37042813]`\n\n`function weights(HOD, logMbins)`\n    `w = zeros(Float64, 20)`\n    `logMmin, sigma, alpha, logM0, logM1 = HOD`\n    `for i in 1:20`\n        `w[i] = 0.5*(1 + ((logMbins[i] - logMmin)/sigma))`\n    `end`\n    `return w`\n`end`\n\n`function MM_theory(HOD)`\n    `w = weights(HOD, logMbins)`\n    `rp_w = ones(30)`\n    `N = sum(w.*NMbins)`\n    `wp = N*sum(w)*rp_w`\n`end`\n\n`MM_measured = ones(30)`\n\n`function run_mcmc(Nstep)`\n\n    `@model function MM_model(MM)`\n        `a ~ Uniform(11, 14)`\n        `b ~ Uniform(0.001, 1.5)`\n        `c ~ Uniform(0, 2)`\n        `d ~ Uniform(11, 14)`\n        `e ~ Uniform(11.5, 15.5)`\n        `MM ~ MvNormal(MM_theory([a, b, c, d, e]), ones(30))`\n    `end`\n\n    `chn = sample(MM_model(MM_measured), HMC(0.1, 5), Nstep)`\n\n`end`","user":"UPK2KJ95Y","ts":"1609895882.259200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qLIg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"using Turing","style":{"code":true}},{"type":"text","text":"\n\n"},{"type":"text","text":"rprange = collect(range(0.1,30,length=31))","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"rpmin = rprange[1:end-1]","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"rpmax = rprange[2:end]","style":{"code":true}},{"type":"text","text":"\n\n"},{"type":"text","text":"NMbins = [5141181, 3795214, 2739591, 1782803, 1262850,  822732,  551119, 353990,  220015,  132850,   76394,   42184,   21126,    9761, 4016,    1318,     409,      83,      11,       3]","style":{"code":true}},{"type":"text","text":"\n\n"},{"type":"text","text":"logMbins = [12.29952517, 12.45307032, 12.60661547, 12.76016062, 12.91370577,","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"        13.06725091, 13.22079606, 13.37434121, 13.52788636, 13.6814315 ,","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"        13.83497665, 13.9885218 , 14.14206695, 14.29561209, 14.44915724,","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"        14.60270239, 14.75624754, 14.90979269, 15.06333783, 15.21688298,","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"        15.37042813]","style":{"code":true}},{"type":"text","text":"\n\n"},{"type":"text","text":"function weights(HOD, logMbins)","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"    w = zeros(Float64, 20)","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"    logMmin, sigma, alpha, logM0, logM1 = HOD","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"    for i in 1:20","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"        w[i] = 0.5*(1 + ((logMbins[i] - logMmin)/sigma))","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"    end","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"    return w","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"end","style":{"code":true}},{"type":"text","text":"\n\n"},{"type":"text","text":"function MM_theory(HOD)","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"    w = weights(HOD, logMbins)","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"    rp_w = ones(30)","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"    N = sum(w.*NMbins)","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"    wp = N*sum(w)*rp_w","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"end","style":{"code":true}},{"type":"text","text":"\n\n"},{"type":"text","text":"MM_measured = ones(30)","style":{"code":true}},{"type":"text","text":"\n\n"},{"type":"text","text":"function run_mcmc(Nstep)","style":{"code":true}},{"type":"text","text":"\n\n"},{"type":"text","text":"    @model function MM_model(MM)","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"        a ~ Uniform(11, 14)","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"        b ~ Uniform(0.001, 1.5)","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"        c ~ Uniform(0, 2)","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"        d ~ Uniform(11, 14)","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"        e ~ Uniform(11.5, 15.5)","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"        MM ~ MvNormal(MM_theory([a, b, c, d, e]), ones(30))","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"    end","style":{"code":true}},{"type":"text","text":"\n\n"},{"type":"text","text":"    chn = sample(MM_model(MM_measured), HMC(0.1, 5), Nstep)","style":{"code":true}},{"type":"text","text":"\n\n"},{"type":"text","text":"end","style":{"code":true}}]}]}],"thread_ts":"1609883760.258700","parent_user_id":"UPK2KJ95Y"},{"client_msg_id":"1c4d4ff1-edc6-4e07-b36a-02504bf60d6b","type":"message","text":"It's this line: `w[i] = 0.5*(1 + ((logMbins[i] - logMmin)/sigma))`","user":"UPK2KJ95Y","ts":"1609895910.259400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GKa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's this line: "},{"type":"text","text":"w[i] = 0.5*(1 + ((logMbins[i] - logMmin)/sigma))","style":{"code":true}}]}]}],"thread_ts":"1609883760.258700","parent_user_id":"UPK2KJ95Y"},{"client_msg_id":"424fd7f7-4d0d-44a9-8a1e-011e9220fa73","type":"message","text":"That seems to be problematic","user":"UPK2KJ95Y","ts":"1609895914.259600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+w3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That seems to be problematic"}]}]}],"thread_ts":"1609883760.258700","parent_user_id":"UPK2KJ95Y"},{"client_msg_id":"a3c59e70-d24b-47b5-996a-6788222a74c3","type":"message","text":"If I replace it by e.g. `w[i] = 1` everything works.","user":"UPK2KJ95Y","ts":"1609896035.259800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MUKez","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If I replace it by e.g. "},{"type":"text","text":"w[i] = 1","style":{"code":true}},{"type":"text","text":" everything works."}]}]}],"thread_ts":"1609883760.258700","parent_user_id":"UPK2KJ95Y"},{"client_msg_id":"CE5B1401-F1E1-49C4-867B-E3B2357FD3E6","type":"message","text":"Could you please use a multi line codeblock for your example? ","user":"UC0SY9JFP","ts":"1609918921.267500","team":"T68168MUP","edited":{"user":"UC0SY9JFP","ts":"1609918941.000000"},"blocks":[{"type":"rich_text","block_id":"WQ8mf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Could you please use a multi line codeblock for your example? "}]}]}],"thread_ts":"1609883760.258700","parent_user_id":"UPK2KJ95Y"},{"client_msg_id":"3bc68e72-fe2a-4e46-bbea-b3cf370fcf8e","type":"message","text":"As <@UH08DT0JU> assumed above, the problem is how you define `w`. Either use the suggestion above and base its type on the types of your inputs or just replace the for loop with a broadcast operation and don't preallocate `w`, ie. use something like `w = @. 0.5*(...)`.","user":"U8T9JUA5R","ts":"1609929211.272400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dvac","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"As "},{"type":"user","user_id":"UH08DT0JU"},{"type":"text","text":" assumed above, the problem is how you define "},{"type":"text","text":"w","style":{"code":true}},{"type":"text","text":". Either use the suggestion above and base its type on the types of your inputs or just replace the for loop with a broadcast operation and don't preallocate "},{"type":"text","text":"w","style":{"code":true}},{"type":"text","text":", ie. use something like "},{"type":"text","text":"w = @. 0.5*(...)","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1609883760.258700","parent_user_id":"UPK2KJ95Y"},{"client_msg_id":"f64f55c4-1c60-4b83-91de-1114a12bf854","type":"message","text":"I would also suggest to either make your global variables constant or pass them to the functions. If you use non-constant global variables inside of functions (\"close over them\"), then the compiler does not have any guarantees on their types and usually the code is very slow.","user":"U8T9JUA5R","ts":"1609929376.272600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/8Dj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I would also suggest to either make your global variables constant or pass them to the functions. If you use non-constant global variables inside of functions (\"close over them\"), then the compiler does not have any guarantees on their types and usually the code is very slow."}]}]}],"thread_ts":"1609883760.258700","parent_user_id":"UPK2KJ95Y"}]