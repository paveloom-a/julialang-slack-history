[{"client_msg_id":"422a66f7-a1af-40ff-b02d-7a2722c20171","type":"message","text":"What is the best way to encode parameter interdependendence in a Turing. ? E.g. paramerter bounds are dependent on a second parameter. The parameter part of my models looks like this at the moment, basically just rejecting any sample which doesn't satisfy the conditions by add `-Inf` to `logprob` but that doesn't seem a particular efficient nor elegant way of doing it.\n\n```@model function _turing_model(data::NamedTuple, ode_prob::ODEProblem, solver, priors::NamedTuple, sim::Bool=false, logp::Bool=false; ode_args = (;))\n\t### priors\n    p_preDCbm ~ priors.p_preDCbm\n    p_cDC1bm ~ priors.p_cDC1bm\n    p_cDC2bm ~ priors.p_cDC2bm\n    δ_preDCb ~ Uniform(0.0,2.0)\n    λ_cDC1 ~ Uniform(0.0,2.0)\n    λ_cDC2 ~ Uniform(0.0,2.0)\n    Δ_cDC2bm ~ Uniform(0.0,2.0)\n    Δ_cDC2b ~ Uniform(0.0,2.0)\n    σ1 ~ TruncatedNormal(0.0, 1.0, 0.0,Inf)\n    σ2 ~ TruncatedNormal(0.0, 1.0, 0.0,Inf)\n    σ3 ~ TruncatedNormal(0.0, 1.0, 0.0,Inf)\n\n    λ_preDC = (Δ_cDC2b + δ_preDCb) / data.R.RpreDC\n\n\t### parameter constraints\n\tif p_preDCbm ≤ (λ_preDC + Δ_cDC2bm)\n\t\tTuring.@addlogprob! -Inf\n\t\treturn\n\telseif λ_cDC1 ≥ p_cDC1bm\n\t\tTuring.@addlogprob! -Inf\n\t\treturn\n\telseif λ_cDC2 ≥ p_cDC2bm + Δ_cDC2bm * data.R.RpreDC_cDC2_bm\n\t \tTuring.@addlogprob! -Inf\n\t \treturn\n\tend\n\n    ### compound parameter\n    δ_preDCbm = p_preDCbm - λ_preDC - Δ_cDC2bm\n    δ_cDC1bm = p_cDC1bm - λ_cDC1\n    δ_cDC2bm = p_cDC2bm + Δ_cDC2bm * data.R.RpreDC_cDC2_bm - λ_cDC2\n    δ_cDC1b = λ_cDC1 * data.R.RcDC1\n    δ_cDC2b = λ_cDC2 * data.R.RcDC2 + Δ_cDC2b * data.R.RpreDC_cDC2_blood\n\n    ### parameter vector\n    theta = [p_preDCbm, δ_preDCbm, p_cDC1bm, δ_cDC1bm, p_cDC2bm, δ_cDC2bm, δ_preDCb, δ_cDC1b, δ_cDC2b, λ_preDC, λ_cDC1, λ_cDC2, Δ_cDC2bm, Δ_cDC2b]\n\n...\nend```","user":"UGFMDAMC3","ts":"1614967762.071300","team":"T68168MUP","edited":{"user":"UGFMDAMC3","ts":"1614968023.000000"},"blocks":[{"type":"rich_text","block_id":"A+BE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What is the best way to encode parameter interdependendence in a Turing. ? E.g. paramerter bounds are dependent on a second parameter. The parameter part of my models looks like this at the moment, basically just rejecting any sample which doesn't satisfy the conditions by add "},{"type":"text","text":"-Inf","style":{"code":true}},{"type":"text","text":" to "},{"type":"text","text":"logprob","style":{"code":true}},{"type":"text","text":" but that doesn't seem a particular efficient nor elegant way of doing it.\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@model function _turing_model(data::NamedTuple, ode_prob::ODEProblem, solver, priors::NamedTuple, sim::Bool=false, logp::Bool=false; ode_args = (;))\n\t### priors\n    p_preDCbm ~ priors.p_preDCbm\n    p_cDC1bm ~ priors.p_cDC1bm\n    p_cDC2bm ~ priors.p_cDC2bm\n    δ_preDCb ~ Uniform(0.0,2.0)\n    λ_cDC1 ~ Uniform(0.0,2.0)\n    λ_cDC2 ~ Uniform(0.0,2.0)\n    Δ_cDC2bm ~ Uniform(0.0,2.0)\n    Δ_cDC2b ~ Uniform(0.0,2.0)\n    σ1 ~ TruncatedNormal(0.0, 1.0, 0.0,Inf)\n    σ2 ~ TruncatedNormal(0.0, 1.0, 0.0,Inf)\n    σ3 ~ TruncatedNormal(0.0, 1.0, 0.0,Inf)\n\n    λ_preDC = (Δ_cDC2b + δ_preDCb) / data.R.RpreDC\n\n\t### parameter constraints\n\tif p_preDCbm ≤ (λ_preDC + Δ_cDC2bm)\n\t\tTuring.@addlogprob! -Inf\n\t\treturn\n\telseif λ_cDC1 ≥ p_cDC1bm\n\t\tTuring.@addlogprob! -Inf\n\t\treturn\n\telseif λ_cDC2 ≥ p_cDC2bm + Δ_cDC2bm * data.R.RpreDC_cDC2_bm\n\t \tTuring.@addlogprob! -Inf\n\t \treturn\n\tend\n\n    ### compound parameter\n    δ_preDCbm = p_preDCbm - λ_preDC - Δ_cDC2bm\n    δ_cDC1bm = p_cDC1bm - λ_cDC1\n    δ_cDC2bm = p_cDC2bm + Δ_cDC2bm * data.R.RpreDC_cDC2_bm - λ_cDC2\n    δ_cDC1b = λ_cDC1 * data.R.RcDC1\n    δ_cDC2b = λ_cDC2 * data.R.RcDC2 + Δ_cDC2b * data.R.RpreDC_cDC2_blood\n\n    ### parameter vector\n    theta = [p_preDCbm, δ_preDCbm, p_cDC1bm, δ_cDC1bm, p_cDC2bm, δ_cDC2bm, δ_preDCb, δ_cDC1b, δ_cDC2b, λ_preDC, λ_cDC1, λ_cDC2, Δ_cDC2bm, Δ_cDC2b]\n\n...\nend"}]}]}],"thread_ts":"1614967762.071300","reply_count":74,"reply_users_count":5,"latest_reply":"1615764770.133500","reply_users":["U9JNHB83X","U85JBUGGP","UGFMDAMC3","U69BL50BF","UHDNY2YMA"],"subscribed":false},{"client_msg_id":"84bc87ca-c880-48be-945b-09fc3e0e7d88","type":"message","text":"We don't support stochastic bounds yet I think, so I suspect this'll have to be sufficient for now","user":"U9JNHB83X","ts":"1614988737.072700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yZJU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We don't support stochastic bounds yet I think, so I suspect this'll have to be sufficient for now"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"3b7611ef-200f-4159-ac9e-d742eb99eb7b","type":"message","text":"you can write your own distribution to do that though","user":"U85JBUGGP","ts":"1615022531.072900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"s9u7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can write your own distribution to do that though"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"7940feb8-8d4f-40ee-a0f9-ebd34375ad3f","type":"message","text":"<https://github.com/TuringLang/Turing.jl/issues/1270>","user":"U85JBUGGP","ts":"1615022611.073200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eC2G","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/TuringLang/Turing.jl/issues/1270"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"6c33c713-5aea-4226-8eb1-25e7fd331b2c","type":"message","text":"thanks i will take a closer look at that and might come back with some questions. btw are you still planning for a general implementation in DynamicPPL?","user":"UGFMDAMC3","ts":"1615023389.073400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"m0j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thanks i will take a closer look at that and might come back with some questions. btw are you still planning for a general implementation in DynamicPPL?"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"fd01071a-a798-4e53-bb5b-76ec82634148","type":"message","text":"not at the moment","user":"U85JBUGGP","ts":"1615024876.073600","team":"T68168MUP","edited":{"user":"U85JBUGGP","ts":"1615024887.000000"},"blocks":[{"type":"rich_text","block_id":"rly","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not at the moment"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"97425256-436d-4e71-91b6-3cbb0a1e4f44","type":"message","text":"the branch is there but it was too complicated a change so it got kept aside for too long then rebasing became too difficult and I got busy","user":"U85JBUGGP","ts":"1615024986.073900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d1V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the branch is there but it was too complicated a change so it got kept aside for too long then rebasing became too difficult and I got busy"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"933e717b-5674-49de-8031-e48e14d3bf64","type":"message","text":"fair enough. using the `addlogprob!` approach is there potential for insufficient sampling near the \"hard border\" due to the constraint?","user":"UGFMDAMC3","ts":"1615228072.104700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hJFc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"fair enough. using the "},{"type":"text","text":"addlogprob!","style":{"code":true}},{"type":"text","text":" approach is there potential for insufficient sampling near the \"hard border\" due to the constraint?"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"647d2acc-c058-4121-b179-9af57ffa602c","type":"message","text":"I am getting probably more then 90% of samples with numerical error and I reckon that this is because at some point in the tree of the NUTS sampling step there it didn't satisfy the above condition and return `-Inf` . The `max_hamiltonian_energy_error` for all these samples is also `Inf`. How can I distinguish between these errors and real divergent transitions? Would the implicit constraints of the custom distribution solve this?","user":"UGFMDAMC3","ts":"1615376278.011200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gUY0f","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am getting probably more then 90% of samples with numerical error and I reckon that this is because at some point in the tree of the NUTS sampling step there it didn't satisfy the above condition and return "},{"type":"text","text":"-Inf","style":{"code":true}},{"type":"text","text":" . The "},{"type":"text","text":"max_hamiltonian_energy_error","style":{"code":true}},{"type":"text","text":" for all these samples is also "},{"type":"text","text":"Inf","style":{"code":true}},{"type":"text","text":". How can I distinguish between these errors and real divergent transitions? Would the implicit constraints of the custom distribution solve this?"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"2c0fa4f3-b9a8-4764-9446-f7c55146e88e","type":"message","text":"Yeah, I would imagine so","user":"U9JNHB83X","ts":"1615389051.011400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gIIiK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, I would imagine so"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"fb78c7ee-a57b-4dc6-a4c5-f57472861c90","type":"message","text":"And I don't know that there is a way to distinguish, other than actually checking whether the conditions were satisfied for each sample that is flagged as a numerical error","user":"U9JNHB83X","ts":"1615389106.011600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jtN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And I don't know that there is a way to distinguish, other than actually checking whether the conditions were satisfied for each sample that is flagged as a numerical error"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"d8339dbe-591a-4585-9412-a43f3f403d72","type":"message","text":"Okay, I am, still struggling wrapping my head around the example you posted. Can I come back to you when I have tried to mould it to my problem at hand.","user":"UGFMDAMC3","ts":"1615389291.011800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vNXw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Okay, I am, still struggling wrapping my head around the example you posted. Can I come back to you when I have tried to mould it to my problem at hand."}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"4ed0a8ea-cb56-4a87-94ff-c1b9dd747ee6","type":"message","text":"Yeah, absolutely","user":"U9JNHB83X","ts":"1615389345.012000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Uhe0g","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, absolutely"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"02443543-1d93-470c-8f25-a6ac6c05faf1","type":"message","text":"Also, I have seen this <https://github.com/TuringLang/Turing.jl/issues/1533> where the parameter is assigned to intermediate variable to avoid custom distribution? Does this make sense?","user":"UGFMDAMC3","ts":"1615389370.012200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Pb4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, I have seen this "},{"type":"link","url":"https://github.com/TuringLang/Turing.jl/issues/1533"},{"type":"text","text":" where the parameter is assigned to intermediate variable to avoid custom distribution? Does this make sense?"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"1b9cee84-8f55-49f7-901e-0f95bd2b2b52","type":"message","text":"&gt; And I don't know that there is a way to distinguish, other than actually checking whether the conditions were satisfied for each sample that is flagged as a numerical error\nI would imagine though that its not the sample returned but one of the calculation during the leapfrog steps ran into a parameter combination which didn't satisfy the conditions?","user":"UGFMDAMC3","ts":"1615389501.012400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FPWS7","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"And I don't know that there is a way to distinguish, other than actually checking whether the conditions were satisfied for each sample that is flagged as a numerical error"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I would imagine though that its not the sample returned but one of the calculation during the leapfrog steps ran into a parameter combination which didn't satisfy the conditions?"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"545c3d35-3c19-4467-a964-0436657d5a84","type":"message","text":"Crap, right, so I guess even that wouldn't work.","user":"U9JNHB83X","ts":"1615389663.012600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9=zl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Crap, right, so I guess even that wouldn't work."}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"c34f9ff9-b53a-4a1a-be29-4f65b4ee80cd","type":"message","text":"A custom distribution is the only proper way I know how to do this.","user":"U85JBUGGP","ts":"1615390192.012800","team":"T68168MUP","edited":{"user":"U85JBUGGP","ts":"1615390197.000000"},"blocks":[{"type":"rich_text","block_id":"e3j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"A custom distribution is the only proper way I know how to do this."}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"1a9fb88e-9f51-46b2-b6d3-a9e70b6691a3","type":"message","text":"Okay, I will try to get something working and come back here.","user":"UGFMDAMC3","ts":"1615390430.013100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nz2xx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Okay, I will try to get something working and come back here."}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"58799d1a-9c63-47e0-a1d4-4c384638d949","type":"message","text":"On the topic of the divergence though, how can we distinguish between a rejected sample due to `Turing.@addlogprob -Inf` , if for example the ODE solver fails, and a true divergent transition due the divergence of the hamiltonian trajectory?","user":"UGFMDAMC3","ts":"1615390668.013300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Z6cC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"On the topic of the divergence though, how can we distinguish between a rejected sample due to "},{"type":"text","text":"Turing.@addlogprob -Inf","style":{"code":true}},{"type":"text","text":" , if for example the ODE solver fails, and a true divergent transition due the divergence of the hamiltonian trajectory?"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"e43b77c0-ee35-467c-bec6-82f151a033a2","type":"message","text":"I don’t think it’s possible to distinguish between them after the fact.","user":"U85JBUGGP","ts":"1615391279.013500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tn/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don’t think it’s possible to distinguish between them after the fact."}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"bb0b5cb7-cede-4b27-a0a6-fec202e366ad","type":"message","text":"That makes sense.","user":"UGFMDAMC3","ts":"1615391511.013700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=4R","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That makes sense."}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"type":"message","text":"Okay, so I have made an attempt at a somewhat general solution to my problem. I am not 100% sure I have done the correct things for the bijectors and `logabsdetjac` calculations. What do you think? Also Tor seems to suggest an alternative approach to simplify the bijector definition based on a PR which from the looks of it has been accepted, would it be better to use that approach?","files":[{"id":"F01QXBKU2CA","created":1615463679,"timestamp":1615463679,"name":"custom_dist.jl","title":"custom_dist.jl","mimetype":"application/octet-stream","filetype":"binary","pretty_type":"Binary","user":"UGFMDAMC3","editable":false,"size":5355,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01QXBKU2CA/custom_dist.jl","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01QXBKU2CA/download/custom_dist.jl","permalink":"https://julialang.slack.com/files/UGFMDAMC3/F01QXBKU2CA/custom_dist.jl","permalink_public":"https://slack-files.com/T68168MUP-F01QXBKU2CA-9de0e13741","is_starred":false,"has_rich_preview":false}],"upload":false,"blocks":[{"type":"rich_text","block_id":"iSS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Okay, so I have made an attempt at a somewhat general solution to my problem. I am not 100% sure I have done the correct things for the bijectors and "},{"type":"text","text":"logabsdetjac","style":{"code":true}},{"type":"text","text":" calculations. What do you think? Also Tor seems to suggest an alternative approach to simplify the bijector definition based on a PR which from the looks of it has been accepted, would it be better to use that approach?"}]}]}],"user":"UGFMDAMC3","display_as_bot":false,"ts":"1615463688.014300","thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"42ea1d43-0b5e-4486-8f43-804dc909cbbf","type":"message","text":"Simulate from that distribution and test that it’s generating the correct results. Then test `logabsdetjac` using automatic differentiation to get the jacobian of your bijector. I am not sure what PR you are talking about.","user":"U85JBUGGP","ts":"1615465380.014700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5zRA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Simulate from that distribution and test that it’s generating the correct results. Then test "},{"type":"text","text":"logabsdetjac","style":{"code":true}},{"type":"text","text":" using automatic differentiation to get the jacobian of your bijector. I am not sure what PR you are talking about."}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"732d5271-c2f1-4f9d-aeb3-ac1ac4814e8b","type":"message","text":"Tor mentioned in <https://github.com/TuringLang/Turing.jl/issues/1270#issuecomment-629890008> that  with <https://github.com/TuringLang/Bijectors.jl/pull/48> there is new interface to define Bijectors. Sorry, I am not too familiar with AD how would I go about it to get the jacobian? In terms of simulation, it seems to work but I am not 100% sure if the bijectors are correct in the sense that some parameter are not changed during the bijection (the distribution whos bounds are not dependent on others but nevertheless might truncated or defined by a Unifrom). Sorry, if that wasn't clear I am still trying to wrap my head around all of this.\n\nThe definition are as follows:\n","user":"UGFMDAMC3","ts":"1615466616.014900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NjDM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Tor mentioned in "},{"type":"link","url":"https://github.com/TuringLang/Turing.jl/issues/1270#issuecomment-629890008"},{"type":"text","text":" that  with "},{"type":"link","url":"https://github.com/TuringLang/Bijectors.jl/pull/48"},{"type":"text","text":" there is new interface to define Bijectors. Sorry, I am not too familiar with AD how would I go about it to get the jacobian? In terms of simulation, it seems to work but I am not 100% sure if the bijectors are correct in the sense that some parameter are not changed during the bijection (the distribution whos bounds are not dependent on others but nevertheless might truncated or defined by a Unifrom). Sorry, if that wasn't clear I am still trying to wrap my head around all of this.\n\nThe definition are as follows:\n"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"732d5271-c2f1-4f9d-aeb3-ac1ac4814e8b","type":"message","text":"```using Distributions, Bijectors\n\nstruct MyDistribution &lt;: ContinuousMultivariateDistribution\n    dp_preDCbm::ContinuousUnivariateDistribution\n    dp_cDC1bm::ContinuousUnivariateDistribution\n    dp_cDC2bm::ContinuousUnivariateDistribution\n    dδ_preDCb::ContinuousUnivariateDistribution\n    dΔ_cDC1bm::ContinuousUnivariateDistribution\n    dΔ_cDC2bm::ContinuousUnivariateDistribution\n    dΔ_cDC1b::ContinuousUnivariateDistribution\n    dΔ_cDC2b::ContinuousUnivariateDistribution\n    dλ_cDC1::ContinuousUnivariateDistribution\n    dλ_cDC2::ContinuousUnivariateDistribution\n    RpreDC::Float64\n    RpreDC_cDC1_bm::Float64\n    RpreDC_cDC2_bm::Float64\nend\n\nfunction Distributions.length(d::MyDistribution)\n    10# d.n\nend\n\nfunction Base.rand(d::MyDistribution)\n\tb = zeros(10)\n\n    b[2] = rand(d.dp_cDC1bm) #p_cDC1bm\n    b[3] = rand(d.dp_cDC2bm) #p_cDC2bm\n    b[4] = rand(d.dδ_preDCb) #δ_preDCb\n    b[7] = rand(d.dΔ_cDC1bm) #Δ_cDC1bm\n    b[8] = rand(d.dΔ_cDC2bm) #Δ_cDC2bm\n    b[9] = rand(d.dΔ_cDC1b) #Δ_cDC1b\n    b[10] = rand(d.dΔ_cDC2b) #Δ_cDC2b\n\n    upper_λ_cDC1 = b[2] + b[7] * d.RpreDC_cDC1_bm\n    upper_λ_cDC2 = b[3] + b[8] * d.RpreDC_cDC2_bm\n    λ_preDC = (b[9] + b[10] + b[4]) / d.RpreDC\n    lower_p_preDCbm = (λ_preDC + b[7] + b[8])\n\n    b[5] = rand(truncated(d.dλ_cDC1, -Inf, upper_λ_cDC1)) #λ_cDC1\n    b[6] = rand(truncated(d.dλ_cDC2, -Inf, upper_λ_cDC2)) #λ_cDC2 \n    b[1] = rand(truncated(d.dp_preDCbm,lower_p_preDCbm, Inf)) #p_preDCbm\n    return b\nend\nfunction Distributions._logpdf(d::MyDistribution, b::AbstractVector)\n    l = logpdf(d.dp_cDC1bm, b[2])\n    l += logpdf(d.dp_cDC2bm, b[3])\n    l += logpdf(d.dδ_preDCb, b[4])\n    l += logpdf(d.dΔ_cDC1bm, b[7])\n    l += logpdf(d.dΔ_cDC2bm, b[8])\n    l += logpdf(d.dΔ_cDC1b, b[9])\n    l += logpdf(d.dΔ_cDC2b, b[10])\n\n    upper_λ_cDC1 = b[2] + b[7] * d.RpreDC_cDC1_bm\n    upper_λ_cDC2 = b[3] + b[8] * d.RpreDC_cDC2_bm\n    λ_preDC = (b[9] + b[10] + b[4]) / d.RpreDC\n    lower_p_preDCbm = (λ_preDC + b[7] + b[8])\n\n    l += logpdf(truncated(d.dλ_cDC1, -Inf, upper_λ_cDC1), b[5])\n    l += logpdf(truncated(d.dλ_cDC2, -Inf, upper_λ_cDC2), b[6])\n    l += logpdf(truncated(d.dp_preDCbm,lower_p_preDCbm, Inf),b[1])\n\n    return l\nend\n\nstruct MyBijector &lt;: Bijectors.Bijector{1} \n    dp_preDCbm::ContinuousUnivariateDistribution\n    dp_cDC1bm::ContinuousUnivariateDistribution\n    dp_cDC2bm::ContinuousUnivariateDistribution\n    dδ_preDCb::ContinuousUnivariateDistribution\n    dΔ_cDC1bm::ContinuousUnivariateDistribution\n    dΔ_cDC2bm::ContinuousUnivariateDistribution\n    dΔ_cDC1b::ContinuousUnivariateDistribution\n    dΔ_cDC2b::ContinuousUnivariateDistribution\n    dλ_cDC1::ContinuousUnivariateDistribution\n    dλ_cDC2::ContinuousUnivariateDistribution\n    RpreDC::Float64\n    RpreDC_cDC1_bm::Float64\n    RpreDC_cDC2_bm::Float64\nend\n\nfunction (b::MyBijector)(x::AbstractVector)\n\ty = similar(x)\n\n    y[2] = x[2] #p_cDC1bm\n    y[3] = x[3] #p_cDC2bm\n    y[4] = x[4] #δ_preDCb\n    y[7] = x[7] #Δ_cDC1bm\n    y[8] = x[8] #Δ_cDC2bm\n    y[9] = x[9] #Δ_cDC1b\n    y[10] = x[10] #Δ_cDC2b\n\n    upper_λ_cDC1 = x[2] + x[7] * b.RpreDC_cDC1_bm\n    upper_λ_cDC2 = x[3] + x[8] * b.RpreDC_cDC2_bm\n    λ_preDC = (x[9] + x[10] + x[4]) / b.RpreDC\n    lower_p_preDCbm = (λ_preDC + x[7] + x[8])\n\n    y[5] = bijector(truncated(b.dλ_cDC1, -Inf, upper_λ_cDC1))(x[5]) #λ_cDC1\n    y[6] = bijector(truncated(b.dλ_cDC2, -Inf, upper_λ_cDC2))(x[6]) #λ_cDC2 \n    y[1] = bijector(truncated(b.dp_preDCbm,lower_p_preDCbm, Inf))(x[1]) #p_preDCbm\n\treturn y\nend\nfunction (b::Inverse{&lt;:MyBijector})(y::AbstractVector)\n\tx = similar(y)\n\n    x[2] = y[2] #p_cDC1bm\n    x[3] = y[3] #p_cDC2bm\n    x[4] = y[4] #δ_preDCb\n    x[7] = y[7] #Δ_cDC1bm\n    x[8] = y[8] #Δ_cDC2bm\n    x[9] = y[9] #Δ_cDC1b\n    x[10] = y[10] #Δ_cDC2b\n\n    upper_λ_cDC1 = y[2] + y[7] * b.orig.RpreDC_cDC1_bm\n    upper_λ_cDC2 = y[3] + y[8] * b.orig.RpreDC_cDC2_bm\n    λ_preDC = (y[9] + y[10] + y[4]) / b.orig.RpreDC\n    lower_p_preDCbm = (λ_preDC + y[7] + y[8])\n\n    x[5] = inv(bijector(truncated(b.orig.dλ_cDC1, -Inf, upper_λ_cDC1)))(y[5]) #λ_cDC1\n    x[6] = inv(bijector(truncated(b.orig.dλ_cDC2, -Inf, upper_λ_cDC2)))(y[6]) #λ_cDC2 \n    x[1] = inv(bijector(truncated(b.orig.dp_preDCbm,lower_p_preDCbm, Inf)))(y[1]) #p_preDCbm\n\treturn x\nend\nfunction Bijectors.logabsdetjac(b::MyBijector, x::AbstractVector)\n\tl = float(zero(eltype(x)))\n\n    upper_λ_cDC1 = x[2] + x[7] * b.RpreDC_cDC1_bm\n    upper_λ_cDC2 = x[3] + x[8] * b.RpreDC_cDC2_bm\n    λ_preDC = (x[9] + x[10] + x[4]) / b.RpreDC\n    lower_p_preDCbm = (λ_preDC + x[7] + x[8])\n\n    l += logabsdetjac(bijector(truncated(b.dλ_cDC1, -Inf, upper_λ_cDC1)),x[5]) #λ_cDC1\n    l += logabsdetjac(bijector(truncated(b.dλ_cDC2, -Inf, upper_λ_cDC2)),x[6]) #λ_cDC2 \n    l += logabsdetjac(bijector(truncated(b.dp_preDCbm,lower_p_preDCbm, Inf)),x[1]) #p_preDCbm\n\n    return l\nend```","user":"UGFMDAMC3","ts":"1615466616.015100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NjDM-w08","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using Distributions, Bijectors\n\nstruct MyDistribution <: ContinuousMultivariateDistribution\n    dp_preDCbm::ContinuousUnivariateDistribution\n    dp_cDC1bm::ContinuousUnivariateDistribution\n    dp_cDC2bm::ContinuousUnivariateDistribution\n    dδ_preDCb::ContinuousUnivariateDistribution\n    dΔ_cDC1bm::ContinuousUnivariateDistribution\n    dΔ_cDC2bm::ContinuousUnivariateDistribution\n    dΔ_cDC1b::ContinuousUnivariateDistribution\n    dΔ_cDC2b::ContinuousUnivariateDistribution\n    dλ_cDC1::ContinuousUnivariateDistribution\n    dλ_cDC2::ContinuousUnivariateDistribution\n    RpreDC::Float64\n    RpreDC_cDC1_bm::Float64\n    RpreDC_cDC2_bm::Float64\nend\n\nfunction Distributions.length(d::MyDistribution)\n    10# d.n\nend\n\nfunction Base.rand(d::MyDistribution)\n\tb = zeros(10)\n\n    b[2] = rand(d.dp_cDC1bm) #p_cDC1bm\n    b[3] = rand(d.dp_cDC2bm) #p_cDC2bm\n    b[4] = rand(d.dδ_preDCb) #δ_preDCb\n    b[7] = rand(d.dΔ_cDC1bm) #Δ_cDC1bm\n    b[8] = rand(d.dΔ_cDC2bm) #Δ_cDC2bm\n    b[9] = rand(d.dΔ_cDC1b) #Δ_cDC1b\n    b[10] = rand(d.dΔ_cDC2b) #Δ_cDC2b\n\n    upper_λ_cDC1 = b[2] + b[7] * d.RpreDC_cDC1_bm\n    upper_λ_cDC2 = b[3] + b[8] * d.RpreDC_cDC2_bm\n    λ_preDC = (b[9] + b[10] + b[4]) / d.RpreDC\n    lower_p_preDCbm = (λ_preDC + b[7] + b[8])\n\n    b[5] = rand(truncated(d.dλ_cDC1, -Inf, upper_λ_cDC1)) #λ_cDC1\n    b[6] = rand(truncated(d.dλ_cDC2, -Inf, upper_λ_cDC2)) #λ_cDC2 \n    b[1] = rand(truncated(d.dp_preDCbm,lower_p_preDCbm, Inf)) #p_preDCbm\n    return b\nend\nfunction Distributions._logpdf(d::MyDistribution, b::AbstractVector)\n    l = logpdf(d.dp_cDC1bm, b[2])\n    l += logpdf(d.dp_cDC2bm, b[3])\n    l += logpdf(d.dδ_preDCb, b[4])\n    l += logpdf(d.dΔ_cDC1bm, b[7])\n    l += logpdf(d.dΔ_cDC2bm, b[8])\n    l += logpdf(d.dΔ_cDC1b, b[9])\n    l += logpdf(d.dΔ_cDC2b, b[10])\n\n    upper_λ_cDC1 = b[2] + b[7] * d.RpreDC_cDC1_bm\n    upper_λ_cDC2 = b[3] + b[8] * d.RpreDC_cDC2_bm\n    λ_preDC = (b[9] + b[10] + b[4]) / d.RpreDC\n    lower_p_preDCbm = (λ_preDC + b[7] + b[8])\n\n    l += logpdf(truncated(d.dλ_cDC1, -Inf, upper_λ_cDC1), b[5])\n    l += logpdf(truncated(d.dλ_cDC2, -Inf, upper_λ_cDC2), b[6])\n    l += logpdf(truncated(d.dp_preDCbm,lower_p_preDCbm, Inf),b[1])\n\n    return l\nend\n\nstruct MyBijector <: Bijectors.Bijector{1} \n    dp_preDCbm::ContinuousUnivariateDistribution\n    dp_cDC1bm::ContinuousUnivariateDistribution\n    dp_cDC2bm::ContinuousUnivariateDistribution\n    dδ_preDCb::ContinuousUnivariateDistribution\n    dΔ_cDC1bm::ContinuousUnivariateDistribution\n    dΔ_cDC2bm::ContinuousUnivariateDistribution\n    dΔ_cDC1b::ContinuousUnivariateDistribution\n    dΔ_cDC2b::ContinuousUnivariateDistribution\n    dλ_cDC1::ContinuousUnivariateDistribution\n    dλ_cDC2::ContinuousUnivariateDistribution\n    RpreDC::Float64\n    RpreDC_cDC1_bm::Float64\n    RpreDC_cDC2_bm::Float64\nend\n\nfunction (b::MyBijector)(x::AbstractVector)\n\ty = similar(x)\n\n    y[2] = x[2] #p_cDC1bm\n    y[3] = x[3] #p_cDC2bm\n    y[4] = x[4] #δ_preDCb\n    y[7] = x[7] #Δ_cDC1bm\n    y[8] = x[8] #Δ_cDC2bm\n    y[9] = x[9] #Δ_cDC1b\n    y[10] = x[10] #Δ_cDC2b\n\n    upper_λ_cDC1 = x[2] + x[7] * b.RpreDC_cDC1_bm\n    upper_λ_cDC2 = x[3] + x[8] * b.RpreDC_cDC2_bm\n    λ_preDC = (x[9] + x[10] + x[4]) / b.RpreDC\n    lower_p_preDCbm = (λ_preDC + x[7] + x[8])\n\n    y[5] = bijector(truncated(b.dλ_cDC1, -Inf, upper_λ_cDC1))(x[5]) #λ_cDC1\n    y[6] = bijector(truncated(b.dλ_cDC2, -Inf, upper_λ_cDC2))(x[6]) #λ_cDC2 \n    y[1] = bijector(truncated(b.dp_preDCbm,lower_p_preDCbm, Inf))(x[1]) #p_preDCbm\n\treturn y\nend\nfunction (b::Inverse{<:MyBijector})(y::AbstractVector)\n\tx = similar(y)\n\n    x[2] = y[2] #p_cDC1bm\n    x[3] = y[3] #p_cDC2bm\n    x[4] = y[4] #δ_preDCb\n    x[7] = y[7] #Δ_cDC1bm\n    x[8] = y[8] #Δ_cDC2bm\n    x[9] = y[9] #Δ_cDC1b\n    x[10] = y[10] #Δ_cDC2b\n\n    upper_λ_cDC1 = y[2] + y[7] * b.orig.RpreDC_cDC1_bm\n    upper_λ_cDC2 = y[3] + y[8] * b.orig.RpreDC_cDC2_bm\n    λ_preDC = (y[9] + y[10] + y[4]) / b.orig.RpreDC\n    lower_p_preDCbm = (λ_preDC + y[7] + y[8])\n\n    x[5] = inv(bijector(truncated(b.orig.dλ_cDC1, -Inf, upper_λ_cDC1)))(y[5]) #λ_cDC1\n    x[6] = inv(bijector(truncated(b.orig.dλ_cDC2, -Inf, upper_λ_cDC2)))(y[6]) #λ_cDC2 \n    x[1] = inv(bijector(truncated(b.orig.dp_preDCbm,lower_p_preDCbm, Inf)))(y[1]) #p_preDCbm\n\treturn x\nend\nfunction Bijectors.logabsdetjac(b::MyBijector, x::AbstractVector)\n\tl = float(zero(eltype(x)))\n\n    upper_λ_cDC1 = x[2] + x[7] * b.RpreDC_cDC1_bm\n    upper_λ_cDC2 = x[3] + x[8] * b.RpreDC_cDC2_bm\n    λ_preDC = (x[9] + x[10] + x[4]) / b.RpreDC\n    lower_p_preDCbm = (λ_preDC + x[7] + x[8])\n\n    l += logabsdetjac(bijector(truncated(b.dλ_cDC1, -Inf, upper_λ_cDC1)),x[5]) #λ_cDC1\n    l += logabsdetjac(bijector(truncated(b.dλ_cDC2, -Inf, upper_λ_cDC2)),x[6]) #λ_cDC2 \n    l += logabsdetjac(bijector(truncated(b.dp_preDCbm,lower_p_preDCbm, Inf)),x[1]) #p_preDCbm\n\n    return l\nend"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"732d5271-c2f1-4f9d-aeb3-ac1ac4814e8b","type":"message","text":"and when simulating and inverting the results seem to be okay:\n```julia&gt; d = MyDistribution(Normal(0.6,0.4), truncated(Normal(0.2,0.1), 0.0, Inf), truncated(Normal(0.4,0.15),0.0, Inf), Uniform(0.0,2.0), Uniform(0.0,2.0), Uniform(0.0,2.0), Uniform(0.0,2.0),Uniform(0.0,2.0),Uniform(0.0,2.0),Uniform(0.0,2.0),0.8, 1.2, 1.4);\n\njulia&gt; b = bijector(d);\n\njulia&gt; x = rand(d);\n\njulia&gt; y = b(x);\n\njulia&gt; inv(b)(y) ≈ x\ntrue\n\njulia&gt; x\n10-element Array{Float64,1}:\n 5.128366380839904\n 0.2835032239497845\n 0.46624351358724014\n 0.4385433232849656\n 0.4262683125683007\n 0.7862291196214369\n 0.28222243773891753\n 0.5701962796406597\n 1.1217456950954463\n 1.8579482811066477\n\njulia&gt; y\n10-element Array{Float64,1}:\n -5.760023007048074\n  0.2835032239497845\n  0.46624351358724014\n  0.4385433232849656\n  0.7774552892659254\n  0.4970327106754652\n  0.28222243773891753\n  0.5701962796406597\n  1.1217456950954463\n  1.8579482811066477```","user":"UGFMDAMC3","ts":"1615466616.015300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NjDM-w08-f3I","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and when simulating and inverting the results seem to be okay:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> d = MyDistribution(Normal(0.6,0.4), truncated(Normal(0.2,0.1), 0.0, Inf), truncated(Normal(0.4,0.15),0.0, Inf), Uniform(0.0,2.0), Uniform(0.0,2.0), Uniform(0.0,2.0), Uniform(0.0,2.0),Uniform(0.0,2.0),Uniform(0.0,2.0),Uniform(0.0,2.0),0.8, 1.2, 1.4);\n\njulia> b = bijector(d);\n\njulia> x = rand(d);\n\njulia> y = b(x);\n\njulia> inv(b)(y) ≈ x\ntrue\n\njulia> x\n10-element Array{Float64,1}:\n 5.128366380839904\n 0.2835032239497845\n 0.46624351358724014\n 0.4385433232849656\n 0.4262683125683007\n 0.7862291196214369\n 0.28222243773891753\n 0.5701962796406597\n 1.1217456950954463\n 1.8579482811066477\n\njulia> y\n10-element Array{Float64,1}:\n -5.760023007048074\n  0.2835032239497845\n  0.46624351358724014\n  0.4385433232849656\n  0.7774552892659254\n  0.4970327106754652\n  0.28222243773891753\n  0.5701962796406597\n  1.1217456950954463\n  1.8579482811066477"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"510916c0-a2b1-48d1-95d4-df03d1ea0606","type":"message","text":"and it looks that the jacobian calc is correct to since `logabsdetjac(b, x) ≈ log(abs(det(ForwardDiff.jacobian(b, x))))`","user":"UGFMDAMC3","ts":"1615478689.015500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mbl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and it looks that the jacobian calc is correct to since "},{"type":"text","text":"logabsdetjac(b, x) ≈ log(abs(det(ForwardDiff.jacobian(b, x))))","style":{"code":true}}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"08dd665a-498a-4e76-ba35-1fcf1c413f37","type":"message","text":"use `logabsdet`","user":"U85JBUGGP","ts":"1615478724.015700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wcM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"use "},{"type":"text","text":"logabsdet","style":{"code":true}}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"e8787d31-58e4-463f-9746-d8362ca639f1","type":"message","text":"it’s more accurate","user":"U85JBUGGP","ts":"1615478732.015900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ieTd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it’s more accurate"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"30a9b89d-e875-4e44-b45d-a75b2b4fd678","type":"message","text":"But I have two versions one in which i do bijection for all contained distrbutions(v2) and one only for the ones which inherit bounds from other RV(v1). Would you mind having a look at both? I reckon the v2 makes more sense.","user":"UGFMDAMC3","ts":"1615479031.016100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h5TN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But I have two versions one in which i do bijection for all contained distrbutions(v2) and one only for the ones which inherit bounds from other RV(v1). Would you mind having a look at both? I reckon the v2 makes more sense."}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"25d7d51f-f751-4891-b19f-780677cf0a43","type":"message","text":"&gt; use `logabsdet`\nThanks, good to know.","user":"UGFMDAMC3","ts":"1615479122.016300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pXhh","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"use "},{"type":"text","text":"logabsdet","style":{"code":true}}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks, good to know."}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"type":"message","text":"Those are the two versions:","files":[{"id":"F01QRRK8JS2","created":1615480313,"timestamp":1615480313,"name":"custom_dist_v2.jl","title":"custom_dist_v2.jl","mimetype":"application/octet-stream","filetype":"binary","pretty_type":"Binary","user":"UGFMDAMC3","editable":false,"size":6336,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01QRRK8JS2/custom_dist_v2.jl","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01QRRK8JS2/download/custom_dist_v2.jl","permalink":"https://julialang.slack.com/files/UGFMDAMC3/F01QRRK8JS2/custom_dist_v2.jl","permalink_public":"https://slack-files.com/T68168MUP-F01QRRK8JS2-ae16ca9adb","is_starred":false,"has_rich_preview":false},{"id":"F01RB813P6V","created":1615480315,"timestamp":1615480315,"name":"custom_dist_v1.jl","title":"custom_dist_v1.jl","mimetype":"application/octet-stream","filetype":"binary","pretty_type":"Binary","user":"UGFMDAMC3","editable":false,"size":5506,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01RB813P6V/custom_dist_v1.jl","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01RB813P6V/download/custom_dist_v1.jl","permalink":"https://julialang.slack.com/files/UGFMDAMC3/F01RB813P6V/custom_dist_v1.jl","permalink_public":"https://slack-files.com/T68168MUP-F01RB813P6V-00eb6583c3","is_starred":false,"has_rich_preview":false}],"upload":false,"blocks":[{"type":"rich_text","block_id":"USc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Those are the two versions:"}]}]}],"user":"UGFMDAMC3","ts":"1615480337.016500","thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"bad00746-0bb6-4992-b90c-8e8275ec796e","type":"message","text":"I am now trying to use the custom distribution in my model but I am running into multiple issues. First I had a `no method` error for `_rand!`  which I solved by implementing said function for `::MyDistribution` . Now, I am getting the following error `MethodError: no method matching vectorize(::Main.workspace35.MyDistribution, ::Nothing)` . I am not sure what to do about that? I can try to get a postable MWE together if that helps.","user":"UGFMDAMC3","ts":"1615490194.019500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pA5w","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am now trying to use the custom distribution in my model but I am running into multiple issues. First I had a "},{"type":"text","text":"no method","style":{"code":true}},{"type":"text","text":" error for "},{"type":"text","text":"_rand!","style":{"code":true}},{"type":"text","text":"  which I solved by implementing said function for "},{"type":"text","text":"::MyDistribution","style":{"code":true}},{"type":"text","text":" . Now, I am getting the following error "},{"type":"text","text":"MethodError: no method matching vectorize(::Main.workspace35.MyDistribution, ::Nothing)","style":{"code":true}},{"type":"text","text":" . I am not sure what to do about that? I can try to get a postable MWE together if that helps."}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"4084d82d-911b-4e5b-a872-83cd0297a516","type":"message","text":"ya sorry didn’t have time today, kind of sleepy now, so will check it tomorrow","user":"U85JBUGGP","ts":"1615493662.019700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Dlzif","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ya sorry didn’t have time today, kind of sleepy now, so will check it tomorrow"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"9d162f2a-a805-43b6-9197-71edfd84f2b2","type":"message","text":"No worries, thanks already for the help and suggestion. It's great to get support directly devs so quickly","user":"UGFMDAMC3","ts":"1615494317.022200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KEOx+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No worries, thanks already for the help and suggestion. It's great to get support directly devs so quickly"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3","reactions":[{"name":"+1","users":["U85JBUGGP"],"count":1}]},{"client_msg_id":"3ee13a71-9739-4a66-ad90-f59ad6974d8c","type":"message","text":"Make your distribution a subtype of `ContinuousMultivariateDistribution` to avoid the `vectorize` error","user":"U85JBUGGP","ts":"1615572039.038000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nSES","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Make your distribution a subtype of "},{"type":"text","text":"ContinuousMultivariateDistribution","style":{"code":true}},{"type":"text","text":" to avoid the "},{"type":"text","text":"vectorize","style":{"code":true}},{"type":"text","text":" error"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"f76dea49-53cf-4913-bb7e-5ffc989965a4","type":"message","text":"it is defined as `_struct_ MyDistribution &lt;: ContinuousMultivariateDistribution` when the vectorize error occured. But implementing a `_function_ Distributions.rand(rng::Random.AbstractRNG,d::MyDistribution)` seemed to solve the issue. The model is running now, but it seems that isn't really taking the prior of the first parameter in `MyDistribution` , at least the posteriors for this parameter look vastly different between the rejection and custom distribution solution. Also the model still encounters numerical errors (where previously only `ℓπ` = Inf) but now its all but the parameters:\n```┌ Warning: The current proposal will be rejected due to numerical error(s).\n│   isfinite.((θ, r, ℓπ, ℓκ)) = (true, false, false, false)```\nI have increased the delta parameter of the NUTS sampler which seems to decreased the occurrence of the numerical errors, but not entirely, and I can't make out any particular parameter space which causes those errors. Do you have any general suggestions? I will get this MWE together so it might be clearer.","user":"UGFMDAMC3","ts":"1615573845.038300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oRMD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it is defined as "},{"type":"text","text":"struct","style":{"italic":true,"code":true}},{"type":"text","text":" MyDistribution <: ContinuousMultivariateDistribution","style":{"code":true}},{"type":"text","text":" when the vectorize error occured. But implementing a "},{"type":"text","text":"function","style":{"italic":true,"code":true}},{"type":"text","text":" Distributions.rand(rng::Random.AbstractRNG,d::MyDistribution)","style":{"code":true}},{"type":"text","text":" seemed to solve the issue. The model is running now, but it seems that isn't really taking the prior of the first parameter in "},{"type":"text","text":"MyDistribution","style":{"code":true}},{"type":"text","text":" , at least the posteriors for this parameter look vastly different between the rejection and custom distribution solution. Also the model still encounters numerical errors (where previously only "},{"type":"text","text":"ℓπ","style":{"code":true}},{"type":"text","text":" = Inf) but now its all but the parameters:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"┌ Warning: The current proposal will be rejected due to numerical error(s).\n│   isfinite.((θ, r, ℓπ, ℓκ)) = (true, false, false, false)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I have increased the delta parameter of the NUTS sampler which seems to decreased the occurrence of the numerical errors, but not entirely, and I can't make out any particular parameter space which causes those errors. Do you have any general suggestions? I will get this MWE together so it might be clearer."}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"204dbb74-a51c-4dd2-aaca-26458ab7993a","type":"message","text":"the model looks like this:","user":"UGFMDAMC3","ts":"1615573856.038500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4BO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the model looks like this:"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"type":"message","text":"","files":[{"id":"F01RA4N02VA","created":1615573960,"timestamp":1615573960,"name":"turing_dc_bm_blood_1_indv_sigma_p_priors_hierach_1.jl","title":"turing_dc_bm_blood_1_indv_sigma_p_priors_hierach_1.jl","mimetype":"application/octet-stream","filetype":"binary","pretty_type":"Binary","user":"UGFMDAMC3","editable":false,"size":11969,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01RA4N02VA/turing_dc_bm_blood_1_indv_sigma_p_priors_hierach_1.jl","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01RA4N02VA/download/turing_dc_bm_blood_1_indv_sigma_p_priors_hierach_1.jl","permalink":"https://julialang.slack.com/files/UGFMDAMC3/F01RA4N02VA/turing_dc_bm_blood_1_indv_sigma_p_priors_hierach_1.jl","permalink_public":"https://slack-files.com/T68168MUP-F01RA4N02VA-277974ccaa","is_starred":false,"has_rich_preview":false}],"upload":false,"user":"UGFMDAMC3","display_as_bot":false,"ts":"1615573962.038700","thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"2c48c5df-0fbe-400a-8db4-8e5546bec800","type":"message","text":"do you have the sampling part of the code?","user":"U85JBUGGP","ts":"1615574322.039300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/K7A1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"do you have the sampling part of the code?"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"4a03af54-2753-43f5-866a-4f9d869679a1","type":"message","text":"defining the data","user":"U85JBUGGP","ts":"1615574325.039500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"v3Y4O","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"defining the data"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"676a2fc8-9379-4876-a0fd-cbe6daa50494","type":"message","text":"do the errors happen because of a failed ODE solve?","user":"U85JBUGGP","ts":"1615574378.039700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FPmD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"do the errors happen because of a failed ODE solve?"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"ec72fc7d-dab1-4ce1-b43d-35f0bdd40c6f","type":"message","text":"if you share your ODE, <@U69BL50BF> may be able to help","user":"U85JBUGGP","ts":"1615574459.039900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6QfX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you share your ODE, "},{"type":"user","user_id":"U69BL50BF"},{"type":"text","text":" may be able to help"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"b17b3d27-86c3-41a6-b018-4c079da730c2","type":"message","text":"&gt; do the errors happen because of a failed ODE solve?\nI don't think so, there are no concurrent ODE solver warnings.","user":"UGFMDAMC3","ts":"1615574470.040100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uuUr","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"do the errors happen because of a failed ODE solve?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I don't think so, there are no concurrent ODE solver warnings."}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"ecc68721-db95-43df-9989-1cc844aeecb1","type":"message","text":"what errors are you getting?","user":"U85JBUGGP","ts":"1615574495.040300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ut8KH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"what errors are you getting?"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"9eeb87bd-ea05-4abd-ac92-916f1f64b6cb","type":"message","text":"the only warning I get is\n```┌ Warning: The current proposal will be rejected due to numerical error(s).\n│   isfinite.((θ, r, ℓπ, ℓκ)) = (true, false, false, false)```","user":"UGFMDAMC3","ts":"1615574546.040500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hOwA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the only warning I get is\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"┌ Warning: The current proposal will be rejected due to numerical error(s).\n│   isfinite.((θ, r, ℓπ, ℓκ)) = (true, false, false, false)"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"54c88e1f-c4e4-450d-ada0-f7748523d98b","type":"message","text":"you can print values in the model for debugging","user":"U85JBUGGP","ts":"1615574576.040700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Fc=nY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can print values in the model for debugging"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"b947fca1-d282-4e39-ad81-19c65e8d2834","type":"message","text":"lower the tolerance on the ODE solve?","user":"U69BL50BF","ts":"1615574586.040900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jFz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"lower the tolerance on the ODE solve?"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"159d91a1-beb2-438f-8fef-60363de67f88","type":"message","text":"find where the values go `Inf` or `NaN`","user":"U85JBUGGP","ts":"1615574586.041100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NmP+D","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"find where the values go "},{"type":"text","text":"Inf","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"NaN","style":{"code":true}}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"c399c1f7-b539-4d25-8f22-d7d337ad42f1","type":"message","text":"&gt; lower the tolerance on the ODE solve?\nI will try this","user":"UGFMDAMC3","ts":"1615574691.041300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1nHD","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"lower the tolerance on the ODE solve?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I will try this"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"9c64f442-2aa1-43c4-a023-d4567387551e","type":"message","text":"&gt; find where the values go `Inf` or `NaN` \nI will see if I can find anything","user":"UGFMDAMC3","ts":"1615574730.041500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"a3Y","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"find where the values go "},{"type":"text","text":"Inf","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"NaN","style":{"code":true}},{"type":"text","text":" "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I will see if I can find anything"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"081945db-4cd1-4950-948a-bc0cbe0da691","type":"message","text":"you can get some innacuracies in the gradient from having too high of a tolerance, and it can influence a fitting process like that.","user":"U69BL50BF","ts":"1615574748.041700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"K5smz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can get some innacuracies in the gradient from having too high of a tolerance, and it can influence a fitting process like that."}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"abd103b4-9f38-4d8d-a079-a9e73f021f05","type":"message","text":"high as in too small or too large","user":"UGFMDAMC3","ts":"1615574789.041900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=DF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"high as in too small or too large"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"a48e3760-02d3-49ed-baea-b8373f7be829","type":"message","text":"too large","user":"U85JBUGGP","ts":"1615574810.042100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zFAwZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"too large"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"0ce6ceed-e7cf-415e-8f4f-210a47d85ec4","type":"message","text":"too large, i.e. `1e-3` oh no! and `1e-9` Drake smile.","user":"U69BL50BF","ts":"1615574816.042300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Aue","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"too large, i.e. "},{"type":"text","text":"1e-3","style":{"code":true}},{"type":"text","text":" oh no! and "},{"type":"text","text":"1e-9","style":{"code":true}},{"type":"text","text":" Drake smile."}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"df20e2c0-1e54-479c-a2c9-a0d42bc7174b","type":"message","text":":+1:","user":"UGFMDAMC3","ts":"1615574828.042500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VQC","elements":[{"type":"rich_text_section","elements":[{"type":"emoji","name":"+1"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"b6304f06-4566-4562-b54d-8dbcd8d093cd","type":"message","text":"the data is defined by the following function:","user":"UGFMDAMC3","ts":"1615574882.042700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Mf+dE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the data is defined by the following function:"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"ea2fd56b-b521-4244-ad9e-953ffb48cb73","type":"message","text":"```function data_prep(df_label::DataFrame, df_R::DataFrame, df_label_p::DataFrame, indv_arr::Array{String,1}; label_p_names = [:fr,:delta, :frac], tau=3/24, ratio_approach = \"2\", ratio_summary = \"mean\")\n\tratio_names = [\"RpreDC\",\"RcDC1\"\t,\"RcDC2\",\"RpreDC_cDC1_bm\",\"RpreDC_cDC2_bm\"\t,\"RpreDC_cDC1_blood\"\t,\"RpreDC_cDC2_blood\"]\n\tpopulations =[\"preDC\", \"cDC1\", \"cDC2\"]\n\t\n\tn_indv = length(indv_arr)\n\tpre = Array{Array{Float64,1}, 1}(undef,n_indv)\n\tc1 = Array{Array{Float64,1}, 1}(undef,n_indv)\n\tc2 = Array{Array{Float64,1}, 1}(undef,n_indv)\n\tt_total = Array{Array{Float64,1}, 1}(undef,n_indv)\n\ttidxs = Array{NamedTuple, 1}(undef,n_indv)\n\tlabel_p = Array{Array{Float64,1}, 1}(undef,n_indv)\n\n\tfor k in 1:length(indv_arr)\n\t\tindv = indv_arr[k]\n\t\tdf_sub = @linq df_label |&gt; where(:individual .== indv, :time .&gt; 0.0, :population .∈ Ref(populations))\n\t\tgdf_sub = groupby(df_sub, :population)\n\n\n\t\tt_total[k] = sort(unique(@linq df_sub |&gt; select(:time) |&gt; Array |&gt; reshape(:)))\n\t\ttidxs[k] = (; zip(Tuple(Symbol.([values(j)[1] for j in keys(gdf_sub)])), Tuple([Array{Int64}(indexin(gdf_sub[j][:,:time], t_total[k])) for j in keys(gdf_sub)]))...)\n\t\t\n\t\tpre[k]=@linq df_sub |&gt; where(:population .== \"preDC\") |&gt; select(:enrichment) |&gt; Array |&gt; reshape(:)\n\t\tc1[k]=@linq df_sub |&gt; where(:population .== \"cDC1\") |&gt; select(:enrichment) |&gt; Array |&gt; reshape(:)\n\t\tc2[k]=@linq df_sub |&gt; where(:population .== \"cDC2\") |&gt; select(:enrichment) |&gt; Array |&gt; reshape(:)\n\t\t\n\t\tlabel_p[k] = [(@linq df_label_p |&gt; where(:variable .== indv) |&gt; DataFrames.select(label_p_names...) |&gt; Array |&gt; reshape(:))..., tau]#(; zip(Tuple([label_p_names..., :tau]),\n\t\t\t\t\t#Tuple([(@linq df_label_p |&gt; where(:variable .== \"C66\") |&gt; DataFrames.select(label_p_names...) |&gt; Array |&gt; reshape(:))..., tau]))...)\n\tend\t\n\t\tR = (; zip(Tuple(Symbol.(ratio_names)),\n\t\t\t\tTuple([(@linq df_R |&gt; where(:parameter .== j, :approach .== ratio_approach, :summary .== ratio_summary) |&gt; select(:value) |&gt; Array)[1] for j in ratio_names]))...)\n\t\t\n\t\n\treturn (label=(preDC=pre, cDC1=c1 , cDC2=c2), timepoints=t_total , tidxs = tidxs, R = R, label_p = label_p, n_donor = n_indv) \nend```","user":"UGFMDAMC3","ts":"1615574885.042900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q7kh","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function data_prep(df_label::DataFrame, df_R::DataFrame, df_label_p::DataFrame, indv_arr::Array{String,1}; label_p_names = [:fr,:delta, :frac], tau=3/24, ratio_approach = \"2\", ratio_summary = \"mean\")\n\tratio_names = [\"RpreDC\",\"RcDC1\"\t,\"RcDC2\",\"RpreDC_cDC1_bm\",\"RpreDC_cDC2_bm\"\t,\"RpreDC_cDC1_blood\"\t,\"RpreDC_cDC2_blood\"]\n\tpopulations =[\"preDC\", \"cDC1\", \"cDC2\"]\n\t\n\tn_indv = length(indv_arr)\n\tpre = Array{Array{Float64,1}, 1}(undef,n_indv)\n\tc1 = Array{Array{Float64,1}, 1}(undef,n_indv)\n\tc2 = Array{Array{Float64,1}, 1}(undef,n_indv)\n\tt_total = Array{Array{Float64,1}, 1}(undef,n_indv)\n\ttidxs = Array{NamedTuple, 1}(undef,n_indv)\n\tlabel_p = Array{Array{Float64,1}, 1}(undef,n_indv)\n\n\tfor k in 1:length(indv_arr)\n\t\tindv = indv_arr[k]\n\t\tdf_sub = @linq df_label |> where(:individual .== indv, :time .> 0.0, :population .∈ Ref(populations))\n\t\tgdf_sub = groupby(df_sub, :population)\n\n\n\t\tt_total[k] = sort(unique(@linq df_sub |> select(:time) |> Array |> reshape(:)))\n\t\ttidxs[k] = (; zip(Tuple(Symbol.([values(j)[1] for j in keys(gdf_sub)])), Tuple([Array{Int64}(indexin(gdf_sub[j][:,:time], t_total[k])) for j in keys(gdf_sub)]))...)\n\t\t\n\t\tpre[k]=@linq df_sub |> where(:population .== \"preDC\") |> select(:enrichment) |> Array |> reshape(:)\n\t\tc1[k]=@linq df_sub |> where(:population .== \"cDC1\") |> select(:enrichment) |> Array |> reshape(:)\n\t\tc2[k]=@linq df_sub |> where(:population .== \"cDC2\") |> select(:enrichment) |> Array |> reshape(:)\n\t\t\n\t\tlabel_p[k] = [(@linq df_label_p |> where(:variable .== indv) |> DataFrames.select(label_p_names...) |> Array |> reshape(:))..., tau]#(; zip(Tuple([label_p_names..., :tau]),\n\t\t\t\t\t#Tuple([(@linq df_label_p |> where(:variable .== \"C66\") |> DataFrames.select(label_p_names...) |> Array |> reshape(:))..., tau]))...)\n\tend\t\n\t\tR = (; zip(Tuple(Symbol.(ratio_names)),\n\t\t\t\tTuple([(@linq df_R |> where(:parameter .== j, :approach .== ratio_approach, :summary .== ratio_summary) |> select(:value) |> Array)[1] for j in ratio_names]))...)\n\t\t\n\t\n\treturn (label=(preDC=pre, cDC1=c1 , cDC2=c2), timepoints=t_total , tidxs = tidxs, R = R, label_p = label_p, n_donor = n_indv) \nend"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"1e954b08-5b27-4a04-a991-717afd65efab","type":"message","text":"and sampling is done via; `sample(turing_model, NUTS(warm_up, 0.99), mcmc_iters, progress=false)`","user":"UGFMDAMC3","ts":"1615574922.043100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HdsRt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and sampling is done via; "},{"type":"text","text":"sample(turing_model, NUTS(warm_up, 0.99), mcmc_iters, progress=false)","style":{"code":true}}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"78fc19a2-7fc4-4e46-9c0a-dfdac7507e12","type":"message","text":"What is weird also that the prior of the first parameter of the custom dist doesn't seem to have any weight whereas before it influenced the posterior markedly","user":"UGFMDAMC3","ts":"1615574992.043300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"E=P24","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What is weird also that the prior of the first parameter of the custom dist doesn't seem to have any weight whereas before it influenced the posterior markedly"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"d93ee0b4-a05d-40c7-80a4-d7f3f6e0a1a4","type":"message","text":"lowering the tolerance seemed to have no helped. I am trying other solvers at the moment and will try to see if I can find any other culprits","user":"UGFMDAMC3","ts":"1615644532.064800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VUzJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"lowering the tolerance seemed to have no helped. I am trying other solvers at the moment and will try to see if I can find any other culprits"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"a359167b-7de7-4dd0-9b45-039824dd48d7","type":"message","text":"I have made some changes to the ODE and the custom distribution(which should solve the prior problem described) and it seems to run okay until the `Turing` model runs into an error:\n`Uniform: the condition a &lt; b is not satisfied`\n\nThe new custom dist and bijectorions are as follows:\n```using Distributions, Bijectors\nusing Random\n\nstruct MyDistribution &lt;: ContinuousMultivariateDistribution\n    dp_preDCbm::ContinuousUnivariateDistribution\n    dp_cDC1bm::ContinuousUnivariateDistribution\n    dp_cDC2bm::ContinuousUnivariateDistribution\n    dδ_preDCb::ContinuousUnivariateDistribution\n    dΔ_cDC1bm::ContinuousUnivariateDistribution\n    dΔ_cDC2bm::ContinuousUnivariateDistribution\n    dΔ_cDC1b::ContinuousUnivariateDistribution\n    dΔ_cDC2b::ContinuousUnivariateDistribution\n    dλ_cDC1::ContinuousUnivariateDistribution\n    dλ_cDC2::ContinuousUnivariateDistribution\n    RpreDC::Float64\n    RpreDC_cDC1_bm::Float64\n    RpreDC_cDC2_bm::Float64\nend\n\nfunction Distributions.length(d::MyDistribution)\n    10# d.n\nend\n\nfunction Base.rand(d::MyDistribution)\n\tb = zeros(10)\n\n    b[1] = rand(d.dp_preDCbm) #p_preDCbm\n    b[2] = rand(d.dp_cDC1bm) #p_cDC1bm\n    b[3] = rand(d.dp_cDC2bm) #p_cDC2bm\n    \n    # lower_p_preDCbm = (λ_preDC + b[7] + b[8])\n    # λ_preDC = (b[9] + b[10] + b[4]) / d.RpreDC\n    \n    b[7] = rand(truncated(d.dΔ_cDC1bm, 0.0, b[1])) #Δ_cDC1bm\n    b[8] = rand(truncated(d.dΔ_cDC2bm, 0.0, b[1] - b[7])) #Δ_cDC2bm\n    b[9] = rand(truncated(d.dΔ_cDC1b,0.0,(b[1] - b[7] -b[8])*d.RpreDC)) #Δ_cDC1b\n    b[10] = rand(truncated(d.dΔ_cDC2b,0.0,(b[1] - b[7] -b[8]-b[9]/d.RpreDC)*d.RpreDC)) #Δ_cDC2b\n    b[4] = rand(truncated(d.dδ_preDCb,0.0, (b[1] - b[7] -b[8]-b[9]/d.RpreDC-b[10]/d.RpreDC)*d.RpreDC)) #δ_preDCb\n    \n    \n    upper_λ_cDC1 = b[2] + b[7] * d.RpreDC_cDC1_bm\n    upper_λ_cDC2 = b[3] + b[8] * d.RpreDC_cDC2_bm\n    b[5] = rand(truncated(d.dλ_cDC1, -Inf, upper_λ_cDC1)) #λ_cDC1\n    b[6] = rand(truncated(d.dλ_cDC2, -Inf, upper_λ_cDC2)) #λ_cDC2 \n    return b\nend\n\nfunction Distributions._rand!(rng::Random.AbstractRNG,d::MyDistribution, x::Array{Float64,1})\n    x[1] = rand(d.dp_preDCbm) #p_preDCbm\n    x[2] = rand(d.dp_cDC1bm) #p_cDC1bm\n    x[3] = rand(d.dp_cDC2bm) #p_cDC2bm\n    \n    # lower_p_preDCbm = (λ_preDC + x[7] + x[8])\n    # λ_preDC = (x[9] + x[10] + x[4]) / d.RpreDC\n    \n    x[7] = rand(truncated(d.dΔ_cDC1bm, 0.0, x[1])) #Δ_cDC1bm\n    x[8] = rand(truncated(d.dΔ_cDC2bm, 0.0, x[1] - x[7])) #Δ_cDC2bm\n    x[9] = rand(truncated(d.dΔ_cDC1b,0.0,(x[1] - x[7] -x[8])*d.RpreDC)) #Δ_cDC1b\n    x[10] = rand(truncated(d.dΔ_cDC2b,0.0,(x[1] - x[7] -x[8]-x[9]/d.RpreDC)*d.RpreDC)) #Δ_cDC2b\n    x[4] = rand(truncated(d.dδ_preDCb,0.0, (x[1] - x[7] -x[8]-x[9]/d.RpreDC-x[10]/d.RpreDC)*d.RpreDC)) #δ_preDCb\n    \n    \n    upper_λ_cDC1 = x[2] + x[7] * d.RpreDC_cDC1_bm\n    upper_λ_cDC2 = x[3] + x[8] * d.RpreDC_cDC2_bm\n    x[5] = rand(truncated(d.dλ_cDC1, -Inf, upper_λ_cDC1)) #λ_cDC1\n    x[6] = rand(truncated(d.dλ_cDC2, -Inf, upper_λ_cDC2)) #λ_cDC2 \n    return\nend\n\nfunction Distributions.rand(rng::Random.AbstractRNG,d::MyDistribution)\n\tx = zeros(10)\n    Distributions._rand!(rng,d, x)\n    return x\nend\n\n\n\nfunction Distributions._logpdf(d::MyDistribution, b::AbstractVector)\n    l = logpdf(d.dp_preDCbm ,b[1]) #p_preDCbm\n    l += logpdf(d.dp_cDC1bm ,b[2]) #p_cDC1bm\n    l += logpdf(d.dp_cDC2bm ,b[3]) #p_cDC2bm\n    \n    # lower_p_preDCbm = (λ_preDC + b[7] + b[8])\n    # λ_preDC = (b[9] + b[10] + b[4]) / d.RpreDC\n    \n    l += logpdf(truncated(d.dΔ_cDC1bm, 0.0, b[1]) ,b[7]) #Δ_cDC1bm\n    l += logpdf(truncated(d.dΔ_cDC2bm, 0.0, b[1] - b[7]) ,b[8]) #Δ_cDC2bm\n    l += logpdf(truncated(d.dΔ_cDC1b,0.0,(b[1] - b[7] -b[8])*d.RpreDC), b[9]) #Δ_cDC1b\n    l += logpdf(truncated(d.dΔ_cDC2b,0.0,(b[1] - b[7] -b[8]-b[9]/d.RpreDC)*d.RpreDC), b[10]) #Δ_cDC2b\n    l += logpdf(truncated(d.dδ_preDCb,0.0, (b[1] - b[7] -b[8]-b[9]/d.RpreDC-b[10]/d.RpreDC)*d.RpreDC), b[4]) #δ_preDCb\n    \n    \n    upper_λ_cDC1 = b[2] + b[7] * d.RpreDC_cDC1_bm\n    upper_λ_cDC2 = b[3] + b[8] * d.RpreDC_cDC2_bm\n    l += logpdf(truncated(d.dλ_cDC1, -Inf, upper_λ_cDC1), b[5]) #λ_cDC1\n    l += logpdf(truncated(d.dλ_cDC2, -Inf, upper_λ_cDC2), b[6]) #λ_cDC2 \n\n    return l\nend\n\nfunction Distributions.logpdf(d::MyDistribution, b::AbstractVector)\n    l = logpdf(d.dp_preDCbm ,b[1]) #p_preDCbm\n    l += logpdf(d.dp_cDC1bm ,b[2]) #p_cDC1bm\n    l += logpdf(d.dp_cDC2bm ,b[3]) #p_cDC2bm\n    \n    # lower_p_preDCbm = (λ_preDC + b[7] + b[8])\n    # λ_preDC = (b[9] + b[10] + b[4]) / d.RpreDC\n    \n    l += logpdf(truncated(d.dΔ_cDC1bm, 0.0, b[1]) ,b[7]) #Δ_cDC1bm\n    l += logpdf(truncated(d.dΔ_cDC2bm, 0.0, b[1] - b[7]) ,b[8]) #Δ_cDC2bm\n    l += logpdf(truncated(d.dΔ_cDC1b,0.0,(b[1] - b[7] -b[8])*d.RpreDC), b[9]) #Δ_cDC1b\n    l += logpdf(truncated(d.dΔ_cDC2b,0.0,(b[1] - b[7] -b[8]-b[9]/d.RpreDC)*d.RpreDC), b[10]) #Δ_cDC2b\n    l += logpdf(truncated(d.dδ_preDCb,0.0, (b[1] - b[7] -b[8]-b[9]/d.RpreDC-b[10]/d.RpreDC)*d.RpreDC), b[4]) #δ_preDCb\n    \n    \n    upper_λ_cDC1 = b[2] + b[7] * d.RpreDC_cDC1_bm\n    upper_λ_cDC2 = b[3] + b[8] * d.RpreDC_cDC2_bm\n    l += logpdf(truncated(d.dλ_cDC1, -Inf, upper_λ_cDC1), b[5]) #λ_cDC1\n    l += logpdf(truncated(d.dλ_cDC2, -Inf, upper_λ_cDC2), b[6]) #λ_cDC2 \n\n    return l\nend\n\nstruct MyBijector &lt;: Bijectors.Bijector{1} \n    dp_preDCbm::ContinuousUnivariateDistribution\n    dp_cDC1bm::ContinuousUnivariateDistribution\n    dp_cDC2bm::ContinuousUnivariateDistribution\n    dδ_preDCb::ContinuousUnivariateDistribution\n    dΔ_cDC1bm::ContinuousUnivariateDistribution\n    dΔ_cDC2bm::ContinuousUnivariateDistribution\n    dΔ_cDC1b::ContinuousUnivariateDistribution\n    dΔ_cDC2b::ContinuousUnivariateDistribution\n    dλ_cDC1::ContinuousUnivariateDistribution\n    dλ_cDC2::ContinuousUnivariateDistribution\n    RpreDC::Float64\n    RpreDC_cDC1_bm::Float64\n    RpreDC_cDC2_bm::Float64\nend\n\nfunction (b::MyBijector)(x::AbstractVector)\n\ty = similar(x)\n\n    y[1] = bijector(b.dp_preDCbm)(x[1]) #p_preDCbm\n    y[2] = bijector(b.dp_cDC1bm)(x[2]) #p_cDC1bm\n    y[3] = bijector(b.dp_cDC2bm)(x[3]) #p_cDC2bm\n    \n    # lower_p_preDCbm = (λ_preDC + x[7] + x[8])\n    # λ_preDC = (x[9] + x[10] + x[4]) / d.RpreDC\n    \n    y[7] = bijector(truncated(b.dΔ_cDC1bm, 0.0, x[1]) )(x[7]) #Δ_cDC1bm\n    y[8] = bijector(truncated(b.dΔ_cDC2bm, 0.0, x[1] - x[7]) )(x[8]) #Δ_cDC2bm\n    y[9] = bijector(truncated(b.dΔ_cDC1b,0.0,(x[1] - x[7] -x[8])*b.RpreDC))(x[9]) #Δ_cDC1b\n    y[10] = bijector(truncated(b.dΔ_cDC2b,0.0,(x[1] - x[7] -x[8]-x[9]/b.RpreDC)*b.RpreDC))(x[10]) #Δ_cDC2b\n    y[4] = bijector(truncated(b.dδ_preDCb,0.0, (x[1] - x[7] -x[8]-x[9]/b.RpreDC-x[10]/b.RpreDC)*b.RpreDC))(x[4]) #δ_preDCb\n    \n    \n    upper_λ_cDC1 = x[2] + x[7] * b.RpreDC_cDC1_bm\n    upper_λ_cDC2 = x[3] + x[8] * b.RpreDC_cDC2_bm\n    y[5] = bijector(truncated(b.dλ_cDC1, -Inf, upper_λ_cDC1))(x[5]) #λ_cDC1\n    y[6] = bijector(truncated(b.dλ_cDC2, -Inf, upper_λ_cDC2))(x[6]) #λ_cDC2 \n\n    return y\nend\nfunction (b::Inverse{&lt;:MyBijector})(y::AbstractVector)\n\tx = similar(y)\n\n    x[1] = inv(bijector(b.orig.dp_preDCbm))(y[1]) #p_preDCbm\n    x[2] = inv(bijector(b.orig.dp_cDC1bm))(y[2]) #p_cDC1bm\n    x[3] = inv(bijector(b.orig.dp_cDC2bm))(y[3]) #p_cDC2bm\n    \n    # lower_p_preDCbm = (λ_preDC + x[7] + x[8])\n    # λ_preDC = (x[9] + x[10] + x[4]) / d.RpreDC\n    \n    x[7] = inv(bijector(truncated(b.orig.dΔ_cDC1bm, 0.0, x[1]) ))(y[7]) #Δ_cDC1bm\n    x[8] = inv(bijector(truncated(b.orig.dΔ_cDC2bm, 0.0, x[1] - x[7]) ))(y[8]) #Δ_cDC2bm\n    x[9] = inv(bijector(truncated(b.orig.dΔ_cDC1b,0.0,(x[1] - x[7] -x[8])*b.orig.RpreDC)))(y[9]) #Δ_cDC1b\n    x[10] = inv(bijector(truncated(b.orig.dΔ_cDC2b,0.0,(x[1] - x[7] -x[8]-x[9]/b.orig.RpreDC)*b.orig.RpreDC)))(y[10]) #Δ_cDC2b\n    x[4] = inv(bijector(truncated(b.orig.dδ_preDCb,0.0, (x[1] - x[7] -x[8]-x[9]/b.orig.RpreDC-x[10]/b.orig.RpreDC)*b.orig.RpreDC)))(y[4]) #δ_preDCb\n    \n    \n    upper_λ_cDC1 = x[2] + x[7] * b.orig.RpreDC_cDC1_bm\n    upper_λ_cDC2 = x[3] + x[8] * b.orig.RpreDC_cDC2_bm\n    x[5] = inv(bijector(truncated(b.orig.dλ_cDC1, -Inf, upper_λ_cDC1)))(y[5]) #λ_cDC1\n    x[6] = inv(bijector(truncated(b.orig.dλ_cDC2, -Inf, upper_λ_cDC2)))(y[6]) #λ_cDC2 \n\n    return x\nend\nfunction Bijectors.logabsdetjac(b::MyBijector, x::AbstractVector)\n\tl = float(zero(eltype(x)))\n\n    l += logabsdetjac(bijector(b.dp_preDCbm),x[1]) #p_preDCbm\n    l += logabsdetjac(bijector(b.dp_cDC1bm),x[2]) #p_cDC1bm\n    l += logabsdetjac(bijector(b.dp_cDC2bm),x[3]) #p_cDC2bm\n    \n    # lower_p_preDCbm = (λ_preDC + x[7] + x[8])\n    # λ_preDC = (x[9] + x[10] + x[4]) / d.RpreDC\n    \n    l += logabsdetjac(bijector(truncated(b.dΔ_cDC1bm, 0.0, x[1])),x[7]) #Δ_cDC1bm\n    l += logabsdetjac(bijector(truncated(b.dΔ_cDC2bm, 0.0, x[1] - x[7])),x[8]) #Δ_cDC2bm\n    l += logabsdetjac(bijector(truncated(b.dΔ_cDC1b,0.0,(x[1] - x[7] -x[8])*b.RpreDC)),x[9]) #Δ_cDC1b\n    l += logabsdetjac(bijector(truncated(b.dΔ_cDC2b,0.0,(x[1] - x[7] -x[8]-x[9]/b.RpreDC)*b.RpreDC)),x[10]) #Δ_cDC2b\n    l += logabsdetjac(bijector(truncated(b.dδ_preDCb,0.0, (x[1] - x[7] -x[8]-x[9]/b.RpreDC-x[10]/b.RpreDC)*b.RpreDC)),x[4]) #δ_preDCb\n    \n    \n    upper_λ_cDC1 = x[2] + x[7] * b.RpreDC_cDC1_bm\n    upper_λ_cDC2 = x[3] + x[8] * b.RpreDC_cDC2_bm\n    l += logabsdetjac(bijector(truncated(b.dλ_cDC1, -Inf, upper_λ_cDC1)),x[5]) #λ_cDC1\n    l += logabsdetjac(bijector(truncated(b.dλ_cDC2, -Inf, upper_λ_cDC2)),x[6]) #λ_cDC2 \n\n\n    return l\nend\nBijectors.bijector(d::MyDistribution)= MyBijector(d.dp_preDCbm,d.dp_cDC1bm,d.dp_cDC2bm,d.dδ_preDCb,d.dΔ_cDC1bm,d.dΔ_cDC2bm,d.dΔ_cDC1b,d.dΔ_cDC2b,d.dλ_cDC1,d.dλ_cDC2,d.RpreDC,d.RpreDC_cDC1_bm,d.RpreDC_cDC2_bm)```\nThe error comes from the following line `x[8] = inv(bijector(truncated(b.orig.dΔ_cDC2bm, 0.0, x[1] - x[7]) ))(y[8]) _#Δ_cDC2bm_`  in `_function_ (b::Inverse{&lt;:MyBijector})(y::AbstractVector)` .\n\nTesting the custom dist and the bijectors outside of the model seems to just work fine, though.","user":"UGFMDAMC3","ts":"1615744561.128000","team":"T68168MUP","edited":{"user":"UGFMDAMC3","ts":"1615744991.000000"},"blocks":[{"type":"rich_text","block_id":"Jafk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have made some changes to the ODE and the custom distribution(which should solve the prior problem described) and it seems to run okay until the "},{"type":"text","text":"Turing","style":{"code":true}},{"type":"text","text":" model runs into an error:\n"},{"type":"text","text":"Uniform: the condition a < b is not satisfied","style":{"code":true}},{"type":"text","text":"\n\nThe new custom dist and bijectorions are as follows:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using Distributions, Bijectors\nusing Random\n\nstruct MyDistribution <: ContinuousMultivariateDistribution\n    dp_preDCbm::ContinuousUnivariateDistribution\n    dp_cDC1bm::ContinuousUnivariateDistribution\n    dp_cDC2bm::ContinuousUnivariateDistribution\n    dδ_preDCb::ContinuousUnivariateDistribution\n    dΔ_cDC1bm::ContinuousUnivariateDistribution\n    dΔ_cDC2bm::ContinuousUnivariateDistribution\n    dΔ_cDC1b::ContinuousUnivariateDistribution\n    dΔ_cDC2b::ContinuousUnivariateDistribution\n    dλ_cDC1::ContinuousUnivariateDistribution\n    dλ_cDC2::ContinuousUnivariateDistribution\n    RpreDC::Float64\n    RpreDC_cDC1_bm::Float64\n    RpreDC_cDC2_bm::Float64\nend\n\nfunction Distributions.length(d::MyDistribution)\n    10# d.n\nend\n\nfunction Base.rand(d::MyDistribution)\n\tb = zeros(10)\n\n    b[1] = rand(d.dp_preDCbm) #p_preDCbm\n    b[2] = rand(d.dp_cDC1bm) #p_cDC1bm\n    b[3] = rand(d.dp_cDC2bm) #p_cDC2bm\n    \n    # lower_p_preDCbm = (λ_preDC + b[7] + b[8])\n    # λ_preDC = (b[9] + b[10] + b[4]) / d.RpreDC\n    \n    b[7] = rand(truncated(d.dΔ_cDC1bm, 0.0, b[1])) #Δ_cDC1bm\n    b[8] = rand(truncated(d.dΔ_cDC2bm, 0.0, b[1] - b[7])) #Δ_cDC2bm\n    b[9] = rand(truncated(d.dΔ_cDC1b,0.0,(b[1] - b[7] -b[8])*d.RpreDC)) #Δ_cDC1b\n    b[10] = rand(truncated(d.dΔ_cDC2b,0.0,(b[1] - b[7] -b[8]-b[9]/d.RpreDC)*d.RpreDC)) #Δ_cDC2b\n    b[4] = rand(truncated(d.dδ_preDCb,0.0, (b[1] - b[7] -b[8]-b[9]/d.RpreDC-b[10]/d.RpreDC)*d.RpreDC)) #δ_preDCb\n    \n    \n    upper_λ_cDC1 = b[2] + b[7] * d.RpreDC_cDC1_bm\n    upper_λ_cDC2 = b[3] + b[8] * d.RpreDC_cDC2_bm\n    b[5] = rand(truncated(d.dλ_cDC1, -Inf, upper_λ_cDC1)) #λ_cDC1\n    b[6] = rand(truncated(d.dλ_cDC2, -Inf, upper_λ_cDC2)) #λ_cDC2 \n    return b\nend\n\nfunction Distributions._rand!(rng::Random.AbstractRNG,d::MyDistribution, x::Array{Float64,1})\n    x[1] = rand(d.dp_preDCbm) #p_preDCbm\n    x[2] = rand(d.dp_cDC1bm) #p_cDC1bm\n    x[3] = rand(d.dp_cDC2bm) #p_cDC2bm\n    \n    # lower_p_preDCbm = (λ_preDC + x[7] + x[8])\n    # λ_preDC = (x[9] + x[10] + x[4]) / d.RpreDC\n    \n    x[7] = rand(truncated(d.dΔ_cDC1bm, 0.0, x[1])) #Δ_cDC1bm\n    x[8] = rand(truncated(d.dΔ_cDC2bm, 0.0, x[1] - x[7])) #Δ_cDC2bm\n    x[9] = rand(truncated(d.dΔ_cDC1b,0.0,(x[1] - x[7] -x[8])*d.RpreDC)) #Δ_cDC1b\n    x[10] = rand(truncated(d.dΔ_cDC2b,0.0,(x[1] - x[7] -x[8]-x[9]/d.RpreDC)*d.RpreDC)) #Δ_cDC2b\n    x[4] = rand(truncated(d.dδ_preDCb,0.0, (x[1] - x[7] -x[8]-x[9]/d.RpreDC-x[10]/d.RpreDC)*d.RpreDC)) #δ_preDCb\n    \n    \n    upper_λ_cDC1 = x[2] + x[7] * d.RpreDC_cDC1_bm\n    upper_λ_cDC2 = x[3] + x[8] * d.RpreDC_cDC2_bm\n    x[5] = rand(truncated(d.dλ_cDC1, -Inf, upper_λ_cDC1)) #λ_cDC1\n    x[6] = rand(truncated(d.dλ_cDC2, -Inf, upper_λ_cDC2)) #λ_cDC2 \n    return\nend\n\nfunction Distributions.rand(rng::Random.AbstractRNG,d::MyDistribution)\n\tx = zeros(10)\n    Distributions._rand!(rng,d, x)\n    return x\nend\n\n\n\nfunction Distributions._logpdf(d::MyDistribution, b::AbstractVector)\n    l = logpdf(d.dp_preDCbm ,b[1]) #p_preDCbm\n    l += logpdf(d.dp_cDC1bm ,b[2]) #p_cDC1bm\n    l += logpdf(d.dp_cDC2bm ,b[3]) #p_cDC2bm\n    \n    # lower_p_preDCbm = (λ_preDC + b[7] + b[8])\n    # λ_preDC = (b[9] + b[10] + b[4]) / d.RpreDC\n    \n    l += logpdf(truncated(d.dΔ_cDC1bm, 0.0, b[1]) ,b[7]) #Δ_cDC1bm\n    l += logpdf(truncated(d.dΔ_cDC2bm, 0.0, b[1] - b[7]) ,b[8]) #Δ_cDC2bm\n    l += logpdf(truncated(d.dΔ_cDC1b,0.0,(b[1] - b[7] -b[8])*d.RpreDC), b[9]) #Δ_cDC1b\n    l += logpdf(truncated(d.dΔ_cDC2b,0.0,(b[1] - b[7] -b[8]-b[9]/d.RpreDC)*d.RpreDC), b[10]) #Δ_cDC2b\n    l += logpdf(truncated(d.dδ_preDCb,0.0, (b[1] - b[7] -b[8]-b[9]/d.RpreDC-b[10]/d.RpreDC)*d.RpreDC), b[4]) #δ_preDCb\n    \n    \n    upper_λ_cDC1 = b[2] + b[7] * d.RpreDC_cDC1_bm\n    upper_λ_cDC2 = b[3] + b[8] * d.RpreDC_cDC2_bm\n    l += logpdf(truncated(d.dλ_cDC1, -Inf, upper_λ_cDC1), b[5]) #λ_cDC1\n    l += logpdf(truncated(d.dλ_cDC2, -Inf, upper_λ_cDC2), b[6]) #λ_cDC2 \n\n    return l\nend\n\nfunction Distributions.logpdf(d::MyDistribution, b::AbstractVector)\n    l = logpdf(d.dp_preDCbm ,b[1]) #p_preDCbm\n    l += logpdf(d.dp_cDC1bm ,b[2]) #p_cDC1bm\n    l += logpdf(d.dp_cDC2bm ,b[3]) #p_cDC2bm\n    \n    # lower_p_preDCbm = (λ_preDC + b[7] + b[8])\n    # λ_preDC = (b[9] + b[10] + b[4]) / d.RpreDC\n    \n    l += logpdf(truncated(d.dΔ_cDC1bm, 0.0, b[1]) ,b[7]) #Δ_cDC1bm\n    l += logpdf(truncated(d.dΔ_cDC2bm, 0.0, b[1] - b[7]) ,b[8]) #Δ_cDC2bm\n    l += logpdf(truncated(d.dΔ_cDC1b,0.0,(b[1] - b[7] -b[8])*d.RpreDC), b[9]) #Δ_cDC1b\n    l += logpdf(truncated(d.dΔ_cDC2b,0.0,(b[1] - b[7] -b[8]-b[9]/d.RpreDC)*d.RpreDC), b[10]) #Δ_cDC2b\n    l += logpdf(truncated(d.dδ_preDCb,0.0, (b[1] - b[7] -b[8]-b[9]/d.RpreDC-b[10]/d.RpreDC)*d.RpreDC), b[4]) #δ_preDCb\n    \n    \n    upper_λ_cDC1 = b[2] + b[7] * d.RpreDC_cDC1_bm\n    upper_λ_cDC2 = b[3] + b[8] * d.RpreDC_cDC2_bm\n    l += logpdf(truncated(d.dλ_cDC1, -Inf, upper_λ_cDC1), b[5]) #λ_cDC1\n    l += logpdf(truncated(d.dλ_cDC2, -Inf, upper_λ_cDC2), b[6]) #λ_cDC2 \n\n    return l\nend\n\nstruct MyBijector <: Bijectors.Bijector{1} \n    dp_preDCbm::ContinuousUnivariateDistribution\n    dp_cDC1bm::ContinuousUnivariateDistribution\n    dp_cDC2bm::ContinuousUnivariateDistribution\n    dδ_preDCb::ContinuousUnivariateDistribution\n    dΔ_cDC1bm::ContinuousUnivariateDistribution\n    dΔ_cDC2bm::ContinuousUnivariateDistribution\n    dΔ_cDC1b::ContinuousUnivariateDistribution\n    dΔ_cDC2b::ContinuousUnivariateDistribution\n    dλ_cDC1::ContinuousUnivariateDistribution\n    dλ_cDC2::ContinuousUnivariateDistribution\n    RpreDC::Float64\n    RpreDC_cDC1_bm::Float64\n    RpreDC_cDC2_bm::Float64\nend\n\nfunction (b::MyBijector)(x::AbstractVector)\n\ty = similar(x)\n\n    y[1] = bijector(b.dp_preDCbm)(x[1]) #p_preDCbm\n    y[2] = bijector(b.dp_cDC1bm)(x[2]) #p_cDC1bm\n    y[3] = bijector(b.dp_cDC2bm)(x[3]) #p_cDC2bm\n    \n    # lower_p_preDCbm = (λ_preDC + x[7] + x[8])\n    # λ_preDC = (x[9] + x[10] + x[4]) / d.RpreDC\n    \n    y[7] = bijector(truncated(b.dΔ_cDC1bm, 0.0, x[1]) )(x[7]) #Δ_cDC1bm\n    y[8] = bijector(truncated(b.dΔ_cDC2bm, 0.0, x[1] - x[7]) )(x[8]) #Δ_cDC2bm\n    y[9] = bijector(truncated(b.dΔ_cDC1b,0.0,(x[1] - x[7] -x[8])*b.RpreDC))(x[9]) #Δ_cDC1b\n    y[10] = bijector(truncated(b.dΔ_cDC2b,0.0,(x[1] - x[7] -x[8]-x[9]/b.RpreDC)*b.RpreDC))(x[10]) #Δ_cDC2b\n    y[4] = bijector(truncated(b.dδ_preDCb,0.0, (x[1] - x[7] -x[8]-x[9]/b.RpreDC-x[10]/b.RpreDC)*b.RpreDC))(x[4]) #δ_preDCb\n    \n    \n    upper_λ_cDC1 = x[2] + x[7] * b.RpreDC_cDC1_bm\n    upper_λ_cDC2 = x[3] + x[8] * b.RpreDC_cDC2_bm\n    y[5] = bijector(truncated(b.dλ_cDC1, -Inf, upper_λ_cDC1))(x[5]) #λ_cDC1\n    y[6] = bijector(truncated(b.dλ_cDC2, -Inf, upper_λ_cDC2))(x[6]) #λ_cDC2 \n\n    return y\nend\nfunction (b::Inverse{<:MyBijector})(y::AbstractVector)\n\tx = similar(y)\n\n    x[1] = inv(bijector(b.orig.dp_preDCbm))(y[1]) #p_preDCbm\n    x[2] = inv(bijector(b.orig.dp_cDC1bm))(y[2]) #p_cDC1bm\n    x[3] = inv(bijector(b.orig.dp_cDC2bm))(y[3]) #p_cDC2bm\n    \n    # lower_p_preDCbm = (λ_preDC + x[7] + x[8])\n    # λ_preDC = (x[9] + x[10] + x[4]) / d.RpreDC\n    \n    x[7] = inv(bijector(truncated(b.orig.dΔ_cDC1bm, 0.0, x[1]) ))(y[7]) #Δ_cDC1bm\n    x[8] = inv(bijector(truncated(b.orig.dΔ_cDC2bm, 0.0, x[1] - x[7]) ))(y[8]) #Δ_cDC2bm\n    x[9] = inv(bijector(truncated(b.orig.dΔ_cDC1b,0.0,(x[1] - x[7] -x[8])*b.orig.RpreDC)))(y[9]) #Δ_cDC1b\n    x[10] = inv(bijector(truncated(b.orig.dΔ_cDC2b,0.0,(x[1] - x[7] -x[8]-x[9]/b.orig.RpreDC)*b.orig.RpreDC)))(y[10]) #Δ_cDC2b\n    x[4] = inv(bijector(truncated(b.orig.dδ_preDCb,0.0, (x[1] - x[7] -x[8]-x[9]/b.orig.RpreDC-x[10]/b.orig.RpreDC)*b.orig.RpreDC)))(y[4]) #δ_preDCb\n    \n    \n    upper_λ_cDC1 = x[2] + x[7] * b.orig.RpreDC_cDC1_bm\n    upper_λ_cDC2 = x[3] + x[8] * b.orig.RpreDC_cDC2_bm\n    x[5] = inv(bijector(truncated(b.orig.dλ_cDC1, -Inf, upper_λ_cDC1)))(y[5]) #λ_cDC1\n    x[6] = inv(bijector(truncated(b.orig.dλ_cDC2, -Inf, upper_λ_cDC2)))(y[6]) #λ_cDC2 \n\n    return x\nend\nfunction Bijectors.logabsdetjac(b::MyBijector, x::AbstractVector)\n\tl = float(zero(eltype(x)))\n\n    l += logabsdetjac(bijector(b.dp_preDCbm),x[1]) #p_preDCbm\n    l += logabsdetjac(bijector(b.dp_cDC1bm),x[2]) #p_cDC1bm\n    l += logabsdetjac(bijector(b.dp_cDC2bm),x[3]) #p_cDC2bm\n    \n    # lower_p_preDCbm = (λ_preDC + x[7] + x[8])\n    # λ_preDC = (x[9] + x[10] + x[4]) / d.RpreDC\n    \n    l += logabsdetjac(bijector(truncated(b.dΔ_cDC1bm, 0.0, x[1])),x[7]) #Δ_cDC1bm\n    l += logabsdetjac(bijector(truncated(b.dΔ_cDC2bm, 0.0, x[1] - x[7])),x[8]) #Δ_cDC2bm\n    l += logabsdetjac(bijector(truncated(b.dΔ_cDC1b,0.0,(x[1] - x[7] -x[8])*b.RpreDC)),x[9]) #Δ_cDC1b\n    l += logabsdetjac(bijector(truncated(b.dΔ_cDC2b,0.0,(x[1] - x[7] -x[8]-x[9]/b.RpreDC)*b.RpreDC)),x[10]) #Δ_cDC2b\n    l += logabsdetjac(bijector(truncated(b.dδ_preDCb,0.0, (x[1] - x[7] -x[8]-x[9]/b.RpreDC-x[10]/b.RpreDC)*b.RpreDC)),x[4]) #δ_preDCb\n    \n    \n    upper_λ_cDC1 = x[2] + x[7] * b.RpreDC_cDC1_bm\n    upper_λ_cDC2 = x[3] + x[8] * b.RpreDC_cDC2_bm\n    l += logabsdetjac(bijector(truncated(b.dλ_cDC1, -Inf, upper_λ_cDC1)),x[5]) #λ_cDC1\n    l += logabsdetjac(bijector(truncated(b.dλ_cDC2, -Inf, upper_λ_cDC2)),x[6]) #λ_cDC2 \n\n\n    return l\nend\nBijectors.bijector(d::MyDistribution)= MyBijector(d.dp_preDCbm,d.dp_cDC1bm,d.dp_cDC2bm,d.dδ_preDCb,d.dΔ_cDC1bm,d.dΔ_cDC2bm,d.dΔ_cDC1b,d.dΔ_cDC2b,d.dλ_cDC1,d.dλ_cDC2,d.RpreDC,d.RpreDC_cDC1_bm,d.RpreDC_cDC2_bm)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nThe error comes from the following line "},{"type":"text","text":"x[8] = inv(bijector(truncated(b.orig.dΔ_cDC2bm, 0.0, x[1] - x[7]) ))(y[8]) ","style":{"code":true}},{"type":"text","text":"#Δ_cDC2bm","style":{"italic":true,"code":true}},{"type":"text","text":"  ","style":{"italic":true}},{"type":"text","text":"in"},{"type":"text","text":" ","style":{"italic":true}},{"type":"text","text":"function","style":{"italic":true,"code":true}},{"type":"text","text":" (b::Inverse{<:MyBijector})(y::AbstractVector)","style":{"code":true}},{"type":"text","text":" .\n\nTesting the custom dist and the bijectors outside of the model seems to just work fine, though."}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"66af3202-b6d8-493d-8ca2-abc42e0ccc0c","type":"message","text":"that means it's moving in every direction except up.","user":"U69BL50BF","ts":"1615744628.128200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"v/0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that means it's moving in every direction except up."}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"b050b66c-2315-4d92-a343-a83275f750a0","type":"message","text":"&gt; that means it's moving in every direction except up.\nI am not sure I understand what you mean.","user":"UGFMDAMC3","ts":"1615745070.128500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hKU","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"that means it's moving in every direction except up."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I am not sure I understand what you mean."}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"ead30f04-2f07-49a9-9aa8-aff5f1641491","type":"message","text":"obscure joke. <https://en.wikipedia.org/wiki/Arrow_keys#WASD_keys>","user":"U69BL50BF","ts":"1615746154.128700","team":"T68168MUP","attachments":[{"image_url":"https://upload.wikimedia.org/wikipedia/commons/8/8c/Arrow_keys.jpg","image_width":628,"image_height":431,"image_bytes":50942,"title":"Arrow keys","title_link":"https://en.wikipedia.org/wiki/Arrow_keys#WASD_keys","from_url":"https://en.wikipedia.org/wiki/Arrow_keys#WASD_keys","author_name":"Wikipedia","author_link":"https://en.wikipedia.org/","text":"Arrow keys or cursor movement keys are buttons on a computer keyboard that are either programmed or designated to move the cursor in a specified direction. \nThe term \"cursor movement key\" is distinct from \"arrow key\" in that the former term may refer to any of various keys on a computer keyboard designated for cursor movement, whereas \"arrow keys\" generally refers to one of four specific keys, typically marked with arrows.Arrow keys are typically located at the bottom of the keyboard to the left side of the numeric keypad, usually arranged in an inverted-T layout but also found in diamond shapes and linear shapes. Arrow keys are commonly used for navigating around documents and for playing games. \nThe inverted-T layout was popularized by the Digital Equipment Corporation LK201 keyboard from 1982.","fallback":"wikipedia: Arrow keys","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png","id":1,"original_url":"https://en.wikipedia.org/wiki/Arrow_keys#WASD_keys"}],"blocks":[{"type":"rich_text","block_id":"p0e/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"obscure joke. "},{"type":"link","url":"https://en.wikipedia.org/wiki/Arrow_keys#WASD_keys"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3","reactions":[{"name":"smile","users":["UGFMDAMC3"],"count":1}]},{"client_msg_id":"51eb7eb9-b3f9-47dc-865e-bfb45be55867","type":"message","text":"that took me awhile :stuck_out_tongue_closed_eyes:","user":"UGFMDAMC3","ts":"1615746386.129100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LDQ=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that took me awhile "},{"type":"emoji","name":"stuck_out_tongue_closed_eyes"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"d45049b1-2979-44e6-930f-259cdfa84a80","type":"message","text":"Now that you edited the error message to not just say `asd` you took away my setup!","user":"U69BL50BF","ts":"1615746866.129300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wqh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Now that you edited the error message to not just say "},{"type":"text","text":"asd","style":{"code":true}},{"type":"text","text":" you took away my setup!"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3","reactions":[{"name":"joy","users":["UGFMDAMC3"],"count":1}]},{"client_msg_id":"cb5f48f1-5b07-4a8a-a90e-e53875d567f2","type":"message","text":"<@UHDNY2YMA>  I hope you don't mind me tagging you but I was wondering if you had an idea why the above error occurs when sampling while there is no apparent problem when testing the custom dist and bijection independently?","user":"UGFMDAMC3","ts":"1615755402.129600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LsX","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UHDNY2YMA"},{"type":"text","text":"  I hope you don't mind me tagging you but I was wondering if you had an idea why the above error occurs when sampling while there is no apparent problem when testing the custom dist and bijection independently?"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"9aa9d964-6176-4475-8f56-e278bec4d368","type":"message","text":"Sorry, what is the error? It's a slightly long thread so having difficulties identifying what's going on :sweat_smile:\nYou've tried to define a bijector because you want support for stochastic support, right? And you're getting and error when and which says what?","user":"UHDNY2YMA","ts":"1615757423.130000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Yv6mX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sorry, what is the error? It's a slightly long thread so having difficulties identifying what's going on "},{"type":"emoji","name":"sweat_smile"},{"type":"text","text":"\nYou've tried to define a bijector because you want support for stochastic support, right? And you're getting and error when and which says what?"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"6f2542b9-05b1-4ff3-acd0-7118300502ab","type":"message","text":"Ah I see.\nCould you maybe add a try/catch and print when it fails? It could just be a numerical issue, e.g. `x[1]` or `x[7]` is some obscene value.","user":"UHDNY2YMA","ts":"1615757875.130400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vm3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah I see.\nCould you maybe add a try/catch and print when it fails? It could just be a numerical issue, e.g. "},{"type":"text","text":"x[1]","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"x[7]","style":{"code":true}},{"type":"text","text":" is some obscene value."}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"cd17d5f7-f47d-4309-af6c-8c6006fb8c11","type":"message","text":"Thanks, yeah will do. Do you mean inside the bijector function or the Turing model? Also are the parameters drawn during inference aware of the custom dist?","user":"UGFMDAMC3","ts":"1615758066.130800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5sQGc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks, yeah will do. Do you mean inside the bijector function or the Turing model? Also are the parameters drawn during inference aware of the custom dist?"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"0d87e37c-a9cd-4022-904a-e2f3f6877db9","type":"message","text":"Inside the inverse def of the bijector, i.e. where you said the error happened:)\n\n&gt;  Also are the parameters drawn during inference aware of the custom dist?\nI'm a bit uncertain what you mean but internally Turing.jl calls `Bijectors.link` and `Bijectors.invlink` when the sampler wants the parameters to be in unconstrained space (e.g. NUTS) which will, unless an explicit method has been implememented, fall back to `bijector(dist)(x)` and similarly for inverse. As a result, any \"new\" distribution which has a `bijector` implementation _should_ automatically work, i.e. samplers such as NUTS will correctly work with the unconstrained parameters.","user":"UHDNY2YMA","ts":"1615758501.131500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aWd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Inside the inverse def of the bijector, i.e. where you said the error happened:)\n\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":" Also are the parameters drawn during inference aware of the custom dist?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I'm a bit uncertain what you mean but internally Turing.jl calls "},{"type":"text","text":"Bijectors.link","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"Bijectors.invlink","style":{"code":true}},{"type":"text","text":" when the sampler wants the parameters to be in unconstrained space (e.g. NUTS) which will, unless an explicit method has been implememented, fall back to "},{"type":"text","text":"bijector(dist)(x)","style":{"code":true}},{"type":"text","text":" and similarly for inverse. As a result, any \"new\" distribution which has a "},{"type":"text","text":"bijector","style":{"code":true}},{"type":"text","text":" implementation "},{"type":"text","text":"should","style":{"italic":true}},{"type":"text","text":" automatically work, i.e. samplers such as NUTS will correctly work with the unconstrained parameters."}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"508d891f-3f94-4bea-8118-9356a98012c9","type":"message","text":"I suspect that sample on the unconstrained space doesn't satisfy the conditions of the custom dist and thus it fails. Hence I was wondering if the sampling is done aware of the custom dist or just randomly","user":"UGFMDAMC3","ts":"1615759430.132300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1CAj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I suspect that sample on the unconstrained space doesn't satisfy the conditions of the custom dist and thus it fails. Hence I was wondering if the sampling is done aware of the custom dist or just randomly"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"7f598bfe-77b6-4238-ae20-65f604dacac7","type":"message","text":"But that's fine since you first invert `y[7]` to get `x[7]` which will satisfy the conditions (assuming we've defined the bijector correctly, but from the looks of it you have).\nSo the bijector will ensure that the conditions are satisfied, *but* numerical issues can still arise and cause issues. It will be a bit easier to debug if we have an example `y` input that leads to the failure:)","user":"UHDNY2YMA","ts":"1615759782.132500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wG/Ld","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But that's fine since you first invert "},{"type":"text","text":"y[7]","style":{"code":true}},{"type":"text","text":" to get "},{"type":"text","text":"x[7]","style":{"code":true}},{"type":"text","text":" which will satisfy the conditions (assuming we've defined the bijector correctly, but from the looks of it you have).\nSo the bijector will ensure that the conditions are satisfied, "},{"type":"text","text":"but","style":{"bold":true}},{"type":"text","text":" numerical issues can still arise and cause issues. It will be a bit easier to debug if we have an example "},{"type":"text","text":"y","style":{"code":true}},{"type":"text","text":" input that leads to the failure:)"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"},{"client_msg_id":"dbf77b26-f6cb-4ccb-8fc1-f917a4b65ee5","type":"message","text":"So why try catch like this:\n```function (b::Inverse{&lt;:MyBijector})(y::AbstractVector)\n\tx = similar(y)\n\n    x[1] = inv(bijector(b.orig.dp_preDCbm))(y[1]) #p_preDCbm\n    x[2] = inv(bijector(b.orig.dp_cDC1bm))(y[2]) #p_cDC1bm\n    x[3] = inv(bijector(b.orig.dp_cDC2bm))(y[3]) #p_cDC2bm\n    \n    # lower_p_preDCbm = (λ_preDC + x[7] + x[8])\n    # λ_preDC = (x[9] + x[10] + x[4]) / d.RpreDC\n    \n    x[7] = inv(bijector(truncated(b.orig.dΔ_cDC1bm, 0.0, x[1]) ))(y[7]) #Δ_cDC1bm\n    try\n        x[8] = inv(bijector(truncated(b.orig.dΔ_cDC2bm, 0.0, x[1] - x[7]) ))(y[8]) #Δ_cDC2bm\n    catch e\n\t\t@show x[1]\n\t\t@show x[7]\n\t\t@show e\n        return\n    end\n    try\n        x[9] = inv(bijector(truncated(b.orig.dΔ_cDC1b,0.0,(x[1] - x[7] -x[8])*b.orig.RpreDC)))(y[9]) #Δ_cDC1b\n    catch e\n        @show x[1]\n\t\t@show x[7]\n\t\t@show x[8]\n\t\t@show e\n        return\n    end\n    x[10] = inv(bijector(truncated(b.orig.dΔ_cDC2b,0.0,(x[1] - x[7] -x[8]-x[9]/b.orig.RpreDC)*b.orig.RpreDC)))(y[10]) #Δ_cDC2b\n    x[4] = inv(bijector(truncated(b.orig.dδ_preDCb,0.0, (x[1] - x[7] -x[8]-x[9]/b.orig.RpreDC-x[10]/b.orig.RpreDC)*b.orig.RpreDC)))(y[4]) #δ_preDCb\n    \n    \n    upper_λ_cDC1 = x[2] + x[7] * b.orig.RpreDC_cDC1_bm\n    upper_λ_cDC2 = x[3] + x[8] * b.orig.RpreDC_cDC2_bm\n    x[5] = inv(bijector(truncated(b.orig.dλ_cDC1, -Inf, upper_λ_cDC1)))(y[5]) #λ_cDC1\n    x[6] = inv(bijector(truncated(b.orig.dλ_cDC2, -Inf, upper_λ_cDC2)))(y[6]) #λ_cDC2 \n\n    return x\nend```\nYou get the following `x[1],x[7] and x[8]` , which I am not sure how to interpret.\n```x[1] = (0.09641208512298645,0.09641208512298645,0.0,0.0,0.0,0.0,0.0,0.0)\nx[7] = (0.08204148293056725,0.08204148293056725,0.0,0.0,0.0,0.0,0.0,0.012228607160268115)\nx[8] = (0.014370602192419202,0.014370602192419202,0.0,0.0,0.0,0.0,0.0,-0.012228607160268115)```\nShouldn't `x[1]` and so on not be single values rather then vectors?","user":"UGFMDAMC3","ts":"1615764770.133500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GXs0/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So why try catch like this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function (b::Inverse{<:MyBijector})(y::AbstractVector)\n\tx = similar(y)\n\n    x[1] = inv(bijector(b.orig.dp_preDCbm))(y[1]) #p_preDCbm\n    x[2] = inv(bijector(b.orig.dp_cDC1bm))(y[2]) #p_cDC1bm\n    x[3] = inv(bijector(b.orig.dp_cDC2bm))(y[3]) #p_cDC2bm\n    \n    # lower_p_preDCbm = (λ_preDC + x[7] + x[8])\n    # λ_preDC = (x[9] + x[10] + x[4]) / d.RpreDC\n    \n    x[7] = inv(bijector(truncated(b.orig.dΔ_cDC1bm, 0.0, x[1]) ))(y[7]) #Δ_cDC1bm\n    try\n        x[8] = inv(bijector(truncated(b.orig.dΔ_cDC2bm, 0.0, x[1] - x[7]) ))(y[8]) #Δ_cDC2bm\n    catch e\n\t\t@show x[1]\n\t\t@show x[7]\n\t\t@show e\n        return\n    end\n    try\n        x[9] = inv(bijector(truncated(b.orig.dΔ_cDC1b,0.0,(x[1] - x[7] -x[8])*b.orig.RpreDC)))(y[9]) #Δ_cDC1b\n    catch e\n        @show x[1]\n\t\t@show x[7]\n\t\t@show x[8]\n\t\t@show e\n        return\n    end\n    x[10] = inv(bijector(truncated(b.orig.dΔ_cDC2b,0.0,(x[1] - x[7] -x[8]-x[9]/b.orig.RpreDC)*b.orig.RpreDC)))(y[10]) #Δ_cDC2b\n    x[4] = inv(bijector(truncated(b.orig.dδ_preDCb,0.0, (x[1] - x[7] -x[8]-x[9]/b.orig.RpreDC-x[10]/b.orig.RpreDC)*b.orig.RpreDC)))(y[4]) #δ_preDCb\n    \n    \n    upper_λ_cDC1 = x[2] + x[7] * b.orig.RpreDC_cDC1_bm\n    upper_λ_cDC2 = x[3] + x[8] * b.orig.RpreDC_cDC2_bm\n    x[5] = inv(bijector(truncated(b.orig.dλ_cDC1, -Inf, upper_λ_cDC1)))(y[5]) #λ_cDC1\n    x[6] = inv(bijector(truncated(b.orig.dλ_cDC2, -Inf, upper_λ_cDC2)))(y[6]) #λ_cDC2 \n\n    return x\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"You get the following "},{"type":"text","text":"x[1],x[7] and x[8]","style":{"code":true}},{"type":"text","text":" , which I am not sure how to interpret.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"x[1] = (0.09641208512298645,0.09641208512298645,0.0,0.0,0.0,0.0,0.0,0.0)\nx[7] = (0.08204148293056725,0.08204148293056725,0.0,0.0,0.0,0.0,0.0,0.012228607160268115)\nx[8] = (0.014370602192419202,0.014370602192419202,0.0,0.0,0.0,0.0,0.0,-0.012228607160268115)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Shouldn't "},{"type":"text","text":"x[1]","style":{"code":true}},{"type":"text","text":" and so on not be single values rather then vectors?"}]}]}],"thread_ts":"1614967762.071300","parent_user_id":"UGFMDAMC3"}]