[{"client_msg_id":"eb3b0695-8054-4c63-80f8-9a6ce83174db","type":"message","text":"maybe a naive question, but I'm trying to understand whether Turing can be also used to compute expectations. I have a scalar-valued function `f(p, z)` where `p` are some parameters (which I would like to optimize) and `z` is distributed as, eg, a multivariate Gaussian (though other distributions may be possible).\n\nComputing this expectation (integrating over `z`) should ideally be fast, so I'd like to avoid sampling approaches in favor of faster approximate solutions. Does it make sense to try and use Turing to compute the expected value `f(p, z)`?","user":"U6BJ9E351","ts":"1616250233.029400","team":"T68168MUP","edited":{"user":"U6BJ9E351","ts":"1616250837.000000"},"blocks":[{"type":"rich_text","block_id":"zSH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"maybe a naive question, but I'm trying to understand whether Turing can be also used to compute expectations. I have a scalar-valued function "},{"type":"text","text":"f(p, z)","style":{"code":true}},{"type":"text","text":" where "},{"type":"text","text":"p","style":{"code":true}},{"type":"text","text":" are some parameters (which I would like to optimize) and "},{"type":"text","text":"z","style":{"code":true}},{"type":"text","text":" is distributed as, eg, a multivariate Gaussian (though other distributions may be possible).\n\nComputing this expectation (integrating over "},{"type":"text","text":"z","style":{"code":true}},{"type":"text","text":") should ideally be fast, so I'd like to avoid sampling approaches in favor of faster approximate solutions. Does it make sense to try and use Turing to compute the expected value "},{"type":"text","text":"f(p, z)","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1616250233.029400","reply_count":3,"reply_users_count":3,"latest_reply":"1616251298.030000","reply_users":["U6BJ9E351","UJDHH8CG4","U8T9JUA5R"],"subscribed":false},{"client_msg_id":"542c8461-4b1a-4aee-9d81-0e7302866417","type":"message","text":"I was imagining doing something like\n```@model mymodel(r) = begin\n           z ~ MvNormal(zeros(n))\n           r = f(p, z)\n       end```\nThen compute the variational inference approximation of `r = f(p, z)` , but I am unsure whether:\n1. this ends up being differentiable in `p`\n2. there is a fast method to compute the `mean` of the distribution I get with variational inference, or whether I should integrate numerically in `r` anyways","user":"U6BJ9E351","ts":"1616250450.029500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5JXf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I was imagining doing something like\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@model mymodel(r) = begin\n           z ~ MvNormal(zeros(n))\n           r = f(p, z)\n       end"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Then compute the variational inference approximation of "},{"type":"text","text":"r = f(p, z)","style":{"code":true}},{"type":"text","text":" , but I am unsure whether:\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this ends up being differentiable in "},{"type":"text","text":"p","style":{"code":true}}]},{"type":"rich_text_section","elements":[{"type":"text","text":"there is a fast method to compute the "},{"type":"text","text":"mean","style":{"code":true}},{"type":"text","text":" of the distribution I get with variational inference, or whether I should integrate numerically in "},{"type":"text","text":"r","style":{"code":true}},{"type":"text","text":" anyways"}]}],"style":"ordered","indent":0}]}],"thread_ts":"1616250233.029400","parent_user_id":"U6BJ9E351"},{"client_msg_id":"25d2aa45-a6f8-4da3-aeeb-cba7247143a5","type":"message","text":"There are lots of ways to do this, which will have pros and cons, but one package designed for this is <https://github.com/QuantEcon/Expectations.jl|https://github.com/QuantEcon/Expectations.jl> which integrates Distributions objects with quadrature.","user":"UJDHH8CG4","ts":"1616251235.029800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QFg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There are lots of ways to do this, which will have pros and cons, but one package designed for this is "},{"type":"link","url":"https://github.com/QuantEcon/Expectations.jl","text":"https://github.com/QuantEcon/Expectations.jl"},{"type":"text","text":" which integrates Distributions objects with quadrature."}]}]}],"thread_ts":"1616250233.029400","parent_user_id":"U6BJ9E351"},{"client_msg_id":"5677a7b9-8564-4948-b009-c77c3192ab79","type":"message","text":"&gt; Does it make sense to try and use Turing to compute the expected value `f(p, z)` ?\nI wouldn't use Turing to compute the expectation - it doesn't feel like the right tool IMO: it's quite heavy and not optimized for your use case (you just sample from the prior, and Turing supports many other features that you don't need). I would use Expectations.jl or Distributions.jl (it also provides an `expectation` method IIRC).","user":"U8T9JUA5R","ts":"1616251298.030000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6AV5","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"Does it make sense to try and use Turing to compute the expected value "},{"type":"text","text":"f(p, z)","style":{"code":true}},{"type":"text","text":" ?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I wouldn't use Turing to compute the expectation - it doesn't feel like the right tool IMO: it's quite heavy and not optimized for your use case (you just sample from the prior, and Turing supports many other features that you don't need). I would use Expectations.jl or Distributions.jl (it also provides an "},{"type":"text","text":"expectation","style":{"code":true}},{"type":"text","text":" method IIRC)."}]}]}],"thread_ts":"1616250233.029400","parent_user_id":"U6BJ9E351"}]