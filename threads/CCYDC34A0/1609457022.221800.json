[{"client_msg_id":"50d55569-e8ca-428a-bc5d-65d21d4fc23c","type":"message","text":"I can correctly estimate the parameters with NUTS, but ADVI gives very wrong answers. How can I fix it?\n```\nimport Random\nusing DataFrames\n\nusing StatsBase: StatsBase, mad, median, percentile, sample, shuffle\nusing Distributions\nusing Turing\nusing Chain\n\nRandom.seed!(1)\n##\n\n\n\ndf, parameters = let\n    β = (\n        β_0 = 7,\n        β_1 = 0.05,\n        β_2 = 0.10,\n        β_3 = 0.15,\n        β_4 = 0.20,\n    )\n    σ = 2\n    parameters = (β..., σ=σ)\n    parameters_df = DataFrame(\n        parameter=collect(keys(parameters)),\n        value=collect(values(parameters)),\n    )\n\n    N = 100_000\n    X = DataFrame(\n        x_0=fill(1, N),\n        x_1=rand([1,2], N),\n        x_2=rand(1:1:10, N),\n        x_3=rand([0,1], N),\n        x_4=rand(0:1:10, N),\n    )\n    df = transform(X)\n    μ = Matrix(df) * collect(β)\n    ϵ = rand(Normal(0, σ), N)\n    y = μ .+ ϵ\n\n    (df = transform(\n        X,\n        [] =&gt; (() -&gt; μ) =&gt; :μ,\n        [] =&gt; (() -&gt; ϵ) =&gt; :ϵ,\n        [] =&gt; (() -&gt; y) =&gt; :y,\n        ),\n     parameters = parameters_df,    )\nend\n\n##\n@model function linear_outcome_model(X, y)\n    β_0 ~ Normal(mean(y), 2std(y))\n    β_1 ~ Normal(0, .5)\n    β_2 ~ Normal(0, .5)\n    β_3 ~ Normal(0, .5)\n    β_4 ~ Normal(0, .5)\n\n    μ = (\n            β_0 .* X.x_0\n            .+ β_1 .* X.x_1\n            .+ β_2 .* X.x_2\n            .+ β_3 .* X.x_3\n            .+ β_4 .* X.x_4\n\n    )\n    σ ~ truncated(Normal(0, 2std(y)), 0, Inf)\n    y ~ MvNormal(μ, σ)\nend\n\n\nfields = [    :x_0,    :x_1,    :x_2,    :x_3,    :x_4,]\n\n\nmodel = @chain df begin\n    linear_outcome_model(_[:, fields], _.y) \nend\n\n\nsamples_nuts =  sample(model, NUTS(0.65), 3000)\n\nsamples_vi = let\n    estimate_vi = vi(model, ADVI())\n    samplesarray_vi = rand(estimate_vi, 1000)\n    _, sym2range = bijector(model, Val(true))\n    parameters = keys(sym2range)\n\n    rearranged = DataFrame(Dict(\n        param =&gt; vec(samplesarray_vi[sym2range[param]..., :])\n        for param in parameters\n    ))\n    insertcols!(rearranged, 1, :index =&gt; 1:1:nrow(rearranged))\n    DataFrames.stack(rearranged, Not(:index), variable_name=:parameter)\nend\n\n\nsummary_nuts = @chain samples_nuts begin\n    DataFrame(summarize(_, mean, std)) \n    rename(_, :parameters =&gt; :parameter) \n    transform(:parameter =&gt; ByRow(Symbol) =&gt; :parameter)\n    innerjoin(_, parameters, on=:parameter)\nend\n\n\nsummary_vi = @chain samples_vi begin\n    groupby(:parameter)\n    combine(:value =&gt; mean =&gt; :mean, :value =&gt; std =&gt; :std)\n    transform(:parameter =&gt; ByRow(Symbol) =&gt; :parameter)\n    innerjoin(parameters, on=:parameter)\nend```","user":"U01ARRMLM7E","ts":"1609457022.221800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WEsN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I can correctly estimate the parameters with NUTS, but ADVI gives very wrong answers. How can I fix it?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"\nimport Random\nusing DataFrames\n\nusing StatsBase: StatsBase, mad, median, percentile, sample, shuffle\nusing Distributions\nusing Turing\nusing Chain\n\nRandom.seed!(1)\n##\n\n\n\ndf, parameters = let\n    β = (\n        β_0 = 7,\n        β_1 = 0.05,\n        β_2 = 0.10,\n        β_3 = 0.15,\n        β_4 = 0.20,\n    )\n    σ = 2\n    parameters = (β..., σ=σ)\n    parameters_df = DataFrame(\n        parameter=collect(keys(parameters)),\n        value=collect(values(parameters)),\n    )\n\n    N = 100_000\n    X = DataFrame(\n        x_0=fill(1, N),\n        x_1=rand([1,2], N),\n        x_2=rand(1:1:10, N),\n        x_3=rand([0,1], N),\n        x_4=rand(0:1:10, N),\n    )\n    df = transform(X)\n    μ = Matrix(df) * collect(β)\n    ϵ = rand(Normal(0, σ), N)\n    y = μ .+ ϵ\n\n    (df = transform(\n        X,\n        [] => (() -> μ) => :μ,\n        [] => (() -> ϵ) => :ϵ,\n        [] => (() -> y) => :y,\n        ),\n     parameters = parameters_df,    )\nend\n\n##\n@model function linear_outcome_model(X, y)\n    β_0 ~ Normal(mean(y), 2std(y))\n    β_1 ~ Normal(0, .5)\n    β_2 ~ Normal(0, .5)\n    β_3 ~ Normal(0, .5)\n    β_4 ~ Normal(0, .5)\n\n    μ = (\n            β_0 .* X.x_0\n            .+ β_1 .* X.x_1\n            .+ β_2 .* X.x_2\n            .+ β_3 .* X.x_3\n            .+ β_4 .* X.x_4\n\n    )\n    σ ~ truncated(Normal(0, 2std(y)), 0, Inf)\n    y ~ MvNormal(μ, σ)\nend\n\n\nfields = [    :x_0,    :x_1,    :x_2,    :x_3,    :x_4,]\n\n\nmodel = @chain df begin\n    linear_outcome_model(_[:, fields], _.y) \nend\n\n\nsamples_nuts =  sample(model, NUTS(0.65), 3000)\n\nsamples_vi = let\n    estimate_vi = vi(model, ADVI())\n    samplesarray_vi = rand(estimate_vi, 1000)\n    _, sym2range = bijector(model, Val(true))\n    parameters = keys(sym2range)\n\n    rearranged = DataFrame(Dict(\n        param => vec(samplesarray_vi[sym2range[param]..., :])\n        for param in parameters\n    ))\n    insertcols!(rearranged, 1, :index => 1:1:nrow(rearranged))\n    DataFrames.stack(rearranged, Not(:index), variable_name=:parameter)\nend\n\n\nsummary_nuts = @chain samples_nuts begin\n    DataFrame(summarize(_, mean, std)) \n    rename(_, :parameters => :parameter) \n    transform(:parameter => ByRow(Symbol) => :parameter)\n    innerjoin(_, parameters, on=:parameter)\nend\n\n\nsummary_vi = @chain samples_vi begin\n    groupby(:parameter)\n    combine(:value => mean => :mean, :value => std => :std)\n    transform(:parameter => ByRow(Symbol) => :parameter)\n    innerjoin(parameters, on=:parameter)\nend"}]}]}],"thread_ts":"1609457022.221800","reply_count":1,"reply_users_count":1,"latest_reply":"1609457035.221900","reply_users":["U01ARRMLM7E"],"subscribed":false},{"client_msg_id":"3401aebb-2e66-4f4b-8450-2e933b93557d","type":"message","text":"```julia&gt; summary_nuts\n6×4 DataFrame\n Row │ parameter  mean       std         value \n     │ Symbol     Float64    Float64     Real  \n─────┼─────────────────────────────────────────\n   1 │ β_0        6.97143    0.0257945       7\n   2 │ β_1        0.0409737  0.0124979    0.05\n   3 │ β_2        0.101222   0.00222162    0.1\n   4 │ β_3        0.170142   0.0125686    0.15\n   5 │ β_4        0.203275   0.00194464    0.2\n   6 │ σ          1.99375    0.00440001      2\n\njulia&gt; summary_vi\n6×4 DataFrame\n Row │ parameter  mean      std        value \n     │ Symbol     Float64   Float64    Real  \n─────┼───────────────────────────────────────\n   1 │ β_0        2.37664   0.312357       7\n   2 │ β_1        1.26278   0.145315    0.05\n   3 │ β_2        0.333547  0.0577251    0.1\n   4 │ β_3        1.07337   0.239592    0.15\n   5 │ β_4        0.377414  0.0625201    0.2\n   6 │ σ          2.33721   0.227075       2```","user":"U01ARRMLM7E","ts":"1609457035.221900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"A5tQ","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> summary_nuts\n6×4 DataFrame\n Row │ parameter  mean       std         value \n     │ Symbol     Float64    Float64     Real  \n─────┼─────────────────────────────────────────\n   1 │ β_0        6.97143    0.0257945       7\n   2 │ β_1        0.0409737  0.0124979    0.05\n   3 │ β_2        0.101222   0.00222162    0.1\n   4 │ β_3        0.170142   0.0125686    0.15\n   5 │ β_4        0.203275   0.00194464    0.2\n   6 │ σ          1.99375    0.00440001      2\n\njulia> summary_vi\n6×4 DataFrame\n Row │ parameter  mean      std        value \n     │ Symbol     Float64   Float64    Real  \n─────┼───────────────────────────────────────\n   1 │ β_0        2.37664   0.312357       7\n   2 │ β_1        1.26278   0.145315    0.05\n   3 │ β_2        0.333547  0.0577251    0.1\n   4 │ β_3        1.07337   0.239592    0.15\n   5 │ β_4        0.377414  0.0625201    0.2\n   6 │ σ          2.33721   0.227075       2"}]}]}],"thread_ts":"1609457022.221800","parent_user_id":"U01ARRMLM7E"}]