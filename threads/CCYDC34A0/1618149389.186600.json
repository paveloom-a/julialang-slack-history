[{"client_msg_id":"88cb00b1-97e6-404b-8264-d34de4562dda","type":"message","text":"I made all the tutorials works (none did), here in my fork <https://github.com/dtolpin/TuringTutorials> . I do not just send a pull request because diffs between notebooks are not quite usable, and I would prefer a maintainer to go through my versions and then replace the notebooks in the main repository.","user":"U01JA0D7L56","ts":"1618149389.186600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OOI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I made all the tutorials works (none did), here in my fork "},{"type":"link","url":"https://github.com/dtolpin/TuringTutorials"},{"type":"text","text":" . I do not just send a pull request because diffs between notebooks are not quite usable, and I would prefer a maintainer to go through my versions and then replace the notebooks in the main repository."}]}]}],"thread_ts":"1618149389.186600","reply_count":1,"reply_users_count":1,"latest_reply":"1618149438.186700","reply_users":["U01JA0D7L56"],"is_locked":false,"subscribed":false},{"client_msg_id":"a98ac4b6-33e0-4e9f-aa11-90c545a8d0a3","type":"message","text":"All notebooks had problems due to incompatible technical changes in Turing, which are annoying but trivial to resolve (changes in function names and in chain layout details).\n\nThere are two significant problems which probably require consideration.\n\nFirst, in the past, Turing collected vector variables under a single key in the chain. That is, if I have\n```for i in 1:N\n   z[i] ~ Distribution\nend```\nI would get a single key :z in the chain. Now instead I get :z[1], :z[2], :z[3], :z[4], ..., z[999] or so in the chain, and need to recollect them manually through string manipulation.\n\nThere may be a rationale behind this choice, but even I draw a single variable from multivariate distribution:\n\n```w ~ MvNormal([0 0], 1.)```\nI still get two keys :w[1] and :w[2] insead of key :w with a vector value. This seems to be in contradiction with the rest of Turing, and makes posterior analysis rather cumbersome.\n\nSecond, Turing's MCMCChains model provides function `describe` which is supposed to provide convergence and posterior summary statistics, and used in a few notebooks. Unfortunately, the function is  untested (there are no tests checking *the form* of the output of describe, only that it is consistent) and their use in the notebooks does not provide any useful information.\n\nThe problem is that `describe` returns a tuple, and there is no three-argument `show` method for tuples, so the MIME type, the second argument, isn't propagated to elements of the tuple. As a result, describe prints in the notebook something like the following:\n\n```2-element Array{ChainDataFrame,1}:\n Summary Statistics (12 x 7)\n Quantiles (12 x 6)```\nAnd that's it. In MCMCchains, the two element show() for 'summary statitstics' and quantiles just prints the name and the shape, not the content, and the three element show(), which prints what the author assumed it would, is not called.\n\nThe workaround I've used in my fixed versions of the notebook is to write:\n\n```dsc = describe(chain)```\nand then\n```dsc[1]                       ```\nand\n```dsc[2]```\neach in its own cell. Then it displays what it should. But I could just call summarystats and quantile instead. describe must be fixed in MCMCChains.jl's stats.jl by changing show() accordingly (most easily two argument show() should print details, or a method should be provided for the output type of describe which then would have to be wrapped.","user":"U01JA0D7L56","ts":"1618149438.186700","team":"T68168MUP","edited":{"user":"U01JA0D7L56","ts":"1618150409.000000"},"blocks":[{"type":"rich_text","block_id":"Fm6w","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"All notebooks had problems due to incompatible technical changes in Turing, which are annoying but trivial to resolve (changes in function names and in chain layout details).\n\nThere are two significant problems which probably require consideration.\n\nFirst, in the past, Turing collected vector variables under a single key in the chain. That is, if I have\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"for i in 1:N\n   z[i] ~ Distribution\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I would get a single key :z in the chain. Now instead I get :z[1], :z[2], :z[3], :z[4], ..., z[999] or so in the chain, and need to recollect them manually through string manipulation.\n\nThere may be a rationale behind this choice, but even I draw a single variable from multivariate distribution:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"w ~ MvNormal([0 0], 1.)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I still get two keys :w[1] and :w[2] insead of key :w with a vector value. This seems to be in contradiction with the rest of Turing, and makes posterior analysis rather cumbersome.\n\nSecond, Turing's MCMCChains model provides function "},{"type":"text","text":"describe","style":{"code":true}},{"type":"text","text":" which is supposed to provide convergence and posterior summary statistics, and used in a few notebooks. Unfortunately, the function is  untested (there are no tests checking "},{"type":"text","text":"the form ","style":{"bold":true}},{"type":"text","text":"of the output of describe, only that it is consistent) and their use in the notebooks does not provide any useful information.\n\nThe problem is that "},{"type":"text","text":"describe","style":{"code":true}},{"type":"text","text":" returns a tuple, and there is no three-argument "},{"type":"text","text":"show","style":{"code":true}},{"type":"text","text":" method for tuples, so the MIME type, the second argument, isn't propagated to elements of the tuple. As a result, describe prints in the notebook something like the following:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"2-element Array{ChainDataFrame,1}:\n Summary Statistics (12 x 7)\n Quantiles (12 x 6)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"And that's it. In MCMCchains, the two element show() for 'summary statitstics' and quantiles just prints the name and the shape, not the content, and the three element show(), which prints what the author assumed it would, is not called.\n\nThe workaround I've used in my fixed versions of the notebook is to write:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"dsc = describe(chain)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"and then\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"dsc[1]                       "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"and\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"dsc[2]"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"each in its own cell. Then it displays what it should. But I could just call summarystats and quantile instead. describe must be fixed in MCMCChains.jl's stats.jl by changing show() accordingly (most easily two argument show() should print details, or a method should be provided for the output type of describe which then would have to be wrapped."}]}]}],"thread_ts":"1618149389.186600","parent_user_id":"U01JA0D7L56"}]