[{"client_msg_id":"6db60c14-31b7-45a1-823f-2130c2818b80","type":"message","text":"Hi! I met some trouble in loading the .jls which computed and save the Turing MCMC chain from a cluster (cluster link <https://rcic.uci.edu/hpc3/index.html>). Could you help me with this? Thanks a lot in advacne!\n\nwhen I run Turing on my local computer, I could successfully save and load the chain as .jls file by `using JLD`.\n```kk = read(\"chain_chain.jls\",Chains) # loading the chain from local computation```\n```Chains MCMC chain (1000×98×1 Array{Float64,3}):\n\nIterations        = 1:1000\nThinning interval = 1\nChains            = 1\nSamples per chain = 1000```\nHowever, when I use cluster for the Turing computation and save chain as .jls file. Then, read the .jls `using JLD`on my local computer raises `Keyerror`\n```kkk = read(\"chain_chain.jls\", Chains);```\nit gives the Keyerror:\n```KeyError: key AbstractPPL [7a57a42e-76ec-4ea3-a279-07e840d6d9cf] not found\n\nStacktrace:\n [1] getindex at .\\dict.jl:467 [inlined]\n [2] root_module at .\\loading.jl:968 [inlined]\n [3] deserialize_module(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:953\n [4] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:855\n [5] deserialize(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:773\n [6] deserialize_datatype(::Serialization.Serializer{IOStream}, ::Bool) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:1251\n [7] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:826\n [8] deserialize(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:773\n [9] deserialize(::Serialization.Serializer{IOStream}, ::Type{UnionAll}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:1292\n [10] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:919\n [11] deserialize(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:773\n [12] deserialize_expr(::Serialization.Serializer{IOStream}, ::Int64) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:1163\n [13] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:853\n [14] deserialize_fillarray!(::Array{Any,1}, ::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:1153\n [15] deserialize_array(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:1145\n [16] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:824\n [17] deserialize(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:773\n [18] deserialize(::Serialization.Serializer{IOStream}, ::Type{Core.CodeInfo}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:1051\n [19] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:919\n [20] deserialize(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:773\n [21] deserialize(::Serialization.Serializer{IOStream}, ::Type{Method}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:988\n [22] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:919\n [23] deserialize_fillarray!(::Array{Method,1}, ::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:1153\n [24] deserialize_array(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:1145\n [25] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:824\n [26] deserialize(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:773\n [27] deserialize_typename(::Serialization.Serializer{IOStream}, ::UInt64) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:1218\n [28] deserialize(::Serialization.Serializer{IOStream}, ::Type{Core.TypeName}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:1171\n [29] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:919\n [30] deserialize(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:773\n [31] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:830\n [32] deserialize(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:773\n [33] deserialize_datatype(::Serialization.Serializer{IOStream}, ::Bool) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:1276\n [34] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:826\n [35] deserialize(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:773\n [36] deserialize_datatype(::Serialization.Serializer{IOStream}, ::Bool) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:1267\n [37] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:826\n [38] deserialize(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:773\n [39] deserialize_datatype(::Serialization.Serializer{IOStream}, ::Bool) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:1276\n ... (the last 3 lines are repeated 1 more time)\n [43] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:826\n [44] deserialize(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:773\n [45] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:833\n [46] deserialize(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:773\n [47] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:879\n [48] deserialize(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:773\n [49] deserialize at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:760 [inlined]\n [50] open(::typeof(Serialization.deserialize), ::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at .\\io.jl:325\n [51] open at .\\io.jl:323 [inlined]\n [52] deserialize at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:770 [inlined]\n [53] read(::String, ::Type{Chains}) at .\\deprecated.jl:72\n [54] top-level scope at In[4]:1```","user":"U01Q398M3QB","ts":"1617826688.182000","team":"T68168MUP","edited":{"user":"U01Q398M3QB","ts":"1617826769.000000"},"blocks":[{"type":"rich_text","block_id":"jpv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi! I met some trouble in loading the .jls which computed and save the Turing MCMC chain from a cluster (cluster link "},{"type":"link","url":"https://rcic.uci.edu/hpc3/index.html"},{"type":"text","text":"). Could you help me with this? Thanks a lot in advacne!\n\nwhen I run Turing on my local computer, I could successfully save and load the chain as .jls file by "},{"type":"text","text":"using JLD","style":{"code":true}},{"type":"text","text":".\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"kk = read(\"chain_chain.jls\",Chains) # loading the chain from local computation"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"Chains MCMC chain (1000×98×1 Array{Float64,3}):\n\nIterations        = 1:1000\nThinning interval = 1\nChains            = 1\nSamples per chain = 1000"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nHowever, when I use cluster for the Turing computation and save chain as .jls file. Then, read the .jls "},{"type":"text","text":"using JLD","style":{"code":true}},{"type":"text","text":"on my local computer raises "},{"type":"text","text":"Keyerror","style":{"code":true}},{"type":"text","text":"\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"kkk = read(\"chain_chain.jls\", Chains);"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"it gives the Keyerror:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"KeyError: key AbstractPPL [7a57a42e-76ec-4ea3-a279-07e840d6d9cf] not found\n\nStacktrace:\n [1] getindex at .\\dict.jl:467 [inlined]\n [2] root_module at .\\loading.jl:968 [inlined]\n [3] deserialize_module(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:953\n [4] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:855\n [5] deserialize(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:773\n [6] deserialize_datatype(::Serialization.Serializer{IOStream}, ::Bool) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:1251\n [7] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:826\n [8] deserialize(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:773\n [9] deserialize(::Serialization.Serializer{IOStream}, ::Type{UnionAll}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:1292\n [10] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:919\n [11] deserialize(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:773\n [12] deserialize_expr(::Serialization.Serializer{IOStream}, ::Int64) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:1163\n [13] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:853\n [14] deserialize_fillarray!(::Array{Any,1}, ::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:1153\n [15] deserialize_array(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:1145\n [16] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:824\n [17] deserialize(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:773\n [18] deserialize(::Serialization.Serializer{IOStream}, ::Type{Core.CodeInfo}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:1051\n [19] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:919\n [20] deserialize(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:773\n [21] deserialize(::Serialization.Serializer{IOStream}, ::Type{Method}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:988\n [22] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:919\n [23] deserialize_fillarray!(::Array{Method,1}, ::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:1153\n [24] deserialize_array(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:1145\n [25] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:824\n [26] deserialize(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:773\n [27] deserialize_typename(::Serialization.Serializer{IOStream}, ::UInt64) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:1218\n [28] deserialize(::Serialization.Serializer{IOStream}, ::Type{Core.TypeName}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:1171\n [29] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:919\n [30] deserialize(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:773\n [31] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:830\n [32] deserialize(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:773\n [33] deserialize_datatype(::Serialization.Serializer{IOStream}, ::Bool) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:1276\n [34] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:826\n [35] deserialize(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:773\n [36] deserialize_datatype(::Serialization.Serializer{IOStream}, ::Bool) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:1267\n [37] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:826\n [38] deserialize(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:773\n [39] deserialize_datatype(::Serialization.Serializer{IOStream}, ::Bool) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:1276\n ... (the last 3 lines are repeated 1 more time)\n [43] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:826\n [44] deserialize(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:773\n [45] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:833\n [46] deserialize(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:773\n [47] handle_deserialize(::Serialization.Serializer{IOStream}, ::Int32) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:879\n [48] deserialize(::Serialization.Serializer{IOStream}) at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:773\n [49] deserialize at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:760 [inlined]\n [50] open(::typeof(Serialization.deserialize), ::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at .\\io.jl:325\n [51] open at .\\io.jl:323 [inlined]\n [52] deserialize at D:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\Serialization\\src\\Serialization.jl:770 [inlined]\n [53] read(::String, ::Type{Chains}) at .\\deprecated.jl:72\n [54] top-level scope at In[4]:1"}]}]}],"thread_ts":"1617826688.182000","reply_count":1,"reply_users_count":1,"latest_reply":"1617830411.182200","reply_users":["U8T9JUA5R"],"is_locked":false,"subscribed":false},{"client_msg_id":"59641efd-539a-41cb-9f64-3310593b10f8","type":"message","text":"`read`  and `write` just serialize the chain, and in general it is not guaranteed that you can load the data if eg. you use different Julia versions, different system images or different packages. Since it's not clear from the names `read` and `write` that the data is serialized these two overloads are deprecated and instead one should use `serialize` and `deserialize` . You might want to have a look at JLSO which also saves metadata such as the Julia version and installed packages. You can find more information in the docs: <https://turinglang.github.io/MCMCChains.jl/dev/getting-started/#Saving-and-Loading-Chains>","user":"U8T9JUA5R","ts":"1617830411.182200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mXh7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"read","style":{"code":true}},{"type":"text","text":"  and "},{"type":"text","text":"write","style":{"code":true}},{"type":"text","text":" just serialize the chain, and in general it is not guaranteed that you can load the data if eg. you use different Julia versions, different system images or different packages. Since it's not clear from the names "},{"type":"text","text":"read","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"write","style":{"code":true}},{"type":"text","text":" that the data is serialized these two overloads are deprecated and instead one should use "},{"type":"text","text":"serialize","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"deserialize","style":{"code":true}},{"type":"text","text":" . You might want to have a look at JLSO which also saves metadata such as the Julia version and installed packages. You can find more information in the docs: "},{"type":"link","url":"https://turinglang.github.io/MCMCChains.jl/dev/getting-started/#Saving-and-Loading-Chains"}]}]}],"thread_ts":"1617826688.182000","parent_user_id":"U01Q398M3QB"}]