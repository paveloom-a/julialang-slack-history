[{"client_msg_id":"77c99ada-226e-40f8-83fe-8fe7b9869841","type":"message","text":"Some words on what Jesse and the team on this are likely to achieve related to BSTS models with what we're currently planning to call DifferentiableStateSpaceModels.jl. It will have differentiable modules for the kind of linear gaussian state space models at the core of BSTS, including Kalman filters and marginal likelihoods for observables of linear state space models, meaning that you can plug it into Turing and apply differentiable inference to do things like put non-conjugate priors on the coefficients or make them a function of other things in a nonlinear way, and estimate jointly with whatever else you want in a probabilistic program. We will also have modules for the joint likelihood of observables and unobservables, which means inference will not be limited to the Kalman filter or linear-Gaussian models, though if used with generic methods this means you are treating the latent state variables just like any other parameter/latent variable in Bayes. This is great if your generic algorithm can handle that (some tests with HMC suggest it's not bad, in many cases), but isn't specialized to state space structure like the custom (mostly Gibbs-based) samplers in something like Google's BSTS or its successor in Tensorflow Probability, or the StateSpaceModels.jl package you linked. (or the kind of custom particle filters, as opposed to generic SMC, that other Julia PPLs focus on). Wrapping parts of existing state space code in Turing may be possible, though you run into the issue of composing inference algorithms, and also differentiable algorithms may face issues without dedicated implicit rules like we are implementing. One thing we could add but have not yet, that is a real strength of BSTS type methods, is dedicated modules for the kinds of state space structures that go into BSTS, like an ARIMA component, a dynamic linear model component, stochastic or nonstochastic trends, etc. These are constructed by composing matrices that go into the state space likelihood, and a special syntax is very helpful to make this easy (if you've ever looked at how you need to code a moving average model into a Kalman filter you know this is something you don't want to do by hand every time).  We are building a separate library, using MTK, for building time series model structures that can be put into state space model form, but because the team is focused on economics applications, the focus is more on tools for incorporating things economists do (like solve for equilibrium) than on generic time series tools.  Whether the path forward involves extending our structure software to include some of that kind of thing or whether it's better to separate it out is a decision path we haven't gone down yet.","user":"UJDHH8CG4","ts":"1615214248.099500","team":"T68168MUP","edited":{"user":"UJDHH8CG4","ts":"1615216273.000000"},"blocks":[{"type":"rich_text","block_id":"25KEC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Some words on what Jesse and the team on this are likely to achieve related to BSTS models with what we're currently planning to call DifferentiableStateSpaceModels.jl. It will have differentiable modules for the kind of linear gaussian state space models at the core of BSTS, including Kalman filters and marginal likelihoods for observables of linear state space models, meaning that you can plug it into Turing and apply differentiable inference to do things like put non-conjugate priors on the coefficients or make them a function of other things in a nonlinear way, and estimate jointly with whatever else you want in a probabilistic program. We will also have modules for the joint likelihood of observables and unobservables, which means inference will not be limited to the Kalman filter or linear-Gaussian models, though if used with generic methods this means you are treating the latent state variables just like any other parameter/latent variable in Bayes. This is great if your generic algorithm can handle that (some tests with HMC suggest it's not bad, in many cases), but isn't specialized to state space structure like the custom (mostly Gibbs-based) samplers in something like Google's BSTS or its successor in Tensorflow Probability, or the StateSpaceModels.jl package you linked. (or the kind of custom particle filters, as opposed to generic SMC, that other Julia PPLs focus on). Wrapping parts of existing state space code in Turing may be possible, though you run into the issue of composing inference algorithms, and also differentiable algorithms may face issues without dedicated implicit rules like we are implementing. One thing we could add but have not yet, that is a real strength of BSTS type methods, is dedicated modules for the kinds of state space structures that go into BSTS, like an ARIMA component, a dynamic linear model component, stochastic or nonstochastic trends, etc. These are constructed by composing matrices that go into the state space likelihood, and a special syntax is very helpful to make this easy (if you've ever looked at how you need to code a moving average model into a Kalman filter you know this is something you don't want to do by hand every time).  We are building a separate library, using MTK, for building time series model structures that can be put into state space model form, but because the team is focused on economics applications, the focus is more on tools for incorporating things economists do (like solve for equilibrium) than on generic time series tools.  Whether the path forward involves extending our structure software to include some of that kind of thing or whether it's better to separate it out is a decision path we haven't gone down yet."}]}]}],"thread_ts":"1615214248.099500","reply_count":3,"reply_users_count":2,"latest_reply":"1615220281.104200","reply_users":["U01H36BUDJB","UJDHH8CG4"],"subscribed":false,"reactions":[{"name":"+1","users":["U01H36BUDJB","U9JNHB83X"],"count":2}]},{"client_msg_id":"689e861c-1035-4dc3-95f6-841cda85b3ce","type":"message","text":"Thanks for the summary!","user":"U01H36BUDJB","ts":"1615217420.100000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kFLGQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks for the summary!"}]}]}],"thread_ts":"1615214248.099500","parent_user_id":"UJDHH8CG4"},{"client_msg_id":"30bbc6be-136a-419d-bbac-a0570bdd9eb4","type":"message","text":"Perhaps we could archive this comment somewhere less ephemeral than slack? I imagine I'm not the only one interested in BSTS and Julia.","user":"U01H36BUDJB","ts":"1615218028.100200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CX7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Perhaps we could archive this comment somewhere less ephemeral than slack? I imagine I'm not the only one interested in BSTS and Julia."}]}]}],"thread_ts":"1615214248.099500","parent_user_id":"UJDHH8CG4"},{"client_msg_id":"B5DBA03D-B5EA-49AE-8EB4-F46A3887C80A","type":"message","text":"The hope was to get the actual library working soon so it can have a dedicated page, so a preview should be ephemeral. We are making a push, though I don’t have an exact timeline...","user":"UJDHH8CG4","ts":"1615220281.104200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Puwj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The hope was to get the actual library working soon so it can have a dedicated page, so a preview should be ephemeral. We are making a push, though I don’t have an exact timeline..."}]}]}],"thread_ts":"1615214248.099500","parent_user_id":"UJDHH8CG4"}]