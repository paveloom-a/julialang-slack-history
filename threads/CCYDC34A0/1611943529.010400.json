[{"client_msg_id":"0835c6dc-2742-4e73-a5e4-f0fced3cdcae","type":"message","text":"maybe also do `@macroexpand` before `@model` and post the output as a reply here","user":"U01H36BUDJB","ts":"1611943529.010400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LTpzi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"maybe also do "},{"type":"text","text":"@macroexpand","style":{"code":true}},{"type":"text","text":" before "},{"type":"text","text":"@model","style":{"code":true}},{"type":"text","text":" and post the output as a reply here"}]}]}],"thread_ts":"1611943529.010400","reply_count":1,"reply_users_count":1,"latest_reply":"1611947119.017100","reply_users":["U6CFMFM2R"],"subscribed":false},{"client_msg_id":"36425ef8-01d4-4a8c-be42-ef5abcbbadbc","type":"message","text":"```@macroexpand @model function m3(damage, plate, species, trt, n1, n2, n3, ::Type{T} = Float64) where {T}\n           mu0 ~ Normal(0,10)\n           trt_effects ~ filldist(Normal(0,10), n1)\n           species_effects ~ filldist(Normal(0,10), n2)\n           interaction_effects ~ filldist(Normal(0,10), n1*n2)\n           plate_effects ~ filldist(Normal(0,10), n3)\n           sigma ~ Gamma(1,1)\n           mu = Array{T,3}(undef, n1+1,n2+1,n3+1)\n           mu .= 0.0\n           for i in 1:(n1+1)\n               for j in 1:(n2+1)\n                           for k in 1:(n3+1)\n                       mu[i,j,k] += mu0\n                       if i != 1\n                           mu[i,j,k] += trt_effects[i-1]\n                       end\njulia&gt; @macroexpand @model function m3(damage, plate, species, trt, n1, n2, n3, ::Type{T} = Float64) where {T}\n           mu0 ~ Normal(0,10)\n           trt_effects ~ filldist(Normal(0,10), n1)\n           species_effects ~ filldist(Normal(0,10), n2)\n           interaction_effects ~ filldist(Normal(0,10), n1*n2)\n           plate_effects ~ filldist(Normal(0,10), n3)\n           sigma ~ Gamma(1,1)\n           mu = Array{T,3}(undef, n1+1,n2+1,n3+1)\n           mu .= 0.0\n           for i in 1:(n1+1)\n               for j in 1:(n2+1)\n                           for k in 1:(n3+1)\n                       mu[i,j,k] += mu0\n                       if i != 1\n                           mu[i,j,k] += trt_effects[i-1]\n                       end\n                       if j != 1\n                           mu[i,j,k] += species_effects[j-1]\n                       end\n                       if k != 1\n                           mu[i,j,k] += plate_effects[k-1]\n                       end\n                       if (i != 1) &amp;&amp; (j != 1)\n                           mu[i,j,k] += interaction_effects[i-1 + n1*(j-2)]\n                       end\n                   end\n               end\n           end\n           residuals = Array{T,1}(undef, length(damage))\n           residuals .= 0.0\n           for i in 1:length(damage)\n               residuals[i] = damage[i] - mu[trt[i],species[i],plate[i]]\n               damage[i] ~ Normal(mu[trt[i],species[i],plate[i]],sigma)\n           end\n           return mu, residuals\n       end\nquote\n    $(Expr(:meta, :doc))\n    function m3(damage, plate, species, trt, n1, n2, n3, ::Type{T} = Float64; ) where T\n        #= REPL[45]:1 =#\n        var\"##evaluator#523\" = ((_rng::Random.AbstractRNG, _model::DynamicPPL.Model, _varinfo::DynamicPPL.AbstractVarInfo, _sampler::AbstractMCMC.AbstractSampler, _context::DynamicPPL.AbstractContext, damage, \nplate, species, trt, n1, n2, n3, ::Type{T}) where T-&gt;begin\n                    begin\n                        #= REPL[45]:1 =#\n                        #= REPL[45]:2 =#\n                        begin\n                            var\"##tmpright#493\" = Normal(0, 10)\n                            var\"##tmpright#493\" isa Union{Distribution, AbstractVector{&lt;:Distribution}} || throw(ArgumentError(\"Right-hand side of a ~ must be subtype of Distribution or a vector of Distributions.\"))\n                            var\"##vn#495\" = mu0\n                            var\"##inds#496\" = ()\n                            mu0 = (DynamicPPL.tilde_assume)(_rng, _context, _sampler, var\"##tmpright#493\", var\"##vn#495\", var\"##inds#496\", _varinfo)\n                        end\n                        #= REPL[45]:3 =#\n                        begin\n                            var\"##tmpright#497\" = filldist(Normal(0, 10), n1)\n                            var\"##tmpright#497\" isa Union{Distribution, AbstractVector{&lt;:Distribution}} || throw(ArgumentError(\"Right-hand side of a ~ must be subtype of Distribution or a vector of Distributions.\"))\n                            var\"##vn#499\" = trt_effects\n                            var\"##inds#500\" = ()\n                            trt_effects = (DynamicPPL.tilde_assume)(_rng, _context, _sampler, var\"##tmpright#497\", var\"##vn#499\", var\"##inds#500\", _varinfo)\n                        end\n                        #= REPL[45]:4 =#\n                        begin\n                            var\"##tmpright#501\" = filldist(Normal(0, 10), n2)\n                            var\"##tmpright#501\" isa Union{Distribution, AbstractVector{&lt;:Distribution}} || throw(ArgumentError(\"Right-hand side of a ~ must be subtype of Distribution or a vector of Distributions.\"))\n                            var\"##vn#503\" = species_effects\n                            var\"##inds#504\" = ()\n                            species_effects = (DynamicPPL.tilde_assume)(_rng, _context, _sampler, var\"##tmpright#501\", var\"##vn#503\", var\"##inds#504\", _varinfo)\n                        end\n                        #= REPL[45]:5 =#\n                        begin\n                            var\"##tmpright#505\" = filldist(Normal(0, 10), n1 * n2)\n                            var\"##tmpright#505\" isa Union{Distribution, AbstractVector{&lt;:Distribution}} || throw(ArgumentError(\"Right-hand side of a ~ must be subtype of Distribution or a vector of Distributions.\"))\n                            var\"##vn#507\" = interaction_effects\n                            var\"##inds#508\" = ()\n                            interaction_effects = (DynamicPPL.tilde_assume)(_rng, _context, _sampler, var\"##tmpright#505\", var\"##vn#507\", var\"##inds#508\", _varinfo)\n                        end\n                        #= REPL[45]:6 =#\n                        begin\n                            var\"##tmpright#509\" = filldist(Normal(0, 10), n3)\n                            var\"##tmpright#509\" isa Union{Distribution, AbstractVector{&lt;:Distribution}} || throw(ArgumentError(\"Right-hand side of a ~ must be subtype of Distribution or a vector of Distributions.\"))\n                            var\"##vn#511\" = plate_effects\n                            var\"##inds#512\" = ()\n                            plate_effects = (DynamicPPL.tilde_assume)(_rng, _context, _sampler, var\"##tmpright#509\", var\"##vn#511\", var\"##inds#512\", _varinfo)\n                        end\n                        #= REPL[45]:7 =#\n                        begin\n                            var\"##tmpright#513\" = Gamma(1, 1)\n                            var\"##tmpright#513\" isa Union{Distribution, AbstractVector{&lt;:Distribution}} || throw(ArgumentError(\"Right-hand side of a ~ must be subtype of Distribution or a vector of Distributions.\"))\n                            var\"##vn#515\" = sigma\n                            var\"##inds#516\" = ()\n                            sigma = (DynamicPPL.tilde_assume)(_rng, _context, _sampler, var\"##tmpright#513\", var\"##vn#515\", var\"##inds#516\", _varinfo)\n                        end\n                        #= REPL[45]:8 =#\n                        mu = Array{T, 3}(undef, n1 + 1, n2 + 1, n3 + 1)\n                        #= REPL[45]:9 =#\n                        mu .= 0.0\n                        #= REPL[45]:10 =#\n                        for i = 1:n1 + 1\n                            #= REPL[45]:11 =#\n                            for j = 1:n2 + 1\n                                #= REPL[45]:12 =#\n                                for k = 1:n3 + 1\n                                    #= REPL[45]:13 =#\n                                    mu[i, j, k] += mu0\n                                    #= REPL[45]:14 =#\n                                    if i != 1\n                                        #= REPL[45]:15 =#\n                                        mu[i, j, k] += trt_effects[i - 1]\n                                    end\n                                    #= REPL[45]:17 =#\n                                    if j != 1\n                                        #= REPL[45]:18 =#\n                                        mu[i, j, k] += species_effects[j - 1]\n                                    end\n                                    #= REPL[45]:20 =#\n                                    if k != 1\n                                        #= REPL[45]:21 =#\n                                        mu[i, j, k] += plate_effects[k - 1]\n                                    end\n                                    #= REPL[45]:23 =#\n                                    if i != 1 &amp;&amp; j != 1\n                                        #= REPL[45]:24 =#\n                                        mu[i, j, k] += interaction_effects[(i - 1) + n1 * (j - 2)]\n                                    end\n                                end\n                            end\n                        end\n                        #= REPL[45]:29 =#\n                        residuals = Array{T, 1}(undef, length(damage))\n                        #= REPL[45]:30 =#\n                        residuals .= 0.0\n                        #= REPL[45]:31 =#\n                        for i = 1:length(damage)\n                            #= REPL[45]:32 =#\n                            residuals[i] = damage[i] - mu[trt[i], species[i], plate[i]]\n                            #= REPL[45]:33 =#\n                            begin\n                                var\"##tmpright#517\" = Normal(mu[trt[i], species[i], plate[i]], sigma)\n                                var\"##tmpright#517\" isa Union{Distribution, AbstractVector{&lt;:Distribution}} || throw(ArgumentError(\"Right-hand side of a ~ must be subtype of Distribution or a vector of Distributions.\"))\n                                var\"##vn#519\" = (DynamicPPL.VarName)(:damage, ((i,),))\n                                var\"##inds#520\" = ((i,),)\n                                var\"##isassumption#521\" = begin\n                                        let var\"##vn#522\" = (DynamicPPL.VarName)(:damage, ((i,),))\n                                            if !((DynamicPPL.inargnames)(var\"##vn#522\", _model)) || (DynamicPPL.inmissings)(var\"##vn#522\", _model)\n                                                true\n                                            else\n                                                damage[i] === missing\n                                            end\n                                        end\n                                    end\n                                if var\"##isassumption#521\"\n                                    damage[i] = (DynamicPPL.tilde_assume)(_rng, _context, _sampler, var\"##tmpright#517\", var\"##vn#519\", var\"##inds#520\", _varinfo)\n                                else\n                                    (DynamicPPL.tilde_observe)(_context, _sampler, var\"##tmpright#517\", damage[i], var\"##vn#519\", var\"##inds#520\", _varinfo)\n                                end\n                            end\n                        end\n                        #= REPL[45]:35 =#\n                        return (mu, residuals)\n                    end\n                end)\n        return (DynamicPPL.Model)(:m3, var\"##evaluator#523\", (DynamicPPL.namedtuple)(NamedTuple{(:damage, :plate, :species, :trt, :n1, :n2, :n3, :T), Tuple{Core.Typeof(damage), Core.Typeof(plate), Core.Typeof(species), Core.Typeof(trt), Core.Typeof(n1), Core.Typeof(n2), Core.Typeof(n3), Core.Typeof(T)}}, (damage, plate, species, trt, n1, n2, n3, T)), (DynamicPPL.namedtuple)(NamedTuple{(:T,), Tuple{Core.Typeof(Float64)}}, (Float64,)))\n    end\nend```","user":"U6CFMFM2R","ts":"1611947119.017100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7B=","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@macroexpand @model function m3(damage, plate, species, trt, n1, n2, n3, ::Type{T} = Float64) where {T}\n           mu0 ~ Normal(0,10)\n           trt_effects ~ filldist(Normal(0,10), n1)\n           species_effects ~ filldist(Normal(0,10), n2)\n           interaction_effects ~ filldist(Normal(0,10), n1*n2)\n           plate_effects ~ filldist(Normal(0,10), n3)\n           sigma ~ Gamma(1,1)\n           mu = Array{T,3}(undef, n1+1,n2+1,n3+1)\n           mu .= 0.0\n           for i in 1:(n1+1)\n               for j in 1:(n2+1)\n                           for k in 1:(n3+1)\n                       mu[i,j,k] += mu0\n                       if i != 1\n                           mu[i,j,k] += trt_effects[i-1]\n                       end\njulia> @macroexpand @model function m3(damage, plate, species, trt, n1, n2, n3, ::Type{T} = Float64) where {T}\n           mu0 ~ Normal(0,10)\n           trt_effects ~ filldist(Normal(0,10), n1)\n           species_effects ~ filldist(Normal(0,10), n2)\n           interaction_effects ~ filldist(Normal(0,10), n1*n2)\n           plate_effects ~ filldist(Normal(0,10), n3)\n           sigma ~ Gamma(1,1)\n           mu = Array{T,3}(undef, n1+1,n2+1,n3+1)\n           mu .= 0.0\n           for i in 1:(n1+1)\n               for j in 1:(n2+1)\n                           for k in 1:(n3+1)\n                       mu[i,j,k] += mu0\n                       if i != 1\n                           mu[i,j,k] += trt_effects[i-1]\n                       end\n                       if j != 1\n                           mu[i,j,k] += species_effects[j-1]\n                       end\n                       if k != 1\n                           mu[i,j,k] += plate_effects[k-1]\n                       end\n                       if (i != 1) && (j != 1)\n                           mu[i,j,k] += interaction_effects[i-1 + n1*(j-2)]\n                       end\n                   end\n               end\n           end\n           residuals = Array{T,1}(undef, length(damage))\n           residuals .= 0.0\n           for i in 1:length(damage)\n               residuals[i] = damage[i] - mu[trt[i],species[i],plate[i]]\n               damage[i] ~ Normal(mu[trt[i],species[i],plate[i]],sigma)\n           end\n           return mu, residuals\n       end\nquote\n    $(Expr(:meta, :doc))\n    function m3(damage, plate, species, trt, n1, n2, n3, ::Type{T} = Float64; ) where T\n        #= REPL[45]:1 =#\n        var\"##evaluator#523\" = ((_rng::Random.AbstractRNG, _model::DynamicPPL.Model, _varinfo::DynamicPPL.AbstractVarInfo, _sampler::AbstractMCMC.AbstractSampler, _context::DynamicPPL.AbstractContext, damage, \nplate, species, trt, n1, n2, n3, ::Type{T}) where T->begin\n                    begin\n                        #= REPL[45]:1 =#\n                        #= REPL[45]:2 =#\n                        begin\n                            var\"##tmpright#493\" = Normal(0, 10)\n                            var\"##tmpright#493\" isa Union{Distribution, AbstractVector{<:Distribution}} || throw(ArgumentError(\"Right-hand side of a ~ must be subtype of Distribution or a vector of Distributions.\"))\n                            var\"##vn#495\" = mu0\n                            var\"##inds#496\" = ()\n                            mu0 = (DynamicPPL.tilde_assume)(_rng, _context, _sampler, var\"##tmpright#493\", var\"##vn#495\", var\"##inds#496\", _varinfo)\n                        end\n                        #= REPL[45]:3 =#\n                        begin\n                            var\"##tmpright#497\" = filldist(Normal(0, 10), n1)\n                            var\"##tmpright#497\" isa Union{Distribution, AbstractVector{<:Distribution}} || throw(ArgumentError(\"Right-hand side of a ~ must be subtype of Distribution or a vector of Distributions.\"))\n                            var\"##vn#499\" = trt_effects\n                            var\"##inds#500\" = ()\n                            trt_effects = (DynamicPPL.tilde_assume)(_rng, _context, _sampler, var\"##tmpright#497\", var\"##vn#499\", var\"##inds#500\", _varinfo)\n                        end\n                        #= REPL[45]:4 =#\n                        begin\n                            var\"##tmpright#501\" = filldist(Normal(0, 10), n2)\n                            var\"##tmpright#501\" isa Union{Distribution, AbstractVector{<:Distribution}} || throw(ArgumentError(\"Right-hand side of a ~ must be subtype of Distribution or a vector of Distributions.\"))\n                            var\"##vn#503\" = species_effects\n                            var\"##inds#504\" = ()\n                            species_effects = (DynamicPPL.tilde_assume)(_rng, _context, _sampler, var\"##tmpright#501\", var\"##vn#503\", var\"##inds#504\", _varinfo)\n                        end\n                        #= REPL[45]:5 =#\n                        begin\n                            var\"##tmpright#505\" = filldist(Normal(0, 10), n1 * n2)\n                            var\"##tmpright#505\" isa Union{Distribution, AbstractVector{<:Distribution}} || throw(ArgumentError(\"Right-hand side of a ~ must be subtype of Distribution or a vector of Distributions.\"))\n                            var\"##vn#507\" = interaction_effects\n                            var\"##inds#508\" = ()\n                            interaction_effects = (DynamicPPL.tilde_assume)(_rng, _context, _sampler, var\"##tmpright#505\", var\"##vn#507\", var\"##inds#508\", _varinfo)\n                        end\n                        #= REPL[45]:6 =#\n                        begin\n                            var\"##tmpright#509\" = filldist(Normal(0, 10), n3)\n                            var\"##tmpright#509\" isa Union{Distribution, AbstractVector{<:Distribution}} || throw(ArgumentError(\"Right-hand side of a ~ must be subtype of Distribution or a vector of Distributions.\"))\n                            var\"##vn#511\" = plate_effects\n                            var\"##inds#512\" = ()\n                            plate_effects = (DynamicPPL.tilde_assume)(_rng, _context, _sampler, var\"##tmpright#509\", var\"##vn#511\", var\"##inds#512\", _varinfo)\n                        end\n                        #= REPL[45]:7 =#\n                        begin\n                            var\"##tmpright#513\" = Gamma(1, 1)\n                            var\"##tmpright#513\" isa Union{Distribution, AbstractVector{<:Distribution}} || throw(ArgumentError(\"Right-hand side of a ~ must be subtype of Distribution or a vector of Distributions.\"))\n                            var\"##vn#515\" = sigma\n                            var\"##inds#516\" = ()\n                            sigma = (DynamicPPL.tilde_assume)(_rng, _context, _sampler, var\"##tmpright#513\", var\"##vn#515\", var\"##inds#516\", _varinfo)\n                        end\n                        #= REPL[45]:8 =#\n                        mu = Array{T, 3}(undef, n1 + 1, n2 + 1, n3 + 1)\n                        #= REPL[45]:9 =#\n                        mu .= 0.0\n                        #= REPL[45]:10 =#\n                        for i = 1:n1 + 1\n                            #= REPL[45]:11 =#\n                            for j = 1:n2 + 1\n                                #= REPL[45]:12 =#\n                                for k = 1:n3 + 1\n                                    #= REPL[45]:13 =#\n                                    mu[i, j, k] += mu0\n                                    #= REPL[45]:14 =#\n                                    if i != 1\n                                        #= REPL[45]:15 =#\n                                        mu[i, j, k] += trt_effects[i - 1]\n                                    end\n                                    #= REPL[45]:17 =#\n                                    if j != 1\n                                        #= REPL[45]:18 =#\n                                        mu[i, j, k] += species_effects[j - 1]\n                                    end\n                                    #= REPL[45]:20 =#\n                                    if k != 1\n                                        #= REPL[45]:21 =#\n                                        mu[i, j, k] += plate_effects[k - 1]\n                                    end\n                                    #= REPL[45]:23 =#\n                                    if i != 1 && j != 1\n                                        #= REPL[45]:24 =#\n                                        mu[i, j, k] += interaction_effects[(i - 1) + n1 * (j - 2)]\n                                    end\n                                end\n                            end\n                        end\n                        #= REPL[45]:29 =#\n                        residuals = Array{T, 1}(undef, length(damage))\n                        #= REPL[45]:30 =#\n                        residuals .= 0.0\n                        #= REPL[45]:31 =#\n                        for i = 1:length(damage)\n                            #= REPL[45]:32 =#\n                            residuals[i] = damage[i] - mu[trt[i], species[i], plate[i]]\n                            #= REPL[45]:33 =#\n                            begin\n                                var\"##tmpright#517\" = Normal(mu[trt[i], species[i], plate[i]], sigma)\n                                var\"##tmpright#517\" isa Union{Distribution, AbstractVector{<:Distribution}} || throw(ArgumentError(\"Right-hand side of a ~ must be subtype of Distribution or a vector of Distributions.\"))\n                                var\"##vn#519\" = (DynamicPPL.VarName)(:damage, ((i,),))\n                                var\"##inds#520\" = ((i,),)\n                                var\"##isassumption#521\" = begin\n                                        let var\"##vn#522\" = (DynamicPPL.VarName)(:damage, ((i,),))\n                                            if !((DynamicPPL.inargnames)(var\"##vn#522\", _model)) || (DynamicPPL.inmissings)(var\"##vn#522\", _model)\n                                                true\n                                            else\n                                                damage[i] === missing\n                                            end\n                                        end\n                                    end\n                                if var\"##isassumption#521\"\n                                    damage[i] = (DynamicPPL.tilde_assume)(_rng, _context, _sampler, var\"##tmpright#517\", var\"##vn#519\", var\"##inds#520\", _varinfo)\n                                else\n                                    (DynamicPPL.tilde_observe)(_context, _sampler, var\"##tmpright#517\", damage[i], var\"##vn#519\", var\"##inds#520\", _varinfo)\n                                end\n                            end\n                        end\n                        #= REPL[45]:35 =#\n                        return (mu, residuals)\n                    end\n                end)\n        return (DynamicPPL.Model)(:m3, var\"##evaluator#523\", (DynamicPPL.namedtuple)(NamedTuple{(:damage, :plate, :species, :trt, :n1, :n2, :n3, :T), Tuple{Core.Typeof(damage), Core.Typeof(plate), Core.Typeof(species), Core.Typeof(trt), Core.Typeof(n1), Core.Typeof(n2), Core.Typeof(n3), Core.Typeof(T)}}, (damage, plate, species, trt, n1, n2, n3, T)), (DynamicPPL.namedtuple)(NamedTuple{(:T,), Tuple{Core.Typeof(Float64)}}, (Float64,)))\n    end\nend"}]}]}],"thread_ts":"1611943529.010400","parent_user_id":"U01H36BUDJB"}]