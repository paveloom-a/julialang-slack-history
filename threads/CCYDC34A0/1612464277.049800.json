[{"client_msg_id":"2a980d06-c441-4c52-b733-30498db59d4e","type":"message","text":"Hi All,\nJust a quick question about syntax. From what I understand, using filldist is more performant than for loops. I am unsure if/how to translate this to use filldist:\n\n`for i ∈ 1:length(predicted)`\n        `data[:,i] ~ MvNormal(predicted[i], σ)` \n`end` \nwhere `predicted` is the solution to an ODEProblem and has size `(5,101)` .\n\nAny suggestions appreciated! :slightly_smiling_face:","user":"U01M641BZEY","ts":"1612464277.049800","team":"T68168MUP","edited":{"user":"U01M641BZEY","ts":"1612464333.000000"},"blocks":[{"type":"rich_text","block_id":"nFDJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi All,\nJust a quick question about syntax. From what I understand, using filldist is more performant than for loops. I am unsure if/how to translate this to use filldist:\n\n"},{"type":"text","text":"for i ∈ 1:length(predicted)","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"        data[:,i] ~ MvNormal(predicted[i], σ) ","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"end ","style":{"code":true}},{"type":"text","text":"\nwhere "},{"type":"text","text":"predicted","style":{"code":true}},{"type":"text","text":" is the solution to an ODEProblem and has size "},{"type":"text","text":"(5,101)","style":{"code":true}},{"type":"text","text":" .\n\nAny suggestions appreciated! "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1612464277.049800","reply_count":18,"reply_users_count":3,"latest_reply":"1612479664.058200","reply_users":["U01H36BUDJB","U01M641BZEY","UHDQQ4GN6"],"subscribed":false},{"client_msg_id":"ad97254a-5db7-4d71-9170-dd18798a5fea","type":"message","text":"I don't think `filldist` will work here (or really in general for likelihoods). It samples an arbitrary number of draws i.i.d from the underlying distribution, but here your distribution changes based on the prediction at `i` , thus not i.i.d.","user":"U01H36BUDJB","ts":"1612464900.050000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KP72q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't think "},{"type":"text","text":"filldist","style":{"code":true}},{"type":"text","text":" will work here (or really in general for likelihoods). It samples an arbitrary number of draws i.i.d from the underlying distribution, but here your distribution changes based on the prediction at "},{"type":"text","text":"i","style":{"code":true}},{"type":"text","text":" , thus not i.i.d."}]}]}],"thread_ts":"1612464277.049800","parent_user_id":"U01M641BZEY","reactions":[{"name":"+1","users":["U01M641BZEY"],"count":1}]},{"client_msg_id":"091d5750-a703-4580-818c-b306f0779b84","type":"message","text":"You could try treating it as a matrix-valued likelihood, but I'm not sure that will be more efficient. The way you have it written looks correct for this use case.","user":"U01H36BUDJB","ts":"1612464935.050200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"laQW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You could try treating it as a matrix-valued likelihood, but I'm not sure that will be more efficient. The way you have it written looks correct for this use case."}]}]}],"thread_ts":"1612464277.049800","parent_user_id":"U01M641BZEY","reactions":[{"name":"+1","users":["U01M641BZEY"],"count":1}]},{"client_msg_id":"8366f56e-0aa0-4430-90b5-6c5c53ee0b16","type":"message","text":"Ok, I’ll leave it as is then. Thank you!","user":"U01M641BZEY","ts":"1612465265.050600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ll9T+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok, I’ll leave it as is then. Thank you!"}]}]}],"thread_ts":"1612464277.049800","parent_user_id":"U01M641BZEY"},{"client_msg_id":"8c14676c-d5ab-41ca-8101-4f81caca6079","type":"message","text":"Will the presence of loops here cause issues with using reversediff?","user":"U01M641BZEY","ts":"1612466366.050800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MFPa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Will the presence of loops here cause issues with using reversediff?"}]}]}],"thread_ts":"1612464277.049800","parent_user_id":"U01M641BZEY"},{"client_msg_id":"3044a320-b7c5-4d00-9733-0f1c6173678a","type":"message","text":"I don't think so. Zygote is a bit slow with loops; I don't think ReverseDiff or Tracker are.","user":"UHDQQ4GN6","ts":"1612467244.051000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FgaXA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't think so. Zygote is a bit slow with loops; I don't think ReverseDiff or Tracker are."}]}]}],"thread_ts":"1612464277.049800","parent_user_id":"U01M641BZEY"},{"client_msg_id":"ac5f7cc6-9b0a-4cac-a238-4030c195913c","type":"message","text":"ReverseDiff will probably be better but I would try all of them.","user":"U01H36BUDJB","ts":"1612467330.051200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SSgq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ReverseDiff will probably be better but I would try all of them."}]}]}],"thread_ts":"1612464277.049800","parent_user_id":"U01M641BZEY"},{"client_msg_id":"1502e7e4-bdcf-41e0-8620-85a42487c303","type":"message","text":"Thank you both for your replies.\n\nI’ve just tried reversediff and get the following error:\n\n```ERROR: LoadError: MethodError: no method matching MvNormal(::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,2,Array{Float64,2},Array{Float64,2}}}, ::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Array{Float64,1},Array{Float64,1}}})\nClosest candidates are:\n  MvNormal(::Tracker.TrackedArray{#s13,1,A} where A where #s13&lt;:Real, ::Real) at /home/chaggar/.julia/packages/DistributionsAD/jDBqZ/src/tracker.jl:412\n  MvNormal(::ReverseDiff.TrackedArray{#s13,D,1,VA,DA} where DA where VA where D where #s13&lt;:Real, ::ReverseDiff.TrackedReal) at /home/chaggar/.julia/packages/DistributionsAD/jDBqZ/src/reversediff.jl:142\n  MvNormal(::ReverseDiff.TrackedArray{#s13,D,1,VA,DA} where DA where VA where D where #s13&lt;:Real, ::Real) at /home/chaggar/.julia/packages/DistributionsAD/jDBqZ/src/reversediff.jl:143```\nAny pointers here?\n\nFor reference, my model is (I get the error where the for loop starts):\n\n```@model function fit(data, problem)\n    σ ~ InverseGamma(2, 3)\n    k ~ truncated(Normal(5,10.0),0.0,10)\n    a ~ truncated(Normal(5,10.0),0.0,10)\n    u ~ filldist(truncated(Normal(0.5,2.0),0.0,1.0), N)\n\n    p = [k, a] \n\n    prob = remake(problem, u0=u, p=p)\n\n    predicted = solve(prob, AutoTsit5(Rosenbrock23()), saveat=0.005)\n\n    for i ∈ 1:length(predicted)\n        data[:,i] ~ MvNormal(predicted[i], σ) \n    end \nend ```\nApologies for all the questions; I’m relatively new to Julia/Turing and still have lots to learn!","user":"U01M641BZEY","ts":"1612469194.051400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h11cl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thank you both for your replies.\n\nI’ve just tried reversediff and get the following error:\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"ERROR: LoadError: MethodError: no method matching MvNormal(::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,2,Array{Float64,2},Array{Float64,2}}}, ::ReverseDiff.TrackedReal{Float64,Float64,ReverseDiff.TrackedArray{Float64,Float64,1,Array{Float64,1},Array{Float64,1}}})\nClosest candidates are:\n  MvNormal(::Tracker.TrackedArray{#s13,1,A} where A where #s13<:Real, ::Real) at /home/chaggar/.julia/packages/DistributionsAD/jDBqZ/src/tracker.jl:412\n  MvNormal(::ReverseDiff.TrackedArray{#s13,D,1,VA,DA} where DA where VA where D where #s13<:Real, ::ReverseDiff.TrackedReal) at /home/chaggar/.julia/packages/DistributionsAD/jDBqZ/src/reversediff.jl:142\n  MvNormal(::ReverseDiff.TrackedArray{#s13,D,1,VA,DA} where DA where VA where D where #s13<:Real, ::Real) at /home/chaggar/.julia/packages/DistributionsAD/jDBqZ/src/reversediff.jl:143"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nAny pointers here?\n\nFor reference, my model is (I get the error where the for loop starts):\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@model function fit(data, problem)\n    σ ~ InverseGamma(2, 3)\n    k ~ truncated(Normal(5,10.0),0.0,10)\n    a ~ truncated(Normal(5,10.0),0.0,10)\n    u ~ filldist(truncated(Normal(0.5,2.0),0.0,1.0), N)\n\n    p = [k, a] \n\n    prob = remake(problem, u0=u, p=p)\n\n    predicted = solve(prob, AutoTsit5(Rosenbrock23()), saveat=0.005)\n\n    for i ∈ 1:length(predicted)\n        data[:,i] ~ MvNormal(predicted[i], σ) \n    end \nend "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Apologies for all the questions; I’m relatively new to Julia/Turing and still have lots to learn!"}]}]}],"thread_ts":"1612464277.049800","parent_user_id":"U01M641BZEY"},{"client_msg_id":"d97595c6-3520-45a2-bedf-03b6ab63b671","type":"message","text":"Kind of weird. Looks like something is calling the likelihood with a scalar rather than a vector. Could you try setting `autodiff=false` in `Rosenbrock23` ?","user":"U01H36BUDJB","ts":"1612470322.051600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IWtxZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Kind of weird. Looks like something is calling the likelihood with a scalar rather than a vector. Could you try setting "},{"type":"text","text":"autodiff=false","style":{"code":true}},{"type":"text","text":" in "},{"type":"text","text":"Rosenbrock23","style":{"code":true}},{"type":"text","text":" ?"}]}]}],"thread_ts":"1612464277.049800","parent_user_id":"U01M641BZEY"},{"client_msg_id":"66b5fdc8-b581-4734-adab-972f12b8b76c","type":"message","text":"Also check the type of `predicted[i]` and make sure it's a 1-dimensional vector.","user":"U01H36BUDJB","ts":"1612470371.051800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/X9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also check the type of "},{"type":"text","text":"predicted[i]","style":{"code":true}},{"type":"text","text":" and make sure it's a 1-dimensional vector."}]}]}],"thread_ts":"1612464277.049800","parent_user_id":"U01M641BZEY"},{"client_msg_id":"20955b3d-1b99-4d80-ac26-fa88ac6cfd8e","type":"message","text":"Tried setting `autodiff=false` in `Rosenbrock23()` and get the same error.","user":"U01M641BZEY","ts":"1612471615.052200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"79MR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Tried setting "},{"type":"text","text":"autodiff=false","style":{"code":true}},{"type":"text","text":" in "},{"type":"text","text":"Rosenbrock23()","style":{"code":true}},{"type":"text","text":" and get the same error."}]}]}],"thread_ts":"1612464277.049800","parent_user_id":"U01M641BZEY"},{"client_msg_id":"5249a625-95b4-4177-99cf-1cefb8eab83a","type":"message","text":"typeof predicted[i] is Array{Float64,1}","user":"U01M641BZEY","ts":"1612471634.052400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Uqu/k","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"typeof predicted[i] is Array{Float64,1}"}]}]}],"thread_ts":"1612464277.049800","parent_user_id":"U01M641BZEY"},{"client_msg_id":"d1f27cf1-8dc4-4ce2-85db-8b20049d9716","type":"message","text":"Hmm. Yeah, I don't know. Maybe <@U8T9JUA5R> has an idea..? But I don't see anything wrong with the code as written. In the meantime, maybe just try Zygote or Tracker.","user":"U01H36BUDJB","ts":"1612476362.054300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Sepq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmm. Yeah, I don't know. Maybe "},{"type":"user","user_id":"U8T9JUA5R"},{"type":"text","text":" has an idea..? But I don't see anything wrong with the code as written. In the meantime, maybe just try Zygote or Tracker."}]}]}],"thread_ts":"1612464277.049800","parent_user_id":"U01M641BZEY"},{"client_msg_id":"3274143e-90f2-4f56-85eb-20462c147867","type":"message","text":"Have you called `using DiffEqSensitivity` ?","user":"UHDQQ4GN6","ts":"1612476406.054500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1SyQe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Have you called "},{"type":"text","text":"using DiffEqSensitivity","style":{"code":true}},{"type":"text","text":" ?"}]}]}],"thread_ts":"1612464277.049800","parent_user_id":"U01M641BZEY","reactions":[{"name":"heavy_plus_sign","users":["U01H36BUDJB"],"count":1}]},{"client_msg_id":"5e1cb1ca-b8e1-4629-825a-7a7058896a70","type":"message","text":"Oh right, duh this ^","user":"U01H36BUDJB","ts":"1612476420.054700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vkp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh right, duh this ^"}]}]}],"thread_ts":"1612464277.049800","parent_user_id":"U01M641BZEY"},{"client_msg_id":"80F0A993-13D0-4788-8E64-9379DC514DBE","type":"message","text":"Yes, I’ve called `using DiffEqSensitivity`. Would it be useful for me to post the full code here? ","user":"U01M641BZEY","ts":"1612478056.056500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gC1o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, I’ve called "},{"type":"text","text":"using DiffEqSensitivity","style":{"code":true}},{"type":"text","text":". Would it be useful for me to post the full code here? "}]}]}],"thread_ts":"1612464277.049800","parent_user_id":"U01M641BZEY"},{"client_msg_id":"d751fd11-3e14-42a6-8da5-90e4f07c313f","type":"message","text":"probably","user":"UHDQQ4GN6","ts":"1612478077.056700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VgF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"probably"}]}]}],"thread_ts":"1612464277.049800","parent_user_id":"U01M641BZEY"},{"client_msg_id":"15ED3A1B-C1CA-4A5D-95C1-2AE14D29E5F1","type":"message","text":"\n\n`using DifferentialEquations, LightGraphs, Random, Turing\nusing Turing: Variational\nusing LinearAlgebra\nusing ReverseDiff\nusing DiffEqSensitivity\n\nRandom.seed!(1)\n\nconst N = 5\nconst P = 1.0\n\nG = erdos_renyi(N, P)\nL = laplacian_matrix(G)\n\n\nfunction NetworkFKPP(u, p, t)\n    κ, α = p \n    du = -κ * L * u .+ α .* u .* (1 .- u)\nend\n\nu0 = rand(N)\np = [2.0, 3.0]\nt_span = (0.0, 0.5)\n\nproblem = ODEProblem(NetworkFKPP, u0, t_span, p)\nsol = solve(problem, AutoTsit5(Rosenbrock23()), saveat=0.005)\n\nconst data = Array(sol)\n\nTuring.setadbackend(:reversediff)\nTuring.setrdcache(true)\n@model function fit(data, problem)\n    σ ~ InverseGamma(2, 3)\n    k ~ truncated(Normal(5,10.0),0.0,10)\n    a ~ truncated(Normal(5,10.0),0.0,10)\n    u ~ filldist(truncated(Normal(0.5,2.0),0.0,1.0), 5)\n\n    p = [k, a] \n\n    prob = remake(problem, u0=u, p=p)\n\n    predicted = solve(prob, AutoTsit5(Rosenbrock23(autodiff=false)), saveat=0.005)\n\n    for i ∈ 1:length(predicted)\n        data[:,i] ~ MvNormal(predicted[i], σ) \n    end \nend \n\nmodel = fit(data, problem)\nadvi = ADVI(10, 1000)\nq = vi(model, advi)`","user":"U01M641BZEY","ts":"1612478758.058000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tsvR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"\n\n"},{"type":"text","text":"using DifferentialEquations, LightGraphs, Random, Turing\nusing Turing: Variational\nusing LinearAlgebra\nusing ReverseDiff\nusing DiffEqSensitivity\n\nRandom.seed!(1)\n\nconst N = 5\nconst P = 1.0\n\nG = erdos_renyi(N, P)\nL = laplacian_matrix(G)\n\n\nfunction NetworkFKPP(u, p, t)\n    κ, α = p \n    du = -κ * L * u .+ α .* u .* (1 .- u)\nend\n\nu0 = rand(N)\np = [2.0, 3.0]\nt_span = (0.0, 0.5)\n\nproblem = ODEProblem(NetworkFKPP, u0, t_span, p)\nsol = solve(problem, AutoTsit5(Rosenbrock23()), saveat=0.005)\n\nconst data = Array(sol)\n\nTuring.setadbackend(:reversediff)\nTuring.setrdcache(true)\n@model function fit(data, problem)\n    σ ~ InverseGamma(2, 3)\n    k ~ truncated(Normal(5,10.0),0.0,10)\n    a ~ truncated(Normal(5,10.0),0.0,10)\n    u ~ filldist(truncated(Normal(0.5,2.0),0.0,1.0), 5)\n\n    p = [k, a] \n\n    prob = remake(problem, u0=u, p=p)\n\n    predicted = solve(prob, AutoTsit5(Rosenbrock23(autodiff=false)), saveat=0.005)\n\n    for i ∈ 1:length(predicted)\n        data[:,i] ~ MvNormal(predicted[i], σ) \n    end \nend \n\nmodel = fit(data, problem)\nadvi = ADVI(10, 1000)\nq = vi(model, advi)","style":{"code":true}}]}]}],"thread_ts":"1612464277.049800","parent_user_id":"U01M641BZEY"},{"client_msg_id":"0303e6d5-7b4e-4011-89f2-7d446eb38d72","type":"message","text":"It's entirely possible that this is an ADVI bug. Have you tried sampling with NUTS to see if it still happens?","user":"U01H36BUDJB","ts":"1612479664.058200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Tv3x","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's entirely possible that this is an ADVI bug. Have you tried sampling with NUTS to see if it still happens?"}]}]}],"thread_ts":"1612464277.049800","parent_user_id":"U01M641BZEY"}]