[{"client_msg_id":"5d020a83-1de4-49bb-83a8-3b664364d065","type":"message","text":"Hi everyone! probably a basic question. Is there any concise syntax for declaring multiple parameters that share the same (but not joint) prior distribution? Something like: [par1; par2; par3; par4; par5;] ~ Normal(0, simga2), instead of par1 ~ N(0, sigma2), par2 ~ N(0, sigma2), and so on. Thank you!","user":"U01H6G07MST","ts":"1614382713.038200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Hvq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi everyone! probably a basic question. Is there any concise syntax for declaring multiple parameters that share the same (but not joint) prior distribution? Something like: [par1; par2; par3; par4; par5;] ~ Normal(0, simga2), instead of par1 ~ N(0, sigma2), par2 ~ N(0, sigma2), and so on. Thank you!"}]}]}],"thread_ts":"1614382713.038200","reply_count":6,"reply_users_count":5,"latest_reply":"1614594268.048700","reply_users":["U7QLM6E2E","ULG5V164A","U01H6G07MST","U01PJ4X8YCV","UC0SY9JFP"],"subscribed":false},{"client_msg_id":"d032f19b-ec13-47cb-acac-0c80bca7fe44","type":"message","text":"You could use a MvNormal with a diagonal covariance","user":"U7QLM6E2E","ts":"1614385621.039100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5Ly2t","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You could use a MvNormal with a diagonal covariance"}]}]}],"thread_ts":"1614382713.038200","parent_user_id":"U01H6G07MST","reactions":[{"name":"+1","users":["ULG5V164A","U01H6G07MST"],"count":2}]},{"client_msg_id":"fd34c7ce-da1f-4b93-ad1e-a1997c41fd71","type":"message","text":"You can also call `filldist` for this, e.g. `filldist(Normal(0, sigma2), 5)` but accessing is slightly trickier (i.e. unpacking doesn't quite work).","user":"ULG5V164A","ts":"1614386306.041700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"x5Mld","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can also call "},{"type":"text","text":"filldist","style":{"code":true}},{"type":"text","text":" for this, e.g. "},{"type":"text","text":"filldist(Normal(0, sigma2), 5)","style":{"code":true}},{"type":"text","text":" but accessing is slightly trickier (i.e. unpacking doesn't quite work)."}]}]}],"thread_ts":"1614382713.038200","parent_user_id":"U01H6G07MST","reactions":[{"name":"+1","users":["U01H6G07MST","UC0SY9JFP"],"count":2}]},{"client_msg_id":"07fed605-e4b4-4069-b3e2-1951cfa7994d","type":"message","text":"Thank you!","user":"U01H6G07MST","ts":"1614463189.042500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3=9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thank you!"}]}]}],"thread_ts":"1614382713.038200","parent_user_id":"U01H6G07MST"},{"client_msg_id":"7a29898e-dfd9-4915-9883-b9fa0f51f245","type":"message","text":"I was about to ask the same question! Is there anywhere documentation about `filldist`, what it does and how to unpack if unpacking isn't really working?","user":"U01PJ4X8YCV","ts":"1614588587.042900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9gTP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I was about to ask the same question! Is there anywhere documentation about "},{"type":"text","text":"filldist","style":{"code":true}},{"type":"text","text":", what it does and how to unpack if unpacking isn't really working?"}]}]}],"thread_ts":"1614382713.038200","parent_user_id":"U01H6G07MST"},{"client_msg_id":"9C0D76F2-6A1B-4A66-A150-322D64B926F6","type":"message","text":"In most cases (assuming univariate distributions) filldist is a wrapper for the constructor of a Product distribution.\n\n<https://github.com/JuliaStats/Distributions.jl/blob/d6de7214e6d84df77d1eb3ec7a98d23862d1232d/src/multivariate/product.jl|https://github.com/JuliaStats/Distributions.jl/blob/d6de7214e6d84df77d1eb3ec7a98d23862d1232d/src/multivariate/product.jl>\n\nIn case filldist is used on a univariate Normal it creates a MvNormal distribution. And for multivariate distribution it is a wrapper for the matrix distribution. \n\nThe documentation is very bad when it comes to this atm. Would you mind creating an issue on Turing.jl that we should add a proper documentation about it and how to unpack?","user":"UC0SY9JFP","ts":"1614592799.048400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"T4G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In most cases (assuming univariate distributions) filldist is a wrapper for the constructor of a Product distribution.\n"},{"type":"text","text":"\n"},{"type":"link","url":"https://github.com/JuliaStats/Distributions.jl/blob/d6de7214e6d84df77d1eb3ec7a98d23862d1232d/src/multivariate/product.jl","text":"https://github.com/JuliaStats/Distributions.jl/blob/d6de7214e6d84df77d1eb3ec7a98d23862d1232d/src/multivariate/product.jl"},{"type":"text","text":"\n\nIn case filldist is used on a univariate Normal it creates a MvNormal distribution. And for multivariate distribution it is a wrapper for the matrix distribution. \n\nThe documentation is very bad when it comes to this atm. Would you mind creating an issue on Turing.jl that we should add a proper documentation about it and how to unpack?"}]}]}],"thread_ts":"1614382713.038200","parent_user_id":"U01H6G07MST"},{"client_msg_id":"80c8c1e1-300e-47f5-9ecd-b6f61ee14b79","type":"message","text":"So it basically produces a product distribution?\nTo be honest, what I was looking for is something similar to the `shape` parameter in PyMC3. So, if I want to define a vector of independent Beta distributions, what I would do is:\n`betas = pm.Beta('betas', 1, 1, shape=(10))`, for example, and this will give me 10 beta distributions which I can access with `beta[i]`. Is this doable in Julia as well, or should I simply use a for loop?","user":"U01PJ4X8YCV","ts":"1614594268.048700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OWk9f","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So it basically produces a product distribution?\nTo be honest, what I was looking for is something similar to the "},{"type":"text","text":"shape","style":{"code":true}},{"type":"text","text":" parameter in PyMC3. So, if I want to define a vector of independent Beta distributions, what I would do is:\n"},{"type":"text","text":"betas = pm.Beta('betas', 1, 1, shape=(10))","style":{"code":true}},{"type":"text","text":", for example, and this will give me 10 beta distributions which I can access with "},{"type":"text","text":"beta[i]","style":{"code":true}},{"type":"text","text":". Is this doable in Julia as well, or should I simply use a for loop?"}]}]}],"thread_ts":"1614382713.038200","parent_user_id":"U01H6G07MST"}]