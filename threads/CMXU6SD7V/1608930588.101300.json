[{"client_msg_id":"078bf635-9778-4f4e-a909-4ee3d27635ef","type":"message","text":"Hi all, I was wondering whether FITSIO has random access groups support (or plan to), commonly used in radio interferometry. Thanks!","user":"U01HMFM7XH9","ts":"1608930588.101300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mU=A","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi all, I was wondering whether FITSIO has random access groups support (or plan to), commonly used in radio interferometry. Thanks!"}]}]}],"thread_ts":"1608930588.101300","reply_count":6,"reply_users_count":3,"latest_reply":"1609175145.103300","reply_users":["UN97XTLCV","UGTUKUHLN","U01HMFM7XH9"],"subscribed":false},{"client_msg_id":"025A681E-F34F-41F6-A899-03D91C8FD7F4","type":"message","text":"I don’t know but I don’t think so. Are you familiar if it is present in the cfitsio c library? If so it can definitely be added. ","user":"UN97XTLCV","ts":"1609018880.102300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aVJn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don’t know but I don’t think so. Are you familiar if it is present in the cfitsio c library? If so it can definitely be added. "}]}]}],"thread_ts":"1608930588.101300","parent_user_id":"U01HMFM7XH9"},{"client_msg_id":"771e94a0-13b1-4519-b143-f67f6419f303","type":"message","text":"Hi Antonio! I tried reading uvfits with FITSIO.jl, but currently it doesn't work and just returns zero-length data array.","user":"UGTUKUHLN","ts":"1609070886.102500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h3CI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi Antonio! I tried reading uvfits with FITSIO.jl, but currently it doesn't work and just returns zero-length data array."}]}]}],"thread_ts":"1608930588.101300","parent_user_id":"U01HMFM7XH9"},{"client_msg_id":"98c02576-0897-4993-816c-5f89374b6e9c","type":"message","text":"Don't know how it is implemented on lower levels such as cfitsio.","user":"UGTUKUHLN","ts":"1609070923.102700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=NUzV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Don't know how it is implemented on lower levels such as cfitsio."}]}]}],"thread_ts":"1608930588.101300","parent_user_id":"U01HMFM7XH9"},{"client_msg_id":"77577694-3a5a-4873-87cd-c9379e96233b","type":"message","text":"Hey <@UGTUKUHLN>, glad to see you here! I tried that too and got the same. <@UN97XTLCV> according to this page <https://fits.gsfc.nasa.gov/fits_libraries.html> cfitsio supports Groups, but it says FITSIO,jl does too, so I'm not sure, I'll further check whether this is something that can be done with C.","user":"U01HMFM7XH9","ts":"1609084191.102900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pXec9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hey "},{"type":"user","user_id":"UGTUKUHLN"},{"type":"text","text":", glad to see you here! I tried that too and got the same. "},{"type":"user","user_id":"UN97XTLCV"},{"type":"text","text":" according to this page "},{"type":"link","url":"https://fits.gsfc.nasa.gov/fits_libraries.html"},{"type":"text","text":" cfitsio supports Groups, but it says FITSIO,jl does too, so I'm not sure, I'll further check whether this is something that can be done with C."}]}]}],"thread_ts":"1608930588.101300","parent_user_id":"U01HMFM7XH9"},{"client_msg_id":"4238b1fd-9f75-4744-9483-b90c13bcc6a4","type":"message","text":"So since cfitsio supports reading and writing random groups\n```ffggp[b,i,ui,k,uk,j,uj,jj,e,d] # read\nffpgp[b,i,ui,k,uk,j,uj,jj,e,d] # write```\nwe can add this functionality for sure, the problems to solve are a bit more logistical. It seems like the big issue with random groups is they set `NAXIS1=0` so normally readers just return 0 length arrays.\n\nwe’d have to figure out a way to consistently determine if a FITSFile uses random groups and correctly change which cfitsio call gets made when we read the pixels.","user":"UN97XTLCV","ts":"1609113502.103100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6Kjp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So since cfitsio supports reading and writing random groups\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"ffggp[b,i,ui,k,uk,j,uj,jj,e,d] # read\nffpgp[b,i,ui,k,uk,j,uj,jj,e,d] # write"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"we can add this functionality for sure, the problems to solve are a bit more logistical. It seems like the big issue with random groups is they set "},{"type":"text","text":"NAXIS1=0","style":{"code":true}},{"type":"text","text":" so normally readers just return 0 length arrays.\n\nwe’d have to figure out a way to consistently determine if a FITSFile uses random groups and correctly change which cfitsio call gets made when we read the pixels."}]}]}],"thread_ts":"1608930588.101300","parent_user_id":"U01HMFM7XH9"},{"client_msg_id":"e6740e7f-756a-4c68-9954-bd5065c95ee8","type":"message","text":"that'd be great! FITS files containing random groups (called UVFITS in radio interferometry) normally have the header key word GROUPS=TRUE, so the following code will output \"true\" if random groups are present and an error if not:\n```using FITSIO\nhdulist = FITS(\"my_fits_file.fits\")\nheader = read_header(hdulist[1])\nheader[\"GROUPS\"]```","user":"U01HMFM7XH9","ts":"1609175145.103300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VUlF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that'd be great! FITS files containing random groups (called UVFITS in radio interferometry) normally have the header key word GROUPS=TRUE, so the following code will output \"true\" if random groups are present and an error if not:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using FITSIO\nhdulist = FITS(\"my_fits_file.fits\")\nheader = read_header(hdulist[1])\nheader[\"GROUPS\"]"}]}]}],"thread_ts":"1608930588.101300","parent_user_id":"U01HMFM7XH9"}]