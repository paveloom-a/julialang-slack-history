[{"client_msg_id":"0cf116c7-30ef-4938-b2c2-3e84baa2b3f0","type":"message","text":"Is there a way to use the `@fastmath` macro from within `Base.math.jl`?","user":"U0179G7FG4F","ts":"1616876853.071900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7ln","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a way to use the "},{"type":"text","text":"@fastmath","style":{"code":true}},{"type":"text","text":" macro from within "},{"type":"text","text":"Base.math.jl","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1616876853.071900","reply_count":5,"reply_users_count":2,"latest_reply":"1616910619.073200","reply_users":["U68QW0PUZ","U0179G7FG4F"],"is_locked":false,"subscribed":false},{"client_msg_id":"babca4ad-2460-4557-b5a7-6d74aa14cd84","type":"message","text":"That sounds dangerous to me.  You would risk indirectly modifying the expected semantics of basic floating point operations. Or are you thinking differently.","user":"U68QW0PUZ","ts":"1616891061.072100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9KZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That sounds dangerous to me.  You would risk indirectly modifying the expected semantics of basic floating point operations. Or are you thinking differently."}]}]}],"thread_ts":"1616876853.071900","parent_user_id":"U0179G7FG4F"},{"client_msg_id":"10e7c05a-21f7-41ed-928a-3d552e3d67d8","type":"message","text":"this is specifically for <https://github.com/JuliaLang/julia/pull/40236> Basically since I'm using 64 bit math for a 32 bit result, I only need something like 30 bits of precision so I wanted to use a faster version of `exp2` and `log2` if available","user":"U0179G7FG4F","ts":"1616891160.072300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JK+mU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this is specifically for "},{"type":"link","url":"https://github.com/JuliaLang/julia/pull/40236"},{"type":"text","text":" Basically since I'm using 64 bit math for a 32 bit result, I only need something like 30 bits of precision so I wanted to use a faster version of "},{"type":"text","text":"exp2","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"log2","style":{"code":true}},{"type":"text","text":" if available"}]}]}],"thread_ts":"1616876853.071900","parent_user_id":"U0179G7FG4F"},{"client_msg_id":"62a73e85-28b7-49d6-80c9-504fad2f9ce9","type":"message","text":"Those 30 significand bits -- 32 seems more solid .. I do not think it makes a difference in  how fast the `exp2 log2`  run, the 8 extra bits can become 4 if the results interact before the final result is obtained.  (with 6 extra bits, they can become 3 in the same way .. 3 extra bits is barely enough for transistors, we should be somewhat more conservative).\n\nHowever, I have not looked at the source code you are addressing -- mymmv.\n\nI do have some links to other fast log2 and fast exp2 implementations.  It has been years since I used any variation of these .. please reconfirm their behavior if you find any useful.\n\n&gt; these are reliable afaik\n<https://github.com/romeric/fastapprox>\n<https://nic.schraudolph.org/pubs/Schraudolph99.pdf>\n\n&gt; these are designed for higher precision, they could be precision limited and faster\n<https://keithp.com/cgit/picolibc.git/tree/newlib/libm/common>\n<http://jrfonseca.blogspot.com/2008/09/fast-sse2-pow-tables-or-polynomials.html>","user":"U68QW0PUZ","ts":"1616893634.072500","team":"T68168MUP","edited":{"user":"U68QW0PUZ","ts":"1616893752.000000"},"attachments":[{"title":"Fast SSE2 pow: tables or polynomials?","title_link":"http://jrfonseca.blogspot.com/2008/09/fast-sse2-pow-tables-or-polynomials.html","text":"We found that for many applications a substantial part of the time spent in software vertex processing was being spend in the powf function....","fallback":"Fast SSE2 pow: tables or polynomials?","image_url":"http://3.bp.blogspot.com/_siK-uBftJ9E/SN9u0hKLWzI/AAAAAAAAAEI/iucDWORa7lI/w1200-h630-p-k-no-nu/results.png","from_url":"http://jrfonseca.blogspot.com/2008/09/fast-sse2-pow-tables-or-polynomials.html","image_width":476,"image_height":250,"image_bytes":26513,"service_icon":"http://jrfonseca.blogspot.com/favicon.ico","service_name":"jrfonseca.blogspot.com","id":1,"original_url":"http://jrfonseca.blogspot.com/2008/09/fast-sse2-pow-tables-or-polynomials.html"}],"blocks":[{"type":"rich_text","block_id":"HyY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Those 30 significand bits -- 32 seems more solid .. I do not think it makes a difference in  how fast the "},{"type":"text","text":"exp2 log2","style":{"code":true}},{"type":"text","text":"  run, the 8 extra bits can become 4 if the results interact before the final result is obtained.  (with 6 extra bits, they can become 3 in the same way .. 3 extra bits is barely enough for transistors, we should be somewhat more conservative).\n\nHowever, I have not looked at the source code you are addressing -- mymmv.\n\nI do have some links to other fast log2 and fast exp2 implementations.  It has been years since I used any variation of these .. please reconfirm their behavior if you find any useful.\n\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"these are reliable afaik"}]},{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/romeric/fastapprox"},{"type":"text","text":"\n"},{"type":"link","url":"https://nic.schraudolph.org/pubs/Schraudolph99.pdf"},{"type":"text","text":"\n\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"these are designed for higher precision, they could be precision limited and faster"}]},{"type":"rich_text_section","elements":[{"type":"link","url":"https://keithp.com/cgit/picolibc.git/tree/newlib/libm/common"},{"type":"text","text":"\n"},{"type":"link","url":"http://jrfonseca.blogspot.com/2008/09/fast-sse2-pow-tables-or-polynomials.html"}]}]}],"thread_ts":"1616876853.071900","parent_user_id":"U0179G7FG4F"},{"client_msg_id":"ef3e08f1-59ca-4eb4-8ebc-3df113a5119e","type":"message","text":"this is a different level of aproximation error than what I need. In <https://github.com/JuliaLang/julia/pull/40223> I introduce `exp2` variants that are about 1.5 ULP precision which is what `@fastmath` generally targets for these sorts of functions. This is still about 20% faster than the versions I wrote for the regular `exp` variants where the error is `.54`ish ULP. The big speed gains are about 50-50 from lowering precision and ignoring the `Inf` and `Nan` checks. Even thought it's only about 1 Ulp less precison, it means that you don't have to do any of the annoying compensated arithmatic that you need to get close to `.5` Ulp.","user":"U0179G7FG4F","ts":"1616894041.072900","team":"T68168MUP","edited":{"user":"U0179G7FG4F","ts":"1616894108.000000"},"blocks":[{"type":"rich_text","block_id":"Wioim","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this is a different level of aproximation error than what I need. In "},{"type":"link","url":"https://github.com/JuliaLang/julia/pull/40223"},{"type":"text","text":" I introduce "},{"type":"text","text":"exp2","style":{"code":true}},{"type":"text","text":" variants that are about 1.5 ULP precision which is what "},{"type":"text","text":"@fastmath","style":{"code":true}},{"type":"text","text":" generally targets for these sorts of functions. This is still about 20% faster than the versions I wrote for the regular "},{"type":"text","text":"exp","style":{"code":true}},{"type":"text","text":" variants where the error is "},{"type":"text","text":".54","style":{"code":true}},{"type":"text","text":"ish ULP. The big speed gains are about 50-50 from lowering precision and ignoring the "},{"type":"text","text":"Inf","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"Nan","style":{"code":true}},{"type":"text","text":" checks. Even thought it's only about 1 Ulp less precison, it means that you don't have to do any of the annoying compensated arithmatic that you need to get close to "},{"type":"text","text":".5","style":{"code":true}},{"type":"text","text":" Ulp."}]}]}],"thread_ts":"1616876853.071900","parent_user_id":"U0179G7FG4F"},{"client_msg_id":"519c7867-048a-4592-ae32-5d2dd7167508","type":"message","text":"OIC","user":"U68QW0PUZ","ts":"1616910619.073200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qNbax","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"OIC"}]}]}],"thread_ts":"1616876853.071900","parent_user_id":"U0179G7FG4F"}]