[{"client_msg_id":"8fa522dc-7752-41c4-a239-7244675e24e1","type":"message","text":"There’s a difference between the “type narrowing” behavior of `map(identity, x)` vs. `collect(x)`, right? anyone have a quick explanation of the difference and when you would use one vs. the other? In my use-case, I’m hoping to get non-abstract eltypes at the end, so preferring `Union{Int64, Float64}` instead of `Real`.","user":"U681ELA87","ts":"1616535445.064300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nfSv9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There’s a difference between the “type narrowing” behavior of "},{"type":"text","text":"map(identity, x)","style":{"code":true}},{"type":"text","text":" vs. "},{"type":"text","text":"collect(x)","style":{"code":true}},{"type":"text","text":", right? anyone have a quick explanation of the difference and when you would use one vs. the other? In my use-case, I’m hoping to get non-abstract eltypes at the end, so preferring "},{"type":"text","text":"Union{Int64, Float64}","style":{"code":true}},{"type":"text","text":" instead of "},{"type":"text","text":"Real","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1616535445.064300","reply_count":4,"reply_users_count":2,"latest_reply":"1616537887.065000","reply_users":["U681ELA87","U67D54KS8"],"subscribed":false},{"client_msg_id":"13f3f2ae-b442-4cf2-a1ab-8300a6fd58b6","type":"message","text":"hmmm, nothing looking promising yet:\n```julia&gt; a = Any[Int64(1), 3.14]\n2-element Vector{Any}:\n 1\n 3.14\n\njulia&gt; map(identity, a)\n2-element Vector{Real}:\n 1\n 3.14\n\njulia&gt; [y for y in a]\n2-element Vector{Real}:\n 1\n 3.14\n\njulia&gt; collect(a)\n2-element Vector{Any}:\n 1\n 3.14```\n","user":"U681ELA87","ts":"1616535625.064400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9BS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hmmm, nothing looking promising yet:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> a = Any[Int64(1), 3.14]\n2-element Vector{Any}:\n 1\n 3.14\n\njulia> map(identity, a)\n2-element Vector{Real}:\n 1\n 3.14\n\njulia> [y for y in a]\n2-element Vector{Real}:\n 1\n 3.14\n\njulia> collect(a)\n2-element Vector{Any}:\n 1\n 3.14"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1616535445.064300","parent_user_id":"U681ELA87"},{"client_msg_id":"175d5dae-0f21-4921-8bc3-e792fefc1a10","type":"message","text":"Maybe you can take something from <https://github.com/JuliaLang/julia/blob/cc639ec7eadf3c8db1c6ae01ad0edbfdece1bc32/base/toml_parser.jl#L659|https://github.com/JuliaLang/julia/blob/cc639ec7eadf3c8db1c6ae01ad0edbfdece1bc32/base/toml_parser.jl#L659>","user":"U67D54KS8","ts":"1616537823.064600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zbDr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe you can take something from "},{"type":"link","url":"https://github.com/JuliaLang/julia/blob/cc639ec7eadf3c8db1c6ae01ad0edbfdece1bc32/base/toml_parser.jl#L659","text":"https://github.com/JuliaLang/julia/blob/cc639ec7eadf3c8db1c6ae01ad0edbfdece1bc32/base/toml_parser.jl#L659"}]}]}],"thread_ts":"1616535445.064300","parent_user_id":"U681ELA87"},{"client_msg_id":"090007a9-07be-4165-ac44-d0ebbe4efba8","type":"message","text":"It should keep things as unions up to a length of 2","user":"U67D54KS8","ts":"1616537834.064800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ia7D","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It should keep things as unions up to a length of 2"}]}]}],"thread_ts":"1616535445.064300","parent_user_id":"U681ELA87"},{"client_msg_id":"8b702720-beea-41af-9ee2-1b6390a599f9","type":"message","text":"But it widens to Any otherwise, so that could be replaced with `typejoin_promote` maybe","user":"U67D54KS8","ts":"1616537887.065000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mouJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But it widens to Any otherwise, so that could be replaced with "},{"type":"text","text":"typejoin_promote","style":{"code":true}},{"type":"text","text":" maybe"}]}]}],"thread_ts":"1616535445.064300","parent_user_id":"U681ELA87"}]