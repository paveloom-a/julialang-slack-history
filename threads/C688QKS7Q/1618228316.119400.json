[{"client_msg_id":"7c4a060e-aa07-4151-bdfa-b9e49981dd98","type":"message","text":"Is it legal to reassign argument slots? This does seem to work if I just run `g`, but `code_warntype` errors in `Core.Compiler.InferenceState`:\n```julia&gt; function foobar(x)\n           if true\n               x = 2\n           end\n           return x\n       end\nfoobar (generic function with 1 method)\n\njulia&gt; ci = copy(@code_lowered foobar(1))\nCodeInfo(\n1 ─     x@_3 = x@_2\n└──     goto #3 if not true\n2 ─     x@_3 = 2\n3 ┄     return x@_3\n)\n\njulia&gt; ci.code[3] = :($(Core.SlotNumber(2)) = 2)\n:(_2 = 2)\n\njulia&gt; ci.code[4] = Core.ReturnNode(Core.SlotNumber(2))\n:(return _2)\n\njulia&gt; ci\nCodeInfo(\n1 ─     x@_3 = x@_2\n└──     goto #3 if not true\n2 ─     x@_2 = 2\n3 ┄     return x@_2\n)\n\njulia&gt; @generated g(x) = return ci\ng (generic function with 1 method)\n\njulia&gt; g(1)\n2\n\njulia&gt; @code_warntype g(1)\nERROR: TypeError: in typeassert, expected Int64, got a value of type Vector{Any}\nStacktrace:\n  [1] Core.Compiler.InferenceState(result::Core.Compiler.InferenceResult, src::Core.CodeInfo, cached::Bool, interp::Core.Compiler.NativeInterpreter)\n    @ Core.Compiler ./compiler/inferencestate.jl:65\n  [2] Core.Compiler.InferenceState(result::Core.Compiler.InferenceResult, cached::Bool, interp::Core.Compiler.NativeInterpreter)\n    @ Core.Compiler ./compiler/inferencestate.jl:157\n  [3] typeinf_code(interp::Core.Compiler.NativeInterpreter, method::Method, atypes::Any, sparams::Core.SimpleVector, run_optimizer::Bool)\n    @ Core.Compiler ./compiler/typeinfer.jl:845\n  [4] code_typed_by_type(tt::Type; optimize::Bool, debuginfo::Symbol, world::UInt64, interp::Core.Compiler.NativeInterpreter)\n    @ Base ./reflection.jl:1192\n  [5] code_typed(f::Any, types::Any; optimize::Bool, debuginfo::Symbol, world::UInt64, interp::Core.Compiler.NativeInterpreter)\n    @ Base ./reflection.jl:1160\n  [6] code_warntype(io::Base.TTY, f::Any, t::Any; debuginfo::Symbol, optimize::Bool)\n    @ InteractiveUtils /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.7/InteractiveUtils/src/codeview.jl:63\n  [7] code_warntype(io::Base.TTY, f::Any, t::Any)\n    @ InteractiveUtils /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.7/InteractiveUtils/src/codeview.jl:61\n  [8] code_warntype(f::Any, t::Any; kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n    @ InteractiveUtils /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.7/InteractiveUtils/src/codeview.jl:135\n  [9] code_warntype(f::Any, t::Any)\n    @ InteractiveUtils /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.7/InteractiveUtils/src/codeview.jl:135\n [10] top-level scope\n    @ REPL[7]:1```\nThis may very well just be a bug though.","user":"UM30MT6RF","ts":"1618228316.119400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MPChA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is it legal to reassign argument slots? This does seem to work if I just run "},{"type":"text","text":"g","style":{"code":true}},{"type":"text","text":", but "},{"type":"text","text":"code_warntype","style":{"code":true}},{"type":"text","text":" errors in "},{"type":"text","text":"Core.Compiler.InferenceState","style":{"code":true}},{"type":"text","text":":\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function foobar(x)\n           if true\n               x = 2\n           end\n           return x\n       end\nfoobar (generic function with 1 method)\n\njulia> ci = copy(@code_lowered foobar(1))\nCodeInfo(\n1 ─     x@_3 = x@_2\n└──     goto #3 if not true\n2 ─     x@_3 = 2\n3 ┄     return x@_3\n)\n\njulia> ci.code[3] = :($(Core.SlotNumber(2)) = 2)\n:(_2 = 2)\n\njulia> ci.code[4] = Core.ReturnNode(Core.SlotNumber(2))\n:(return _2)\n\njulia> ci\nCodeInfo(\n1 ─     x@_3 = x@_2\n└──     goto #3 if not true\n2 ─     x@_2 = 2\n3 ┄     return x@_2\n)\n\njulia> @generated g(x) = return ci\ng (generic function with 1 method)\n\njulia> g(1)\n2\n\njulia> @code_warntype g(1)\nERROR: TypeError: in typeassert, expected Int64, got a value of type Vector{Any}\nStacktrace:\n  [1] Core.Compiler.InferenceState(result::Core.Compiler.InferenceResult, src::Core.CodeInfo, cached::Bool, interp::Core.Compiler.NativeInterpreter)\n    @ Core.Compiler ./compiler/inferencestate.jl:65\n  [2] Core.Compiler.InferenceState(result::Core.Compiler.InferenceResult, cached::Bool, interp::Core.Compiler.NativeInterpreter)\n    @ Core.Compiler ./compiler/inferencestate.jl:157\n  [3] typeinf_code(interp::Core.Compiler.NativeInterpreter, method::Method, atypes::Any, sparams::Core.SimpleVector, run_optimizer::Bool)\n    @ Core.Compiler ./compiler/typeinfer.jl:845\n  [4] code_typed_by_type(tt::Type; optimize::Bool, debuginfo::Symbol, world::UInt64, interp::Core.Compiler.NativeInterpreter)\n    @ Base ./reflection.jl:1192\n  [5] code_typed(f::Any, types::Any; optimize::Bool, debuginfo::Symbol, world::UInt64, interp::Core.Compiler.NativeInterpreter)\n    @ Base ./reflection.jl:1160\n  [6] code_warntype(io::Base.TTY, f::Any, t::Any; debuginfo::Symbol, optimize::Bool)\n    @ InteractiveUtils /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.7/InteractiveUtils/src/codeview.jl:63\n  [7] code_warntype(io::Base.TTY, f::Any, t::Any)\n    @ InteractiveUtils /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.7/InteractiveUtils/src/codeview.jl:61\n  [8] code_warntype(f::Any, t::Any; kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n    @ InteractiveUtils /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.7/InteractiveUtils/src/codeview.jl:135\n  [9] code_warntype(f::Any, t::Any)\n    @ InteractiveUtils /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.7/InteractiveUtils/src/codeview.jl:135\n [10] top-level scope\n    @ REPL[7]:1"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"This may very well just be a bug though."}]}]}],"thread_ts":"1618228316.119400","reply_count":2,"reply_users_count":2,"latest_reply":"1618228788.119700","reply_users":["UH24GRBLL","UM30MT6RF"],"is_locked":false,"subscribed":false},{"client_msg_id":"d7db1736-ea44-47a6-b473-f008566b6bc9","type":"message","text":"Isn't whatever is returned by `code_warntype` supposed to be in SSA form?","user":"UH24GRBLL","ts":"1618228722.119500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mtWc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Isn't whatever is returned by "},{"type":"text","text":"code_warntype","style":{"code":true}},{"type":"text","text":" supposed to be in SSA form?"}]}]}],"thread_ts":"1618228316.119400","parent_user_id":"UM30MT6RF"},{"client_msg_id":"e79afa8e-27a2-4265-bd37-04275f7a8215","type":"message","text":"Slots are still allowed","user":"UM30MT6RF","ts":"1618228788.119700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5rwgl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Slots are still allowed"}]}]}],"thread_ts":"1618228316.119400","parent_user_id":"UM30MT6RF"}]