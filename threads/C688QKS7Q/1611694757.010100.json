[{"client_msg_id":"d71eed97-e338-4eda-bf14-d9822c22938c","type":"message","text":"Is this behavior correct, and if it is, is there any better way to check whether a type has any actual concrete subtypes? I ran across this while doing some metaprogramming:\n```julia&gt; abstract type NoSubTypes end\n\njulia&gt; NoSubTypes.has_concrete_subtype\ntrue```","user":"U68M6ERG8","ts":"1611694757.010100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"utlEC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is this behavior correct, and if it is, is there any better way to check whether a type has any actual concrete subtypes? I ran across this while doing some metaprogramming:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> abstract type NoSubTypes end\n\njulia> NoSubTypes.has_concrete_subtype\ntrue"}]}]}],"thread_ts":"1611694757.010100","reply_count":11,"reply_users_count":2,"latest_reply":"1611698728.017200","reply_users":["U66SR8JHX","U68M6ERG8"],"subscribed":false},{"client_msg_id":"6c8edd43-ee00-427f-adc9-a2dd1b938653","type":"message","text":"Maybe check `!isabstracttype` on all subtypes recursively? I'm not sure if there is a function to do this already.","user":"U66SR8JHX","ts":"1611695991.014400","team":"T68168MUP","edited":{"user":"U66SR8JHX","ts":"1611696075.000000"},"blocks":[{"type":"rich_text","block_id":"MUBd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe check "},{"type":"text","text":"!isabstracttype","style":{"code":true}},{"type":"text","text":" on all subtypes recursively? I'm not sure if there is a function to do this already."}]}]}],"thread_ts":"1611694757.010100","parent_user_id":"U68M6ERG8"},{"client_msg_id":"da3c818c-366c-49b8-81f2-022a2b8018f2","type":"message","text":"I'm experimenting with something like that now, but it is pretty slow and I'm not sure it's correct -\n```has_concrete_subtype(T::DataType) = isconcretetype(T) || (T.has_concrete_subtype &amp;&amp; (any(has_concrete_subtype, subtypes(T)) || !isempty(T.parameters)))\n\nhas_concrete_subtype(T::UnionAll) = has_concrete_subtype(Base.unwrap_unionall(T))\n\nhas_concrete_subtype(T::Union) = has_concrete_subtype(T.a) || has_concrete_subtype(T.b)```","user":"U68M6ERG8","ts":"1611696455.014700","team":"T68168MUP","edited":{"user":"U68M6ERG8","ts":"1611696529.000000"},"blocks":[{"type":"rich_text","block_id":"i+q6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm experimenting with something like that now, but it is pretty slow and I'm not sure it's correct -\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"has_concrete_subtype(T::DataType) = isconcretetype(T) || (T.has_concrete_subtype && (any(has_concrete_subtype, subtypes(T)) || !isempty(T.parameters)))\n\nhas_concrete_subtype(T::UnionAll) = has_concrete_subtype(Base.unwrap_unionall(T))\n\nhas_concrete_subtype(T::Union) = has_concrete_subtype(T.a) || has_concrete_subtype(T.b)"}]}]}],"thread_ts":"1611694757.010100","parent_user_id":"U68M6ERG8"},{"client_msg_id":"2486a5f0-3d89-4ed6-998f-cf53f85f5189","type":"message","text":"memoizing `subtypes` improves performance, though","user":"U68M6ERG8","ts":"1611696656.015000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BDV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"memoizing "},{"type":"text","text":"subtypes","style":{"code":true}},{"type":"text","text":" improves performance, though"}]}]}],"thread_ts":"1611694757.010100","parent_user_id":"U68M6ERG8"},{"client_msg_id":"e1917252-77a0-4827-ae16-5e3ef836672a","type":"message","text":"I think that is probable the best you can do, I think `subtypes` is slow","user":"U66SR8JHX","ts":"1611696907.015200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tXsZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think that is probable the best you can do, I think "},{"type":"text","text":"subtypes","style":{"code":true}},{"type":"text","text":" is slow"}]}]}],"thread_ts":"1611694757.010100","parent_user_id":"U68M6ERG8"},{"client_msg_id":"a6c43549-0c32-48de-afb1-2977e3825bcb","type":"message","text":"One question though, how would you like to count parametric types, say something like `Complex`?","user":"U66SR8JHX","ts":"1611697014.015400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"y1I","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"One question though, how would you like to count parametric types, say something like "},{"type":"text","text":"Complex","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1611694757.010100","parent_user_id":"U68M6ERG8"},{"client_msg_id":"91def6cf-790b-4413-b924-c1e2d5c7832f","type":"message","text":"Good question. I'd like to write a function that can synthesize random Julia types, filling in type parameters with values that match the type constraints. What I've got so far works for `Complex` but still fails in edge cases:\n```julia&gt; gentype(Complex)\nComplex{UInt16}\n\njulia&gt; gentype(Complex)\nComplex{UInt128}\n\njulia&gt; gentype(Complex)\nComplex{Rational{Bool}}\n\njulia&gt; gentype(Complex)\nComplex{UInt32}\n\njulia&gt; gentype(Complex)\nComplex{Rational{UInt8}}```","user":"U68M6ERG8","ts":"1611697117.015600","team":"T68168MUP","edited":{"user":"U68M6ERG8","ts":"1611697833.000000"},"blocks":[{"type":"rich_text","block_id":"xfsi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Good question. I'd like to write a function that can synthesize random Julia types, filling in type parameters with values that match the type constraints. What I've got so far works for "},{"type":"text","text":"Complex","style":{"code":true}},{"type":"text","text":" but still fails in edge cases:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> gentype(Complex)\nComplex{UInt16}\n\njulia> gentype(Complex)\nComplex{UInt128}\n\njulia> gentype(Complex)\nComplex{Rational{Bool}}\n\njulia> gentype(Complex)\nComplex{UInt32}\n\njulia> gentype(Complex)\nComplex{Rational{UInt8}}"}]}]}],"thread_ts":"1611694757.010100","parent_user_id":"U68M6ERG8"},{"client_msg_id":"e6fd4e79-9162-4a90-8b48-2e757985fdf2","type":"message","text":"I don't know if something like\n```has_concrete_subtype(T::Type) = !isabstracttype(T) || any(!isabstracttype, subtypes(T))```\nplus memoizing subtypes will be fast. At least it should be a bit faster than what you have above as it covers all cases.","user":"U66SR8JHX","ts":"1611697943.016300","team":"T68168MUP","edited":{"user":"U66SR8JHX","ts":"1611698096.000000"},"blocks":[{"type":"rich_text","block_id":"+fT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't know if something like\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"has_concrete_subtype(T::Type) = !isabstracttype(T) || any(!isabstracttype, subtypes(T))"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"plus memoizing subtypes will be fast. At least it should be a bit faster than what you have above as it covers all cases."}]}]}],"thread_ts":"1611694757.010100","parent_user_id":"U68M6ERG8"},{"client_msg_id":"d7f0d70e-6459-4591-b0cf-0f659b00800f","type":"message","text":"It does not cover all cases:\n```julia&gt; pablo_has_concrete_subtype(T) = !isabstracttype(T) || any(!isabstracttype, subtypes(T))\npablo_has_concrete_subtype (generic function with 1 method)\n\njulia&gt; abstract type A end\n\njulia&gt; abstract type B &lt;: A end\n\njulia&gt; struct C &lt;: B end\n\njulia&gt; pablo_has_concrete_subtype(A)\nfalse```","user":"U68M6ERG8","ts":"1611698214.016600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"V7J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It does not cover all cases:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> pablo_has_concrete_subtype(T) = !isabstracttype(T) || any(!isabstracttype, subtypes(T))\npablo_has_concrete_subtype (generic function with 1 method)\n\njulia> abstract type A end\n\njulia> abstract type B <: A end\n\njulia> struct C <: B end\n\njulia> pablo_has_concrete_subtype(A)\nfalse"}]}]}],"thread_ts":"1611694757.010100","parent_user_id":"U68M6ERG8"},{"client_msg_id":"1b1a60f6-9d48-411a-9d14-3f4a8de931e9","type":"message","text":"Sorry, typed it wrong, should have been\n```has_concrete_subtype(T::Type) = !isabstracttype(T) || any(has_concrete_subtype, subtypes(T))```","user":"U66SR8JHX","ts":"1611698374.016800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"i1coA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sorry, typed it wrong, should have been\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"has_concrete_subtype(T::Type) = !isabstracttype(T) || any(has_concrete_subtype, subtypes(T))"}]}]}],"thread_ts":"1611694757.010100","parent_user_id":"U68M6ERG8"},{"client_msg_id":"0a721688-71ef-4fd6-bf69-f5c449839517","type":"message","text":"Thinking about it a bit more, this still won't work with `Union{}`","user":"U66SR8JHX","ts":"1611698552.017000","team":"T68168MUP","edited":{"user":"U66SR8JHX","ts":"1611715311.000000"},"blocks":[{"type":"rich_text","block_id":"QllcX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thinking about it a bit more, this still won't work with "},{"type":"text","text":"Union{}","style":{"code":true}}]}]}],"thread_ts":"1611694757.010100","parent_user_id":"U68M6ERG8"},{"client_msg_id":"01a98282-bc9d-4df0-9432-9cf0b1b860ba","type":"message","text":"But you can fix the `Union{}` case with\n```has_concrete_subtype(::Core.TypeofBottom) = false```","user":"U66SR8JHX","ts":"1611698728.017200","team":"T68168MUP","edited":{"user":"U66SR8JHX","ts":"1611699496.000000"},"blocks":[{"type":"rich_text","block_id":"FyBY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But you can fix the "},{"type":"text","text":"Union{}","style":{"code":true}},{"type":"text","text":" case with\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"has_concrete_subtype(::Core.TypeofBottom) = false"}]}]}],"thread_ts":"1611694757.010100","parent_user_id":"U68M6ERG8"}]