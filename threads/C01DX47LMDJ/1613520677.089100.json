[{"client_msg_id":"d7c7b95d-5266-4595-a00f-9bedb2a7950d","type":"message","text":"today I learned <https://doc.rust-lang.org/edition-guide/rust-2018/error-handling-and-panics/the-question-mark-operator-for-easier-error-handling.html>","user":"UPUBAM63X","ts":"1613520677.089100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WwDHI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"today I learned "},{"type":"link","url":"https://doc.rust-lang.org/edition-guide/rust-2018/error-handling-and-panics/the-question-mark-operator-for-easier-error-handling.html"}]}]}],"thread_ts":"1613520677.089100","reply_count":1,"reply_users_count":1,"latest_reply":"1613587855.090200","reply_users":["U8T0YV7QC"],"subscribed":false,"reactions":[{"name":"clapping","users":["U01HLRSFPCN"],"count":1}]},{"client_msg_id":"EB0C64BB-347E-4D8D-9D92-614004D7016E","type":"message","text":"I thought it was talking about Julia. Didn’t know Rust can do that too. \n&gt; This sort of evolution is one of the great advantages of a powerful macro system: speculative extensions to the language syntax can be prototyped and iterated on without modifying the language itself, and in return, macros that turn out to be especially useful can indicate missing language features","user":"U8T0YV7QC","ts":"1613587855.090200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iqOX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I thought it was talking about Julia. Didn’t know Rust can do that too. \n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"This sort of evolution is one of the great advantages of a powerful macro system: speculative extensions to the language syntax can be prototyped and iterated on without modifying the language itself, and in return, macros that turn out to be especially useful can indicate missing language features"}]}]}],"thread_ts":"1613520677.089100","parent_user_id":"UPUBAM63X"}]