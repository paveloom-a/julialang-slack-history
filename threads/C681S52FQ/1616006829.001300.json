[{"client_msg_id":"f9b57f82-3855-4e45-b9c9-633bf670409a","type":"message","text":"Is this the right channel to ask some basic fitting/optimization questions?","user":"U01FKQQ7J0J","ts":"1616006829.001300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Hu0vp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is this the right channel to ask some basic fitting/optimization questions?"}]}]}],"thread_ts":"1616006829.001300","reply_count":6,"reply_users_count":3,"latest_reply":"1616132290.012300","reply_users":["UGD4K0Z25","UM8JUNJG7","U01FKQQ7J0J"],"subscribed":false},{"client_msg_id":"dbb3b5ae-c3c3-4c92-905d-66fd10feecf8","type":"message","text":"Is it more a stats question? There is <#C6821M4KE|statistics>","user":"UGD4K0Z25","ts":"1616008127.001500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"n23/3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is it more a stats question? There is "},{"type":"channel","channel_id":"C6821M4KE"}]}]}],"thread_ts":"1616006829.001300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"33b6e527-03e3-41ce-8a97-dd93c28d5d1e","type":"message","text":"dont get too caught up. ask the question! if its not peoples expertise here, they'll probably redirect you","user":"UM8JUNJG7","ts":"1616008846.001700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7aQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"dont get too caught up. ask the question! if its not peoples expertise here, they'll probably redirect you"}]}]}],"thread_ts":"1616006829.001300","parent_user_id":"U01FKQQ7J0J","reactions":[{"name":"+1","users":["U67G3QRJM"],"count":1}]},{"client_msg_id":"1cc239a0-d6ee-4a64-836b-0ea7bf2d2dd2","type":"message","text":"OK, here goes...\nI have a system of equations that are of the form:\n```y1 = x1 * x2\ny2 = x1 * x3\ny3 = x1 * x4\ny4 = x2 * x3\ny5 = x2 * x4\ny6 = x3 * x4```\nThis shows the situation with 4 different `x` \"unknown\".  I measure `y1m` through `y6m` which are somewhat noisy.  I want to solve for all the `x` values that give the best \"fit\" to the noisy data.  I started doing this by taking the `log` of both side which essentially turns this into a system of linear equations (but in \"log space\"):\n```log(y1) = log(x1) + log(x2)\n# etc```\nI rewrite this in matrix form as `log_y = A * log_x`, create `log_ym = log.(ym)` and `A`, \"solve\" for `log_x` using `log_x = A \\ log_ym`, and then convert `log_x` to `x` with `x = exp.(log_x)`.\n\nThis kinda works, but it feels like cheating because the zero-mean errors in \"log space\" will not be zero-mean errors in the original \"non-log space\".  How can I solve for the `x` values properly?","user":"U01FKQQ7J0J","ts":"1616021820.002200","team":"T68168MUP","edited":{"user":"U01FKQQ7J0J","ts":"1616022608.000000"},"blocks":[{"type":"rich_text","block_id":"Gg6Jo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"OK, here goes...\nI have a system of equations that are of the form:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"y1 = x1 * x2\ny2 = x1 * x3\ny3 = x1 * x4\ny4 = x2 * x3\ny5 = x2 * x4\ny6 = x3 * x4"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"This shows the situation with 4 different "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" \"unknown\".  I measure "},{"type":"text","text":"y1m","style":{"code":true}},{"type":"text","text":" through "},{"type":"text","text":"y6m","style":{"code":true}},{"type":"text","text":" which are somewhat noisy.  I want to solve for all the "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" values that give the best \"fit\" to the noisy data.  I started doing this by taking the "},{"type":"text","text":"log","style":{"code":true}},{"type":"text","text":" of both side which essentially turns this into a system of linear equations (but in \"log space\"):\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"log(y1) = log(x1) + log(x2)\n# etc"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I rewrite this in matrix form as "},{"type":"text","text":"log_y = A * log_x","style":{"code":true}},{"type":"text","text":", create "},{"type":"text","text":"log_ym = log.(ym)","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"A","style":{"code":true}},{"type":"text","text":", \"solve\" for "},{"type":"text","text":"log_x","style":{"code":true}},{"type":"text","text":" using "},{"type":"text","text":"log_x = A \\ log_ym","style":{"code":true}},{"type":"text","text":", and then convert "},{"type":"text","text":"log_x","style":{"code":true}},{"type":"text","text":" to "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" with "},{"type":"text","text":"x = exp.(log_x)","style":{"code":true}},{"type":"text","text":".\n\nThis kinda works, but it feels like cheating because the zero-mean errors in \"log space\" will not be zero-mean errors in the original \"non-log space\".  How can I solve for the "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" values properly?"}]}]}],"thread_ts":"1616006829.001300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"94e40907-f2d2-4e8a-8210-037e313120ea","type":"message","text":"This seems to work (edited for brevity):\n```using LsqFit\n\nn = 4\nn2 = (n-1)n÷2\n\nmodel(t, p) = [p[i]*p[j] for i=1:length(p)-1 for j=i+1:length(p)]\n\ntdata = 1:n2\nydata = model(tdata, 1:4) + rand(n2)/10\n6-element Array{Float64,1}:\n  2.086901399438103\n  3.04862628705242\n  4.039200574977226\n  6.072915805834307\n  8.09997357328747\n 12.09205509670055\n\np0 = ones(n)\n\nfit = curve_fit(model, tdata, ydata, p0)\n\nfit.param\n4-element Array{Float64,1}:\n 1.0122078218574782\n 2.019837647166214\n 3.013320664867998\n 4.0104862015363745```\nIt seems a bit unusual in that `tdata` is not used at all in `model`, the return value of `model` only depends on `p`.  Is this legit?  This definitely results in smaller residuals than the left division log space approach:\n```julia&gt; A=[1 1 0 0\n          1 0 1 0\n          1 0 0 1\n          0 1 1 0\n          0 1 0 1\n          0 0 1 1];\n\njulia&gt; ld_param = exp.(A\\log.(ydata))\n4-element Array{Float64,1}:\n 1.0175841881879828\n 2.03381280017437\n 3.003449705915079\n 3.9926307709420525\n\njulia&gt; sum((model(tdata, ld_param) - ydata).^2)\n0.012669929252258709\n\njulia&gt; sum((model(tdata, fit.param) - ydata).^2)\n0.0024444146039733394```","user":"U01FKQQ7J0J","ts":"1616035962.002600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j/OBb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This seems to work (edited for brevity):\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using LsqFit\n\nn = 4\nn2 = (n-1)n÷2\n\nmodel(t, p) = [p[i]*p[j] for i=1:length(p)-1 for j=i+1:length(p)]\n\ntdata = 1:n2\nydata = model(tdata, 1:4) + rand(n2)/10\n6-element Array{Float64,1}:\n  2.086901399438103\n  3.04862628705242\n  4.039200574977226\n  6.072915805834307\n  8.09997357328747\n 12.09205509670055\n\np0 = ones(n)\n\nfit = curve_fit(model, tdata, ydata, p0)\n\nfit.param\n4-element Array{Float64,1}:\n 1.0122078218574782\n 2.019837647166214\n 3.013320664867998\n 4.0104862015363745"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"It seems a bit unusual in that "},{"type":"text","text":"tdata","style":{"code":true}},{"type":"text","text":" is not used at all in "},{"type":"text","text":"model","style":{"code":true}},{"type":"text","text":", the return value of "},{"type":"text","text":"model","style":{"code":true}},{"type":"text","text":" only depends on "},{"type":"text","text":"p","style":{"code":true}},{"type":"text","text":".  Is this legit?  This definitely results in smaller residuals than the left division log space approach:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> A=[1 1 0 0\n          1 0 1 0\n          1 0 0 1\n          0 1 1 0\n          0 1 0 1\n          0 0 1 1];\n\njulia> ld_param = exp.(A\\log.(ydata))\n4-element Array{Float64,1}:\n 1.0175841881879828\n 2.03381280017437\n 3.003449705915079\n 3.9926307709420525\n\njulia> sum((model(tdata, ld_param) - ydata).^2)\n0.012669929252258709\n\njulia> sum((model(tdata, fit.param) - ydata).^2)\n0.0024444146039733394"}]}]}],"thread_ts":"1616006829.001300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"138390e3-c622-4028-a1e3-20278541b227","type":"message","text":"you might need to repost in the channel. discourse is also good.","user":"UM8JUNJG7","ts":"1616130362.012100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"a14Q/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you might need to repost in the channel. discourse is also good."}]}]}],"thread_ts":"1616006829.001300","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"87cf87e9-9e43-462e-bd69-6f044220ee90","type":"message","text":"Thanks for the reminder about discourse.  I'm so slackified (slack-siloed?) at work I forget about other avenues.  I should get out more!","user":"U01FKQQ7J0J","ts":"1616132290.012300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"d2G","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks for the reminder about discourse.  I'm so slackified (slack-siloed?) at work I forget about other avenues.  I should get out more!"}]}]}],"thread_ts":"1616006829.001300","parent_user_id":"U01FKQQ7J0J"}]