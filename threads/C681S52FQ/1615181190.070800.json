[{"client_msg_id":"17d792b8-eb74-4c70-9ddb-e74f7fc819db","type":"message","text":"Hey. I'm thinking of implementing Fourier-Motzkin by hand in julia to decide whether a set of linear inequalities (with coefficients in some number field, e.g. Q(\\sqrt 2) ) have a solution. Technically, not all inequalities are \"lax\" (i.e. ≤), some are strict (i.e. &lt;), but I think since all inequalities are linear, the solution set is a cone, so that I can make everything lax. Thus, I'm wondering:\n1. Is there a good reference on F-M and the ways to speed it up? I see wikipedia talks about some speedups.\n2. Can F-M be made into an \"incremental\" algorithm, in the sense that you start with a given set of inequalities, solve them, and *then* can add a new inequality to the lot and not start from zero?\n3. Is there a standard way to deal with strict inequalities?\n4. Is there any chance that a handcrafted \"naive\" implementation has comparable speed as just using some LP solver and testing for feasibility?\nAnd about LP solvers: If I am to actually use a LP solver to decide infeasibility, since I'll have to approximate my field elements, I think the best would be to work with one that can deal with high precision, e.g. `tulip` through `convex.jl` ; does it always output a certificate of infeasibility in case the problem is infeasible?\n\nThanks!\n*edit* I found this <http://www.cs.man.ac.uk/~tsiskarn/pdf/CRA.pdf> which might be better than F-M?","user":"U01MG0TN079","ts":"1615181190.070800","team":"T68168MUP","edited":{"user":"U01MG0TN079","ts":"1615182276.000000"},"blocks":[{"type":"rich_text","block_id":"L=no","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hey. I'm thinking of implementing Fourier-Motzkin by hand in julia to decide whether a set of linear inequalities (with coefficients in some number field, e.g. Q(\\sqrt 2) ) have a solution. Technically, not all inequalities are \"lax\" (i.e. ≤), some are strict (i.e. <), but I think since all inequalities are linear, the solution set is a cone, so that I can make everything lax. Thus, I'm wondering:\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a good reference on F-M and the ways to speed it up? I see wikipedia talks about some speedups."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Can F-M be made into an \"incremental\" algorithm, in the sense that you start with a given set of inequalities, solve them, and "},{"type":"text","text":"then","style":{"bold":true}},{"type":"text","text":" can add a new inequality to the lot and not start from zero?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a standard way to deal with strict inequalities?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Is there any chance that a handcrafted \"naive\" implementation has comparable speed as just using some LP solver and testing for feasibility?"}]}],"style":"ordered","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"And about LP solvers: If I am to actually use a LP solver to decide infeasibility, since I'll have to approximate my field elements, I think the best would be to work with one that can deal with high precision, e.g. "},{"type":"text","text":"tulip","style":{"code":true}},{"type":"text","text":" through "},{"type":"text","text":"convex.jl","style":{"code":true}},{"type":"text","text":" ; does it always output a certificate of infeasibility in case the problem is infeasible?\n\nThanks!\n"},{"type":"text","text":"edit","style":{"bold":true}},{"type":"text","text":" I found this "},{"type":"link","url":"http://www.cs.man.ac.uk/~tsiskarn/pdf/CRA.pdf"},{"type":"text","text":" which might be better than F-M?"}]}]}],"thread_ts":"1615181190.070800","reply_count":4,"reply_users_count":2,"latest_reply":"1615233997.072100","reply_users":["U67G3QRJM","U01MG0TN079"],"subscribed":false},{"client_msg_id":"108f5a1e-3eb9-44a3-ac6e-4b62deb5d75d","type":"message","text":"I don’t see why you need to approximate your field elements? Why can’t you represent them exactly with a `struct`?","user":"U67G3QRJM","ts":"1615189492.071300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZJmt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don’t see why you need to approximate your field elements? Why can’t you represent them exactly with a "},{"type":"text","text":"struct","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1615181190.070800","parent_user_id":"U01MG0TN079"},{"client_msg_id":"b448e945-c831-4647-82ea-daaeab11c10d","type":"message","text":"Well, I meant I can't feed a `struct` to preexisting solvers I think. You have to use floats or integers or maybe `BigFloat`  for some solvers when defining your inequality matrix.","user":"U01MG0TN079","ts":"1615223657.071600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"66D","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well, I meant I can't feed a "},{"type":"text","text":"struct","style":{"code":true}},{"type":"text","text":" to preexisting solvers I think. You have to use floats or integers or maybe "},{"type":"text","text":"BigFloat","style":{"code":true}},{"type":"text","text":"  for some solvers when defining your inequality matrix."}]}]}],"thread_ts":"1615181190.070800","parent_user_id":"U01MG0TN079"},{"client_msg_id":"a07e66b5-2aeb-4df8-ae91-e5acef5a759d","type":"message","text":"That’s why I said you need a pure Julia solver","user":"U67G3QRJM","ts":"1615233984.071800","team":"T68168MUP","edited":{"user":"U67G3QRJM","ts":"1615233990.000000"},"blocks":[{"type":"rich_text","block_id":"3Lw1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That’s why I said you need a pure Julia solver"}]}]}],"thread_ts":"1615181190.070800","parent_user_id":"U01MG0TN079"},{"client_msg_id":"7f20c5bb-7ae5-4ec7-9924-fdc747ef0348","type":"message","text":"So that you could pass weird types through","user":"U67G3QRJM","ts":"1615233997.072100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"urs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So that you could pass weird types through"}]}]}],"thread_ts":"1615181190.070800","parent_user_id":"U01MG0TN079"}]