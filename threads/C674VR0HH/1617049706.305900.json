[{"client_msg_id":"cda05851-ceef-47b0-92d1-ea575070f605","type":"message","text":"I just got burned by my own stupidity, but my god did it take a long time to figure out what I had done.  Consider the following\n```julia&gt; using DataFrames\n\njulia&gt; df = DataFrame(A=rand(5))\n5×1 DataFrame\n Row │ A\n     │ Float64\n─────┼──────────\n   1 │ 0.899862\n   2 │ 0.309756\n   3 │ 0.905428\n   4 │ 0.986047\n   5 │ 0.219594\n\njulia&gt; df[!, :B] = df.A;\n\njulia&gt; filter!(:A=&gt;(≥)(0.9), df)\nERROR: BoundsError\nStacktrace:\n [1] _deleteat!(a::Vector{Float64}, inds::Vector{Int64}, dltd::Base.Nowhere)\n   @ Base ./array.jl:1398\n [2] _deleteat!\n   @ ./array.jl:1383 [inlined]\n [3] deleteat!\n   @ ./array.jl:1377 [inlined]\n [4] (::DataFrames.var\"#184#185\"{Vector{Int64}})(col::Vector{Float64})\n   @ DataFrames ~/.julia/packages/DataFrames/zXEKU/src/dataframe/dataframe.jl:885\n [5] foreach(f::DataFrames.var\"#184#185\"{Vector{Int64}}, itr::Vector{AbstractVector{T} where T})\n   @ Base ./abstractarray.jl:2141\n [6] delete!\n   @ ~/.julia/packages/DataFrames/zXEKU/src/dataframe/dataframe.jl:885 [inlined]\n [7] _filter!_helper(df::DataFrame, f::Base.Fix2{typeof(&gt;=), Float64}, cols::Vector{Float64})\n   @ DataFrames ~/.julia/packages/DataFrames/zXEKU/src/abstractdataframe/abstractdataframe.jl:1126\n [8] filter!(::Pair{Symbol, Base.Fix2{typeof(&gt;=), Float64}}, df::DataFrame)\n   @ DataFrames ~/.julia/packages/DataFrames/zXEKU/src/abstractdataframe/abstractdataframe.jl:1109\n [9] top-level scope\n   @ REPL[4]:1```\nI had enough code that it wasn't obvious to me that I had assigned columns this way without copying.  I don't think there's anything to be done here, but man did I get myself confused","user":"U9VG1AYSG","ts":"1617049706.305900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"h2e","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I just got burned by my own stupidity, but my god did it take a long time to figure out what I had done.  Consider the following\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using DataFrames\n\njulia> df = DataFrame(A=rand(5))\n5×1 DataFrame\n Row │ A\n     │ Float64\n─────┼──────────\n   1 │ 0.899862\n   2 │ 0.309756\n   3 │ 0.905428\n   4 │ 0.986047\n   5 │ 0.219594\n\njulia> df[!, :B] = df.A;\n\njulia> filter!(:A=>(≥)(0.9), df)\nERROR: BoundsError\nStacktrace:\n [1] _deleteat!(a::Vector{Float64}, inds::Vector{Int64}, dltd::Base.Nowhere)\n   @ Base ./array.jl:1398\n [2] _deleteat!\n   @ ./array.jl:1383 [inlined]\n [3] deleteat!\n   @ ./array.jl:1377 [inlined]\n [4] (::DataFrames.var\"#184#185\"{Vector{Int64}})(col::Vector{Float64})\n   @ DataFrames ~/.julia/packages/DataFrames/zXEKU/src/dataframe/dataframe.jl:885\n [5] foreach(f::DataFrames.var\"#184#185\"{Vector{Int64}}, itr::Vector{AbstractVector{T} where T})\n   @ Base ./abstractarray.jl:2141\n [6] delete!\n   @ ~/.julia/packages/DataFrames/zXEKU/src/dataframe/dataframe.jl:885 [inlined]\n [7] _filter!_helper(df::DataFrame, f::Base.Fix2{typeof(>=), Float64}, cols::Vector{Float64})\n   @ DataFrames ~/.julia/packages/DataFrames/zXEKU/src/abstractdataframe/abstractdataframe.jl:1126\n [8] filter!(::Pair{Symbol, Base.Fix2{typeof(>=), Float64}}, df::DataFrame)\n   @ DataFrames ~/.julia/packages/DataFrames/zXEKU/src/abstractdataframe/abstractdataframe.jl:1109\n [9] top-level scope\n   @ REPL[4]:1"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I had enough code that it wasn't obvious to me that I had assigned columns this way without copying.  I don't think there's anything to be done here, but man did I get myself confused"}]}]}],"thread_ts":"1617049706.305900","reply_count":18,"reply_users_count":3,"latest_reply":"1617095781.311000","reply_users":["U8JAMQGQY","U9VG1AYSG","U67431ELR"],"is_locked":false,"subscribed":false,"reactions":[{"name":"exclamation","users":["U8JAMQGQY"],"count":1}]},{"client_msg_id":"388f1497-8189-4534-b321-e9e275deda09","type":"message","text":"that is why there is `!` in the syntax - it is ugly to warn you not to do it :slightly_smiling_face:. Now the question is what is an idiomatic way to do it. There are three:\n```df.B = copy(df.A)```\nor\n```df.B = df[:, :A]```\nor\n```df[:, :B] = df.A```\nI personally prefer the first one with explicit call to `copy` as it is most clearly showing what is going on.","user":"U8JAMQGQY","ts":"1617050594.306000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cgEEn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that is why there is "},{"type":"text","text":"!","style":{"code":true}},{"type":"text","text":" in the syntax - it is ugly to warn you not to do it "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":". Now the question is what is an idiomatic way to do it. There are three:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"df.B = copy(df.A)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"or\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"df.B = df[:, :A]"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"or\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"df[:, :B] = df.A"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I personally prefer the first one with explicit call to "},{"type":"text","text":"copy","style":{"code":true}},{"type":"text","text":" as it is most clearly showing what is going on."}]}]}],"thread_ts":"1617049706.305900","parent_user_id":"U9VG1AYSG","reactions":[{"name":"+1","users":["UDXST8ARK"],"count":1}]},{"client_msg_id":"2f473404-5425-4b18-9b17-f2ab907301b4","type":"message","text":"oh... wait, so `df.B = df[:, :A]` doesn't do the same thing?  how exactly does that work under the hood, does it know to copy somehow?","user":"U9VG1AYSG","ts":"1617054123.306400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lv2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh... wait, so "},{"type":"text","text":"df.B = df[:, :A]","style":{"code":true}},{"type":"text","text":" doesn't do the same thing?  how exactly does that work under the hood, does it know to copy somehow?"}]}]}],"thread_ts":"1617049706.305900","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"555c4a02-99fe-4d0d-8053-152fda0d3789","type":"message","text":"I knew it was supposed to be `copy` when I found the issue, but I did not know that `df.B` would have done that for me","user":"U9VG1AYSG","ts":"1617054138.306600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/rg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I knew it was supposed to be "},{"type":"text","text":"copy","style":{"code":true}},{"type":"text","text":" when I found the issue, but I did not know that "},{"type":"text","text":"df.B","style":{"code":true}},{"type":"text","text":" would have done that for me"}]}]}],"thread_ts":"1617049706.305900","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"15bb55ae-cd79-4322-ac99-9f1adbe39af2","type":"message","text":"`df.B = df[:, :A]`  - the copy is made on the right hand side. Writing `df[:, :A]` makes a copy, so it is the same as `copy(df.A)`","user":"U8JAMQGQY","ts":"1617054239.306800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BKpW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"df.B = df[:, :A]","style":{"code":true}},{"type":"text","text":"  - the copy is made on the right hand side. Writing "},{"type":"text","text":"df[:, :A]","style":{"code":true}},{"type":"text","text":" makes a copy, so it is the same as "},{"type":"text","text":"copy(df.A)","style":{"code":true}}]}]}],"thread_ts":"1617049706.305900","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"bf04d4a4-6a02-4e20-9d06-d7a3688b1f60","type":"message","text":"Just to add `df[:, :B]= df[:, :A]`  would be also OK, but it would be wasteful, as it would copy twice, once when getting the data and once when writing it.","user":"U8JAMQGQY","ts":"1617054279.307000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Iu17","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Just to add "},{"type":"text","text":"df[:, :B]= df[:, :A]","style":{"code":true}},{"type":"text","text":"  would be also OK, but it would be wasteful, as it would copy twice, once when getting the data and once when writing it."}]}]}],"thread_ts":"1617049706.305900","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"3f14339e-960c-467d-a342-7a9ef9a4a4eb","type":"message","text":"Is this clear now?","user":"U8JAMQGQY","ts":"1617054303.307200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NlGV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is this clear now?"}]}]}],"thread_ts":"1617049706.305900","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"42a8a888-db52-4225-bfb6-62816028a4b7","type":"message","text":"in general `df.B = anything` does not copy, but `df[:, :A]` does","user":"U8JAMQGQY","ts":"1617054319.307400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"APUq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in general "},{"type":"text","text":"df.B = anything","style":{"code":true}},{"type":"text","text":" does not copy, but "},{"type":"text","text":"df[:, :A]","style":{"code":true}},{"type":"text","text":" does"}]}]}],"thread_ts":"1617049706.305900","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"e130bcb1-292b-4427-b1f8-dbf9cc569f99","type":"message","text":"oh right right I see, I missed that that was different","user":"U9VG1AYSG","ts":"1617054339.307600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"92REY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh right right I see, I missed that that was different"}]}]}],"thread_ts":"1617049706.305900","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"99c66cd9-4fff-4517-928a-0158acc95bda","type":"message","text":"ok, now in retrospect, I think the thing that I found confusing (though it's entirely my own fault) was I think when I'm not thinking about it I assume `df.A` is like `df[:, :A]`","user":"U9VG1AYSG","ts":"1617054399.307800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hh3dc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ok, now in retrospect, I think the thing that I found confusing (though it's entirely my own fault) was I think when I'm not thinking about it I assume "},{"type":"text","text":"df.A","style":{"code":true}},{"type":"text","text":" is like "},{"type":"text","text":"df[:, :A]","style":{"code":true}}]}]}],"thread_ts":"1617049706.305900","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"16048245-fc57-4ff1-b76a-6a0e0eacd9ab","type":"message","text":"but there's really no reason to think that, in fact the `getproperty` syntax makes it look like a \"part of\" the dataframe, so it makes sense that htat does not copy","user":"U9VG1AYSG","ts":"1617054429.308000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/G90S","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but there's really no reason to think that, in fact the "},{"type":"text","text":"getproperty","style":{"code":true}},{"type":"text","text":" syntax makes it look like a \"part of\" the dataframe, so it makes sense that htat does not copy"}]}]}],"thread_ts":"1617049706.305900","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"2b75dad6-67fd-433c-88c1-08a485d5e15c","type":"message","text":"I will just have to be a lot more congizant of all this in the future","user":"U9VG1AYSG","ts":"1617054438.308200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/6zm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I will just have to be a lot more congizant of all this in the future"}]}]}],"thread_ts":"1617049706.305900","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"2a3dccef-cf1d-4604-aec8-ccf2b6f9ea64","type":"message","text":"There was a design tension: allow any behavior vs provide safety. I think that the only corner case when the user can trip up is `df.B = df.A` which does not copy, but there is no `!` in the expression to warn about it.","user":"U8JAMQGQY","ts":"1617054586.308500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9SCKk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There was a design tension: allow any behavior vs provide safety. I think that the only corner case when the user can trip up is "},{"type":"text","text":"df.B = df.A","style":{"code":true}},{"type":"text","text":" which does not copy, but there is no "},{"type":"text","text":"!","style":{"code":true}},{"type":"text","text":" in the expression to warn about it."}]}]}],"thread_ts":"1617049706.305900","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"a16c2876-9a3d-4693-bbc2-dad2bb169477","type":"message","text":"yeah, it's not a real problem, I think the current behavior is fine, it was just super hard to uncover my mistake which was kind of unfortunate","user":"U9VG1AYSG","ts":"1617054688.308700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xaZo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, it's not a real problem, I think the current behavior is fine, it was just super hard to uncover my mistake which was kind of unfortunate"}]}]}],"thread_ts":"1617049706.305900","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"61ade232-e8e6-483f-9415-ea99c6e8f2d3","type":"message","text":"I suppose the only alternative would be to check what's going on during the `filter!` operation, but that seems like a really bad solution","user":"U9VG1AYSG","ts":"1617054726.308900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TRGQo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I suppose the only alternative would be to check what's going on during the "},{"type":"text","text":"filter!","style":{"code":true}},{"type":"text","text":" operation, but that seems like a really bad solution"}]}]}],"thread_ts":"1617049706.305900","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"e481da35-a7ba-431a-8523-8e66e16bfff5","type":"message","text":"Even if `filter!` did not error, we have a safeguard that checks data frame consistency before expensive operations, eg.:\n```julia&gt; df = DataFrame(a=1, b=2)\n1×2 DataFrame\n Row │ a      b     \n     │ Int64  Int64 \n─────┼──────────────\n   1 │     1      2\n\njulia&gt; push!(df.b, 10) # this breaks consistency of df\n2-element Vector{Int64}:\n  2\n 10\n\njulia&gt; df\nError showing value of type DataFrame:\nERROR: AssertionError: Data frame is corrupt: length of column :b (2) does not match length of column 1 (1). The column vector has likely been resized unintentionally (either directly or because it is shared with another data frame).```","user":"U8JAMQGQY","ts":"1617054915.309100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xh+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Even if "},{"type":"text","text":"filter!","style":{"code":true}},{"type":"text","text":" did not error, we have a safeguard that checks data frame consistency before expensive operations, eg.:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> df = DataFrame(a=1, b=2)\n1×2 DataFrame\n Row │ a      b     \n     │ Int64  Int64 \n─────┼──────────────\n   1 │     1      2\n\njulia> push!(df.b, 10) # this breaks consistency of df\n2-element Vector{Int64}:\n  2\n 10\n\njulia> df\nError showing value of type DataFrame:\nERROR: AssertionError: Data frame is corrupt: length of column :b (2) does not match length of column 1 (1). The column vector has likely been resized unintentionally (either directly or because it is shared with another data frame)."}]}]}],"thread_ts":"1617049706.305900","parent_user_id":"U9VG1AYSG","reactions":[{"name":"+1","users":["U9VG1AYSG"],"count":1}]},{"client_msg_id":"a3f5643f-109a-4be0-b8fa-9ed530b19e2d","type":"message","text":"Maybe we could have `filter` throw a more explicit error when `BoundsError` is thrown. AFAICT that can only happen when the data frame is corrupt, so we could check the size of the column and mention that problem.","user":"U67431ELR","ts":"1617094933.310600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"S3cg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe we could have "},{"type":"text","text":"filter","style":{"code":true}},{"type":"text","text":" throw a more explicit error when "},{"type":"text","text":"BoundsError","style":{"code":true}},{"type":"text","text":" is thrown. AFAICT that can only happen when the data frame is corrupt, so we could check the size of the column and mention that problem."}]}]}],"thread_ts":"1617049706.305900","parent_user_id":"U9VG1AYSG"},{"client_msg_id":"1af2b020-30e3-4e79-8a9a-cb4c081f3310","type":"message","text":"rather `delete!`, but yes :slightly_smiling_face:","user":"U8JAMQGQY","ts":"1617095242.310800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ovi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"rather "},{"type":"text","text":"delete!","style":{"code":true}},{"type":"text","text":", but yes "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1617049706.305900","parent_user_id":"U9VG1AYSG","reactions":[{"name":"+1","users":["U67431ELR"],"count":1}]},{"client_msg_id":"828a3ab8-7024-4657-a082-54557491a39c","type":"message","text":"<https://github.com/JuliaData/DataFrames.jl/pull/2690>","user":"U8JAMQGQY","ts":"1617095781.311000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RIFo","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaData/DataFrames.jl/pull/2690"}]}]}],"thread_ts":"1617049706.305900","parent_user_id":"U9VG1AYSG","reactions":[{"name":"rocket","users":["U67431ELR"],"count":1}]}]