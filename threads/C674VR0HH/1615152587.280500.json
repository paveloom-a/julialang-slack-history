[{"client_msg_id":"83fe2686-5883-4672-b876-6c68a421be70","type":"message","text":"I took part of a discussion of a common pattern the other day: for some struct, say `MyStruct`, you have a DataFrame constructor. Now you end up with a `Vector{MyStruct}` and you’d like to construct a single `DataFrame` with all of them on top of each other, i.e. something like `reduce(vcat, DataFrame.(x))` where `x` is the vector just mentioned. However, you’d like the *implicit* index in the `Vector{MyStruct}` to become a new column in the `DataFrame`. Is there a non-verbose way to do that? It seems to me that it could be generally useful.","user":"U680T6770","ts":"1615152587.280500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"08+oe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I took part of a discussion of a common pattern the other day: for some struct, say "},{"type":"text","text":"MyStruct","style":{"code":true}},{"type":"text","text":", you have a DataFrame constructor. Now you end up with a "},{"type":"text","text":"Vector{MyStruct}","style":{"code":true}},{"type":"text","text":" and you’d like to construct a single "},{"type":"text","text":"DataFrame","style":{"code":true}},{"type":"text","text":" with all of them on top of each other, i.e. something like "},{"type":"text","text":"reduce(vcat, DataFrame.(x))","style":{"code":true}},{"type":"text","text":" where "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" is the vector just mentioned. However, you’d like the "},{"type":"text","text":"implicit","style":{"bold":true}},{"type":"text","text":" index in the "},{"type":"text","text":"Vector{MyStruct}","style":{"code":true}},{"type":"text","text":" to become a new column in the "},{"type":"text","text":"DataFrame","style":{"code":true}},{"type":"text","text":". Is there a non-verbose way to do that? It seems to me that it could be generally useful."}]}]}],"thread_ts":"1615152587.280500","reply_count":8,"reply_users_count":4,"latest_reply":"1615306793.306600","reply_users":["UBF9YRB6H","U8JAMQGQY","U681ELA87","U680T6770"],"subscribed":false,"reactions":[{"name":"+1","users":["UCZ7VBGUD"],"count":1}]},{"client_msg_id":"5874b8e8-f943-4817-861e-4021bd516ee7","type":"message","text":"&gt; However, you’d like the implicit index in the Vector{MyStruct} to become a new column in the DataFrame. Is there a non-verbose way to do that? It seems to me that it could be generally useful.\nSorry I don't quite understand this last part. Could you clarify?","user":"UBF9YRB6H","ts":"1615156001.280700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hJLy","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"However, you’d like the implicit index in the Vector{MyStruct} to become a new column in the DataFrame. Is there a non-verbose way to do that? It seems to me that it could be generally useful."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nSorry I don't quite understand this last part. Could you clarify?"}]}]}],"thread_ts":"1615152587.280500","parent_user_id":"U680T6770"},{"client_msg_id":"5953be93-d080-45c9-939b-ea9b8add9d2a","type":"message","text":"This feature is up for grabs since 2014. <https://github.com/JuliaData/DataFrames.jl/issues/659>. Can people interested in it comment in this issue on the preferred API and I would implement it. I marked it 1.x but actually it would be nice to have it for 1.0 and it should be (relatively) easy to add.","user":"U8JAMQGQY","ts":"1615156453.280900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CYeU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This feature is up for grabs since 2014. "},{"type":"link","url":"https://github.com/JuliaData/DataFrames.jl/issues/659"},{"type":"text","text":". Can people interested in it comment in this issue on the preferred API and I would implement it. I marked it 1.x but actually it would be nice to have it for 1.0 and it should be (relatively) easy to add."}]}]}],"thread_ts":"1615152587.280500","parent_user_id":"U680T6770"},{"client_msg_id":"df55776d-03a3-4b79-8ab9-d221cf9fc7d4","type":"message","text":"Sounds like a job for DataFramesMeta","user":"UBF9YRB6H","ts":"1615156529.281100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Azxl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sounds like a job for DataFramesMeta"}]}]}],"thread_ts":"1615152587.280500","parent_user_id":"U680T6770"},{"client_msg_id":"38d54fff-9c4f-415f-845f-68d0a0e893e9","type":"message","text":"Here's the best I can do\n\n```julia&gt; df = DataFrame(id = 1:length(dfs));\n\njulia&gt; gd = groupby(df, :id);\n\njulia&gt; combine(gd) do sdf\n           dfs[first(sdf.id)]\n       end\n20×2 DataFrame\n Row │ id     a      \n     │ Int64  String \n─────┼───────────────\n   1 │     1  a1\n   2 │     1  b1\n   3 │     2  a2\n   4 │     2  b2\n   5 │     3  a3\n   6 │     3  b3\n   7 │     4  a4\n   8 │     4  b4\n   9 │     5  a5\n  10 │     5  b5\n  11 │     6  a6\n  12 │     6  b6\n  13 │     7  a7\n  14 │     7  b7\n  15 │     8  a8\n  16 │     8  b8\n  17 │     9  a9\n  18 │     9  b9\n  19 │    10  a10\n  20 │    10  b10```","user":"UBF9YRB6H","ts":"1615156770.281300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kX2l","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Here's the best I can do\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> df = DataFrame(id = 1:length(dfs));\n\njulia> gd = groupby(df, :id);\n\njulia> combine(gd) do sdf\n           dfs[first(sdf.id)]\n       end\n20×2 DataFrame\n Row │ id     a      \n     │ Int64  String \n─────┼───────────────\n   1 │     1  a1\n   2 │     1  b1\n   3 │     2  a2\n   4 │     2  b2\n   5 │     3  a3\n   6 │     3  b3\n   7 │     4  a4\n   8 │     4  b4\n   9 │     5  a5\n  10 │     5  b5\n  11 │     6  a6\n  12 │     6  b6\n  13 │     7  a7\n  14 │     7  b7\n  15 │     8  a8\n  16 │     8  b8\n  17 │     9  a9\n  18 │     9  b9\n  19 │    10  a10\n  20 │    10  b10"}]}]}],"thread_ts":"1615152587.280500","parent_user_id":"U680T6770"},{"client_msg_id":"9abca11f-d7c7-4e74-b63a-fb8f8a09e2a0","type":"message","text":"how about this:\n```julia&gt; struct Person\n              id::Int\n              name::String\n              wage::Float64\n              end\n\njulia&gt; input = [Person(1, \"Joe\", 3.14), Person(2, \"Mary\", 5.55)]\n2-element Vector{Person}:\n Person(1, \"Joe\", 3.14)\n Person(2, \"Mary\", 5.55)\n\njulia&gt; function withindex(input)\n       i = 0\n       TableOperations.map(input) do row\n           i += 1\n           return (i=i, id=row.id, name=row.name, wage=row.wage)\n       end\n       end\nwithindex (generic function with 1 method)\n\njulia&gt; df = DataFrame(withindex(input))\n2×4 DataFrame\n Row │ i      id     name    wage\n     │ Int64  Int64  String  Float64\n─────┼───────────────────────────────\n   1 │     1      1  Joe        3.14\n   2 │     2      2  Mary       5.55```","user":"U681ELA87","ts":"1615167625.281500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8Pjsx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"how about this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> struct Person\n              id::Int\n              name::String\n              wage::Float64\n              end\n\njulia> input = [Person(1, \"Joe\", 3.14), Person(2, \"Mary\", 5.55)]\n2-element Vector{Person}:\n Person(1, \"Joe\", 3.14)\n Person(2, \"Mary\", 5.55)\n\njulia> function withindex(input)\n       i = 0\n       TableOperations.map(input) do row\n           i += 1\n           return (i=i, id=row.id, name=row.name, wage=row.wage)\n       end\n       end\nwithindex (generic function with 1 method)\n\njulia> df = DataFrame(withindex(input))\n2×4 DataFrame\n Row │ i      id     name    wage\n     │ Int64  Int64  String  Float64\n─────┼───────────────────────────────\n   1 │     1      1  Joe        3.14\n   2 │     2      2  Mary       5.55"}]}]}],"thread_ts":"1615152587.280500","parent_user_id":"U680T6770","reactions":[{"name":"heart","users":["UBL1R2BE1"],"count":1}]},{"client_msg_id":"b64d64d3-04c6-4851-b47e-1c6917119aef","type":"message","text":"Thanks for the replies. <@U681ELA87> I might be dense here but doesn’t your solution only work for structs that return a single row?","user":"U680T6770","ts":"1615274766.297700","team":"T68168MUP","edited":{"user":"U680T6770","ts":"1615303000.000000"},"blocks":[{"type":"rich_text","block_id":"=1Rwa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks for the replies. "},{"type":"user","user_id":"U681ELA87"},{"type":"text","text":" I might be dense here but doesn’t your solution only work for structs that return a single row?"}]}]}],"thread_ts":"1615152587.280500","parent_user_id":"U680T6770"},{"client_msg_id":"c4507812-70a8-4050-aa94-d93e303d1dd6","type":"message","text":"I'm not sure I quite understand <@U680T6770>. But yes, I'm assuming that one `MyStruct` is a single \"row\". Can you explain what else you have in mind?","user":"U681ELA87","ts":"1615302766.298500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OFUXz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not sure I quite understand "},{"type":"user","user_id":"U680T6770"},{"type":"text","text":". But yes, I'm assuming that one "},{"type":"text","text":"MyStruct","style":{"code":true}},{"type":"text","text":" is a single \"row\". Can you explain what else you have in mind?"}]}]}],"thread_ts":"1615152587.280500","parent_user_id":"U680T6770"},{"client_msg_id":"ed81b47a-c352-4df6-90a5-0bfebedf18fa","type":"message","text":"In the case that motivated the discussion, each element of the vector becomes a dataframe of several individuals with, say `id=[1,2,3]` and then some other random columns so if I have, say two of these elements then I end up with `id=[1,2,3,1,2,3]` in the final dataframe and I’d like to have a simulation id as well that would be `simid=[1,1,1,2,2,2]`","user":"U680T6770","ts":"1615306793.306600","team":"T68168MUP","edited":{"user":"U680T6770","ts":"1615306859.000000"},"blocks":[{"type":"rich_text","block_id":"Bo7n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In the case that motivated the discussion, each element of the vector becomes a dataframe of several individuals with, say "},{"type":"text","text":"id=[1,2,3]","style":{"code":true}},{"type":"text","text":" and then some other random columns so if I have, say two of these elements then I end up with "},{"type":"text","text":"id=[1,2,3,1,2,3]","style":{"code":true}},{"type":"text","text":" in the final dataframe and I’d like to have a simulation id as well that would be "},{"type":"text","text":"simid=[1,1,1,2,2,2]","style":{"code":true}}]}]}],"thread_ts":"1615152587.280500","parent_user_id":"U680T6770"}]