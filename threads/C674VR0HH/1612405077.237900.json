[{"client_msg_id":"b0484c99-4baf-4110-86b4-6b940a3a38bb","type":"message","text":"Is it sensible to make a type that contains a dataframe and the column names/types specified? This could enable analysis and plotting functions based on that type.","user":"U017JTQFNEQ","ts":"1612405077.237900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yua","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is it sensible to make a type that contains a dataframe and the column names/types specified? This could enable analysis and plotting functions based on that type."}]}]}],"thread_ts":"1612405077.237900","reply_count":10,"reply_users_count":4,"latest_reply":"1612441583.242400","reply_users":["UBF9YRB6H","U017JTQFNEQ","U681ELA87","U6A936746"],"subscribed":false},{"client_msg_id":"f813a022-28ed-443e-a037-614a85d0b576","type":"message","text":"Probably not. If you want to do that just use a named tuple of vectors","user":"UBF9YRB6H","ts":"1612405698.238000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zEdrK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Probably not. If you want to do that just use a named tuple of vectors"}]}]}],"thread_ts":"1612405077.237900","parent_user_id":"U017JTQFNEQ"},{"client_msg_id":"b9c76a78-f194-434f-8cef-0d7611d1c504","type":"message","text":"If i want to be able to use the dataframe syntax on the type would i just inherit from tables?","user":"U017JTQFNEQ","ts":"1612405912.238200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R/Ss","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If i want to be able to use the dataframe syntax on the type would i just inherit from tables?"}]}]}],"thread_ts":"1612405077.237900","parent_user_id":"U017JTQFNEQ"},{"client_msg_id":"f51a56df-96a9-492c-a109-bf3c814199a3","type":"message","text":"or rather implement the `Tables`  interface","user":"U017JTQFNEQ","ts":"1612406305.238400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BEabE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or rather implement the "},{"type":"text","text":"Tables","style":{"code":true}},{"type":"text","text":"  interface"}]}]}],"thread_ts":"1612405077.237900","parent_user_id":"U017JTQFNEQ"},{"client_msg_id":"25a76002-d9e8-41a3-aac5-d330c2f8e43b","type":"message","text":"no, the dataframes syntax is only implemented for dataframes and it would be an enormours undertaking at the moment to try and make that syntax work for all `Table`s","user":"UBF9YRB6H","ts":"1612406563.238600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DR7a","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no, the dataframes syntax is only implemented for dataframes and it would be an enormours undertaking at the moment to try and make that syntax work for all `Table`s"}]}]}],"thread_ts":"1612405077.237900","parent_user_id":"U017JTQFNEQ"},{"client_msg_id":"18e195d4-0485-4ce6-a4b3-866d37fd548c","type":"message","text":"You can take a look at TableOperations.jl to see what kind of syntax is good for arbitrary Tables objects, though","user":"UBF9YRB6H","ts":"1612406599.238800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0g/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can take a look at TableOperations.jl to see what kind of syntax is good for arbitrary Tables objects, though"}]}]}],"thread_ts":"1612405077.237900","parent_user_id":"U017JTQFNEQ"},{"client_msg_id":"BBC0ACCF-0583-4AA0-87E0-E18C4759DC7A","type":"message","text":"If you were feeling ambitious, you could look at making a type stable struct that subtypes AbatractDataFrame. It’s been discussed before, but put off because the main dev efforts are getting regular DataFrame to 1.0","user":"U681ELA87","ts":"1612407274.241000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Cas","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you were feeling ambitious, you could look at making a type stable struct that subtypes AbatractDataFrame. It’s been discussed before, but put off because the main dev efforts are getting regular DataFrame to 1.0"}]}]}],"thread_ts":"1612405077.237900","parent_user_id":"U017JTQFNEQ","reactions":[{"name":"point_up","users":["U017JTQFNEQ"],"count":1}]},{"client_msg_id":"6e7bb995-5a2e-40fb-b4f6-470be847f520","type":"message","text":"That was my original plan","user":"U017JTQFNEQ","ts":"1612411800.241300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aup","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That was my original plan"}]}]}],"thread_ts":"1612405077.237900","parent_user_id":"U017JTQFNEQ"},{"client_msg_id":"3f5a6f0d-240a-4fa6-be28-85f6094020cd","type":"message","text":"After a little noodling around, i accept this is outside my current ability. It seems that using a similar architecture as RecipesBase we could achieve something like this.","user":"U017JTQFNEQ","ts":"1612413207.241900","team":"T68168MUP","edited":{"user":"U017JTQFNEQ","ts":"1612413240.000000"},"blocks":[{"type":"rich_text","block_id":"Mt3=n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"After a little noodling around, i accept this is outside my current ability. It seems that using a similar architecture as RecipesBase we could achieve something like this."}]}]}],"thread_ts":"1612405077.237900","parent_user_id":"U017JTQFNEQ"},{"client_msg_id":"31dfc94c-0566-4b8b-86cb-bcb7c46fd49e","type":"message","text":"I'd probably approach it by looking over the TypedTables.jl code and what it would take to define `Table` or `FlexTable` as `&lt;: AbstractDataFrame`. It has all the type-stable code pretty well fleshed out; what else would it need to satisfy the AbstractDataFrame interface?","user":"U681ELA87","ts":"1612419778.242200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rHoG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'd probably approach it by looking over the TypedTables.jl code and what it would take to define "},{"type":"text","text":"Table","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"FlexTable","style":{"code":true}},{"type":"text","text":" as "},{"type":"text","text":"<: AbstractDataFrame","style":{"code":true}},{"type":"text","text":". It has all the type-stable code pretty well fleshed out; what else would it need to satisfy the AbstractDataFrame interface?"}]}]}],"thread_ts":"1612405077.237900","parent_user_id":"U017JTQFNEQ"},{"client_msg_id":"fc4205c9-8dc0-4263-893d-d5e5b0c053ac","type":"message","text":"Speaking from experience:\nSubtyping AbstractDataFrames is hard and undocumented.\nAnd has only become harder.\nI do not recommend.\n\nWe're planning on getting rid of our packages that subtype AbstractDataFrames \nAnd instead having types that hold a DataFrame and extra data (like column names for KeyedFrames.jl) and don't try to subtype it.\nJust provide a way for the user to access the DataFrame behind manually.\n\nMight be cool to make them still be tables though.","user":"U6A936746","ts":"1612441583.242400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6q0Ge","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Speaking from experience:\nSubtyping AbstractDataFrames is hard and undocumented.\nAnd has only become harder.\nI do not recommend.\n\nWe're planning on getting rid of our packages that subtype AbstractDataFrames \nAnd instead having types that hold a DataFrame and extra data (like column names for KeyedFrames.jl) and don't try to subtype it.\nJust provide a way for the user to access the DataFrame behind manually.\n\nMight be cool to make them still be tables though."}]}]}],"thread_ts":"1612405077.237900","parent_user_id":"U017JTQFNEQ","reactions":[{"name":"+1","users":["UBF9YRB6H"],"count":1}]}]