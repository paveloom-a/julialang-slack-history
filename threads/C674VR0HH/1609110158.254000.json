[{"client_msg_id":"df3d2b9a-6b64-424f-bea3-bdf953360adb","type":"message","text":"Right now I have to do a hacky approach which is create a matrix with something like df=zeros(1,100) and then do df=DataFrame(df) and then df[1,:] = ... . In cases where for example someone wants to test 1 thing in an MLJ.jl deployed model it can be an issue","user":"U01EF0QVAB0","ts":"1609110158.254000","team":"T68168MUP","edited":{"user":"U01EF0QVAB0","ts":"1609110249.000000"},"blocks":[{"type":"rich_text","block_id":"lnlo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Right now I have to do a hacky approach which is create a matrix with something like df=zeros(1,100) and then do df=DataFrame(df) and then df[1,:] = ... . In cases where for example someone wants to test 1 thing in an MLJ.jl deployed model it can be an issue"}]}]}],"thread_ts":"1609110158.254000","reply_count":7,"reply_users_count":4,"latest_reply":"1609137098.256200","reply_users":["UH8A351DJ","U8JP5B9T2","U01EF0QVAB0","U8JAMQGQY"],"subscribed":false},{"client_msg_id":"25bb7cd6-be90-4af6-aa7b-e1e7fd8773be","type":"message","text":"```x = rand(5);\nDataFrame(x1=x)```","user":"UH8A351DJ","ts":"1609111385.254200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qYxb","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"x = rand(5);\nDataFrame(x1=x)"}]}]}],"thread_ts":"1609110158.254000","parent_user_id":"U01EF0QVAB0","reactions":[{"name":"heavy_check_mark","users":["UBF9YRB6H","U8JP5B9T2"],"count":2}]},{"client_msg_id":"204d0c1b-3374-4279-97d5-4d3ac688fec7","type":"message","text":"Do you mean you're indexing a row like `df[1, :]` and you want it to stay in a DataFrame instead of a `DataFrameRow`? If so, `df[[1], :]`","user":"U8JP5B9T2","ts":"1609124185.254800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NXB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Do you mean you're indexing a row like "},{"type":"text","text":"df[1, :]","style":{"code":true}},{"type":"text","text":" and you want it to stay in a DataFrame instead of a "},{"type":"text","text":"DataFrameRow","style":{"code":true}},{"type":"text","text":"? If so, "},{"type":"text","text":"df[[1], :]","style":{"code":true}}]}]}],"thread_ts":"1609110158.254000","parent_user_id":"U01EF0QVAB0"},{"client_msg_id":"64b5b0a0-8f7d-4107-9ccc-aa7ee8538fd9","type":"message","text":"Or if you have a vector and you want it in a 1 row DataFrame, you may need to reshape `DataFrame(reshape(my_vec, 1, length(my_vec)))`","user":"U8JP5B9T2","ts":"1609124361.255000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0eMu","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Or if you have a vector and you want it in a 1 row DataFrame, you may need to reshape "},{"type":"text","text":"DataFrame(reshape(my_vec, 1, length(my_vec)))","style":{"code":true}}]}]}],"thread_ts":"1609110158.254000","parent_user_id":"U01EF0QVAB0"},{"client_msg_id":"1503ea6f-7308-4301-a5c1-6642e3f3e6ac","type":"message","text":"I mean both things actually, thanks. Didn't realize I had to reshape it or explicitly do [1]","user":"U01EF0QVAB0","ts":"1609131585.255200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uGXX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I mean both things actually, thanks. Didn't realize I had to reshape it or explicitly do [1]"}]}]}],"thread_ts":"1609110158.254000","parent_user_id":"U01EF0QVAB0"},{"client_msg_id":"5627612d-d62e-4931-a763-d5cf6a4aa7f5","type":"message","text":"&gt; Is there any way to convert a 1D vector into a DataFrame in the latest DataFrames.jl?\nIt depends on the element type of the vector. If this vector is a Tables.jl table, then you will get it converted:\n```julia&gt; DataFrame([(a=1,b=2), (a=3, b=4)])\n2×2 DataFrame\n Row │ a      b\n     │ Int64  Int64\n─────┼──────────────\n   1 │     1      2\n   2 │     3      4```\notherwise - it will error. Tables.jl tries to create a table treating each entry of the vector as a row of a created table.\nIf you want to pass a vector \"as is\" do what <@UH8A351DJ> proposed or:\n```julia&gt; DataFrame([[1,2]], :auto)\n2×1 DataFrame\n Row │ x1\n     │ Int64\n─────┼───────\n   1 │     1\n   2 │     2 ```\n(i.e. wrap a vector in a vector, and either pass column names as a second argument or `:auto` for automatic naming of the columns)","user":"U8JAMQGQY","ts":"1609136737.255600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"e+Bjq","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"Is there any way to convert a 1D vector into a DataFrame in the latest DataFrames.jl?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"It depends on the element type of the vector. If this vector is a Tables.jl table, then you will get it converted:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> DataFrame([(a=1,b=2), (a=3, b=4)])\n2×2 DataFrame\n Row │ a      b\n     │ Int64  Int64\n─────┼──────────────\n   1 │     1      2\n   2 │     3      4"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"otherwise - it will error. Tables.jl tries to create a table treating each entry of the vector as a row of a created table.\nIf you want to pass a vector \"as is\" do what "},{"type":"user","user_id":"UH8A351DJ"},{"type":"text","text":" proposed or:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> DataFrame([[1,2]], :auto)\n2×1 DataFrame\n Row │ x1\n     │ Int64\n─────┼───────\n   1 │     1\n   2 │     2 "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"(i.e. wrap a vector in a vector, and either pass column names as a second argument or "},{"type":"text","text":":auto","style":{"code":true}},{"type":"text","text":" for automatic naming of the columns)"}]}]}],"thread_ts":"1609110158.254000","parent_user_id":"U01EF0QVAB0"},{"client_msg_id":"d71bc7e1-3747-4dbf-8ef9-f80442f36796","type":"message","text":"Regarding row selection - as <@U8JP5B9T2> suggested you need to pass a collection as a row-selector to keep your result a data frame. If you select a single row with an integer index you get a `DataFrameRow` which is 1-dimensional and can be converted to a `Vector` not `Matrix`. All this is consistent with how Julia Base works with matrices:\n```julia&gt; m = [1 2; 3 4]\n2×2 Array{Int64,2}:\n 1  2\n 3  4\n\njulia&gt; df = DataFrame(m, :auto)\n2×2 DataFrame\n Row │ x1     x2\n     │ Int64  Int64\n─────┼──────────────\n   1 │     1      2\n   2 │     3      4\n\njulia&gt; m[1, :]\n2-element Array{Int64,1}:\n 1\n 2\n\njulia&gt; df[1, :]\nDataFrameRow\n Row │ x1     x2\n     │ Int64  Int64\n─────┼──────────────\n   1 │     1      2\n\njulia&gt; Matrix(m[1, :])\nERROR: MethodError: no method matching Array{T,2} where T(::Array{Int64,1})\n\njulia&gt; Matrix(df[1, :])\nERROR: MethodError: no method matching Array{T,2} where T(::DataFrameRow{DataFrame,DataFrames.Index})\n\njulia&gt; Vector(df[1, :])\n2-element Array{Int64,1}:\n 1\n 2```\nIn summary: here just do exactly the same things you would do with a regular matrix in Julia Base and expect to get the same result.","user":"U8JAMQGQY","ts":"1609136956.255800","team":"T68168MUP","edited":{"user":"U8JAMQGQY","ts":"1609137031.000000"},"blocks":[{"type":"rich_text","block_id":"RpCB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Regarding row selection - as "},{"type":"user","user_id":"U8JP5B9T2"},{"type":"text","text":" suggested you need to pass a collection as a row-selector to keep your result a data frame. If you select a single row with an integer index you get a "},{"type":"text","text":"DataFrameRow","style":{"code":true}},{"type":"text","text":" which is 1-dimensional and can be converted to a "},{"type":"text","text":"Vector","style":{"code":true}},{"type":"text","text":" not "},{"type":"text","text":"Matrix","style":{"code":true}},{"type":"text","text":". All this is consistent with how Julia Base works with matrices:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> m = [1 2; 3 4]\n2×2 Array{Int64,2}:\n 1  2\n 3  4\n\njulia> df = DataFrame(m, :auto)\n2×2 DataFrame\n Row │ x1     x2\n     │ Int64  Int64\n─────┼──────────────\n   1 │     1      2\n   2 │     3      4\n\njulia> m[1, :]\n2-element Array{Int64,1}:\n 1\n 2\n\njulia> df[1, :]\nDataFrameRow\n Row │ x1     x2\n     │ Int64  Int64\n─────┼──────────────\n   1 │     1      2\n\njulia> Matrix(m[1, :])\nERROR: MethodError: no method matching Array{T,2} where T(::Array{Int64,1})\n\njulia> Matrix(df[1, :])\nERROR: MethodError: no method matching Array{T,2} where T(::DataFrameRow{DataFrame,DataFrames.Index})\n\njulia> Vector(df[1, :])\n2-element Array{Int64,1}:\n 1\n 2"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"In summary: here just do exactly the same things you would do with a regular matrix in Julia Base and expect to get the same result."}]}]}],"thread_ts":"1609110158.254000","parent_user_id":"U01EF0QVAB0"},{"client_msg_id":"1b69f12e-df87-4982-ac59-a426a247326b","type":"message","text":"Also, in particular - related to your first question, note that you cannot construct a `Matrix` from a `Vector` in Julia Base like this:\n```julia&gt; Matrix([1,2])\nERROR: MethodError: no method matching Array{T,2} where T(::Array{Int64,1})```\n","user":"U8JAMQGQY","ts":"1609137098.256200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L0aF4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, in particular - related to your first question, note that you cannot construct a "},{"type":"text","text":"Matrix","style":{"code":true}},{"type":"text","text":" from a "},{"type":"text","text":"Vector","style":{"code":true}},{"type":"text","text":" in Julia Base like this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Matrix([1,2])\nERROR: MethodError: no method matching Array{T,2} where T(::Array{Int64,1})"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1609110158.254000","parent_user_id":"U01EF0QVAB0"}]