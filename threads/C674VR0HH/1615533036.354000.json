[{"client_msg_id":"415d87ad-a821-4a20-b31d-0a05e35eaafd","type":"message","text":"Re DataFramesMeta’s @transform macro: is there a way to bind a ‘partially applied’ `@transform` to a name? i.e., the macro equivalent of `t = blah_blah -&gt; transform(df, blah_blah)` ? I basically don’t want to have to keep referencing the same df if I want to do a bunch of transforms consecutively","user":"US8V7JSKB","ts":"1615533036.354000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fWz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Re DataFramesMeta’s @transform macro: is there a way to bind a ‘partially applied’ "},{"type":"text","text":"@transform","style":{"code":true}},{"type":"text","text":" to a name? i.e., the macro equivalent of "},{"type":"text","text":"t = blah_blah -> transform(df, blah_blah)","style":{"code":true}},{"type":"text","text":" ? I basically don’t want to have to keep referencing the same df if I want to do a bunch of transforms consecutively"}]}]}],"thread_ts":"1615533036.354000","reply_count":8,"reply_users_count":2,"latest_reply":"1615536193.357800","reply_users":["UK1BNFHFV","US8V7JSKB"],"subscribed":false},{"client_msg_id":"444361BA-874B-4959-9FB6-09AFD0E4309E","type":"message","text":"Sounds like piping, maybe chain.jl? <https://github.com/jkrumbiegel/Chain.jl|https://github.com/jkrumbiegel/Chain.jl> I'm not sure if anonymous functions are practical as you pay more compilation time and would have to define them for select groupby etc as well ","user":"UK1BNFHFV","ts":"1615534164.356100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lBqXj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sounds like piping, maybe chain.jl? "},{"type":"link","url":"https://github.com/jkrumbiegel/Chain.jl","text":"https://github.com/jkrumbiegel/Chain.jl"},{"type":"text","text":" I'm not sure if anonymous functions are practical as you pay more compilation time and would have to define them for select groupby etc as well "}]}]}],"thread_ts":"1615533036.354000","parent_user_id":"US8V7JSKB"},{"client_msg_id":"f99c62a7-d64f-4691-8ecc-35853d2fd135","type":"message","text":"ah good point, yes, this (or underscores.jl) seems like a much better way to do it. Thanks!","user":"US8V7JSKB","ts":"1615534459.356300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7hV=N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah good point, yes, this (or underscores.jl) seems like a much better way to do it. Thanks!"}]}]}],"thread_ts":"1615533036.354000","parent_user_id":"US8V7JSKB"},{"client_msg_id":"81278cfe-c4c5-434b-9694-20ec7bfc3d06","type":"message","text":"Also <@UK1BNFHFV>, just from a quick glance, it looks like the main difference between Chain.jl and  Underscores.jl is that Chain.jl would allow us to avoid having to do `|&gt;` over and over again. is that correct? Or are there other advantages that I’ve missed?","user":"US8V7JSKB","ts":"1615534668.356700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KJTv=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also "},{"type":"user","user_id":"UK1BNFHFV"},{"type":"text","text":", just from a quick glance, it looks like the main difference between Chain.jl and  Underscores.jl is that Chain.jl would allow us to avoid having to do "},{"type":"text","text":"|>","style":{"code":true}},{"type":"text","text":" over and over again. is that correct? Or are there other advantages that I’ve missed?"}]}]}],"thread_ts":"1615533036.354000","parent_user_id":"US8V7JSKB"},{"client_msg_id":"eb5ef7e4-cd6d-4c39-8929-a275820f0318","type":"message","text":"and yeah I second doing away with `begin … end` :slightly_smiling_face:","user":"US8V7JSKB","ts":"1615534893.356900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iQfta","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and yeah I second doing away with "},{"type":"text","text":"begin … end","style":{"code":true}},{"type":"text","text":" "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1615533036.354000","parent_user_id":"US8V7JSKB"},{"client_msg_id":"8dd33354-6b02-41dd-b6a5-9f339813aa1b","type":"message","text":"I don't think underscores has the implicit first argument insertion, so you have to do `transform(_, ...)` and in Chain..jl `transform(...)`","user":"UK1BNFHFV","ts":"1615535865.357100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j=p6N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't think underscores has the implicit first argument insertion, so you have to do "},{"type":"text","text":"transform(_, ...)","style":{"code":true}},{"type":"text","text":" and in Chain..jl "},{"type":"text","text":"transform(...)","style":{"code":true}}]}]}],"thread_ts":"1615533036.354000","parent_user_id":"US8V7JSKB"},{"client_msg_id":"4e345b31-a7d8-43aa-9e6a-346a35068b3a","type":"message","text":"as most functions you chain need the \"main\" argument in first position, that makes for slightly cleaner code","user":"UK1BNFHFV","ts":"1615535899.357300","team":"T68168MUP","edited":{"user":"UK1BNFHFV","ts":"1615536112.000000"},"blocks":[{"type":"rich_text","block_id":"s+k","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"as most functions you chain need the \"main\" argument in first position, that makes for slightly cleaner code"}]}]}],"thread_ts":"1615533036.354000","parent_user_id":"US8V7JSKB"},{"client_msg_id":"3eab3dc6-47bf-416e-8828-957b302151f9","type":"message","text":"also apart from typing |&gt; those things are functions being applied, so the stack trace can be a bit less clear, where Chain.jl just rewrites your lines into normal code with temporary variables","user":"UK1BNFHFV","ts":"1615535975.357500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cwNA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"also apart from typing |> those things are functions being applied, so the stack trace can be a bit less clear, where Chain.jl just rewrites your lines into normal code with temporary variables"}]}]}],"thread_ts":"1615533036.354000","parent_user_id":"US8V7JSKB"},{"client_msg_id":"0e12bc83-3015-4e51-8ff3-497f01b358b7","type":"message","text":"ah, the stack trace thing does sound helpful. though I like how easy it is to define anonymous functions with underscores.jl (e.g. when passing an anon function to the transform function)","user":"US8V7JSKB","ts":"1615536193.357800","team":"T68168MUP","edited":{"user":"US8V7JSKB","ts":"1615536738.000000"},"blocks":[{"type":"rich_text","block_id":"tA0W","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah, the stack trace thing does sound helpful. though I like how easy it is to define anonymous functions with underscores.jl (e.g. when passing an anon function to the transform function)"}]}]}],"thread_ts":"1615533036.354000","parent_user_id":"US8V7JSKB"}]