[{"client_msg_id":"508a0373-dc67-4ea6-89bc-c7bf8f74a015","type":"message","text":"I have been thinking of how the evaluation of some of the quantities in the iteratively reweighted least squares (IRLS) algorithm for fitting glm's in the GLM package can be accelerated.  One of the tasks in every iteration is, starting from the linear predictor vector, evaluate the mean vector, the derivative of the mean w.r.t the lin. pred., etc. until you have the working weights and the working residuals, which are used in a weighted least squares calculation.  The `GlmResp` struct contains several vectors of the same length that are used in these calculations.  All of this was formulated long before Tables.jl, fused broadcasting, etc. came on the scene and it seems reasonable that using some of the new technologies there could be gains in speed.\n\nSo, starting with something like a column table (where all the columns are of the same floating point type) we want to evaluate and store several quantities in each row from other values in the same row.  Is there anything to be gained by a `Tables.rows` iterator or are those values immutable?  I have the feeling that there should be some aspects of the Tables package that can be used here but I haven't quite worked it out.","user":"UBGRZ7FSP","ts":"1613428111.429100","team":"T68168MUP","edited":{"user":"UBGRZ7FSP","ts":"1613428162.000000"},"blocks":[{"type":"rich_text","block_id":"q6Sn6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have been thinking of how the evaluation of some of the quantities in the iteratively reweighted least squares (IRLS) algorithm for fitting glm's in the GLM package can be accelerated.  One of the tasks in every iteration is, starting from the linear predictor vector, evaluate the mean vector, the derivative of the mean w.r.t the lin. pred., etc. until you have the working weights and the working residuals, which are used in a weighted least squares calculation.  The "},{"type":"text","text":"GlmResp","style":{"code":true}},{"type":"text","text":" struct contains several vectors of the same length that are used in these calculations.  All of this was formulated long before Tables.jl, fused broadcasting, etc. came on the scene and it seems reasonable that using some of the new technologies there could be gains in speed.\n\nSo, starting with something like a column table (where all the columns are of the same floating point type) we want to evaluate and store several quantities in each row from other values in the same row.  Is there anything to be gained by a "},{"type":"text","text":"Tables.rows","style":{"code":true}},{"type":"text","text":" iterator or are those values immutable?  I have the feeling that there should be some aspects of the Tables package that can be used here but I haven't quite worked it out."}]}]}],"thread_ts":"1613428111.429100","reply_count":1,"reply_users_count":1,"latest_reply":"1613488394.443200","reply_users":["UBF9YRB6H"],"subscribed":false},{"client_msg_id":"ab8c91d2-b287-4b93-af9b-93a6001346c4","type":"message","text":"Are you saying that having everything be a `Matrix` might not be faster than, say, a `Vector{NamedTuple}`?\n\niirc `Tables.rows` makes no guarantee about immutability. But `Tables.rowtable` does cause it creates a vector of named tuples","user":"UBF9YRB6H","ts":"1613488394.443200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VvFib","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Are you saying that having everything be a "},{"type":"text","text":"Matrix","style":{"code":true}},{"type":"text","text":" might not be faster than, say, a "},{"type":"text","text":"Vector{NamedTuple}","style":{"code":true}},{"type":"text","text":"?\n\niirc "},{"type":"text","text":"Tables.rows","style":{"code":true}},{"type":"text","text":" makes no guarantee about immutability. But "},{"type":"text","text":"Tables.rowtable","style":{"code":true}},{"type":"text","text":" does cause it creates a vector of named tuples"}]}]}],"thread_ts":"1613428111.429100","parent_user_id":"UBGRZ7FSP"}]