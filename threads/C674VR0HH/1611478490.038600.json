[{"client_msg_id":"7609aeec-c740-405c-b435-459a46696e0b","type":"message","text":"Happy Sunday y’all! I’m interested in implementing the C Data Interface for Apache Arrow, which should allow us to reuse pyarrow’s memory in Julia in a zero-copy way. I’ve translated the <https://arrow.apache.org/docs/format/CDataInterface.html|Structure Definitions> to Julia using Clang.jl, but I’m not sure where to go from here. Does anyone have ideas?","user":"U01GXNFKY6R","ts":"1611478490.038600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ao5ly","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Happy Sunday y’all! I’m interested in implementing the C Data Interface for Apache Arrow, which should allow us to reuse pyarrow’s memory in Julia in a zero-copy way. I’ve translated the "},{"type":"link","url":"https://arrow.apache.org/docs/format/CDataInterface.html","text":"Structure Definitions"},{"type":"text","text":" to Julia using Clang.jl, but I’m not sure where to go from here. Does anyone have ideas?"}]}]}],"thread_ts":"1611478490.038600","reply_count":5,"reply_users_count":3,"latest_reply":"1611863606.111900","reply_users":["U6A936746","U01GXNFKY6R","U681ELA87"],"subscribed":false},{"client_msg_id":"548aeb77-885c-44f6-8d31-952fc54f1c91","type":"message","text":"Arrow.jl exists and is an official part of the Arrow project.\nIt does that","user":"U6A936746","ts":"1611482300.038700","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1611482321.000000"},"blocks":[{"type":"rich_text","block_id":"a4AX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Arrow.jl exists and is an official part of the Arrow project.\nIt does that"}]}]}],"thread_ts":"1611478490.038600","parent_user_id":"U01GXNFKY6R"},{"client_msg_id":"3828ba6b-fd7e-4e27-8b99-63dff35aece4","type":"message","text":"The README for Arrow.jl states that it doesn’t support the C data interface <https://github.com/JuliaData/Arrow.jl>","user":"U01GXNFKY6R","ts":"1611567038.049700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BSlOd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The README for Arrow.jl states that it doesn’t support the C data interface "},{"type":"link","url":"https://github.com/JuliaData/Arrow.jl"}]}]}],"thread_ts":"1611478490.038600","parent_user_id":"U01GXNFKY6R","reactions":[{"name":"ok_hand","users":["U6A936746"],"count":1},{"name":"white_check_mark","users":["U01JRKTSL2U"],"count":1}]},{"client_msg_id":"5ca31b75-f05c-44c2-8193-8199a319f6db","type":"message","text":"That's correct; Arrow.jl is a pure julia implementation for working with arrow-formatted memory. It doesn't wrap the C data interface library. It does, however, allow for zero-copy usage of arrow data. If a pointer to arrow memory can be shared between python/C++/julia, Arrow.jl allows working/reading the data without copying. An alternative to pointer sharing would be using the file interface (i.e. writing arrow file from other language, reading in Julia).","user":"U681ELA87","ts":"1611862346.111300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HN2W3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's correct; Arrow.jl is a pure julia implementation for working with arrow-formatted memory. It doesn't wrap the C data interface library. It does, however, allow for zero-copy usage of arrow data. If a pointer to arrow memory can be shared between python/C++/julia, Arrow.jl allows working/reading the data without copying. An alternative to pointer sharing would be using the file interface (i.e. writing arrow file from other language, reading in Julia)."}]}]}],"thread_ts":"1611478490.038600","parent_user_id":"U01GXNFKY6R","reactions":[{"name":"+1","users":["U6A936746"],"count":1}]},{"client_msg_id":"8aee7649-8908-4638-9d27-70d3d12fb430","type":"message","text":"&gt;  using the file interface\nAnd writing/readying to `/dev/shm` or some other RAM disk?","user":"U6A936746","ts":"1611863165.111600","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1611863176.000000"},"blocks":[{"type":"rich_text","block_id":"lLCk","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":" using the file interface"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nAnd writing/readying to "},{"type":"text","text":"/dev/shm","style":{"code":true}},{"type":"text","text":" or some other RAM disk?"}]}]}],"thread_ts":"1611478490.038600","parent_user_id":"U01GXNFKY6R"},{"client_msg_id":"5ebc0088-75d7-40d1-91b4-98bdf2a66847","type":"message","text":"Yep; that should work fine","user":"U681ELA87","ts":"1611863606.111900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1dI6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yep; that should work fine"}]}]}],"thread_ts":"1611478490.038600","parent_user_id":"U01GXNFKY6R"}]