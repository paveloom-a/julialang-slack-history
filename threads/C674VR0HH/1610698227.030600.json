[{"client_msg_id":"76b1900a-c3ad-4bd9-a963-1b27cf37b2e4","type":"message","text":"Guten Morgen <#C674VR0HH|data>, does this snippet emit SIMD code? Is there a way for me to verify this?\n```concatenated_col = Vector{String}(undef, df_length)\n@threads for i in 1:df_length\n    @inbounds concatenated_col[i] = @inbounds df.input[i] * @inbounds df.target[i]\nend```\nside note: I have no idea what I’m doing with @inbounds. Is this overkill or are all three instances necessary?","user":"U01GXNFKY6R","ts":"1610698227.030600","team":"T68168MUP","edited":{"user":"U01GXNFKY6R","ts":"1610698276.000000"},"blocks":[{"type":"rich_text","block_id":"r19","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Guten Morgen "},{"type":"channel","channel_id":"C674VR0HH"},{"type":"text","text":", does this snippet emit SIMD code? Is there a way for me to verify this?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"concatenated_col = Vector{String}(undef, df_length)\n@threads for i in 1:df_length\n    @inbounds concatenated_col[i] = @inbounds df.input[i] * @inbounds df.target[i]\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"side note: I have no idea what I’m doing with @inbounds. Is this overkill or are all three instances necessary?"}]}]}],"thread_ts":"1610698227.030600","reply_count":7,"reply_users_count":3,"latest_reply":"1610699924.032400","reply_users":["U8JAMQGQY","U01GXNFKY6R","U67431ELR"],"subscribed":false},{"client_msg_id":"8cd8b36f-53df-45c8-81d9-d13d95c54082","type":"message","text":"assuming `df` is a `DataFrame` then no as `DataFrame` is not type stable. You would have to use barrier function.","user":"U8JAMQGQY","ts":"1610698642.030800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"w0/X","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"assuming "},{"type":"text","text":"df","style":{"code":true}},{"type":"text","text":" is a "},{"type":"text","text":"DataFrame","style":{"code":true}},{"type":"text","text":" then no as "},{"type":"text","text":"DataFrame","style":{"code":true}},{"type":"text","text":" is not type stable. You would have to use barrier function."}]}]}],"thread_ts":"1610698227.030600","parent_user_id":"U01GXNFKY6R"},{"client_msg_id":"5dba3494-5b49-4a72-8224-8e28e63c4d8d","type":"message","text":"Interesting, what is a barrier function and how can I learn more about them?","user":"U01GXNFKY6R","ts":"1610698812.031000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fBtwK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Interesting, what is a barrier function and how can I learn more about them?"}]}]}],"thread_ts":"1610698227.030600","parent_user_id":"U01GXNFKY6R"},{"client_msg_id":"b1a5343f-d319-41c8-8194-8976c4c393aa","type":"message","text":"According to <https://docs.julialang.org/en/v1/manual/performance-tips/#kernel-functions|this doc>, it looks like just breaking it out into its own function with defined types. Thanks <@U8JAMQGQY>!","user":"U01GXNFKY6R","ts":"1610698987.031200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6ZzDo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"According to "},{"type":"link","url":"https://docs.julialang.org/en/v1/manual/performance-tips/#kernel-functions","text":"this doc"},{"type":"text","text":", it looks like just breaking it out into its own function with defined types. Thanks "},{"type":"user","user_id":"U8JAMQGQY"},{"type":"text","text":"!"}]}]}],"thread_ts":"1610698227.030600","parent_user_id":"U01GXNFKY6R"},{"client_msg_id":"15cd528f-a7d7-4889-9fa6-7f43d6b9b262","type":"message","text":"Or in that particular case, do `concatenated_col .= df.input .* df.target` . Using `transform` or `select` with `ByRow` is also a possibility.","user":"U67431ELR","ts":"1610699251.031400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GQ9Wc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Or in that particular case, do "},{"type":"text","text":"concatenated_col .= df.input .* df.target","style":{"code":true}},{"type":"text","text":" . Using "},{"type":"text","text":"transform","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"select","style":{"code":true}},{"type":"text","text":" with "},{"type":"text","text":"ByRow","style":{"code":true}},{"type":"text","text":" is also a possibility."}]}]}],"thread_ts":"1610698227.030600","parent_user_id":"U01GXNFKY6R"},{"client_msg_id":"c4c584f7-d795-437f-875b-272f9d7749f9","type":"message","text":"Sure, but I understood Samay wanted to use loop. Then do this:\n```function fun(input, target)\n    @assert length(input) == length(target)\n    concatenated_col = Vector{String}(undef, df_length)\n    @inbounds @threads for i in 1:length(input)\n        concatenated_col[i] = input[i] * target[i]\n    end\n    return concatenated_col\nend\n\nfun(df.input, df.target)```\nNote that it will not use SIMD (as you are concatenating strings), but threads will be used (as opposed to what <@U67431ELR> proposed which is single threaded)","user":"U8JAMQGQY","ts":"1610699335.031600","team":"T68168MUP","edited":{"user":"U8JAMQGQY","ts":"1610699403.000000"},"blocks":[{"type":"rich_text","block_id":"0elL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sure, but I understood Samay wanted to use loop. Then do this:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function fun(input, target)\n    @assert length(input) == length(target)\n    concatenated_col = Vector{String}(undef, df_length)\n    @inbounds @threads for i in 1:length(input)\n        concatenated_col[i] = input[i] * target[i]\n    end\n    return concatenated_col\nend\n\nfun(df.input, df.target)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Note that it will not use SIMD (as you are concatenating strings), but threads will be used (as opposed to what "},{"type":"user","user_id":"U67431ELR"},{"type":"text","text":" proposed which is single threaded)"}]}]}],"thread_ts":"1610698227.030600","parent_user_id":"U01GXNFKY6R","reactions":[{"name":"+1","users":["U67431ELR","U01GXNFKY6R"],"count":2}]},{"client_msg_id":"473842eb-d62e-4a9d-be6d-a6ec818ae79f","type":"message","text":"Cool, I see that one can just put `@inbounds` at the top of a loop instead. That’s good to know as well :slightly_smiling_face:","user":"U01GXNFKY6R","ts":"1610699726.032200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hM2=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Cool, I see that one can just put "},{"type":"text","text":"@inbounds","style":{"code":true}},{"type":"text","text":" at the top of a loop instead. That’s good to know as well "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1610698227.030600","parent_user_id":"U01GXNFKY6R"},{"client_msg_id":"41de1833-265a-4548-95b6-e7f5e8f91b2e","type":"message","text":"<@U8JAMQGQY> this is super fast, thanks!","user":"U01GXNFKY6R","ts":"1610699924.032400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eqbWD","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U8JAMQGQY"},{"type":"text","text":" this is super fast, thanks!"}]}]}],"thread_ts":"1610698227.030600","parent_user_id":"U01GXNFKY6R"}]