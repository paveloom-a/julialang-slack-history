[{"client_msg_id":"0a0f6268-6e87-4e28-a5e9-0501bcd3b2a3","type":"message","text":"is there any way to tell Parquet.jl to read a column as a `DateTime` ?","user":"UDXST8ARK","ts":"1614100796.020400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hTsg/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is there any way to tell Parquet.jl to read a column as a "},{"type":"text","text":"DateTime","style":{"code":true}},{"type":"text","text":" ?"}]}]}],"thread_ts":"1614100796.020400","reply_count":2,"reply_users_count":1,"latest_reply":"1614104115.020900","reply_users":["UDXST8ARK"],"subscribed":false},{"client_msg_id":"6ee20224-0b7e-4b19-a7c7-59f89db24bc5","type":"message","text":"`read_parquet` reads it as an `Int64`\nwhereas Python Pandas `pd.read_parquet` correctly reads it as a datetime","user":"UDXST8ARK","ts":"1614100835.020500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WZtIb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"read_parquet","style":{"code":true}},{"type":"text","text":" reads it as an "},{"type":"text","text":"Int64","style":{"code":true}},{"type":"text","text":"\nwhereas Python Pandas "},{"type":"text","text":"pd.read_parquet","style":{"code":true}},{"type":"text","text":" correctly reads it as a datetime"}]}]}],"thread_ts":"1614100796.020400","parent_user_id":"UDXST8ARK"},{"client_msg_id":"63f2c02f-c3df-47d7-927b-59b3961070ab","type":"message","text":"`Parquet.schema` says this coolumn is `INT64` “from `TIMESTAMP_MICROS`”… which i’m not sure what that means\n```julia&gt; pq_file = Parquet.File(f1);\n\njulia&gt; schema(pq_file)\nSchema:\n    required schema {\n      optional INT64 datetime_utc # (from TIMESTAMP_MICROS)\n      ...\n      ...\n    }```\ni’ve tried to use the `map_logical_types` keyword, for example\n```julia&gt; mapping = Dict([\"datetime_utc\"] =&gt; (DateTime, Parquet.logical_timestamp));\n\njulia&gt; tbl = read_parquet(f1; map_logical_types=mapping)\nERROR: unsupported storage type 2 for DateTime```","user":"UDXST8ARK","ts":"1614104115.020900","team":"T68168MUP","edited":{"user":"UDXST8ARK","ts":"1614104132.000000"},"blocks":[{"type":"rich_text","block_id":"p0=o2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Parquet.schema","style":{"code":true}},{"type":"text","text":" says this coolumn is "},{"type":"text","text":"INT64","style":{"code":true}},{"type":"text","text":" “from "},{"type":"text","text":"TIMESTAMP_MICROS","style":{"code":true}},{"type":"text","text":"”… which i’m not sure what that means\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> pq_file = Parquet.File(f1);\n\njulia> schema(pq_file)\nSchema:\n    required schema {\n      optional INT64 datetime_utc # (from TIMESTAMP_MICROS)\n      ...\n      ...\n    }"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"i’ve tried to use the "},{"type":"text","text":"map_logical_types","style":{"code":true}},{"type":"text","text":" keyword, for example\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> mapping = Dict([\"datetime_utc\"] => (DateTime, Parquet.logical_timestamp));\n\njulia> tbl = read_parquet(f1; map_logical_types=mapping)\nERROR: unsupported storage type 2 for DateTime"}]}]}],"thread_ts":"1614100796.020400","parent_user_id":"UDXST8ARK"}]