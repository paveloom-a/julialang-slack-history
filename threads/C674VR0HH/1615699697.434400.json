[{"client_msg_id":"aa72022e-cc0c-400b-a690-e9a6d5ca564a","type":"message","text":"<https://www.ritchievink.com/blog/2021/02/28/i-wrote-one-of-the-fastest-dataframe-libraries/>","user":"UDGT4PM41","ts":"1615699697.434400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FGe","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://www.ritchievink.com/blog/2021/02/28/i-wrote-one-of-the-fastest-dataframe-libraries/"}]}]}],"thread_ts":"1615699697.434400","reply_count":2,"reply_users_count":2,"latest_reply":"1615708452.434900","reply_users":["UBF9YRB6H","U8JAMQGQY"],"subscribed":false},{"client_msg_id":"825ab950-f164-411d-a259-18d23d53ceed","type":"message","text":"Just a note, a lot of the slowdown in Julia's DataFrames will be fixed with a few things that are in the pipeline:\n\nFaster `groupby`:\n     <https://github.com/JuliaData/DataFrames.jl/pull/2610>\n     <https://github.com/JuliaData/DataFrames.jl/pull/2592> (maybe not as relevant)\n\nMultithreading\n    <https://github.com/JuliaData/DataFrames.jl/pull/2588>\n    <https://github.com/JuliaData/DataFrames.jl/pull/2491>\n    <https://github.com/JuliaData/DataFrames.jl/pull/2647>\n\nThe multi-threading ones will be the most relevant with those 50GB tests, when the cost of new threads is negligible compared to the rest of the operation.","user":"UBF9YRB6H","ts":"1615700380.434500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ieSsG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Just a note, a lot of the slowdown in Julia's DataFrames will be fixed with a few things that are in the pipeline:\n\nFaster "},{"type":"text","text":"groupby","style":{"code":true}},{"type":"text","text":":\n     "},{"type":"link","url":"https://github.com/JuliaData/DataFrames.jl/pull/2610"},{"type":"text","text":"\n     "},{"type":"link","url":"https://github.com/JuliaData/DataFrames.jl/pull/2592"},{"type":"text","text":" (maybe not as relevant)\n\nMultithreading\n    "},{"type":"link","url":"https://github.com/JuliaData/DataFrames.jl/pull/2588"},{"type":"text","text":"\n    "},{"type":"link","url":"https://github.com/JuliaData/DataFrames.jl/pull/2491"},{"type":"text","text":"\n    "},{"type":"link","url":"https://github.com/JuliaData/DataFrames.jl/pull/2647"},{"type":"text","text":"\n\nThe multi-threading ones will be the most relevant with those 50GB tests, when the cost of new threads is negligible compared to the rest of the operation."}]}]}],"thread_ts":"1615699697.434400","parent_user_id":"UDGT4PM41"},{"client_msg_id":"52f79360-34af-4ac5-a0c3-5ad38c9d91b3","type":"message","text":"The only major piece we are missing is multithreaded `AbstractDict`. We could use the approach of Polars, where items are distributed over multiple dicts based on remainder of hash. This would also allow for a deeper pool sharing in PooledArrays.jl. <@UC7AF7NSU> do you have experience/comments on such data structure?","user":"U8JAMQGQY","ts":"1615708452.434900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Kgg9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The only major piece we are missing is multithreaded "},{"type":"text","text":"AbstractDict","style":{"code":true}},{"type":"text","text":". We could use the approach of Polars, where items are distributed over multiple dicts based on remainder of hash. This would also allow for a deeper pool sharing in PooledArrays.jl. "},{"type":"user","user_id":"UC7AF7NSU"},{"type":"text","text":" do you have experience/comments on such data structure?"}]}]}],"thread_ts":"1615699697.434400","parent_user_id":"UDGT4PM41"}]