[{"client_msg_id":"f3c06b75-8b68-4798-b674-99e98bd19dc7","type":"message","text":"```julia&gt; r = Dict(\"a\" =&gt; 10, \"b\" =&gt; Dict(\"c\" =&gt; nothing, \"d\" =&gt; \"hello\"), \"e\" =&gt; missing)\nDict{String, Any} with 3 entries:\n  \"e\" =&gt; missing\n  \"b\" =&gt; Dict{String, Union{Nothing, String}}(\"c\"=&gt;nothing, \"d\"=&gt;\"hello\")\n  \"a\" =&gt; 10\n\njulia&gt; JSON3.write(r)\n\"{\\\"e\\\":null,\\\"b\\\":{\\\"c\\\":null,\\\"d\\\":\\\"hello\\\"},\\\"a\\\":10}\"```\nis there an option so that if the the value is nothing it's not written?","user":"U6CF3AA5Q","ts":"1618165392.487100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"li2j","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> r = Dict(\"a\" => 10, \"b\" => Dict(\"c\" => nothing, \"d\" => \"hello\"), \"e\" => missing)\nDict{String, Any} with 3 entries:\n  \"e\" => missing\n  \"b\" => Dict{String, Union{Nothing, String}}(\"c\"=>nothing, \"d\"=>\"hello\")\n  \"a\" => 10\n\njulia> JSON3.write(r)\n\"{\\\"e\\\":null,\\\"b\\\":{\\\"c\\\":null,\\\"d\\\":\\\"hello\\\"},\\\"a\\\":10}\""}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nis there an option so that if the the value is nothing it's not written?"}]}]}],"thread_ts":"1618165392.487100","reply_count":2,"reply_users_count":2,"latest_reply":"1618169088.490500","reply_users":["U6CF3AA5Q","UCZ7VBGUD"],"is_locked":false,"subscribed":false},{"client_msg_id":"12e44485-953f-4534-a112-a638c05be9de","type":"message","text":"so in this example \"c\" wouldn't appear in the written output","user":"U6CF3AA5Q","ts":"1618165427.487400","team":"T68168MUP","edited":{"user":"U6CF3AA5Q","ts":"1618165431.000000"},"blocks":[{"type":"rich_text","block_id":"QG2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so in this example \"c\" wouldn't appear in the written output"}]}]}],"thread_ts":"1618165392.487100","parent_user_id":"U6CF3AA5Q"},{"client_msg_id":"1dd7fb5f-7dc2-4b5c-98bc-d0afc15cd814","type":"message","text":"you can use `omitempties` I think; quoting form the docs:\n&gt; `StructTypes.omitempties(::Type{MyType}) = (:field1, :field2)`: specify fields of `MyType` that shouldn’t be written if they are “empty”, provided as a `Tuple` of `Symbol`s. This only affects writing. If a field is a collection (AbstractDict, AbstractArray, etc.) and `isempty(x) === true`, then it will not be written. If a field is `#undef`, it will not be written. If a field is `nothing`, it will not be written.\n<https://quinnj.github.io/JSON3.jl/dev/#Struct-API>","user":"UCZ7VBGUD","ts":"1618169088.490500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L2y","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can use "},{"type":"text","text":"omitempties","style":{"code":true}},{"type":"text","text":" I think; quoting form the docs:\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"StructTypes.omitempties(::Type{MyType}) = (:field1, :field2)","style":{"code":true}},{"type":"text","text":": specify fields of "},{"type":"text","text":"MyType","style":{"code":true}},{"type":"text","text":" that shouldn’t be written if they are “empty”, provided as a "},{"type":"text","text":"Tuple","style":{"code":true}},{"type":"text","text":" of "},{"type":"text","text":"Symbol","style":{"code":true}},{"type":"text","text":"s. This only affects writing. If a field is a collection (AbstractDict, AbstractArray, etc.) and "},{"type":"text","text":"isempty(x) === true","style":{"code":true}},{"type":"text","text":", then it will not be written. If a field is "},{"type":"text","text":"#undef","style":{"code":true}},{"type":"text","text":", it will not be written. If a field is "},{"type":"text","text":"nothing","style":{"code":true}},{"type":"text","text":", it will not be written."}]},{"type":"rich_text_section","elements":[{"type":"link","url":"https://quinnj.github.io/JSON3.jl/dev/#Struct-API"}]}]}],"thread_ts":"1618165392.487100","parent_user_id":"U6CF3AA5Q"}]