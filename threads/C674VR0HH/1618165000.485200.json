[{"client_msg_id":"0ed422b5-b71d-4d39-b9f7-c36a37e86e9e","type":"message","text":"What is the simplest way to read in a csv.? Shouldn't it just be CSV.read(\"myfile.csv\")?","user":"U67G3QRJM","ts":"1618165000.485200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"YxDP5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What is the simplest way to read in a csv.? Shouldn't it just be CSV.read(\"myfile.csv\")?"}]}]}],"thread_ts":"1618165000.485200","reply_count":16,"reply_users_count":5,"latest_reply":"1618175136.494000","reply_users":["U6A936746","U67G3QRJM","UBF9YRB6H","U8JAMQGQY","U681ELA87"],"is_locked":false,"subscribed":false},{"client_msg_id":"57cdfbda-c9f2-49c7-a47f-c08725d35889","type":"message","text":"`CSV.File(\"myfile.csv\")`\n(It is a constructor)","user":"U6A936746","ts":"1618165244.485300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ugfMC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"CSV.File(\"myfile.csv\")","style":{"code":true}},{"type":"text","text":"\n(It is a constructor)"}]}]}],"thread_ts":"1618165000.485200","parent_user_id":"U67G3QRJM"},{"client_msg_id":"407828f3-3065-41be-a800-b13e74186592","type":"message","text":"That seems weird","user":"U67G3QRJM","ts":"1618165333.485500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/OoAM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That seems weird"}]}]}],"thread_ts":"1618165000.485200","parent_user_id":"U67G3QRJM"},{"client_msg_id":"4db42c38-3330-455a-b5d9-f7d90e42ab37","type":"message","text":"It's not clear from those words thst I'm reading the file in","user":"U67G3QRJM","ts":"1618165354.486000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GTo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's not clear from those words thst I'm reading the file in"}]}]}],"thread_ts":"1618165000.485200","parent_user_id":"U67G3QRJM"},{"client_msg_id":"2d3bf0e6-ea81-4272-8c4d-da750c90a061","type":"message","text":"you can do `CSV.read(DataFrame, \"myfile.csv\")` (Or maybe the other way around)","user":"UBF9YRB6H","ts":"1618165377.486600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5sws","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you can do "},{"type":"text","text":"CSV.read(DataFrame, \"myfile.csv\")","style":{"code":true}},{"type":"text","text":" (Or maybe the other way around)"}]}]}],"thread_ts":"1618165000.485200","parent_user_id":"U67G3QRJM"},{"client_msg_id":"30f2adb6-4959-4e2d-b130-d178d65140a1","type":"message","text":"the reason it's weird is because it's not obvious what the output type should be. CSV doesn't want to depend on DataFrames so it has to have its own \"bare-bones\" table type.","user":"UBF9YRB6H","ts":"1618165413.487200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pobu=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the reason it's weird is because it's not obvious what the output type should be. CSV doesn't want to depend on DataFrames so it has to have its own \"bare-bones\" table type."}]}]}],"thread_ts":"1618165000.485200","parent_user_id":"U67G3QRJM"},{"client_msg_id":"43108a83-6a15-45bb-88cd-769318211c43","type":"message","text":"`CSV.File` returns the CSV.File typed object, which is a kind of Table.\nIt's a perfectly good table type.\nFor many uses I use it without going to a DataFrame.","user":"U6A936746","ts":"1618165486.487700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ULO4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"`CSV.File` returns the CSV.File typed object, which is a kind of Table.\nIt's a perfectly good table type.\nFor many uses I use it without going to a DataFrame."}]}]}],"thread_ts":"1618165000.485200","parent_user_id":"U67G3QRJM","reactions":[{"name":"+1","users":["UBF9YRB6H","UDXST8ARK","U67G3QRJM"],"count":3}]},{"client_msg_id":"f774149e-f0c7-43ef-9bb3-7b0e8707b0a8","type":"message","text":"Was there a discussion about `CSV.read(filename)=CSV.File(filename)` ?\n\nThat used to give a DataFrame.\nBut it's been a while since it did that do maybe we the method can be considered open again","user":"U6A936746","ts":"1618165577.488000","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1618165629.000000"},"blocks":[{"type":"rich_text","block_id":"dzPd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Was there a discussion about "},{"type":"text","text":"CSV.read(filename)=CSV.File(filename) ","style":{"code":true}},{"type":"text","text":"?\n\nThat used to give a DataFrame.\nBut it's been a while since it did that do maybe we the method can be considered open again"}]}]}],"thread_ts":"1618165000.485200","parent_user_id":"U67G3QRJM"},{"client_msg_id":"b45fe2e0-04c7-44e7-9a17-2c24d0e79bfb","type":"message","text":"I don't recall a discussion. Probably too breaking since people will expect that to be a DataFrame after it being a DataFrame for so long. I like the explicitness of `DataFrame` in the first argument.\n\nI would imagine most users of CSV don't really understand that there are non-DataFrame tables.","user":"UBF9YRB6H","ts":"1618165745.488400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"azjP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't recall a discussion. Probably too breaking since people will expect that to be a DataFrame after it being a DataFrame for so long. I like the explicitness of "},{"type":"text","text":"DataFrame","style":{"code":true}},{"type":"text","text":" in the first argument.\n\nI would imagine most users of CSV don't really understand that there are non-DataFrame tables."}]}]}],"thread_ts":"1618165000.485200","parent_user_id":"U67G3QRJM"},{"client_msg_id":"ae6780e2-7382-4887-a04c-6cae395fcc05","type":"message","text":"`DataFrame` is the second argument","user":"U8JAMQGQY","ts":"1618165885.488600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FR8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"DataFrame","style":{"code":true}},{"type":"text","text":" is the second argument"}]}]}],"thread_ts":"1618165000.485200","parent_user_id":"U67G3QRJM","reactions":[{"name":"heavy_check_mark","users":["UBF9YRB6H","U6A936746","U01QBF4PHKP"],"count":3}]},{"client_msg_id":"18b4f63c-b505-4283-ad81-2f69d0b80daf","type":"message","text":"It doesn't seem to work to do Matrix instead of Dataframe","user":"U67G3QRJM","ts":"1618168019.489100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yFK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It doesn't seem to work to do Matrix instead of Dataframe"}]}]}],"thread_ts":"1618165000.485200","parent_user_id":"U67G3QRJM"},{"client_msg_id":"0e126d05-6a3e-4133-ac25-dc85d11ba143","type":"message","text":"What are the non dataframe tables?","user":"U67G3QRJM","ts":"1618168026.489300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4RmJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What are the non dataframe tables?"}]}]}],"thread_ts":"1618165000.485200","parent_user_id":"U67G3QRJM"},{"client_msg_id":"4c0e6e4d-ed65-4964-9564-45c727bda2ac","type":"message","text":"I'm also struggling to find an easy to read tutorial about CSV","user":"U67G3QRJM","ts":"1618168056.489500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VX70e","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm also struggling to find an easy to read tutorial about CSV"}]}]}],"thread_ts":"1618165000.485200","parent_user_id":"U67G3QRJM"},{"client_msg_id":"017e5477-312d-4c6b-8080-1cfb9779c8d6","type":"message","text":"IndexedTables, TypedTables and DataFrames are the main general purpose table types.\nAs well as NamedTuple of Vectors and Vectors of NamedTuples.\n\nStructArrays and AxisKeys' KeyArrays are also tables.\n\nIdk which work as second argument to `CSV.read` though. Ideally I guess all of them. But I am not sure if they all can be constructed by passing a table to their constructor (e.g I know AxisKeys expects a narrow table passed to `wrapdims`, idk what it's constructor accepts nor what it should)","user":"U6A936746","ts":"1618168794.489900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GAqE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"IndexedTables, TypedTables and DataFrames are the main general purpose table types.\nAs well as NamedTuple of Vectors and Vectors of NamedTuples.\n\nStructArrays and AxisKeys' KeyArrays are also tables.\n\nIdk which work as second argument to "},{"type":"text","text":"CSV.read","style":{"code":true}},{"type":"text","text":" though. Ideally I guess all of them. But I am not sure if they all can be constructed by passing a table to their constructor (e.g I know AxisKeys expects a narrow table passed to "},{"type":"text","text":"wrapdims","style":{"code":true}},{"type":"text","text":", idk what it's constructor accepts nor what it should)"}]}]}],"thread_ts":"1618165000.485200","parent_user_id":"U67G3QRJM"},{"client_msg_id":"48073e16-60c8-468a-aa31-54a62d2af22c","type":"message","text":"Is your data narrow or wide?\nGiven you wanted to convert to a matrix straight from file, I guess wide?","user":"U6A936746","ts":"1618168848.490100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IKc2o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is your data narrow or wide?\nGiven you wanted to convert to a matrix straight from file, I guess wide?"}]}]}],"thread_ts":"1618165000.485200","parent_user_id":"U67G3QRJM"},{"client_msg_id":"84e11cbe-4c99-40ab-b753-3fc96f202a1c","type":"message","text":"I suspect you want `Tables.matrix(CSV.File(\"myfile.csv\"))`\n<https://tables.juliadata.org/stable/#Using-the-Interface-(i.e.-consuming-Tables.jl-compatible-sources)-1|https://tables.juliadata.org/stable/#Using-the-Interface-(i.e.-consuming-Tables.jl-compatible-sources)-1>","user":"U6A936746","ts":"1618168989.490300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DZb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I suspect you want "},{"type":"text","text":"Tables.matrix(CSV.File(\"myfile.csv\"))","style":{"code":true}},{"type":"text","text":"\n"},{"type":"link","url":"https://tables.juliadata.org/stable/#Using-the-Interface-(i.e.-consuming-Tables.jl-compatible-sources)-1","text":"https://tables.juliadata.org/stable/#Using-the-Interface-(i.e.-consuming-Tables.jl-compatible-sources)-1"}]}]}],"thread_ts":"1618165000.485200","parent_user_id":"U67G3QRJM","reactions":[{"name":"+1","users":["UBF9YRB6H","U681ELA87"],"count":2}]},{"client_msg_id":"d1d79530-e7b0-454a-9d54-c8ddf7f37b8c","type":"message","text":"Yes, Tables.jl provides the `Tables.matrix` function to convert any compatible Tables.jl source into a `Matrix`. With `CSV.read`, you could also do `CSV.read(file, Tables.matrix)`. Tables.jl doesn't treat regular `Matrix` as a valid \"table\" because it lacks proper column names, but it provides the `Tables.matrix` and `Tables.table` functions for converting to/from. <@U67G3QRJM>, you're right that we could use a better \"walk through\" for the CSV.jl docs since we currently mainly have a long list of example usages.","user":"U681ELA87","ts":"1618175136.494000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pQU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, Tables.jl provides the "},{"type":"text","text":"Tables.matrix","style":{"code":true}},{"type":"text","text":" function to convert any compatible Tables.jl source into a "},{"type":"text","text":"Matrix","style":{"code":true}},{"type":"text","text":". With "},{"type":"text","text":"CSV.read","style":{"code":true}},{"type":"text","text":", you could also do "},{"type":"text","text":"CSV.read(file, Tables.matrix)","style":{"code":true}},{"type":"text","text":". Tables.jl doesn't treat regular "},{"type":"text","text":"Matrix","style":{"code":true}},{"type":"text","text":" as a valid \"table\" because it lacks proper column names, but it provides the "},{"type":"text","text":"Tables.matrix","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"Tables.table","style":{"code":true}},{"type":"text","text":" functions for converting to/from. "},{"type":"user","user_id":"U67G3QRJM"},{"type":"text","text":", you're right that we could use a better \"walk through\" for the CSV.jl docs since we currently mainly have a long list of example usages."}]}]}],"thread_ts":"1618165000.485200","parent_user_id":"U67G3QRJM"}]