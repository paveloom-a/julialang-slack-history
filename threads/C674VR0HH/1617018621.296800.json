[{"client_msg_id":"0B86897B-7DE4-4ACE-BFF4-3444F93538AC","type":"message","text":"Haven’t gotten an answer over on discourse, so thought I’d see if anyone here has any thoughts on using JSONTable to turn a json with multiple nesting levels into a dataframe (sample code in the post): <https://discourse.julialang.org/t/parsing-nested-json-into-dataframe-using-jsontable/58127|https://discourse.julialang.org/t/parsing-nested-json-into-dataframe-using-jsontable/58127>","user":"U01399SPFT5","ts":"1617018621.296800","team":"T68168MUP","attachments":[{"service_name":"JuliaLang","title":"Parsing Nested JSON into DataFrame using JSONTable","title_link":"https://discourse.julialang.org/t/parsing-nested-json-into-dataframe-using-jsontable/58127","text":"I’m trying to parse academic publication data from Open Academic Graph, which stores the data in JSON format, but am running into an issue with parsing the below sample JSON they provide on the website because it is nested. I’m fairly new to working with JSON and could use some help. Any tips for how to parse it? using JSONTables, DataFrames, CSV, JSON3 js_string = \"{ \\\"id\\\":\\\"53e9ab9eb7602d970354a97e\\\", \\\"title\\\":\\\"Data mining: concepts and techniques\\\", \\\"authors\\\":[ { ...","fallback":"JuliaLang: Parsing Nested JSON into DataFrame using JSONTable","thumb_url":"https://aws1.discourse-cdn.com/business5/uploads/julialang/original/2X/1/12829a7ba92b924d4ce81099cbf99785bee9b405.png","ts":1616953539,"from_url":"https://discourse.julialang.org/t/parsing-nested-json-into-dataframe-using-jsontable/58127","thumb_width":408,"thumb_height":263,"service_icon":"https://aws1.discourse-cdn.com/business5/uploads/julialang/optimized/2X/6/6ca888e296f59ca2a599807f7d5edd489e3d1829_2_180x180.png","id":1,"original_url":"https://discourse.julialang.org/t/parsing-nested-json-into-dataframe-using-jsontable/58127"}],"blocks":[{"type":"rich_text","block_id":"1dT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Haven’t gotten an answer over on discourse, so thought I’d see if anyone here has any thoughts on using JSONTable to turn a json with multiple nesting levels into a dataframe (sample code in the post): "},{"type":"link","url":"https://discourse.julialang.org/t/parsing-nested-json-into-dataframe-using-jsontable/58127","text":"https://discourse.julialang.org/t/parsing-nested-json-into-dataframe-using-jsontable/58127"}]}]}],"thread_ts":"1617018621.296800","reply_count":7,"reply_users_count":2,"latest_reply":"1617123078.312600","reply_users":["U681ELA87","U01399SPFT5"],"is_locked":false,"subscribed":false},{"client_msg_id":"7153c7b1-0d11-4daf-aff4-9434491dd5ae","type":"message","text":"I can take a look more fully later, but you could checkout Strapping.jl. It allows \"flattening\" or \"normalizing\" JSON3.Objects. So you'd do something like `df = DataFrame(Strapping.deconstruct(JSON3.read(json)))`","user":"U681ELA87","ts":"1617024370.297400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ayx5q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I can take a look more fully later, but you could checkout Strapping.jl. It allows \"flattening\" or \"normalizing\" JSON3.Objects. So you'd do something like "},{"type":"text","text":"df = DataFrame(Strapping.deconstruct(JSON3.read(json)))","style":{"code":true}}]}]}],"thread_ts":"1617018621.296800","parent_user_id":"U01399SPFT5"},{"client_msg_id":"05088792-3AA0-4B28-85C6-30031A16A9BF","type":"message","text":"Ooo okay awesome - will try. Thanks","user":"U01399SPFT5","ts":"1617058821.309700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Iutz7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ooo okay awesome - will try. Thanks"}]}]}],"thread_ts":"1617018621.296800","parent_user_id":"U01399SPFT5"},{"client_msg_id":"a25c16eb-bec7-461b-ad25-9271bd9c84f0","type":"message","text":"Hmm so I got this back: multiple StructTypes.ArrayType objects detected during Strapping.deconstruct; only one is allowed for determining repeated deconstructed rows; see StructTypes.excludes(T) = (:nm,) for excluding fields from deconstructing consideration","user":"U01399SPFT5","ts":"1617121106.311400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"D8m","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmm so I got this back: multiple StructTypes.ArrayType objects detected during Strapping.deconstruct; only one is allowed for determining repeated deconstructed rows; see StructTypes.excludes(T) = (:nm,) for excluding fields from deconstructing consideration"}]}]}],"thread_ts":"1617018621.296800","parent_user_id":"U01399SPFT5"},{"client_msg_id":"c7606f2a-3d54-4307-a221-e12d570dc816","type":"message","text":"The error is accurate; if you have multiple array fields in your json object, it’s not clear how the object should be turned into a table. Do you have in mind what the resulting DataFrame should look like? If you do, then maybe we can adjust things so it works.","user":"U681ELA87","ts":"1617121568.311600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tvlk/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The error is accurate; if you have multiple array fields in your json object, it’s not clear how the object should be turned into a table. Do you have in mind what the resulting DataFrame should look like? If you do, then maybe we can adjust things so it works."}]}]}],"thread_ts":"1617018621.296800","parent_user_id":"U01399SPFT5"},{"client_msg_id":"30ca0e7f-da5a-4c90-9b93-c7113d15e0b9","type":"message","text":"yeah that makes sense - my ideal dataset would have these columns\n\n`id | title | author1 | author2 | ... | authorN | year | keyword1 | keyword2 | ... | keywordN | fos1 | fos2 | ... | fosN | n_citation | references1 | references2 | ... | referencesN | doc_type | lang | publisher | isbn | doi | pdf | url1 | url2 | ... | urlN | abstract`","user":"U01399SPFT5","ts":"1617122577.312200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4n7r","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah that makes sense - my ideal dataset would have these columns\n\n"},{"type":"text","text":"id | title | author1 | author2 | ... | authorN | year | keyword1 | keyword2 | ... | keywordN | fos1 | fos2 | ... | fosN | n_citation | references1 | references2 | ... | referencesN | doc_type | lang | publisher | isbn | doi | pdf | url1 | url2 | ... | urlN | abstract","style":{"code":true}}]}]}],"thread_ts":"1617018621.296800","parent_user_id":"U01399SPFT5"},{"client_msg_id":"70599e45-b2dc-4b97-a0ea-67d4446875f6","type":"message","text":"alternatively I would be find with the 1, 2, ..., N columns to be just one column with the stub as the name, and then I can work on splitting those columns into separate columns later on a separating character","user":"U01399SPFT5","ts":"1617122661.312400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"37x","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"alternatively I would be find with the 1, 2, ..., N columns to be just one column with the stub as the name, and then I can work on splitting those columns into separate columns later on a separating character"}]}]}],"thread_ts":"1617018621.296800","parent_user_id":"U01399SPFT5"},{"client_msg_id":"9e51471c-4b9f-463c-925c-fbae0115ca12","type":"message","text":"kk, in that case, you could probably just do `df = DataFrame([js])` (from your original code example), which gives you a 1x16 DataFrame, then you could split the columns manually","user":"U681ELA87","ts":"1617123078.312600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Quk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"kk, in that case, you could probably just do "},{"type":"text","text":"df = DataFrame([js])","style":{"code":true}},{"type":"text","text":" (from your original code example), which gives you a 1x16 DataFrame, then you could split the columns manually"}]}]}],"thread_ts":"1617018621.296800","parent_user_id":"U01399SPFT5"}]