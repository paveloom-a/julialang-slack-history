[{"client_msg_id":"a29cbaad-09ab-4571-b70e-062e59119a0f","type":"message","text":"If I define a type, which is a generator of tables (`NamedTuple` of vectors), do I have to do / can I do anything other than define `Tables.partitions(x::MyGenerator) = x` ?","user":"U01ECBX4MB7","ts":"1608056601.156200","team":"T68168MUP","edited":{"user":"U01ECBX4MB7","ts":"1608056927.000000"},"blocks":[{"type":"rich_text","block_id":"uT31Z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If I define a type, which is a generator of tables ("},{"type":"text","text":"NamedTuple","style":{"code":true}},{"type":"text","text":" of vectors), do I have to do / can I do anything other than define "},{"type":"text","text":"Tables.partitions(x::MyGenerator) = x","style":{"code":true}},{"type":"text","text":" ?"}]}]}],"thread_ts":"1608056601.156200","reply_count":8,"reply_users_count":2,"latest_reply":"1608058871.159400","reply_users":["U681ELA87","U01ECBX4MB7"],"subscribed":false},{"client_msg_id":"3f4538f7-0ba1-4716-855c-04a14b186c27","type":"message","text":"That should be enough! Now we just need more sinks to support partitions!","user":"U681ELA87","ts":"1608056994.156500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Yd/iW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That should be enough! Now we just need more sinks to support partitions!"}]}]}],"thread_ts":"1608056601.156200","parent_user_id":"U01ECBX4MB7"},{"client_msg_id":"f9e06aa8-5b89-4ae0-951e-bea42f1db77a","type":"message","text":"Thanks! Why don’t you make a fallback? Like `Iterators.flatten`, but for tables?","user":"U01ECBX4MB7","ts":"1608057056.156700","team":"T68168MUP","edited":{"user":"U01ECBX4MB7","ts":"1608057135.000000"},"blocks":[{"type":"rich_text","block_id":"t3GIK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks! Why don’t you make a fallback? Like "},{"type":"text","text":"Iterators.flatten","style":{"code":true}},{"type":"text","text":", but for tables?"}]}]}],"thread_ts":"1608056601.156200","parent_user_id":"U01ECBX4MB7"},{"client_msg_id":"4bb21e1c-111c-458c-b4e9-ca095bbd186f","type":"message","text":"For row tables you could literally use `Iterators.flatten` on a lazy map of `Tables.rows`  on the iterator of tables.","user":"U01ECBX4MB7","ts":"1608057308.157000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LDy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For row tables you could literally use "},{"type":"text","text":"Iterators.flatten","style":{"code":true}},{"type":"text","text":" on a lazy map of "},{"type":"text","text":"Tables.rows","style":{"code":true}},{"type":"text","text":"  on the iterator of tables."}]}]}],"thread_ts":"1608056601.156200","parent_user_id":"U01ECBX4MB7"},{"client_msg_id":"c4b79dc7-b4d1-45bd-8705-91c0f217fb68","type":"message","text":"Not sure how to handle column tables :thinking_face:","user":"U01ECBX4MB7","ts":"1608057354.157200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9BEz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not sure how to handle column tables "},{"type":"emoji","name":"thinking_face"}]}]}],"thread_ts":"1608056601.156200","parent_user_id":"U01ECBX4MB7"},{"client_msg_id":"97fa3baa-f41a-4783-bc81-05694124fc01","type":"message","text":"So, if you do `Tables.rows(x)` and `x` is a table, everything works like before. If not, it will check to see if the `eltype` of x is a table and it’ll make a flattened table for you. Then people wouldn’t have to make custom sinks anymore (at least for row tables)","user":"U01ECBX4MB7","ts":"1608057614.158500","team":"T68168MUP","edited":{"user":"U01ECBX4MB7","ts":"1608057630.000000"},"blocks":[{"type":"rich_text","block_id":"aqH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So, if you do "},{"type":"text","text":"Tables.rows(x)","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" is a table, everything works like before. If not, it will check to see if the "},{"type":"text","text":"eltype","style":{"code":true}},{"type":"text","text":" of x is a table and it’ll make a flattened table for you. Then people wouldn’t have to make custom sinks anymore (at least for row tables)"}]}]}],"thread_ts":"1608056601.156200","parent_user_id":"U01ECBX4MB7"},{"client_msg_id":"9e6f47e8-18b2-47bd-a3ce-38c2d5739356","type":"message","text":"Well, the default definition is `Tables.partitions(x) = (x,)`, which means any sink _could_ just switch to `partitions` and it wouldn't break for existing use-cases/users. It's just a matter of getting sinks to use it and know what to do with partitions","user":"U681ELA87","ts":"1608057742.158800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2toHp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well, the default definition is "},{"type":"text","text":"Tables.partitions(x) = (x,)","style":{"code":true}},{"type":"text","text":", which means any sink "},{"type":"text","text":"could","style":{"italic":true}},{"type":"text","text":" just switch to "},{"type":"text","text":"partitions","style":{"code":true}},{"type":"text","text":" and it wouldn't break for existing use-cases/users. It's just a matter of getting sinks to use it and know what to do with partitions"}]}]}],"thread_ts":"1608056601.156200","parent_user_id":"U01ECBX4MB7"},{"client_msg_id":"70cd6ba6-83cc-47fa-9993-4da1bf1360e8","type":"message","text":"In TableOperations.jl, we have `joinpartitions` which basically does what you're suggesting: <https://github.com/JuliaData/TableOperations.jl/blob/3753d84f3c7df0685431cc046b05703517010d58/src/TableOperations.jl#L272>","user":"U681ELA87","ts":"1608057784.159000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ovgH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"In TableOperations.jl, we have "},{"type":"text","text":"joinpartitions","style":{"code":true}},{"type":"text","text":" which basically does what you're suggesting: "},{"type":"link","url":"https://github.com/JuliaData/TableOperations.jl/blob/3753d84f3c7df0685431cc046b05703517010d58/src/TableOperations.jl#L272"}]}]}],"thread_ts":"1608056601.156200","parent_user_id":"U01ECBX4MB7"},{"client_msg_id":"5beb9a89-90e5-483b-a5bf-70eeab2a3616","type":"message","text":"cool, so you have a nice way to deal with column tables. Why not put that in Tables.jl? When would someone give an iterator of tables to a tables sink and be surprised when it got treated like one big table?","user":"U01ECBX4MB7","ts":"1608058871.159400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"o8Z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"cool, so you have a nice way to deal with column tables. Why not put that in Tables.jl? When would someone give an iterator of tables to a tables sink and be surprised when it got treated like one big table?"}]}]}],"thread_ts":"1608056601.156200","parent_user_id":"U01ECBX4MB7"}]