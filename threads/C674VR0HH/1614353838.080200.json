[{"client_msg_id":"7ae01a07-5b8b-43a9-bb8a-de3764acb6e3","type":"message","text":"in DataFrames, why don’t `select` and `transform` “see” previously created columns within the same command? e.g.\n```julia&gt; using DataFrames\n\njulia&gt; df = DataFrame((;a = rand(10), b = rand(10)))\n10×2 DataFrame\n Row │ a           b\n     │ Float64     Float64\n─────┼────────────────────────\n   1 │ 0.73957     0.747759\n   2 │ 0.888763    0.317682\n   3 │ 0.138173    0.92976\n   4 │ 0.015185    0.752267\n   5 │ 0.434004    0.767345\n   6 │ 0.699355    0.566346\n   7 │ 0.0603922   0.264627\n   8 │ 0.702297    0.00609892\n   9 │ 0.854265    0.762492\n  10 │ 0.00221184  0.826804\n\njulia&gt; transform(df, [:a, :b] =&gt; ByRow(+) =&gt; :c, :c =&gt; ByRow(x -&gt; x^2) =&gt; :d)\nERROR: ArgumentError: column name :c not found in the data frame; existing most similar names are: :a and :b\nStacktrace:\n  [1] lookupname\n    @ ~/.julia/packages/DataFrames/oQ5c7/src/other/index.jl:291 [inlined]\n  [2] getindex\n    @ ~/.julia/packages/DataFrames/oQ5c7/src/other/index.jl:297 [inlined]\n  [3] normalize_selection(idx::DataFrames.Index, sel::Pair{Symbol, Pair{ByRow{var\"#1#2\"}, Symbol}}, renamecols::Bool)\n    @ DataFrames ~/.julia/packages/DataFrames/oQ5c7/src/abstractdataframe/selection.jl:214\n  [4] (::DataFrames.var\"#395#396\"{Bool, DataFrame})(c::Pair{Symbol, Pair{ByRow{var\"#1#2\"}, Symbol}})\n    @ DataFrames ./none:0\n  [5] iterate\n    @ ./generator.jl:47 [inlined]\n  [6] collect_to!(dest::Vector{Any}, itr::Base.Generator{Vector{Any}, DataFrames.var\"#395#396\"{Bool, DataFrame}}, offs::Int64, st::Int64)\n    @ Base ./array.jl:724\n  [7] collect_to!(dest::Vector{Base.OneTo{Int64}}, itr::Base.Generator{Vector{Any}, DataFrames.var\"#395#396\"{Bool, DataFrame}}, offs::Int64, st::Int64)\n    @ Base ./array.jl:732\n  [8] collect_to_with_first!(dest::Vector{Base.OneTo{Int64}}, v1::Base.OneTo{Int64}, itr::Base.Generator{Vector{Any}, DataFrames.var\"#395#396\"{Bool, DataFrame}}, st::Int64)\n    @ Base ./array.jl:702\n  [9] collect(itr::Base.Generator{Vector{Any}, DataFrames.var\"#395#396\"{Bool, DataFrame}})\n    @ Base ./array.jl:683\n [10] manipulate(::DataFrame, ::Any, ::Vararg{Any, N} where N; copycols::Bool, keeprows::Bool, renamecols::Bool)\n    @ DataFrames ~/.julia/packages/DataFrames/oQ5c7/src/abstractdataframe/selection.jl:1209\n [11] #select#384\n    @ ~/.julia/packages/DataFrames/oQ5c7/src/abstractdataframe/selection.jl:847 [inlined]\n [12] #transform#386\n    @ ~/.julia/packages/DataFrames/oQ5c7/src/abstractdataframe/selection.jl:913 [inlined]\n [13] transform(::DataFrame, ::Any, ::Any)\n    @ DataFrames ~/.julia/packages/DataFrames/oQ5c7/src/abstractdataframe/selection.jl:913\n [14] top-level scope\n    @ REPL[14]:1```\nI looked around but didn’t see an issue. I figure there must be a reason, but I don’t see what it is.","user":"UCZ7VBGUD","ts":"1614353838.080200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"n0M","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in DataFrames, why don’t "},{"type":"text","text":"select","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"transform","style":{"code":true}},{"type":"text","text":" “see” previously created columns within the same command? e.g.\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using DataFrames\n\njulia> df = DataFrame((;a = rand(10), b = rand(10)))\n10×2 DataFrame\n Row │ a           b\n     │ Float64     Float64\n─────┼────────────────────────\n   1 │ 0.73957     0.747759\n   2 │ 0.888763    0.317682\n   3 │ 0.138173    0.92976\n   4 │ 0.015185    0.752267\n   5 │ 0.434004    0.767345\n   6 │ 0.699355    0.566346\n   7 │ 0.0603922   0.264627\n   8 │ 0.702297    0.00609892\n   9 │ 0.854265    0.762492\n  10 │ 0.00221184  0.826804\n\njulia> transform(df, [:a, :b] => ByRow(+) => :c, :c => ByRow(x -> x^2) => :d)\nERROR: ArgumentError: column name :c not found in the data frame; existing most similar names are: :a and :b\nStacktrace:\n  [1] lookupname\n    @ ~/.julia/packages/DataFrames/oQ5c7/src/other/index.jl:291 [inlined]\n  [2] getindex\n    @ ~/.julia/packages/DataFrames/oQ5c7/src/other/index.jl:297 [inlined]\n  [3] normalize_selection(idx::DataFrames.Index, sel::Pair{Symbol, Pair{ByRow{var\"#1#2\"}, Symbol}}, renamecols::Bool)\n    @ DataFrames ~/.julia/packages/DataFrames/oQ5c7/src/abstractdataframe/selection.jl:214\n  [4] (::DataFrames.var\"#395#396\"{Bool, DataFrame})(c::Pair{Symbol, Pair{ByRow{var\"#1#2\"}, Symbol}})\n    @ DataFrames ./none:0\n  [5] iterate\n    @ ./generator.jl:47 [inlined]\n  [6] collect_to!(dest::Vector{Any}, itr::Base.Generator{Vector{Any}, DataFrames.var\"#395#396\"{Bool, DataFrame}}, offs::Int64, st::Int64)\n    @ Base ./array.jl:724\n  [7] collect_to!(dest::Vector{Base.OneTo{Int64}}, itr::Base.Generator{Vector{Any}, DataFrames.var\"#395#396\"{Bool, DataFrame}}, offs::Int64, st::Int64)\n    @ Base ./array.jl:732\n  [8] collect_to_with_first!(dest::Vector{Base.OneTo{Int64}}, v1::Base.OneTo{Int64}, itr::Base.Generator{Vector{Any}, DataFrames.var\"#395#396\"{Bool, DataFrame}}, st::Int64)\n    @ Base ./array.jl:702\n  [9] collect(itr::Base.Generator{Vector{Any}, DataFrames.var\"#395#396\"{Bool, DataFrame}})\n    @ Base ./array.jl:683\n [10] manipulate(::DataFrame, ::Any, ::Vararg{Any, N} where N; copycols::Bool, keeprows::Bool, renamecols::Bool)\n    @ DataFrames ~/.julia/packages/DataFrames/oQ5c7/src/abstractdataframe/selection.jl:1209\n [11] #select#384\n    @ ~/.julia/packages/DataFrames/oQ5c7/src/abstractdataframe/selection.jl:847 [inlined]\n [12] #transform#386\n    @ ~/.julia/packages/DataFrames/oQ5c7/src/abstractdataframe/selection.jl:913 [inlined]\n [13] transform(::DataFrame, ::Any, ::Any)\n    @ DataFrames ~/.julia/packages/DataFrames/oQ5c7/src/abstractdataframe/selection.jl:913\n [14] top-level scope\n    @ REPL[14]:1"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I looked around but didn’t see an issue. I figure there must be a reason, but I don’t see what it is."}]}]}],"thread_ts":"1614353838.080200","reply_count":9,"reply_users_count":4,"latest_reply":"1614366188.083900","reply_users":["UBF9YRB6H","UCZ7VBGUD","U67431ELR","U8JAMQGQY"],"subscribed":false},{"client_msg_id":"e0e43c95-698e-42ef-b58d-e3b6066e7512","type":"message","text":"It has definitely come up before. I don't remember the exact reasoning but there is something about that implementation that's complicated, like not knowing the column names when something is `AsTable`.","user":"UBF9YRB6H","ts":"1614353970.080500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W4ul","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It has definitely come up before. I don't remember the exact reasoning but there is something about that implementation that's complicated, like not knowing the column names when something is "},{"type":"text","text":"AsTable","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1614353838.080200","parent_user_id":"UCZ7VBGUD"},{"client_msg_id":"2CEB7146-579D-4251-97ED-19F9A938E160","type":"message","text":"Ah ok. It would be nice for that to work, even if it doesn’t “see” AsTable generated columns at first, though maybe that would be more confusing ","user":"UCZ7VBGUD","ts":"1614354790.082000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qWk36","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah ok. It would be nice for that to work, even if it doesn’t “see” AsTable generated columns at first, though maybe that would be more confusing "}]}]}],"thread_ts":"1614353838.080200","parent_user_id":"UCZ7VBGUD"},{"client_msg_id":"814e7512-ceb8-49c2-9d64-56d6b56f689f","type":"message","text":"I agree, especially since if you omit the `!` those copies can be very costly.","user":"UBF9YRB6H","ts":"1614354882.082200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/sLw","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I agree, especially since if you omit the "},{"type":"text","text":"!","style":{"code":true}},{"type":"text","text":" those copies can be very costly."}]}]}],"thread_ts":"1614353838.080200","parent_user_id":"UCZ7VBGUD","reactions":[{"name":"+1","users":["UCZ7VBGUD"],"count":1}]},{"client_msg_id":"c6fb9536-1737-4ea6-9e1e-869943f9645f","type":"message","text":"I think for `transform` just\n```function transform(df, transformations...)\n    df2 = copy(df)\n    for t in transformations\n        transform!(df2, t)\n    end\n    return df2\nend```\nshould work, right? But for `select` you can’t naively do the same because you’d lose all the initial columns after the first one","user":"UCZ7VBGUD","ts":"1614355298.082500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IoLb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think for "},{"type":"text","text":"transform","style":{"code":true}},{"type":"text","text":" just\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"function transform(df, transformations...)\n    df2 = copy(df)\n    for t in transformations\n        transform!(df2, t)\n    end\n    return df2\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"should work, right? But for "},{"type":"text","text":"select","style":{"code":true}},{"type":"text","text":" you can’t naively do the same because you’d lose all the initial columns after the first one"}]}]}],"thread_ts":"1614353838.080200","parent_user_id":"UCZ7VBGUD"},{"client_msg_id":"9d24abee-63e6-4aea-8508-1d21badd61a5","type":"message","text":"you would think! but the code is very complicated, so presumably if it were that simple it would already have happened.","user":"UBF9YRB6H","ts":"1614355352.082700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/mgQo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you would think! but the code is very complicated, so presumably if it were that simple it would already have happened."}]}]}],"thread_ts":"1614353838.080200","parent_user_id":"UCZ7VBGUD","reactions":[{"name":"+1","users":["UCZ7VBGUD"],"count":1}]},{"client_msg_id":"0f10057b-bd36-46e5-8ede-f0615223004d","type":"message","text":"I also thought it could be nice to support it but <@U8JAMQGQY> said the implementation was already tricky enough! :-D","user":"U67431ELR","ts":"1614358428.083100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"z2s","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I also thought it could be nice to support it but "},{"type":"user","user_id":"U8JAMQGQY"},{"type":"text","text":" said the implementation was already tricky enough! :-D"}]}]}],"thread_ts":"1614353838.080200","parent_user_id":"UCZ7VBGUD"},{"client_msg_id":"edb5850e-1fb2-45cc-86a7-ffb63391e8bc","type":"message","text":"It is not possible because of multi-threading support we have now","user":"U8JAMQGQY","ts":"1614360755.083300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"E9MSq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It is not possible because of multi-threading support we have now"}]}]}],"thread_ts":"1614353838.080200","parent_user_id":"UCZ7VBGUD","reactions":[{"name":"cry","users":["UCZ7VBGUD"],"count":1},{"name":"+1","users":["UCZ7VBGUD"],"count":1}]},{"client_msg_id":"7b5a5ae3-0411-4cbe-b539-b1ea2e0fea67","type":"message","text":"Even if we disallowed threading the concept would require:\n1. Having separate rules for single and multi column selectors. E.g. what should `[:a, :b]` pick assuming source data frame has both of them but also we create `:a` on an earlier transformation. If we say that we should take new `:a` then what should e.g. `r\"a\"` or `Between(:a, :b)` pick - probably old `:a`, so as you can see things become messy.\n2. Internal implementation would have to pass around old and new data frame, which would complicate code - especially for `GroupedDataFrame` (this is a secondary argument - the two above are crucial)","user":"U8JAMQGQY","ts":"1614363638.083700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/lp+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Even if we disallowed threading the concept would require:\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Having separate rules for single and multi column selectors. E.g. what should "},{"type":"text","text":"[:a, :b]","style":{"code":true}},{"type":"text","text":" pick assuming source data frame has both of them but also we create "},{"type":"text","text":":a","style":{"code":true}},{"type":"text","text":" on an earlier transformation. If we say that we should take new "},{"type":"text","text":":a","style":{"code":true}},{"type":"text","text":" then what should e.g. "},{"type":"text","text":"r\"a\"","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"Between(:a, :b)","style":{"code":true}},{"type":"text","text":" pick - probably old "},{"type":"text","text":":a","style":{"code":true}},{"type":"text","text":", so as you can see things become messy."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Internal implementation would have to pass around old and new data frame, which would complicate code - especially for "},{"type":"text","text":"GroupedDataFrame","style":{"code":true}},{"type":"text","text":" (this is a secondary argument - the two above are crucial)"}]}],"style":"ordered","indent":0,"offset":0}]}],"thread_ts":"1614353838.080200","parent_user_id":"UCZ7VBGUD"},{"client_msg_id":"85a9e924-c5f4-4dff-905a-627addf3648d","type":"message","text":"Finally we would have to have different rules for `combine` and for `select`.","user":"U8JAMQGQY","ts":"1614366188.083900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iUR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Finally we would have to have different rules for "},{"type":"text","text":"combine","style":{"code":true}},{"type":"text","text":" and for "},{"type":"text","text":"select","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1614353838.080200","parent_user_id":"UCZ7VBGUD"}]