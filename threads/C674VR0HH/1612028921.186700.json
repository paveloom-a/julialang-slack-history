[{"client_msg_id":"331c90ab-9ed2-4d13-8849-87a1d28f3ff7","type":"message","text":"This week I decided to write a post about `!` row selector in DataFrames.jl as I see it often used (and I feel it is overused) and recently there were some questions about the details and reasons of differences between `!` and `:` row selectors. I hope it helps (though the reading is probably a bit heavy this time): <https://bkamins.github.io/julialang/2021/01/30/bang.html>","user":"U8JAMQGQY","ts":"1612028921.186700","team":"T68168MUP","attachments":[{"service_name":"Blog by Bogumił Kamiński","title":"On the bang row selector in DataFrames.jl","title_link":"https://bkamins.github.io/julialang/2021/01/30/bang.html","text":"Introduction","fallback":"Blog by Bogumił Kamiński: On the bang row selector in DataFrames.jl","ts":1611995064,"from_url":"https://bkamins.github.io/julialang/2021/01/30/bang.html","service_icon":"https://bkamins.github.io/favicon.ico","id":1,"original_url":"https://bkamins.github.io/julialang/2021/01/30/bang.html"}],"blocks":[{"type":"rich_text","block_id":"=yML","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This week I decided to write a post about "},{"type":"text","text":"!","style":{"code":true}},{"type":"text","text":" row selector in DataFrames.jl as I see it often used (and I feel it is overused) and recently there were some questions about the details and reasons of differences between "},{"type":"text","text":"!","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":":","style":{"code":true}},{"type":"text","text":" row selectors. I hope it helps (though the reading is probably a bit heavy this time): "},{"type":"link","url":"https://bkamins.github.io/julialang/2021/01/30/bang.html"}]}]}],"thread_ts":"1612028921.186700","reply_count":37,"reply_users_count":6,"latest_reply":"1612130049.199400","reply_users":["U6A936746","UDXST8ARK","U6SHSF4R0","U8JAMQGQY","UBF9YRB6H","UH8A351DJ"],"subscribed":false,"reactions":[{"name":"heart","users":["U6A936746","U681ELA87","U6795JH6H","U01C15GH58B","U7PGB5DU3","UAZP7LJLU","UPH1M2MB2","U012J1E5SFR","U6GD6JN2K","U68RVK2D7","UC2H100V8","U68QW0PUZ"],"count":12}]},{"client_msg_id":"8e200b23-b33c-4d63-9e03-5d6ef83c478c","type":"message","text":"I think one reason it is over-used is because when it was introduced, existing uses of `:` were deprecated to `!` , And people just made that change without thinking _\"is ! really the semantics I want here? and not :, or view, or some larger rewrite?\"_","user":"U6A936746","ts":"1612030248.186900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c1nLh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think one reason it is over-used is because when it was introduced, existing uses of "},{"type":"text","text":":","style":{"code":true}},{"type":"text","text":" were deprecated to "},{"type":"text","text":"!","style":{"code":true}},{"type":"text","text":" , And people just made that change without thinking _\"is ! really the semantics I want here? and not :, or view, or some larger rewrite?\"_"}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"733c7062-d802-4c5e-b0bc-090a29ca81aa","type":"message","text":"we have a private package that does a lot of data munging, and the difference between `df[:, :col]` and `df[!, :co]` and `df.col` adds a lot of cognitive burden for me\n\nthe package is now mostly full of the `!` syntax because\n• having to know if `col` already exists in order to write `df.col = ...` is a little annoying, so we just always use `df[!, col] = ...` to avoid needing to think about if `col` already exists\n• we basically never want to make copies (we don't need to be \"safe\", we're readin data from <http://e.ga|e.g. a> csv and then fixing it up into a more user-friendly state)\n• mixing use of `:` and `!` is confusing (\"is this using `:` not `!` for a good reason? is just because whoever wrote this arbitrarily put `:` rather than `!` or can i change it to `!` to be more consistent with everywhere else?\")\nBasically the different indexing notations make my head hurt, and in my use-cases add a lot of visual noise. I wish DataFrames only had `:` and defaulted to the faster thing, not the safer thing (which i think would be more usual for Julia)\n\n...but i also think my use-cases are not the most typical, and certainly not the only use-case.\n\nProbably the typical use-case is playing around with data in a notebook. So i can see why the \" `:` is safe indexing\" came to be... but now `!` indexing is used most places in practice (afaict) and i'm not sure that's a good thing.","user":"UDXST8ARK","ts":"1612031475.187200","team":"T68168MUP","edited":{"user":"UDXST8ARK","ts":"1612031612.000000"},"blocks":[{"type":"rich_text","block_id":"St++V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"we have a private package that does a lot of data munging, and the difference between "},{"type":"text","text":"df[:, :col]","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"df[!, :co]","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"df.col","style":{"code":true}},{"type":"text","text":" adds a lot of cognitive burden for me\n\nthe package is now mostly full of the "},{"type":"text","text":"!","style":{"code":true}},{"type":"text","text":" syntax because\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"having to know if "},{"type":"text","text":"col","style":{"code":true}},{"type":"text","text":" already exists in order to write "},{"type":"text","text":"df.col = ...","style":{"code":true}},{"type":"text","text":" is a little annoying, so we just always use "},{"type":"text","text":"df[!, col] = ...","style":{"code":true}},{"type":"text","text":" to avoid needing to think about if "},{"type":"text","text":"col","style":{"code":true}},{"type":"text","text":" already exists"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"we basically never want to make copies (we don't need to be \"safe\", we're readin data from "},{"type":"link","url":"http://e.ga","text":"e.g. a"},{"type":"text","text":" csv and then fixing it up into a more user-friendly state)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"mixing use of "},{"type":"text","text":":","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"!","style":{"code":true}},{"type":"text","text":" is confusing (\"is this using "},{"type":"text","text":":","style":{"code":true}},{"type":"text","text":" not "},{"type":"text","text":"!","style":{"code":true}},{"type":"text","text":" for a good reason? is just because whoever wrote this arbitrarily put "},{"type":"text","text":":","style":{"code":true}},{"type":"text","text":" rather than "},{"type":"text","text":"!","style":{"code":true}},{"type":"text","text":" or can i change it to "},{"type":"text","text":"!","style":{"code":true}},{"type":"text","text":" to be more consistent with everywhere else?\")"}]}],"style":"bullet","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"\nBasically the different indexing notations make my head hurt, and in my use-cases add a lot of visual noise. I wish DataFrames only had "},{"type":"text","text":":","style":{"code":true}},{"type":"text","text":" and defaulted to the faster thing, not the safer thing (which i think would be more usual for Julia)\n\n...but i also think my use-cases are not the most typical, and certainly not the only use-case.\n\nProbably the typical use-case is playing around with data in a notebook. So i can see why the \" "},{"type":"text","text":":","style":{"code":true}},{"type":"text","text":" is safe indexing\" came to be... but now "},{"type":"text","text":"!","style":{"code":true}},{"type":"text","text":" indexing is used most places in practice (afaict) and i'm not sure that's a good thing."}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"0f941cd0-e659-4d00-b89c-a741b4660d8d","type":"message","text":"We actually do need to make copies.\nYou've just been dodging that part of the codebase lately.\nA bunch of places still probably do `deepcopy`'s because `:` used to return references and then various manipulations were leading to segfaults.\nWe're a great case for code that was updated per deprecation warnings without further thought.\n\nWe should be using only `:` and `view.` So it matches matrix behaviour.\nThis kinda copy is really cheap.","user":"U6A936746","ts":"1612032088.187700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+wmhM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"We actually do need to make copies.\nYou've just been dodging that part of the codebase lately.\nA bunch of places still probably do "},{"type":"text","text":"deepcopy","style":{"code":true}},{"type":"text","text":"'s because "},{"type":"text","text":":","style":{"code":true}},{"type":"text","text":" used to return references and then various manipulations were leading to segfaults.\nWe're a great case for code that was updated per deprecation warnings without further thought.\n\nWe should be using only "},{"type":"text","text":":","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"view.","style":{"code":true}},{"type":"text","text":" So it matches matrix behaviour.\nThis kinda copy is really cheap."}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY","reactions":[{"name":"100","users":["U6795JH6H"],"count":1}]},{"client_msg_id":"68A9C935-A342-493E-9A26-661209EF8BD5","type":"message","text":"it would have been nice if we have copy on write so that any read-only access will default to ! for fast access and will only make copies during assignment. ","user":"U6SHSF4R0","ts":"1612034941.189500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZKM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it would have been nice if we have copy on write so that any read-only access will default to ! for fast access and will only make copies during assignment. "}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY","reactions":[{"name":"100","users":["U6A936746"],"count":1}]},{"client_msg_id":"6a023709-7190-4aea-a576-db7e7ddc10e0","type":"message","text":"<@UDXST8ARK> `df.col = ...` works even if `col` does not exist, what does not work is `df.col .= ...`. I will try to revive the relevant issue in Julia Base, as I think there was no opposition to add the support for it.","user":"U8JAMQGQY","ts":"1612037722.189900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Z8V","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UDXST8ARK"},{"type":"text","text":" "},{"type":"text","text":"df.col = ...","style":{"code":true}},{"type":"text","text":" works even if "},{"type":"text","text":"col","style":{"code":true}},{"type":"text","text":" does not exist, what does not work is "},{"type":"text","text":"df.col .= ...","style":{"code":true}},{"type":"text","text":". I will try to revive the relevant issue in Julia Base, as I think there was no opposition to add the support for it."}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY","reactions":[{"name":"point_up","users":["UDXST8ARK"],"count":1},{"name":"heavy_check_mark","users":["UDXST8ARK"],"count":1}]},{"client_msg_id":"302809c2-9da0-46df-9bb6-9a215caa13d9","type":"message","text":"Exactly as <@U6A936746> says - the design of the API was made so that using `:` and `view` works just as for arrays except that `:` allows adding of columns (which is not possible for matrices as they are not re-sizable in-place).","user":"U8JAMQGQY","ts":"1612038159.190100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZF/e","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Exactly as "},{"type":"user","user_id":"U6A936746"},{"type":"text","text":" says - the design of the API was made so that using "},{"type":"text","text":":","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"view","style":{"code":true}},{"type":"text","text":" works just as for arrays except that "},{"type":"text","text":":","style":{"code":true}},{"type":"text","text":" allows adding of columns (which is not possible for matrices as they are not re-sizable in-place)."}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"8f41c5b5-ae21-45ae-8c9f-777bed05b6d2","type":"message","text":"Please link that issue in Base so i can :+1:  it","user":"U6A936746","ts":"1612038238.190300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yNN","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Please link that issue in Base so i can "},{"type":"emoji","name":"+1"},{"type":"text","text":"  it"}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"9f8e4773-f4aa-4e8d-b3ec-7668e4c9a44a","type":"message","text":"<https://github.com/JuliaLang/julia/issues/36741>","user":"U8JAMQGQY","ts":"1612043736.190500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=IZOh","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaLang/julia/issues/36741"}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"7236f0c5-1967-47f6-8146-c6e9fd4eb793","type":"message","text":"This is a good post! I still get tripped up with `df[:, :a] = string.(df.a)` where `:a` is an `Int64` column. But I'm glad this is codified in the blog post","user":"UBF9YRB6H","ts":"1612047844.190700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IHcep","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is a good post! I still get tripped up with "},{"type":"text","text":"df[:, :a] = string.(df.a)","style":{"code":true}},{"type":"text","text":" where "},{"type":"text","text":":a","style":{"code":true}},{"type":"text","text":" is an "},{"type":"text","text":"Int64","style":{"code":true}},{"type":"text","text":" column. But I'm glad this is codified in the blog post"}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"f663d735-ba06-4b8a-9170-631abec46af5","type":"message","text":"I'm late to the party but, it seems to me that, if we want to have minimum allocation:\n1. use `!` when accessing a column\n2. use `:` when changing a column\nis that true? I find the behavior in the \"Assigning to a single column\" examples confusing.","user":"UH8A351DJ","ts":"1612120868.192000","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1612120900.000000"},"blocks":[{"type":"rich_text","block_id":"jZX8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm late to the party but, it seems to me that, if we want to have minimum allocation:\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"use "},{"type":"text","text":"!","style":{"code":true}},{"type":"text","text":" when accessing a column"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"use "},{"type":"text","text":":","style":{"code":true}},{"type":"text","text":" when changing a column"}]}],"style":"ordered","indent":0},{"type":"rich_text_section","elements":[{"type":"text","text":"is that true? I find the behavior in the \"Assigning to a single column\" examples confusing."}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"63d06e6f-832b-4a85-a69d-12c2db021dc2","type":"message","text":"This is correct, but as noted in the post `!` can be replaced by `getproperty` which is shorter to write and `:` is only allowed if you do not need to change `eltype` of the existing column. What is confusing in the post? I can update it and explain things better.","user":"U8JAMQGQY","ts":"1612121035.192300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7DP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is correct, but as noted in the post "},{"type":"text","text":"!","style":{"code":true}},{"type":"text","text":" can be replaced by "},{"type":"text","text":"getproperty","style":{"code":true}},{"type":"text","text":" which is shorter to write and "},{"type":"text","text":":","style":{"code":true}},{"type":"text","text":" is only allowed if you do not need to change "},{"type":"text","text":"eltype","style":{"code":true}},{"type":"text","text":" of the existing column. What is confusing in the post? I can update it and explain things better."}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"ce7b7a0b-2c1d-4f4d-89b1-15830d2690c6","type":"message","text":"it's just confusing that if you do `a = df[!, :col]`, there's no copying. but `df[!, :col] = a` is by default copying, unless you have `.=` instead I guess?","user":"UH8A351DJ","ts":"1612121124.192500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"M258p","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's just confusing that if you do "},{"type":"text","text":"a = df[!, :col]","style":{"code":true}},{"type":"text","text":", there's no copying. but "},{"type":"text","text":"df[!, :col] = a","style":{"code":true}},{"type":"text","text":" is by default copying, unless you have "},{"type":"text","text":".=","style":{"code":true}},{"type":"text","text":" instead I guess?"}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY","reactions":[{"name":"point_up","users":["UDXST8ARK"],"count":1}]},{"client_msg_id":"376a54b1-b9f6-4f49-99b8-211a5bc504e4","type":"message","text":"`df[!, :col] = a` does not copy, unless you use `.=` which has to copy, as `.=` does not see LHS object but only the list of values.","user":"U8JAMQGQY","ts":"1612123627.192800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bNRYg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"df[!, :col] = a","style":{"code":true}},{"type":"text","text":" does not copy, unless you use "},{"type":"text","text":".=","style":{"code":true}},{"type":"text","text":" which has to copy, as "},{"type":"text","text":".=","style":{"code":true}},{"type":"text","text":" does not see LHS object but only the list of values."}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"35054b45-f43d-40f4-b86b-834737fd65c5","type":"message","text":"if that does not copy","user":"UH8A351DJ","ts":"1612124188.193000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uyZEU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if that does not copy"}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY"},{"type":"message","text":"","files":[{"id":"F01LULF4LKT","created":1612124189,"timestamp":1612124189,"name":"image.png","title":"image.png","mimetype":"image/png","filetype":"png","pretty_type":"PNG","user":"UH8A351DJ","editable":false,"size":21424,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01LULF4LKT/image.png","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01LULF4LKT/download/image.png","thumb_64":"https://files.slack.com/files-tmb/T68168MUP-F01LULF4LKT-485ef14570/image_64.png","thumb_80":"https://files.slack.com/files-tmb/T68168MUP-F01LULF4LKT-485ef14570/image_80.png","thumb_360":"https://files.slack.com/files-tmb/T68168MUP-F01LULF4LKT-485ef14570/image_360.png","thumb_360_w":343,"thumb_360_h":360,"thumb_480":"https://files.slack.com/files-tmb/T68168MUP-F01LULF4LKT-485ef14570/image_480.png","thumb_480_w":458,"thumb_480_h":480,"thumb_160":"https://files.slack.com/files-tmb/T68168MUP-F01LULF4LKT-485ef14570/image_160.png","original_w":475,"original_h":498,"thumb_tiny":"AwAwAC3RfPbP4UzJ/wBv8qe/SimA3JA/i+tJk4/ip9FACD8aWiigAY4pN3HQ/lStjvSDaM4I/OgABz2NG72P5UoIPSigBM+xpaKKABxn/wDVTdp/vD8qc3SigBuD2P6UYb+9+lOooAQZ9aWiigD/2Q==","permalink":"https://julialang.slack.com/files/UH8A351DJ/F01LULF4LKT/image.png","permalink_public":"https://slack-files.com/T68168MUP-F01LULF4LKT-d547ed59a0","is_starred":false,"has_rich_preview":false}],"upload":false,"user":"UH8A351DJ","display_as_bot":false,"ts":"1612124190.193200","thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"c44f83b0-a9ed-4942-b32c-80f5fd95a894","type":"message","text":"shouldn't the last `col1` be [11,12,13]? because `df2.col1` is definitely NOT copy","user":"UH8A351DJ","ts":"1612124206.193600","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1612124224.000000"},"blocks":[{"type":"rich_text","block_id":"NlChX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"shouldn't the last "},{"type":"text","text":"col1","style":{"code":true}},{"type":"text","text":" be [11,12,13]? because "},{"type":"text","text":"df2.col1","style":{"code":true}},{"type":"text","text":" is definitely NOT copy"}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"fa8a5f76-2ff0-45c1-96f1-a2b5a6949dd2","type":"message","text":"if `col1` were `[11,12,13]` this would mean that the operation is in-place and `!` replaces column.","user":"U8JAMQGQY","ts":"1612124381.194000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uYn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if "},{"type":"text","text":"col1","style":{"code":true}},{"type":"text","text":" were "},{"type":"text","text":"[11,12,13]","style":{"code":true}},{"type":"text","text":" this would mean that the operation is in-place and "},{"type":"text","text":"!","style":{"code":true}},{"type":"text","text":" replaces column."}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"ac966154-ad0b-4fb3-8078-830940ccdea8","type":"message","text":"However, there is one thing that is worth updating. Actually when I used `11:13` we DO copy, but because of a different rule - it is not allowed to store ranges in `DataFrame` as they are immutable and it was leading to many problems in the past, so actually `AbstractRange` gets materialized. I will update the post to comment on this.","user":"U8JAMQGQY","ts":"1612124442.194200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WPkd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"However, there is one thing that is worth updating. Actually when I used "},{"type":"text","text":"11:13","style":{"code":true}},{"type":"text","text":" we DO copy, but because of a different rule - it is not allowed to store ranges in "},{"type":"text","text":"DataFrame","style":{"code":true}},{"type":"text","text":" as they are immutable and it was leading to many problems in the past, so actually "},{"type":"text","text":"AbstractRange","style":{"code":true}},{"type":"text","text":" gets materialized. I will update the post to comment on this."}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"cdee5100-9547-48bf-b979-5b55a95b5422","type":"message","text":"I see where my mis-conception is:\n1. `col1` used to be a non-copy of `df2.col1`\n2. now `df2.col1` is [11,12,13]\n3. `col1` is didn't change, but not because there's copying, but because `df2.col1` now points to a different column (without copying)","user":"UH8A351DJ","ts":"1612124620.194400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Nnp=r","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see where my mis-conception is:\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"col1","style":{"code":true}},{"type":"text","text":" used to be a non-copy of "},{"type":"text","text":"df2.col1","style":{"code":true}}]},{"type":"rich_text_section","elements":[{"type":"text","text":"now "},{"type":"text","text":"df2.col1","style":{"code":true}},{"type":"text","text":" is [11,12,13]"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"col1","style":{"code":true}},{"type":"text","text":" is didn't change, but not because there's copying, but because "},{"type":"text","text":"df2.col1","style":{"code":true}},{"type":"text","text":" now points to a different column (without copying)"}]}],"style":"ordered","indent":0}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"a0256c04-d16d-4196-bfb3-e530c7f6ac3d","type":"message","text":"I was thinking in-place ~= no-copying but I guess you can change the binding of `df2.col1` but still keep the previous one, just is now label by a outside variable (`col1`)","user":"UH8A351DJ","ts":"1612124690.194600","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1612124826.000000"},"blocks":[{"type":"rich_text","block_id":"q565m","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I was thinking in-place ~= no-copying but I guess you can change the binding of "},{"type":"text","text":"df2.col1","style":{"code":true}},{"type":"text","text":" but still keep the previous one, just is now label by a outside variable ("},{"type":"text","text":"col1","style":{"code":true}},{"type":"text","text":")"}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"a64938ac-abd5-464f-b6fc-24769c002c12","type":"message","text":"Yes - there are three levels of change:\n1. in-place\n2. replace no-copying\n3. replace with copying","user":"U8JAMQGQY","ts":"1612124831.195100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7KYdz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes - there are three levels of change:\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in-place"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"replace no-copying"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"replace with copying"}]}],"style":"ordered","indent":0}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY","reactions":[{"name":"+1","users":["UH8A351DJ"],"count":1},{"name":"heart","users":["UH8A351DJ"],"count":1}]},{"client_msg_id":"15967e45-79a1-47b0-a010-54def8f6a8c3","type":"message","text":"(I'm getting an array of pointer flash back ;))\nthanks for the clarification and great work, I really love DFs","user":"UH8A351DJ","ts":"1612124892.195500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=YKnl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(I'm getting an array of pointer flash back ;))\nthanks for the clarification and great work, I really love DFs"}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"2a840d58-f542-4cbc-a2d2-f4e84cd73f56","type":"message","text":"so I was hoping that in-place is `!` and `.=` . The reasoning being: ! gets you a non-copy view and `.=` is how you do in-place mutation for normal Array\n\n but it turns out to be `:` and `=` which I find to be confusing","user":"UH8A351DJ","ts":"1612125035.195700","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1612125267.000000"},"blocks":[{"type":"rich_text","block_id":"zTfQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so I was hoping that in-place is "},{"type":"text","text":"!","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":".=","style":{"code":true}},{"type":"text","text":" . The reasoning being: ! gets you a non-copy view and "},{"type":"text","text":".=","style":{"code":true}},{"type":"text","text":" is how you do in-place mutation for normal Array\n\n but it turns out to be "},{"type":"text","text":":","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"=","style":{"code":true}},{"type":"text","text":" which I find to be confusing"}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"5e8a24f5-abb0-43c0-91fb-2faf668fdef4","type":"message","text":"since:\n```df[:, :col1]```\ngives you a copy of the column, but\n```df[:, :col1] = x```\nwould change the column in-place?","user":"UH8A351DJ","ts":"1612125103.195900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KQJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"since:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"df[:, :col1]"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"gives you a copy of the column, but\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"df[:, :col1] = x"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"would change the column in-place?"}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"14f2e5d7-b27c-4e73-aab0-2243d4d48206","type":"message","text":"yes. This has to be this way, as this is how Julia Base works. If you have an array `x` and write `x[:]` you get a copy, and when you write `x[:] = y` it is an in-place update operation. That is why we need `!` to express things that work differently than how Julia Base works.","user":"U8JAMQGQY","ts":"1612125610.196300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HtK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yes. This has to be this way, as this is how Julia Base works. If you have an array "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" and write "},{"type":"text","text":"x[:]","style":{"code":true}},{"type":"text","text":" you get a copy, and when you write "},{"type":"text","text":"x[:] = y","style":{"code":true}},{"type":"text","text":" it is an in-place update operation. That is why we need "},{"type":"text","text":"!","style":{"code":true}},{"type":"text","text":" to express things that work differently than how Julia Base works."}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"2d3f3f82-90aa-447c-9ed5-8c907c995f57","type":"message","text":"I have updated the sections on assignment and conclusions in the post.","user":"U8JAMQGQY","ts":"1612125659.196500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IIT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have updated the sections on assignment and conclusions in the post."}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"1016c219-f427-4572-9e48-caf4b6cd6f42","type":"message","text":"or even more similarly. If `x` is a `Matrix` and you write `x[:, 1]` and `x[:, 1] = y` the things happen as I described and I assume you find it intuitive.","user":"U8JAMQGQY","ts":"1612125710.196700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2irvS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or even more similarly. If "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" is a "},{"type":"text","text":"Matrix","style":{"code":true}},{"type":"text","text":" and you write "},{"type":"text","text":"x[:, 1]","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"x[:, 1] = y","style":{"code":true}},{"type":"text","text":" the things happen as I described and I assume you find it intuitive."}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY","reactions":[{"name":"+1","users":["UH8A351DJ"],"count":1}]},{"client_msg_id":"4d54c0e5-a31c-4c18-95ba-31ee84cafbde","type":"message","text":"(as a comment - you might say that it is not possible to get `x[:, 1]` from a `Matrix` without copying and it is true, but it is an implementation detail - someone might create such an `AbstractMatrix` that would be a vector of column vectors and still you would expect to get a copy I assume, actually `DataFrame` is such a vector of vectors, but it is just not `AbstractMatrix` deliberately because we add to much custom API to it)","user":"U8JAMQGQY","ts":"1612126011.197000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"0kL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(as a comment - you might say that it is not possible to get "},{"type":"text","text":"x[:, 1]","style":{"code":true}},{"type":"text","text":" from a "},{"type":"text","text":"Matrix","style":{"code":true}},{"type":"text","text":" without copying and it is true, but it is an implementation detail - someone might create such an "},{"type":"text","text":"AbstractMatrix","style":{"code":true}},{"type":"text","text":" that would be a vector of column vectors and still you would expect to get a copy I assume, actually "},{"type":"text","text":"DataFrame","style":{"code":true}},{"type":"text","text":" is such a vector of vectors, but it is just not "},{"type":"text","text":"AbstractMatrix","style":{"code":true}},{"type":"text","text":" deliberately because we add to much custom API to it)"}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY","reactions":[{"name":"heavy_check_mark","users":["UH8A351DJ"],"count":1},{"name":"+1","users":["UH8A351DJ"],"count":1}]},{"client_msg_id":"00740818-afd6-45b2-b6de-5c1086cfca69","type":"message","text":"wait can you expand more on why `df[!, :col] .= 2` copies?","user":"UBF9YRB6H","ts":"1612127005.197400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IH6a","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"wait can you expand more on why "},{"type":"text","text":"df[!, :col] .= 2","style":{"code":true}},{"type":"text","text":" copies?"}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY","reactions":[{"name":"point_up","users":["UDXST8ARK"],"count":1}]},{"client_msg_id":"619b5937-9e34-422d-9a3f-a411297d4457","type":"message","text":"There's been a tremendous and remarkable effort to handle all behaviours and use-cases. I think that's why it really makes my head hurt as an API. But I appreciate the difficulty and ingenuity supporting so many behaviours.","user":"UDXST8ARK","ts":"1612127260.197600","team":"T68168MUP","edited":{"user":"UDXST8ARK","ts":"1612127365.000000"},"blocks":[{"type":"rich_text","block_id":"1uws","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There's been a tremendous and remarkable effort to handle all behaviours and use-cases. I think that's why it really makes my head hurt as an API. But I appreciate the difficulty and ingenuity supporting so many behaviours."}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY","reactions":[{"name":"100","users":["UH8A351DJ","U017J1FHTSA"],"count":2}]},{"client_msg_id":"019049dd-663f-4572-9e9c-c36f9f8bf22b","type":"message","text":"Wait also, `df[:, :a=] = x` doesn't operate in place\n\n```julia&gt; df = DataFrame(a = [4, 5, 6]);\n\njulia&gt; x = [1,2,3];\n\njulia&gt; df[:, :a] = x;\n\njulia&gt; x[1] = 1000;\n\njulia&gt; df\n3×1 DataFrame\n Row │ a     \n     │ Int64 \n─────┼───────\n   1 │     1\n   2 │     2\n   3 │     3```","user":"UBF9YRB6H","ts":"1612127824.198200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hKZIh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Wait also, "},{"type":"text","text":"df[:, :a=] = x","style":{"code":true}},{"type":"text","text":" doesn't operate in place\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> df = DataFrame(a = [4, 5, 6]);\n\njulia> x = [1,2,3];\n\njulia> df[:, :a] = x;\n\njulia> x[1] = 1000;\n\njulia> df\n3×1 DataFrame\n Row │ a     \n     │ Int64 \n─────┼───────\n   1 │     1\n   2 │     2\n   3 │     3"}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"54d8e4b8-c793-4cfd-a9f4-cd1e5a82790c","type":"message","text":"this is `copying` , yes","user":"UH8A351DJ","ts":"1612127905.198400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ansi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this is "},{"type":"text","text":"copying","style":{"code":true}},{"type":"text","text":" , yes"}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"d9b37f63-094b-41fa-a585-4b84ddeb72ba","type":"message","text":"oh i think i misunderstood what you meant by `in-place`","user":"UBF9YRB6H","ts":"1612127961.198600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eJoV0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh i think i misunderstood what you meant by "},{"type":"text","text":"in-place","style":{"code":true}}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"a2e78efb-d6de-421c-877b-1dfbf0ae31e1","type":"message","text":"Why df[!, :col] .= 2 copies? Because `2 cannot be stor`ed in a data frame without allocating a new vector.","user":"U8JAMQGQY","ts":"1612129527.198800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/LH8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Why df[!, :col] .= 2 copies? Because "},{"type":"text","text":"2 cannot be stor","style":{"code":true}},{"type":"text","text":"ed in a data frame without allocating a new vector."}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"800da128-2193-445d-8894-da6c60141a89","type":"message","text":"I would have thought it would be\n\n```t = df[!, :col] # no copy\nt .= 2 # no copy```","user":"UBF9YRB6H","ts":"1612129610.199000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vOfv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I would have thought it would be\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"t = df[!, :col] # no copy\nt .= 2 # no copy"}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"26be3986-e4bc-462b-8075-e7c986f46dce","type":"message","text":"<@UDXST8ARK> - yes, it was a pain to design API that would cover all use-cases people wanted and that would be \"safe by default\", which <@U6A936746> originally proposed and I fully agree with. DataFrames.jl when used by newcomers should employ `:` and `getproperty` only I think. And if you use only these they just work lile Julia Base.","user":"U8JAMQGQY","ts":"1612129802.199200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WN/z","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UDXST8ARK"},{"type":"text","text":" - yes, it was a pain to design API that would cover all use-cases people wanted and that would be \"safe by default\", which "},{"type":"user","user_id":"U6A936746"},{"type":"text","text":" originally proposed and I fully agree with. DataFrames.jl when used by newcomers should employ "},{"type":"text","text":":","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"getproperty","style":{"code":true}},{"type":"text","text":" only I think. And if you use only these they just work lile Julia Base."}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY","reactions":[{"name":"white_heart","users":["UDXST8ARK"],"count":1}]},{"client_msg_id":"65e4c215-a5ae-43f0-86d9-0c9ea3da9e92","type":"message","text":"Weirdly enough I use `@pack` and `@unpack` a lot, and since it's all `getproperty` I know what's going on","user":"UBF9YRB6H","ts":"1612130049.199400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7gNT5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Weirdly enough I use "},{"type":"text","text":"@pack","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"@unpack","style":{"code":true}},{"type":"text","text":" a lot, and since it's all "},{"type":"text","text":"getproperty","style":{"code":true}},{"type":"text","text":" I know what's going on"}]}]}],"thread_ts":"1612028921.186700","parent_user_id":"U8JAMQGQY"}]