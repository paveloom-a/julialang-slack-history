[{"client_msg_id":"f65978e8-f5eb-4c3a-80b5-71d56867b4a7","type":"message","text":"Is there a shorthand in the DataFrames mini-language for leaving missing values alone and only applying function to non-missing values? I tried eg\n\n```transform!(df, \"subject\" =&gt; ByRow(skipmissing ∘ (s-&gt; parse(Int, s))) =&gt; \"subject\")```\nbut no joy","user":"U8JP5B9T2","ts":"1611171486.089400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Jiv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a shorthand in the DataFrames mini-language for leaving missing values alone and only applying function to non-missing values? I tried eg\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"transform!(df, \"subject\" => ByRow(skipmissing ∘ (s-> parse(Int, s))) => \"subject\")"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"but no joy"}]}]}],"thread_ts":"1611171486.089400","reply_count":7,"reply_users_count":3,"latest_reply":"1611176199.094800","reply_users":["U68M6ERG8","U8JP5B9T2","U67431ELR"],"subscribed":false},{"client_msg_id":"5e9206ce-4a13-4117-9887-1b247c8b4faf","type":"message","text":"You can do something like that with the `completecases` function: <https://dataframes.juliadata.org/stable/lib/functions/#DataFrames.completecases>","user":"U68M6ERG8","ts":"1611171726.091800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1jRB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can do something like that with the "},{"type":"text","text":"completecases","style":{"code":true}},{"type":"text","text":" function: "},{"type":"link","url":"https://dataframes.juliadata.org/stable/lib/functions/#DataFrames.completecases"}]}]}],"thread_ts":"1611171486.089400","parent_user_id":"U8JP5B9T2"},{"client_msg_id":"2ee7aa3d-2c3b-4f13-af81-382f2c87e313","type":"message","text":"It's a building block towards something like that, anyway","user":"U68M6ERG8","ts":"1611171759.092000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Xu8C","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's a building block towards something like that, anyway"}]}]}],"thread_ts":"1611171486.089400","parent_user_id":"U8JP5B9T2"},{"client_msg_id":"973dc65f-f314-42d1-b9c6-295fb2480b55","type":"message","text":"It'll give you a boolean vector indicating missing values, so you can e.g. construct a view that contains only the nonmissing elements","user":"U68M6ERG8","ts":"1611171772.092200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NiBM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It'll give you a boolean vector indicating missing values, so you can e.g. construct a view that contains only the nonmissing elements"}]}]}],"thread_ts":"1611171486.089400","parent_user_id":"U8JP5B9T2"},{"client_msg_id":"b361f645-a5ec-435c-9870-8c447f7fb9e1","type":"message","text":"You can also define a function `lift(f) = xs -&gt; [ismissing(x) ? x : f(x) for x in xs]` (untested) so that you could say `\"subject\" =&gt; lift(s -&gt; parse(Int, s)) =&gt; \"subject\"`","user":"U68M6ERG8","ts":"1611171912.092400","team":"T68168MUP","edited":{"user":"U68M6ERG8","ts":"1611171922.000000"},"blocks":[{"type":"rich_text","block_id":"dXG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can also define a function "},{"type":"text","text":"lift(f) = xs -> [ismissing(x) ? x : f(x) for x in xs]","style":{"code":true}},{"type":"text","text":" (untested) so that you could say "},{"type":"text","text":"\"subject\" => lift(s -> parse(Int, s)) => \"subject\"","style":{"code":true}}]}]}],"thread_ts":"1611171486.089400","parent_user_id":"U8JP5B9T2"},{"client_msg_id":"695614bb-3872-4784-9d1e-b48e0d8fa65f","type":"message","text":"I've sometimes used a similar wrapper for short syntax to broadcast a function across every value in a row","user":"U68M6ERG8","ts":"1611171952.092700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W4B","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I've sometimes used a similar wrapper for short syntax to broadcast a function across every value in a row"}]}]}],"thread_ts":"1611171486.089400","parent_user_id":"U8JP5B9T2"},{"client_msg_id":"ec71f1c0-e8c6-4311-a6de-1c52a62ceddf","type":"message","text":"Yeah, I mean I can also just\n\n```transform!(df, \"subject\" =&gt; ByRow(s-&gt; ismissing(s) ? missing : parse(Int, s)) =&gt; \"subject\")```\nwhich is fine. Was just thinking it would be nice to have a shorthand. I'd use it a bunch","user":"U8JP5B9T2","ts":"1611173536.092900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Qsb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, I mean I can also just\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"transform!(df, \"subject\" => ByRow(s-> ismissing(s) ? missing : parse(Int, s)) => \"subject\")"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"which is fine. Was just thinking it would be nice to have a shorthand. I'd use it a bunch"}]}]}],"thread_ts":"1611171486.089400","parent_user_id":"U8JP5B9T2"},{"client_msg_id":"9cccd915-06cb-43de-b6c5-709999ceb9e2","type":"message","text":"`lift` already exists: it's called `passmissing`.","user":"U67431ELR","ts":"1611176199.094800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Yi4s","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"lift","style":{"code":true}},{"type":"text","text":" already exists: it's called "},{"type":"text","text":"passmissing","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1611171486.089400","parent_user_id":"U8JP5B9T2","reactions":[{"name":"exclamation","users":["U68M6ERG8"],"count":1},{"name":"+1","users":["U68M6ERG8"],"count":1}]}]