[{"client_msg_id":"fb2b836b-8c78-42ab-849f-853a01cc9321","type":"message","text":"Hi  guys\nHow can you apply  multiple function to multiple columns for a grouped data frame\nsay having  some df like so\n``` data = DataFrame(reshape(1:24, 6, 4))    \n GoupingsData = hcat([\"red\",\"blue\",\"Green\",\"red\",\"blue\",\"Green\"],data,makeunique = true)\n \n\n Output = \n @pipe GoupingsData |&gt; \n     combine(groupby(_,:x1),\n                    [:x1_1,:x2,:x3,:x4]  .=&gt; [maximum,minimum] .=&gt; \n                    [:x1min,:x1max,:x2min,:x2max,:x3min,:x3max,:x4min,:x4max]) ```\nhow would i apply each function to each of the columns.\nthe above does not work.","user":"UPH1M2MB2","ts":"1617811366.433500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kDc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hi  guys\nHow can you apply  multiple function to multiple columns for a grouped data frame\nsay having  some df like so\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":" data = DataFrame(reshape(1:24, 6, 4))    \n GoupingsData = hcat([\"red\",\"blue\",\"Green\",\"red\",\"blue\",\"Green\"],data,makeunique = true)\n \n\n Output = \n @pipe GoupingsData |> \n     combine(groupby(_,:x1),\n                    [:x1_1,:x2,:x3,:x4]  .=> [maximum,minimum] .=> \n                    [:x1min,:x1max,:x2min,:x2max,:x3min,:x3max,:x4min,:x4max]) "}]},{"type":"rich_text_section","elements":[{"type":"text","text":"how would i apply each function to each of the columns.\nthe above does not work."}]}]}],"thread_ts":"1617811366.433500","reply_count":3,"reply_users_count":2,"latest_reply":"1617814452.436300","reply_users":["UBF9YRB6H","UPH1M2MB2"],"is_locked":false,"subscribed":false},{"client_msg_id":"d7499e6a-6efe-42a9-85e6-72b8d0367f48","type":"message","text":"I think that broadcasting inside the call is probably not going to be precise enough to construct what you want.\n\nRemember, you want a vector of `src =&gt; (fun =&gt; dest)` pairs. This gets you close with some broadcasting\n\n```julia&gt; Output = \n       @pipe GoupingsData |&gt; \n           combine(groupby(_,:x1),\n                          vec([:x1_1,:x2,:x3,:x4]  .=&gt; [maximum minimum]))\n3×9 DataFrame\n Row │ x1      x1_1_maximum  x2_maximum  x3_maximum  x4_maximum  x1_1_minimum  x2_minimum  x3_minimum  x4_minimum \n     │ String  Int64         Int64       Int64       Int64       Int64         Int64       Int64       Int64      \n─────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ red                4          10          16          22             1           7          13          19\n   2 │ blue               5          11          17          23             2           8          14          20\n   3 │ Green              6          12          18          24             3           9          15          21```\n","user":"UBF9YRB6H","ts":"1617811666.433600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=ld","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think that broadcasting inside the call is probably not going to be precise enough to construct what you want.\n\nRemember, you want a vector of "},{"type":"text","text":"src => (fun => dest)","style":{"code":true}},{"type":"text","text":" pairs. This gets you close with some broadcasting\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Output = \n       @pipe GoupingsData |> \n           combine(groupby(_,:x1),\n                          vec([:x1_1,:x2,:x3,:x4]  .=> [maximum minimum]))\n3×9 DataFrame\n Row │ x1      x1_1_maximum  x2_maximum  x3_maximum  x4_maximum  x1_1_minimum  x2_minimum  x3_minimum  x4_minimum \n     │ String  Int64         Int64       Int64       Int64       Int64         Int64       Int64       Int64      \n─────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ red                4          10          16          22             1           7          13          19\n   2 │ blue               5          11          17          23             2           8          14          20\n   3 │ Green              6          12          18          24             3           9          15          21"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1617811366.433500","parent_user_id":"UPH1M2MB2","reactions":[{"name":"heavy_check_mark","users":["UPH1M2MB2"],"count":1}]},{"client_msg_id":"d399a042-f415-4e36-b4ef-ab998eeb2161","type":"message","text":"where I take advantage of the fact that because `[maximum minimum]` is a `1 x 2` matrix, you end up with all combinations.","user":"UBF9YRB6H","ts":"1617811701.433800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QzY7S","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"where I take advantage of the fact that because "},{"type":"text","text":"[maximum minimum]","style":{"code":true}},{"type":"text","text":" is a "},{"type":"text","text":"1 x 2","style":{"code":true}},{"type":"text","text":" matrix, you end up with all combinations."}]}]}],"thread_ts":"1617811366.433500","parent_user_id":"UPH1M2MB2"},{"client_msg_id":"3175e941-4238-406e-95d6-59fcdca751c2","type":"message","text":"<@UBF9YRB6H> Thank you This is the expected output.","user":"UPH1M2MB2","ts":"1617814452.436300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"B/V","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UBF9YRB6H"},{"type":"text","text":" Thank you This is the expected output."}]}]}],"thread_ts":"1617811366.433500","parent_user_id":"UPH1M2MB2"}]