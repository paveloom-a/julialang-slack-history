[{"client_msg_id":"de8e5604-a952-4497-8070-8166c472a03d","type":"message","text":"hi guys! is there an equivalent of <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.qcut.html> ? I’m trying to put something similar together than quantopian’s alphalens, and would need to bin the data effectively. I wrote my own function to do it (as I couldn’t find anything similar), but would love to compare it to some kind of official implementation","user":"U01N351DMT9","ts":"1615903158.002300","team":"T68168MUP","edited":{"user":"U01N351DMT9","ts":"1615903162.000000"},"blocks":[{"type":"rich_text","block_id":"yjw2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hi guys! is there an equivalent of "},{"type":"link","url":"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.qcut.html"},{"type":"text","text":" ? I’m trying to put something similar together than quantopian’s alphalens, and would need to bin the data effectively. I wrote my own function to do it (as I couldn’t find anything similar), but would love to compare it to some kind of official implementation"}]}]}],"thread_ts":"1615903158.002300","reply_count":14,"reply_users_count":4,"latest_reply":"1615912403.007500","reply_users":["U01N351DMT9","U67431ELR","U9VG1AYSG","U8JAMQGQY"],"subscribed":false},{"client_msg_id":"135ed21b-9995-47d2-98ad-e47f0152e037","type":"message","text":"```\n\nfunction group_bins(df::AbstractDataFrame, col::Symbol, binSize::Symbol, method::Symbol)::GroupedDataFrame\n\n    function binTypeToInterval(bin::Symbol)::Int64\n        if bin == :quantile\n            return 4\n        elseif bin == :decile\n            return 10\n        elseif bin == :percentile\n            return 100\n        else\n            throw(DomainError(\"bin needs to be a BinType!\"))\n        end\n    end\n\n    if method == :frequency\n        function binTypeToLabels(bin::Symbol)::Array{String}\n            if bin == :quantile\n                return map(x -&gt; string(\"Q\", x), range(0, length = binTypeToInterval(binSize)))\n            elseif bin == :decile\n                return map(x -&gt; string(\"D\", x), range(0, length = binTypeToInterval(binSize)))\n            elseif bin == :percentile\n                return map(x -&gt; string(\"P\", x), range(0, length = binTypeToInterval(binSize)))\n            else\n                throw(DomainError(\"bin needs to be a BinType!\"))\n            end\n        end\n\n        df.bin = map(x -&gt; string(x), cut(df[col], binTypeToInterval(binSize)))\n        df.bin = map(x -&gt; parse(Float64, split(split(x, \"[\")[2], \",\")[1]), df.bin)\n        return groupby(df, :bin)\n    elseif method == :equalInterval\n        vec = df[col]\n\n        vecRange = collect(range(minimum(vec), maximum(vec), length = binTypeToInterval(binSize)))\n        df.bin = map(elem -&gt; vecRange[findfirst(rangeElem -&gt; rangeElem &gt;= elem, vecRange)], vec)\n        return groupby(df, :bin)\n    elseif method == :discrete\n        df.bin = df[col]\n        return groupby(df, :bin)\n    else\n        throw(DomainError(\"Methods supported: [:frequency, :equalInterval, :discrete]\"))\n    end\nend\n\n\n\n## Factor analysis\n\nfunction bin_returns(signal::TimeArray, returns::TimeArray, lags::Vector{Int64}, binSize::Symbol, binningMethod::Symbol)\n\n    cumReturns = TimeSeries.cumprod(1 .+ returns, dims = 1)\n    laggedReturnsInBins = @pipe map(n -&gt; lead_return(cumReturns, n), lags) |&gt;\n        TimeSeries.merge(TimeSeries.rename(signal, colnames(signal)[1] =&gt; :signal), _...) |&gt;\n        DataFrame(_) |&gt;\n        group_bins(_, :signal, binSize, binningMethod)\n\n    colMapping = @pipe names(laggedReturnsInBins) |&gt;\n        filter(x -&gt; startswith(x, \"returns_\"), _) |&gt;\n        map(x -&gt; Pair(Symbol(x), mean), _)\n    return @pipe laggedReturnsInBins |&gt;\n        combine(_, colMapping...) |&gt;\n        sort(_, [:bin])\nend\n\nfunction bins_to_bars(df::DataFrame)\n    cols = @pipe filter(x -&gt; startswith(x, \"returns_\"), names(df)) |&gt; map(x -&gt; Symbol(x), _)\n    return map(x -&gt; bar(df[!, :bin], df[x], title=x, xrotation=45), cols)\nend```","user":"U01N351DMT9","ts":"1615903178.002500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"65v8","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"\n\nfunction group_bins(df::AbstractDataFrame, col::Symbol, binSize::Symbol, method::Symbol)::GroupedDataFrame\n\n    function binTypeToInterval(bin::Symbol)::Int64\n        if bin == :quantile\n            return 4\n        elseif bin == :decile\n            return 10\n        elseif bin == :percentile\n            return 100\n        else\n            throw(DomainError(\"bin needs to be a BinType!\"))\n        end\n    end\n\n    if method == :frequency\n        function binTypeToLabels(bin::Symbol)::Array{String}\n            if bin == :quantile\n                return map(x -> string(\"Q\", x), range(0, length = binTypeToInterval(binSize)))\n            elseif bin == :decile\n                return map(x -> string(\"D\", x), range(0, length = binTypeToInterval(binSize)))\n            elseif bin == :percentile\n                return map(x -> string(\"P\", x), range(0, length = binTypeToInterval(binSize)))\n            else\n                throw(DomainError(\"bin needs to be a BinType!\"))\n            end\n        end\n\n        df.bin = map(x -> string(x), cut(df[col], binTypeToInterval(binSize)))\n        df.bin = map(x -> parse(Float64, split(split(x, \"[\")[2], \",\")[1]), df.bin)\n        return groupby(df, :bin)\n    elseif method == :equalInterval\n        vec = df[col]\n\n        vecRange = collect(range(minimum(vec), maximum(vec), length = binTypeToInterval(binSize)))\n        df.bin = map(elem -> vecRange[findfirst(rangeElem -> rangeElem >= elem, vecRange)], vec)\n        return groupby(df, :bin)\n    elseif method == :discrete\n        df.bin = df[col]\n        return groupby(df, :bin)\n    else\n        throw(DomainError(\"Methods supported: [:frequency, :equalInterval, :discrete]\"))\n    end\nend\n\n\n\n## Factor analysis\n\nfunction bin_returns(signal::TimeArray, returns::TimeArray, lags::Vector{Int64}, binSize::Symbol, binningMethod::Symbol)\n\n    cumReturns = TimeSeries.cumprod(1 .+ returns, dims = 1)\n    laggedReturnsInBins = @pipe map(n -> lead_return(cumReturns, n), lags) |>\n        TimeSeries.merge(TimeSeries.rename(signal, colnames(signal)[1] => :signal), _...) |>\n        DataFrame(_) |>\n        group_bins(_, :signal, binSize, binningMethod)\n\n    colMapping = @pipe names(laggedReturnsInBins) |>\n        filter(x -> startswith(x, \"returns_\"), _) |>\n        map(x -> Pair(Symbol(x), mean), _)\n    return @pipe laggedReturnsInBins |>\n        combine(_, colMapping...) |>\n        sort(_, [:bin])\nend\n\nfunction bins_to_bars(df::DataFrame)\n    cols = @pipe filter(x -> startswith(x, \"returns_\"), names(df)) |> map(x -> Symbol(x), _)\n    return map(x -> bar(df[!, :bin], df[x], title=x, xrotation=45), cols)\nend"}]}]}],"thread_ts":"1615903158.002300","parent_user_id":"U01N351DMT9"},{"client_msg_id":"56f679df-1813-4109-9d0b-a071da6f917e","type":"message","text":"I’ve found <@U8JAMQGQY> ' article: <https://bkamins.github.io/julialang/2020/12/11/binning.html> - I think a package for this (or including it in one of the packages) would could be really, really useful. I can’t imagine a data analyst working effectively without this functionality?","user":"U01N351DMT9","ts":"1615903295.002700","team":"T68168MUP","attachments":[{"service_name":"Blog by Bogumił Kamiński","title":"Binning your data with Julia","title_link":"https://bkamins.github.io/julialang/2020/12/11/binning.html","text":"Introduction","fallback":"Blog by Bogumił Kamiński: Binning your data with Julia","ts":1607670223,"from_url":"https://bkamins.github.io/julialang/2020/12/11/binning.html","service_icon":"https://bkamins.github.io/favicon.ico","id":1,"original_url":"https://bkamins.github.io/julialang/2020/12/11/binning.html"}],"blocks":[{"type":"rich_text","block_id":"xeuYf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’ve found "},{"type":"user","user_id":"U8JAMQGQY"},{"type":"text","text":" ' article: "},{"type":"link","url":"https://bkamins.github.io/julialang/2020/12/11/binning.html"},{"type":"text","text":" - I think a package for this (or including it in one of the packages) would could be really, really useful. I can’t imagine a data analyst working effectively without this functionality?"}]}]}],"thread_ts":"1615903158.002300","parent_user_id":"U01N351DMT9"},{"type":"message","subtype":"thread_broadcast","text":"if there’s no such function, I’d love to collaborate with someone who is more experienced with Julia to make this happen as part of any package!","user":"U01N351DMT9","ts":"1615903350.004000","thread_ts":"1615903158.002300","root":{"client_msg_id":"de8e5604-a952-4497-8070-8166c472a03d","type":"message","text":"hi guys! is there an equivalent of <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.qcut.html> ? I’m trying to put something similar together than quantopian’s alphalens, and would need to bin the data effectively. I wrote my own function to do it (as I couldn’t find anything similar), but would love to compare it to some kind of official implementation","user":"U01N351DMT9","ts":"1615903158.002300","team":"T68168MUP","edited":{"user":"U01N351DMT9","ts":"1615903162.000000"},"blocks":[{"type":"rich_text","block_id":"yjw2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hi guys! is there an equivalent of "},{"type":"link","url":"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.qcut.html"},{"type":"text","text":" ? I’m trying to put something similar together than quantopian’s alphalens, and would need to bin the data effectively. I wrote my own function to do it (as I couldn’t find anything similar), but would love to compare it to some kind of official implementation"}]}]}],"thread_ts":"1615903158.002300","reply_count":14,"reply_users_count":4,"latest_reply":"1615912403.007500","reply_users":["U01N351DMT9","U67431ELR","U9VG1AYSG","U8JAMQGQY"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"8IDTe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if there’s no such function, I’d love to collaborate with someone who is more experienced with Julia to make this happen as part of any package!"}]}]}],"client_msg_id":"00db99f9-c6d7-4284-9ef0-f12f9553dd34"},{"client_msg_id":"75bb7107-ea4b-479e-a212-3a5ed6ef2218","type":"message","text":"What's wrong with `cut` from CategoricalArrays?","user":"U67431ELR","ts":"1615903428.004300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Goyq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What's wrong with `cut` from CategoricalArrays?"}]}]}],"thread_ts":"1615903158.002300","parent_user_id":"U01N351DMT9"},{"type":"message","subtype":"thread_broadcast","text":"nothing! my own crappy implementation also uses it. but I couldn’t find a code snippet to easily use it with dataframes’ groupby / combine methods. do you have a direction to point me towards?","user":"U01N351DMT9","ts":"1615903618.004500","thread_ts":"1615903158.002300","root":{"client_msg_id":"de8e5604-a952-4497-8070-8166c472a03d","type":"message","text":"hi guys! is there an equivalent of <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.qcut.html> ? I’m trying to put something similar together than quantopian’s alphalens, and would need to bin the data effectively. I wrote my own function to do it (as I couldn’t find anything similar), but would love to compare it to some kind of official implementation","user":"U01N351DMT9","ts":"1615903158.002300","team":"T68168MUP","edited":{"user":"U01N351DMT9","ts":"1615903162.000000"},"blocks":[{"type":"rich_text","block_id":"yjw2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"hi guys! is there an equivalent of "},{"type":"link","url":"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.qcut.html"},{"type":"text","text":" ? I’m trying to put something similar together than quantopian’s alphalens, and would need to bin the data effectively. I wrote my own function to do it (as I couldn’t find anything similar), but would love to compare it to some kind of official implementation"}]}]}],"thread_ts":"1615903158.002300","reply_count":14,"reply_users_count":4,"latest_reply":"1615912403.007500","reply_users":["U01N351DMT9","U67431ELR","U9VG1AYSG","U8JAMQGQY"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"+7/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"nothing! my own crappy implementation also uses it. but I couldn’t find a code snippet to easily use it with dataframes’ groupby / combine methods. do you have a direction to point me towards?"}]}]}],"client_msg_id":"7924922b-d1b9-415a-bbeb-2eb77f1b7cd2"},{"client_msg_id":"3bbdff49-5daf-475b-a676-5077e63db262","type":"message","text":"Well you can use it like you would with any other function, so I'm not sure what to say.","user":"U67431ELR","ts":"1615903722.004800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kELMn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well you can use it like you would with any other function, so I'm not sure what to say."}]}]}],"thread_ts":"1615903158.002300","parent_user_id":"U01N351DMT9"},{"type":"message","text":"fair! the only thing is that when I tried to do something similar a month ago, I searched for a day on how to make it happen, as a beginner with Dataframes.jl","files":[{"id":"F01RE8J79M1","created":1615903835,"timestamp":1615903835,"name":"image.png","title":"image.png","mimetype":"image/png","filetype":"png","pretty_type":"PNG","user":"U01N351DMT9","editable":false,"size":25195,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01RE8J79M1/image.png","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01RE8J79M1/download/image.png","thumb_64":"https://files.slack.com/files-tmb/T68168MUP-F01RE8J79M1-1fda99bf3f/image_64.png","thumb_80":"https://files.slack.com/files-tmb/T68168MUP-F01RE8J79M1-1fda99bf3f/image_80.png","thumb_360":"https://files.slack.com/files-tmb/T68168MUP-F01RE8J79M1-1fda99bf3f/image_360.png","thumb_360_w":360,"thumb_360_h":48,"thumb_480":"https://files.slack.com/files-tmb/T68168MUP-F01RE8J79M1-1fda99bf3f/image_480.png","thumb_480_w":480,"thumb_480_h":64,"thumb_160":"https://files.slack.com/files-tmb/T68168MUP-F01RE8J79M1-1fda99bf3f/image_160.png","thumb_720":"https://files.slack.com/files-tmb/T68168MUP-F01RE8J79M1-1fda99bf3f/image_720.png","thumb_720_w":720,"thumb_720_h":96,"thumb_800":"https://files.slack.com/files-tmb/T68168MUP-F01RE8J79M1-1fda99bf3f/image_800.png","thumb_800_w":800,"thumb_800_h":107,"thumb_960":"https://files.slack.com/files-tmb/T68168MUP-F01RE8J79M1-1fda99bf3f/image_960.png","thumb_960_w":960,"thumb_960_h":128,"thumb_1024":"https://files.slack.com/files-tmb/T68168MUP-F01RE8J79M1-1fda99bf3f/image_1024.png","thumb_1024_w":1024,"thumb_1024_h":137,"original_w":1138,"original_h":152,"thumb_tiny":"AwAGADCpu9qNw9KbRTAduo3ewptFAC7j7UZNJRQB/9k=","permalink":"https://julialang.slack.com/files/U01N351DMT9/F01RE8J79M1/image.png","permalink_public":"https://slack-files.com/T68168MUP-F01RE8J79M1-9db14facd3","is_starred":false,"has_rich_preview":false}],"upload":false,"blocks":[{"type":"rich_text","block_id":"HHa8N","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"fair! the only thing is that when I tried to do something similar a month ago, I searched for a day on how to make it happen, as a beginner with Dataframes.jl"}]}]}],"user":"U01N351DMT9","display_as_bot":false,"ts":"1615904005.005000","thread_ts":"1615903158.002300","parent_user_id":"U01N351DMT9"},{"client_msg_id":"639ba689-0b18-4823-9af8-db666b9088a5","type":"message","text":"I guess my question is: is it worth having a convenience function that does this? so it’s easier for people to find it, if they want to.","user":"U01N351DMT9","ts":"1615904113.005400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sM/O5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess my question is: is it worth having a convenience function that does this? so it’s easier for people to find it, if they want to."}]}]}],"thread_ts":"1615903158.002300","parent_user_id":"U01N351DMT9"},{"client_msg_id":"733c3865-7c72-4ad2-9825-2e02212e117f","type":"message","text":"Sorry, what does it do exactly? `pandas.qcut` seems to be very close to `CategoricalArrays.cut`.","user":"U67431ELR","ts":"1615904212.005600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tg/=O","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sorry, what does it do exactly? "},{"type":"text","text":"pandas.qcut","style":{"code":true}},{"type":"text","text":" seems to be very close to "},{"type":"text","text":"CategoricalArrays.cut","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1615903158.002300","parent_user_id":"U01N351DMT9"},{"client_msg_id":"0a1d5d01-a8a8-46a7-b289-86939c78b3a6","type":"message","text":"it looks like a histogram function with some fancy options.  You might be able to use histogram in `StatsBase` but I'm not sure if it's flexible enough","user":"U9VG1AYSG","ts":"1615906798.005900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/CNg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it looks like a histogram function with some fancy options.  You might be able to use histogram in "},{"type":"text","text":"StatsBase","style":{"code":true}},{"type":"text","text":" but I'm not sure if it's flexible enough"}]}]}],"thread_ts":"1615903158.002300","parent_user_id":"U01N351DMT9"},{"client_msg_id":"2c8f96cb-6965-41e0-a8ad-ef438c4d8537","type":"message","text":"Incidentally we have been discussing the way to do tie splitting when partitioning this week with <@U67431ELR> when implementing threading support for DataFrames.jl :smile: .","user":"U8JAMQGQY","ts":"1615907326.006100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZFkW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Incidentally we have been discussing the way to do tie splitting when partitioning this week with "},{"type":"user","user_id":"U67431ELR"},{"type":"text","text":" when implementing threading support for DataFrames.jl "},{"type":"emoji","name":"smile"},{"type":"text","text":" ."}]}]}],"thread_ts":"1615903158.002300","parent_user_id":"U01N351DMT9"},{"client_msg_id":"8f2a0189-3978-46df-9b93-1b6ff56066cb","type":"message","text":"at the risk of being an obnoxious pain in the ass, join performance is still terrible right?  is a rewrite being considered along with the multi threading stuff or is it neglected for now?","user":"U9VG1AYSG","ts":"1615907575.006300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tk8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"at the risk of being an obnoxious pain in the ass, join performance is still terrible right?  is a rewrite being considered along with the multi threading stuff or is it neglected for now?"}]}]}],"thread_ts":"1615903158.002300","parent_user_id":"U01N351DMT9"},{"client_msg_id":"baedfb86-a2d9-441c-a61c-f69e76eb0d1b","type":"message","text":"&gt;  join performance is still terrible right?\nIt should be OK now on `main`. Have you tested it and it works slow?\n&gt; along with the multi threading stuff or is it neglected for now?\nMulti threading was not added yet, but I would not expect that this would have an order of magnitude impact, rather a minor improvement.","user":"U8JAMQGQY","ts":"1615909932.006900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JXsf","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":" join performance is still terrible right?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"It should be OK now on "},{"type":"text","text":"main","style":{"code":true}},{"type":"text","text":". Have you tested it and it works slow?\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"along with the multi threading stuff or is it neglected for now?"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Multi threading was not added yet, but I would not expect that this would have an order of magnitude impact, rather a minor improvement."}]}]}],"thread_ts":"1615903158.002300","parent_user_id":"U01N351DMT9"},{"client_msg_id":"c33a7c32-babf-4fa7-8894-0fbab9856add","type":"message","text":"I have not tested `main`, I had thought that it was still pretty bad on latest tagged, but I haven't checked in a while so I maybe wrong.  Have there been any benchmarks after you guys re-worked it?","user":"U9VG1AYSG","ts":"1615912403.007500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SIFV+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have not tested "},{"type":"text","text":"main","style":{"code":true}},{"type":"text","text":", I had thought that it was still pretty bad on latest tagged, but I haven't checked in a while so I maybe wrong.  Have there been any benchmarks after you guys re-worked it?"}]}]}],"thread_ts":"1615903158.002300","parent_user_id":"U01N351DMT9"}]