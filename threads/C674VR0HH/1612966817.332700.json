[{"client_msg_id":"af91f0f4-fbfd-4073-a0af-420aef9fb34f","type":"message","text":"Would anyone care to explain to me the design decision and rationale behind the syntax `df[!, col]` as opposed to `df[col]`? I was out of the loop when this decision was made and was curious why the syntax was written this way. Not opposed or griping about it, just wondering why as I know a lot of thought goes into DataFrames (thanks in no small part to the legendary <@U8JAMQGQY>). Thank you!","user":"US64J0NPQ","ts":"1612966817.332700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IZG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Would anyone care to explain to me the design decision and rationale behind the syntax "},{"type":"text","text":"df[!, col]","style":{"code":true}},{"type":"text","text":" as opposed to "},{"type":"text","text":"df[col]","style":{"code":true}},{"type":"text","text":"? I was out of the loop when this decision was made and was curious why the syntax was written this way. Not opposed or griping about it, just wondering why as I know a lot of thought goes into DataFrames (thanks in no small part to the legendary "},{"type":"user","user_id":"U8JAMQGQY"},{"type":"text","text":"). Thank you!"}]}]}],"thread_ts":"1612966817.332700","reply_count":11,"reply_users_count":4,"latest_reply":"1612995042.350100","reply_users":["UBF9YRB6H","U67431ELR","U8JAMQGQY","U6A936746"],"subscribed":false},{"client_msg_id":"08c2fffe-3b47-4f5f-a83b-815f256caa5d","type":"message","text":"ambiguity. Consider `filter` acts on rows, right? So shouldn't doing `df[5]` return the 5th row?\n\nBetter to be explicit. Also, should `df[col]` copy the column or not? `df.col` is a no-copy, while `df[:, col]` performs a copy.\n\nThat said, I don't think I've ever seen anyone expect `df[5]` to return the 5th row. So maybe it was overblown. Perhaps it can change in 1.X","user":"UBF9YRB6H","ts":"1612966995.334100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"y9oT4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ambiguity. Consider "},{"type":"text","text":"filter","style":{"code":true}},{"type":"text","text":" acts on rows, right? So shouldn't doing "},{"type":"text","text":"df[5]","style":{"code":true}},{"type":"text","text":" return the 5th row?\n\nBetter to be explicit. Also, should "},{"type":"text","text":"df[col]","style":{"code":true}},{"type":"text","text":" copy the column or not? "},{"type":"text","text":"df.col","style":{"code":true}},{"type":"text","text":" is a no-copy, while "},{"type":"text","text":"df[:, col]","style":{"code":true}},{"type":"text","text":" performs a copy.\n\nThat said, I don't think I've ever seen anyone expect "},{"type":"text","text":"df[5]","style":{"code":true}},{"type":"text","text":" to return the 5th row. So maybe it was overblown. Perhaps it can change in 1.X"}]}]}],"thread_ts":"1612966817.332700","parent_user_id":"US64J0NPQ"},{"client_msg_id":"1dfb2c88-fc99-468b-84b0-f50ee6db764d","type":"message","text":"It's even worse than ambiguity, it's inconsistency. Since we consider data frames as collections of rows (like in `filter` and so on), `df[5]` should return the fifth row. Actually Pandas does that IIRC.","user":"U67431ELR","ts":"1612967171.334500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ay2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's even worse than ambiguity, it's inconsistency. Since we consider data frames as collections of rows (like in "},{"type":"text","text":"filter","style":{"code":true}},{"type":"text","text":" and so on), "},{"type":"text","text":"df[5]","style":{"code":true}},{"type":"text","text":" should return the fifth row. Actually Pandas does that IIRC."}]}]}],"thread_ts":"1612966817.332700","parent_user_id":"US64J0NPQ"},{"client_msg_id":"81bc6e64-1ecd-4a53-bcf6-d4705fdef7bd","type":"message","text":"Though we'll probably never allow that since as <@UBF9YRB6H> noted it's better to be explicit.","user":"U67431ELR","ts":"1612967203.334800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NhSgt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Though we'll probably never allow that since as "},{"type":"user","user_id":"UBF9YRB6H"},{"type":"text","text":" noted it's better to be explicit."}]}]}],"thread_ts":"1612966817.332700","parent_user_id":"US64J0NPQ"},{"client_msg_id":"b2fb42e1-3818-40ec-81a4-8f5384916446","type":"message","text":"&gt; Since we consider data frames as collections of rows (like in filter and so on), df[5] should return the fifth row. Actually Pandas does that IIRC.\nIsn't `filter` the only example though? We keep saying its a collection of rows but I dont think the API has changed that much. Maybe `first`, but there aren't that many other functions.","user":"UBF9YRB6H","ts":"1612967285.335000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"J1AZJ","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"Since we consider data frames as collections of rows (like in filter and so on), df[5] should return the fifth row. Actually Pandas does that IIRC."}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nIsn't "},{"type":"text","text":"filter","style":{"code":true}},{"type":"text","text":" the only example though? We keep saying its a collection of rows but I dont think the API has changed that much. Maybe "},{"type":"text","text":"first","style":{"code":true}},{"type":"text","text":", but there aren't that many other functions."}]}]}],"thread_ts":"1612966817.332700","parent_user_id":"US64J0NPQ"},{"client_msg_id":"16de129a-c103-4e20-ad38-83a887fc81c4","type":"message","text":"`delete!`, `sort`, `sortperm`, `last`, `empty`, `repeat` , `similar`, `unique`...","user":"U67431ELR","ts":"1612967405.335200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TnhH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"delete!","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"sort","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"sortperm","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"last","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"empty","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"repeat","style":{"code":true}},{"type":"text","text":" , "},{"type":"text","text":"similar","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"unique","style":{"code":true}},{"type":"text","text":"..."}]}]}],"thread_ts":"1612966817.332700","parent_user_id":"US64J0NPQ","reactions":[{"name":"+1","users":["UBF9YRB6H"],"count":1}]},{"client_msg_id":"ced21af8-c3bd-4b4b-ab59-7da1a3388980","type":"message","text":"Apart of what was said there are two comments:\n1. I really find the following confusing:\n```&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; df = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['a', 'b', 'c'])\n&gt;&gt;&gt; df[1:2]\n   a  b  c\n1  4  5  6\n&gt;&gt;&gt; df[[\"a\",\"b\"]]\n   a  b\n0  1  2\n1  4  5\n2  7  8```\n2. in the past `df[:col]` had hard-coded and hard to predict behaviors in different contexts. Having `!` made it simpler to go through deprecations.","user":"U8JAMQGQY","ts":"1612967538.335900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pIJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Apart of what was said there are two comments:\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I really find the following confusing:"}]}],"style":"ordered","indent":0},{"type":"rich_text_preformatted","elements":[{"type":"text","text":">>> import pandas as pd\n>>> import numpy as np\n>>> df = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['a', 'b', 'c'])\n>>> df[1:2]\n   a  b  c\n1  4  5  6\n>>> df[[\"a\",\"b\"]]\n   a  b\n0  1  2\n1  4  5\n2  7  8"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"2. in the past "},{"type":"text","text":"df[:col]","style":{"code":true}},{"type":"text","text":" had hard-coded and hard to predict behaviors in different contexts. Having "},{"type":"text","text":"!","style":{"code":true}},{"type":"text","text":" made it simpler to go through deprecations."}]}]}],"thread_ts":"1612966817.332700","parent_user_id":"US64J0NPQ","reactions":[{"name":"+1","users":["U67431ELR","UBF9YRB6H","UUTEK2XTM"],"count":3}]},{"client_msg_id":"6ace7ae6-cc02-4b6d-abdd-872da16193df","type":"message","text":"oh wow I had forgotten all of those.\n\nIndeed, a DataFrame is a collection of rows","user":"UBF9YRB6H","ts":"1612967788.338400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2u3E","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh wow I had forgotten all of those.\n\nIndeed, a DataFrame is a collection of rows"}]}]}],"thread_ts":"1612966817.332700","parent_user_id":"US64J0NPQ"},{"client_msg_id":"55ed9693-e42a-423b-b470-a5fac1b47fff","type":"message","text":"Yeah these methods are so obvious that we tend to forget about them. Even several years ago when data frames were `AbstractDict{Symbol, &lt;:AbstractVector}` , `sort` and `unique` operated on rows, which is quite inconsistent.","user":"U67431ELR","ts":"1612968334.338700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bBX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah these methods are so obvious that we tend to forget about them. Even several years ago when data frames were "},{"type":"text","text":"AbstractDict{Symbol, <:AbstractVector}","style":{"code":true}},{"type":"text","text":" , "},{"type":"text","text":"sort","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"unique","style":{"code":true}},{"type":"text","text":" operated on rows, which is quite inconsistent."}]}]}],"thread_ts":"1612966817.332700","parent_user_id":"US64J0NPQ"},{"client_msg_id":"92d4393a-1564-405d-a52f-9f897a4020ac","type":"message","text":"I still wish you could do `df.$x` to where `x = :a` but that's a base julia problem, not DataFrames","user":"UBF9YRB6H","ts":"1612968552.339000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ladgS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I still wish you could do "},{"type":"text","text":"df.$x","style":{"code":true}},{"type":"text","text":" to where "},{"type":"text","text":"x = :a","style":{"code":true}},{"type":"text","text":" but that's a base julia problem, not DataFrames"}]}]}],"thread_ts":"1612966817.332700","parent_user_id":"US64J0NPQ","reactions":[{"name":"+1","users":["U011QC7QLPL"],"count":1}]},{"client_msg_id":"be39d96d-4756-4f01-a450-d0a5121b53a9","type":"message","text":"I suspect `df.\"$x\"` works, but I am AFK","user":"U6A936746","ts":"1612994799.349900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7MaX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I suspect "},{"type":"text","text":"df.\"$x\"","style":{"code":true}},{"type":"text","text":" works, but I am AFK"}]}]}],"thread_ts":"1612966817.332700","parent_user_id":"US64J0NPQ"},{"client_msg_id":"0fbcb809-ce68-4a7d-8f86-30f5b15641db","type":"message","text":"its an invalid syntax, which I guess is good","user":"UBF9YRB6H","ts":"1612995042.350100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XYo6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"its an invalid syntax, which I guess is good"}]}]}],"thread_ts":"1612966817.332700","parent_user_id":"US64J0NPQ"}]