[{"client_msg_id":"be76c705-f30e-4921-97fd-a5d24a36bd0f","type":"message","text":"But I need to admit that this is all still kind of fuzzy in my head; it might be most productive to hear some of the use-cases people have where they’re running into the issues mentioned above and have a solution grow out of the best way forward given the issues. In particular, it’s not clear to me whether people are trying to save a `Vector{CustomStruct}` in arrow format, or if they have DataFrames that happen to have `Tuple{Int, String}` columns that are running into issues. If anyone has thoughts/ideas, I’d love to hear them. I’ll try to post more thoughts as I have them.","user":"U681ELA87","ts":"1614228333.053300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IFuJK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But I need to admit that this is all still kind of fuzzy in my head; it might be most productive to hear some of the use-cases people have where they’re running into the issues mentioned above and have a solution grow out of the best way forward given the issues. In particular, it’s not clear to me whether people are trying to save a "},{"type":"text","text":"Vector{CustomStruct}","style":{"code":true}},{"type":"text","text":" in arrow format, or if they have DataFrames that happen to have "},{"type":"text","text":"Tuple{Int, String}","style":{"code":true}},{"type":"text","text":" columns that are running into issues. If anyone has thoughts/ideas, I’d love to hear them. I’ll try to post more thoughts as I have them."}]}]}],"thread_ts":"1614228333.053300","reply_count":2,"reply_users_count":2,"latest_reply":"1614260074.061000","reply_users":["UCZ7VBGUD","U674T0Y9Z"],"subscribed":false},{"client_msg_id":"f9a24930-a66b-4f60-a49d-6e987a8834e8","type":"message","text":"I’m sure <@U674T0Y9Z> can comment in more detail, but our Onda.jl package (as of last week) uses Arrow to store tables of annotations and information about signals. You can see the types of the columns in the format, specified here: <https://github.com/beacon-biosignals/OndaFormat#ondaannotationsarrow-files>. So I would say this is the “table” use-case, not the `Vector{CustomStruct}` use-case.\n\nI am also using Arrow for the latter use-case in <https://giordano.github.io/AnalyzeRegistry.jl/dev/serialization/>","user":"UCZ7VBGUD","ts":"1614259393.060800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ftFG=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’m sure "},{"type":"user","user_id":"U674T0Y9Z"},{"type":"text","text":" can comment in more detail, but our Onda.jl package (as of last week) uses Arrow to store tables of annotations and information about signals. You can see the types of the columns in the format, specified here: "},{"type":"link","url":"https://github.com/beacon-biosignals/OndaFormat#ondaannotationsarrow-files"},{"type":"text","text":". So I would say this is the “table” use-case, not the "},{"type":"text","text":"Vector{CustomStruct}","style":{"code":true}},{"type":"text","text":" use-case.\n\nI am also using Arrow for the latter use-case in "},{"type":"link","url":"https://giordano.github.io/AnalyzeRegistry.jl/dev/serialization/"}]}]}],"thread_ts":"1614228333.053300","parent_user_id":"U681ELA87"},{"client_msg_id":"1a39dd82-e5f7-4bb0-bee9-e1a9753e92d7","type":"message","text":"not sure how useful it is, but as a data point: after going back and forth on this kind of thing with MsgPack a while back, my conclusion ended up being that you should always have some mechanism to enable type specification at the callsite, even if there is a different way to set/register \"global defaults\" (which can also be useful)\n\nWe do potentially hit (or I guess the better word is \"allow\") the `Vector{CustomStruct}` use case for some columns, like the column we use to represent time spans and columns that might hold custom path types. So we have stuff like <https://github.com/beacon-biosignals/Onda.jl/blob/master/src/utilities.jl#L44> floating around\n\nmaybe a relevant part of our spec: <https://github.com/beacon-biosignals/OndaFormat#overview>\n\n&gt; [The sections that define how Onda uses Arrow refers] to the <https://github.com/apache/arrow/blob/master/format/Schema.fbs|logical types defined by the Arrow specification>. Onda reader/writer implementations may additionally employ Arrow extension types that directly alias a column's specified logical type in order to support application-level features (first-class UUID support, custom `file_path` type support, etc.).\n","user":"U674T0Y9Z","ts":"1614260074.061000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DD44","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not sure how useful it is, but as a data point: after going back and forth on this kind of thing with MsgPack a while back, my conclusion ended up being that you should always have some mechanism to enable type specification at the callsite, even if there is a different way to set/register \"global defaults\" (which can also be useful)\n\nWe do potentially hit (or I guess the better word is \"allow\") the "},{"type":"text","text":"Vector{CustomStruct}","style":{"code":true}},{"type":"text","text":" use case for some columns, like the column we use to represent time spans and columns that might hold custom path types. So we have stuff like "},{"type":"link","url":"https://github.com/beacon-biosignals/Onda.jl/blob/master/src/utilities.jl#L44"},{"type":"text","text":" floating around\n\nmaybe a relevant part of our spec: "},{"type":"link","url":"https://github.com/beacon-biosignals/OndaFormat#overview"},{"type":"text","text":"\n\n"}]},{"type":"rich_text_quote","elements":[{"type":"text","text":"[The sections that define how Onda uses Arrow refers] to the "},{"type":"link","url":"https://github.com/apache/arrow/blob/master/format/Schema.fbs","text":"logical types defined by the Arrow specification"},{"type":"text","text":". Onda reader/writer implementations may additionally employ Arrow extension types that directly alias a column's specified logical type in order to support application-level features (first-class UUID support, custom "},{"type":"text","text":"file_path","style":{"code":true}},{"type":"text","text":" type support, etc.)."}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1614228333.053300","parent_user_id":"U681ELA87"}]