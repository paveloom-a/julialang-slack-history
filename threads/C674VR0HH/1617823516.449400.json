[{"client_msg_id":"eed028d7-20ac-4a6c-8cea-0fcd066eb6b7","type":"message","text":"I am currently thinking of sorting it, and then tracking by hand what group i am in and what elements i am keeping","user":"U6A936746","ts":"1617823516.449400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Jic","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am currently thinking of sorting it, and then tracking by hand what group i am in and what elements i am keeping"}]}]}],"thread_ts":"1617823516.449400","reply_count":12,"reply_users_count":3,"latest_reply":"1617826066.452600","reply_users":["U67431ELR","UBF9YRB6H","U6A936746"],"is_locked":false,"subscribed":false},{"client_msg_id":"ffec8efc-b97a-4d59-b549-a05912eda33e","type":"message","text":"Why not `groupby` and then `filter`?","user":"U67431ELR","ts":"1617824447.450100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DgaG/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Why not "},{"type":"text","text":"groupby","style":{"code":true}},{"type":"text","text":" and then "},{"type":"text","text":"filter","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1617823516.449400","parent_user_id":"U6A936746"},{"client_msg_id":"d058f518-7f9c-4baf-8306-b096e4123b4e","type":"message","text":"If you really wanted to avoid allocations, I guess you could use `getfield(sdf, :rows)` and `push!` to some vector all the indices you would like to keep.","user":"UBF9YRB6H","ts":"1617824623.450300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"S+00J","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you really wanted to avoid allocations, I guess you could use "},{"type":"text","text":"getfield(sdf, :rows)","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"push!","style":{"code":true}},{"type":"text","text":" to some vector all the indices you would like to keep."}]}]}],"thread_ts":"1617823516.449400","parent_user_id":"U6A936746"},{"client_msg_id":"66eefd95-9877-46fd-9639-18169d59c9e2","type":"message","text":"once i am inside the group i need to look over all the rows to decide which 1 or none that i am going to keep.\nSo I can’t see how to do this with groupby and filter.","user":"U6A936746","ts":"1617824669.450500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7weNL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"once i am inside the group i need to look over all the rows to decide which 1 or none that i am going to keep.\nSo I can’t see how to do this with groupby and filter."}]}]}],"thread_ts":"1617823516.449400","parent_user_id":"U6A936746"},{"client_msg_id":"88582034-368a-41bb-99c9-d756bdb94f08","type":"message","text":"Ah so that would be `filter` (or indexing) within `combine`.","user":"U67431ELR","ts":"1617824880.450800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WQUo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah so that would be "},{"type":"text","text":"filter","style":{"code":true}},{"type":"text","text":" (or indexing) within "},{"type":"text","text":"combine","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1617823516.449400","parent_user_id":"U6A936746"},{"client_msg_id":"daa5db32-d16d-4152-ba92-6b5eb7e06707","type":"message","text":"something like that yeah, I don’t know what that looks like, I haven’t fully mastered the `select` and `combine` stuff","user":"U6A936746","ts":"1617824961.451000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ko+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"something like that yeah, I don’t know what that looks like, I haven’t fully mastered the "},{"type":"text","text":"select","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"combine","style":{"code":true}},{"type":"text","text":" stuff"}]}]}],"thread_ts":"1617823516.449400","parent_user_id":"U6A936746"},{"client_msg_id":"e34609ee-8300-41de-95b7-efec00246a03","type":"message","text":"I think this is actually a hard problem. I can't think of an obvious way to do this.\n\nI think `@where` in DataFramesMeta would be good for this.","user":"UBF9YRB6H","ts":"1617825494.451300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OnVK9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think this is actually a hard problem. I can't think of an obvious way to do this.\n\nI think "},{"type":"text","text":"@where","style":{"code":true}},{"type":"text","text":" in DataFramesMeta would be good for this."}]}]}],"thread_ts":"1617823516.449400","parent_user_id":"U6A936746"},{"client_msg_id":"e362c72f-6a7f-40c7-b53e-418999eba330","type":"message","text":"DataFrames doesn't like returning empty objects that aren't data frames inside `combine`. But then you have to have empty vectors.","user":"UBF9YRB6H","ts":"1617825564.451500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OSDVZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"DataFrames doesn't like returning empty objects that aren't data frames inside "},{"type":"text","text":"combine","style":{"code":true}},{"type":"text","text":". But then you have to have empty vectors."}]}]}],"thread_ts":"1617823516.449400","parent_user_id":"U6A936746"},{"client_msg_id":"738c7677-d781-4e19-a22d-2c8b859c692c","type":"message","text":"Well you can return empty vectors if you have to.","user":"U67431ELR","ts":"1617825629.451700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C3Dgi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Well you can return empty vectors if you have to."}]}]}],"thread_ts":"1617823516.449400","parent_user_id":"U6A936746"},{"client_msg_id":"042cc9b9-78ee-4138-846e-2d0e4526c85a","type":"message","text":"<@U6A936746> Do you have many groups? If so an efficient solution is probably to use `select` or `combine` to generate a logical vector indicating whether you want to keep each row, and then index the original data frame with it.","user":"U67431ELR","ts":"1617825697.451900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Qmy3","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U6A936746"},{"type":"text","text":" Do you have many groups? If so an efficient solution is probably to use "},{"type":"text","text":"select","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"combine","style":{"code":true}},{"type":"text","text":" to generate a logical vector indicating whether you want to keep each row, and then index the original data frame with it."}]}]}],"thread_ts":"1617823516.449400","parent_user_id":"U6A936746"},{"client_msg_id":"257045f9-4f51-4ac2-8866-29136b3404ff","type":"message","text":"Wait on main we just introduced `subset` precisely for this kind of thing.","user":"U67431ELR","ts":"1617825776.452200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"oiVv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Wait on main we just introduced "},{"type":"text","text":"subset","style":{"code":true}},{"type":"text","text":" precisely for this kind of thing."}]}]}],"thread_ts":"1617823516.449400","parent_user_id":"U6A936746"},{"client_msg_id":"2c7f37b7-b36d-410a-88a6-8bf3e1da4d88","type":"message","text":"`subset` still requires lots of intermediate vectors. See the following with `@where`\n\n\n```julia&gt; @where df begin\n           if mean(:b) &gt; 1\n               [true; fill(false, length(:b) - 1)]\n           else \n               fill(false, length(:b))\n           end\n       end```\n","user":"UBF9YRB6H","ts":"1617825835.452400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8fs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"subset","style":{"code":true}},{"type":"text","text":" still requires lots of intermediate vectors. See the following with "},{"type":"text","text":"@where","style":{"code":true}},{"type":"text","text":"\n\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> @where df begin\n           if mean(:b) > 1\n               [true; fill(false, length(:b) - 1)]\n           else \n               fill(false, length(:b))\n           end\n       end"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1617823516.449400","parent_user_id":"U6A936746"},{"client_msg_id":"b6122799-8265-4484-b1ca-5d235d525885","type":"message","text":"Here is a version that relies on the internals of a `SubDataFrame` but *might* be faster.\n\n```\njulia&gt; let \n           inds_to_keep = Int[]\n           foreach(gd) do sdf\n               if mean(sdf.b) &gt; 1\n                   rows = getfield(sdf, :rows)\n                   push!(inds_to_keep, first(rows))\n               end\n           end\n           inds_to_keep\n       end\n1-element Vector{Int64}:\n 3\n\njulia&gt; df\n4×2 DataFrame\n Row │ a      b     \n     │ Int64  Int64 \n─────┼──────────────\n   1 │     1      1\n   2 │     1      1\n   3 │     2      2\n   4 │     2      2```","user":"UBF9YRB6H","ts":"1617826066.452600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HMD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Here is a version that relies on the internals of a "},{"type":"text","text":"SubDataFrame","style":{"code":true}},{"type":"text","text":" but "},{"type":"text","text":"might","style":{"bold":true}},{"type":"text","text":" be faster.\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"\njulia> let \n           inds_to_keep = Int[]\n           foreach(gd) do sdf\n               if mean(sdf.b) > 1\n                   rows = getfield(sdf, :rows)\n                   push!(inds_to_keep, first(rows))\n               end\n           end\n           inds_to_keep\n       end\n1-element Vector{Int64}:\n 3\n\njulia> df\n4×2 DataFrame\n Row │ a      b     \n     │ Int64  Int64 \n─────┼──────────────\n   1 │     1      1\n   2 │     1      1\n   3 │     2      2\n   4 │     2      2"}]}]}],"thread_ts":"1617823516.449400","parent_user_id":"U6A936746"}]