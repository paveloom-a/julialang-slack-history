[{"client_msg_id":"5ca3681d-ad91-4847-a828-e2b5bff9963a","type":"message","text":"Hello,\nI'm trying to serialize a DataFrame with multiple columns types, including ZonedDateTime, with `Arrow.jl`. It appears ZonedDateTime has a (too) huge impact on performances as compared to simple DateTime, when serializing with Arrow.jl.\n\nAny idea why? Any remedy trick?\n\n```using DataFrames, Dates, TimeZones, Arrow, BenchmarkTools\n\n# Create dataframe\ndf_length = Int(1e3)\n\ndf = DataFrame(\n    int = rand(0:1000, long_test_df_length),\n    int_missing = rand(vcat(collect(0:10), [missing]), long_test_df_length),\n    cont = randn(long_test_df_length),\n    cont_missing = rand(vcat(randn(10), [missing]), long_test_df_length),\n    str = rand([\"a\", \"b\", \"c\", \"d\"], long_test_df_length),\n    str_missing = rand([\"a\", \"b\", \"c\", \"d\", missing], long_test_df_length),\n)\n\n# DF to Arrow in buffer\nserialize(df::DataFrames.AbstractDataFrame) = Arrow.write(IOBuffer(), df)\n\n# Add regular DateTime\ndf_with_dt = copy(df)\ninsertcols!(df_with_dt, \"date\" =&gt; collect(DateTime(2020, 1, 1 , 0, 0, 0):Second(1):(DateTime(2020, 1, 1, 0, 0, 0) + Second(df_length- 1))))\n\n# Add ZonedDateTime\ndf_with_zdt = copy(df)\ninsertcols!(df_with_zdt, \"date\" =&gt; collect(ZonedDateTime(2020, 1, 1 , 0, 0, 0, tz\"Europe/Paris\"):Second(1):(ZonedDateTime(2020, 1, 1, 0, 0, 0, tz\"Europe/Paris\") + Second(df_length- 1))))\n\n# Regular DateTime\n@btime serialize(df_with_dt)    # =&gt; 311.645 μs\n\n# ZonedDateTime\n@btime serialize(df_with_zdt)    # ==&gt; 1.480 s```","user":"UC2H100V8","ts":"1609239911.277400","team":"T68168MUP","edited":{"user":"UC2H100V8","ts":"1609240052.000000"},"blocks":[{"type":"rich_text","block_id":"6fzp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hello,\nI'm trying to serialize a DataFrame with multiple columns types, including ZonedDateTime, with "},{"type":"text","text":"Arrow.jl","style":{"code":true}},{"type":"text","text":". It appears ZonedDateTime has a (too) huge impact on performances as compared to simple DateTime, when serializing with Arrow.jl.\n\nAny idea why? Any remedy trick?\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"using DataFrames, Dates, TimeZones, Arrow, BenchmarkTools\n\n# Create dataframe\ndf_length = Int(1e3)\n\ndf = DataFrame(\n    int = rand(0:1000, long_test_df_length),\n    int_missing = rand(vcat(collect(0:10), [missing]), long_test_df_length),\n    cont = randn(long_test_df_length),\n    cont_missing = rand(vcat(randn(10), [missing]), long_test_df_length),\n    str = rand([\"a\", \"b\", \"c\", \"d\"], long_test_df_length),\n    str_missing = rand([\"a\", \"b\", \"c\", \"d\", missing], long_test_df_length),\n)\n\n# DF to Arrow in buffer\nserialize(df::DataFrames.AbstractDataFrame) = Arrow.write(IOBuffer(), df)\n\n# Add regular DateTime\ndf_with_dt = copy(df)\ninsertcols!(df_with_dt, \"date\" => collect(DateTime(2020, 1, 1 , 0, 0, 0):Second(1):(DateTime(2020, 1, 1, 0, 0, 0) + Second(df_length- 1))))\n\n# Add ZonedDateTime\ndf_with_zdt = copy(df)\ninsertcols!(df_with_zdt, \"date\" => collect(ZonedDateTime(2020, 1, 1 , 0, 0, 0, tz\"Europe/Paris\"):Second(1):(ZonedDateTime(2020, 1, 1, 0, 0, 0, tz\"Europe/Paris\") + Second(df_length- 1))))\n\n# Regular DateTime\n@btime serialize(df_with_dt)    # => 311.645 μs\n\n# ZonedDateTime\n@btime serialize(df_with_zdt)    # ==> 1.480 s"}]}]}],"thread_ts":"1609239911.277400","reply_count":1,"reply_users_count":1,"latest_reply":"1609254425.277900","reply_users":["U681ELA87"],"subscribed":false},{"client_msg_id":"cc6bac3b-ebeb-4a13-b13a-f4ab48727061","type":"message","text":"Hmmmm, if you open an issue at Arrow.jl I can take a look; I think the only extra step there is doing a conversion from `String` =&gt; `Symbol`, but it doesn't seem like it should have that much of a performance impact. We might be doing extra work we don't need to.","user":"U681ELA87","ts":"1609254425.277900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7KzFt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmmmm, if you open an issue at Arrow.jl I can take a look; I think the only extra step there is doing a conversion from "},{"type":"text","text":"String","style":{"code":true}},{"type":"text","text":" => "},{"type":"text","text":"Symbol","style":{"code":true}},{"type":"text","text":", but it doesn't seem like it should have that much of a performance impact. We might be doing extra work we don't need to."}]}]}],"thread_ts":"1609239911.277400","parent_user_id":"UC2H100V8"}]