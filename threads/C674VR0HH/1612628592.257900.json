[{"client_msg_id":"7b0ebe3c-3f16-43cd-b6fb-db1c091f26f1","type":"message","text":"What is this \"hardcoded threshold length\" and how does reaching it change the growing behavior?\n\nWhat I can concede is that until today I find truly horrifying that Julia Arrays have a internal not-very-well-publicized hardcoded threshold length that, if an array grows larger than it, it stops doubling when reaching full capacity and instead have a smaller growth. In other words, the amortized `O(1)` insertion guarantee is thrown in the trash and nothing tells you about that.\nfrom a Discourse post &lt;<https://discourse.julialang.org/t/what-dont-you-like-about-julia-for-serious-work/54591/28>&gt;","user":"U68QW0PUZ","ts":"1612628592.257900","team":"T68168MUP","attachments":[{"service_name":"JuliaLang","title":"What don't you like about Julia for \"serious work\"?","title_link":"https://discourse.julialang.org/t/what-dont-you-like-about-julia-for-serious-work/54591/28","text":"What exactly do you mean by that? I fell outraged, XD. I must be out of the touch with C++ (although, I have programmed at least five of the last seven years in the language). If cutting my little finger would guarantee me I would never need to maintain a large C++ project and instead I could do it in Julia, then I would start reaching for my sharpest knife. Ok, now I understand a little better what you mean. Your problem is building a large project that needs reliable critical performance....","fallback":"JuliaLang: What don't you like about Julia for \"serious work\"?","thumb_url":"https://aws1.discourse-cdn.com/business5/uploads/julialang/original/2X/1/12829a7ba92b924d4ce81099cbf99785bee9b405.png","ts":1612627305,"from_url":"https://discourse.julialang.org/t/what-dont-you-like-about-julia-for-serious-work/54591/28","thumb_width":408,"thumb_height":263,"service_icon":"https://aws1.discourse-cdn.com/business5/uploads/julialang/optimized/2X/6/6ca888e296f59ca2a599807f7d5edd489e3d1829_2_180x180.png","id":1,"original_url":"https://discourse.julialang.org/t/what-dont-you-like-about-julia-for-serious-work/54591/28"}],"blocks":[{"type":"rich_text","block_id":"qZnIR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What is this \"hardcoded threshold length\" and how does reaching it change the growing behavior?\n\nWhat I can concede is that until today I find truly horrifying that Julia Arrays have a internal not-very-well-publicized hardcoded threshold length that, if an array grows larger than it, it stops doubling when reaching full capacity and instead have a smaller growth. In other words, the amortized "},{"type":"text","text":"O(1)","style":{"code":true}},{"type":"text","text":" insertion guarantee is thrown in the trash and nothing tells you about that.\nfrom a Discourse post <"},{"type":"link","url":"https://discourse.julialang.org/t/what-dont-you-like-about-julia-for-serious-work/54591/28"},{"type":"text","text":">"}]}]}],"thread_ts":"1612628592.257900","reply_count":10,"reply_users_count":2,"latest_reply":"1612630191.260100","reply_users":["UH24GRBLL","U68QW0PUZ"],"subscribed":false},{"client_msg_id":"db2cd50b-1473-4de5-a102-2ac533176151","type":"message","text":"I'm not sure I understand what is being said there","user":"UH24GRBLL","ts":"1612629083.258200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5mR/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm not sure I understand what is being said there"}]}]}],"thread_ts":"1612628592.257900","parent_user_id":"U68QW0PUZ"},{"client_msg_id":"7d7412b8-47c2-4031-8924-75cfe173b0a5","type":"message","text":"and I'm even less sure how they came to that conclusion :thinking_face:","user":"UH24GRBLL","ts":"1612629094.258400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Gl4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and I'm even less sure how they came to that conclusion "},{"type":"emoji","name":"thinking_face"}]}]}],"thread_ts":"1612628592.257900","parent_user_id":"U68QW0PUZ"},{"client_msg_id":"66a4739d-0ce4-4c66-a689-37b2b701d900","type":"message","text":"in array.c ~line 656 and ~line 707\n```// at this size and bigger,\n// allocate resized array data with malloc directly\n// instead of managing them separately as gc objects\n#define MALLOC_THRESH 1048576\n...\n        if (nbytes &gt;= MALLOC_THRESH) {\n            a-&gt;data = jl_gc_managed_malloc(nbytes);\n            jl_gc_track_malloced_array(ptls, a);\n            a-&gt;flags.how = 2;\n            a-&gt;flags.isaligned = 1;\n        }\n        else {\n            a-&gt;data = jl_gc_alloc_buf(ptls, nbytes);\n            a-&gt;flags.how = 1;\n            jl_gc_wb_buf(a, a-&gt;data, nbytes);\n        }```","user":"U68QW0PUZ","ts":"1612629730.258600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CO8a","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in array.c ~line 656 and ~line 707\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"// at this size and bigger,\n// allocate resized array data with malloc directly\n// instead of managing them separately as gc objects\n#define MALLOC_THRESH 1048576\n...\n        if (nbytes >= MALLOC_THRESH) {\n            a->data = jl_gc_managed_malloc(nbytes);\n            jl_gc_track_malloced_array(ptls, a);\n            a->flags.how = 2;\n            a->flags.isaligned = 1;\n        }\n        else {\n            a->data = jl_gc_alloc_buf(ptls, nbytes);\n            a->flags.how = 1;\n            jl_gc_wb_buf(a, a->data, nbytes);\n        }"}]}]}],"thread_ts":"1612628592.257900","parent_user_id":"U68QW0PUZ"},{"client_msg_id":"f6324c5f-dc46-4ade-8125-61f3864aea0a","type":"message","text":"that's not where the doubling logic is implemented though","user":"UH24GRBLL","ts":"1612629998.258900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XoY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's not where the doubling logic is implemented though"}]}]}],"thread_ts":"1612628592.257900","parent_user_id":"U68QW0PUZ"},{"client_msg_id":"c8bfd667-c002-44f9-b583-aab017192247","type":"message","text":"that logic deals with new buffers or reallocd buffers","user":"UH24GRBLL","ts":"1612630007.259100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uvHRS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that logic deals with new buffers or reallocd buffers"}]}]}],"thread_ts":"1612628592.257900","parent_user_id":"U68QW0PUZ"},{"client_msg_id":"4769eb63-a7ff-4762-aed9-5f52f765e9a8","type":"message","text":"where is the doubling logic?","user":"U68QW0PUZ","ts":"1612630047.259300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Pgh4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"where is the doubling logic?"}]}]}],"thread_ts":"1612628592.257900","parent_user_id":"U68QW0PUZ"},{"client_msg_id":"6a95e145-ce0b-4051-bb5c-d99c1982a546","type":"message","text":"`jl_array_grow_at_*`","user":"UH24GRBLL","ts":"1612630075.259500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OGiz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"jl_array_grow_at_*","style":{"code":true}}]}]}],"thread_ts":"1612628592.257900","parent_user_id":"U68QW0PUZ"},{"client_msg_id":"5c2b50d3-0025-4085-9fff-4c335949f408","type":"message","text":"the `if/else` you posted just deals with whether or not it should use existing slices in the memory managed by the GC or create a new big one","user":"UH24GRBLL","ts":"1612630119.259700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=5i/P","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the "},{"type":"text","text":"if/else","style":{"code":true}},{"type":"text","text":" you posted just deals with whether or not it should use existing slices in the memory managed by the GC or create a new big one"}]}]}],"thread_ts":"1612628592.257900","parent_user_id":"U68QW0PUZ"},{"client_msg_id":"7390844d-8eea-488d-b99d-a4a402926b08","type":"message","text":"oh","user":"U68QW0PUZ","ts":"1612630135.259900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ty9x","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"oh"}]}]}],"thread_ts":"1612628592.257900","parent_user_id":"U68QW0PUZ"},{"client_msg_id":"3e0c40bb-9eda-4b64-b5bd-8d02731c1e7d","type":"message","text":"that's why in the `if` branch you get a big call to `jl_gc_managed_malloc` (allocate a big slice of `nbytes`)  versus `jl_gc_alloc_buf` (smaller slices) in the `else`","user":"UH24GRBLL","ts":"1612630191.260100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nmSX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's why in the "},{"type":"text","text":"if","style":{"code":true}},{"type":"text","text":" branch you get a big call to "},{"type":"text","text":"jl_gc_managed_malloc","style":{"code":true}},{"type":"text","text":" (allocate a big slice of "},{"type":"text","text":"nbytes","style":{"code":true}},{"type":"text","text":")  versus "},{"type":"text","text":"jl_gc_alloc_buf","style":{"code":true}},{"type":"text","text":" (smaller slices) in the "},{"type":"text","text":"else","style":{"code":true}}]}]}],"thread_ts":"1612628592.257900","parent_user_id":"U68QW0PUZ"}]