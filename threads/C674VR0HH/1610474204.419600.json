[{"client_msg_id":"9b76813d-b52b-4623-8bf3-2dcd552917d5","type":"message","text":"Currently working with a MySQL Cursor that is Selecting everything from a MySQL Table. I am trying to convert a the TextCursor object to Arrow.Table but it continues to fail - I expected it to use the Tables interface similar to DataFrames where I could simple wrap the Cursor around a DataFrame Object. How do I properly convert a MySQL Table to an Arrow.Table? Thank you!","user":"US64J0NPQ","ts":"1610474204.419600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"LvC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Currently working with a MySQL Cursor that is Selecting everything from a MySQL Table. I am trying to convert a the TextCursor object to Arrow.Table but it continues to fail - I expected it to use the Tables interface similar to DataFrames where I could simple wrap the Cursor around a DataFrame Object. How do I properly convert a MySQL Table to an Arrow.Table? Thank you!"}]}]}],"thread_ts":"1610474204.419600","reply_count":4,"reply_users_count":2,"latest_reply":"1610486991.421200","reply_users":["U681ELA87","US64J0NPQ"],"subscribed":false},{"client_msg_id":"0104C9FF-80D5-42E7-A4D9-9C91B818A90E","type":"message","text":"That should work. What’s the error you’re seeing?","user":"U681ELA87","ts":"1610477737.420100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IY4TI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That should work. What’s the error you’re seeing?"}]}]}],"thread_ts":"1610474204.419600","parent_user_id":"US64J0NPQ"},{"client_msg_id":"c7063970-5458-4cdb-b304-ba8b37b69986","type":"message","text":"Here is what I am seeing <@U681ELA87>:\n\n```sql_table |&gt; Arrow.Table\nERROR: MethodError: no method matching Arrow.Table(::MySQL.TextCursor{true})\nClosest candidates are:\n  Arrow.Table(::Any, ::Any, ::Any, ::Any, ::Any) at /home/cedarprince/.julia/packages/Arrow/IldTB/src/table.jl:154\n  Arrow.Table() at /home/cedarprince/.julia/packages/Arrow/IldTB/src/table.jl:161\n  Arrow.Table(::Array{Symbol,1}, ::Array{Type,1}, ::Array{AbstractArray{T,1} where T,1}, ::Dict{Symbol,AbstractArray{T,1} where T}, ::Ref{Arrow.Flatbuf.Schema}) at /home/cedarprince/.ju\nlia/packages/Arrow/IldTB/src/table.jl:154\n  ...\nStacktrace:\n [1] |&gt;(::MySQL.TextCursor{true}, ::Type{T} where T) at ./operators.jl:834\n [2] top-level scope at REPL[52]:1```","user":"US64J0NPQ","ts":"1610482000.420300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VhRH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Here is what I am seeing "},{"type":"user","user_id":"U681ELA87"},{"type":"text","text":":\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"sql_table |> Arrow.Table\nERROR: MethodError: no method matching Arrow.Table(::MySQL.TextCursor{true})\nClosest candidates are:\n  Arrow.Table(::Any, ::Any, ::Any, ::Any, ::Any) at /home/cedarprince/.julia/packages/Arrow/IldTB/src/table.jl:154\n  Arrow.Table() at /home/cedarprince/.julia/packages/Arrow/IldTB/src/table.jl:161\n  Arrow.Table(::Array{Symbol,1}, ::Array{Type,1}, ::Array{AbstractArray{T,1} where T,1}, ::Dict{Symbol,AbstractArray{T,1} where T}, ::Ref{Arrow.Flatbuf.Schema}) at /home/cedarprince/.ju\nlia/packages/Arrow/IldTB/src/table.jl:154\n  ...\nStacktrace:\n [1] |>(::MySQL.TextCursor{true}, ::Type{T} where T) at ./operators.jl:834\n [2] top-level scope at REPL[52]:1"}]}]}],"thread_ts":"1610474204.419600","parent_user_id":"US64J0NPQ"},{"client_msg_id":"629385d0-54bb-4bc5-909c-8dcc8896894d","type":"message","text":"Oh, well, `Arrow.Table` isn’t a sink, it’s a source. You’ll have to do `Arrow.write(file, sql_table) |&gt; Arrow.Table(file)`. Alternatively, You could write the arrow format to an in-memory IOBuffer, like `io = IOBuffer(); Arrow.write(io, sql_table); seekstart(io); tbl = Arrow.Table(io)`","user":"U681ELA87","ts":"1610486134.421000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O4lar","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh, well, "},{"type":"text","text":"Arrow.Table","style":{"code":true}},{"type":"text","text":" isn’t a sink, it’s a source. You’ll have to do "},{"type":"text","text":"Arrow.write(file, sql_table) |> Arrow.Table(file)","style":{"code":true}},{"type":"text","text":". Alternatively, You could write the arrow format to an in-memory IOBuffer, like "},{"type":"text","text":"io = IOBuffer(); Arrow.write(io, sql_table); seekstart(io); tbl = Arrow.Table(io)","style":{"code":true}}]}]}],"thread_ts":"1610474204.419600","parent_user_id":"US64J0NPQ"},{"client_msg_id":"7cb45b50-e997-40f1-bed9-ee50d290d975","type":"message","text":"It’s perhaps confusing because a DataFrame is both a source _and_ a sink; but for most “formats”, there’s a dedicated sink function `CSV.write`, `Arrow.write`, etc. and a different source object `CSV.File`, `Arrow.Table`, etc.","user":"U681ELA87","ts":"1610486991.421200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tfOmp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It’s perhaps confusing because a DataFrame is both a source "},{"type":"text","text":"and","style":{"italic":true}},{"type":"text","text":" a sink; but for most “formats”, there’s a dedicated sink function "},{"type":"text","text":"CSV.write","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"Arrow.write","style":{"code":true}},{"type":"text","text":", etc. and a different source object "},{"type":"text","text":"CSV.File","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"Arrow.Table","style":{"code":true}},{"type":"text","text":", etc."}]}]}],"thread_ts":"1610474204.419600","parent_user_id":"US64J0NPQ"}]