[{"client_msg_id":"c0aec440-686b-4a38-ae00-815f41c18bc2","type":"message","text":"Is there a way to non-copy get an Arrow array from Python (via PyCall)? Asking because need rugged array provided by a python package (`pyarrow.ListArray`)","user":"UH8A351DJ","ts":"1609053755.250900","team":"T68168MUP","edited":{"user":"UH8A351DJ","ts":"1609111604.000000"},"blocks":[{"type":"rich_text","block_id":"uGapY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a way to non-copy get an Arrow array from Python (via PyCall)? Asking because need rugged array provided by a python package ("},{"type":"text","text":"pyarrow.ListArray","style":{"code":true,"unlink":true}},{"type":"text","text":")","style":{"unlink":true}}]}]}],"thread_ts":"1609053755.250900","reply_count":3,"reply_users_count":3,"latest_reply":"1609176465.264500","reply_users":["U681ELA87","UBGRZ7FSP","UH8A351DJ"],"subscribed":false},{"client_msg_id":"95906e3c-8df7-4099-8f75-2b99d9210fc3","type":"message","text":"So you want to read an arrow file/stream using `pyarrow`, but then convert one of the columns to a Julia object? I think PyCall.jl provides ways of referencing the python object directly if you just need to pass it to another python package, right? Or do you want to do something in Julia on the data? But you don't want to read the data w/ Arrrow.jl? I'm not sure what a \"rugged array\" means in this context","user":"U681ELA87","ts":"1609173837.262700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TnGq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So you want to read an arrow file/stream using "},{"type":"text","text":"pyarrow","style":{"code":true}},{"type":"text","text":", but then convert one of the columns to a Julia object? I think PyCall.jl provides ways of referencing the python object directly if you just need to pass it to another python package, right? Or do you want to do something in Julia on the data? But you don't want to read the data w/ Arrrow.jl? I'm not sure what a \"rugged array\" means in this context"}]}]}],"thread_ts":"1609053755.250900","parent_user_id":"UH8A351DJ"},{"client_msg_id":"86b465f0-ff50-403c-8457-eff6a3c1fc27","type":"message","text":"Did you perhaps mean a \"ragged array\", which is essentially key/value pairs? <https://en.wikipedia.org/wiki/Jagged_array>","user":"UBGRZ7FSP","ts":"1609174736.263800","team":"T68168MUP","edited":{"user":"UBGRZ7FSP","ts":"1609175127.000000"},"attachments":[{"image_url":"https://upload.wikimedia.org/wikipedia/commons/2/2f/Jagged_Array_Representation.png","image_width":192,"image_height":98,"image_bytes":1185,"title":"Jagged array","title_link":"https://en.wikipedia.org/wiki/Jagged_array","from_url":"https://en.wikipedia.org/wiki/Jagged_array","author_name":"Wikipedia","author_link":"https://en.wikipedia.org/","text":"In computer science, a ragged  array, also known as a jagged  array, is an array of arrays of which the member arrays can be of different lengths, producing rows of jagged edges when visualized as output. In contrast, two-dimensional arrays are always rectangular so jagged arrays should not be confused with multidimensional arrays, but the former is often used to emulate the latter.\nArrays of arrays in languages such as Java, PHP, Python (multidimensional lists), Ruby, C#.Net, Visual <http://Basic.NET|Basic.NET>, Perl, JavaScript, Objective-C, Swift, and Atlas Autocode are implemented as Iliffe vectors.","fallback":"wikipedia: Jagged array","service_icon":"https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png","id":1,"original_url":"https://en.wikipedia.org/wiki/Jagged_array"}],"blocks":[{"type":"rich_text","block_id":"Uv/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Did you perhaps mean a \"ragged array\", which is essentially key/value pairs? "},{"type":"link","url":"https://en.wikipedia.org/wiki/Jagged_array"}]}]}],"thread_ts":"1609053755.250900","parent_user_id":"UH8A351DJ","reactions":[{"name":"+1","users":["UH8A351DJ"],"count":1}]},{"client_msg_id":"b401eab0-ad69-49b7-adfe-cb0e02502b6d","type":"message","text":"<@U681ELA87> right, it means jagged array. So the situation is described in this <https://github.com/JuliaPy/PyCall.jl/issues/872#issuecomment-751529805|issue> of PyCall. Basically I want to get a jagged array that can be used in Julia. At the moment I have to do some hacks:\n```    c = PyArray(arr.layout.\"content\")\n    o = PyArray(arr.layout.\"offsets\")\n    @views [c[o[i]+1:o[i+1]] for i in 1:length(o)-1]```\narr is the PyObject. But the python pkg interfaces with pyarrow and can make arrow array (which support jagged-ness), so I'm wondering if I can leverage that","user":"UH8A351DJ","ts":"1609176465.264500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BfKWc","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U681ELA87"},{"type":"text","text":" right, it means jagged array. So the situation is described in this "},{"type":"link","url":"https://github.com/JuliaPy/PyCall.jl/issues/872#issuecomment-751529805","text":"issue"},{"type":"text","text":" of PyCall. Basically I want to get a jagged array that can be used in Julia. At the moment I have to do some hacks:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"    c = PyArray(arr.layout.\"content\")\n    o = PyArray(arr.layout.\"offsets\")\n    @views [c[o[i]+1:o[i+1]] for i in 1:length(o)-1]"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"arr is the PyObject. But the python pkg interfaces with pyarrow and can make arrow array (which support jagged-ness), so I'm wondering if I can leverage that"}]}]}],"thread_ts":"1609053755.250900","parent_user_id":"UH8A351DJ"}]