[{"client_msg_id":"d5f0cf93-1f4d-437b-baec-378c22f09ff9","type":"message","text":"Does the Arrow.Flatbuffer have approximately feature parity with Flatbuffers.jl? I used this pr to flatc <https://github.com/google/flatbuffers/pull/5088> to generate julia code from a flatbuffer schema, and it works with Flatbuffers.jl. If it is possible: what would I have to translate to get that code to work with the Arrow implementation?","user":"U01G3TX4F9A","ts":"1613123275.382300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lDvii","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Does the Arrow.Flatbuffer have approximately feature parity with Flatbuffers.jl? I used this pr to flatc "},{"type":"link","url":"https://github.com/google/flatbuffers/pull/5088"},{"type":"text","text":" to generate julia code from a flatbuffer schema, and it works with Flatbuffers.jl. If it is possible: what would I have to translate to get that code to work with the Arrow implementation?"}]}]}],"thread_ts":"1613123275.382300","reply_count":5,"reply_users_count":3,"latest_reply":"1614071841.018500","reply_users":["U681ELA87","U01G3TX4F9A","UBMAUCT51"],"subscribed":false},{"client_msg_id":"b63e4681-fbe9-489a-b61e-e099b785fccc","type":"message","text":"They're not compatible at the moment (FlatBuffers.jl vs. Arrow.FlatBuffers). The Arrow.FlatBuffers code is pretty much a direct port of the go flatbuffers package and follows the traditional flatbuffers implementation. The FlatBuffers.jl code is a pure julia implementation, but lacks some of the \"view\" capabilities of traditional flatbuffer implementations. Typically for reading, you have generic \"reader\" objects that wrap the flatbuffer memory buffers and then know which offsets to read the specific fields for. FlatBuffers.jl generates actual julia `struct`s w/ the same field offsets, but there are quite a few corner cases that don't work too well with that design. So for Arrow.jl, I opted to just port the go flatbuffers code over directly, then used the go-generated arrow flatbuffer code to also port directly to Julia.\n\nEventually, I'd like to take another stab at the flatbuffers flatc compiler support for the new Arrow.FlatBuffers style of code and get that merged upstream. But my C++ skills are pretty weak, so I've been hesitant and a little overwhelmed by the project.","user":"U681ELA87","ts":"1613145534.387200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"DS+E","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"They're not compatible at the moment (FlatBuffers.jl vs. Arrow.FlatBuffers). The Arrow.FlatBuffers code is pretty much a direct port of the go flatbuffers package and follows the traditional flatbuffers implementation. The FlatBuffers.jl code is a pure julia implementation, but lacks some of the \"view\" capabilities of traditional flatbuffer implementations. Typically for reading, you have generic \"reader\" objects that wrap the flatbuffer memory buffers and then know which offsets to read the specific fields for. FlatBuffers.jl generates actual julia "},{"type":"text","text":"struct","style":{"code":true}},{"type":"text","text":"s w/ the same field offsets, but there are quite a few corner cases that don't work too well with that design. So for Arrow.jl, I opted to just port the go flatbuffers code over directly, then used the go-generated arrow flatbuffer code to also port directly to Julia.\n\nEventually, I'd like to take another stab at the flatbuffers flatc compiler support for the new Arrow.FlatBuffers style of code and get that merged upstream. But my C++ skills are pretty weak, so I've been hesitant and a little overwhelmed by the project."}]}]}],"thread_ts":"1613123275.382300","parent_user_id":"U01G3TX4F9A"},{"client_msg_id":"0e18b9a8-ca5a-4405-a88f-50a6d4a76841","type":"message","text":"Thanks for the answer <@U681ELA87>. If I understand you correctly: to follow your example I would need to use flatc to generate go code for my fbs schema, and then manually port that code into julia (any specific reason to choose go here?). Do you know if the go generated code for the arrow table data is in the arrow source code somewhere? That would perhaps be  instructive to see for the code porting. On a different note, instead of creating julia support to flatc, do you think it would be feasible to use flatcc generated code for fbs schemas (i.e. flatc equivalent code for C) and then wrap that using ccall from the julia side. I have very limited experience in both C and ccall in julia, so I realise that this suggestion may be naive.","user":"U01G3TX4F9A","ts":"1613227932.393300","team":"T68168MUP","edited":{"user":"U01G3TX4F9A","ts":"1613228032.000000"},"blocks":[{"type":"rich_text","block_id":"xk9m4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks for the answer "},{"type":"user","user_id":"U681ELA87"},{"type":"text","text":". If I understand you correctly: to follow your example I would need to use flatc to generate go code for my fbs schema, and then manually port that code into julia (any specific reason to choose go here?). Do you know if the go generated code for the arrow table data is in the arrow source code somewhere? That would perhaps be  instructive to see for the code porting. On a different note, instead of creating julia support to flatc, do you think it would be feasible to use flatcc generated code for fbs schemas (i.e. flatc equivalent code for C) and then wrap that using ccall from the julia side. I have very limited experience in both C and ccall in julia, so I realise that this suggestion may be naive."}]}]}],"thread_ts":"1613123275.382300","parent_user_id":"U01G3TX4F9A"},{"client_msg_id":"E32C5979-943D-4A9A-9AA1-77EC42E1AFC6","type":"message","text":"Dear <@U681ELA87>, sorry to ping you. Just wanted to know if you had any thoughts on the above, before this chat is swallowed by slack.","user":"UBMAUCT51","ts":"1613937279.009900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"39Z36","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Dear "},{"type":"user","user_id":"U681ELA87"},{"type":"text","text":", sorry to ping you. Just wanted to know if you had any thoughts on the above, before this chat is swallowed by slack."}]}]}],"thread_ts":"1613123275.382300","parent_user_id":"U01G3TX4F9A"},{"client_msg_id":"B037EA8D-0937-45C4-A4F9-EC661FA39559","type":"message","text":"Yeah sorry for not responding earlier. Porting from go is pretty easy and straightforward; the main arrow repo does have the generated go fbs files and the ported Julia code is in the Arrow repo. I don’t think using the flatcc would work because I don’t think it produces a shared library you could ccall into. If you generate the go files I'm happy to help give direction for porting to Julia. I’m on my phone right now but I can provide links to the examples as well","user":"U681ELA87","ts":"1613969185.015200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=z+w5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah sorry for not responding earlier. Porting from go is pretty easy and straightforward; the main arrow repo does have the generated go fbs files and the ported Julia code is in the Arrow repo. I don’t think using the flatcc would work because I don’t think it produces a shared library you could ccall into. If you generate the go files I'm happy to help give direction for porting to Julia. I’m on my phone right now but I can provide links to the examples as well"}]}]}],"thread_ts":"1613123275.382300","parent_user_id":"U01G3TX4F9A","reactions":[{"name":"+1","users":["U01G3TX4F9A"],"count":1}]},{"client_msg_id":"f8219a20-8c6b-4269-b4ab-14ee61cd2e99","type":"message","text":"Many thanks, I’ll look into how the flatc generated go code works.","user":"U01G3TX4F9A","ts":"1614071841.018500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uHk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Many thanks, I’ll look into how the flatc generated go code works."}]}]}],"thread_ts":"1613123275.382300","parent_user_id":"U01G3TX4F9A"}]