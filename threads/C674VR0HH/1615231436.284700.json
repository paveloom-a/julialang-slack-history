[{"client_msg_id":"7977eeac-3138-4591-916b-6a4d0f77d309","type":"message","text":"<https://github.com/JuliaData/DataFrames.jl/issues/2340> is done and you can use it on `main`. We would appreciate some correctness and performance tests before 1.0 release to make sure all works as expected.","user":"U8JAMQGQY","ts":"1615231436.284700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3S9x","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaData/DataFrames.jl/issues/2340"},{"type":"text","text":" is done and you can use it on "},{"type":"text","text":"main","style":{"code":true}},{"type":"text","text":". We would appreciate some correctness and performance tests before 1.0 release to make sure all works as expected."}]}]}],"thread_ts":"1615231436.284700","reply_count":21,"reply_users_count":2,"latest_reply":"1615382289.326400","reply_users":["U7JQGPGCQ","U8JAMQGQY"],"subscribed":false,"reactions":[{"name":"tada","users":["UBF9YRB6H","UFWQ6DP0S","U7PGB5DU3","U6QGE7S86","UCZ7VBGUD","UAVMYR0F4","U66QZ3QF3","U969CNQU9","U6QF223TN"],"count":9},{"name":"10000","users":["U7JQGPGCQ","U6QGE7S86","U66QZ3QF3"],"count":3}]},{"client_msg_id":"ea313920-c820-4fe5-8e46-6d78cc08ec0e","type":"message","text":"I will have to continue a relatively lengthy analysis with quite a few joins of tables between 10 and 30 million rows tomorrow, so this comes in quite handy","user":"U7JQGPGCQ","ts":"1615233353.285300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9dYK2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I will have to continue a relatively lengthy analysis with quite a few joins of tables between 10 and 30 million rows tomorrow, so this comes in quite handy"}]}]}],"thread_ts":"1615231436.284700","parent_user_id":"U8JAMQGQY","reactions":[{"name":"heart","users":["U8JAMQGQY"],"count":1}]},{"client_msg_id":"6812b5bb-85b3-4ec8-afc7-f6c2fb0821da","type":"message","text":"Do you think the `master` branch can be deleted? It seems that it still exists and points to version 0.22.1 (took me a while to figure out I wanted `main`...)","user":"U7JQGPGCQ","ts":"1615314601.310100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8Bc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Do you think the "},{"type":"text","text":"master","style":{"code":true}},{"type":"text","text":" branch can be deleted? It seems that it still exists and points to version 0.22.1 (took me a while to figure out I wanted "},{"type":"text","text":"main","style":{"code":true}},{"type":"text","text":"...)"}]}]}],"thread_ts":"1615231436.284700","parent_user_id":"U8JAMQGQY"},{"type":"message","text":"Hm, at first glance I can't really see a difference:","files":[{"id":"F01QPPB838B","created":1615317995,"timestamp":1615317995,"name":"image.png","title":"image.png","mimetype":"image/png","filetype":"png","pretty_type":"PNG","user":"U7JQGPGCQ","editable":false,"size":29664,"mode":"hosted","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01QPPB838B/image.png","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01QPPB838B/download/image.png","thumb_64":"https://files.slack.com/files-tmb/T68168MUP-F01QPPB838B-c065dff102/image_64.png","thumb_80":"https://files.slack.com/files-tmb/T68168MUP-F01QPPB838B-c065dff102/image_80.png","thumb_360":"https://files.slack.com/files-tmb/T68168MUP-F01QPPB838B-c065dff102/image_360.png","thumb_360_w":360,"thumb_360_h":188,"thumb_480":"https://files.slack.com/files-tmb/T68168MUP-F01QPPB838B-c065dff102/image_480.png","thumb_480_w":480,"thumb_480_h":251,"thumb_160":"https://files.slack.com/files-tmb/T68168MUP-F01QPPB838B-c065dff102/image_160.png","thumb_720":"https://files.slack.com/files-tmb/T68168MUP-F01QPPB838B-c065dff102/image_720.png","thumb_720_w":720,"thumb_720_h":376,"thumb_800":"https://files.slack.com/files-tmb/T68168MUP-F01QPPB838B-c065dff102/image_800.png","thumb_800_w":800,"thumb_800_h":418,"original_w":905,"original_h":473,"thumb_tiny":"AwAZADDT7U35qd1puB60AHzUvzUmB60YHrQAvNAz60YGKBjtigBaZx70+igBnHoaOPQ0+igBo6dKUfTFLRQB/9k=","permalink":"https://julialang.slack.com/files/U7JQGPGCQ/F01QPPB838B/image.png","permalink_public":"https://slack-files.com/T68168MUP-F01QPPB838B-ccaaabdb08","is_starred":false,"has_rich_preview":false}],"upload":false,"blocks":[{"type":"rich_text","block_id":"4zqy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hm, at first glance I can't really see a difference:"}]}]}],"user":"U7JQGPGCQ","display_as_bot":false,"ts":"1615317998.311300","thread_ts":"1615231436.284700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"42344237-8400-470d-92c9-c50b5059adec","type":"message","text":"This is running twice on 0.22.5, then twice on `main` (clearly we are beyond the realm of `@btime` here :slightly_smiling_face: )","user":"U7JQGPGCQ","ts":"1615318034.311700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fCB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is running twice on 0.22.5, then twice on "},{"type":"text","text":"main","style":{"code":true}},{"type":"text","text":" (clearly we are beyond the realm of "},{"type":"text","text":"@btime","style":{"code":true}},{"type":"text","text":" here "},{"type":"emoji","name":"slightly_smiling_face"},{"type":"text","text":" )"}]}]}],"thread_ts":"1615231436.284700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"89008063-da07-46cd-b650-6f8f411940a8","type":"message","text":"But maybe my use case doesn't really benefit from the improvements - I seem to remember that it was mainly beneficial for sorted tables? Here I'm joining two unsorted tables, left table has 18.5m rows, right table has 0.6m rows. There are four timings per batch here as the right table is joined onto the left table four times, using a different column in the left table each time.","user":"U7JQGPGCQ","ts":"1615318124.311900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BXoZr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But maybe my use case doesn't really benefit from the improvements - I seem to remember that it was mainly beneficial for sorted tables? Here I'm joining two unsorted tables, left table has 18.5m rows, right table has 0.6m rows. There are four timings per batch here as the right table is joined onto the left table four times, using a different column in the left table each time."}]}]}],"thread_ts":"1615231436.284700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"ca2e3fb5-2fec-4c01-8877-19adbec77fea","type":"message","text":"Also there are plenty of missings (&gt;50% for each join) in the left table, with no missings in the right table","user":"U7JQGPGCQ","ts":"1615318164.312100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1VS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also there are plenty of missings (>50% for each join) in the left table, with no missings in the right table"}]}]}],"thread_ts":"1615231436.284700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"83112706-17fb-4e30-b23d-d682e7f5db02","type":"message","text":"I wanted to remove `master` but we cannot now as some legacy things might reference it.","user":"U8JAMQGQY","ts":"1615320507.313900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rQrz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I wanted to remove "},{"type":"text","text":"master","style":{"code":true}},{"type":"text","text":" but we cannot now as some legacy things might reference it."}]}]}],"thread_ts":"1615231436.284700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"2380441c-661b-4c85-bef6-25abb90d3e32","type":"message","text":"You must have benchmarked `master` not `main` as it is impossible that the number of allocations is the same. Could you recheck please. Thank you!","user":"U8JAMQGQY","ts":"1615320588.314100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"22O","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You must have benchmarked "},{"type":"text","text":"master","style":{"code":true}},{"type":"text","text":" not "},{"type":"text","text":"main","style":{"code":true}},{"type":"text","text":" as it is impossible that the number of allocations is the same. Could you recheck please. Thank you!"}]}]}],"thread_ts":"1615231436.284700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"1bae3021-1b94-44fc-b846-44a072119e42","type":"message","text":"Also just for reproducibility what is the type of columns and do you have duplicates in the right table?","user":"U8JAMQGQY","ts":"1615321568.314300","team":"T68168MUP","edited":{"user":"U8JAMQGQY","ts":"1615321999.000000"},"blocks":[{"type":"rich_text","block_id":"Fbo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also just for reproducibility what is the type of columns and do you have duplicates in the right table?"}]}]}],"thread_ts":"1615231436.284700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"cbad8e56-398f-4591-bd72-7a8d88aa9465","type":"message","text":"I have run a benchmark on `Vector{String}` (which is a worst case for the new algorithm) and I get:\non 0.22.5 (after compilation)\n```julia&gt; df1 = DataFrame(id = string.(1:20*10^6), x=1:20*10^6);\n\njulia&gt; allowmissing!(df1, :id);\n\njulia&gt; df1.id[1:2:end] .= missing;\n\njulia&gt; df2 = DataFrame(id=string.(rand(1:20*10^6, 500_000)), y=1:500_000);\n\njulia&gt; @time leftjoin(df1, df2, on=:id, matchmissing=:equal);\n 26.274402 seconds (228 allocations: 1.988 GiB, 2.58% gc time)```\non `main` (after compilation):\n```julia&gt; df1 = DataFrame(id = string.(1:20*10^6), x=1:20*10^6);\n\njulia&gt; allowmissing!(df1, :id);\n\njulia&gt; df1.id[1:2:end] .= missing;\n\njulia&gt; df2 = DataFrame(id=string.(rand(1:20*10^6, 500_000)), y=1:500_000);\n\njulia&gt; @time leftjoin(df1, df2, on=:id, matchmissing=:equal);\n  2.444262 seconds (253 allocations: 686.812 MiB, 21.19% gc time)```\nbut maybe your data has a different structure?","user":"U8JAMQGQY","ts":"1615322423.314600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gJZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have run a benchmark on "},{"type":"text","text":"Vector{String}","style":{"code":true}},{"type":"text","text":" (which is a worst case for the new algorithm) and I get:\non 0.22.5 (after compilation)\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> df1 = DataFrame(id = string.(1:20*10^6), x=1:20*10^6);\n\njulia> allowmissing!(df1, :id);\n\njulia> df1.id[1:2:end] .= missing;\n\njulia> df2 = DataFrame(id=string.(rand(1:20*10^6, 500_000)), y=1:500_000);\n\njulia> @time leftjoin(df1, df2, on=:id, matchmissing=:equal);\n 26.274402 seconds (228 allocations: 1.988 GiB, 2.58% gc time)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"on "},{"type":"text","text":"main","style":{"code":true}},{"type":"text","text":" (after compilation):\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> df1 = DataFrame(id = string.(1:20*10^6), x=1:20*10^6);\n\njulia> allowmissing!(df1, :id);\n\njulia> df1.id[1:2:end] .= missing;\n\njulia> df2 = DataFrame(id=string.(rand(1:20*10^6, 500_000)), y=1:500_000);\n\njulia> @time leftjoin(df1, df2, on=:id, matchmissing=:equal);\n  2.444262 seconds (253 allocations: 686.812 MiB, 21.19% gc time)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"but maybe your data has a different structure?"}]}]}],"thread_ts":"1615231436.284700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"6c2e9a10-a3be-419d-939b-de4bc7cf9135","type":"message","text":"I will double check","user":"U7JQGPGCQ","ts":"1615323374.314800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cC+I","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I will double check"}]}]}],"thread_ts":"1615231436.284700","parent_user_id":"U8JAMQGQY","reactions":[{"name":"+1","users":["U8JAMQGQY"],"count":1}]},{"client_msg_id":"56ba2f9a-c043-45d9-8183-d5be91322330","type":"message","text":"Unfortunately the data is not public","user":"U7JQGPGCQ","ts":"1615323401.315000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"y2Tq4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Unfortunately the data is not public"}]}]}],"thread_ts":"1615231436.284700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"ee9ff941-7fb8-4e2b-b60c-13abdc2ce798","type":"message","text":"Okay <@U8JAMQGQY> you were right in that I must have screwed up the `main` `master` thing earlier - I've now benchmarked again and am indeed getting different allocation numbers. Unfortunately, there is not a uniform decrease in allocations, and in some cases there's quite an increase which overall leads to a significant performance regression for my use case. You will also see that the timings are quite variable though from run to run, so I'm not sure what to make of it (but clearly a script which runs for 5-10 minutes is hard to run over and over...)","user":"U7JQGPGCQ","ts":"1615373172.324700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5N6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Okay "},{"type":"user","user_id":"U8JAMQGQY"},{"type":"text","text":" you were right in that I must have screwed up the "},{"type":"text","text":"main","style":{"code":true}},{"type":"text","text":" "},{"type":"text","text":"master","style":{"code":true}},{"type":"text","text":" thing earlier - I've now benchmarked again and am indeed getting different allocation numbers. Unfortunately, there is not a uniform decrease in allocations, and in some cases there's quite an increase which overall leads to a significant performance regression for my use case. You will also see that the timings are quite variable though from run to run, so I'm not sure what to make of it (but clearly a script which runs for 5-10 minutes is hard to run over and over...)"}]}]}],"thread_ts":"1615231436.284700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"2cc3e78b-c25a-4d87-af7e-412116281b15","type":"message","text":"The summary is as follows:\n```SUMMARY - stable 1\n27 seconds (159.41 M allocations: 8.188 GiB, 18.85% gc time, 9.95% compilation time)\n17 seconds (1.61 M allocations: 2.655 GiB, 43.97% gc time, 8.46% compilation time)\n21 seconds (362 allocations: 2.809 GiB, 57.83% gc time)\n38 seconds (382 allocations: 2.709 GiB, 78.45% gc time)\n195 seconds (96.52 M allocations: 9.449 GiB, 53.89% gc time, 0.94% compilation time)\n42 seconds (798.09 k allocations: 3.732 GiB, 81.24% gc time, 1.18% compilation time)\n47 seconds (237.37 k allocations: 3.735 GiB, 84.00% gc time, 0.18% compilation time)\nTotal = 387 seconds\n\nSUMMARY - stable 2\n23 seconds (159.41 M allocations: 8.188 GiB, 15.87% gc time, 8.43% compilation time)\n12 seconds (1.61 M allocations: 2.655 GiB, 44.64% gc time, 6.45% compilation time)\n15 seconds (362 allocations: 2.809 GiB, 56.33% gc time)\n29 seconds (382 allocations: 2.709 GiB, 78.02% gc time)\n137 seconds (112.85 M allocations: 9.937 GiB, 64.42% gc time, 0.79% compilation time)\n50 seconds (797.35 k allocations: 3.732 GiB, 81.69% gc time, 1.14% compilation time)\n90 seconds (254.46 k allocations: 3.736 GiB, 91.71% gc time, 0.13% compilation time\nTotal = 356 seconds\n\nSUMMARY - main run 1\n25 seconds (161.79 M allocations: 7.093 GiB, 29.61% gc time, 18.17% compilation time)\n16 seconds (1.29 M allocations: 1.481 GiB, 72.85% gc time, 5.67% compilation time)\n15 seconds (394 allocations: 1.578 GiB, 76.90% gc time)\n20 seconds (413 allocations: 1.541 GiB, 84.30% gc time)\n358 seconds (127.71 M allocations: 17.706 GiB, 58.23% gc time, 7.30% compilation time)\n30 seconds (534.57 k allocations: 2.382 GiB, 82.66% gc time, 1.47% compilation time)\n68 seconds (156.82 k allocations: 2.400 GiB, 94.29% gc time, 0.18% compilation time)\nTotal = 532 seconds\n\nSUMMARY - main run 2\n25 seconds (161.79 M allocations: 7.093 GiB, 23.42% gc time, 9.13% compilation time)\n  7 seconds (1.29 M allocations: 1.481 GiB, 55.94% gc time, 9.43% compilation time)\n 20 seconds (394 allocations: 1.578 GiB, 82.31% gc time)\n 20 seconds (413 allocations: 1.541 GiB, 84.70% gc time)\n243 seconds (127.71 M allocations: 17.706 GiB, 44.50% gc time, 6.30% compilation time)\n 31 seconds (534.57 k allocations: 2.382 GiB, 82.60% gc time, 1.41% compilation time)\n 67 seconds (156.82 k allocations: 2.400 GiB, 94.51% gc time, 0.19% compilation time)\n Total = 413 seconds```","user":"U7JQGPGCQ","ts":"1615373190.324900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5a+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The summary is as follows:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"SUMMARY - stable 1\n27 seconds (159.41 M allocations: 8.188 GiB, 18.85% gc time, 9.95% compilation time)\n17 seconds (1.61 M allocations: 2.655 GiB, 43.97% gc time, 8.46% compilation time)\n21 seconds (362 allocations: 2.809 GiB, 57.83% gc time)\n38 seconds (382 allocations: 2.709 GiB, 78.45% gc time)\n195 seconds (96.52 M allocations: 9.449 GiB, 53.89% gc time, 0.94% compilation time)\n42 seconds (798.09 k allocations: 3.732 GiB, 81.24% gc time, 1.18% compilation time)\n47 seconds (237.37 k allocations: 3.735 GiB, 84.00% gc time, 0.18% compilation time)\nTotal = 387 seconds\n\nSUMMARY - stable 2\n23 seconds (159.41 M allocations: 8.188 GiB, 15.87% gc time, 8.43% compilation time)\n12 seconds (1.61 M allocations: 2.655 GiB, 44.64% gc time, 6.45% compilation time)\n15 seconds (362 allocations: 2.809 GiB, 56.33% gc time)\n29 seconds (382 allocations: 2.709 GiB, 78.02% gc time)\n137 seconds (112.85 M allocations: 9.937 GiB, 64.42% gc time, 0.79% compilation time)\n50 seconds (797.35 k allocations: 3.732 GiB, 81.69% gc time, 1.14% compilation time)\n90 seconds (254.46 k allocations: 3.736 GiB, 91.71% gc time, 0.13% compilation time\nTotal = 356 seconds\n\nSUMMARY - main run 1\n25 seconds (161.79 M allocations: 7.093 GiB, 29.61% gc time, 18.17% compilation time)\n16 seconds (1.29 M allocations: 1.481 GiB, 72.85% gc time, 5.67% compilation time)\n15 seconds (394 allocations: 1.578 GiB, 76.90% gc time)\n20 seconds (413 allocations: 1.541 GiB, 84.30% gc time)\n358 seconds (127.71 M allocations: 17.706 GiB, 58.23% gc time, 7.30% compilation time)\n30 seconds (534.57 k allocations: 2.382 GiB, 82.66% gc time, 1.47% compilation time)\n68 seconds (156.82 k allocations: 2.400 GiB, 94.29% gc time, 0.18% compilation time)\nTotal = 532 seconds\n\nSUMMARY - main run 2\n25 seconds (161.79 M allocations: 7.093 GiB, 23.42% gc time, 9.13% compilation time)\n  7 seconds (1.29 M allocations: 1.481 GiB, 55.94% gc time, 9.43% compilation time)\n 20 seconds (394 allocations: 1.578 GiB, 82.31% gc time)\n 20 seconds (413 allocations: 1.541 GiB, 84.70% gc time)\n243 seconds (127.71 M allocations: 17.706 GiB, 44.50% gc time, 6.30% compilation time)\n 31 seconds (534.57 k allocations: 2.382 GiB, 82.60% gc time, 1.41% compilation time)\n 67 seconds (156.82 k allocations: 2.400 GiB, 94.51% gc time, 0.19% compilation time)\n Total = 413 seconds"}]}]}],"thread_ts":"1615231436.284700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"3c4ba108-6342-4a7c-9414-4e0ce0b841d8","type":"message","text":"I will post below the full terminal output (removing the Julia welcome print and the output of `Pkg` operations for brevity) so you can see whether I did something funny in the way I derived these numbers. This also includes descriptions of each join (sizes of tables, eltypes of join columns, number of missings). The times printed here are just the output of `@time leftjoin(table1, table2, ...)` and should be the same as in the summary above:\n","user":"U7JQGPGCQ","ts":"1615373369.325100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+2H","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I will post below the full terminal output (removing the Julia welcome print and the output of "},{"type":"text","text":"Pkg","style":{"code":true}},{"type":"text","text":" operations for brevity) so you can see whether I did something funny in the way I derived these numbers. This also includes descriptions of each join (sizes of tables, eltypes of join columns, number of missings). The times printed here are just the output of "},{"type":"text","text":"@time leftjoin(table1, table2, ...)","style":{"code":true}},{"type":"text","text":" and should be the same as in the summary above:\n"}]}]}],"thread_ts":"1615231436.284700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"3c4ba108-6342-4a7c-9414-4e0ce0b841d8","type":"message","text":"```C:\\Users\\ngudat&gt;julia\n\n(@v1.6) pkg&gt; activate --temp\n  Activating new environment at `C:\\Users\\ngudat\\AppData\\Local\\Temp\\jl_HXbbjP\\Project.toml`\n\n(jl_HXbbjP) pkg&gt; add Arrow CSV DataFrames;\n\njulia&gt; include(\"C:\\\\Users\\\\ngudat\\\\Desktop\\\\test_joins.jl\")\nJoin: left table (18505941, 6), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 8666460 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 27 seconds (159.41 M allocations: 8.188 GiB, 18.85% gc time, 9.95% compilation time)\nJoin: left table (18505941, 7), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 8666359 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 17 seconds (1.61 M allocations: 2.655 GiB, 43.97% gc time, 8.46% compilation time)\nJoin: left table (18505941, 8), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 1968400 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 21 seconds (362 allocations: 2.809 GiB, 57.83% gc time)\nJoin: left table (18505941, 9), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 8042612 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 38 seconds (382 allocations: 2.709 GiB, 78.45% gc time)\nJoin: left table (16304796, 7), right table (18368865, 13)\non 2 variables: var1 is String, with 0 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n195 seconds (96.52 M allocations: 9.449 GiB, 53.89% gc time, 0.94% compilation time)\nJoin: left table (16305095, 18), right table (5607, 2)\non 1 variable: var1 is String, with 0 missing left, 0 missing right\n 42 seconds (798.09 k allocations: 3.732 GiB, 81.24% gc time, 1.18% compilation time)\nJoin: left table (16305095, 19), right table (2621, 2)\non 1 variable: var1 is Union{Missing, String}, with 178943 missing left, 0 missing right\n 47 seconds (237.37 k allocations: 3.735 GiB, 84.00% gc time, 0.18% compilation time)\n(16305095, 20)\n\njulia&gt; exit()\n\nC:\\Users\\ngudat&gt;julia\n\n(@v1.6) pkg&gt; activate --temp\n  Activating new environment at `C:\\Users\\ngudat\\AppData\\Local\\Temp\\jl_7WEGfB\\Project.toml`\n\n(jl_7WEGfB) pkg&gt; add Arrow CSV DataFrames\n\njulia&gt; include(\"C:\\\\Users\\\\ngudat\\\\Desktop\\\\test_joins.jl\")\nJoin: left table (18505941, 6), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 8666460 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 23 seconds (159.41 M allocations: 8.188 GiB, 15.87% gc time, 8.43% compilation time)\nJoin: left table (18505941, 7), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 8666359 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 12 seconds (1.61 M allocations: 2.655 GiB, 44.64% gc time, 6.45% compilation time)\nJoin: left table (18505941, 8), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 1968400 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 15 seconds (362 allocations: 2.809 GiB, 56.33% gc time)\nJoin: left table (18505941, 9), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 8042612 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 29 seconds (382 allocations: 2.709 GiB, 78.02% gc time)\nJoin: left table (16304796, 7), right table (18368865, 13)\non 2 variables: var1 is String, with 0 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n137 seconds (112.85 M allocations: 9.937 GiB, 64.42% gc time, 0.79% compilation time)\nJoin: left table (16305095, 18), right table (5607, 2)\non 1 variable: var1 is String, with 0 missing left, 0 missing right\n 50 seconds (797.35 k allocations: 3.732 GiB, 81.69% gc time, 1.14% compilation time)\nJoin: left table (16305095, 19), right table (2621, 2)\non 1 variable: var1 is Union{Missing, String}, with 178943 missing left, 0 missing right\n 90 seconds (254.46 k allocations: 3.736 GiB, 91.71% gc time, 0.13% compilation time\n(16305095, 20)\n\njulia&gt; exit()\n\nC:\\Users\\ngudat&gt;julia\n\n(@v1.6) pkg&gt; activate --temp\n  Activating new environment at `C:\\Users\\ngudat\\AppData\\Local\\Temp\\jl_OjG0IT\\Project.toml`\n\n(jl_OjG0IT) pkg&gt; add Arrow CSV DataFrames#main\n\njulia&gt; include(\"C:\\\\Users\\\\ngudat\\\\Desktop\\\\test_joins.jl\")\nJoin: left table (18505941, 6), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 8666460 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 25 seconds (161.79 M allocations: 7.093 GiB, 29.61% gc time, 18.17% compilation time)\nJoin: left table (18505941, 7), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 8666359 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 16 seconds (1.29 M allocations: 1.481 GiB, 72.85% gc time, 5.67% compilation time)\nJoin: left table (18505941, 8), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 1968400 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 15 seconds (394 allocations: 1.578 GiB, 76.90% gc time)\nJoin: left table (18505941, 9), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 8042612 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 20 seconds (413 allocations: 1.541 GiB, 84.30% gc time)\nJoin: left table (16304796, 7), right table (18368865, 13)\non 2 variables: var1 is String, with 0 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n358 seconds (127.71 M allocations: 17.706 GiB, 58.23% gc time, 7.30% compilation time)\nJoin: left table (16305095, 18), right table (5607, 2)\non 1 variable: var1 is String, with 0 missing left, 0 missing right\n 30 seconds (534.57 k allocations: 2.382 GiB, 82.66% gc time, 1.47% compilation time)\nJoin: left table (16305095, 19), right table (2621, 2)\non 1 variable: var1 is Union{Missing, String}, with 178943 missing left, 0 missing right\n 68 seconds (156.82 k allocations: 2.400 GiB, 94.29% gc time, 0.18% compilation time)\n(16305095, 20)\n\njulia&gt; exit()\n\nC:\\Users\\ngudat&gt;julia\n\n(@v1.6) pkg&gt; activate --temp\n  Activating new environment at `C:\\Users\\ngudat\\AppData\\Local\\Temp\\jl_98E88V\\Project.toml`\n\n(jl_98E88V) pkg&gt; add Arrow CSV DataFrames#main\n\njulia&gt; include(\"C:\\\\Users\\\\ngudat\\\\Desktop\\\\test_joins.jl\")\nJoin: left table (18505941, 6), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 8666460 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 25 seconds (161.79 M allocations: 7.093 GiB, 23.42% gc time, 9.13% compilation time)\nJoin: left table (18505941, 7), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 8666359 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n  7 seconds (1.29 M allocations: 1.481 GiB, 55.94% gc time, 9.43% compilation time)\nJoin: left table (18505941, 8), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 1968400 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 20 seconds (394 allocations: 1.578 GiB, 82.31% gc time)\nJoin: left table (18505941, 9), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 8042612 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 20 seconds (413 allocations: 1.541 GiB, 84.70% gc time)\nJoin: left table (16304796, 7), right table (18368865, 13)\non 2 variables: var1 is String, with 0 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n243 seconds (127.71 M allocations: 17.706 GiB, 44.50% gc time, 6.30% compilation time)\nJoin: left table (16305095, 18), right table (5607, 2)\non 1 variable: var1 is String, with 0 missing left, 0 missing right\n 31 seconds (534.57 k allocations: 2.382 GiB, 82.60% gc time, 1.41% compilation time)\nJoin: left table (16305095, 19), right table (2621, 2)\non 1 variable: var1 is Union{Missing, String}, with 178943 missing left, 0 missing right\n 67 seconds (156.82 k allocations: 2.400 GiB, 94.51% gc time, 0.19% compilation time)\n(16305095, 20)```","user":"U7JQGPGCQ","ts":"1615373369.325300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+2H-8c2m","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"C:\\Users\\ngudat>julia\n\n(@v1.6) pkg> activate --temp\n  Activating new environment at `C:\\Users\\ngudat\\AppData\\Local\\Temp\\jl_HXbbjP\\Project.toml`\n\n(jl_HXbbjP) pkg> add Arrow CSV DataFrames;\n\njulia> include(\"C:\\\\Users\\\\ngudat\\\\Desktop\\\\test_joins.jl\")\nJoin: left table (18505941, 6), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 8666460 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 27 seconds (159.41 M allocations: 8.188 GiB, 18.85% gc time, 9.95% compilation time)\nJoin: left table (18505941, 7), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 8666359 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 17 seconds (1.61 M allocations: 2.655 GiB, 43.97% gc time, 8.46% compilation time)\nJoin: left table (18505941, 8), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 1968400 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 21 seconds (362 allocations: 2.809 GiB, 57.83% gc time)\nJoin: left table (18505941, 9), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 8042612 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 38 seconds (382 allocations: 2.709 GiB, 78.45% gc time)\nJoin: left table (16304796, 7), right table (18368865, 13)\non 2 variables: var1 is String, with 0 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n195 seconds (96.52 M allocations: 9.449 GiB, 53.89% gc time, 0.94% compilation time)\nJoin: left table (16305095, 18), right table (5607, 2)\non 1 variable: var1 is String, with 0 missing left, 0 missing right\n 42 seconds (798.09 k allocations: 3.732 GiB, 81.24% gc time, 1.18% compilation time)\nJoin: left table (16305095, 19), right table (2621, 2)\non 1 variable: var1 is Union{Missing, String}, with 178943 missing left, 0 missing right\n 47 seconds (237.37 k allocations: 3.735 GiB, 84.00% gc time, 0.18% compilation time)\n(16305095, 20)\n\njulia> exit()\n\nC:\\Users\\ngudat>julia\n\n(@v1.6) pkg> activate --temp\n  Activating new environment at `C:\\Users\\ngudat\\AppData\\Local\\Temp\\jl_7WEGfB\\Project.toml`\n\n(jl_7WEGfB) pkg> add Arrow CSV DataFrames\n\njulia> include(\"C:\\\\Users\\\\ngudat\\\\Desktop\\\\test_joins.jl\")\nJoin: left table (18505941, 6), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 8666460 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 23 seconds (159.41 M allocations: 8.188 GiB, 15.87% gc time, 8.43% compilation time)\nJoin: left table (18505941, 7), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 8666359 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 12 seconds (1.61 M allocations: 2.655 GiB, 44.64% gc time, 6.45% compilation time)\nJoin: left table (18505941, 8), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 1968400 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 15 seconds (362 allocations: 2.809 GiB, 56.33% gc time)\nJoin: left table (18505941, 9), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 8042612 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 29 seconds (382 allocations: 2.709 GiB, 78.02% gc time)\nJoin: left table (16304796, 7), right table (18368865, 13)\non 2 variables: var1 is String, with 0 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n137 seconds (112.85 M allocations: 9.937 GiB, 64.42% gc time, 0.79% compilation time)\nJoin: left table (16305095, 18), right table (5607, 2)\non 1 variable: var1 is String, with 0 missing left, 0 missing right\n 50 seconds (797.35 k allocations: 3.732 GiB, 81.69% gc time, 1.14% compilation time)\nJoin: left table (16305095, 19), right table (2621, 2)\non 1 variable: var1 is Union{Missing, String}, with 178943 missing left, 0 missing right\n 90 seconds (254.46 k allocations: 3.736 GiB, 91.71% gc time, 0.13% compilation time\n(16305095, 20)\n\njulia> exit()\n\nC:\\Users\\ngudat>julia\n\n(@v1.6) pkg> activate --temp\n  Activating new environment at `C:\\Users\\ngudat\\AppData\\Local\\Temp\\jl_OjG0IT\\Project.toml`\n\n(jl_OjG0IT) pkg> add Arrow CSV DataFrames#main\n\njulia> include(\"C:\\\\Users\\\\ngudat\\\\Desktop\\\\test_joins.jl\")\nJoin: left table (18505941, 6), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 8666460 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 25 seconds (161.79 M allocations: 7.093 GiB, 29.61% gc time, 18.17% compilation time)\nJoin: left table (18505941, 7), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 8666359 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 16 seconds (1.29 M allocations: 1.481 GiB, 72.85% gc time, 5.67% compilation time)\nJoin: left table (18505941, 8), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 1968400 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 15 seconds (394 allocations: 1.578 GiB, 76.90% gc time)\nJoin: left table (18505941, 9), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 8042612 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 20 seconds (413 allocations: 1.541 GiB, 84.30% gc time)\nJoin: left table (16304796, 7), right table (18368865, 13)\non 2 variables: var1 is String, with 0 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n358 seconds (127.71 M allocations: 17.706 GiB, 58.23% gc time, 7.30% compilation time)\nJoin: left table (16305095, 18), right table (5607, 2)\non 1 variable: var1 is String, with 0 missing left, 0 missing right\n 30 seconds (534.57 k allocations: 2.382 GiB, 82.66% gc time, 1.47% compilation time)\nJoin: left table (16305095, 19), right table (2621, 2)\non 1 variable: var1 is Union{Missing, String}, with 178943 missing left, 0 missing right\n 68 seconds (156.82 k allocations: 2.400 GiB, 94.29% gc time, 0.18% compilation time)\n(16305095, 20)\n\njulia> exit()\n\nC:\\Users\\ngudat>julia\n\n(@v1.6) pkg> activate --temp\n  Activating new environment at `C:\\Users\\ngudat\\AppData\\Local\\Temp\\jl_98E88V\\Project.toml`\n\n(jl_98E88V) pkg> add Arrow CSV DataFrames#main\n\njulia> include(\"C:\\\\Users\\\\ngudat\\\\Desktop\\\\test_joins.jl\")\nJoin: left table (18505941, 6), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 8666460 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 25 seconds (161.79 M allocations: 7.093 GiB, 23.42% gc time, 9.13% compilation time)\nJoin: left table (18505941, 7), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 8666359 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n  7 seconds (1.29 M allocations: 1.481 GiB, 55.94% gc time, 9.43% compilation time)\nJoin: left table (18505941, 8), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 1968400 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 20 seconds (394 allocations: 1.578 GiB, 82.31% gc time)\nJoin: left table (18505941, 9), right table (574811, 3)\non 2 variables: var1 is Union{Missing, String}, with 8042612 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n 20 seconds (413 allocations: 1.541 GiB, 84.70% gc time)\nJoin: left table (16304796, 7), right table (18368865, 13)\non 2 variables: var1 is String, with 0 missing left, 0 missing right\nvar2 is String, with 0 missing left, 0 missing right\n243 seconds (127.71 M allocations: 17.706 GiB, 44.50% gc time, 6.30% compilation time)\nJoin: left table (16305095, 18), right table (5607, 2)\non 1 variable: var1 is String, with 0 missing left, 0 missing right\n 31 seconds (534.57 k allocations: 2.382 GiB, 82.60% gc time, 1.41% compilation time)\nJoin: left table (16305095, 19), right table (2621, 2)\non 1 variable: var1 is Union{Missing, String}, with 178943 missing left, 0 missing right\n 67 seconds (156.82 k allocations: 2.400 GiB, 94.51% gc time, 0.19% compilation time)\n(16305095, 20)"}]}]}],"thread_ts":"1615231436.284700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"04b7e850-98da-4dcc-9191-a64cfa68477a","type":"message","text":"An important question - I see you use Arrow.jl? Is this correct? Do you copy the data before joining or use the Arrow.jl-provided column types? If you use Arrow.jl-provided types could you re-run the tests when you copy them to be non-arrow vectors (just `copy` the data frames). The reason is that maybe the problem is related with Arrow.jl as we have not worked on performance of the types provided by it yet. Thank you! CC <@U681ELA87>","user":"U8JAMQGQY","ts":"1615374068.325500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"B=NRy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"An important question - I see you use Arrow.jl? Is this correct? Do you copy the data before joining or use the Arrow.jl-provided column types? If you use Arrow.jl-provided types could you re-run the tests when you copy them to be non-arrow vectors (just "},{"type":"text","text":"copy","style":{"code":true}},{"type":"text","text":" the data frames). The reason is that maybe the problem is related with Arrow.jl as we have not worked on performance of the types provided by it yet. Thank you! CC "},{"type":"user","user_id":"U681ELA87"}]}]}],"thread_ts":"1615231436.284700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"079d148d-3ed0-4231-8ce0-cc6f58fd259c","type":"message","text":"Your're correct, let me adjust this","user":"U7JQGPGCQ","ts":"1615377927.325700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=0sqz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Your're correct, let me adjust this"}]}]}],"thread_ts":"1615231436.284700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"572df238-4120-4506-b61d-cbeb25e2783c","type":"message","text":"Is `DataFrame(Arrow.Table(\"data.arrow\"), copycols = true)` the same as `copy(DataFrame(Arrow.Table(\"data.arrow\"))`?","user":"U7JQGPGCQ","ts":"1615378274.325900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"79Z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is "},{"type":"text","text":"DataFrame(Arrow.Table(\"data.arrow\"), copycols = true)","style":{"code":true}},{"type":"text","text":" the same as "},{"type":"text","text":"copy(DataFrame(Arrow.Table(\"data.arrow\"))","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1615231436.284700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"85f6a1c8-a8e5-4a9c-89d5-0a74d3b00da2","type":"message","text":"The other thing to note is that this is one long script which basically maxes out my memory after the second join already, so presumably I'm going to swap a lot when running the whole thing","user":"U7JQGPGCQ","ts":"1615378579.326200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"86pZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The other thing to note is that this is one long script which basically maxes out my memory after the second join already, so presumably I'm going to swap a lot when running the whole thing"}]}]}],"thread_ts":"1615231436.284700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"8a279a4e-4e37-41b2-9ae8-8911a3567d0f","type":"message","text":"No luck unfortunately:\n```SUMMARY - main run 3 (copy Arrow table)\n 18 seconds (3.97 M allocations: 2.392 GiB, 56.19% gc time, 16.19% compilation time)\n 35 seconds (968.12 k allocations: 1.463 GiB, 86.84% gc time, 2.37% compilation time)\n 44 seconds (394 allocations: 1.578 GiB, 89.52% gc time)\n 39 seconds (413 allocations: 1.541 GiB, 90.92% gc time)\n320 seconds (128.18 M allocations: 17.730 GiB, 44.76% gc time, 9.87% compilation time)\n 33 seconds (534.57 k allocations: 2.382 GiB, 83.76% gc time, 1.23% compilation time)\n 76 seconds (156.82 k allocations: 2.400 GiB, 94.98% gc time, 0.17% compilation time)\n\nSUMMARY - main run 4 (copy Arrow table)\n 14 seconds (3.97 M allocations: 2.392 GiB, 58.37% gc time, 14.34% compilation time)\n 28 seconds (968.12 k allocations: 1.463 GiB, 87.58% gc time, 1.91% compilation time)\n 41 seconds (394 allocations: 1.578 GiB, 90.32% gc time)\n 53 seconds (413 allocations: 1.541 GiB, 90.95% gc time)\n458 seconds (128.18 M allocations: 17.730 GiB, 44.61% gc time, 5.76% compilation time)\n 42 seconds (534.57 k allocations: 2.382 GiB, 85.72% gc time, 1.17% compilation time)\n 81 seconds (156.82 k allocations: 2.400 GiB, 94.66% gc time, 0.19% compilation time)```","user":"U7JQGPGCQ","ts":"1615382289.326400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xSV1d","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No luck unfortunately:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"SUMMARY - main run 3 (copy Arrow table)\n 18 seconds (3.97 M allocations: 2.392 GiB, 56.19% gc time, 16.19% compilation time)\n 35 seconds (968.12 k allocations: 1.463 GiB, 86.84% gc time, 2.37% compilation time)\n 44 seconds (394 allocations: 1.578 GiB, 89.52% gc time)\n 39 seconds (413 allocations: 1.541 GiB, 90.92% gc time)\n320 seconds (128.18 M allocations: 17.730 GiB, 44.76% gc time, 9.87% compilation time)\n 33 seconds (534.57 k allocations: 2.382 GiB, 83.76% gc time, 1.23% compilation time)\n 76 seconds (156.82 k allocations: 2.400 GiB, 94.98% gc time, 0.17% compilation time)\n\nSUMMARY - main run 4 (copy Arrow table)\n 14 seconds (3.97 M allocations: 2.392 GiB, 58.37% gc time, 14.34% compilation time)\n 28 seconds (968.12 k allocations: 1.463 GiB, 87.58% gc time, 1.91% compilation time)\n 41 seconds (394 allocations: 1.578 GiB, 90.32% gc time)\n 53 seconds (413 allocations: 1.541 GiB, 90.95% gc time)\n458 seconds (128.18 M allocations: 17.730 GiB, 44.61% gc time, 5.76% compilation time)\n 42 seconds (534.57 k allocations: 2.382 GiB, 85.72% gc time, 1.17% compilation time)\n 81 seconds (156.82 k allocations: 2.400 GiB, 94.66% gc time, 0.19% compilation time)"}]}]}],"thread_ts":"1615231436.284700","parent_user_id":"U8JAMQGQY"}]