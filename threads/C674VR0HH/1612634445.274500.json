[{"client_msg_id":"426eb5f4-6a27-4908-8fd6-4946335c78e5","type":"message","text":"I have a project keeping track of a large number of files grouped in two levels of directories (author and title within author).  Each content directory has a JSON file with the metadata including a unique Int64 key (the 13 digit ISBN).  For ease of creating summaries of the entries I use an SQLite database so I can prepare tables sorted by Author and Year, etc.\n\nOccasionally I run a Julia script to update the database table.  This uses `walkdir` and parses the `metadata.json` files then checks if the entry needs to be added to the table.  The ISBN column is primary key for the SQLite table.\n\nI don't think I am doing the checking very well at this point in that I extract the existing column of ISBNs in increasing order and use Julia's `searchsorted` to determine if the entry being examined is already in the table.  I could probably use the SQL statement \"INSERT OR IGNORE INTO ...\" and have SQLite do the work of checking for duplicates.  I also feel that I should prepare the statement with `SQLite.Stmt` and use `SQLite.bind` with a `NamedTuple` but I am not exactly sure how to go about that.  The definition of the table is attached.  Could someone show me what  the SQL for the INSERT statement and what the call to `SQLite.bind` should be?","user":"UBGRZ7FSP","ts":"1612634445.274500","team":"T68168MUP","edited":{"user":"UBGRZ7FSP","ts":"1612634596.000000"},"blocks":[{"type":"rich_text","block_id":"cgo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have a project keeping track of a large number of files grouped in two levels of directories (author and title within author).  Each content directory has a JSON file with the metadata including a unique Int64 key (the 13 digit ISBN).  For ease of creating summaries of the entries I use an SQLite database so I can prepare tables sorted by Author and Year, etc.\n\nOccasionally I run a Julia script to update the database table.  This uses "},{"type":"text","text":"walkdir","style":{"code":true}},{"type":"text","text":" and parses the "},{"type":"text","text":"metadata.json","style":{"code":true}},{"type":"text","text":" files then checks if the entry needs to be added to the table.  The ISBN column is primary key for the SQLite table.\n\nI don't think I am doing the checking very well at this point in that I extract the existing column of ISBNs in increasing order and use Julia's "},{"type":"text","text":"searchsorted","style":{"code":true}},{"type":"text","text":" to determine if the entry being examined is already in the table.  I could probably use the SQL statement \"INSERT OR IGNORE INTO ...\" and have SQLite do the work of checking for duplicates.  I also feel that I should prepare the statement with "},{"type":"text","text":"SQLite.Stmt","style":{"code":true}},{"type":"text","text":" and use "},{"type":"text","text":"SQLite.bind","style":{"code":true}},{"type":"text","text":" with a "},{"type":"text","text":"NamedTuple","style":{"code":true}},{"type":"text","text":" but I am not exactly sure how to go about that.  The definition of the table is attached.  Could someone show me what  the SQL for the INSERT statement and what the call to "},{"type":"text","text":"SQLite.bind","style":{"code":true}},{"type":"text","text":" should be?"}]}]}],"thread_ts":"1612634445.274500","reply_count":6,"reply_users_count":2,"latest_reply":"1612638473.276700","reply_users":["UH24GRBLL","UBGRZ7FSP"],"subscribed":false},{"client_msg_id":"3d27f094-0123-470f-8d26-7d769358709d","type":"message","text":"```INSERT OR IGNORE INTO Audiobooks VALUES (?,?,?,?,?,?)```\nas the statement/string","user":"UH24GRBLL","ts":"1612636430.275300","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1612636435.000000"},"blocks":[{"type":"rich_text","block_id":"hjGk","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"INSERT OR IGNORE INTO Audiobooks VALUES (?,?,?,?,?,?)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"as the statement/string"}]}]}],"thread_ts":"1612634445.274500","parent_user_id":"UBGRZ7FSP"},{"client_msg_id":"963ee9d6-fe8f-466f-a466-fcbdc66c33a0","type":"message","text":"if my SQL isn't too rusty","user":"UH24GRBLL","ts":"1612636448.275600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+K7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if my SQL isn't too rusty"}]}]}],"thread_ts":"1612634445.274500","parent_user_id":"UBGRZ7FSP"},{"client_msg_id":"9f0a6d8d-8ee1-443b-95fb-64522d47bfb4","type":"message","text":"if you already have the DB handle, you'd create that statement using `stmt = SQLite.Stmt(db, &lt;query-string-from-above&gt;)` and then do `DBInterface.execute(stmt, &lt;collection of values&gt;)`","user":"UH24GRBLL","ts":"1612636535.275800","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1612636539.000000"},"blocks":[{"type":"rich_text","block_id":"72j1R","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you already have the DB handle, you'd create that statement using "},{"type":"text","text":"stmt = SQLite.Stmt(db, <query-string-from-above>)","style":{"code":true}},{"type":"text","text":" and then do "},{"type":"text","text":"DBInterface.execute(stmt, <collection of values>)","style":{"code":true}}]}]}],"thread_ts":"1612634445.274500","parent_user_id":"UBGRZ7FSP"},{"client_msg_id":"cf674036-1b65-4bd6-a4db-571ab325dcae","type":"message","text":"it's best to persist the `stmt` during the duration of the program, that way SQLite will only have to compile the query once","user":"UH24GRBLL","ts":"1612636842.276100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mx3i","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it's best to persist the "},{"type":"text","text":"stmt","style":{"code":true}},{"type":"text","text":" during the duration of the program, that way SQLite will only have to compile the query once"}]}]}],"thread_ts":"1612634445.274500","parent_user_id":"UBGRZ7FSP"},{"client_msg_id":"0629a24a-1ba9-41a2-ab54-e387b4e95ac4","type":"message","text":"<https://juliadatabases.github.io/SQLite.jl/stable/#High-level-interface-1>  for more info","user":"UH24GRBLL","ts":"1612637129.276400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"1Z5s7","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://juliadatabases.github.io/SQLite.jl/stable/#High-level-interface-1"},{"type":"text","text":"  for more info"}]}]}],"thread_ts":"1612634445.274500","parent_user_id":"UBGRZ7FSP"},{"client_msg_id":"f30eb839-c497-418e-a02b-d7caaa87f281","type":"message","text":"Thanks, that worked fine.","user":"UBGRZ7FSP","ts":"1612638473.276700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zUmIv","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks, that worked fine."}]}]}],"thread_ts":"1612634445.274500","parent_user_id":"UBGRZ7FSP"}]