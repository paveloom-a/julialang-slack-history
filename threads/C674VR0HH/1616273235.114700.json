[{"client_msg_id":"42618c2d-fb35-4609-931c-4c9081839af2","type":"message","text":"<@UBF9YRB6H> some time ago you had this...\n`@where(flights, (:month .== 1) | (:month .== 2))` as an example of an `or` clause. Is this syntax still supported?","user":"UUYRZ3LU8","ts":"1616273235.114700","team":"T68168MUP","edited":{"user":"UUYRZ3LU8","ts":"1616273245.000000"},"blocks":[{"type":"rich_text","block_id":"opY6l","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UBF9YRB6H"},{"type":"text","text":" some time ago you had this...\n"},{"type":"text","text":"@where(flights, (:month .== 1) | (:month .== 2))","style":{"code":true}},{"type":"text","text":" as an example of an "},{"type":"text","text":"or","style":{"code":true}},{"type":"text","text":" clause. Is this syntax still supported?"}]}]}],"thread_ts":"1616273235.114700","reply_count":22,"reply_users_count":3,"latest_reply":"1616277096.119500","reply_users":["UBF9YRB6H","UH24GRBLL","UUYRZ3LU8"],"subscribed":false},{"type":"message","subtype":"thread_broadcast","text":"I don't think there is a vectorized `or` that would work for that use-case, actually. it's a shortcoming that we should fix.\n\nhere is something that will have the behavior you want\n\n```julia&gt; function ⩔(x, y) # \\Or\n       if x === missing || y === missing \n           return false\n       else\n           x || y\n       end\n       end\n⩔ (generic function with 1 method)\n\njulia&gt; [true] .⩔ [false]\n1-element BitArray{1}:\n 1```\nThis seems like an embarrassing absence in the ecosystem. Maybe I'm missing an obvious solution? In particular, you should be able to do `x .|| y`, but you can't. Should I file an issue in base?","user":"UBF9YRB6H","ts":"1616274463.114900","thread_ts":"1616273235.114700","root":{"client_msg_id":"42618c2d-fb35-4609-931c-4c9081839af2","type":"message","text":"<@UBF9YRB6H> some time ago you had this...\n`@where(flights, (:month .== 1) | (:month .== 2))` as an example of an `or` clause. Is this syntax still supported?","user":"UUYRZ3LU8","ts":"1616273235.114700","team":"T68168MUP","edited":{"user":"UUYRZ3LU8","ts":"1616273245.000000"},"blocks":[{"type":"rich_text","block_id":"opY6l","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UBF9YRB6H"},{"type":"text","text":" some time ago you had this...\n"},{"type":"text","text":"@where(flights, (:month .== 1) | (:month .== 2))","style":{"code":true}},{"type":"text","text":" as an example of an "},{"type":"text","text":"or","style":{"code":true}},{"type":"text","text":" clause. Is this syntax still supported?"}]}]}],"thread_ts":"1616273235.114700","reply_count":22,"reply_users_count":3,"latest_reply":"1616277096.119500","reply_users":["UBF9YRB6H","UH24GRBLL","UUYRZ3LU8"],"subscribed":false},"blocks":[{"type":"rich_text","block_id":"tK2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't think there is a vectorized "},{"type":"text","text":"or","style":{"code":true}},{"type":"text","text":" that would work for that use-case, actually. it's a shortcoming that we should fix.\n\nhere is something that will have the behavior you want\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function ⩔(x, y) # \\Or\n       if x === missing || y === missing \n           return false\n       else\n           x || y\n       end\n       end\n⩔ (generic function with 1 method)\n\njulia> [true] .⩔ [false]\n1-element BitArray{1}:\n 1"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nThis seems like an embarrassing absence in the ecosystem. Maybe I'm missing an obvious solution? In particular, you should be able to do "},{"type":"text","text":"x .|| y","style":{"code":true}},{"type":"text","text":", but you can't. Should I file an issue in base?"}]}]}],"client_msg_id":"974c5b72-280a-4851-9025-fcdcf91a0366"},{"client_msg_id":"c862d8e2-1a72-49bb-96ea-02a78123fbbd","type":"message","text":"`.||` doesn't exist because it's not well defined how it should short circuit","user":"UH24GRBLL","ts":"1616275498.115300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7lAtK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":".||","style":{"code":true}},{"type":"text","text":" doesn't exist because it's not well defined how it should short circuit"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"db15c541-5bf5-4ef8-b0d9-d5aa7f0b219c","type":"message","text":"Could you expand?","user":"UBF9YRB6H","ts":"1616275525.115500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"632","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Could you expand?"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"a3310953-0062-4a06-a7ca-1b6f208d0023","type":"message","text":"Thank you <@UBF9YRB6H>. Ended up building a janky set that covers the exclusions and using `∉`. The function you posted is a better approach","user":"UUYRZ3LU8","ts":"1616275619.115700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p7pQM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thank you "},{"type":"user","user_id":"UBF9YRB6H"},{"type":"text","text":". Ended up building a janky set that covers the exclusions and using "},{"type":"text","text":"∉","style":{"code":true}},{"type":"text","text":". The function you posted is a better approach"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"b852b8f1-a7ca-40f2-92d9-4652fb494b64","type":"message","text":"`g() || f()` - execution depends on the return value of `g()` - if you broadcast that, the right hand side will always execute anyway","user":"UH24GRBLL","ts":"1616275654.115900","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1616275665.000000"},"blocks":[{"type":"rich_text","block_id":"H8PG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"g() || f()","style":{"code":true}},{"type":"text","text":" - execution depends on the return value of "},{"type":"text","text":"g()","style":{"code":true}},{"type":"text","text":" - if you broadcast that, the right hand side will always execute anyway"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"49d3d902-842c-4add-80da-d5bf63a3a89f","type":"message","text":"and if the RHS is some more complicated call, you could get the situation that `f()` is executed for some inputs and not others","user":"UH24GRBLL","ts":"1616275713.116200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rxPuY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and if the RHS is some more complicated call, you could get the situation that "},{"type":"text","text":"f()","style":{"code":true}},{"type":"text","text":" is executed for some inputs and not others"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"916d7e77-d8df-4042-9300-70f9583088bb","type":"message","text":"there was an issue (or discourse thread) about this somewhat recently, but I can't find it right now","user":"UH24GRBLL","ts":"1616275727.116400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iPelU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there was an issue (or discourse thread) about this somewhat recently, but I can't find it right now"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"b151f1df-5bc8-4845-913a-b0f65401786d","type":"message","text":"ah i see.\n\nThis makes sense.\n\nI feel like\n\n1. Broadcastable bitwise-like operators (like the \\Or above)\n2. A lazy if-else that plays well with missings\n\nAre important things to add to the ecosystem in some way.","user":"UBF9YRB6H","ts":"1616275781.116600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O5V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah i see.\n\nThis makes sense.\n\nI feel like\n\n1. Broadcastable bitwise-like operators (like the \\Or above)\n2. A lazy if-else that plays well with missings\n\nAre important things to add to the ecosystem in some way."}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"7152bd02-bed5-4f04-a3c0-c1c3c0ad3b8c","type":"message","text":"you're also not the first to think of that <https://github.com/JuliaLang/julia/issues/13266>","user":"UH24GRBLL","ts":"1616275923.116800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mvB48","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you're also not the first to think of that "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/13266"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"7fe2b659-78cf-443c-ace2-ecb09fa74ff5","type":"message","text":"also <https://github.com/JuliaLang/julia/issues/17472>","user":"UH24GRBLL","ts":"1616275949.117000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3qEr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"also "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/17472"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"4b3d0e9d-b4af-4980-bc56-907a7d422ccb","type":"message","text":"Thanks! Had trouble searching for these","user":"UBF9YRB6H","ts":"1616276038.117200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3Tq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks! Had trouble searching for these"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"6da60051-28de-435e-a0e2-f198939ec43f","type":"message","text":"TL;DR is that the semantics of `&amp;&amp;` and `||` make it hard/weird to alias them to single character things","user":"UH24GRBLL","ts":"1616276082.117400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wNR+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"TL;DR is that the semantics of "},{"type":"text","text":"&&","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"||","style":{"code":true}},{"type":"text","text":" make it hard/weird to alias them to single character things"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"828c8291-6e12-48f0-97a4-9aab88516cd8","type":"message","text":"so it's better to let users be explicit about which exact behaviour they want by forcing them to write a function instead","user":"UH24GRBLL","ts":"1616276108.117600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZKfn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so it's better to let users be explicit about which exact behaviour they want by forcing them to write a function instead"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"ee82b9cf-f997-4505-8592-8ca15428ea6a","type":"message","text":"not to mention that different domain often have different meanings (which don't short circuit) for the most common alternative unicode characters","user":"UH24GRBLL","ts":"1616276140.117800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gtJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not to mention that different domain often have different meanings (which don't short circuit) for the most common alternative unicode characters"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"b49ecc5e-31bd-4d47-a221-a1f9da4a2a4c","type":"message","text":"yeah, but the whole point of DataFramesMeta is to get around writing functions all the time. So at least in this context I would like to be opinionated about it","user":"UBF9YRB6H","ts":"1616276154.118000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Jw6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, but the whole point of DataFramesMeta is to get around writing functions all the time. So at least in this context I would like to be opinionated about it"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"0c1c8c8d-2d9e-41a0-9df4-492c0e8b218f","type":"message","text":"I think `\\And` and `\\Or` is a good solution, but I don't like relying on unicode. And we either would have to do `missing -&gt; false` or rely on some sort of wrapper function, which gets rid of the ability to do infix operators.","user":"UBF9YRB6H","ts":"1616276225.118200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hO2T9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think "},{"type":"text","text":"\\And","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"\\Or","style":{"code":true}},{"type":"text","text":" is a good solution, but I don't like relying on unicode. And we either would have to do "},{"type":"text","text":"missing -> false","style":{"code":true}},{"type":"text","text":" or rely on some sort of wrapper function, which gets rid of the ability to do infix operators."}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"ef1a092c-3f8c-4416-a4b3-8e5ef5b8423f","type":"message","text":"These semantics are very hard, and I don't have any good solutions that are intuitive for the user. This is close, but still not there.\n\n```julia&gt; df = DataFrame(a = [1, 2, missing], b = [3, missing, 4])\n3×2 DataFrame\n Row │ a        b       \n     │ Int64?   Int64?  \n─────┼──────────────────\n   1 │       1        3\n   2 │       2  missing \n   3 │ missing        4\n\njulia&gt; function ⩔(x, y)\n       if x === missing || y === missing \n           return false\n       else\n           x || y\n       end\n       end;\n\njulia&gt; function ⩓(x, y)\n       if x === missing || y === missing \n           return false\n       else\n           x ⩓ y\n       end\n       end;\n\njulia&gt; @where(df, (:a .== 1) .⩔ (:b .== 4))\n1×2 DataFrame\n Row │ a       b      \n     │ Int64?  Int64? \n─────┼────────────────\n   1 │      1       3```","user":"UBF9YRB6H","ts":"1616276680.118400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yvX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"These semantics are very hard, and I don't have any good solutions that are intuitive for the user. This is close, but still not there.\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> df = DataFrame(a = [1, 2, missing], b = [3, missing, 4])\n3×2 DataFrame\n Row │ a        b       \n     │ Int64?   Int64?  \n─────┼──────────────────\n   1 │       1        3\n   2 │       2  missing \n   3 │ missing        4\n\njulia> function ⩔(x, y)\n       if x === missing || y === missing \n           return false\n       else\n           x || y\n       end\n       end;\n\njulia> function ⩓(x, y)\n       if x === missing || y === missing \n           return false\n       else\n           x ⩓ y\n       end\n       end;\n\njulia> @where(df, (:a .== 1) .⩔ (:b .== 4))\n1×2 DataFrame\n Row │ a       b      \n     │ Int64?  Int64? \n─────┼────────────────\n   1 │      1       3"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"6d941510-2a17-4b33-b286-363987ad9ab5","type":"message","text":"I really don't want the user to have to write this all the time\n\n```\njulia&gt; @where(df, coalesce.((:a .== 1), false) .⩔ coalesce.((:b .== 4), false))\n2×2 DataFrame\n Row │ a        b      \n     │ Int64?   Int64? \n─────┼─────────────────\n   1 │       1       3\n   2 │ missing       4```","user":"UBF9YRB6H","ts":"1616276739.118600","team":"T68168MUP","edited":{"user":"UBF9YRB6H","ts":"1616276768.000000"},"blocks":[{"type":"rich_text","block_id":"N+lFi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I really don't want the user to have to write this all the time\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"\njulia> @where(df, coalesce.((:a .== 1), false) .⩔ coalesce.((:b .== 4), false))\n2×2 DataFrame\n Row │ a        b      \n     │ Int64?   Int64? \n─────┼─────────────────\n   1 │       1       3\n   2 │ missing       4"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"e37a8032-5a9d-4c01-b646-a570e6f0313a","type":"message","text":"if it's a macro, you can do the replacement for them, I guess?","user":"UH24GRBLL","ts":"1616276826.118900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9veP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if it's a macro, you can do the replacement for them, I guess?"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"4e988d65-8e3a-4e9d-b3b9-7577815ae368","type":"message","text":"that's what Volcanito.jl does, and I'm scared to do something that extensive. It seems fragile.","user":"UBF9YRB6H","ts":"1616276883.119100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iJB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's what Volcanito.jl does, and I'm scared to do something that extensive. It seems fragile."}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"ad87c8a8-08a0-432c-98b8-0dcbfe80a2ef","type":"message","text":"Wait actually I didnt do the logic right for `\\Or` so it actually might all work","user":"UBF9YRB6H","ts":"1616276997.119300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PY9V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Wait actually I didnt do the logic right for "},{"type":"text","text":"\\Or","style":{"code":true}},{"type":"text","text":" so it actually might all work"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"9448f5b7-5c4c-4a17-9141-386c3c3849a9","type":"message","text":"```julia&gt; function ⩔(x, y)\n           if x === missing &amp;&amp; y === missing\n               return false \n           elseif x === missing &amp;&amp; y === true\n               return true\n           elseif x === true &amp;&amp; y === missing\n               return true\n           else\n               return x || y \n           end\n       end\n⩔ (generic function with 1 method)\n\njulia&gt; @where(df, (:a .== 1) .⩔ (:b .== 4))\n2×2 DataFrame\n Row │ a        b      \n     │ Int64?   Int64? \n─────┼─────────────────\n   1 │       1       3\n   2 │ missing       4```\nThis seems right.\n\nIf only there were a way to add arbitrary infix operators that weren't unicode.","user":"UBF9YRB6H","ts":"1616277096.119500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c+qM","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function ⩔(x, y)\n           if x === missing && y === missing\n               return false \n           elseif x === missing && y === true\n               return true\n           elseif x === true && y === missing\n               return true\n           else\n               return x || y \n           end\n       end\n⩔ (generic function with 1 method)\n\njulia> @where(df, (:a .== 1) .⩔ (:b .== 4))\n2×2 DataFrame\n Row │ a        b      \n     │ Int64?   Int64? \n─────┼─────────────────\n   1 │       1       3\n   2 │ missing       4"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nThis seems right.\n\nIf only there were a way to add arbitrary infix operators that weren't unicode."}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8","reactions":[{"name":"pray","users":["UUYRZ3LU8"],"count":1}]}]