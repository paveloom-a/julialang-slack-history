[{"client_msg_id":"42618c2d-fb35-4609-931c-4c9081839af2","type":"message","text":"<@UBF9YRB6H> some time ago you had this...\n`@where(flights, (:month .== 1) | (:month .== 2))` as an example of an `or` clause. Is this syntax still supported?","user":"UUYRZ3LU8","ts":"1616273235.114700","team":"T68168MUP","edited":{"user":"UUYRZ3LU8","ts":"1616273245.000000"},"blocks":[{"type":"rich_text","block_id":"opY6l","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UBF9YRB6H"},{"type":"text","text":" some time ago you had this...\n"},{"type":"text","text":"@where(flights, (:month .== 1) | (:month .== 2))","style":{"code":true}},{"type":"text","text":" as an example of an "},{"type":"text","text":"or","style":{"code":true}},{"type":"text","text":" clause. Is this syntax still supported?"}]}]}],"thread_ts":"1616273235.114700","reply_count":57,"reply_users_count":5,"latest_reply":"1616432914.172300","reply_users":["UBF9YRB6H","UH24GRBLL","UUYRZ3LU8","UK1BNFHFV","U67431ELR"],"is_locked":false,"subscribed":false},{"type":"message","subtype":"thread_broadcast","text":"I don't think there is a vectorized `or` that would work for that use-case, actually. it's a shortcoming that we should fix.\n\nhere is something that will have the behavior you want\n\n```julia&gt; function ⩔(x, y) # \\Or\n       if x === missing || y === missing \n           return false\n       else\n           x || y\n       end\n       end\n⩔ (generic function with 1 method)\n\njulia&gt; [true] .⩔ [false]\n1-element BitArray{1}:\n 1```\nThis seems like an embarrassing absence in the ecosystem. Maybe I'm missing an obvious solution? In particular, you should be able to do `x .|| y`, but you can't. Should I file an issue in base?","user":"UBF9YRB6H","ts":"1616274463.114900","thread_ts":"1616273235.114700","root":{"client_msg_id":"42618c2d-fb35-4609-931c-4c9081839af2","type":"message","text":"<@UBF9YRB6H> some time ago you had this...\n`@where(flights, (:month .== 1) | (:month .== 2))` as an example of an `or` clause. Is this syntax still supported?","user":"UUYRZ3LU8","ts":"1616273235.114700","team":"T68168MUP","edited":{"user":"UUYRZ3LU8","ts":"1616273245.000000"},"blocks":[{"type":"rich_text","block_id":"opY6l","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UBF9YRB6H"},{"type":"text","text":" some time ago you had this...\n"},{"type":"text","text":"@where(flights, (:month .== 1) | (:month .== 2))","style":{"code":true}},{"type":"text","text":" as an example of an "},{"type":"text","text":"or","style":{"code":true}},{"type":"text","text":" clause. Is this syntax still supported?"}]}]}],"thread_ts":"1616273235.114700","reply_count":57,"reply_users_count":5,"latest_reply":"1616432914.172300","reply_users":["UBF9YRB6H","UH24GRBLL","UUYRZ3LU8","UK1BNFHFV","U67431ELR"],"is_locked":false,"subscribed":false},"blocks":[{"type":"rich_text","block_id":"tK2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't think there is a vectorized "},{"type":"text","text":"or","style":{"code":true}},{"type":"text","text":" that would work for that use-case, actually. it's a shortcoming that we should fix.\n\nhere is something that will have the behavior you want\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function ⩔(x, y) # \\Or\n       if x === missing || y === missing \n           return false\n       else\n           x || y\n       end\n       end\n⩔ (generic function with 1 method)\n\njulia> [true] .⩔ [false]\n1-element BitArray{1}:\n 1"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nThis seems like an embarrassing absence in the ecosystem. Maybe I'm missing an obvious solution? In particular, you should be able to do "},{"type":"text","text":"x .|| y","style":{"code":true}},{"type":"text","text":", but you can't. Should I file an issue in base?"}]}]}],"client_msg_id":"974c5b72-280a-4851-9025-fcdcf91a0366"},{"client_msg_id":"c862d8e2-1a72-49bb-96ea-02a78123fbbd","type":"message","text":"`.||` doesn't exist because it's not well defined how it should short circuit","user":"UH24GRBLL","ts":"1616275498.115300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"7lAtK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":".||","style":{"code":true}},{"type":"text","text":" doesn't exist because it's not well defined how it should short circuit"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"db15c541-5bf5-4ef8-b0d9-d5aa7f0b219c","type":"message","text":"Could you expand?","user":"UBF9YRB6H","ts":"1616275525.115500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"632","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Could you expand?"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"a3310953-0062-4a06-a7ca-1b6f208d0023","type":"message","text":"Thank you <@UBF9YRB6H>. Ended up building a janky set that covers the exclusions and using `∉`. The function you posted is a better approach","user":"UUYRZ3LU8","ts":"1616275619.115700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"p7pQM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thank you "},{"type":"user","user_id":"UBF9YRB6H"},{"type":"text","text":". Ended up building a janky set that covers the exclusions and using "},{"type":"text","text":"∉","style":{"code":true}},{"type":"text","text":". The function you posted is a better approach"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"b852b8f1-a7ca-40f2-92d9-4652fb494b64","type":"message","text":"`g() || f()` - execution depends on the return value of `g()` - if you broadcast that, the right hand side will always execute anyway","user":"UH24GRBLL","ts":"1616275654.115900","team":"T68168MUP","edited":{"user":"UH24GRBLL","ts":"1616275665.000000"},"blocks":[{"type":"rich_text","block_id":"H8PG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"g() || f()","style":{"code":true}},{"type":"text","text":" - execution depends on the return value of "},{"type":"text","text":"g()","style":{"code":true}},{"type":"text","text":" - if you broadcast that, the right hand side will always execute anyway"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"49d3d902-842c-4add-80da-d5bf63a3a89f","type":"message","text":"and if the RHS is some more complicated call, you could get the situation that `f()` is executed for some inputs and not others","user":"UH24GRBLL","ts":"1616275713.116200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rxPuY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and if the RHS is some more complicated call, you could get the situation that "},{"type":"text","text":"f()","style":{"code":true}},{"type":"text","text":" is executed for some inputs and not others"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"916d7e77-d8df-4042-9300-70f9583088bb","type":"message","text":"there was an issue (or discourse thread) about this somewhat recently, but I can't find it right now","user":"UH24GRBLL","ts":"1616275727.116400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iPelU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"there was an issue (or discourse thread) about this somewhat recently, but I can't find it right now"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"b151f1df-5bc8-4845-913a-b0f65401786d","type":"message","text":"ah i see.\n\nThis makes sense.\n\nI feel like\n\n1. Broadcastable bitwise-like operators (like the \\Or above)\n2. A lazy if-else that plays well with missings\n\nAre important things to add to the ecosystem in some way.","user":"UBF9YRB6H","ts":"1616275781.116600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"O5V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah i see.\n\nThis makes sense.\n\nI feel like\n\n1. Broadcastable bitwise-like operators (like the \\Or above)\n2. A lazy if-else that plays well with missings\n\nAre important things to add to the ecosystem in some way."}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"7152bd02-bed5-4f04-a3c0-c1c3c0ad3b8c","type":"message","text":"you're also not the first to think of that <https://github.com/JuliaLang/julia/issues/13266>","user":"UH24GRBLL","ts":"1616275923.116800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mvB48","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you're also not the first to think of that "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/13266"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"7fe2b659-78cf-443c-ace2-ecb09fa74ff5","type":"message","text":"also <https://github.com/JuliaLang/julia/issues/17472>","user":"UH24GRBLL","ts":"1616275949.117000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3qEr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"also "},{"type":"link","url":"https://github.com/JuliaLang/julia/issues/17472"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"4b3d0e9d-b4af-4980-bc56-907a7d422ccb","type":"message","text":"Thanks! Had trouble searching for these","user":"UBF9YRB6H","ts":"1616276038.117200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3Tq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thanks! Had trouble searching for these"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"6da60051-28de-435e-a0e2-f198939ec43f","type":"message","text":"TL;DR is that the semantics of `&amp;&amp;` and `||` make it hard/weird to alias them to single character things","user":"UH24GRBLL","ts":"1616276082.117400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wNR+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"TL;DR is that the semantics of "},{"type":"text","text":"&&","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"||","style":{"code":true}},{"type":"text","text":" make it hard/weird to alias them to single character things"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"828c8291-6e12-48f0-97a4-9aab88516cd8","type":"message","text":"so it's better to let users be explicit about which exact behaviour they want by forcing them to write a function instead","user":"UH24GRBLL","ts":"1616276108.117600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZKfn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so it's better to let users be explicit about which exact behaviour they want by forcing them to write a function instead"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"ee82b9cf-f997-4505-8592-8ca15428ea6a","type":"message","text":"not to mention that different domain often have different meanings (which don't short circuit) for the most common alternative unicode characters","user":"UH24GRBLL","ts":"1616276140.117800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gtJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"not to mention that different domain often have different meanings (which don't short circuit) for the most common alternative unicode characters"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"b49ecc5e-31bd-4d47-a221-a1f9da4a2a4c","type":"message","text":"yeah, but the whole point of DataFramesMeta is to get around writing functions all the time. So at least in this context I would like to be opinionated about it","user":"UBF9YRB6H","ts":"1616276154.118000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Jw6","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, but the whole point of DataFramesMeta is to get around writing functions all the time. So at least in this context I would like to be opinionated about it"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"0c1c8c8d-2d9e-41a0-9df4-492c0e8b218f","type":"message","text":"I think `\\And` and `\\Or` is a good solution, but I don't like relying on unicode. And we either would have to do `missing -&gt; false` or rely on some sort of wrapper function, which gets rid of the ability to do infix operators.","user":"UBF9YRB6H","ts":"1616276225.118200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"hO2T9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think "},{"type":"text","text":"\\And","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"\\Or","style":{"code":true}},{"type":"text","text":" is a good solution, but I don't like relying on unicode. And we either would have to do "},{"type":"text","text":"missing -> false","style":{"code":true}},{"type":"text","text":" or rely on some sort of wrapper function, which gets rid of the ability to do infix operators."}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"ef1a092c-3f8c-4416-a4b3-8e5ef5b8423f","type":"message","text":"These semantics are very hard, and I don't have any good solutions that are intuitive for the user. This is close, but still not there.\n\n```julia&gt; df = DataFrame(a = [1, 2, missing], b = [3, missing, 4])\n3×2 DataFrame\n Row │ a        b       \n     │ Int64?   Int64?  \n─────┼──────────────────\n   1 │       1        3\n   2 │       2  missing \n   3 │ missing        4\n\njulia&gt; function ⩔(x, y)\n       if x === missing || y === missing \n           return false\n       else\n           x || y\n       end\n       end;\n\njulia&gt; function ⩓(x, y)\n       if x === missing || y === missing \n           return false\n       else\n           x ⩓ y\n       end\n       end;\n\njulia&gt; @where(df, (:a .== 1) .⩔ (:b .== 4))\n1×2 DataFrame\n Row │ a       b      \n     │ Int64?  Int64? \n─────┼────────────────\n   1 │      1       3```","user":"UBF9YRB6H","ts":"1616276680.118400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yvX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"These semantics are very hard, and I don't have any good solutions that are intuitive for the user. This is close, but still not there.\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> df = DataFrame(a = [1, 2, missing], b = [3, missing, 4])\n3×2 DataFrame\n Row │ a        b       \n     │ Int64?   Int64?  \n─────┼──────────────────\n   1 │       1        3\n   2 │       2  missing \n   3 │ missing        4\n\njulia> function ⩔(x, y)\n       if x === missing || y === missing \n           return false\n       else\n           x || y\n       end\n       end;\n\njulia> function ⩓(x, y)\n       if x === missing || y === missing \n           return false\n       else\n           x ⩓ y\n       end\n       end;\n\njulia> @where(df, (:a .== 1) .⩔ (:b .== 4))\n1×2 DataFrame\n Row │ a       b      \n     │ Int64?  Int64? \n─────┼────────────────\n   1 │      1       3"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"6d941510-2a17-4b33-b286-363987ad9ab5","type":"message","text":"I really don't want the user to have to write this all the time\n\n```\njulia&gt; @where(df, coalesce.((:a .== 1), false) .⩔ coalesce.((:b .== 4), false))\n2×2 DataFrame\n Row │ a        b      \n     │ Int64?   Int64? \n─────┼─────────────────\n   1 │       1       3\n   2 │ missing       4```","user":"UBF9YRB6H","ts":"1616276739.118600","team":"T68168MUP","edited":{"user":"UBF9YRB6H","ts":"1616276768.000000"},"blocks":[{"type":"rich_text","block_id":"N+lFi","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I really don't want the user to have to write this all the time\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"\njulia> @where(df, coalesce.((:a .== 1), false) .⩔ coalesce.((:b .== 4), false))\n2×2 DataFrame\n Row │ a        b      \n     │ Int64?   Int64? \n─────┼─────────────────\n   1 │       1       3\n   2 │ missing       4"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"e37a8032-5a9d-4c01-b646-a570e6f0313a","type":"message","text":"if it's a macro, you can do the replacement for them, I guess?","user":"UH24GRBLL","ts":"1616276826.118900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9veP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if it's a macro, you can do the replacement for them, I guess?"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"4e988d65-8e3a-4e9d-b3b9-7577815ae368","type":"message","text":"that's what Volcanito.jl does, and I'm scared to do something that extensive. It seems fragile.","user":"UBF9YRB6H","ts":"1616276883.119100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iJB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's what Volcanito.jl does, and I'm scared to do something that extensive. It seems fragile."}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"ad87c8a8-08a0-432c-98b8-0dcbfe80a2ef","type":"message","text":"Wait actually I didnt do the logic right for `\\Or` so it actually might all work","user":"UBF9YRB6H","ts":"1616276997.119300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PY9V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Wait actually I didnt do the logic right for "},{"type":"text","text":"\\Or","style":{"code":true}},{"type":"text","text":" so it actually might all work"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"9448f5b7-5c4c-4a17-9141-386c3c3849a9","type":"message","text":"```julia&gt; function ⩔(x, y)\n           if x === missing &amp;&amp; y === missing\n               return false \n           elseif x === missing &amp;&amp; y === true\n               return true\n           elseif x === true &amp;&amp; y === missing\n               return true\n           else\n               return x || y \n           end\n       end\n⩔ (generic function with 1 method)\n\njulia&gt; @where(df, (:a .== 1) .⩔ (:b .== 4))\n2×2 DataFrame\n Row │ a        b      \n     │ Int64?   Int64? \n─────┼─────────────────\n   1 │       1       3\n   2 │ missing       4```\nThis seems right.\n\nIf only there were a way to add arbitrary infix operators that weren't unicode.","user":"UBF9YRB6H","ts":"1616277096.119500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c+qM","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> function ⩔(x, y)\n           if x === missing && y === missing\n               return false \n           elseif x === missing && y === true\n               return true\n           elseif x === true && y === missing\n               return true\n           else\n               return x || y \n           end\n       end\n⩔ (generic function with 1 method)\n\njulia> @where(df, (:a .== 1) .⩔ (:b .== 4))\n2×2 DataFrame\n Row │ a        b      \n     │ Int64?   Int64? \n─────┼─────────────────\n   1 │       1       3\n   2 │ missing       4"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nThis seems right.\n\nIf only there were a way to add arbitrary infix operators that weren't unicode."}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8","reactions":[{"name":"pray","users":["UUYRZ3LU8"],"count":1}]},{"client_msg_id":"740B5126-853E-42D1-AD00-2F1F02F0344A","type":"message","text":"<@UTK50Q97A> I've actually wondered for a long time if it's not the right choice for DataFramesMeta to be by row by default. The thing is, because you're dealing with column vectors, you always have to broadcast and it's annoying if you could write the elementwise operation as well.\n\nI'd suggest make select, transform, where etc byrow, and combine by column, because there you actually want to be able to aggregate over the whole column.\n\nOr is that too convoluted? We'd need a macro @bycol then because sometimes you might still want direct access to the columns.","user":"UK1BNFHFV","ts":"1616330623.127900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dCEbD","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UTK50Q97A"},{"type":"text","text":" I've actually wondered for a long time if it's not the right choice for DataFramesMeta to be by row by default. The thing is, because you're dealing with column vectors, you always have to broadcast and it's annoying if you could write the elementwise operation as well.\n\nI'd suggest make select, transform, where etc byrow, and combine by column, because there you actually want to be able to aggregate over the whole column.\n\nOr is that too convoluted? We'd need a macro @bycol then because sometimes you might still want direct access to the columns."}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"1862c48a-d732-4407-9038-bab451cf775b","type":"message","text":"too convoluted. plus i want to be able to filter things above or below the means.\n\nWe need a `@byrow` macro. or a dot syntax as you've suggested elsewhere. I've played around with adding it already but did make much progress","user":"UBF9YRB6H","ts":"1616340115.128100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"A8nB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"too convoluted. plus i want to be able to filter things above or below the means.\n\nWe need a "},{"type":"text","text":"@byrow","style":{"code":true}},{"type":"text","text":" macro. or a dot syntax as you've suggested elsewhere. I've played around with adding it already but did make much progress"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"9CD30FDA-99E2-4840-AC8C-376A98D4BF3F","type":"message","text":"Yeah I thought so.. I kind of liked the dot syntax idea :) if you want, I could give implementing that a go. Although it is of course non-standard. But as broadcasted assignment to keywords doesn't exist anywhere, at least it's noticeably non-standard and can easily be learned as a macro thing ","user":"UK1BNFHFV","ts":"1616340882.131100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"AQP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah I thought so.. I kind of liked the dot syntax idea :) if you want, I could give implementing that a go. Although it is of course non-standard. But as broadcasted assignment to keywords doesn't exist anywhere, at least it's noticeably non-standard and can easily be learned as a macro thing "}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"318c607e-f007-43f0-86bb-9108be50953c","type":"message","text":"I would rather have everything be standard and would prefer a `@byrow` flag. I don't want to confuse users by having too learn too much context-dependent syntax.","user":"UBF9YRB6H","ts":"1616344898.131300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JHJsQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I would rather have everything be standard and would prefer a "},{"type":"text","text":"@byrow","style":{"code":true}},{"type":"text","text":" flag. I don't want to confuse users by having too learn too much context-dependent syntax."}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"f41eddc4-52db-47fc-a97c-683456161530","type":"message","text":"wait but don't start a PR until we merge in the no_symbols branch. Because it will be an ugly rebase","user":"UBF9YRB6H","ts":"1616346020.131500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yV1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"wait but don't start a PR until we merge in the no_symbols branch. Because it will be an ugly rebase"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"90FD8CC4-66E3-43CB-94ED-705807D24462","type":"message","text":"You mean start for @byrow? I thought about the dot thing, but I could also try @byrow later. When are you going to merge that branch? ","user":"UK1BNFHFV","ts":"1616346627.132900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Axs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You mean start for @byrow? I thought about the dot thing, but I could also try @byrow later. When are you going to merge that branch? "}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"1815525d-dfe6-4332-8ff8-49a72a8e94b1","type":"message","text":"i don't know. i'm working on it now and it's actually very hard to get all the edge cases.","user":"UBF9YRB6H","ts":"1616346905.133100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"NLcn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"i don't know. i'm working on it now and it's actually very hard to get all the edge cases."}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"01CE7555-CCA5-4C1F-A850-18353EF2E810","type":"message","text":"Ah the syms thing. Are you set on syms vs sym? I wonder in what case you anticipate a whole expression needing escaping, with multiple symbols? I would think the singular case is much more likely and it's one letter less ;) ","user":"UK1BNFHFV","ts":"1616347499.135800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mWG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah the syms thing. Are you set on syms vs sym? I wonder in what case you anticipate a whole expression needing escaping, with multiple symbols? I would think the singular case is much more likely and it's one letter less ;) "}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"1E6EEFF4-A2B9-4CFC-A065-C337951F7FB6","type":"message","text":"And it's much easier to implement I guess?","user":"UK1BNFHFV","ts":"1616347519.136300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Z=zs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And it's much easier to implement I guess?"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"7c5acc0a-a123-4b11-aadd-0d2a5a377d47","type":"message","text":"I haven't thought about it much. I don't want to deprecate `cols` for `col` because eventually i want to be able to work with multiple columns via `AsTable`.","user":"UBF9YRB6H","ts":"1616347591.137200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ld5I","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I haven't thought about it much. I don't want to deprecate "},{"type":"text","text":"cols","style":{"code":true}},{"type":"text","text":" for "},{"type":"text","text":"col","style":{"code":true}},{"type":"text","text":" because eventually i want to be able to work with multiple columns via "},{"type":"text","text":"AsTable","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"25C93DB9-AE46-4B2A-AF12-AE56F78F5A5C","type":"message","text":"I'm always concerned how the most likely cases look, and shave away there. Edge cases can be a bit more complicated if they are rare ","user":"UK1BNFHFV","ts":"1616347616.138000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uP5q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm always concerned how the most likely cases look, and shave away there. Edge cases can be a bit more complicated if they are rare "}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"DDA1C7B1-202F-4E67-A2EB-AA56AEF4CFA9","type":"message","text":"What does cols do exactly?","user":"UK1BNFHFV","ts":"1616347631.138500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lU36","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What does cols do exactly?"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"b5574caa-ec19-4d44-92c3-6254b2c1f8a8","type":"message","text":"cols is the most important part of DataFramesMeta! it allows you do\n\n```xs =\"x\"\n@transform(df, cols(xs) = y)```","user":"UBF9YRB6H","ts":"1616347716.138700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"PUQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"cols is the most important part of DataFramesMeta! it allows you do\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"xs =\"x\"\n@transform(df, cols(xs) = y)"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"C5D9D149-C208-4A1B-BF6A-5E168861028C","type":"message","text":"I see, but what is the plural use case? In your example I'd prefer col","user":"UK1BNFHFV","ts":"1616347996.139900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tNz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I see, but what is the plural use case? In your example I'd prefer col"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"8C626FF6-567F-43ED-928D-4820D014BAF0","type":"message","text":"Or we copy the backtick syntax from volcanito, or even $ ","user":"UK1BNFHFV","ts":"1616348055.141000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vLiC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Or we copy the backtick syntax from volcanito, or even $ "}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"e41bd941-ca18-444b-8eaa-0cd1cb9d2efd","type":"message","text":"backtick syntax is from Stata, fwiw. and I like it. It's something we should consider.","user":"UBF9YRB6H","ts":"1616348091.142300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wCb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"backtick syntax is from Stata, fwiw. and I like it. It's something we should consider."}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"82FBFECD-CB6E-4A19-AEBD-A85BB92595E3","type":"message","text":"I tend towards not caring so much about breaking stuff as long as the end result is better but I know that's a minority view point :)","user":"UK1BNFHFV","ts":"1616348096.142700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RDtOC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I tend towards not caring so much about breaking stuff as long as the end result is better but I know that's a minority view point :)"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"7A8DA327-B8CB-47B0-A8D8-05CB0F83F649","type":"message","text":"As long as the user base is not that big of course. For example in Makie, I always ask myself, will I get more users if I improve this thing, or disgruntle more that are already using it. And I usually think that because the user base is still smaller, we need to take the opportunity ","user":"UK1BNFHFV","ts":"1616348172.144800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ysaF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"As long as the user base is not that big of course. For example in Makie, I always ask myself, will I get more users if I improve this thing, or disgruntle more that are already using it. And I usually think that because the user base is still smaller, we need to take the opportunity "}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"03b41d81-dae4-45ca-b61e-b7b0c3808169","type":"message","text":"I think the userbase for this is actually quite big. I realized that when we had made changes but still had a readme instead of version controlled docs. lots of bug reports","user":"UBF9YRB6H","ts":"1616348237.145000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Y8n","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think the userbase for this is actually quite big. I realized that when we had made changes but still had a readme instead of version controlled docs. lots of bug reports"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"9a287752-1f72-4d29-b73a-05e5d4d5d4c5","type":"message","text":"the backtick syntax has problems, though. You lose syntax highlighting","user":"UBF9YRB6H","ts":"1616348254.145200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6en","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the backtick syntax has problems, though. You lose syntax highlighting"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"E2C56D63-A4AB-41E2-887F-E768CFCDE441","type":"message","text":"Hm then $ might be better, it's very close to the interpolation logic, no?","user":"UK1BNFHFV","ts":"1616348791.146300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tmLX8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hm then $ might be better, it's very close to the interpolation logic, no?"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"e1f47e24-9a37-420a-80fb-157aff14364c","type":"message","text":"yeah, but what are you interpolating? A value or the name? This is just for interpolating the name, so might be confusing.","user":"UBF9YRB6H","ts":"1616348834.146500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"osF=Z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah, but what are you interpolating? A value or the name? This is just for interpolating the name, so might be confusing."}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"48E8319F-C09E-48E7-860F-EAA935F8AD91","type":"message","text":"But the name is the value of the variable right? So you're interpolating that value into the expression, just with the additional info that it's a column ","user":"UK1BNFHFV","ts":"1616348984.147900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2i5C3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"But the name is the value of the variable right? So you're interpolating that value into the expression, just with the additional info that it's a column "}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"EB211B77-101C-4C16-B4DF-6C3F9A985691","type":"message","text":"It works perfectly if the variable holds a symbol","user":"UK1BNFHFV","ts":"1616349000.148500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"R9KOH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It works perfectly if the variable holds a symbol"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"0967B76C-1277-49B6-981E-8B27F5CDBA55","type":"message","text":"If it's a string the logic is a bit less \"direct\". But it's nice that you can write $var vs cols(var)","user":"UK1BNFHFV","ts":"1616349051.149800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"UBdwr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If it's a string the logic is a bit less \"direct\". But it's nice that you can write $var vs cols(var)"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"94c95b6d-dda1-4a50-b395-f5687cb9250f","type":"message","text":"Volcanito's combination of backticks and interpolation is interesting. In `@select(df, new_col = `$x` + `$y`)`, `$` interpolated inside the backticks, and since backticks are used to indicate a column name, the intention is clear. Using backticks for column names which contain spaces or other special characters is also shorter than `Symbol(\"...\")`.","user":"U67431ELR","ts":"1616404505.160600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Go+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Volcanito's combination of backticks and interpolation is interesting. In "},{"type":"text","text":"@select(df, new_col = `$x` + `$y`)","style":{"code":true}},{"type":"text","text":", "},{"type":"text","text":"$","style":{"code":true}},{"type":"text","text":" interpolated inside the backticks, and since backticks are used to indicate a column name, the intention is clear. Using backticks for column names which contain spaces or other special characters is also shorter than "},{"type":"text","text":"Symbol(\"...\")","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"1a091f95-d67b-42d8-96d7-09921c953cf1","type":"message","text":"I feel like you might have a lot of faith in first year masters in public policy students to understand that syntax (though Milan I know you teach these people more than I do)","user":"UBF9YRB6H","ts":"1616430542.167600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+7To","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I feel like you might have a lot of faith in first year masters in public policy students to understand that syntax (though Milan I know you teach these people more than I do)"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"6020a5b4-4400-434c-a132-56b6975f07a9","type":"message","text":"I don't expect them to understand the logic behind it any more than for `cols(x)`. :smile: Only advanced Julia users are going to wonder about this kind of thing.","user":"U67431ELR","ts":"1616431244.167800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HXC","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't expect them to understand the logic behind it any more than for "},{"type":"text","text":"cols(x)","style":{"code":true}},{"type":"text","text":". "},{"type":"emoji","name":"smile"},{"type":"text","text":" Only advanced Julia users are going to wonder about this kind of thing."}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"9ad528fd-ae18-4beb-9bdb-d106be264080","type":"message","text":"Though this kind of operation is relatively advanced already. I would never have the occasion to teach this in my own courses.","user":"U67431ELR","ts":"1616431321.168000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sy9+4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Though this kind of operation is relatively advanced already. I would never have the occasion to teach this in my own courses."}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"ee2c3225-2966-45c1-b129-b8ae9dbefda1","type":"message","text":"Fair enough. At least we can get away with the weird Rstudio teaching strategy which is \"use functions where you can\" coupled with \"oh it's basically impossible to use dplyr inside functions\".\n\nSo maybe DataFramesMeta inside functions can be moved up compared to R.","user":"UBF9YRB6H","ts":"1616431812.168200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Sur","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Fair enough. At least we can get away with the weird Rstudio teaching strategy which is \"use functions where you can\" coupled with \"oh it's basically impossible to use dplyr inside functions\".\n\nSo maybe DataFramesMeta inside functions can be moved up compared to R."}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8","reactions":[{"name":"heavy_check_mark","users":["U67431ELR"],"count":1}]},{"client_msg_id":"D901684E-D275-4D6C-9371-C3CC6211CA4A","type":"message","text":"Uh I didn't know this about dplyr, why is that? Because of the nonstandard evaluation?","user":"UK1BNFHFV","ts":"1616431959.169600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FTRz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Uh I didn't know this about dplyr, why is that? Because of the nonstandard evaluation?"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"f5243337-6724-4342-aa82-12b3e1960cf9","type":"message","text":"yeah. You used to have to do this crazy `!!` thing that I never figured out.\n\nNow you can do brackets `{{x}}` to refer to variables, but that's still only to make your *own* non-standard evaluation easier. It doesn't actually enable to you do do\n\n```foo = function(df, x) { # x is a string\n    mutate(df, {{x}} = 1)\n}```\n","user":"UBF9YRB6H","ts":"1616432100.169800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zwzH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah. You used to have to do this crazy "},{"type":"text","text":"!!","style":{"code":true}},{"type":"text","text":" thing that I never figured out.\n\nNow you can do brackets "},{"type":"text","text":"{{x}}","style":{"code":true}},{"type":"text","text":" to refer to variables, but that's still only to make your "},{"type":"text","text":"own","style":{"bold":true}},{"type":"text","text":" non-standard evaluation easier. It doesn't actually enable to you do do\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"foo = function(df, x) { # x is a string\n    mutate(df, {{x}} = 1)\n}"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"33953e6d-636c-47b9-8614-6a4147084ecf","type":"message","text":"This is part of why I'm reticent to to `x` instead of `:x`. I think understanding what a variable is is hard enough for new users. But if they can look at a block and know all the `:x`s are columns, which are *not* variables, that seems easier. But I don't know. Would love to test this theory on some new students.","user":"UBF9YRB6H","ts":"1616432742.170000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"X/z","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"This is part of why I'm reticent to to "},{"type":"text","text":"x","style":{"code":true}},{"type":"text","text":" instead of "},{"type":"text","text":":x","style":{"code":true}},{"type":"text","text":". I think understanding what a variable is is hard enough for new users. But if they can look at a block and know all the `:x`s are columns, which are "},{"type":"text","text":"not","style":{"bold":true}},{"type":"text","text":" variables, that seems easier. But I don't know. Would love to test this theory on some new students."}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"308E4E1B-2E85-4E08-B1EB-3536EC2D1A53","type":"message","text":"I think so, too. One needs to be quite well trained to quickly assess what words are variables, functions, etc. I've learned this while tutoring complete beginners, who struggled a lot with these basics. We forget how much of a learning curve that is :)","user":"UK1BNFHFV","ts":"1616432891.171600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"u9q+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think so, too. One needs to be quite well trained to quickly assess what words are variables, functions, etc. I've learned this while tutoring complete beginners, who struggled a lot with these basics. We forget how much of a learning curve that is :)"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"},{"client_msg_id":"C717DEA9-BB01-4B01-9902-65BBFE90BF52","type":"message","text":"So I like the clarity of :x as well","user":"UK1BNFHFV","ts":"1616432914.172300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8yBg=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So I like the clarity of :x as well"}]}]}],"thread_ts":"1616273235.114700","parent_user_id":"UUYRZ3LU8"}]