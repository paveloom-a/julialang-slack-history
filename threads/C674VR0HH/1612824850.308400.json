[{"client_msg_id":"db036e27-48b5-4376-9fbd-be41e24a56a6","type":"message","text":"Is it possible to make a nested dictionary a Tables source?\nSpecifically, I often have this kind of data structure:\n```\nDict{Any,Dict{Any,Baz}} # pkey -&gt; skey -&gt; value\n```\nwhere\n```\nstruct Baz\n\tid\n\tdata::NamedTuple\nend\n```\nAny thoughts appreciated. Thanks!","user":"UBL1R2BE1","ts":"1612824850.308400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6U=1o","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Is it possible to make a nested dictionary a Tables source?\nSpecifically, I often have this kind of data structure:\n```\nDict{Any,Dict{Any,Baz}} # pkey -> skey -> value\n```\nwhere\n```\nstruct Baz\n\tid\n\tdata::NamedTuple\nend\n```\nAny thoughts appreciated. Thanks!"}]}]}],"thread_ts":"1612824850.308400","reply_count":2,"reply_users_count":2,"latest_reply":"1612836609.311100","reply_users":["U681ELA87","UBL1R2BE1"],"subscribed":false},{"client_msg_id":"5F12E530-B9B3-4A38-9EAD-20C16116B1CE","type":"message","text":"Can you expand a little on how you want this nested dictionary to be a table? Like, what are the columns you’re hoping to get out","user":"U681ELA87","ts":"1612832556.310400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SkS4c","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Can you expand a little on how you want this nested dictionary to be a table? Like, what are the columns you’re hoping to get out"}]}]}],"thread_ts":"1612824850.308400","parent_user_id":"UBL1R2BE1"},{"client_msg_id":"16f09182-4569-4e25-8095-895b794b191d","type":"message","text":"My initial thinking was:\n`(pkey=pkey::Any, skey=skey::Any, val=val::Baz)` , but I suspect that I could implement the `AbstractRow` interface to get access to the fields held in `Baz.data`. My real intention is to see if I can apply the chain Tables -&gt; StructType -&gt; Strapping to handle serialisation. I made some headway but hit a snag after implementing an iterator on the nested dictionary (that would be returned by `Tables.rows` .\nMore concretely, I would like to do something like:\n```struct Baz\n    id::Int\n    data::NamedTuple    \nend\n\nconst MyDataType = Dict{Any,Dict{Any,Baz}}\n\n# Generate example\npkeys = [:a,:b,:c]\nskeys = [1,2,3,4,5,6]\nd1 = MyDataType()\nid = 1\nfor pk in pkeys\n    d1[pk] = valtype(MyDataType)()\n    for sk in skeys\n        d1[pk][sk] = Baz(id,(x=1,y=\"hat\",z=[1.2,3.2]))\n        global id += 1\n    end\nend\n\nxd = Strapping.deconstruct(d1)\nxc = Strapping.construct(MyDataType,xd)```\n:slightly_smiling_face:","user":"UBL1R2BE1","ts":"1612836609.311100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jqdfy","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My initial thinking was:\n"},{"type":"text","text":"(pkey=pkey::Any, skey=skey::Any, val=val::Baz)","style":{"code":true}},{"type":"text","text":" , but I suspect that I could implement the "},{"type":"text","text":"AbstractRow","style":{"code":true}},{"type":"text","text":" interface to get access to the fields held in "},{"type":"text","text":"Baz.data","style":{"code":true}},{"type":"text","text":". My real intention is to see if I can apply the chain Tables -> StructType -> Strapping to handle serialisation. I made some headway but hit a snag after implementing an iterator on the nested dictionary (that would be returned by "},{"type":"text","text":"Tables.rows","style":{"code":true}},{"type":"text","text":" .\nMore concretely, I would like to do something like:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"struct Baz\n    id::Int\n    data::NamedTuple    \nend\n\nconst MyDataType = Dict{Any,Dict{Any,Baz}}\n\n# Generate example\npkeys = [:a,:b,:c]\nskeys = [1,2,3,4,5,6]\nd1 = MyDataType()\nid = 1\nfor pk in pkeys\n    d1[pk] = valtype(MyDataType)()\n    for sk in skeys\n        d1[pk][sk] = Baz(id,(x=1,y=\"hat\",z=[1.2,3.2]))\n        global id += 1\n    end\nend\n\nxd = Strapping.deconstruct(d1)\nxc = Strapping.construct(MyDataType,xd)"}]},{"type":"rich_text_section","elements":[{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1612824850.308400","parent_user_id":"UBL1R2BE1"}]