[{"client_msg_id":"d8df33b3-1dde-4573-80ba-372d06d2b39f","type":"message","text":"is there an advised way in LibPQ to convert psql types to julia types?\n\nright now I have x = LibPQ.PQ_SYSTEM_TYPES[sym] and then LibPQ.__DEFAULT_TYPE_MAP[x]_\n\nbut I have an issue when I have a type \"timestamp with time zone\", which I believe maps to :timestamptz but I'm not 100% sure and I can't seem to find the piece of code where this occurs","user":"U6CF3AA5Q","ts":"1607911699.125000","team":"T68168MUP","edited":{"user":"U6CF3AA5Q","ts":"1607911753.000000"},"blocks":[{"type":"rich_text","block_id":"S9NZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"is there an advised way in LibPQ to convert psql types to julia types?\n\nright now I have x = LibPQ.PQ_SYSTEM_TYPES[sym] and then LibPQ._"},{"type":"text","text":"DEFAULT_TYPE_MAP[x]","style":{"italic":true}},{"type":"text","text":"\n\nbut I have an issue when I have a type \"timestamp with time zone\", which I believe maps to :timestamptz but I'm not 100% sure and I can't seem to find the piece of code where this occurs"}]}]}],"thread_ts":"1607911699.125000","reply_count":6,"reply_users_count":3,"latest_reply":"1607980868.133800","reply_users":["UDXST8ARK","U69J94HT9","U6CF3AA5Q"],"subscribed":false},{"client_msg_id":"4cb00860-6fde-440f-95e7-b02f44106035","type":"message","text":"<@U69J94HT9>","user":"UDXST8ARK","ts":"1607937083.125900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ik622","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U69J94HT9"}]}]}],"thread_ts":"1607911699.125000","parent_user_id":"U6CF3AA5Q"},{"client_msg_id":"17718434-5cc6-4f62-a12f-2bd142c8c7ea","type":"message","text":"Here's how to override: <https://invenia.github.io/LibPQ.jl/stable/pages/type-conversions/#Overrides>\n\nHappy to provide more detailed help if the docs aren't clear enough.\n\nYes, `timestamp with time zone` is `timestamptz`. I'm not sure how to programmatically get the long names from PostgreSQL so I only support the canonical names right now.","user":"U69J94HT9","ts":"1607968594.132900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eAt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Here's how to override: "},{"type":"link","url":"https://invenia.github.io/LibPQ.jl/stable/pages/type-conversions/#Overrides"},{"type":"text","text":"\n\nHappy to provide more detailed help if the docs aren't clear enough.\n\nYes, "},{"type":"text","text":"timestamp with time zone","style":{"code":true}},{"type":"text","text":" is "},{"type":"text","text":"timestamptz","style":{"code":true}},{"type":"text","text":". I'm not sure how to programmatically get the long names from PostgreSQL so I only support the canonical names right now."}]}]}],"thread_ts":"1607911699.125000","parent_user_id":"U6CF3AA5Q"},{"client_msg_id":"d9f6d1b2-4c85-4051-b357-43a43e21045e","type":"message","text":"```        table_name, column_name, data_type, is_nullable, column_default\n    from information_schema.columns\n    where table_schema = \\$1```\nso I was trying to get the types all for the tables with this query rather than querying doing a fake query `select * from table limit 0` for each table but the it gives vague results for some types. For example bigint[] is ARRAY so currently I'm just querying all the tables.\n\nMy use case is generating equivalent Julia types for each table schema","user":"U6CF3AA5Q","ts":"1607976644.133100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"aNz8V","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"        table_name, column_name, data_type, is_nullable, column_default\n    from information_schema.columns\n    where table_schema = \\$1"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nso I was trying to get the types all for the tables with this query rather than querying doing a fake query "},{"type":"text","text":"select * from table limit 0","style":{"code":true}},{"type":"text","text":" for each table but the it gives vague results for some types. For example bigint[] is ARRAY so currently I'm just querying all the tables.\n\nMy use case is generating equivalent Julia types for each table schema"}]}]}],"thread_ts":"1607911699.125000","parent_user_id":"U6CF3AA5Q"},{"client_msg_id":"37ddfae9-79b5-4799-aeae-d8b07c7bf172","type":"message","text":"Ah, you can get the types to look up in the type map from the `udt_name` column in `information_schema.columns` instead.","user":"U69J94HT9","ts":"1607978098.133400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"b4ul","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ah, you can get the types to look up in the type map from the "},{"type":"text","text":"udt_name","style":{"code":true}},{"type":"text","text":" column in "},{"type":"text","text":"information_schema.columns","style":{"code":true}},{"type":"text","text":" instead."}]}]}],"thread_ts":"1607911699.125000","parent_user_id":"U6CF3AA5Q"},{"client_msg_id":"eb6d5ea8-5e70-4b1d-9a7d-59942be7b6db","type":"message","text":"in that column, `bigint[]` is `_int8`, which has a distinct OID","user":"U69J94HT9","ts":"1607978563.133600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wi1v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in that column, "},{"type":"text","text":"bigint[]","style":{"code":true}},{"type":"text","text":" is "},{"type":"text","text":"_int8","style":{"code":true}},{"type":"text","text":", which has a distinct OID"}]}]}],"thread_ts":"1607911699.125000","parent_user_id":"U6CF3AA5Q"},{"client_msg_id":"c6b7e6ff-74a2-4a6f-9b79-6dad60e704b8","type":"message","text":"this does exactly what I want thanks!","user":"U6CF3AA5Q","ts":"1607980868.133800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"e5X","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this does exactly what I want thanks!"}]}]}],"thread_ts":"1607911699.125000","parent_user_id":"U6CF3AA5Q","reactions":[{"name":"confetti_ball","users":["U69J94HT9"],"count":1},{"name":"+1","users":["U69J94HT9"],"count":1}]}]