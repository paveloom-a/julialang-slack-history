[{"client_msg_id":"8abf1e72-c41f-403c-a489-8c07ba8cb00a","type":"message","text":"How can I best save a DataFrame, where columns sometimes contain arrays, and some of these arrays contain staticvectors/matrices? It's experimental data where each row is a trial, but there is some temporal data in each trial. The important data is the response and not the temporal data, so I think it makes no sense to flatten the vectors into a \"long\" format. I've just tried Arrow with high hopes, but the Vectors of SVectors are getting lost and read back in as Vectors of Vectors","user":"UK1BNFHFV","ts":"1613577305.001800","team":"T68168MUP","edited":{"user":"UK1BNFHFV","ts":"1613577343.000000"},"blocks":[{"type":"rich_text","block_id":"nqpA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"How can I best save a DataFrame, where columns sometimes contain arrays, and some of these arrays contain staticvectors/matrices? It's experimental data where each row is a trial, but there is some temporal data in each trial. The important data is the response and not the temporal data, so I think it makes no sense to flatten the vectors into a \"long\" format. I've just tried Arrow with high hopes, but the Vectors of SVectors are getting lost and read back in as Vectors of Vectors"}]}]}],"thread_ts":"1613577305.001800","reply_count":24,"reply_users_count":3,"latest_reply":"1613581035.007400","reply_users":["U9VG1AYSG","UK1BNFHFV","UCZ7VBGUD"],"subscribed":false},{"client_msg_id":"1d9e0764-8286-4efb-8b42-2ab79f636a21","type":"message","text":"I think you're just going to have to convert them afterward.  It's unfortuante that it's expensive, but no true interoperable data storage format is ever going to give you what you're looking for","user":"U9VG1AYSG","ts":"1613578202.002600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"iL4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think you're just going to have to convert them afterward.  It's unfortuante that it's expensive, but no true interoperable data storage format is ever going to give you what you're looking for"}]}]}],"thread_ts":"1613577305.001800","parent_user_id":"UK1BNFHFV"},{"client_msg_id":"8b17538f-647c-49a5-872c-fe45f995655b","type":"message","text":"if you absolutely *must* read in the vectors of svectors, you will have no other choice other than JLD or the built-in serializer... JLD seems unreliable, and the built in serializer is for IPC, so it can potentially break even between minor Julia versions","user":"U9VG1AYSG","ts":"1613578247.002800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"V41","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you absolutely "},{"type":"text","text":"must","style":{"bold":true}},{"type":"text","text":" read in the vectors of svectors, you will have no other choice other than JLD or the built-in serializer... JLD seems unreliable, and the built in serializer is for IPC, so it can potentially break even between minor Julia versions"}]}]}],"thread_ts":"1613577305.001800","parent_user_id":"UK1BNFHFV"},{"client_msg_id":"805c454a-fd45-4afd-b05a-129f708c7c73","type":"message","text":"another option is to abandon tabular data altogether and use HDF5.  Still isn't going to give you `SVector` though","user":"U9VG1AYSG","ts":"1613578522.003000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Qa/3S","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"another option is to abandon tabular data altogether and use HDF5.  Still isn't going to give you "},{"type":"text","text":"SVector","style":{"code":true}},{"type":"text","text":" though"}]}]}],"thread_ts":"1613577305.001800","parent_user_id":"UK1BNFHFV"},{"client_msg_id":"842c6a01-e53d-4b0c-9b0d-237e1c173df4","type":"message","text":"That's unfortunate. I thought this would be a bit easier than it turned out","user":"UK1BNFHFV","ts":"1613578522.003200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qX2l","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That's unfortunate. I thought this would be a bit easier than it turned out"}]}]}],"thread_ts":"1613577305.001800","parent_user_id":"UK1BNFHFV"},{"client_msg_id":"54d42cc0-7f84-4a72-9d54-d3c48e0315e5","type":"message","text":"your problem is that nothing that is not Julia understands what an `SVector` is","user":"U9VG1AYSG","ts":"1613578538.003400","team":"T68168MUP","edited":{"user":"U9VG1AYSG","ts":"1613578550.000000"},"blocks":[{"type":"rich_text","block_id":"/ZU3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"your problem is that nothing that is not Julia understands what an "},{"type":"text","text":"SVector","style":{"code":true}},{"type":"text","text":" is"}]}]}],"thread_ts":"1613577305.001800","parent_user_id":"UK1BNFHFV"},{"client_msg_id":"6b07769a-eabb-4374-b9f4-ba1dedce4fca","type":"message","text":"I can reinterpret most of those vectors of svectors to Matrices with 3xN size of course. Maybe that will work better, although I've also read that Arrow flattens arrays within vectors","user":"UK1BNFHFV","ts":"1613578648.003700","team":"T68168MUP","edited":{"user":"UK1BNFHFV","ts":"1613578658.000000"},"blocks":[{"type":"rich_text","block_id":"PbIc","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I can reinterpret most of those vectors of svectors to Matrices with 3xN size of course. Maybe that will work better, although I've also read that Arrow flattens arrays within vectors"}]}]}],"thread_ts":"1613577305.001800","parent_user_id":"UK1BNFHFV"},{"client_msg_id":"497d20d8-80d9-4bc6-a7da-82ad3943f173","type":"message","text":"you shouldn't need to flatten them, but you will need to abandon the idea of storing them as an `SVector`...","user":"U9VG1AYSG","ts":"1613578716.004000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/kaK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"you shouldn't need to flatten them, but you will need to abandon the idea of storing them as an "},{"type":"text","text":"SVector","style":{"code":true}},{"type":"text","text":"..."}]}]}],"thread_ts":"1613577305.001800","parent_user_id":"UK1BNFHFV"},{"client_msg_id":"734f4e0c-8c0b-44f9-a505-62d36992a460","type":"message","text":"keep in mind that in the serialized data there is no distinction between a `Vector` and `SVector` anyway: the distinction lies entirely in the Julia runtime","user":"U9VG1AYSG","ts":"1613578748.004200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sxPTf","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"keep in mind that in the serialized data there is no distinction between a "},{"type":"text","text":"Vector","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"SVector","style":{"code":true}},{"type":"text","text":" anyway: the distinction lies entirely in the Julia runtime"}]}]}],"thread_ts":"1613577305.001800","parent_user_id":"UK1BNFHFV"},{"client_msg_id":"bb642f84-27f9-480f-b47d-e932f5d54bd7","type":"message","text":"so really what you need is something to tell Julia how to construct objects when it pulls them out of the buffer","user":"U9VG1AYSG","ts":"1613578762.004400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Nzg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"so really what you need is something to tell Julia how to construct objects when it pulls them out of the buffer"}]}]}],"thread_ts":"1613577305.001800","parent_user_id":"UK1BNFHFV"},{"client_msg_id":"70c8f24e-ef82-4398-929d-eeae217879e4","type":"message","text":"and again, the only thing that's really going to give you that is Julia's very own serialization protocol","user":"U9VG1AYSG","ts":"1613578782.004600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8t684","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and again, the only thing that's really going to give you that is Julia's very own serialization protocol"}]}]}],"thread_ts":"1613577305.001800","parent_user_id":"UK1BNFHFV"},{"client_msg_id":"89e92ddd-0772-4a4b-8ab2-c038dc542f18","type":"message","text":"yeah I'm figuring that out bit by bit. I do know that the representation of SVectors in a vector is the same as a Matrix would be, but if after reading from Arrow all these SVectors are actually Vectors, that's of course terribly inefficient","user":"UK1BNFHFV","ts":"1613578839.004800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XVm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah I'm figuring that out bit by bit. I do know that the representation of SVectors in a vector is the same as a Matrix would be, but if after reading from Arrow all these SVectors are actually Vectors, that's of course terribly inefficient"}]}]}],"thread_ts":"1613577305.001800","parent_user_id":"UK1BNFHFV"},{"client_msg_id":"fb569f21-ffd7-42d2-86c9-6195c5160105","type":"message","text":"I stored data as .mat files first because I thought it had better interoperability, but then it's a bit annoying that column vectors are now matrices etc","user":"UK1BNFHFV","ts":"1613578878.005000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"g9oeE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I stored data as .mat files first because I thought it had better interoperability, but then it's a bit annoying that column vectors are now matrices etc"}]}]}],"thread_ts":"1613577305.001800","parent_user_id":"UK1BNFHFV"},{"client_msg_id":"a4f6eea4-2cda-4557-b1b9-e524bb26fa63","type":"message","text":"depending on what you are doing, it might make sense to lazily convert them... so just keep them as vectors, and have a method of whatever function they get fed into that detects this and outputs `SVector`s","user":"U9VG1AYSG","ts":"1613578897.005200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ycVhM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"depending on what you are doing, it might make sense to lazily convert them... so just keep them as vectors, and have a method of whatever function they get fed into that detects this and outputs `SVector`s"}]}]}],"thread_ts":"1613577305.001800","parent_user_id":"UK1BNFHFV"},{"client_msg_id":"d9a00f4b-00a3-40a3-967c-ca072fc27a7f","type":"message","text":"I'm looking for a long-term solution that is both in principle possible to open from another language, but also convenient for me when I reanalyze some data","user":"UK1BNFHFV","ts":"1613578914.005400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TVI9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I'm looking for a long-term solution that is both in principle possible to open from another language, but also convenient for me when I reanalyze some data"}]}]}],"thread_ts":"1613577305.001800","parent_user_id":"UK1BNFHFV"},{"client_msg_id":"5700ed43-31ec-4ac6-8a0e-d09f9acec48f","type":"message","text":"maybe I need to convert everything to basic types, save as Arrow, and save a function that reinterprets all types correctly. It's just annoying because I have around 100 columns","user":"UK1BNFHFV","ts":"1613578997.005600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dTlEY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"maybe I need to convert everything to basic types, save as Arrow, and save a function that reinterprets all types correctly. It's just annoying because I have around 100 columns"}]}]}],"thread_ts":"1613577305.001800","parent_user_id":"UK1BNFHFV"},{"client_msg_id":"d532b584-972b-4935-bf38-50eb5a2ab03d","type":"message","text":"if you are looking for interoperability with another language, SVector is pretty much dead in the water.  Again, this is entirely a Julia-specific concept, not all languages even have an analog to it.  So probably what you should do is have logic in your Julia program to deal with the fact that it should start using SVectors even though the data isn't serialized that way","user":"U9VG1AYSG","ts":"1613578999.005800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JGevH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you are looking for interoperability with another language, SVector is pretty much dead in the water.  Again, this is entirely a Julia-specific concept, not all languages even have an analog to it.  So probably what you should do is have logic in your Julia program to deal with the fact that it should start using SVectors even though the data isn't serialized that way"}]}]}],"thread_ts":"1613577305.001800","parent_user_id":"UK1BNFHFV"},{"client_msg_id":"48ff1fc4-f3f4-4c9e-ad48-21ceaf57ef5f","type":"message","text":"another possibility is that maybe you can cheat a bit and use Arrow.jl tuples which may be converted to Julia tuples which are essentially the same as `SVector`, but storing columns of arrays of tuples in arrow sounds a litlte scary, not sure how much of that is implemented everywhere","user":"U9VG1AYSG","ts":"1613579080.006000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"m4U","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"another possibility is that maybe you can cheat a bit and use Arrow.jl tuples which may be converted to Julia tuples which are essentially the same as "},{"type":"text","text":"SVector","style":{"code":true}},{"type":"text","text":", but storing columns of arrays of tuples in arrow sounds a litlte scary, not sure how much of that is implemented everywhere"}]}]}],"thread_ts":"1613577305.001800","parent_user_id":"UK1BNFHFV"},{"client_msg_id":"5aa7429b-a0dd-41f7-8cd1-e490751a49c4","type":"message","text":"yeah it shouldn't become too weird, as that would kind of defeat the long-term purpose. I need to be able to forget how I did this and easily find out again later","user":"UK1BNFHFV","ts":"1613579148.006200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Pr+C","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah it shouldn't become too weird, as that would kind of defeat the long-term purpose. I need to be able to forget how I did this and easily find out again later"}]}]}],"thread_ts":"1613577305.001800","parent_user_id":"UK1BNFHFV"},{"client_msg_id":"8390190c-1e3c-46e1-bf10-bb28328feed4","type":"message","text":"maybe I'll just leave it at the mat file, and just write a few ingestion functions that clean up this data a bit for Julia","user":"UK1BNFHFV","ts":"1613579184.006400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"K5V/h","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"maybe I'll just leave it at the mat file, and just write a few ingestion functions that clean up this data a bit for Julia"}]}]}],"thread_ts":"1613577305.001800","parent_user_id":"UK1BNFHFV"},{"client_msg_id":"35484998-93a5-4f18-8346-50205f45c499","type":"message","text":"shouldn't waste too much time on this particular thing..","user":"UK1BNFHFV","ts":"1613579199.006600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yzs","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"shouldn't waste too much time on this particular thing.."}]}]}],"thread_ts":"1613577305.001800","parent_user_id":"UK1BNFHFV"},{"client_msg_id":"b9a55a1c-ff6f-4740-b2e4-06c5c05928ba","type":"message","text":"for what it's worth, serializing and deserializing without having to do at least a *little* post processing is just incredibly hard","user":"U9VG1AYSG","ts":"1613579224.006800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"kkJS","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"for what it's worth, serializing and deserializing without having to do at least a "},{"type":"text","text":"little","style":{"bold":true}},{"type":"text","text":" post processing is just incredibly hard"}]}]}],"thread_ts":"1613577305.001800","parent_user_id":"UK1BNFHFV"},{"client_msg_id":"aaa8dbc8-15df-455a-ad63-a2826ab59e2c","type":"message","text":"if you ever get away with doing nothing after ddeserializing, you are lucky","user":"U9VG1AYSG","ts":"1613579249.007000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Qa5yr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if you ever get away with doing nothing after ddeserializing, you are lucky"}]}]}],"thread_ts":"1613577305.001800","parent_user_id":"UK1BNFHFV"},{"client_msg_id":"fdf77d19-1eee-4dbc-a9c6-366162880393","type":"message","text":"really the only thing that will ever guarantee you have to do nothing is the language-specific serializer","user":"U9VG1AYSG","ts":"1613579281.007200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cZa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"really the only thing that will ever guarantee you have to do nothing is the language-specific serializer"}]}]}],"thread_ts":"1613577305.001800","parent_user_id":"UK1BNFHFV"},{"client_msg_id":"06e93302-b04b-4c55-834e-65408b5b79d7","type":"message","text":"have you tried `Arrow.ArrowTypes.registertype!(SVector{..}, SVector{..})`?","user":"UCZ7VBGUD","ts":"1613581035.007400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"2Yh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"have you tried "},{"type":"text","text":"Arrow.ArrowTypes.registertype!(SVector{..}, SVector{..})","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1613577305.001800","parent_user_id":"UK1BNFHFV"}]