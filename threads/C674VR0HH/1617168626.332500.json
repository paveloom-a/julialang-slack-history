[{"client_msg_id":"569e3ae4-8017-4157-a830-ae6a4fd22fd5","type":"message","text":"I migrated from Stata to R/Python/Julia and there is a bit of natural data management syntax which I have not been able to find in these languages. That is the end of line `if` within a DataFrame. For example lets say you have variables (columns) `:X` and `:Y`  and you want to create a new column `:Z` but only if `:X` if greater than `:Y` the rest will get `missing` values. In Stata I could write `gen Z = X + Y if X &gt; Y`. Is there something equivalent I could do in Julia. Say `@where!(df, :X &gt; :Y, Z = :X + :Y)` ?\nThis would leave the DataFrame unchanged except in creating the new column `Z`.\nIn Stata such a rule would typically be followed by a rule on how to manage other values such as ``replace Z = X - Y if X &lt; Y``","user":"ULNHYTCJC","ts":"1617168626.332500","team":"T68168MUP","edited":{"user":"ULNHYTCJC","ts":"1617168849.000000"},"blocks":[{"type":"rich_text","block_id":"dcTsM","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I migrated from Stata to R/Python/Julia and there is a bit of natural data management syntax which I have not been able to find in these languages. That is the end of line "},{"type":"text","text":"if","style":{"code":true}},{"type":"text","text":" within a DataFrame. For example lets say you have variables (columns) "},{"type":"text","text":":X","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":":Y","style":{"code":true}},{"type":"text","text":"  and you want to create a new column "},{"type":"text","text":":Z","style":{"code":true}},{"type":"text","text":" but only if "},{"type":"text","text":":X","style":{"code":true}},{"type":"text","text":" if greater than "},{"type":"text","text":":Y","style":{"code":true}},{"type":"text","text":" the rest will get "},{"type":"text","text":"missing","style":{"code":true}},{"type":"text","text":" values. In Stata I could write "},{"type":"text","text":"gen Z = X + Y if X > Y","style":{"code":true}},{"type":"text","text":". Is there something equivalent I could do in Julia. Say "},{"type":"text","text":"@where!(df, :X > :Y, Z = :X + :Y)","style":{"code":true}},{"type":"text","text":" ?\nThis would leave the DataFrame unchanged except in creating the new column "},{"type":"text","text":"Z","style":{"code":true}},{"type":"text","text":".\nIn Stata such a rule would typically be followed by a rule on how to manage other values such as `"},{"type":"text","text":"replace Z = X - Y if X < Y`","style":{"code":true}}]}]}],"thread_ts":"1617168626.332500","reply_count":5,"reply_users_count":5,"latest_reply":"1617206143.334400","reply_users":["ULNHYTCJC","US8V7JSKB","U8JAMQGQY","U7JQGPGCQ","UBF9YRB6H"],"is_locked":false,"subscribed":false,"reactions":[{"name":"+1","users":["UBF9YRB6H"],"count":1}]},{"client_msg_id":"0464ca8a-3b34-4632-aec0-8645283e8a08","type":"message","text":"Backstory, I have a large data Wrangling project with mappings from 15 different databases into a common database structure and I need the syntax to be a readable as possible for working with those with minimal programming experience.","user":"ULNHYTCJC","ts":"1617169014.332800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pJT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Backstory, I have a large data Wrangling project with mappings from 15 different databases into a common database structure and I need the syntax to be a readable as possible for working with those with minimal programming experience."}]}]}],"thread_ts":"1617168626.332500","parent_user_id":"ULNHYTCJC"},{"client_msg_id":"26ad7ba6-17b6-4a59-95b6-29ff53a5dced","type":"message","text":"I don’t know about dataframesmeta, but you should able to use the transform function in DataFrames.jl (with `ByRow` )","user":"US8V7JSKB","ts":"1617171602.333000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8s4jG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don’t know about dataframesmeta, but you should able to use the transform function in DataFrames.jl (with "},{"type":"text","text":"ByRow","style":{"code":true}},{"type":"text","text":" )"}]}]}],"thread_ts":"1617168626.332500","parent_user_id":"ULNHYTCJC"},{"client_msg_id":"23231fba-1009-4c33-94e6-5785abf4bc3d","type":"message","text":"`transform!(df, [:X,:Y] =&gt; ByRow((x,y) -&gt; x &lt; y ? x - y : missing =&gt; :Z)`","user":"U8JAMQGQY","ts":"1617173633.333200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XgcF0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"transform!(df, [:X,:Y] => ByRow((x,y) -> x < y ? x - y : missing => :Z)","style":{"code":true}}]}]}],"thread_ts":"1617168626.332500","parent_user_id":"ULNHYTCJC","reactions":[{"name":"+1","users":["U7JQGPGCQ"],"count":1}]},{"client_msg_id":"7664e94a-6b2b-497c-bfce-b3feba5f64f8","type":"message","text":"or `df.Z = ifelse.(df.X .&gt; df.Y, df.X .+ df.Y, missing)`","user":"U7JQGPGCQ","ts":"1617183845.333600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pco","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or "},{"type":"text","text":"df.Z = ifelse.(df.X .> df.Y, df.X .+ df.Y, missing)","style":{"code":true}}]}]}],"thread_ts":"1617168626.332500","parent_user_id":"ULNHYTCJC"},{"client_msg_id":"90cbb2be-476d-47d7-90df-dc53e9009062","type":"message","text":"Glad you are doing data cleaning and analysis in Julia!\n\nI agree this is a bit of a shortcoming at the moment though.\n\n1. The `ByRow` solution means you can't use the whole column easily, like `mean(x)`\n2. The `ifelse` solution will always materialize both vectors.\n\nPlus both solutions are not ideal with missing values. There has been lots of discussion about this (mostly from economists and stata users) <https://github.com/JuliaData/DataFrames.jl/issues/2211>\n\nI actually really like your `@where` idea, and it's not something I had thought of. Would you mind filing an issue at DataFramesMeta so we can keep track of it?","user":"UBF9YRB6H","ts":"1617206143.334400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QWt","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Glad you are doing data cleaning and analysis in Julia!\n\nI agree this is a bit of a shortcoming at the moment though.\n\n1. The "},{"type":"text","text":"ByRow","style":{"code":true}},{"type":"text","text":" solution means you can't use the whole column easily, like "},{"type":"text","text":"mean(x)","style":{"code":true}},{"type":"text","text":"\n2. The "},{"type":"text","text":"ifelse","style":{"code":true}},{"type":"text","text":" solution will always materialize both vectors.\n\nPlus both solutions are not ideal with missing values. There has been lots of discussion about this (mostly from economists and stata users) "},{"type":"link","url":"https://github.com/JuliaData/DataFrames.jl/issues/2211"},{"type":"text","text":"\n\nI actually really like your "},{"type":"text","text":"@where","style":{"code":true}},{"type":"text","text":" idea, and it's not something I had thought of. Would you mind filing an issue at DataFramesMeta so we can keep track of it?"}]}]}],"thread_ts":"1617168626.332500","parent_user_id":"ULNHYTCJC"}]