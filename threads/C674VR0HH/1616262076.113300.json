[{"client_msg_id":"b097635c-3e75-4abc-a2e3-2ad2340e46df","type":"message","text":"&lt;<https://github.com/JuliaData/Arrow.jl/pull/150%7Cdefine> caller-overloadable arrownameof(T) to allow callers to specify preferred Julia &lt;-&gt; Arrow type matching behavior&gt;\n\nan easily replaceable stopgap to enable some custom (de)serialization behaviors until something like <@U681ELA87>'s plan <https://julialang.slack.com/archives/C674VR0HH/p1615846377461400?thread_ts=1615681758.430500&amp;cid=C674VR0HH|here> lands","user":"U674T0Y9Z","ts":"1616262076.113300","team":"T68168MUP","attachments":[{"from_url":"https://julialang.slack.com/archives/C674VR0HH/p1615846377461400?thread_ts=1615681758.430500&amp;cid=C674VR0HH","fallback":"[March 15th, 2021 3:12 PM] quinnj: <@U674T0Y9Z>, for deserialization, what you think about ditching the *_MAPPING Dicts and instead parsing a metadata type name of the form `JuliaLang.UUID` as `(Val(:JuliaLang), Val(:UUID))`, or maybe just `Val(:JuliaLang.UUID)`. so you’d overload something like:\n```function Arrow.ArrowTypes.fromarrow(::Val{:JuliaLang.UUID}, x...)\n\nend```\nwhere `x…` would be the deserialized fields. There’d be generic definitions something like `fromarrow(V, x…) = nothing` and if there’s no overload, then we’d just return a NamedTuple..\n\nOn the serialization side, we’d have:\n• `Arrow.ArrowTypes.toarrow(x) = x`, and `Arrow.ArrowTypes.arrowname(::Type{T})` which would be overloadable for custom types where you’d return the arrow object to serialize, and `arrowname` would be the field metadata type name. By default `arrowname(T) = Symbol()`, so we wouldn’t name it, so you’d only get a NamedTuple out unless you overload. \nMy biggest question then is if this would really work for parametric types. You could serialize using `nameof` in `arrowname`, but then in `fromarrow`, you’d have to be able to build your type. I think it gets awkward if you have non-field-based type parameters that you don’t necessarily want to serialize in `arrowname`, but maybe that’s just a pill you have to swallow. If you can’t infer the type parameters from the data itself, you’ll need to serialize it in the `arrowname` and pull it back out somehow.","ts":"1615846377.461400","author_id":"U681ELA87","author_subname":"Jacob Quinn","channel_id":"C674VR0HH","channel_name":"data","is_msg_unfurl":true,"is_reply_unfurl":true,"text":"<@U674T0Y9Z>, for deserialization, what you think about ditching the *_MAPPING Dicts and instead parsing a metadata type name of the form `JuliaLang.UUID` as `(Val(:JuliaLang), Val(:UUID))`, or maybe just `Val(:JuliaLang.UUID)`. so you’d overload something like:\n```function Arrow.ArrowTypes.fromarrow(::Val{:JuliaLang.UUID}, x...)\n\nend```\nwhere `x…` would be the deserialized fields. There’d be generic definitions something like `fromarrow(V, x…) = nothing` and if there’s no overload, then we’d just return a NamedTuple..\n\nOn the serialization side, we’d have:\n• `Arrow.ArrowTypes.toarrow(x) = x`, and `Arrow.ArrowTypes.arrowname(::Type{T})` which would be overloadable for custom types where you’d return the arrow object to serialize, and `arrowname` would be the field metadata type name. By default `arrowname(T) = Symbol()`, so we wouldn’t name it, so you’d only get a NamedTuple out unless you overload. \nMy biggest question then is if this would really work for parametric types. You could serialize using `nameof` in `arrowname`, but then in `fromarrow`, you’d have to be able to build your type. I think it gets awkward if you have non-field-based type parameters that you don’t necessarily want to serialize in `arrowname`, but maybe that’s just a pill you have to swallow. If you can’t infer the type parameters from the data itself, you’ll need to serialize it in the `arrowname` and pull it back out somehow.","author_name":"Jacob Quinn","author_link":"https://julialang.slack.com/team/U681ELA87","author_icon":"https://secure.gravatar.com/avatar/d788bf7fd037ebef5798d8881c5faa2f.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-48.png","mrkdwn_in":["text"],"id":1,"original_url":"https://julialang.slack.com/archives/C674VR0HH/p1615846377461400?thread_ts=1615681758.430500&amp;cid=C674VR0HH","footer":"From a thread in #data"}],"blocks":[{"type":"rich_text","block_id":"Qld+/","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://github.com/JuliaData/Arrow.jl/pull/150","text":"define caller-overloadable arrownameof(T) to allow callers to specify preferred Julia <-> Arrow type matching behavior"},{"type":"text","text":"\n\nan easily replaceable stopgap to enable some custom (de)serialization behaviors until something like "},{"type":"user","user_id":"U681ELA87"},{"type":"text","text":"'s plan "},{"type":"link","url":"https://julialang.slack.com/archives/C674VR0HH/p1615846377461400?thread_ts=1615681758.430500&cid=C674VR0HH","text":"here"},{"type":"text","text":" lands"}]}]}],"thread_ts":"1616262076.113300","reply_count":2,"reply_users_count":1,"latest_reply":"1616452395.192500","reply_users":["U681ELA87"],"subscribed":false},{"client_msg_id":"8239892f-dc37-40e4-9d2a-5358f31ebd45","type":"message","text":"Sorry for being a ghost here. I’ve been slowly churning through the work I outlined here. I’ve gotten pretty far, but need to thread through the changes on the reading side now. Feel free to take a look and let me know if you see any concerns. <https://github.com/JuliaData/Arrow.jl/compare/jq/newarrowtypes?expand=1>","user":"U681ELA87","ts":"1616452160.192300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bup","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Sorry for being a ghost here. I’ve been slowly churning through the work I outlined here. I’ve gotten pretty far, but need to thread through the changes on the reading side now. Feel free to take a look and let me know if you see any concerns. "},{"type":"link","url":"https://github.com/JuliaData/Arrow.jl/compare/jq/newarrowtypes?expand=1"}]}]}],"thread_ts":"1616262076.113300","parent_user_id":"U674T0Y9Z"},{"client_msg_id":"117f1059-c0d0-42fb-ab89-db77c85402d8","type":"message","text":"I’m also probably over-worrying about how breaking this is and if there’s anything we can do to lessen the blow, but I can’t help it :stuck_out_tongue:","user":"U681ELA87","ts":"1616452395.192500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Isr","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’m also probably over-worrying about how breaking this is and if there’s anything we can do to lessen the blow, but I can’t help it "},{"type":"emoji","name":"stuck_out_tongue"}]}]}],"thread_ts":"1616262076.113300","parent_user_id":"U674T0Y9Z"}]