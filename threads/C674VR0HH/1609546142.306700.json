[{"client_msg_id":"a24cb3f4-a06e-41de-bbeb-37aa4664ddc0","type":"message","text":"I am assuming you are on DataFrames 0.22 and Tables 1.2.2. Start Julia with `depwarn=yes`. The reason is that temporarily - in DataFrames.jl 0.22 - we keep old code for `AbstractMatrix` handling, and `sol` is an `AbstractMatrix` (in 1.0 which, will be released soon, this deprecation will be removed - if something is a Tables.jl table it will be treated as such even if it is an `AbstractMatrix`).\n\nAdditionally - your code has a problem - not related with DataFrames.jl, but Tables.jl integration. In the case that `sol` has three dimensions then e.g. `Tables.columns(sol)` works correctly. Wihle when `sol` is two dimensional you get an error than `sol` is not a table.\n\nIn conclusion:\n1. till DataFrames.jl is released the `AbstractMatrix` case is special cased, and you have to write `DataFrames(Tables.columns(sol))` to have things working under DataFrames.jl 0.22 (under DataFrames.jl 1.0 just what you have will work);\n2. In order for things to work you should make your `sol` compliant with Tables.jl API. The problem is that `Tables.columns` does not allow `AbstractMatrix` as an argument by default (see line 5 in matrix.jl in Tables.jl implementation). This needs to be overriden for your type","user":"U8JAMQGQY","ts":"1609546142.306700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wwdqn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am assuming you are on DataFrames 0.22 and Tables 1.2.2. Start Julia with "},{"type":"text","text":"depwarn=yes","style":{"code":true}},{"type":"text","text":". The reason is that temporarily - in DataFrames.jl 0.22 - we keep old code for "},{"type":"text","text":"AbstractMatrix","style":{"code":true}},{"type":"text","text":" handling, and "},{"type":"text","text":"sol","style":{"code":true}},{"type":"text","text":" is an "},{"type":"text","text":"AbstractMatrix","style":{"code":true}},{"type":"text","text":" (in 1.0 which, will be released soon, this deprecation will be removed - if something is a Tables.jl table it will be treated as such even if it is an "},{"type":"text","text":"AbstractMatrix","style":{"code":true}},{"type":"text","text":").\n\nAdditionally - your code has a problem - not related with DataFrames.jl, but Tables.jl integration. In the case that "},{"type":"text","text":"sol","style":{"code":true}},{"type":"text","text":" has three dimensions then e.g. "},{"type":"text","text":"Tables.columns(sol)","style":{"code":true}},{"type":"text","text":" works correctly. Wihle when "},{"type":"text","text":"sol","style":{"code":true}},{"type":"text","text":" is two dimensional you get an error than "},{"type":"text","text":"sol","style":{"code":true}},{"type":"text","text":" is not a table.\n\nIn conclusion:\n"}]},{"type":"rich_text_list","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"till DataFrames.jl is released the "},{"type":"text","text":"AbstractMatrix","style":{"code":true}},{"type":"text","text":" case is special cased, and you have to write "},{"type":"text","text":"DataFrames(Tables.columns(sol))","style":{"code":true}},{"type":"text","text":" to have things working under DataFrames.jl 0.22 (under DataFrames.jl 1.0 just what you have will work);"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"In order for things to work you should make your "},{"type":"text","text":"sol","style":{"code":true}},{"type":"text","text":" compliant with Tables.jl API. The problem is that "},{"type":"text","text":"Tables.columns","style":{"code":true}},{"type":"text","text":" does not allow "},{"type":"text","text":"AbstractMatrix","style":{"code":true}},{"type":"text","text":" as an argument by default (see line 5 in matrix.jl in Tables.jl implementation). This needs to be overriden for your type"}]}],"style":"ordered","indent":0}]}],"thread_ts":"1609546142.306700","reply_count":7,"reply_users_count":2,"latest_reply":"1609548126.308000","reply_users":["U8JAMQGQY","U69BL50BF"],"subscribed":false},{"client_msg_id":"ca45ce45-dcf5-4546-95c3-612635c4ba0d","type":"message","text":"<@U681ELA87> since <https://tables.juliadata.org/stable/#Implementing-the-Interface-(i.e.-becoming-a-Tables.jl-source)-1> allows a type to define `Tables.rows` or `Tables.columns` maybe in <https://github.com/JuliaData/DataFrames.jl/blob/main/src/other/tables.jl#L55https://github.com/JuliaData/DataFrames.jl/blob/main/src/other/tables.jl#L55> we should check if the passed table defines row- or column- access style and have two code paths?","user":"U8JAMQGQY","ts":"1609546241.306800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jIc6","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U681ELA87"},{"type":"text","text":" since "},{"type":"link","url":"https://tables.juliadata.org/stable/#Implementing-the-Interface-(i.e.-becoming-a-Tables.jl-source)-1"},{"type":"text","text":" allows a type to define "},{"type":"text","text":"Tables.rows","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"Tables.columns","style":{"code":true}},{"type":"text","text":" maybe in "},{"type":"link","url":"https://github.com/JuliaData/DataFrames.jl/blob/main/src/other/tables.jl#L55https://github.com/JuliaData/DataFrames.jl/blob/main/src/other/tables.jl#L55"},{"type":"text","text":" we should check if the passed table defines row- or column- access style and have two code paths?"}]}]}],"thread_ts":"1609546142.306700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"43fca84e-83ce-49a2-a2d2-c23c0cfe7aed","type":"message","text":"&gt; In order for things to work you should make your `sol` compliant with Tables.jl API. The problem is that `Tables.columns` does not allow `AbstractMatrix` as an argument by default (see line 5 in matrix.jl in Tables.jl implementation). This needs to be overriden for your type","user":"U69BL50BF","ts":"1609546400.307000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"sT3N2","elements":[{"type":"rich_text_quote","elements":[{"type":"text","text":"In order for things to work you should make your "},{"type":"text","text":"sol","style":{"code":true}},{"type":"text","text":" compliant with Tables.jl API. The problem is that "},{"type":"text","text":"Tables.columns","style":{"code":true}},{"type":"text","text":" does not allow "},{"type":"text","text":"AbstractMatrix","style":{"code":true}},{"type":"text","text":" as an argument by default (see line 5 in matrix.jl in Tables.jl implementation). This needs to be overriden for your type"}]}]}],"thread_ts":"1609546142.306700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"943adccf-160e-4b3b-ab5c-960a5a8a3d92","type":"message","text":"I don't get this part.","user":"U69BL50BF","ts":"1609546403.307200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"C0V","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't get this part."}]}]}],"thread_ts":"1609546142.306700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"64677411-bc4f-4f1c-b364-36607edfde88","type":"message","text":"`Tables.columns(x::DESolution) = Tables.columntable(Tables.rows(x))` doesn't handle that?","user":"U69BL50BF","ts":"1609546414.307400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HXRT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Tables.columns(x::DESolution) = Tables.columntable(Tables.rows(x))","style":{"code":true}},{"type":"text","text":" doesn't handle that?"}]}]}],"thread_ts":"1609546142.306700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"4b0b040c-fe22-4a06-a4d6-bfaf46e8eeca","type":"message","text":"I will answer on GitHub to keep it persistent. OK?","user":"U8JAMQGQY","ts":"1609546568.307600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"FHei","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I will answer on GitHub to keep it persistent. OK?"}]}]}],"thread_ts":"1609546142.306700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"791d3420-72e2-4a46-a970-2bb2f4e151fe","type":"message","text":"I am recompiling the DifferentialEquations.jl but earlier I was getting an error when calling `Tables.columns(sol)` for your 2-dimensional case","user":"U8JAMQGQY","ts":"1609546724.307800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bwRl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am recompiling the DifferentialEquations.jl but earlier I was getting an error when calling "},{"type":"text","text":"Tables.columns(sol)","style":{"code":true}},{"type":"text","text":" for your 2-dimensional case"}]}]}],"thread_ts":"1609546142.306700","parent_user_id":"U8JAMQGQY"},{"client_msg_id":"94ef2c10-778e-48d0-aeb9-1745718800a2","type":"message","text":"I have commented on GitHub - I was testing on a wrong version of DiffEqBase.jl. Having updated everything `Tables.columns` works correctly, so you only need to wait for DataFrames.jl 1.0 release to have a clean solution and use `Tables.columns` wrapper for the time being.","user":"U8JAMQGQY","ts":"1609548126.308000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QW5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have commented on GitHub - I was testing on a wrong version of DiffEqBase.jl. Having updated everything "},{"type":"text","text":"Tables.columns","style":{"code":true}},{"type":"text","text":" works correctly, so you only need to wait for DataFrames.jl 1.0 release to have a clean solution and use "},{"type":"text","text":"Tables.columns","style":{"code":true}},{"type":"text","text":" wrapper for the time being."}]}]}],"thread_ts":"1609546142.306700","parent_user_id":"U8JAMQGQY"}]