[{"client_msg_id":"79ad86ea-6812-4122-ae1e-a1fa208fbc27","type":"message","text":"any suggestions on how can I use `|&gt;` for `select` with dataframes?\n```julia&gt; df = DataFrame(:a =&gt; [1, 2], :b =&gt; [1, 2])\n2×2 DataFrame\n Row │ a      b     \n     │ Int64  Int64 \n─────┼──────────────\n   1 │     1      1\n   2 │     2      2\n\njulia&gt; select(df, :a)\n2×1 DataFrame\n Row │ a     \n     │ Int64 \n─────┼───────\n   1 │     1\n   2 │     2\n\njulia&gt; df |&gt; select(:a)\nERROR: MethodError: no method matching select(::Symbol)\nClosest candidates are:\n  select(::AbstractDataFrame, ::Any...; copycols, renamecols) at C:\\Users\\deyan\\.julia\\packages\\DataFrames\\oQ5c7\\src\\abstractdataframe\\selection.jl:847\n  select(::Union{Function, Type}, ::AbstractDataFrame; renamecols) at C:\\Users\\deyan\\.julia\\packages\\DataFrames\\oQ5c7\\src\\abstractdataframe\\selection.jl:850\n  select(::Union{Function, Type}, ::GroupedDataFrame; copycols, keepkeys, ungroup, renamecols) at C:\\Users\\deyan\\.julia\\packages\\DataFrames\\oQ5c7\\src\\groupeddataframe\\splitapplycombine.jl:642\n  ...\nStacktrace:\n [1] top-level scope\n   @ REPL[15]:1\n\njulia&gt; ```","user":"U8WEJ293L","ts":"1616837802.287900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HjYd","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"any suggestions on how can I use "},{"type":"text","text":"|>","style":{"code":true}},{"type":"text","text":" for "},{"type":"text","text":"select","style":{"code":true}},{"type":"text","text":" with dataframes?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> df = DataFrame(:a => [1, 2], :b => [1, 2])\n2×2 DataFrame\n Row │ a      b     \n     │ Int64  Int64 \n─────┼──────────────\n   1 │     1      1\n   2 │     2      2\n\njulia> select(df, :a)\n2×1 DataFrame\n Row │ a     \n     │ Int64 \n─────┼───────\n   1 │     1\n   2 │     2\n\njulia> df |> select(:a)\nERROR: MethodError: no method matching select(::Symbol)\nClosest candidates are:\n  select(::AbstractDataFrame, ::Any...; copycols, renamecols) at C:\\Users\\deyan\\.julia\\packages\\DataFrames\\oQ5c7\\src\\abstractdataframe\\selection.jl:847\n  select(::Union{Function, Type}, ::AbstractDataFrame; renamecols) at C:\\Users\\deyan\\.julia\\packages\\DataFrames\\oQ5c7\\src\\abstractdataframe\\selection.jl:850\n  select(::Union{Function, Type}, ::GroupedDataFrame; copycols, keepkeys, ungroup, renamecols) at C:\\Users\\deyan\\.julia\\packages\\DataFrames\\oQ5c7\\src\\groupeddataframe\\splitapplycombine.jl:642\n  ...\nStacktrace:\n [1] top-level scope\n   @ REPL[15]:1\n\njulia> "}]}]}],"thread_ts":"1616837802.287900","reply_count":6,"reply_users_count":5,"latest_reply":"1617030232.297800","reply_users":["U017J1FHTSA","U8WEJ293L","U01C2E6TYEM","U017JTQFNEQ","U8JAMQGQY"],"is_locked":false,"subscribed":false},{"client_msg_id":"987c821b-4d76-4b39-b4fd-ab0fb2b8ceb8","type":"message","text":"The |&gt; operator pushes the lhs into a single argument function. So your example would only work if select(:a) returned a function.\n\nWhat you probably want is the Chain.jl or Pipe.jl package","user":"U017J1FHTSA","ts":"1616838156.288000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4e+u","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The |> operator pushes the lhs into a single argument function. So your example would only work if select(:a) returned a function.\n\nWhat you probably want is the Chain.jl or Pipe.jl package"}]}]}],"thread_ts":"1616837802.287900","parent_user_id":"U8WEJ293L"},{"client_msg_id":"e28d9928-f112-4ac9-b1f0-40ebde6e82ec","type":"message","text":"Chain.jl in particular will give you a workflow like\n\n@chain df begin\n    select(:a)  # df is the implicit first argument\n    unique\n    groupby(:b)\nend","user":"U017J1FHTSA","ts":"1616838370.288200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"3WnQT","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Chain.jl in particular will give you a workflow like\n\n@chain df begin\n    select(:a)  # df is the implicit first argument\n    unique\n    groupby(:b)\nend"}]}]}],"thread_ts":"1616837802.287900","parent_user_id":"U8WEJ293L"},{"client_msg_id":"590bd0a8-9b29-4f07-bb9e-57a55b12e464","type":"message","text":"thank you! I'll check these out","user":"U8WEJ293L","ts":"1616838876.288400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RO5Yx","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"thank you! I'll check these out"}]}]}],"thread_ts":"1616837802.287900","parent_user_id":"U8WEJ293L","reactions":[{"name":"+1::skin-tone-6","users":["U017J1FHTSA"],"count":1}]},{"client_msg_id":"2803abbf-8df7-4223-b8f1-6854367da4db","type":"message","text":"For reference, and because it's my preferred method, you could also do this with anonymous functions without packages:\n```df |&gt;\n    df -&gt; select(df, :a) |&gt;\n    df -&gt; filter(:a &gt;= 1, df) # For demonstration purposes```","user":"U01C2E6TYEM","ts":"1616944619.290000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"CN+CA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"For reference, and because it's my preferred method, you could also do this with anonymous functions without packages:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"df |>\n    df -> select(df, :a) |>\n    df -> filter(:a >= 1, df) # For demonstration purposes"}]}]}],"thread_ts":"1616837802.287900","parent_user_id":"U8WEJ293L"},{"client_msg_id":"c609d6be-78da-4897-8460-25b3b6a0420e","type":"message","text":"<@U01C2E6TYEM> i thought <@U8JAMQGQY> warned about using anonymous functions for performance reasons. but i’m naïve, so maybe its a different case.","user":"U017JTQFNEQ","ts":"1617028825.297600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"+Y477","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U01C2E6TYEM"},{"type":"text","text":" i thought "},{"type":"user","user_id":"U8JAMQGQY"},{"type":"text","text":" warned about using anonymous functions for performance reasons. but i’m naïve, so maybe its a different case."}]}]}],"thread_ts":"1616837802.287900","parent_user_id":"U8WEJ293L"},{"client_msg_id":"1ff95a69-6cb8-4e2a-ab75-8276c6073851","type":"message","text":"these anonymous functions are cheap to compile and run only once. What you should avoid is e.g.:\n```combine(df) do sdf\n   ...\nend```\nas this will be slow to compile. Of course if you run it only once it is not a problem. But if you want to run it many times it is better to write:\n```f(sdf) = ...\ncombine(df, f)```\nas then you compile both `f` and `combine` only once","user":"U8JAMQGQY","ts":"1617030232.297800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"41I","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"these anonymous functions are cheap to compile and run only once. What you should avoid is e.g.:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"combine(df) do sdf\n   ...\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"as this will be slow to compile. Of course if you run it only once it is not a problem. But if you want to run it many times it is better to write:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"f(sdf) = ...\ncombine(df, f)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"as then you compile both "},{"type":"text","text":"f","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"combine","style":{"code":true}},{"type":"text","text":" only once"}]}]}],"thread_ts":"1616837802.287900","parent_user_id":"U8WEJ293L","reactions":[{"name":"thumbsup_all","users":["U017JTQFNEQ"],"count":1}]}]