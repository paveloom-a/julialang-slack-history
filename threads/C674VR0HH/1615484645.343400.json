[{"client_msg_id":"e1e3a942-ce56-4cb8-b8ce-4b46876c8e06","type":"message","text":"related: has there been discussion about a version of `unique` that accepts an equivalence relation?","user":"U011V2YN59N","ts":"1615484645.343400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lV0Ky","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"related: has there been discussion about a version of "},{"type":"text","text":"unique","style":{"code":true}},{"type":"text","text":" that accepts an equivalence relation?"}]}]}],"thread_ts":"1615484645.343400","reply_count":15,"reply_users_count":3,"latest_reply":"1615486530.347800","reply_users":["UBF9YRB6H","U011V2YN59N","U8JAMQGQY"],"subscribed":false},{"client_msg_id":"a8c3dbc1-9f9a-4618-8068-ebf5b6dff142","type":"message","text":"I don't think so, but you can specify particular variables, so you would create a new variable with hash you want and call `unique(df, :new_hash)`","user":"UBF9YRB6H","ts":"1615484947.343700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xdKm=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't think so, but you can specify particular variables, so you would create a new variable with hash you want and call "},{"type":"text","text":"unique(df, :new_hash)","style":{"code":true}}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"8f744af8-bb0a-4434-90c6-200bd8e62986","type":"message","text":"yeah the dummy variable just strikes me as less elegant, plus a lot of other DataFrames functions accept predicates","user":"U011V2YN59N","ts":"1615485304.344900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Kop2Q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah the dummy variable just strikes me as less elegant, plus a lot of other DataFrames functions accept predicates"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"3fb84bd2-0c16-46be-94ab-5786a56ca8d7","type":"message","text":"if I write a PR with this, would it be accepted you think?","user":"U011V2YN59N","ts":"1615485315.345100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JM/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if I write a PR with this, would it be accepted you think?"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"2d509fbc-5fbe-425d-835d-fd9e2c757147","type":"message","text":"it wouldn't be added before 1.0, and probably wouldn't be added until the same method exists in `Base`, which it looks like it doesnt exist. I think a more likely addition would be to have a `unique(fun, df)` method or a `unique(vars =&gt; fun, df)` method. I think it was mentioned on slack the other day but can't find an issue for it.","user":"UBF9YRB6H","ts":"1615485588.345300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xDG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it wouldn't be added before 1.0, and probably wouldn't be added until the same method exists in "},{"type":"text","text":"Base","style":{"code":true}},{"type":"text","text":", which it looks like it doesnt exist. I think a more likely addition would be to have a "},{"type":"text","text":"unique(fun, df)","style":{"code":true}},{"type":"text","text":" method or a "},{"type":"text","text":"unique(vars => fun, df)","style":{"code":true}},{"type":"text","text":" method. I think it was mentioned on slack the other day but can't find an issue for it."}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"4dd0bda0-e42b-46ee-a411-f02797997a6d","type":"message","text":"Predicate would not be accepted. What we could accept is passing transformation specification that would be used to make comparisons using `isequal`","user":"U8JAMQGQY","ts":"1615485599.345500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EsY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Predicate would not be accepted. What we could accept is passing transformation specification that would be used to make comparisons using "},{"type":"text","text":"isequal","style":{"code":true}}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N","reactions":[{"name":"+1","users":["U011V2YN59N"],"count":1}]},{"client_msg_id":"62ca4b40-93ca-4d6d-a304-cbbe121820b5","type":"message","text":"<@UBF9YRB6H> - the method `unique(f, iter)` exists in Julia Base and we could accept the same for DataFrames.jl. I think it is a relatively simple change that could go in at any time (for sure it is not a 1.0 release blocker)","user":"U8JAMQGQY","ts":"1615485654.345800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=+Pbi","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UBF9YRB6H"},{"type":"text","text":" - the method "},{"type":"text","text":"unique(f, iter)","style":{"code":true}},{"type":"text","text":" exists in Julia Base and we could accept the same for DataFrames.jl. I think it is a relatively simple change that could go in at any time (for sure it is not a 1.0 release blocker)"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"39e30ce5-aa11-4d8e-80e5-e694e95a0fcd","type":"message","text":"wait what does `predicate` mean in this context?","user":"UBF9YRB6H","ts":"1615485671.346000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=E1zA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"wait what does "},{"type":"text","text":"predicate","style":{"code":true}},{"type":"text","text":" mean in this context?"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"ee96c3be-09d6-4200-b3fb-a93d853f1c72","type":"message","text":"predicate would take two rows and return `true` or `false`","user":"U8JAMQGQY","ts":"1615485694.346200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wVfb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"predicate would take two rows and return "},{"type":"text","text":"true","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"false","style":{"code":true}}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"62186878-6540-4ce8-b36d-2ad16f7f88d0","type":"message","text":"`isequal` is a predicate for example in this context","user":"U8JAMQGQY","ts":"1615485709.346400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Aq6jZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"isequal","style":{"code":true}},{"type":"text","text":" is a predicate for example in this context"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"0f4776d3-37ea-4287-bbc1-8d9975d88192","type":"message","text":"<https://en.wikipedia.org/wiki/Predicate_(mathematical_logic)>","user":"U8JAMQGQY","ts":"1615485745.346600","team":"T68168MUP","edited":{"user":"U8JAMQGQY","ts":"1615485749.000000"},"blocks":[{"type":"rich_text","block_id":"1hz","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://en.wikipedia.org/wiki/Predicate_(mathematical_logic)"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"9eaf7edd-d16d-42f3-b0ff-1326f765ce9b","type":"message","text":"ah thanks!","user":"UBF9YRB6H","ts":"1615485764.347000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zvz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah thanks!"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"2829b7ef-7c3a-40aa-be22-1490f3faa6d6","type":"message","text":"<@U011V2YN59N> - we could probably accept the same syntax as we allow in `filter` (but probably a discussion would be opened if we rather prefer something that follows `subset` semantics). I think it is best to discuss it in the issue.","user":"U8JAMQGQY","ts":"1615485874.347200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GPCy","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U011V2YN59N"},{"type":"text","text":" - we could probably accept the same syntax as we allow in "},{"type":"text","text":"filter","style":{"code":true}},{"type":"text","text":" (but probably a discussion would be opened if we rather prefer something that follows "},{"type":"text","text":"subset","style":{"code":true}},{"type":"text","text":" semantics). I think it is best to discuss it in the issue."}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"0046175d-b670-46a8-88db-633f4a36eb4d","type":"message","text":"<@U8JAMQGQY> ok, is there already an issue or should I make one?","user":"U011V2YN59N","ts":"1615486032.347400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"59hr9","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U8JAMQGQY"},{"type":"text","text":" ok, is there already an issue or should I make one?"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"c037e83a-9060-47a7-833b-1fb4dd1ec422","type":"message","text":"I think there is no such issue. Please open a new one.","user":"U8JAMQGQY","ts":"1615486051.347600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ck4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think there is no such issue. Please open a new one."}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"aa81bd75-dedb-4db7-9c8c-d522863c0fd8","type":"message","text":"issue here: <https://github.com/JuliaData/DataFrames.jl/issues/2651>","user":"U011V2YN59N","ts":"1615486530.347800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W+3s4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"issue here: "},{"type":"link","url":"https://github.com/JuliaData/DataFrames.jl/issues/2651"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"}]