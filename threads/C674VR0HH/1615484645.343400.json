[{"client_msg_id":"e1e3a942-ce56-4cb8-b8ce-4b46876c8e06","type":"message","text":"related: has there been discussion about a version of `unique` that accepts an equivalence relation?","user":"U011V2YN59N","ts":"1615484645.343400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lV0Ky","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"related: has there been discussion about a version of "},{"type":"text","text":"unique","style":{"code":true}},{"type":"text","text":" that accepts an equivalence relation?"}]}]}],"thread_ts":"1615484645.343400","reply_count":31,"reply_users_count":4,"latest_reply":"1615491051.351300","reply_users":["UBF9YRB6H","U011V2YN59N","U8JAMQGQY","U67431ELR"],"subscribed":false},{"client_msg_id":"a8c3dbc1-9f9a-4618-8068-ebf5b6dff142","type":"message","text":"I don't think so, but you can specify particular variables, so you would create a new variable with hash you want and call `unique(df, :new_hash)`","user":"UBF9YRB6H","ts":"1615484947.343700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xdKm=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I don't think so, but you can specify particular variables, so you would create a new variable with hash you want and call "},{"type":"text","text":"unique(df, :new_hash)","style":{"code":true}}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"8f744af8-bb0a-4434-90c6-200bd8e62986","type":"message","text":"yeah the dummy variable just strikes me as less elegant, plus a lot of other DataFrames functions accept predicates","user":"U011V2YN59N","ts":"1615485304.344900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Kop2Q","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"yeah the dummy variable just strikes me as less elegant, plus a lot of other DataFrames functions accept predicates"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"3fb84bd2-0c16-46be-94ab-5786a56ca8d7","type":"message","text":"if I write a PR with this, would it be accepted you think?","user":"U011V2YN59N","ts":"1615485315.345100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"JM/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"if I write a PR with this, would it be accepted you think?"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"2d509fbc-5fbe-425d-835d-fd9e2c757147","type":"message","text":"it wouldn't be added before 1.0, and probably wouldn't be added until the same method exists in `Base`, which it looks like it doesnt exist. I think a more likely addition would be to have a `unique(fun, df)` method or a `unique(vars =&gt; fun, df)` method. I think it was mentioned on slack the other day but can't find an issue for it.","user":"UBF9YRB6H","ts":"1615485588.345300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xDG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it wouldn't be added before 1.0, and probably wouldn't be added until the same method exists in "},{"type":"text","text":"Base","style":{"code":true}},{"type":"text","text":", which it looks like it doesnt exist. I think a more likely addition would be to have a "},{"type":"text","text":"unique(fun, df)","style":{"code":true}},{"type":"text","text":" method or a "},{"type":"text","text":"unique(vars => fun, df)","style":{"code":true}},{"type":"text","text":" method. I think it was mentioned on slack the other day but can't find an issue for it."}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"4dd0bda0-e42b-46ee-a411-f02797997a6d","type":"message","text":"Predicate would not be accepted. What we could accept is passing transformation specification that would be used to make comparisons using `isequal`","user":"U8JAMQGQY","ts":"1615485599.345500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EsY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Predicate would not be accepted. What we could accept is passing transformation specification that would be used to make comparisons using "},{"type":"text","text":"isequal","style":{"code":true}}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N","reactions":[{"name":"+1","users":["U011V2YN59N"],"count":1}]},{"client_msg_id":"62ca4b40-93ca-4d6d-a304-cbbe121820b5","type":"message","text":"<@UBF9YRB6H> - the method `unique(f, iter)` exists in Julia Base and we could accept the same for DataFrames.jl. I think it is a relatively simple change that could go in at any time (for sure it is not a 1.0 release blocker)","user":"U8JAMQGQY","ts":"1615485654.345800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=+Pbi","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UBF9YRB6H"},{"type":"text","text":" - the method "},{"type":"text","text":"unique(f, iter)","style":{"code":true}},{"type":"text","text":" exists in Julia Base and we could accept the same for DataFrames.jl. I think it is a relatively simple change that could go in at any time (for sure it is not a 1.0 release blocker)"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"39e30ce5-aa11-4d8e-80e5-e694e95a0fcd","type":"message","text":"wait what does `predicate` mean in this context?","user":"UBF9YRB6H","ts":"1615485671.346000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=E1zA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"wait what does "},{"type":"text","text":"predicate","style":{"code":true}},{"type":"text","text":" mean in this context?"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"ee96c3be-09d6-4200-b3fb-a93d853f1c72","type":"message","text":"predicate would take two rows and return `true` or `false`","user":"U8JAMQGQY","ts":"1615485694.346200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wVfb","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"predicate would take two rows and return "},{"type":"text","text":"true","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"false","style":{"code":true}}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"62186878-6540-4ce8-b36d-2ad16f7f88d0","type":"message","text":"`isequal` is a predicate for example in this context","user":"U8JAMQGQY","ts":"1615485709.346400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Aq6jZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"isequal","style":{"code":true}},{"type":"text","text":" is a predicate for example in this context"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"0f4776d3-37ea-4287-bbc1-8d9975d88192","type":"message","text":"<https://en.wikipedia.org/wiki/Predicate_(mathematical_logic)>","user":"U8JAMQGQY","ts":"1615485745.346600","team":"T68168MUP","edited":{"user":"U8JAMQGQY","ts":"1615485749.000000"},"blocks":[{"type":"rich_text","block_id":"1hz","elements":[{"type":"rich_text_section","elements":[{"type":"link","url":"https://en.wikipedia.org/wiki/Predicate_(mathematical_logic)"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"9eaf7edd-d16d-42f3-b0ff-1326f765ce9b","type":"message","text":"ah thanks!","user":"UBF9YRB6H","ts":"1615485764.347000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"zvz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah thanks!"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"2829b7ef-7c3a-40aa-be22-1490f3faa6d6","type":"message","text":"<@U011V2YN59N> - we could probably accept the same syntax as we allow in `filter` (but probably a discussion would be opened if we rather prefer something that follows `subset` semantics). I think it is best to discuss it in the issue.","user":"U8JAMQGQY","ts":"1615485874.347200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"GPCy","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U011V2YN59N"},{"type":"text","text":" - we could probably accept the same syntax as we allow in "},{"type":"text","text":"filter","style":{"code":true}},{"type":"text","text":" (but probably a discussion would be opened if we rather prefer something that follows "},{"type":"text","text":"subset","style":{"code":true}},{"type":"text","text":" semantics). I think it is best to discuss it in the issue."}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"0046175d-b670-46a8-88db-633f4a36eb4d","type":"message","text":"<@U8JAMQGQY> ok, is there already an issue or should I make one?","user":"U011V2YN59N","ts":"1615486032.347400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"59hr9","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U8JAMQGQY"},{"type":"text","text":" ok, is there already an issue or should I make one?"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"c037e83a-9060-47a7-833b-1fb4dd1ec422","type":"message","text":"I think there is no such issue. Please open a new one.","user":"U8JAMQGQY","ts":"1615486051.347600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ck4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think there is no such issue. Please open a new one."}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"aa81bd75-dedb-4db7-9c8c-d522863c0fd8","type":"message","text":"issue here: <https://github.com/JuliaData/DataFrames.jl/issues/2651>","user":"U011V2YN59N","ts":"1615486530.347800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W+3s4","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"issue here: "},{"type":"link","url":"https://github.com/JuliaData/DataFrames.jl/issues/2651"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"2ecd6e8b-70c5-4b2c-914d-951815764574","type":"message","text":"I just realized that we already support it (composition magic):\n```julia&gt; df = DataFrame(a=1:10, b=10:-1:1)\n10×2 DataFrame\n Row │ a      b     \n     │ Int64  Int64 \n─────┼──────────────\n   1 │     1     10\n   2 │     2      9\n   3 │     3      8\n   4 │     4      7\n   5 │     5      6\n   6 │     6      5\n   7 │     7      4\n   8 │     8      3\n   9 │     9      2\n  10 │    10      1\n\njulia&gt; unique(df, [:a, :b] =&gt; (a,b) -&gt; a .+ b)\n1×2 DataFrame\n Row │ a      b     \n     │ Int64  Int64 \n─────┼──────────────\n   1 │     1     10```","user":"U8JAMQGQY","ts":"1615486898.348000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5kF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I just realized that we already support it (composition magic):\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> df = DataFrame(a=1:10, b=10:-1:1)\n10×2 DataFrame\n Row │ a      b     \n     │ Int64  Int64 \n─────┼──────────────\n   1 │     1     10\n   2 │     2      9\n   3 │     3      8\n   4 │     4      7\n   5 │     5      6\n   6 │     6      5\n   7 │     7      4\n   8 │     8      3\n   9 │     9      2\n  10 │    10      1\n\njulia> unique(df, [:a, :b] => (a,b) -> a .+ b)\n1×2 DataFrame\n Row │ a      b     \n     │ Int64  Int64 \n─────┼──────────────\n   1 │     1     10"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"25ee5b19-50d1-4316-b417-90fa83dfd72a","type":"message","text":"that's cool, thanks!","user":"U011V2YN59N","ts":"1615486954.348200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Qo0j","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that's cool, thanks!"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"84144804-5031-43df-93a2-8a7a97a7501b","type":"message","text":"lol wait why does this work","user":"UBF9YRB6H","ts":"1615487017.348400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"vQAYh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"lol wait why does this work"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"81a90677-7164-46c2-b018-1803dec37576","type":"message","text":"time to make a macro for dataframesmeta!","user":"UBF9YRB6H","ts":"1615487029.348600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Ti8v","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"time to make a macro for dataframesmeta!"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"c19600f0-20f8-41f1-a9b3-384755ea4b22","type":"message","text":"(assuming we add tests and add it to docs, which I would be happy to do)","user":"UBF9YRB6H","ts":"1615487044.348800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"WJX","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"(assuming we add tests and add it to docs, which I would be happy to do)"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"6bb55164-2430-46a2-8709-6d69e47512ca","type":"message","text":"it works because we pass column selector to `select`","user":"U8JAMQGQY","ts":"1615487045.349000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"VGO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it works because we pass column selector to "},{"type":"text","text":"select","style":{"code":true}}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N","reactions":[{"name":"juliabouncer","users":["UBF9YRB6H","U011V2YN59N"],"count":2}]},{"client_msg_id":"dea775cd-508d-497b-8b8f-e8e8f73ba50a","type":"message","text":"in the past `select` was not so powerful, so we got this functionality as a side effect of improvements of `select` :slightly_smiling_face:","user":"U8JAMQGQY","ts":"1615487082.349300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MlUg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"in the past "},{"type":"text","text":"select","style":{"code":true}},{"type":"text","text":" was not so powerful, so we got this functionality as a side effect of improvements of "},{"type":"text","text":"select","style":{"code":true}},{"type":"text","text":" "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"6ed08b2b-9450-42d5-b30e-ac28dc054ae3","type":"message","text":"So that's not documented nor tested, right? :slightly_smiling_face:","user":"U67431ELR","ts":"1615489328.349600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"n35","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"So that's not documented nor tested, right? "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"dd5b5401-cb64-478a-b224-9853b4426ca5","type":"message","text":"And would the same approach work for `sort`?","user":"U67431ELR","ts":"1615489384.349800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"eg1","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And would the same approach work for "},{"type":"text","text":"sort","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"2d48e884-0bc0-4c8b-9fd1-0fef66844fc1","type":"message","text":"I am now checking and making a PR. `describe` also allows transformations as it uses `select` internally :slightly_smiling_face:","user":"U8JAMQGQY","ts":"1615489479.350000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nrIL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I am now checking and making a PR. "},{"type":"text","text":"describe","style":{"code":true}},{"type":"text","text":" also allows transformations as it uses "},{"type":"text","text":"select","style":{"code":true}},{"type":"text","text":" internally "},{"type":"emoji","name":"slightly_smiling_face"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N","reactions":[{"name":"tada","users":["U67431ELR"],"count":1}]},{"client_msg_id":"4c1168bc-c199-4cc5-9090-80f7ee5d453b","type":"message","text":"no `sort` does not allow it, as it uses `Index`","user":"U8JAMQGQY","ts":"1615489540.350300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"IBCvk","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"no "},{"type":"text","text":"sort","style":{"code":true}},{"type":"text","text":" does not allow it, as it uses "},{"type":"text","text":"Index","style":{"code":true}}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"7a8f0026-4f2c-46a7-af2f-b5ad36ca07d9","type":"message","text":"but we could easily change it.","user":"U8JAMQGQY","ts":"1615489590.350500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cyPe","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"but we could easily change it."}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"915ef031-9a67-4a52-aa1d-6c87be8c4455","type":"message","text":"it would resolve the request to sort by transformation of columns. The only problem is that `sort` has a complex syntax including `order` transformation, so I would leave it for a separate PR.","user":"U8JAMQGQY","ts":"1615489688.350700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jnP=2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it would resolve the request to sort by transformation of columns. The only problem is that "},{"type":"text","text":"sort","style":{"code":true}},{"type":"text","text":" has a complex syntax including "},{"type":"text","text":"order","style":{"code":true}},{"type":"text","text":" transformation, so I would leave it for a separate PR."}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"0cabefb5-7488-4fc5-a496-adda0d5fb74c","type":"message","text":"Hmmm doesn't quite work with`describe`\n\n```julia&gt; df = DataFrame(a = rand(10));\n\njulia&gt; describe(df, :a =&gt; (t -&gt; t .+ 1) =&gt; :b)\n1×2 DataFrame\n Row │ variable  a       \n     │ Symbol    Nothing \n─────┼───────────────────\n   1 │ a                 ```","user":"UBF9YRB6H","ts":"1615490222.350900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"OJ8B","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Hmmm doesn't quite work with`describe`\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> df = DataFrame(a = rand(10));\n\njulia> describe(df, :a => (t -> t .+ 1) => :b)\n1×2 DataFrame\n Row │ variable  a       \n     │ Symbol    Nothing \n─────┼───────────────────\n   1 │ a                 "}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"2da5b83d-e202-4780-b778-b440b524586d","type":"message","text":"Oh i see\n\n```julia&gt; describe(df; cols= :a =&gt; (t -&gt; t .+ 1) =&gt; :b)\n1×7 DataFrame\n Row │ variable  mean     min      median   max      nmissing  eltype   \n     │ Symbol    Float64  Float64  Float64  Float64  Int64     DataType \n─────┼──────────────────────────────────────────────────────────────────\n   1 │ b         1.54524  1.22391  1.51988  1.97496         0  Float64```\nThis might be the straw that breaks the camel's back for my support of `describe(df, :x, :y)` and have the functions be keyword arguments.","user":"UBF9YRB6H","ts":"1615490295.351100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KDAEj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh i see\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> describe(df; cols= :a => (t -> t .+ 1) => :b)\n1×7 DataFrame\n Row │ variable  mean     min      median   max      nmissing  eltype   \n     │ Symbol    Float64  Float64  Float64  Float64  Int64     DataType \n─────┼──────────────────────────────────────────────────────────────────\n   1 │ b         1.54524  1.22391  1.51988  1.97496         0  Float64"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nThis might be the straw that breaks the camel's back for my support of "},{"type":"text","text":"describe(df, :x, :y)","style":{"code":true}},{"type":"text","text":" and have the functions be keyword arguments."}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"},{"client_msg_id":"6356900e-1f2e-4140-9b12-7e0efd2c9f12","type":"message","text":"never underestimate the power of the `select` side:\n```julia&gt; describe(df; cols= [:a =&gt; (t -&gt; t .+ 1) =&gt; :b, :a =&gt; (t -&gt; t .+ 2) =&gt; :c])\n2×7 DataFrame\n Row │ variable  mean     min      median   max      nmissing  eltype   \n     │ Symbol    Float64  Float64  Float64  Float64  Int64     DataType \n─────┼──────────────────────────────────────────────────────────────────\n   1 │ b         1.41726  1.02272   1.3102  1.92721         0  Float64\n   2 │ c         2.41726  2.02272   2.3102  2.92721         0  Float64```","user":"U8JAMQGQY","ts":"1615491051.351300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=zce","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"never underestimate the power of the "},{"type":"text","text":"select","style":{"code":true}},{"type":"text","text":" side:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> describe(df; cols= [:a => (t -> t .+ 1) => :b, :a => (t -> t .+ 2) => :c])\n2×7 DataFrame\n Row │ variable  mean     min      median   max      nmissing  eltype   \n     │ Symbol    Float64  Float64  Float64  Float64  Int64     DataType \n─────┼──────────────────────────────────────────────────────────────────\n   1 │ b         1.41726  1.02272   1.3102  1.92721         0  Float64\n   2 │ c         2.41726  2.02272   2.3102  2.92721         0  Float64"}]}]}],"thread_ts":"1615484645.343400","parent_user_id":"U011V2YN59N"}]