[{"client_msg_id":"bc3d079e-32d5-4c3b-a4be-20588501aa1c","type":"message","text":"Currently have something like\n\n```\tP_hired_match = 1 - cdf(F, sqrt(1 + σ_ϵ^2) * c_v)\n\n\tP_hired = V * P_hired_match\n\n\tE_y_hired = @chain begin\n\t\tNormal(0, sqrt(1 + σ_ϵ^2))\n\t\tTruncated(c_v, +Inf)\n\t\tmean\n\tend\n\n\tE_z_hired = (1 / (1 + σ_ϵ^2)) * E_y_hired\n\n\tY = P_hired * E_z_hired\n\n\tE_w_hired = β * (E_z_hred - c_v)\n\n\tE_w_hired = P_hired * E_w_hired\n\n\tE_π_hired = (1 - β) * (E_z_hired - c_v)\n\n\tE_π = P_hired_match * E_π_hired```\nand I want to collect all these values into something where a vector of that thing is a Table.\n\n1. I don't want to re-write all the variables I made into a named tuple like `(; Y, E_w_hired...)`. That's annoying\n2. I can't add to a Dict iteratively, because then I have to type more, like `D[\"E_w_hired\"] = ...`. Also that won't be converted to a Table.\n\nI have a package I've been working on offline that can do this, but I haven't finished tests so I don't want to rely on it right now. Is there package that already solves this problem?\n\nI think I remember something like a wrapper for `Dict`s that allows `getproperty`.","user":"UBF9YRB6H","ts":"1616526171.200600","team":"T68168MUP","edited":{"user":"UBF9YRB6H","ts":"1616526196.000000"},"blocks":[{"type":"rich_text","block_id":"sGQB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Currently have something like\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"\tP_hired_match = 1 - cdf(F, sqrt(1 + σ_ϵ^2) * c_v)\n\n\tP_hired = V * P_hired_match\n\n\tE_y_hired = @chain begin\n\t\tNormal(0, sqrt(1 + σ_ϵ^2))\n\t\tTruncated(c_v, +Inf)\n\t\tmean\n\tend\n\n\tE_z_hired = (1 / (1 + σ_ϵ^2)) * E_y_hired\n\n\tY = P_hired * E_z_hired\n\n\tE_w_hired = β * (E_z_hred - c_v)\n\n\tE_w_hired = P_hired * E_w_hired\n\n\tE_π_hired = (1 - β) * (E_z_hired - c_v)\n\n\tE_π = P_hired_match * E_π_hired"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"and I want to collect all these values into something where a vector of that thing is a Table.\n\n1. I don't want to re-write all the variables I made into a named tuple like "},{"type":"text","text":"(; Y, E_w_hired...)","style":{"code":true}},{"type":"text","text":". That's annoying\n2. I can't add to a Dict iteratively, because then I have to type more, like "},{"type":"text","text":"D[\"E_w_hired\"] = ...","style":{"code":true}},{"type":"text","text":". Also that won't be converted to a Table.\n\nI have a package I've been working on offline that can do this, but I haven't finished tests so I don't want to rely on it right now. Is there package that already solves this problem?\n\nI think I remember something like a wrapper for `Dict`s that allows "},{"type":"text","text":"getproperty","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1616526171.200600","reply_count":6,"reply_users_count":2,"latest_reply":"1616528660.202100","reply_users":["UBF9YRB6H","U011QC7QLPL"],"is_locked":false,"subscribed":false},{"client_msg_id":"08a44330-5758-48a5-9c65-552022d5567e","type":"message","text":"Also, I can't just do `d.P_hired` because then I have to pre-pend `d` everywhere...","user":"UBF9YRB6H","ts":"1616526377.201100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"KPB","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, I can't just do "},{"type":"text","text":"d.P_hired","style":{"code":true}},{"type":"text","text":" because then I have to pre-pend "},{"type":"text","text":"d","style":{"code":true}},{"type":"text","text":" everywhere..."}]}]}],"thread_ts":"1616526171.200600","parent_user_id":"UBF9YRB6H"},{"client_msg_id":"b66fea34-06a2-49b0-b414-906a2a467d50","type":"message","text":"Something like\n\n```@addto P begin \n    @set x = 5\nend```\nwhich evaluates\n\n```x = 5```\nthen does `_.x = 5` on some mutable temporary variable `_`\n\nAt the end, converts `_` into a NamedTuple called `P`.","user":"UBF9YRB6H","ts":"1616526543.201300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rYCa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Something like\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@addto P begin \n    @set x = 5\nend"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nwhich evaluates\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"x = 5"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"\nthen does "},{"type":"text","text":"_.x = 5","style":{"code":true}},{"type":"text","text":" on some mutable temporary variable "},{"type":"text","text":"_","style":{"code":true}},{"type":"text","text":"\n\nAt the end, converts "},{"type":"text","text":"_","style":{"code":true}},{"type":"text","text":" into a NamedTuple called "},{"type":"text","text":"P","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1616526171.200600","parent_user_id":"UBF9YRB6H"},{"client_msg_id":"25cd3215-e218-4a07-8d1a-e41e8c4dc93f","type":"message","text":"It's deeply entangled in some closed source work, and not exactly what you're looking for, but I've solved similar problems with a big macro wrapper, like your `@addto` .  `postwalk` from <https://fluxml.ai/MacroTools.jl/stable/utilities/|MacroTools> is a really good helper, would be a big pain to write with only the stdlib.","user":"U011QC7QLPL","ts":"1616527860.201500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"fdH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's deeply entangled in some closed source work, and not exactly what you're looking for, but I've solved similar problems with a big macro wrapper, like your "},{"type":"text","text":"@addto","style":{"code":true}},{"type":"text","text":" .  "},{"type":"text","text":"postwalk","style":{"code":true}},{"type":"text","text":" from "},{"type":"link","url":"https://fluxml.ai/MacroTools.jl/stable/utilities/","text":"MacroTools"},{"type":"text","text":" is a really good helper, would be a big pain to write with only the stdlib."}]}]}],"thread_ts":"1616526171.200600","parent_user_id":"UBF9YRB6H"},{"client_msg_id":"b608c637-f454-4695-8042-cf01679b24d7","type":"message","text":"It's actually pretty manageable with normal tools\n\n```is_add(x::Expr) = x.head == :macrocall &amp;&amp; x.args[1] == Symbol(\"@add\")\nis_add(x) = false\n\nfunction add_add(arg, x)\n\t@assert arg.args[3].head === :(=)\n\tfieldname = arg.args[3].args[1]\n\tquote\n\t\t$x.$fieldname = $fieldname\n\tend\nend\n\nfunction addto_helper(x, body)\n\trewritten_args = []\n\tadds = quote end\n\tfor arg in body.args\n\t\tif is_add(arg)\n\t\t\tpush!(rewritten_args, arg.args[3])\n\t\t\tpush!(rewritten_args, add_add(arg, x))\n\t\telse\n\t\t\tpush!(rewritten_args, arg)\n\t\tend\n\tend\n\n    result = Expr(:block, rewritten_args...)\n    return result\nend\n\n\nmacro addto(x, body)\n\tesc(addto_helper(x, body))\nend```","user":"UBF9YRB6H","ts":"1616528390.201700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"XUG=K","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It's actually pretty manageable with normal tools\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"is_add(x::Expr) = x.head == :macrocall && x.args[1] == Symbol(\"@add\")\nis_add(x) = false\n\nfunction add_add(arg, x)\n\t@assert arg.args[3].head === :(=)\n\tfieldname = arg.args[3].args[1]\n\tquote\n\t\t$x.$fieldname = $fieldname\n\tend\nend\n\nfunction addto_helper(x, body)\n\trewritten_args = []\n\tadds = quote end\n\tfor arg in body.args\n\t\tif is_add(arg)\n\t\t\tpush!(rewritten_args, arg.args[3])\n\t\t\tpush!(rewritten_args, add_add(arg, x))\n\t\telse\n\t\t\tpush!(rewritten_args, arg)\n\t\tend\n\tend\n\n    result = Expr(:block, rewritten_args...)\n    return result\nend\n\n\nmacro addto(x, body)\n\tesc(addto_helper(x, body))\nend"}]}]}],"thread_ts":"1616526171.200600","parent_user_id":"UBF9YRB6H"},{"client_msg_id":"694f2a3c-1144-440e-9d34-e37eabcb7fa4","type":"message","text":"Not bad at all","user":"U011QC7QLPL","ts":"1616528593.201900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pAA=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Not bad at all"}]}]}],"thread_ts":"1616526171.200600","parent_user_id":"UBF9YRB6H"},{"client_msg_id":"d4e135ec-e7a8-4d24-b320-5499468d45a3","type":"message","text":"It feels like there was some corner case `postwalk` helped me with, but I might also be misremembering and/or solving a different problem","user":"U011QC7QLPL","ts":"1616528660.202100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"MtdO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It feels like there was some corner case "},{"type":"text","text":"postwalk","style":{"code":true}},{"type":"text","text":" helped me with, but I might also be misremembering and/or solving a different problem"}]}]}],"thread_ts":"1616526171.200600","parent_user_id":"UBF9YRB6H"}]