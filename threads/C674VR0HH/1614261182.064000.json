[{"client_msg_id":"d9b442d3-9cef-4fcf-b3c9-6436e07df13a","type":"message","text":"<@U681ELA87> et al - semi-relatedly, I’ve been working on a type provider for JSON3 that might alleviate some of the need to provide your own types.  It’s still a bit rough and I’m not sure what the best integration points are with the workflow.  My current thought is a user could provide a sample JSON, get type definitions and either directly eval it (a bit risky with namespace clashes and maybe bringing in unneeded fields), or write the result to file then use that in their work.  Is this a useful flow?  Where would this best fit into a current JSON3 reading workflow?  <https://github.com/mcmcgrath13/JSONTypeProvider.jl>","user":"UC53031QU","ts":"1614261182.064000","team":"T68168MUP","edited":{"user":"UC53031QU","ts":"1614261427.000000"},"blocks":[{"type":"rich_text","block_id":"GYWu2","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"U681ELA87"},{"type":"text","text":" et al - semi-relatedly, I’ve been working on a type provider for JSON3 that might alleviate some of the need to provide your own types.  It’s still a bit rough and I’m not sure what the best integration points are with the workflow.  My current thought is a user could provide a sample JSON, get type definitions and either directly eval it (a bit risky with namespace clashes and maybe bringing in unneeded fields), or write the result to file then use that in their work.  Is this a useful flow?  Where would this best fit into a current JSON3 reading workflow?  "},{"type":"link","url":"https://github.com/mcmcgrath13/JSONTypeProvider.jl"}]}]}],"thread_ts":"1614261182.064000","reply_count":27,"reply_users_count":2,"latest_reply":"1614274939.074800","reply_users":["U681ELA87","UC53031QU"],"subscribed":false,"reactions":[{"name":"juliaspinner","users":["U01GXNFKY6R"],"count":1}]},{"client_msg_id":"6c546288-374f-483b-b07a-ea477d289b0f","type":"message","text":"Oh nice! So I actually played around very briefly with an idea like this a couple months ago; I'll try to dig up the code. I think this is a really great idea though. My laptop is about to die, but let me go find that old code and I'll take a look at your repo too.","user":"U681ELA87","ts":"1614267883.068600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Q5v9M","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh nice! So I actually played around very briefly with an idea like this a couple months ago; I'll try to dig up the code. I think this is a really great idea though. My laptop is about to die, but let me go find that old code and I'll take a look at your repo too."}]}]}],"thread_ts":"1614261182.064000","parent_user_id":"UC53031QU","reactions":[{"name":"ok_hand","users":["UC53031QU"],"count":1}]},{"client_msg_id":"519988cd-036c-4d17-ad31-f6470dee748c","type":"message","text":"Ok, I found the old file I had played around with: <https://gist.github.com/quinnj/ece123e1d291b639fc0121178f2c353a>","user":"U681ELA87","ts":"1614271531.069100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"D9tp","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok, I found the old file I had played around with: "},{"type":"link","url":"https://gist.github.com/quinnj/ece123e1d291b639fc0121178f2c353a"}]}]}],"thread_ts":"1614261182.064000","parent_user_id":"UC53031QU"},{"client_msg_id":"326fc0a5-1e1d-4cf1-a30b-255cc6c2984e","type":"message","text":"I like the approach in `<http://JSONTypeProvider.to|JSONTypeProvider.to>_exprs` that builds the Julia Expr (my approach just generated a .jl file)","user":"U681ELA87","ts":"1614271583.069300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"8EV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I like the approach in "},{"type":"link","url":"http://JSONTypeProvider.to","text":"JSONTypeProvider.to","style":{"code":true}},{"type":"text","text":"_exprs","style":{"code":true}},{"type":"text","text":" that builds the Julia Expr (my approach just generated a .jl file)"}]}]}],"thread_ts":"1614261182.064000","parent_user_id":"UC53031QU"},{"client_msg_id":"971d1bfd-0dd3-4fa9-bcd5-cbacd4f99cf3","type":"message","text":"the algorithms seem pretty similar overall","user":"UC53031QU","ts":"1614271744.069500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"38tjJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the algorithms seem pretty similar overall"}]}]}],"thread_ts":"1614261182.064000","parent_user_id":"UC53031QU"},{"client_msg_id":"5061a700-0c18-46d3-9d36-5991e1ff3f3d","type":"message","text":"were you thinking about incorporating this into JSON3?","user":"UC53031QU","ts":"1614271802.069700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"m1gI","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"were you thinking about incorporating this into JSON3?"}]}]}],"thread_ts":"1614261182.064000","parent_user_id":"UC53031QU"},{"client_msg_id":"c9550004-34d5-430f-8813-bf8e06b067bc","type":"message","text":"I like the `Struct` struct for describing the structs, that might simplify some of the logic around named tuples I have going on (though is there value to the “raw” named tuple type? I suppose even that could be used directly assuming ordered json (as it can’t be mutable).","user":"UC53031QU","ts":"1614271993.069900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ZzMwP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I like the "},{"type":"text","text":"Struct","style":{"code":true}},{"type":"text","text":" struct for describing the structs, that might simplify some of the logic around named tuples I have going on (though is there value to the “raw” named tuple type? I suppose even that could be used directly assuming ordered json (as it can’t be mutable)."}]}]}],"thread_ts":"1614261182.064000","parent_user_id":"UC53031QU"},{"client_msg_id":"69749d17-c9cf-454f-8a3c-cc9a6ccfa061","type":"message","text":"I wasn’t exactly sure where to incorporate this, but JSON3 could be a good home.","user":"U681ELA87","ts":"1614272396.070100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"cjV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I wasn’t exactly sure where to incorporate this, but JSON3 could be a good home."}]}]}],"thread_ts":"1614261182.064000","parent_user_id":"UC53031QU"},{"client_msg_id":"7bd59a6e-b10d-44b5-8be0-addefb4d7c47","type":"message","text":"There’s this open issue about generating code from json schema too: <https://github.com/quinnj/JSON3.jl/issues/45>","user":"U681ELA87","ts":"1614272432.070300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5eLz0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"There’s this open issue about generating code from json schema too: "},{"type":"link","url":"https://github.com/quinnj/JSON3.jl/issues/45"}]}]}],"thread_ts":"1614261182.064000","parent_user_id":"UC53031QU"},{"client_msg_id":"978cc29b-9d56-4c96-a852-11f8448a667f","type":"message","text":"Yeah, I like the separation of code between generating the NamedTuple type vs. the Expr-generating.","user":"U681ELA87","ts":"1614272473.070500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"spf0","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, I like the separation of code between generating the NamedTuple type vs. the Expr-generating."}]}]}],"thread_ts":"1614261182.064000","parent_user_id":"UC53031QU"},{"client_msg_id":"27fc6d71-a9a8-4d20-912b-68edc9004fcf","type":"message","text":"the json schema issue seems related, but a bit different as that seems to assume you have a real schema instead of just samples","user":"UC53031QU","ts":"1614272627.070700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lTndl","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the json schema issue seems related, but a bit different as that seems to assume you have a real schema instead of just samples"}]}]}],"thread_ts":"1614261182.064000","parent_user_id":"UC53031QU"},{"client_msg_id":"8a501d45-a19d-4b65-b523-c02255bb3bc2","type":"message","text":"I’d be happy to work on contributing this to JSON3 if that would be a good home.  The way it’s currently written is quite specific to JSON3, though maybe it could be extended to other data sources/JSON libraries.","user":"UC53031QU","ts":"1614272749.070900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Isof","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’d be happy to work on contributing this to JSON3 if that would be a good home.  The way it’s currently written is quite specific to JSON3, though maybe it could be extended to other data sources/JSON libraries."}]}]}],"thread_ts":"1614261182.064000","parent_user_id":"UC53031QU"},{"client_msg_id":"eb31b3c1-11db-4356-b4bf-b8ca6fb1a05b","type":"message","text":"Yeah, the json schema is a bit different because it’s a formal schema spec. but there should be some overlap; like you could generate the NamedTuple from json schema or a json sample, and then generate the struct definition from that","user":"U681ELA87","ts":"1614272856.071100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"t5DzL","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, the json schema is a bit different because it’s a formal schema spec. but there should be some overlap; like you could generate the NamedTuple from json schema or a json sample, and then generate the struct definition from that"}]}]}],"thread_ts":"1614261182.064000","parent_user_id":"UC53031QU"},{"client_msg_id":"94ddcfc7-fe6a-4563-a8a2-1267f841f9f1","type":"message","text":"Yeah, I think it’d be nice to have in JSON3.jl, unless you want to keep it as a separate package, I don’t have a strong preference against that if you’d rather.","user":"U681ELA87","ts":"1614272902.071300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"=QT8","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, I think it’d be nice to have in JSON3.jl, unless you want to keep it as a separate package, I don’t have a strong preference against that if you’d rather."}]}]}],"thread_ts":"1614261182.064000","parent_user_id":"UC53031QU"},{"client_msg_id":"28e76142-c4b6-4e2e-9f2e-38d4fe2d8338","type":"message","text":"I’m thinking there’s some kind of `@generatetypes` macro that could be provided to package this up nice; like give it a json sample and it spits out the types","user":"U681ELA87","ts":"1614272964.071500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"RxhGz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I’m thinking there’s some kind of "},{"type":"text","text":"@generatetypes","style":{"code":true}},{"type":"text","text":" macro that could be provided to package this up nice; like give it a json sample and it spits out the types"}]}]}],"thread_ts":"1614261182.064000","parent_user_id":"UC53031QU"},{"client_msg_id":"9d245129-2cef-499c-8107-9c60c4e1eb0d","type":"message","text":"I think JSON3 makes a lot of sense.  It will ~probably~ definitely get more usage there :simple_smile:.","user":"UC53031QU","ts":"1614273007.071700","team":"T68168MUP","edited":{"user":"UC53031QU","ts":"1614273025.000000"},"blocks":[{"type":"rich_text","block_id":"JMyH7","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think JSON3 makes a lot of sense.  It will "},{"type":"text","text":"probably","style":{"strike":true}},{"type":"text","text":" definitely get more usage there "},{"type":"emoji","name":"simple_smile"},{"type":"text","text":"."}]}]}],"thread_ts":"1614261182.064000","parent_user_id":"UC53031QU"},{"client_msg_id":"b2548819-6dca-45c7-b49b-3bf5c2eecb1f","type":"message","text":"My main concern with making the usage too automated is namespace clashes, especially since this generates types for all of the interior objects as well.  We could `gensym` those names, but then that’s less usable once you’ve parsed into those types.  Thoughts?","user":"UC53031QU","ts":"1614273095.072100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jHkrE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"My main concern with making the usage too automated is namespace clashes, especially since this generates types for all of the interior objects as well.  We could "},{"type":"text","text":"gensym","style":{"code":true}},{"type":"text","text":" those names, but then that’s less usable once you’ve parsed into those types.  Thoughts?"}]}]}],"thread_ts":"1614261182.064000","parent_user_id":"UC53031QU"},{"client_msg_id":"08438723-8cf4-4b37-88ce-2cb599180fb3","type":"message","text":"I guess we generate a whole module for these types, so they’re locally namespaced then add an import as part of the code gen","user":"UC53031QU","ts":"1614273181.072300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xTm","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess we generate a whole module for these types, so they’re locally namespaced then add an import as part of the code gen"}]}]}],"thread_ts":"1614261182.064000","parent_user_id":"UC53031QU"},{"client_msg_id":"cb1148e9-9a34-4e7b-b668-fb200632c7e3","type":"message","text":"Yeah, that’s not a bad idea.","user":"U681ELA87","ts":"1614273210.072500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"5sCU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah, that’s not a bad idea."}]}]}],"thread_ts":"1614261182.064000","parent_user_id":"UC53031QU"},{"client_msg_id":"48eda2f1-29c9-402f-900b-0edbcf7a9b08","type":"message","text":"I guess I’m not too worried about clashes because I think most uses will be one-time calls to generate the file/ast and then they’ll copy-paste into a source application","user":"U681ELA87","ts":"1614273250.072700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"drd6t","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I guess I’m not too worried about clashes because I think most uses will be one-time calls to generate the file/ast and then they’ll copy-paste into a source application"}]}]}],"thread_ts":"1614261182.064000","parent_user_id":"UC53031QU"},{"client_msg_id":"31b4d7c6-a81b-4398-8058-bd42d9bef160","type":"message","text":"then the user could specify the module name and then use `Root` as the root struct always (or at least as a reasonable default)","user":"UC53031QU","ts":"1614273258.072900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"k6lh/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"then the user could specify the module name and then use "},{"type":"text","text":"Root","style":{"code":true}},{"type":"text","text":" as the root struct always (or at least as a reasonable default)"}]}]}],"thread_ts":"1614261182.064000","parent_user_id":"UC53031QU"},{"client_msg_id":"e1b6e92b-f1da-4b94-9ea5-759d75b57620","type":"message","text":"ah, so `@generatetypes` wouldn’t also eval","user":"UC53031QU","ts":"1614273281.073100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c68Ri","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"ah, so "},{"type":"text","text":"@generatetypes","style":{"code":true}},{"type":"text","text":" wouldn’t also eval"}]}]}],"thread_ts":"1614261182.064000","parent_user_id":"UC53031QU"},{"client_msg_id":"6136874b-f289-4a68-8abd-c47fd2466ce6","type":"message","text":"that makes sense","user":"UC53031QU","ts":"1614273284.073300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"pGaE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"that makes sense"}]}]}],"thread_ts":"1614261182.064000","parent_user_id":"UC53031QU"},{"client_msg_id":"9c445826-8489-40be-b296-7f9f1a986a76","type":"message","text":"right. so macros tend to just do the `input =&gt; Expr` transformation, so a user could include it in a source application directly in their own name-spaced modeul","user":"U681ELA87","ts":"1614273341.073500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nbca","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"right. so macros tend to just do the "},{"type":"text","text":"input => Expr","style":{"code":true}},{"type":"text","text":" transformation, so a user could include it in a source application directly in their own name-spaced modeul"}]}]}],"thread_ts":"1614261182.064000","parent_user_id":"UC53031QU","reactions":[{"name":"+1","users":["UC53031QU"],"count":1}]},{"client_msg_id":"909b0b72-ca1b-41a5-888b-fe9b1406fe4b","type":"message","text":"Ok, maybe something like this?\n```macro generatetypes(json)\n    return quote\n        json = JSON3.read(isfile($(esc(json))) ? read($(esc(json))) : $(esc(json))) # either a JSON.Array or JSON.Object\n        # build a type for the JSON\n        raw_json_type = JSONTypeProvider.build_type(json)\n        json_exprs = JSONTypeProvider.to_exprs(raw_json_type, :MyStruct)\n        exprs = Expr(:block, json_exprs...)\n        return Core.eval($__module__, exprs)\n    end\nend```\n","user":"U681ELA87","ts":"1614274710.074000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"px+","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Ok, maybe something like this?\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"macro generatetypes(json)\n    return quote\n        json = JSON3.read(isfile($(esc(json))) ? read($(esc(json))) : $(esc(json))) # either a JSON.Array or JSON.Object\n        # build a type for the JSON\n        raw_json_type = JSONTypeProvider.build_type(json)\n        json_exprs = JSONTypeProvider.to_exprs(raw_json_type, :MyStruct)\n        exprs = Expr(:block, json_exprs...)\n        return Core.eval($__module__, exprs)\n    end\nend"}]},{"type":"rich_text_section","elements":[]}]}],"thread_ts":"1614261182.064000","parent_user_id":"UC53031QU","reactions":[{"name":"thumbsup_parrot","users":["UC53031QU"],"count":1}]},{"client_msg_id":"339badef-8791-4d54-ab22-9c7ca1be5255","type":"message","text":"I like it! but maybe swap out `:MyStruct` for `:Root`","user":"UC53031QU","ts":"1614274861.074300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lFffh","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I like it! but maybe swap out "},{"type":"text","text":":MyStruct","style":{"code":true}},{"type":"text","text":" for "},{"type":"text","text":":Root","style":{"code":true}}]}]}],"thread_ts":"1614261182.064000","parent_user_id":"UC53031QU"},{"client_msg_id":"2341c17d-42d0-4c89-a0d6-a70d2869fd4a","type":"message","text":"Oh yeah, we could do `macro generatetypes(json, name=:Root)` I think so they could pass their own root name","user":"U681ELA87","ts":"1614274937.074600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"o8+oQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Oh yeah, we could do "},{"type":"text","text":"macro generatetypes(json, name=:Root)","style":{"code":true}},{"type":"text","text":" I think so they could pass their own root name"}]}]}],"thread_ts":"1614261182.064000","parent_user_id":"UC53031QU","reactions":[{"name":"rocket","users":["UC53031QU"],"count":1}]},{"client_msg_id":"d47cc9e4-d127-412d-ad33-69f0c9ae2ebe","type":"message","text":"and we’ll probably want to make that a variable so if two different files are read in, there’s no clash","user":"UC53031QU","ts":"1614274939.074800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EC9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"and we’ll probably want to make that a variable so if two different files are read in, there’s no clash"}]}]}],"thread_ts":"1614261182.064000","parent_user_id":"UC53031QU"}]