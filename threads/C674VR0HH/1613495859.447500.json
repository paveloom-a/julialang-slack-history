[{"client_msg_id":"967367ae-598c-4ed4-aa18-fa5ed7850985","type":"message","text":"What is the correct way to drop missing columns? (i.e. columns with entirely missing entries)? I’m trying to pass along a nice DataFrame example to a scientist friend with slightly messy data. CSV has lots of empty columns.\n\nPretty surprised by how difficult it is to just drop missing columns / find any documentation about this. Directly searching any variant for how to drop columns of missing data only describe the process for dropping rows with missing entries.","user":"U90JR0C80","ts":"1613495859.447500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"I6JmF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What is the correct way to drop missing columns? (i.e. columns with entirely missing entries)? I’m trying to pass along a nice DataFrame example to a scientist friend with slightly messy data. CSV has lots of empty columns.\n\nPretty surprised by how difficult it is to just drop missing columns / find any documentation about this. Directly searching any variant for how to drop columns of missing data only describe the process for dropping rows with missing entries."}]}]}],"thread_ts":"1613495859.447500","reply_count":1,"reply_users_count":1,"latest_reply":"1613496181.449500","reply_users":["UBF9YRB6H"],"subscribed":false},{"client_msg_id":"82a9c8fd-8298-4b6f-9273-00ae9eb17958","type":"message","text":"`skipmissing` looks for values of `missing`. you are expecting it to drop vectors containing missing values, which is not what it does.\n\nfwiw this is not the most intuitive thing to have a \"ready-made\" function for. So I can understand why this isnt a priority in terms of documentation.\n\n```julia&gt; nonmissing = map(eachcol(df)) do c\n           any(!ismissing, c)\n       end\n3-element Array{Bool,1}:\n 1\n 1\n 0\n\njulia&gt; df[:, nonmissing]\n3×2 DataFrame\n Row │ a      b\n     │ Int64  Int64\n─────┼──────────────\n   1 │     1      4\n   2 │     2      5\n   3 │     3      6```","user":"UBF9YRB6H","ts":"1613496181.449500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"4GUUY","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"skipmissing","style":{"code":true}},{"type":"text","text":" looks for values of "},{"type":"text","text":"missing","style":{"code":true}},{"type":"text","text":". you are expecting it to drop vectors containing missing values, which is not what it does.\n\nfwiw this is not the most intuitive thing to have a \"ready-made\" function for. So I can understand why this isnt a priority in terms of documentation.\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> nonmissing = map(eachcol(df)) do c\n           any(!ismissing, c)\n       end\n3-element Array{Bool,1}:\n 1\n 1\n 0\n\njulia> df[:, nonmissing]\n3×2 DataFrame\n Row │ a      b\n     │ Int64  Int64\n─────┼──────────────\n   1 │     1      4\n   2 │     2      5\n   3 │     3      6"}]}]}],"thread_ts":"1613495859.447500","parent_user_id":"U90JR0C80"}]