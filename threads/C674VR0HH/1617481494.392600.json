[{"client_msg_id":"8d7cb74f-29a8-49ff-9846-fc5dd247bd61","type":"message","text":"I think I have a DataFrames feature request, but I want to make sure I'm not missing something obvious before creating an issue.  The use case is creating a DataFrame from `Vector{AbstractDict}`, where the `AbstractDict` elements have mostly overlapping keys, but not exactly the same set.  Here is an example:\n```julia&gt; dicts=[Dict(:a=&gt;1, :b=&gt;2), Dict(:b=&gt;3, :c=&gt;4)]\n2-element Vector{Dict{Symbol, Int64}}:\n Dict(:a =&gt; 1, :b =&gt; 2)\n Dict(:b =&gt; 3, :c =&gt; 4)\n\njulia&gt; DataFrame(dicts)\nERROR: KeyError: key :a not found```\nIt would be great if the `DataFrame` constructor supported the `cols` keyword so the caller could get the same `cols=:union` behavior as `push!`.  My work around so far is:\n```julia&gt; reduce((df,d)-&gt;push!(df,d,cols=:union), dicts, init=DataFrame())\n2×3 DataFrame\n Row │ a        b      c       \n     │ Int64?   Int64  Int64?  \n─────┼─────────────────────────\n   1 │       1      2  missing \n   2 │ missing      3        4```\nIs there a better way to do this already or is this a feature request?","user":"U01FKQQ7J0J","ts":"1617481494.392600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jWRiH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I think I have a DataFrames feature request, but I want to make sure I'm not missing something obvious before creating an issue.  The use case is creating a DataFrame from "},{"type":"text","text":"Vector{AbstractDict}","style":{"code":true}},{"type":"text","text":", where the "},{"type":"text","text":"AbstractDict","style":{"code":true}},{"type":"text","text":" elements have mostly overlapping keys, but not exactly the same set.  Here is an example:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> dicts=[Dict(:a=>1, :b=>2), Dict(:b=>3, :c=>4)]\n2-element Vector{Dict{Symbol, Int64}}:\n Dict(:a => 1, :b => 2)\n Dict(:b => 3, :c => 4)\n\njulia> DataFrame(dicts)\nERROR: KeyError: key :a not found"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"It would be great if the "},{"type":"text","text":"DataFrame","style":{"code":true}},{"type":"text","text":" constructor supported the "},{"type":"text","text":"cols","style":{"code":true}},{"type":"text","text":" keyword so the caller could get the same "},{"type":"text","text":"cols=:union","style":{"code":true}},{"type":"text","text":" behavior as "},{"type":"text","text":"push!","style":{"code":true}},{"type":"text","text":".  My work around so far is:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> reduce((df,d)->push!(df,d,cols=:union), dicts, init=DataFrame())\n2×3 DataFrame\n Row │ a        b      c       \n     │ Int64?   Int64  Int64?  \n─────┼─────────────────────────\n   1 │       1      2  missing \n   2 │ missing      3        4"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"Is there a better way to do this already or is this a feature request?"}]}]}],"thread_ts":"1617481494.392600","reply_count":18,"reply_users_count":4,"latest_reply":"1617486310.396800","reply_users":["U8JAMQGQY","UBF9YRB6H","U01FKQQ7J0J","U681ELA87"],"is_locked":false,"subscribed":false},{"client_msg_id":"2f0d1e0d-a72b-453c-b341-c1d32b23a6aa","type":"message","text":"the `push!` approach is exactly how it is intended to be handled now. If you would make a feature request like this it should go to Tables.jl not DataFames.jl, as `DataFrame` constructor in this case just falls back to a generic mechanism provided by Tables.jl. CC <@U681ELA87>","user":"U8JAMQGQY","ts":"1617481706.392900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ok+bo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"the "},{"type":"text","text":"push!","style":{"code":true}},{"type":"text","text":" approach is exactly how it is intended to be handled now. If you would make a feature request like this it should go to Tables.jl not DataFames.jl, as "},{"type":"text","text":"DataFrame","style":{"code":true}},{"type":"text","text":" constructor in this case just falls back to a generic mechanism provided by Tables.jl. CC "},{"type":"user","user_id":"U681ELA87"}]}]}],"thread_ts":"1617481494.392600","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"b66db27c-4849-4637-8b37-c5aa12b9289b","type":"message","text":"No need to have it be on one line. This is how I would write it.\n\n```df = DataFrame()\nfor d in dicts\n    push!(df, d; cols = :union)\nend```","user":"UBF9YRB6H","ts":"1617481749.393100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uGa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No need to have it be on one line. This is how I would write it.\n\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"df = DataFrame()\nfor d in dicts\n    push!(df, d; cols = :union)\nend"}]}]}],"thread_ts":"1617481494.392600","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"336a552e-b3f0-4ab2-8d72-5fc359eafa05","type":"message","text":"Indeed it does seem to be an issue with Tables.jl, but I think there's a bit more to it:\n```julia&gt; Tables.columns(dicts)\nERROR: KeyError: key :a not found\n\njulia&gt; Tables.columns(v::Vector{&lt;:AbstractDict}) = mapreduce(keys, ∪, v)\n\njulia&gt; Tables.columns(dicts)\nSet{Symbol} with 3 elements:\n  :a   \n  :b   \n  :c   \n\njulia&gt; DataFrame(dicts)\nERROR: KeyError: key 1 not found```","user":"U01FKQQ7J0J","ts":"1617482146.393300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"SbPo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Indeed it does seem to be an issue with Tables.jl, but I think there's a bit more to it:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> Tables.columns(dicts)\nERROR: KeyError: key :a not found\n\njulia> Tables.columns(v::Vector{<:AbstractDict}) = mapreduce(keys, ∪, v)\n\njulia> Tables.columns(dicts)\nSet{Symbol} with 3 elements:\n  :a   \n  :b   \n  :c   \n\njulia> DataFrame(dicts)\nERROR: KeyError: key 1 not found"}]}]}],"thread_ts":"1617481494.392600","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"34eeed69-3fd4-4b61-959e-1a4c2244a84c","type":"message","text":"As you can see the error is thrown by Tables.jl:\n```julia&gt; using DataFrames\n\njulia&gt; dicts=[Dict(:a=&gt;1, :b=&gt;2), Dict(:b=&gt;3, :c=&gt;4)]\n2-element Vector{Dict{Symbol, Int64}}:\n Dict(:a =&gt; 1, :b =&gt; 2)\n Dict(:b =&gt; 3, :c =&gt; 4)\n\njulia&gt; DataFrame(dicts)\nERROR: KeyError: key :a not found\nStacktrace:\n  [1] getindex\n    @ ./dict.jl:482 [inlined]\n  [2] getcolumn\n    @ ~/.julia/packages/Tables/UxLRG/src/Tables.jl:138 [inlined]\n  [3] eachcolumns\n    @ ~/.julia/packages/Tables/UxLRG/src/utils.jl:120 [inlined]\n  [4] __buildcolumns(rowitr::Vector{Dict{Symbol, Int64}}, st::Int64, sch::Tables.Schema{(:a, :b), nothing}, columns::Tuple{Vector{Int64}, Vector{Int64}}, rownbr::Int64, updated::Base.RefValue{Any})\n    @ Tables ~/.julia/packages/Tables/UxLRG/src/fallbacks.jl:164\n  [5] _buildcolumns(rowitr::Vector{Dict{Symbol, Int64}}, row::Dict{Symbol, Int64}, st::Int64, sch::Tables.Schema{(:a, :b), nothing}, columns::Tuple{Tables.EmptyVector, Tables.EmptyVector}, updated::Base.RefValue{Any})\n    @ Tables ~/.julia/packages/Tables/UxLRG/src/fallbacks.jl:188\n  [6] buildcolumns\n    @ ~/.julia/packages/Tables/UxLRG/src/fallbacks.jl:217 [inlined]\n  [7] columns\n    @ ~/.julia/packages/Tables/UxLRG/src/fallbacks.jl:253 [inlined]\n  [8] DataFrame(x::Vector{Dict{Symbol, Int64}}; copycols::Bool)\n    @ DataFrames ~/.julia/packages/DataFrames/3mEXm/src/other/tables.jl:58\n  [9] DataFrame(x::Vector{Dict{Symbol, Int64}})\n    @ DataFrames ~/.julia/packages/DataFrames/3mEXm/src/other/tables.jl:49\n [10] top-level scope\n    @ REPL[3]:1```","user":"U8JAMQGQY","ts":"1617482310.393500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"bowuE","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"As you can see the error is thrown by Tables.jl:\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"julia> using DataFrames\n\njulia> dicts=[Dict(:a=>1, :b=>2), Dict(:b=>3, :c=>4)]\n2-element Vector{Dict{Symbol, Int64}}:\n Dict(:a => 1, :b => 2)\n Dict(:b => 3, :c => 4)\n\njulia> DataFrame(dicts)\nERROR: KeyError: key :a not found\nStacktrace:\n  [1] getindex\n    @ ./dict.jl:482 [inlined]\n  [2] getcolumn\n    @ ~/.julia/packages/Tables/UxLRG/src/Tables.jl:138 [inlined]\n  [3] eachcolumns\n    @ ~/.julia/packages/Tables/UxLRG/src/utils.jl:120 [inlined]\n  [4] __buildcolumns(rowitr::Vector{Dict{Symbol, Int64}}, st::Int64, sch::Tables.Schema{(:a, :b), nothing}, columns::Tuple{Vector{Int64}, Vector{Int64}}, rownbr::Int64, updated::Base.RefValue{Any})\n    @ Tables ~/.julia/packages/Tables/UxLRG/src/fallbacks.jl:164\n  [5] _buildcolumns(rowitr::Vector{Dict{Symbol, Int64}}, row::Dict{Symbol, Int64}, st::Int64, sch::Tables.Schema{(:a, :b), nothing}, columns::Tuple{Tables.EmptyVector, Tables.EmptyVector}, updated::Base.RefValue{Any})\n    @ Tables ~/.julia/packages/Tables/UxLRG/src/fallbacks.jl:188\n  [6] buildcolumns\n    @ ~/.julia/packages/Tables/UxLRG/src/fallbacks.jl:217 [inlined]\n  [7] columns\n    @ ~/.julia/packages/Tables/UxLRG/src/fallbacks.jl:253 [inlined]\n  [8] DataFrame(x::Vector{Dict{Symbol, Int64}}; copycols::Bool)\n    @ DataFrames ~/.julia/packages/DataFrames/3mEXm/src/other/tables.jl:58\n  [9] DataFrame(x::Vector{Dict{Symbol, Int64}})\n    @ DataFrames ~/.julia/packages/DataFrames/3mEXm/src/other/tables.jl:49\n [10] top-level scope\n    @ REPL[3]:1"}]}]}],"thread_ts":"1617481494.392600","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"2c6d43bf-a165-474c-999d-72ee5478431a","type":"message","text":"The stack backtrace for the `ERROR: KeyError: key 1 not found` error in my message just before yours has no Tables.jl references.","user":"U01FKQQ7J0J","ts":"1617482430.393700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uuAP","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The stack backtrace for the "},{"type":"text","text":"ERROR: KeyError: key 1 not found","style":{"code":true}},{"type":"text","text":" error in my message just before yours has no Tables.jl references."}]}]}],"thread_ts":"1617481494.392600","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"96761a42-2af0-42df-a59f-c0ce3938c274","type":"message","text":"Please make sure you are on latest DataFrames.jl and Tables.jl.","user":"U8JAMQGQY","ts":"1617482507.393900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wrkV","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Please make sure you are on latest DataFrames.jl and Tables.jl."}]}]}],"thread_ts":"1617481494.392600","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"51e5a896-31f2-42bf-96e9-ebb6f55bdd92","type":"message","text":"It should be 0.22.7 and 1.4.1 respectively.","user":"U8JAMQGQY","ts":"1617482523.394100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"q=JZ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"It should be 0.22.7 and 1.4.1 respectively."}]}]}],"thread_ts":"1617481494.392600","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"89e90020-89e8-40ac-9eb7-02153edde1ba","type":"message","text":"Or show me a full stack trace you get so that I can diagnose it.","user":"U8JAMQGQY","ts":"1617482549.394300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9eAa","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Or show me a full stack trace you get so that I can diagnose it."}]}]}],"thread_ts":"1617481494.392600","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"d7472725-7683-4f6b-a51f-f08443afefb0","type":"message","text":"```(@v1.6) pkg&gt; st DataFrames Tables\n      Status `~/.julia/environments/v1.6/Project.toml`\n  [a93c6f00] DataFrames v0.22.7\n  [bd369af6] Tables v1.4.1```","user":"U01FKQQ7J0J","ts":"1617482720.394500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"W1v","elements":[{"type":"rich_text_preformatted","elements":[{"type":"text","text":"(@v1.6) pkg> st DataFrames Tables\n      Status `~/.julia/environments/v1.6/Project.toml`\n  [a93c6f00] DataFrames v0.22.7\n  [bd369af6] Tables v1.4.1"}]}]}],"thread_ts":"1617481494.392600","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"1f79771f-072e-4b02-89f6-4c7929840e64","type":"message","text":"Tables.jl provides `Tables.dictrowtable` and `Tables.dictcolumntable` for this use-case. So in your case, I'd do `DataFrame(Tables.dictcolumntable(dicts))`","user":"U681ELA87","ts":"1617482749.394700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mPIg","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Tables.jl provides "},{"type":"text","text":"Tables.dictrowtable","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"Tables.dictcolumntable","style":{"code":true}},{"type":"text","text":" for this use-case. So in your case, I'd do "},{"type":"text","text":"DataFrame(Tables.dictcolumntable(dicts))","style":{"code":true}}]}]}],"thread_ts":"1617481494.392600","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"abe6c0d3-8dcb-49d1-b2b7-8f697b36173f","type":"message","text":"Specifically, those two methods will do the `cols=:union` behavior for generic input tables, and provide a \"table\" (`Tables.DictRowTable` and `Tables.DictColumnTable`) that are themselves tables with the unioned schema.","user":"U681ELA87","ts":"1617482816.394900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"yuv1=","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Specifically, those two methods will do the "},{"type":"text","text":"cols=:union","style":{"code":true}},{"type":"text","text":" behavior for generic input tables, and provide a \"table\" ("},{"type":"text","text":"Tables.DictRowTable","style":{"code":true}},{"type":"text","text":" and "},{"type":"text","text":"Tables.DictColumnTable","style":{"code":true}},{"type":"text","text":") that are themselves tables with the unioned schema."}]}]}],"thread_ts":"1617481494.392600","parent_user_id":"U01FKQQ7J0J","reactions":[{"name":"clapping","users":["U8JAMQGQY","UBF9YRB6H","U01FKQQ7J0J","UDXST8ARK","U7WB5HSBH"],"count":5}]},{"client_msg_id":"1c1e4835-f525-43e5-b302-e1f1a8bd2753","type":"message","text":"Maybe there's a feature request here for the DataFrame constructor to do this (optionally) for types like `Vector{&lt;:AbstractDict}`?","user":"U01FKQQ7J0J","ts":"1617483425.395400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rNK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Maybe there's a feature request here for the DataFrame constructor to do this (optionally) for types like "},{"type":"text","text":"Vector{<:AbstractDict}","style":{"code":true}},{"type":"text","text":"?"}]}]}],"thread_ts":"1617481494.392600","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"97771d40-3954-42e3-8dde-b2f38c3e04f2","type":"message","text":"That way projects wouldn't need Tables as a direct dependency to get this behavior.","user":"U01FKQQ7J0J","ts":"1617483589.395600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"mS/","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"That way projects wouldn't need Tables as a direct dependency to get this behavior."}]}]}],"thread_ts":"1617481494.392600","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"a64fd91e-a528-45b8-8c55-8c578a2a10b3","type":"message","text":"Tables.jl is exported by DataFrames.jl","user":"U8JAMQGQY","ts":"1617483759.395800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rkG","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Tables.jl is exported by DataFrames.jl"}]}]}],"thread_ts":"1617481494.392600","parent_user_id":"U01FKQQ7J0J","reactions":[{"name":"+1","users":["U01FKQQ7J0J"],"count":1}]},{"client_msg_id":"3af6ab5e-68f8-4147-86b9-da870b508f1f","type":"message","text":"Yeah maybe; I'm not sure what's more common: `Vector{&lt;:AbstractDict}` where each element has the same keys, or where they have potentially missing keys.","user":"U681ELA87","ts":"1617483783.396000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"TVs=S","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yeah maybe; I'm not sure what's more common: "},{"type":"text","text":"Vector{<:AbstractDict}","style":{"code":true}},{"type":"text","text":" where each element has the same keys, or where they have potentially missing keys."}]}]}],"thread_ts":"1617481494.392600","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"5f78f2b3-a587-43e2-b1d5-d87ab08b0b37","type":"message","text":"I can see for performance purposes it is good to assume/require that all dicts have the same set of keys, but it would be nice to have a somewhat more streamlined way to handle the case when they don't (i.e. hide the call to `Tables.dictcolumntable` inside a DataFrame constructor and provide a way to select strict vs non-strict behavior, e.g. kwarg like `cols=:union` since that's how `push!` does it.)","user":"U01FKQQ7J0J","ts":"1617484150.396300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"rE6ek","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I can see for performance purposes it is good to assume/require that all dicts have the same set of keys, but it would be nice to have a somewhat more streamlined way to handle the case when they don't (i.e. hide the call to "},{"type":"text","text":"Tables.dictcolumntable","style":{"code":true}},{"type":"text","text":" inside a DataFrame constructor and provide a way to select strict vs non-strict behavior, e.g. kwarg like "},{"type":"text","text":"cols=:union","style":{"code":true}},{"type":"text","text":" since that's how "},{"type":"text","text":"push!","style":{"code":true}},{"type":"text","text":" does it.)"}]}]}],"thread_ts":"1617481494.392600","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"9eb76ae1-4335-4073-bd79-02317e419017","type":"message","text":"The contract for `DataFrame` constructor (and there have been very long discussions about it) is that it should fall back to what Tables.jl provides except for a very limited set of cases (most of them are for legacy reasons). If `cols=:union` were to be added it would have to work the same way for all table-like sources and be consistently handled this way by Tables.jl.","user":"U8JAMQGQY","ts":"1617484480.396500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Waj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The contract for "},{"type":"text","text":"DataFrame","style":{"code":true}},{"type":"text","text":" constructor (and there have been very long discussions about it) is that it should fall back to what Tables.jl provides except for a very limited set of cases (most of them are for legacy reasons). If "},{"type":"text","text":"cols=:union","style":{"code":true}},{"type":"text","text":" were to be added it would have to work the same way for all table-like sources and be consistently handled this way by Tables.jl."}]}]}],"thread_ts":"1617481494.392600","parent_user_id":"U01FKQQ7J0J"},{"client_msg_id":"939b7713-6989-404e-b8f7-e2befc67e8da","type":"message","text":"Fair enough.  I don't think this warrants a feature request after all.  Thanks!","user":"U01FKQQ7J0J","ts":"1617486310.396800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QCgkU","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Fair enough.  I don't think this warrants a feature request after all.  Thanks!"}]}]}],"thread_ts":"1617481494.392600","parent_user_id":"U01FKQQ7J0J"}]