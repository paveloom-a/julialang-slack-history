[{"client_msg_id":"17dd4adb-d3bf-46e9-bea2-5ef40533cc86","type":"message","text":"<@UD0NS8PDF> in DataFrames 1.0 will we still need `Tables.columntable` to convert a AxisKeys `KeyedArray` into a a DataFrame?\n` df = DataFrame(DataFrames.Tables.columntable(array))`\n\nDid we deprecate  default `AbstractMatrix` constructor for DataFrames?","user":"U6A936746","ts":"1613054641.351900","team":"T68168MUP","edited":{"user":"U6A936746","ts":"1613054646.000000"},"blocks":[{"type":"rich_text","block_id":"OLzJs","elements":[{"type":"rich_text_section","elements":[{"type":"user","user_id":"UD0NS8PDF"},{"type":"text","text":" in DataFrames 1.0 will we still need "},{"type":"text","text":"Tables.columntable","style":{"code":true}},{"type":"text","text":" to convert a AxisKeys "},{"type":"text","text":"KeyedArray","style":{"code":true}},{"type":"text","text":" into a a DataFrame?\n` df = DataFrame(DataFrames.Tables.columntable(array))`\n\nDid we deprecate  default "},{"type":"text","text":"AbstractMatrix","style":{"code":true}},{"type":"text","text":" constructor for DataFrames?"}]}]}],"thread_ts":"1613054641.351900","reply_count":9,"reply_users_count":4,"latest_reply":"1613059180.354100","reply_users":["UBF9YRB6H","U8JAMQGQY","U6A936746","U67431ELR"],"subscribed":false},{"client_msg_id":"3c3c3939-a826-4fb2-88da-61381b9a611d","type":"message","text":"You have to add `:auto` as a second positional argument to work with a matrix","user":"UBF9YRB6H","ts":"1613054790.352100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"c0Myn","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You have to add "},{"type":"text","text":":auto","style":{"code":true}},{"type":"text","text":" as a second positional argument to work with a matrix"}]}]}],"thread_ts":"1613054641.351900","parent_user_id":"U6A936746"},{"client_msg_id":"d9133cf4-1e97-45c3-b6a3-8553649a59eb","type":"message","text":"or, I guess, the names actually. so maybe you want `DataFrame(x, keys(x))`","user":"UBF9YRB6H","ts":"1613054823.352300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"L/im","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"or, I guess, the names actually. so maybe you want "},{"type":"text","text":"DataFrame(x, keys(x))","style":{"code":true}}]}]}],"thread_ts":"1613054641.351900","parent_user_id":"U6A936746"},{"client_msg_id":"43fa17d5-c5cb-43b3-be5a-12ef441bf357","type":"message","text":"If `KeyedArray` is Tables.jl table, then `DataFrame(array)` will just work. This is the reason why we require `:auto` as second positional argument to disambiguate,","user":"U8JAMQGQY","ts":"1613055286.352500","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"uaz","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If "},{"type":"text","text":"KeyedArray","style":{"code":true}},{"type":"text","text":" is Tables.jl table, then "},{"type":"text","text":"DataFrame(array)","style":{"code":true}},{"type":"text","text":" will just work. This is the reason why we require "},{"type":"text","text":":auto","style":{"code":true}},{"type":"text","text":" as second positional argument to disambiguate,"}]}]}],"thread_ts":"1613054641.351900","parent_user_id":"U6A936746"},{"client_msg_id":"56bf4623-f201-4769-9886-e1d49be5914d","type":"message","text":"You can check this against `main` and it should already work there correctly.","user":"U8JAMQGQY","ts":"1613055309.352700","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"gLpbJ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You can check this against "},{"type":"text","text":"main","style":{"code":true}},{"type":"text","text":" and it should already work there correctly."}]}]}],"thread_ts":"1613054641.351900","parent_user_id":"U6A936746"},{"client_msg_id":"fa3e0cd1-0a19-48a7-bb16-a7376f39e19f","type":"message","text":"Yes, it works!","user":"U6A936746","ts":"1613056592.352900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"U+a","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, it works!"}]}]}],"thread_ts":"1613054641.351900","parent_user_id":"U6A936746"},{"client_msg_id":"b5176035-2b21-4229-9a32-01abaceaf5d5","type":"message","text":"this is the greatest","user":"U6A936746","ts":"1613056913.353100","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xYj","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"this is the greatest"}]}]}],"thread_ts":"1613054641.351900","parent_user_id":"U6A936746"},{"client_msg_id":"2cad3722-6b33-421e-b8da-40fe39238f24","type":"message","text":"The code to go from a narrow dataframe to a wide keyed array, to a narrow dataframe is so clean","user":"U6A936746","ts":"1613056939.353300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"lGeD","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The code to go from a narrow dataframe to a wide keyed array, to a narrow dataframe is so clean"}]}]}],"thread_ts":"1613054641.351900","parent_user_id":"U6A936746"},{"client_msg_id":"fcb5fb6d-2b58-4b00-80bb-8485909be1b5","type":"message","text":"What does the other operation look like? Just `KeyedArray(df)`? How does `KeyedArray` handle the ambiguous case of `AbstractMatrix` types that are also Tables.jl objects?","user":"U67431ELR","ts":"1613058168.353900","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"k/fBQ","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"What does the other operation look like? Just "},{"type":"text","text":"KeyedArray(df)","style":{"code":true}},{"type":"text","text":"? How does "},{"type":"text","text":"KeyedArray","style":{"code":true}},{"type":"text","text":" handle the ambiguous case of "},{"type":"text","text":"AbstractMatrix","style":{"code":true}},{"type":"text","text":" types that are also Tables.jl objects?"}]}]}],"thread_ts":"1613054641.351900","parent_user_id":"U6A936746"},{"type":"message","text":"it has a function `unwrap`  which corresponds to `DataFrames.unstack`","files":[{"id":"F01MU1VGC4B","created":1613059179,"timestamp":1613059179,"name":"Untitled","title":"Untitled","mimetype":"text/plain","filetype":"julia","pretty_type":"Julia","user":"U6A936746","editable":true,"size":1952,"mode":"snippet","is_external":false,"external_type":"","is_public":true,"public_url_shared":false,"display_as_bot":false,"username":"","url_private":"https://files.slack.com/files-pri/T68168MUP-F01MU1VGC4B/untitled","url_private_download":"https://files.slack.com/files-pri/T68168MUP-F01MU1VGC4B/download/untitled","permalink":"https://julialang.slack.com/files/U6A936746/F01MU1VGC4B/untitled","permalink_public":"https://slack-files.com/T68168MUP-F01MU1VGC4B-72492c4f0d","edit_link":"https://julialang.slack.com/files/U6A936746/F01MU1VGC4B/untitled/edit","preview":"julia> table = (time = repeat(now() .- (Day(1):Day(1):Day(10)),2), node=[fill(:a, 10); fill(:b,10)], value=0.1:0.1:2.0);\n\njulia> array = wrapdims(table, :value, :node, :time)\n2-dimensional KeyedArray(NamedDimsArray(...)) with keys:\n↓   node ∈ 2-element Vector{Symbol}","preview_highlight":"<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text/plain',window.getSelection().toString().replace(/\\u200b/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre><span class=\"cm-variable\">julia</span><span class=\"cm-operator\">&gt;</span> <span class=\"cm-variable\">table</span> <span class=\"cm-operator\">=</span> (<span class=\"cm-variable\">time</span> <span class=\"cm-operator\">=</span> <span class=\"cm-builtin\">repeat</span>(<span class=\"cm-builtin\">now</span>() <span class=\"cm-operator\">.</span><span class=\"cm-operator\">-</span> (<span class=\"cm-builtin\">Day</span>(<span class=\"cm-number\">1</span>)<span class=\"cm-operator\">:</span><span class=\"cm-builtin\">Day</span>(<span class=\"cm-number\">1</span>)<span class=\"cm-operator\">:</span><span class=\"cm-builtin\">Day</span>(<span class=\"cm-number\">10</span>)),<span class=\"cm-number\">2</span>), <span class=\"cm-variable\">node</span><span class=\"cm-operator\">=</span>[<span class=\"cm-builtin\">fill</span>(<span class=\"cm-builtin\">:a</span>, <span class=\"cm-number\">10</span>); <span class=\"cm-builtin\">fill</span>(<span class=\"cm-builtin\">:b</span>,<span class=\"cm-number\">10</span>)], <span class=\"cm-variable\">value</span><span class=\"cm-operator\">=</span><span class=\"cm-number\">0.1</span><span class=\"cm-operator\">:</span><span class=\"cm-number\">0.1</span><span class=\"cm-operator\">:</span><span class=\"cm-number\">2.0</span>);</pre></div>\n<div><pre>&#8203;</pre></div>\n<div><pre><span class=\"cm-variable\">julia</span><span class=\"cm-operator\">&gt;</span> <span class=\"cm-variable\">array</span> <span class=\"cm-operator\">=</span> <span class=\"cm-builtin\">wrapdims</span>(<span class=\"cm-variable\">table</span>, <span class=\"cm-builtin\">:value</span>, <span class=\"cm-builtin\">:node</span>, <span class=\"cm-builtin\">:time</span>)</pre></div>\n<div><pre><span class=\"cm-number\">2</span><span class=\"cm-operator\">-</span><span class=\"cm-variable\">dimensional</span> <span class=\"cm-builtin\">KeyedArray</span>(<span class=\"cm-builtin\">NamedDimsArray</span>(<span class=\"cm-operator\">...</span>)) <span class=\"cm-variable\">with</span> <span class=\"cm-variable\">keys</span><span class=\"cm-operator\">:</span></pre></div>\n<div><pre><span class=\"cm-variable\">↓</span>   <span class=\"cm-variable\">node</span> <span class=\"cm-operator\">∈</span> <span class=\"cm-number\">2</span><span class=\"cm-operator\">-</span><span class=\"cm-variable\">element</span> <span class=\"cm-variable\">Vector</span>{<span class=\"cm-variable\">Symbol</span>}</pre></div>\n</div>\n</div>\n","lines":36,"lines_more":31,"preview_is_truncated":true,"is_starred":false,"has_rich_preview":false}],"upload":true,"blocks":[{"type":"rich_text","block_id":"Qk=k","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"it has a function "},{"type":"text","text":"unwrap","style":{"code":true}},{"type":"text","text":"  which corresponds to "},{"type":"text","text":"DataFrames.unstack","style":{"code":true}}]}]}],"user":"U6A936746","display_as_bot":false,"ts":"1613059180.354100","client_msg_id":"1c207bb1-abb0-4fee-b397-852301496801","thread_ts":"1613054641.351900","parent_user_id":"U6A936746","reactions":[{"name":"+1","users":["U67431ELR"],"count":1}]}]