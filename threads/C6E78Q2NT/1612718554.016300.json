[{"client_msg_id":"4ebb214e-91c9-424c-9f92-8741db5ea314","type":"message","text":"If I have\n`wait(@spawnat 2 x2 = f())`\n`wait(@spawnat 2 x2 = g(x2))`\n`x1 = f(x)`\n`x1 = g(x1)`\n`x1 + fetch(x2)`\nare the commands on worker 1 running simultaneously with the commands on worker 2 or has `wait` “paused” it?","user":"U01655DR0JZ","ts":"1612718554.016300","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"Uz4L","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If I have\n"},{"type":"text","text":"wait(@spawnat 2 x2 = f())","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"wait(@spawnat 2 x2 = g(x2))","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"x1 = f(x)","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"x1 = g(x1)","style":{"code":true}},{"type":"text","text":"\n"},{"type":"text","text":"x1 + fetch(x2)","style":{"code":true}},{"type":"text","text":"\nare the commands on worker 1 running simultaneously with the commands on worker 2 or has "},{"type":"text","text":"wait","style":{"code":true}},{"type":"text","text":" “paused” it?"}]}]}],"thread_ts":"1612718554.016300","reply_count":18,"reply_users_count":2,"latest_reply":"1612745073.020000","reply_users":["U6A0PD8CR","U01655DR0JZ"],"subscribed":false},{"client_msg_id":"d0941295-1f70-4fc7-8bec-db746207f17e","type":"message","text":"The `wait` should block until the result of `@spawnat` is available","user":"U6A0PD8CR","ts":"1612720469.016400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"j7HgF","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"The "},{"type":"text","text":"wait","style":{"code":true}},{"type":"text","text":" should block until the result of "},{"type":"text","text":"@spawnat","style":{"code":true}},{"type":"text","text":" is available"}]}]}],"thread_ts":"1612718554.016300","parent_user_id":"U01655DR0JZ"},{"client_msg_id":"8bb8211e-7e43-4191-b476-c97821d1ca6b","type":"message","text":"If you don't want that behavior, save the result of `@spawnat` to a variable and `wait` on it later","user":"U6A0PD8CR","ts":"1612720522.016600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"nsK","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"If you don't want that behavior, save the result of "},{"type":"text","text":"@spawnat","style":{"code":true}},{"type":"text","text":" to a variable and "},{"type":"text","text":"wait","style":{"code":true}},{"type":"text","text":" on it later"}]}]}],"thread_ts":"1612718554.016300","parent_user_id":"U01655DR0JZ"},{"client_msg_id":"64fdad0b-c1d7-4a2d-afd8-be827bf881fc","type":"message","text":"Also, I don't think `@spawnat 2 x2 = f()` defines `x2` on the local proc, so the above code probably won't work","user":"U6A0PD8CR","ts":"1612720565.016800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"tokJO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, I don't think "},{"type":"text","text":"@spawnat 2 x2 = f()","style":{"code":true}},{"type":"text","text":" defines "},{"type":"text","text":"x2","style":{"code":true}},{"type":"text","text":" on the local proc, so the above code probably won't work"}]}]}],"thread_ts":"1612718554.016300","parent_user_id":"U01655DR0JZ"},{"client_msg_id":"8a71dd80-9205-4574-ae83-b226921a1a59","type":"message","text":"Btw, please use triple backticks (```) to post blocks of code","user":"U6A0PD8CR","ts":"1612720609.017000","team":"T68168MUP","edited":{"user":"U6A0PD8CR","ts":"1612720625.000000"},"blocks":[{"type":"rich_text","block_id":"7Ceq","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Btw, please use triple backticks (```) to post blocks of code"}]}]}],"thread_ts":"1612718554.016300","parent_user_id":"U01655DR0JZ","reactions":[{"name":"pray::skin-tone-3","users":["U01655DR0JZ"],"count":1}]},{"client_msg_id":"cd6a2982-0123-4d4c-930b-93fd973d55d5","type":"message","text":"Thank you for your response. I was afraid of that. I am using\n`eval(:(x2 = f()))`\nto (attempt to) assign to the local processor. My problem steams from the fact that I have several of these statements in a row and when I don’t use `wait` it complains my functions are not defined on Futures. I tried it with `fetch` of course but it’s unclear to me that unnecessary movement is not happening. These variables are quite large. Basically, I merely want one set of commands to happen completely on worker 2 and another on worker 1 without communication or movement between them until the very end, but I’m not getting the right combination of things to get this correct.","user":"U01655DR0JZ","ts":"1612721329.017400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"EAW","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Thank you for your response. I was afraid of that. I am using\n"},{"type":"text","text":"eval(:(x2 = f()))","style":{"code":true}},{"type":"text","text":"\nto (attempt to) assign to the local processor. My problem steams from the fact that I have several of these statements in a row and when I don’t use "},{"type":"text","text":"wait ","style":{"code":true}},{"type":"text","text":"it complains my functions are not defined on Futures. I tried it with "},{"type":"text","text":"fetch","style":{"code":true}},{"type":"text","text":" of course but it’s unclear to me that unnecessary movement is not happening. These variables are quite large. Basically, I merely want one set of commands to happen completely on worker 2 and another on worker 1 without communication or movement between them until the very end, but I’m not getting the right combination of things to get this correct."}]}]}],"thread_ts":"1612718554.016300","parent_user_id":"U01655DR0JZ"},{"client_msg_id":"a78ecf88-24cd-48a7-8ddb-39b8ec93bcaa","type":"message","text":"Also, without `wait` it was complaining that, in this example, that `x2` was an unknown variable, even while using `eval`.","user":"U01655DR0JZ","ts":"1612721379.017600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"6t=m2","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Also, without "},{"type":"text","text":"wait","style":{"code":true}},{"type":"text","text":" it was complaining that, in this example, that "},{"type":"text","text":"x2","style":{"code":true}},{"type":"text","text":" was an unknown variable, even while using "},{"type":"text","text":"eval","style":{"code":true}},{"type":"text","text":"."}]}]}],"thread_ts":"1612718554.016300","parent_user_id":"U01655DR0JZ"},{"client_msg_id":"87f507f4-e975-4a67-8c01-e045230684bc","type":"message","text":"You need to use `@everywhere f(x) = ...` to define your functions on the remote processors","user":"U6A0PD8CR","ts":"1612723926.017800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"ktFld","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"You need to use "},{"type":"text","text":"@everywhere f(x) = ...","style":{"code":true}},{"type":"text","text":" to define your functions on the remote processors"}]}]}],"thread_ts":"1612718554.016300","parent_user_id":"U01655DR0JZ"},{"client_msg_id":"dbf6e572-e6ea-4579-8503-70475baeb24b","type":"message","text":"`@spawnat` also works for that, but is probably not as efficient","user":"U6A0PD8CR","ts":"1612723944.018000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"9F5","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"@spawnat","style":{"code":true}},{"type":"text","text":" also works for that, but is probably not as efficient"}]}]}],"thread_ts":"1612718554.016300","parent_user_id":"U01655DR0JZ"},{"client_msg_id":"c1fe1289-ed05-4371-b7ed-efacb9820e4b","type":"message","text":"And don't assign to a variable on the remote proc, just `x2 = @spawnat 2 f(x)`","user":"U6A0PD8CR","ts":"1612723977.018200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"BvY3","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And don't assign to a variable on the remote proc, just "},{"type":"text","text":"x2 = @spawnat 2 f(x)","style":{"code":true}}]}]}],"thread_ts":"1612718554.016300","parent_user_id":"U01655DR0JZ"},{"client_msg_id":"9ea5933e-2025-402b-991d-e80baf85e76d","type":"message","text":"`@spawnat` returns a `Future` which holds the result for you","user":"U6A0PD8CR","ts":"1612723993.018400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"dzR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"@spawnat","style":{"code":true}},{"type":"text","text":" returns a "},{"type":"text","text":"Future","style":{"code":true}},{"type":"text","text":" which holds the result for you"}]}]}],"thread_ts":"1612718554.016300","parent_user_id":"U01655DR0JZ"},{"client_msg_id":"22330c75-c34d-4431-8fb2-9f55dc04a57a","type":"message","text":"No extra data movement should happen until you `fetch(x2)`","user":"U6A0PD8CR","ts":"1612724028.018600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"xIo","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"No extra data movement should happen until you "},{"type":"text","text":"fetch(x2)","style":{"code":true}}]}]}],"thread_ts":"1612718554.016300","parent_user_id":"U01655DR0JZ"},{"client_msg_id":"96d4c20e-32dd-494d-bccd-1cecad90fb4f","type":"message","text":"Have you read the multiprocessing documentation? <https://docs.julialang.org/en/v1/manual/distributed-computing/>","user":"U6A0PD8CR","ts":"1612724123.018800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"epX9","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Have you read the multiprocessing documentation? "},{"type":"link","url":"https://docs.julialang.org/en/v1/manual/distributed-computing/"}]}]}],"thread_ts":"1612718554.016300","parent_user_id":"U01655DR0JZ"},{"client_msg_id":"8d836fc2-91ee-4977-acb0-f6fafdd2b422","type":"message","text":"One thing you should keep in mind for general Julia programming is that, if you're using `eval`, you're probably doing it wrong (unless you're doing metaprogramming)","user":"U6A0PD8CR","ts":"1612724282.019000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"/qFH","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"One thing you should keep in mind for general Julia programming is that, if you're using "},{"type":"text","text":"eval","style":{"code":true}},{"type":"text","text":", you're probably doing it wrong (unless you're doing metaprogramming)"}]}]}],"thread_ts":"1612718554.016300","parent_user_id":"U01655DR0JZ"},{"client_msg_id":"1433ea08-3cf7-432b-9ad3-368bf4ebfd49","type":"message","text":"I have read the documentation but had a couple of questions on it. For one, if I was doing the following\n```x2 = @spawnat 2 f()\nx2 = @spawnat 2 g(fetch(x2))```\nas per the manual, and as you suggested. What wasn’t clear to me was that `x2` wasn’t being passed back to worker 1 in this process. I wanted to make absolutely sure that Julia was smart enough to not move these large variables. What I am gathering from your reply is that Julia is indeed not moving anything and it is smart enough to know where `x2` lives when `fetch` is called.","user":"U01655DR0JZ","ts":"1612727182.019200","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"qja2b","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"I have read the documentation but had a couple of questions on it. For one, if I was doing the following\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"x2 = @spawnat 2 f()\nx2 = @spawnat 2 g(fetch(x2))"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"as per the manual, and as you suggested. What wasn’t clear to me was that "},{"type":"text","text":"x2 ","style":{"code":true}},{"type":"text","text":"wasn’t being passed back to worker 1 in this process. I wanted to make absolutely sure that Julia was smart enough to not move these large variables. What I am gathering from your reply is that Julia is indeed not moving anything and it is smart enough to know where "},{"type":"text","text":"x2 ","style":{"code":true}},{"type":"text","text":"lives when "},{"type":"text","text":"fetch ","style":{"code":true}},{"type":"text","text":"is called."}]}]}],"thread_ts":"1612718554.016300","parent_user_id":"U01655DR0JZ"},{"client_msg_id":"31d4ab22-eaff-4f89-9c6e-c61c2b2e2ab2","type":"message","text":"As for `eval` , thank you for the clarification. I got on to this due to 1) stackexchange and 2) for the following commands\n```@everywhere using JLD2\nr = @spawnat 2 eval(:(@load \"file2.jld2\" VZ EZ))\n@load \"file1.jld2\" VX EX\nwait(r)```\nI could not seem to get the second macro to work with the first, although perhaps it did and I wasn’t completely understanding where this was living.","user":"U01655DR0JZ","ts":"1612727345.019400","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"jeyyR","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"As for "},{"type":"text","text":"eval ","style":{"code":true}},{"type":"text","text":", thank you for the clarification. I got on to this due to 1) stackexchange and 2) for the following commands\n"}]},{"type":"rich_text_preformatted","elements":[{"type":"text","text":"@everywhere using JLD2\nr = @spawnat 2 eval(:(@load \"file2.jld2\" VZ EZ))\n@load \"file1.jld2\" VX EX\nwait(r)"}]},{"type":"rich_text_section","elements":[{"type":"text","text":"I could not seem to get the second macro to work with the first, although perhaps it did and I wasn’t completely understanding where this was living."}]}]}],"thread_ts":"1612718554.016300","parent_user_id":"U01655DR0JZ"},{"client_msg_id":"7691ecca-0f7a-456b-a47f-5641fd0641f2","type":"message","text":"Yes, what happens with `@spawnat N ex` is that Julia creates a closure around `ex`, and sends the closure to process `N`. Immediately, process `N` creates a `Future`, and sends that back to process 1. Process `N` then goes along asynchronously executing the closure, and when it finishes execution, it places the result in the `Future` to be retrieved by process 1. At the same time, once process `N` calls `wait` or `fetch`, it sends another call to process `N` asking for the result of the `Future`, which if the `Future` hasn't yet been filled with a value, will just block until it's filled.","user":"U6A0PD8CR","ts":"1612731700.019600","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"QLO","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"Yes, what happens with "},{"type":"text","text":"@spawnat N ex","style":{"code":true}},{"type":"text","text":" is that Julia creates a closure around "},{"type":"text","text":"ex","style":{"code":true}},{"type":"text","text":", and sends the closure to process "},{"type":"text","text":"N","style":{"code":true}},{"type":"text","text":". Immediately, process "},{"type":"text","text":"N","style":{"code":true}},{"type":"text","text":" creates a "},{"type":"text","text":"Future","style":{"code":true}},{"type":"text","text":", and sends that back to process 1. Process "},{"type":"text","text":"N","style":{"code":true}},{"type":"text","text":" then goes along asynchronously executing the closure, and when it finishes execution, it places the result in the "},{"type":"text","text":"Future","style":{"code":true}},{"type":"text","text":" to be retrieved by process 1. At the same time, once process "},{"type":"text","text":"N","style":{"code":true}},{"type":"text","text":" calls "},{"type":"text","text":"wait","style":{"code":true}},{"type":"text","text":" or "},{"type":"text","text":"fetch","style":{"code":true}},{"type":"text","text":", it sends another call to process "},{"type":"text","text":"N","style":{"code":true}},{"type":"text","text":" asking for the result of the "},{"type":"text","text":"Future","style":{"code":true}},{"type":"text","text":", which if the "},{"type":"text","text":"Future","style":{"code":true}},{"type":"text","text":" hasn't yet been filled with a value, will just block until it's filled."}]}]}],"thread_ts":"1612718554.016300","parent_user_id":"U01655DR0JZ"},{"client_msg_id":"42210db5-3e5b-4b2f-af73-e5ea0b2acc8d","type":"message","text":"And in the case above, you can use `eval` if you want, although you might be better of with plain `load` from FileIO (which knows how to handle loading JLD files) without the `eval`","user":"U6A0PD8CR","ts":"1612731963.019800","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"HwRxA","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"And in the case above, you can use "},{"type":"text","text":"eval","style":{"code":true}},{"type":"text","text":" if you want, although you might be better of with plain "},{"type":"text","text":"load","style":{"code":true}},{"type":"text","text":" from FileIO (which knows how to handle loading JLD files) without the "},{"type":"text","text":"eval","style":{"code":true}}]}]}],"thread_ts":"1612718554.016300","parent_user_id":"U01655DR0JZ"},{"client_msg_id":"ff190f71-bd95-4fc8-87e1-cbf9cdc33449","type":"message","text":"FileIO is indeed twice as fast as JLD2 in my test code. Thank you for the tip and the rest of your help. I believe everything is working as intended now and in “the Julia way”. :pray::skin-tone-3:","user":"U01655DR0JZ","ts":"1612745073.020000","team":"T68168MUP","blocks":[{"type":"rich_text","block_id":"wf+2A","elements":[{"type":"rich_text_section","elements":[{"type":"text","text":"FileIO is indeed twice as fast as JLD2 in my test code. Thank you for the tip and the rest of your help. I believe everything is working as intended now and in “the Julia way”. "},{"type":"emoji","name":"pray","skin_tone":3}]}]}],"thread_ts":"1612718554.016300","parent_user_id":"U01655DR0JZ"}]